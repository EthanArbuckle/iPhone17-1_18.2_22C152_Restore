void __Block_byref_object_dispose__8_7019(uint64_t a1)
{
  void *v2;
  uint64_t vars8;

  std::__hash_table<std::__hash_value_type<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::DottedRouteLineBatchKey,std::__hash_value_type<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,std::hash<md::DottedRouteLineBatchKey>,std::equal_to<md::DottedRouteLineBatchKey>,true>,std::__unordered_map_equal<md::DottedRouteLineBatchKey,std::__hash_value_type<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,std::equal_to<md::DottedRouteLineBatchKey>,std::hash<md::DottedRouteLineBatchKey>,true>,std::allocator<std::__hash_value_type<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*(void ***)(a1 + 64));
  v2 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2)
  {
    operator delete(v2);
  }
}

md::RouteLineRibbon *md::RouteLineRibbon::RouteLineRibbon(md::RouteLineRibbon *this, unint64_t a2)
{
  *(_OWORD *)((char *)this + 49) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((void *)this + 7) = a2;
  *(void *)this = &unk_1EF553D90;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 9) = 0;
  if (a2)
  {
    *((void *)this + 11) = a2;
    {
      operator new();
    }
    *((void *)this + 9) = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                          + 16))(mdm::Allocator::instance(void)::alloc, 12 * a2, 8);
    *((unsigned char *)this + 64) = 1;
  }
  *((_WORD *)this + 48) = 0;
  *(void *)this = &unk_1EF5353A0;
  *(void *)((char *)this + 100) = 0;
  *(void *)((char *)this + 116) = 0;
  *(void *)((char *)this + 108) = 0;
  *((_DWORD *)this + 31) = 0;
  if (a2)
  {
    if (a2 >= 0x1555555555555556) {
      abort();
    }
    v4 = (char *)operator new(12 * a2);
    *((void *)this + 13) = v4;
    *((void *)this + 15) = &v4[12 * a2];
    size_t v5 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v4, v5);
    *((void *)this + 14) = &v4[v5];
  }
  return this;
}

void sub_1A1FDC0D4(_Unwind_Exception *a1)
{
  md::Ribbons::SmoothRibbon<gm::Matrix<float,3,1>>::~SmoothRibbon(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::RouteLineBatchKey,std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,std::hash<md::RouteLineBatchKey>,std::equal_to<md::RouteLineBatchKey>,true>,std::__unordered_map_equal<md::RouteLineBatchKey,std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,std::equal_to<md::RouteLineBatchKey>,std::hash<md::RouteLineBatchKey>,true>,std::allocator<std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>>>::__emplace_unique_key_args<md::RouteLineBatchKey,std::piecewise_construct_t const&,std::tuple<md::RouteLineBatchKey const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = a1[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
    v11 = *(void ***)(*a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v15 = a1 + 2;
  v12 = operator new(0x38uLL);
  void *v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  v12[3] = 0;
  v12[4] = 0;
  v12[5] = 0;
  {
    operator new();
  }
  v12[6] = mdm::Allocator::instance(void)::alloc;
  float v16 = (float)(unint64_t)(a1[3] + 1);
  float v17 = *((float *)a1 + 8);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t prime = v20;
    }
    else {
      size_t prime = v19;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v9 = a1[1];
    if (prime <= v9)
    {
      if (prime >= v9) {
        goto LABEL_60;
      }
      unint64_t v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (prime <= v32) {
        size_t prime = v32;
      }
      if (prime >= v9)
      {
        unint64_t v9 = a1[1];
LABEL_60:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v3 = v8 % v9;
          }
          else {
            unint64_t v3 = v8;
          }
        }
        else
        {
          unint64_t v3 = (v9 - 1) & v8;
        }
        goto LABEL_73;
      }
      if (!prime)
      {
        v42 = (void *)*a1;
        *a1 = 0;
        if (v42) {
          operator delete(v42);
        }
        unint64_t v9 = 0;
        a1[1] = 0;
        goto LABEL_60;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    v22 = operator new(8 * prime);
    v23 = (void *)*a1;
    *a1 = (uint64_t)v22;
    if (v23) {
      operator delete(v23);
    }
    uint64_t v24 = 0;
    a1[1] = prime;
    do
      *(void *)(*a1 + 8 * v24++) = 0;
    while (prime != v24);
    v25 = (void *)*v15;
    if (!*v15)
    {
LABEL_59:
      unint64_t v9 = prime;
      goto LABEL_60;
    }
    size_t v26 = v25[1];
    size_t v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v28 = v26 & v27;
      *(void *)(*a1 + 8 * v28) = v15;
      for (i = (void *)*v25; *v25; i = (void *)*v25)
      {
        size_t v30 = i[1] & v27;
        if (v30 == v28)
        {
          v25 = i;
        }
        else if (*(void *)(*a1 + 8 * v30))
        {
          void *v25 = *i;
          uint64_t v31 = 8 * v30;
          void *i = **(void **)(*a1 + v31);
          **(void **)(*a1 + v31) = i;
        }
        else
        {
          *(void *)(*a1 + 8 * v30) = v25;
          v25 = i;
          size_t v28 = v30;
        }
      }
      goto LABEL_59;
    }
    if (v26 >= prime) {
      v26 %= prime;
    }
    *(void *)(*a1 + 8 * v26) = v15;
    v35 = (void *)*v25;
    if (!*v25) {
      goto LABEL_59;
    }
    while (1)
    {
      size_t v37 = v35[1];
      if (v37 >= prime) {
        v37 %= prime;
      }
      if (v37 != v26)
      {
        if (!*(void *)(*a1 + 8 * v37))
        {
          *(void *)(*a1 + 8 * v37) = v25;
          goto LABEL_64;
        }
        void *v25 = *v35;
        uint64_t v36 = 8 * v37;
        void *v35 = **(void **)(*a1 + v36);
        **(void **)(*a1 + v36) = v35;
        v35 = v25;
      }
      size_t v37 = v26;
LABEL_64:
      v25 = v35;
      v35 = (void *)*v35;
      size_t v26 = v37;
      if (!v35) {
        goto LABEL_59;
      }
    }
  }
LABEL_73:
  uint64_t v38 = *a1;
  v39 = *(void **)(*a1 + 8 * v3);
  if (v39)
  {
    void *v12 = *v39;
LABEL_81:
    void *v39 = v12;
    goto LABEL_82;
  }
  void *v12 = *v15;
  void *v15 = v12;
  *(void *)(v38 + 8 * v3) = v15;
  if (*v12)
  {
    unint64_t v40 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v40 >= v9) {
        v40 %= v9;
      }
    }
    else
    {
      v40 &= v9 - 1;
    }
    v39 = (void *)(*a1 + 8 * v40);
    goto LABEL_81;
  }
LABEL_82:
  ++a1[3];
  return v12;
}

void sub_1A1FDC5E4(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

void *std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>::__emplace_back_slow_path<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61) {
    abort();
  }
  uint64_t v5 = *(void *)(a1 + 16) - *(void *)a1;
  if (v5 >> 2 > v3) {
    unint64_t v3 = v5 >> 2;
  }
  BOOL v19 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF8;
  uint64_t v6 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v19) {
    uint64_t v6 = v3;
  }
  if (v6)
  {
    uint64_t v8 = 8 * v6;
    uint64_t v9 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), 8 * v6, 8);
    uint8x8_t v10 = (void *)(v9 + 8 * v2);
    uint64_t v6 = v9 + v8;
    if (v9)
    {
      uint64_t v11 = *a2;
      *a2 = 0;
      *uint8x8_t v10 = v11;
    }
  }
  else
  {
    uint8x8_t v10 = (void *)(8 * v2);
  }
  v12 = v10 + 1;
  unint64_t v13 = *(char **)a1;
  uint64_t v14 = *(char **)(a1 + 8);
  if (v14 == *(char **)a1)
  {
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v12;
    uint64_t v29 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v6;
    goto LABEL_32;
  }
  unint64_t v15 = (unint64_t)&v14[-*(void *)a1 - 8];
  if (v15 <= 0x57
    || ((unint64_t v16 = (v13 - v14 + 7) & 0xFFFFFFFFFFFFFFF8,
         unint64_t v17 = (unint64_t)&v14[v16],
         BOOL v18 = (char *)v10 + v16,
         v17 < (unint64_t)v10)
      ? (BOOL v19 = v18 >= v14)
      : (BOOL v19 = 1),
        !v19))
  {
    v21 = *(char **)(a1 + 8);
    do
    {
LABEL_22:
      uint64_t v27 = *((void *)v21 - 1);
      v21 -= 8;
      *(void *)v21 = 0;
      *--uint8x8_t v10 = v27;
    }
    while (v21 != v13);
    goto LABEL_23;
  }
  uint64_t v20 = (v15 >> 3) + 1;
  v21 = &v14[-8 * (v20 & 0x3FFFFFFFFFFFFFFCLL)];
  v22 = v10 - 2;
  v23 = v14 - 32;
  uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v26 = *(_OWORD *)v23;
    long long v25 = *((_OWORD *)v23 + 1);
    *(_OWORD *)v23 = 0uLL;
    *((_OWORD *)v23 + 1) = 0uLL;
    v23 -= 32;
    *(v22 - 1) = v26;
    _OWORD *v22 = v25;
    v22 -= 2;
    v24 -= 4;
  }
  while (v24);
  v10 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
  if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_22;
  }
LABEL_23:
  uint64_t v14 = *(char **)a1;
  size_t v28 = *(char **)(a1 + 8);
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v12;
  uint64_t v29 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v6;
  while (v28 != v14)
  {
    uint64_t v31 = (void (***)(void))*((void *)v28 - 1);
    v28 -= 8;
    size_t v30 = v31;
    *(void *)size_t v28 = 0;
    if (v31)
    {
      (**v30)(v30);
      {
        operator new();
      }
      (*(void (**)(uint64_t, void (***)(void), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                              + 40))(mdm::Allocator::instance(void)::alloc, v30, 128);
    }
  }
LABEL_32:
  if (v14) {
    (*(void (**)(void, char *, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v14, v29 - (void)v14);
  }
  return v12;
}

void ___ZN2md16RouteRenderLayer19buildRouteLineLayerERKNS_13LayoutContextERKNSt3__110shared_ptrINS_16RouteLineOverlayEEE_block_invoke()
{
}

void sub_1A1FDC9C8(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10A1C4040AFBFB1);
  _Unwind_Resume(a1);
}

void ___ZN2md16RouteRenderLayer19buildRouteLineLayerERKNS_13LayoutContextERKNSt3__110shared_ptrINS_16RouteLineOverlayEEE_block_invoke_2()
{
}

void sub_1A1FDCAE4(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10A1C40F1F7E4C6);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::DottedRouteLineBatchKey,std::__hash_value_type<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,std::hash<md::DottedRouteLineBatchKey>,std::equal_to<md::DottedRouteLineBatchKey>,true>,std::__unordered_map_equal<md::DottedRouteLineBatchKey,std::__hash_value_type<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,std::equal_to<md::DottedRouteLineBatchKey>,std::hash<md::DottedRouteLineBatchKey>,true>,std::allocator<std::__hash_value_type<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>>>::__deallocate_node(void **a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      unint64_t v3 = (void **)*v1;
      v4 = v1[3];
      if (v4)
      {
        uint64_t v5 = v1[4];
        uint64_t v2 = v1[3];
        if (v5 != v4)
        {
          do
          {
            unint64_t v7 = (void (***)(void, void *))*--v5;
            uint64_t v6 = v7;
            *uint64_t v5 = 0;
            if (v7)
            {
              (**v6)(v6, v2);
              {
                  operator new();
              }
              (*(void (**)(uint64_t, void (***)(void, void *), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                              + 40))(mdm::Allocator::instance(void)::alloc, v6, 112);
            }
          }
          while (v5 != v4);
          uint64_t v2 = v1[3];
        }
        v1[4] = v4;
        (*(void (**)(void *, unsigned char *, int64_t))(*(void *)v1[6] + 40))(v1[6], v2, (unsigned char *)v1[5] - v2);
      }
      operator delete(v1);
      uint64_t v1 = v3;
    }
    while (v3);
  }
}

void std::__hash_table<std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::RouteLineBatchKey,std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,std::hash<md::RouteLineBatchKey>,std::equal_to<md::RouteLineBatchKey>,true>,std::__unordered_map_equal<md::RouteLineBatchKey,std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,std::equal_to<md::RouteLineBatchKey>,std::hash<md::RouteLineBatchKey>,true>,std::allocator<std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>>>::__deallocate_node(void **a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      unint64_t v3 = (void **)*v1;
      v4 = v1[3];
      if (v4)
      {
        uint64_t v5 = v1[4];
        uint64_t v2 = v1[3];
        if (v5 != v4)
        {
          do
          {
            unint64_t v7 = (void (***)(void, void *))*--v5;
            uint64_t v6 = v7;
            *uint64_t v5 = 0;
            if (v7)
            {
              (**v6)(v6, v2);
              {
                  operator new();
              }
              (*(void (**)(uint64_t, void (***)(void, void *), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                              + 40))(mdm::Allocator::instance(void)::alloc, v6, 128);
            }
          }
          while (v5 != v4);
          uint64_t v2 = v1[3];
        }
        v1[4] = v4;
        (*(void (**)(void *, unsigned char *, int64_t))(*(void *)v1[6] + 40))(v1[6], v2, (unsigned char *)v1[5] - v2);
      }
      operator delete(v1);
      uint64_t v1 = v3;
    }
    while (v3);
  }
}

uint64_t std::unordered_map<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::DottedRouteLineBatchKey,std::__hash_value_type<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,std::hash<md::DottedRouteLineBatchKey>,std::equal_to<md::DottedRouteLineBatchKey>,true>,std::__unordered_map_equal<md::DottedRouteLineBatchKey,std::__hash_value_type<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>,std::equal_to<md::DottedRouteLineBatchKey>,std::hash<md::DottedRouteLineBatchKey>,true>,std::allocator<std::__hash_value_type<md::DottedRouteLineBatchKey,std::vector<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::DottedRouteLineRibbon,mdm::TypeDeleter<md::DottedRouteLineRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t std::unordered_map<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,std::__unordered_map_hasher<md::RouteLineBatchKey,std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,std::hash<md::RouteLineBatchKey>,std::equal_to<md::RouteLineBatchKey>,true>,std::__unordered_map_equal<md::RouteLineBatchKey,std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,std::equal_to<md::RouteLineBatchKey>,std::hash<md::RouteLineBatchKey>,true>,std::allocator<std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>>>::__deallocate_node(*(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::RouteLineBatchKey,std::vector<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,geo::StdAllocator<std::unique_ptr<md::RouteLineRibbon,mdm::TypeDeleter<md::RouteLineRibbon>>,mdm::Allocator>>>,void *>>>::operator()[abi:nn180100](char a1, void *__p)
{
  if (a1)
  {
    unint64_t v3 = (void *)__p[3];
    if (v3)
    {
      v4 = (void *)__p[4];
      uint64_t v5 = __p[3];
      if (v4 != v3)
      {
        do
        {
          unint64_t v7 = (void (***)(void, uint64_t))*--v4;
          uint64_t v6 = v7;
          void *v4 = 0;
          if (v7)
          {
            (**v6)(v6, v5);
            {
              operator new();
            }
            (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                             + 40))(mdm::Allocator::instance(void)::alloc, v6, 128);
          }
        }
        while (v4 != v3);
        uint64_t v5 = __p[3];
      }
      __p[4] = v3;
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)__p[6] + 40))(__p[6], v5, __p[5] - v5);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

unint64_t md::RibbonPointsSource::size(md::RibbonPointsSource *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 2);
}

uint64_t md::RibbonPointsSource::speed(md::RibbonPointsSource *this, uint64_t a2)
{
  return *(unsigned __int8 *)(*((void *)this + 5) + a2);
}

uint64_t md::RibbonPointsSource::operator[](uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) + 12 * a2;
}

void md::RibbonPointsSource::~RibbonPointsSource(md::RibbonPointsSource *this)
{
  *(void *)this = &unk_1EF53A6E0;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 8) + 40))(*((void *)this + 8), v2, *((void *)this + 7) - v2);
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 4) + 40))(*((void *)this + 4), v3, *((void *)this + 3) - v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_1EF53A6E0;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 8) + 40))(*((void *)this + 8), v2, *((void *)this + 7) - v2);
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 4) + 40))(*((void *)this + 4), v3, *((void *)this + 3) - v3);
  }
}

void md::RouteLineRibbon::~RouteLineRibbon(md::RouteLineRibbon *this)
{
  *(void *)this = &unk_1EF5353A0;
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1EF553D90;
  if (*((unsigned char *)this + 64))
  {
    uint64_t v3 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      uint64_t v3 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (v4) {
        operator new();
      }
    }
    (*(void (**)(void, void, void))(**((void **)v3 + 91) + 40))(*((void *)v3 + 91), *((void *)this + 9), 0);
  }
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  float *v3;
  int v4;

  *(void *)this = &unk_1EF5353A0;
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1EF553D90;
  if (*((unsigned char *)this + 64))
  {
    uint64_t v3 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      uint64_t v3 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (v4) {
        operator new();
      }
    }
    (*(void (**)(void, void, void))(**((void **)v3 + 91) + 40))(*((void *)v3 + 91), *((void *)this + 9), 0);
  }
}

void __destroy_helper_block_ea8_32c49_ZTSNSt3__110shared_ptrIN2md16RouteLineOverlayEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t __copy_helper_block_ea8_32c49_ZTSNSt3__110shared_ptrIN2md16RouteLineOverlayEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5726A8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF5726A8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
}

uint64_t std::__function::__func<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF572660;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF572660;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::RouteRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
}

void md::RouteRenderLayer::~RouteRenderLayer(md::RouteRenderLayer *this)
{
  md::RouteRenderLayer::~RouteRenderLayer(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t *v2;
  md::RouteLayoutInfo **v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  md::RouteLayoutInfo *v13;
  md::CRouteRenderResources *v14;
  void *v15;

  *(void *)this = &unk_1EF5369A8;
  uint64_t v3 = (md::RouteLayoutInfo **)((char *)this + 64);
  uint64_t v2 = (uint64_t *)*((void *)this + 8);
  int v4 = *v2;
  uint64_t v5 = v2[1];
  while (v4 != v5)
  {
    uint64_t v6 = *(void **)v4;
    unint64_t v7 = *(void **)(*(void *)v4 + 176);
    if (v7)
    {
      [v7 stop];
      uint64_t v6 = *(void **)v4;
    }
    uint64_t v8 = (void *)v6[23];
    if (v8)
    {
      [v8 stop];
      uint64_t v6 = *(void **)v4;
    }
    uint64_t v9 = (void *)v6[24];
    if (v9)
    {
      [v9 stop];
      uint64_t v6 = *(void **)v4;
    }
    uint8x8_t v10 = (void *)v6[87];
    if (v10) {
      [v10 stop];
    }
    v4 += 16;
  }
  uint64_t v11 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  v12 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 48))(v12);
  }
  unint64_t v13 = *v3;
  *uint64_t v3 = 0;
  if (v13)
  {
    md::RouteLayoutInfo::~RouteLayoutInfo(v13);
    MEMORY[0x1A6239270]();
  }
  uint64_t v14 = (md::CRouteRenderResources *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v14)
  {
    md::CRouteRenderResources::~CRouteRenderResources(v14);
    MEMORY[0x1A6239270]();
  }
  *(void *)this = &unk_1EF530C60;
  unint64_t v15 = (void *)*((void *)this + 1);
  if (v15)
  {
    *((void *)this + 2) = v15;
    operator delete(v15);
  }
}

void sub_1A1FDD764(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 112);
  *(void *)(v1 + 112) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(v1 + 72);
  *(void *)(v1 + 72) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 48))(v5);
  }
  std::unique_ptr<md::RouteLayoutInfo>::~unique_ptr[abi:nn180100](v2);
  std::unique_ptr<md::CRouteRenderResources>::~unique_ptr[abi:nn180100]((md::CRouteRenderResources **)(v1 + 56));
  *(void *)uint64_t v1 = &unk_1EF530C60;
  uint64_t v6 = *(void **)(v1 + 8);
  if (v6)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

md::RouteLayoutInfo **std::unique_ptr<md::RouteLayoutInfo>::~unique_ptr[abi:nn180100](md::RouteLayoutInfo **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::RouteLayoutInfo::~RouteLayoutInfo(v2);
    MEMORY[0x1A6239270]();
  }
  return a1;
}

md::CRouteRenderResources **std::unique_ptr<md::CRouteRenderResources>::~unique_ptr[abi:nn180100](md::CRouteRenderResources **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::CRouteRenderResources::~CRouteRenderResources(v2);
    MEMORY[0x1A6239270]();
  }
  return a1;
}

void md::RouteRenderLayer::setElevatedRoutelineMatrix(md::LayoutContext *a1, uint64_t *a2)
{
  unsigned int v4 = *(unsigned __int8 *)(md::LayoutContext::frameState(a1) + 128) - 1;
  uint64_t v5 = *(void **)(*a2 + 160);
  if (v5)
  {
    [v5 bounds];
    if (v4 < 3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  memset(v67, 0, sizeof(v67));
  float64x2_t v66 = 0u;
  if (v4 >= 3)
  {
LABEL_3:
    v67[0].f64[0] = v67[0].f64[0] * 0.0000000249532021;
    v67[1].f64[1] = v67[1].f64[1] * 0.0000000249532021;
  }
LABEL_4:
  uint64_t v6 = (void *)*((void *)a1 + 1);
  int8x8_t v7 = (int8x8_t)v6[1];
  if ((*(void *)&v7 & (*(void *)&v7 - 1)) != 0)
  {
    unint64_t v9 = 0x8BD499FBD96FBB9ELL;
    if (*(void *)&v7 <= 0x8BD499FBD96FBB9ELL) {
      unint64_t v9 = 0x8BD499FBD96FBB9ELL % *(void *)&v7;
    }
    uint64_t v8 = *(void **)(*v6 + 8 * v9);
    do
    {
      do
        uint64_t v8 = (void *)*v8;
      while (v8[1] != 0x8BD499FBD96FBB9ELL);
    }
    while (v8[2] != 0x8BD499FBD96FBB9ELL);
  }
  else
  {
    uint64_t v8 = *(void **)(*v6 + 8 * ((*(void *)&v7 - 1) & 0x8BD499FBD96FBB9ELL));
    do
    {
      do
        uint64_t v8 = (void *)*v8;
      while (v8[1] != 0x8BD499FBD96FBB9ELL);
    }
    while (v8[2] != 0x8BD499FBD96FBB9ELL);
  }
  double v10 = (float)(*(float *)(*(void *)(v8[5] + 32) + 16) * *(float *)(*(void *)(v8[5] + 32) + 20));
  double v11 = v67[0].f64[0] * v10;
  double v12 = v67[1].f64[1] * v10;
  v67[0].f64[0] = v11;
  v67[1].f64[1] = v12;
  float64x2_t v13 = v66;
  v65[0] = v66;
  v65[1] = *(float64x2_t *)((char *)v67 + 8);
  if (v4 > 2)
  {
    long long v30 = 0uLL;
    memset(v62, 0, sizeof(v62));
    long long v61 = 0u;
    long long v60 = 0u;
    memset(&v59[8], 0, 32);
    float64x2_t v31 = vsubq_f64(*(float64x2_t *)((char *)v67 + 8), v66);
    long long v33 = *(unint64_t *)&v31.f64[1];
    v31.f64[1] = 0.0;
    *((void *)&v36 + 1) = 0;
    *(double *)&long long v36 = v12 - v11;
    __asm { FMOV            V6.2D, #1.0 }
    *(double *)&_Q6 = v11;
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    long long v34 = 0uLL;
  }
  else
  {
    v79[0] = v66;
    v79[1] = *(float64x2_t *)((char *)v67 + 8);
    gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)&v68, (double *)v79, v11, v12);
    long long v85 = 0u;
    uint64_t v87 = 0;
    uint64_t v89 = 0;
    long long v86 = 0u;
    memset(&v84[8], 0, 32);
    long long v90 = v74;
    double v91 = v75;
    uint64_t v92 = 0x3FF0000000000000;
    *(double *)v84 = v76 - *(double *)&v74;
    *(double *)&long long v85 = v77 - *((double *)&v74 + 1);
    double v88 = v78 - v75;
    double v14 = v71;
    double v15 = v72;
    double v16 = v14 + v14;
    double v17 = (v14 + v14) * v14;
    double v18 = (v15 + v15) * v15;
    double v19 = v70;
    double v20 = (v19 + v19) * v71;
    double v21 = (v15 + v15) * v73;
    double v22 = v20 - v21;
    double v23 = v72 * (v19 + v19);
    double v24 = v73 * v16;
    double v25 = v21 + v20;
    double v26 = v73 * v16 + v23;
    double v27 = 1.0 - (v19 + v19) * v19;
    double v28 = v16 * v72;
    double v29 = v73 * (v19 + v19);
    v80[0] = 1.0 - (v17 + v18);
    v80[1] = v25;
    v80[4] = v22;
    v80[5] = v27 - v18;
    v80[8] = v26;
    v80[9] = v28 - v29;
    v80[2] = v23 - v24;
    v80[6] = v29 + v28;
    v80[10] = v27 - v17;
    v80[3] = 0.0;
    v80[7] = 0.0;
    v80[11] = 0.0;
    long long v81 = v68;
    uint64_t v82 = v69;
    uint64_t v83 = 0x3FF0000000000000;
    gm::operator*<double,4,4,4>((double *)v59, v80, (double *)v84);
    float64x2_t v31 = *(float64x2_t *)v59;
    long long v30 = *(_OWORD *)&v59[16];
    uint64_t v32 = *(void *)&v59[32];
    long long v33 = v60;
    long long v34 = v61;
    uint64_t v35 = v62[0];
    long long v36 = *(_OWORD *)&v62[1];
    float64x2_t v13 = v63;
    _Q6 = v64;
    uint64_t v6 = (void *)*((void *)a1 + 1);
    int8x8_t v7 = (int8x8_t)v6[1];
  }
  uint64_t v42 = *a2;
  *(float64x2_t *)(v42 + 8) = v31;
  *(_OWORD *)(v42 + 24) = v30;
  *(void *)(v42 + 40) = v32;
  *(_OWORD *)(v42 + 48) = v33;
  *(_OWORD *)(v42 + 64) = v34;
  *(void *)(v42 + 80) = v35;
  *(_OWORD *)(v42 + 88) = v36;
  *(float64x2_t *)(v42 + 104) = v13;
  *(_OWORD *)(v42 + 120) = _Q6;
  float v43 = 0.0;
  if (v7)
  {
    uint8x8_t v44 = (uint8x8_t)vcnt_s8(v7);
    v44.i16[0] = vaddlv_u8(v44);
    if (v44.u32[0] > 1uLL)
    {
      uint64_t v45 = 0x1B8B241A8D896A1DLL;
      if (*(void *)&v7 <= 0x1B8B241A8D896A1DuLL) {
        uint64_t v45 = 0x1B8B241A8D896A1DuLL % *(void *)&v7;
      }
    }
    else
    {
      uint64_t v45 = (*(void *)&v7 - 1) & 0x1B8B241A8D896A1DLL;
    }
    v46 = *(void **)(*v6 + 8 * v45);
    if (v46)
    {
      v47 = (void *)*v46;
      if (v47)
      {
        if (v44.u32[0] < 2uLL)
        {
          uint64_t v48 = *(void *)&v7 - 1;
          while (1)
          {
            uint64_t v50 = v47[1];
            if (v50 == 0x1B8B241A8D896A1DLL)
            {
              if (v47[2] == 0x1B8B241A8D896A1DLL) {
                goto LABEL_40;
              }
            }
            else if ((v50 & v48) != v45)
            {
              goto LABEL_43;
            }
            v47 = (void *)*v47;
            if (!v47) {
              goto LABEL_43;
            }
          }
        }
        do
        {
          unint64_t v49 = v47[1];
          if (v49 == 0x1B8B241A8D896A1DLL)
          {
            if (v47[2] == 0x1B8B241A8D896A1DLL)
            {
LABEL_40:
              uint64_t v51 = v47[5];
              if (*(void *)(v51 + 8) == 0x1B8B241A8D896A1DLL)
              {
                uint64_t v52 = *(void *)(v51 + 32);
                if (v52) {
                  float v43 = *(float *)(v52 + 88);
                }
              }
              break;
            }
          }
          else
          {
            if (v49 >= *(void *)&v7) {
              v49 %= *(void *)&v7;
            }
            if (v49 != v45) {
              break;
            }
          }
          v47 = (void *)*v47;
        }
        while (v47);
      }
    }
  }
LABEL_43:
  v53 = *(void **)(v42 + 232);
  if (!v53)
  {
    md::GeometryLogic::createUnitTransformConstantData((md::GeometryLogic *)v84);
    uint64_t v54 = *a2;
    long long v55 = *(_OWORD *)v84;
    *(_OWORD *)v84 = 0uLL;
    v56 = *(std::__shared_weak_count **)(v54 + 240);
    *(_OWORD *)(v54 + 232) = v55;
    if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
    v57 = *(std::__shared_weak_count **)&v84[8];
    if (*(void *)&v84[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v84[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
    uint64_t v42 = *a2;
    v53 = *(void **)(*a2 + 232);
  }
  v58 = *(std::__shared_weak_count **)(v42 + 240);
  if (v58) {
    atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  md::GeometryLogic::setTransformConstantDataWithMercatorRect(v53, (double *)v65, v4 < 3, v67[0].f64[0], v67[1].f64[1], v43);
  if (v58)
  {
    if (!atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
}

void sub_1A1FDDE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void md::LabelLayerDataSource::~LabelLayerDataSource(md::LabelLayerDataSource *this)
{
  *(void *)this = &unk_1EF53D8A8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 102);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (md::LabelLayerDataSource *)*((void *)this + 100);
  if (v3 == (md::LabelLayerDataSource *)((char *)this + 776))
  {
    (*(void (**)(char *))(*((void *)this + 97) + 32))((char *)this + 776);
  }
  else if (v3)
  {
    (*(void (**)(md::LabelLayerDataSource *))(*(void *)v3 + 40))(v3);
  }
  *((void *)this + 94) = &unk_1EF559798;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  md::LabelLayerDataSource *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF53D8A8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 102);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (md::LabelLayerDataSource *)*((void *)this + 100);
  if (v3 == (md::LabelLayerDataSource *)((char *)this + 776))
  {
    (*(void (**)(char *))(*((void *)this + 97) + 32))((char *)this + 776);
  }
  else if (v3)
  {
    (*(void (**)(md::LabelLayerDataSource *))(*(void *)v3 + 40))(v3);
  }
  *((void *)this + 94) = &unk_1EF559798;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

uint64_t altitude::SkyRequestManager::getDrawable(pthread_mutex_t **a1, uint64_t a2, int a3)
{
  pthread_mutex_lock(a1[5]);
  (*(void (**)(uint64_t *__return_ptr, pthread_mutex_t **, uint64_t, void))&(*a1)[1].__opaque[24])(&v11, a1, a2, 0);
  uint64_t v7 = v11;
  uint64_t v6 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v7 + 40))(v7)
    || !(*(unsigned int (**)(uint64_t))(*(void *)v7 + 40))(v7))
  {
    uint64_t v8 = 0;
    if (!v6) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  if (a3) {
    *(unsigned char *)(v7 + 248) = 1;
  }
  uint64_t v8 = *(void *)(v7 + 240);
  if (v6)
  {
LABEL_10:
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_12:
  unint64_t v9 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  pthread_mutex_unlock(a1[5]);
  return v8;
}

uint64_t altitude::SkyRequestManager::requestSky(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)a1 + 80))(a1, a2, a3, a4, a5, 0, 0);
}

void karo::AsyncRequestManagerTemplate<std::string,karo::AsyncRequestManagerNoArgs>::getRequest(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  uint64_t v8 = (void **)(a1 + 8);
  unint64_t v9 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>((uint64_t)(a1 + 8), (const void **)a2);
  double v10 = (uint64_t **)v9;
  if (a1 + 9 != v9)
  {
    uint64_t v12 = v9[7];
    uint64_t v11 = v9[8];
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    *a4 = v12;
    a4[1] = v11;
    return;
  }
  (*(void (**)(uint64_t *__return_ptr, void *, uint64_t, uint64_t))(*a1 + 64))(&v44, a1, a2, a3);
  uint64_t v14 = v44;
  float64x2_t v13 = v45;
  *a4 = v44;
  a4[1] = (uint64_t)v13;
  double v15 = *v10;
  char v16 = *(unsigned char *)(a2 + 23);
  uint64_t v42 = v14;
  float v43 = v13;
  char v40 = v16;
  v41 = v8;
  if (!*v10)
  {
    double v19 = v10;
    double v20 = v10;
LABEL_34:
    long long v30 = operator new(0x48uLL);
    float64x2_t v31 = (std::string *)(v30 + 4);
    if (v40 < 0)
    {
      std::string::__init_copy_ctor_external(v31, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v31->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v30[6] = *(void *)(a2 + 16);
    }
    v30[7] = 0;
    v30[8] = 0;
    *long long v30 = 0;
    v30[1] = 0;
    v30[2] = v20;
    *double v19 = v30;
    uint64_t v32 = (void *)**v41;
    long long v33 = v30;
    if (v32)
    {
      *v41 = v32;
      long long v33 = *v19;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*v10, v33);
    ++a1[10];
    uint64_t v35 = v42;
    long long v34 = v43;
    if (v43) {
      goto LABEL_40;
    }
    goto LABEL_41;
  }
  if (v16 >= 0) {
    double v17 = (const void *)a2;
  }
  else {
    double v17 = *(const void **)a2;
  }
  if (v16 >= 0) {
    unint64_t v18 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v18 = *(void *)(a2 + 8);
  }
  while (1)
  {
    while (1)
    {
      double v20 = (uint64_t **)v15;
      uint64_t v23 = v15[4];
      double v21 = v15 + 4;
      double v22 = (uint64_t *)v23;
      int v24 = *((char *)v21 + 23);
      double v25 = v24 >= 0 ? v21 : v22;
      unint64_t v26 = v24 >= 0 ? *((unsigned __int8 *)v21 + 23) : v21[1];
      size_t v27 = v26 >= v18 ? v18 : v26;
      int v28 = memcmp(v17, v25, v27);
      if (v28) {
        break;
      }
      if (v18 >= v26) {
        goto LABEL_27;
      }
LABEL_13:
      double v15 = *v20;
      double v19 = v20;
      if (!*v20) {
        goto LABEL_34;
      }
    }
    if (v28 < 0) {
      goto LABEL_13;
    }
LABEL_27:
    int v29 = memcmp(v25, v17, v27);
    if (!v29) {
      break;
    }
    if ((v29 & 0x80000000) == 0) {
      goto LABEL_48;
    }
LABEL_31:
    double v15 = v20[1];
    if (!v15)
    {
      double v19 = v20 + 1;
      goto LABEL_34;
    }
  }
  if (v26 < v18) {
    goto LABEL_31;
  }
LABEL_48:
  long long v30 = v20;
  uint64_t v35 = v42;
  long long v34 = v43;
  if (!v43) {
    goto LABEL_41;
  }
LABEL_40:
  atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_41:
  long long v36 = (std::__shared_weak_count *)v30[8];
  v30[7] = v35;
  v30[8] = v34;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  unint64_t v37 = a1[6];
  if (v37)
  {
    uint64_t v38 = *a4;
    v39 = (std::__shared_weak_count *)a4[1];
    uint64_t v44 = v38;
    uint64_t v45 = v39;
    if (v39)
    {
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
      karo::JobManager::queueJob(v37, &v44);
      if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    else
    {
      karo::JobManager::queueJob(v37, &v44);
    }
  }
}

uint64_t karo::AsyncRequestManagerTemplate<std::string,karo::AsyncRequestManagerNoArgs>::waitOnRequest(uint64_t a1, const void **a2, unsigned int a3)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(a1 + 64, a2);
  if ((uint64_t *)(a1 + 72) == v6)
  {
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    return 0;
  }
  else
  {
    uint64_t v8 = v6[7];
    uint64_t v7 = (std::__shared_weak_count *)v6[8];
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    if (v8)
    {
      karo::Job::waitToFinish((karo::Job *)v8, a3);
      pthread_mutex_lock(*(pthread_mutex_t **)(v8 + 152));
      uint64_t v9 = *(_DWORD *)(v8 + 160) & 1;
      pthread_mutex_unlock(*(pthread_mutex_t **)(v8 + 152));
      if (!v7) {
        return v9;
      }
    }
    else
    {
      uint64_t v9 = 0;
      if (!v7) {
        return v9;
      }
    }
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v9;
}

uint64_t karo::AsyncRequestManagerTemplate<std::string,karo::AsyncRequestManagerNoArgs>::requestT@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a3) {
    a3 = *(_DWORD *)(a1 + 88) + 1;
  }
  (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(&v22, a1, a2, a7);
  char v16 = v22;
  unsigned int v17 = atomic_load(v22 + 4);
  if (v17 != a4) {
    (*(void (**)(unsigned int *, uint64_t))(*(void *)v22 + 24))(v22, a4);
  }
  v16[45] = a3;
  v16[46] = a5;
  *((unsigned char *)v16 + 176) = a6;
  unint64_t v18 = v22;
  double v19 = v23;
  *a8 = off_1EF5677B0;
  a8[1] = v18;
  a8[2] = v19;
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v18 = (unsigned int *)a8[1];
  }
  if (v18) {
    atomic_fetch_add((atomic_uint *volatile)v18 + 32, 1u);
  }
  double v20 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<std::string,karo::AsyncRequestManagerNoArgs>::requestT(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a4) {
    a4 = *(_DWORD *)(a1 + 88) + 1;
  }
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      uint64_t v10 = v8 + 24;
      (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(&v22, a1, v8, v8 + 24);
      uint64_t v11 = v22;
      int v12 = *(_DWORD *)(v8 + 28);
      unsigned int v13 = *(_DWORD *)(v8 + 32);
      char v14 = *(unsigned char *)(v8 + 36);
      unsigned int v15 = atomic_load(v22 + 4);
      if (v15 != v12) {
        (*(void (**)(unsigned int *))(*(void *)v22 + 24))(v22);
      }
      v11[45] = a4;
      v11[46] = v13;
      *((unsigned char *)v11 + 176) = v14;
      char v16 = *(void **)(a3 + 8);
      if ((unint64_t)v16 >= *(void *)(a3 + 16))
      {
        double v19 = std::vector<karo::AsyncRequestManager::RequestHandle>::__emplace_back_slow_path<std::shared_ptr<karo::AsyncRequestManager::Request> &>((void **)a3, (uint64_t)v22, (uint64_t)v23);
      }
      else
      {
        *char v16 = off_1EF5677B0;
        unsigned int v17 = v22;
        v16[1] = v22;
        uint64_t v18 = (uint64_t)v23;
        v16[2] = v23;
        if (v18)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
          unsigned int v17 = (unsigned int *)v16[1];
        }
        if (v17) {
          atomic_fetch_add((atomic_uint *volatile)v17 + 32, 1u);
        }
        double v19 = v16 + 3;
      }
      *(void *)(a3 + 8) = v19;
      double v20 = v23;
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      uint64_t v8 = v10 + 16;
    }
    while (v10 + 16 != v9);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void altitude::SkyRequestManager::createRequest()
{
}

void sub_1A1FDEBF0(_Unwind_Exception *a1)
{
  karo::Job::~Job(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<altitude::SkyLoadJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::SkyLoadJob>,std::allocator<altitude::SkyLoadJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<altitude::SkyLoadJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::SkyLoadJob>,std::allocator<altitude::SkyLoadJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void karo::AsyncRequestManagerTemplate<std::string,karo::AsyncRequestManagerNoArgs>::createAndQueueRequest(void *a1@<X0>, uint64_t *a2@<X8>)
{
  (*(void (**)(void *))(*a1 + 64))(a1);
  unint64_t v4 = a1[6];
  if (v4)
  {
    uint64_t v5 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)a2[1];
    v7[0] = v5;
    v7[1] = v6;
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      karo::JobManager::queueJob(v4, v7);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      karo::JobManager::queueJob(v4, v7);
    }
  }
}

uint64_t karo::AsyncRequestManagerTemplate<std::string,karo::AsyncRequestManagerNoArgs>::clearRequest(uint64_t a1, const void **a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  unint64_t v4 = std::__tree<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<md::StyleSettingsNode>>>>::find<std::string>(a1 + 64, a2);
  if ((uint64_t *)(a1 + 72) != v4)
  {
    uint64_t v5 = (uint64_t)v4;
    (*(void (**)(uint64_t))(*(void *)v4[7] + 16))(v4[7]);
    std::__tree<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase((void *)(a1 + 64), v5);
  }
  uint64_t v6 = *(pthread_mutex_t **)(a1 + 40);
  return pthread_mutex_unlock(v6);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 8);
  if (v3)
  {
    do
    {
      unint64_t v4 = v3;
      uint64_t v3 = (void *)*v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v5 = (void *)a2;
    do
    {
      unint64_t v4 = (void *)v5[2];
      BOOL v6 = *v4 == (void)v5;
      uint64_t v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2) {
    *a1 = v4;
  }
  uint64_t v7 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v7, (uint64_t *)a2);
  uint64_t v8 = *(std::__shared_weak_count **)(a2 + 64);
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(a2 + 55) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (*(char *)(a2 + 55) < 0) {
LABEL_12:
  }
    operator delete(*(void **)(a2 + 32));
LABEL_13:
  operator delete((void *)a2);
}

uint64_t karo::AsyncRequestManagerTemplate<std::string,karo::AsyncRequestManagerNoArgs>::removeFromRequests(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  unint64_t v4 = *(void **)(a1 + 64);
  if (v4 != (void *)(a1 + 72))
  {
    while (v4[7] != a2)
    {
      uint64_t v5 = (void *)v4[1];
      if (v5)
      {
        do
        {
          BOOL v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          BOOL v6 = (void *)v4[2];
          BOOL v7 = *v6 == (void)v4;
          unint64_t v4 = v6;
        }
        while (!v7);
      }
      unint64_t v4 = v6;
      if (v6 == (void *)(a1 + 72)) {
        goto LABEL_12;
      }
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase((void *)(a1 + 64), (uint64_t)v4);
  }
LABEL_12:
  uint64_t v8 = *(pthread_mutex_t **)(a1 + 40);
  return pthread_mutex_unlock(v8);
}

uint64_t karo::AsyncRequestManagerTemplate<std::string,karo::AsyncRequestManagerNoArgs>::pruneRequests(uint64_t a1, int a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4 != a1 + 72)
  {
    do
    {
      BOOL v7 = *(void **)(v4 + 8);
      uint64_t v8 = (void *)v4;
      if (v7)
      {
        do
        {
          uint64_t v9 = v7;
          BOOL v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v8[2];
          BOOL v10 = *v9 == (void)v8;
          uint64_t v8 = v9;
        }
        while (!v10);
      }
      uint64_t v11 = *(void *)(v4 + 56);
      if (atomic_load((unsigned int *)(v11 + 128))) {
        *(_DWORD *)(v11 + 180) = a2;
      }
      pthread_mutex_lock(*(pthread_mutex_t **)(v11 + 152));
      int v13 = *(_DWORD *)(v11 + 160);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v11 + 152));
      if ((v13 & 1) != 0 && *(unsigned char *)(v11 + 176) && *(_DWORD *)(v11 + 180) != a2
        || (a2 - *(_DWORD *)(v11 + 180)) > *(_DWORD *)(v11 + 184))
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        std::__tree<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::erase((void *)(a1 + 64), v4);
      }
      uint64_t v4 = (uint64_t)v9;
    }
    while (v9 != (void *)(a1 + 72));
  }
  *(_DWORD *)(a1 + 88) = a2;
  uint64_t v5 = *(pthread_mutex_t **)(a1 + 40);
  return pthread_mutex_unlock(v5);
}

void altitude::SkyRequestManager::~SkyRequestManager(altitude::SkyRequestManager *this)
{
  *(void *)this = &unk_1EF567E50;
  while (*((void *)this + 10))
    (*(void (**)(altitude::SkyRequestManager *, uint64_t))(*(void *)this + 48))(this, *((void *)this + 8) + 32);
  std::__tree<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((char **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EF567E50;
  while (*((void *)this + 10))
    (*(void (**)(altitude::SkyRequestManager *, uint64_t))(*(void *)this + 48))(this, *((void *)this + 8) + 32);
  std::__tree<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((char **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(char *a1)
{
  if (!a1) {
    return;
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*(void *)a1);
  std::__tree<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((void *)a1 + 1));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 8);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((a1[55] & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (a1[55] < 0) {
LABEL_5:
  }
    operator delete(*((void **)a1 + 4));
LABEL_6:
  operator delete(a1);
}

void altitude::AnimationManager::~AnimationManager(altitude::AnimationManager *this)
{
  uint64_t v2 = (void *)*((void *)this + 5);
  uint64_t v3 = (void *)*((void *)this + 6);
  if (v2 == v3)
  {
    uint64_t v3 = (void *)*((void *)this + 5);
    if (!v2) {
      goto LABEL_15;
    }
    goto LABEL_8;
  }
  do
  {
    if (*v2)
    {
      (*(void (**)(void))(*(void *)*v2 + 24))(*v2);
      uint64_t v3 = (void *)*((void *)this + 6);
    }
    v2 += 5;
  }
  while (v2 != v3);
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
LABEL_8:
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete((void *)*(v3 - 3));
        }
        v3 -= 5;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
LABEL_15:
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v5) {
    MEMORY[0x1A6239270](v5, 0x1060C4029F9A71ELL);
  }
}

void ggl::VSTextured::CompositingPipelineState::~CompositingPipelineState(ggl::VSTextured::CompositingPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::VSTextured::CompositingPipelineSetup::textureIsEnabled(ggl::VSTextured::CompositingPipelineSetup *this, unint64_t a2)
{
  return a2 < 7;
}

BOOL ggl::VSTextured::CompositingPipelineSetup::constantDataIsEnabled(ggl::VSTextured::CompositingPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

void ggl::VSTextured::CompositingPipelineSetup::~CompositingPipelineSetup(ggl::VSTextured::CompositingPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::VSTextured::PassthroughPipelineState::~PassthroughPipelineState(ggl::VSTextured::PassthroughPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::VSTextured::PassthroughPipelineSetup::textureIsEnabled(ggl::VSTextured::PassthroughPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

uint64_t ggl::VSTextured::PassthroughPipelineSetup::constantDataIsEnabled(ggl::VSTextured::PassthroughPipelineSetup *this)
{
  return 0;
}

void ggl::VSTextured::PassthroughPipelineSetup::~PassthroughPipelineSetup(ggl::VSTextured::PassthroughPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

uint64_t md::RasterTileOverlayResourceFetcher::tileKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(int **)(a3 + 8);
  int v5 = v4[2];
  int v6 = *v4;
  int v7 = v4[1];
  LOBYTE(v9) = GEOTileKeyMakeEmpty();
  *(void *)((char *)&v9 + 1) = (v6 << 6) | ((unint64_t)(v7 & 0x3FFFFFF) << 32) | v5 & 0x3F | ((unint64_t)*(float *)(a1 + 8) << 58);
  return v9;
}

void md::RasterTileOverlayResourceFetcher::~RasterTileOverlayResourceFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A6239270);
}

void md::RasterTileOverlayResourceDecoder::decode(const gdc::ResourceKey *a1@<X1>, const gdc::RawResourceSourceData *a2@<X2>, uint64_t *a3@<X8>)
{
  if (!*((unsigned char *)a2 + 16)
    || !*(void *)a2
    || (CFDataRef v6 = (const __CFData *)*(id *)(*(void *)a2 + 16)) == 0)
  {
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  int v7 = *(_DWORD *)(*((void *)a1 + 1) + 24);
  CFDataRef data = v6;
  if (![(__CFData *)v6 length])
  {
    unsigned int v15 = (atomic_ullong *)operator new(0x60uLL);
    char v16 = v15;
    if (v7 <= 0) {
      int v17 = 12;
    }
    else {
      int v17 = 6;
    }
    v15[1] = 0;
    v15[2] = 0;
    atomic_ullong *v15 = (atomic_ullong)&unk_1EF583AF8;
    uint64_t v18 = v15 + 3;
    ggl::TextureData2D::TextureData2D((uint64_t)(v15 + 3), 1, 1, 1u, v17, 1);
    double v19 = operator new(0xC0uLL);
    v19[1] = 0;
    v19[2] = 0;
    *double v19 = &unk_1EF580918;
    uint64_t v20 = gdc::Resource::Resource((uint64_t)(v19 + 3), (uint64_t)a1);
    v19[21] = v18;
    v19[22] = v16;
    atomic_fetch_add_explicit(v16 + 1, 1uLL, memory_order_relaxed);
    *((unsigned char *)v19 + 184) = 0;
    *a3 = v20;
    a3[1] = (uint64_t)v19;
    if (atomic_fetch_add(v16 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_53;
    }
    (*(void (**)(atomic_ullong *))(*v16 + 16))(v16);
    double v21 = (std::__shared_weak_count *)v16;
    goto LABEL_52;
  }
  uint64_t v8 = CGImageSourceCreateWithData(data, 0);
  long long v9 = v8;
  if (v8)
  {
    if (CGImageSourceGetCount(v8))
    {
      ImageAtIndex = CGImageSourceCreateImageAtIndex(v9, 0, 0);
      CFRelease(v9);
      if (ImageAtIndex)
      {
        unint64_t Width = CGImageGetWidth(ImageAtIndex);
        unint64_t Height = CGImageGetHeight(ImageAtIndex);
        CGImageAlphaInfo AlphaInfo = CGImageGetAlphaInfo(ImageAtIndex);
        if (v7 < 1)
        {
          int v13 = 12;
          uint64_t v14 = 4;
          goto LABEL_26;
        }
        if (CGImageGetBitsPerComponent(ImageAtIndex) == 16)
        {
          if (AlphaInfo)
          {
            int v13 = 7;
            uint64_t v14 = 4;
            goto LABEL_26;
          }
          int v13 = 3;
        }
        else
        {
          if (AlphaInfo == kCGImageAlphaNone)
          {
            int v13 = 2;
            uint64_t v14 = 1;
LABEL_26:
            double v22 = (std::__shared_weak_count *)operator new(0x60uLL);
            v22->__shared_owners_ = 0;
            v22->__shared_weak_owners_ = 0;
            v22->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583AF8;
            uint64_t v23 = ggl::TextureData2D::TextureData2D((uint64_t)&v22[1], Width, Height, 1u, v13, 0);
            unint64_t v37 = (char *)((uint64_t (*)(void *, void))v22[1].__on_zero_shared)(v23, 0);
            if (v7 < 1) {
              DeviceRGB = CGColorSpaceCreateDeviceRGB();
            }
            else {
              DeviceRGB = CGColorSpaceCreateDeviceGray();
            }
            double v25 = DeviceRGB;
            int v36 = v13;
            if ((v13 & 0xFFFFFFFB) == 3) {
              size_t v26 = 16;
            }
            else {
              size_t v26 = 8;
            }
            size_t v27 = CGBitmapContextCreate(v37, Width, Height, v26, v14 * Width, DeviceRGB, ((v13 & 0xE) != 2) | (((v13 & 0xFFFFFFFB) == 3) << 12));
            CGContextSetBlendMode(v27, kCGBlendModeCopy);
            CGContextSetAlpha(v27, 1.0);
            v43.size.width = (double)Width;
            v43.size.height = (double)Height;
            v43.origin.x = *(CGFloat *)MEMORY[0x1E4F1DAD8];
            v43.origin.y = *(CGFloat *)(MEMORY[0x1E4F1DAD8] + 8);
            CGContextDrawImage(v27, v43, ImageAtIndex);
            CGContextRelease(v27);
            CGColorSpaceRelease(v25);
            if (AlphaInfo)
            {
              if (v36 == 7)
              {
                unint64_t v28 = 2 * Width * Height;
                if (v28)
                {
                  unint64_t v29 = 0;
                  while (!*(_WORD *)&v37[2 * v29 + 2])
                  {
                    v29 += 2;
                    if (v29 >= v28) {
                      goto LABEL_38;
                    }
                  }
                  goto LABEL_43;
                }
              }
              else
              {
                unint64_t v31 = 0;
                while (v31 < v14 * Width * Height)
                {
                  int v32 = v37[v14 - 1 + v31];
                  v31 += v14;
                  if (v32) {
                    goto LABEL_43;
                  }
                }
              }
LABEL_38:
              long long v30 = (atomic_ullong *)operator new(0x60uLL);
              v30[1] = 0;
              v30[2] = 0;
              *long long v30 = (atomic_ullong)&unk_1EF583AF8;
              char v40 = ggl::TextureData2D::TextureData2D((uint64_t)(v30 + 3), 1, 1, 1u, v36, 1);
              v41 = v30;
              if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                std::__shared_weak_count::__release_weak(v22);
              }
              goto LABEL_44;
            }
LABEL_43:
            char v40 = &v22[1].__vftable;
            v41 = (atomic_ullong *)v22;
LABEL_44:
            CGImageRelease(ImageAtIndex);
            if (v40)
            {
              long long v33 = operator new(0xC0uLL);
              v33[1] = 0;
              v33[2] = 0;
              *long long v33 = &unk_1EF580918;
              uint64_t v34 = gdc::Resource::Resource((uint64_t)(v33 + 3), (uint64_t)a1);
              uint64_t v35 = v41;
              v33[21] = v40;
              v33[22] = v41;
              if (v41) {
                atomic_fetch_add_explicit(v41 + 1, 1uLL, memory_order_relaxed);
              }
              *((unsigned char *)v33 + 184) = 0;
              *a3 = v34;
              a3[1] = (uint64_t)v33;
            }
            else
            {
              *a3 = 0;
              a3[1] = 0;
              uint64_t v35 = v41;
            }
            if (!v35 || atomic_fetch_add(v35 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
              goto LABEL_53;
            }
            (*(void (**)(atomic_ullong *))(*v35 + 16))(v35);
            double v21 = (std::__shared_weak_count *)v35;
LABEL_52:
            std::__shared_weak_count::__release_weak(v21);
            goto LABEL_53;
          }
          int v13 = 6;
        }
        uint64_t v14 = 2;
        goto LABEL_26;
      }
    }
    else
    {
      CFRelease(v9);
    }
  }
  *a3 = 0;
  a3[1] = 0;
LABEL_53:
}

void sub_1A1FDFF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14, char a15, uint64_t a16, char a17)
{
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::RasterTileResource>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[22];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != (void *)a1[6])
  {
    free(v3);
  }
}

void std::__shared_ptr_emplace<md::RasterTileResource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580918;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::RasterTileResource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580918;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::RasterTileOverlayResourceDecoder::~RasterTileOverlayResourceDecoder(md::RasterTileOverlayResourceDecoder *this)
{
}

uint64_t std::__shared_ptr_emplace<md::RasterTileOverlayResourceDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::RasterTileOverlayResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582710;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::RasterTileOverlayResourceDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582710;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t altitude::TileComponent::onDetach(uint64_t this)
{
  *(void *)(this + 16) = 0;
  return this;
}

uint64_t altitude::TileComponent::onAttach(uint64_t this, altitude::Tile *a2)
{
  *(void *)(this + 16) = a2;
  return this;
}

void md::DebugDrawContext::addWorldDebugShape(void *a1, uint64_t a2, int *a3)
{
  int v5 = (char *)a1[10];
  CFDataRef v6 = (char *)a1[11];
  int v7 = v5;
  if (v5 != v6)
  {
    float v8 = *(float *)a3;
    int v9 = *((unsigned __int8 *)a3 + 12);
    if (*((unsigned char *)a3 + 8))
    {
      int v7 = (char *)a1[10];
      while (LODWORD(v8) != *(_DWORD *)v7
           || v9 != v7[12]
           || !v7[8]
           || *((float *)a3 + 1) != *((float *)v7 + 1))
      {
        v7 += 40;
        if (v7 == v6) {
          goto LABEL_17;
        }
      }
    }
    else
    {
      int v7 = (char *)a1[10];
      while (LODWORD(v8) != *(_DWORD *)v7 || v9 != v7[12] || v7[8])
      {
        v7 += 40;
        if (v7 == v6) {
          goto LABEL_17;
        }
      }
    }
  }
  if (v7 == v6)
  {
    float v8 = *(float *)a3;
LABEL_17:
    float v65 = v8;
    BOOL v10 = a3 + 1;
    uint64_t v66 = *(void *)(a3 + 1);
    char v67 = *((unsigned char *)a3 + 12);
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    __p = 0;
    float64x2_t v63 = 0;
    uint64_t v64 = 0;
    v62 = 0;
    if (v5 == v6)
    {
      int v7 = v5;
    }
    else if (BYTE4(v66))
    {
      int v7 = v5;
      while (LODWORD(v8) != *(_DWORD *)v7 || v67 != v7[12] || !v7[8] || *(float *)&v66 != *((float *)v7 + 1))
      {
        v7 += 40;
        if (v7 == v6) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      int v7 = v5;
      while (LODWORD(v8) != *(_DWORD *)v7 || v67 != v7[12] || v7[8])
      {
        v7 += 40;
        if (v7 == v6) {
          goto LABEL_28;
        }
      }
    }
    if (v7 == v6)
    {
LABEL_28:
      unint64_t v11 = a1[12];
      if ((unint64_t)v6 < v11)
      {
        *(float *)CFDataRef v6 = v8;
        uint64_t v12 = v66;
        v6[12] = v67;
        *(void *)(v6 + 4) = v12;
        std::vector<std::variant<gm::Box<double,3>,gm::Sphere<double,3,std::enable_if<true,void>>,geo::OrientedBox<double,3u,double,double>>>::vector((void *)v6 + 2, (uint64_t *)&__p);
        a1[11] = v6 + 40;
        int v7 = v6;
        goto LABEL_81;
      }
      unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v5) >> 3);
      if (v13 + 1 > 0x666666666666666) {
        abort();
      }
      unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - (void)v5) >> 3);
      uint64_t v15 = 2 * v14;
      if (2 * v14 <= v13 + 1) {
        uint64_t v15 = v13 + 1;
      }
      if (v14 >= 0x333333333333333) {
        unint64_t v16 = 0x666666666666666;
      }
      else {
        unint64_t v16 = v15;
      }
      double v76 = a1 + 12;
      if (v16)
      {
        if (v16 > 0x666666666666666) {
          goto LABEL_115;
        }
        int v17 = (char *)operator new(40 * v16);
      }
      else
      {
        int v17 = 0;
      }
      uint64_t v18 = &v17[40 * v13];
      double v72 = v17;
      double v73 = v18;
      long long v74 = v18;
      double v75 = &v17[40 * v16];
      *(float *)uint64_t v18 = v8;
      *(void *)(v18 + 4) = *(void *)v10;
      v18[12] = *((unsigned char *)v10 + 8);
      std::vector<std::variant<gm::Box<double,3>,gm::Sphere<double,3,std::enable_if<true,void>>,geo::OrientedBox<double,3u,double,double>>>::vector((void *)v18 + 2, (uint64_t *)&__p);
      double v19 = v73;
      uint64_t v20 = v74 + 40;
      double v21 = (char *)a1[10];
      double v22 = (char *)a1[11];
      if (v22 == v21)
      {
        size_t v27 = (char *)a1[11];
      }
      else
      {
        uint64_t v23 = 0;
        do
        {
          int v24 = &v19[v23];
          double v25 = &v22[v23];
          *((_DWORD *)v24 - 10) = *(_DWORD *)&v22[v23 - 40];
          uint64_t v26 = *(void *)&v22[v23 - 36];
          *(v24 - 28) = v22[v23 - 28];
          *(void *)(v24 - 36) = v26;
          *((void *)v24 - 2) = 0;
          *((void *)v24 - 1) = 0;
          *((void *)v24 - 3) = 0;
          *(_OWORD *)(v24 - 24) = *(_OWORD *)&v22[v23 - 24];
          *((void *)v24 - 1) = *(void *)&v22[v23 - 8];
          *((void *)v25 - 3) = 0;
          *((void *)v25 - 2) = 0;
          *((void *)v25 - 1) = 0;
          v23 -= 40;
        }
        while (&v22[v23] != v21);
        v19 += v23;
        size_t v27 = (char *)a1[10];
        double v22 = (char *)a1[11];
      }
      a1[10] = v19;
      a1[11] = v20;
      unint64_t v28 = (char *)a1[12];
      a1[12] = v75;
      long long v74 = v22;
      double v75 = v28;
      double v72 = v27;
      double v73 = v27;
      if (v22 != v27)
      {
        do
        {
          long long v30 = v22 - 40;
          long long v74 = v22 - 40;
          uint64_t v31 = *((void *)v22 - 3);
          if (v31)
          {
            uint64_t v32 = *((void *)v22 - 2);
            unint64_t v29 = (void *)*((void *)v22 - 3);
            if (v32 != v31)
            {
              do
              {
                uint64_t v33 = v32 - 112;
                uint64_t v34 = *(unsigned int *)(v32 - 8);
                if (v34 != -1) {
                  ((void (*)(char *, uint64_t))off_1EF58F838[v34])(&v71, v32 - 112);
                }
                *(_DWORD *)(v32 - 8) = -1;
                v32 -= 112;
              }
              while (v33 != v31);
              unint64_t v29 = (void *)*((void *)v22 - 3);
              long long v30 = v74;
            }
            *((void *)v22 - 2) = v31;
            operator delete(v29);
          }
          double v22 = v30;
        }
        while (v30 != v27);
        double v22 = v72;
      }
      if (v22) {
        operator delete(v22);
      }
      uint64_t v35 = (char *)__p;
      a1[11] = v20;
      int v7 = v20 - 40;
      if (!v35) {
        goto LABEL_81;
      }
      int v36 = v69;
      if (v69 == v35)
      {
        uint64_t v69 = v35;
        CGRect v43 = v35;
LABEL_80:
        operator delete(v43);
        goto LABEL_81;
      }
      do
      {
        unint64_t v37 = v36 - 112;
        uint64_t v38 = *((unsigned int *)v36 - 2);
        if (v38 != -1) {
          ((void (*)(char **, char *))off_1EF58F838[v38])(&v72, v36 - 112);
        }
        *((_DWORD *)v36 - 2) = -1;
        v36 -= 112;
      }
      while (v37 != v35);
      v39 = v62;
      uint64_t v69 = v35;
      operator delete(__p);
      if (v62)
      {
        char v40 = v63;
        if (v63 != v62)
        {
          do
          {
            v41 = v40 - 112;
            uint64_t v42 = *((unsigned int *)v40 - 2);
            if (v42 != -1) {
              ((void (*)(char **, char *))off_1EF58F838[v42])(&v72, v40 - 112);
            }
            *((_DWORD *)v40 - 2) = -1;
            v40 -= 112;
          }
          while (v41 != v39);
          v39 = v62;
        }
        CGRect v43 = v39;
        goto LABEL_80;
      }
    }
  }
LABEL_81:
  unint64_t v44 = *((void *)v7 + 4);
  uint64_t v45 = (char *)*((void *)v7 + 3);
  if ((unint64_t)v45 < v44)
  {
    *uint64_t v45 = 0;
    *((_DWORD *)v45 + 26) = -1;
    uint64_t v46 = *(unsigned int *)(a2 + 104);
    if (v46 != -1)
    {
      ((void (*)(float *, char *, uint64_t))off_1EF58F850[v46])(&v65, v45, a2);
      *((_DWORD *)v45 + 26) = v46;
    }
    v47 = v45 + 112;
    *((void *)v7 + 3) = v45 + 112;
    goto LABEL_113;
  }
  uint64_t v48 = (char *)*((void *)v7 + 2);
  unint64_t v49 = 0x6DB6DB6DB6DB6DB7 * ((v45 - v48) >> 4) + 1;
  if (v49 > 0x249249249249249) {
    abort();
  }
  unint64_t v50 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v44 - (void)v48) >> 4);
  if (2 * v50 > v49) {
    unint64_t v49 = 2 * v50;
  }
  if (v50 >= 0x124924924924924) {
    unint64_t v51 = 0x249249249249249;
  }
  else {
    unint64_t v51 = v49;
  }
  double v76 = v7 + 32;
  if (!v51)
  {
    uint64_t v52 = 0;
    goto LABEL_95;
  }
  if (v51 > 0x249249249249249) {
LABEL_115:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint64_t v52 = (char *)operator new(112 * v51);
LABEL_95:
  v53 = &v52[16 * ((v45 - v48) >> 4)];
  double v72 = v52;
  double v73 = v53;
  long long v74 = v53;
  double v75 = &v52[112 * v51];
  char *v53 = 0;
  *((_DWORD *)v53 + 26) = -1;
  uint64_t v54 = *(unsigned int *)(a2 + 104);
  if (v54 == -1)
  {
    long long v55 = &v52[16 * ((v45 - v48) >> 4)];
  }
  else
  {
    ((void (*)(char **, char *, uint64_t))off_1EF58F850[v54])(&v62, v53, a2);
    *((_DWORD *)v53 + 26) = v54;
    uint64_t v48 = (char *)*((void *)v7 + 2);
    uint64_t v45 = (char *)*((void *)v7 + 3);
    v53 = v73;
    long long v55 = v74;
  }
  v47 = v55 + 112;
  long long v74 = v55 + 112;
  if (v45 == v48)
  {
    v58 = v48;
  }
  else
  {
    unint64_t v56 = 0;
    do
    {
      v53[v56 - 112] = 0;
      *(_DWORD *)&v53[v56 - 8] = -1;
      uint64_t v57 = *(unsigned int *)&v45[v56 - 8];
      if (v57 != -1)
      {
        ((void (*)(char **, char *, char *))off_1EF58F868[v57])(&v62, &v53[v56 - 112], &v45[v56 - 112]);
        *(_DWORD *)&v53[v56 - 8] = v57;
      }
      v56 -= 112;
    }
    while (&v45[v56] != v48);
    v53 += v56;
    v58 = (char *)*((void *)v7 + 2);
    uint64_t v48 = (char *)*((void *)v7 + 3);
    v47 = v74;
  }
  *((void *)v7 + 2) = v53;
  *((void *)v7 + 3) = v47;
  v59 = (char *)*((void *)v7 + 4);
  *((void *)v7 + 4) = v75;
  long long v74 = v48;
  double v75 = v59;
  double v72 = v58;
  double v73 = v58;
  if (v48 != v58)
  {
    do
    {
      long long v60 = v48 - 112;
      long long v74 = v48 - 112;
      uint64_t v61 = *((unsigned int *)v48 - 2);
      if (v61 != -1)
      {
        ((void (*)(float *))off_1EF58F838[v61])(&v65);
        long long v60 = v74;
      }
      *((_DWORD *)v48 - 2) = -1;
      uint64_t v48 = v60;
    }
    while (v60 != v58);
    uint64_t v48 = v72;
  }
  if (v48) {
    operator delete(v48);
  }
LABEL_113:
  *((void *)v7 + 3) = v47;
}

void sub_1A1FE08A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

void sub_1A1FE093C()
{
  if (*v0 != -1) {
    JUMPOUT(0x1A1FE0960);
  }
  JUMPOUT(0x1A1FE0964);
}

uint64_t std::__split_buffer<std::variant<gm::Box<double,3>,gm::Sphere<double,3,std::enable_if<true,void>>,geo::OrientedBox<double,3u,double,double>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 != v2)
  {
    do
    {
      uint64_t v4 = v3 - 112;
      *(void *)(a1 + 16) = v3 - 112;
      uint64_t v5 = *(unsigned int *)(v3 - 8);
      if (v5 != -1)
      {
        ((void (*)(char *))off_1EF58F838[v5])(&v7);
        uint64_t v4 = *(void *)(a1 + 16);
      }
      *(_DWORD *)(v3 - 8) = -1;
      uint64_t v3 = v4;
    }
    while (v4 != v2);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2gm3BoxIdLi3EEENS8_6SphereIdLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIdLj3EddEEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSA_SE_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v3;
  long long v4 = *(long long *)((char *)a3 + 24);
  *(void *)(a2 + 40) = *((void *)a3 + 5);
  *(_OWORD *)(a2 + 24) = v4;
  *(void *)(a2 + 48) = *((void *)a3 + 6);
  __n128 result = *(__n128 *)((char *)a3 + 56);
  long long v6 = *(long long *)((char *)a3 + 72);
  *(_OWORD *)(a2 + 88) = *(long long *)((char *)a3 + 88);
  *(_OWORD *)(a2 + 72) = v6;
  *(__n128 *)(a2 + 56) = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2gm3BoxIdLi3EEENS8_6SphereIdLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIdLj3EddEEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSA_SE_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2gm3BoxIdLi3EEENS8_6SphereIdLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIdLj3EddEEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSA_SE_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2gm3BoxIdLi3EEENS8_6SphereIdLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIdLj3EddEEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJSA_SE_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v3;
  long long v4 = *(long long *)((char *)a3 + 24);
  *(void *)(a2 + 40) = *((void *)a3 + 5);
  *(_OWORD *)(a2 + 24) = v4;
  *(void *)(a2 + 48) = *((void *)a3 + 6);
  __n128 result = *(__n128 *)((char *)a3 + 56);
  long long v6 = *(long long *)((char *)a3 + 72);
  *(_OWORD *)(a2 + 88) = *(long long *)((char *)a3 + 88);
  *(_OWORD *)(a2 + 72) = v6;
  *(__n128 *)(a2 + 56) = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2gm3BoxIdLi3EEENS8_6SphereIdLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIdLj3EddEEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJSA_SE_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2gm3BoxIdLi3EEENS8_6SphereIdLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIdLj3EddEEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJSA_SE_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t std::pair<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<double,3>,gm::Sphere<double,3,std::enable_if<true,void>>,geo::OrientedBox<double,3u,double,double>>>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    long long v4 = *(void **)(a1 + 16);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 112;
        uint64_t v6 = *(unsigned int *)(v3 - 8);
        if (v6 != -1) {
          ((void (*)(char *, uint64_t))off_1EF58F838[v6])(&v8, v3 - 112);
        }
        *(_DWORD *)(v3 - 8) = -1;
        v3 -= 112;
      }
      while (v5 != v2);
      long long v4 = *(void **)(a1 + 16);
    }
    *(void *)(a1 + 24) = v2;
    operator delete(v4);
  }
  return a1;
}

void **std::vector<std::variant<gm::Box<double,3>,gm::Sphere<double,3,std::enable_if<true,void>>,geo::OrientedBox<double,3u,double,double>>>::~vector[abi:nn180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    long long v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 112;
        uint64_t v6 = *((unsigned int *)v3 - 2);
        if (v6 != -1) {
          ((void (*)(char *, char *))off_1EF58F838[v6])(&v8, v3 - 112);
        }
        *((_DWORD *)v3 - 2) = -1;
        v3 -= 112;
      }
      while (v5 != v2);
      long long v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *std::vector<std::variant<gm::Box<double,3>,gm::Sphere<double,3,std::enable_if<true,void>>,geo::OrientedBox<double,3u,double,double>>>::vector(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  int64_t v5 = v4 - *a2;
  if (v4 != *a2)
  {
    unint64_t v6 = 0x6DB6DB6DB6DB6DB7 * (v5 >> 4);
    if (v6 >= 0x24924924924924ALL) {
      abort();
    }
    char v7 = (char *)operator new(v5);
    uint64_t v8 = 0;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[112 * v6];
    do
    {
      int v9 = &v7[v8];
      *int v9 = 0;
      *((_DWORD *)v9 + 26) = -1;
      uint64_t v10 = *(unsigned int *)(v3 + v8 + 104);
      if (v10 != -1)
      {
        ((void (*)(char *, char *))off_1EF58F850[v10])(v12, &v7[v8]);
        *((_DWORD *)v9 + 26) = v10;
      }
      v8 += 112;
    }
    while (v3 + v8 != v4);
    a1[1] = &v7[v8];
  }
  return a1;
}

void sub_1A1FE0D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v17 = *(unsigned int *)(v15 + 104);
  if (v17 != -1) {
    ((void (*)(char *, uint64_t))off_1EF58F838[v17])(&a13, v15);
  }
  *(_DWORD *)(v15 + 104) = -1;
  *(void *)(v13 + 8) = v14;
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::pair<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<double,3>,gm::Sphere<double,3,std::enable_if<true,void>>,geo::OrientedBox<double,3u,double,double>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    while (1)
    {
      uint64_t v4 = i - 40;
      *(void *)(a1 + 16) = i - 40;
      uint64_t v5 = *(void *)(i - 24);
      if (v5) {
        break;
      }
      i -= 40;
      if (v4 == v2) {
        goto LABEL_12;
      }
    }
    uint64_t v6 = *(void *)(i - 16);
    char v7 = *(void **)(i - 24);
    if (v6 != v5)
    {
      do
      {
        uint64_t v8 = v6 - 112;
        uint64_t v9 = *(unsigned int *)(v6 - 8);
        if (v9 != -1) {
          ((void (*)(char *, uint64_t))off_1EF58F838[v9])(&v11, v6 - 112);
        }
        *(_DWORD *)(v6 - 8) = -1;
        v6 -= 112;
      }
      while (v8 != v5);
      char v7 = *(void **)(i - 24);
    }
    *(void *)(i - 16) = v5;
    operator delete(v7);
  }
LABEL_12:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::pair<debugComponents::DisplayOptions,std::vector<std::vector<gm::LineSegment<float,3>>>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    uint64_t v4 = *(void **)(a1 + 16);
    if (v3 != v2)
    {
      uint64_t v5 = *(void *)(a1 + 24);
      do
      {
        char v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *(void **)(a1 + 16);
    }
    *(void *)(a1 + 24) = v2;
    operator delete(v4);
  }
  return a1;
}

void *std::vector<std::vector<gm::LineSegment<float,3>>>::__init_with_size[abi:nn180100]<std::vector<gm::LineSegment<float,3>>*,std::vector<gm::LineSegment<float,3>>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    uint64_t v6 = result;
    uint64_t v7 = 3 * a4;
    __n128 result = operator new(24 * a4);
    uint64_t v8 = result;
    *uint64_t v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      uint64_t v17 = v6;
      do
      {
        uint64_t v12 = a2 + v9;
        uint64_t v13 = &v8[v9 / 8];
        *uint64_t v13 = 0;
        v13[1] = 0;
        v13[2] = 0;
        uint64_t v15 = *(unsigned char **)(a2 + v9);
        uint64_t v14 = *(unsigned char **)(a2 + v9 + 8);
        int64_t v16 = v14 - v15;
        if (v14 != v15)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v16 >> 3) > 0xAAAAAAAAAAAAAAALL) {
            abort();
          }
          uint64_t v10 = (char *)operator new(v16);
          *uint64_t v13 = v10;
          v13[1] = v10;
          v13[2] = &v10[8 * (v16 >> 3)];
          size_t v11 = 24 * ((v16 - 24) / 0x18uLL) + 24;
          __n128 result = memcpy(v10, v15, v11);
          v13[1] = &v10[v11];
        }
        v9 += 24;
      }
      while (v12 + 24 != a3);
      uint64_t v8 = (void *)((char *)v8 + v9);
      uint64_t v6 = v17;
    }
    v6[1] = v8;
  }
  return result;
}

void sub_1A1FE1020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(a9 + 8) = v9;
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::pair<debugComponents::DisplayOptions,std::vector<std::vector<gm::LineSegment<float,3>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    while (1)
    {
      uint64_t v4 = i - 40;
      *(void *)(a1 + 16) = i - 40;
      uint64_t v5 = *(void *)(i - 24);
      if (v5) {
        break;
      }
      i -= 40;
      if (v4 == v2) {
        goto LABEL_12;
      }
    }
    uint64_t v6 = *(void *)(i - 16);
    uint64_t v7 = *(void **)(i - 24);
    if (v6 != v5)
    {
      uint64_t v8 = *(void *)(i - 16);
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        uint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v6 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v6 = v8;
      }
      while (v8 != v5);
      uint64_t v7 = *(void **)(i - 24);
    }
    *(void *)(i - 16) = v5;
    operator delete(v7);
  }
LABEL_12:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void md::DebugDrawContext::addTileLocalDebugShape(uint64_t a1, unint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v9 = 0x9DDFEA08EB382D69 * (((((a2 >> 3) & 0x3FFFFFF) << 6) | 8) ^ HIDWORD(a2));
  unint64_t v10 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v9 >> 47) ^ v9);
  unint64_t v11 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
  unint64_t v12 = *(void *)(a1 + 48);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
    }
    else
    {
      unint64_t v4 = v11 & (v12 - 1);
    }
    uint64_t v14 = *(void ***)(*(void *)(a1 + 40) + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v15[1];
            if (v17 == v11)
            {
              if (v15[2] == a2) {
                goto LABEL_82;
              }
            }
            else if ((v17 & (v12 - 1)) != v4)
            {
              goto LABEL_22;
            }
            uint64_t v15 = (void *)*v15;
            if (!v15) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v11)
          {
            if (v15[2] == a2) {
              goto LABEL_82;
            }
          }
          else
          {
            if (v16 >= v12) {
              v16 %= v12;
            }
            if (v16 != v4) {
              break;
            }
          }
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_22:
  uint64_t v18 = (void *)(a1 + 56);
  uint64_t v15 = operator new(0x30uLL);
  v116 = (char *)v15;
  v117 = (char *)(a1 + 56);
  void *v15 = 0;
  v15[1] = v11;
  v15[2] = a2;
  v15[3] = 0;
  v15[4] = 0;
  v15[5] = 0;
  LOBYTE(v118) = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 64) + 1);
  float v20 = *(float *)(a1 + 72);
  if (!v12 || (float)(v20 * (float)v12) < v19)
  {
    BOOL v21 = 1;
    if (v12 >= 3) {
      BOOL v21 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v12);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t prime = v23;
    }
    else {
      size_t prime = v22;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v12 = *(void *)(a1 + 48);
    }
    if (prime <= v12)
    {
      if (prime >= v12) {
        goto LABEL_59;
      }
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 64) / *(float *)(a1 + 72));
      if (v12 < 3 || (uint8x8_t v37 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime >= v12)
      {
        unint64_t v12 = *(void *)(a1 + 48);
LABEL_59:
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v11 >= v12) {
            unint64_t v4 = v11 % v12;
          }
          else {
            unint64_t v4 = v11;
          }
        }
        else
        {
          unint64_t v4 = (v12 - 1) & v11;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        long long v86 = *(void **)(a1 + 40);
        *(void *)(a1 + 40) = 0;
        if (v86) {
          operator delete(v86);
        }
        unint64_t v12 = 0;
        *(void *)(a1 + 48) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61) {
      goto LABEL_203;
    }
    double v25 = operator new(8 * prime);
    uint64_t v26 = *(void **)(a1 + 40);
    *(void *)(a1 + 40) = v25;
    if (v26) {
      operator delete(v26);
    }
    uint64_t v27 = 0;
    *(void *)(a1 + 48) = prime;
    do
      *(void *)(*(void *)(a1 + 40) + 8 * v27++) = 0;
    while (prime != v27);
    unint64_t v28 = (void *)*v18;
    if (!*v18)
    {
LABEL_58:
      unint64_t v12 = prime;
      goto LABEL_59;
    }
    size_t v29 = v28[1];
    size_t v30 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v31 = v29 & v30;
      *(void *)(*(void *)(a1 + 40) + 8 * v31) = v18;
      for (uint64_t i = (void *)*v28; *v28; uint64_t i = (void *)*v28)
      {
        size_t v33 = i[1] & v30;
        if (v33 == v31)
        {
          unint64_t v28 = i;
        }
        else
        {
          uint64_t v34 = *(void *)(a1 + 40);
          if (*(void *)(v34 + 8 * v33))
          {
            *unint64_t v28 = *i;
            uint64_t v35 = 8 * v33;
            void *i = **(void **)(*(void *)(a1 + 40) + v35);
            **(void **)(*(void *)(a1 + 40) + v35) = i;
          }
          else
          {
            *(void *)(v34 + 8 * v33) = v28;
            unint64_t v28 = i;
            size_t v31 = v33;
          }
        }
      }
      goto LABEL_58;
    }
    if (v29 >= prime) {
      v29 %= prime;
    }
    *(void *)(*(void *)(a1 + 40) + 8 * v29) = v18;
    v39 = (void *)*v28;
    if (!*v28) {
      goto LABEL_58;
    }
    while (1)
    {
      size_t v41 = v39[1];
      if (v41 >= prime) {
        v41 %= prime;
      }
      if (v41 != v29)
      {
        uint64_t v42 = *(void *)(a1 + 40);
        if (!*(void *)(v42 + 8 * v41))
        {
          *(void *)(v42 + 8 * v41) = v28;
          goto LABEL_63;
        }
        *unint64_t v28 = *v39;
        uint64_t v40 = 8 * v41;
        void *v39 = **(void **)(*(void *)(a1 + 40) + v40);
        **(void **)(*(void *)(a1 + 40) + v40) = v39;
        v39 = v28;
      }
      size_t v41 = v29;
LABEL_63:
      unint64_t v28 = v39;
      v39 = (void *)*v39;
      size_t v29 = v41;
      if (!v39) {
        goto LABEL_58;
      }
    }
  }
LABEL_72:
  uint64_t v43 = *(void *)(a1 + 40);
  unint64_t v44 = *(void **)(v43 + 8 * v4);
  if (v44)
  {
    void *v15 = *v44;
LABEL_80:
    *unint64_t v44 = v15;
    goto LABEL_81;
  }
  void *v15 = *v18;
  *uint64_t v18 = v15;
  *(void *)(v43 + 8 * v4) = v18;
  if (*v15)
  {
    unint64_t v45 = *(void *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v45 >= v12) {
        v45 %= v12;
      }
    }
    else
    {
      v45 &= v12 - 1;
    }
    unint64_t v44 = (void *)(*(void *)(a1 + 40) + 8 * v45);
    goto LABEL_80;
  }
LABEL_81:
  ++*(void *)(a1 + 64);
LABEL_82:
  v47 = (char *)v15[3];
  uint64_t v46 = (char *)v15[4];
  if (v47 != v46)
  {
    float v48 = *(float *)a4;
    int v49 = *((unsigned __int8 *)a4 + 12);
    if (*((unsigned char *)a4 + 8))
    {
      while (LODWORD(v48) != *(_DWORD *)v47
           || v49 != v47[12]
           || !v47[8]
           || *((float *)a4 + 1) != *((float *)v47 + 1))
      {
        v47 += 40;
        if (v47 == v46) {
          goto LABEL_97;
        }
      }
    }
    else
    {
      while (LODWORD(v48) != *(_DWORD *)v47 || v49 != v47[12] || v47[8])
      {
        v47 += 40;
        if (v47 == v46) {
          goto LABEL_97;
        }
      }
    }
  }
  if (v47 == v46)
  {
    float v48 = *(float *)a4;
LABEL_97:
    float v109 = v48;
    uint64_t v51 = *(void *)(a4 + 1);
    unint64_t v50 = a4 + 1;
    uint64_t v110 = v51;
    char v111 = *((unsigned char *)v50 + 8);
    v113 = 0;
    uint64_t v114 = 0;
    __p = 0;
    v107 = 0;
    uint64_t v108 = 0;
    v106 = 0;
    uint64_t v52 = v15[3];
    unint64_t v53 = v15[4];
    if (v52 == v53)
    {
      v47 = (char *)v15[3];
    }
    else if (BYTE4(v110))
    {
      v47 = (char *)v15[3];
      while (LODWORD(v48) != *(_DWORD *)v47 || v111 != v47[12] || !v47[8] || *(float *)&v110 != *((float *)v47 + 1))
      {
        v47 += 40;
        if (v47 == (char *)v53) {
          goto LABEL_108;
        }
      }
    }
    else
    {
      v47 = (char *)v15[3];
      while (LODWORD(v48) != *(_DWORD *)v47 || v111 != v47[12] || v47[8])
      {
        v47 += 40;
        if (v47 == (char *)v53) {
          goto LABEL_108;
        }
      }
    }
    if (v47 == (char *)v53)
    {
LABEL_108:
      unint64_t v54 = v15[5];
      if (v53 < v54)
      {
        *(float *)unint64_t v53 = v48;
        uint64_t v55 = v110;
        *(unsigned char *)(v53 + 12) = v111;
        *(void *)(v53 + 4) = v55;
        std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>::vector((void *)(v53 + 16), (uint64_t *)&__p);
        v15[4] = v53 + 40;
        v47 = (char *)v53;
        goto LABEL_170;
      }
      unint64_t v56 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - v52) >> 3);
      if (v56 + 1 > 0x666666666666666) {
        abort();
      }
      unint64_t v57 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v54 - v52) >> 3);
      uint64_t v58 = 2 * v57;
      if (2 * v57 <= v56 + 1) {
        uint64_t v58 = v56 + 1;
      }
      if (v57 >= 0x333333333333333) {
        unint64_t v59 = 0x666666666666666;
      }
      else {
        unint64_t v59 = v58;
      }
      v120 = v15 + 5;
      if (v59)
      {
        if (v59 > 0x666666666666666) {
          goto LABEL_203;
        }
        long long v60 = (char *)operator new(40 * v59);
      }
      else
      {
        long long v60 = 0;
      }
      uint64_t v61 = &v60[40 * v56];
      v116 = v60;
      v117 = v61;
      v118 = v61;
      v119 = &v60[40 * v59];
      *(float *)uint64_t v61 = v48;
      *(void *)(v61 + 4) = *(void *)v50;
      v61[12] = *((unsigned char *)v50 + 8);
      std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>::vector((void *)v61 + 2, (uint64_t *)&__p);
      v62 = v117;
      float64x2_t v63 = v118 + 40;
      uint64_t v64 = (char *)v15[3];
      float v65 = (char *)v15[4];
      if (v65 == v64)
      {
        uint64_t v70 = (char *)v15[4];
      }
      else
      {
        uint64_t v66 = 0;
        do
        {
          char v67 = &v62[v66];
          long long v68 = &v65[v66];
          *((_DWORD *)v67 - 10) = *(_DWORD *)&v65[v66 - 40];
          uint64_t v69 = *(void *)&v65[v66 - 36];
          *(v67 - 28) = v65[v66 - 28];
          *(void *)(v67 - 36) = v69;
          *((void *)v67 - 2) = 0;
          *((void *)v67 - 1) = 0;
          *((void *)v67 - 3) = 0;
          *(_OWORD *)(v67 - 24) = *(_OWORD *)&v65[v66 - 24];
          *((void *)v67 - 1) = *(void *)&v65[v66 - 8];
          *((void *)v68 - 3) = 0;
          *((void *)v68 - 2) = 0;
          *((void *)v68 - 1) = 0;
          v66 -= 40;
        }
        while (&v65[v66] != v64);
        v62 += v66;
        uint64_t v70 = (char *)v15[3];
        float v65 = (char *)v15[4];
      }
      v15[3] = v62;
      v15[4] = v63;
      char v71 = (char *)v15[5];
      v15[5] = v119;
      v118 = v65;
      v119 = v71;
      v116 = v70;
      v117 = v70;
      if (v65 != v70)
      {
        do
        {
          double v73 = v65 - 40;
          v118 = v65 - 40;
          uint64_t v74 = *((void *)v65 - 3);
          if (v74)
          {
            uint64_t v75 = *((void *)v65 - 2);
            double v72 = (void *)*((void *)v65 - 3);
            if (v75 != v74)
            {
              do
              {
                uint64_t v76 = v75 - 56;
                uint64_t v77 = *(unsigned int *)(v75 - 4);
                if (v77 != -1) {
                  ((void (*)(char *, uint64_t))off_1EF58F880[v77])(&v115, v75 - 56);
                }
                *(_DWORD *)(v75 - 4) = -1;
                v75 -= 56;
              }
              while (v76 != v74);
              double v72 = (void *)*((void *)v65 - 3);
              double v73 = v118;
            }
            *((void *)v65 - 2) = v74;
            operator delete(v72);
          }
          float v65 = v73;
        }
        while (v73 != v70);
        float v65 = v116;
      }
      if (v65) {
        operator delete(v65);
      }
      double v78 = (char *)__p;
      v15[4] = v63;
      v47 = v63 - 40;
      if (!v78) {
        goto LABEL_170;
      }
      v79 = v113;
      if (v113 == v78)
      {
        v113 = v78;
        uint64_t v87 = v78;
LABEL_169:
        operator delete(v87);
        goto LABEL_170;
      }
      do
      {
        v80 = v79 - 56;
        uint64_t v81 = *((unsigned int *)v79 - 1);
        if (v81 != -1) {
          ((void (*)(char **, char *))off_1EF58F880[v81])(&v116, v79 - 56);
        }
        *((_DWORD *)v79 - 1) = -1;
        v79 -= 56;
      }
      while (v80 != v78);
      uint64_t v82 = v106;
      v113 = v78;
      operator delete(__p);
      if (v106)
      {
        uint64_t v83 = v107;
        if (v107 != v106)
        {
          do
          {
            v84 = v83 - 56;
            uint64_t v85 = *((unsigned int *)v83 - 1);
            if (v85 != -1) {
              ((void (*)(char **, char *))off_1EF58F880[v85])(&v116, v83 - 56);
            }
            *((_DWORD *)v83 - 1) = -1;
            v83 -= 56;
          }
          while (v84 != v82);
          uint64_t v82 = v106;
        }
        uint64_t v87 = v82;
        goto LABEL_169;
      }
    }
  }
LABEL_170:
  unint64_t v88 = *((void *)v47 + 4);
  uint64_t v89 = (char *)*((void *)v47 + 3);
  if ((unint64_t)v89 < v88)
  {
    *uint64_t v89 = 0;
    *((_DWORD *)v89 + 13) = -1;
    uint64_t v90 = *(unsigned int *)(a3 + 52);
    if (v90 != -1)
    {
      ((void (*)(float *, char *, uint64_t))off_1EF58F8A0[v90])(&v109, v89, a3);
      *((_DWORD *)v89 + 13) = v90;
    }
    double v91 = v89 + 56;
    *((void *)v47 + 3) = v89 + 56;
    goto LABEL_202;
  }
  uint64_t v92 = (char *)*((void *)v47 + 2);
  unint64_t v93 = 0x6DB6DB6DB6DB6DB7 * ((v89 - v92) >> 3) + 1;
  if (v93 > 0x492492492492492) {
    abort();
  }
  unint64_t v94 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v88 - (void)v92) >> 3);
  if (2 * v94 > v93) {
    unint64_t v93 = 2 * v94;
  }
  if (v94 >= 0x249249249249249) {
    unint64_t v95 = 0x492492492492492;
  }
  else {
    unint64_t v95 = v93;
  }
  v120 = v47 + 32;
  if (!v95)
  {
    v96 = 0;
    goto LABEL_184;
  }
  if (v95 > 0x492492492492492) {
LABEL_203:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  v96 = (char *)operator new(56 * v95);
LABEL_184:
  v97 = &v96[8 * ((v89 - v92) >> 3)];
  v116 = v96;
  v117 = v97;
  v118 = v97;
  v119 = &v96[56 * v95];
  char *v97 = 0;
  *((_DWORD *)v97 + 13) = -1;
  uint64_t v98 = *(unsigned int *)(a3 + 52);
  if (v98 == -1)
  {
    v99 = &v96[8 * ((v89 - v92) >> 3)];
  }
  else
  {
    ((void (*)(char **, char *, uint64_t))off_1EF58F8A0[v98])(&v106, v97, a3);
    *((_DWORD *)v97 + 13) = v98;
    uint64_t v92 = (char *)*((void *)v47 + 2);
    uint64_t v89 = (char *)*((void *)v47 + 3);
    v97 = v117;
    v99 = v118;
  }
  double v91 = v99 + 56;
  v118 = v99 + 56;
  if (v89 == v92)
  {
    v102 = v92;
  }
  else
  {
    unint64_t v100 = 0;
    do
    {
      v97[v100 - 56] = 0;
      *(_DWORD *)&v97[v100 - 4] = -1;
      uint64_t v101 = *(unsigned int *)&v89[v100 - 4];
      if (v101 != -1)
      {
        ((void (*)(char **, char *, char *))off_1EF58F8C0[v101])(&v106, &v97[v100 - 56], &v89[v100 - 56]);
        *(_DWORD *)&v97[v100 - 4] = v101;
      }
      v100 -= 56;
    }
    while (&v89[v100] != v92);
    v97 += v100;
    v102 = (char *)*((void *)v47 + 2);
    uint64_t v92 = (char *)*((void *)v47 + 3);
    double v91 = v118;
  }
  *((void *)v47 + 2) = v97;
  *((void *)v47 + 3) = v91;
  v103 = (char *)*((void *)v47 + 4);
  *((void *)v47 + 4) = v119;
  v118 = v92;
  v119 = v103;
  v116 = v102;
  v117 = v102;
  if (v92 != v102)
  {
    do
    {
      v104 = v92 - 56;
      v118 = v92 - 56;
      uint64_t v105 = *((unsigned int *)v92 - 1);
      if (v105 != -1)
      {
        ((void (*)(float *))off_1EF58F880[v105])(&v109);
        v104 = v118;
      }
      *((_DWORD *)v92 - 1) = -1;
      uint64_t v92 = v104;
    }
    while (v104 != v102);
    uint64_t v92 = v116;
  }
  if (v92) {
    operator delete(v92);
  }
LABEL_202:
  *((void *)v47 + 3) = v91;
}

void sub_1A1FE1C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

void sub_1A1FE1CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Tiled const*,geo::linear_map<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>,std::equal_to<debugComponents::DisplayOptions>,std::allocator<std::pair<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>>>,std::vector<std::pair<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Tiled const*,geo::linear_map<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>,std::equal_to<debugComponents::DisplayOptions>,std::allocator<std::pair<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>>>,std::vector<std::pair<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>>>>>,void *>>>>::reset[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A1FE1CF4()
{
  if (*v0 != -1) {
    JUMPOUT(0x1A1FE1D18);
  }
  JUMPOUT(0x1A1FE1D1CLL);
}

uint64_t std::__split_buffer<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 != v2)
  {
    do
    {
      uint64_t v4 = v3 - 56;
      *(void *)(a1 + 16) = v3 - 56;
      uint64_t v5 = *(unsigned int *)(v3 - 4);
      if (v5 != -1)
      {
        ((void (*)(char *))off_1EF58F880[v5])(&v7);
        uint64_t v4 = *(void *)(a1 + 16);
      }
      *(_DWORD *)(v3 - 4) = -1;
      uint64_t v3 = v4;
    }
    while (v4 != v2);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2gm3BoxIfLi3EEENS8_6SphereIfLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIfLj3EffEENSG_IfLj2EffEEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJSA_SE_SH_SI_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(void *)a2 = v3;
  uint64_t v4 = *(uint64_t *)((char *)a3 + 12);
  *(_DWORD *)(a2 + 20) = *((_DWORD *)a3 + 5);
  *(void *)(a2 + 12) = v4;
  *(_DWORD *)(a2 + 24) = *((_DWORD *)a3 + 6);
  __n128 result = *(__n128 *)((char *)a3 + 28);
  *(__n128 *)(a2 + 28) = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2gm3BoxIfLi3EEENS8_6SphereIfLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIfLj3EffEENSG_IfLj2EffEEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJSA_SE_SH_SI_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(void *)a2 = v3;
  uint64_t v4 = *(uint64_t *)((char *)a3 + 12);
  *(_DWORD *)(a2 + 20) = *((_DWORD *)a3 + 5);
  *(void *)(a2 + 12) = v4;
  *(_DWORD *)(a2 + 24) = *((_DWORD *)a3 + 6);
  __n128 result = *(__n128 *)((char *)a3 + 28);
  *(void *)(a2 + 44) = *(uint64_t *)((char *)a3 + 44);
  *(__n128 *)(a2 + 28) = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2gm3BoxIfLi3EEENS8_6SphereIfLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIfLj3EffEENSG_IfLj2EffEEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJSA_SE_SH_SI_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2gm3BoxIfLi3EEENS8_6SphereIfLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIfLj3EffEENSG_IfLj2EffEEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJSA_SE_SH_SI_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2gm3BoxIfLi3EEENS8_6SphereIfLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIfLj3EffEENSG_IfLj2EffEEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJSA_SE_SH_SI_EEERKS10_EEEDcSS_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(void *)a2 = v3;
  uint64_t v4 = *(uint64_t *)((char *)a3 + 12);
  *(_DWORD *)(a2 + 20) = *((_DWORD *)a3 + 5);
  *(void *)(a2 + 12) = v4;
  *(_DWORD *)(a2 + 24) = *((_DWORD *)a3 + 6);
  __n128 result = *(__n128 *)((char *)a3 + 28);
  *(__n128 *)(a2 + 28) = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2gm3BoxIfLi3EEENS8_6SphereIfLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIfLj3EffEENSG_IfLj2EffEEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJSA_SE_SH_SI_EEERKS10_EEEDcSS_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(void *)a2 = v3;
  uint64_t v4 = *(uint64_t *)((char *)a3 + 12);
  *(_DWORD *)(a2 + 20) = *((_DWORD *)a3 + 5);
  *(void *)(a2 + 12) = v4;
  *(_DWORD *)(a2 + 24) = *((_DWORD *)a3 + 6);
  __n128 result = *(__n128 *)((char *)a3 + 28);
  *(void *)(a2 + 44) = *(uint64_t *)((char *)a3 + 44);
  *(__n128 *)(a2 + 28) = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2gm3BoxIfLi3EEENS8_6SphereIfLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIfLj3EffEENSG_IfLj2EffEEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJSA_SE_SH_SI_EEERKS10_EEEDcSS_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2gm3BoxIfLi3EEENS8_6SphereIfLi3ENS_9enable_ifILb1EvEEEEN3geo11OrientedBoxIfLj3EffEENSG_IfLj2EffEEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSS_OT0_E_JRNS0_6__baseILSN_1EJSA_SE_SH_SI_EEERKS10_EEEDcSS_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t std::pair<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    uint64_t v4 = *(void **)(a1 + 16);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 56;
        uint64_t v6 = *(unsigned int *)(v3 - 4);
        if (v6 != -1) {
          ((void (*)(char *, uint64_t))off_1EF58F880[v6])(&v8, v3 - 56);
        }
        *(_DWORD *)(v3 - 4) = -1;
        v3 -= 56;
      }
      while (v5 != v2);
      uint64_t v4 = *(void **)(a1 + 16);
    }
    *(void *)(a1 + 24) = v2;
    operator delete(v4);
  }
  return a1;
}

void **std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>::~vector[abi:nn180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 56;
        uint64_t v6 = *((unsigned int *)v3 - 1);
        if (v6 != -1) {
          ((void (*)(char *, char *))off_1EF58F880[v6])(&v8, v3 - 56);
        }
        *((_DWORD *)v3 - 1) = -1;
        v3 -= 56;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>::vector(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  int64_t v5 = v4 - *a2;
  if (v4 != *a2)
  {
    unint64_t v6 = 0x6DB6DB6DB6DB6DB7 * (v5 >> 3);
    if (v6 >= 0x492492492492493) {
      abort();
    }
    char v7 = (char *)operator new(v5);
    uint64_t v8 = 0;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[56 * v6];
    do
    {
      unint64_t v9 = &v7[v8];
      *unint64_t v9 = 0;
      *((_DWORD *)v9 + 13) = -1;
      uint64_t v10 = *(unsigned int *)(v3 + v8 + 52);
      if (v10 != -1)
      {
        ((void (*)(char *, char *))off_1EF58F8A0[v10])(v12, &v7[v8]);
        *((_DWORD *)v9 + 13) = v10;
      }
      v8 += 56;
    }
    while (v3 + v8 != v4);
    a1[1] = &v7[v8];
  }
  return a1;
}

void sub_1A1FE2144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v17 = *(unsigned int *)(v15 + 52);
  if (v17 != -1) {
    ((void (*)(char *, uint64_t))off_1EF58F880[v17])(&a13, v15);
  }
  *(_DWORD *)(v15 + 52) = -1;
  *(void *)(v13 + 8) = v14;
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::pair<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    while (1)
    {
      uint64_t v4 = i - 40;
      *(void *)(a1 + 16) = i - 40;
      uint64_t v5 = *(void *)(i - 24);
      if (v5) {
        break;
      }
      i -= 40;
      if (v4 == v2) {
        goto LABEL_12;
      }
    }
    uint64_t v6 = *(void *)(i - 16);
    char v7 = *(void **)(i - 24);
    if (v6 != v5)
    {
      do
      {
        uint64_t v8 = v6 - 56;
        uint64_t v9 = *(unsigned int *)(v6 - 4);
        if (v9 != -1) {
          ((void (*)(char *, uint64_t))off_1EF58F880[v9])(&v11, v6 - 56);
        }
        *(_DWORD *)(v6 - 4) = -1;
        v6 -= 56;
      }
      while (v8 != v5);
      char v7 = *(void **)(i - 24);
    }
    *(void *)(i - 16) = v5;
    operator delete(v7);
  }
LABEL_12:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Tiled const*,geo::linear_map<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>,std::equal_to<debugComponents::DisplayOptions>,std::allocator<std::pair<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>>>,std::vector<std::pair<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Tiled const*,geo::linear_map<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>,std::equal_to<debugComponents::DisplayOptions>,std::allocator<std::pair<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>>>,std::vector<std::pair<debugComponents::DisplayOptions,std::vector<std::variant<gm::Box<float,3>,gm::Sphere<float,3,std::enable_if<true,void>>,geo::OrientedBox<float,3u,float,float>,geo::OrientedBox<float,2u,float,float>>>>>>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v2 = v1[3];
      if (v2)
      {
        uint64_t v3 = v1[4];
        uint64_t v4 = (void *)v1[3];
        if (v3 != v2)
        {
          do
          {
            uint64_t v6 = *(void *)(v3 - 24);
            if (v6)
            {
              uint64_t v7 = *(void *)(v3 - 16);
              uint64_t v5 = *(void **)(v3 - 24);
              if (v7 != v6)
              {
                do
                {
                  uint64_t v8 = v7 - 56;
                  uint64_t v9 = *(unsigned int *)(v7 - 4);
                  if (v9 != -1) {
                    ((void (*)(char *, uint64_t))off_1EF58F880[v9])(&v10, v7 - 56);
                  }
                  *(_DWORD *)(v7 - 4) = -1;
                  v7 -= 56;
                }
                while (v8 != v6);
                uint64_t v5 = *(void **)(v3 - 24);
              }
              *(void *)(v3 - 16) = v6;
              operator delete(v5);
            }
            v3 -= 40;
          }
          while (v3 != v2);
          uint64_t v4 = (void *)v1[3];
        }
        v1[4] = v2;
        operator delete(v4);
      }
    }
    operator delete(v1);
  }
}

void md::DebugDrawContext::addTileLocalLines(uint64_t *a1, unint64_t a2, long long *a3, long long *a4, int *a5)
{
  if (a3 != a4)
  {
    uint64_t i = a5;
    uint64_t v7 = a3;
    unint64_t v8 = a2;
    unint64_t v10 = 0x9DDFEA08EB382D69 * (((((a2 >> 3) & 0x3FFFFFF) << 6) | 8) ^ HIDWORD(a2));
    unint64_t v11 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v10 >> 47) ^ v10);
    unint64_t v12 = 0x9DDFEA08EB382D69 * (v11 ^ (v11 >> 47));
    uint64_t v81 = a1 + 2;
    double v78 = (__int16 *)((char *)a5 + 9);
    unint64_t v79 = v12;
    while (1)
    {
      unint64_t v14 = a1[1];
      if (v14)
      {
        uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
        v15.i16[0] = vaddlv_u8(v15);
        if (v15.u32[0] > 1uLL)
        {
          unint64_t v5 = v12;
          if (v12 >= v14) {
            unint64_t v5 = v12 % v14;
          }
        }
        else
        {
          unint64_t v5 = v12 & (v14 - 1);
        }
        unint64_t v16 = *(void ***)(*a1 + 8 * v5);
        if (v16)
        {
          uint64_t v17 = *v16;
          if (*v16)
          {
            if (v15.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v19 = v17[1];
                if (v19 == v12)
                {
                  if (v17[2] == v8) {
                    goto LABEL_85;
                  }
                }
                else if ((v19 & (v14 - 1)) != v5)
                {
                  goto LABEL_25;
                }
                uint64_t v17 = (void *)*v17;
                if (!v17) {
                  goto LABEL_25;
                }
              }
            }
            do
            {
              unint64_t v18 = v17[1];
              if (v18 == v12)
              {
                if (v17[2] == v8) {
                  goto LABEL_85;
                }
              }
              else
              {
                if (v18 >= v14) {
                  v18 %= v14;
                }
                if (v18 != v5) {
                  break;
                }
              }
              uint64_t v17 = (void *)*v17;
            }
            while (v17);
          }
        }
      }
LABEL_25:
      uint64_t v17 = operator new(0x30uLL);
      *uint64_t v17 = 0;
      v17[1] = v12;
      v17[2] = v8;
      v17[3] = 0;
      v17[4] = 0;
      v17[5] = 0;
      float v20 = (float)(unint64_t)(a1[3] + 1);
      float v21 = *((float *)a1 + 8);
      if (!v14 || (float)(v21 * (float)v14) < v20) {
        break;
      }
LABEL_75:
      uint64_t v42 = *a1;
      uint64_t v43 = *(void **)(*a1 + 8 * v5);
      if (v43)
      {
        *uint64_t v17 = *v43;
LABEL_83:
        *uint64_t v43 = v17;
        goto LABEL_84;
      }
      *uint64_t v17 = *v81;
      *uint64_t v81 = v17;
      *(void *)(v42 + 8 * v5) = v81;
      if (*v17)
      {
        unint64_t v44 = *(void *)(*v17 + 8);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v44 >= v14) {
            v44 %= v14;
          }
        }
        else
        {
          v44 &= v14 - 1;
        }
        uint64_t v43 = (void *)(*a1 + 8 * v44);
        goto LABEL_83;
      }
LABEL_84:
      ++a1[3];
LABEL_85:
      uint64_t v46 = (char *)v17[3];
      unint64_t v45 = (char *)v17[4];
      v47 = v46;
      if (v46 != v45)
      {
        int v48 = *i;
        int v49 = *((unsigned __int8 *)i + 12);
        char v50 = *((unsigned char *)i + 8);
        float v51 = *((float *)i + 1);
        v47 = (char *)v17[3];
        if (v50)
        {
          while (v48 != *(_DWORD *)v47 || v49 != v47[12] || !v47[8] || v51 != *((float *)v47 + 1))
          {
            v47 += 40;
            if (v47 == v45) {
              goto LABEL_101;
            }
          }
        }
        else
        {
          v47 = (char *)v17[3];
          while (v48 != *(_DWORD *)v47 || v49 != v47[12] || v47[8])
          {
            v47 += 40;
            if (v47 == v45) {
              goto LABEL_101;
            }
          }
        }
        unint64_t v8 = a2;
      }
      if (v47 == v45)
      {
        int v48 = *i;
        float v51 = *((float *)i + 1);
        char v50 = *((unsigned char *)i + 8);
        int v49 = *((unsigned __int8 *)i + 12);
LABEL_101:
        __int16 v82 = *v78;
        char v83 = *((unsigned char *)v78 + 2);
        v47 = (char *)v17[3];
        if (v46 != v45)
        {
          v47 = (char *)v17[3];
          if (v50)
          {
            while (v48 != *(_DWORD *)v47 || v49 != v47[12] || !v47[8] || v51 != *((float *)v47 + 1))
            {
              v47 += 40;
              if (v47 == v45) {
                goto LABEL_115;
              }
            }
          }
          else
          {
            v47 = (char *)v17[3];
            while (v48 != *(_DWORD *)v47 || v49 != v47[12] || v47[8])
            {
              v47 += 40;
              if (v47 == v45) {
                goto LABEL_115;
              }
            }
          }
        }
        if (v47 == v45)
        {
LABEL_115:
          unint64_t v52 = v17[5];
          if ((unint64_t)v45 >= v52)
          {
            unint64_t v54 = 0xCCCCCCCCCCCCCCCDLL * ((v45 - v46) >> 3) + 1;
            if (v54 > 0x666666666666666) {
              abort();
            }
            unint64_t v55 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - (void)v46) >> 3);
            if (2 * v55 > v54) {
              unint64_t v54 = 2 * v55;
            }
            if (v55 >= 0x333333333333333) {
              unint64_t v56 = 0x666666666666666;
            }
            else {
              unint64_t v56 = v54;
            }
            if (v56)
            {
              if (v56 > 0x666666666666666) {
                goto LABEL_166;
              }
              unint64_t v57 = (char *)operator new(40 * v56);
            }
            else
            {
              unint64_t v57 = 0;
            }
            uint64_t v58 = &v57[8 * ((v45 - v46) >> 3)];
            *(_DWORD *)uint64_t v58 = v48;
            *((float *)v58 + 1) = v51;
            v58[8] = v50;
            *(_WORD *)(v58 + 9) = *v78;
            v58[11] = *((unsigned char *)v78 + 2);
            v58[12] = v49;
            *((void *)v58 + 3) = 0;
            *((void *)v58 + 4) = 0;
            *((void *)v58 + 2) = 0;
            unint64_t v53 = v58 + 40;
            if (v46 == v45)
            {
              v17[3] = v58;
              v17[4] = v53;
              v17[5] = &v57[40 * v56];
              uint64_t i = a5;
            }
            else
            {
              uint64_t v59 = 0;
              do
              {
                long long v60 = &v58[v59];
                uint64_t v61 = &v45[v59];
                *((_DWORD *)v60 - 10) = *(_DWORD *)&v45[v59 - 40];
                uint64_t v62 = *(void *)&v45[v59 - 36];
                *(v60 - 28) = v45[v59 - 28];
                *(void *)(v60 - 36) = v62;
                *((void *)v60 - 2) = 0;
                *((void *)v60 - 1) = 0;
                *(_OWORD *)(v60 - 24) = *(_OWORD *)&v45[v59 - 24];
                *((void *)v60 - 1) = *(void *)&v45[v59 - 8];
                *((void *)v61 - 3) = 0;
                *((void *)v61 - 2) = 0;
                *((void *)v61 - 1) = 0;
                v59 -= 40;
              }
              while (&v45[v59] != v46);
              uint64_t v46 = (char *)v17[3];
              float64x2_t v63 = (char *)v17[4];
              v17[3] = &v58[v59];
              *((void *)&v84 + 1) = &v57[40 * v56];
              *(void *)&long long v84 = v58 + 40;
              *((_OWORD *)v17 + 2) = v84;
              unint64_t v53 = v58 + 40;
              for (uint64_t i = a5; v63 != v46; v63 -= 40)
              {
                uint64_t v64 = (void *)*((void *)v63 - 3);
                if (v64)
                {
                  *((void *)v63 - 2) = v64;
                  operator delete(v64);
                }
              }
            }
            if (v46) {
              operator delete(v46);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v45 = v48;
            *((float *)v45 + 1) = v51;
            v45[8] = v50;
            *(_WORD *)(v45 + 9) = v82;
            v45[11] = v83;
            v45[12] = v49;
            *((void *)v45 + 3) = 0;
            *((void *)v45 + 4) = 0;
            *((void *)v45 + 2) = 0;
            unint64_t v53 = v45 + 40;
            v17[4] = v45 + 40;
          }
          v17[4] = v53;
          v47 = v53 - 40;
        }
        unint64_t v8 = a2;
      }
      uint64_t v66 = (char *)*((void *)v47 + 3);
      unint64_t v65 = *((void *)v47 + 4);
      if ((unint64_t)v66 < v65)
      {
        long long v13 = *v7;
        *((void *)v66 + 2) = *((void *)v7 + 2);
        *(_OWORD *)uint64_t v66 = v13;
        unint64_t v5 = (unint64_t)(v66 + 24);
        unint64_t v12 = v79;
      }
      else
      {
        char v67 = (unsigned char *)*((void *)v47 + 2);
        unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * ((v66 - v67) >> 3) + 1;
        unint64_t v12 = v79;
        if (v68 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - (void)v67) >> 3);
        if (2 * v69 > v68) {
          unint64_t v68 = 2 * v69;
        }
        if (v69 >= 0x555555555555555) {
          unint64_t v70 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v70 = v68;
        }
        if (v70)
        {
          if (v70 > 0xAAAAAAAAAAAAAAALL) {
LABEL_166:
          }
            std::__throw_bad_array_new_length[abi:nn180100]();
          char v71 = (char *)operator new(24 * v70);
        }
        else
        {
          char v71 = 0;
        }
        double v72 = &v71[8 * ((v66 - v67) >> 3)];
        *(_OWORD *)double v72 = *v7;
        *((void *)v72 + 2) = *((void *)v7 + 2);
        double v73 = v72;
        if (v66 != v67)
        {
          do
          {
            long long v74 = *(_OWORD *)(v66 - 24);
            *((void *)v73 - 1) = *((void *)v66 - 1);
            *(_OWORD *)(v73 - 24) = v74;
            v73 -= 24;
            v66 -= 24;
          }
          while (v66 != v67);
          uint64_t v66 = (char *)*((void *)v47 + 2);
        }
        unint64_t v5 = (unint64_t)(v72 + 24);
        *((void *)v47 + 2) = v73;
        *((void *)v47 + 3) = v72 + 24;
        *((void *)v47 + 4) = &v71[24 * v70];
        if (v66) {
          operator delete(v66);
        }
      }
      *((void *)v47 + 3) = v5;
      uint64_t v7 = (long long *)((char *)v7 + 24);
      if (v7 == a4) {
        return;
      }
    }
    BOOL v22 = (v14 & (v14 - 1)) != 0;
    if (v14 < 3) {
      BOOL v22 = 1;
    }
    unint64_t v23 = v22 | (2 * v14);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v14 = a1[1];
    }
    if (prime <= v14)
    {
      if (prime >= v14) {
        goto LABEL_62;
      }
      unint64_t v36 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v14 < 3 || (uint8x8_t v37 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime >= v14)
      {
        unint64_t v14 = a1[1];
LABEL_62:
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v12 >= v14) {
            unint64_t v5 = v12 % v14;
          }
          else {
            unint64_t v5 = v12;
          }
        }
        else
        {
          unint64_t v5 = (v14 - 1) & v12;
        }
        goto LABEL_75;
      }
      if (!prime)
      {
        uint64_t v75 = (void *)*a1;
        *a1 = 0;
        if (v75) {
          operator delete(v75);
        }
        unint64_t v14 = 0;
        a1[1] = 0;
        goto LABEL_62;
      }
    }
    if (prime >> 61) {
      goto LABEL_166;
    }
    uint64_t v26 = operator new(8 * prime);
    uint64_t v27 = (void *)*a1;
    *a1 = (uint64_t)v26;
    if (v27) {
      operator delete(v27);
    }
    uint64_t v28 = 0;
    a1[1] = prime;
    do
      *(void *)(*a1 + 8 * v28++) = 0;
    while (prime != v28);
    size_t v29 = (void *)*v81;
    if (!*v81)
    {
LABEL_61:
      unint64_t v14 = prime;
      goto LABEL_62;
    }
    size_t v30 = v29[1];
    size_t v31 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v32 = v30 & v31;
      *(void *)(*a1 + 8 * v32) = v81;
      for (j = (void *)*v29; *v29; j = (void *)*v29)
      {
        size_t v34 = j[1] & v31;
        if (v34 == v32)
        {
          size_t v29 = j;
        }
        else if (*(void *)(*a1 + 8 * v34))
        {
          *size_t v29 = *j;
          uint64_t v35 = 8 * v34;
          void *j = **(void **)(*a1 + v35);
          **(void **)(*a1 + v35) = j;
        }
        else
        {
          *(void *)(*a1 + 8 * v34) = v29;
          size_t v29 = j;
          size_t v32 = v34;
        }
      }
      goto LABEL_61;
    }
    if (v30 >= prime) {
      v30 %= prime;
    }
    *(void *)(*a1 + 8 * v30) = v81;
    v39 = (void *)*v29;
    if (!*v29) {
      goto LABEL_61;
    }
    while (1)
    {
      size_t v41 = v39[1];
      if (v41 >= prime) {
        v41 %= prime;
      }
      if (v41 != v30)
      {
        if (!*(void *)(*a1 + 8 * v41))
        {
          *(void *)(*a1 + 8 * v41) = v29;
          goto LABEL_66;
        }
        *size_t v29 = *v39;
        uint64_t v40 = 8 * v41;
        void *v39 = **(void **)(*a1 + v40);
        **(void **)(*a1 + v40) = v39;
        v39 = v29;
      }
      size_t v41 = v30;
LABEL_66:
      size_t v29 = v39;
      v39 = (void *)*v39;
      size_t v30 = v41;
      if (!v39) {
        goto LABEL_61;
      }
    }
  }
}

void sub_1A1FE2C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Tiled const*,geo::linear_map<debugComponents::DisplayOptions,std::vector<gm::LineSegment<float,3>>,std::equal_to<debugComponents::DisplayOptions>,std::allocator<std::pair<debugComponents::DisplayOptions,std::vector<gm::LineSegment<float,3>>>>,std::vector<std::pair<debugComponents::DisplayOptions,std::vector<gm::LineSegment<float,3>>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Tiled const*,geo::linear_map<debugComponents::DisplayOptions,std::vector<gm::LineSegment<float,3>>,std::equal_to<debugComponents::DisplayOptions>,std::allocator<std::pair<debugComponents::DisplayOptions,std::vector<gm::LineSegment<float,3>>>>,std::vector<std::pair<debugComponents::DisplayOptions,std::vector<gm::LineSegment<float,3>>>>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Tiled const*,geo::linear_map<debugComponents::DisplayOptions,std::vector<gm::LineSegment<float,3>>,std::equal_to<debugComponents::DisplayOptions>,std::allocator<std::pair<debugComponents::DisplayOptions,std::vector<gm::LineSegment<float,3>>>>,std::vector<std::pair<debugComponents::DisplayOptions,std::vector<gm::LineSegment<float,3>>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Tiled const*,geo::linear_map<debugComponents::DisplayOptions,std::vector<gm::LineSegment<float,3>>,std::equal_to<debugComponents::DisplayOptions>,std::allocator<std::pair<debugComponents::DisplayOptions,std::vector<gm::LineSegment<float,3>>>>,std::vector<std::pair<debugComponents::DisplayOptions,std::vector<gm::LineSegment<float,3>>>>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = v2[3];
      if (v3)
      {
        uint64_t v4 = v2[4];
        unint64_t v5 = (void *)v2[3];
        if (v4 != v3)
        {
          do
          {
            uint64_t v6 = *(void **)(v4 - 24);
            if (v6)
            {
              *(void *)(v4 - 16) = v6;
              operator delete(v6);
            }
            v4 -= 40;
          }
          while (v4 != v3);
          unint64_t v5 = (void *)v2[3];
        }
        v2[4] = v3;
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::Point::ExtendedVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::Point::ExtendedVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::Point::ExtendedVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void non-virtual thunk to'ggl::Point::ExtendedMesh::~ExtendedMesh(ggl::Point::ExtendedMesh *this)
{
  ggl::Mesh::~Mesh((ggl::Point::ExtendedMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Point::ExtendedMesh *)((char *)this - 16));
}

void ggl::Point::ExtendedMesh::~ExtendedMesh(ggl::Point::ExtendedMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::CommonMesh::BufferPos4,ggl::Point::ExtendedVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::CommonMesh::BufferPos4,ggl::Point::ExtendedVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

void ggl::Point::PipelineState::~PipelineState(ggl::Point::PipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::Point::PipelineSetup::textureIsEnabled(ggl::Point::PipelineSetup *this)
{
  return 0;
}

BOOL ggl::Point::PipelineSetup::constantDataIsEnabled(ggl::Point::PipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

void ggl::Point::PipelineSetup::~PipelineSetup(ggl::Point::PipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::Point::ExtendedPipelineState::~ExtendedPipelineState(ggl::Point::ExtendedPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::Point::ExtendedPipelineSetup::textureIsEnabled(ggl::Point::ExtendedPipelineSetup *this)
{
  return 0;
}

BOOL ggl::Point::ExtendedPipelineSetup::constantDataIsEnabled(ggl::Point::ExtendedPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

void ggl::Point::ExtendedPipelineSetup::~ExtendedPipelineSetup(ggl::Point::ExtendedPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void md::Logic<md::CollectMapDataLogic<(md::MapDataType)33>,md::CollectMapDataContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    unint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      unint64_t v5 = __p;
    }
    unint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void md::CollectMapDataLogic<(md::MapDataType)33>::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v5 = (void *)gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)33>>(*(int8x8_t **)(a1 + 128));
  uint64_t v6 = v5;
  if (v5[29])
  {
    char v7 = (void *)v5[28];
    if (v7)
    {
      uint64_t v8 = v5[31];
      uint64_t v9 = v5[7];
      uint64_t v10 = (v5[8] - v9) >> 3;
      do
      {
        uint64_t v315 = v9;
        uint64_t v316 = v10;
        uint64_t v314 = v8;
        uint64_t v11 = v7[6];
        if (!v11) {
          goto LABEL_312;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48))(v11, &v314, &v315);
        char v7 = (void *)*v7;
      }
      while (v7);
    }
  }
  v6[8] = v6[7];
  v6[11] = v6[10];
  unint64_t v12 = (void *)gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)33>>(*(int8x8_t **)(a1 + 128));
  uint64_t v13 = v12;
  if (v12[29])
  {
    unint64_t v14 = (void *)v12[28];
    if (v14)
    {
      uint64_t v15 = v12[31];
      uint64_t v16 = v12[7];
      uint64_t v17 = (v12[8] - v16) >> 3;
      while (1)
      {
        uint64_t v315 = v16;
        uint64_t v316 = v17;
        uint64_t v314 = v15;
        uint64_t v18 = v14[6];
        if (!v18) {
          break;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v314, &v315);
        unint64_t v14 = (void *)*v14;
        if (!v14) {
          goto LABEL_11;
        }
      }
LABEL_312:
      std::__throw_bad_function_call[abi:nn180100]();
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
      return;
    }
  }
LABEL_11:
  v13[8] = v13[7];
  v13[11] = v13[10];
  uint64_t v312 = *a3;
  uint64_t v19 = *(int8x8_t **)(a1 + 128);
  if (!*(_WORD *)(a1 + 120) && !*(_WORD *)(a1 + 122) && *(_DWORD *)(a1 + 124) == -1) {
    gdc::Registry::create(*(gdc::Registry **)(a1 + 128));
  }
  uint64_t v313 = a1;
  float v20 = (void *)gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)33>>(v19);
  float v21 = (void *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)33>>(v19);
  BOOL v22 = (void *)gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)33>>(v19);
  unint64_t v23 = (void *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)33>>(v19);
  uint64_t v24 = gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>(v19);
  double v25 = (void *)v24;
  uint64_t v26 = v22 + 4;
  uint64_t v27 = v23 + 4;
  uint64_t v28 = v24 + 32;
  uint64_t v30 = v20[7];
  uint64_t v29 = v20[8];
  if (v21[8] - v21[7] >= (unint64_t)(v29 - v30)) {
    size_t v31 = v20 + 4;
  }
  else {
    size_t v31 = v21 + 4;
  }
  if (v22[8] - v22[7] < v31[4] - v31[3]) {
    size_t v31 = v22 + 4;
  }
  if (v23[8] - v23[7] < v31[4] - v31[3]) {
    size_t v31 = v23 + 4;
  }
  if (*(void *)(v24 + 64) - *(void *)(v24 + 56) >= v31[4] - v31[3]) {
    size_t v32 = v31;
  }
  else {
    size_t v32 = (void *)(v24 + 32);
  }
  if (v20 + 4 == v32)
  {
    uint64_t v309 = v24 + 32;
    uint64_t v315 = v312;
    uint64_t v316 = v313;
    while (v30 != v29)
    {
      unint64_t v34 = *(unsigned int *)(v30 + 4);
      unint64_t v35 = v34 >> 7;
      uint64_t v36 = v21[4];
      unint64_t v37 = (v21[5] - v36) >> 3;
      if (v34 >> 7 < v37)
      {
        uint64_t v38 = *(void *)(v36 + 8 * v35);
        if (v38)
        {
          uint64_t v39 = v34 & 0x7F;
          unint64_t v40 = *(unsigned __int16 *)(v38 + 2 * v39);
          uint64_t v41 = v21[7];
          uint64_t v42 = v21[8];
          unint64_t v43 = (v42 - v41) >> 3;
          if (v43 > v40)
          {
            uint64_t v44 = v41 + 8 * v40;
            if (v44 != v42 && *(_DWORD *)(v44 + 4) == v34)
            {
              uint64_t v46 = v22[4];
              unint64_t v47 = (v22[5] - v46) >> 3;
              if (v35 < v47)
              {
                uint64_t v48 = *(void *)(v46 + 8 * v35);
                if (v48)
                {
                  unint64_t v49 = *(unsigned __int16 *)(v48 + 2 * v39);
                  uint64_t v51 = v22[7];
                  uint64_t v50 = v22[8];
                  unint64_t v52 = (v50 - v51) >> 3;
                  if (v52 > v49)
                  {
                    uint64_t v53 = v51 + 8 * v49;
                    if (v53 != v50 && *(_DWORD *)(v53 + 4) == v34)
                    {
                      uint64_t v55 = v23[4];
                      unint64_t v56 = (v23[5] - v55) >> 3;
                      if (v35 < v56)
                      {
                        uint64_t v57 = *(void *)(v55 + 8 * v35);
                        if (v57)
                        {
                          unint64_t v58 = *(unsigned __int16 *)(v57 + 2 * v39);
                          uint64_t v59 = v23[7];
                          v310 = v27;
                          uint64_t v308 = v23[8];
                          unint64_t v307 = (v308 - v59) >> 3;
                          if (v307 > v58)
                          {
                            uint64_t v60 = v59 + 8 * v58;
                            if (v60 != v308 && *(_DWORD *)(v60 + 4) == v34)
                            {
                              uint64_t v306 = v25[4];
                              unint64_t v305 = (v25[5] - v306) >> 3;
                              if (v35 < v305)
                              {
                                uint64_t v62 = *(void *)(v306 + 8 * v35);
                                if (v62)
                                {
                                  unint64_t v63 = *(unsigned __int16 *)(v62 + 2 * v39);
                                  uint64_t v303 = v25[7];
                                  uint64_t v304 = v25[8];
                                  if ((v304 - v303) >> 3 > v63)
                                  {
                                    uint64_t v64 = v303 + 8 * v63;
                                    if (v64 != v304 && *(_DWORD *)(v64 + 4) == v34)
                                    {
                                      unint64_t v65 = *(void *)v30;
                                      uint64_t v66 = HIDWORD(*(void *)v30);
                                      unint64_t v67 = *(void *)v30 >> 39;
                                      if (v67 < v37
                                        && (uint64_t v68 = *(void *)(v36 + 8 * v67)) != 0
                                        && (unint64_t v69 = *(unsigned __int16 *)(v68 + 2 * (HIDWORD(v65) & 0x7F)), v43 > v69)
                                        && (uint64_t v70 = v41 + 8 * v69, v70 != v42)
                                        && *(_DWORD *)(v70 + 4) == v66)
                                      {
                                        char v71 = (uint64_t *)(v21[10] + 24 * v69);
                                      }
                                      else
                                      {
                                        char v71 = (uint64_t *)v21[11];
                                      }
                                      if (v67 < v47
                                        && (uint64_t v72 = *(void *)(v46 + 8 * v67)) != 0
                                        && (unint64_t v73 = *(unsigned __int16 *)(v72 + 2 * (HIDWORD(v65) & 0x7F)), v52 > v73)
                                        && (uint64_t v74 = v51 + 8 * v73, v74 != v50)
                                        && *(_DWORD *)(v74 + 4) == v66)
                                      {
                                        uint64_t v75 = (uint64_t *)(v22[10] + 24 * v73);
                                      }
                                      else
                                      {
                                        uint64_t v75 = (uint64_t *)v22[11];
                                      }
                                      uint64_t v76 = HIDWORD(*(void *)v30);
                                      if (v67 < v56
                                        && (uint64_t v77 = *(void *)(v55 + 8 * v67)) != 0
                                        && (unint64_t v78 = *(unsigned __int16 *)(v77 + 2 * (HIDWORD(v65) & 0x7F)), v307 > v78)
                                        && (uint64_t v79 = v59 + 8 * v78, v79 != v308)
                                        && *(_DWORD *)(v79 + 4) == v76)
                                      {
                                        unint64_t v80 = (v304 - v303) >> 3;
                                        uint64_t v81 = (uint64_t *)(v23[10] + 24 * v78);
                                      }
                                      else
                                      {
                                        unint64_t v80 = (v304 - v303) >> 3;
                                        uint64_t v81 = (uint64_t *)v23[11];
                                      }
                                      if (v67 < v305
                                        && (uint64_t v82 = *(void *)(v306 + 8 * v67)) != 0
                                        && (unint64_t v83 = *(unsigned __int16 *)(v82 + 2 * (HIDWORD(v65) & 0x7F)), v80 > v83)
                                        && (uint64_t v84 = v303 + 8 * v83, v84 != v304)
                                        && *(_DWORD *)(v84 + 4) == v76)
                                      {
                                        size_t v33 = (uint64_t *)(v25[10] + 24 * v83);
                                      }
                                      else
                                      {
                                        size_t v33 = (uint64_t *)v25[11];
                                      }
                                      md::CollectMapDataLogic<(md::MapDataType)33>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)33> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)33> &,SceneComponents::LayerDataExitingView<(md::MapDataType)33> &)#1}::operator()((uint64_t)&v315, v65, v71, v75, v81, v33);
                                      uint64_t v27 = v310;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v30 += 8;
    }
    uint64_t v28 = v309;
  }
  uint64_t v85 = v312;
  if (v21 + 4 != v32)
  {
    if (v26 != v32) {
      goto LABEL_90;
    }
LABEL_147:
    v140 = v27;
    uint64_t v315 = v85;
    uint64_t v316 = v313;
    uint64_t v141 = v22[7];
    uint64_t v142 = v22[8];
    if (v141 != v142)
    {
      v143 = (uint64_t *)v22[10];
      do
      {
        unint64_t v145 = *(unsigned int *)(v141 + 4);
        unint64_t v146 = v145 >> 7;
        uint64_t v147 = v20[4];
        if (v145 >> 7 < (v20[5] - v147) >> 3)
        {
          uint64_t v148 = *(void *)(v147 + 8 * v146);
          if (v148)
          {
            uint64_t v149 = v145 & 0x7F;
            unint64_t v150 = *(unsigned __int16 *)(v148 + 2 * v149);
            uint64_t v152 = v20[7];
            uint64_t v151 = v20[8];
            if (v150 < (v151 - v152) >> 3)
            {
              uint64_t v153 = v152 + 8 * v150;
              if (v153 != v151 && *(_DWORD *)(v153 + 4) == v145)
              {
                uint64_t v155 = v21[4];
                unint64_t v156 = (v21[5] - v155) >> 3;
                if (v146 < v156)
                {
                  uint64_t v157 = *(void *)(v155 + 8 * v146);
                  if (v157)
                  {
                    unint64_t v158 = *(unsigned __int16 *)(v157 + 2 * v149);
                    uint64_t v160 = v21[7];
                    uint64_t v159 = v21[8];
                    unint64_t v161 = (v159 - v160) >> 3;
                    if (v161 > v158)
                    {
                      uint64_t v162 = v160 + 8 * v158;
                      if (v162 != v159 && *(_DWORD *)(v162 + 4) == v145)
                      {
                        uint64_t v164 = v23[4];
                        unint64_t v165 = (v23[5] - v164) >> 3;
                        if (v146 < v165)
                        {
                          uint64_t v166 = *(void *)(v164 + 8 * v146);
                          if (v166)
                          {
                            unint64_t v167 = *(unsigned __int16 *)(v166 + 2 * v149);
                            uint64_t v169 = v23[7];
                            uint64_t v168 = v23[8];
                            unint64_t v170 = (v168 - v169) >> 3;
                            if (v170 > v167)
                            {
                              uint64_t v171 = v169 + 8 * v167;
                              if (v171 != v168 && *(_DWORD *)(v171 + 4) == v145)
                              {
                                uint64_t v173 = v25[4];
                                unint64_t v174 = (v25[5] - v173) >> 3;
                                if (v146 < v174)
                                {
                                  uint64_t v175 = *(void *)(v173 + 8 * v146);
                                  if (v175)
                                  {
                                    unint64_t v176 = *(unsigned __int16 *)(v175 + 2 * v149);
                                    uint64_t v178 = v25[7];
                                    uint64_t v177 = v25[8];
                                    unint64_t v179 = (v177 - v178) >> 3;
                                    if (v179 > v176)
                                    {
                                      uint64_t v180 = v178 + 8 * v176;
                                      if (v180 != v177 && *(_DWORD *)(v180 + 4) == v145)
                                      {
                                        unint64_t v181 = *(void *)v141;
                                        uint64_t v182 = HIDWORD(*(void *)v141);
                                        unint64_t v183 = *(void *)v141 >> 39;
                                        if (v183 < v156
                                          && (uint64_t v184 = *(void *)(v155 + 8 * v183)) != 0
                                          && (unint64_t v185 = *(unsigned __int16 *)(v184 + 2 * (HIDWORD(v181) & 0x7F)),
                                              v161 > v185)
                                          && (uint64_t v186 = v160 + 8 * v185, v186 != v159)
                                          && *(_DWORD *)(v186 + 4) == v182)
                                        {
                                          v187 = (uint64_t *)(v21[10] + 24 * v185);
                                        }
                                        else
                                        {
                                          v187 = (uint64_t *)v21[11];
                                        }
                                        if (v183 < v165
                                          && (uint64_t v188 = *(void *)(v164 + 8 * v183)) != 0
                                          && (unint64_t v189 = *(unsigned __int16 *)(v188 + 2 * (HIDWORD(v181) & 0x7F)),
                                              v170 > v189)
                                          && (uint64_t v190 = v169 + 8 * v189, v190 != v168)
                                          && *(_DWORD *)(v190 + 4) == v182)
                                        {
                                          v191 = (uint64_t *)(v23[10] + 24 * v189);
                                        }
                                        else
                                        {
                                          v191 = (uint64_t *)v23[11];
                                        }
                                        if (v183 < v174
                                          && (uint64_t v192 = *(void *)(v173 + 8 * v183)) != 0
                                          && (unint64_t v193 = *(unsigned __int16 *)(v192 + 2 * (HIDWORD(v181) & 0x7F)),
                                              v179 > v193)
                                          && (uint64_t v194 = v178 + 8 * v193, v194 != v177)
                                          && *(_DWORD *)(v194 + 4) == v182)
                                        {
                                          v144 = (uint64_t *)(v25[10] + 24 * v193);
                                        }
                                        else
                                        {
                                          v144 = (uint64_t *)v25[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)33>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)33> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)33> &,SceneComponents::LayerDataExitingView<(md::MapDataType)33> &)#1}::operator()((uint64_t)&v315, v181, v187, v143, v191, v144);
                                        uint64_t v85 = v312;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v143 += 3;
        v141 += 8;
      }
      while (v141 != v142);
    }
    if (v140 != v32) {
      goto LABEL_256;
    }
    goto LABEL_202;
  }
  v311 = v27;
  uint64_t v315 = v312;
  uint64_t v316 = v313;
  uint64_t v86 = v21[7];
  uint64_t v87 = v21[8];
  if (v86 != v87)
  {
    unint64_t v88 = (uint64_t *)v21[10];
    do
    {
      unint64_t v90 = *(unsigned int *)(v86 + 4);
      unint64_t v91 = v90 >> 7;
      uint64_t v92 = v20[4];
      if (v90 >> 7 < (v20[5] - v92) >> 3)
      {
        uint64_t v93 = *(void *)(v92 + 8 * v91);
        if (v93)
        {
          uint64_t v94 = v90 & 0x7F;
          unint64_t v95 = *(unsigned __int16 *)(v93 + 2 * v94);
          uint64_t v97 = v20[7];
          uint64_t v96 = v20[8];
          if (v95 < (v96 - v97) >> 3)
          {
            uint64_t v98 = v97 + 8 * v95;
            if (v98 != v96 && *(_DWORD *)(v98 + 4) == v90)
            {
              uint64_t v100 = v22[4];
              unint64_t v101 = (v22[5] - v100) >> 3;
              if (v91 < v101)
              {
                uint64_t v102 = *(void *)(v100 + 8 * v91);
                if (v102)
                {
                  unint64_t v103 = *(unsigned __int16 *)(v102 + 2 * v94);
                  uint64_t v105 = v22[7];
                  uint64_t v104 = v22[8];
                  unint64_t v106 = (v104 - v105) >> 3;
                  if (v106 > v103)
                  {
                    uint64_t v107 = v105 + 8 * v103;
                    if (v107 != v104 && *(_DWORD *)(v107 + 4) == v90)
                    {
                      uint64_t v109 = v23[4];
                      unint64_t v110 = (v23[5] - v109) >> 3;
                      if (v91 < v110)
                      {
                        uint64_t v111 = *(void *)(v109 + 8 * v91);
                        if (v111)
                        {
                          unint64_t v112 = *(unsigned __int16 *)(v111 + 2 * v94);
                          uint64_t v114 = v23[7];
                          uint64_t v113 = v23[8];
                          unint64_t v115 = (v113 - v114) >> 3;
                          if (v115 > v112)
                          {
                            uint64_t v116 = v114 + 8 * v112;
                            if (v116 != v113 && *(_DWORD *)(v116 + 4) == v90)
                            {
                              uint64_t v118 = v25[4];
                              unint64_t v119 = (v25[5] - v118) >> 3;
                              if (v91 < v119)
                              {
                                uint64_t v120 = *(void *)(v118 + 8 * v91);
                                if (v120)
                                {
                                  unint64_t v121 = *(unsigned __int16 *)(v120 + 2 * v94);
                                  uint64_t v123 = v25[7];
                                  uint64_t v122 = v25[8];
                                  unint64_t v124 = (v122 - v123) >> 3;
                                  if (v124 > v121)
                                  {
                                    uint64_t v125 = v123 + 8 * v121;
                                    if (v125 != v122 && *(_DWORD *)(v125 + 4) == v90)
                                    {
                                      unint64_t v126 = *(void *)v86;
                                      uint64_t v127 = HIDWORD(*(void *)v86);
                                      unint64_t v128 = *(void *)v86 >> 39;
                                      if (v128 < v101
                                        && (uint64_t v129 = *(void *)(v100 + 8 * v128)) != 0
                                        && (unint64_t v130 = *(unsigned __int16 *)(v129 + 2 * (HIDWORD(v126) & 0x7F)), v106 > v130)
                                        && (uint64_t v131 = v105 + 8 * v130, v131 != v104)
                                        && *(_DWORD *)(v131 + 4) == v127)
                                      {
                                        v132 = (uint64_t *)(v22[10] + 24 * v130);
                                      }
                                      else
                                      {
                                        v132 = (uint64_t *)v22[11];
                                      }
                                      if (v128 < v110
                                        && (uint64_t v133 = *(void *)(v109 + 8 * v128)) != 0
                                        && (unint64_t v134 = *(unsigned __int16 *)(v133 + 2 * (HIDWORD(v126) & 0x7F)), v115 > v134)
                                        && (uint64_t v135 = v114 + 8 * v134, v135 != v113)
                                        && *(_DWORD *)(v135 + 4) == v127)
                                      {
                                        v136 = (uint64_t *)(v23[10] + 24 * v134);
                                      }
                                      else
                                      {
                                        v136 = (uint64_t *)v23[11];
                                      }
                                      if (v128 < v119
                                        && (uint64_t v137 = *(void *)(v118 + 8 * v128)) != 0
                                        && (unint64_t v138 = *(unsigned __int16 *)(v137 + 2 * (HIDWORD(v126) & 0x7F)), v124 > v138)
                                        && (uint64_t v139 = v123 + 8 * v138, v139 != v122)
                                        && *(_DWORD *)(v139 + 4) == v127)
                                      {
                                        uint64_t v89 = (uint64_t *)(v25[10] + 24 * v138);
                                      }
                                      else
                                      {
                                        uint64_t v89 = (uint64_t *)v25[11];
                                      }
                                      md::CollectMapDataLogic<(md::MapDataType)33>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)33> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)33> &,SceneComponents::LayerDataExitingView<(md::MapDataType)33> &)#1}::operator()((uint64_t)&v315, v126, v88, v132, v136, v89);
                                      uint64_t v85 = v312;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v88 += 3;
      v86 += 8;
    }
    while (v86 != v87);
  }
  uint64_t v27 = v311;
  if (v26 == v32) {
    goto LABEL_147;
  }
LABEL_90:
  if (v27 == v32)
  {
LABEL_202:
    uint64_t v315 = v85;
    uint64_t v316 = v313;
    uint64_t v195 = v23[7];
    uint64_t v196 = v23[8];
    if (v195 != v196)
    {
      v197 = (uint64_t *)v23[10];
      do
      {
        unint64_t v199 = *(unsigned int *)(v195 + 4);
        unint64_t v200 = v199 >> 7;
        uint64_t v201 = v20[4];
        if (v199 >> 7 < (v20[5] - v201) >> 3)
        {
          uint64_t v202 = *(void *)(v201 + 8 * v200);
          if (v202)
          {
            uint64_t v203 = v199 & 0x7F;
            unint64_t v204 = *(unsigned __int16 *)(v202 + 2 * v203);
            uint64_t v206 = v20[7];
            uint64_t v205 = v20[8];
            if (v204 < (v205 - v206) >> 3)
            {
              uint64_t v207 = v206 + 8 * v204;
              if (v207 != v205 && *(_DWORD *)(v207 + 4) == v199)
              {
                uint64_t v209 = v21[4];
                unint64_t v210 = (v21[5] - v209) >> 3;
                if (v200 < v210)
                {
                  uint64_t v211 = *(void *)(v209 + 8 * v200);
                  if (v211)
                  {
                    unint64_t v212 = *(unsigned __int16 *)(v211 + 2 * v203);
                    uint64_t v214 = v21[7];
                    uint64_t v213 = v21[8];
                    unint64_t v215 = (v213 - v214) >> 3;
                    if (v215 > v212)
                    {
                      uint64_t v216 = v214 + 8 * v212;
                      if (v216 != v213 && *(_DWORD *)(v216 + 4) == v199)
                      {
                        uint64_t v218 = v22[4];
                        unint64_t v219 = (v22[5] - v218) >> 3;
                        if (v200 < v219)
                        {
                          uint64_t v220 = *(void *)(v218 + 8 * v200);
                          if (v220)
                          {
                            unint64_t v221 = *(unsigned __int16 *)(v220 + 2 * v203);
                            uint64_t v223 = v22[7];
                            uint64_t v222 = v22[8];
                            unint64_t v224 = (v222 - v223) >> 3;
                            if (v224 > v221)
                            {
                              uint64_t v225 = v223 + 8 * v221;
                              if (v225 != v222 && *(_DWORD *)(v225 + 4) == v199)
                              {
                                uint64_t v227 = v25[4];
                                unint64_t v228 = (v25[5] - v227) >> 3;
                                if (v200 < v228)
                                {
                                  uint64_t v229 = *(void *)(v227 + 8 * v200);
                                  if (v229)
                                  {
                                    unint64_t v230 = *(unsigned __int16 *)(v229 + 2 * v203);
                                    uint64_t v232 = v25[7];
                                    uint64_t v231 = v25[8];
                                    unint64_t v233 = (v231 - v232) >> 3;
                                    if (v233 > v230)
                                    {
                                      uint64_t v234 = v232 + 8 * v230;
                                      if (v234 != v231 && *(_DWORD *)(v234 + 4) == v199)
                                      {
                                        unint64_t v235 = *(void *)v195;
                                        uint64_t v236 = HIDWORD(*(void *)v195);
                                        unint64_t v237 = *(void *)v195 >> 39;
                                        if (v237 < v210
                                          && (uint64_t v238 = *(void *)(v209 + 8 * v237)) != 0
                                          && (unint64_t v239 = *(unsigned __int16 *)(v238 + 2 * (HIDWORD(v235) & 0x7F)),
                                              v215 > v239)
                                          && (uint64_t v240 = v214 + 8 * v239, v240 != v213)
                                          && *(_DWORD *)(v240 + 4) == v236)
                                        {
                                          v241 = (uint64_t *)(v21[10] + 24 * v239);
                                        }
                                        else
                                        {
                                          v241 = (uint64_t *)v21[11];
                                        }
                                        if (v237 < v219
                                          && (uint64_t v242 = *(void *)(v218 + 8 * v237)) != 0
                                          && (unint64_t v243 = *(unsigned __int16 *)(v242 + 2 * (HIDWORD(v235) & 0x7F)),
                                              v224 > v243)
                                          && (uint64_t v244 = v223 + 8 * v243, v244 != v222)
                                          && *(_DWORD *)(v244 + 4) == v236)
                                        {
                                          v245 = (uint64_t *)(v22[10] + 24 * v243);
                                        }
                                        else
                                        {
                                          v245 = (uint64_t *)v22[11];
                                        }
                                        if (v237 < v228
                                          && (uint64_t v246 = *(void *)(v227 + 8 * v237)) != 0
                                          && (unint64_t v247 = *(unsigned __int16 *)(v246 + 2 * (HIDWORD(v235) & 0x7F)),
                                              v233 > v247)
                                          && (uint64_t v248 = v232 + 8 * v247, v248 != v231)
                                          && *(_DWORD *)(v248 + 4) == v236)
                                        {
                                          v198 = (uint64_t *)(v25[10] + 24 * v247);
                                        }
                                        else
                                        {
                                          v198 = (uint64_t *)v25[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)33>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)33> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)33> &,SceneComponents::LayerDataExitingView<(md::MapDataType)33> &)#1}::operator()((uint64_t)&v315, v235, v241, v245, v197, v198);
                                        uint64_t v85 = v312;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v197 += 3;
        v195 += 8;
      }
      while (v195 != v196);
    }
  }
LABEL_256:
  if ((void *)v28 == v32)
  {
    uint64_t v315 = v85;
    uint64_t v316 = v313;
    uint64_t v249 = v25[7];
    uint64_t v250 = v25[8];
    if (v249 != v250)
    {
      v251 = (uint64_t *)v25[10];
      do
      {
        unint64_t v253 = *(unsigned int *)(v249 + 4);
        unint64_t v254 = v253 >> 7;
        uint64_t v255 = v20[4];
        if (v253 >> 7 < (v20[5] - v255) >> 3)
        {
          uint64_t v256 = *(void *)(v255 + 8 * v254);
          if (v256)
          {
            uint64_t v257 = v253 & 0x7F;
            unint64_t v258 = *(unsigned __int16 *)(v256 + 2 * v257);
            uint64_t v260 = v20[7];
            uint64_t v259 = v20[8];
            if (v258 < (v259 - v260) >> 3)
            {
              uint64_t v261 = v260 + 8 * v258;
              if (v261 != v259 && *(_DWORD *)(v261 + 4) == v253)
              {
                uint64_t v263 = v21[4];
                unint64_t v264 = (v21[5] - v263) >> 3;
                if (v254 < v264)
                {
                  uint64_t v265 = *(void *)(v263 + 8 * v254);
                  if (v265)
                  {
                    unint64_t v266 = *(unsigned __int16 *)(v265 + 2 * v257);
                    uint64_t v268 = v21[7];
                    uint64_t v267 = v21[8];
                    unint64_t v269 = (v267 - v268) >> 3;
                    if (v269 > v266)
                    {
                      uint64_t v270 = v268 + 8 * v266;
                      if (v270 != v267 && *(_DWORD *)(v270 + 4) == v253)
                      {
                        uint64_t v272 = v22[4];
                        unint64_t v273 = (v22[5] - v272) >> 3;
                        if (v254 < v273)
                        {
                          uint64_t v274 = *(void *)(v272 + 8 * v254);
                          if (v274)
                          {
                            unint64_t v275 = *(unsigned __int16 *)(v274 + 2 * v257);
                            uint64_t v277 = v22[7];
                            uint64_t v276 = v22[8];
                            unint64_t v278 = (v276 - v277) >> 3;
                            if (v278 > v275)
                            {
                              uint64_t v279 = v277 + 8 * v275;
                              if (v279 != v276 && *(_DWORD *)(v279 + 4) == v253)
                              {
                                uint64_t v281 = v23[4];
                                unint64_t v282 = (v23[5] - v281) >> 3;
                                if (v254 < v282)
                                {
                                  uint64_t v283 = *(void *)(v281 + 8 * v254);
                                  if (v283)
                                  {
                                    unint64_t v284 = *(unsigned __int16 *)(v283 + 2 * v257);
                                    uint64_t v286 = v23[7];
                                    uint64_t v285 = v23[8];
                                    unint64_t v287 = (v285 - v286) >> 3;
                                    if (v287 > v284)
                                    {
                                      uint64_t v288 = v286 + 8 * v284;
                                      if (v288 != v285 && *(_DWORD *)(v288 + 4) == v253)
                                      {
                                        unint64_t v289 = *(void *)v249;
                                        uint64_t v290 = HIDWORD(*(void *)v249);
                                        unint64_t v291 = *(void *)v249 >> 39;
                                        if (v291 < v264
                                          && (uint64_t v292 = *(void *)(v263 + 8 * v291)) != 0
                                          && (unint64_t v293 = *(unsigned __int16 *)(v292 + 2 * (HIDWORD(v289) & 0x7F)),
                                              v269 > v293)
                                          && (uint64_t v294 = v268 + 8 * v293, v294 != v267)
                                          && *(_DWORD *)(v294 + 4) == v290)
                                        {
                                          v295 = (uint64_t *)(v21[10] + 24 * v293);
                                        }
                                        else
                                        {
                                          v295 = (uint64_t *)v21[11];
                                        }
                                        if (v291 < v273
                                          && (uint64_t v296 = *(void *)(v272 + 8 * v291)) != 0
                                          && (unint64_t v297 = *(unsigned __int16 *)(v296 + 2 * (HIDWORD(v289) & 0x7F)),
                                              v278 > v297)
                                          && (uint64_t v298 = v277 + 8 * v297, v298 != v276)
                                          && *(_DWORD *)(v298 + 4) == v290)
                                        {
                                          v299 = (uint64_t *)(v22[10] + 24 * v297);
                                        }
                                        else
                                        {
                                          v299 = (uint64_t *)v22[11];
                                        }
                                        if (v291 < v282
                                          && (uint64_t v300 = *(void *)(v281 + 8 * v291)) != 0
                                          && (unint64_t v301 = *(unsigned __int16 *)(v300 + 2 * (HIDWORD(v289) & 0x7F)),
                                              v287 > v301)
                                          && (uint64_t v302 = v286 + 8 * v301, v302 != v285)
                                          && *(_DWORD *)(v302 + 4) == v290)
                                        {
                                          v252 = (uint64_t *)(v23[10] + 24 * v301);
                                        }
                                        else
                                        {
                                          v252 = (uint64_t *)v23[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)33>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)33> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)33> &,SceneComponents::LayerDataExitingView<(md::MapDataType)33> &)#1}::operator()((uint64_t)&v315, v289, v295, v299, v252, v251);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v251 += 3;
        v249 += 8;
      }
      while (v249 != v250);
    }
  }
}

void sub_1A1FE5718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*v17);
  std::__split_buffer<SceneComponents::LayerDataPreviousInView<(md::MapDataType)33>>::~__split_buffer((uint64_t)va);
  std::__tree<gdc::LayerDataWithWorld>::destroy(a14);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)33>>(int8x8_t *a1)
{
  unint64_t v10 = 0xD44FD3DC899A7DDALL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xD44FD3DC899A7DDALL;
    if (*(void *)&v1 <= 0xD44FD3DC899A7DDALL) {
      unint64_t v3 = 0xD44FD3DC899A7DDALL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xD44FD3DC899A7DDALL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xD44FD3DC899A7DDALL)
      {
        if (v5[2] == 0xD44FD3DC899A7DDALL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xD44FD3DC899A7DDALL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xD44FD3DC899A7DDALL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1FE5A48(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)33>>(int8x8_t *a1)
{
  unint64_t v10 = 0xC018F3D549EA57BALL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xC018F3D549EA57BALL;
    if (*(void *)&v1 <= 0xC018F3D549EA57BALL) {
      unint64_t v3 = 0xC018F3D549EA57BALL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xC018F3D549EA57BALL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xC018F3D549EA57BALL)
      {
        if (v5[2] == 0xC018F3D549EA57BALL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xC018F3D549EA57BALL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xC018F3D549EA57BALL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1FE5CB8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>(int8x8_t *a1)
{
  unint64_t v10 = 0x8E897EF07308135FLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x8E897EF07308135FLL;
    if (*(void *)&v1 <= 0x8E897EF07308135FLL) {
      unint64_t v3 = 0x8E897EF07308135FLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x8E897EF07308135FLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x8E897EF07308135FLL)
      {
        if (v5[2] == 0x8E897EF07308135FLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x8E897EF07308135FLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x8E897EF07308135FLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1FE5F28(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)33>>(int8x8_t *a1)
{
  unint64_t v10 = 0xCC8451654026B61DLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xCC8451654026B61DLL;
    if (*(void *)&v1 <= 0xCC8451654026B61DLL) {
      unint64_t v3 = 0xCC8451654026B61DLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xCC8451654026B61DLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xCC8451654026B61DLL)
      {
        if (v5[2] == 0xCC8451654026B61DLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xCC8451654026B61DLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xCC8451654026B61DLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1FE6198(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::CollectMapDataLogic<(md::MapDataType)33>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)33> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)33> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)33> &,SceneComponents::LayerDataExitingView<(md::MapDataType)33> &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v8 = a4;
  uint64_t v9 = (uint64_t)a3;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  uint64_t v15 = (void **)(a3 + 1);
  uint64_t v14 = a3[1];
  uint64_t v16 = a4 + 1;
  uint64_t v17 = a3[2];
  *(_OWORD *)(a3 + 1) = *(_OWORD *)(a4 + 1);
  a4[1] = v14;
  a4[2] = v17;
  if (a3[2]) {
    uint64_t v18 = (uint64_t *)(a3[1] + 16);
  }
  else {
    uint64_t v18 = a3;
  }
  *uint64_t v18 = (uint64_t)v15;
  uint64_t v19 = (void *)(*v16 + 16);
  if (!v17) {
    uint64_t v19 = a4;
  }
  *uint64_t v19 = v16;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*v15);
  *(void *)uint64_t v9 = v15;
  *(void *)(v9 + 16) = 0;
  void *v15 = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy((void *)a5[1]);
  *a5 = (uint64_t)(a5 + 1);
  a5[2] = 0;
  a5[1] = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy((void *)a6[1]);
  *a6 = (uint64_t)(a6 + 1);
  a6[2] = 0;
  a6[1] = 0;
  unint64_t v20 = **(void **)a1;
  {
LABEL_152:
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
    }
  }
  float v21 = *(_WORD **)(v20 + 48);
  BOOL v22 = *(_WORD **)(v20 + 56);
  unint64_t v23 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v21 != v22)
  {
    uint64_t v24 = *(_WORD **)(v20 + 48);
    while (*v24 != 33)
    {
      v24 += 16;
      if (v24 == v22) {
        goto LABEL_18;
      }
    }
    if (v24 == v22)
    {
      unint64_t v23 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v21 != 33)
      {
        v21 += 16;
        if (v21 == v22)
        {
          float v21 = *(_WORD **)(v20 + 56);
          break;
        }
      }
      unint64_t v23 = (uint64_t *)(v21 + 4);
    }
  }
LABEL_18:
  std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>((uint64_t *)v9, (void *)*v23, v23 + 1);
  unint64_t v20 = *(void *)v9;
  double v25 = (uint64_t *)*v8;
  uint64_t v26 = (uint64_t *)*a5;
  *(void *)&long long v93 = a5;
  *((void *)&v93 + 1) = v26;
  while ((void **)v20 != v15)
  {
    if (v25 == v16)
    {
      long long v95 = v93;
      do
      {
        std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((void **)&v95, v20 + 32);
        unint64_t v43 = *(void **)(v20 + 8);
        if (v43)
        {
          do
          {
            uint64_t v44 = v43;
            unint64_t v43 = (void *)*v43;
          }
          while (v43);
        }
        else
        {
          do
          {
            uint64_t v44 = *(void **)(v20 + 16);
            BOOL v40 = *v44 == v20;
            unint64_t v20 = (unint64_t)v44;
          }
          while (!v40);
        }
        unint64_t v20 = (unint64_t)v44;
      }
      while (v44 != v15);
      break;
    }
    unint64_t v27 = *(void *)(v20 + 32);
    int v28 = *(unsigned __int8 *)(v20 + 48);
    int v29 = (char)v28;
    int v30 = *((unsigned __int8 *)v25 + 48);
    unint64_t v31 = v25[4];
    if (v28 == v30) {
      BOOL v32 = v27 < v31;
    }
    else {
      BOOL v32 = (char)v28 < (char)v30;
    }
    if (v32)
    {
      std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((void **)&v93, v20 + 32);
      size_t v33 = *(void **)(v20 + 8);
      if (v33)
      {
        do
        {
          unint64_t v20 = (unint64_t)v33;
          size_t v33 = (void *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          unint64_t v34 = v20;
          unint64_t v20 = *(void *)(v20 + 16);
        }
        while (*(void *)v20 != v34);
      }
    }
    else
    {
      BOOL v35 = v31 < v27;
      if (v29 != (char)v30) {
        BOOL v35 = (char)v30 < v29;
      }
      if (v35)
      {
        uint64_t v36 = (uint64_t *)v25[1];
        if (v36)
        {
          do
          {
            double v25 = v36;
            uint64_t v36 = (uint64_t *)*v36;
          }
          while (v36);
        }
        else
        {
          do
          {
            unint64_t v37 = v25;
            double v25 = (uint64_t *)v25[2];
          }
          while ((uint64_t *)*v25 != v37);
        }
      }
      else
      {
        uint64_t v38 = *(void **)(v20 + 8);
        if (v38)
        {
          do
          {
            uint64_t v39 = v38;
            uint64_t v38 = (void *)*v38;
          }
          while (v38);
        }
        else
        {
          do
          {
            uint64_t v39 = *(void **)(v20 + 16);
            BOOL v40 = *v39 == v20;
            unint64_t v20 = (unint64_t)v39;
          }
          while (!v40);
        }
        uint64_t v41 = (uint64_t *)v25[1];
        if (v41)
        {
          do
          {
            double v25 = v41;
            uint64_t v41 = (uint64_t *)*v41;
          }
          while (v41);
        }
        else
        {
          do
          {
            uint64_t v42 = v25;
            double v25 = (uint64_t *)v25[2];
          }
          while ((uint64_t *)*v25 != v42);
        }
        unint64_t v20 = (unint64_t)v39;
      }
    }
  }
  uint64_t v8 = (uint64_t *)*v8;
  uint64_t v45 = *(void *)v9;
  uint64_t v46 = (uint64_t *)*a6;
  *(void *)&long long v93 = a6;
  *((void *)&v93 + 1) = v46;
  while (v8 != v16)
  {
    if ((void **)v45 == v15)
    {
      long long v95 = v93;
      do
      {
        std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((void **)&v95, (uint64_t)(v8 + 4));
        uint64_t v62 = (uint64_t *)v8[1];
        if (v62)
        {
          do
          {
            unint64_t v63 = v62;
            uint64_t v62 = (uint64_t *)*v62;
          }
          while (v62);
        }
        else
        {
          do
          {
            unint64_t v63 = (uint64_t *)v8[2];
            BOOL v40 = *v63 == (void)v8;
            uint64_t v8 = v63;
          }
          while (!v40);
        }
        uint64_t v8 = v63;
      }
      while (v63 != v16);
      break;
    }
    unint64_t v47 = v8[4];
    int v48 = *((unsigned __int8 *)v8 + 48);
    int v49 = (char)v48;
    int v50 = *(unsigned __int8 *)(v45 + 48);
    unint64_t v51 = *(void *)(v45 + 32);
    if (v48 == v50) {
      BOOL v52 = v47 < v51;
    }
    else {
      BOOL v52 = (char)v48 < (char)v50;
    }
    if (v52)
    {
      std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((void **)&v93, (uint64_t)(v8 + 4));
      uint64_t v53 = (uint64_t *)v8[1];
      if (v53)
      {
        do
        {
          uint64_t v8 = v53;
          uint64_t v53 = (uint64_t *)*v53;
        }
        while (v53);
      }
      else
      {
        do
        {
          unint64_t v54 = v8;
          uint64_t v8 = (uint64_t *)v8[2];
        }
        while ((uint64_t *)*v8 != v54);
      }
    }
    else
    {
      BOOL v55 = v51 < v47;
      if (v49 != (char)v50) {
        BOOL v55 = (char)v50 < v49;
      }
      if (v55)
      {
        unint64_t v56 = *(void **)(v45 + 8);
        if (v56)
        {
          do
          {
            uint64_t v45 = (uint64_t)v56;
            unint64_t v56 = (void *)*v56;
          }
          while (v56);
        }
        else
        {
          do
          {
            uint64_t v57 = v45;
            uint64_t v45 = *(void *)(v45 + 16);
          }
          while (*(void *)v45 != v57);
        }
      }
      else
      {
        unint64_t v58 = (uint64_t *)v8[1];
        if (v58)
        {
          do
          {
            uint64_t v59 = v58;
            unint64_t v58 = (uint64_t *)*v58;
          }
          while (v58);
        }
        else
        {
          do
          {
            uint64_t v59 = (uint64_t *)v8[2];
            BOOL v40 = *v59 == (void)v8;
            uint64_t v8 = v59;
          }
          while (!v40);
        }
        uint64_t v60 = *(void **)(v45 + 8);
        if (v60)
        {
          do
          {
            uint64_t v45 = (uint64_t)v60;
            uint64_t v60 = (void *)*v60;
          }
          while (v60);
        }
        else
        {
          do
          {
            uint64_t v61 = v45;
            uint64_t v45 = *(void *)(v45 + 16);
          }
          while (*(void *)v45 != v61);
        }
        uint64_t v8 = v59;
      }
    }
  }
  if (!a5[2]) {
    goto LABEL_122;
  }
  uint64_t v64 = (void *)gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)33>>(*(int8x8_t **)(v12 + 128));
  uint64_t v94 = a2;
  unint64_t v65 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v64 + 4, (uint64_t)&v94);
  if (v66)
  {
    unint64_t v20 = v64[11];
    unint64_t v68 = v64[12];
    if (v20 >= v68)
    {
      uint64_t v70 = (char *)v64[10];
      uint64_t v16 = (uint64_t *)(v20 - (void)v70);
      uint64_t v71 = v20 - (void)v70 + 1;
      if (v71 < 0) {
        goto LABEL_154;
      }
      unint64_t v72 = v68 - (void)v70;
      if (2 * v72 > v71) {
        uint64_t v71 = 2 * v72;
      }
      if (v72 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v73 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v73 = v71;
      }
      if (v73) {
        uint64_t v74 = (char *)operator new(v73);
      }
      else {
        uint64_t v74 = 0;
      }
      uint64_t v75 = &v74[v73];
      uint64_t v69 = (uint64_t)v16 + (void)v74 + 1;
      uint64_t v76 = &v70[-v20];
      if (v70 == (char *)v20) {
        uint64_t v76 = 0;
      }
      v64[10] = (char *)v16 + (void)v74 + (unint64_t)v76;
      v64[11] = v69;
      v64[12] = v75;
      if (v70) {
        operator delete(v70);
      }
    }
    else
    {
      uint64_t v69 = v20 + 1;
    }
    v64[11] = v69;
    uint64_t v9 = v64[31];
    goto LABEL_118;
  }
  uint64_t v9 = v64[31];
  if (v64[10] + (((uint64_t)v65 - v64[7]) >> 3) == v64[11])
  {
LABEL_118:
    uint64_t v8 = &v94;
    a5 = (uint64_t *)v64[22];
    if (a5)
    {
      unint64_t v20 = 1;
      while (1)
      {
        *(void *)&long long v95 = &v94;
        *((void *)&v95 + 1) = 1;
        *(void *)&long long v93 = v9;
        uint64_t v77 = a5[6];
        if (!v77) {
          goto LABEL_151;
        }
        (*(void (**)(uint64_t, long long *, long long *))(*(void *)v77 + 48))(v77, &v93, &v95);
        a5 = (uint64_t *)*a5;
        if (!a5) {
          goto LABEL_122;
        }
      }
    }
    goto LABEL_122;
  }
  a5 = (uint64_t *)v64[16];
  if (a5)
  {
    uint64_t v8 = &v94;
    unint64_t v20 = 1;
    do
    {
      *(void *)&long long v95 = &v94;
      *((void *)&v95 + 1) = 1;
      *(void *)&long long v93 = v9;
      uint64_t v67 = a5[6];
      if (!v67) {
        goto LABEL_151;
      }
      (*(void (**)(uint64_t, long long *, long long *))(*(void *)v67 + 48))(v67, &v93, &v95);
      a5 = (uint64_t *)*a5;
    }
    while (a5);
  }
LABEL_122:
  if (!a6[2]) {
    return;
  }
  unint64_t v78 = (void *)gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)33>>(*(int8x8_t **)(v12 + 128));
  uint64_t v94 = a2;
  uint64_t v79 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v78 + 4, (uint64_t)&v94);
  if (v80)
  {
    unint64_t v83 = (unsigned char *)v78[11];
    unint64_t v82 = v78[12];
    if ((unint64_t)v83 < v82)
    {
      uint64_t v84 = (uint64_t)(v83 + 1);
LABEL_145:
      v78[11] = v84;
      a2 = v78[31];
      goto LABEL_146;
    }
    uint64_t v85 = (char *)v78[10];
    uint64_t v8 = (uint64_t *)(v83 - v85);
    uint64_t v86 = v83 - v85 + 1;
    if (v86 >= 0)
    {
      unint64_t v87 = v82 - (void)v85;
      if (2 * v87 > v86) {
        uint64_t v86 = 2 * v87;
      }
      if (v87 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v88 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v88 = v86;
      }
      if (v88) {
        uint64_t v89 = (char *)operator new(v88);
      }
      else {
        uint64_t v89 = 0;
      }
      unint64_t v90 = &v89[v88];
      uint64_t v84 = (uint64_t)v8 + (void)v89 + 1;
      unint64_t v91 = (char *)(v85 - v83);
      if (v85 == v83) {
        unint64_t v91 = 0;
      }
      v78[10] = (char *)v8 + (void)v89 + (unint64_t)v91;
      v78[11] = v84;
      v78[12] = v90;
      if (v85) {
        operator delete(v85);
      }
      goto LABEL_145;
    }
LABEL_154:
    abort();
  }
  a2 = v78[31];
  if (v78[10] + (((uint64_t)v79 - v78[7]) >> 3) != v78[11])
  {
    a6 = (uint64_t *)v78[16];
    if (a6)
    {
      a5 = &v94;
      uint64_t v9 = 1;
      while (1)
      {
        *(void *)&long long v95 = &v94;
        *((void *)&v95 + 1) = 1;
        *(void *)&long long v93 = a2;
        uint64_t v81 = a6[6];
        if (!v81) {
          break;
        }
        (*(void (**)(uint64_t, long long *, long long *))(*(void *)v81 + 48))(v81, &v93, &v95);
        a6 = (uint64_t *)*a6;
        if (!a6) {
          return;
        }
      }
LABEL_151:
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_152;
    }
    return;
  }
LABEL_146:
  a5 = &v94;
  a6 = (uint64_t *)v78[22];
  if (a6)
  {
    uint64_t v9 = 1;
    while (1)
    {
      *(void *)&long long v95 = &v94;
      *((void *)&v95 + 1) = 1;
      *(void *)&long long v93 = a2;
      uint64_t v92 = a6[6];
      if (!v92) {
        break;
      }
      (*(void (**)(uint64_t, long long *, long long *))(*(void *)v92 + 48))(v92, &v93, &v95);
      a6 = (uint64_t *)*a6;
      if (!a6) {
        return;
      }
    }
    goto LABEL_151;
  }
}

uint64_t std::__split_buffer<SceneComponents::LayerDataPreviousInView<(md::MapDataType)33>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(i - 16));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)33>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)33>>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(void **)(v15 - 24), (void *)(v15 - 16));
    uint64_t v15 = a1[11];
  }
  uint64_t v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(v15 - 16));
  a1[11] = v16;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)33>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)33>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(void **)(v15 - 24), (void *)(v15 - 16));
    uint64_t v15 = a1[11];
  }
  uint64_t v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(v15 - 16));
  a1[11] = v16;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)33>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)33>>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_WORD *)(v14 + 2 * v7) = *(_WORD *)(v15 - 2);
  a1[11] = v15 - 2;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)33>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)33>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)33>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)33>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)33>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)33>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)33>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)33>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)33>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)33>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)33>,md::CollectMapDataContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)33>,md::CollectMapDataContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) != 0x9052DC4F017D3735 || !*(void *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  uint64_t v4 = *(void **)(a2 + 8);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_27;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v5 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v7 = 0x99BED48DEFBBD82BLL % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_27;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_27;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_25;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_27;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_27;
    }
LABEL_14:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_27;
    }
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_14;
  }
LABEL_25:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v14 = *(void *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v14 = 0;
LABEL_28:
  uint64_t v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 160))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)33>,md::CollectMapDataContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x9052DC4F017D3735 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)33>,md::CollectMapDataContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x9052DC4F017D3735 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 144))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)33>,md::CollectMapDataContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x9052DC4F017D3735 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 136))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)33>,md::CollectMapDataContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x9052DC4F017D3735 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 128))(result);
}

void md::Logic<md::CollectMapDataLogic<(md::MapDataType)33>,md::CollectMapDataContext<(md::MapDataType)33>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A1FE7AC8(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t gdc::ObjectHolder<md::CollectMapDataContext<(md::MapDataType)33>>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::CollectMapDataContext<(md::MapDataType)33>>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF5558E8;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0xC400A2AC0F1);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::CollectMapDataContext<(md::MapDataType)33>>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF5558E8;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0xC400A2AC0F1);
  }
  return a1;
}

uint64_t md::CollectMapDataLogic<(md::MapDataType)33>::didBecomeInactive(uint64_t result)
{
  uint64_t v1 = result;
  if (*(_WORD *)(result + 120) || *(_WORD *)(result + 122) || *(_DWORD *)(result + 124) != -1)
  {
    __n128 result = gdc::Registry::destroy(*(void *)(result + 128), *(void *)(result + 120));
    *(void *)(v1 + 120) = 0xFFFFFFFF00000000;
  }
  return result;
}

void md::CollectMapDataLogic<(md::MapDataType)33>::~CollectMapDataLogic(uint64_t a1)
{
  *(void *)a1 = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 80));
  JUMPOUT(0x1A6239270);
}

uint64_t md::CollectMapDataLogic<(md::MapDataType)33>::~CollectMapDataLogic(uint64_t a1)
{
  *(void *)a1 = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 80));
  return a1;
}

void md::Logic<md::CollectMapDataLogic<(md::MapDataType)34>,md::CollectMapDataContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint8x8_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint8x8_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void md::CollectMapDataLogic<(md::MapDataType)34>::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint8x8_t v5 = (void *)gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)34>>(*(int8x8_t **)(a1 + 128));
  unint64_t v6 = v5;
  if (v5[29])
  {
    char v7 = (void *)v5[28];
    if (v7)
    {
      uint64_t v8 = v5[31];
      uint64_t v9 = v5[7];
      uint64_t v10 = (v5[8] - v9) >> 3;
      do
      {
        uint64_t v315 = v9;
        uint64_t v316 = v10;
        uint64_t v314 = v8;
        uint64_t v11 = v7[6];
        if (!v11) {
          goto LABEL_312;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48))(v11, &v314, &v315);
        char v7 = (void *)*v7;
      }
      while (v7);
    }
  }
  v6[8] = v6[7];
  v6[11] = v6[10];
  uint64_t v12 = (void *)gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)34>>(*(int8x8_t **)(a1 + 128));
  uint64_t v13 = v12;
  if (v12[29])
  {
    uint64_t v14 = (void *)v12[28];
    if (v14)
    {
      uint64_t v15 = v12[31];
      uint64_t v16 = v12[7];
      uint64_t v17 = (v12[8] - v16) >> 3;
      while (1)
      {
        uint64_t v315 = v16;
        uint64_t v316 = v17;
        uint64_t v314 = v15;
        uint64_t v18 = v14[6];
        if (!v18) {
          break;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v314, &v315);
        uint64_t v14 = (void *)*v14;
        if (!v14) {
          goto LABEL_11;
        }
      }
LABEL_312:
      std::__throw_bad_function_call[abi:nn180100]();
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
      return;
    }
  }
LABEL_11:
  v13[8] = v13[7];
  v13[11] = v13[10];
  uint64_t v312 = *a3;
  unint64_t v19 = *(int8x8_t **)(a1 + 128);
  if (!*(_WORD *)(a1 + 120) && !*(_WORD *)(a1 + 122) && *(_DWORD *)(a1 + 124) == -1) {
    gdc::Registry::create(*(gdc::Registry **)(a1 + 128));
  }
  uint64_t v313 = a1;
  uint64_t v20 = (void *)gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)34>>(v19);
  uint64_t v21 = (void *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)34>>(v19);
  BOOL v22 = (void *)gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)34>>(v19);
  unint64_t v23 = (void *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)34>>(v19);
  uint64_t v24 = gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)34>>(v19);
  double v25 = (void *)v24;
  uint64_t v26 = v22 + 4;
  unint64_t v27 = v23 + 4;
  uint64_t v28 = v24 + 32;
  uint64_t v30 = v20[7];
  uint64_t v29 = v20[8];
  if (v21[8] - v21[7] >= (unint64_t)(v29 - v30)) {
    unint64_t v31 = v20 + 4;
  }
  else {
    unint64_t v31 = v21 + 4;
  }
  if (v22[8] - v22[7] < v31[4] - v31[3]) {
    unint64_t v31 = v22 + 4;
  }
  if (v23[8] - v23[7] < v31[4] - v31[3]) {
    unint64_t v31 = v23 + 4;
  }
  if (*(void *)(v24 + 64) - *(void *)(v24 + 56) >= v31[4] - v31[3]) {
    BOOL v32 = v31;
  }
  else {
    BOOL v32 = (void *)(v24 + 32);
  }
  if (v20 + 4 == v32)
  {
    uint64_t v309 = v24 + 32;
    uint64_t v315 = v312;
    uint64_t v316 = v313;
    while (v30 != v29)
    {
      unint64_t v34 = *(unsigned int *)(v30 + 4);
      unint64_t v35 = v34 >> 7;
      uint64_t v36 = v21[4];
      unint64_t v37 = (v21[5] - v36) >> 3;
      if (v34 >> 7 < v37)
      {
        uint64_t v38 = *(void *)(v36 + 8 * v35);
        if (v38)
        {
          uint64_t v39 = v34 & 0x7F;
          unint64_t v40 = *(unsigned __int16 *)(v38 + 2 * v39);
          uint64_t v41 = v21[7];
          uint64_t v42 = v21[8];
          unint64_t v43 = (v42 - v41) >> 3;
          if (v43 > v40)
          {
            uint64_t v44 = v41 + 8 * v40;
            if (v44 != v42 && *(_DWORD *)(v44 + 4) == v34)
            {
              uint64_t v46 = v22[4];
              unint64_t v47 = (v22[5] - v46) >> 3;
              if (v35 < v47)
              {
                uint64_t v48 = *(void *)(v46 + 8 * v35);
                if (v48)
                {
                  unint64_t v49 = *(unsigned __int16 *)(v48 + 2 * v39);
                  uint64_t v51 = v22[7];
                  uint64_t v50 = v22[8];
                  unint64_t v52 = (v50 - v51) >> 3;
                  if (v52 > v49)
                  {
                    uint64_t v53 = v51 + 8 * v49;
                    if (v53 != v50 && *(_DWORD *)(v53 + 4) == v34)
                    {
                      uint64_t v55 = v23[4];
                      unint64_t v56 = (v23[5] - v55) >> 3;
                      if (v35 < v56)
                      {
                        uint64_t v57 = *(void *)(v55 + 8 * v35);
                        if (v57)
                        {
                          unint64_t v58 = *(unsigned __int16 *)(v57 + 2 * v39);
                          uint64_t v59 = v23[7];
                          v310 = v27;
                          uint64_t v308 = v23[8];
                          unint64_t v307 = (v308 - v59) >> 3;
                          if (v307 > v58)
                          {
                            uint64_t v60 = v59 + 8 * v58;
                            if (v60 != v308 && *(_DWORD *)(v60 + 4) == v34)
                            {
                              uint64_t v306 = v25[4];
                              unint64_t v305 = (v25[5] - v306) >> 3;
                              if (v35 < v305)
                              {
                                uint64_t v62 = *(void *)(v306 + 8 * v35);
                                if (v62)
                                {
                                  unint64_t v63 = *(unsigned __int16 *)(v62 + 2 * v39);
                                  uint64_t v303 = v25[7];
                                  uint64_t v304 = v25[8];
                                  if ((v304 - v303) >> 3 > v63)
                                  {
                                    uint64_t v64 = v303 + 8 * v63;
                                    if (v64 != v304 && *(_DWORD *)(v64 + 4) == v34)
                                    {
                                      unint64_t v65 = *(void *)v30;
                                      uint64_t v66 = HIDWORD(*(void *)v30);
                                      unint64_t v67 = *(void *)v30 >> 39;
                                      if (v67 < v37
                                        && (uint64_t v68 = *(void *)(v36 + 8 * v67)) != 0
                                        && (unint64_t v69 = *(unsigned __int16 *)(v68 + 2 * (HIDWORD(v65) & 0x7F)), v43 > v69)
                                        && (uint64_t v70 = v41 + 8 * v69, v70 != v42)
                                        && *(_DWORD *)(v70 + 4) == v66)
                                      {
                                        uint64_t v71 = (uint64_t *)(v21[10] + 24 * v69);
                                      }
                                      else
                                      {
                                        uint64_t v71 = (uint64_t *)v21[11];
                                      }
                                      if (v67 < v47
                                        && (uint64_t v72 = *(void *)(v46 + 8 * v67)) != 0
                                        && (unint64_t v73 = *(unsigned __int16 *)(v72 + 2 * (HIDWORD(v65) & 0x7F)), v52 > v73)
                                        && (uint64_t v74 = v51 + 8 * v73, v74 != v50)
                                        && *(_DWORD *)(v74 + 4) == v66)
                                      {
                                        uint64_t v75 = (uint64_t *)(v22[10] + 24 * v73);
                                      }
                                      else
                                      {
                                        uint64_t v75 = (uint64_t *)v22[11];
                                      }
                                      uint64_t v76 = HIDWORD(*(void *)v30);
                                      if (v67 < v56
                                        && (uint64_t v77 = *(void *)(v55 + 8 * v67)) != 0
                                        && (unint64_t v78 = *(unsigned __int16 *)(v77 + 2 * (HIDWORD(v65) & 0x7F)), v307 > v78)
                                        && (uint64_t v79 = v59 + 8 * v78, v79 != v308)
                                        && *(_DWORD *)(v79 + 4) == v76)
                                      {
                                        unint64_t v80 = (v304 - v303) >> 3;
                                        uint64_t v81 = (uint64_t *)(v23[10] + 24 * v78);
                                      }
                                      else
                                      {
                                        unint64_t v80 = (v304 - v303) >> 3;
                                        uint64_t v81 = (uint64_t *)v23[11];
                                      }
                                      if (v67 < v305
                                        && (uint64_t v82 = *(void *)(v306 + 8 * v67)) != 0
                                        && (unint64_t v83 = *(unsigned __int16 *)(v82 + 2 * (HIDWORD(v65) & 0x7F)), v80 > v83)
                                        && (uint64_t v84 = v303 + 8 * v83, v84 != v304)
                                        && *(_DWORD *)(v84 + 4) == v76)
                                      {
                                        size_t v33 = (uint64_t *)(v25[10] + 24 * v83);
                                      }
                                      else
                                      {
                                        size_t v33 = (uint64_t *)v25[11];
                                      }
                                      md::CollectMapDataLogic<(md::MapDataType)34>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)34> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)34> &,SceneComponents::LayerDataExitingView<(md::MapDataType)34> &)#1}::operator()((uint64_t)&v315, v65, v71, v75, v81, v33);
                                      unint64_t v27 = v310;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v30 += 8;
    }
    uint64_t v28 = v309;
  }
  uint64_t v85 = v312;
  if (v21 + 4 != v32)
  {
    if (v26 != v32) {
      goto LABEL_90;
    }
LABEL_147:
    v140 = v27;
    uint64_t v315 = v85;
    uint64_t v316 = v313;
    uint64_t v141 = v22[7];
    uint64_t v142 = v22[8];
    if (v141 != v142)
    {
      v143 = (uint64_t *)v22[10];
      do
      {
        unint64_t v145 = *(unsigned int *)(v141 + 4);
        unint64_t v146 = v145 >> 7;
        uint64_t v147 = v20[4];
        if (v145 >> 7 < (v20[5] - v147) >> 3)
        {
          uint64_t v148 = *(void *)(v147 + 8 * v146);
          if (v148)
          {
            uint64_t v149 = v145 & 0x7F;
            unint64_t v150 = *(unsigned __int16 *)(v148 + 2 * v149);
            uint64_t v152 = v20[7];
            uint64_t v151 = v20[8];
            if (v150 < (v151 - v152) >> 3)
            {
              uint64_t v153 = v152 + 8 * v150;
              if (v153 != v151 && *(_DWORD *)(v153 + 4) == v145)
              {
                uint64_t v155 = v21[4];
                unint64_t v156 = (v21[5] - v155) >> 3;
                if (v146 < v156)
                {
                  uint64_t v157 = *(void *)(v155 + 8 * v146);
                  if (v157)
                  {
                    unint64_t v158 = *(unsigned __int16 *)(v157 + 2 * v149);
                    uint64_t v160 = v21[7];
                    uint64_t v159 = v21[8];
                    unint64_t v161 = (v159 - v160) >> 3;
                    if (v161 > v158)
                    {
                      uint64_t v162 = v160 + 8 * v158;
                      if (v162 != v159 && *(_DWORD *)(v162 + 4) == v145)
                      {
                        uint64_t v164 = v23[4];
                        unint64_t v165 = (v23[5] - v164) >> 3;
                        if (v146 < v165)
                        {
                          uint64_t v166 = *(void *)(v164 + 8 * v146);
                          if (v166)
                          {
                            unint64_t v167 = *(unsigned __int16 *)(v166 + 2 * v149);
                            uint64_t v169 = v23[7];
                            uint64_t v168 = v23[8];
                            unint64_t v170 = (v168 - v169) >> 3;
                            if (v170 > v167)
                            {
                              uint64_t v171 = v169 + 8 * v167;
                              if (v171 != v168 && *(_DWORD *)(v171 + 4) == v145)
                              {
                                uint64_t v173 = v25[4];
                                unint64_t v174 = (v25[5] - v173) >> 3;
                                if (v146 < v174)
                                {
                                  uint64_t v175 = *(void *)(v173 + 8 * v146);
                                  if (v175)
                                  {
                                    unint64_t v176 = *(unsigned __int16 *)(v175 + 2 * v149);
                                    uint64_t v178 = v25[7];
                                    uint64_t v177 = v25[8];
                                    unint64_t v179 = (v177 - v178) >> 3;
                                    if (v179 > v176)
                                    {
                                      uint64_t v180 = v178 + 8 * v176;
                                      if (v180 != v177 && *(_DWORD *)(v180 + 4) == v145)
                                      {
                                        unint64_t v181 = *(void *)v141;
                                        uint64_t v182 = HIDWORD(*(void *)v141);
                                        unint64_t v183 = *(void *)v141 >> 39;
                                        if (v183 < v156
                                          && (uint64_t v184 = *(void *)(v155 + 8 * v183)) != 0
                                          && (unint64_t v185 = *(unsigned __int16 *)(v184 + 2 * (HIDWORD(v181) & 0x7F)),
                                              v161 > v185)
                                          && (uint64_t v186 = v160 + 8 * v185, v186 != v159)
                                          && *(_DWORD *)(v186 + 4) == v182)
                                        {
                                          v187 = (uint64_t *)(v21[10] + 24 * v185);
                                        }
                                        else
                                        {
                                          v187 = (uint64_t *)v21[11];
                                        }
                                        if (v183 < v165
                                          && (uint64_t v188 = *(void *)(v164 + 8 * v183)) != 0
                                          && (unint64_t v189 = *(unsigned __int16 *)(v188 + 2 * (HIDWORD(v181) & 0x7F)),
                                              v170 > v189)
                                          && (uint64_t v190 = v169 + 8 * v189, v190 != v168)
                                          && *(_DWORD *)(v190 + 4) == v182)
                                        {
                                          v191 = (uint64_t *)(v23[10] + 24 * v189);
                                        }
                                        else
                                        {
                                          v191 = (uint64_t *)v23[11];
                                        }
                                        if (v183 < v174
                                          && (uint64_t v192 = *(void *)(v173 + 8 * v183)) != 0
                                          && (unint64_t v193 = *(unsigned __int16 *)(v192 + 2 * (HIDWORD(v181) & 0x7F)),
                                              v179 > v193)
                                          && (uint64_t v194 = v178 + 8 * v193, v194 != v177)
                                          && *(_DWORD *)(v194 + 4) == v182)
                                        {
                                          v144 = (uint64_t *)(v25[10] + 24 * v193);
                                        }
                                        else
                                        {
                                          v144 = (uint64_t *)v25[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)34>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)34> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)34> &,SceneComponents::LayerDataExitingView<(md::MapDataType)34> &)#1}::operator()((uint64_t)&v315, v181, v187, v143, v191, v144);
                                        uint64_t v85 = v312;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v143 += 3;
        v141 += 8;
      }
      while (v141 != v142);
    }
    if (v140 != v32) {
      goto LABEL_256;
    }
    goto LABEL_202;
  }
  v311 = v27;
  uint64_t v315 = v312;
  uint64_t v316 = v313;
  uint64_t v86 = v21[7];
  uint64_t v87 = v21[8];
  if (v86 != v87)
  {
    size_t v88 = (uint64_t *)v21[10];
    do
    {
      unint64_t v90 = *(unsigned int *)(v86 + 4);
      unint64_t v91 = v90 >> 7;
      uint64_t v92 = v20[4];
      if (v90 >> 7 < (v20[5] - v92) >> 3)
      {
        uint64_t v93 = *(void *)(v92 + 8 * v91);
        if (v93)
        {
          uint64_t v94 = v90 & 0x7F;
          unint64_t v95 = *(unsigned __int16 *)(v93 + 2 * v94);
          uint64_t v97 = v20[7];
          uint64_t v96 = v20[8];
          if (v95 < (v96 - v97) >> 3)
          {
            uint64_t v98 = v97 + 8 * v95;
            if (v98 != v96 && *(_DWORD *)(v98 + 4) == v90)
            {
              uint64_t v100 = v22[4];
              unint64_t v101 = (v22[5] - v100) >> 3;
              if (v91 < v101)
              {
                uint64_t v102 = *(void *)(v100 + 8 * v91);
                if (v102)
                {
                  unint64_t v103 = *(unsigned __int16 *)(v102 + 2 * v94);
                  uint64_t v105 = v22[7];
                  uint64_t v104 = v22[8];
                  unint64_t v106 = (v104 - v105) >> 3;
                  if (v106 > v103)
                  {
                    uint64_t v107 = v105 + 8 * v103;
                    if (v107 != v104 && *(_DWORD *)(v107 + 4) == v90)
                    {
                      uint64_t v109 = v23[4];
                      unint64_t v110 = (v23[5] - v109) >> 3;
                      if (v91 < v110)
                      {
                        uint64_t v111 = *(void *)(v109 + 8 * v91);
                        if (v111)
                        {
                          unint64_t v112 = *(unsigned __int16 *)(v111 + 2 * v94);
                          uint64_t v114 = v23[7];
                          uint64_t v113 = v23[8];
                          unint64_t v115 = (v113 - v114) >> 3;
                          if (v115 > v112)
                          {
                            uint64_t v116 = v114 + 8 * v112;
                            if (v116 != v113 && *(_DWORD *)(v116 + 4) == v90)
                            {
                              uint64_t v118 = v25[4];
                              unint64_t v119 = (v25[5] - v118) >> 3;
                              if (v91 < v119)
                              {
                                uint64_t v120 = *(void *)(v118 + 8 * v91);
                                if (v120)
                                {
                                  unint64_t v121 = *(unsigned __int16 *)(v120 + 2 * v94);
                                  uint64_t v123 = v25[7];
                                  uint64_t v122 = v25[8];
                                  unint64_t v124 = (v122 - v123) >> 3;
                                  if (v124 > v121)
                                  {
                                    uint64_t v125 = v123 + 8 * v121;
                                    if (v125 != v122 && *(_DWORD *)(v125 + 4) == v90)
                                    {
                                      unint64_t v126 = *(void *)v86;
                                      uint64_t v127 = HIDWORD(*(void *)v86);
                                      unint64_t v128 = *(void *)v86 >> 39;
                                      if (v128 < v101
                                        && (uint64_t v129 = *(void *)(v100 + 8 * v128)) != 0
                                        && (unint64_t v130 = *(unsigned __int16 *)(v129 + 2 * (HIDWORD(v126) & 0x7F)), v106 > v130)
                                        && (uint64_t v131 = v105 + 8 * v130, v131 != v104)
                                        && *(_DWORD *)(v131 + 4) == v127)
                                      {
                                        v132 = (uint64_t *)(v22[10] + 24 * v130);
                                      }
                                      else
                                      {
                                        v132 = (uint64_t *)v22[11];
                                      }
                                      if (v128 < v110
                                        && (uint64_t v133 = *(void *)(v109 + 8 * v128)) != 0
                                        && (unint64_t v134 = *(unsigned __int16 *)(v133 + 2 * (HIDWORD(v126) & 0x7F)), v115 > v134)
                                        && (uint64_t v135 = v114 + 8 * v134, v135 != v113)
                                        && *(_DWORD *)(v135 + 4) == v127)
                                      {
                                        v136 = (uint64_t *)(v23[10] + 24 * v134);
                                      }
                                      else
                                      {
                                        v136 = (uint64_t *)v23[11];
                                      }
                                      if (v128 < v119
                                        && (uint64_t v137 = *(void *)(v118 + 8 * v128)) != 0
                                        && (unint64_t v138 = *(unsigned __int16 *)(v137 + 2 * (HIDWORD(v126) & 0x7F)), v124 > v138)
                                        && (uint64_t v139 = v123 + 8 * v138, v139 != v122)
                                        && *(_DWORD *)(v139 + 4) == v127)
                                      {
                                        uint64_t v89 = (uint64_t *)(v25[10] + 24 * v138);
                                      }
                                      else
                                      {
                                        uint64_t v89 = (uint64_t *)v25[11];
                                      }
                                      md::CollectMapDataLogic<(md::MapDataType)34>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)34> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)34> &,SceneComponents::LayerDataExitingView<(md::MapDataType)34> &)#1}::operator()((uint64_t)&v315, v126, v88, v132, v136, v89);
                                      uint64_t v85 = v312;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v88 += 3;
      v86 += 8;
    }
    while (v86 != v87);
  }
  unint64_t v27 = v311;
  if (v26 == v32) {
    goto LABEL_147;
  }
LABEL_90:
  if (v27 == v32)
  {
LABEL_202:
    uint64_t v315 = v85;
    uint64_t v316 = v313;
    uint64_t v195 = v23[7];
    uint64_t v196 = v23[8];
    if (v195 != v196)
    {
      v197 = (uint64_t *)v23[10];
      do
      {
        unint64_t v199 = *(unsigned int *)(v195 + 4);
        unint64_t v200 = v199 >> 7;
        uint64_t v201 = v20[4];
        if (v199 >> 7 < (v20[5] - v201) >> 3)
        {
          uint64_t v202 = *(void *)(v201 + 8 * v200);
          if (v202)
          {
            uint64_t v203 = v199 & 0x7F;
            unint64_t v204 = *(unsigned __int16 *)(v202 + 2 * v203);
            uint64_t v206 = v20[7];
            uint64_t v205 = v20[8];
            if (v204 < (v205 - v206) >> 3)
            {
              uint64_t v207 = v206 + 8 * v204;
              if (v207 != v205 && *(_DWORD *)(v207 + 4) == v199)
              {
                uint64_t v209 = v21[4];
                unint64_t v210 = (v21[5] - v209) >> 3;
                if (v200 < v210)
                {
                  uint64_t v211 = *(void *)(v209 + 8 * v200);
                  if (v211)
                  {
                    unint64_t v212 = *(unsigned __int16 *)(v211 + 2 * v203);
                    uint64_t v214 = v21[7];
                    uint64_t v213 = v21[8];
                    unint64_t v215 = (v213 - v214) >> 3;
                    if (v215 > v212)
                    {
                      uint64_t v216 = v214 + 8 * v212;
                      if (v216 != v213 && *(_DWORD *)(v216 + 4) == v199)
                      {
                        uint64_t v218 = v22[4];
                        unint64_t v219 = (v22[5] - v218) >> 3;
                        if (v200 < v219)
                        {
                          uint64_t v220 = *(void *)(v218 + 8 * v200);
                          if (v220)
                          {
                            unint64_t v221 = *(unsigned __int16 *)(v220 + 2 * v203);
                            uint64_t v223 = v22[7];
                            uint64_t v222 = v22[8];
                            unint64_t v224 = (v222 - v223) >> 3;
                            if (v224 > v221)
                            {
                              uint64_t v225 = v223 + 8 * v221;
                              if (v225 != v222 && *(_DWORD *)(v225 + 4) == v199)
                              {
                                uint64_t v227 = v25[4];
                                unint64_t v228 = (v25[5] - v227) >> 3;
                                if (v200 < v228)
                                {
                                  uint64_t v229 = *(void *)(v227 + 8 * v200);
                                  if (v229)
                                  {
                                    unint64_t v230 = *(unsigned __int16 *)(v229 + 2 * v203);
                                    uint64_t v232 = v25[7];
                                    uint64_t v231 = v25[8];
                                    unint64_t v233 = (v231 - v232) >> 3;
                                    if (v233 > v230)
                                    {
                                      uint64_t v234 = v232 + 8 * v230;
                                      if (v234 != v231 && *(_DWORD *)(v234 + 4) == v199)
                                      {
                                        unint64_t v235 = *(void *)v195;
                                        uint64_t v236 = HIDWORD(*(void *)v195);
                                        unint64_t v237 = *(void *)v195 >> 39;
                                        if (v237 < v210
                                          && (uint64_t v238 = *(void *)(v209 + 8 * v237)) != 0
                                          && (unint64_t v239 = *(unsigned __int16 *)(v238 + 2 * (HIDWORD(v235) & 0x7F)),
                                              v215 > v239)
                                          && (uint64_t v240 = v214 + 8 * v239, v240 != v213)
                                          && *(_DWORD *)(v240 + 4) == v236)
                                        {
                                          v241 = (uint64_t *)(v21[10] + 24 * v239);
                                        }
                                        else
                                        {
                                          v241 = (uint64_t *)v21[11];
                                        }
                                        if (v237 < v219
                                          && (uint64_t v242 = *(void *)(v218 + 8 * v237)) != 0
                                          && (unint64_t v243 = *(unsigned __int16 *)(v242 + 2 * (HIDWORD(v235) & 0x7F)),
                                              v224 > v243)
                                          && (uint64_t v244 = v223 + 8 * v243, v244 != v222)
                                          && *(_DWORD *)(v244 + 4) == v236)
                                        {
                                          v245 = (uint64_t *)(v22[10] + 24 * v243);
                                        }
                                        else
                                        {
                                          v245 = (uint64_t *)v22[11];
                                        }
                                        if (v237 < v228
                                          && (uint64_t v246 = *(void *)(v227 + 8 * v237)) != 0
                                          && (unint64_t v247 = *(unsigned __int16 *)(v246 + 2 * (HIDWORD(v235) & 0x7F)),
                                              v233 > v247)
                                          && (uint64_t v248 = v232 + 8 * v247, v248 != v231)
                                          && *(_DWORD *)(v248 + 4) == v236)
                                        {
                                          v198 = (uint64_t *)(v25[10] + 24 * v247);
                                        }
                                        else
                                        {
                                          v198 = (uint64_t *)v25[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)34>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)34> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)34> &,SceneComponents::LayerDataExitingView<(md::MapDataType)34> &)#1}::operator()((uint64_t)&v315, v235, v241, v245, v197, v198);
                                        uint64_t v85 = v312;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v197 += 3;
        v195 += 8;
      }
      while (v195 != v196);
    }
  }
LABEL_256:
  if ((void *)v28 == v32)
  {
    uint64_t v315 = v85;
    uint64_t v316 = v313;
    uint64_t v249 = v25[7];
    uint64_t v250 = v25[8];
    if (v249 != v250)
    {
      v251 = (uint64_t *)v25[10];
      do
      {
        unint64_t v253 = *(unsigned int *)(v249 + 4);
        unint64_t v254 = v253 >> 7;
        uint64_t v255 = v20[4];
        if (v253 >> 7 < (v20[5] - v255) >> 3)
        {
          uint64_t v256 = *(void *)(v255 + 8 * v254);
          if (v256)
          {
            uint64_t v257 = v253 & 0x7F;
            unint64_t v258 = *(unsigned __int16 *)(v256 + 2 * v257);
            uint64_t v260 = v20[7];
            uint64_t v259 = v20[8];
            if (v258 < (v259 - v260) >> 3)
            {
              uint64_t v261 = v260 + 8 * v258;
              if (v261 != v259 && *(_DWORD *)(v261 + 4) == v253)
              {
                uint64_t v263 = v21[4];
                unint64_t v264 = (v21[5] - v263) >> 3;
                if (v254 < v264)
                {
                  uint64_t v265 = *(void *)(v263 + 8 * v254);
                  if (v265)
                  {
                    unint64_t v266 = *(unsigned __int16 *)(v265 + 2 * v257);
                    uint64_t v268 = v21[7];
                    uint64_t v267 = v21[8];
                    unint64_t v269 = (v267 - v268) >> 3;
                    if (v269 > v266)
                    {
                      uint64_t v270 = v268 + 8 * v266;
                      if (v270 != v267 && *(_DWORD *)(v270 + 4) == v253)
                      {
                        uint64_t v272 = v22[4];
                        unint64_t v273 = (v22[5] - v272) >> 3;
                        if (v254 < v273)
                        {
                          uint64_t v274 = *(void *)(v272 + 8 * v254);
                          if (v274)
                          {
                            unint64_t v275 = *(unsigned __int16 *)(v274 + 2 * v257);
                            uint64_t v277 = v22[7];
                            uint64_t v276 = v22[8];
                            unint64_t v278 = (v276 - v277) >> 3;
                            if (v278 > v275)
                            {
                              uint64_t v279 = v277 + 8 * v275;
                              if (v279 != v276 && *(_DWORD *)(v279 + 4) == v253)
                              {
                                uint64_t v281 = v23[4];
                                unint64_t v282 = (v23[5] - v281) >> 3;
                                if (v254 < v282)
                                {
                                  uint64_t v283 = *(void *)(v281 + 8 * v254);
                                  if (v283)
                                  {
                                    unint64_t v284 = *(unsigned __int16 *)(v283 + 2 * v257);
                                    uint64_t v286 = v23[7];
                                    uint64_t v285 = v23[8];
                                    unint64_t v287 = (v285 - v286) >> 3;
                                    if (v287 > v284)
                                    {
                                      uint64_t v288 = v286 + 8 * v284;
                                      if (v288 != v285 && *(_DWORD *)(v288 + 4) == v253)
                                      {
                                        unint64_t v289 = *(void *)v249;
                                        uint64_t v290 = HIDWORD(*(void *)v249);
                                        unint64_t v291 = *(void *)v249 >> 39;
                                        if (v291 < v264
                                          && (uint64_t v292 = *(void *)(v263 + 8 * v291)) != 0
                                          && (unint64_t v293 = *(unsigned __int16 *)(v292 + 2 * (HIDWORD(v289) & 0x7F)),
                                              v269 > v293)
                                          && (uint64_t v294 = v268 + 8 * v293, v294 != v267)
                                          && *(_DWORD *)(v294 + 4) == v290)
                                        {
                                          v295 = (uint64_t *)(v21[10] + 24 * v293);
                                        }
                                        else
                                        {
                                          v295 = (uint64_t *)v21[11];
                                        }
                                        if (v291 < v273
                                          && (uint64_t v296 = *(void *)(v272 + 8 * v291)) != 0
                                          && (unint64_t v297 = *(unsigned __int16 *)(v296 + 2 * (HIDWORD(v289) & 0x7F)),
                                              v278 > v297)
                                          && (uint64_t v298 = v277 + 8 * v297, v298 != v276)
                                          && *(_DWORD *)(v298 + 4) == v290)
                                        {
                                          v299 = (uint64_t *)(v22[10] + 24 * v297);
                                        }
                                        else
                                        {
                                          v299 = (uint64_t *)v22[11];
                                        }
                                        if (v291 < v282
                                          && (uint64_t v300 = *(void *)(v281 + 8 * v291)) != 0
                                          && (unint64_t v301 = *(unsigned __int16 *)(v300 + 2 * (HIDWORD(v289) & 0x7F)),
                                              v287 > v301)
                                          && (uint64_t v302 = v286 + 8 * v301, v302 != v285)
                                          && *(_DWORD *)(v302 + 4) == v290)
                                        {
                                          v252 = (uint64_t *)(v23[10] + 24 * v301);
                                        }
                                        else
                                        {
                                          v252 = (uint64_t *)v23[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)34>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)34> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)34> &,SceneComponents::LayerDataExitingView<(md::MapDataType)34> &)#1}::operator()((uint64_t)&v315, v289, v295, v299, v252, v251);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v251 += 3;
        v249 += 8;
      }
      while (v249 != v250);
    }
  }
}

void sub_1A1FE9CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*v17);
  std::__split_buffer<SceneComponents::LayerDataPreviousInView<(md::MapDataType)33>>::~__split_buffer((uint64_t)va);
  std::__tree<gdc::LayerDataWithWorld>::destroy(a14);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)34>>(int8x8_t *a1)
{
  unint64_t v10 = 0x856479CF9EFCFDB9;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x856479CF9EFCFDB9;
    if (*(void *)&v1 <= 0x856479CF9EFCFDB9) {
      unint64_t v3 = 0x856479CF9EFCFDB9 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x856479CF9EFCFDB9;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x856479CF9EFCFDB9)
      {
        if (v5[2] == 0x856479CF9EFCFDB9) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x856479CF9EFCFDB9) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x856479CF9EFCFDB9) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1FEA004(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)34>>(int8x8_t *a1)
{
  uint64_t v10 = 0x6EE431FCF9BF7D59;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x6EE431FCF9BF7D59;
    if (*(void *)&v1 <= 0x6EE431FCF9BF7D59uLL) {
      uint64_t v3 = 0x6EE431FCF9BF7D59uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x6EE431FCF9BF7D59;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x6EE431FCF9BF7D59)
      {
        if (v5[2] == 0x6EE431FCF9BF7D59) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x6EE431FCF9BF7D59) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x6EE431FCF9BF7D59) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1FEA274(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)34>>(int8x8_t *a1)
{
  unint64_t v10 = 0xD0945B75B357CE1ALL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xD0945B75B357CE1ALL;
    if (*(void *)&v1 <= 0xD0945B75B357CE1ALL) {
      unint64_t v3 = 0xD0945B75B357CE1ALL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xD0945B75B357CE1ALL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xD0945B75B357CE1ALL)
      {
        if (v5[2] == 0xD0945B75B357CE1ALL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xD0945B75B357CE1ALL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xD0945B75B357CE1ALL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1FEA4E4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)34>>(int8x8_t *a1)
{
  uint64_t v10 = 0x4DEFD27D3EF066C8;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x4DEFD27D3EF066C8;
    if (*(void *)&v1 <= 0x4DEFD27D3EF066C8uLL) {
      uint64_t v3 = 0x4DEFD27D3EF066C8uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x4DEFD27D3EF066C8;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x4DEFD27D3EF066C8)
      {
        if (v5[2] == 0x4DEFD27D3EF066C8) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x4DEFD27D3EF066C8) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x4DEFD27D3EF066C8) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1FEA754(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::CollectMapDataLogic<(md::MapDataType)34>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)34> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)34> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)34> &,SceneComponents::LayerDataExitingView<(md::MapDataType)34> &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v8 = a4;
  uint64_t v9 = (uint64_t)a3;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  uint64_t v15 = (void **)(a3 + 1);
  uint64_t v14 = a3[1];
  uint64_t v16 = a4 + 1;
  uint64_t v17 = a3[2];
  *(_OWORD *)(a3 + 1) = *(_OWORD *)(a4 + 1);
  a4[1] = v14;
  a4[2] = v17;
  if (a3[2]) {
    uint64_t v18 = (uint64_t *)(a3[1] + 16);
  }
  else {
    uint64_t v18 = a3;
  }
  *uint64_t v18 = (uint64_t)v15;
  unint64_t v19 = (void *)(*v16 + 16);
  if (!v17) {
    unint64_t v19 = a4;
  }
  *unint64_t v19 = v16;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*v15);
  *(void *)uint64_t v9 = v15;
  *(void *)(v9 + 16) = 0;
  void *v15 = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy((void *)a5[1]);
  *a5 = (uint64_t)(a5 + 1);
  a5[2] = 0;
  a5[1] = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy((void *)a6[1]);
  *a6 = (uint64_t)(a6 + 1);
  a6[2] = 0;
  a6[1] = 0;
  unint64_t v20 = **(void **)a1;
  {
LABEL_152:
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
    }
  }
  uint64_t v21 = *(_WORD **)(v20 + 48);
  BOOL v22 = *(_WORD **)(v20 + 56);
  unint64_t v23 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v21 != v22)
  {
    uint64_t v24 = *(_WORD **)(v20 + 48);
    while (*v24 != 34)
    {
      v24 += 16;
      if (v24 == v22) {
        goto LABEL_18;
      }
    }
    if (v24 == v22)
    {
      unint64_t v23 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v21 != 34)
      {
        v21 += 16;
        if (v21 == v22)
        {
          uint64_t v21 = *(_WORD **)(v20 + 56);
          break;
        }
      }
      unint64_t v23 = (uint64_t *)(v21 + 4);
    }
  }
LABEL_18:
  std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>((uint64_t *)v9, (void *)*v23, v23 + 1);
  unint64_t v20 = *(void *)v9;
  double v25 = (uint64_t *)*v8;
  uint64_t v26 = (uint64_t *)*a5;
  *(void *)&long long v93 = a5;
  *((void *)&v93 + 1) = v26;
  while ((void **)v20 != v15)
  {
    if (v25 == v16)
    {
      long long v95 = v93;
      do
      {
        std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((void **)&v95, v20 + 32);
        unint64_t v43 = *(void **)(v20 + 8);
        if (v43)
        {
          do
          {
            uint64_t v44 = v43;
            unint64_t v43 = (void *)*v43;
          }
          while (v43);
        }
        else
        {
          do
          {
            uint64_t v44 = *(void **)(v20 + 16);
            BOOL v40 = *v44 == v20;
            unint64_t v20 = (unint64_t)v44;
          }
          while (!v40);
        }
        unint64_t v20 = (unint64_t)v44;
      }
      while (v44 != v15);
      break;
    }
    unint64_t v27 = *(void *)(v20 + 32);
    int v28 = *(unsigned __int8 *)(v20 + 48);
    int v29 = (char)v28;
    int v30 = *((unsigned __int8 *)v25 + 48);
    unint64_t v31 = v25[4];
    if (v28 == v30) {
      BOOL v32 = v27 < v31;
    }
    else {
      BOOL v32 = (char)v28 < (char)v30;
    }
    if (v32)
    {
      std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((void **)&v93, v20 + 32);
      size_t v33 = *(void **)(v20 + 8);
      if (v33)
      {
        do
        {
          unint64_t v20 = (unint64_t)v33;
          size_t v33 = (void *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          unint64_t v34 = v20;
          unint64_t v20 = *(void *)(v20 + 16);
        }
        while (*(void *)v20 != v34);
      }
    }
    else
    {
      BOOL v35 = v31 < v27;
      if (v29 != (char)v30) {
        BOOL v35 = (char)v30 < v29;
      }
      if (v35)
      {
        uint64_t v36 = (uint64_t *)v25[1];
        if (v36)
        {
          do
          {
            double v25 = v36;
            uint64_t v36 = (uint64_t *)*v36;
          }
          while (v36);
        }
        else
        {
          do
          {
            unint64_t v37 = v25;
            double v25 = (uint64_t *)v25[2];
          }
          while ((uint64_t *)*v25 != v37);
        }
      }
      else
      {
        uint64_t v38 = *(void **)(v20 + 8);
        if (v38)
        {
          do
          {
            uint64_t v39 = v38;
            uint64_t v38 = (void *)*v38;
          }
          while (v38);
        }
        else
        {
          do
          {
            uint64_t v39 = *(void **)(v20 + 16);
            BOOL v40 = *v39 == v20;
            unint64_t v20 = (unint64_t)v39;
          }
          while (!v40);
        }
        uint64_t v41 = (uint64_t *)v25[1];
        if (v41)
        {
          do
          {
            double v25 = v41;
            uint64_t v41 = (uint64_t *)*v41;
          }
          while (v41);
        }
        else
        {
          do
          {
            uint64_t v42 = v25;
            double v25 = (uint64_t *)v25[2];
          }
          while ((uint64_t *)*v25 != v42);
        }
        unint64_t v20 = (unint64_t)v39;
      }
    }
  }
  uint64_t v8 = (uint64_t *)*v8;
  uint64_t v45 = *(void *)v9;
  uint64_t v46 = (uint64_t *)*a6;
  *(void *)&long long v93 = a6;
  *((void *)&v93 + 1) = v46;
  while (v8 != v16)
  {
    if ((void **)v45 == v15)
    {
      long long v95 = v93;
      do
      {
        std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((void **)&v95, (uint64_t)(v8 + 4));
        uint64_t v62 = (uint64_t *)v8[1];
        if (v62)
        {
          do
          {
            unint64_t v63 = v62;
            uint64_t v62 = (uint64_t *)*v62;
          }
          while (v62);
        }
        else
        {
          do
          {
            unint64_t v63 = (uint64_t *)v8[2];
            BOOL v40 = *v63 == (void)v8;
            uint64_t v8 = v63;
          }
          while (!v40);
        }
        uint64_t v8 = v63;
      }
      while (v63 != v16);
      break;
    }
    unint64_t v47 = v8[4];
    int v48 = *((unsigned __int8 *)v8 + 48);
    int v49 = (char)v48;
    int v50 = *(unsigned __int8 *)(v45 + 48);
    unint64_t v51 = *(void *)(v45 + 32);
    if (v48 == v50) {
      BOOL v52 = v47 < v51;
    }
    else {
      BOOL v52 = (char)v48 < (char)v50;
    }
    if (v52)
    {
      std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((void **)&v93, (uint64_t)(v8 + 4));
      uint64_t v53 = (uint64_t *)v8[1];
      if (v53)
      {
        do
        {
          uint64_t v8 = v53;
          uint64_t v53 = (uint64_t *)*v53;
        }
        while (v53);
      }
      else
      {
        do
        {
          unint64_t v54 = v8;
          uint64_t v8 = (uint64_t *)v8[2];
        }
        while ((uint64_t *)*v8 != v54);
      }
    }
    else
    {
      BOOL v55 = v51 < v47;
      if (v49 != (char)v50) {
        BOOL v55 = (char)v50 < v49;
      }
      if (v55)
      {
        unint64_t v56 = *(void **)(v45 + 8);
        if (v56)
        {
          do
          {
            uint64_t v45 = (uint64_t)v56;
            unint64_t v56 = (void *)*v56;
          }
          while (v56);
        }
        else
        {
          do
          {
            uint64_t v57 = v45;
            uint64_t v45 = *(void *)(v45 + 16);
          }
          while (*(void *)v45 != v57);
        }
      }
      else
      {
        unint64_t v58 = (uint64_t *)v8[1];
        if (v58)
        {
          do
          {
            uint64_t v59 = v58;
            unint64_t v58 = (uint64_t *)*v58;
          }
          while (v58);
        }
        else
        {
          do
          {
            uint64_t v59 = (uint64_t *)v8[2];
            BOOL v40 = *v59 == (void)v8;
            uint64_t v8 = v59;
          }
          while (!v40);
        }
        uint64_t v60 = *(void **)(v45 + 8);
        if (v60)
        {
          do
          {
            uint64_t v45 = (uint64_t)v60;
            uint64_t v60 = (void *)*v60;
          }
          while (v60);
        }
        else
        {
          do
          {
            uint64_t v61 = v45;
            uint64_t v45 = *(void *)(v45 + 16);
          }
          while (*(void *)v45 != v61);
        }
        uint64_t v8 = v59;
      }
    }
  }
  if (!a5[2]) {
    goto LABEL_122;
  }
  uint64_t v64 = (void *)gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)34>>(*(int8x8_t **)(v12 + 128));
  uint64_t v94 = a2;
  unint64_t v65 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v64 + 4, (uint64_t)&v94);
  if (v66)
  {
    unint64_t v20 = v64[11];
    unint64_t v68 = v64[12];
    if (v20 >= v68)
    {
      uint64_t v70 = (char *)v64[10];
      uint64_t v16 = (uint64_t *)(v20 - (void)v70);
      uint64_t v71 = v20 - (void)v70 + 1;
      if (v71 < 0) {
        goto LABEL_154;
      }
      unint64_t v72 = v68 - (void)v70;
      if (2 * v72 > v71) {
        uint64_t v71 = 2 * v72;
      }
      if (v72 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v73 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v73 = v71;
      }
      if (v73) {
        uint64_t v74 = (char *)operator new(v73);
      }
      else {
        uint64_t v74 = 0;
      }
      uint64_t v75 = &v74[v73];
      uint64_t v69 = (uint64_t)v16 + (void)v74 + 1;
      uint64_t v76 = &v70[-v20];
      if (v70 == (char *)v20) {
        uint64_t v76 = 0;
      }
      v64[10] = (char *)v16 + (void)v74 + (unint64_t)v76;
      v64[11] = v69;
      v64[12] = v75;
      if (v70) {
        operator delete(v70);
      }
    }
    else
    {
      uint64_t v69 = v20 + 1;
    }
    v64[11] = v69;
    uint64_t v9 = v64[31];
    goto LABEL_118;
  }
  uint64_t v9 = v64[31];
  if (v64[10] + (((uint64_t)v65 - v64[7]) >> 3) == v64[11])
  {
LABEL_118:
    uint64_t v8 = &v94;
    a5 = (uint64_t *)v64[22];
    if (a5)
    {
      unint64_t v20 = 1;
      while (1)
      {
        *(void *)&long long v95 = &v94;
        *((void *)&v95 + 1) = 1;
        *(void *)&long long v93 = v9;
        uint64_t v77 = a5[6];
        if (!v77) {
          goto LABEL_151;
        }
        (*(void (**)(uint64_t, long long *, long long *))(*(void *)v77 + 48))(v77, &v93, &v95);
        a5 = (uint64_t *)*a5;
        if (!a5) {
          goto LABEL_122;
        }
      }
    }
    goto LABEL_122;
  }
  a5 = (uint64_t *)v64[16];
  if (a5)
  {
    uint64_t v8 = &v94;
    unint64_t v20 = 1;
    do
    {
      *(void *)&long long v95 = &v94;
      *((void *)&v95 + 1) = 1;
      *(void *)&long long v93 = v9;
      uint64_t v67 = a5[6];
      if (!v67) {
        goto LABEL_151;
      }
      (*(void (**)(uint64_t, long long *, long long *))(*(void *)v67 + 48))(v67, &v93, &v95);
      a5 = (uint64_t *)*a5;
    }
    while (a5);
  }
LABEL_122:
  if (!a6[2]) {
    return;
  }
  unint64_t v78 = (void *)gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)34>>(*(int8x8_t **)(v12 + 128));
  uint64_t v94 = a2;
  uint64_t v79 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v78 + 4, (uint64_t)&v94);
  if (v80)
  {
    unint64_t v83 = (unsigned char *)v78[11];
    unint64_t v82 = v78[12];
    if ((unint64_t)v83 < v82)
    {
      uint64_t v84 = (uint64_t)(v83 + 1);
LABEL_145:
      v78[11] = v84;
      a2 = v78[31];
      goto LABEL_146;
    }
    uint64_t v85 = (char *)v78[10];
    uint64_t v8 = (uint64_t *)(v83 - v85);
    uint64_t v86 = v83 - v85 + 1;
    if (v86 >= 0)
    {
      unint64_t v87 = v82 - (void)v85;
      if (2 * v87 > v86) {
        uint64_t v86 = 2 * v87;
      }
      if (v87 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v88 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v88 = v86;
      }
      if (v88) {
        uint64_t v89 = (char *)operator new(v88);
      }
      else {
        uint64_t v89 = 0;
      }
      unint64_t v90 = &v89[v88];
      uint64_t v84 = (uint64_t)v8 + (void)v89 + 1;
      unint64_t v91 = (char *)(v85 - v83);
      if (v85 == v83) {
        unint64_t v91 = 0;
      }
      v78[10] = (char *)v8 + (void)v89 + (unint64_t)v91;
      v78[11] = v84;
      v78[12] = v90;
      if (v85) {
        operator delete(v85);
      }
      goto LABEL_145;
    }
LABEL_154:
    abort();
  }
  a2 = v78[31];
  if (v78[10] + (((uint64_t)v79 - v78[7]) >> 3) != v78[11])
  {
    a6 = (uint64_t *)v78[16];
    if (a6)
    {
      a5 = &v94;
      uint64_t v9 = 1;
      while (1)
      {
        *(void *)&long long v95 = &v94;
        *((void *)&v95 + 1) = 1;
        *(void *)&long long v93 = a2;
        uint64_t v81 = a6[6];
        if (!v81) {
          break;
        }
        (*(void (**)(uint64_t, long long *, long long *))(*(void *)v81 + 48))(v81, &v93, &v95);
        a6 = (uint64_t *)*a6;
        if (!a6) {
          return;
        }
      }
LABEL_151:
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_152;
    }
    return;
  }
LABEL_146:
  a5 = &v94;
  a6 = (uint64_t *)v78[22];
  if (a6)
  {
    uint64_t v9 = 1;
    while (1)
    {
      *(void *)&long long v95 = &v94;
      *((void *)&v95 + 1) = 1;
      *(void *)&long long v93 = a2;
      uint64_t v92 = a6[6];
      if (!v92) {
        break;
      }
      (*(void (**)(uint64_t, long long *, long long *))(*(void *)v92 + 48))(v92, &v93, &v95);
      a6 = (uint64_t *)*a6;
      if (!a6) {
        return;
      }
    }
    goto LABEL_151;
  }
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)34>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)34>>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(void **)(v15 - 24), (void *)(v15 - 16));
    uint64_t v15 = a1[11];
  }
  uint64_t v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(v15 - 16));
  a1[11] = v16;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)34>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)34>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)34>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)34>>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(void **)(v15 - 24), (void *)(v15 - 16));
    uint64_t v15 = a1[11];
  }
  uint64_t v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(v15 - 16));
  a1[11] = v16;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)34>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)34>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)34>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)34>>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_WORD *)(v14 + 2 * v7) = *(_WORD *)(v15 - 2);
  a1[11] = v15 - 2;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)34>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)34>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)34>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)34>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)34>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)34>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)34>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)34>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)34>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)34>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)34>,md::CollectMapDataContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)34>,md::CollectMapDataContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) != 0x412AFB1345D08930 || !*(void *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  uint64_t v4 = *(void **)(a2 + 8);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_27;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v5 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v7 = 0x99BED48DEFBBD82BLL % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_27;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_27;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_25;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_27;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_27;
    }
LABEL_14:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_27;
    }
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_14;
  }
LABEL_25:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v14 = *(void *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v14 = 0;
LABEL_28:
  uint64_t v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 160))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)34>,md::CollectMapDataContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x412AFB1345D08930 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)34>,md::CollectMapDataContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x412AFB1345D08930 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 144))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)34>,md::CollectMapDataContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x412AFB1345D08930 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 136))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)34>,md::CollectMapDataContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x412AFB1345D08930 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 128))(result);
}

void md::Logic<md::CollectMapDataLogic<(md::MapDataType)34>,md::CollectMapDataContext<(md::MapDataType)34>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A1FEC02C(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t gdc::ObjectHolder<md::CollectMapDataContext<(md::MapDataType)34>>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::CollectMapDataContext<(md::MapDataType)34>>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555910;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0xC400A2AC0F1);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::CollectMapDataContext<(md::MapDataType)34>>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555910;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0xC400A2AC0F1);
  }
  return a1;
}

uint64_t md::CollectMapDataLogic<(md::MapDataType)34>::didBecomeInactive(uint64_t result)
{
  uint64_t v1 = result;
  if (*(_WORD *)(result + 120) || *(_WORD *)(result + 122) || *(_DWORD *)(result + 124) != -1)
  {
    __n128 result = gdc::Registry::destroy(*(void *)(result + 128), *(void *)(result + 120));
    *(void *)(v1 + 120) = 0xFFFFFFFF00000000;
  }
  return result;
}

void md::CollectMapDataLogic<(md::MapDataType)34>::~CollectMapDataLogic(uint64_t a1)
{
  *(void *)a1 = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 80));
  JUMPOUT(0x1A6239270);
}

uint64_t md::CollectMapDataLogic<(md::MapDataType)34>::~CollectMapDataLogic(uint64_t a1)
{
  *(void *)a1 = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 80));
  return a1;
}

void md::Logic<md::CollectMapDataLogic<(md::MapDataType)54>,md::CollectMapDataContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint8x8_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint8x8_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void md::CollectMapDataLogic<(md::MapDataType)54>::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint8x8_t v5 = (void *)gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)54>>(*(int8x8_t **)(a1 + 128));
  unint64_t v6 = v5;
  if (v5[29])
  {
    char v7 = (void *)v5[28];
    if (v7)
    {
      uint64_t v8 = v5[31];
      uint64_t v9 = v5[7];
      uint64_t v10 = (v5[8] - v9) >> 3;
      do
      {
        uint64_t v315 = v9;
        uint64_t v316 = v10;
        uint64_t v314 = v8;
        uint64_t v11 = v7[6];
        if (!v11) {
          goto LABEL_312;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48))(v11, &v314, &v315);
        char v7 = (void *)*v7;
      }
      while (v7);
    }
  }
  v6[8] = v6[7];
  v6[11] = v6[10];
  uint64_t v12 = (void *)gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)54>>(*(int8x8_t **)(a1 + 128));
  uint64_t v13 = v12;
  if (v12[29])
  {
    uint64_t v14 = (void *)v12[28];
    if (v14)
    {
      uint64_t v15 = v12[31];
      uint64_t v16 = v12[7];
      uint64_t v17 = (v12[8] - v16) >> 3;
      while (1)
      {
        uint64_t v315 = v16;
        uint64_t v316 = v17;
        uint64_t v314 = v15;
        uint64_t v18 = v14[6];
        if (!v18) {
          break;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v314, &v315);
        uint64_t v14 = (void *)*v14;
        if (!v14) {
          goto LABEL_11;
        }
      }
LABEL_312:
      std::__throw_bad_function_call[abi:nn180100]();
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
      return;
    }
  }
LABEL_11:
  v13[8] = v13[7];
  v13[11] = v13[10];
  uint64_t v312 = *a3;
  unint64_t v19 = *(int8x8_t **)(a1 + 128);
  if (!*(_WORD *)(a1 + 120) && !*(_WORD *)(a1 + 122) && *(_DWORD *)(a1 + 124) == -1) {
    gdc::Registry::create(*(gdc::Registry **)(a1 + 128));
  }
  uint64_t v313 = a1;
  uint64_t v20 = (void *)gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)54>>(v19);
  uint64_t v21 = (void *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)54>>(v19);
  BOOL v22 = (void *)gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)54>>(v19);
  unint64_t v23 = (void *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)54>>(v19);
  uint64_t v24 = gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)54>>(v19);
  double v25 = (void *)v24;
  uint64_t v26 = v22 + 4;
  unint64_t v27 = v23 + 4;
  uint64_t v28 = v24 + 32;
  uint64_t v30 = v20[7];
  uint64_t v29 = v20[8];
  if (v21[8] - v21[7] >= (unint64_t)(v29 - v30)) {
    unint64_t v31 = v20 + 4;
  }
  else {
    unint64_t v31 = v21 + 4;
  }
  if (v22[8] - v22[7] < v31[4] - v31[3]) {
    unint64_t v31 = v22 + 4;
  }
  if (v23[8] - v23[7] < v31[4] - v31[3]) {
    unint64_t v31 = v23 + 4;
  }
  if (*(void *)(v24 + 64) - *(void *)(v24 + 56) >= v31[4] - v31[3]) {
    BOOL v32 = v31;
  }
  else {
    BOOL v32 = (void *)(v24 + 32);
  }
  if (v20 + 4 == v32)
  {
    uint64_t v309 = v24 + 32;
    uint64_t v315 = v312;
    uint64_t v316 = v313;
    while (v30 != v29)
    {
      unint64_t v34 = *(unsigned int *)(v30 + 4);
      unint64_t v35 = v34 >> 7;
      uint64_t v36 = v21[4];
      unint64_t v37 = (v21[5] - v36) >> 3;
      if (v34 >> 7 < v37)
      {
        uint64_t v38 = *(void *)(v36 + 8 * v35);
        if (v38)
        {
          uint64_t v39 = v34 & 0x7F;
          unint64_t v40 = *(unsigned __int16 *)(v38 + 2 * v39);
          uint64_t v41 = v21[7];
          uint64_t v42 = v21[8];
          unint64_t v43 = (v42 - v41) >> 3;
          if (v43 > v40)
          {
            uint64_t v44 = v41 + 8 * v40;
            if (v44 != v42 && *(_DWORD *)(v44 + 4) == v34)
            {
              uint64_t v46 = v22[4];
              unint64_t v47 = (v22[5] - v46) >> 3;
              if (v35 < v47)
              {
                uint64_t v48 = *(void *)(v46 + 8 * v35);
                if (v48)
                {
                  unint64_t v49 = *(unsigned __int16 *)(v48 + 2 * v39);
                  uint64_t v51 = v22[7];
                  uint64_t v50 = v22[8];
                  unint64_t v52 = (v50 - v51) >> 3;
                  if (v52 > v49)
                  {
                    uint64_t v53 = v51 + 8 * v49;
                    if (v53 != v50 && *(_DWORD *)(v53 + 4) == v34)
                    {
                      uint64_t v55 = v23[4];
                      unint64_t v56 = (v23[5] - v55) >> 3;
                      if (v35 < v56)
                      {
                        uint64_t v57 = *(void *)(v55 + 8 * v35);
                        if (v57)
                        {
                          unint64_t v58 = *(unsigned __int16 *)(v57 + 2 * v39);
                          uint64_t v59 = v23[7];
                          v310 = v27;
                          uint64_t v308 = v23[8];
                          unint64_t v307 = (v308 - v59) >> 3;
                          if (v307 > v58)
                          {
                            uint64_t v60 = v59 + 8 * v58;
                            if (v60 != v308 && *(_DWORD *)(v60 + 4) == v34)
                            {
                              uint64_t v306 = v25[4];
                              unint64_t v305 = (v25[5] - v306) >> 3;
                              if (v35 < v305)
                              {
                                uint64_t v62 = *(void *)(v306 + 8 * v35);
                                if (v62)
                                {
                                  unint64_t v63 = *(unsigned __int16 *)(v62 + 2 * v39);
                                  uint64_t v303 = v25[7];
                                  uint64_t v304 = v25[8];
                                  if ((v304 - v303) >> 3 > v63)
                                  {
                                    uint64_t v64 = v303 + 8 * v63;
                                    if (v64 != v304 && *(_DWORD *)(v64 + 4) == v34)
                                    {
                                      unint64_t v65 = *(void *)v30;
                                      uint64_t v66 = HIDWORD(*(void *)v30);
                                      unint64_t v67 = *(void *)v30 >> 39;
                                      if (v67 < v37
                                        && (uint64_t v68 = *(void *)(v36 + 8 * v67)) != 0
                                        && (unint64_t v69 = *(unsigned __int16 *)(v68 + 2 * (HIDWORD(v65) & 0x7F)), v43 > v69)
                                        && (uint64_t v70 = v41 + 8 * v69, v70 != v42)
                                        && *(_DWORD *)(v70 + 4) == v66)
                                      {
                                        uint64_t v71 = (uint64_t *)(v21[10] + 24 * v69);
                                      }
                                      else
                                      {
                                        uint64_t v71 = (uint64_t *)v21[11];
                                      }
                                      if (v67 < v47
                                        && (uint64_t v72 = *(void *)(v46 + 8 * v67)) != 0
                                        && (unint64_t v73 = *(unsigned __int16 *)(v72 + 2 * (HIDWORD(v65) & 0x7F)), v52 > v73)
                                        && (uint64_t v74 = v51 + 8 * v73, v74 != v50)
                                        && *(_DWORD *)(v74 + 4) == v66)
                                      {
                                        uint64_t v75 = (uint64_t *)(v22[10] + 24 * v73);
                                      }
                                      else
                                      {
                                        uint64_t v75 = (uint64_t *)v22[11];
                                      }
                                      uint64_t v76 = HIDWORD(*(void *)v30);
                                      if (v67 < v56
                                        && (uint64_t v77 = *(void *)(v55 + 8 * v67)) != 0
                                        && (unint64_t v78 = *(unsigned __int16 *)(v77 + 2 * (HIDWORD(v65) & 0x7F)), v307 > v78)
                                        && (uint64_t v79 = v59 + 8 * v78, v79 != v308)
                                        && *(_DWORD *)(v79 + 4) == v76)
                                      {
                                        unint64_t v80 = (v304 - v303) >> 3;
                                        uint64_t v81 = (uint64_t *)(v23[10] + 24 * v78);
                                      }
                                      else
                                      {
                                        unint64_t v80 = (v304 - v303) >> 3;
                                        uint64_t v81 = (uint64_t *)v23[11];
                                      }
                                      if (v67 < v305
                                        && (uint64_t v82 = *(void *)(v306 + 8 * v67)) != 0
                                        && (unint64_t v83 = *(unsigned __int16 *)(v82 + 2 * (HIDWORD(v65) & 0x7F)), v80 > v83)
                                        && (uint64_t v84 = v303 + 8 * v83, v84 != v304)
                                        && *(_DWORD *)(v84 + 4) == v76)
                                      {
                                        size_t v33 = (uint64_t *)(v25[10] + 24 * v83);
                                      }
                                      else
                                      {
                                        size_t v33 = (uint64_t *)v25[11];
                                      }
                                      md::CollectMapDataLogic<(md::MapDataType)54>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)54> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)54> &,SceneComponents::LayerDataExitingView<(md::MapDataType)54> &)#1}::operator()((uint64_t)&v315, v65, v71, v75, v81, v33);
                                      unint64_t v27 = v310;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v30 += 8;
    }
    uint64_t v28 = v309;
  }
  uint64_t v85 = v312;
  if (v21 + 4 != v32)
  {
    if (v26 != v32) {
      goto LABEL_90;
    }
LABEL_147:
    v140 = v27;
    uint64_t v315 = v85;
    uint64_t v316 = v313;
    uint64_t v141 = v22[7];
    uint64_t v142 = v22[8];
    if (v141 != v142)
    {
      v143 = (uint64_t *)v22[10];
      do
      {
        unint64_t v145 = *(unsigned int *)(v141 + 4);
        unint64_t v146 = v145 >> 7;
        uint64_t v147 = v20[4];
        if (v145 >> 7 < (v20[5] - v147) >> 3)
        {
          uint64_t v148 = *(void *)(v147 + 8 * v146);
          if (v148)
          {
            uint64_t v149 = v145 & 0x7F;
            unint64_t v150 = *(unsigned __int16 *)(v148 + 2 * v149);
            uint64_t v152 = v20[7];
            uint64_t v151 = v20[8];
            if (v150 < (v151 - v152) >> 3)
            {
              uint64_t v153 = v152 + 8 * v150;
              if (v153 != v151 && *(_DWORD *)(v153 + 4) == v145)
              {
                uint64_t v155 = v21[4];
                unint64_t v156 = (v21[5] - v155) >> 3;
                if (v146 < v156)
                {
                  uint64_t v157 = *(void *)(v155 + 8 * v146);
                  if (v157)
                  {
                    unint64_t v158 = *(unsigned __int16 *)(v157 + 2 * v149);
                    uint64_t v160 = v21[7];
                    uint64_t v159 = v21[8];
                    unint64_t v161 = (v159 - v160) >> 3;
                    if (v161 > v158)
                    {
                      uint64_t v162 = v160 + 8 * v158;
                      if (v162 != v159 && *(_DWORD *)(v162 + 4) == v145)
                      {
                        uint64_t v164 = v23[4];
                        unint64_t v165 = (v23[5] - v164) >> 3;
                        if (v146 < v165)
                        {
                          uint64_t v166 = *(void *)(v164 + 8 * v146);
                          if (v166)
                          {
                            unint64_t v167 = *(unsigned __int16 *)(v166 + 2 * v149);
                            uint64_t v169 = v23[7];
                            uint64_t v168 = v23[8];
                            unint64_t v170 = (v168 - v169) >> 3;
                            if (v170 > v167)
                            {
                              uint64_t v171 = v169 + 8 * v167;
                              if (v171 != v168 && *(_DWORD *)(v171 + 4) == v145)
                              {
                                uint64_t v173 = v25[4];
                                unint64_t v174 = (v25[5] - v173) >> 3;
                                if (v146 < v174)
                                {
                                  uint64_t v175 = *(void *)(v173 + 8 * v146);
                                  if (v175)
                                  {
                                    unint64_t v176 = *(unsigned __int16 *)(v175 + 2 * v149);
                                    uint64_t v178 = v25[7];
                                    uint64_t v177 = v25[8];
                                    unint64_t v179 = (v177 - v178) >> 3;
                                    if (v179 > v176)
                                    {
                                      uint64_t v180 = v178 + 8 * v176;
                                      if (v180 != v177 && *(_DWORD *)(v180 + 4) == v145)
                                      {
                                        unint64_t v181 = *(void *)v141;
                                        uint64_t v182 = HIDWORD(*(void *)v141);
                                        unint64_t v183 = *(void *)v141 >> 39;
                                        if (v183 < v156
                                          && (uint64_t v184 = *(void *)(v155 + 8 * v183)) != 0
                                          && (unint64_t v185 = *(unsigned __int16 *)(v184 + 2 * (HIDWORD(v181) & 0x7F)),
                                              v161 > v185)
                                          && (uint64_t v186 = v160 + 8 * v185, v186 != v159)
                                          && *(_DWORD *)(v186 + 4) == v182)
                                        {
                                          v187 = (uint64_t *)(v21[10] + 24 * v185);
                                        }
                                        else
                                        {
                                          v187 = (uint64_t *)v21[11];
                                        }
                                        if (v183 < v165
                                          && (uint64_t v188 = *(void *)(v164 + 8 * v183)) != 0
                                          && (unint64_t v189 = *(unsigned __int16 *)(v188 + 2 * (HIDWORD(v181) & 0x7F)),
                                              v170 > v189)
                                          && (uint64_t v190 = v169 + 8 * v189, v190 != v168)
                                          && *(_DWORD *)(v190 + 4) == v182)
                                        {
                                          v191 = (uint64_t *)(v23[10] + 24 * v189);
                                        }
                                        else
                                        {
                                          v191 = (uint64_t *)v23[11];
                                        }
                                        if (v183 < v174
                                          && (uint64_t v192 = *(void *)(v173 + 8 * v183)) != 0
                                          && (unint64_t v193 = *(unsigned __int16 *)(v192 + 2 * (HIDWORD(v181) & 0x7F)),
                                              v179 > v193)
                                          && (uint64_t v194 = v178 + 8 * v193, v194 != v177)
                                          && *(_DWORD *)(v194 + 4) == v182)
                                        {
                                          v144 = (uint64_t *)(v25[10] + 24 * v193);
                                        }
                                        else
                                        {
                                          v144 = (uint64_t *)v25[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)54>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)54> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)54> &,SceneComponents::LayerDataExitingView<(md::MapDataType)54> &)#1}::operator()((uint64_t)&v315, v181, v187, v143, v191, v144);
                                        uint64_t v85 = v312;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v143 += 3;
        v141 += 8;
      }
      while (v141 != v142);
    }
    if (v140 != v32) {
      goto LABEL_256;
    }
    goto LABEL_202;
  }
  v311 = v27;
  uint64_t v315 = v312;
  uint64_t v316 = v313;
  uint64_t v86 = v21[7];
  uint64_t v87 = v21[8];
  if (v86 != v87)
  {
    size_t v88 = (uint64_t *)v21[10];
    do
    {
      unint64_t v90 = *(unsigned int *)(v86 + 4);
      unint64_t v91 = v90 >> 7;
      uint64_t v92 = v20[4];
      if (v90 >> 7 < (v20[5] - v92) >> 3)
      {
        uint64_t v93 = *(void *)(v92 + 8 * v91);
        if (v93)
        {
          uint64_t v94 = v90 & 0x7F;
          unint64_t v95 = *(unsigned __int16 *)(v93 + 2 * v94);
          uint64_t v97 = v20[7];
          uint64_t v96 = v20[8];
          if (v95 < (v96 - v97) >> 3)
          {
            uint64_t v98 = v97 + 8 * v95;
            if (v98 != v96 && *(_DWORD *)(v98 + 4) == v90)
            {
              uint64_t v100 = v22[4];
              unint64_t v101 = (v22[5] - v100) >> 3;
              if (v91 < v101)
              {
                uint64_t v102 = *(void *)(v100 + 8 * v91);
                if (v102)
                {
                  unint64_t v103 = *(unsigned __int16 *)(v102 + 2 * v94);
                  uint64_t v105 = v22[7];
                  uint64_t v104 = v22[8];
                  unint64_t v106 = (v104 - v105) >> 3;
                  if (v106 > v103)
                  {
                    uint64_t v107 = v105 + 8 * v103;
                    if (v107 != v104 && *(_DWORD *)(v107 + 4) == v90)
                    {
                      uint64_t v109 = v23[4];
                      unint64_t v110 = (v23[5] - v109) >> 3;
                      if (v91 < v110)
                      {
                        uint64_t v111 = *(void *)(v109 + 8 * v91);
                        if (v111)
                        {
                          unint64_t v112 = *(unsigned __int16 *)(v111 + 2 * v94);
                          uint64_t v114 = v23[7];
                          uint64_t v113 = v23[8];
                          unint64_t v115 = (v113 - v114) >> 3;
                          if (v115 > v112)
                          {
                            uint64_t v116 = v114 + 8 * v112;
                            if (v116 != v113 && *(_DWORD *)(v116 + 4) == v90)
                            {
                              uint64_t v118 = v25[4];
                              unint64_t v119 = (v25[5] - v118) >> 3;
                              if (v91 < v119)
                              {
                                uint64_t v120 = *(void *)(v118 + 8 * v91);
                                if (v120)
                                {
                                  unint64_t v121 = *(unsigned __int16 *)(v120 + 2 * v94);
                                  uint64_t v123 = v25[7];
                                  uint64_t v122 = v25[8];
                                  unint64_t v124 = (v122 - v123) >> 3;
                                  if (v124 > v121)
                                  {
                                    uint64_t v125 = v123 + 8 * v121;
                                    if (v125 != v122 && *(_DWORD *)(v125 + 4) == v90)
                                    {
                                      unint64_t v126 = *(void *)v86;
                                      uint64_t v127 = HIDWORD(*(void *)v86);
                                      unint64_t v128 = *(void *)v86 >> 39;
                                      if (v128 < v101
                                        && (uint64_t v129 = *(void *)(v100 + 8 * v128)) != 0
                                        && (unint64_t v130 = *(unsigned __int16 *)(v129 + 2 * (HIDWORD(v126) & 0x7F)), v106 > v130)
                                        && (uint64_t v131 = v105 + 8 * v130, v131 != v104)
                                        && *(_DWORD *)(v131 + 4) == v127)
                                      {
                                        v132 = (uint64_t *)(v22[10] + 24 * v130);
                                      }
                                      else
                                      {
                                        v132 = (uint64_t *)v22[11];
                                      }
                                      if (v128 < v110
                                        && (uint64_t v133 = *(void *)(v109 + 8 * v128)) != 0
                                        && (unint64_t v134 = *(unsigned __int16 *)(v133 + 2 * (HIDWORD(v126) & 0x7F)), v115 > v134)
                                        && (uint64_t v135 = v114 + 8 * v134, v135 != v113)
                                        && *(_DWORD *)(v135 + 4) == v127)
                                      {
                                        v136 = (uint64_t *)(v23[10] + 24 * v134);
                                      }
                                      else
                                      {
                                        v136 = (uint64_t *)v23[11];
                                      }
                                      if (v128 < v119
                                        && (uint64_t v137 = *(void *)(v118 + 8 * v128)) != 0
                                        && (unint64_t v138 = *(unsigned __int16 *)(v137 + 2 * (HIDWORD(v126) & 0x7F)), v124 > v138)
                                        && (uint64_t v139 = v123 + 8 * v138, v139 != v122)
                                        && *(_DWORD *)(v139 + 4) == v127)
                                      {
                                        uint64_t v89 = (uint64_t *)(v25[10] + 24 * v138);
                                      }
                                      else
                                      {
                                        uint64_t v89 = (uint64_t *)v25[11];
                                      }
                                      md::CollectMapDataLogic<(md::MapDataType)54>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)54> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)54> &,SceneComponents::LayerDataExitingView<(md::MapDataType)54> &)#1}::operator()((uint64_t)&v315, v126, v88, v132, v136, v89);
                                      uint64_t v85 = v312;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v88 += 3;
      v86 += 8;
    }
    while (v86 != v87);
  }
  unint64_t v27 = v311;
  if (v26 == v32) {
    goto LABEL_147;
  }
LABEL_90:
  if (v27 == v32)
  {
LABEL_202:
    uint64_t v315 = v85;
    uint64_t v316 = v313;
    uint64_t v195 = v23[7];
    uint64_t v196 = v23[8];
    if (v195 != v196)
    {
      v197 = (uint64_t *)v23[10];
      do
      {
        unint64_t v199 = *(unsigned int *)(v195 + 4);
        unint64_t v200 = v199 >> 7;
        uint64_t v201 = v20[4];
        if (v199 >> 7 < (v20[5] - v201) >> 3)
        {
          uint64_t v202 = *(void *)(v201 + 8 * v200);
          if (v202)
          {
            uint64_t v203 = v199 & 0x7F;
            unint64_t v204 = *(unsigned __int16 *)(v202 + 2 * v203);
            uint64_t v206 = v20[7];
            uint64_t v205 = v20[8];
            if (v204 < (v205 - v206) >> 3)
            {
              uint64_t v207 = v206 + 8 * v204;
              if (v207 != v205 && *(_DWORD *)(v207 + 4) == v199)
              {
                uint64_t v209 = v21[4];
                unint64_t v210 = (v21[5] - v209) >> 3;
                if (v200 < v210)
                {
                  uint64_t v211 = *(void *)(v209 + 8 * v200);
                  if (v211)
                  {
                    unint64_t v212 = *(unsigned __int16 *)(v211 + 2 * v203);
                    uint64_t v214 = v21[7];
                    uint64_t v213 = v21[8];
                    unint64_t v215 = (v213 - v214) >> 3;
                    if (v215 > v212)
                    {
                      uint64_t v216 = v214 + 8 * v212;
                      if (v216 != v213 && *(_DWORD *)(v216 + 4) == v199)
                      {
                        uint64_t v218 = v22[4];
                        unint64_t v219 = (v22[5] - v218) >> 3;
                        if (v200 < v219)
                        {
                          uint64_t v220 = *(void *)(v218 + 8 * v200);
                          if (v220)
                          {
                            unint64_t v221 = *(unsigned __int16 *)(v220 + 2 * v203);
                            uint64_t v223 = v22[7];
                            uint64_t v222 = v22[8];
                            unint64_t v224 = (v222 - v223) >> 3;
                            if (v224 > v221)
                            {
                              uint64_t v225 = v223 + 8 * v221;
                              if (v225 != v222 && *(_DWORD *)(v225 + 4) == v199)
                              {
                                uint64_t v227 = v25[4];
                                unint64_t v228 = (v25[5] - v227) >> 3;
                                if (v200 < v228)
                                {
                                  uint64_t v229 = *(void *)(v227 + 8 * v200);
                                  if (v229)
                                  {
                                    unint64_t v230 = *(unsigned __int16 *)(v229 + 2 * v203);
                                    uint64_t v232 = v25[7];
                                    uint64_t v231 = v25[8];
                                    unint64_t v233 = (v231 - v232) >> 3;
                                    if (v233 > v230)
                                    {
                                      uint64_t v234 = v232 + 8 * v230;
                                      if (v234 != v231 && *(_DWORD *)(v234 + 4) == v199)
                                      {
                                        unint64_t v235 = *(void *)v195;
                                        uint64_t v236 = HIDWORD(*(void *)v195);
                                        unint64_t v237 = *(void *)v195 >> 39;
                                        if (v237 < v210
                                          && (uint64_t v238 = *(void *)(v209 + 8 * v237)) != 0
                                          && (unint64_t v239 = *(unsigned __int16 *)(v238 + 2 * (HIDWORD(v235) & 0x7F)),
                                              v215 > v239)
                                          && (uint64_t v240 = v214 + 8 * v239, v240 != v213)
                                          && *(_DWORD *)(v240 + 4) == v236)
                                        {
                                          v241 = (uint64_t *)(v21[10] + 24 * v239);
                                        }
                                        else
                                        {
                                          v241 = (uint64_t *)v21[11];
                                        }
                                        if (v237 < v219
                                          && (uint64_t v242 = *(void *)(v218 + 8 * v237)) != 0
                                          && (unint64_t v243 = *(unsigned __int16 *)(v242 + 2 * (HIDWORD(v235) & 0x7F)),
                                              v224 > v243)
                                          && (uint64_t v244 = v223 + 8 * v243, v244 != v222)
                                          && *(_DWORD *)(v244 + 4) == v236)
                                        {
                                          v245 = (uint64_t *)(v22[10] + 24 * v243);
                                        }
                                        else
                                        {
                                          v245 = (uint64_t *)v22[11];
                                        }
                                        if (v237 < v228
                                          && (uint64_t v246 = *(void *)(v227 + 8 * v237)) != 0
                                          && (unint64_t v247 = *(unsigned __int16 *)(v246 + 2 * (HIDWORD(v235) & 0x7F)),
                                              v233 > v247)
                                          && (uint64_t v248 = v232 + 8 * v247, v248 != v231)
                                          && *(_DWORD *)(v248 + 4) == v236)
                                        {
                                          v198 = (uint64_t *)(v25[10] + 24 * v247);
                                        }
                                        else
                                        {
                                          v198 = (uint64_t *)v25[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)54>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)54> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)54> &,SceneComponents::LayerDataExitingView<(md::MapDataType)54> &)#1}::operator()((uint64_t)&v315, v235, v241, v245, v197, v198);
                                        uint64_t v85 = v312;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v197 += 3;
        v195 += 8;
      }
      while (v195 != v196);
    }
  }
LABEL_256:
  if ((void *)v28 == v32)
  {
    uint64_t v315 = v85;
    uint64_t v316 = v313;
    uint64_t v249 = v25[7];
    uint64_t v250 = v25[8];
    if (v249 != v250)
    {
      v251 = (uint64_t *)v25[10];
      do
      {
        unint64_t v253 = *(unsigned int *)(v249 + 4);
        unint64_t v254 = v253 >> 7;
        uint64_t v255 = v20[4];
        if (v253 >> 7 < (v20[5] - v255) >> 3)
        {
          uint64_t v256 = *(void *)(v255 + 8 * v254);
          if (v256)
          {
            uint64_t v257 = v253 & 0x7F;
            unint64_t v258 = *(unsigned __int16 *)(v256 + 2 * v257);
            uint64_t v260 = v20[7];
            uint64_t v259 = v20[8];
            if (v258 < (v259 - v260) >> 3)
            {
              uint64_t v261 = v260 + 8 * v258;
              if (v261 != v259 && *(_DWORD *)(v261 + 4) == v253)
              {
                uint64_t v263 = v21[4];
                unint64_t v264 = (v21[5] - v263) >> 3;
                if (v254 < v264)
                {
                  uint64_t v265 = *(void *)(v263 + 8 * v254);
                  if (v265)
                  {
                    unint64_t v266 = *(unsigned __int16 *)(v265 + 2 * v257);
                    uint64_t v268 = v21[7];
                    uint64_t v267 = v21[8];
                    unint64_t v269 = (v267 - v268) >> 3;
                    if (v269 > v266)
                    {
                      uint64_t v270 = v268 + 8 * v266;
                      if (v270 != v267 && *(_DWORD *)(v270 + 4) == v253)
                      {
                        uint64_t v272 = v22[4];
                        unint64_t v273 = (v22[5] - v272) >> 3;
                        if (v254 < v273)
                        {
                          uint64_t v274 = *(void *)(v272 + 8 * v254);
                          if (v274)
                          {
                            unint64_t v275 = *(unsigned __int16 *)(v274 + 2 * v257);
                            uint64_t v277 = v22[7];
                            uint64_t v276 = v22[8];
                            unint64_t v278 = (v276 - v277) >> 3;
                            if (v278 > v275)
                            {
                              uint64_t v279 = v277 + 8 * v275;
                              if (v279 != v276 && *(_DWORD *)(v279 + 4) == v253)
                              {
                                uint64_t v281 = v23[4];
                                unint64_t v282 = (v23[5] - v281) >> 3;
                                if (v254 < v282)
                                {
                                  uint64_t v283 = *(void *)(v281 + 8 * v254);
                                  if (v283)
                                  {
                                    unint64_t v284 = *(unsigned __int16 *)(v283 + 2 * v257);
                                    uint64_t v286 = v23[7];
                                    uint64_t v285 = v23[8];
                                    unint64_t v287 = (v285 - v286) >> 3;
                                    if (v287 > v284)
                                    {
                                      uint64_t v288 = v286 + 8 * v284;
                                      if (v288 != v285 && *(_DWORD *)(v288 + 4) == v253)
                                      {
                                        unint64_t v289 = *(void *)v249;
                                        uint64_t v290 = HIDWORD(*(void *)v249);
                                        unint64_t v291 = *(void *)v249 >> 39;
                                        if (v291 < v264
                                          && (uint64_t v292 = *(void *)(v263 + 8 * v291)) != 0
                                          && (unint64_t v293 = *(unsigned __int16 *)(v292 + 2 * (HIDWORD(v289) & 0x7F)),
                                              v269 > v293)
                                          && (uint64_t v294 = v268 + 8 * v293, v294 != v267)
                                          && *(_DWORD *)(v294 + 4) == v290)
                                        {
                                          v295 = (uint64_t *)(v21[10] + 24 * v293);
                                        }
                                        else
                                        {
                                          v295 = (uint64_t *)v21[11];
                                        }
                                        if (v291 < v273
                                          && (uint64_t v296 = *(void *)(v272 + 8 * v291)) != 0
                                          && (unint64_t v297 = *(unsigned __int16 *)(v296 + 2 * (HIDWORD(v289) & 0x7F)),
                                              v278 > v297)
                                          && (uint64_t v298 = v277 + 8 * v297, v298 != v276)
                                          && *(_DWORD *)(v298 + 4) == v290)
                                        {
                                          v299 = (uint64_t *)(v22[10] + 24 * v297);
                                        }
                                        else
                                        {
                                          v299 = (uint64_t *)v22[11];
                                        }
                                        if (v291 < v282
                                          && (uint64_t v300 = *(void *)(v281 + 8 * v291)) != 0
                                          && (unint64_t v301 = *(unsigned __int16 *)(v300 + 2 * (HIDWORD(v289) & 0x7F)),
                                              v287 > v301)
                                          && (uint64_t v302 = v286 + 8 * v301, v302 != v285)
                                          && *(_DWORD *)(v302 + 4) == v290)
                                        {
                                          v252 = (uint64_t *)(v23[10] + 24 * v301);
                                        }
                                        else
                                        {
                                          v252 = (uint64_t *)v23[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)54>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)54> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)54> &,SceneComponents::LayerDataExitingView<(md::MapDataType)54> &)#1}::operator()((uint64_t)&v315, v289, v295, v299, v252, v251);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v251 += 3;
        v249 += 8;
      }
      while (v249 != v250);
    }
  }
}

void sub_1A1FEE238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*v17);
  std::__split_buffer<SceneComponents::LayerDataPreviousInView<(md::MapDataType)33>>::~__split_buffer((uint64_t)va);
  std::__tree<gdc::LayerDataWithWorld>::destroy(a14);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)54>>(int8x8_t *a1)
{
  unint64_t v10 = 0xF1B4156C6107AD92;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xF1B4156C6107AD92;
    if (*(void *)&v1 <= 0xF1B4156C6107AD92) {
      unint64_t v3 = 0xF1B4156C6107AD92 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xF1B4156C6107AD92;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xF1B4156C6107AD92)
      {
        if (v5[2] == 0xF1B4156C6107AD92) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xF1B4156C6107AD92) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xF1B4156C6107AD92) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1FEE568(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)54>>(int8x8_t *a1)
{
  uint64_t v10 = 0x1658AB057F40C6F2;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x1658AB057F40C6F2;
    if (*(void *)&v1 <= 0x1658AB057F40C6F2uLL) {
      uint64_t v3 = 0x1658AB057F40C6F2uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x1658AB057F40C6F2;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x1658AB057F40C6F2)
      {
        if (v5[2] == 0x1658AB057F40C6F2) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x1658AB057F40C6F2) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x1658AB057F40C6F2) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1FEE7D8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)54>>(int8x8_t *a1)
{
  uint64_t v10 = 0x66049177CDB7058DLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x66049177CDB7058DLL;
    if (*(void *)&v1 <= 0x66049177CDB7058DuLL) {
      uint64_t v3 = 0x66049177CDB7058DuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x66049177CDB7058DLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x66049177CDB7058DLL)
      {
        if (v5[2] == 0x66049177CDB7058DLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x66049177CDB7058DLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x66049177CDB7058DLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1FEEA48(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)54>>(int8x8_t *a1)
{
  uint64_t v10 = 0x641EA51881CC6BFLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x641EA51881CC6BFLL;
    if (*(void *)&v1 <= 0x641EA51881CC6BFuLL) {
      uint64_t v3 = 0x641EA51881CC6BFuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x641EA51881CC6BFLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x641EA51881CC6BFLL)
      {
        if (v5[2] == 0x641EA51881CC6BFLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x641EA51881CC6BFLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x641EA51881CC6BFLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1FEECB8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::CollectMapDataLogic<(md::MapDataType)54>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)54> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)54> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)54> &,SceneComponents::LayerDataExitingView<(md::MapDataType)54> &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v8 = a4;
  uint64_t v9 = (uint64_t)a3;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  uint64_t v15 = (void **)(a3 + 1);
  uint64_t v14 = a3[1];
  uint64_t v16 = a4 + 1;
  uint64_t v17 = a3[2];
  *(_OWORD *)(a3 + 1) = *(_OWORD *)(a4 + 1);
  a4[1] = v14;
  a4[2] = v17;
  if (a3[2]) {
    uint64_t v18 = (uint64_t *)(a3[1] + 16);
  }
  else {
    uint64_t v18 = a3;
  }
  *uint64_t v18 = (uint64_t)v15;
  unint64_t v19 = (void *)(*v16 + 16);
  if (!v17) {
    unint64_t v19 = a4;
  }
  *unint64_t v19 = v16;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*v15);
  *(void *)uint64_t v9 = v15;
  *(void *)(v9 + 16) = 0;
  void *v15 = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy((void *)a5[1]);
  *a5 = (uint64_t)(a5 + 1);
  a5[2] = 0;
  a5[1] = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy((void *)a6[1]);
  *a6 = (uint64_t)(a6 + 1);
  a6[2] = 0;
  a6[1] = 0;
  unint64_t v20 = **(void **)a1;
  {
LABEL_152:
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
    }
  }
  uint64_t v21 = *(_WORD **)(v20 + 48);
  BOOL v22 = *(_WORD **)(v20 + 56);
  unint64_t v23 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v21 != v22)
  {
    uint64_t v24 = *(_WORD **)(v20 + 48);
    while (*v24 != 54)
    {
      v24 += 16;
      if (v24 == v22) {
        goto LABEL_18;
      }
    }
    if (v24 == v22)
    {
      unint64_t v23 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v21 != 54)
      {
        v21 += 16;
        if (v21 == v22)
        {
          uint64_t v21 = *(_WORD **)(v20 + 56);
          break;
        }
      }
      unint64_t v23 = (uint64_t *)(v21 + 4);
    }
  }
LABEL_18:
  std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>((uint64_t *)v9, (void *)*v23, v23 + 1);
  unint64_t v20 = *(void *)v9;
  double v25 = (uint64_t *)*v8;
  uint64_t v26 = (uint64_t *)*a5;
  *(void *)&long long v93 = a5;
  *((void *)&v93 + 1) = v26;
  while ((void **)v20 != v15)
  {
    if (v25 == v16)
    {
      long long v95 = v93;
      do
      {
        std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((void **)&v95, v20 + 32);
        unint64_t v43 = *(void **)(v20 + 8);
        if (v43)
        {
          do
          {
            uint64_t v44 = v43;
            unint64_t v43 = (void *)*v43;
          }
          while (v43);
        }
        else
        {
          do
          {
            uint64_t v44 = *(void **)(v20 + 16);
            BOOL v40 = *v44 == v20;
            unint64_t v20 = (unint64_t)v44;
          }
          while (!v40);
        }
        unint64_t v20 = (unint64_t)v44;
      }
      while (v44 != v15);
      break;
    }
    unint64_t v27 = *(void *)(v20 + 32);
    int v28 = *(unsigned __int8 *)(v20 + 48);
    int v29 = (char)v28;
    int v30 = *((unsigned __int8 *)v25 + 48);
    unint64_t v31 = v25[4];
    if (v28 == v30) {
      BOOL v32 = v27 < v31;
    }
    else {
      BOOL v32 = (char)v28 < (char)v30;
    }
    if (v32)
    {
      std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((void **)&v93, v20 + 32);
      size_t v33 = *(void **)(v20 + 8);
      if (v33)
      {
        do
        {
          unint64_t v20 = (unint64_t)v33;
          size_t v33 = (void *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          unint64_t v34 = v20;
          unint64_t v20 = *(void *)(v20 + 16);
        }
        while (*(void *)v20 != v34);
      }
    }
    else
    {
      BOOL v35 = v31 < v27;
      if (v29 != (char)v30) {
        BOOL v35 = (char)v30 < v29;
      }
      if (v35)
      {
        uint64_t v36 = (uint64_t *)v25[1];
        if (v36)
        {
          do
          {
            double v25 = v36;
            uint64_t v36 = (uint64_t *)*v36;
          }
          while (v36);
        }
        else
        {
          do
          {
            unint64_t v37 = v25;
            double v25 = (uint64_t *)v25[2];
          }
          while ((uint64_t *)*v25 != v37);
        }
      }
      else
      {
        uint64_t v38 = *(void **)(v20 + 8);
        if (v38)
        {
          do
          {
            uint64_t v39 = v38;
            uint64_t v38 = (void *)*v38;
          }
          while (v38);
        }
        else
        {
          do
          {
            uint64_t v39 = *(void **)(v20 + 16);
            BOOL v40 = *v39 == v20;
            unint64_t v20 = (unint64_t)v39;
          }
          while (!v40);
        }
        uint64_t v41 = (uint64_t *)v25[1];
        if (v41)
        {
          do
          {
            double v25 = v41;
            uint64_t v41 = (uint64_t *)*v41;
          }
          while (v41);
        }
        else
        {
          do
          {
            uint64_t v42 = v25;
            double v25 = (uint64_t *)v25[2];
          }
          while ((uint64_t *)*v25 != v42);
        }
        unint64_t v20 = (unint64_t)v39;
      }
    }
  }
  uint64_t v8 = (uint64_t *)*v8;
  uint64_t v45 = *(void *)v9;
  uint64_t v46 = (uint64_t *)*a6;
  *(void *)&long long v93 = a6;
  *((void *)&v93 + 1) = v46;
  while (v8 != v16)
  {
    if ((void **)v45 == v15)
    {
      long long v95 = v93;
      do
      {
        std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((void **)&v95, (uint64_t)(v8 + 4));
        uint64_t v62 = (uint64_t *)v8[1];
        if (v62)
        {
          do
          {
            unint64_t v63 = v62;
            uint64_t v62 = (uint64_t *)*v62;
          }
          while (v62);
        }
        else
        {
          do
          {
            unint64_t v63 = (uint64_t *)v8[2];
            BOOL v40 = *v63 == (void)v8;
            uint64_t v8 = v63;
          }
          while (!v40);
        }
        uint64_t v8 = v63;
      }
      while (v63 != v16);
      break;
    }
    unint64_t v47 = v8[4];
    int v48 = *((unsigned __int8 *)v8 + 48);
    int v49 = (char)v48;
    int v50 = *(unsigned __int8 *)(v45 + 48);
    unint64_t v51 = *(void *)(v45 + 32);
    if (v48 == v50) {
      BOOL v52 = v47 < v51;
    }
    else {
      BOOL v52 = (char)v48 < (char)v50;
    }
    if (v52)
    {
      std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((void **)&v93, (uint64_t)(v8 + 4));
      uint64_t v53 = (uint64_t *)v8[1];
      if (v53)
      {
        do
        {
          uint64_t v8 = v53;
          uint64_t v53 = (uint64_t *)*v53;
        }
        while (v53);
      }
      else
      {
        do
        {
          unint64_t v54 = v8;
          uint64_t v8 = (uint64_t *)v8[2];
        }
        while ((uint64_t *)*v8 != v54);
      }
    }
    else
    {
      BOOL v55 = v51 < v47;
      if (v49 != (char)v50) {
        BOOL v55 = (char)v50 < v49;
      }
      if (v55)
      {
        unint64_t v56 = *(void **)(v45 + 8);
        if (v56)
        {
          do
          {
            uint64_t v45 = (uint64_t)v56;
            unint64_t v56 = (void *)*v56;
          }
          while (v56);
        }
        else
        {
          do
          {
            uint64_t v57 = v45;
            uint64_t v45 = *(void *)(v45 + 16);
          }
          while (*(void *)v45 != v57);
        }
      }
      else
      {
        unint64_t v58 = (uint64_t *)v8[1];
        if (v58)
        {
          do
          {
            uint64_t v59 = v58;
            unint64_t v58 = (uint64_t *)*v58;
          }
          while (v58);
        }
        else
        {
          do
          {
            uint64_t v59 = (uint64_t *)v8[2];
            BOOL v40 = *v59 == (void)v8;
            uint64_t v8 = v59;
          }
          while (!v40);
        }
        uint64_t v60 = *(void **)(v45 + 8);
        if (v60)
        {
          do
          {
            uint64_t v45 = (uint64_t)v60;
            uint64_t v60 = (void *)*v60;
          }
          while (v60);
        }
        else
        {
          do
          {
            uint64_t v61 = v45;
            uint64_t v45 = *(void *)(v45 + 16);
          }
          while (*(void *)v45 != v61);
        }
        uint64_t v8 = v59;
      }
    }
  }
  if (!a5[2]) {
    goto LABEL_122;
  }
  uint64_t v64 = (void *)gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)54>>(*(int8x8_t **)(v12 + 128));
  uint64_t v94 = a2;
  unint64_t v65 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v64 + 4, (uint64_t)&v94);
  if (v66)
  {
    unint64_t v20 = v64[11];
    unint64_t v68 = v64[12];
    if (v20 >= v68)
    {
      uint64_t v70 = (char *)v64[10];
      uint64_t v16 = (uint64_t *)(v20 - (void)v70);
      uint64_t v71 = v20 - (void)v70 + 1;
      if (v71 < 0) {
        goto LABEL_154;
      }
      unint64_t v72 = v68 - (void)v70;
      if (2 * v72 > v71) {
        uint64_t v71 = 2 * v72;
      }
      if (v72 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v73 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v73 = v71;
      }
      if (v73) {
        uint64_t v74 = (char *)operator new(v73);
      }
      else {
        uint64_t v74 = 0;
      }
      uint64_t v75 = &v74[v73];
      uint64_t v69 = (uint64_t)v16 + (void)v74 + 1;
      uint64_t v76 = &v70[-v20];
      if (v70 == (char *)v20) {
        uint64_t v76 = 0;
      }
      v64[10] = (char *)v16 + (void)v74 + (unint64_t)v76;
      v64[11] = v69;
      v64[12] = v75;
      if (v70) {
        operator delete(v70);
      }
    }
    else
    {
      uint64_t v69 = v20 + 1;
    }
    v64[11] = v69;
    uint64_t v9 = v64[31];
    goto LABEL_118;
  }
  uint64_t v9 = v64[31];
  if (v64[10] + (((uint64_t)v65 - v64[7]) >> 3) == v64[11])
  {
LABEL_118:
    uint64_t v8 = &v94;
    a5 = (uint64_t *)v64[22];
    if (a5)
    {
      unint64_t v20 = 1;
      while (1)
      {
        *(void *)&long long v95 = &v94;
        *((void *)&v95 + 1) = 1;
        *(void *)&long long v93 = v9;
        uint64_t v77 = a5[6];
        if (!v77) {
          goto LABEL_151;
        }
        (*(void (**)(uint64_t, long long *, long long *))(*(void *)v77 + 48))(v77, &v93, &v95);
        a5 = (uint64_t *)*a5;
        if (!a5) {
          goto LABEL_122;
        }
      }
    }
    goto LABEL_122;
  }
  a5 = (uint64_t *)v64[16];
  if (a5)
  {
    uint64_t v8 = &v94;
    unint64_t v20 = 1;
    do
    {
      *(void *)&long long v95 = &v94;
      *((void *)&v95 + 1) = 1;
      *(void *)&long long v93 = v9;
      uint64_t v67 = a5[6];
      if (!v67) {
        goto LABEL_151;
      }
      (*(void (**)(uint64_t, long long *, long long *))(*(void *)v67 + 48))(v67, &v93, &v95);
      a5 = (uint64_t *)*a5;
    }
    while (a5);
  }
LABEL_122:
  if (!a6[2]) {
    return;
  }
  unint64_t v78 = (void *)gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)54>>(*(int8x8_t **)(v12 + 128));
  uint64_t v94 = a2;
  uint64_t v79 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v78 + 4, (uint64_t)&v94);
  if (v80)
  {
    unint64_t v83 = (unsigned char *)v78[11];
    unint64_t v82 = v78[12];
    if ((unint64_t)v83 < v82)
    {
      uint64_t v84 = (uint64_t)(v83 + 1);
LABEL_145:
      v78[11] = v84;
      a2 = v78[31];
      goto LABEL_146;
    }
    uint64_t v85 = (char *)v78[10];
    uint64_t v8 = (uint64_t *)(v83 - v85);
    uint64_t v86 = v83 - v85 + 1;
    if (v86 >= 0)
    {
      unint64_t v87 = v82 - (void)v85;
      if (2 * v87 > v86) {
        uint64_t v86 = 2 * v87;
      }
      if (v87 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v88 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v88 = v86;
      }
      if (v88) {
        uint64_t v89 = (char *)operator new(v88);
      }
      else {
        uint64_t v89 = 0;
      }
      unint64_t v90 = &v89[v88];
      uint64_t v84 = (uint64_t)v8 + (void)v89 + 1;
      unint64_t v91 = (char *)(v85 - v83);
      if (v85 == v83) {
        unint64_t v91 = 0;
      }
      v78[10] = (char *)v8 + (void)v89 + (unint64_t)v91;
      v78[11] = v84;
      v78[12] = v90;
      if (v85) {
        operator delete(v85);
      }
      goto LABEL_145;
    }
LABEL_154:
    abort();
  }
  a2 = v78[31];
  if (v78[10] + (((uint64_t)v79 - v78[7]) >> 3) != v78[11])
  {
    a6 = (uint64_t *)v78[16];
    if (a6)
    {
      a5 = &v94;
      uint64_t v9 = 1;
      while (1)
      {
        *(void *)&long long v95 = &v94;
        *((void *)&v95 + 1) = 1;
        *(void *)&long long v93 = a2;
        uint64_t v81 = a6[6];
        if (!v81) {
          break;
        }
        (*(void (**)(uint64_t, long long *, long long *))(*(void *)v81 + 48))(v81, &v93, &v95);
        a6 = (uint64_t *)*a6;
        if (!a6) {
          return;
        }
      }
LABEL_151:
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_152;
    }
    return;
  }
LABEL_146:
  a5 = &v94;
  a6 = (uint64_t *)v78[22];
  if (a6)
  {
    uint64_t v9 = 1;
    while (1)
    {
      *(void *)&long long v95 = &v94;
      *((void *)&v95 + 1) = 1;
      *(void *)&long long v93 = a2;
      uint64_t v92 = a6[6];
      if (!v92) {
        break;
      }
      (*(void (**)(uint64_t, long long *, long long *))(*(void *)v92 + 48))(v92, &v93, &v95);
      a6 = (uint64_t *)*a6;
      if (!a6) {
        return;
      }
    }
    goto LABEL_151;
  }
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)54>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)54>>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(void **)(v15 - 24), (void *)(v15 - 16));
    uint64_t v15 = a1[11];
  }
  uint64_t v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(v15 - 16));
  a1[11] = v16;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)54>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)54>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)54>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)54>>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(void **)(v15 - 24), (void *)(v15 - 16));
    uint64_t v15 = a1[11];
  }
  uint64_t v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(v15 - 16));
  a1[11] = v16;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)54>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)54>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)54>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)54>>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_WORD *)(v14 + 2 * v7) = *(_WORD *)(v15 - 2);
  a1[11] = v15 - 2;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)54>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)54>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)54>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)54>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)54>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)54>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)54>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)54>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)54>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)54>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)54>,md::CollectMapDataContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)54>,md::CollectMapDataContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) != 0x5B0BFF71B88387C7 || !*(void *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  uint64_t v4 = *(void **)(a2 + 8);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_27;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v5 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v7 = 0x99BED48DEFBBD82BLL % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_27;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_27;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_25;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_27;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_27;
    }
LABEL_14:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_27;
    }
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_14;
  }
LABEL_25:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v14 = *(void *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v14 = 0;
LABEL_28:
  uint64_t v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 160))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)54>,md::CollectMapDataContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x5B0BFF71B88387C7 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)54>,md::CollectMapDataContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x5B0BFF71B88387C7 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 144))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)54>,md::CollectMapDataContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x5B0BFF71B88387C7 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 136))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)54>,md::CollectMapDataContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x5B0BFF71B88387C7 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 128))(result);
}

void md::Logic<md::CollectMapDataLogic<(md::MapDataType)54>,md::CollectMapDataContext<(md::MapDataType)54>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A1FF0590(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t gdc::ObjectHolder<md::CollectMapDataContext<(md::MapDataType)54>>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::CollectMapDataContext<(md::MapDataType)54>>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF514858;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0xC400A2AC0F1);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::CollectMapDataContext<(md::MapDataType)54>>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF514858;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0xC400A2AC0F1);
  }
  return a1;
}

uint64_t md::CollectMapDataLogic<(md::MapDataType)54>::didBecomeInactive(uint64_t result)
{
  uint64_t v1 = result;
  if (*(_WORD *)(result + 120) || *(_WORD *)(result + 122) || *(_DWORD *)(result + 124) != -1)
  {
    __n128 result = gdc::Registry::destroy(*(void *)(result + 128), *(void *)(result + 120));
    *(void *)(v1 + 120) = 0xFFFFFFFF00000000;
  }
  return result;
}

void md::CollectMapDataLogic<(md::MapDataType)54>::~CollectMapDataLogic(uint64_t a1)
{
  *(void *)a1 = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 80));
  JUMPOUT(0x1A6239270);
}

uint64_t md::CollectMapDataLogic<(md::MapDataType)54>::~CollectMapDataLogic(uint64_t a1)
{
  *(void *)a1 = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 80));
  return a1;
}

void md::Logic<md::CollectMapDataLogic<(md::MapDataType)62>,md::CollectMapDataContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint8x8_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint8x8_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void md::CollectMapDataLogic<(md::MapDataType)62>::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint8x8_t v5 = (void *)gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)62>>(*(int8x8_t **)(a1 + 128));
  unint64_t v6 = v5;
  if (v5[29])
  {
    char v7 = (void *)v5[28];
    if (v7)
    {
      uint64_t v8 = v5[31];
      uint64_t v9 = v5[7];
      uint64_t v10 = (v5[8] - v9) >> 3;
      do
      {
        uint64_t v315 = v9;
        uint64_t v316 = v10;
        uint64_t v314 = v8;
        uint64_t v11 = v7[6];
        if (!v11) {
          goto LABEL_312;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48))(v11, &v314, &v315);
        char v7 = (void *)*v7;
      }
      while (v7);
    }
  }
  v6[8] = v6[7];
  v6[11] = v6[10];
  uint64_t v12 = (void *)gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)62>>(*(int8x8_t **)(a1 + 128));
  uint64_t v13 = v12;
  if (v12[29])
  {
    uint64_t v14 = (void *)v12[28];
    if (v14)
    {
      uint64_t v15 = v12[31];
      uint64_t v16 = v12[7];
      uint64_t v17 = (v12[8] - v16) >> 3;
      while (1)
      {
        uint64_t v315 = v16;
        uint64_t v316 = v17;
        uint64_t v314 = v15;
        uint64_t v18 = v14[6];
        if (!v18) {
          break;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v314, &v315);
        uint64_t v14 = (void *)*v14;
        if (!v14) {
          goto LABEL_11;
        }
      }
LABEL_312:
      std::__throw_bad_function_call[abi:nn180100]();
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
      return;
    }
  }
LABEL_11:
  v13[8] = v13[7];
  v13[11] = v13[10];
  uint64_t v312 = *a3;
  unint64_t v19 = *(int8x8_t **)(a1 + 128);
  if (!*(_WORD *)(a1 + 120) && !*(_WORD *)(a1 + 122) && *(_DWORD *)(a1 + 124) == -1) {
    gdc::Registry::create(*(gdc::Registry **)(a1 + 128));
  }
  uint64_t v313 = a1;
  uint64_t v20 = (void *)gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)62>>(v19);
  uint64_t v21 = (void *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)62>>(v19);
  BOOL v22 = (void *)gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)62>>(v19);
  unint64_t v23 = (void *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)62>>(v19);
  uint64_t v24 = gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)62>>(v19);
  double v25 = (void *)v24;
  uint64_t v26 = v22 + 4;
  unint64_t v27 = v23 + 4;
  uint64_t v28 = v24 + 32;
  uint64_t v30 = v20[7];
  uint64_t v29 = v20[8];
  if (v21[8] - v21[7] >= (unint64_t)(v29 - v30)) {
    unint64_t v31 = v20 + 4;
  }
  else {
    unint64_t v31 = v21 + 4;
  }
  if (v22[8] - v22[7] < v31[4] - v31[3]) {
    unint64_t v31 = v22 + 4;
  }
  if (v23[8] - v23[7] < v31[4] - v31[3]) {
    unint64_t v31 = v23 + 4;
  }
  if (*(void *)(v24 + 64) - *(void *)(v24 + 56) >= v31[4] - v31[3]) {
    BOOL v32 = v31;
  }
  else {
    BOOL v32 = (void *)(v24 + 32);
  }
  if (v20 + 4 == v32)
  {
    uint64_t v309 = v24 + 32;
    uint64_t v315 = v312;
    uint64_t v316 = v313;
    while (v30 != v29)
    {
      unint64_t v34 = *(unsigned int *)(v30 + 4);
      unint64_t v35 = v34 >> 7;
      uint64_t v36 = v21[4];
      unint64_t v37 = (v21[5] - v36) >> 3;
      if (v34 >> 7 < v37)
      {
        uint64_t v38 = *(void *)(v36 + 8 * v35);
        if (v38)
        {
          uint64_t v39 = v34 & 0x7F;
          unint64_t v40 = *(unsigned __int16 *)(v38 + 2 * v39);
          uint64_t v41 = v21[7];
          uint64_t v42 = v21[8];
          unint64_t v43 = (v42 - v41) >> 3;
          if (v43 > v40)
          {
            uint64_t v44 = v41 + 8 * v40;
            if (v44 != v42 && *(_DWORD *)(v44 + 4) == v34)
            {
              uint64_t v46 = v22[4];
              unint64_t v47 = (v22[5] - v46) >> 3;
              if (v35 < v47)
              {
                uint64_t v48 = *(void *)(v46 + 8 * v35);
                if (v48)
                {
                  unint64_t v49 = *(unsigned __int16 *)(v48 + 2 * v39);
                  uint64_t v51 = v22[7];
                  uint64_t v50 = v22[8];
                  unint64_t v52 = (v50 - v51) >> 3;
                  if (v52 > v49)
                  {
                    uint64_t v53 = v51 + 8 * v49;
                    if (v53 != v50 && *(_DWORD *)(v53 + 4) == v34)
                    {
                      uint64_t v55 = v23[4];
                      unint64_t v56 = (v23[5] - v55) >> 3;
                      if (v35 < v56)
                      {
                        uint64_t v57 = *(void *)(v55 + 8 * v35);
                        if (v57)
                        {
                          unint64_t v58 = *(unsigned __int16 *)(v57 + 2 * v39);
                          uint64_t v59 = v23[7];
                          v310 = v27;
                          uint64_t v308 = v23[8];
                          unint64_t v307 = (v308 - v59) >> 3;
                          if (v307 > v58)
                          {
                            uint64_t v60 = v59 + 8 * v58;
                            if (v60 != v308 && *(_DWORD *)(v60 + 4) == v34)
                            {
                              uint64_t v306 = v25[4];
                              unint64_t v305 = (v25[5] - v306) >> 3;
                              if (v35 < v305)
                              {
                                uint64_t v62 = *(void *)(v306 + 8 * v35);
                                if (v62)
                                {
                                  unint64_t v63 = *(unsigned __int16 *)(v62 + 2 * v39);
                                  uint64_t v303 = v25[7];
                                  uint64_t v304 = v25[8];
                                  if ((v304 - v303) >> 3 > v63)
                                  {
                                    uint64_t v64 = v303 + 8 * v63;
                                    if (v64 != v304 && *(_DWORD *)(v64 + 4) == v34)
                                    {
                                      unint64_t v65 = *(void *)v30;
                                      uint64_t v66 = HIDWORD(*(void *)v30);
                                      unint64_t v67 = *(void *)v30 >> 39;
                                      if (v67 < v37
                                        && (uint64_t v68 = *(void *)(v36 + 8 * v67)) != 0
                                        && (unint64_t v69 = *(unsigned __int16 *)(v68 + 2 * (HIDWORD(v65) & 0x7F)), v43 > v69)
                                        && (uint64_t v70 = v41 + 8 * v69, v70 != v42)
                                        && *(_DWORD *)(v70 + 4) == v66)
                                      {
                                        uint64_t v71 = (uint64_t *)(v21[10] + 24 * v69);
                                      }
                                      else
                                      {
                                        uint64_t v71 = (uint64_t *)v21[11];
                                      }
                                      if (v67 < v47
                                        && (uint64_t v72 = *(void *)(v46 + 8 * v67)) != 0
                                        && (unint64_t v73 = *(unsigned __int16 *)(v72 + 2 * (HIDWORD(v65) & 0x7F)), v52 > v73)
                                        && (uint64_t v74 = v51 + 8 * v73, v74 != v50)
                                        && *(_DWORD *)(v74 + 4) == v66)
                                      {
                                        uint64_t v75 = (uint64_t *)(v22[10] + 24 * v73);
                                      }
                                      else
                                      {
                                        uint64_t v75 = (uint64_t *)v22[11];
                                      }
                                      uint64_t v76 = HIDWORD(*(void *)v30);
                                      if (v67 < v56
                                        && (uint64_t v77 = *(void *)(v55 + 8 * v67)) != 0
                                        && (unint64_t v78 = *(unsigned __int16 *)(v77 + 2 * (HIDWORD(v65) & 0x7F)), v307 > v78)
                                        && (uint64_t v79 = v59 + 8 * v78, v79 != v308)
                                        && *(_DWORD *)(v79 + 4) == v76)
                                      {
                                        unint64_t v80 = (v304 - v303) >> 3;
                                        uint64_t v81 = (uint64_t *)(v23[10] + 24 * v78);
                                      }
                                      else
                                      {
                                        unint64_t v80 = (v304 - v303) >> 3;
                                        uint64_t v81 = (uint64_t *)v23[11];
                                      }
                                      if (v67 < v305
                                        && (uint64_t v82 = *(void *)(v306 + 8 * v67)) != 0
                                        && (unint64_t v83 = *(unsigned __int16 *)(v82 + 2 * (HIDWORD(v65) & 0x7F)), v80 > v83)
                                        && (uint64_t v84 = v303 + 8 * v83, v84 != v304)
                                        && *(_DWORD *)(v84 + 4) == v76)
                                      {
                                        size_t v33 = (uint64_t *)(v25[10] + 24 * v83);
                                      }
                                      else
                                      {
                                        size_t v33 = (uint64_t *)v25[11];
                                      }
                                      md::CollectMapDataLogic<(md::MapDataType)62>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)62> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)62> &,SceneComponents::LayerDataExitingView<(md::MapDataType)62> &)#1}::operator()((uint64_t)&v315, v65, v71, v75, v81, v33);
                                      unint64_t v27 = v310;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v30 += 8;
    }
    uint64_t v28 = v309;
  }
  uint64_t v85 = v312;
  if (v21 + 4 != v32)
  {
    if (v26 != v32) {
      goto LABEL_90;
    }
LABEL_147:
    v140 = v27;
    uint64_t v315 = v85;
    uint64_t v316 = v313;
    uint64_t v141 = v22[7];
    uint64_t v142 = v22[8];
    if (v141 != v142)
    {
      v143 = (uint64_t *)v22[10];
      do
      {
        unint64_t v145 = *(unsigned int *)(v141 + 4);
        unint64_t v146 = v145 >> 7;
        uint64_t v147 = v20[4];
        if (v145 >> 7 < (v20[5] - v147) >> 3)
        {
          uint64_t v148 = *(void *)(v147 + 8 * v146);
          if (v148)
          {
            uint64_t v149 = v145 & 0x7F;
            unint64_t v150 = *(unsigned __int16 *)(v148 + 2 * v149);
            uint64_t v152 = v20[7];
            uint64_t v151 = v20[8];
            if (v150 < (v151 - v152) >> 3)
            {
              uint64_t v153 = v152 + 8 * v150;
              if (v153 != v151 && *(_DWORD *)(v153 + 4) == v145)
              {
                uint64_t v155 = v21[4];
                unint64_t v156 = (v21[5] - v155) >> 3;
                if (v146 < v156)
                {
                  uint64_t v157 = *(void *)(v155 + 8 * v146);
                  if (v157)
                  {
                    unint64_t v158 = *(unsigned __int16 *)(v157 + 2 * v149);
                    uint64_t v160 = v21[7];
                    uint64_t v159 = v21[8];
                    unint64_t v161 = (v159 - v160) >> 3;
                    if (v161 > v158)
                    {
                      uint64_t v162 = v160 + 8 * v158;
                      if (v162 != v159 && *(_DWORD *)(v162 + 4) == v145)
                      {
                        uint64_t v164 = v23[4];
                        unint64_t v165 = (v23[5] - v164) >> 3;
                        if (v146 < v165)
                        {
                          uint64_t v166 = *(void *)(v164 + 8 * v146);
                          if (v166)
                          {
                            unint64_t v167 = *(unsigned __int16 *)(v166 + 2 * v149);
                            uint64_t v169 = v23[7];
                            uint64_t v168 = v23[8];
                            unint64_t v170 = (v168 - v169) >> 3;
                            if (v170 > v167)
                            {
                              uint64_t v171 = v169 + 8 * v167;
                              if (v171 != v168 && *(_DWORD *)(v171 + 4) == v145)
                              {
                                uint64_t v173 = v25[4];
                                unint64_t v174 = (v25[5] - v173) >> 3;
                                if (v146 < v174)
                                {
                                  uint64_t v175 = *(void *)(v173 + 8 * v146);
                                  if (v175)
                                  {
                                    unint64_t v176 = *(unsigned __int16 *)(v175 + 2 * v149);
                                    uint64_t v178 = v25[7];
                                    uint64_t v177 = v25[8];
                                    unint64_t v179 = (v177 - v178) >> 3;
                                    if (v179 > v176)
                                    {
                                      uint64_t v180 = v178 + 8 * v176;
                                      if (v180 != v177 && *(_DWORD *)(v180 + 4) == v145)
                                      {
                                        unint64_t v181 = *(void *)v141;
                                        uint64_t v182 = HIDWORD(*(void *)v141);
                                        unint64_t v183 = *(void *)v141 >> 39;
                                        if (v183 < v156
                                          && (uint64_t v184 = *(void *)(v155 + 8 * v183)) != 0
                                          && (unint64_t v185 = *(unsigned __int16 *)(v184 + 2 * (HIDWORD(v181) & 0x7F)),
                                              v161 > v185)
                                          && (uint64_t v186 = v160 + 8 * v185, v186 != v159)
                                          && *(_DWORD *)(v186 + 4) == v182)
                                        {
                                          v187 = (uint64_t *)(v21[10] + 24 * v185);
                                        }
                                        else
                                        {
                                          v187 = (uint64_t *)v21[11];
                                        }
                                        if (v183 < v165
                                          && (uint64_t v188 = *(void *)(v164 + 8 * v183)) != 0
                                          && (unint64_t v189 = *(unsigned __int16 *)(v188 + 2 * (HIDWORD(v181) & 0x7F)),
                                              v170 > v189)
                                          && (uint64_t v190 = v169 + 8 * v189, v190 != v168)
                                          && *(_DWORD *)(v190 + 4) == v182)
                                        {
                                          v191 = (uint64_t *)(v23[10] + 24 * v189);
                                        }
                                        else
                                        {
                                          v191 = (uint64_t *)v23[11];
                                        }
                                        if (v183 < v174
                                          && (uint64_t v192 = *(void *)(v173 + 8 * v183)) != 0
                                          && (unint64_t v193 = *(unsigned __int16 *)(v192 + 2 * (HIDWORD(v181) & 0x7F)),
                                              v179 > v193)
                                          && (uint64_t v194 = v178 + 8 * v193, v194 != v177)
                                          && *(_DWORD *)(v194 + 4) == v182)
                                        {
                                          v144 = (uint64_t *)(v25[10] + 24 * v193);
                                        }
                                        else
                                        {
                                          v144 = (uint64_t *)v25[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)62>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)62> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)62> &,SceneComponents::LayerDataExitingView<(md::MapDataType)62> &)#1}::operator()((uint64_t)&v315, v181, v187, v143, v191, v144);
                                        uint64_t v85 = v312;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v143 += 3;
        v141 += 8;
      }
      while (v141 != v142);
    }
    if (v140 != v32) {
      goto LABEL_256;
    }
    goto LABEL_202;
  }
  v311 = v27;
  uint64_t v315 = v312;
  uint64_t v316 = v313;
  uint64_t v86 = v21[7];
  uint64_t v87 = v21[8];
  if (v86 != v87)
  {
    size_t v88 = (uint64_t *)v21[10];
    do
    {
      unint64_t v90 = *(unsigned int *)(v86 + 4);
      unint64_t v91 = v90 >> 7;
      uint64_t v92 = v20[4];
      if (v90 >> 7 < (v20[5] - v92) >> 3)
      {
        uint64_t v93 = *(void *)(v92 + 8 * v91);
        if (v93)
        {
          uint64_t v94 = v90 & 0x7F;
          unint64_t v95 = *(unsigned __int16 *)(v93 + 2 * v94);
          uint64_t v97 = v20[7];
          uint64_t v96 = v20[8];
          if (v95 < (v96 - v97) >> 3)
          {
            uint64_t v98 = v97 + 8 * v95;
            if (v98 != v96 && *(_DWORD *)(v98 + 4) == v90)
            {
              uint64_t v100 = v22[4];
              unint64_t v101 = (v22[5] - v100) >> 3;
              if (v91 < v101)
              {
                uint64_t v102 = *(void *)(v100 + 8 * v91);
                if (v102)
                {
                  unint64_t v103 = *(unsigned __int16 *)(v102 + 2 * v94);
                  uint64_t v105 = v22[7];
                  uint64_t v104 = v22[8];
                  unint64_t v106 = (v104 - v105) >> 3;
                  if (v106 > v103)
                  {
                    uint64_t v107 = v105 + 8 * v103;
                    if (v107 != v104 && *(_DWORD *)(v107 + 4) == v90)
                    {
                      uint64_t v109 = v23[4];
                      unint64_t v110 = (v23[5] - v109) >> 3;
                      if (v91 < v110)
                      {
                        uint64_t v111 = *(void *)(v109 + 8 * v91);
                        if (v111)
                        {
                          unint64_t v112 = *(unsigned __int16 *)(v111 + 2 * v94);
                          uint64_t v114 = v23[7];
                          uint64_t v113 = v23[8];
                          unint64_t v115 = (v113 - v114) >> 3;
                          if (v115 > v112)
                          {
                            uint64_t v116 = v114 + 8 * v112;
                            if (v116 != v113 && *(_DWORD *)(v116 + 4) == v90)
                            {
                              uint64_t v118 = v25[4];
                              unint64_t v119 = (v25[5] - v118) >> 3;
                              if (v91 < v119)
                              {
                                uint64_t v120 = *(void *)(v118 + 8 * v91);
                                if (v120)
                                {
                                  unint64_t v121 = *(unsigned __int16 *)(v120 + 2 * v94);
                                  uint64_t v123 = v25[7];
                                  uint64_t v122 = v25[8];
                                  unint64_t v124 = (v122 - v123) >> 3;
                                  if (v124 > v121)
                                  {
                                    uint64_t v125 = v123 + 8 * v121;
                                    if (v125 != v122 && *(_DWORD *)(v125 + 4) == v90)
                                    {
                                      unint64_t v126 = *(void *)v86;
                                      uint64_t v127 = HIDWORD(*(void *)v86);
                                      unint64_t v128 = *(void *)v86 >> 39;
                                      if (v128 < v101
                                        && (uint64_t v129 = *(void *)(v100 + 8 * v128)) != 0
                                        && (unint64_t v130 = *(unsigned __int16 *)(v129 + 2 * (HIDWORD(v126) & 0x7F)), v106 > v130)
                                        && (uint64_t v131 = v105 + 8 * v130, v131 != v104)
                                        && *(_DWORD *)(v131 + 4) == v127)
                                      {
                                        v132 = (uint64_t *)(v22[10] + 24 * v130);
                                      }
                                      else
                                      {
                                        v132 = (uint64_t *)v22[11];
                                      }
                                      if (v128 < v110
                                        && (uint64_t v133 = *(void *)(v109 + 8 * v128)) != 0
                                        && (unint64_t v134 = *(unsigned __int16 *)(v133 + 2 * (HIDWORD(v126) & 0x7F)), v115 > v134)
                                        && (uint64_t v135 = v114 + 8 * v134, v135 != v113)
                                        && *(_DWORD *)(v135 + 4) == v127)
                                      {
                                        v136 = (uint64_t *)(v23[10] + 24 * v134);
                                      }
                                      else
                                      {
                                        v136 = (uint64_t *)v23[11];
                                      }
                                      if (v128 < v119
                                        && (uint64_t v137 = *(void *)(v118 + 8 * v128)) != 0
                                        && (unint64_t v138 = *(unsigned __int16 *)(v137 + 2 * (HIDWORD(v126) & 0x7F)), v124 > v138)
                                        && (uint64_t v139 = v123 + 8 * v138, v139 != v122)
                                        && *(_DWORD *)(v139 + 4) == v127)
                                      {
                                        uint64_t v89 = (uint64_t *)(v25[10] + 24 * v138);
                                      }
                                      else
                                      {
                                        uint64_t v89 = (uint64_t *)v25[11];
                                      }
                                      md::CollectMapDataLogic<(md::MapDataType)62>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)62> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)62> &,SceneComponents::LayerDataExitingView<(md::MapDataType)62> &)#1}::operator()((uint64_t)&v315, v126, v88, v132, v136, v89);
                                      uint64_t v85 = v312;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v88 += 3;
      v86 += 8;
    }
    while (v86 != v87);
  }
  unint64_t v27 = v311;
  if (v26 == v32) {
    goto LABEL_147;
  }
LABEL_90:
  if (v27 == v32)
  {
LABEL_202:
    uint64_t v315 = v85;
    uint64_t v316 = v313;
    uint64_t v195 = v23[7];
    uint64_t v196 = v23[8];
    if (v195 != v196)
    {
      v197 = (uint64_t *)v23[10];
      do
      {
        unint64_t v199 = *(unsigned int *)(v195 + 4);
        unint64_t v200 = v199 >> 7;
        uint64_t v201 = v20[4];
        if (v199 >> 7 < (v20[5] - v201) >> 3)
        {
          uint64_t v202 = *(void *)(v201 + 8 * v200);
          if (v202)
          {
            uint64_t v203 = v199 & 0x7F;
            unint64_t v204 = *(unsigned __int16 *)(v202 + 2 * v203);
            uint64_t v206 = v20[7];
            uint64_t v205 = v20[8];
            if (v204 < (v205 - v206) >> 3)
            {
              uint64_t v207 = v206 + 8 * v204;
              if (v207 != v205 && *(_DWORD *)(v207 + 4) == v199)
              {
                uint64_t v209 = v21[4];
                unint64_t v210 = (v21[5] - v209) >> 3;
                if (v200 < v210)
                {
                  uint64_t v211 = *(void *)(v209 + 8 * v200);
                  if (v211)
                  {
                    unint64_t v212 = *(unsigned __int16 *)(v211 + 2 * v203);
                    uint64_t v214 = v21[7];
                    uint64_t v213 = v21[8];
                    unint64_t v215 = (v213 - v214) >> 3;
                    if (v215 > v212)
                    {
                      uint64_t v216 = v214 + 8 * v212;
                      if (v216 != v213 && *(_DWORD *)(v216 + 4) == v199)
                      {
                        uint64_t v218 = v22[4];
                        unint64_t v219 = (v22[5] - v218) >> 3;
                        if (v200 < v219)
                        {
                          uint64_t v220 = *(void *)(v218 + 8 * v200);
                          if (v220)
                          {
                            unint64_t v221 = *(unsigned __int16 *)(v220 + 2 * v203);
                            uint64_t v223 = v22[7];
                            uint64_t v222 = v22[8];
                            unint64_t v224 = (v222 - v223) >> 3;
                            if (v224 > v221)
                            {
                              uint64_t v225 = v223 + 8 * v221;
                              if (v225 != v222 && *(_DWORD *)(v225 + 4) == v199)
                              {
                                uint64_t v227 = v25[4];
                                unint64_t v228 = (v25[5] - v227) >> 3;
                                if (v200 < v228)
                                {
                                  uint64_t v229 = *(void *)(v227 + 8 * v200);
                                  if (v229)
                                  {
                                    unint64_t v230 = *(unsigned __int16 *)(v229 + 2 * v203);
                                    uint64_t v232 = v25[7];
                                    uint64_t v231 = v25[8];
                                    unint64_t v233 = (v231 - v232) >> 3;
                                    if (v233 > v230)
                                    {
                                      uint64_t v234 = v232 + 8 * v230;
                                      if (v234 != v231 && *(_DWORD *)(v234 + 4) == v199)
                                      {
                                        unint64_t v235 = *(void *)v195;
                                        uint64_t v236 = HIDWORD(*(void *)v195);
                                        unint64_t v237 = *(void *)v195 >> 39;
                                        if (v237 < v210
                                          && (uint64_t v238 = *(void *)(v209 + 8 * v237)) != 0
                                          && (unint64_t v239 = *(unsigned __int16 *)(v238 + 2 * (HIDWORD(v235) & 0x7F)),
                                              v215 > v239)
                                          && (uint64_t v240 = v214 + 8 * v239, v240 != v213)
                                          && *(_DWORD *)(v240 + 4) == v236)
                                        {
                                          v241 = (uint64_t *)(v21[10] + 24 * v239);
                                        }
                                        else
                                        {
                                          v241 = (uint64_t *)v21[11];
                                        }
                                        if (v237 < v219
                                          && (uint64_t v242 = *(void *)(v218 + 8 * v237)) != 0
                                          && (unint64_t v243 = *(unsigned __int16 *)(v242 + 2 * (HIDWORD(v235) & 0x7F)),
                                              v224 > v243)
                                          && (uint64_t v244 = v223 + 8 * v243, v244 != v222)
                                          && *(_DWORD *)(v244 + 4) == v236)
                                        {
                                          v245 = (uint64_t *)(v22[10] + 24 * v243);
                                        }
                                        else
                                        {
                                          v245 = (uint64_t *)v22[11];
                                        }
                                        if (v237 < v228
                                          && (uint64_t v246 = *(void *)(v227 + 8 * v237)) != 0
                                          && (unint64_t v247 = *(unsigned __int16 *)(v246 + 2 * (HIDWORD(v235) & 0x7F)),
                                              v233 > v247)
                                          && (uint64_t v248 = v232 + 8 * v247, v248 != v231)
                                          && *(_DWORD *)(v248 + 4) == v236)
                                        {
                                          v198 = (uint64_t *)(v25[10] + 24 * v247);
                                        }
                                        else
                                        {
                                          v198 = (uint64_t *)v25[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)62>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)62> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)62> &,SceneComponents::LayerDataExitingView<(md::MapDataType)62> &)#1}::operator()((uint64_t)&v315, v235, v241, v245, v197, v198);
                                        uint64_t v85 = v312;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v197 += 3;
        v195 += 8;
      }
      while (v195 != v196);
    }
  }
LABEL_256:
  if ((void *)v28 == v32)
  {
    uint64_t v315 = v85;
    uint64_t v316 = v313;
    uint64_t v249 = v25[7];
    uint64_t v250 = v25[8];
    if (v249 != v250)
    {
      v251 = (uint64_t *)v25[10];
      do
      {
        unint64_t v253 = *(unsigned int *)(v249 + 4);
        unint64_t v254 = v253 >> 7;
        uint64_t v255 = v20[4];
        if (v253 >> 7 < (v20[5] - v255) >> 3)
        {
          uint64_t v256 = *(void *)(v255 + 8 * v254);
          if (v256)
          {
            uint64_t v257 = v253 & 0x7F;
            unint64_t v258 = *(unsigned __int16 *)(v256 + 2 * v257);
            uint64_t v260 = v20[7];
            uint64_t v259 = v20[8];
            if (v258 < (v259 - v260) >> 3)
            {
              uint64_t v261 = v260 + 8 * v258;
              if (v261 != v259 && *(_DWORD *)(v261 + 4) == v253)
              {
                uint64_t v263 = v21[4];
                unint64_t v264 = (v21[5] - v263) >> 3;
                if (v254 < v264)
                {
                  uint64_t v265 = *(void *)(v263 + 8 * v254);
                  if (v265)
                  {
                    unint64_t v266 = *(unsigned __int16 *)(v265 + 2 * v257);
                    uint64_t v268 = v21[7];
                    uint64_t v267 = v21[8];
                    unint64_t v269 = (v267 - v268) >> 3;
                    if (v269 > v266)
                    {
                      uint64_t v270 = v268 + 8 * v266;
                      if (v270 != v267 && *(_DWORD *)(v270 + 4) == v253)
                      {
                        uint64_t v272 = v22[4];
                        unint64_t v273 = (v22[5] - v272) >> 3;
                        if (v254 < v273)
                        {
                          uint64_t v274 = *(void *)(v272 + 8 * v254);
                          if (v274)
                          {
                            unint64_t v275 = *(unsigned __int16 *)(v274 + 2 * v257);
                            uint64_t v277 = v22[7];
                            uint64_t v276 = v22[8];
                            unint64_t v278 = (v276 - v277) >> 3;
                            if (v278 > v275)
                            {
                              uint64_t v279 = v277 + 8 * v275;
                              if (v279 != v276 && *(_DWORD *)(v279 + 4) == v253)
                              {
                                uint64_t v281 = v23[4];
                                unint64_t v282 = (v23[5] - v281) >> 3;
                                if (v254 < v282)
                                {
                                  uint64_t v283 = *(void *)(v281 + 8 * v254);
                                  if (v283)
                                  {
                                    unint64_t v284 = *(unsigned __int16 *)(v283 + 2 * v257);
                                    uint64_t v286 = v23[7];
                                    uint64_t v285 = v23[8];
                                    unint64_t v287 = (v285 - v286) >> 3;
                                    if (v287 > v284)
                                    {
                                      uint64_t v288 = v286 + 8 * v284;
                                      if (v288 != v285 && *(_DWORD *)(v288 + 4) == v253)
                                      {
                                        unint64_t v289 = *(void *)v249;
                                        uint64_t v290 = HIDWORD(*(void *)v249);
                                        unint64_t v291 = *(void *)v249 >> 39;
                                        if (v291 < v264
                                          && (uint64_t v292 = *(void *)(v263 + 8 * v291)) != 0
                                          && (unint64_t v293 = *(unsigned __int16 *)(v292 + 2 * (HIDWORD(v289) & 0x7F)),
                                              v269 > v293)
                                          && (uint64_t v294 = v268 + 8 * v293, v294 != v267)
                                          && *(_DWORD *)(v294 + 4) == v290)
                                        {
                                          v295 = (uint64_t *)(v21[10] + 24 * v293);
                                        }
                                        else
                                        {
                                          v295 = (uint64_t *)v21[11];
                                        }
                                        if (v291 < v273
                                          && (uint64_t v296 = *(void *)(v272 + 8 * v291)) != 0
                                          && (unint64_t v297 = *(unsigned __int16 *)(v296 + 2 * (HIDWORD(v289) & 0x7F)),
                                              v278 > v297)
                                          && (uint64_t v298 = v277 + 8 * v297, v298 != v276)
                                          && *(_DWORD *)(v298 + 4) == v290)
                                        {
                                          v299 = (uint64_t *)(v22[10] + 24 * v297);
                                        }
                                        else
                                        {
                                          v299 = (uint64_t *)v22[11];
                                        }
                                        if (v291 < v282
                                          && (uint64_t v300 = *(void *)(v281 + 8 * v291)) != 0
                                          && (unint64_t v301 = *(unsigned __int16 *)(v300 + 2 * (HIDWORD(v289) & 0x7F)),
                                              v287 > v301)
                                          && (uint64_t v302 = v286 + 8 * v301, v302 != v285)
                                          && *(_DWORD *)(v302 + 4) == v290)
                                        {
                                          v252 = (uint64_t *)(v23[10] + 24 * v301);
                                        }
                                        else
                                        {
                                          v252 = (uint64_t *)v23[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)62>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)62> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)62> &,SceneComponents::LayerDataExitingView<(md::MapDataType)62> &)#1}::operator()((uint64_t)&v315, v289, v295, v299, v252, v251);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v251 += 3;
        v249 += 8;
      }
      while (v249 != v250);
    }
  }
}

void sub_1A1FF279C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*v17);
  std::__split_buffer<SceneComponents::LayerDataPreviousInView<(md::MapDataType)33>>::~__split_buffer((uint64_t)va);
  std::__tree<gdc::LayerDataWithWorld>::destroy(a14);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)62>>(int8x8_t *a1)
{
  uint64_t v10 = 0x394E7A690FBC8B4;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x394E7A690FBC8B4;
    if (*(void *)&v1 <= 0x394E7A690FBC8B4uLL) {
      uint64_t v3 = 0x394E7A690FBC8B4uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x394E7A690FBC8B4;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x394E7A690FBC8B4)
      {
        if (v5[2] == 0x394E7A690FBC8B4) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x394E7A690FBC8B4) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x394E7A690FBC8B4) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1FF2ACC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)62>>(int8x8_t *a1)
{
  unint64_t v10 = 0xF23C21D2B4D31454;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xF23C21D2B4D31454;
    if (*(void *)&v1 <= 0xF23C21D2B4D31454) {
      unint64_t v3 = 0xF23C21D2B4D31454 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xF23C21D2B4D31454;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xF23C21D2B4D31454)
      {
        if (v5[2] == 0xF23C21D2B4D31454) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xF23C21D2B4D31454) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xF23C21D2B4D31454) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1FF2D3C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)62>>(int8x8_t *a1)
{
  uint64_t v10 = 0x6CB84C03E8A0D4ABLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x6CB84C03E8A0D4ABLL;
    if (*(void *)&v1 <= 0x6CB84C03E8A0D4ABuLL) {
      uint64_t v3 = 0x6CB84C03E8A0D4ABuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x6CB84C03E8A0D4ABLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x6CB84C03E8A0D4ABLL)
      {
        if (v5[2] == 0x6CB84C03E8A0D4ABLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x6CB84C03E8A0D4ABLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x6CB84C03E8A0D4ABLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1FF2FAC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)62>>(int8x8_t *a1)
{
  uint64_t v10 = 0x40977549DE128CF9;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x40977549DE128CF9;
    if (*(void *)&v1 <= 0x40977549DE128CF9uLL) {
      uint64_t v3 = 0x40977549DE128CF9uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x40977549DE128CF9;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x40977549DE128CF9)
      {
        if (v5[2] == 0x40977549DE128CF9) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x40977549DE128CF9) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x40977549DE128CF9) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1FF321C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::CollectMapDataLogic<(md::MapDataType)62>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)62> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)62> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)62> &,SceneComponents::LayerDataExitingView<(md::MapDataType)62> &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v8 = a4;
  uint64_t v9 = (uint64_t)a3;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  uint64_t v15 = (void **)(a3 + 1);
  uint64_t v14 = a3[1];
  uint64_t v16 = a4 + 1;
  uint64_t v17 = a3[2];
  *(_OWORD *)(a3 + 1) = *(_OWORD *)(a4 + 1);
  a4[1] = v14;
  a4[2] = v17;
  if (a3[2]) {
    uint64_t v18 = (uint64_t *)(a3[1] + 16);
  }
  else {
    uint64_t v18 = a3;
  }
  *uint64_t v18 = (uint64_t)v15;
  unint64_t v19 = (void *)(*v16 + 16);
  if (!v17) {
    unint64_t v19 = a4;
  }
  *unint64_t v19 = v16;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*v15);
  *(void *)uint64_t v9 = v15;
  *(void *)(v9 + 16) = 0;
  void *v15 = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy((void *)a5[1]);
  *a5 = (uint64_t)(a5 + 1);
  a5[2] = 0;
  a5[1] = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy((void *)a6[1]);
  *a6 = (uint64_t)(a6 + 1);
  a6[2] = 0;
  a6[1] = 0;
  unint64_t v20 = **(void **)a1;
  {
LABEL_152:
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
    }
  }
  uint64_t v21 = *(_WORD **)(v20 + 48);
  BOOL v22 = *(_WORD **)(v20 + 56);
  unint64_t v23 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v21 != v22)
  {
    uint64_t v24 = *(_WORD **)(v20 + 48);
    while (*v24 != 62)
    {
      v24 += 16;
      if (v24 == v22) {
        goto LABEL_18;
      }
    }
    if (v24 == v22)
    {
      unint64_t v23 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v21 != 62)
      {
        v21 += 16;
        if (v21 == v22)
        {
          uint64_t v21 = *(_WORD **)(v20 + 56);
          break;
        }
      }
      unint64_t v23 = (uint64_t *)(v21 + 4);
    }
  }
LABEL_18:
  std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>((uint64_t *)v9, (void *)*v23, v23 + 1);
  unint64_t v20 = *(void *)v9;
  double v25 = (uint64_t *)*v8;
  uint64_t v26 = (uint64_t *)*a5;
  *(void *)&long long v93 = a5;
  *((void *)&v93 + 1) = v26;
  while ((void **)v20 != v15)
  {
    if (v25 == v16)
    {
      long long v95 = v93;
      do
      {
        std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((void **)&v95, v20 + 32);
        unint64_t v43 = *(void **)(v20 + 8);
        if (v43)
        {
          do
          {
            uint64_t v44 = v43;
            unint64_t v43 = (void *)*v43;
          }
          while (v43);
        }
        else
        {
          do
          {
            uint64_t v44 = *(void **)(v20 + 16);
            BOOL v40 = *v44 == v20;
            unint64_t v20 = (unint64_t)v44;
          }
          while (!v40);
        }
        unint64_t v20 = (unint64_t)v44;
      }
      while (v44 != v15);
      break;
    }
    unint64_t v27 = *(void *)(v20 + 32);
    int v28 = *(unsigned __int8 *)(v20 + 48);
    int v29 = (char)v28;
    int v30 = *((unsigned __int8 *)v25 + 48);
    unint64_t v31 = v25[4];
    if (v28 == v30) {
      BOOL v32 = v27 < v31;
    }
    else {
      BOOL v32 = (char)v28 < (char)v30;
    }
    if (v32)
    {
      std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((void **)&v93, v20 + 32);
      size_t v33 = *(void **)(v20 + 8);
      if (v33)
      {
        do
        {
          unint64_t v20 = (unint64_t)v33;
          size_t v33 = (void *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          unint64_t v34 = v20;
          unint64_t v20 = *(void *)(v20 + 16);
        }
        while (*(void *)v20 != v34);
      }
    }
    else
    {
      BOOL v35 = v31 < v27;
      if (v29 != (char)v30) {
        BOOL v35 = (char)v30 < v29;
      }
      if (v35)
      {
        uint64_t v36 = (uint64_t *)v25[1];
        if (v36)
        {
          do
          {
            double v25 = v36;
            uint64_t v36 = (uint64_t *)*v36;
          }
          while (v36);
        }
        else
        {
          do
          {
            unint64_t v37 = v25;
            double v25 = (uint64_t *)v25[2];
          }
          while ((uint64_t *)*v25 != v37);
        }
      }
      else
      {
        uint64_t v38 = *(void **)(v20 + 8);
        if (v38)
        {
          do
          {
            uint64_t v39 = v38;
            uint64_t v38 = (void *)*v38;
          }
          while (v38);
        }
        else
        {
          do
          {
            uint64_t v39 = *(void **)(v20 + 16);
            BOOL v40 = *v39 == v20;
            unint64_t v20 = (unint64_t)v39;
          }
          while (!v40);
        }
        uint64_t v41 = (uint64_t *)v25[1];
        if (v41)
        {
          do
          {
            double v25 = v41;
            uint64_t v41 = (uint64_t *)*v41;
          }
          while (v41);
        }
        else
        {
          do
          {
            uint64_t v42 = v25;
            double v25 = (uint64_t *)v25[2];
          }
          while ((uint64_t *)*v25 != v42);
        }
        unint64_t v20 = (unint64_t)v39;
      }
    }
  }
  uint64_t v8 = (uint64_t *)*v8;
  uint64_t v45 = *(void *)v9;
  uint64_t v46 = (uint64_t *)*a6;
  *(void *)&long long v93 = a6;
  *((void *)&v93 + 1) = v46;
  while (v8 != v16)
  {
    if ((void **)v45 == v15)
    {
      long long v95 = v93;
      do
      {
        std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((void **)&v95, (uint64_t)(v8 + 4));
        uint64_t v62 = (uint64_t *)v8[1];
        if (v62)
        {
          do
          {
            unint64_t v63 = v62;
            uint64_t v62 = (uint64_t *)*v62;
          }
          while (v62);
        }
        else
        {
          do
          {
            unint64_t v63 = (uint64_t *)v8[2];
            BOOL v40 = *v63 == (void)v8;
            uint64_t v8 = v63;
          }
          while (!v40);
        }
        uint64_t v8 = v63;
      }
      while (v63 != v16);
      break;
    }
    unint64_t v47 = v8[4];
    int v48 = *((unsigned __int8 *)v8 + 48);
    int v49 = (char)v48;
    int v50 = *(unsigned __int8 *)(v45 + 48);
    unint64_t v51 = *(void *)(v45 + 32);
    if (v48 == v50) {
      BOOL v52 = v47 < v51;
    }
    else {
      BOOL v52 = (char)v48 < (char)v50;
    }
    if (v52)
    {
      std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((void **)&v93, (uint64_t)(v8 + 4));
      uint64_t v53 = (uint64_t *)v8[1];
      if (v53)
      {
        do
        {
          uint64_t v8 = v53;
          uint64_t v53 = (uint64_t *)*v53;
        }
        while (v53);
      }
      else
      {
        do
        {
          unint64_t v54 = v8;
          uint64_t v8 = (uint64_t *)v8[2];
        }
        while ((uint64_t *)*v8 != v54);
      }
    }
    else
    {
      BOOL v55 = v51 < v47;
      if (v49 != (char)v50) {
        BOOL v55 = (char)v50 < v49;
      }
      if (v55)
      {
        unint64_t v56 = *(void **)(v45 + 8);
        if (v56)
        {
          do
          {
            uint64_t v45 = (uint64_t)v56;
            unint64_t v56 = (void *)*v56;
          }
          while (v56);
        }
        else
        {
          do
          {
            uint64_t v57 = v45;
            uint64_t v45 = *(void *)(v45 + 16);
          }
          while (*(void *)v45 != v57);
        }
      }
      else
      {
        unint64_t v58 = (uint64_t *)v8[1];
        if (v58)
        {
          do
          {
            uint64_t v59 = v58;
            unint64_t v58 = (uint64_t *)*v58;
          }
          while (v58);
        }
        else
        {
          do
          {
            uint64_t v59 = (uint64_t *)v8[2];
            BOOL v40 = *v59 == (void)v8;
            uint64_t v8 = v59;
          }
          while (!v40);
        }
        uint64_t v60 = *(void **)(v45 + 8);
        if (v60)
        {
          do
          {
            uint64_t v45 = (uint64_t)v60;
            uint64_t v60 = (void *)*v60;
          }
          while (v60);
        }
        else
        {
          do
          {
            uint64_t v61 = v45;
            uint64_t v45 = *(void *)(v45 + 16);
          }
          while (*(void *)v45 != v61);
        }
        uint64_t v8 = v59;
      }
    }
  }
  if (!a5[2]) {
    goto LABEL_122;
  }
  uint64_t v64 = (void *)gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)62>>(*(int8x8_t **)(v12 + 128));
  uint64_t v94 = a2;
  unint64_t v65 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v64 + 4, (uint64_t)&v94);
  if (v66)
  {
    unint64_t v20 = v64[11];
    unint64_t v68 = v64[12];
    if (v20 >= v68)
    {
      uint64_t v70 = (char *)v64[10];
      uint64_t v16 = (uint64_t *)(v20 - (void)v70);
      uint64_t v71 = v20 - (void)v70 + 1;
      if (v71 < 0) {
        goto LABEL_154;
      }
      unint64_t v72 = v68 - (void)v70;
      if (2 * v72 > v71) {
        uint64_t v71 = 2 * v72;
      }
      if (v72 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v73 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v73 = v71;
      }
      if (v73) {
        uint64_t v74 = (char *)operator new(v73);
      }
      else {
        uint64_t v74 = 0;
      }
      uint64_t v75 = &v74[v73];
      uint64_t v69 = (uint64_t)v16 + (void)v74 + 1;
      uint64_t v76 = &v70[-v20];
      if (v70 == (char *)v20) {
        uint64_t v76 = 0;
      }
      v64[10] = (char *)v16 + (void)v74 + (unint64_t)v76;
      v64[11] = v69;
      v64[12] = v75;
      if (v70) {
        operator delete(v70);
      }
    }
    else
    {
      uint64_t v69 = v20 + 1;
    }
    v64[11] = v69;
    uint64_t v9 = v64[31];
    goto LABEL_118;
  }
  uint64_t v9 = v64[31];
  if (v64[10] + (((uint64_t)v65 - v64[7]) >> 3) == v64[11])
  {
LABEL_118:
    uint64_t v8 = &v94;
    a5 = (uint64_t *)v64[22];
    if (a5)
    {
      unint64_t v20 = 1;
      while (1)
      {
        *(void *)&long long v95 = &v94;
        *((void *)&v95 + 1) = 1;
        *(void *)&long long v93 = v9;
        uint64_t v77 = a5[6];
        if (!v77) {
          goto LABEL_151;
        }
        (*(void (**)(uint64_t, long long *, long long *))(*(void *)v77 + 48))(v77, &v93, &v95);
        a5 = (uint64_t *)*a5;
        if (!a5) {
          goto LABEL_122;
        }
      }
    }
    goto LABEL_122;
  }
  a5 = (uint64_t *)v64[16];
  if (a5)
  {
    uint64_t v8 = &v94;
    unint64_t v20 = 1;
    do
    {
      *(void *)&long long v95 = &v94;
      *((void *)&v95 + 1) = 1;
      *(void *)&long long v93 = v9;
      uint64_t v67 = a5[6];
      if (!v67) {
        goto LABEL_151;
      }
      (*(void (**)(uint64_t, long long *, long long *))(*(void *)v67 + 48))(v67, &v93, &v95);
      a5 = (uint64_t *)*a5;
    }
    while (a5);
  }
LABEL_122:
  if (!a6[2]) {
    return;
  }
  unint64_t v78 = (void *)gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)62>>(*(int8x8_t **)(v12 + 128));
  uint64_t v94 = a2;
  uint64_t v79 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v78 + 4, (uint64_t)&v94);
  if (v80)
  {
    unint64_t v83 = (unsigned char *)v78[11];
    unint64_t v82 = v78[12];
    if ((unint64_t)v83 < v82)
    {
      uint64_t v84 = (uint64_t)(v83 + 1);
LABEL_145:
      v78[11] = v84;
      a2 = v78[31];
      goto LABEL_146;
    }
    uint64_t v85 = (char *)v78[10];
    uint64_t v8 = (uint64_t *)(v83 - v85);
    uint64_t v86 = v83 - v85 + 1;
    if (v86 >= 0)
    {
      unint64_t v87 = v82 - (void)v85;
      if (2 * v87 > v86) {
        uint64_t v86 = 2 * v87;
      }
      if (v87 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v88 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v88 = v86;
      }
      if (v88) {
        uint64_t v89 = (char *)operator new(v88);
      }
      else {
        uint64_t v89 = 0;
      }
      unint64_t v90 = &v89[v88];
      uint64_t v84 = (uint64_t)v8 + (void)v89 + 1;
      unint64_t v91 = (char *)(v85 - v83);
      if (v85 == v83) {
        unint64_t v91 = 0;
      }
      v78[10] = (char *)v8 + (void)v89 + (unint64_t)v91;
      v78[11] = v84;
      v78[12] = v90;
      if (v85) {
        operator delete(v85);
      }
      goto LABEL_145;
    }
LABEL_154:
    abort();
  }
  a2 = v78[31];
  if (v78[10] + (((uint64_t)v79 - v78[7]) >> 3) != v78[11])
  {
    a6 = (uint64_t *)v78[16];
    if (a6)
    {
      a5 = &v94;
      uint64_t v9 = 1;
      while (1)
      {
        *(void *)&long long v95 = &v94;
        *((void *)&v95 + 1) = 1;
        *(void *)&long long v93 = a2;
        uint64_t v81 = a6[6];
        if (!v81) {
          break;
        }
        (*(void (**)(uint64_t, long long *, long long *))(*(void *)v81 + 48))(v81, &v93, &v95);
        a6 = (uint64_t *)*a6;
        if (!a6) {
          return;
        }
      }
LABEL_151:
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_152;
    }
    return;
  }
LABEL_146:
  a5 = &v94;
  a6 = (uint64_t *)v78[22];
  if (a6)
  {
    uint64_t v9 = 1;
    while (1)
    {
      *(void *)&long long v95 = &v94;
      *((void *)&v95 + 1) = 1;
      *(void *)&long long v93 = a2;
      uint64_t v92 = a6[6];
      if (!v92) {
        break;
      }
      (*(void (**)(uint64_t, long long *, long long *))(*(void *)v92 + 48))(v92, &v93, &v95);
      a6 = (uint64_t *)*a6;
      if (!a6) {
        return;
      }
    }
    goto LABEL_151;
  }
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)62>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)62>>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(void **)(v15 - 24), (void *)(v15 - 16));
    uint64_t v15 = a1[11];
  }
  uint64_t v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(v15 - 16));
  a1[11] = v16;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)62>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)62>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)62>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)62>>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(void **)(v15 - 24), (void *)(v15 - 16));
    uint64_t v15 = a1[11];
  }
  uint64_t v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(v15 - 16));
  a1[11] = v16;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)62>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)62>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)62>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)62>>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_WORD *)(v14 + 2 * v7) = *(_WORD *)(v15 - 2);
  a1[11] = v15 - 2;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)62>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)62>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)62>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)62>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)62>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)62>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)62>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)62>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)62>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)62>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)62>,md::CollectMapDataContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)62>,md::CollectMapDataContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) != 0x5A88E3C88DA0DCA1 || !*(void *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  uint64_t v4 = *(void **)(a2 + 8);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_27;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v5 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v7 = 0x99BED48DEFBBD82BLL % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_27;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_27;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_25;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_27;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_27;
    }
LABEL_14:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_27;
    }
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_14;
  }
LABEL_25:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v14 = *(void *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v14 = 0;
LABEL_28:
  uint64_t v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 160))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)62>,md::CollectMapDataContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x5A88E3C88DA0DCA1 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)62>,md::CollectMapDataContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x5A88E3C88DA0DCA1 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 144))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)62>,md::CollectMapDataContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x5A88E3C88DA0DCA1 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 136))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)62>,md::CollectMapDataContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x5A88E3C88DA0DCA1 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 128))(result);
}

void md::Logic<md::CollectMapDataLogic<(md::MapDataType)62>,md::CollectMapDataContext<(md::MapDataType)62>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A1FF4AF4(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t gdc::ObjectHolder<md::CollectMapDataContext<(md::MapDataType)62>>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::CollectMapDataContext<(md::MapDataType)62>>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF514880;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0xC400A2AC0F1);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::CollectMapDataContext<(md::MapDataType)62>>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF514880;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0xC400A2AC0F1);
  }
  return a1;
}

uint64_t md::CollectMapDataLogic<(md::MapDataType)62>::didBecomeInactive(uint64_t result)
{
  uint64_t v1 = result;
  if (*(_WORD *)(result + 120) || *(_WORD *)(result + 122) || *(_DWORD *)(result + 124) != -1)
  {
    __n128 result = gdc::Registry::destroy(*(void *)(result + 128), *(void *)(result + 120));
    *(void *)(v1 + 120) = 0xFFFFFFFF00000000;
  }
  return result;
}

void md::CollectMapDataLogic<(md::MapDataType)62>::~CollectMapDataLogic(uint64_t a1)
{
  *(void *)a1 = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 80));
  JUMPOUT(0x1A6239270);
}

uint64_t md::CollectMapDataLogic<(md::MapDataType)62>::~CollectMapDataLogic(uint64_t a1)
{
  *(void *)a1 = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 80));
  return a1;
}

void md::Logic<md::CollectMapDataLogic<(md::MapDataType)75>,md::CollectMapDataContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint8x8_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint8x8_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void md::CollectMapDataLogic<(md::MapDataType)75>::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint8x8_t v5 = (void *)gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)75>>(*(int8x8_t **)(a1 + 128));
  unint64_t v6 = v5;
  if (v5[29])
  {
    char v7 = (void *)v5[28];
    if (v7)
    {
      uint64_t v8 = v5[31];
      uint64_t v9 = v5[7];
      uint64_t v10 = (v5[8] - v9) >> 3;
      do
      {
        uint64_t v315 = v9;
        uint64_t v316 = v10;
        uint64_t v314 = v8;
        uint64_t v11 = v7[6];
        if (!v11) {
          goto LABEL_312;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48))(v11, &v314, &v315);
        char v7 = (void *)*v7;
      }
      while (v7);
    }
  }
  v6[8] = v6[7];
  v6[11] = v6[10];
  uint64_t v12 = (void *)gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)75>>(*(int8x8_t **)(a1 + 128));
  uint64_t v13 = v12;
  if (v12[29])
  {
    uint64_t v14 = (void *)v12[28];
    if (v14)
    {
      uint64_t v15 = v12[31];
      uint64_t v16 = v12[7];
      uint64_t v17 = (v12[8] - v16) >> 3;
      while (1)
      {
        uint64_t v315 = v16;
        uint64_t v316 = v17;
        uint64_t v314 = v15;
        uint64_t v18 = v14[6];
        if (!v18) {
          break;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v314, &v315);
        uint64_t v14 = (void *)*v14;
        if (!v14) {
          goto LABEL_11;
        }
      }
LABEL_312:
      std::__throw_bad_function_call[abi:nn180100]();
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
      return;
    }
  }
LABEL_11:
  v13[8] = v13[7];
  v13[11] = v13[10];
  uint64_t v312 = *a3;
  unint64_t v19 = *(int8x8_t **)(a1 + 128);
  if (!*(_WORD *)(a1 + 120) && !*(_WORD *)(a1 + 122) && *(_DWORD *)(a1 + 124) == -1) {
    gdc::Registry::create(*(gdc::Registry **)(a1 + 128));
  }
  uint64_t v313 = a1;
  uint64_t v20 = (void *)gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)75>>(v19);
  uint64_t v21 = (void *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)75>>(v19);
  BOOL v22 = (void *)gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)75>>(v19);
  unint64_t v23 = (void *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)75>>(v19);
  uint64_t v24 = gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)75>>(v19);
  double v25 = (void *)v24;
  uint64_t v26 = v22 + 4;
  unint64_t v27 = v23 + 4;
  uint64_t v28 = v24 + 32;
  uint64_t v30 = v20[7];
  uint64_t v29 = v20[8];
  if (v21[8] - v21[7] >= (unint64_t)(v29 - v30)) {
    unint64_t v31 = v20 + 4;
  }
  else {
    unint64_t v31 = v21 + 4;
  }
  if (v22[8] - v22[7] < v31[4] - v31[3]) {
    unint64_t v31 = v22 + 4;
  }
  if (v23[8] - v23[7] < v31[4] - v31[3]) {
    unint64_t v31 = v23 + 4;
  }
  if (*(void *)(v24 + 64) - *(void *)(v24 + 56) >= v31[4] - v31[3]) {
    BOOL v32 = v31;
  }
  else {
    BOOL v32 = (void *)(v24 + 32);
  }
  if (v20 + 4 == v32)
  {
    uint64_t v309 = v24 + 32;
    uint64_t v315 = v312;
    uint64_t v316 = v313;
    while (v30 != v29)
    {
      unint64_t v34 = *(unsigned int *)(v30 + 4);
      unint64_t v35 = v34 >> 7;
      uint64_t v36 = v21[4];
      unint64_t v37 = (v21[5] - v36) >> 3;
      if (v34 >> 7 < v37)
      {
        uint64_t v38 = *(void *)(v36 + 8 * v35);
        if (v38)
        {
          uint64_t v39 = v34 & 0x7F;
          unint64_t v40 = *(unsigned __int16 *)(v38 + 2 * v39);
          uint64_t v41 = v21[7];
          uint64_t v42 = v21[8];
          unint64_t v43 = (v42 - v41) >> 3;
          if (v43 > v40)
          {
            uint64_t v44 = v41 + 8 * v40;
            if (v44 != v42 && *(_DWORD *)(v44 + 4) == v34)
            {
              uint64_t v46 = v22[4];
              unint64_t v47 = (v22[5] - v46) >> 3;
              if (v35 < v47)
              {
                uint64_t v48 = *(void *)(v46 + 8 * v35);
                if (v48)
                {
                  unint64_t v49 = *(unsigned __int16 *)(v48 + 2 * v39);
                  uint64_t v51 = v22[7];
                  uint64_t v50 = v22[8];
                  unint64_t v52 = (v50 - v51) >> 3;
                  if (v52 > v49)
                  {
                    uint64_t v53 = v51 + 8 * v49;
                    if (v53 != v50 && *(_DWORD *)(v53 + 4) == v34)
                    {
                      uint64_t v55 = v23[4];
                      unint64_t v56 = (v23[5] - v55) >> 3;
                      if (v35 < v56)
                      {
                        uint64_t v57 = *(void *)(v55 + 8 * v35);
                        if (v57)
                        {
                          unint64_t v58 = *(unsigned __int16 *)(v57 + 2 * v39);
                          uint64_t v59 = v23[7];
                          v310 = v27;
                          uint64_t v308 = v23[8];
                          unint64_t v307 = (v308 - v59) >> 3;
                          if (v307 > v58)
                          {
                            uint64_t v60 = v59 + 8 * v58;
                            if (v60 != v308 && *(_DWORD *)(v60 + 4) == v34)
                            {
                              uint64_t v306 = v25[4];
                              unint64_t v305 = (v25[5] - v306) >> 3;
                              if (v35 < v305)
                              {
                                uint64_t v62 = *(void *)(v306 + 8 * v35);
                                if (v62)
                                {
                                  unint64_t v63 = *(unsigned __int16 *)(v62 + 2 * v39);
                                  uint64_t v303 = v25[7];
                                  uint64_t v304 = v25[8];
                                  if ((v304 - v303) >> 3 > v63)
                                  {
                                    uint64_t v64 = v303 + 8 * v63;
                                    if (v64 != v304 && *(_DWORD *)(v64 + 4) == v34)
                                    {
                                      unint64_t v65 = *(void *)v30;
                                      uint64_t v66 = HIDWORD(*(void *)v30);
                                      unint64_t v67 = *(void *)v30 >> 39;
                                      if (v67 < v37
                                        && (uint64_t v68 = *(void *)(v36 + 8 * v67)) != 0
                                        && (unint64_t v69 = *(unsigned __int16 *)(v68 + 2 * (HIDWORD(v65) & 0x7F)), v43 > v69)
                                        && (uint64_t v70 = v41 + 8 * v69, v70 != v42)
                                        && *(_DWORD *)(v70 + 4) == v66)
                                      {
                                        uint64_t v71 = (uint64_t *)(v21[10] + 24 * v69);
                                      }
                                      else
                                      {
                                        uint64_t v71 = (uint64_t *)v21[11];
                                      }
                                      if (v67 < v47
                                        && (uint64_t v72 = *(void *)(v46 + 8 * v67)) != 0
                                        && (unint64_t v73 = *(unsigned __int16 *)(v72 + 2 * (HIDWORD(v65) & 0x7F)), v52 > v73)
                                        && (uint64_t v74 = v51 + 8 * v73, v74 != v50)
                                        && *(_DWORD *)(v74 + 4) == v66)
                                      {
                                        uint64_t v75 = (uint64_t *)(v22[10] + 24 * v73);
                                      }
                                      else
                                      {
                                        uint64_t v75 = (uint64_t *)v22[11];
                                      }
                                      uint64_t v76 = HIDWORD(*(void *)v30);
                                      if (v67 < v56
                                        && (uint64_t v77 = *(void *)(v55 + 8 * v67)) != 0
                                        && (unint64_t v78 = *(unsigned __int16 *)(v77 + 2 * (HIDWORD(v65) & 0x7F)), v307 > v78)
                                        && (uint64_t v79 = v59 + 8 * v78, v79 != v308)
                                        && *(_DWORD *)(v79 + 4) == v76)
                                      {
                                        unint64_t v80 = (v304 - v303) >> 3;
                                        uint64_t v81 = (uint64_t *)(v23[10] + 24 * v78);
                                      }
                                      else
                                      {
                                        unint64_t v80 = (v304 - v303) >> 3;
                                        uint64_t v81 = (uint64_t *)v23[11];
                                      }
                                      if (v67 < v305
                                        && (uint64_t v82 = *(void *)(v306 + 8 * v67)) != 0
                                        && (unint64_t v83 = *(unsigned __int16 *)(v82 + 2 * (HIDWORD(v65) & 0x7F)), v80 > v83)
                                        && (uint64_t v84 = v303 + 8 * v83, v84 != v304)
                                        && *(_DWORD *)(v84 + 4) == v76)
                                      {
                                        size_t v33 = (uint64_t *)(v25[10] + 24 * v83);
                                      }
                                      else
                                      {
                                        size_t v33 = (uint64_t *)v25[11];
                                      }
                                      md::CollectMapDataLogic<(md::MapDataType)75>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)75> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)75> &,SceneComponents::LayerDataExitingView<(md::MapDataType)75> &)#1}::operator()((uint64_t)&v315, v65, v71, v75, v81, v33);
                                      unint64_t v27 = v310;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v30 += 8;
    }
    uint64_t v28 = v309;
  }
  uint64_t v85 = v312;
  if (v21 + 4 != v32)
  {
    if (v26 != v32) {
      goto LABEL_90;
    }
LABEL_147:
    v140 = v27;
    uint64_t v315 = v85;
    uint64_t v316 = v313;
    uint64_t v141 = v22[7];
    uint64_t v142 = v22[8];
    if (v141 != v142)
    {
      v143 = (uint64_t *)v22[10];
      do
      {
        unint64_t v145 = *(unsigned int *)(v141 + 4);
        unint64_t v146 = v145 >> 7;
        uint64_t v147 = v20[4];
        if (v145 >> 7 < (v20[5] - v147) >> 3)
        {
          uint64_t v148 = *(void *)(v147 + 8 * v146);
          if (v148)
          {
            uint64_t v149 = v145 & 0x7F;
            unint64_t v150 = *(unsigned __int16 *)(v148 + 2 * v149);
            uint64_t v152 = v20[7];
            uint64_t v151 = v20[8];
            if (v150 < (v151 - v152) >> 3)
            {
              uint64_t v153 = v152 + 8 * v150;
              if (v153 != v151 && *(_DWORD *)(v153 + 4) == v145)
              {
                uint64_t v155 = v21[4];
                unint64_t v156 = (v21[5] - v155) >> 3;
                if (v146 < v156)
                {
                  uint64_t v157 = *(void *)(v155 + 8 * v146);
                  if (v157)
                  {
                    unint64_t v158 = *(unsigned __int16 *)(v157 + 2 * v149);
                    uint64_t v160 = v21[7];
                    uint64_t v159 = v21[8];
                    unint64_t v161 = (v159 - v160) >> 3;
                    if (v161 > v158)
                    {
                      uint64_t v162 = v160 + 8 * v158;
                      if (v162 != v159 && *(_DWORD *)(v162 + 4) == v145)
                      {
                        uint64_t v164 = v23[4];
                        unint64_t v165 = (v23[5] - v164) >> 3;
                        if (v146 < v165)
                        {
                          uint64_t v166 = *(void *)(v164 + 8 * v146);
                          if (v166)
                          {
                            unint64_t v167 = *(unsigned __int16 *)(v166 + 2 * v149);
                            uint64_t v169 = v23[7];
                            uint64_t v168 = v23[8];
                            unint64_t v170 = (v168 - v169) >> 3;
                            if (v170 > v167)
                            {
                              uint64_t v171 = v169 + 8 * v167;
                              if (v171 != v168 && *(_DWORD *)(v171 + 4) == v145)
                              {
                                uint64_t v173 = v25[4];
                                unint64_t v174 = (v25[5] - v173) >> 3;
                                if (v146 < v174)
                                {
                                  uint64_t v175 = *(void *)(v173 + 8 * v146);
                                  if (v175)
                                  {
                                    unint64_t v176 = *(unsigned __int16 *)(v175 + 2 * v149);
                                    uint64_t v178 = v25[7];
                                    uint64_t v177 = v25[8];
                                    unint64_t v179 = (v177 - v178) >> 3;
                                    if (v179 > v176)
                                    {
                                      uint64_t v180 = v178 + 8 * v176;
                                      if (v180 != v177 && *(_DWORD *)(v180 + 4) == v145)
                                      {
                                        unint64_t v181 = *(void *)v141;
                                        uint64_t v182 = HIDWORD(*(void *)v141);
                                        unint64_t v183 = *(void *)v141 >> 39;
                                        if (v183 < v156
                                          && (uint64_t v184 = *(void *)(v155 + 8 * v183)) != 0
                                          && (unint64_t v185 = *(unsigned __int16 *)(v184 + 2 * (HIDWORD(v181) & 0x7F)),
                                              v161 > v185)
                                          && (uint64_t v186 = v160 + 8 * v185, v186 != v159)
                                          && *(_DWORD *)(v186 + 4) == v182)
                                        {
                                          v187 = (uint64_t *)(v21[10] + 24 * v185);
                                        }
                                        else
                                        {
                                          v187 = (uint64_t *)v21[11];
                                        }
                                        if (v183 < v165
                                          && (uint64_t v188 = *(void *)(v164 + 8 * v183)) != 0
                                          && (unint64_t v189 = *(unsigned __int16 *)(v188 + 2 * (HIDWORD(v181) & 0x7F)),
                                              v170 > v189)
                                          && (uint64_t v190 = v169 + 8 * v189, v190 != v168)
                                          && *(_DWORD *)(v190 + 4) == v182)
                                        {
                                          v191 = (uint64_t *)(v23[10] + 24 * v189);
                                        }
                                        else
                                        {
                                          v191 = (uint64_t *)v23[11];
                                        }
                                        if (v183 < v174
                                          && (uint64_t v192 = *(void *)(v173 + 8 * v183)) != 0
                                          && (unint64_t v193 = *(unsigned __int16 *)(v192 + 2 * (HIDWORD(v181) & 0x7F)),
                                              v179 > v193)
                                          && (uint64_t v194 = v178 + 8 * v193, v194 != v177)
                                          && *(_DWORD *)(v194 + 4) == v182)
                                        {
                                          v144 = (uint64_t *)(v25[10] + 24 * v193);
                                        }
                                        else
                                        {
                                          v144 = (uint64_t *)v25[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)75>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)75> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)75> &,SceneComponents::LayerDataExitingView<(md::MapDataType)75> &)#1}::operator()((uint64_t)&v315, v181, v187, v143, v191, v144);
                                        uint64_t v85 = v312;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v143 += 3;
        v141 += 8;
      }
      while (v141 != v142);
    }
    if (v140 != v32) {
      goto LABEL_256;
    }
    goto LABEL_202;
  }
  v311 = v27;
  uint64_t v315 = v312;
  uint64_t v316 = v313;
  uint64_t v86 = v21[7];
  uint64_t v87 = v21[8];
  if (v86 != v87)
  {
    size_t v88 = (uint64_t *)v21[10];
    do
    {
      unint64_t v90 = *(unsigned int *)(v86 + 4);
      unint64_t v91 = v90 >> 7;
      uint64_t v92 = v20[4];
      if (v90 >> 7 < (v20[5] - v92) >> 3)
      {
        uint64_t v93 = *(void *)(v92 + 8 * v91);
        if (v93)
        {
          uint64_t v94 = v90 & 0x7F;
          unint64_t v95 = *(unsigned __int16 *)(v93 + 2 * v94);
          uint64_t v97 = v20[7];
          uint64_t v96 = v20[8];
          if (v95 < (v96 - v97) >> 3)
          {
            uint64_t v98 = v97 + 8 * v95;
            if (v98 != v96 && *(_DWORD *)(v98 + 4) == v90)
            {
              uint64_t v100 = v22[4];
              unint64_t v101 = (v22[5] - v100) >> 3;
              if (v91 < v101)
              {
                uint64_t v102 = *(void *)(v100 + 8 * v91);
                if (v102)
                {
                  unint64_t v103 = *(unsigned __int16 *)(v102 + 2 * v94);
                  uint64_t v105 = v22[7];
                  uint64_t v104 = v22[8];
                  unint64_t v106 = (v104 - v105) >> 3;
                  if (v106 > v103)
                  {
                    uint64_t v107 = v105 + 8 * v103;
                    if (v107 != v104 && *(_DWORD *)(v107 + 4) == v90)
                    {
                      uint64_t v109 = v23[4];
                      unint64_t v110 = (v23[5] - v109) >> 3;
                      if (v91 < v110)
                      {
                        uint64_t v111 = *(void *)(v109 + 8 * v91);
                        if (v111)
                        {
                          unint64_t v112 = *(unsigned __int16 *)(v111 + 2 * v94);
                          uint64_t v114 = v23[7];
                          uint64_t v113 = v23[8];
                          unint64_t v115 = (v113 - v114) >> 3;
                          if (v115 > v112)
                          {
                            uint64_t v116 = v114 + 8 * v112;
                            if (v116 != v113 && *(_DWORD *)(v116 + 4) == v90)
                            {
                              uint64_t v118 = v25[4];
                              unint64_t v119 = (v25[5] - v118) >> 3;
                              if (v91 < v119)
                              {
                                uint64_t v120 = *(void *)(v118 + 8 * v91);
                                if (v120)
                                {
                                  unint64_t v121 = *(unsigned __int16 *)(v120 + 2 * v94);
                                  uint64_t v123 = v25[7];
                                  uint64_t v122 = v25[8];
                                  unint64_t v124 = (v122 - v123) >> 3;
                                  if (v124 > v121)
                                  {
                                    uint64_t v125 = v123 + 8 * v121;
                                    if (v125 != v122 && *(_DWORD *)(v125 + 4) == v90)
                                    {
                                      unint64_t v126 = *(void *)v86;
                                      uint64_t v127 = HIDWORD(*(void *)v86);
                                      unint64_t v128 = *(void *)v86 >> 39;
                                      if (v128 < v101
                                        && (uint64_t v129 = *(void *)(v100 + 8 * v128)) != 0
                                        && (unint64_t v130 = *(unsigned __int16 *)(v129 + 2 * (HIDWORD(v126) & 0x7F)), v106 > v130)
                                        && (uint64_t v131 = v105 + 8 * v130, v131 != v104)
                                        && *(_DWORD *)(v131 + 4) == v127)
                                      {
                                        v132 = (uint64_t *)(v22[10] + 24 * v130);
                                      }
                                      else
                                      {
                                        v132 = (uint64_t *)v22[11];
                                      }
                                      if (v128 < v110
                                        && (uint64_t v133 = *(void *)(v109 + 8 * v128)) != 0
                                        && (unint64_t v134 = *(unsigned __int16 *)(v133 + 2 * (HIDWORD(v126) & 0x7F)), v115 > v134)
                                        && (uint64_t v135 = v114 + 8 * v134, v135 != v113)
                                        && *(_DWORD *)(v135 + 4) == v127)
                                      {
                                        v136 = (uint64_t *)(v23[10] + 24 * v134);
                                      }
                                      else
                                      {
                                        v136 = (uint64_t *)v23[11];
                                      }
                                      if (v128 < v119
                                        && (uint64_t v137 = *(void *)(v118 + 8 * v128)) != 0
                                        && (unint64_t v138 = *(unsigned __int16 *)(v137 + 2 * (HIDWORD(v126) & 0x7F)), v124 > v138)
                                        && (uint64_t v139 = v123 + 8 * v138, v139 != v122)
                                        && *(_DWORD *)(v139 + 4) == v127)
                                      {
                                        uint64_t v89 = (uint64_t *)(v25[10] + 24 * v138);
                                      }
                                      else
                                      {
                                        uint64_t v89 = (uint64_t *)v25[11];
                                      }
                                      md::CollectMapDataLogic<(md::MapDataType)75>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)75> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)75> &,SceneComponents::LayerDataExitingView<(md::MapDataType)75> &)#1}::operator()((uint64_t)&v315, v126, v88, v132, v136, v89);
                                      uint64_t v85 = v312;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v88 += 3;
      v86 += 8;
    }
    while (v86 != v87);
  }
  unint64_t v27 = v311;
  if (v26 == v32) {
    goto LABEL_147;
  }
LABEL_90:
  if (v27 == v32)
  {
LABEL_202:
    uint64_t v315 = v85;
    uint64_t v316 = v313;
    uint64_t v195 = v23[7];
    uint64_t v196 = v23[8];
    if (v195 != v196)
    {
      v197 = (uint64_t *)v23[10];
      do
      {
        unint64_t v199 = *(unsigned int *)(v195 + 4);
        unint64_t v200 = v199 >> 7;
        uint64_t v201 = v20[4];
        if (v199 >> 7 < (v20[5] - v201) >> 3)
        {
          uint64_t v202 = *(void *)(v201 + 8 * v200);
          if (v202)
          {
            uint64_t v203 = v199 & 0x7F;
            unint64_t v204 = *(unsigned __int16 *)(v202 + 2 * v203);
            uint64_t v206 = v20[7];
            uint64_t v205 = v20[8];
            if (v204 < (v205 - v206) >> 3)
            {
              uint64_t v207 = v206 + 8 * v204;
              if (v207 != v205 && *(_DWORD *)(v207 + 4) == v199)
              {
                uint64_t v209 = v21[4];
                unint64_t v210 = (v21[5] - v209) >> 3;
                if (v200 < v210)
                {
                  uint64_t v211 = *(void *)(v209 + 8 * v200);
                  if (v211)
                  {
                    unint64_t v212 = *(unsigned __int16 *)(v211 + 2 * v203);
                    uint64_t v214 = v21[7];
                    uint64_t v213 = v21[8];
                    unint64_t v215 = (v213 - v214) >> 3;
                    if (v215 > v212)
                    {
                      uint64_t v216 = v214 + 8 * v212;
                      if (v216 != v213 && *(_DWORD *)(v216 + 4) == v199)
                      {
                        uint64_t v218 = v22[4];
                        unint64_t v219 = (v22[5] - v218) >> 3;
                        if (v200 < v219)
                        {
                          uint64_t v220 = *(void *)(v218 + 8 * v200);
                          if (v220)
                          {
                            unint64_t v221 = *(unsigned __int16 *)(v220 + 2 * v203);
                            uint64_t v223 = v22[7];
                            uint64_t v222 = v22[8];
                            unint64_t v224 = (v222 - v223) >> 3;
                            if (v224 > v221)
                            {
                              uint64_t v225 = v223 + 8 * v221;
                              if (v225 != v222 && *(_DWORD *)(v225 + 4) == v199)
                              {
                                uint64_t v227 = v25[4];
                                unint64_t v228 = (v25[5] - v227) >> 3;
                                if (v200 < v228)
                                {
                                  uint64_t v229 = *(void *)(v227 + 8 * v200);
                                  if (v229)
                                  {
                                    unint64_t v230 = *(unsigned __int16 *)(v229 + 2 * v203);
                                    uint64_t v232 = v25[7];
                                    uint64_t v231 = v25[8];
                                    unint64_t v233 = (v231 - v232) >> 3;
                                    if (v233 > v230)
                                    {
                                      uint64_t v234 = v232 + 8 * v230;
                                      if (v234 != v231 && *(_DWORD *)(v234 + 4) == v199)
                                      {
                                        unint64_t v235 = *(void *)v195;
                                        uint64_t v236 = HIDWORD(*(void *)v195);
                                        unint64_t v237 = *(void *)v195 >> 39;
                                        if (v237 < v210
                                          && (uint64_t v238 = *(void *)(v209 + 8 * v237)) != 0
                                          && (unint64_t v239 = *(unsigned __int16 *)(v238 + 2 * (HIDWORD(v235) & 0x7F)),
                                              v215 > v239)
                                          && (uint64_t v240 = v214 + 8 * v239, v240 != v213)
                                          && *(_DWORD *)(v240 + 4) == v236)
                                        {
                                          v241 = (uint64_t *)(v21[10] + 24 * v239);
                                        }
                                        else
                                        {
                                          v241 = (uint64_t *)v21[11];
                                        }
                                        if (v237 < v219
                                          && (uint64_t v242 = *(void *)(v218 + 8 * v237)) != 0
                                          && (unint64_t v243 = *(unsigned __int16 *)(v242 + 2 * (HIDWORD(v235) & 0x7F)),
                                              v224 > v243)
                                          && (uint64_t v244 = v223 + 8 * v243, v244 != v222)
                                          && *(_DWORD *)(v244 + 4) == v236)
                                        {
                                          v245 = (uint64_t *)(v22[10] + 24 * v243);
                                        }
                                        else
                                        {
                                          v245 = (uint64_t *)v22[11];
                                        }
                                        if (v237 < v228
                                          && (uint64_t v246 = *(void *)(v227 + 8 * v237)) != 0
                                          && (unint64_t v247 = *(unsigned __int16 *)(v246 + 2 * (HIDWORD(v235) & 0x7F)),
                                              v233 > v247)
                                          && (uint64_t v248 = v232 + 8 * v247, v248 != v231)
                                          && *(_DWORD *)(v248 + 4) == v236)
                                        {
                                          v198 = (uint64_t *)(v25[10] + 24 * v247);
                                        }
                                        else
                                        {
                                          v198 = (uint64_t *)v25[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)75>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)75> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)75> &,SceneComponents::LayerDataExitingView<(md::MapDataType)75> &)#1}::operator()((uint64_t)&v315, v235, v241, v245, v197, v198);
                                        uint64_t v85 = v312;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v197 += 3;
        v195 += 8;
      }
      while (v195 != v196);
    }
  }
LABEL_256:
  if ((void *)v28 == v32)
  {
    uint64_t v315 = v85;
    uint64_t v316 = v313;
    uint64_t v249 = v25[7];
    uint64_t v250 = v25[8];
    if (v249 != v250)
    {
      v251 = (uint64_t *)v25[10];
      do
      {
        unint64_t v253 = *(unsigned int *)(v249 + 4);
        unint64_t v254 = v253 >> 7;
        uint64_t v255 = v20[4];
        if (v253 >> 7 < (v20[5] - v255) >> 3)
        {
          uint64_t v256 = *(void *)(v255 + 8 * v254);
          if (v256)
          {
            uint64_t v257 = v253 & 0x7F;
            unint64_t v258 = *(unsigned __int16 *)(v256 + 2 * v257);
            uint64_t v260 = v20[7];
            uint64_t v259 = v20[8];
            if (v258 < (v259 - v260) >> 3)
            {
              uint64_t v261 = v260 + 8 * v258;
              if (v261 != v259 && *(_DWORD *)(v261 + 4) == v253)
              {
                uint64_t v263 = v21[4];
                unint64_t v264 = (v21[5] - v263) >> 3;
                if (v254 < v264)
                {
                  uint64_t v265 = *(void *)(v263 + 8 * v254);
                  if (v265)
                  {
                    unint64_t v266 = *(unsigned __int16 *)(v265 + 2 * v257);
                    uint64_t v268 = v21[7];
                    uint64_t v267 = v21[8];
                    unint64_t v269 = (v267 - v268) >> 3;
                    if (v269 > v266)
                    {
                      uint64_t v270 = v268 + 8 * v266;
                      if (v270 != v267 && *(_DWORD *)(v270 + 4) == v253)
                      {
                        uint64_t v272 = v22[4];
                        unint64_t v273 = (v22[5] - v272) >> 3;
                        if (v254 < v273)
                        {
                          uint64_t v274 = *(void *)(v272 + 8 * v254);
                          if (v274)
                          {
                            unint64_t v275 = *(unsigned __int16 *)(v274 + 2 * v257);
                            uint64_t v277 = v22[7];
                            uint64_t v276 = v22[8];
                            unint64_t v278 = (v276 - v277) >> 3;
                            if (v278 > v275)
                            {
                              uint64_t v279 = v277 + 8 * v275;
                              if (v279 != v276 && *(_DWORD *)(v279 + 4) == v253)
                              {
                                uint64_t v281 = v23[4];
                                unint64_t v282 = (v23[5] - v281) >> 3;
                                if (v254 < v282)
                                {
                                  uint64_t v283 = *(void *)(v281 + 8 * v254);
                                  if (v283)
                                  {
                                    unint64_t v284 = *(unsigned __int16 *)(v283 + 2 * v257);
                                    uint64_t v286 = v23[7];
                                    uint64_t v285 = v23[8];
                                    unint64_t v287 = (v285 - v286) >> 3;
                                    if (v287 > v284)
                                    {
                                      uint64_t v288 = v286 + 8 * v284;
                                      if (v288 != v285 && *(_DWORD *)(v288 + 4) == v253)
                                      {
                                        unint64_t v289 = *(void *)v249;
                                        uint64_t v290 = HIDWORD(*(void *)v249);
                                        unint64_t v291 = *(void *)v249 >> 39;
                                        if (v291 < v264
                                          && (uint64_t v292 = *(void *)(v263 + 8 * v291)) != 0
                                          && (unint64_t v293 = *(unsigned __int16 *)(v292 + 2 * (HIDWORD(v289) & 0x7F)),
                                              v269 > v293)
                                          && (uint64_t v294 = v268 + 8 * v293, v294 != v267)
                                          && *(_DWORD *)(v294 + 4) == v290)
                                        {
                                          v295 = (uint64_t *)(v21[10] + 24 * v293);
                                        }
                                        else
                                        {
                                          v295 = (uint64_t *)v21[11];
                                        }
                                        if (v291 < v273
                                          && (uint64_t v296 = *(void *)(v272 + 8 * v291)) != 0
                                          && (unint64_t v297 = *(unsigned __int16 *)(v296 + 2 * (HIDWORD(v289) & 0x7F)),
                                              v278 > v297)
                                          && (uint64_t v298 = v277 + 8 * v297, v298 != v276)
                                          && *(_DWORD *)(v298 + 4) == v290)
                                        {
                                          v299 = (uint64_t *)(v22[10] + 24 * v297);
                                        }
                                        else
                                        {
                                          v299 = (uint64_t *)v22[11];
                                        }
                                        if (v291 < v282
                                          && (uint64_t v300 = *(void *)(v281 + 8 * v291)) != 0
                                          && (unint64_t v301 = *(unsigned __int16 *)(v300 + 2 * (HIDWORD(v289) & 0x7F)),
                                              v287 > v301)
                                          && (uint64_t v302 = v286 + 8 * v301, v302 != v285)
                                          && *(_DWORD *)(v302 + 4) == v290)
                                        {
                                          v252 = (uint64_t *)(v23[10] + 24 * v301);
                                        }
                                        else
                                        {
                                          v252 = (uint64_t *)v23[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)75>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)75> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)75> &,SceneComponents::LayerDataExitingView<(md::MapDataType)75> &)#1}::operator()((uint64_t)&v315, v289, v295, v299, v252, v251);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v251 += 3;
        v249 += 8;
      }
      while (v249 != v250);
    }
  }
}

void sub_1A1FF6D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*v17);
  std::__split_buffer<SceneComponents::LayerDataPreviousInView<(md::MapDataType)33>>::~__split_buffer((uint64_t)va);
  std::__tree<gdc::LayerDataWithWorld>::destroy(a14);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)75>>(int8x8_t *a1)
{
  unint64_t v10 = 0xA19C6E667D4CEBF2;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xA19C6E667D4CEBF2;
    if (*(void *)&v1 <= 0xA19C6E667D4CEBF2) {
      unint64_t v3 = 0xA19C6E667D4CEBF2 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xA19C6E667D4CEBF2;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xA19C6E667D4CEBF2)
      {
        if (v5[2] == 0xA19C6E667D4CEBF2) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xA19C6E667D4CEBF2) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xA19C6E667D4CEBF2) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1FF7030(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)75>>(int8x8_t *a1)
{
  unint64_t v10 = 0xE07DAC1C2C3A7252;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xE07DAC1C2C3A7252;
    if (*(void *)&v1 <= 0xE07DAC1C2C3A7252) {
      unint64_t v3 = 0xE07DAC1C2C3A7252 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xE07DAC1C2C3A7252;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xE07DAC1C2C3A7252)
      {
        if (v5[2] == 0xE07DAC1C2C3A7252) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xE07DAC1C2C3A7252) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xE07DAC1C2C3A7252) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1FF72A0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)75>>(int8x8_t *a1)
{
  uint64_t v10 = 0x7A74CBDBCED9A99FLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x7A74CBDBCED9A99FLL;
    if (*(void *)&v1 <= 0x7A74CBDBCED9A99FuLL) {
      uint64_t v3 = 0x7A74CBDBCED9A99FuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x7A74CBDBCED9A99FLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x7A74CBDBCED9A99FLL)
      {
        if (v5[2] == 0x7A74CBDBCED9A99FLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x7A74CBDBCED9A99FLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x7A74CBDBCED9A99FLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1FF7510(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)75>>(int8x8_t *a1)
{
  unint64_t v10 = 0xBEE7CE736059D671;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xBEE7CE736059D671;
    if (*(void *)&v1 <= 0xBEE7CE736059D671) {
      unint64_t v3 = 0xBEE7CE736059D671 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xBEE7CE736059D671;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xBEE7CE736059D671)
      {
        if (v5[2] == 0xBEE7CE736059D671) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xBEE7CE736059D671) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xBEE7CE736059D671) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1FF7780(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::CollectMapDataLogic<(md::MapDataType)75>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)75> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)75> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)75> &,SceneComponents::LayerDataExitingView<(md::MapDataType)75> &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v8 = a4;
  uint64_t v9 = (uint64_t)a3;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  uint64_t v15 = (void **)(a3 + 1);
  uint64_t v14 = a3[1];
  uint64_t v16 = a4 + 1;
  uint64_t v17 = a3[2];
  *(_OWORD *)(a3 + 1) = *(_OWORD *)(a4 + 1);
  a4[1] = v14;
  a4[2] = v17;
  if (a3[2]) {
    uint64_t v18 = (uint64_t *)(a3[1] + 16);
  }
  else {
    uint64_t v18 = a3;
  }
  *uint64_t v18 = (uint64_t)v15;
  unint64_t v19 = (void *)(*v16 + 16);
  if (!v17) {
    unint64_t v19 = a4;
  }
  *unint64_t v19 = v16;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*v15);
  *(void *)uint64_t v9 = v15;
  *(void *)(v9 + 16) = 0;
  void *v15 = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy((void *)a5[1]);
  *a5 = (uint64_t)(a5 + 1);
  a5[2] = 0;
  a5[1] = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy((void *)a6[1]);
  *a6 = (uint64_t)(a6 + 1);
  a6[2] = 0;
  a6[1] = 0;
  unint64_t v20 = **(void **)a1;
  {
LABEL_152:
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
    }
  }
  uint64_t v21 = *(_WORD **)(v20 + 48);
  BOOL v22 = *(_WORD **)(v20 + 56);
  unint64_t v23 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v21 != v22)
  {
    uint64_t v24 = *(_WORD **)(v20 + 48);
    while (*v24 != 75)
    {
      v24 += 16;
      if (v24 == v22) {
        goto LABEL_18;
      }
    }
    if (v24 == v22)
    {
      unint64_t v23 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v21 != 75)
      {
        v21 += 16;
        if (v21 == v22)
        {
          uint64_t v21 = *(_WORD **)(v20 + 56);
          break;
        }
      }
      unint64_t v23 = (uint64_t *)(v21 + 4);
    }
  }
LABEL_18:
  std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>((uint64_t *)v9, (void *)*v23, v23 + 1);
  unint64_t v20 = *(void *)v9;
  double v25 = (uint64_t *)*v8;
  uint64_t v26 = (uint64_t *)*a5;
  *(void *)&long long v93 = a5;
  *((void *)&v93 + 1) = v26;
  while ((void **)v20 != v15)
  {
    if (v25 == v16)
    {
      long long v95 = v93;
      do
      {
        std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((void **)&v95, v20 + 32);
        unint64_t v43 = *(void **)(v20 + 8);
        if (v43)
        {
          do
          {
            uint64_t v44 = v43;
            unint64_t v43 = (void *)*v43;
          }
          while (v43);
        }
        else
        {
          do
          {
            uint64_t v44 = *(void **)(v20 + 16);
            BOOL v40 = *v44 == v20;
            unint64_t v20 = (unint64_t)v44;
          }
          while (!v40);
        }
        unint64_t v20 = (unint64_t)v44;
      }
      while (v44 != v15);
      break;
    }
    unint64_t v27 = *(void *)(v20 + 32);
    int v28 = *(unsigned __int8 *)(v20 + 48);
    int v29 = (char)v28;
    int v30 = *((unsigned __int8 *)v25 + 48);
    unint64_t v31 = v25[4];
    if (v28 == v30) {
      BOOL v32 = v27 < v31;
    }
    else {
      BOOL v32 = (char)v28 < (char)v30;
    }
    if (v32)
    {
      std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((void **)&v93, v20 + 32);
      size_t v33 = *(void **)(v20 + 8);
      if (v33)
      {
        do
        {
          unint64_t v20 = (unint64_t)v33;
          size_t v33 = (void *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          unint64_t v34 = v20;
          unint64_t v20 = *(void *)(v20 + 16);
        }
        while (*(void *)v20 != v34);
      }
    }
    else
    {
      BOOL v35 = v31 < v27;
      if (v29 != (char)v30) {
        BOOL v35 = (char)v30 < v29;
      }
      if (v35)
      {
        uint64_t v36 = (uint64_t *)v25[1];
        if (v36)
        {
          do
          {
            double v25 = v36;
            uint64_t v36 = (uint64_t *)*v36;
          }
          while (v36);
        }
        else
        {
          do
          {
            unint64_t v37 = v25;
            double v25 = (uint64_t *)v25[2];
          }
          while ((uint64_t *)*v25 != v37);
        }
      }
      else
      {
        uint64_t v38 = *(void **)(v20 + 8);
        if (v38)
        {
          do
          {
            uint64_t v39 = v38;
            uint64_t v38 = (void *)*v38;
          }
          while (v38);
        }
        else
        {
          do
          {
            uint64_t v39 = *(void **)(v20 + 16);
            BOOL v40 = *v39 == v20;
            unint64_t v20 = (unint64_t)v39;
          }
          while (!v40);
        }
        uint64_t v41 = (uint64_t *)v25[1];
        if (v41)
        {
          do
          {
            double v25 = v41;
            uint64_t v41 = (uint64_t *)*v41;
          }
          while (v41);
        }
        else
        {
          do
          {
            uint64_t v42 = v25;
            double v25 = (uint64_t *)v25[2];
          }
          while ((uint64_t *)*v25 != v42);
        }
        unint64_t v20 = (unint64_t)v39;
      }
    }
  }
  uint64_t v8 = (uint64_t *)*v8;
  uint64_t v45 = *(void *)v9;
  uint64_t v46 = (uint64_t *)*a6;
  *(void *)&long long v93 = a6;
  *((void *)&v93 + 1) = v46;
  while (v8 != v16)
  {
    if ((void **)v45 == v15)
    {
      long long v95 = v93;
      do
      {
        std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((void **)&v95, (uint64_t)(v8 + 4));
        uint64_t v62 = (uint64_t *)v8[1];
        if (v62)
        {
          do
          {
            unint64_t v63 = v62;
            uint64_t v62 = (uint64_t *)*v62;
          }
          while (v62);
        }
        else
        {
          do
          {
            unint64_t v63 = (uint64_t *)v8[2];
            BOOL v40 = *v63 == (void)v8;
            uint64_t v8 = v63;
          }
          while (!v40);
        }
        uint64_t v8 = v63;
      }
      while (v63 != v16);
      break;
    }
    unint64_t v47 = v8[4];
    int v48 = *((unsigned __int8 *)v8 + 48);
    int v49 = (char)v48;
    int v50 = *(unsigned __int8 *)(v45 + 48);
    unint64_t v51 = *(void *)(v45 + 32);
    if (v48 == v50) {
      BOOL v52 = v47 < v51;
    }
    else {
      BOOL v52 = (char)v48 < (char)v50;
    }
    if (v52)
    {
      std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((void **)&v93, (uint64_t)(v8 + 4));
      uint64_t v53 = (uint64_t *)v8[1];
      if (v53)
      {
        do
        {
          uint64_t v8 = v53;
          uint64_t v53 = (uint64_t *)*v53;
        }
        while (v53);
      }
      else
      {
        do
        {
          unint64_t v54 = v8;
          uint64_t v8 = (uint64_t *)v8[2];
        }
        while ((uint64_t *)*v8 != v54);
      }
    }
    else
    {
      BOOL v55 = v51 < v47;
      if (v49 != (char)v50) {
        BOOL v55 = (char)v50 < v49;
      }
      if (v55)
      {
        unint64_t v56 = *(void **)(v45 + 8);
        if (v56)
        {
          do
          {
            uint64_t v45 = (uint64_t)v56;
            unint64_t v56 = (void *)*v56;
          }
          while (v56);
        }
        else
        {
          do
          {
            uint64_t v57 = v45;
            uint64_t v45 = *(void *)(v45 + 16);
          }
          while (*(void *)v45 != v57);
        }
      }
      else
      {
        unint64_t v58 = (uint64_t *)v8[1];
        if (v58)
        {
          do
          {
            uint64_t v59 = v58;
            unint64_t v58 = (uint64_t *)*v58;
          }
          while (v58);
        }
        else
        {
          do
          {
            uint64_t v59 = (uint64_t *)v8[2];
            BOOL v40 = *v59 == (void)v8;
            uint64_t v8 = v59;
          }
          while (!v40);
        }
        uint64_t v60 = *(void **)(v45 + 8);
        if (v60)
        {
          do
          {
            uint64_t v45 = (uint64_t)v60;
            uint64_t v60 = (void *)*v60;
          }
          while (v60);
        }
        else
        {
          do
          {
            uint64_t v61 = v45;
            uint64_t v45 = *(void *)(v45 + 16);
          }
          while (*(void *)v45 != v61);
        }
        uint64_t v8 = v59;
      }
    }
  }
  if (!a5[2]) {
    goto LABEL_122;
  }
  uint64_t v64 = (void *)gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)75>>(*(int8x8_t **)(v12 + 128));
  uint64_t v94 = a2;
  unint64_t v65 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v64 + 4, (uint64_t)&v94);
  if (v66)
  {
    unint64_t v20 = v64[11];
    unint64_t v68 = v64[12];
    if (v20 >= v68)
    {
      uint64_t v70 = (char *)v64[10];
      uint64_t v16 = (uint64_t *)(v20 - (void)v70);
      uint64_t v71 = v20 - (void)v70 + 1;
      if (v71 < 0) {
        goto LABEL_154;
      }
      unint64_t v72 = v68 - (void)v70;
      if (2 * v72 > v71) {
        uint64_t v71 = 2 * v72;
      }
      if (v72 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v73 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v73 = v71;
      }
      if (v73) {
        uint64_t v74 = (char *)operator new(v73);
      }
      else {
        uint64_t v74 = 0;
      }
      uint64_t v75 = &v74[v73];
      uint64_t v69 = (uint64_t)v16 + (void)v74 + 1;
      uint64_t v76 = &v70[-v20];
      if (v70 == (char *)v20) {
        uint64_t v76 = 0;
      }
      v64[10] = (char *)v16 + (void)v74 + (unint64_t)v76;
      v64[11] = v69;
      v64[12] = v75;
      if (v70) {
        operator delete(v70);
      }
    }
    else
    {
      uint64_t v69 = v20 + 1;
    }
    v64[11] = v69;
    uint64_t v9 = v64[31];
    goto LABEL_118;
  }
  uint64_t v9 = v64[31];
  if (v64[10] + (((uint64_t)v65 - v64[7]) >> 3) == v64[11])
  {
LABEL_118:
    uint64_t v8 = &v94;
    a5 = (uint64_t *)v64[22];
    if (a5)
    {
      unint64_t v20 = 1;
      while (1)
      {
        *(void *)&long long v95 = &v94;
        *((void *)&v95 + 1) = 1;
        *(void *)&long long v93 = v9;
        uint64_t v77 = a5[6];
        if (!v77) {
          goto LABEL_151;
        }
        (*(void (**)(uint64_t, long long *, long long *))(*(void *)v77 + 48))(v77, &v93, &v95);
        a5 = (uint64_t *)*a5;
        if (!a5) {
          goto LABEL_122;
        }
      }
    }
    goto LABEL_122;
  }
  a5 = (uint64_t *)v64[16];
  if (a5)
  {
    uint64_t v8 = &v94;
    unint64_t v20 = 1;
    do
    {
      *(void *)&long long v95 = &v94;
      *((void *)&v95 + 1) = 1;
      *(void *)&long long v93 = v9;
      uint64_t v67 = a5[6];
      if (!v67) {
        goto LABEL_151;
      }
      (*(void (**)(uint64_t, long long *, long long *))(*(void *)v67 + 48))(v67, &v93, &v95);
      a5 = (uint64_t *)*a5;
    }
    while (a5);
  }
LABEL_122:
  if (!a6[2]) {
    return;
  }
  unint64_t v78 = (void *)gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)75>>(*(int8x8_t **)(v12 + 128));
  uint64_t v94 = a2;
  uint64_t v79 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v78 + 4, (uint64_t)&v94);
  if (v80)
  {
    unint64_t v83 = (unsigned char *)v78[11];
    unint64_t v82 = v78[12];
    if ((unint64_t)v83 < v82)
    {
      uint64_t v84 = (uint64_t)(v83 + 1);
LABEL_145:
      v78[11] = v84;
      a2 = v78[31];
      goto LABEL_146;
    }
    uint64_t v85 = (char *)v78[10];
    uint64_t v8 = (uint64_t *)(v83 - v85);
    uint64_t v86 = v83 - v85 + 1;
    if (v86 >= 0)
    {
      unint64_t v87 = v82 - (void)v85;
      if (2 * v87 > v86) {
        uint64_t v86 = 2 * v87;
      }
      if (v87 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v88 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v88 = v86;
      }
      if (v88) {
        uint64_t v89 = (char *)operator new(v88);
      }
      else {
        uint64_t v89 = 0;
      }
      unint64_t v90 = &v89[v88];
      uint64_t v84 = (uint64_t)v8 + (void)v89 + 1;
      unint64_t v91 = (char *)(v85 - v83);
      if (v85 == v83) {
        unint64_t v91 = 0;
      }
      v78[10] = (char *)v8 + (void)v89 + (unint64_t)v91;
      v78[11] = v84;
      v78[12] = v90;
      if (v85) {
        operator delete(v85);
      }
      goto LABEL_145;
    }
LABEL_154:
    abort();
  }
  a2 = v78[31];
  if (v78[10] + (((uint64_t)v79 - v78[7]) >> 3) != v78[11])
  {
    a6 = (uint64_t *)v78[16];
    if (a6)
    {
      a5 = &v94;
      uint64_t v9 = 1;
      while (1)
      {
        *(void *)&long long v95 = &v94;
        *((void *)&v95 + 1) = 1;
        *(void *)&long long v93 = a2;
        uint64_t v81 = a6[6];
        if (!v81) {
          break;
        }
        (*(void (**)(uint64_t, long long *, long long *))(*(void *)v81 + 48))(v81, &v93, &v95);
        a6 = (uint64_t *)*a6;
        if (!a6) {
          return;
        }
      }
LABEL_151:
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_152;
    }
    return;
  }
LABEL_146:
  a5 = &v94;
  a6 = (uint64_t *)v78[22];
  if (a6)
  {
    uint64_t v9 = 1;
    while (1)
    {
      *(void *)&long long v95 = &v94;
      *((void *)&v95 + 1) = 1;
      *(void *)&long long v93 = a2;
      uint64_t v92 = a6[6];
      if (!v92) {
        break;
      }
      (*(void (**)(uint64_t, long long *, long long *))(*(void *)v92 + 48))(v92, &v93, &v95);
      a6 = (uint64_t *)*a6;
      if (!a6) {
        return;
      }
    }
    goto LABEL_151;
  }
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)75>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)75>>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(void **)(v15 - 24), (void *)(v15 - 16));
    uint64_t v15 = a1[11];
  }
  uint64_t v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(v15 - 16));
  a1[11] = v16;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)75>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)75>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)75>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)75>>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(void **)(v15 - 24), (void *)(v15 - 16));
    uint64_t v15 = a1[11];
  }
  uint64_t v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(v15 - 16));
  a1[11] = v16;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)75>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)75>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)75>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)75>>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_WORD *)(v14 + 2 * v7) = *(_WORD *)(v15 - 2);
  a1[11] = v15 - 2;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)75>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)75>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)75>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)75>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)75>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)75>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)75>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)75>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)75>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)75>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)75>,md::CollectMapDataContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)75>,md::CollectMapDataContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) != 0x4B05BEFA631D0889 || !*(void *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  uint64_t v4 = *(void **)(a2 + 8);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_27;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v5 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v7 = 0x99BED48DEFBBD82BLL % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_27;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_27;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_25;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_27;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_27;
    }
LABEL_14:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_27;
    }
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_14;
  }
LABEL_25:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v14 = *(void *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v14 = 0;
LABEL_28:
  uint64_t v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 160))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)75>,md::CollectMapDataContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x4B05BEFA631D0889 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)75>,md::CollectMapDataContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x4B05BEFA631D0889 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 144))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)75>,md::CollectMapDataContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x4B05BEFA631D0889 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 136))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)75>,md::CollectMapDataContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0x4B05BEFA631D0889 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 128))(result);
}

void md::Logic<md::CollectMapDataLogic<(md::MapDataType)75>,md::CollectMapDataContext<(md::MapDataType)75>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A1FF9058(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t gdc::ObjectHolder<md::CollectMapDataContext<(md::MapDataType)75>>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::CollectMapDataContext<(md::MapDataType)75>>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF5148A8;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0xC400A2AC0F1);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::CollectMapDataContext<(md::MapDataType)75>>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF5148A8;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0xC400A2AC0F1);
  }
  return a1;
}

uint64_t md::CollectMapDataLogic<(md::MapDataType)75>::didBecomeInactive(uint64_t result)
{
  uint64_t v1 = result;
  if (*(_WORD *)(result + 120) || *(_WORD *)(result + 122) || *(_DWORD *)(result + 124) != -1)
  {
    __n128 result = gdc::Registry::destroy(*(void *)(result + 128), *(void *)(result + 120));
    *(void *)(v1 + 120) = 0xFFFFFFFF00000000;
  }
  return result;
}

void md::CollectMapDataLogic<(md::MapDataType)75>::~CollectMapDataLogic(uint64_t a1)
{
  *(void *)a1 = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 80));
  JUMPOUT(0x1A6239270);
}

uint64_t md::CollectMapDataLogic<(md::MapDataType)75>::~CollectMapDataLogic(uint64_t a1)
{
  *(void *)a1 = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 80));
  return a1;
}

void md::Logic<md::CollectMapDataLogic<(md::MapDataType)79>,md::CollectMapDataContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint8x8_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint8x8_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void md::CollectMapDataLogic<(md::MapDataType)79>::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint8x8_t v5 = (void *)gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)79>>(*(int8x8_t **)(a1 + 128));
  unint64_t v6 = v5;
  if (v5[29])
  {
    char v7 = (void *)v5[28];
    if (v7)
    {
      uint64_t v8 = v5[31];
      uint64_t v9 = v5[7];
      uint64_t v10 = (v5[8] - v9) >> 3;
      do
      {
        uint64_t v315 = v9;
        uint64_t v316 = v10;
        uint64_t v314 = v8;
        uint64_t v11 = v7[6];
        if (!v11) {
          goto LABEL_312;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 48))(v11, &v314, &v315);
        char v7 = (void *)*v7;
      }
      while (v7);
    }
  }
  v6[8] = v6[7];
  v6[11] = v6[10];
  uint64_t v12 = (void *)gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)79>>(*(int8x8_t **)(a1 + 128));
  uint64_t v13 = v12;
  if (v12[29])
  {
    uint64_t v14 = (void *)v12[28];
    if (v14)
    {
      uint64_t v15 = v12[31];
      uint64_t v16 = v12[7];
      uint64_t v17 = (v12[8] - v16) >> 3;
      while (1)
      {
        uint64_t v315 = v16;
        uint64_t v316 = v17;
        uint64_t v314 = v15;
        uint64_t v18 = v14[6];
        if (!v18) {
          break;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v18 + 48))(v18, &v314, &v315);
        uint64_t v14 = (void *)*v14;
        if (!v14) {
          goto LABEL_11;
        }
      }
LABEL_312:
      std::__throw_bad_function_call[abi:nn180100]();
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
      return;
    }
  }
LABEL_11:
  v13[8] = v13[7];
  v13[11] = v13[10];
  uint64_t v312 = *a3;
  unint64_t v19 = *(int8x8_t **)(a1 + 128);
  if (!*(_WORD *)(a1 + 120) && !*(_WORD *)(a1 + 122) && *(_DWORD *)(a1 + 124) == -1) {
    gdc::Registry::create(*(gdc::Registry **)(a1 + 128));
  }
  uint64_t v313 = a1;
  uint64_t v20 = (void *)gdc::Registry::storage<SceneComponents::LayerDataActive<(md::MapDataType)79>>(v19);
  uint64_t v21 = (void *)gdc::Registry::storage<SceneComponents::LayerDataInView<(md::MapDataType)79>>(v19);
  BOOL v22 = (void *)gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)79>>(v19);
  unint64_t v23 = (void *)gdc::Registry::storage<SceneComponents::LayerDataEnteringView<(md::MapDataType)79>>(v19);
  uint64_t v24 = gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)79>>(v19);
  double v25 = (void *)v24;
  uint64_t v26 = v22 + 4;
  unint64_t v27 = v23 + 4;
  uint64_t v28 = v24 + 32;
  uint64_t v30 = v20[7];
  uint64_t v29 = v20[8];
  if (v21[8] - v21[7] >= (unint64_t)(v29 - v30)) {
    unint64_t v31 = v20 + 4;
  }
  else {
    unint64_t v31 = v21 + 4;
  }
  if (v22[8] - v22[7] < v31[4] - v31[3]) {
    unint64_t v31 = v22 + 4;
  }
  if (v23[8] - v23[7] < v31[4] - v31[3]) {
    unint64_t v31 = v23 + 4;
  }
  if (*(void *)(v24 + 64) - *(void *)(v24 + 56) >= v31[4] - v31[3]) {
    BOOL v32 = v31;
  }
  else {
    BOOL v32 = (void *)(v24 + 32);
  }
  if (v20 + 4 == v32)
  {
    uint64_t v309 = v24 + 32;
    uint64_t v315 = v312;
    uint64_t v316 = v313;
    while (v30 != v29)
    {
      unint64_t v34 = *(unsigned int *)(v30 + 4);
      unint64_t v35 = v34 >> 7;
      uint64_t v36 = v21[4];
      unint64_t v37 = (v21[5] - v36) >> 3;
      if (v34 >> 7 < v37)
      {
        uint64_t v38 = *(void *)(v36 + 8 * v35);
        if (v38)
        {
          uint64_t v39 = v34 & 0x7F;
          unint64_t v40 = *(unsigned __int16 *)(v38 + 2 * v39);
          uint64_t v41 = v21[7];
          uint64_t v42 = v21[8];
          unint64_t v43 = (v42 - v41) >> 3;
          if (v43 > v40)
          {
            uint64_t v44 = v41 + 8 * v40;
            if (v44 != v42 && *(_DWORD *)(v44 + 4) == v34)
            {
              uint64_t v46 = v22[4];
              unint64_t v47 = (v22[5] - v46) >> 3;
              if (v35 < v47)
              {
                uint64_t v48 = *(void *)(v46 + 8 * v35);
                if (v48)
                {
                  unint64_t v49 = *(unsigned __int16 *)(v48 + 2 * v39);
                  uint64_t v51 = v22[7];
                  uint64_t v50 = v22[8];
                  unint64_t v52 = (v50 - v51) >> 3;
                  if (v52 > v49)
                  {
                    uint64_t v53 = v51 + 8 * v49;
                    if (v53 != v50 && *(_DWORD *)(v53 + 4) == v34)
                    {
                      uint64_t v55 = v23[4];
                      unint64_t v56 = (v23[5] - v55) >> 3;
                      if (v35 < v56)
                      {
                        uint64_t v57 = *(void *)(v55 + 8 * v35);
                        if (v57)
                        {
                          unint64_t v58 = *(unsigned __int16 *)(v57 + 2 * v39);
                          uint64_t v59 = v23[7];
                          v310 = v27;
                          uint64_t v308 = v23[8];
                          unint64_t v307 = (v308 - v59) >> 3;
                          if (v307 > v58)
                          {
                            uint64_t v60 = v59 + 8 * v58;
                            if (v60 != v308 && *(_DWORD *)(v60 + 4) == v34)
                            {
                              uint64_t v306 = v25[4];
                              unint64_t v305 = (v25[5] - v306) >> 3;
                              if (v35 < v305)
                              {
                                uint64_t v62 = *(void *)(v306 + 8 * v35);
                                if (v62)
                                {
                                  unint64_t v63 = *(unsigned __int16 *)(v62 + 2 * v39);
                                  uint64_t v303 = v25[7];
                                  uint64_t v304 = v25[8];
                                  if ((v304 - v303) >> 3 > v63)
                                  {
                                    uint64_t v64 = v303 + 8 * v63;
                                    if (v64 != v304 && *(_DWORD *)(v64 + 4) == v34)
                                    {
                                      unint64_t v65 = *(void *)v30;
                                      uint64_t v66 = HIDWORD(*(void *)v30);
                                      unint64_t v67 = *(void *)v30 >> 39;
                                      if (v67 < v37
                                        && (uint64_t v68 = *(void *)(v36 + 8 * v67)) != 0
                                        && (unint64_t v69 = *(unsigned __int16 *)(v68 + 2 * (HIDWORD(v65) & 0x7F)), v43 > v69)
                                        && (uint64_t v70 = v41 + 8 * v69, v70 != v42)
                                        && *(_DWORD *)(v70 + 4) == v66)
                                      {
                                        uint64_t v71 = (uint64_t *)(v21[10] + 24 * v69);
                                      }
                                      else
                                      {
                                        uint64_t v71 = (uint64_t *)v21[11];
                                      }
                                      if (v67 < v47
                                        && (uint64_t v72 = *(void *)(v46 + 8 * v67)) != 0
                                        && (unint64_t v73 = *(unsigned __int16 *)(v72 + 2 * (HIDWORD(v65) & 0x7F)), v52 > v73)
                                        && (uint64_t v74 = v51 + 8 * v73, v74 != v50)
                                        && *(_DWORD *)(v74 + 4) == v66)
                                      {
                                        uint64_t v75 = (uint64_t *)(v22[10] + 24 * v73);
                                      }
                                      else
                                      {
                                        uint64_t v75 = (uint64_t *)v22[11];
                                      }
                                      uint64_t v76 = HIDWORD(*(void *)v30);
                                      if (v67 < v56
                                        && (uint64_t v77 = *(void *)(v55 + 8 * v67)) != 0
                                        && (unint64_t v78 = *(unsigned __int16 *)(v77 + 2 * (HIDWORD(v65) & 0x7F)), v307 > v78)
                                        && (uint64_t v79 = v59 + 8 * v78, v79 != v308)
                                        && *(_DWORD *)(v79 + 4) == v76)
                                      {
                                        unint64_t v80 = (v304 - v303) >> 3;
                                        uint64_t v81 = (uint64_t *)(v23[10] + 24 * v78);
                                      }
                                      else
                                      {
                                        unint64_t v80 = (v304 - v303) >> 3;
                                        uint64_t v81 = (uint64_t *)v23[11];
                                      }
                                      if (v67 < v305
                                        && (uint64_t v82 = *(void *)(v306 + 8 * v67)) != 0
                                        && (unint64_t v83 = *(unsigned __int16 *)(v82 + 2 * (HIDWORD(v65) & 0x7F)), v80 > v83)
                                        && (uint64_t v84 = v303 + 8 * v83, v84 != v304)
                                        && *(_DWORD *)(v84 + 4) == v76)
                                      {
                                        size_t v33 = (uint64_t *)(v25[10] + 24 * v83);
                                      }
                                      else
                                      {
                                        size_t v33 = (uint64_t *)v25[11];
                                      }
                                      md::CollectMapDataLogic<(md::MapDataType)79>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)79> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)79> &,SceneComponents::LayerDataExitingView<(md::MapDataType)79> &)#1}::operator()((uint64_t)&v315, v65, v71, v75, v81, v33);
                                      unint64_t v27 = v310;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v30 += 8;
    }
    uint64_t v28 = v309;
  }
  uint64_t v85 = v312;
  if (v21 + 4 != v32)
  {
    if (v26 != v32) {
      goto LABEL_90;
    }
LABEL_147:
    v140 = v27;
    uint64_t v315 = v85;
    uint64_t v316 = v313;
    uint64_t v141 = v22[7];
    uint64_t v142 = v22[8];
    if (v141 != v142)
    {
      v143 = (uint64_t *)v22[10];
      do
      {
        unint64_t v145 = *(unsigned int *)(v141 + 4);
        unint64_t v146 = v145 >> 7;
        uint64_t v147 = v20[4];
        if (v145 >> 7 < (v20[5] - v147) >> 3)
        {
          uint64_t v148 = *(void *)(v147 + 8 * v146);
          if (v148)
          {
            uint64_t v149 = v145 & 0x7F;
            unint64_t v150 = *(unsigned __int16 *)(v148 + 2 * v149);
            uint64_t v152 = v20[7];
            uint64_t v151 = v20[8];
            if (v150 < (v151 - v152) >> 3)
            {
              uint64_t v153 = v152 + 8 * v150;
              if (v153 != v151 && *(_DWORD *)(v153 + 4) == v145)
              {
                uint64_t v155 = v21[4];
                unint64_t v156 = (v21[5] - v155) >> 3;
                if (v146 < v156)
                {
                  uint64_t v157 = *(void *)(v155 + 8 * v146);
                  if (v157)
                  {
                    unint64_t v158 = *(unsigned __int16 *)(v157 + 2 * v149);
                    uint64_t v160 = v21[7];
                    uint64_t v159 = v21[8];
                    unint64_t v161 = (v159 - v160) >> 3;
                    if (v161 > v158)
                    {
                      uint64_t v162 = v160 + 8 * v158;
                      if (v162 != v159 && *(_DWORD *)(v162 + 4) == v145)
                      {
                        uint64_t v164 = v23[4];
                        unint64_t v165 = (v23[5] - v164) >> 3;
                        if (v146 < v165)
                        {
                          uint64_t v166 = *(void *)(v164 + 8 * v146);
                          if (v166)
                          {
                            unint64_t v167 = *(unsigned __int16 *)(v166 + 2 * v149);
                            uint64_t v169 = v23[7];
                            uint64_t v168 = v23[8];
                            unint64_t v170 = (v168 - v169) >> 3;
                            if (v170 > v167)
                            {
                              uint64_t v171 = v169 + 8 * v167;
                              if (v171 != v168 && *(_DWORD *)(v171 + 4) == v145)
                              {
                                uint64_t v173 = v25[4];
                                unint64_t v174 = (v25[5] - v173) >> 3;
                                if (v146 < v174)
                                {
                                  uint64_t v175 = *(void *)(v173 + 8 * v146);
                                  if (v175)
                                  {
                                    unint64_t v176 = *(unsigned __int16 *)(v175 + 2 * v149);
                                    uint64_t v178 = v25[7];
                                    uint64_t v177 = v25[8];
                                    unint64_t v179 = (v177 - v178) >> 3;
                                    if (v179 > v176)
                                    {
                                      uint64_t v180 = v178 + 8 * v176;
                                      if (v180 != v177 && *(_DWORD *)(v180 + 4) == v145)
                                      {
                                        unint64_t v181 = *(void *)v141;
                                        uint64_t v182 = HIDWORD(*(void *)v141);
                                        unint64_t v183 = *(void *)v141 >> 39;
                                        if (v183 < v156
                                          && (uint64_t v184 = *(void *)(v155 + 8 * v183)) != 0
                                          && (unint64_t v185 = *(unsigned __int16 *)(v184 + 2 * (HIDWORD(v181) & 0x7F)),
                                              v161 > v185)
                                          && (uint64_t v186 = v160 + 8 * v185, v186 != v159)
                                          && *(_DWORD *)(v186 + 4) == v182)
                                        {
                                          v187 = (uint64_t *)(v21[10] + 24 * v185);
                                        }
                                        else
                                        {
                                          v187 = (uint64_t *)v21[11];
                                        }
                                        if (v183 < v165
                                          && (uint64_t v188 = *(void *)(v164 + 8 * v183)) != 0
                                          && (unint64_t v189 = *(unsigned __int16 *)(v188 + 2 * (HIDWORD(v181) & 0x7F)),
                                              v170 > v189)
                                          && (uint64_t v190 = v169 + 8 * v189, v190 != v168)
                                          && *(_DWORD *)(v190 + 4) == v182)
                                        {
                                          v191 = (uint64_t *)(v23[10] + 24 * v189);
                                        }
                                        else
                                        {
                                          v191 = (uint64_t *)v23[11];
                                        }
                                        if (v183 < v174
                                          && (uint64_t v192 = *(void *)(v173 + 8 * v183)) != 0
                                          && (unint64_t v193 = *(unsigned __int16 *)(v192 + 2 * (HIDWORD(v181) & 0x7F)),
                                              v179 > v193)
                                          && (uint64_t v194 = v178 + 8 * v193, v194 != v177)
                                          && *(_DWORD *)(v194 + 4) == v182)
                                        {
                                          v144 = (uint64_t *)(v25[10] + 24 * v193);
                                        }
                                        else
                                        {
                                          v144 = (uint64_t *)v25[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)79>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)79> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)79> &,SceneComponents::LayerDataExitingView<(md::MapDataType)79> &)#1}::operator()((uint64_t)&v315, v181, v187, v143, v191, v144);
                                        uint64_t v85 = v312;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v143 += 3;
        v141 += 8;
      }
      while (v141 != v142);
    }
    if (v140 != v32) {
      goto LABEL_256;
    }
    goto LABEL_202;
  }
  v311 = v27;
  uint64_t v315 = v312;
  uint64_t v316 = v313;
  uint64_t v86 = v21[7];
  uint64_t v87 = v21[8];
  if (v86 != v87)
  {
    size_t v88 = (uint64_t *)v21[10];
    do
    {
      unint64_t v90 = *(unsigned int *)(v86 + 4);
      unint64_t v91 = v90 >> 7;
      uint64_t v92 = v20[4];
      if (v90 >> 7 < (v20[5] - v92) >> 3)
      {
        uint64_t v93 = *(void *)(v92 + 8 * v91);
        if (v93)
        {
          uint64_t v94 = v90 & 0x7F;
          unint64_t v95 = *(unsigned __int16 *)(v93 + 2 * v94);
          uint64_t v97 = v20[7];
          uint64_t v96 = v20[8];
          if (v95 < (v96 - v97) >> 3)
          {
            uint64_t v98 = v97 + 8 * v95;
            if (v98 != v96 && *(_DWORD *)(v98 + 4) == v90)
            {
              uint64_t v100 = v22[4];
              unint64_t v101 = (v22[5] - v100) >> 3;
              if (v91 < v101)
              {
                uint64_t v102 = *(void *)(v100 + 8 * v91);
                if (v102)
                {
                  unint64_t v103 = *(unsigned __int16 *)(v102 + 2 * v94);
                  uint64_t v105 = v22[7];
                  uint64_t v104 = v22[8];
                  unint64_t v106 = (v104 - v105) >> 3;
                  if (v106 > v103)
                  {
                    uint64_t v107 = v105 + 8 * v103;
                    if (v107 != v104 && *(_DWORD *)(v107 + 4) == v90)
                    {
                      uint64_t v109 = v23[4];
                      unint64_t v110 = (v23[5] - v109) >> 3;
                      if (v91 < v110)
                      {
                        uint64_t v111 = *(void *)(v109 + 8 * v91);
                        if (v111)
                        {
                          unint64_t v112 = *(unsigned __int16 *)(v111 + 2 * v94);
                          uint64_t v114 = v23[7];
                          uint64_t v113 = v23[8];
                          unint64_t v115 = (v113 - v114) >> 3;
                          if (v115 > v112)
                          {
                            uint64_t v116 = v114 + 8 * v112;
                            if (v116 != v113 && *(_DWORD *)(v116 + 4) == v90)
                            {
                              uint64_t v118 = v25[4];
                              unint64_t v119 = (v25[5] - v118) >> 3;
                              if (v91 < v119)
                              {
                                uint64_t v120 = *(void *)(v118 + 8 * v91);
                                if (v120)
                                {
                                  unint64_t v121 = *(unsigned __int16 *)(v120 + 2 * v94);
                                  uint64_t v123 = v25[7];
                                  uint64_t v122 = v25[8];
                                  unint64_t v124 = (v122 - v123) >> 3;
                                  if (v124 > v121)
                                  {
                                    uint64_t v125 = v123 + 8 * v121;
                                    if (v125 != v122 && *(_DWORD *)(v125 + 4) == v90)
                                    {
                                      unint64_t v126 = *(void *)v86;
                                      uint64_t v127 = HIDWORD(*(void *)v86);
                                      unint64_t v128 = *(void *)v86 >> 39;
                                      if (v128 < v101
                                        && (uint64_t v129 = *(void *)(v100 + 8 * v128)) != 0
                                        && (unint64_t v130 = *(unsigned __int16 *)(v129 + 2 * (HIDWORD(v126) & 0x7F)), v106 > v130)
                                        && (uint64_t v131 = v105 + 8 * v130, v131 != v104)
                                        && *(_DWORD *)(v131 + 4) == v127)
                                      {
                                        v132 = (uint64_t *)(v22[10] + 24 * v130);
                                      }
                                      else
                                      {
                                        v132 = (uint64_t *)v22[11];
                                      }
                                      if (v128 < v110
                                        && (uint64_t v133 = *(void *)(v109 + 8 * v128)) != 0
                                        && (unint64_t v134 = *(unsigned __int16 *)(v133 + 2 * (HIDWORD(v126) & 0x7F)), v115 > v134)
                                        && (uint64_t v135 = v114 + 8 * v134, v135 != v113)
                                        && *(_DWORD *)(v135 + 4) == v127)
                                      {
                                        v136 = (uint64_t *)(v23[10] + 24 * v134);
                                      }
                                      else
                                      {
                                        v136 = (uint64_t *)v23[11];
                                      }
                                      if (v128 < v119
                                        && (uint64_t v137 = *(void *)(v118 + 8 * v128)) != 0
                                        && (unint64_t v138 = *(unsigned __int16 *)(v137 + 2 * (HIDWORD(v126) & 0x7F)), v124 > v138)
                                        && (uint64_t v139 = v123 + 8 * v138, v139 != v122)
                                        && *(_DWORD *)(v139 + 4) == v127)
                                      {
                                        uint64_t v89 = (uint64_t *)(v25[10] + 24 * v138);
                                      }
                                      else
                                      {
                                        uint64_t v89 = (uint64_t *)v25[11];
                                      }
                                      md::CollectMapDataLogic<(md::MapDataType)79>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)79> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)79> &,SceneComponents::LayerDataExitingView<(md::MapDataType)79> &)#1}::operator()((uint64_t)&v315, v126, v88, v132, v136, v89);
                                      uint64_t v85 = v312;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v88 += 3;
      v86 += 8;
    }
    while (v86 != v87);
  }
  unint64_t v27 = v311;
  if (v26 == v32) {
    goto LABEL_147;
  }
LABEL_90:
  if (v27 == v32)
  {
LABEL_202:
    uint64_t v315 = v85;
    uint64_t v316 = v313;
    uint64_t v195 = v23[7];
    uint64_t v196 = v23[8];
    if (v195 != v196)
    {
      v197 = (uint64_t *)v23[10];
      do
      {
        unint64_t v199 = *(unsigned int *)(v195 + 4);
        unint64_t v200 = v199 >> 7;
        uint64_t v201 = v20[4];
        if (v199 >> 7 < (v20[5] - v201) >> 3)
        {
          uint64_t v202 = *(void *)(v201 + 8 * v200);
          if (v202)
          {
            uint64_t v203 = v199 & 0x7F;
            unint64_t v204 = *(unsigned __int16 *)(v202 + 2 * v203);
            uint64_t v206 = v20[7];
            uint64_t v205 = v20[8];
            if (v204 < (v205 - v206) >> 3)
            {
              uint64_t v207 = v206 + 8 * v204;
              if (v207 != v205 && *(_DWORD *)(v207 + 4) == v199)
              {
                uint64_t v209 = v21[4];
                unint64_t v210 = (v21[5] - v209) >> 3;
                if (v200 < v210)
                {
                  uint64_t v211 = *(void *)(v209 + 8 * v200);
                  if (v211)
                  {
                    unint64_t v212 = *(unsigned __int16 *)(v211 + 2 * v203);
                    uint64_t v214 = v21[7];
                    uint64_t v213 = v21[8];
                    unint64_t v215 = (v213 - v214) >> 3;
                    if (v215 > v212)
                    {
                      uint64_t v216 = v214 + 8 * v212;
                      if (v216 != v213 && *(_DWORD *)(v216 + 4) == v199)
                      {
                        uint64_t v218 = v22[4];
                        unint64_t v219 = (v22[5] - v218) >> 3;
                        if (v200 < v219)
                        {
                          uint64_t v220 = *(void *)(v218 + 8 * v200);
                          if (v220)
                          {
                            unint64_t v221 = *(unsigned __int16 *)(v220 + 2 * v203);
                            uint64_t v223 = v22[7];
                            uint64_t v222 = v22[8];
                            unint64_t v224 = (v222 - v223) >> 3;
                            if (v224 > v221)
                            {
                              uint64_t v225 = v223 + 8 * v221;
                              if (v225 != v222 && *(_DWORD *)(v225 + 4) == v199)
                              {
                                uint64_t v227 = v25[4];
                                unint64_t v228 = (v25[5] - v227) >> 3;
                                if (v200 < v228)
                                {
                                  uint64_t v229 = *(void *)(v227 + 8 * v200);
                                  if (v229)
                                  {
                                    unint64_t v230 = *(unsigned __int16 *)(v229 + 2 * v203);
                                    uint64_t v232 = v25[7];
                                    uint64_t v231 = v25[8];
                                    unint64_t v233 = (v231 - v232) >> 3;
                                    if (v233 > v230)
                                    {
                                      uint64_t v234 = v232 + 8 * v230;
                                      if (v234 != v231 && *(_DWORD *)(v234 + 4) == v199)
                                      {
                                        unint64_t v235 = *(void *)v195;
                                        uint64_t v236 = HIDWORD(*(void *)v195);
                                        unint64_t v237 = *(void *)v195 >> 39;
                                        if (v237 < v210
                                          && (uint64_t v238 = *(void *)(v209 + 8 * v237)) != 0
                                          && (unint64_t v239 = *(unsigned __int16 *)(v238 + 2 * (HIDWORD(v235) & 0x7F)),
                                              v215 > v239)
                                          && (uint64_t v240 = v214 + 8 * v239, v240 != v213)
                                          && *(_DWORD *)(v240 + 4) == v236)
                                        {
                                          v241 = (uint64_t *)(v21[10] + 24 * v239);
                                        }
                                        else
                                        {
                                          v241 = (uint64_t *)v21[11];
                                        }
                                        if (v237 < v219
                                          && (uint64_t v242 = *(void *)(v218 + 8 * v237)) != 0
                                          && (unint64_t v243 = *(unsigned __int16 *)(v242 + 2 * (HIDWORD(v235) & 0x7F)),
                                              v224 > v243)
                                          && (uint64_t v244 = v223 + 8 * v243, v244 != v222)
                                          && *(_DWORD *)(v244 + 4) == v236)
                                        {
                                          v245 = (uint64_t *)(v22[10] + 24 * v243);
                                        }
                                        else
                                        {
                                          v245 = (uint64_t *)v22[11];
                                        }
                                        if (v237 < v228
                                          && (uint64_t v246 = *(void *)(v227 + 8 * v237)) != 0
                                          && (unint64_t v247 = *(unsigned __int16 *)(v246 + 2 * (HIDWORD(v235) & 0x7F)),
                                              v233 > v247)
                                          && (uint64_t v248 = v232 + 8 * v247, v248 != v231)
                                          && *(_DWORD *)(v248 + 4) == v236)
                                        {
                                          v198 = (uint64_t *)(v25[10] + 24 * v247);
                                        }
                                        else
                                        {
                                          v198 = (uint64_t *)v25[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)79>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)79> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)79> &,SceneComponents::LayerDataExitingView<(md::MapDataType)79> &)#1}::operator()((uint64_t)&v315, v235, v241, v245, v197, v198);
                                        uint64_t v85 = v312;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v197 += 3;
        v195 += 8;
      }
      while (v195 != v196);
    }
  }
LABEL_256:
  if ((void *)v28 == v32)
  {
    uint64_t v315 = v85;
    uint64_t v316 = v313;
    uint64_t v249 = v25[7];
    uint64_t v250 = v25[8];
    if (v249 != v250)
    {
      v251 = (uint64_t *)v25[10];
      do
      {
        unint64_t v253 = *(unsigned int *)(v249 + 4);
        unint64_t v254 = v253 >> 7;
        uint64_t v255 = v20[4];
        if (v253 >> 7 < (v20[5] - v255) >> 3)
        {
          uint64_t v256 = *(void *)(v255 + 8 * v254);
          if (v256)
          {
            uint64_t v257 = v253 & 0x7F;
            unint64_t v258 = *(unsigned __int16 *)(v256 + 2 * v257);
            uint64_t v260 = v20[7];
            uint64_t v259 = v20[8];
            if (v258 < (v259 - v260) >> 3)
            {
              uint64_t v261 = v260 + 8 * v258;
              if (v261 != v259 && *(_DWORD *)(v261 + 4) == v253)
              {
                uint64_t v263 = v21[4];
                unint64_t v264 = (v21[5] - v263) >> 3;
                if (v254 < v264)
                {
                  uint64_t v265 = *(void *)(v263 + 8 * v254);
                  if (v265)
                  {
                    unint64_t v266 = *(unsigned __int16 *)(v265 + 2 * v257);
                    uint64_t v268 = v21[7];
                    uint64_t v267 = v21[8];
                    unint64_t v269 = (v267 - v268) >> 3;
                    if (v269 > v266)
                    {
                      uint64_t v270 = v268 + 8 * v266;
                      if (v270 != v267 && *(_DWORD *)(v270 + 4) == v253)
                      {
                        uint64_t v272 = v22[4];
                        unint64_t v273 = (v22[5] - v272) >> 3;
                        if (v254 < v273)
                        {
                          uint64_t v274 = *(void *)(v272 + 8 * v254);
                          if (v274)
                          {
                            unint64_t v275 = *(unsigned __int16 *)(v274 + 2 * v257);
                            uint64_t v277 = v22[7];
                            uint64_t v276 = v22[8];
                            unint64_t v278 = (v276 - v277) >> 3;
                            if (v278 > v275)
                            {
                              uint64_t v279 = v277 + 8 * v275;
                              if (v279 != v276 && *(_DWORD *)(v279 + 4) == v253)
                              {
                                uint64_t v281 = v23[4];
                                unint64_t v282 = (v23[5] - v281) >> 3;
                                if (v254 < v282)
                                {
                                  uint64_t v283 = *(void *)(v281 + 8 * v254);
                                  if (v283)
                                  {
                                    unint64_t v284 = *(unsigned __int16 *)(v283 + 2 * v257);
                                    uint64_t v286 = v23[7];
                                    uint64_t v285 = v23[8];
                                    unint64_t v287 = (v285 - v286) >> 3;
                                    if (v287 > v284)
                                    {
                                      uint64_t v288 = v286 + 8 * v284;
                                      if (v288 != v285 && *(_DWORD *)(v288 + 4) == v253)
                                      {
                                        unint64_t v289 = *(void *)v249;
                                        uint64_t v290 = HIDWORD(*(void *)v249);
                                        unint64_t v291 = *(void *)v249 >> 39;
                                        if (v291 < v264
                                          && (uint64_t v292 = *(void *)(v263 + 8 * v291)) != 0
                                          && (unint64_t v293 = *(unsigned __int16 *)(v292 + 2 * (HIDWORD(v289) & 0x7F)),
                                              v269 > v293)
                                          && (uint64_t v294 = v268 + 8 * v293, v294 != v267)
                                          && *(_DWORD *)(v294 + 4) == v290)
                                        {
                                          v295 = (uint64_t *)(v21[10] + 24 * v293);
                                        }
                                        else
                                        {
                                          v295 = (uint64_t *)v21[11];
                                        }
                                        if (v291 < v273
                                          && (uint64_t v296 = *(void *)(v272 + 8 * v291)) != 0
                                          && (unint64_t v297 = *(unsigned __int16 *)(v296 + 2 * (HIDWORD(v289) & 0x7F)),
                                              v278 > v297)
                                          && (uint64_t v298 = v277 + 8 * v297, v298 != v276)
                                          && *(_DWORD *)(v298 + 4) == v290)
                                        {
                                          v299 = (uint64_t *)(v22[10] + 24 * v297);
                                        }
                                        else
                                        {
                                          v299 = (uint64_t *)v22[11];
                                        }
                                        if (v291 < v282
                                          && (uint64_t v300 = *(void *)(v281 + 8 * v291)) != 0
                                          && (unint64_t v301 = *(unsigned __int16 *)(v300 + 2 * (HIDWORD(v289) & 0x7F)),
                                              v287 > v301)
                                          && (uint64_t v302 = v286 + 8 * v301, v302 != v285)
                                          && *(_DWORD *)(v302 + 4) == v290)
                                        {
                                          v252 = (uint64_t *)(v23[10] + 24 * v301);
                                        }
                                        else
                                        {
                                          v252 = (uint64_t *)v23[11];
                                        }
                                        md::CollectMapDataLogic<(md::MapDataType)79>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)79> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)79> &,SceneComponents::LayerDataExitingView<(md::MapDataType)79> &)#1}::operator()((uint64_t)&v315, v289, v295, v299, v252, v251);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v251 += 3;
        v249 += 8;
      }
      while (v249 != v250);
    }
  }
}

void sub_1A1FFB264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*v17);
  std::__split_buffer<SceneComponents::LayerDataPreviousInView<(md::MapDataType)33>>::~__split_buffer((uint64_t)va);
  std::__tree<gdc::LayerDataWithWorld>::destroy(a14);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)79>>(int8x8_t *a1)
{
  unint64_t v10 = 0xDFFF4A13597C83A8;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xDFFF4A13597C83A8;
    if (*(void *)&v1 <= 0xDFFF4A13597C83A8) {
      unint64_t v3 = 0xDFFF4A13597C83A8 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xDFFF4A13597C83A8;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xDFFF4A13597C83A8)
      {
        if (v5[2] == 0xDFFF4A13597C83A8) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xDFFF4A13597C83A8) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xDFFF4A13597C83A8) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1FFB594(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)79>>(int8x8_t *a1)
{
  uint64_t v10 = 0x34E30CF3F8B8CD48;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x34E30CF3F8B8CD48;
    if (*(void *)&v1 <= 0x34E30CF3F8B8CD48uLL) {
      uint64_t v3 = 0x34E30CF3F8B8CD48uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x34E30CF3F8B8CD48;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x34E30CF3F8B8CD48)
      {
        if (v5[2] == 0x34E30CF3F8B8CD48) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x34E30CF3F8B8CD48) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x34E30CF3F8B8CD48) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1FFB804(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataExitingView<(md::MapDataType)79>>(int8x8_t *a1)
{
  uint64_t v10 = 0x27AB8748450A93BBLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x27AB8748450A93BBLL;
    if (*(void *)&v1 <= 0x27AB8748450A93BBuLL) {
      uint64_t v3 = 0x27AB8748450A93BBuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x27AB8748450A93BBLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x27AB8748450A93BBLL)
      {
        if (v5[2] == 0x27AB8748450A93BBLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x27AB8748450A93BBLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x27AB8748450A93BBLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1FFBA74(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<SceneComponents::LayerDataPreviousInView<(md::MapDataType)79>>(int8x8_t *a1)
{
  uint64_t v10 = 0x3C083CB4ACE2ADF1;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x3C083CB4ACE2ADF1;
    if (*(void *)&v1 <= 0x3C083CB4ACE2ADF1uLL) {
      uint64_t v3 = 0x3C083CB4ACE2ADF1uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x3C083CB4ACE2ADF1;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint8x8_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x3C083CB4ACE2ADF1)
      {
        if (v5[2] == 0x3C083CB4ACE2ADF1) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x3C083CB4ACE2ADF1) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x3C083CB4ACE2ADF1) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1FFBCE4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void md::CollectMapDataLogic<(md::MapDataType)79>::updateVisibleMapData(md::SceneContext const&,gdc::Registry *)::{lambda(gdc::Entity,SceneComponents::LayerDataInView<(md::MapDataType)79> &,SceneComponents::LayerDataPreviousInView<(md::MapDataType)79> &,SceneComponents::LayerDataEnteringView<(md::MapDataType)79> &,SceneComponents::LayerDataExitingView<(md::MapDataType)79> &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v8 = a4;
  uint64_t v9 = (uint64_t)a3;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *a3;
  *a3 = *a4;
  *a4 = v13;
  uint64_t v15 = (void **)(a3 + 1);
  uint64_t v14 = a3[1];
  uint64_t v16 = a4 + 1;
  uint64_t v17 = a3[2];
  *(_OWORD *)(a3 + 1) = *(_OWORD *)(a4 + 1);
  a4[1] = v14;
  a4[2] = v17;
  if (a3[2]) {
    uint64_t v18 = (uint64_t *)(a3[1] + 16);
  }
  else {
    uint64_t v18 = a3;
  }
  *uint64_t v18 = (uint64_t)v15;
  unint64_t v19 = (void *)(*v16 + 16);
  if (!v17) {
    unint64_t v19 = a4;
  }
  *unint64_t v19 = v16;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*v15);
  *(void *)uint64_t v9 = v15;
  *(void *)(v9 + 16) = 0;
  void *v15 = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy((void *)a5[1]);
  *a5 = (uint64_t)(a5 + 1);
  a5[2] = 0;
  a5[1] = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy((void *)a6[1]);
  *a6 = (uint64_t)(a6 + 1);
  a6[2] = 0;
  a6[1] = 0;
  unint64_t v20 = **(void **)a1;
  {
LABEL_152:
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
    }
  }
  uint64_t v21 = *(_WORD **)(v20 + 48);
  BOOL v22 = *(_WORD **)(v20 + 56);
  unint64_t v23 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v21 != v22)
  {
    uint64_t v24 = *(_WORD **)(v20 + 48);
    while (*v24 != 79)
    {
      v24 += 16;
      if (v24 == v22) {
        goto LABEL_18;
      }
    }
    if (v24 == v22)
    {
      unint64_t v23 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v21 != 79)
      {
        v21 += 16;
        if (v21 == v22)
        {
          uint64_t v21 = *(_WORD **)(v20 + 56);
          break;
        }
      }
      unint64_t v23 = (uint64_t *)(v21 + 4);
    }
  }
LABEL_18:
  std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>((uint64_t *)v9, (void *)*v23, v23 + 1);
  unint64_t v20 = *(void *)v9;
  double v25 = (uint64_t *)*v8;
  uint64_t v26 = (uint64_t *)*a5;
  *(void *)&long long v93 = a5;
  *((void *)&v93 + 1) = v26;
  while ((void **)v20 != v15)
  {
    if (v25 == v16)
    {
      long long v95 = v93;
      do
      {
        std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((void **)&v95, v20 + 32);
        unint64_t v43 = *(void **)(v20 + 8);
        if (v43)
        {
          do
          {
            uint64_t v44 = v43;
            unint64_t v43 = (void *)*v43;
          }
          while (v43);
        }
        else
        {
          do
          {
            uint64_t v44 = *(void **)(v20 + 16);
            BOOL v40 = *v44 == v20;
            unint64_t v20 = (unint64_t)v44;
          }
          while (!v40);
        }
        unint64_t v20 = (unint64_t)v44;
      }
      while (v44 != v15);
      break;
    }
    unint64_t v27 = *(void *)(v20 + 32);
    int v28 = *(unsigned __int8 *)(v20 + 48);
    int v29 = (char)v28;
    int v30 = *((unsigned __int8 *)v25 + 48);
    unint64_t v31 = v25[4];
    if (v28 == v30) {
      BOOL v32 = v27 < v31;
    }
    else {
      BOOL v32 = (char)v28 < (char)v30;
    }
    if (v32)
    {
      std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((void **)&v93, v20 + 32);
      size_t v33 = *(void **)(v20 + 8);
      if (v33)
      {
        do
        {
          unint64_t v20 = (unint64_t)v33;
          size_t v33 = (void *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          unint64_t v34 = v20;
          unint64_t v20 = *(void *)(v20 + 16);
        }
        while (*(void *)v20 != v34);
      }
    }
    else
    {
      BOOL v35 = v31 < v27;
      if (v29 != (char)v30) {
        BOOL v35 = (char)v30 < v29;
      }
      if (v35)
      {
        uint64_t v36 = (uint64_t *)v25[1];
        if (v36)
        {
          do
          {
            double v25 = v36;
            uint64_t v36 = (uint64_t *)*v36;
          }
          while (v36);
        }
        else
        {
          do
          {
            unint64_t v37 = v25;
            double v25 = (uint64_t *)v25[2];
          }
          while ((uint64_t *)*v25 != v37);
        }
      }
      else
      {
        uint64_t v38 = *(void **)(v20 + 8);
        if (v38)
        {
          do
          {
            uint64_t v39 = v38;
            uint64_t v38 = (void *)*v38;
          }
          while (v38);
        }
        else
        {
          do
          {
            uint64_t v39 = *(void **)(v20 + 16);
            BOOL v40 = *v39 == v20;
            unint64_t v20 = (unint64_t)v39;
          }
          while (!v40);
        }
        uint64_t v41 = (uint64_t *)v25[1];
        if (v41)
        {
          do
          {
            double v25 = v41;
            uint64_t v41 = (uint64_t *)*v41;
          }
          while (v41);
        }
        else
        {
          do
          {
            uint64_t v42 = v25;
            double v25 = (uint64_t *)v25[2];
          }
          while ((uint64_t *)*v25 != v42);
        }
        unint64_t v20 = (unint64_t)v39;
      }
    }
  }
  uint64_t v8 = (uint64_t *)*v8;
  uint64_t v45 = *(void *)v9;
  uint64_t v46 = (uint64_t *)*a6;
  *(void *)&long long v93 = a6;
  *((void *)&v93 + 1) = v46;
  while (v8 != v16)
  {
    if ((void **)v45 == v15)
    {
      long long v95 = v93;
      do
      {
        std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((void **)&v95, (uint64_t)(v8 + 4));
        uint64_t v62 = (uint64_t *)v8[1];
        if (v62)
        {
          do
          {
            unint64_t v63 = v62;
            uint64_t v62 = (uint64_t *)*v62;
          }
          while (v62);
        }
        else
        {
          do
          {
            unint64_t v63 = (uint64_t *)v8[2];
            BOOL v40 = *v63 == (void)v8;
            uint64_t v8 = v63;
          }
          while (!v40);
        }
        uint64_t v8 = v63;
      }
      while (v63 != v16);
      break;
    }
    unint64_t v47 = v8[4];
    int v48 = *((unsigned __int8 *)v8 + 48);
    int v49 = (char)v48;
    int v50 = *(unsigned __int8 *)(v45 + 48);
    unint64_t v51 = *(void *)(v45 + 32);
    if (v48 == v50) {
      BOOL v52 = v47 < v51;
    }
    else {
      BOOL v52 = (char)v48 < (char)v50;
    }
    if (v52)
    {
      std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((void **)&v93, (uint64_t)(v8 + 4));
      uint64_t v53 = (uint64_t *)v8[1];
      if (v53)
      {
        do
        {
          uint64_t v8 = v53;
          uint64_t v53 = (uint64_t *)*v53;
        }
        while (v53);
      }
      else
      {
        do
        {
          unint64_t v54 = v8;
          uint64_t v8 = (uint64_t *)v8[2];
        }
        while ((uint64_t *)*v8 != v54);
      }
    }
    else
    {
      BOOL v55 = v51 < v47;
      if (v49 != (char)v50) {
        BOOL v55 = (char)v50 < v49;
      }
      if (v55)
      {
        unint64_t v56 = *(void **)(v45 + 8);
        if (v56)
        {
          do
          {
            uint64_t v45 = (uint64_t)v56;
            unint64_t v56 = (void *)*v56;
          }
          while (v56);
        }
        else
        {
          do
          {
            uint64_t v57 = v45;
            uint64_t v45 = *(void *)(v45 + 16);
          }
          while (*(void *)v45 != v57);
        }
      }
      else
      {
        unint64_t v58 = (uint64_t *)v8[1];
        if (v58)
        {
          do
          {
            uint64_t v59 = v58;
            unint64_t v58 = (uint64_t *)*v58;
          }
          while (v58);
        }
        else
        {
          do
          {
            uint64_t v59 = (uint64_t *)v8[2];
            BOOL v40 = *v59 == (void)v8;
            uint64_t v8 = v59;
          }
          while (!v40);
        }
        uint64_t v60 = *(void **)(v45 + 8);
        if (v60)
        {
          do
          {
            uint64_t v45 = (uint64_t)v60;
            uint64_t v60 = (void *)*v60;
          }
          while (v60);
        }
        else
        {
          do
          {
            uint64_t v61 = v45;
            uint64_t v45 = *(void *)(v45 + 16);
          }
          while (*(void *)v45 != v61);
        }
        uint64_t v8 = v59;
      }
    }
  }
  if (!a5[2]) {
    goto LABEL_122;
  }
  uint64_t v64 = (void *)gdc::Registry::storage<SceneComponents::LayerDataDidEnterView<(md::MapDataType)79>>(*(int8x8_t **)(v12 + 128));
  uint64_t v94 = a2;
  unint64_t v65 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v64 + 4, (uint64_t)&v94);
  if (v66)
  {
    unint64_t v20 = v64[11];
    unint64_t v68 = v64[12];
    if (v20 >= v68)
    {
      uint64_t v70 = (char *)v64[10];
      uint64_t v16 = (uint64_t *)(v20 - (void)v70);
      uint64_t v71 = v20 - (void)v70 + 1;
      if (v71 < 0) {
        goto LABEL_154;
      }
      unint64_t v72 = v68 - (void)v70;
      if (2 * v72 > v71) {
        uint64_t v71 = 2 * v72;
      }
      if (v72 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v73 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v73 = v71;
      }
      if (v73) {
        uint64_t v74 = (char *)operator new(v73);
      }
      else {
        uint64_t v74 = 0;
      }
      uint64_t v75 = &v74[v73];
      uint64_t v69 = (uint64_t)v16 + (void)v74 + 1;
      uint64_t v76 = &v70[-v20];
      if (v70 == (char *)v20) {
        uint64_t v76 = 0;
      }
      v64[10] = (char *)v16 + (void)v74 + (unint64_t)v76;
      v64[11] = v69;
      v64[12] = v75;
      if (v70) {
        operator delete(v70);
      }
    }
    else
    {
      uint64_t v69 = v20 + 1;
    }
    v64[11] = v69;
    uint64_t v9 = v64[31];
    goto LABEL_118;
  }
  uint64_t v9 = v64[31];
  if (v64[10] + (((uint64_t)v65 - v64[7]) >> 3) == v64[11])
  {
LABEL_118:
    uint64_t v8 = &v94;
    a5 = (uint64_t *)v64[22];
    if (a5)
    {
      unint64_t v20 = 1;
      while (1)
      {
        *(void *)&long long v95 = &v94;
        *((void *)&v95 + 1) = 1;
        *(void *)&long long v93 = v9;
        uint64_t v77 = a5[6];
        if (!v77) {
          goto LABEL_151;
        }
        (*(void (**)(uint64_t, long long *, long long *))(*(void *)v77 + 48))(v77, &v93, &v95);
        a5 = (uint64_t *)*a5;
        if (!a5) {
          goto LABEL_122;
        }
      }
    }
    goto LABEL_122;
  }
  a5 = (uint64_t *)v64[16];
  if (a5)
  {
    uint64_t v8 = &v94;
    unint64_t v20 = 1;
    do
    {
      *(void *)&long long v95 = &v94;
      *((void *)&v95 + 1) = 1;
      *(void *)&long long v93 = v9;
      uint64_t v67 = a5[6];
      if (!v67) {
        goto LABEL_151;
      }
      (*(void (**)(uint64_t, long long *, long long *))(*(void *)v67 + 48))(v67, &v93, &v95);
      a5 = (uint64_t *)*a5;
    }
    while (a5);
  }
LABEL_122:
  if (!a6[2]) {
    return;
  }
  unint64_t v78 = (void *)gdc::Registry::storage<SceneComponents::LayerDataDidExitView<(md::MapDataType)79>>(*(int8x8_t **)(v12 + 128));
  uint64_t v94 = a2;
  uint64_t v79 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v78 + 4, (uint64_t)&v94);
  if (v80)
  {
    unint64_t v83 = (unsigned char *)v78[11];
    unint64_t v82 = v78[12];
    if ((unint64_t)v83 < v82)
    {
      uint64_t v84 = (uint64_t)(v83 + 1);
LABEL_145:
      v78[11] = v84;
      a2 = v78[31];
      goto LABEL_146;
    }
    uint64_t v85 = (char *)v78[10];
    uint64_t v8 = (uint64_t *)(v83 - v85);
    uint64_t v86 = v83 - v85 + 1;
    if (v86 >= 0)
    {
      unint64_t v87 = v82 - (void)v85;
      if (2 * v87 > v86) {
        uint64_t v86 = 2 * v87;
      }
      if (v87 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v88 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v88 = v86;
      }
      if (v88) {
        uint64_t v89 = (char *)operator new(v88);
      }
      else {
        uint64_t v89 = 0;
      }
      unint64_t v90 = &v89[v88];
      uint64_t v84 = (uint64_t)v8 + (void)v89 + 1;
      unint64_t v91 = (char *)(v85 - v83);
      if (v85 == v83) {
        unint64_t v91 = 0;
      }
      v78[10] = (char *)v8 + (void)v89 + (unint64_t)v91;
      v78[11] = v84;
      v78[12] = v90;
      if (v85) {
        operator delete(v85);
      }
      goto LABEL_145;
    }
LABEL_154:
    abort();
  }
  a2 = v78[31];
  if (v78[10] + (((uint64_t)v79 - v78[7]) >> 3) != v78[11])
  {
    a6 = (uint64_t *)v78[16];
    if (a6)
    {
      a5 = &v94;
      uint64_t v9 = 1;
      while (1)
      {
        *(void *)&long long v95 = &v94;
        *((void *)&v95 + 1) = 1;
        *(void *)&long long v93 = a2;
        uint64_t v81 = a6[6];
        if (!v81) {
          break;
        }
        (*(void (**)(uint64_t, long long *, long long *))(*(void *)v81 + 48))(v81, &v93, &v95);
        a6 = (uint64_t *)*a6;
        if (!a6) {
          return;
        }
      }
LABEL_151:
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_152;
    }
    return;
  }
LABEL_146:
  a5 = &v94;
  a6 = (uint64_t *)v78[22];
  if (a6)
  {
    uint64_t v9 = 1;
    while (1)
    {
      *(void *)&long long v95 = &v94;
      *((void *)&v95 + 1) = 1;
      *(void *)&long long v93 = a2;
      uint64_t v92 = a6[6];
      if (!v92) {
        break;
      }
      (*(void (**)(uint64_t, long long *, long long *))(*(void *)v92 + 48))(v92, &v93, &v95);
      a6 = (uint64_t *)*a6;
      if (!a6) {
        return;
      }
    }
    goto LABEL_151;
  }
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)79>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)79>>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(void **)(v15 - 24), (void *)(v15 - 16));
    uint64_t v15 = a1[11];
  }
  uint64_t v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(v15 - 16));
  a1[11] = v16;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)79>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataPreviousInView<(md::MapDataType)79>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)79>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)79>>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = (uint64_t **)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  if (v14 != (uint64_t **)(v15 - 24))
  {
    std::__tree<gdc::LayerDataWithWorld>::__assign_multi<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v14, *(void **)(v15 - 24), (void *)(v15 - 16));
    uint64_t v15 = a1[11];
  }
  uint64_t v16 = v15 - 24;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(v15 - 16));
  a1[11] = v16;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)79>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataExitingView<(md::MapDataType)79>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<SceneComponents::LayerDataInView<(md::MapDataType)33>>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)79>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)79>>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_WORD *)(v14 + 2 * v7) = *(_WORD *)(v15 - 2);
  a1[11] = v15 - 2;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)79>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataInfo<(md::MapDataType)79>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)79>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)79>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)79>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidExitView<(md::MapDataType)79>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)79>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)79>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)79>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<SceneComponents::LayerDataDidEnterView<(md::MapDataType)79>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)79>,md::CollectMapDataContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)79>,md::CollectMapDataContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) != 0xE4007F1EDCD91179 || !*(void *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  uint64_t v4 = *(void **)(a2 + 8);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_27;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v5 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v7 = 0x99BED48DEFBBD82BLL % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_27;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_27;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_25;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_27;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_27;
    }
LABEL_14:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_27;
    }
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_14;
  }
LABEL_25:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v14 = *(void *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v14 = 0;
LABEL_28:
  uint64_t v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 160))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)79>,md::CollectMapDataContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0xE4007F1EDCD91179 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)79>,md::CollectMapDataContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0xE4007F1EDCD91179 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 144))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)79>,md::CollectMapDataContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0xE4007F1EDCD91179 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 136))(result);
}

uint64_t md::Logic<md::CollectMapDataLogic<(md::MapDataType)79>,md::CollectMapDataContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) != 0xE4007F1EDCD91179 || !*(void *)(a3 + 32)) {
    return result;
  }
  uint64_t v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_26;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v6 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  unint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_26;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x99BED48DEFBBD82BLL)
      {
        if (v8[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_24;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_26;
    }
LABEL_13:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_26;
    }
  }
  if (v8[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_13;
  }
LABEL_24:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x99BED48DEFBBD82BLL)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v13 = 0;
LABEL_27:
  uint64_t v14 = v13;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 128))(result);
}

void md::Logic<md::CollectMapDataLogic<(md::MapDataType)79>,md::CollectMapDataContext<(md::MapDataType)79>,md::LogicDependencies<gdc::TypeList<md::SceneContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A1FFD5BC(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t gdc::ObjectHolder<md::CollectMapDataContext<(md::MapDataType)79>>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::CollectMapDataContext<(md::MapDataType)79>>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF5148D0;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0xC400A2AC0F1);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::CollectMapDataContext<(md::MapDataType)79>>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF5148D0;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0xC400A2AC0F1);
  }
  return a1;
}

uint64_t md::CollectMapDataLogic<(md::MapDataType)79>::didBecomeInactive(uint64_t result)
{
  uint64_t v1 = result;
  if (*(_WORD *)(result + 120) || *(_WORD *)(result + 122) || *(_DWORD *)(result + 124) != -1)
  {
    __n128 result = gdc::Registry::destroy(*(void *)(result + 128), *(void *)(result + 120));
    *(void *)(v1 + 120) = 0xFFFFFFFF00000000;
  }
  return result;
}

void md::CollectMapDataLogic<(md::MapDataType)79>::~CollectMapDataLogic(uint64_t a1)
{
  *(void *)a1 = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 80));
  JUMPOUT(0x1A6239270);
}

uint64_t md::CollectMapDataLogic<(md::MapDataType)79>::~CollectMapDataLogic(uint64_t a1)
{
  *(void *)a1 = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 104));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 80));
  return a1;
}

void md::mun::MuninMetaLayerDataSource::createLayerData(uint64_t a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    while (*(_WORD *)v5 != 22)
    {
      v5 += 48;
      if (v5 == v6) {
        goto LABEL_15;
      }
    }
  }
  if (v5 == v6 || *(void *)(v5 + 32) != 1)
  {
LABEL_15:
    uint64_t v8 = 0;
LABEL_16:
    if (v8) {
      uint64_t v12 = v8 - 8;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v18 = 0;
    if (v12) {
      goto LABEL_20;
    }
LABEL_13:
    *a3 = 0;
    a3[1] = 0;
    uint64_t v13 = v18;
    if (!v18) {
      return;
    }
    goto LABEL_27;
  }
  uint64_t v7 = *(void *)(v5 + 24);
  uint64_t v8 = *(void *)(v7 + 112);
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 120);
  if (!v9) {
    goto LABEL_16;
  }
  p_shared_owners = &v9->__shared_owners_;
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v8) {
    uint64_t v11 = v8 - 8;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v17 = v11;
  uint64_t v18 = v9;
  atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v12 = v17;
    if (v17) {
      goto LABEL_20;
    }
    goto LABEL_13;
  }
  uint64_t v12 = v11;
  if (!v11) {
    goto LABEL_13;
  }
LABEL_20:
  uint64_t v14 = operator new(0x238uLL);
  uint64_t v15 = (uint64_t *)(v12 + 216);
  uint64_t v16 = (uint64_t *)(v12 + 152);
  v14[1] = 0;
  v14[2] = 0;
  *uint64_t v14 = &unk_1EF5827F0;
  v19[0] = *(unsigned char *)a1;
  gdc::LayerDataKey::LayerDataKey((uint64_t)&v20, a1 + 8);
  char v23 = 0;
  if (*(unsigned char *)(a1 + 96))
  {
    int v24 = *(_DWORD *)(a1 + 100);
    char v23 = 1;
  }
  uint64_t v25 = *(void *)(a1 + 104);
  md::mun::MuninMetadata::MuninMetadata((uint64_t)(v14 + 3), (uint64_t)v19, v16, v15);
  if (v23) {
    char v23 = 0;
  }
  if (v21 != v22) {
    free(v21);
  }
  *a3 = v14 + 3;
  a3[1] = v14;
  uint64_t v13 = v18;
  if (v18)
  {
LABEL_27:
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1A1FFDA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__shared_ptr_emplace<md::mun::MuninMetadata>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::mun::MuninMetadata>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5827F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::mun::MuninMetadata>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5827F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::mun::MuninMetaLayerDataSource::constructRequests(uint64_t a1, char **a2, char **a3)
{
  if (a2 != a3)
  {
    uint64_t v37 = v3;
    uint64_t v38 = v4;
    uint64_t v6 = a2;
    do
    {
      uint64_t v7 = *v6;
      char v28 = **v6;
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v29, (uint64_t)(v7 + 8));
      char v32 = 0;
      if (v7[96])
      {
        int v33 = *((_DWORD *)v7 + 25);
        char v32 = 1;
      }
      uint64_t v34 = *((void *)v7 + 13);
      int v8 = *(_DWORD *)v30;
      int v9 = *((_DWORD *)v30 + 1);
      int v11 = *((_DWORD *)v30 + 2);
      int v10 = *((_DWORD *)v30 + 3);
      uint64_t v12 = *((void *)*v6 + 14);
      v18[0] = 0;
      __int16 v19 = 22;
      int v20 = 2147483646;
      uint64_t v21 = v25;
      BOOL v22 = v25;
      char v23 = v25;
      uint64_t v24 = 32;
      unint64_t v26 = 0;
      int v35 = v8;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v21, v25, (char *)&v35, v36);
      int v35 = v9;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v21, v22, (char *)&v35, v36);
      int v35 = v11;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v21, v22, (char *)&v35, v36);
      int v35 = v10;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v21, v22, (char *)&v35, v36);
      uint64_t v13 = (unsigned __int8 *)v21;
      unint64_t v14 = v22 - (unsigned char *)v21;
      if (v22 == v21)
      {
        unint64_t v15 = 0;
      }
      else
      {
        unint64_t v15 = 0;
        if (v14 <= 1) {
          unint64_t v14 = 1;
        }
        do
        {
          unsigned int v16 = *v13++;
          v15 ^= (v15 << 6) + (v15 >> 2) - 0x61C8864680B583EBLL + v16;
          --v14;
        }
        while (v14);
      }
      unint64_t v26 = v15;
      uint64_t v27 = v12;
      uint64_t v17 = *v6;
      v6 += 2;
      gdc::LayerDataRequest::request(v17, (uint64_t)v18, 0);
      if (v21 != v23) {
        free(v21);
      }
      if (v32) {
        char v32 = 0;
      }
      if (v30 != v31) {
        free(v30);
      }
    }
    while (v6 != a3);
  }
}

void md::mun::MuninMetaLayerDataSource::~MuninMetaLayerDataSource(md::mun::MuninMetaLayerDataSource *this)
{
  gdc::LayerDataSource::~LayerDataSource(this);
  JUMPOUT(0x1A6239270);
}

void md::MeshBatcher::BuildContext::~BuildContext(md::MeshBatcher::BuildContext *this)
{
  uint64_t v2 = *((void *)this + 15);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 16);
    uint64_t v4 = (void *)*((void *)this + 15);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 15);
    }
    *((void *)this + 16) = v2;
    operator delete(v4);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 12);
    if (!v7) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 12);
    if (!v7) {
      goto LABEL_16;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_16:
  int v8 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    int v9 = (std::__shared_weak_count *)*((void *)this + 8);
    if (!v9) {
      return;
    }
  }
  else
  {
    int v9 = (std::__shared_weak_count *)*((void *)this + 8);
    if (!v9) {
      return;
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

uint64_t std::__shared_ptr_emplace<ggl::Mesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::Mesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588F68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::Mesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588F68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::HybridMapEngineMode::willBecomeInactive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 856) + 40);
  if ((unint64_t)(*(void *)(*(void *)(a3 + 856) + 48) - v5) >= 0x18) {
    uint64_t v6 = *(void *)(v5 + 16);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = +[VKSharedResourcesManager sharedResources];
  [v7 standardCommandBufferSelector];
  __int16 v8 = *(_WORD *)(*(void *)(v11 + 8) + 8);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }

  int v9 = *(_WORD **)(v6 + 8);
  int v10 = *(_WORD **)(v6 + 24);
  if (v10 == v9)
  {
    if (v10)
    {
      *(void *)(v6 + 16) = v10;
      operator delete(v10);
      *(void *)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0;
      *(void *)(v6 + 24) = 0;
    }
    int v9 = operator new(2uLL);
    *(void *)(v6 + 8) = v9;
    *(void *)(v6 + 24) = v9 + 1;
  }
  *int v9 = v8;
  *(void *)(v6 + 16) = v9 + 1;
  *(_WORD *)(v6 + 57) = v8;
  LOBYTE(v11) = 23;
  md::MapEngineSettings::set(a4, &v11, (void *)1);
}

void sub_1A1FFE0BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::HybridMapEngineMode::didBecomeActive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  md::CartographicMapEngineMode::didBecomeActive(a1, a2, a3, a4);
  uint64_t v6 = *(void *)(a3 + 856);
  uint64_t v7 = *(void *)(v6 + 40);
  if ((unint64_t)(*(void *)(v6 + 48) - v7) >= 0x18) {
    uint64_t v8 = *(void *)(v7 + 16);
  }
  else {
    uint64_t v8 = 0;
  }
  int v9 = +[VKSharedResourcesManager sharedResources];
  [v9 standardCommandBufferSelector];
  __int16 v10 = *(_WORD *)(*(void *)(v16 + 8) + 244);
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }

  uint64_t v11 = *(_WORD **)(v8 + 8);
  uint64_t v12 = *(_WORD **)(v8 + 24);
  if (v12 == v11)
  {
    if (v12)
    {
      *(void *)(v8 + 16) = v12;
      operator delete(v12);
      *(void *)(v8 + 8) = 0;
      *(void *)(v8 + 16) = 0;
      *(void *)(v8 + 24) = 0;
    }
    uint64_t v11 = operator new(2uLL);
    *(void *)(v8 + 8) = v11;
    *(void *)(v8 + 24) = v11 + 1;
  }
  *uint64_t v11 = v10;
  *(void *)(v8 + 16) = v11 + 1;
  *(_WORD *)(v8 + 57) = v10;
  LOBYTE(v16) = 23;
  md::MapEngineSettings::set((uint64_t)a4, &v16, 0);
  uint64_t v13 = *(uint64_t **)(v6 + 40);
  if (*(uint64_t **)(v6 + 48) == v13) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *v13;
  }
  int v15 = *(unsigned __int8 *)(v14 + 56);
  *(void *)(v14 + 68) = 0;
  *(void *)(v14 + 60) = 0;
  if (!v15) {
    *(unsigned char *)(v14 + 56) = 1;
  }
}

void sub_1A1FFE230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::HybridMapEngineMode::~HybridMapEngineMode(md::HybridMapEngineMode *this)
{
  *(void *)this = &unk_1EF5463F0;
  if (*((unsigned char *)this + 548)) {
    *((unsigned char *)this + 548) = 0;
  }
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A6239270);
}

{
  *(void *)this = &unk_1EF5463F0;
  if (*((unsigned char *)this + 548)) {
    *((unsigned char *)this + 548) = 0;
  }
  md::MapEngineMode::~MapEngineMode(this);
}

md::HybridMapEngineMode *md::HybridMapEngineMode::HybridMapEngineMode(md::HybridMapEngineMode *this)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = md::CartographicMapEngineMode::CartographicMapEngineMode((uint64_t)this, 7);
  *(void *)uint64_t v2 = &unk_1EF53BAD0;
  *(void *)(v2 + 536) = 100;
  *(unsigned char *)(v2 + 49) = 0;
  *(_DWORD *)(v2 + 52) = 18;
  LOWORD(v31) = 4608;
  *((void *)&v31 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(v2 + 384), (unsigned __int8 *)&v31);
  LOWORD(v31) = 4608;
  *((void *)&v31 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)this + 54, (unsigned __int8 *)&v31);
  LOWORD(v31) = 4608;
  *((void *)&v31 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)this + 51, (unsigned __int8 *)&v31);
  *((_WORD *)this + 112) = 0;
  LOBYTE(v31) = 0;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0, &v31)+ 17) = 0;
  LOBYTE(v31) = 51;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x33u, &v31)+ 17) = 0;
  LOBYTE(v31) = 2;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 2u, &v31)+ 17) = 0;
  LOBYTE(v31) = 22;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x16u, &v31)+ 17) = 0;
  LOBYTE(v31) = 11;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0xBu, &v31)+ 17) = 0;
  LOBYTE(v31) = 3;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 3u, &v31)+ 17) = 0;
  LOBYTE(v31) = 44;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x2Cu, &v31)+ 17) = 1;
  LOBYTE(v31) = 40;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x28u, &v31)+ 17) = 1;
  LOBYTE(v31) = 18;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x12u, &v31)+ 17) = 1;
  LOBYTE(v31) = 43;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x2Bu, &v31)+ 17) = 2;
  LOBYTE(v31) = 41;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x29u, &v31)+ 17) = 2;
  LOBYTE(v31) = 42;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 144, 0x2Au, &v31)+ 17) = 2;
  LODWORD(v31) = 40;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, 0x28u, &v31)+ 18) = 2;
  unint64_t v28 = 0x4AC7AB7561675F6;
  uint64_t v29 = "md::GridLogic]";
  uint64_t v30 = 13;
  *(void *)&long long v25 = 0x336A901A15BB7353;
  *((void *)&v25 + 1) = "md::GridContext]";
  uint64_t v26 = 15;
  char v27 = 1;
  *(void *)&long long v31 = &v32;
  *((void *)&v31 + 1) = 1;
  long long v32 = xmmword_1E5A97DD0;
  *(void *)&long long v33 = 21;
  *(void *)&long long v21 = &v22;
  *((void *)&v21 + 1) = 1;
  long long v22 = xmmword_1E5A97CE0;
  *(void *)&long long v23 = 24;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v28, &v25, 0, (uint64_t)&v31, (uint64_t)&v21);
  unint64_t v28 = 0x79FE0BD9535D5C4DLL;
  uint64_t v29 = "md::AnchorLogic]";
  uint64_t v30 = 15;
  *(void *)&long long v31 = &v32;
  *(void *)&long long v25 = 0x63B6FE00C0848868;
  *((void *)&v25 + 1) = "md::AnchorContext]";
  uint64_t v26 = 17;
  char v27 = 1;
  *((void *)&v31 + 1) = 2;
  long long v32 = xmmword_1E5A97998;
  long long v33 = unk_1E5A979A8;
  long long v34 = xmmword_1E5A979B8;
  *(void *)&long long v21 = &v22;
  *((void *)&v21 + 1) = 1;
  long long v22 = xmmword_1E5A98030;
  *(void *)&long long v23 = 21;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v28, &v25, 0, (uint64_t)&v31, (uint64_t)&v21);
  *(void *)&long long v25 = 0x8E629317B3523E63;
  *((void *)&v25 + 1) = "md::CameraLogic]";
  uint64_t v26 = 15;
  *(void *)&long long v21 = 0x1AF456233693CD46;
  *((void *)&v21 + 1) = "md::CameraContext]";
  *(void *)&long long v22 = 17;
  BYTE8(v22) = 1;
  *(void *)&long long v31 = &v32;
  *((void *)&v31 + 1) = 1;
  long long v32 = xmmword_1E5A979C8;
  *(void *)&long long v33 = 20;
  unint64_t v28 = (unint64_t)&v30;
  uint64_t v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v25, &v21, 0, (uint64_t)&v31, (uint64_t)&v28);
  *(void *)&long long v21 = 0xD2443A61CED86C69;
  *((void *)&v21 + 1) = "md::SettingsLogic]";
  *(void *)&long long v22 = 17;
  *(void *)&long long v31 = 0xC97B9E962ADF4AD4;
  *((void *)&v31 + 1) = "md::SettingsContext]";
  *(void *)&long long v32 = 19;
  BYTE8(v32) = 1;
  *(void *)&long long v25 = &v26;
  *((void *)&v25 + 1) = 0;
  unint64_t v28 = (unint64_t)&v30;
  uint64_t v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v31, 0, (uint64_t)&v25, (uint64_t)&v28);
  *(void *)&long long v21 = 0x2FED70A4459DFCA1;
  *((void *)&v21 + 1) = "md::StyleLogic]";
  *(void *)&long long v22 = 14;
  *(void *)&long long v31 = 0xE42D19AFCA302E68;
  *((void *)&v31 + 1) = "md::StyleLogicContext]";
  *(void *)&long long v32 = 21;
  BYTE8(v32) = 1;
  *(void *)&long long v25 = &v26;
  *((void *)&v25 + 1) = 0;
  unint64_t v28 = (unint64_t)&v30;
  uint64_t v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v31, 0, (uint64_t)&v25, (uint64_t)&v28);
  *(void *)&long long v21 = 0x5CBBA028798243FLL;
  *((void *)&v21 + 1) = "md::RouteOverlayLogic]";
  *(void *)&long long v22 = 21;
  *(void *)&long long v31 = 0x13043386C0978CC2;
  *((void *)&v31 + 1) = "md::RouteOverlayContext]";
  *(void *)&long long v32 = 23;
  BYTE8(v32) = 1;
  *(void *)&long long v25 = &v26;
  *((void *)&v25 + 1) = 0;
  unint64_t v28 = (unint64_t)&v30;
  uint64_t v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v31, 0, (uint64_t)&v25, (uint64_t)&v28);
  unint64_t v28 = 0x17767EADC5B287BLL;
  uint64_t v29 = "md::ElevationLogic]";
  *(void *)&long long v25 = 0x8BD499FBD96FBB9ELL;
  *((void *)&v25 + 1) = "md::ElevationContext]";
  uint64_t v26 = 20;
  char v27 = 1;
  uint64_t v30 = 18;
  *(void *)&long long v31 = &v32;
  *((void *)&v31 + 1) = 2;
  long long v32 = xmmword_1E5A97A70;
  long long v33 = unk_1E5A97A80;
  long long v34 = xmmword_1E5A97A90;
  *(void *)&long long v21 = &v22;
  *((void *)&v21 + 1) = 1;
  long long v22 = xmmword_1E5A97AA0;
  *(void *)&long long v23 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v28, &v25, 0, (uint64_t)&v31, (uint64_t)&v21);
  *(void *)&long long v21 = 0x90C2E4CBBB63E301;
  *((void *)&v21 + 1) = "md::LayerDataLogic]";
  *(void *)&long long v22 = 18;
  *(void *)&long long v31 = 0x7851AF310F49C988;
  *((void *)&v31 + 1) = "md::LayerDataLogicContext]";
  *(void *)&long long v32 = 25;
  BYTE8(v32) = 1;
  *(void *)&long long v25 = &v26;
  *((void *)&v25 + 1) = 0;
  unint64_t v28 = (unint64_t)&v30;
  uint64_t v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v31, 0, (uint64_t)&v25, (uint64_t)&v28);
  *(void *)&long long v25 = 0xAF46DE79C836B0D8;
  *((void *)&v25 + 1) = "md::TileSelectionLogic]";
  uint64_t v26 = 22;
  *(void *)&long long v21 = 0x64780CBD71DF7CF5;
  *((void *)&v21 + 1) = "md::TileSelectionContext]";
  *(void *)&long long v22 = 24;
  BYTE8(v22) = 1;
  *(void *)&long long v31 = &v32;
  *((void *)&v31 + 1) = 3;
  long long v34 = xmmword_1E5A97CB8;
  long long v35 = unk_1E5A97CC8;
  *(void *)&long long v36 = 21;
  long long v32 = xmmword_1E5A97C98;
  long long v33 = unk_1E5A97CA8;
  unint64_t v28 = (unint64_t)&v30;
  uint64_t v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v25, &v21, 0, (uint64_t)&v31, (uint64_t)&v28);
  uint64_t v3 = 0xCBF29CE484222325;
  uint64_t v4 = 0x26u;
  do
    uint64_t v3 = 0x100000001B3 * (v3 ^ aStdStringViewG_928[v4++]);
  while (v4 != 368);
  unint64_t v28 = v3;
  uint64_t v29 = "md::TileDependencyLogicImpl<md::TileDependencies<>, md::TileDependencies<md::TileDependency<md::MapDataType::Flyover, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverMetadata, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverDsm, md::FlyoverTileDataResolverContext>>>]";
  uint64_t v30 = 330;
  *(void *)&long long v25 = 0x8677AD8BA9352C1DLL;
  *((void *)&v25 + 1) = "md::ResolvedTileSelectionContext]";
  uint64_t v26 = 32;
  char v27 = 1;
  *(void *)&long long v31 = &v32;
  *((void *)&v31 + 1) = 1;
  long long v32 = xmmword_1E5A97CE0;
  *(void *)&long long v33 = 24;
  *(void *)&long long v21 = &v22;
  *((void *)&v21 + 1) = 1;
  long long v22 = xmmword_1E5A97CF8;
  *(void *)&long long v23 = 34;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v28, &v25, 0, (uint64_t)&v31, (uint64_t)&v21);
  *(void *)&long long v25 = 0x87BA2765F9E38E05;
  *((void *)&v25 + 1) = "md::PendingSceneLogic]";
  uint64_t v26 = 21;
  *(void *)&long long v21 = 0x9F2276D081C2CB20;
  *((void *)&v21 + 1) = "md::PendingSceneContext]";
  *(void *)&long long v22 = 23;
  BYTE8(v22) = 1;
  *(void *)&long long v31 = &v32;
  *((void *)&v31 + 1) = 5;
  long long v36 = xmmword_1E5A97D50;
  long long v37 = *(_OWORD *)&off_1E5A97D60;
  long long v38 = xmmword_1E5A97D70;
  uint64_t v39 = 25;
  long long v32 = xmmword_1E5A97D10;
  long long v33 = unk_1E5A97D20;
  long long v34 = xmmword_1E5A97D30;
  long long v35 = unk_1E5A97D40;
  unint64_t v28 = (unint64_t)&v30;
  uint64_t v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v25, &v21, 0, (uint64_t)&v31, (uint64_t)&v28);
  unint64_t v28 = 0x2B7C4502BD3C99C6;
  uint64_t v29 = "md::ResolvedSceneLogic]";
  uint64_t v30 = 22;
  *(void *)&long long v25 = 0x99BED48DEFBBD82BLL;
  *((void *)&v25 + 1) = "md::SceneContext]";
  uint64_t v26 = 16;
  char v27 = 1;
  *(void *)&long long v21 = &v22;
  *((void *)&v21 + 1) = 1;
  long long v22 = xmmword_1E5A97DB8;
  *(void *)&long long v23 = 23;
  *(void *)&long long v31 = &v32;
  *((void *)&v31 + 1) = 2;
  long long v32 = xmmword_1E5A97D88;
  long long v33 = unk_1E5A97D98;
  long long v34 = xmmword_1E5A97DA8;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v28, &v25, 0, (uint64_t)&v21, (uint64_t)&v31);
  *(void *)&long long v25 = 0x8B45D3D7944796A2;
  *((void *)&v25 + 1) = "md::PendingRegistryLogic]";
  uint64_t v26 = 24;
  *(void *)&long long v21 = 0xA8300AA8F44B09FFLL;
  *((void *)&v21 + 1) = "md::PendingRegistryContext]";
  *(void *)&long long v22 = 26;
  BYTE8(v22) = 1;
  *(void *)&long long v31 = &v32;
  *((void *)&v31 + 1) = 1;
  long long v32 = xmmword_1E5A97DB8;
  *(void *)&long long v33 = 23;
  unint64_t v28 = (unint64_t)&v30;
  uint64_t v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v25, &v21, 0, (uint64_t)&v31, (uint64_t)&v28);
  unint64_t v28 = 0xBEC1A12372CEEC00;
  uint64_t v29 = "md::NavigationLogic]";
  uint64_t v30 = 19;
  *(void *)&long long v31 = &v32;
  *(void *)&long long v25 = 0x1B8B241A8D896A1DLL;
  *((void *)&v25 + 1) = "md::NavigationContext]";
  uint64_t v26 = 21;
  char v27 = 1;
  *((void *)&v31 + 1) = 3;
  long long v34 = xmmword_1E5A97A00;
  long long v35 = unk_1E5A97A10;
  *(void *)&long long v36 = 17;
  long long v32 = xmmword_1E5A979E0;
  long long v33 = unk_1E5A979F0;
  *(void *)&long long v21 = &v22;
  *((void *)&v21 + 1) = 1;
  long long v22 = xmmword_1E5A97A28;
  *(void *)&long long v23 = 23;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v28, &v25, 0, (uint64_t)&v31, (uint64_t)&v21);
  unint64_t v28 = 0x7173CF8D2BE8FE53;
  uint64_t v29 = "md::RouteLineLogic]";
  uint64_t v30 = 18;
  *(void *)&long long v31 = &v32;
  *(void *)&long long v25 = 0x8E4587A431F9C696;
  *((void *)&v25 + 1) = "md::RouteLineContext]";
  uint64_t v26 = 20;
  char v27 = 1;
  *((void *)&v31 + 1) = 4;
  long long v34 = xmmword_1E5A97AD8;
  long long v35 = unk_1E5A97AE8;
  long long v36 = xmmword_1E5A97AF8;
  long long v37 = *(_OWORD *)&off_1E5A97B08;
  long long v32 = xmmword_1E5A97AB8;
  long long v33 = unk_1E5A97AC8;
  *(void *)&long long v21 = &v22;
  *((void *)&v21 + 1) = 2;
  long long v22 = xmmword_1E5A97B18;
  long long v23 = unk_1E5A97B28;
  long long v24 = xmmword_1E5A97B38;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v28, &v25, 0, (uint64_t)&v31, (uint64_t)&v21);
  *(void *)&long long v25 = 0xDAD5CEE0DC5FF509;
  *((void *)&v25 + 1) = "md::SkyLogic]";
  uint64_t v26 = 12;
  *(void *)&long long v21 = 0x7C7EC6C7C111B0D0;
  *((void *)&v21 + 1) = "md::SkyLogicContext]";
  *(void *)&long long v22 = 19;
  BYTE8(v22) = 1;
  *(void *)&long long v31 = &v32;
  *((void *)&v31 + 1) = 2;
  long long v32 = xmmword_1E5A97A40;
  long long v33 = unk_1E5A97A50;
  long long v34 = xmmword_1E5A97A60;
  unint64_t v28 = (unint64_t)&v30;
  uint64_t v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v25, &v21, 0, (uint64_t)&v31, (uint64_t)&v28);
  unint64_t v28 = 0x20A1ED17D78F322BLL;
  uint64_t v29 = "md::LabelsLogic]";
  uint64_t v30 = 15;
  *(void *)&long long v31 = &v32;
  *(void *)&long long v25 = 0xA588623CD4116DAELL;
  *((void *)&v25 + 1) = "md::LabelsContext]";
  uint64_t v26 = 17;
  char v27 = 1;
  *((void *)&v31 + 1) = 1;
  long long v32 = xmmword_1E5A97DD0;
  *(void *)&long long v33 = 21;
  *(void *)&long long v21 = &v22;
  *((void *)&v21 + 1) = 1;
  long long v22 = xmmword_1E5A97DE8;
  *(void *)&long long v23 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v28, &v25, 0, (uint64_t)&v31, (uint64_t)&v21);
  *(void *)&long long v25 = 0x87668FB4D087F775;
  *((void *)&v25 + 1) = "md::OverlaysLogic]";
  uint64_t v26 = 17;
  *(void *)&long long v21 = 0xADE8F13E6C18D970;
  *((void *)&v21 + 1) = "md::OverlaysContext]";
  *(void *)&long long v22 = 19;
  BYTE8(v22) = 1;
  *(void *)&long long v31 = &v32;
  *((void *)&v31 + 1) = 4;
  long long v34 = xmmword_1E5A97E50;
  long long v35 = unk_1E5A97E60;
  long long v36 = xmmword_1E5A97E70;
  long long v37 = *(_OWORD *)&off_1E5A97E80;
  long long v32 = xmmword_1E5A97E30;
  long long v33 = unk_1E5A97E40;
  unint64_t v28 = (unint64_t)&v30;
  uint64_t v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v25, &v21, 0, (uint64_t)&v31, (uint64_t)&v28);
  *(void *)&long long v21 = 0x701C95861FC50076;
  *((void *)&v21 + 1) = "md::GeometryLogic]";
  *(void *)&long long v22 = 17;
  *(void *)&long long v31 = 0x3070CB6B3C7F21D3;
  *((void *)&v31 + 1) = "md::GeometryContext]";
  *(void *)&long long v32 = 19;
  BYTE8(v32) = 1;
  *(void *)&long long v25 = &v26;
  *((void *)&v25 + 1) = 0;
  unint64_t v28 = (unint64_t)&v30;
  uint64_t v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v31, 0, (uint64_t)&v25, (uint64_t)&v28);
  unint64_t v28 = 0x653D1F33EF15EF04;
  uint64_t v29 = "md::LoadingStatusLogic]";
  uint64_t v30 = 22;
  *(void *)&long long v25 = 0x90B6813830DCB581;
  *((void *)&v25 + 1) = "md::LoadingStatusContext]";
  uint64_t v26 = 24;
  char v27 = 1;
  *(void *)&long long v31 = &v32;
  *((void *)&v31 + 1) = 1;
  long long v32 = xmmword_1E5A97E00;
  *(void *)&long long v33 = 16;
  *(void *)&long long v21 = &v22;
  *((void *)&v21 + 1) = 1;
  long long v22 = xmmword_1E5A97E18;
  *(void *)&long long v23 = 29;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, &v28, &v25, 0, (uint64_t)&v31, (uint64_t)&v21);
  *(void *)&long long v25 = 0xBDB8C71631E0AA6CLL;
  *((void *)&v25 + 1) = "md::MapZoomLevelStyleLogic]";
  uint64_t v26 = 26;
  *(void *)&long long v21 = 0xF0AA2DB42EB710AFLL;
  *((void *)&v21 + 1) = "md::MapZoomLevelStyleLogicContext]";
  *(void *)&long long v22 = 33;
  BYTE8(v22) = 1;
  *(void *)&long long v31 = &v32;
  *((void *)&v31 + 1) = 2;
  long long v32 = xmmword_1E5A97A40;
  long long v33 = unk_1E5A97A50;
  long long v34 = xmmword_1E5A97A60;
  unint64_t v28 = (unint64_t)&v30;
  uint64_t v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v25, &v21, 0, (uint64_t)&v31, (uint64_t)&v28);
  *(void *)&long long v21 = 0x3F812BA5755E8568;
  *((void *)&v21 + 1) = "md::SharedResourcesLogic]";
  *(void *)&long long v22 = 24;
  *(void *)&long long v31 = 0xA60DDA5A69582425;
  *((void *)&v31 + 1) = "md::SharedResourcesContext]";
  *(void *)&long long v32 = 26;
  BYTE8(v32) = 1;
  *(void *)&long long v25 = &v26;
  *((void *)&v25 + 1) = 0;
  unint64_t v28 = (unint64_t)&v30;
  uint64_t v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v31, 0, (uint64_t)&v25, (uint64_t)&v28);
  *(void *)&long long v21 = 0x41948F4CADE567A1;
  *((void *)&v21 + 1) = "md::DebugDrawLogic]";
  *(void *)&long long v22 = 18;
  *(void *)&long long v31 = 0x3619066E3FB5F2CLL;
  *((void *)&v31 + 1) = "md::DebugDrawContext]";
  *(void *)&long long v32 = 20;
  BYTE8(v32) = 1;
  *(void *)&long long v25 = &v26;
  *((void *)&v25 + 1) = 0;
  unint64_t v28 = (unint64_t)&v30;
  uint64_t v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v21, &v31, 0, (uint64_t)&v25, (uint64_t)&v28);
  *(void *)&long long v25 = 0xEA624BC935BAF297;
  *((void *)&v25 + 1) = "md::mun::MuninLogic]";
  uint64_t v26 = 19;
  *(void *)&long long v21 = 0x8EA84A1BD3791AFALL;
  *((void *)&v21 + 1) = "md::mun::MuninContext]";
  *(void *)&long long v22 = 21;
  BYTE8(v22) = 1;
  *(void *)&long long v31 = &v32;
  *((void *)&v31 + 1) = 3;
  long long v34 = xmmword_1E5A97EB0;
  long long v35 = unk_1E5A97EC0;
  *(void *)&long long v36 = 20;
  long long v32 = xmmword_1E5A97E90;
  long long v33 = unk_1E5A97EA0;
  unint64_t v28 = (unint64_t)&v30;
  uint64_t v29 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic((uint64_t)this + 232, (unint64_t *)&v25, &v21, 1, (uint64_t)&v31, (uint64_t)&v28);
  *(void *)&long long v31 = 0xA00000002;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, 2u, &v31)+ 18) = 0;
  int v5 = WORD3(v31);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, WORD2(v31), (_WORD *)&v31 + 2)+ 18) = v5 << 16;
  long long v31 = xmmword_1A28FD600;
  *(void *)&long long v32 = 0x3E0000000FLL;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, 0x12u, &v31)+ 18) = 1;
  int v6 = WORD3(v31);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, WORD2(v31), (_WORD *)&v31 + 2)+ 18) = (v6 << 16) | 1;
  int v7 = WORD5(v31);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, WORD4(v31), (_WORD *)&v31 + 4)+ 18) = (v7 << 16) | 1;
  int v8 = HIWORD(v31);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, WORD6(v31), (_WORD *)((unint64_t)&v31 | 0xC))+ 18) = (v8 << 16) | 1;
  int v9 = WORD1(v32);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, v32, &v32)+ 18) = (v9 << 16) | 1;
  int v10 = WORD3(v32);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, WORD2(v32), (_WORD *)&v32 + 2)+ 18) = (v10 << 16) | 1;
  long long v31 = xmmword_1A28FD610;
  long long v32 = xmmword_1A28FD620;
  *(void *)&long long v33 = 0x4A00000045;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, 3u, &v31)+ 18) = 2;
  int v11 = WORD3(v31);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, WORD2(v31), (_WORD *)&v31 + 2)+ 18) = (v11 << 16) | 2;
  int v12 = WORD5(v31);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, WORD4(v31), (_WORD *)&v31 + 4)+ 18) = (v12 << 16) | 2;
  int v13 = HIWORD(v31);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, WORD6(v31), (_WORD *)((unint64_t)&v31 | 0xC))+ 18) = (v13 << 16) | 2;
  int v14 = WORD1(v32);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, v32, &v32)+ 18) = (v14 << 16) | 2;
  int v15 = WORD3(v32);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, WORD2(v32), (_WORD *)&v32 + 2)+ 18) = (v15 << 16) | 2;
  int v16 = WORD5(v32);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, WORD4(v32), (_WORD *)&v32 + 4)+ 18) = (v16 << 16) | 2;
  int v17 = HIWORD(v32);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, WORD6(v32), (_WORD *)&v32 + 6)+ 18) = (v17 << 16) | 2;
  int v18 = WORD1(v33);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, v33, &v33)+ 18) = (v18 << 16) | 2;
  int v19 = WORD3(v33);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>((uint64_t)this + 80, WORD2(v33), (_WORD *)&v33 + 2)+ 18) = (v19 << 16) | 2;
  return this;
}

void sub_1A1FFF5C0(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = &unk_1EF5463F0;
  if (*((unsigned char *)v1 + 548)) {
    *((unsigned char *)v1 + 548) = 0;
  }
  md::MapEngineMode::~MapEngineMode(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<ggl::Fog::FogPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::Fog::FogPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588C90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::Fog::FogPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588C90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::Sky::SkyPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::Sky::SkyPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588D00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::Sky::SkyPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588D00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::SkyRenderResources::~SkyRenderResources(md::SkyRenderResources *this)
{
  uint64_t v2 = *((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  int v5 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    int v6 = (std::__shared_weak_count *)*((void *)this + 21);
    if (!v6) {
      goto LABEL_13;
    }
  }
  else
  {
    int v6 = (std::__shared_weak_count *)*((void *)this + 21);
    if (!v6) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  int v7 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    int v8 = (std::__shared_weak_count *)*((void *)this + 17);
    if (!v8) {
      goto LABEL_19;
    }
  }
  else
  {
    int v8 = (std::__shared_weak_count *)*((void *)this + 17);
    if (!v8) {
      goto LABEL_19;
    }
  }
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_19:
  int v9 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    int v10 = (std::__shared_weak_count *)*((void *)this + 12);
    if (!v10) {
      goto LABEL_25;
    }
  }
  else
  {
    int v10 = (std::__shared_weak_count *)*((void *)this + 12);
    if (!v10) {
      goto LABEL_25;
    }
  }
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_25:
  int v11 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    int v12 = (std::__shared_weak_count *)*((void *)this + 8);
    if (!v12) {
      goto LABEL_31;
    }
  }
  else
  {
    int v12 = (std::__shared_weak_count *)*((void *)this + 8);
    if (!v12) {
      goto LABEL_31;
    }
  }
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_31:
  int v13 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    int v14 = (std::__shared_weak_count *)*((void *)this + 4);
    if (!v14) {
      goto LABEL_37;
    }
  }
  else
  {
    int v14 = (std::__shared_weak_count *)*((void *)this + 4);
    if (!v14) {
      goto LABEL_37;
    }
  }
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_37:
  int v15 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void ggl::SpecularBuildingPointyRoof::BuildingPipelineState::~BuildingPipelineState(ggl::SpecularBuildingPointyRoof::BuildingPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup::textureIsEnabled(ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup *this)
{
  return 0;
}

BOOL ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup::constantDataIsEnabled(ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup *this, unint64_t a2)
{
  return a2 < 7;
}

void ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup::~BuildingPipelineSetup(ggl::SpecularBuildingPointyRoof::BuildingPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void sub_1A1FFFE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  int v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)CachedShouldRequestWGS84Elevations;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1A1FFFFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v15);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A2000078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A20001A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2000294(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ggl::TextureWithReverseAlpha::Pos2DUVPipelineState::~Pos2DUVPipelineState(ggl::TextureWithReverseAlpha::Pos2DUVPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup::textureIsEnabled(ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup::constantDataIsEnabled(ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup::~Pos2DUVPipelineSetup(ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

uint64_t md::OverlayTileData::estimatedCost(md::OverlayTileData *this)
{
  uint64_t v1 = (char *)this + 752;
  uint64_t v2 = (char *)*((void *)this + 95);
  for (result = 1072; v2 != v1; uint64_t v2 = (char *)*((void *)v2 + 1))
  {
    uint64_t v5 = *((void *)v2 + 2);
    if (v5)
    {
      uint64_t v4 = (4 * *(_DWORD *)(*(void *)(v5 + 24) + 80) * *(_DWORD *)(*(void *)(v5 + 24) + 84));
    }
    else
    {
      uint64_t v6 = *((void *)v2 + 3);
      if (v6)
      {
        int v7 = *(uint64_t **)(v6 + 32);
        int v8 = *(uint64_t **)(v6 + 40);
        if (v7 != v8)
        {
          uint64_t v4 = 0;
          do
          {
            uint64_t v9 = *v7++;
            uint64_t v4 = *(void *)(**(void **)(v9 + 64) + 48)
               + v4
               + *(void *)(*(void *)(v9 + 96) + 48)
               - (*(void *)(**(void **)(v9 + 64) + 40)
                + *(void *)(*(void *)(v9 + 96) + 40));
          }
          while (v7 != v8);
          goto LABEL_4;
        }
        goto LABEL_45;
      }
      uint64_t v10 = *((void *)v2 + 4);
      if (v10)
      {
        int v11 = *(uint64_t **)(v10 + 32);
        int v12 = *(uint64_t **)(v10 + 40);
        if (v11 != v12)
        {
          uint64_t v4 = 0;
          do
          {
            uint64_t v13 = *v11++;
            uint64_t v4 = *(void *)(**(void **)(v13 + 64) + 48)
               + v4
               + *(void *)(*(void *)(v13 + 96) + 48)
               - (*(void *)(**(void **)(v13 + 64) + 40)
                + *(void *)(*(void *)(v13 + 96) + 40));
          }
          while (v11 != v12);
          goto LABEL_4;
        }
LABEL_45:
        uint64_t v4 = 0;
        goto LABEL_4;
      }
      if (*((void *)v2 + 5))
      {
        uint64_t v4 = 24;
      }
      else
      {
        uint64_t v14 = *((void *)v2 + 6);
        uint64_t v15 = *((void *)v2 + 7);
        if (v14 != v15)
        {
          uint64_t v4 = 0;
          do
          {
            int v19 = *(void **)v14;
            uint64_t v18 = *(void *)(*(void *)v14 + 24);
            if (v18) {
              uint64_t v18 = *(void *)(**(void **)(v18 + 64) + 48)
            }
                  + *(void *)(*(void *)(v18 + 96) + 48)
                  - (*(void *)(**(void **)(v18 + 64) + 40)
                   + *(void *)(*(void *)(v18 + 96) + 40));
            uint64_t v20 = v19[4];
            if (v20) {
              uint64_t v18 = *(void *)(**(void **)(v20 + 64) + 48)
            }
                  + v18
                  + *(void *)(*(void *)(v20 + 96) + 48)
                  - (*(void *)(**(void **)(v20 + 64) + 40)
                   + *(void *)(*(void *)(v20 + 96) + 40));
            uint64_t v21 = v19[5];
            if (v21)
            {
              long long v22 = *(uint64_t **)(v21 + 32);
              for (uint64_t i = *(uint64_t **)(v21 + 40);
                    v22 != i;
                    uint64_t v18 = *(void *)(**(void **)(v24 + 64) + 48)
                        + v18
                        + *(void *)(*(void *)(v24 + 96) + 48)
                        - (*(void *)(**(void **)(v24 + 64) + 40)
                         + *(void *)(*(void *)(v24 + 96) + 40)))
              {
                uint64_t v24 = *v22++;
              }
            }
            long long v25 = (void *)v19[38];
            if (v25)
            {
              uint64_t v17 = v25[14];
              if (v17)
              {
                uint64_t v26 = v25[15];
                if (v26) {
                  uint64_t v16 = (v25[19] + v25[18]) * v25[20];
                }
                else {
                  uint64_t v16 = 0;
                }
                if (v26) {
                  uint64_t v17 = v16 + 10;
                }
                else {
                  uint64_t v17 = v16;
                }
              }
              v18 += v17;
            }
            v4 += v18;
            v14 += 8;
          }
          while (v14 != v15);
          goto LABEL_4;
        }
        char v27 = (uint64_t *)*((void *)v2 + 13);
        if (v27)
        {
          uint64_t v28 = *v27;
          uint64_t v29 = v27[1];
          if (*v27 == v29) {
            goto LABEL_45;
          }
          unint64_t v30 = v29 - v28 - 136;
          if (v30 >= 0x88)
          {
            uint64_t v35 = 0;
            uint64_t v36 = 0;
            unint64_t v37 = v30 / 0x88 + 1;
            uint64_t v38 = v28 + 152;
            uint64_t v39 = v37 & 0x3FFFFFFFFFFFFFELL;
            do
            {
              v35 += (4
                                  * *(_DWORD *)(*(void *)(v38 - 136) + 80)
                                  * *(_DWORD *)(*(void *)(v38 - 136) + 84));
              v36 += (4 * *(_DWORD *)(*(void *)v38 + 80) * *(_DWORD *)(*(void *)v38 + 84));
              v38 += 272;
              v39 -= 2;
            }
            while (v39);
            uint64_t v4 = v36 + v35;
            if (v37 == (v37 & 0x3FFFFFFFFFFFFFELL)) {
              goto LABEL_4;
            }
            v28 += 136 * (v37 & 0x3FFFFFFFFFFFFFELL);
          }
          else
          {
            uint64_t v4 = 0;
          }
          do
          {
            v4 += (4
                               * *(_DWORD *)(*(void *)(v28 + 16) + 80)
                               * *(_DWORD *)(*(void *)(v28 + 16) + 84));
            v28 += 136;
          }
          while (v28 != v29);
        }
        else
        {
          long long v31 = (uint64_t *)*((void *)v2 + 14);
          if (!v31)
          {
            uint64_t v4 = 1;
            goto LABEL_4;
          }
          uint64_t v32 = *v31;
          uint64_t v33 = v31[1];
          if (*v31 == v33) {
            goto LABEL_45;
          }
          unint64_t v34 = v33 - v32 - 136;
          if (v34 >= 0x88)
          {
            uint64_t v40 = 0;
            uint64_t v41 = 0;
            unint64_t v42 = v34 / 0x88 + 1;
            unint64_t v43 = (void *)(v32 + 264);
            uint64_t v44 = v42 & 0x3FFFFFFFFFFFFFELL;
            do
            {
              v40 += *(v43 - 17);
              v41 += *v43;
              v43 += 34;
              v44 -= 2;
            }
            while (v44);
            uint64_t v4 = v41 + v40;
            if (v42 == (v42 & 0x3FFFFFFFFFFFFFELL)) {
              goto LABEL_4;
            }
            v32 += 136 * (v42 & 0x3FFFFFFFFFFFFFELL);
          }
          else
          {
            uint64_t v4 = 0;
          }
          do
          {
            v4 += *(void *)(v32 + 128);
            v32 += 136;
          }
          while (v32 != v33);
        }
      }
    }
LABEL_4:
    result += v4;
  }
  return result;
}

void md::OverlayTileData::~OverlayTileData(md::OverlayTileData *this)
{
  md::OverlayTileData::~OverlayTileData(this);
  JUMPOUT(0x1A6239270);
}

{
  geo::read_write_lock *v2;
  const char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  md::OverlayTileData *v6;
  uint64_t v7;
  uint64_t v8;
  md::OverlayTileData *v9;
  md::OverlayTileData *v10;
  uint64_t v11;
  uint64_t v12;
  md::OverlayTileData *v13;
  md::OverlayTileData *v14;
  uint64_t v15;
  uint64_t v16;
  md::OverlayTileData *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  uint64_t vars8;

  *(void *)this = &unk_1EF535150;
  *((void *)this + 79) = &unk_1EF535190;
  if (*((void *)this + 105)) {
    md::OverlayTileData::clearEntities(this);
  }
  uint64_t v2 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)((char *)this + 872));
  if (v2) {
    geo::read_write_lock::logFailure(v2, (uint64_t)"destruction", v3);
  }
  uint64_t v4 = (void *)*((void *)this + 106);
  if (v4)
  {
    *((void *)this + 107) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 104);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (*((void *)this + 102))
  {
    uint64_t v6 = (md::OverlayTileData *)*((void *)this + 101);
    int v7 = *((void *)this + 100);
    int v8 = *(void *)v6;
    *(void *)(v8 + 8) = *(void *)(v7 + 8);
    **(void **)(v7 + 8) = v8;
    *((void *)this + 102) = 0;
    if (v6 != (md::OverlayTileData *)((char *)this + 800))
    {
      do
      {
        uint64_t v9 = (md::OverlayTileData *)*((void *)v6 + 1);
        md::OverlayTileData::OverlayTileResource::~OverlayTileResource((md::OverlayTileData *)((char *)v6 + 16));
        operator delete(v6);
        uint64_t v6 = v9;
      }
      while (v9 != (md::OverlayTileData *)((char *)this + 800));
    }
  }
  if (*((void *)this + 99))
  {
    uint64_t v10 = (md::OverlayTileData *)*((void *)this + 98);
    int v11 = *((void *)this + 97);
    int v12 = *(void *)v10;
    *(void *)(v12 + 8) = *(void *)(v11 + 8);
    **(void **)(v11 + 8) = v12;
    *((void *)this + 99) = 0;
    if (v10 != (md::OverlayTileData *)((char *)this + 776))
    {
      do
      {
        uint64_t v13 = (md::OverlayTileData *)*((void *)v10 + 1);
        md::OverlayTileData::OverlayTileResource::~OverlayTileResource((md::OverlayTileData *)((char *)v10 + 16));
        operator delete(v10);
        uint64_t v10 = v13;
      }
      while (v13 != (md::OverlayTileData *)((char *)this + 776));
    }
  }
  if (*((void *)this + 96))
  {
    uint64_t v14 = (md::OverlayTileData *)*((void *)this + 95);
    uint64_t v15 = *((void *)this + 94);
    uint64_t v16 = *(void *)v14;
    *(void *)(v16 + 8) = *(void *)(v15 + 8);
    **(void **)(v15 + 8) = v16;
    *((void *)this + 96) = 0;
    if (v14 != (md::OverlayTileData *)((char *)this + 752))
    {
      do
      {
        uint64_t v17 = (md::OverlayTileData *)*((void *)v14 + 1);
        md::OverlayTileData::OverlayTileResource::~OverlayTileResource((md::OverlayTileData *)((char *)v14 + 16));
        operator delete(v14);
        uint64_t v14 = v17;
      }
      while (v17 != (md::OverlayTileData *)((char *)this + 752));
    }
  }
  uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 93);
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  int v19 = (std::__shared_weak_count *)*((void *)this + 91);
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  md::MapTileData::~MapTileData(this);
}

void sub_1A2000B7C(_Unwind_Exception *a1)
{
  geo::read_write_lock::~read_write_lock((pthread_rwlock_t *)(v1 + 872));
  uint64_t v3 = *(void **)(v1 + 848);
  if (v3)
  {
    *(void *)(v1 + 856) = v3;
    operator delete(v3);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 824);
  std::list<md::OverlayTileData::OverlayTileResource>::~list((uint64_t *)(v1 + 800));
  std::list<md::OverlayTileData::OverlayTileResource>::~list((uint64_t *)(v1 + 776));
  std::list<md::OverlayTileData::OverlayTileResource>::~list((uint64_t *)(v1 + 752));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 736);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 720);
  md::MapTileData::~MapTileData((md::MapTileData *)v1);
  _Unwind_Resume(a1);
}

void md::OverlayTileData::clearEntities(md::OverlayTileData *this)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 106);
  uint64_t v3 = (uint64_t *)*((void *)this + 107);
  if (v2 != v3)
  {
    uint64_t v4 = (int8x8_t *)*((void *)this + 105);
    do
    {
      uint64_t v5 = *v2;
      uint64_t v6 = (void *)gdc::Registry::storage<md::components::QueuedForDestruction<>>(v4);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v6, v5);
      uint64_t v7 = *v2++;
      int v8 = (void *)gdc::Registry::storage<md::components::QueuedForDestruction<md::DrapingLogic>>(v4);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v8, v7);
    }
    while (v2 != v3);
    uint64_t v2 = (uint64_t *)*((void *)this + 106);
    uint64_t v9 = (uint64_t *)*((void *)this + 107);
    if (v2 != v9)
    {
      uint64_t v10 = (int8x8_t *)*((void *)this + 105);
      do
      {
        int v11 = (void *)gdc::Registry::storage<md::overlayComponents::VectorOverlay>(v10);
        unint64_t v12 = *v2++;
        gdc::ComponentStorageWrapper<md::overlayComponents::VectorOverlay>::remove(v11, v12);
      }
      while (v2 != v9);
      uint64_t v2 = (uint64_t *)*((void *)this + 106);
      uint64_t v13 = (uint64_t *)*((void *)this + 107);
      if (v2 != v13)
      {
        uint64_t v14 = (int8x8_t *)*((void *)this + 105);
        do
        {
          uint64_t v15 = (void *)gdc::Registry::storage<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::Texture>>(v14);
          unint64_t v16 = *v2++;
          gdc::ComponentStorageWrapper<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::Texture>>::remove(v15, v16);
        }
        while (v2 != v13);
        uint64_t v2 = (uint64_t *)*((void *)this + 106);
        uint64_t v17 = (uint64_t *)*((void *)this + 107);
        if (v2 != v17)
        {
          uint64_t v18 = (int8x8_t *)*((void *)this + 105);
          do
          {
            int v19 = (void *)gdc::Registry::storage<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::RasterTile>>(v18);
            unint64_t v20 = *v2++;
            gdc::ComponentStorageWrapper<md::overlayComponents::RasterOverlayBase<md::OverlayTileData::OverlayTileResource::RasterTile>>::remove(v19, v20);
          }
          while (v2 != v17);
          uint64_t v2 = (uint64_t *)*((void *)this + 106);
        }
      }
    }
  }
  *((void *)this + 107) = v2;
}

uint64_t *std::list<md::OverlayTileData::OverlayTileResource>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        md::OverlayTileData::OverlayTileResource::~OverlayTileResource((md::OverlayTileData::OverlayTileResource *)(v3 + 2));
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void md::OverlayTileData::OverlayTileResource::~OverlayTileResource(md::OverlayTileData::OverlayTileResource *this)
{
  uint64_t v2 = (void *)*((void *)this + 14);
  if (v2)
  {
    *((void *)this + 15) = v2;
    operator delete(v2);
  }
  std::unique_ptr<std::vector<md::PolylineOverlayRenderable>>::reset[abi:nn180100]((void ***)this + 13, 0);
  uint64_t v3 = (void **)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v3)
  {
    uint64_t v4 = (char *)*v3;
    if (*v3)
    {
      uint64_t v5 = (char *)v3[1];
      uint64_t v6 = *v3;
      if (v5 != v4)
      {
        do
          md::OverlayTileData::OverlayTileResource::CustomTile::~CustomTile((md::OverlayTileData::OverlayTileResource::CustomTile *)(v5 - 136));
        while (v5 != v4);
        uint64_t v6 = *v3;
      }
      v3[1] = v4;
      operator delete(v6);
    }
    MEMORY[0x1A6239270](v3, 0x20C40960023A9);
  }
  uint64_t v7 = (void **)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v7)
  {
    int v8 = (char *)*v7;
    if (*v7)
    {
      uint64_t v9 = (char *)v7[1];
      uint64_t v10 = *v7;
      if (v9 != v8)
      {
        do
          md::OverlayTileData::OverlayTileResource::RasterTile::~RasterTile((md::OverlayTileData::OverlayTileResource::RasterTile *)(v9 - 136));
        while (v9 != v8);
        uint64_t v10 = *v7;
      }
      v7[1] = v8;
      operator delete(v10);
    }
    MEMORY[0x1A6239270](v7, 0x20C40960023A9);
  }
  int v11 = (uint64_t *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v11)
  {
    unint64_t v12 = (std::__shared_weak_count *)v11[2];
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v13 = *v11;
    *int v11 = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    MEMORY[0x1A6239270](v11, 0x20C40960023A9);
  }
  uint64_t v14 = (uint64_t *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v14)
  {
    uint64_t v15 = (std::__shared_weak_count *)v14[2];
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    uint64_t v16 = *v14;
    *uint64_t v14 = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    MEMORY[0x1A6239270](v14, 0x20C40960023A9);
  }
  uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    uint64_t v18 = (void *)*((void *)this + 4);
    if (!v18) {
      goto LABEL_41;
    }
  }
  else
  {
    uint64_t v18 = (void *)*((void *)this + 4);
    if (!v18) {
      goto LABEL_41;
    }
  }
  int v19 = (void *)*((void *)this + 5);
  unint64_t v20 = v18;
  if (v19 != v18)
  {
    do
    {
      long long v22 = (md::PolygonOverlayRenderable *)*--v19;
      uint64_t v21 = v22;
      *int v19 = 0;
      if (v22)
      {
        md::PolygonOverlayRenderable::~PolygonOverlayRenderable(v21);
        MEMORY[0x1A6239270]();
      }
    }
    while (v19 != v18);
    unint64_t v20 = (void *)*((void *)this + 4);
  }
  *((void *)this + 5) = v18;
  operator delete(v20);
LABEL_41:
  uint64_t v23 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v23)
  {
    uint64_t v24 = *(std::__shared_weak_count **)(v23 + 8);
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    MEMORY[0x1A6239270](v23, 0x1020C40A95220FALL);
  }
  uint64_t v25 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  char v27 = *(void **)this;
  *(void *)this = 0;
  if (v27) {
    std::default_delete<md::OverlayTileData::OverlayTileResource::Texture>::operator()[abi:nn180100](v27);
  }
}

void ***std::unique_ptr<std::vector<md::PolylineOverlayRenderable>>::reset[abi:nn180100](void ***result, void **a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    uint64_t v3 = (char *)*v2;
    if (*v2)
    {
      uint64_t v4 = (char *)v2[1];
      uint64_t v5 = *v2;
      if (v4 != v3)
      {
        do
        {
          uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
          if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          uint64_t v7 = *((void *)v4 - 3);
          *((void *)v4 - 3) = 0;
          if (v7) {
            (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
          }
          v4 -= 48;
        }
        while (v4 != v3);
        uint64_t v5 = *v2;
      }
      v2[1] = v3;
      operator delete(v5);
    }
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void md::OverlayTileData::OverlayTileResource::CustomTile::~CustomTile(md::OverlayTileData::OverlayTileResource::CustomTile *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 12);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 12);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 8);
    if (!v5) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 8);
    if (!v5) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_13:
  *((void *)this + 4) = off_1EF559478;
}

void md::OverlayTileData::OverlayTileResource::RasterTile::~RasterTile(md::OverlayTileData::OverlayTileResource::RasterTile *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 13);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 13);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 9);
    if (!v5) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 9);
    if (!v5) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_13:
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v7) {
      return;
    }
  }
  else
  {
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v7) {
      return;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void md::PolygonOverlayRenderable::~PolygonOverlayRenderable(md::PolygonOverlayRenderable *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (char *)*((void *)this + 35);
    if (!v3) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v3 = (char *)*((void *)this + 35);
    if (!v3) {
      goto LABEL_11;
    }
  }
  uint64_t v4 = (char *)*((void *)this + 36);
  uint64_t v5 = v3;
  if (v4 != v3)
  {
    uint64_t v6 = (char *)*((void *)this + 36);
    do
    {
      int v8 = (void *)*((void *)v6 - 3);
      v6 -= 24;
      uint64_t v7 = v8;
      if (v8)
      {
        *((void *)v4 - 2) = v7;
        operator delete(v7);
      }
      uint64_t v4 = v6;
    }
    while (v6 != v3);
    uint64_t v5 = (char *)*((void *)this + 35);
  }
  *((void *)this + 36) = v3;
  operator delete(v5);
LABEL_11:
  uint64_t v9 = *((void *)this + 34);
  *((void *)this + 34) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)this + 33);
  *((void *)this + 33) = 0;
  if (v10)
  {
    int v11 = *(std::__shared_weak_count **)(v10 + 72);
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    unint64_t v12 = *(std::__shared_weak_count **)(v10 + 8);
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    MEMORY[0x1A6239270](v10, 0x1020C408635837CLL);
  }
  uint64_t v13 = *((void *)this + 30);
  *((void *)this + 30) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *((void *)this + 29);
  *((void *)this + 29) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *((void *)this + 27);
  *((void *)this + 27) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = *((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = *((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = *((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v23 = *((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = *((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = *((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  char v27 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    uint64_t v28 = (std::__shared_weak_count *)*((void *)this + 14);
    if (!v28) {
      goto LABEL_57;
    }
  }
  else
  {
    uint64_t v28 = (std::__shared_weak_count *)*((void *)this + 14);
    if (!v28) {
      goto LABEL_57;
    }
  }
  if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
LABEL_57:
  uint64_t v29 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    unint64_t v30 = (std::__shared_weak_count *)*((void *)this + 7);
    if (!v30) {
      goto LABEL_63;
    }
  }
  else
  {
    unint64_t v30 = (std::__shared_weak_count *)*((void *)this + 7);
    if (!v30) {
      goto LABEL_63;
    }
  }
  if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
LABEL_63:
  uint64_t v31 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  uint64_t v32 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  uint64_t v33 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
}

void std::default_delete<md::OverlayTileData::OverlayTileResource::Texture>::operator()[abi:nn180100](void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[8];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[6];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[6];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

void geo::_retain_ptr<objc_object * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = off_1EF559478;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<objc_object * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = off_1EF559478;

  return a1;
}

uint64_t md::OverlayTileData::OverlayTileResource::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void **)md::OverlayTileData::OverlayTileResource::moveNonTileVectorResources(a1, a2);
  uint64_t v5 = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t v6 = *v4;
  *(void *)a1 = v5;
  if (v6) {
    std::default_delete<md::OverlayTileData::OverlayTileResource::Texture>::operator()[abi:nn180100](v6);
  }
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = 0;
  int v8 = *(void ***)(a1 + 88);
  *(void *)(a1 + 88) = v7;
  if (v8)
  {
    uint64_t v9 = (char *)*v8;
    if (*v8)
    {
      uint64_t v10 = (char *)v8[1];
      int v11 = *v8;
      if (v10 != v9)
      {
        do
          md::OverlayTileData::OverlayTileResource::RasterTile::~RasterTile((md::OverlayTileData::OverlayTileResource::RasterTile *)(v10 - 136));
        while (v10 != v9);
        int v11 = *v8;
      }
      v8[1] = v9;
      operator delete(v11);
    }
    MEMORY[0x1A6239270](v8, 0x20C40960023A9);
  }
  uint64_t v12 = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0;
  uint64_t v13 = *(void ***)(a1 + 96);
  *(void *)(a1 + 96) = v12;
  if (v13)
  {
    uint64_t v14 = (char *)*v13;
    if (*v13)
    {
      uint64_t v15 = (char *)v13[1];
      uint64_t v16 = *v13;
      if (v15 != v14)
      {
        do
          md::OverlayTileData::OverlayTileResource::CustomTile::~CustomTile((md::OverlayTileData::OverlayTileResource::CustomTile *)(v15 - 136));
        while (v15 != v14);
        uint64_t v16 = *v13;
      }
      v13[1] = v14;
      operator delete(v16);
    }
    MEMORY[0x1A6239270](v13, 0x20C40960023A9);
  }
  uint64_t v17 = *(void **)(a1 + 112);
  if (v17)
  {
    *(void *)(a1 + 120) = v17;
    operator delete(v17);
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a2 + 120) = 0u;
  uint64_t v18 = *(void ***)(a2 + 104);
  *(_OWORD *)(a2 + 104) = 0u;
  std::unique_ptr<std::vector<md::PolylineOverlayRenderable>>::reset[abi:nn180100]((void ***)(a1 + 104), v18);
  atomic_store(*(unsigned char *)(a2 + 137) & 1, (unsigned __int8 *)(a1 + 137));
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  return a1;
}

uint64_t md::OverlayTileData::OverlayTileResource::moveNonTileVectorResources(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = (void **)(a1 + 32);
  uint64_t v7 = *(void **)(a1 + 32);
  if (v7)
  {
    int v8 = *(void **)(a1 + 40);
    uint64_t v9 = *(void **)(a1 + 32);
    if (v8 != v7)
    {
      do
      {
        int v11 = (md::PolygonOverlayRenderable *)*--v8;
        uint64_t v10 = v11;
        *int v8 = 0;
        if (v11)
        {
          md::PolygonOverlayRenderable::~PolygonOverlayRenderable(v10);
          MEMORY[0x1A6239270]();
        }
      }
      while (v8 != v7);
      uint64_t v9 = *v6;
    }
    *(void *)(a1 + 40) = v7;
    operator delete(v9);
    *uint64_t v6 = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v14;
  if (v15)
  {
    uint64_t v16 = *(std::__shared_weak_count **)(v15 + 8);
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    MEMORY[0x1A6239270](v15, 0x1020C40A95220FALL);
  }
  long long v17 = *(_OWORD *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  uint64_t v18 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v17;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  uint64_t v20 = *(uint64_t **)(a1 + 72);
  *(void *)(a1 + 72) = v19;
  if (v20)
  {
    uint64_t v21 = (std::__shared_weak_count *)v20[2];
    if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    uint64_t v22 = *v20;
    *uint64_t v20 = 0;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
    MEMORY[0x1A6239270](v20, 0x20C40960023A9);
  }
  uint64_t v23 = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  uint64_t v24 = *(uint64_t **)(a1 + 80);
  *(void *)(a1 + 80) = v23;
  if (v24)
  {
    uint64_t v25 = (std::__shared_weak_count *)v24[2];
    if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    uint64_t v26 = *v24;
    *uint64_t v24 = 0;
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
    }
    MEMORY[0x1A6239270](v24, 0x20C40960023A9);
  }
  return a1;
}

void md::OverlayTileData::updateNonTileOverlays(uint64_t a1, void *a2)
{
  uint64_t v22 = (uint64_t)&v22;
  uint64_t v23 = &v22;
  uint64_t v2 = a2[2];
  if (!v2) {
    return;
  }
  uint64_t v4 = *a2;
  uint64_t v3 = (uint64_t *)a2[1];
  uint64_t v5 = *v3;
  *(void *)(v5 + 8) = *(void *)(*a2 + 8);
  **(void **)(v4 + 8) = v5;
  uint64_t v6 = v22;
  *(void *)(v22 + 8) = v3;
  *uint64_t v3 = v6;
  *(void *)(v4 + 8) = &v22;
  uint64_t v22 = v4;
  uint64_t v24 = v2;
  a2[2] = 0;
  uint64_t v7 = v23;
  if (v23 == &v22)
  {
    *(void *)(v4 + 8) = &v22;
    return;
  }
  uint64_t v9 = (uint64_t *)(a1 + 752);
  do
  {
    if (v7[2])
    {
      uint64_t v10 = (char *)operator new(0xA8uLL);
      uint64_t v11 = v7[2];
      void v7[2] = 0;
      *((void *)v10 + 2) = v11;
      *(_OWORD *)(v10 + 24) = 0u;
      *(_OWORD *)(v10 + 40) = 0u;
      *(_OWORD *)(v10 + 56) = 0u;
      *(_OWORD *)(v10 + 72) = 0u;
      *(_OWORD *)(v10 + 88) = 0u;
      *(_OWORD *)(v10 + 104) = 0u;
      *((void *)v10 + 15) = 0;
      *((_OWORD *)v10 + 8) = *((_OWORD *)v7 + 8);
      *((void *)v10 + 18) = v7[18];
      v7[16] = 0;
      v7[17] = 0;
      v7[18] = 0;
      *((_WORD *)v10 + 76) = 1;
      goto LABEL_13;
    }
    if (v7[3])
    {
      uint64_t v10 = (char *)operator new(0xA8uLL);
      uint64_t v12 = v7[3];
      v7[3] = 0;
      *((void *)v10 + 2) = 0;
      *((void *)v10 + 3) = v12;
      long long v13 = 0uLL;
      *((_OWORD *)v10 + 2) = 0u;
      goto LABEL_8;
    }
    if (v7[4])
    {
      uint64_t v10 = (char *)operator new(0xA8uLL);
      uint64_t v14 = v7[4];
      v7[4] = 0;
      *((void *)v10 + 2) = 0;
      *((void *)v10 + 3) = 0;
      *((void *)v10 + 4) = v14;
      *(_OWORD *)(v10 + 40) = 0u;
      *(_OWORD *)(v10 + 56) = 0u;
      *(_OWORD *)(v10 + 72) = 0u;
      *(_OWORD *)(v10 + 88) = 0u;
      *(_OWORD *)(v10 + 104) = 0u;
      *((void *)v10 + 15) = 0;
      goto LABEL_12;
    }
    if (v7[5])
    {
      uint64_t v10 = (char *)operator new(0xA8uLL);
      uint64_t v16 = v7[5];
      v7[5] = 0;
      *((void *)v10 + 2) = 0;
      *((void *)v10 + 3) = 0;
      *((void *)v10 + 4) = 0;
      *((void *)v10 + 5) = v16;
      long long v13 = 0uLL;
LABEL_8:
      *((_OWORD *)v10 + 3) = v13;
      *((_OWORD *)v10 + 4) = v13;
      *((_OWORD *)v10 + 5) = v13;
LABEL_9:
      *((_OWORD *)v10 + 6) = v13;
      *((_OWORD *)v10 + 7) = v13;
      goto LABEL_12;
    }
    if (v7[6] != v7[7])
    {
      uint64_t v10 = (char *)operator new(0xA8uLL);
      *((_OWORD *)v10 + 1) = 0u;
      *((_OWORD *)v10 + 2) = 0u;
      *((_OWORD *)v10 + 3) = *((_OWORD *)v7 + 3);
      *((void *)v10 + 8) = v7[8];
      v7[6] = 0;
      v7[7] = 0;
      v7[8] = 0;
      *((void *)v10 + 15) = 0;
      *(_OWORD *)(v10 + 104) = 0u;
      *(_OWORD *)(v10 + 88) = 0u;
      *(_OWORD *)(v10 + 72) = 0u;
      goto LABEL_12;
    }
    if (v7[11])
    {
      uint64_t v10 = (char *)operator new(0xA8uLL);
      uint64_t v17 = v7[11];
      v7[11] = 0;
      long long v13 = 0uLL;
      *((_OWORD *)v10 + 3) = 0u;
      *((_OWORD *)v10 + 4) = 0u;
      *((_OWORD *)v10 + 1) = 0u;
      *((_OWORD *)v10 + 2) = 0u;
      *((void *)v10 + 10) = 0;
      *((void *)v10 + 11) = v17;
      goto LABEL_9;
    }
    if (v7[12])
    {
      uint64_t v10 = (char *)operator new(0xA8uLL);
      uint64_t v18 = v7[12];
      v7[12] = 0;
      *((_OWORD *)v10 + 4) = 0u;
      *((_OWORD *)v10 + 5) = 0u;
      *((_OWORD *)v10 + 2) = 0u;
      *((_OWORD *)v10 + 3) = 0u;
      *((_OWORD *)v10 + 1) = 0u;
      *((void *)v10 + 12) = v18;
      *((void *)v10 + 13) = 0;
      *((void *)v10 + 14) = 0;
      *((void *)v10 + 15) = 0;
LABEL_12:
      *((_OWORD *)v10 + 8) = *((_OWORD *)v7 + 8);
      *((void *)v10 + 18) = v7[18];
      v7[16] = 0;
      v7[17] = 0;
      v7[18] = 0;
      *((_WORD *)v10 + 76) = 2;
LABEL_13:
      *((void *)v10 + 20) = 0;
      uint64_t v15 = *v9;
      *(void *)uint64_t v10 = *v9;
      *((void *)v10 + 1) = v9;
      *(void *)(v15 + 8) = v10;
      *(void *)(a1 + 752) = v10;
      ++*(void *)(a1 + 768);
    }
    uint64_t v7 = (uint64_t *)v7[1];
  }
  while (v7 != &v22);
  uint64_t v19 = v23;
  uint64_t v20 = *v23;
  *(void *)(v20 + 8) = *(void *)(v4 + 8);
  **(void **)(v4 + 8) = v20;
  uint64_t v24 = 0;
  if (v19 != &v22)
  {
    do
    {
      uint64_t v21 = (uint64_t *)v19[1];
      md::OverlayTileData::OverlayTileResource::~OverlayTileResource((md::OverlayTileData::OverlayTileResource *)(v19 + 2));
      operator delete(v19);
      uint64_t v19 = v21;
    }
    while (v21 != &v22);
  }
}

void sub_1A2002530(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::list<md::OverlayTileData::OverlayTileResource>::~list((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ***std::unique_ptr<std::vector<md::OverlayTileData::OverlayTileResource::CustomTile>>::~unique_ptr[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (char *)*v2;
    if (*v2)
    {
      uint64_t v4 = (char *)v2[1];
      uint64_t v5 = *v2;
      if (v4 != v3)
      {
        do
          md::OverlayTileData::OverlayTileResource::CustomTile::~CustomTile((md::OverlayTileData::OverlayTileResource::CustomTile *)(v4 - 136));
        while (v4 != v3);
        uint64_t v5 = *v2;
      }
      v2[1] = v3;
      operator delete(v5);
    }
    MEMORY[0x1A6239270](v2, 0x20C40960023A9);
  }
  return a1;
}

uint64_t **std::unique_ptr<md::OverlayTileData::OverlayTileResource::ElevatedGradientRibbonLayer>::~unique_ptr[abi:nn180100](uint64_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[2];
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = *v2;
    *uint64_t v2 = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    MEMORY[0x1A6239270](v2, 0x20C40960023A9);
  }
  return a1;
}

uint64_t **std::unique_ptr<md::OverlayTileData::OverlayTileResource::ElevatedRibbonLayer>::~unique_ptr[abi:nn180100](uint64_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[2];
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = *v2;
    *uint64_t v2 = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    MEMORY[0x1A6239270](v2, 0x20C40960023A9);
  }
  return a1;
}

void *std::vector<std::unique_ptr<md::PolygonOverlayRenderable>>::~vector[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = (md::PolygonOverlayRenderable *)*--v3;
        uint64_t v5 = v6;
        *uint64_t v3 = 0;
        if (v6)
        {
          md::PolygonOverlayRenderable::~PolygonOverlayRenderable(v5);
          MEMORY[0x1A6239270]();
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *std::unique_ptr<md::OverlayTileData::OverlayTileResource::CircleResource>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    MEMORY[0x1A6239270](v2, 0x1020C40A95220FALL);
  }
  return a1;
}

uint64_t md::OverlayTileData::hasTileData(md::OverlayTileData *this)
{
  uint64_t v2 = (pthread_rwlock_t *)((char *)this + 872);
  uint64_t v3 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)((char *)this + 872));
  if (v3) {
    geo::read_write_lock::logFailure(v3, (uint64_t)"read lock", v4);
  }
  for (uint64_t i = (void *)*((void *)this + 95); i != (void *)((char *)this + 752); uint64_t i = (void *)i[1])
  {
    uint64_t v6 = (void *)i[13];
    if (!v6 || *v6 == v6[1])
    {
      uint64_t v7 = (void *)i[14];
      if (!v7 || *v7 == v7[1]) {
        continue;
      }
    }
    uint64_t v8 = 1;
    goto LABEL_12;
  }
  uint64_t v8 = 0;
LABEL_12:
  uint64_t v9 = (geo::read_write_lock *)pthread_rwlock_unlock(v2);
  if (v9) {
    geo::read_write_lock::logFailure(v9, (uint64_t)"unlock", v10);
  }
  return v8;
}

void md::OverlayTileData::OverlayTileResource::RasterTile::updateWithContext(md::OverlayTileData::OverlayTileResource::RasterTile *this, int8x8_t *a2, int a3)
{
  int8x8_t v4 = a2[1];
  if (!*(void *)&v4) {
    goto LABEL_24;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x1AF456233693CD46;
    if (*(void *)&v4 <= 0x1AF456233693CD46uLL) {
      uint64_t v6 = 0x1AF456233693CD46uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v7 = *(void **)(*(void *)a2 + 8 * v6);
  if (!v7) {
    goto LABEL_24;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_24;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46) {
          goto LABEL_22;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x1AF456233693CD46) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_24;
    }
  }
  if (v8[2] != 0x1AF456233693CD46) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v13 = 0;
LABEL_25:
  int v14 = 1 << *((unsigned char *)this + 33);
  double v15 = 1.0 / (double)v14;
  double v16 = v15 * (double)(v14 + ~*((_DWORD *)this + 9));
  double v17 = (double)a3;
  if (!a3) {
    double v17 = -0.0;
  }
  double v18 = v17 + v15 * (double)*((int *)this + 10);
  uint64_t v38 = 0;
  uint64_t v40 = 0;
  long long v37 = 0u;
  long long v35 = 0u;
  long long v34 = 0u;
  double v33 = 1.0 / (double)v14;
  long long v36 = *(unint64_t *)&v15;
  double v39 = v33;
  double v41 = v18;
  double v42 = v16;
  long long v43 = xmmword_1A28FCCC0;
  gm::operator*<double,4,4,4>(v44[0].f64, (double *)(v13 + 808), &v33);
  float32x2_t v19 = vcvt_f32_f64(v44[1]);
  float32x2_t v20 = vcvt_f32_f64(v44[2]);
  float32x2_t v21 = vcvt_f32_f64(v44[3]);
  float32x2_t v22 = vcvt_f32_f64(v44[4]);
  float32x2_t v23 = vcvt_f32_f64(v44[5]);
  float32x2_t v24 = vcvt_f32_f64(v44[6]);
  float32x2_t v25 = vcvt_f32_f64(v44[7]);
  uint64_t v26 = (void *)*((void *)this + 8);
  unint64_t v27 = v26[1];
  uint64_t v28 = (float32x2_t *)v26[9];
  *uint64_t v28 = vcvt_f32_f64(v44[0]);
  v28[1] = v19;
  v28[2] = v20;
  v28[3] = v21;
  v28[4] = v22;
  v28[5] = v23;
  v28[6] = v24;
  v28[7] = v25;
  if (v26[8] > v27) {
    unint64_t v27 = v26[8];
  }
  v26[7] = 0;
  v26[8] = v27;
  uint64_t v29 = (void *)*((void *)this + 14);
  unint64_t v30 = v29[1];
  uint64_t v31 = v29[9];
  uint64_t v32 = *((void *)this + 12);
  *(float *)uint64_t v31 = *((float *)this + 32) * *(float *)v32;
  *(_DWORD *)(v31 + 4) = *(_DWORD *)(v32 + 4);
  if (v29[8] > v30) {
    unint64_t v30 = v29[8];
  }
  v29[7] = 0;
  v29[8] = v30;
}

float computeRouteZOffset(int8x8_t *a1)
{
  int8x8_t v1 = a1[1];
  if (!*(void *)&v1) {
    goto LABEL_24;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x8BD499FBD96FBB9ELL;
    if (*(void *)&v1 <= 0x8BD499FBD96FBB9ELL) {
      unint64_t v3 = 0x8BD499FBD96FBB9ELL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  int8x8_t v4 = *(void **)(*(void *)a1 + 8 * v3);
  if (!v4) {
    goto LABEL_24;
  }
  uint8x8_t v5 = (void *)*v4;
  if (!v5) {
    goto LABEL_24;
  }
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x8BD499FBD96FBB9ELL)
      {
        if (v5[2] == 0x8BD499FBD96FBB9ELL) {
          goto LABEL_22;
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_24;
      }
      uint8x8_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x8BD499FBD96FBB9ELL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_24;
    }
LABEL_11:
    uint8x8_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_24;
    }
  }
  if (v5[2] != 0x8BD499FBD96FBB9ELL) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v9 = v5[5];
  if (*(void *)(v9 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    uint64_t v10 = *(void *)(v9 + 32);
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v10 = 0;
LABEL_25:
  float v11 = 1.0;
  if (*(unsigned char *)(v10 + 4)) {
    float v11 = *(float *)(v10 + 20);
  }
  md::LayoutContext::zoomAtCentrePoint(a1);
  float v13 = fmaxf((float)(v12 * -0.28571) + 4.8571, 0.0);
  float v14 = 1.0811 - v13;
  BOOL v15 = v13 <= 1.0;
  float v16 = 0.081081;
  if (v15) {
    float v16 = v14;
  }
  return (float)(fminf(*(float *)(v10 + 16), 1.0) * (float)(1.6216 * v11)) / v16;
}

uint64_t md::OverlayTileData::OverlayTileResource::RasterTile::setAlphaMultiplier(uint64_t this, float a2)
{
  *(float *)(this + 128) = a2;
  uint64_t v2 = *(void *)(this + 112);
  unint64_t v3 = *(void *)(v2 + 64);
  **(float **)(v2 + 72) = **(float **)(this + 96) * a2;
  unint64_t v4 = *(void *)(v2 + 8);
  if (v3 > v4) {
    unint64_t v4 = v3;
  }
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = v4;
  return this;
}

void md::mun::MuninViewLayerDataSource::createLayerData(uint64_t a1@<X0>, char *a2@<X1>, int8x8_t **a3@<X2>, void *a4@<X8>)
{
  uint64_t v173 = *MEMORY[0x1E4F143B8];
  uint64_t v160 = 0;
  unint64_t v161 = 0;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 592);
  if (!v6)
  {
    uint64_t v9 = 0;
    goto LABEL_19;
  }
  uint64_t v9 = std::__shared_weak_count::lock(v6);
  unint64_t v161 = v9;
  if (!v9 || (uint64_t v10 = *(void *)(a1 + 584), (v160 = v10) == 0))
  {
LABEL_19:
    *a4 = 0;
    a4[1] = 0;
    if (!v9) {
      return;
    }
    goto LABEL_230;
  }
  gdc::LayerDataRequestKey::keyData((gdc::LayerDataRequestKey *)v166, a2);
  uint64_t v11 = *(unsigned __int16 *)v166[0];
  unint64_t v12 = *((void *)v166[0] + 1);
  uint64_t v13 = *((void *)v166[0] + 2);
  unint64_t v159 = v12;
  unsigned __int8 v158 = v13;
  uint64_t v14 = *((unsigned __int8 *)v166[0] + 24);
  if (v166[0] != (void *)v167) {
    free(v166[0]);
  }
  md::mun::MuninMetadataContainer::activePoint((md::mun::MuninMetadataContainer *)v166, v10, v12);
  if (!LOBYTE(v166[0]))
  {
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_229;
  }
  BOOL v15 = v170;
  float v16 = (unsigned __int8 *)v171;
  if (v170 == v171) {
    goto LABEL_21;
  }
  uint64_t v17 = 0;
  unint64_t v141 = v13 & 0xFFFFFFFF00000000;
  double v18 = v170;
  do
  {
    if (v18[240] == BYTE2(v13)) {
      uint64_t v17 = (uint64_t)v18;
    }
    v18 += 288;
  }
  while (v18 != v171);
  if (!v17)
  {
LABEL_21:
    *a4 = 0;
    a4[1] = 0;
    if (v15 == v16) {
      goto LABEL_227;
    }
    goto LABEL_224;
  }
  id v19 = *(id *)(a1 + 608);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)[v19 gglDevice] + 24))(&v157);

  if (v14)
  {
    float32x2_t v20 = *a3;
    float32x2_t v21 = a3[1];
    if (*a3 != v21)
    {
      while (v20->i16[0] != 33)
      {
        v20 += 6;
        if (v20 == v21) {
          goto LABEL_32;
        }
      }
    }
    if (v20 == v21 || *(void *)&v20[4] != 1)
    {
LABEL_32:
      uint64_t v23 = 0;
    }
    else
    {
      int8x8_t v22 = v20[3];
      uint64_t v23 = *(void *)(*(void *)&v22 + 112);
      float32x2_t v24 = *(std::__shared_weak_count **)(*(void *)&v22 + 120);
      if (v24)
      {
        p_shared_owners = &v24->__shared_owners_;
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        if (v23) {
          uint64_t v26 = v23 - 8;
        }
        else {
          uint64_t v26 = 0;
        }
        uint64_t v155 = v26;
        unint64_t v156 = v24;
        atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
LABEL_37:
        gdc::ResourceKey::keyData((gdc::ResourceKey *)&__p, (void *)(v155 + 8));
        int v28 = *(unsigned __int8 *)(__p + 16);
        if ((void)__p != v163) {
          free((void *)__p);
        }
        v154.n128_u64[0] = *(void *)(v155 + 152);
        if (v154.n128_u64[0])
        {
          unsigned __int8 v136 = BYTE2(v13);
          *(_OWORD *)uint64_t v149 = 0u;
          *(_OWORD *)unint64_t v150 = 0u;
          int v151 = 1065353216;
          if (v28) {
            BOOL v29 = v158 == v28;
          }
          else {
            BOOL v29 = 0;
          }
          if (v29)
          {
            uint64_t v57 = *(unsigned __int8 **)(v17 + 248);
            unint64_t v58 = *(unsigned __int8 **)(v17 + 256);
            if (v57 == v58) {
              goto LABEL_181;
            }
            while (1)
            {
              unint64_t v59 = *v57;
              uint64_t v60 = *(void *)(v155 + 920);
              if (v59 >= (*(void *)(v155 + 928) - v60) >> 4) {
                break;
              }
              uint64_t v61 = *(void *)(v60 + 16 * v59);
              if (!v61) {
                break;
              }
              uint64_t v62 = *(void *)(v60 + 16 * v59 + 8);
              if (v62) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v62 + 8), 1uLL, memory_order_relaxed);
              }
              *(void *)&long long __p = v61;
              *((void *)&__p + 1) = v62;
              uint64_t v64 = *(void **)(v61 + 144);
              unint64_t v63 = *(atomic_ullong **)(v61 + 152);
              v144[0] = v64;
              v144[1] = v63;
              if (v63) {
                atomic_fetch_add_explicit(v63 + 1, 1uLL, memory_order_relaxed);
              }
              LODWORD(v152) = v59;
              unint64_t v65 = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<ggl::Texture2D>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ggl::Texture2D>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ggl::Texture2D>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<ggl::Texture2D>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t *)v149, v59, &v152);
              long long v66 = *(_OWORD *)v144;
              v144[0] = 0;
              v144[1] = 0;
              uint64_t v67 = (std::__shared_weak_count *)v65[4];
              *(_OWORD *)(v65 + 3) = v66;
              if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                std::__shared_weak_count::__release_weak(v67);
              }
              if (v144[1] && !atomic_fetch_add((atomic_ullong *volatile)v144[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
              {
                (*(void (**)(void *))(*(void *)v144[1] + 16))(v144[1]);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v144[1]);
              }
              unint64_t v68 = (std::__shared_weak_count *)*((void *)&__p + 1);
              if (*((void *)&__p + 1)
                && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__p + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
              }
              if (++v57 == v58)
              {
LABEL_181:
                v144[1] = 0;
                unint64_t v145 = 0;
                v144[0] = 0;
                uint64_t v108 = *(void *)(v154.n128_u64[0] + 8);
                if (v108)
                {
                  uint64_t v109 = 0;
                  unint64_t v110 = *(uint64_t **)v154.n128_u64[0];
                  while (1)
                  {
                    uint64_t v111 = *v110;
                    v110 += 24;
                    if (v111 == v136) {
                      break;
                    }
                    if (v108 == ++v109) {
                      goto LABEL_199;
                    }
                  }
                  uint64_t v143 = 0;
                  uint64_t v143 = *(void *)v154.n128_u64[0] + 192 * v109;
                  v117 = (long long *)operator new(0x28uLL);
                  *(void *)v117 = &unk_1EF57DEF0;
                  *((void *)v117 + 1) = &v154;
                  *((void *)v117 + 2) = &v143;
                  *((void *)v117 + 3) = v149;
                  *((void *)v117 + 4) = v144;
                  uint64_t v164 = v117;
                  long long v152 = 0uLL;
                  (*(void (**)(uint64_t, long long *, long long *))(*(void *)v157 + 16))(v157, &__p, &v152);
                  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&v152);
                  std::function<void ()(ggl::ResourceAccessor *)>::~function(&__p);
                }
LABEL_199:
                long long __p = 0uLL;
                uint64_t v163 = 0;
                if (*(unsigned char *)(v155 + 160)) {
                  std::vector<float>::__insert_with_size[abi:nn180100]<float const*,float const*>((unint64_t *)&__p, 0, (char *)(v155 + 200), (char *)(v155 + 920), 180);
                }
                long long v152 = v167;
                uint64_t v153 = v168;
                uint64_t v118 = (char *)operator new(0x240uLL);
                std::__shared_ptr_emplace<md::mun::MuninViewData>::__shared_ptr_emplace[abi:nn180100]<gdc::LayerDataRequestKey const&,std::vector<md::mun::MuninViewMesh>,geo::Geocentric<double>,unsigned long long &,unsigned char &,md::mun::PhotoInfo const&,std::vector<float>,unsigned long long &,std::allocator<md::mun::MuninViewData>,0>((uint64_t)v118, a2, (uint64_t)v144, (uint64_t)&v152, (uint64_t *)&v159, (char *)&v158, v17, (uint64_t)&__p, &v169);
                *a4 = v118 + 24;
                a4[1] = v118;
                if ((void)__p) {
                  operator delete((void *)__p);
                }
                *(void *)&long long __p = v144;
                std::vector<md::mun::MuninViewMesh>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
                goto LABEL_204;
              }
            }
          }
          else
          {
            uint64_t v31 = *a3;
            unint64_t v30 = a3[1];
            if (*a3 != v30)
            {
              while (v31->i16[0] != 34)
              {
                v31 += 6;
                if (v31 == v30) {
                  goto LABEL_186;
                }
              }
            }
            if (v31 != v30)
            {
              uint64_t v71 = *(unsigned __int8 **)(v17 + 248);
              v140 = *(unsigned __int8 **)(v17 + 256);
              if (v71 == v140) {
                goto LABEL_181;
              }
              uint64_t v138 = v11;
              uint64_t v139 = a2;
LABEL_126:
              uint64_t v72 = *v71;
              uint64_t v73 = v159;
              v144[0] = v147;
              v144[1] = v147;
              unint64_t v145 = v147;
              uint64_t v146 = 32;
              unint64_t v148 = 0;
              unsigned int v137 = v72;
              unint64_t v74 = v141 | (v72 << 16) | v158;
              *(void *)&long long v152 = v11;
              geo::small_vector_base<unsigned char>::insert<unsigned char *>(v144, v147, (char *)&v152, (char *)&v152 + 8);
              *(void *)&long long v152 = v73;
              geo::small_vector_base<unsigned char>::insert<unsigned char *>(v144, (char *)v144[1], (char *)&v152, (char *)&v152 + 8);
              *(void *)&long long v152 = v74;
              geo::small_vector_base<unsigned char>::insert<unsigned char *>(v144, (char *)v144[1], (char *)&v152, (char *)&v152 + 8);
              *(void *)&long long v152 = 2;
              geo::small_vector_base<unsigned char>::insert<unsigned char *>(v144, (char *)v144[1], (char *)&v152, (char *)&v152 + 8);
              uint64_t v75 = (unsigned __int8 *)v144[0];
              unint64_t v76 = (char *)v144[1] - (char *)v144[0];
              if (v144[1] == v144[0])
              {
                unint64_t v77 = 0;
              }
              else
              {
                unint64_t v77 = 0;
                if (v76 <= 1) {
                  unint64_t v76 = 1;
                }
                do
                {
                  unsigned int v78 = *v75++;
                  v77 ^= (v77 << 6) - 0x61C8864680B583EBLL + (v77 >> 2) + v78;
                  --v76;
                }
                while (v76);
              }
              unint64_t v148 = v77;
              gdc::ResourceKey::ResourceKey((uint64_t)&__p, 0, 34, (uint64_t)v144, 0, 2147483646);
              if (v144[0] != v145) {
                free(v144[0]);
              }
              int8x8_t v79 = v31[2];
              if (!*(void *)&v79) {
                goto LABEL_176;
              }
              int v80 = __p;
              uint64_t v81 = WORD1(__p);
              unint64_t v82 = (WORD1(__p)
                   - 0x61C8864680B583EBLL
                   + ((__p - 0x61C8864680B583EBLL) << 6)
                   + (((unint64_t)__p - 0x61C8864680B583EBLL) >> 2)) ^ (__p
                                                                                              - 0x61C8864680B583EBLL);
              unint64_t v83 = v165;
              unint64_t v84 = ((unint64_t)&v165[8 * v82 - 0xC3910C8D016B07DLL] + (v82 >> 2) - 3) ^ v82;
              uint8x8_t v85 = (uint8x8_t)vcnt_s8(v79);
              v85.i16[0] = vaddlv_u8(v85);
              if (v85.u32[0] > 1uLL)
              {
                uint64_t v86 = ((unint64_t)&v165[8 * v82 - 0xC3910C8D016B07DLL] + (v82 >> 2) - 3) ^ v82;
                if (v84 >= *(void *)&v79) {
                  uint64_t v86 = v84 % *(void *)&v79;
                }
              }
              else
              {
                uint64_t v86 = v84 & (*(void *)&v79 - 1);
              }
              unint64_t v87 = *(uint64_t ****)(*(void *)&v31[1] + 8 * v86);
              if (!v87 || (size_t v88 = *v87) == 0)
              {
LABEL_176:
                *a4 = 0;
                a4[1] = 0;
                char v107 = 1;
                uint64_t v11 = v138;
                a2 = v139;
                goto LABEL_177;
              }
              uint64_t v89 = (const void *)*((void *)&__p + 1);
              size_t v90 = v163 - *((void *)&__p + 1);
              if (v85.u32[0] < 2uLL)
              {
                uint64_t v91 = *(void *)&v79 - 1;
                while (1)
                {
                  long long v95 = v88[1];
                  if ((uint64_t *)v84 == v95)
                  {
                    if (*((unsigned __int8 *)v88 + 16) == v80
                      && *((unsigned __int16 *)v88 + 9) == v81
                      && v88[11] == v83)
                    {
                      uint64_t v96 = v88[3];
                      if ((char *)v88[4] - (char *)v96 == v90)
                      {
                        size_t v133 = v90;
                        uint64_t v135 = v89;
                        uint64_t v129 = v83;
                        uint64_t v131 = v81;
                        int v97 = memcmp(v96, v89, v90);
                        size_t v90 = v133;
                        uint64_t v89 = v135;
                        unint64_t v83 = v129;
                        uint64_t v81 = v131;
                        if (!v97) {
                          goto LABEL_162;
                        }
                      }
                    }
                  }
                  else if (((unint64_t)v95 & v91) != v86)
                  {
                    goto LABEL_176;
                  }
                  size_t v88 = (uint64_t **)*v88;
                  if (!v88) {
                    goto LABEL_176;
                  }
                }
              }
              while (1)
              {
                unint64_t v92 = (unint64_t)v88[1];
                if (v84 == v92)
                {
                  if (*((unsigned __int8 *)v88 + 16) == v80
                    && *((unsigned __int16 *)v88 + 9) == v81
                    && v88[11] == v83)
                  {
                    long long v93 = v88[3];
                    if ((char *)v88[4] - (char *)v93 == v90)
                    {
                      size_t v132 = v90;
                      unint64_t v134 = v89;
                      unint64_t v128 = v83;
                      uint64_t v130 = v81;
                      int v94 = memcmp(v93, v89, v90);
                      size_t v90 = v132;
                      uint64_t v89 = v134;
                      unint64_t v83 = v128;
                      uint64_t v81 = v130;
                      if (!v94)
                      {
LABEL_162:
                        uint64_t v98 = v88[14];
                        v99 = v88[15];
                        v144[0] = v98;
                        v144[1] = v99;
                        a2 = v139;
                        if (v99) {
                          atomic_fetch_add_explicit(v99 + 1, 1uLL, memory_order_relaxed);
                        }
                        uint64_t v101 = v98[18];
                        uint64_t v100 = v98[19];
                        *(void *)&long long v152 = v101;
                        *((void *)&v152 + 1) = v100;
                        if (v100) {
                          atomic_fetch_add_explicit((atomic_ullong *volatile)(v100 + 8), 1uLL, memory_order_relaxed);
                        }
                        LODWORD(v143) = v137;
                        uint64_t v102 = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<ggl::Texture2D>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ggl::Texture2D>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ggl::Texture2D>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<ggl::Texture2D>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t *)v149, v137, &v143);
                        uint64_t v11 = v138;
                        long long v103 = v152;
                        long long v152 = 0uLL;
                        uint64_t v104 = (std::__shared_weak_count *)v102[4];
                        *(_OWORD *)(v102 + 3) = v103;
                        if (v104 && !atomic_fetch_add(&v104->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                          std::__shared_weak_count::__release_weak(v104);
                        }
                        uint64_t v105 = (std::__shared_weak_count *)*((void *)&v152 + 1);
                        if (*((void *)&v152 + 1)
                          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v152 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                          std::__shared_weak_count::__release_weak(v105);
                        }
                        unint64_t v106 = (std::__shared_weak_count *)v144[1];
                        if (v144[1] && !atomic_fetch_add((atomic_ullong *volatile)v144[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                          std::__shared_weak_count::__release_weak(v106);
                        }
                        char v107 = 0;
LABEL_177:
                        if (*((long long **)&__p + 1) != v164) {
                          free(*((void **)&__p + 1));
                        }
                        if ((v107 & 1) == 0)
                        {
                          if (++v71 == v140) {
                            goto LABEL_181;
                          }
                          goto LABEL_126;
                        }
LABEL_204:
                        unint64_t v119 = v150[0];
                        if (v150[0])
                        {
                          do
                          {
                            uint64_t v120 = v119;
                            unint64_t v119 = (void *)*v119;
                            unint64_t v121 = (std::__shared_weak_count *)v120[4];
                            if (v121 && !atomic_fetch_add(&v121->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                              std::__shared_weak_count::__release_weak(v121);
                            }
                            operator delete(v120);
                          }
                          while (v119);
                        }
                        unint64_t v115 = v149[0];
                        v149[0] = 0;
                        if (v115) {
LABEL_211:
                        }
                          operator delete(v115);
                        goto LABEL_212;
                      }
                    }
                  }
                }
                else
                {
                  if (v92 >= *(void *)&v79) {
                    v92 %= *(void *)&v79;
                  }
                  if (v92 != v86) {
                    goto LABEL_176;
                  }
                }
                size_t v88 = (uint64_t **)*v88;
                if (!v88) {
                  goto LABEL_176;
                }
              }
            }
          }
LABEL_186:
          *a4 = 0;
          a4[1] = 0;
          goto LABEL_204;
        }
LABEL_98:
        *a4 = 0;
        a4[1] = 0;
        goto LABEL_212;
      }
    }
    if (v23) {
      uint64_t v27 = v23 - 8;
    }
    else {
      uint64_t v27 = 0;
    }
    uint64_t v155 = v27;
    unint64_t v156 = 0;
    goto LABEL_37;
  }
  uint64_t v32 = *a3;
  double v33 = a3[1];
  if (*a3 != v33)
  {
    while (v32->i16[0] != 23)
    {
      v32 += 6;
      if (v32 == v33) {
        goto LABEL_61;
      }
    }
  }
  if (v32 == v33 || *(void *)&v32[4] != 1)
  {
LABEL_61:
    uint64_t v35 = 0;
    goto LABEL_62;
  }
  int8x8_t v34 = v32[3];
  uint64_t v35 = *(void *)(*(void *)&v34 + 112);
  long long v36 = *(std::__shared_weak_count **)(*(void *)&v34 + 120);
  if (!v36)
  {
LABEL_62:
    if (v35) {
      uint64_t v39 = v35 - 8;
    }
    else {
      uint64_t v39 = 0;
    }
    uint64_t v155 = v39;
    unint64_t v156 = 0;
    goto LABEL_66;
  }
  long long v37 = &v36->__shared_owners_;
  atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v35) {
    uint64_t v38 = v35 - 8;
  }
  else {
    uint64_t v38 = 0;
  }
  uint64_t v155 = v38;
  unint64_t v156 = v36;
  atomic_fetch_add_explicit(v37, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(v37, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  uint64_t v39 = v155;
LABEL_66:
  if (!v39) {
    goto LABEL_98;
  }
  v144[0] = 0;
  v144[1] = 0;
  unint64_t v145 = 0;
  uint64_t v42 = v39 + 472;
  uint64_t v40 = *(void *)(v39 + 472);
  uint64_t v41 = *(void *)(v42 + 8);
  if (v41 != v40)
  {
    uint64_t v43 = 0;
    unint64_t v44 = 0;
    while (0x4EC4EC4EC4EC4EC5 * ((v41 - v40) >> 3) > v44)
    {
      if (*(unsigned char *)(v40 + v43))
      {
        if (*(unsigned char *)(v40 + v43) != 12) {
          break;
        }
        uint64_t v45 = v40 + v43;
        if (*(void *)(v40 + v43 + 16) - *(void *)(v40 + v43 + 8) != 64) {
          break;
        }
        uint64_t v46 = (std::__shared_weak_count *)operator new(0x58uLL);
        v46->__shared_owners_ = 0;
        v46->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583858;
        v46[1].__shared_weak_owners_ = 0;
        v46[2].__vftable = 0;
        v46[1].__shared_owners_ = 0;
        LODWORD(v46[2].__shared_owners_) = 0;
        v46->__shared_weak_owners_ = 0;
        v46[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55AE58;
        *(void *)&long long v47 = 0x100000001;
        *((void *)&v47 + 1) = 0x100000001;
        *(_OWORD *)((char *)&v46[2].__shared_owners_ + 4) = v47;
        *(std::__shared_weak_count_vtbl **)((char *)&v46[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000001;
        HIDWORD(v46[3].__shared_owners_) = 0;
        *(void *)&long long __p = v46 + 1;
        *((void *)&__p + 1) = v46;
        int v48 = [MEMORY[0x1E4F1C9B8] dataWithBytesNoCopy:***(void ***)(v45 + 8) length:*(void *)(**(void **)(v45 + 8) + 8) - ***(void ***)(v45 + 8) freeWhenDone:0];
        v149[0] = &v46[1];
        v149[1] = v46;
        atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
        textureWithData(&v154, v48, v149, 0);
        if (!atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      else
      {
        uint64_t v49 = v40 + v43;
        if (*(void *)(v40 + v43 + 16) - *(void *)(v40 + v43 + 8) != 32) {
          break;
        }
        int v50 = (std::__shared_weak_count *)operator new(0x58uLL);
        v50->__shared_owners_ = 0;
        v50->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583858;
        v50[1].__shared_weak_owners_ = 0;
        v50[2].__vftable = 0;
        v50[1].__shared_owners_ = 0;
        LODWORD(v50[2].__shared_owners_) = 0;
        v50->__shared_weak_owners_ = 0;
        v50[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55AE58;
        *(void *)&long long v51 = 0x100000001;
        *((void *)&v51 + 1) = 0x100000001;
        *(_OWORD *)((char *)&v50[2].__shared_owners_ + 4) = v51;
        *(std::__shared_weak_count_vtbl **)((char *)&v50[3].__vftable + 4) = (std::__shared_weak_count_vtbl *)0x100000001;
        HIDWORD(v50[3].__shared_owners_) = 0;
        *(void *)&long long __p = v50 + 1;
        *((void *)&__p + 1) = v50;
        int v48 = [MEMORY[0x1E4F1C9B8] dataWithBytesNoCopy:***(void ***)(v49 + 8) length:*(void *)(**(void **)(v49 + 8) + 8) - ***(void ***)(v49 + 8) freeWhenDone:0];
        *(void *)&long long v152 = v50 + 1;
        *((void *)&v152 + 1) = v50;
        atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
        textureWithData(&v154, v48, &v152, 0);
        if (!atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }

      BOOL v52 = (std::__shared_weak_count *)*((void *)&__p + 1);
      if (*((void *)&__p + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__p + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
      if (v154.n128_u64[0])
      {
        uint64_t v53 = (__n128 *)v144[1];
        if (v144[1] >= v145)
        {
          unint64_t v142 = v154.n128_u64[1];
          BOOL v55 = std::vector<std::shared_ptr<md::MuninRoadLabel>>::__push_back_slow_path<std::shared_ptr<md::MuninRoadLabel> const&>((uint64_t)v144, v154);
          unint64_t v54 = (std::__shared_weak_count *)v142;
        }
        else
        {
          *(void *)v144[1] = v154.n128_u64[0];
          unint64_t v54 = (std::__shared_weak_count *)v154.n128_u64[1];
          v53->n128_u64[1] = v154.n128_u64[1];
          if (v54) {
            atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          BOOL v55 = v53 + 1;
        }
        char v56 = 0;
        v144[1] = v55;
        if (!v54) {
          goto LABEL_91;
        }
LABEL_89:
        if (!atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
        goto LABEL_91;
      }
      unint64_t v54 = (std::__shared_weak_count *)v154.n128_u64[1];
LABEL_88:
      *a4 = 0;
      a4[1] = 0;
      char v56 = 1;
      if (v54) {
        goto LABEL_89;
      }
LABEL_91:
      if (v56) {
        goto LABEL_189;
      }
      ++v44;
      uint64_t v40 = *(void *)(v155 + 472);
      uint64_t v41 = *(void *)(v155 + 480);
      v43 += 104;
      if (v44 >= 0x4EC4EC4EC4EC4EC5 * ((v41 - v40) >> 3)) {
        goto LABEL_117;
      }
    }
    unint64_t v54 = 0;
    __n128 v154 = 0uLL;
    goto LABEL_88;
  }
LABEL_117:
  v149[0] = 0;
  v149[1] = 0;
  v150[0] = 0;
  uint64_t v69 = (long long *)operator new(0x20uLL);
  *(void *)uint64_t v69 = &unk_1EF57DEA8;
  *((void *)v69 + 1) = &v155;
  *((void *)v69 + 2) = v144;
  *((void *)v69 + 3) = v149;
  uint64_t v164 = v69;
  long long v152 = 0uLL;
  (*(void (**)(uint64_t, long long *, long long *))(*(void *)v157 + 16))(v157, &__p, &v152);
  uint64_t v70 = (std::__shared_weak_count *)*((void *)&v152 + 1);
  if (*((void *)&v152 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v152 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
    std::__shared_weak_count::__release_weak(v70);
  }
  if (v164 == &__p)
  {
    (*(void (**)(long long *))(__p + 32))(&__p);
  }
  else if (v164)
  {
    (*(void (**)(void))(*(void *)v164 + 40))();
  }
  long long __p = v167;
  uint64_t v163 = v168;
  long long v152 = 0uLL;
  uint64_t v153 = 0;
  unint64_t v112 = (char *)operator new(0x240uLL);
  std::__shared_ptr_emplace<md::mun::MuninViewData>::__shared_ptr_emplace[abi:nn180100]<gdc::LayerDataRequestKey const&,std::vector<md::mun::MuninViewMesh>,geo::Geocentric<double>,unsigned long long &,unsigned char &,md::mun::PhotoInfo const&,std::vector<float>,unsigned long long &,std::allocator<md::mun::MuninViewData>,0>((uint64_t)v112, a2, (uint64_t)v149, (uint64_t)&__p, (uint64_t *)&v159, (char *)&v158, v17, (uint64_t)&v152, &v169);
  *a4 = v112 + 24;
  a4[1] = v112;
  *(void *)&long long __p = v149;
  std::vector<md::mun::MuninViewMesh>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
LABEL_189:
  uint64_t v113 = (char *)v144[0];
  if (v144[0])
  {
    uint64_t v114 = (char *)v144[1];
    unint64_t v115 = v144[0];
    if (v144[1] != v144[0])
    {
      do
      {
        uint64_t v116 = (std::__shared_weak_count *)*((void *)v114 - 1);
        if (v116 && !atomic_fetch_add(&v116->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
          std::__shared_weak_count::__release_weak(v116);
        }
        v114 -= 16;
      }
      while (v114 != v113);
      unint64_t v115 = v144[0];
    }
    v144[1] = v113;
    goto LABEL_211;
  }
LABEL_212:
  uint64_t v122 = v156;
  if (v156 && !atomic_fetch_add(&v156->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
    std::__shared_weak_count::__release_weak(v122);
  }
  if (v157)
  {
    uint64_t v123 = (*(uint64_t (**)(uint64_t))(*(void *)v157 + 24))(v157);
    uint64_t v124 = v157;
    uint64_t v157 = 0;
    *(void *)&long long __p = v124;
    (*(void (**)(uint64_t, long long *))(*(void *)v123 + 48))(v123, &__p);
    uint64_t v125 = __p;
    *(void *)&long long __p = 0;
    if (v125) {
      (*(void (**)(uint64_t))(*(void *)v125 + 8))(v125);
    }
    uint64_t v126 = v157;
    uint64_t v157 = 0;
    if (v126) {
      (*(void (**)(uint64_t))(*(void *)v126 + 8))(v126);
    }
  }
  if (LOBYTE(v166[0]))
  {
    BOOL v15 = v170;
    float v16 = (unsigned __int8 *)v171;
    if (v170 == v171)
    {
LABEL_227:
      if (v16 != v172) {
        free(v16);
      }
      goto LABEL_229;
    }
    do
    {
LABEL_224:
      uint64_t v127 = (void *)*((void *)v15 + 31);
      if (v127 != *((void **)v15 + 33)) {
        free(v127);
      }
      v15 += 288;
    }
    while (v15 != v16);
    float v16 = v170;
    goto LABEL_227;
  }
LABEL_229:
  uint64_t v9 = v161;
  if (!v161) {
    return;
  }
LABEL_230:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_1A2004020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,void *__p,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a41);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a25);
  if (a56 != (void *)a58) {
    free(a56);
  }
  std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>::~unordered_map[abi:nn180100]((uint64_t)&a35);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a48);
  ggl::Loader::~Loader((ggl::Loader *)&a50);
  geo::optional<md::mun::CollectionPoint>::~optional((uint64_t)&a68);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a53);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<md::mun::MuninViewData>::__shared_ptr_emplace[abi:nn180100]<gdc::LayerDataRequestKey const&,std::vector<md::mun::MuninViewMesh>,geo::Geocentric<double>,unsigned long long &,unsigned char &,md::mun::PhotoInfo const&,std::vector<float>,unsigned long long &,std::allocator<md::mun::MuninViewData>,0>(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t *a5, char *a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EF582828;
  char v70 = *a2;
  gdc::LayerDataKey::LayerDataKey((uint64_t)&v71, (uint64_t)(a2 + 8));
  char v74 = 0;
  if (a2[96])
  {
    int v75 = *((_DWORD *)a2 + 25);
    char v74 = 1;
  }
  uint64_t v76 = *((void *)a2 + 13);
  uint64_t v16 = *a5;
  char v17 = *a6;
  uint64_t v18 = *a9;
  *(void *)(a1 + 24) = &unk_1EF558F70;
  *(_DWORD *)(a1 + 32) = atomic_fetch_add(gdc::LayerData::nextId(void)::idGenerator, 1u) + 1;
  *(unsigned char *)(a1 + 40) = v70;
  gdc::LayerDataKey::LayerDataKey(a1 + 48, (uint64_t)&v71);
  *(unsigned char *)(a1 + 136) = 0;
  if (v74)
  {
    *(_DWORD *)(a1 + 140) = v75;
    *(unsigned char *)(a1 + 136) = 1;
  }
  uint64_t v19 = v76;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 144) = v19;
  *(void *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 184) = 1;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 24) = &unk_1EF5502F0;
  *(void *)(a1 + 192) = v18;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 200) = *(_OWORD *)a3;
  *(void *)(a1 + 216) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v20 = *(void *)(a4 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a4;
  *(void *)(a1 + 240) = v20;
  *(void *)(a1 + 248) = v16;
  uint64_t v21 = *(void *)(a7 + 16);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)a7;
  *(void *)(a1 + 272) = v21;
  LODWORD(v21) = *(_DWORD *)(a7 + 32);
  *(void *)(a1 + 280) = *(void *)(a7 + 24);
  *(_DWORD *)(a1 + 288) = v21;
  *(void *)(a1 + 292) = *(void *)(a7 + 36);
  long long v22 = *(_OWORD *)(a7 + 44);
  long long v23 = *(_OWORD *)(a7 + 60);
  long long v24 = *(_OWORD *)(a7 + 92);
  *(_OWORD *)(a1 + 332) = *(_OWORD *)(a7 + 76);
  *(_OWORD *)(a1 + 348) = v24;
  *(_OWORD *)(a1 + 316) = v23;
  *(_OWORD *)(a1 + 300) = v22;
  long long v25 = *(_OWORD *)(a7 + 108);
  long long v26 = *(_OWORD *)(a7 + 124);
  long long v27 = *(_OWORD *)(a7 + 156);
  *(_OWORD *)(a1 + 396) = *(_OWORD *)(a7 + 140);
  *(_OWORD *)(a1 + 412) = v27;
  *(_OWORD *)(a1 + 364) = v25;
  *(_OWORD *)(a1 + 380) = v26;
  long long v28 = *(_OWORD *)(a7 + 172);
  long long v29 = *(_OWORD *)(a7 + 188);
  long long v30 = *(_OWORD *)(a7 + 220);
  *(_OWORD *)(a1 + 460) = *(_OWORD *)(a7 + 204);
  *(_OWORD *)(a1 + 476) = v30;
  *(_OWORD *)(a1 + 428) = v28;
  *(_OWORD *)(a1 + 444) = v29;
  *(_DWORD *)(a1 + 492) = *(_DWORD *)(a7 + 236);
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a7 + 240);
  uint64_t v31 = (char *)(a1 + 536);
  *(void *)(a1 + 504) = a1 + 536;
  *(void *)(a1 + 512) = a1 + 536;
  *(void *)(a1 + 520) = a1 + 536;
  *(void *)(a1 + 528) = 2;
  uint64_t v32 = *(char **)(a7 + 248);
  double v33 = *(char **)(a7 + 256);
  unint64_t v34 = v33 - v32;
  if ((unint64_t)(v33 - v32) >= 3)
  {
    if (v34 <= 4) {
      size_t v35 = 4;
    }
    else {
      size_t v35 = v33 - v32;
    }
    uint64_t v31 = (char *)malloc_type_malloc(v35, 0x100004077774924uLL);
    long long v36 = *(char **)(a1 + 504);
    long long v37 = *(char **)(a1 + 512);
    if (v36 == v37) {
      goto LABEL_25;
    }
    unint64_t v38 = v37 - v36;
    if ((unint64_t)(v37 - v36) < 8)
    {
      uint64_t v39 = v31;
      goto LABEL_24;
    }
    uint64_t v39 = v31;
    if ((unint64_t)(v31 - v36) < 0x20) {
      goto LABEL_24;
    }
    if (v38 >= 0x20)
    {
      unint64_t v40 = v38 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v41 = (long long *)(v36 + 16);
      uint64_t v42 = v31 + 16;
      unint64_t v43 = v38 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v44 = *v41;
        *(v42 - 1) = *(v41 - 1);
        _OWORD *v42 = v44;
        v41 += 2;
        v42 += 2;
        v43 -= 32;
      }
      while (v43);
      if (v38 == v40) {
        goto LABEL_25;
      }
      if ((v38 & 0x18) == 0)
      {
        v36 += v40;
        uint64_t v39 = &v31[v40];
        goto LABEL_24;
      }
    }
    else
    {
      unint64_t v40 = 0;
    }
    unint64_t v45 = v38 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v39 = &v31[v38 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v46 = v40 - (v38 & 0xFFFFFFFFFFFFFFF8);
    long long v47 = (uint64_t *)&v36[v40];
    int v48 = &v31[v40];
    do
    {
      uint64_t v49 = *v47++;
      *(void *)int v48 = v49;
      v48 += 8;
      v46 += 8;
    }
    while (v46);
    if (v38 == v45) {
      goto LABEL_25;
    }
    v36 += v45;
    do
    {
LABEL_24:
      char v50 = *v36++;
      *v39++ = v50;
    }
    while (v36 != v37);
LABEL_25:
    *(void *)(a1 + 504) = v31;
    *(void *)(a1 + 512) = v31;
    *(void *)(a1 + 528) = v35;
  }
  if (v32 == v33) {
    goto LABEL_44;
  }
  if (v34 < 8)
  {
    BOOL v52 = v31;
    goto LABEL_42;
  }
  if ((unint64_t)(v31 - v32) < 0x20)
  {
    BOOL v52 = v31;
    goto LABEL_42;
  }
  if (v34 >= 0x20)
  {
    unint64_t v51 = v34 & 0xFFFFFFFFFFFFFFE0;
    uint64_t v53 = (long long *)(v32 + 16);
    unint64_t v54 = v31 + 16;
    unint64_t v55 = v34 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v56 = *v53;
      *(v54 - 1) = *(v53 - 1);
      *unint64_t v54 = v56;
      v53 += 2;
      v54 += 2;
      v55 -= 32;
    }
    while (v55);
    if (v34 == v51) {
      goto LABEL_43;
    }
    if ((v34 & 0x18) == 0)
    {
      v32 += v51;
      BOOL v52 = &v31[v51];
      goto LABEL_42;
    }
  }
  else
  {
    unint64_t v51 = 0;
  }
  unint64_t v57 = v34 & 0xFFFFFFFFFFFFFFF8;
  BOOL v52 = &v31[v34 & 0xFFFFFFFFFFFFFFF8];
  unint64_t v58 = v51 - (v34 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v59 = (uint64_t *)&v32[v51];
  uint64_t v60 = &v31[v51];
  do
  {
    uint64_t v61 = *v59++;
    *(void *)uint64_t v60 = v61;
    v60 += 8;
    v58 += 8;
  }
  while (v58);
  if (v34 == v57) {
    goto LABEL_43;
  }
  v32 += v57;
  do
  {
LABEL_42:
    char v62 = *v32++;
    *v52++ = v62;
  }
  while (v32 != v33);
LABEL_43:
  uint64_t v31 = *(char **)(a1 + 512);
LABEL_44:
  *(void *)(a1 + 512) = &v31[v34];
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 552) = 0;
  uint64_t v64 = *(const void **)a8;
  uint64_t v63 = *(void *)(a8 + 8);
  int64_t v65 = v63 - *(void *)a8;
  if (v63 != *(void *)a8)
  {
    if (v65 < 0) {
      abort();
    }
    long long v66 = (char *)operator new(v63 - *(void *)a8);
    *(void *)(a1 + 544) = v66;
    *(void *)(a1 + 552) = v66;
    uint64_t v67 = &v66[4 * (v65 >> 2)];
    *(void *)(a1 + 560) = v67;
    memcpy(v66, v64, v65);
    *(void *)(a1 + 552) = v67;
  }
  *(unsigned char *)(a1 + 568) = v17;
  if (v74) {
    char v74 = 0;
  }
  if (v72 != v73) {
    free(v72);
  }
  return a1;
}

void sub_1A20045F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  *(void *)(v26 - 88) = v25;
  std::vector<md::mun::MuninViewMesh>::__destroy_vector::operator()[abi:nn180100]((void ***)(v26 - 88));
  *(void *)(v24 + 24) = a10;
  if (*(unsigned char *)(v24 + 136)) {
    *(unsigned char *)(v24 + 136) = 0;
  }
  long long v28 = *(void **)(v24 + 56);
  if (v28 != *(void **)(v24 + 72)) {
    free(v28);
  }
  if (a14 != a16) {
    free(a14);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v24);
  _Unwind_Resume(a1);
}

void std::vector<md::mun::MuninViewMesh>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  int8x8_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (!v2) {
    return;
  }
  unint64_t v4 = (char *)v1[1];
  uint8x8_t v5 = **a1;
  if (v4 == v2) {
    goto LABEL_14;
  }
  do
  {
    uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 8);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      unint64_t v7 = (std::__shared_weak_count *)*((void *)v4 - 10);
      if (!v7) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v7 = (std::__shared_weak_count *)*((void *)v4 - 10);
      if (!v7) {
        goto LABEL_4;
      }
    }
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
LABEL_4:
    v4 -= 88;
  }
  while (v4 != v2);
  uint8x8_t v5 = **a1;
LABEL_14:
  v1[1] = v2;
  operator delete(v5);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<ggl::Texture2D>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ggl::Texture2D>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<ggl::Texture2D>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<ggl::Texture2D>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  uint64_t v13 = a1 + 2;
  uint64_t v10 = operator new(0x28uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = 0;
  v10[4] = 0;
  float v14 = (float)(unint64_t)(a1[3] + 1);
  float v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    unint64_t v6 = v3;
    goto LABEL_72;
  }
  BOOL v16 = 1;
  if (v7 >= 3) {
    BOOL v16 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v7);
  unint64_t v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18) {
    size_t prime = v18;
  }
  else {
    size_t prime = v17;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v7 = a1[1];
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v20 = operator new(8 * prime);
    uint64_t v21 = (void *)*a1;
    *a1 = (uint64_t)v20;
    if (v21) {
      operator delete(v21);
    }
    uint64_t v22 = 0;
    a1[1] = prime;
    do
      *(void *)(*a1 + 8 * v22++) = 0;
    while (prime != v22);
    long long v23 = (void *)*v13;
    if (!*v13) {
      goto LABEL_59;
    }
    size_t v24 = v23[1];
    size_t v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v26 = v24 & v25;
      *(void *)(*a1 + 8 * v26) = v13;
      for (uint64_t i = (void *)*v23; *v23; uint64_t i = (void *)*v23)
      {
        size_t v28 = i[1] & v25;
        if (v28 == v26)
        {
          long long v23 = i;
        }
        else if (*(void *)(*a1 + 8 * v28))
        {
          void *v23 = *i;
          uint64_t v29 = 8 * v28;
          void *i = **(void **)(*a1 + v29);
          **(void **)(*a1 + v29) = i;
        }
        else
        {
          *(void *)(*a1 + 8 * v28) = v23;
          long long v23 = i;
          size_t v26 = v28;
        }
      }
LABEL_59:
      unint64_t v7 = prime;
      goto LABEL_60;
    }
    if (v24 >= prime) {
      v24 %= prime;
    }
    *(void *)(*a1 + 8 * v24) = v13;
    double v33 = (void *)*v23;
    if (!*v23) {
      goto LABEL_59;
    }
    while (1)
    {
      size_t v35 = v33[1];
      if (v35 >= prime) {
        v35 %= prime;
      }
      if (v35 != v24)
      {
        if (!*(void *)(*a1 + 8 * v35))
        {
          *(void *)(*a1 + 8 * v35) = v23;
          goto LABEL_64;
        }
        void *v23 = *v33;
        uint64_t v34 = 8 * v35;
        *double v33 = **(void **)(*a1 + v34);
        **(void **)(*a1 + v34) = v33;
        double v33 = v23;
      }
      size_t v35 = v24;
LABEL_64:
      long long v23 = v33;
      double v33 = (void *)*v33;
      size_t v24 = v35;
      if (!v33) {
        goto LABEL_59;
      }
    }
  }
  if (prime >= v7) {
    goto LABEL_60;
  }
  unint64_t v30 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
  if (v7 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
  {
    unint64_t v30 = std::__next_prime(v30);
  }
  else
  {
    uint64_t v32 = 1 << -(char)__clz(v30 - 1);
    if (v30 >= 2) {
      unint64_t v30 = v32;
    }
  }
  if (prime <= v30) {
    size_t prime = v30;
  }
  if (prime < v7)
  {
    if (!prime)
    {
      unint64_t v40 = (void *)*a1;
      *a1 = 0;
      if (v40) {
        operator delete(v40);
      }
      unint64_t v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  unint64_t v7 = a1[1];
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6) {
      v6 %= v7;
    }
  }
  else
  {
    unint64_t v6 = (v7 - 1) & v6;
  }
LABEL_72:
  uint64_t v36 = *a1;
  long long v37 = *(void **)(*a1 + 8 * v6);
  if (v37)
  {
    *uint64_t v10 = *v37;
LABEL_80:
    *long long v37 = v10;
    goto LABEL_81;
  }
  *uint64_t v10 = *v13;
  *uint64_t v13 = v10;
  *(void *)(v36 + 8 * v6) = v13;
  if (*v10)
  {
    unint64_t v38 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7) {
        v38 %= v7;
      }
    }
    else
    {
      v38 &= v7 - 1;
    }
    long long v37 = (void *)(*a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++a1[3];
  return v10;
}

void sub_1A2004C10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<float>::__insert_with_size[abi:nn180100]<float const*,float const*>(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  unint64_t v10 = *a1;
  uint64_t v9 = (char *)a1[1];
  uint64_t v11 = (uint64_t)a2 - *a1;
  uint64_t v12 = v11 >> 2;
  uint64_t v13 = (unsigned char *)(*a1 + (v11 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v14 = a1[2];
  if (a5 > (uint64_t)(v14 - (void)v9) >> 2)
  {
    __srca = (char *)(*a1 + (v11 & 0xFFFFFFFFFFFFFFFCLL));
    unint64_t v15 = a5 + ((uint64_t)&v9[-v10] >> 2);
    if (v15 >> 62) {
      abort();
    }
    uint64_t v16 = v14 - v10;
    if (v16 >> 1 > v15) {
      unint64_t v15 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 >> 62) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v18 = operator new(4 * v17);
    }
    else
    {
      unint64_t v18 = 0;
    }
    size_t v41 = 4 * a5;
    uint64_t v56 = v11 >> 2;
    uint64_t v42 = &v18[4 * v12];
    memcpy(v42, __src, v41);
    if ((void *)v10 == a2)
    {
      unint64_t v43 = v42;
    }
    else
    {
      unint64_t v44 = v11 - 4;
      if ((unint64_t)(v11 - 4) >= 0x3C)
      {
        unint64_t v46 = (v11 & 0xFFFFFFFFFFFFFFFCLL) + v10 - (void)&v18[v11 & 0xFFFFFFFFFFFFFFFCLL];
        unint64_t v45 = __srca;
        unint64_t v43 = v42;
        if (v46 >= 0x20)
        {
          uint64_t v47 = (v44 >> 2) + 1;
          unint64_t v45 = &__srca[-4 * (v47 & 0x7FFFFFFFFFFFFFF8)];
          uint64_t v48 = 4 * v56 - 16;
          uint64_t v49 = (long long *)(v10 + v48);
          char v50 = &v18[v48];
          uint64_t v51 = v47 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v52 = *v49;
            *(v50 - 1) = *(v49 - 1);
            *char v50 = v52;
            v49 -= 2;
            v50 -= 2;
            v51 -= 8;
          }
          while (v51);
          unint64_t v43 = &v42[-4 * (v47 & 0x7FFFFFFFFFFFFFF8)];
          if (v47 == (v47 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_46;
          }
        }
      }
      else
      {
        unint64_t v45 = __srca;
        unint64_t v43 = v42;
      }
      do
      {
        int v53 = *((_DWORD *)v45 - 1);
        v45 -= 4;
        *((_DWORD *)v43 - 1) = v53;
        v43 -= 4;
      }
      while (v45 != (char *)v10);
    }
LABEL_46:
    unint64_t v54 = &v18[4 * v17];
    size_t v55 = v9 - __srca;
    if (v55) {
      memmove(&v42[v41], __srca, v55);
    }
    *a1 = (unint64_t)v43;
    a1[1] = (unint64_t)&v42[v41 + v55];
    a1[2] = (unint64_t)v54;
    if (v10)
    {
      operator delete((void *)v10);
    }
    return;
  }
  uint64_t v19 = (v9 - v13) >> 2;
  if (v19 >= a5)
  {
    uint64_t v20 = &__src[4 * a5];
    uint64_t v22 = (char *)a1[1];
    goto LABEL_18;
  }
  uint64_t v20 = &__src[4 * v19];
  int64_t v21 = a4 - v20;
  if (a4 != v20) {
    memmove(v9, &__src[4 * v19], a4 - v20);
  }
  uint64_t v22 = &v9[v21];
  a1[1] = (unint64_t)&v9[v21];
  if (v9 - v13 >= 1)
  {
    uint64_t v12 = v11 >> 2;
LABEL_18:
    long long v23 = &v13[4 * a5];
    size_t v24 = v22 - v23;
    uint64_t v25 = (v22 - v23) >> 2;
    size_t v26 = &v22[-4 * a5];
    long long v27 = v22;
    if (v26 < v9)
    {
      unint64_t v28 = (v11 & 0xFFFFFFFFFFFFFFFCLL) + v24;
      uint64_t v29 = (char *)(v28 + v10);
      unint64_t v30 = v28 + v10 + 4;
      if ((unint64_t)v9 > v30) {
        unint64_t v30 = (unint64_t)v9;
      }
      unint64_t v31 = v30 + ~v10 - v28;
      unint64_t v32 = v22 - v29;
      BOOL v33 = v31 >= 0x2C && v32 > 0x1F;
      long long v27 = v22;
      if (!v33) {
        goto LABEL_57;
      }
      uint64_t v34 = (v31 >> 2) + 1;
      uint64_t v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
      v26 += v35;
      uint64_t v36 = v22 + 16;
      long long v37 = (long long *)(4 * v25 + 4 * v12 + v10 + 16);
      uint64_t v38 = v34 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v39 = *v37;
        *(v36 - 1) = *(v37 - 1);
        *uint64_t v36 = v39;
        v36 += 2;
        v37 += 2;
        v38 -= 8;
      }
      while (v38);
      long long v27 = &v22[v35];
      if (v34 != (v34 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_57:
        do
        {
          int v40 = *(_DWORD *)v26;
          v26 += 4;
          *(_DWORD *)long long v27 = v40;
          v27 += 4;
        }
        while (v26 < v9);
      }
    }
    a1[1] = (unint64_t)v27;
    if (v22 != v23) {
      memmove(&v22[-4 * v25], v13, v24);
    }
    if (v20 != __src)
    {
      memmove(v13, __src, v20 - __src);
    }
  }
}

uint64_t geo::optional<md::mun::CollectionPoint>::~optional(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void **)(a1 + 96);
    unint64_t v3 = *(void **)(a1 + 104);
    if (v2 != v3)
    {
      do
      {
        unint64_t v4 = (void *)v2[31];
        if (v4 != (void *)v2[33]) {
          free(v4);
        }
        v2 += 36;
      }
      while (v2 != v3);
      uint64_t v2 = *(void **)(a1 + 96);
    }
    if (v2 != *(void **)(a1 + 112)) {
      free(v2);
    }
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void std::__function::__func<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_1,std::allocator<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_1>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = **(void **)(a1 + 16);
  if (!*(void *)(v2 + 152)) {
    return;
  }
  uint64_t v3 = *a2;
  uint64_t v4 = **(void **)(a1 + 8);
  uint8x8_t v5 = *(uint64_t **)(a1 + 32);
  unint64_t v278 = *(void **)(a1 + 24);
  uint64_t v6 = *(unsigned int *)(v2 + 136);
  unint64_t v7 = operator new(0xF8uLL);
  v7[1] = 0;
  v271 = v7 + 1;
  void v7[2] = 0;
  *unint64_t v7 = &unk_1EF585308;
  uint64_t v8 = ggl::BufferData::BufferData((uint64_t)(v7 + 3), 32, 0, 0, 6, v6);
  v7[29] = "";
  v7[30] = &ggl::VSCommon::vertexReflection;
  v7[3] = &unk_1EF55CFC8;
  v7[28] = &unk_1EF55CFE8;
  long long v298 = 0uLL;
  unint64_t v275 = v7;
  uint64_t v9 = v7[4] * v6;
  *(void *)&long long v10 = v3;
  uint64_t v272 = v8;
  *((void *)&v10 + 1) = v8;
  if (v9)
  {
    if (!v3 || *((unsigned char *)v275 + 41) == 2)
    {
      uint64_t v11 = v275[12];
    }
    else
    {
      long long v273 = v10;
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)v3 + 56))(v3, v8, 0, v9, 1, 1);
      long long v10 = v273;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  long long v298 = v10;
  unint64_t v299 = 0;
  uint64_t v300 = v9;
  uint64_t v302 = v11;
  __int16 v301 = 257;
  if (v6)
  {
    uint64_t v12 = *(uint64_t **)(v2 + 144);
    uint64_t v13 = (float *)(v11 + 20);
    unint64_t v14 = (float *)(*(void *)(v2 + 152) + 4);
    do
    {
      uint64_t v15 = *v12;
      *(v13 - 3) = *((float *)v12 + 2);
      *(void *)(v13 - 5) = v15;
      float v16 = 1.0 - *v14;
      *(v13 - 1) = *(v14 - 1);
      *uint64_t v13 = v16;
      v13 += 8;
      v14 += 3;
      uint64_t v12 = (uint64_t *)((char *)v12 + 12);
      --v6;
    }
    while (v6);
  }
  uint64_t v274 = v5;
  int v17 = *(_DWORD *)(v2 + 160);
  int64_t v18 = (int64_t)operator new(0xF8uLL);
  *(void *)(v18 + 8) = 0;
  *(void *)(v18 + 16) = 0;
  *(void *)int64_t v18 = &unk_1EF583D28;
  ggl::BufferData::BufferData(v18 + 24, 2, 1, 0, 6, (3 * v17));
  *(_DWORD *)(v18 + 240) = 0;
  *(void *)(v18 + 24) = &unk_1EF55B630;
  *(void *)(v18 + 32) = 2;
  *(void *)(v18 + 224) = &unk_1EF55B650;
  *(void *)(v18 + 232) = "";
  uint64_t v296 = v18 + 24;
  unint64_t v297 = (std::__shared_weak_count *)v18;
  long long v291 = 0uLL;
  *(void *)&long long v19 = v3;
  *((void *)&v19 + 1) = v18 + 24;
  if (v17)
  {
    if (!v3 || *(unsigned char *)(v18 + 41) == 2)
    {
      uint64_t v20 = *(void *)(v18 + 96);
    }
    else
    {
      long long v276 = v19;
      uint64_t v20 = (*(uint64_t (**)(uint64_t, int64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)v3 + 56))(v3, v18 + 24, 0, 2 * (3 * v17), 1, 1);
      long long v19 = v276;
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  long long v291 = v19;
  unint64_t v292 = 0;
  uint64_t v293 = 2 * (3 * v17);
  uint64_t v295 = v20;
  __int16 v294 = 257;
  *(_OWORD *)long long __p = 0u;
  *(_OWORD *)unint64_t v289 = 0u;
  float v290 = 1.0;
  unint64_t v21 = *(unsigned int *)(v2 + 160);
  uint64_t v277 = v4;
  if (v21)
  {
    unint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 1;
    while (1)
    {
      unint64_t v25 = *(unsigned int *)(*(void *)(v2 + 168) + 16 * v23 + 12);
      if ((v25 & 0x80000000) == 0) {
        break;
      }
LABEL_23:
      if (++v23 >= v21)
      {
        uint64_t v56 = v289[0];
        *(_OWORD *)uint64_t v285 = 0u;
        *(_OWORD *)uint64_t v286 = 0u;
        float v287 = 1.0;
        if (v289[0])
        {
          while (1)
          {
            unint64_t v57 = *((unsigned int *)v56 + 4);
            unint64_t v58 = (unint64_t)v285[1];
            if (v285[1])
            {
              uint8x8_t v59 = (uint8x8_t)vcnt_s8((int8x8_t)v285[1]);
              v59.i16[0] = vaddlv_u8(v59);
              if (v59.u32[0] > 1uLL)
              {
                uint64_t v24 = *((unsigned int *)v56 + 4);
                if (v285[1] <= (void *)v57) {
                  uint64_t v24 = v57 % (unint64_t)v285[1];
                }
              }
              else
              {
                uint64_t v24 = (LODWORD(v285[1]) - 1) & v57;
              }
              uint64_t v60 = (void **)*((void *)v285[0] + v24);
              if (v60)
              {
                uint64_t v61 = *v60;
                if (*v60)
                {
                  if (v59.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      unint64_t v63 = v61[1];
                      if (v63 == v57)
                      {
                        if (*((_DWORD *)v61 + 4) == v57) {
                          goto LABEL_156;
                        }
                      }
                      else if ((v63 & ((unint64_t)v285[1] - 1)) != v24)
                      {
                        goto LABEL_134;
                      }
                      uint64_t v61 = (void *)*v61;
                      if (!v61) {
                        goto LABEL_134;
                      }
                    }
                  }
                  do
                  {
                    unint64_t v62 = v61[1];
                    if (v62 == v57)
                    {
                      if (*((_DWORD *)v61 + 4) == v57) {
                        goto LABEL_156;
                      }
                    }
                    else
                    {
                      if ((void *)v62 >= v285[1]) {
                        v62 %= (unint64_t)v285[1];
                      }
                      if (v62 != v24) {
                        break;
                      }
                    }
                    uint64_t v61 = (void *)*v61;
                  }
                  while (v61);
                }
              }
            }
LABEL_134:
            uint64_t v61 = operator new(0x40uLL);
            *uint64_t v61 = 0;
            v61[1] = v57;
            *((_DWORD *)v61 + 4) = v57;
            *(_OWORD *)(v61 + 3) = 0u;
            *(_OWORD *)(v61 + 5) = 0u;
            v61[7] = 0;
            float v64 = (float)((unint64_t)v286[1] + 1);
            if (!v58 || (float)(v287 * (float)v58) < v64)
            {
              BOOL v65 = (v58 & (v58 - 1)) != 0;
              if (v58 < 3) {
                BOOL v65 = 1;
              }
              unint64_t v66 = v65 | (2 * v58);
              unint64_t v67 = vcvtps_u32_f32(v64 / v287);
              if (v66 <= v67) {
                size_t v68 = v67;
              }
              else {
                size_t v68 = v66;
              }
              unint64_t v58 = (unint64_t)v285[1];
              if (((unint64_t)v285[1] & ((unint64_t)v285[1] - 1)) != 0)
              {
                if (v285[1] <= (void *)v57) {
                  uint64_t v24 = v57 % (unint64_t)v285[1];
                }
                else {
                  uint64_t v24 = v57;
                }
              }
              else
              {
                uint64_t v24 = (LODWORD(v285[1]) - 1) & v57;
              }
            }
            uint64_t v69 = v285[0];
            char v70 = (void *)*((void *)v285[0] + v24);
            if (v70) {
              break;
            }
            *uint64_t v61 = v286[0];
            v286[0] = v61;
            v69[v24] = v286;
            if (*v61)
            {
              unint64_t v71 = *(void *)(*v61 + 8);
              if ((v58 & (v58 - 1)) != 0)
              {
                if (v71 >= v58) {
                  v71 %= v58;
                }
              }
              else
              {
                v71 &= v58 - 1;
              }
              char v70 = (char *)v285[0] + 8 * v71;
              goto LABEL_154;
            }
LABEL_155:
            ++v286[1];
LABEL_156:
            unint64_t v72 = v56[3];
            uint64_t v73 = (void *)v61[3];
            if (v72 <= (uint64_t)(v61[5] - (void)v73) >> 2) {
              goto LABEL_113;
            }
            if (v72 >> 62) {
              abort();
            }
            uint64_t v24 = v61[4];
            char v74 = (char *)operator new(4 * v72);
            uint64_t v75 = v24 - (void)v73;
            uint64_t v76 = &v74[(v24 - (void)v73) & 0xFFFFFFFFFFFFFFFCLL];
            unint64_t v77 = v76;
            if ((void *)v24 != v73)
            {
              unint64_t v78 = v24 - 4 - (void)v73;
              if (v78 < 0x2C)
              {
                unint64_t v77 = &v74[(v24 - (void)v73) & 0xFFFFFFFFFFFFFFFCLL];
                do
                {
LABEL_165:
                  int v85 = *(_DWORD *)(v24 - 4);
                  v24 -= 4;
                  *((_DWORD *)v77 - 1) = v85;
                  v77 -= 4;
                }
                while ((void *)v24 != v73);
                goto LABEL_166;
              }
              unint64_t v77 = &v74[(v24 - (void)v73) & 0xFFFFFFFFFFFFFFFCLL];
              if ((unint64_t)(v24 - (void)&v74[v75 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20) {
                goto LABEL_165;
              }
              uint64_t v79 = v75 >> 2;
              uint64_t v80 = (v78 >> 2) + 1;
              uint64_t v81 = &v74[4 * v79 - 16];
              unint64_t v82 = (long long *)(v24 - 16);
              uint64_t v83 = v80 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v84 = *v82;
                *((_OWORD *)v81 - 1) = *(v82 - 1);
                *(_OWORD *)uint64_t v81 = v84;
                v81 -= 32;
                v82 -= 2;
                v83 -= 8;
              }
              while (v83);
              unint64_t v77 = &v76[-4 * (v80 & 0x7FFFFFFFFFFFFFF8)];
              v24 -= 4 * (v80 & 0x7FFFFFFFFFFFFFF8);
              if (v80 != (v80 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_165;
              }
            }
LABEL_166:
            v61[3] = v77;
            v61[4] = v76;
            v61[5] = &v74[4 * v72];
            if (v73) {
              operator delete(v73);
            }
LABEL_113:
            uint64_t v56 = (void *)*v56;
            if (!v56)
            {
              unint64_t v21 = *(unsigned int *)(v2 + 160);
              goto LABEL_169;
            }
          }
          *uint64_t v61 = *v70;
LABEL_154:
          *char v70 = v61;
          goto LABEL_155;
        }
LABEL_169:
        if (v21)
        {
          uint64_t v86 = 0;
          while (1)
          {
            uint64_t v88 = *(void *)(v2 + 168) + 16 * v86;
            unsigned int v89 = *(_DWORD *)(v88 + 12);
            if ((v89 & 0x80000000) == 0)
            {
              uint64_t v91 = v90;
              unint64_t v92 = (_DWORD *)(*(void *)(v2 + 168) + 16 * v86);
              int v94 = (char *)*((void *)v90 + 1);
              unint64_t v93 = *((void *)v90 + 2);
              if ((unint64_t)v94 >= v93)
              {
                uint64_t v96 = *(char **)v90;
                uint64_t v97 = (uint64_t)&v94[-*(void *)v90];
                uint64_t v98 = v97 >> 2;
                unint64_t v99 = (v97 >> 2) + 1;
                if (v99 >> 62) {
                  abort();
                }
                uint64_t v100 = v93 - (void)v96;
                if (v100 >> 1 > v99) {
                  unint64_t v99 = v100 >> 1;
                }
                if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v101 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v101 = v99;
                }
                if (v101)
                {
                  if (v101 >> 62) {
                    goto LABEL_370;
                  }
                  uint64_t v102 = operator new(4 * v101);
                }
                else
                {
                  uint64_t v102 = 0;
                }
                long long v103 = &v102[4 * v98];
                _DWORD *v103 = *v92;
                long long v95 = v103 + 1;
                if (v94 != v96)
                {
                  unint64_t v104 = v94 - 4 - v96;
                  if (v104 < 0x2C) {
                    goto LABEL_378;
                  }
                  if ((unint64_t)(v94 - &v102[v97]) < 0x20) {
                    goto LABEL_378;
                  }
                  uint64_t v105 = (v104 >> 2) + 1;
                  unint64_t v106 = &v102[4 * v98 - 16];
                  char v107 = v94 - 16;
                  uint64_t v108 = v105 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v109 = *(_OWORD *)v107;
                    *(v106 - 1) = *((_OWORD *)v107 - 1);
                    _OWORD *v106 = v109;
                    v106 -= 2;
                    v107 -= 32;
                    v108 -= 8;
                  }
                  while (v108);
                  v103 -= v105 & 0x7FFFFFFFFFFFFFF8;
                  v94 -= 4 * (v105 & 0x7FFFFFFFFFFFFFF8);
                  if (v105 != (v105 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_378:
                    do
                    {
                      int v110 = *((_DWORD *)v94 - 1);
                      v94 -= 4;
                      *--long long v103 = v110;
                    }
                    while (v94 != v96);
                  }
                }
                *(void *)uint64_t v91 = v103;
                *((void *)v91 + 1) = v95;
                *((void *)v91 + 2) = &v102[4 * v101];
                if (v96) {
                  operator delete(v96);
                }
              }
              else
              {
                *(_DWORD *)int v94 = *v92;
                long long v95 = v94 + 4;
              }
              *((void *)v91 + 1) = v95;
              unint64_t v112 = v111;
              uint64_t v113 = (_DWORD *)(*(void *)(v2 + 168) + 16 * v86 + 4);
              unint64_t v115 = (char *)*((void *)v111 + 1);
              unint64_t v114 = *((void *)v111 + 2);
              if ((unint64_t)v115 >= v114)
              {
                v117 = *(char **)v111;
                uint64_t v118 = (uint64_t)&v115[-*(void *)v111];
                uint64_t v119 = v118 >> 2;
                unint64_t v120 = (v118 >> 2) + 1;
                if (v120 >> 62) {
                  abort();
                }
                uint64_t v121 = v114 - (void)v117;
                if (v121 >> 1 > v120) {
                  unint64_t v120 = v121 >> 1;
                }
                if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v122 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v122 = v120;
                }
                if (v122)
                {
                  if (v122 >> 62) {
                    goto LABEL_370;
                  }
                  uint64_t v123 = operator new(4 * v122);
                }
                else
                {
                  uint64_t v123 = 0;
                }
                uint64_t v124 = &v123[4 * v119];
                *uint64_t v124 = *v113;
                uint64_t v116 = v124 + 1;
                if (v115 != v117)
                {
                  unint64_t v125 = v115 - 4 - v117;
                  if (v125 < 0x2C) {
                    goto LABEL_379;
                  }
                  if ((unint64_t)(v115 - &v123[v118]) < 0x20) {
                    goto LABEL_379;
                  }
                  uint64_t v126 = (v125 >> 2) + 1;
                  uint64_t v127 = &v123[4 * v119 - 16];
                  unint64_t v128 = v115 - 16;
                  uint64_t v129 = v126 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v130 = *(_OWORD *)v128;
                    *(v127 - 1) = *((_OWORD *)v128 - 1);
                    *uint64_t v127 = v130;
                    v127 -= 2;
                    v128 -= 32;
                    v129 -= 8;
                  }
                  while (v129);
                  v124 -= v126 & 0x7FFFFFFFFFFFFFF8;
                  v115 -= 4 * (v126 & 0x7FFFFFFFFFFFFFF8);
                  if (v126 != (v126 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_379:
                    do
                    {
                      int v131 = *((_DWORD *)v115 - 1);
                      v115 -= 4;
                      *--uint64_t v124 = v131;
                    }
                    while (v115 != v117);
                  }
                }
                *(void *)unint64_t v112 = v124;
                *((void *)v112 + 1) = v116;
                *((void *)v112 + 2) = &v123[4 * v122];
                if (v117) {
                  operator delete(v117);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v115 = *v113;
                uint64_t v116 = v115 + 4;
              }
              uint64_t v4 = v277;
              *((void *)v112 + 1) = v116;
              size_t v133 = v132;
              unint64_t v134 = (_DWORD *)(*(void *)(v2 + 168) + 16 * v86 + 8);
              unsigned __int8 v136 = (char *)*((void *)v132 + 1);
              unint64_t v135 = *((void *)v132 + 2);
              if ((unint64_t)v136 < v135)
              {
                *(_DWORD *)unsigned __int8 v136 = *v134;
                unint64_t v87 = v136 + 4;
              }
              else
              {
                unsigned int v137 = *(char **)v132;
                uint64_t v138 = (uint64_t)&v136[-*(void *)v132];
                uint64_t v139 = v138 >> 2;
                unint64_t v140 = (v138 >> 2) + 1;
                if (v140 >> 62) {
                  abort();
                }
                uint64_t v141 = v135 - (void)v137;
                if (v141 >> 1 > v140) {
                  unint64_t v140 = v141 >> 1;
                }
                if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v142 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v142 = v140;
                }
                if (v142)
                {
                  if (v142 >> 62) {
                    goto LABEL_370;
                  }
                  uint64_t v143 = operator new(4 * v142);
                }
                else
                {
                  uint64_t v143 = 0;
                }
                v144 = &v143[4 * v139];
                _DWORD *v144 = *v134;
                unint64_t v87 = v144 + 1;
                if (v136 != v137)
                {
                  unint64_t v145 = v136 - 4 - v137;
                  if (v145 < 0x2C) {
                    goto LABEL_380;
                  }
                  if ((unint64_t)(v136 - &v143[v138]) < 0x20) {
                    goto LABEL_380;
                  }
                  uint64_t v146 = (v145 >> 2) + 1;
                  uint64_t v147 = &v143[4 * v139 - 16];
                  unint64_t v148 = v136 - 16;
                  uint64_t v149 = v146 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v150 = *(_OWORD *)v148;
                    *(v147 - 1) = *((_OWORD *)v148 - 1);
                    *uint64_t v147 = v150;
                    v147 -= 2;
                    v148 -= 32;
                    v149 -= 8;
                  }
                  while (v149);
                  v144 -= v146 & 0x7FFFFFFFFFFFFFF8;
                  v136 -= 4 * (v146 & 0x7FFFFFFFFFFFFFF8);
                  if (v146 != (v146 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_380:
                    do
                    {
                      int v151 = *((_DWORD *)v136 - 1);
                      v136 -= 4;
                      *--v144 = v151;
                    }
                    while (v136 != v137);
                  }
                }
                *(void *)size_t v133 = v144;
                *((void *)v133 + 1) = v87;
                *((void *)v133 + 2) = &v143[4 * v142];
                if (v137) {
                  operator delete(v137);
                }
              }
              *((void *)v133 + 1) = v87;
              unint64_t v21 = *(unsigned int *)(v2 + 160);
            }
            if (++v86 >= v21) {
              goto LABEL_238;
            }
          }
        }
        goto LABEL_238;
      }
    }
    if (v22)
    {
      uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
      v26.i16[0] = vaddlv_u8(v26);
      if (v26.u32[0] > 1uLL)
      {
        int64_t v18 = *(unsigned int *)(*(void *)(v2 + 168) + 16 * v23 + 12);
        if (v22 <= v25) {
          int64_t v18 = v25 % v22;
        }
      }
      else
      {
        int64_t v18 = (v22 - 1) & v25;
      }
      long long v27 = (void **)*((void *)__p[0] + v18);
      if (v27)
      {
        unint64_t v28 = *v27;
        if (*v27)
        {
          if (v26.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v30 = v28[1];
              if (v30 == v25)
              {
                if (*((_DWORD *)v28 + 4) == v25) {
                  goto LABEL_22;
                }
              }
              else if ((v30 & (v22 - 1)) != v18)
              {
                goto LABEL_45;
              }
              unint64_t v28 = (void *)*v28;
              if (!v28) {
                goto LABEL_45;
              }
            }
          }
          do
          {
            unint64_t v29 = v28[1];
            if (v29 == v25)
            {
              if (*((_DWORD *)v28 + 4) == v25) {
                goto LABEL_22;
              }
            }
            else
            {
              if (v29 >= v22) {
                v29 %= v22;
              }
              if (v29 != v18) {
                break;
              }
            }
            unint64_t v28 = (void *)*v28;
          }
          while (v28);
        }
      }
    }
LABEL_45:
    unint64_t v28 = operator new(0x20uLL);
    *unint64_t v28 = 0;
    v28[1] = v25;
    *((_DWORD *)v28 + 4) = v25;
    v28[3] = 0;
    float v31 = (float)((unint64_t)v289[1] + 1);
    if (v22 && (float)(v290 * (float)v22) >= v31)
    {
LABEL_95:
      long long v52 = __p[0];
      int v53 = (void *)*((void *)__p[0] + v18);
      if (v53)
      {
        *unint64_t v28 = *v53;
      }
      else
      {
        *unint64_t v28 = v289[0];
        v289[0] = v28;
        v52[v18] = v289;
        if (!*v28)
        {
LABEL_21:
          ++v289[1];
          unint64_t v21 = *(unsigned int *)(v2 + 160);
LABEL_22:
          v28[3] += 3;
          goto LABEL_23;
        }
        unint64_t v54 = *(void *)(*v28 + 8);
        if ((v22 & (v22 - 1)) != 0)
        {
          if (v54 >= v22) {
            v54 %= v22;
          }
        }
        else
        {
          v54 &= v22 - 1;
        }
        int v53 = (char *)__p[0] + 8 * v54;
      }
      void *v53 = v28;
      goto LABEL_21;
    }
    BOOL v32 = (v22 & (v22 - 1)) != 0;
    if (v22 < 3) {
      BOOL v32 = 1;
    }
    unint64_t v33 = v32 | (2 * v22);
    unint64_t v34 = vcvtps_u32_f32(v31 / v290);
    if (v33 <= v34) {
      size_t prime = v34;
    }
    else {
      size_t prime = v33;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v22 = (unint64_t)__p[1];
    }
    if (prime <= v22)
    {
      if (prime >= v22) {
        goto LABEL_82;
      }
      unint64_t v46 = vcvtps_u32_f32((float)(unint64_t)v289[1] / v290);
      if (v22 < 3 || (uint8x8_t v47 = (uint8x8_t)vcnt_s8((int8x8_t)v22), v47.i16[0] = vaddlv_u8(v47), v47.u32[0] > 1uLL))
      {
        unint64_t v46 = std::__next_prime(v46);
      }
      else
      {
        uint64_t v48 = 1 << -(char)__clz(v46 - 1);
        if (v46 >= 2) {
          unint64_t v46 = v48;
        }
      }
      if (prime <= v46) {
        size_t prime = v46;
      }
      if (prime >= v22)
      {
        unint64_t v22 = (unint64_t)__p[1];
LABEL_82:
        if ((v22 & (v22 - 1)) != 0)
        {
          if (v22 <= v25) {
            int64_t v18 = v25 % v22;
          }
          else {
            int64_t v18 = v25;
          }
        }
        else
        {
          int64_t v18 = (v22 - 1) & v25;
        }
        goto LABEL_95;
      }
      if (!prime)
      {
        size_t v55 = __p[0];
        __p[0] = 0;
        if (v55) {
          operator delete(v55);
        }
        unint64_t v22 = 0;
        __p[1] = 0;
        goto LABEL_82;
      }
    }
    if (prime >> 61) {
      goto LABEL_370;
    }
    uint64_t v36 = operator new(8 * prime);
    long long v37 = __p[0];
    __p[0] = v36;
    if (v37) {
      operator delete(v37);
    }
    uint64_t v38 = 0;
    __p[1] = (void *)prime;
    do
      *((void *)__p[0] + v38++) = 0;
    while (prime != v38);
    long long v39 = (void **)v289[0];
    if (!v289[0])
    {
LABEL_81:
      unint64_t v22 = prime;
      goto LABEL_82;
    }
    size_t v40 = *((void *)v289[0] + 1);
    size_t v41 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v42 = v40 & v41;
      *((void *)__p[0] + v42) = v289;
      for (uint64_t i = *v39; *v39; uint64_t i = *v39)
      {
        size_t v44 = i[1] & v41;
        if (v44 == v42)
        {
          long long v39 = (void **)i;
        }
        else if (*((void *)__p[0] + v44))
        {
          char *v39 = (void *)*i;
          uint64_t v45 = 8 * v44;
          void *i = **(void **)((char *)__p[0] + v45);
          **(void **)((char *)__p[0] + v45) = i;
        }
        else
        {
          *((void *)__p[0] + v44) = v39;
          long long v39 = (void **)i;
          size_t v42 = v44;
        }
      }
      goto LABEL_81;
    }
    if (v40 >= prime) {
      v40 %= prime;
    }
    *((void *)__p[0] + v40) = v289;
    uint64_t v49 = *v39;
    if (!*v39) {
      goto LABEL_81;
    }
    while (1)
    {
      size_t v51 = v49[1];
      if (v51 >= prime) {
        v51 %= prime;
      }
      if (v51 != v40)
      {
        if (!*((void *)__p[0] + v51))
        {
          *((void *)__p[0] + v51) = v39;
          goto LABEL_86;
        }
        char *v39 = (void *)*v49;
        uint64_t v50 = 8 * v51;
        *uint64_t v49 = **(void **)((char *)__p[0] + v50);
        **(void **)((char *)__p[0] + v50) = v49;
        uint64_t v49 = v39;
      }
      size_t v51 = v40;
LABEL_86:
      long long v39 = (void **)v49;
      uint64_t v49 = (void *)*v49;
      size_t v40 = v51;
      if (!v49) {
        goto LABEL_81;
      }
    }
  }
  *(_OWORD *)uint64_t v285 = 0uLL;
  *(_OWORD *)uint64_t v286 = 0uLL;
  float v287 = 1.0;
LABEL_238:
  long long v152 = v286[0];
  uint64_t v153 = v274;
  if (v286[0])
  {
    uint64_t v154 = 0;
    uint64_t v155 = v295;
    uint64_t v156 = v295 + 16;
    uint64_t v157 = 0;
    do
    {
      unsigned __int8 v158 = (int16x8_t *)v152[3];
      unint64_t v159 = (int16x8_t *)v152[4];
      if (v158 != v159)
      {
        unint64_t v160 = (char *)v159 - (char *)v158 - 4;
        uint64_t v157 = v154;
        if (v160 >= 0x3C)
        {
          uint64_t v161 = (v160 >> 2) + 1;
          uint64_t v162 = v161 & 0x7FFFFFFFFFFFFFF0;
          uint64_t v163 = (int16x8_t *)(v156 + 2 * v154);
          uint64_t v164 = v158 + 2;
          uint64_t v165 = v161 & 0x7FFFFFFFFFFFFFF0;
          do
          {
            int16x8_t v167 = v164[-2];
            int16x8_t v166 = v164[-1];
            int16x8_t v169 = *v164;
            int16x8_t v168 = v164[1];
            v164 += 4;
            v163[-1] = vuzp1q_s16(v167, v166);
            *uint64_t v163 = vuzp1q_s16(v169, v168);
            v163 += 2;
            v165 -= 16;
          }
          while (v165);
          uint64_t v157 = v154 + v162;
          if (v161 == v162) {
            goto LABEL_240;
          }
          unsigned __int8 v158 = (int16x8_t *)((char *)v158 + 4 * (v161 & 0x7FFFFFFFFFFFFFF0));
        }
        do
        {
          __int32 v170 = v158->i32[0];
          unsigned __int8 v158 = (int16x8_t *)((char *)v158 + 4);
          *(_WORD *)(v155 + 2 * v157++) = v170;
        }
        while (v158 != v159);
      }
LABEL_240:
      v152[6] = v154;
      v152[7] = v157;
      uint64_t v154 = v157;
      long long v152 = (void *)*v152;
    }
    while (v152);
  }
  double v172 = *(double *)(v2 + 8);
  double v171 = *(double *)(v2 + 16);
  double v173 = *(double *)(v2 + 24);
  double v174 = *(double *)(v2 + 40);
  double v175 = *(double *)(v2 + 48);
  double v177 = *(double *)(v2 + 56);
  uint64_t v176 = *(void *)(v2 + 64);
  double v178 = *(double *)(v2 + 72);
  double v179 = *(double *)(v2 + 80);
  double v181 = *(double *)(v2 + 88);
  uint64_t v180 = *(void *)(v2 + 96);
  double v182 = v181 + v175 + v172;
  if (v182 <= 0.0)
  {
    if (v172 <= v175 || v172 <= v181)
    {
      BOOL v192 = v175 <= v181;
      double v193 = sqrt(1.0 - (v175 + v172) + v181);
      double v194 = 1.0 / (v193 + v193);
      double v195 = (v178 + v173) * v194;
      double v196 = v179 + v177;
      double v197 = v196 * v194;
      double v198 = v193 * 0.5;
      double v199 = (v174 - v171) * v194;
      double v200 = sqrt(v175 + 1.0 - (v172 + v181));
      double v201 = v174 + v171;
      double v202 = 1.0 / (v200 + v200);
      double v203 = v201 * v202;
      double v185 = v200 * 0.5;
      double v204 = v196 * v202;
      double v205 = (v173 - v178) * v202;
      if (v192) {
        double v184 = v195;
      }
      else {
        double v184 = v203;
      }
      if (v192)
      {
        double v185 = v197;
        double v186 = v198;
      }
      else
      {
        double v186 = v204;
      }
      if (v192) {
        double v187 = v199;
      }
      else {
        double v187 = v205;
      }
    }
    else
    {
      double v188 = sqrt(v172 + 1.0 - (v175 + v181));
      double v189 = v188 + v188;
      double v184 = v188 * 0.5;
      double v190 = v174 + v171;
      double v191 = 1.0 / v189;
      double v185 = v190 * (1.0 / v189);
      double v186 = (v178 + v173) * v191;
      double v187 = (v179 - v177) * v191;
    }
  }
  else
  {
    double v183 = 0.5 / sqrt(v182 + 1.0);
    double v184 = v183 * (v179 - v177);
    double v185 = v183 * (v173 - v178);
    double v186 = v183 * (v174 - v171);
    double v187 = 0.25 / v183;
  }
  float v206 = v184;
  float v207 = v185;
  float v208 = v186;
  *(void *)&long long v279 = *(void *)(v2 + 32);
  *((void *)&v279 + 1) = v176;
  float v209 = v187;
  uint64_t v280 = v180;
  float v281 = v206;
  float v282 = v207;
  float v283 = v208;
  float v284 = v209;
  unint64_t v210 = (std::__shared_weak_count *)operator new(0xA8uLL);
  v210->__shared_owners_ = 0;
  v210->__shared_weak_owners_ = 0;
  v210->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589C50;
  uint64_t v211 = (uint64_t)&v210[1];
  std::construct_at[abi:nn180100]<ggl::VSCommon::Mesh,char const(&)[26],std::shared_ptr<ggl::VertexDataTyped<ggl::VSCommon::Vertex>> &,std::shared_ptr<ggl::IndexDataTyped<unsigned short>> &,ggl::VSCommon::Mesh*>((uint64_t)&v210[1], v272, (std::__shared_weak_count *)v275, &v296);
  unint64_t v212 = (unsigned int *)v286[0];
  if (!v286[0]) {
    goto LABEL_320;
  }
  while (2)
  {
    unint64_t v214 = v212[4];
    if (*(void *)(v4 + 40) <= v214) {
      goto LABEL_267;
    }
    unint64_t v215 = v278[1];
    if (!v215) {
      goto LABEL_267;
    }
    uint64_t v216 = *(void *)(*(void *)(v4 + 32) + 24 * v214);
    uint8x8_t v217 = (uint8x8_t)vcnt_s8((int8x8_t)v215);
    v217.i16[0] = vaddlv_u8(v217);
    if (v217.u32[0] > 1uLL)
    {
      unint64_t v218 = v216;
      if (v215 <= v216) {
        unint64_t v218 = v216 % v215;
      }
    }
    else
    {
      unint64_t v218 = (v215 - 1) & v216;
    }
    unint64_t v219 = *(uint64_t ***)(*v278 + 8 * v218);
    if (!v219) {
      goto LABEL_267;
    }
    uint64_t v220 = *v219;
    if (!v220) {
      goto LABEL_267;
    }
    if (v217.u32[0] < 2uLL)
    {
      unint64_t v221 = v215 - 1;
      while (1)
      {
        uint64_t v223 = v220[1];
        if (v223 == v216)
        {
          if (*((_DWORD *)v220 + 4) == v216) {
            goto LABEL_290;
          }
        }
        else if ((v223 & v221) != v218)
        {
          goto LABEL_267;
        }
        uint64_t v220 = (uint64_t *)*v220;
        if (!v220) {
          goto LABEL_267;
        }
      }
    }
    while (1)
    {
      unint64_t v222 = v220[1];
      if (v222 == v216) {
        break;
      }
      if (v222 >= v215) {
        v222 %= v215;
      }
      if (v222 != v218) {
        goto LABEL_267;
      }
LABEL_279:
      uint64_t v220 = (uint64_t *)*v220;
      if (!v220) {
        goto LABEL_267;
      }
    }
    if (*((_DWORD *)v220 + 4) != v216) {
      goto LABEL_279;
    }
LABEL_290:
    unint64_t v224 = v220 + 3;
    uint64_t v225 = v153;
    unint64_t v226 = v153[1];
    unint64_t v227 = v225[2];
    if (v226 < v227)
    {
      std::construct_at[abi:nn180100]<md::mun::MuninViewMesh,std::shared_ptr<ggl::VSCommon::Mesh> &,gm::Range<unsigned long> const&,std::shared_ptr<ggl::Texture2D> const&,geo::RigidTransform<double,float> &,md::mun::MuninViewMesh*>(v226, v211, v210, (_OWORD *)v212 + 3, v220 + 3, &v279);
      unint64_t v228 = v226 + 88;
      uint64_t v213 = v274;
      v274[1] = v228;
      goto LABEL_266;
    }
    uint64_t v229 = *v225;
    uint64_t v230 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v226 - *v225) >> 3);
    unint64_t v231 = v230 + 1;
    if ((unint64_t)(v230 + 1) > 0x2E8BA2E8BA2E8BALL) {
      abort();
    }
    uint64_t v232 = v211;
    unint64_t v233 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v227 - v229) >> 3);
    if (2 * v233 > v231) {
      unint64_t v231 = 2 * v233;
    }
    if (v233 >= 0x1745D1745D1745DLL) {
      unint64_t v234 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v234 = v231;
    }
    unint64_t v307 = v274 + 2;
    if (!v234)
    {
      unint64_t v235 = 0;
      goto LABEL_302;
    }
    if (v234 > 0x2E8BA2E8BA2E8BALL) {
LABEL_370:
    }
      std::__throw_bad_array_new_length[abi:nn180100]();
    unint64_t v235 = (char *)operator new(88 * v234);
LABEL_302:
    uint64_t v303 = v235;
    uint64_t v304 = &v235[88 * v230];
    uint64_t v305 = (uint64_t)v304;
    uint64_t v306 = &v235[88 * v234];
    uint64_t v211 = v232;
    std::construct_at[abi:nn180100]<md::mun::MuninViewMesh,std::shared_ptr<ggl::VSCommon::Mesh> &,gm::Range<unsigned long> const&,std::shared_ptr<ggl::Texture2D> const&,geo::RigidTransform<double,float> &,md::mun::MuninViewMesh*>((uint64_t)v304, v232, v210, (_OWORD *)v212 + 3, v224, &v279);
    uint64_t v236 = (void *)*v274;
    unint64_t v237 = (void *)v274[1];
    uint64_t v238 = (uint64_t)v304;
    uint64_t v239 = v305;
    if (v237 == (void *)*v274)
    {
      uint64_t v245 = v274[1];
    }
    else
    {
      uint64_t v240 = 0;
      do
      {
        uint64_t v241 = v238 + v240 * 8;
        uint64_t v242 = (char *)&v237[v240];
        *(_OWORD *)(v241 - 88) = *(_OWORD *)&v237[v240 - 11];
        *((void *)v242 - 11) = 0;
        *((void *)v242 - 10) = 0;
        *(_OWORD *)(v241 - 72) = *(_OWORD *)&v237[v240 - 9];
        *((void *)v242 - 9) = 0;
        *((void *)v242 - 8) = 0;
        *(_OWORD *)(v241 - 56) = *(_OWORD *)&v237[v240 - 7];
        long long v243 = *(_OWORD *)&v237[v240 - 5];
        *(void *)(v241 - 24) = v237[v240 - 3];
        *(_OWORD *)(v241 - 40) = v243;
        uint64_t v244 = v237[v240 - 2];
        *(_DWORD *)(v241 - 8) = v237[v240 - 1];
        *(void *)(v241 - 16) = v244;
        *(_DWORD *)(v241 - 4) = HIDWORD(v237[v240 - 1]);
        v240 -= 11;
      }
      while (&v237[v240] != v236);
      v238 += v240 * 8;
      uint64_t v245 = *v274;
      unint64_t v237 = (void *)v274[1];
    }
    unint64_t v228 = v239 + 88;
    *uint64_t v274 = v238;
    uint64_t v303 = (void *)v245;
    uint64_t v304 = (char *)v245;
    v274[1] = v239 + 88;
    uint64_t v246 = (char *)v274[2];
    v274[2] = (uint64_t)v306;
    uint64_t v306 = v246;
    if (v237 == (void *)v245)
    {
      uint64_t v4 = v277;
      if (v237) {
        goto LABEL_319;
      }
      goto LABEL_265;
    }
    while (2)
    {
      uint64_t v305 = (uint64_t)(v237 - 11);
      unint64_t v247 = (std::__shared_weak_count *)*(v237 - 8);
      if (v247 && !atomic_fetch_add(&v247->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
        std::__shared_weak_count::__release_weak(v247);
        uint64_t v248 = (std::__shared_weak_count *)*(v237 - 10);
        if (v248) {
          goto LABEL_314;
        }
      }
      else
      {
        uint64_t v248 = (std::__shared_weak_count *)*(v237 - 10);
        if (v248)
        {
LABEL_314:
          if (!atomic_fetch_add(&v248->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
            std::__shared_weak_count::__release_weak(v248);
          }
        }
      }
      unint64_t v237 = (void *)v305;
      if (v305 != v245) {
        continue;
      }
      break;
    }
    unint64_t v237 = v303;
    uint64_t v4 = v277;
    if (v303) {
LABEL_319:
    }
      operator delete(v237);
LABEL_265:
    uint64_t v213 = v274;
LABEL_266:
    v213[1] = v228;
    uint64_t v153 = v213;
LABEL_267:
    unint64_t v212 = *(unsigned int **)v212;
    if (v212) {
      continue;
    }
    break;
  }
LABEL_320:
  if (!atomic_fetch_add(&v210->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
    std::__shared_weak_count::__release_weak(v210);
  }
  uint64_t v249 = v286[0];
  if (v286[0])
  {
    do
    {
      unint64_t v269 = (void *)*v249;
      uint64_t v270 = (void *)v249[3];
      if (v270)
      {
        v249[4] = v270;
        operator delete(v270);
      }
      operator delete(v249);
      uint64_t v249 = v269;
    }
    while (v269);
  }
  uint64_t v250 = v285[0];
  v285[0] = 0;
  if (v250) {
    operator delete(v250);
  }
  v251 = v289[0];
  if (v289[0])
  {
    do
    {
      v252 = (void *)*v251;
      operator delete(v251);
      v251 = v252;
    }
    while (v252);
  }
  unint64_t v253 = __p[0];
  __p[0] = 0;
  if (v253) {
    operator delete(v253);
  }
  if (v295)
  {
    unint64_t v255 = v292;
    unint64_t v254 = v293;
    if (v293 != v292)
    {
      uint64_t v256 = (void *)*((void *)&v291 + 1);
      int v257 = v294;
      int v258 = HIBYTE(v294);
      if ((void)v291 && *(unsigned char *)(*((void *)&v291 + 1) + 17) != 2) {
        (*(void (**)(void))(*(void *)v291 + 64))();
      }
      if (v257 && !v258)
      {
        unint64_t v260 = v256[7];
        unint64_t v259 = v256[8];
        if (v259 == v260) {
          unint64_t v260 = v256[10] - v256[9];
        }
        if (v255 < v260) {
          unint64_t v260 = v255;
        }
        if (v259 <= v254) {
          unint64_t v259 = v254;
        }
        if (v259 == v260) {
          unint64_t v259 = v260 + v256[10] - v256[9];
        }
        v256[7] = v260;
        v256[8] = v259;
      }
    }
  }
  uint64_t v261 = v297;
  if (v297 && !atomic_fetch_add(&v297->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
    std::__shared_weak_count::__release_weak(v261);
  }
  if (v302)
  {
    unint64_t v263 = v299;
    unint64_t v262 = v300;
    if (v300 != v299)
    {
      unint64_t v264 = (void *)*((void *)&v298 + 1);
      int v265 = v301;
      int v266 = HIBYTE(v301);
      if ((void)v298 && *(unsigned char *)(*((void *)&v298 + 1) + 17) != 2) {
        (*(void (**)(void))(*(void *)v298 + 64))();
      }
      if (v265 && !v266)
      {
        unint64_t v268 = v264[7];
        unint64_t v267 = v264[8];
        if (v267 == v268) {
          unint64_t v268 = v264[10] - v264[9];
        }
        if (v263 < v268) {
          unint64_t v268 = v263;
        }
        if (v267 <= v262) {
          unint64_t v267 = v262;
        }
        if (v267 == v268) {
          unint64_t v267 = v268 + v264[10] - v264[9];
        }
        v264[7] = v268;
        v264[8] = v267;
      }
    }
  }
  if (!atomic_fetch_add(v271, 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void *))(*v275 + 16))(v275);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v275);
  }
}

void sub_1A200677C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, atomic_ullong *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (!atomic_fetch_add(v36, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  long long v39 = a25;
  if (a25)
  {
    do
    {
      unint64_t v43 = (void *)*v39;
      size_t v44 = (void *)v39[3];
      if (v44)
      {
        v39[4] = v44;
        operator delete(v44);
      }
      operator delete(v39);
      long long v39 = v43;
    }
    while (v43);
  }
  if (__p) {
    operator delete(__p);
  }
  size_t v40 = a31;
  if (a31)
  {
    do
    {
      size_t v41 = (void *)*v40;
      operator delete(v40);
      size_t v40 = v41;
    }
    while (v41);
  }
  if (a29) {
    operator delete(a29);
  }
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&a35);
  size_t v42 = *(std::__shared_weak_count **)(v37 - 200);
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)(v37 - 192));
  if (!atomic_fetch_add(a9, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
    std::__shared_weak_count::__release_weak(a14);
  }
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned int,anonymous namespace'::SubMesh>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,anonymous namespace'::SubMesh>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,anonymous namespace'::SubMesh>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,anonymous namespace'::SubMesh>>>::__rehash_unique[abi:nn180100](uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v16 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v17 = (uint8x8_t)vcnt_s8(v4), v17.i16[0] = vaddlv_u8(v17), v17.u32[0] > 1uLL))
    {
      unint64_t v16 = std::__next_prime(v16);
    }
    else
    {
      uint64_t v18 = 1 << -(char)__clz(v16 - 1);
      if (v16 >= 2) {
        unint64_t v16 = v18;
      }
    }
    if (prime <= v16) {
      size_t prime = v16;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      unint64_t v22 = *(void **)a1;
      *(void *)a1 = 0;
      if (v22) {
        operator delete(v22);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint8x8_t v5 = operator new(8 * prime);
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v10 = v8[1];
    size_t v11 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v12 = v10 & v11;
      *(void *)(*(void *)a1 + 8 * v12) = v9;
      while (1)
      {
        uint64_t v13 = (void *)*v8;
        if (!*v8) {
          break;
        }
        size_t v14 = v13[1] & v11;
        if (v14 == v12)
        {
          uint64_t v8 = (void *)*v8;
        }
        else if (*(void *)(*(void *)a1 + 8 * v14))
        {
          *uint64_t v8 = *v13;
          uint64_t v15 = 8 * v14;
          *uint64_t v13 = **(void **)(*(void *)a1 + v15);
          **(void **)(*(void *)a1 + v15) = v13;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v14) = v8;
          uint64_t v8 = v13;
          size_t v12 = v14;
        }
      }
      return;
    }
    if (v10 >= prime) {
      v10 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v10) = v9;
    long long v19 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v21 = v19[1];
        if (v21 >= prime) {
          v21 %= prime;
        }
        if (v21 != v10)
        {
          if (!*(void *)(*(void *)a1 + 8 * v21))
          {
            *(void *)(*(void *)a1 + 8 * v21) = v8;
            goto LABEL_32;
          }
          *uint64_t v8 = *v19;
          uint64_t v20 = 8 * v21;
          *long long v19 = **(void **)(*(void *)a1 + v20);
          **(void **)(*(void *)a1 + v20) = v19;
          long long v19 = v8;
        }
        size_t v21 = v10;
LABEL_32:
        uint64_t v8 = v19;
        long long v19 = (void *)*v19;
        size_t v10 = v21;
      }
      while (v19);
    }
  }
}

char *std::unordered_map<unsigned int,anonymous namespace'::SubMesh>::operator[](uint64_t a1, unsigned int a2)
{
  unint64_t v5 = a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v2 = a2;
      if (v6 <= a2) {
        unint64_t v2 = a2 % v6;
      }
    }
    else
    {
      unint64_t v2 = (v6 - 1) & a2;
    }
    uint64_t v8 = *(void ***)(*(void *)a1 + 8 * v2);
    if (v8)
    {
      uint64_t v9 = (char *)*v8;
      if (*v8)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v11 = *((void *)v9 + 1);
            if (v11 == a2)
            {
              if (*((_DWORD *)v9 + 4) == a2) {
                return v9 + 24;
              }
            }
            else if ((v11 & (v6 - 1)) != v2)
            {
              goto LABEL_22;
            }
            uint64_t v9 = *(char **)v9;
            if (!v9) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v10 = *((void *)v9 + 1);
          if (v10 == a2)
          {
            if (*((_DWORD *)v9 + 4) == a2) {
              return v9 + 24;
            }
          }
          else
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
            if (v10 != v2) {
              break;
            }
          }
          uint64_t v9 = *(char **)v9;
        }
        while (v9);
      }
    }
  }
LABEL_22:
  uint64_t v9 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = v5;
  *((_DWORD *)v9 + 4) = a2;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *((void *)v9 + 7) = 0;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    BOOL v14 = 1;
    if (v6 >= 3) {
      BOOL v14 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v6);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5) {
        unint64_t v2 = v5 % v6;
      }
      else {
        unint64_t v2 = v5;
      }
    }
    else
    {
      unint64_t v2 = (v6 - 1) & v5;
    }
  }
  uint64_t v18 = *(void *)a1;
  long long v19 = *(void **)(*(void *)a1 + 8 * v2);
  if (v19)
  {
    *(void *)uint64_t v9 = *v19;
LABEL_42:
    *long long v19 = v9;
    goto LABEL_43;
  }
  *(void *)uint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v9;
  *(void *)(v18 + 8 * v2) = a1 + 16;
  if (*(void *)v9)
  {
    unint64_t v20 = *(void *)(*(void *)v9 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v20 >= v6) {
        v20 %= v6;
      }
    }
    else
    {
      v20 &= v6 - 1;
    }
    long long v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return v9 + 24;
}

void sub_1A2006DE4(_Unwind_Exception *a1)
{
  int8x8_t v4 = *v2;
  if (*v2)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:nn180100]<ggl::VSCommon::Mesh,char const(&)[26],std::shared_ptr<ggl::VertexDataTyped<ggl::VSCommon::Vertex>> &,std::shared_ptr<ggl::IndexDataTyped<unsigned short>> &,ggl::VSCommon::Mesh*>(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4)
{
  uint64_t v9 = a2;
  unint64_t v10 = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v5 = (std::__shared_weak_count *)a4[1];
  v8[0] = *a4;
  v8[1] = (uint64_t)v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    ggl::VSCommon::Mesh::Mesh(a1, (uint64_t)"Munin View Synthesis Mesh", &v9, v8);
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ggl::VSCommon::Mesh::Mesh(a1, (uint64_t)"Munin View Synthesis Mesh", &v9, v8);
  }
  unint64_t v6 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

uint64_t std::construct_at[abi:nn180100]<md::mun::MuninViewMesh,std::shared_ptr<ggl::VSCommon::Mesh> &,gm::Range<unsigned long> const&,std::shared_ptr<ggl::Texture2D> const&,geo::RigidTransform<double,float> &,md::mun::MuninViewMesh*>(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, _OWORD *a4, uint64_t *a5, long long *a6)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *a5;
  uint64_t v9 = (std::__shared_weak_count *)a5[1];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 32) = *a4;
  long long v10 = *a6;
  *(void *)(a1 + 64) = *((void *)a6 + 2);
  *(_OWORD *)(a1 + 48) = v10;
  uint64_t v11 = *((void *)a6 + 3);
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a6 + 8);
  *(void *)(a1 + 72) = v11;
  *(_DWORD *)(a1 + 84) = *((_DWORD *)a6 + 9);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!a3) {
      return a1;
    }
  }
  else if (!a3)
  {
    return a1;
  }
  if (!atomic_fetch_add(&a3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
    std::__shared_weak_count::__release_weak(a3);
  }
  return a1;
}

uint64_t std::__split_buffer<md::mun::MuninViewMesh>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 88;
    int8x8_t v4 = *(std::__shared_weak_count **)(i - 64);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      unint64_t v5 = *(std::__shared_weak_count **)(i - 80);
      if (v5)
      {
LABEL_7:
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else
    {
      unint64_t v5 = *(std::__shared_weak_count **)(i - 80);
      if (v5) {
        goto LABEL_7;
      }
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VSCommon::Mesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VSCommon::Mesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589C50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VSCommon::Mesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589C50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::VSCommon::Vertex>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::VSCommon::Vertex>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585308;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::VSCommon::Vertex>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585308;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 std::__function::__func<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_1,std::allocator<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_1>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57DEF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_1,std::allocator<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_1>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF57DEF0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_1,std::allocator<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_1>,void ()(ggl::ResourceAccessor *)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<md::mun::MuninViewData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::mun::MuninViewData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582828;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::mun::MuninViewData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582828;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0,std::allocator<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0>,void ()(ggl::ResourceAccessor *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **(void **)(a1 + 8);
  uint64_t v3 = *(void *)(v2 + 256);
  uint64_t v104 = v2;
  if (*(void *)(v2 + 264) != v3)
  {
    uint64_t v4 = 0;
    unint64_t v5 = *(void ***)(a1 + 24);
    uint64_t v94 = *a2;
    uint64_t v97 = *a2;
    unint64_t v99 = *(uint64_t **)(a1 + 16);
    do
    {
      uint64_t v6 = v3 + 184 * v4;
      uint64_t v9 = *(void *)(v6 + 80);
      uint8x8_t v7 = (void *)(v6 + 80);
      uint64_t v8 = v9;
      uint64_t v105 = (uint64_t *)(v3 + 184 * v4);
      uint64_t v10 = v105[11];
      unint64_t v11 = (v10 - v9) / 12;
      float v12 = (char *)operator new(0xF8uLL);
      *((void *)v12 + 1) = 0;
      uint64_t v96 = (atomic_ullong *)(v12 + 8);
      *((void *)v12 + 2) = 0;
      *(void *)float v12 = &unk_1EF585308;
      uint64_t v13 = ggl::BufferData::BufferData((uint64_t)(v12 + 24), 32, 0, 0, 6, v11);
      *((void *)v12 + 29) = "";
      *((void *)v12 + 30) = &ggl::VSCommon::vertexReflection;
      uint64_t v101 = v13;
      *((void *)v12 + 3) = &unk_1EF55CFC8;
      *((void *)v12 + 28) = &unk_1EF55CFE8;
      long long v111 = 0uLL;
      uint64_t v98 = (std::__shared_weak_count *)v12;
      unint64_t v14 = *((void *)v12 + 4) * v11;
      if (v14)
      {
        if (!v94 || v12[41] == 2) {
          uint64_t v15 = *((void *)v12 + 12);
        }
        else {
          uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, unint64_t, uint64_t, uint64_t))(*(void *)v94 + 56))(v94, v13, 0, v14, 1, 1);
        }
      }
      else
      {
        uint64_t v15 = 0;
      }
      *(void *)&long long v16 = v97;
      *((void *)&v16 + 1) = v101;
      long long v111 = v16;
      unint64_t v112 = 0;
      unint64_t v113 = v14;
      uint64_t v115 = v15;
      __int16 v114 = 257;
      if (v10 != v8)
      {
        if (v11 <= 1) {
          uint64_t v17 = 1;
        }
        else {
          uint64_t v17 = v11;
        }
        uint64_t v18 = (float *)(*v7 + 8);
        long long v19 = (float *)(v15 + 16);
        unint64_t v20 = (float *)(*(void *)(v3 + 184 * v4 + 104) + 4);
        do
        {
          __float2 v21 = __sincosf_stret(*(v18 - 2));
          __float2 v22 = __sincosf_stret(*(v18 - 1));
          float v23 = *v18;
          v18 += 3;
          float v24 = (float)(1.0 / v23) * v22.__cosval;
          *(v19 - 4) = v24 * v21.__cosval;
          *(v19 - 3) = v24 * v21.__sinval;
          *(v19 - 2) = -(float)(v22.__sinval * (float)(1.0 / v23));
          float v25 = 1.0 - *v20;
          *long long v19 = *(v20 - 1);
          v19[1] = v25;
          v19 += 8;
          v20 += 2;
          --v17;
        }
        while (v17);
      }
      uint64_t v95 = v4;
      uint64_t v26 = v3 + 184 * v4;
      uint64_t v29 = *(void *)(v26 + 128);
      uint64_t v28 = *(void *)(v26 + 136);
      long long v27 = (uint64_t *)(v26 + 128);
      uint64_t v30 = operator new(0xF8uLL);
      v30[1] = 0;
      v30[2] = 0;
      *uint64_t v30 = &unk_1EF583D28;
      ggl::BufferData::BufferData((uint64_t)(v30 + 3), 2, 1, 0, 6, (v28 - v29) >> 1);
      *((_DWORD *)v30 + 60) = 0;
      v30[3] = &unk_1EF55B630;
      v30[4] = 2;
      v30[28] = &unk_1EF55B650;
      v30[29] = "";
      long long v109 = v30 + 3;
      int v110 = (std::__shared_weak_count *)v30;
      unint64_t v31 = (v28 - v29) & 0xFFFFFFFFFFFFFFFELL;
      if (v31)
      {
        BOOL v32 = v99;
        if (!v94 || *((unsigned char *)v30 + 41) == 2) {
          uint64_t v33 = v30[12];
        }
        else {
          uint64_t v33 = (*(uint64_t (**)(uint64_t, void *, void, unint64_t, uint64_t, uint64_t))(*(void *)v94 + 56))(v94, v30 + 3, 0, v31, 1, 1);
        }
      }
      else
      {
        uint64_t v33 = 0;
        BOOL v32 = v99;
      }
      *(void *)&long long v34 = v97;
      *((void *)&v34 + 1) = v30 + 3;
      long long v107 = v34;
      uint64_t v108 = v33;
      if (v28 != v29)
      {
        uint64_t v35 = *v27;
        if ((unint64_t)((v28 - v29) >> 1) <= 1) {
          unint64_t v36 = 1;
        }
        else {
          unint64_t v36 = (v28 - v29) >> 1;
        }
        if (v36 < 0x10 || (unint64_t)(v33 - v35) <= 0x1F)
        {
          unint64_t v38 = 0;
LABEL_37:
          unint64_t v43 = v36 - v38;
          uint64_t v44 = 2 * v38;
          uint64_t v45 = (_WORD *)(v33 + 2 * v38);
          unint64_t v46 = (__int16 *)(v35 + v44);
          do
          {
            __int16 v47 = *v46++;
            *v45++ = v47;
            --v43;
          }
          while (v43);
          goto LABEL_39;
        }
        unint64_t v38 = v36 & 0xFFFFFFFFFFFFFFF0;
        long long v39 = (_OWORD *)(v33 + 16);
        size_t v40 = (long long *)(v35 + 16);
        unint64_t v41 = v36 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          long long v42 = *v40;
          *(v39 - 1) = *(v40 - 1);
          _OWORD *v39 = v42;
          v39 += 2;
          v40 += 2;
          v41 -= 16;
        }
        while (v41);
        if (v36 != v38) {
          goto LABEL_37;
        }
      }
LABEL_39:
      uint64_t v48 = (std::__shared_weak_count *)operator new(0xA8uLL);
      v48->__shared_owners_ = 0;
      p_shared_owners = &v48->__shared_owners_;
      v48->__shared_weak_owners_ = 0;
      v48->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589C50;
      long long v103 = v48 + 1;
      std::construct_at[abi:nn180100]<ggl::VSCommon::Mesh,char const(&)[26],std::shared_ptr<ggl::VertexDataTyped<ggl::VSCommon::Vertex>> &,std::shared_ptr<ggl::IndexDataTyped<unsigned short>> &,ggl::VSCommon::Mesh*>((uint64_t)&v48[1], v101, v98, (uint64_t *)&v109);
      uint64_t v49 = *v105;
      uint64_t v50 = v105[1];
      if (v50 != *v105)
      {
        uint64_t v51 = 0;
        while (1)
        {
          unint64_t v52 = *(unsigned int *)(v49 + 24 * v51 + 16);
          uint64_t v53 = *v32;
          if (v52 < (v32[1] - *v32) >> 4) {
            break;
          }
LABEL_41:
          if (++v51 >= 0xAAAAAAAAAAAAAAABLL * ((v50 - v49) >> 3)) {
            goto LABEL_86;
          }
        }
        long long v54 = *(_OWORD *)(v49 + 24 * v51);
        long long v116 = *(_OWORD *)(v104 + 152);
        uint64_t v117 = *(void *)(v104 + 168);
        int8x16_t v55 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v104 + 176)), *(float64x2_t *)(v104 + 192));
        unint64_t v57 = (char *)v5[1];
        uint64_t v56 = (char *)v5[2];
        if (v57 < v56)
        {
          atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
          long long v58 = *(_OWORD *)(v53 + 16 * v52);
          uint8x8_t v59 = *(std::__shared_weak_count **)(v53 + 16 * v52 + 8);
          if (v59)
          {
            atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
            *(void *)unint64_t v57 = v103;
            *((void *)v57 + 1) = v48;
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
            *((_OWORD *)v57 + 1) = v58;
            atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
            long long v60 = v116;
            *((_OWORD *)v57 + 2) = v54;
            *((_OWORD *)v57 + 3) = v60;
            *((void *)v57 + 8) = v117;
            v55.i64[1] = vextq_s8(v55, v55, 8uLL).u64[0];
            *(int8x16_t *)(v57 + 72) = v55;
            if (!atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          else
          {
            *(void *)unint64_t v57 = v103;
            *((void *)v57 + 1) = v48;
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
            *((_OWORD *)v57 + 1) = v58;
            *((_OWORD *)v57 + 2) = v54;
            *((_OWORD *)v57 + 3) = v116;
            *((void *)v57 + 8) = v117;
            v55.i64[1] = vextq_s8(v55, v55, 8uLL).u64[0];
            *(int8x16_t *)(v57 + 72) = v55;
          }
          if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
          unint64_t v66 = v57 + 88;
          v5[1] = v57 + 88;
          goto LABEL_83;
        }
        uint64_t v61 = 0x2E8BA2E8BA2E8BA3 * ((v57 - (unsigned char *)*v5) >> 3);
        unint64_t v62 = v61 + 1;
        if ((unint64_t)(v61 + 1) > 0x2E8BA2E8BA2E8BALL) {
          abort();
        }
        unint64_t v63 = 0x2E8BA2E8BA2E8BA3 * ((v56 - (unsigned char *)*v5) >> 3);
        if (2 * v63 > v62) {
          unint64_t v62 = 2 * v63;
        }
        if (v63 >= 0x1745D1745D1745DLL) {
          unint64_t v64 = 0x2E8BA2E8BA2E8BALL;
        }
        else {
          unint64_t v64 = v62;
        }
        if (v64)
        {
          long long v100 = v54;
          int8x16_t v102 = v55;
          if (v64 > 0x2E8BA2E8BA2E8BALL) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          BOOL v65 = (char *)operator new(88 * v64);
          long long v54 = v100;
          int8x16_t v55 = v102;
        }
        else
        {
          BOOL v65 = 0;
        }
        unint64_t v67 = (std::__shared_weak_count **)&v65[88 * v61];
        atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
        long long v68 = *(_OWORD *)(v53 + 16 * v52);
        uint64_t v69 = *(std::__shared_weak_count **)(v53 + 16 * v52 + 8);
        unint64_t v70 = vextq_s8(v55, v55, 8uLL).u64[0];
        if (v69)
        {
          atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
          *unint64_t v67 = v103;
          v67[1] = v48;
          atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          unint64_t v71 = &v65[88 * v61];
          *((_OWORD *)v71 + 1) = v68;
          atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
          long long v72 = v116;
          *((_OWORD *)v71 + 2) = v54;
          *((_OWORD *)v71 + 3) = v72;
          *((void *)v71 + 8) = v117;
          v55.i64[1] = v70;
          *(int8x16_t *)(v71 + 72) = v55;
          if (!atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        else
        {
          *unint64_t v67 = v103;
          v67[1] = v48;
          atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v73 = &v65[88 * v61];
          *((_OWORD *)v73 + 1) = v68;
          *((_OWORD *)v73 + 2) = v54;
          *((_OWORD *)v73 + 3) = v116;
          *((void *)v73 + 8) = v117;
          v55.i64[1] = v70;
          *(int8x16_t *)(v73 + 72) = v55;
        }
        BOOL v32 = v99;
        if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
        char v74 = &v65[88 * v64];
        unint64_t v66 = v67 + 11;
        uint64_t v75 = (char *)*v5;
        uint64_t v76 = (char *)v5[1];
        if (v76 == *v5)
        {
          *unint64_t v5 = v67;
          v5[1] = v66;
          v5[2] = v74;
          if (v76) {
LABEL_82:
          }
            operator delete(v76);
LABEL_83:
          v5[1] = v66;
          uint64_t v49 = *v105;
          uint64_t v50 = v105[1];
          goto LABEL_41;
        }
        unint64_t v77 = 0;
        do
        {
          unint64_t v78 = &v67[v77 / 8];
          uint64_t v79 = &v76[v77];
          *(_OWORD *)(v78 - 11) = *(_OWORD *)&v76[v77 - 88];
          *((void *)v79 - 11) = 0;
          *((void *)v79 - 10) = 0;
          *(_OWORD *)(v78 - 9) = *(_OWORD *)&v76[v77 - 72];
          *((void *)v79 - 9) = 0;
          *((void *)v79 - 8) = 0;
          *(_OWORD *)(v78 - 7) = *(_OWORD *)&v76[v77 - 56];
          long long v80 = *(_OWORD *)&v76[v77 - 40];
          *(v78 - 3) = *(std::__shared_weak_count **)&v76[v77 - 24];
          *(_OWORD *)(v78 - 5) = v80;
          uint64_t v81 = *(std::__shared_weak_count **)&v76[v77 - 16];
          *((_DWORD *)v78 - 2) = *(_DWORD *)&v76[v77 - 8];
          *(v78 - 2) = v81;
          *((_DWORD *)v78 - 1) = *(_DWORD *)&v76[v77 - 4];
          v77 -= 88;
        }
        while (&v76[v77] != v75);
        unint64_t v82 = &v67[v77 / 8];
        uint64_t v83 = (char *)*v5;
        uint64_t v76 = (char *)v5[1];
        *unint64_t v5 = v82;
        v5[1] = v66;
        v5[2] = v74;
        if (v76 == v83)
        {
LABEL_81:
          if (v76) {
            goto LABEL_82;
          }
          goto LABEL_83;
        }
        while (2)
        {
          long long v84 = (std::__shared_weak_count *)*((void *)v76 - 8);
          if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
            int v85 = (std::__shared_weak_count *)*((void *)v76 - 10);
            if (v85) {
              goto LABEL_76;
            }
          }
          else
          {
            int v85 = (std::__shared_weak_count *)*((void *)v76 - 10);
            if (v85)
            {
LABEL_76:
              if (!atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                std::__shared_weak_count::__release_weak(v85);
              }
            }
          }
          v76 -= 88;
          if (v76 == v83)
          {
            uint64_t v76 = v83;
            goto LABEL_81;
          }
          continue;
        }
      }
LABEL_86:
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
      if (v108 && v31 && (void)v107 && *(unsigned char *)(*((void *)&v107 + 1) + 17) != 2) {
        (*(void (**)(void))(*(void *)v107 + 64))();
      }
      uint64_t v86 = v110;
      if (v110 && !atomic_fetch_add(&v110->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
        if (v115)
        {
LABEL_96:
          unint64_t v88 = v112;
          unint64_t v87 = v113;
          if (v113 != v112)
          {
            unsigned int v89 = (void *)*((void *)&v111 + 1);
            int v90 = v114;
            int v91 = HIBYTE(v114);
            if ((void)v111 && *(unsigned char *)(*((void *)&v111 + 1) + 17) != 2) {
              (*(void (**)(void))(*(void *)v111 + 64))();
            }
            if (v90 && !v91)
            {
              unint64_t v92 = v89[7];
              unint64_t v93 = v89[8];
              if (v93 == v92) {
                unint64_t v92 = v89[10] - v89[9];
              }
              if (v88 < v92) {
                unint64_t v92 = v88;
              }
              if (v93 <= v87) {
                unint64_t v93 = v87;
              }
              if (v93 == v92) {
                unint64_t v93 = v92 + v89[10] - v89[9];
              }
              v89[7] = v92;
              v89[8] = v93;
            }
          }
        }
      }
      else if (v115)
      {
        goto LABEL_96;
      }
      if (!atomic_fetch_add(v96, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
      uint64_t v4 = v95 + 1;
      uint64_t v3 = *(void *)(v104 + 256);
    }
    while (v95 + 1 < 0xD37A6F4DE9BD37A7 * ((*(void *)(v104 + 264) - v3) >> 3));
  }
}

void sub_1A2007FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, atomic_ullong *a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (!atomic_fetch_add(a12, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
    std::__shared_weak_count::__release_weak(a15);
  }
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0,std::allocator<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57DEA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0,std::allocator<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0>,void ()(ggl::ResourceAccessor *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF57DEA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0,std::allocator<md::mun::MuninViewLayerDataSource::createLayerData(gdc::LayerDataRequestKey const&,geo::linear_map<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>,std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>> const&,long long)::$_0>,void ()(ggl::ResourceAccessor *)>::~__func()
{
}

void md::mun::MuninViewLayerDataSource::constructRequests(uint64_t a1, void **a2, void **a3)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 592);
  if (v4)
  {
    uint8x8_t v7 = std::__shared_weak_count::lock(v4);
    unint64_t v66 = v7;
    if (v7)
    {
      unint64_t v41 = v7;
      unint64_t v65 = *(void *)(a1 + 584);
      unint64_t v43 = v65;
      if (v65 && a2 != a3)
      {
        long long v42 = a3;
        do
        {
          uint64_t v9 = *a2;
          if (*((unsigned char *)*a2 + 96)) {
            int v10 = *((_DWORD *)v9 + 25);
          }
          else {
            int v10 = 2147483646;
          }
          int v45 = v10;
          gdc::LayerDataRequestKey::keyData((gdc::LayerDataRequestKey *)&v67, v9);
          unint64_t v11 = (void *)*(unsigned __int16 *)v67;
          float v12 = (void *)*((void *)v67 + 1);
          uint64_t v13 = *((void *)v67 + 2);
          uint64_t v14 = *((unsigned __int8 *)v67 + 24);
          if (v67 != (void *)v68[1]) {
            free(v67);
          }
          if (v14)
          {
            md::mun::MuninMetadataContainer::activePoint((md::mun::MuninMetadataContainer *)&v67, v43, (unint64_t)v12);
            if (!(_BYTE)v67) {
              goto LABEL_8;
            }
            gdc::LayerDataRequestKey::keyData((gdc::LayerDataRequestKey *)v64, *a2);
            BOOL v15 = v72 < 0 || v13 == 7;
            char v16 = v15;
            char v44 = v16;
            if (v15) {
              int v17 = 7;
            }
            else {
              int v17 = 0;
            }
            unint64_t v52 = v56;
            uint64_t v53 = v56;
            long long v54 = v56;
            uint64_t v55 = 32;
            unint64_t v57 = 0;
            if (v15) {
              uint64_t v18 = 7;
            }
            else {
              uint64_t v18 = 0;
            }
            long long v19 = (void *)(v13 & 0xFFFFFFFF00000000 | v18);
            long long v58 = v11;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v52, v56, (char *)&v58, (char *)&v59);
            long long v58 = v12;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v52, (char *)v53, (char *)&v58, (char *)&v59);
            long long v58 = v19;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v52, (char *)v53, (char *)&v58, (char *)&v59);
            long long v58 = (void *)1;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v52, (char *)v53, (char *)&v58, (char *)&v59);
            unint64_t v20 = (unsigned __int8 *)v52;
            unint64_t v21 = (unsigned char *)v53 - (unsigned char *)v52;
            if (v53 == v52)
            {
              unint64_t v22 = 0;
            }
            else
            {
              unint64_t v22 = 0;
              if (v21 <= 1) {
                unint64_t v21 = 1;
              }
              do
              {
                unsigned int v23 = *v20++;
                v22 ^= (v22 << 6) - 0x61C8864680B583EBLL + (v22 >> 2) + v23;
                --v21;
              }
              while (v21);
            }
            unint64_t v57 = v22;
            gdc::ResourceKey::ResourceKey((uint64_t)&v58, 0, 33, (uint64_t)&v52, (*a2)[14], v45);
            if (v52 != v54) {
              free(v52);
            }
            gdc::LayerDataRequest::request(*a2, (uint64_t)&v58, 0);
            char v28 = v44;
            if (v17 != v13) {
              char v28 = 0;
            }
            if ((v28 & 1) == 0)
            {
              BOOL v32 = v69;
              if (v69 != v70)
              {
                while (*((unsigned __int8 *)v32 + 240) != BYTE2(v13))
                {
                  v32 += 36;
                  if (v32 == v70) {
                    goto LABEL_44;
                  }
                }
                uint64_t v33 = (unsigned __int8 *)v32[31];
                for (uint64_t i = (unsigned __int8 *)v32[32]; v33 != i; ++v33)
                {
                  uint64_t v35 = *v33;
                  unint64_t v46 = v50;
                  __int16 v47 = v50;
                  uint64_t v48 = v50;
                  uint64_t v49 = 32;
                  unint64_t v51 = 0;
                  unint64_t v52 = v11;
                  unint64_t v36 = (void *)(v13 | (unint64_t)(v35 << 16) | v13 & 0xFFFFFFFF00000000);
                  geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v46, v50, (char *)&v52, (char *)&v53);
                  unint64_t v52 = v12;
                  geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v46, v47, (char *)&v52, (char *)&v53);
                  unint64_t v52 = v36;
                  geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v46, v47, (char *)&v52, (char *)&v53);
                  unint64_t v52 = (void *)2;
                  geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v46, v47, (char *)&v52, (char *)&v53);
                  uint64_t v37 = (unsigned __int8 *)v46;
                  unint64_t v38 = v47 - (unsigned char *)v46;
                  if (v47 == v46)
                  {
                    unint64_t v39 = 0;
                  }
                  else
                  {
                    unint64_t v39 = 0;
                    if (v38 <= 1) {
                      unint64_t v38 = 1;
                    }
                    do
                    {
                      unsigned int v40 = *v37++;
                      v39 ^= (v39 << 6) - 0x61C8864680B583EBLL + (v39 >> 2) + v40;
                      --v38;
                    }
                    while (v38);
                  }
                  unint64_t v51 = v39;
                  gdc::ResourceKey::ResourceKey((uint64_t)&v52, 0, 34, (uint64_t)&v46, (*a2)[14], v45);
                  if (v46 != v48) {
                    free(v46);
                  }
                  gdc::LayerDataRequest::request(*a2, (uint64_t)&v52, 0);
                  if (v53 != (void *)v55) {
                    free(v53);
                  }
                }
              }
            }
LABEL_44:
            if (v59 != (void *)v61) {
              free(v59);
            }
            a3 = v42;
            if (v64[0] != v64[2]) {
              free(v64[0]);
            }
            if (!(_BYTE)v67) {
              goto LABEL_8;
            }
            uint64_t v29 = v69;
            uint64_t v30 = v70;
            if (v69 != v70)
            {
              do
              {
                unint64_t v31 = (void *)v29[31];
                if (v31 != (void *)v29[33]) {
                  free(v31);
                }
                v29 += 36;
              }
              while (v29 != v30);
              uint64_t v29 = v69;
            }
            if (v29 == v71) {
              goto LABEL_8;
            }
            uint64_t v8 = v29;
          }
          else
          {
            long long v58 = v62;
            uint8x8_t v59 = v62;
            long long v60 = v62;
            uint64_t v61 = 32;
            unint64_t v63 = 0;
            unint64_t v67 = v11;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v58, v62, (char *)&v67, (char *)v68);
            unint64_t v67 = v12;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v58, (char *)v59, (char *)&v67, (char *)v68);
            unint64_t v67 = (void *)(v13 & 0xFFFFFFFF00FF00FFLL);
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v58, (char *)v59, (char *)&v67, (char *)v68);
            unint64_t v67 = 0;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v58, (char *)v59, (char *)&v67, (char *)v68);
            float v24 = (unsigned __int8 *)v58;
            unint64_t v25 = (unsigned char *)v59 - (unsigned char *)v58;
            if (v59 == v58)
            {
              unint64_t v26 = 0;
            }
            else
            {
              unint64_t v26 = 0;
              if (v25 <= 1) {
                unint64_t v25 = 1;
              }
              do
              {
                unsigned int v27 = *v24++;
                v26 ^= (v26 << 6) - 0x61C8864680B583EBLL + (v26 >> 2) + v27;
                --v25;
              }
              while (v25);
            }
            unint64_t v63 = v26;
            gdc::ResourceKey::ResourceKey((uint64_t)&v67, 0, 23, (uint64_t)&v58, (*a2)[14], v45);
            if (v58 != v60) {
              free(v58);
            }
            gdc::LayerDataRequest::request(*a2, (uint64_t)&v67, 0);
            uint64_t v8 = (void *)v68[0];
            if (v68[0] == v68[2]) {
              goto LABEL_8;
            }
          }
          free(v8);
LABEL_8:
          a2 += 2;
        }
        while (a2 != a3);
      }
      if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
}

void sub_1A20087A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
}

void md::mun::MuninViewLayerDataSource::addFallbackData(const gdc::LayerDataRequestKey **this, const gdc::SelectionContext *a2)
{
  uint64_t v2 = (unint64_t *)*((void *)a2 + 1);
  long long v107 = 0;
  uint64_t v108 = 0;
  unint64_t v109 = 0;
  uint64_t v76 = (uint64_t)v2;
  __n128 v3 = gdc::LayerDataCollector::missingData((gdc::LayerDataCollector *)&v100, v2, *((unsigned __int16 *)this + 16));
  int v4 = v100;
  uint64_t v5 = v101;
  uint64_t v6 = v103;
  int v80 = v100;
  int v81 = v104;
  uint64_t v77 = v105;
  uint64_t v78 = v103;
  uint64_t v74 = v106;
  uint64_t v79 = v102;
LABEL_3:
  while (v4 != v81 || v5 != v77 || v6 != v74)
  {
    gdc::LayerDataRequestKey::keyData((gdc::LayerDataRequestKey *)&v92, (void *)v5);
    uint8x8_t v7 = (void *)*(unsigned __int16 *)v92;
    uint64_t v8 = (void *)*((void *)v92 + 1);
    uint64_t v9 = *((void *)v92 + 2);
    int v10 = (void *)*((unsigned __int8 *)v92 + 24);
    if (v92 != v94) {
      free(v92);
    }
    __n128 v99 = 0uLL;
    unint64_t v11 = v9 & 0xFFFFFFFF00FF0000;
    unsigned __int8 v83 = v9;
    while (1)
    {
      LOBYTE(v9) = v9 + 1;
      v110.n128_u64[0] = (unint64_t)v113;
      v110.n128_u64[1] = (unint64_t)v113;
      long long v111 = v113;
      uint64_t v112 = 32;
      unint64_t v114 = 0;
      unint64_t v92 = v7;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v110, v113, (char *)&v92, v93);
      unint64_t v92 = v8;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v110, (char *)v110.n128_u64[1], (char *)&v92, v93);
      unint64_t v92 = (void *)(v11 | v9);
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v110, (char *)v110.n128_u64[1], (char *)&v92, v93);
      unint64_t v92 = v10;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v110, (char *)v110.n128_u64[1], (char *)&v92, v93);
      float v12 = (unsigned __int8 *)v110.n128_u64[0];
      unint64_t v13 = v110.n128_u64[1] - v110.n128_u64[0];
      if (v110.n128_u64[1] == v110.n128_u64[0])
      {
        unint64_t v14 = 0;
      }
      else
      {
        unint64_t v14 = 0;
        if (v13 <= 1) {
          unint64_t v13 = 1;
        }
        do
        {
          unsigned int v15 = *v12++;
          v14 ^= (v14 << 6) - 0x61C8864680B583EBLL + (v14 >> 2) + v15;
          --v13;
        }
        while (v13);
      }
      unint64_t v114 = v14;
      gdc::LayerDataRequestKey::LayerDataRequestKey((unsigned __int8 *)&v92, 0, 0x24u, (uint64_t)&v110, 2147483646);
      if ((char *)v110.n128_u64[0] != v111) {
        free((void *)v110.n128_u64[0]);
      }
      gdc::LayerDataStore::get((gdc::LayerDataStore *)&v110, this[2], (unsigned __int8 *)&v92);
      __n128 v16 = v110;
      __n128 v110 = 0uLL;
      int v17 = (std::__shared_weak_count *)v99.n128_u64[1];
      __n128 v99 = v16;
      if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        uint64_t v18 = (std::__shared_weak_count *)v110.n128_u64[1];
        if (!v110.n128_u64[1]) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v18 = (std::__shared_weak_count *)v110.n128_u64[1];
        if (!v110.n128_u64[1]) {
          goto LABEL_23;
        }
      }
      if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
LABEL_23:
      if (v97) {
        char v97 = 0;
      }
      if (v94 != v95) {
        free(v94);
      }
      unint64_t v19 = v99.n128_u64[0];
      if (v9 > 6u) {
        break;
      }
      if (v99.n128_u64[0])
      {
LABEL_54:
        uint64_t v27 = v19 + 24;
        char v28 = v108;
        if ((unint64_t)v108 < v109)
        {
          *uint64_t v108 = 255;
          *((_DWORD *)v28 + 1) = 0;
          *((_DWORD *)v28 + 2) = 0;
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v28 + 12), v19 + 24);
          unint64_t v29 = v99.n128_u64[1];
          *((void *)v28 + 14) = v19;
          *((void *)v28 + 15) = v29;
          if (v29) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v30 = v28 + 64;
          goto LABEL_84;
        }
        uint64_t v31 = ((char *)v108 - (char *)v107) >> 7;
        if ((unint64_t)(v31 + 1) >> 57) {
          abort();
        }
        unint64_t v32 = (uint64_t)(v109 - (void)v107) >> 6;
        if (v32 <= v31 + 1) {
          unint64_t v32 = v31 + 1;
        }
        if (v109 - (unint64_t)v107 >= 0x7FFFFFFFFFFFFF80) {
          unint64_t v33 = 0x1FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v32;
        }
        if (v33)
        {
          if (v33 >> 57) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          long long v34 = (char *)operator new(v33 << 7);
        }
        else
        {
          long long v34 = 0;
        }
        uint64_t v35 = &v34[128 * v31];
        *(_WORD *)uint64_t v35 = 255;
        *((_DWORD *)v35 + 1) = 0;
        *((_DWORD *)v35 + 2) = 0;
        gdc::LayerDataKey::LayerDataKey((uint64_t)(v35 + 24), v27);
        unint64_t v36 = v99.n128_u64[1];
        *((void *)v35 + 14) = v99.n128_u64[0];
        *((void *)v35 + 15) = v36;
        if (v36) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v37 = &v34[128 * v33];
        uint64_t v30 = (__int16 *)(v35 + 128);
        unint64_t v39 = (char *)v107;
        unint64_t v38 = (char *)v108;
        if (v108 == v107)
        {
          long long v107 = (__int16 *)v35;
          uint64_t v108 = (__int16 *)(v35 + 128);
          unint64_t v109 = (unint64_t)v37;
          if (v38) {
            goto LABEL_83;
          }
        }
        else
        {
          uint64_t v75 = v37;
          long long v84 = (__int16 *)(v35 + 128);
          uint64_t v40 = 0;
          do
          {
            unint64_t v41 = &v35[v40];
            long long v42 = &v38[v40];
            *((_WORD *)v41 - 64) = *(_WORD *)&v38[v40 - 128];
            *(void *)(v41 - 124) = *(void *)&v38[v40 - 124];
            gdc::LayerDataKey::LayerDataKey((uint64_t)&v35[v40 - 104], (uint64_t)&v38[v40 - 104]);
            __n128 v3 = *(__n128 *)&v38[v40 - 16];
            *((__n128 *)v41 - 1) = v3;
            *((void *)v42 - 2) = 0;
            *((void *)v42 - 1) = 0;
            v40 -= 128;
          }
          while (&v38[v40] != v39);
          unint64_t v43 = &v35[v40];
          char v44 = (char *)v107;
          unint64_t v38 = (char *)v108;
          uint64_t v30 = v84;
          long long v107 = (__int16 *)v43;
          uint64_t v108 = v84;
          unint64_t v109 = (unint64_t)v75;
          if (v38 != v44)
          {
            do
            {
              int v45 = (std::__shared_weak_count *)*((void *)v38 - 1);
              if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v45);
              }
              unint64_t v46 = (void *)*((void *)v38 - 12);
              if (v46 != *((void **)v38 - 10)) {
                free(v46);
              }
              v38 -= 128;
            }
            while (v38 != v44);
            unint64_t v38 = v44;
          }
          if (!v38) {
            goto LABEL_84;
          }
LABEL_83:
          operator delete(v38);
        }
LABEL_84:
        uint64_t v108 = v30;
        goto LABEL_85;
      }
    }
    if (v99.n128_u64[0]) {
      goto LABEL_54;
    }
    unsigned __int8 v20 = v83;
    while (2)
    {
      --v20;
      v110.n128_u64[0] = (unint64_t)v113;
      v110.n128_u64[1] = (unint64_t)v113;
      long long v111 = v113;
      uint64_t v112 = 32;
      unint64_t v114 = 0;
      unint64_t v92 = v7;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v110, v113, (char *)&v92, v93);
      unint64_t v92 = v8;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v110, (char *)v110.n128_u64[1], (char *)&v92, v93);
      unint64_t v92 = (void *)(v11 | v20);
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v110, (char *)v110.n128_u64[1], (char *)&v92, v93);
      unint64_t v92 = v10;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v110, (char *)v110.n128_u64[1], (char *)&v92, v93);
      unint64_t v21 = (unsigned __int8 *)v110.n128_u64[0];
      unint64_t v22 = v110.n128_u64[1] - v110.n128_u64[0];
      if (v110.n128_u64[1] == v110.n128_u64[0])
      {
        unint64_t v23 = 0;
      }
      else
      {
        unint64_t v23 = 0;
        if (v22 <= 1) {
          unint64_t v22 = 1;
        }
        do
        {
          unsigned int v24 = *v21++;
          v23 ^= (v23 << 6) - 0x61C8864680B583EBLL + (v23 >> 2) + v24;
          --v22;
        }
        while (v22);
      }
      unint64_t v114 = v23;
      gdc::LayerDataRequestKey::LayerDataRequestKey((unsigned __int8 *)&v92, 0, 0x24u, (uint64_t)&v110, 2147483646);
      if ((char *)v110.n128_u64[0] != v111) {
        free((void *)v110.n128_u64[0]);
      }
      gdc::LayerDataStore::get((gdc::LayerDataStore *)&v110, this[2], (unsigned __int8 *)&v92);
      __n128 v3 = v110;
      __n128 v110 = 0uLL;
      unint64_t v25 = (std::__shared_weak_count *)v99.n128_u64[1];
      __n128 v99 = v3;
      if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
        unint64_t v26 = (std::__shared_weak_count *)v110.n128_u64[1];
        if (v110.n128_u64[1]) {
          goto LABEL_43;
        }
      }
      else
      {
        unint64_t v26 = (std::__shared_weak_count *)v110.n128_u64[1];
        if (v110.n128_u64[1])
        {
LABEL_43:
          if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
      }
      if (v97) {
        char v97 = 0;
      }
      if (v94 != v95) {
        free(v94);
      }
      unint64_t v19 = v99.n128_u64[0];
      if (v20)
      {
        if (v99.n128_u64[0]) {
          goto LABEL_54;
        }
        continue;
      }
      break;
    }
    if (v99.n128_u64[0]) {
      goto LABEL_54;
    }
LABEL_85:
    __int16 v47 = (std::__shared_weak_count *)v99.n128_u64[1];
    if (v99.n128_u64[1] && !atomic_fetch_add((atomic_ullong *volatile)(v99.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
    uint64_t v48 = v5 + 144;
    uint64_t v6 = v78;
    uint64_t v5 = v79;
    int v4 = v80;
    if (v48 != v79)
    {
      uint64_t v5 = v48;
      while (1)
      {
        if (*(unsigned __int16 *)(v5 + 8) == v80)
        {
          uint64_t v49 = *(void *)(v5 + 136);
          if (!*(void *)(v78 + 144 * v49 + 112) || *(unsigned char *)(v78 + 144 * v49 + 136)) {
            break;
          }
        }
        v5 += 144;
        if (v5 == v79)
        {
          uint64_t v5 = v79;
          goto LABEL_3;
        }
      }
    }
  }
  unint64_t v51 = v107;
  uint64_t v50 = v108;
  if (v107 != v108)
  {
    unint64_t v52 = v107 + 56;
    do
    {
      char v54 = *(unsigned char *)(*(void *)v52 + 16);
      gdc::LayerDataKey::LayerDataKey((uint64_t)v89, (uint64_t)(v52 - 44));
      LOBYTE(v92) = v54;
      gdc::LayerDataKey::LayerDataKey((uint64_t)v93, (uint64_t)v89);
      char v97 = 0;
      unint64_t v98 = (v96
           - 0x61C8864680B583EBLL
           + ((v92 - 0x61C8864680B583EBLL) << 6)
           + (((unint64_t)v92 - 0x61C8864680B583EBLL) >> 2)) ^ (v92
                                                                                      - 0x61C8864680B583EBLL);
      gdc::LayerDataCollector::addFallbackData(v76, (uint64_t)&v92, v52 - 56, v52);
      if (v97) {
        char v97 = 0;
      }
      if (v94 != v95) {
        free(v94);
      }
      if (v90 != v91) {
        free(v90);
      }
      uint64_t v53 = v52 + 8;
      v52 += 64;
    }
    while (v53 != v50);
  }
  uint64_t v55 = *(unsigned __int16 **)(v76 + 24);
  uint64_t v56 = *(unsigned __int16 **)(v76 + 32);
  if (v55 != v56)
  {
    while (*v55 != *((unsigned __int16 *)this + 16))
    {
      v55 += 16;
      if (v55 == v56) {
        goto LABEL_136;
      }
    }
  }
  if (v55 != v56)
  {
    unint64_t v57 = (void *)*((void *)v55 + 1);
    unint64_t v82 = (void *)*((void *)v55 + 2);
    if (v57 != v82)
    {
LABEL_114:
      int v85 = v57;
      gdc::LayerDataRequestKey::keyData((gdc::LayerDataRequestKey *)&v92, v57);
      long long v58 = (void *)*(unsigned __int16 *)v92;
      long long v60 = (void *)*((void *)v92 + 1);
      uint64_t v59 = *((void *)v92 + 2);
      uint64_t v61 = (void *)*((unsigned __int8 *)v92 + 24);
      if (v92 != v94) {
        free(v92);
      }
      uint64_t v62 = 0;
      unint64_t v63 = v59 & 0xFFFFFFFF00FF0000;
      uint64_t v64 = v59;
      while (v62 == v64)
      {
LABEL_117:
        if (++v62 == 8)
        {
          unint64_t v57 = v85 + 18;
          if (v85 + 18 != v82) {
            goto LABEL_114;
          }
          unint64_t v51 = v107;
          goto LABEL_136;
        }
      }
      v110.n128_u64[0] = (unint64_t)v113;
      v110.n128_u64[1] = (unint64_t)v113;
      long long v111 = v113;
      uint64_t v112 = 32;
      unint64_t v114 = 0;
      unint64_t v92 = v58;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v110, v113, (char *)&v92, v93);
      unint64_t v92 = v60;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v110, (char *)v110.n128_u64[1], (char *)&v92, v93);
      unint64_t v92 = (void *)(v63 | v62);
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v110, (char *)v110.n128_u64[1], (char *)&v92, v93);
      unint64_t v92 = v61;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v110, (char *)v110.n128_u64[1], (char *)&v92, v93);
      unint64_t v65 = (unsigned __int8 *)v110.n128_u64[0];
      unint64_t v66 = v110.n128_u64[1] - v110.n128_u64[0];
      if (v110.n128_u64[1] == v110.n128_u64[0])
      {
        unint64_t v67 = 0;
      }
      else
      {
        unint64_t v67 = 0;
        if (v66 <= 1) {
          unint64_t v66 = 1;
        }
        do
        {
          unsigned int v68 = *v65++;
          v67 ^= (v67 << 6) - 0x61C8864680B583EBLL + (v67 >> 2) + v68;
          --v66;
        }
        while (v66);
      }
      unint64_t v114 = v67;
      gdc::LayerDataRequestKey::LayerDataRequestKey((unsigned __int8 *)&v92, 0, 0x24u, (uint64_t)&v110, 2147483646);
      if ((char *)v110.n128_u64[0] != v111) {
        free((void *)v110.n128_u64[0]);
      }
      gdc::LayerDataStore::get((gdc::LayerDataStore *)v87, this[2], (unsigned __int8 *)&v92);
      uint64_t v69 = v88;
      if (v88 && !atomic_fetch_add(&v88->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
        if (!v97)
        {
LABEL_131:
          if (v94 != v95) {
            free(v94);
          }
          goto LABEL_117;
        }
      }
      else if (!v97)
      {
        goto LABEL_131;
      }
      char v97 = 0;
      goto LABEL_131;
    }
  }
LABEL_136:
  if (v51)
  {
    unint64_t v70 = v108;
    unint64_t v71 = v51;
    if (v108 != v51)
    {
      do
      {
        char v72 = (std::__shared_weak_count *)*((void *)v70 - 1);
        if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, __n128))v72->__on_zero_shared)(v72, v3);
          std::__shared_weak_count::__release_weak(v72);
        }
        uint64_t v73 = (void *)*((void *)v70 - 12);
        if (v73 != *((void **)v70 - 10)) {
          free(v73);
        }
        v70 -= 64;
      }
      while (v70 != v51);
      unint64_t v71 = v107;
    }
    uint64_t v108 = v51;
    operator delete(v71);
  }
}

void sub_1A20092B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a47);
  std::vector<gdc::FallbackData>::~vector[abi:nn180100]((void **)(v47 - 200));
  _Unwind_Resume(a1);
}

void md::mun::MuninViewLayerDataSource::~MuninViewLayerDataSource(md::mun::MuninViewLayerDataSource *this)
{
  *(void *)this = &unk_1EF550680;
  *((void *)this + 75) = &unk_1EF559798;

  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 74);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  gdc::LayerDataSource::~LayerDataSource(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF550680;
  *((void *)this + 75) = &unk_1EF559798;

  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 74);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  gdc::LayerDataSource::~LayerDataSource(this);
}

void *std::function<void ()(md::ls::InView const&,md::ls::RenderableMaterialData const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<md::ita::PrepareMaterialStyleConstantDataHandle::operator()(ecs2::Query<md::ls::InView const&,md::ls::RenderableMaterialData const&>)::$_0,std::allocator<md::ita::PrepareMaterialStyleConstantDataHandle::operator()(ecs2::Query<md::ls::InView const&,md::ls::RenderableMaterialData const&>)::$_0>,void ()(md::ls::InView const&,md::ls::RenderableMaterialData const&)>::operator()(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v183 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *a3;
  uint64_t v5 = *(void ***)(a1 + 32);
  uint64_t v6 = **(void **)(a1 + 8);
  double v177 = (void (**)(void **))v4;
  uint64_t v7 = *(void *)(v6 + 120);
  if (v4 >= (unint64_t)((*(void *)(v6 + 128) - v7) >> 3)) {
    goto LABEL_9;
  }
  unint64_t v8 = *(void *)(v7 + 8 * v4);
  if (!v8) {
    goto LABEL_10;
  }
  if (HIDWORD(v4) != HIDWORD(v8)
    || ((uint64_t v9 = *(void *)(v6 + 144),
         int v10 = (unint64_t *)(v9 + 8 * v8),
         v10 != *(unint64_t **)(v6 + 152))
      ? (BOOL v11 = v9 == 0)
      : (BOOL v11 = 1),
        v11))
  {
LABEL_9:
    unint64_t v8 = 0;
  }
  else
  {
    uint64_t v27 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v6 + 56, v4, &v177);
    ++v27[3];
    unint64_t v8 = *v10;
  }
LABEL_10:
  float v12 = *(int8x8_t **)v6;
  *(_OWORD *)uint64_t v180 = v8;
  gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v174, v12, (uint64_t *)v180, 0);
  uint64_t v13 = v174;
  if (v174)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, float))(*(void *)v174 + 456))(&v173, v174, **(float **)(a1 + 16));
    (*(void (**)(uint64_t *__return_ptr, uint64_t, float))(*(void *)v13 + 504))(&v172, v13, **(float **)(a1 + 16));
    if ((_BYTE)v173) {
      float v14 = *((float *)&v173 + 1);
    }
    else {
      float v14 = 0.0;
    }
    if ((_BYTE)v172) {
      float v15 = *((float *)&v172 + 1);
    }
    else {
      float v15 = 1.0;
    }
    uint64_t v16 = **(void **)(a1 + 24);
    int v17 = (void *)(v16 + 7848);
    uint64_t v18 = std::__hash_table<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::__unordered_map_hasher<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,true>,std::__unordered_map_equal<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>,std::equal_to<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>,md::DaVinciGroundRenderLayer::ShinyStyleCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey,ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle> *>>>::find<md::DaVinciGroundRenderLayer::ShinyStyleCacheKey>((void *)(v16 + 7848), v14, v15);
    if (!v18 || (uint64_t v19 = *((void *)v18 + 3)) == 0)
    {
      memset(v180, 0, sizeof(v180));
      uint64_t v20 = *(void *)(v16 + 7720);
      if (*(void *)(v16 + 7712) == v20)
      {
        uint64_t v23 = (-1431655765 * ((*(void *)(v16 + 7768) - *(void *)(v16 + 7760)) >> 3)) | 0x100000000;
        unsigned int v24 = *(uint64_t **)(v16 + 7744);
        unint64_t v25 = *(void *)(v16 + 7752);
        if ((unint64_t)v24 >= v25)
        {
          char v28 = *(char **)(v16 + 7736);
          uint64_t v29 = ((char *)v24 - v28) >> 3;
          unint64_t v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 61) {
            goto LABEL_349;
          }
          uint64_t v31 = v25 - (void)v28;
          if (v31 >> 2 > v30) {
            unint64_t v30 = v31 >> 2;
          }
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v32 = v30;
          }
          if (v32)
          {
            if (v32 >> 61) {
              goto LABEL_348;
            }
            unint64_t v33 = (char *)operator new(8 * v32);
          }
          else
          {
            unint64_t v33 = 0;
          }
          long long v34 = (uint64_t *)&v33[8 * v29];
          uint64_t v35 = &v33[8 * v32];
          *long long v34 = v23;
          unint64_t v26 = v34 + 1;
          if (v24 != (uint64_t *)v28)
          {
            unint64_t v36 = (char *)v24 - v28 - 8;
            if (v36 < 0x58) {
              goto LABEL_352;
            }
            if ((unint64_t)(v28 - v33) < 0x20) {
              goto LABEL_352;
            }
            uint64_t v37 = (v36 >> 3) + 1;
            unint64_t v38 = &v33[8 * v29 - 16];
            unint64_t v39 = v24 - 2;
            uint64_t v40 = v37 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v41 = *(_OWORD *)v39;
              *((_OWORD *)v38 - 1) = *((_OWORD *)v39 - 1);
              *(_OWORD *)unint64_t v38 = v41;
              v38 -= 32;
              v39 -= 4;
              v40 -= 4;
            }
            while (v40);
            v34 -= v37 & 0x3FFFFFFFFFFFFFFCLL;
            v24 -= v37 & 0x3FFFFFFFFFFFFFFCLL;
            if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_352:
              do
              {
                uint64_t v42 = *--v24;
                *--long long v34 = v42;
              }
              while (v24 != (uint64_t *)v28);
            }
            unsigned int v24 = *(uint64_t **)(v16 + 7736);
          }
          *(void *)(v16 + 7736) = v34;
          *(void *)(v16 + 7744) = v26;
          *(void *)(v16 + 7752) = v35;
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          *unsigned int v24 = v23;
          unint64_t v26 = v24 + 1;
        }
        *(void *)(v16 + 7744) = v26;
        unint64_t v22 = *(v26 - 1);
      }
      else
      {
        uint64_t v21 = *(void *)(v20 - 8);
        *(void *)(v16 + 7720) = v20 - 8;
        *(_DWORD *)(*(void *)(v16 + 7736) + 8 * v21) = -1431655765
                                                       * ((*(void *)(v16 + 7768) - *(void *)(v16 + 7760)) >> 3);
        *(_DWORD *)(*(void *)(v16 + 7736) + 8 * v21 + 4) = (((unint64_t)*(unsigned int *)(*(void *)(v16 + 7736)
                                                                                                 + 8 * v21
                                                                                                 + 4) << 32)
                                                            + 0x100000000) >> 32;
        unint64_t v22 = v21 | ((unint64_t)*(unsigned int *)(*(void *)(v16 + 7736) + 8 * v21 + 4) << 32);
      }
      unint64_t v43 = *(char **)(v16 + 7768);
      unint64_t v44 = *(void *)(v16 + 7776);
      if ((unint64_t)v43 >= v44)
      {
        uint64_t v47 = *(char **)(v16 + 7760);
        unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((v43 - v47) >> 3) + 1;
        if (v48 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_349;
        }
        unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - (void)v47) >> 3);
        if (2 * v49 > v48) {
          unint64_t v48 = 2 * v49;
        }
        if (v49 >= 0x555555555555555) {
          unint64_t v50 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v50 = v48;
        }
        if (v50 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_348;
        }
        unint64_t v51 = (char *)operator new(24 * v50);
        unint64_t v52 = &v51[8 * ((v43 - v47) >> 3)];
        *(_OWORD *)unint64_t v52 = *(_OWORD *)v180;
        uint64_t v53 = *(void *)&v180[16];
        *((void *)v52 + 2) = *(void *)&v180[16];
        if (v53)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
          unint64_t v43 = *(char **)(v16 + 7768);
          uint64_t v47 = *(char **)(v16 + 7760);
        }
        char v54 = &v51[24 * v50];
        unint64_t v46 = v52 + 24;
        if (v43 == v47)
        {
          *(void *)(v16 + 7760) = v52;
          *(void *)(v16 + 7768) = v46;
          *(void *)(v16 + 7776) = v54;
        }
        else
        {
          do
          {
            long long v55 = *(_OWORD *)(v43 - 24);
            v43 -= 24;
            *(_OWORD *)(v52 - 24) = v55;
            v52 -= 24;
            *((void *)v52 + 2) = *((void *)v43 + 2);
            *((void *)v43 + 1) = 0;
            *((void *)v43 + 2) = 0;
          }
          while (v43 != v47);
          uint64_t v47 = *(char **)(v16 + 7760);
          uint64_t v56 = *(char **)(v16 + 7768);
          *(void *)(v16 + 7760) = v52;
          *(void *)(v16 + 7768) = v46;
          for (*(void *)(v16 + 7776) = v54; v56 != v47; v56 -= 24)
          {
            unint64_t v57 = (std::__shared_weak_count *)*((void *)v56 - 1);
            if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
        }
        if (v47) {
          operator delete(v47);
        }
      }
      else
      {
        *(_OWORD *)unint64_t v43 = *(_OWORD *)v180;
        uint64_t v45 = *(void *)&v180[16];
        *((void *)v43 + 2) = *(void *)&v180[16];
        if (v45) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v45 + 8), 1uLL, memory_order_relaxed);
        }
        unint64_t v46 = v43 + 24;
      }
      *(void *)(v16 + 7768) = v46;
      unint64_t v58 = *(void *)(v16 + 7792);
      unint64_t v59 = *(void *)(v16 + 7800);
      if (v58 < v59)
      {
        *(void *)unint64_t v58 = v22;
        v58 += 8;
        unint64_t v60 = v58;
        goto LABEL_89;
      }
      uint64_t v61 = *(unsigned char **)(v16 + 7784);
      uint64_t v62 = (uint64_t)(v58 - (void)v61) >> 3;
      unint64_t v63 = v62 + 1;
      if (!((unint64_t)(v62 + 1) >> 61))
      {
        uint64_t v64 = v59 - (void)v61;
        if (v64 >> 2 > v63) {
          unint64_t v63 = v64 >> 2;
        }
        if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v65 = v63;
        }
        if (v65)
        {
          if (v65 >> 61) {
            goto LABEL_348;
          }
          unint64_t v66 = operator new(8 * v65);
        }
        else
        {
          unint64_t v66 = 0;
        }
        unint64_t v67 = &v66[8 * v62];
        unsigned int v68 = &v66[8 * v65];
        *unint64_t v67 = v22;
        unint64_t v60 = (unint64_t)(v67 + 1);
        if ((unsigned char *)v58 != v61)
        {
          unint64_t v69 = v58 - (void)v61 - 8;
          if (v69 < 0x58) {
            goto LABEL_353;
          }
          if ((unint64_t)(v61 - v66) < 0x20) {
            goto LABEL_353;
          }
          uint64_t v70 = (v69 >> 3) + 1;
          unint64_t v71 = &v66[8 * v62 - 16];
          char v72 = (long long *)(v58 - 16);
          uint64_t v73 = v70 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v74 = *v72;
            *(v71 - 1) = *(v72 - 1);
            *unint64_t v71 = v74;
            v71 -= 2;
            v72 -= 2;
            v73 -= 4;
          }
          while (v73);
          v67 -= v70 & 0x3FFFFFFFFFFFFFFCLL;
          v58 -= 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
          if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_353:
            do
            {
              uint64_t v75 = *(void *)(v58 - 8);
              v58 -= 8;
              *--unint64_t v67 = v75;
            }
            while ((unsigned char *)v58 != v61);
          }
        }
        *(void *)(v16 + 7784) = v67;
        *(void *)(v16 + 7792) = v60;
        *(void *)(v16 + 7800) = v68;
        if (v61) {
          operator delete(v61);
        }
LABEL_89:
        uint64_t v76 = (uint64_t *)(v16 + 7632);
        *(void *)(v16 + 7792) = v60;
        unint64_t v77 = *(void *)(v16 + 7640);
        if (v77)
        {
          uint8x8_t v78 = (uint8x8_t)vcnt_s8((int8x8_t)v77);
          v78.i16[0] = vaddlv_u8(v78);
          if (v78.u32[0] > 1uLL)
          {
            unint64_t v60 = v22;
            if (v22 >= v77) {
              unint64_t v60 = v22 % v77;
            }
          }
          else
          {
            unint64_t v60 = (v77 - 1) & v22;
          }
          uint64_t v79 = *(void **)(*v76 + 8 * v60);
          if (v79)
          {
            int v80 = (void *)*v79;
            if (v80)
            {
              if (v78.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v82 = v80[1];
                  if (v82 == v22)
                  {
                    if (v80[2] == v22) {
                      goto LABEL_148;
                    }
                  }
                  else if ((v82 & (v77 - 1)) != v60)
                  {
                    goto LABEL_110;
                  }
                  int v80 = (void *)*v80;
                  if (!v80) {
                    goto LABEL_110;
                  }
                }
              }
              do
              {
                unint64_t v81 = v80[1];
                if (v81 == v22)
                {
                  if (v80[2] == v22) {
                    goto LABEL_148;
                  }
                }
                else
                {
                  if (v81 >= v77) {
                    v81 %= v77;
                  }
                  if (v81 != v60) {
                    break;
                  }
                }
                int v80 = (void *)*v80;
              }
              while (v80);
            }
          }
        }
LABEL_110:
        unint64_t v58 = (unint64_t)operator new(0x30uLL);
        *(void *)unint64_t v58 = 0;
        *(void *)(v58 + 8) = v22;
        *(void *)(v58 + 16) = v22;
        *(_OWORD *)(v58 + 24) = xmmword_1A28FCC60;
        *(unsigned char *)(v58 + 40) = 0;
        float v83 = (float)(unint64_t)(*(void *)(v16 + 7656) + 1);
        float v84 = *(float *)(v16 + 7664);
        if (!v77 || (float)(v84 * (float)v77) < v83)
        {
          BOOL v85 = 1;
          if (v77 >= 3) {
            BOOL v85 = (v77 & (v77 - 1)) != 0;
          }
          unint64_t v86 = v85 | (2 * v77);
          unint64_t v87 = vcvtps_u32_f32(v83 / v84);
          if (v86 <= v87) {
            size_t prime = v87;
          }
          else {
            size_t prime = v86;
          }
          if (prime == 1)
          {
            size_t prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            size_t prime = std::__next_prime(prime);
            unint64_t v77 = *(void *)(v16 + 7640);
          }
          if (prime > v77) {
            goto LABEL_122;
          }
          if (prime < v77)
          {
            unint64_t v89 = vcvtps_u32_f32((float)*(unint64_t *)(v16 + 7656) / *(float *)(v16 + 7664));
            if (v77 < 3 || (uint8x8_t v90 = (uint8x8_t)vcnt_s8((int8x8_t)v77), v90.i16[0] = vaddlv_u8(v90), v90.u32[0] > 1uLL))
            {
              unint64_t v89 = std::__next_prime(v89);
            }
            else
            {
              uint64_t v91 = 1 << -(char)__clz(v89 - 1);
              if (v89 >= 2) {
                unint64_t v89 = v91;
              }
            }
            if (prime <= v89) {
              size_t prime = v89;
            }
            if (prime < v77) {
LABEL_122:
            }
              std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v16 + 7632, prime);
          }
          unint64_t v77 = *(void *)(v16 + 7640);
          if ((v77 & (v77 - 1)) != 0)
          {
            if (v22 >= v77) {
              unint64_t v60 = v22 % v77;
            }
            else {
              unint64_t v60 = v22;
            }
          }
          else
          {
            unint64_t v60 = (v77 - 1) & v22;
          }
        }
        uint64_t v92 = *v76;
        unint64_t v93 = *(unint64_t **)(*v76 + 8 * v60);
        if (v93)
        {
          *(void *)unint64_t v58 = *v93;
        }
        else
        {
          *(void *)unint64_t v58 = *(void *)(v16 + 7648);
          *(void *)(v16 + 7648) = v58;
          *(void *)(v92 + 8 * v60) = v16 + 7648;
          if (!*(void *)v58)
          {
LABEL_147:
            ++*(void *)(v16 + 7656);
LABEL_148:
            uint64_t v95 = *(std::__shared_weak_count **)&v180[16];
            if (*(void *)&v180[16]
              && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v180[16] + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
              std::__shared_weak_count::__release_weak(v95);
            }
            unint64_t v96 = LODWORD(v14);
            if (v14 == 0.0) {
              unint64_t v96 = 0;
            }
            uint64_t v97 = LODWORD(v15) - 0x61C8864680B583EBLL;
            if (v15 == 0.0) {
              uint64_t v97 = 0x9E3779B97F4A7C15;
            }
            unint64_t v98 = ((v96 >> 2) + (v96 << 6) + v97) ^ v96;
            unint64_t v99 = *(void *)(v16 + 7856);
            if (v99)
            {
              uint8x8_t v100 = (uint8x8_t)vcnt_s8((int8x8_t)v99);
              v100.i16[0] = vaddlv_u8(v100);
              if (v100.u32[0] > 1uLL)
              {
                unint64_t v58 = ((v96 >> 2) + (v96 << 6) + v97) ^ v96;
                if (v98 >= v99) {
                  unint64_t v58 = v98 % v99;
                }
              }
              else
              {
                unint64_t v58 = v98 & (v99 - 1);
              }
              uint64_t v101 = *(uint64_t **)(*v17 + 8 * v58);
              if (v101)
              {
                uint64_t v102 = *v101;
                if (*v101)
                {
                  if (v100.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      uint64_t v106 = *(void *)(v102 + 8);
                      if (v106 == v98)
                      {
                        if (*(float *)(v102 + 16) == v14 && *(float *)(v102 + 20) == v15) {
                          goto LABEL_249;
                        }
                      }
                      else if ((v106 & (v99 - 1)) != v58)
                      {
                        goto LABEL_182;
                      }
                      uint64_t v102 = *(void *)v102;
                      if (!v102) {
                        goto LABEL_182;
                      }
                    }
                  }
                  do
                  {
                    unint64_t v104 = *(void *)(v102 + 8);
                    if (v104 == v98)
                    {
                      if (*(float *)(v102 + 16) == v14 && *(float *)(v102 + 20) == v15) {
                        goto LABEL_249;
                      }
                    }
                    else
                    {
                      if (v104 >= v99) {
                        v104 %= v99;
                      }
                      if (v104 != v58) {
                        break;
                      }
                    }
                    uint64_t v102 = *(void *)v102;
                  }
                  while (v102);
                }
              }
            }
LABEL_182:
            uint64_t v102 = (uint64_t)operator new(0x20uLL);
            *(void *)uint64_t v102 = 0;
            *(void *)(v102 + 8) = v98;
            *(float *)(v102 + 16) = v14;
            *(float *)(v102 + 20) = v15;
            *(void *)(v102 + 24) = 0;
            float v107 = (float)(unint64_t)(*(void *)(v16 + 7872) + 1);
            float v108 = *(float *)(v16 + 7880);
            if (v99 && (float)(v108 * (float)v99) >= v107)
            {
LABEL_239:
              int v131 = (void *)*v17;
              size_t v132 = *(uint64_t **)(*v17 + 8 * v58);
              if (v132)
              {
                *(void *)uint64_t v102 = *v132;
              }
              else
              {
                *(void *)uint64_t v102 = *(void *)(v16 + 7864);
                *(void *)(v16 + 7864) = v102;
                v131[v58] = v16 + 7864;
                if (!*(void *)v102) {
                  goto LABEL_248;
                }
                unint64_t v133 = *(void *)(*(void *)v102 + 8);
                if ((v99 & (v99 - 1)) != 0)
                {
                  if (v133 >= v99) {
                    v133 %= v99;
                  }
                }
                else
                {
                  v133 &= v99 - 1;
                }
                size_t v132 = (uint64_t *)(*v17 + 8 * v133);
              }
              uint64_t *v132 = v102;
LABEL_248:
              ++*(void *)(v16 + 7872);
LABEL_249:
              *(void *)(v102 + 24) = v22;
              unint64_t v134 = *(void *)(v16 + 7896);
              if (v134)
              {
                uint8x8_t v135 = (uint8x8_t)vcnt_s8((int8x8_t)v134);
                v135.i16[0] = vaddlv_u8(v135);
                if (v135.u32[0] > 1uLL)
                {
                  uint64_t v102 = v22;
                  if (v22 >= v134) {
                    uint64_t v102 = v22 % v134;
                  }
                }
                else
                {
                  uint64_t v102 = (v134 - 1) & v22;
                }
                unsigned __int8 v136 = *(void ***)(*(void *)(v16 + 7888) + 8 * v102);
                if (v136)
                {
                  unsigned int v137 = (float *)*v136;
                  if (*v136)
                  {
                    if (v135.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        uint64_t v139 = *((void *)v137 + 1);
                        if (v139 == v22)
                        {
                          if (*((void *)v137 + 2) == v22) {
                            goto LABEL_337;
                          }
                        }
                        else if ((v139 & (v134 - 1)) != v102)
                        {
                          goto LABEL_270;
                        }
                        unsigned int v137 = *(float **)v137;
                        if (!v137) {
                          goto LABEL_270;
                        }
                      }
                    }
                    do
                    {
                      unint64_t v138 = *((void *)v137 + 1);
                      if (v138 == v22)
                      {
                        if (*((void *)v137 + 2) == v22) {
                          goto LABEL_337;
                        }
                      }
                      else
                      {
                        if (v138 >= v134) {
                          v138 %= v134;
                        }
                        if (v138 != v102) {
                          break;
                        }
                      }
                      unsigned int v137 = *(float **)v137;
                    }
                    while (v137);
                  }
                }
              }
LABEL_270:
              unsigned int v137 = (float *)operator new(0x20uLL);
              *(void *)unsigned int v137 = 0;
              *((void *)v137 + 1) = v22;
              *((void *)v137 + 2) = v22;
              *((void *)v137 + 3) = 0;
              float v140 = (float)(unint64_t)(*(void *)(v16 + 7912) + 1);
              float v141 = *(float *)(v16 + 7920);
              if (v134 && (float)(v141 * (float)v134) >= v140)
              {
LABEL_327:
                uint64_t v166 = *(void *)(v16 + 7888);
                int16x8_t v167 = *(float ***)(v166 + 8 * v102);
                if (v167)
                {
                  *(void *)unsigned int v137 = *v167;
                }
                else
                {
                  *(void *)unsigned int v137 = *(void *)(v16 + 7904);
                  *(void *)(v16 + 7904) = v137;
                  *(void *)(v166 + 8 * v102) = v16 + 7904;
                  if (!*(void *)v137)
                  {
LABEL_336:
                    ++*(void *)(v16 + 7912);
LABEL_337:
                    v137[6] = v14;
                    v137[7] = v15;
                    *(void *)uint64_t v180 = v22;
                    operator new();
                  }
                  unint64_t v168 = *(void *)(*(void *)v137 + 8);
                  if ((v134 & (v134 - 1)) != 0)
                  {
                    if (v168 >= v134) {
                      v168 %= v134;
                    }
                  }
                  else
                  {
                    v168 &= v134 - 1;
                  }
                  int16x8_t v167 = (float **)(*(void *)(v16 + 7888) + 8 * v168);
                }
                *int16x8_t v167 = v137;
                goto LABEL_336;
              }
              BOOL v142 = 1;
              if (v134 >= 3) {
                BOOL v142 = (v134 & (v134 - 1)) != 0;
              }
              unint64_t v143 = v142 | (2 * v134);
              unint64_t v144 = vcvtps_u32_f32(v140 / v141);
              if (v143 <= v144) {
                size_t v145 = v144;
              }
              else {
                size_t v145 = v143;
              }
              if (v145 == 1)
              {
                size_t v145 = 2;
              }
              else if ((v145 & (v145 - 1)) != 0)
              {
                size_t v145 = std::__next_prime(v145);
                unint64_t v134 = *(void *)(v16 + 7896);
              }
              if (v145 <= v134)
              {
                if (v145 >= v134) {
                  goto LABEL_322;
                }
                unint64_t v158 = vcvtps_u32_f32((float)*(unint64_t *)(v16 + 7912) / *(float *)(v16 + 7920));
                if (v134 < 3
                  || (uint8x8_t v159 = (uint8x8_t)vcnt_s8((int8x8_t)v134), v159.i16[0] = vaddlv_u8(v159), v159.u32[0] > 1uLL))
                {
                  unint64_t v158 = std::__next_prime(v158);
                }
                else
                {
                  uint64_t v160 = 1 << -(char)__clz(v158 - 1);
                  if (v158 >= 2) {
                    unint64_t v158 = v160;
                  }
                }
                if (v145 <= v158) {
                  size_t v145 = v158;
                }
                if (v145 >= v134) {
                  goto LABEL_322;
                }
                if (!v145)
                {
                  uint64_t v165 = *(void **)(v16 + 7888);
                  *(void *)(v16 + 7888) = 0;
                  if (v165) {
                    operator delete(v165);
                  }
                  *(void *)(v16 + 7896) = 0;
                  goto LABEL_322;
                }
              }
              if (!(v145 >> 61))
              {
                uint64_t v146 = operator new(8 * v145);
                uint64_t v147 = *(void **)(v16 + 7888);
                *(void *)(v16 + 7888) = v146;
                if (v147) {
                  operator delete(v147);
                }
                uint64_t v148 = 0;
                *(void *)(v16 + 7896) = v145;
                do
                  *(void *)(*(void *)(v16 + 7888) + 8 * v148++) = 0;
                while (v145 != v148);
                uint64_t v149 = *(void **)(v16 + 7904);
                if (!v149) {
                  goto LABEL_322;
                }
                uint64_t v150 = v16 + 7904;
                size_t v151 = v149[1];
                size_t v152 = v145 - 1;
                if ((v145 & (v145 - 1)) == 0)
                {
                  size_t v153 = v151 & v152;
                  *(void *)(*(void *)(v16 + 7888) + 8 * v153) = v150;
                  while (1)
                  {
                    uint64_t v154 = (void *)*v149;
                    if (!*v149) {
                      break;
                    }
                    size_t v155 = v154[1] & v152;
                    if (v155 == v153)
                    {
                      uint64_t v149 = (void *)*v149;
                    }
                    else
                    {
                      uint64_t v156 = *(void *)(v16 + 7888);
                      if (*(void *)(v156 + 8 * v155))
                      {
                        *uint64_t v149 = *v154;
                        uint64_t v157 = 8 * v155;
                        *uint64_t v154 = **(void **)(*(void *)(v16 + 7888) + v157);
                        **(void **)(*(void *)(v16 + 7888) + v157) = v154;
                      }
                      else
                      {
                        *(void *)(v156 + 8 * v155) = v149;
                        uint64_t v149 = v154;
                        size_t v153 = v155;
                      }
                    }
                  }
LABEL_322:
                  unint64_t v134 = *(void *)(v16 + 7896);
                  if ((v134 & (v134 - 1)) != 0)
                  {
                    if (v22 >= v134) {
                      uint64_t v102 = v22 % v134;
                    }
                    else {
                      uint64_t v102 = v22;
                    }
                  }
                  else
                  {
                    uint64_t v102 = (v134 - 1) & v22;
                  }
                  goto LABEL_327;
                }
                if (v151 >= v145) {
                  v151 %= v145;
                }
                *(void *)(*(void *)(v16 + 7888) + 8 * v151) = v150;
                uint64_t v161 = (void *)*v149;
                if (!*v149) {
                  goto LABEL_322;
                }
                while (1)
                {
                  size_t v163 = v161[1];
                  if (v163 >= v145) {
                    v163 %= v145;
                  }
                  if (v163 != v151)
                  {
                    uint64_t v164 = *(void *)(v16 + 7888);
                    if (!*(void *)(v164 + 8 * v163))
                    {
                      *(void *)(v164 + 8 * v163) = v149;
                      goto LABEL_308;
                    }
                    *uint64_t v149 = *v161;
                    uint64_t v162 = 8 * v163;
                    *uint64_t v161 = **(void **)(*(void *)(v16 + 7888) + v162);
                    **(void **)(*(void *)(v16 + 7888) + v162) = v161;
                    uint64_t v161 = v149;
                  }
                  size_t v163 = v151;
LABEL_308:
                  uint64_t v149 = v161;
                  uint64_t v161 = (void *)*v161;
                  size_t v151 = v163;
                  if (!v161) {
                    goto LABEL_322;
                  }
                }
              }
LABEL_348:
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            BOOL v109 = 1;
            if (v99 >= 3) {
              BOOL v109 = (v99 & (v99 - 1)) != 0;
            }
            unint64_t v110 = v109 | (2 * v99);
            unint64_t v111 = vcvtps_u32_f32(v107 / v108);
            if (v110 <= v111) {
              size_t v112 = v111;
            }
            else {
              size_t v112 = v110;
            }
            if (v112 == 1)
            {
              size_t v112 = 2;
            }
            else if ((v112 & (v112 - 1)) != 0)
            {
              size_t v112 = std::__next_prime(v112);
              unint64_t v99 = *(void *)(v16 + 7856);
            }
            if (v112 <= v99)
            {
              if (v112 >= v99) {
                goto LABEL_234;
              }
              unint64_t v124 = vcvtps_u32_f32((float)*(unint64_t *)(v16 + 7872) / *(float *)(v16 + 7880));
              if (v99 < 3
                || (uint8x8_t v125 = (uint8x8_t)vcnt_s8((int8x8_t)v99), v125.i16[0] = vaddlv_u8(v125), v125.u32[0] > 1uLL))
              {
                unint64_t v124 = std::__next_prime(v124);
              }
              else
              {
                uint64_t v126 = 1 << -(char)__clz(v124 - 1);
                if (v124 >= 2) {
                  unint64_t v124 = v126;
                }
              }
              if (v112 <= v124) {
                size_t v112 = v124;
              }
              if (v112 >= v99) {
                goto LABEL_234;
              }
              if (!v112)
              {
                long long v130 = (void *)*v17;
                *int v17 = 0;
                if (v130) {
                  operator delete(v130);
                }
                *(void *)(v16 + 7856) = 0;
                goto LABEL_234;
              }
            }
            if (v112 >> 61) {
              goto LABEL_348;
            }
            unint64_t v113 = operator new(8 * v112);
            unint64_t v114 = (void *)*v17;
            *int v17 = v113;
            if (v114) {
              operator delete(v114);
            }
            uint64_t v115 = 0;
            *(void *)(v16 + 7856) = v112;
            do
              *(void *)(*v17 + 8 * v115++) = 0;
            while (v112 != v115);
            long long v116 = *(void **)(v16 + 7864);
            if (!v116) {
              goto LABEL_234;
            }
            uint64_t v117 = v16 + 7864;
            size_t v118 = v116[1];
            size_t v119 = v112 - 1;
            if ((v112 & (v112 - 1)) == 0)
            {
              size_t v120 = v118 & v119;
              *(void *)(*v17 + 8 * v120) = v117;
              while (1)
              {
                uint64_t v121 = (void *)*v116;
                if (!*v116) {
                  break;
                }
                size_t v122 = v121[1] & v119;
                if (v122 == v120)
                {
                  long long v116 = (void *)*v116;
                }
                else if (*(void *)(*v17 + 8 * v122))
                {
                  void *v116 = *v121;
                  uint64_t v123 = 8 * v122;
                  *uint64_t v121 = **(void **)(*v17 + v123);
                  **(void **)(*v17 + v123) = v121;
                }
                else
                {
                  *(void *)(*v17 + 8 * v122) = v116;
                  long long v116 = v121;
                  size_t v120 = v122;
                }
              }
LABEL_234:
              unint64_t v99 = *(void *)(v16 + 7856);
              if ((v99 & (v99 - 1)) != 0)
              {
                if (v98 >= v99) {
                  unint64_t v58 = v98 % v99;
                }
                else {
                  unint64_t v58 = v98;
                }
              }
              else
              {
                unint64_t v58 = (v99 - 1) & v98;
              }
              goto LABEL_239;
            }
            if (v118 >= v112) {
              v118 %= v112;
            }
            *(void *)(*v17 + 8 * v118) = v117;
            uint64_t v127 = (void *)*v116;
            if (!*v116) {
              goto LABEL_234;
            }
            while (1)
            {
              size_t v129 = v127[1];
              if (v129 >= v112) {
                v129 %= v112;
              }
              if (v129 != v118)
              {
                if (!*(void *)(*v17 + 8 * v129))
                {
                  *(void *)(*v17 + 8 * v129) = v116;
                  goto LABEL_220;
                }
                void *v116 = *v127;
                uint64_t v128 = 8 * v129;
                *uint64_t v127 = **(void **)(*v17 + v128);
                **(void **)(*v17 + v128) = v127;
                uint64_t v127 = v116;
              }
              size_t v129 = v118;
LABEL_220:
              long long v116 = v127;
              uint64_t v127 = (void *)*v127;
              size_t v118 = v129;
              if (!v127) {
                goto LABEL_234;
              }
            }
          }
          unint64_t v94 = *(void *)(*(void *)v58 + 8);
          if ((v77 & (v77 - 1)) != 0)
          {
            if (v94 >= v77) {
              v94 %= v77;
            }
          }
          else
          {
            v94 &= v77 - 1;
          }
          unint64_t v93 = (unint64_t *)(*v76 + 8 * v94);
        }
        *unint64_t v93 = v58;
        goto LABEL_147;
      }
LABEL_349:
      abort();
    }
    uint64_t v169 = *(void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    __int32 v170 = *v5;
    double v177 = (void (**)(void **))&unk_1EF525A78;
    *(void *)&long long v178 = v19;
    *((void *)&v178 + 1) = v169;
    double v179 = (void **)&v177;
    double v181 = v180;
    *(void *)uint64_t v180 = &unk_1EF525A78;
    *(_OWORD *)&v180[8] = v178;
    int v182 = 0;
    ecs2::Runtime::queueCommand(v170, (uint64_t)v180);
    if (v182 != -1) {
      ((void (*)(char *, unsigned char *))off_1EF58F8E0[v182])(&v176, v180);
    }
    int v182 = -1;
    if (v179 == (void **)&v177)
    {
      v177[4]((void **)&v177);
      double v171 = v175;
      if (!v175) {
        return;
      }
      goto LABEL_344;
    }
    if (v179) {
      (*((void (**)(void))*v179 + 5))();
    }
  }
  double v171 = v175;
  if (!v175) {
    return;
  }
LABEL_344:
  if (!atomic_fetch_add(&v171->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
    std::__shared_weak_count::__release_weak(v171);
  }
}

void sub_1A200AC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v21 = v19[3];
  v19[3] = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  operator delete(v19);
  if (a13)
  {
    if (!atomic_fetch_add(&a13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialStyleConstantDataHandle>(gdc::Entity,md::ls::MaterialStyleConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = (void *)gdc::Registry::storage<md::ls::MaterialStyleConstantDataHandle>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      float v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(8 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      unint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      float v14 = v21 + 1;
      if (v13 == v15)
      {
        float v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        unint64_t v25 = &v20[8 * v16 - 16];
        unint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          _OWORD *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          float v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      float v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    unint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *unint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      int v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          long long v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          int v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  unint64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      long long v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      unint64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

BOOL gdc::ComponentStorageWrapper<md::ls::MaterialStyleConstantDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::MaterialStyleConstantDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  float v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    float v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MaterialStyleConstantDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::MaterialStyleConstantDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialStyleConstantDataHandle>(gdc::Entity,md::ls::MaterialStyleConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF525A78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialStyleConstantDataHandle>(gdc::Entity,md::ls::MaterialStyleConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF525A78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialStyleConstantDataHandle>(gdc::Entity,md::ls::MaterialStyleConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

__n128 std::__function::__func<md::ita::PrepareMaterialStyleConstantDataHandle::operator()(ecs2::Query<md::ls::InView const&,md::ls::RenderableMaterialData const&>)::$_0,std::allocator<md::ita::PrepareMaterialStyleConstantDataHandle::operator()(ecs2::Query<md::ls::InView const&,md::ls::RenderableMaterialData const&>)::$_0>,void ()(md::ls::InView const&,md::ls::RenderableMaterialData const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5208A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::PrepareMaterialStyleConstantDataHandle::operator()(ecs2::Query<md::ls::InView const&,md::ls::RenderableMaterialData const&>)::$_0,std::allocator<md::ita::PrepareMaterialStyleConstantDataHandle::operator()(ecs2::Query<md::ls::InView const&,md::ls::RenderableMaterialData const&>)::$_0>,void ()(md::ls::InView const&,md::ls::RenderableMaterialData const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF5208A0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<md::ita::PrepareMaterialStyleConstantDataHandle::operator()(ecs2::Query<md::ls::InView const&,md::ls::RenderableMaterialData const&>)::$_0,std::allocator<md::ita::PrepareMaterialStyleConstantDataHandle::operator()(ecs2::Query<md::ls::InView const&,md::ls::RenderableMaterialData const&>)::$_0>,void ()(md::ls::InView const&,md::ls::RenderableMaterialData const&)>::~__func()
{
}

uint64_t md::SandboxBaseMapEngineMode::willBecomeInactive(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(int8x8_t **)(a2 + 1120);
  int8x8_t v6 = v5[2];
  if (!*(void *)&v6)
  {
    uint64_t v9 = 0;
    MEMORY[0x8C] = 1;
    MEMORY[0x8D] = 1;
    goto LABEL_40;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = 0x91E65CD7F1A7A7FALL;
    if (*(void *)&v6 <= 0x91E65CD7F1A7A7FALL) {
      unint64_t v8 = 0x91E65CD7F1A7A7FALL % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v6 - 1) & 0x91E65CD7F1A7A7FALL;
  }
  int8x8_t v10 = v5[1];
  uint64_t v11 = *(void **)(*(void *)&v10 + 8 * v8);
  if (v11 && (unint64_t v12 = (void *)*v11) != 0)
  {
    if (v7.u32[0] >= 2uLL)
    {
      while (v12[1] != 0x91E65CD7F1A7A7FALL || v12[2] != 0x91E65CD7F1A7A7FALL)
        unint64_t v12 = (void *)*v12;
    }
    else
    {
      while (v12[1] != 0x91E65CD7F1A7A7FALL || v12[2] != 0x91E65CD7F1A7A7FALL)
        unint64_t v12 = (void *)*v12;
    }
    uint64_t v13 = v12[5];
    *(unsigned char *)(v13 + 140) = 1;
    uint64_t v14 = v13 + 141;
  }
  else
  {
    MEMORY[0x8C] = 1;
    uint64_t v14 = 141;
  }
  *(unsigned char *)uint64_t v14 = 1;
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v15 = 0xAF46DE79C836B0D8;
    if (*(void *)&v6 <= 0xAF46DE79C836B0D8) {
      unint64_t v15 = 0xAF46DE79C836B0D8 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v15 = (*(void *)&v6 - 1) & 0xAF46DE79C836B0D8;
  }
  uint64_t v16 = *(void **)(*(void *)&v10 + 8 * v15);
  if (!v16 || (uint64_t v17 = (void *)*v16) == 0)
  {
LABEL_39:
    uint64_t v9 = 0;
    goto LABEL_40;
  }
  if (v7.u32[0] < 2uLL)
  {
    uint64_t v18 = *(void *)&v6 - 1;
    while (1)
    {
      uint64_t v20 = v17[1];
      if (v20 == 0xAF46DE79C836B0D8)
      {
        if (v17[2] == 0xAF46DE79C836B0D8) {
          goto LABEL_168;
        }
      }
      else if ((v20 & v18) != v15)
      {
        goto LABEL_39;
      }
      uint64_t v17 = (void *)*v17;
      if (!v17) {
        goto LABEL_39;
      }
    }
  }
  while (1)
  {
    unint64_t v19 = v17[1];
    if (v19 == 0xAF46DE79C836B0D8) {
      break;
    }
    if (v19 >= *(void *)&v6) {
      v19 %= *(void *)&v6;
    }
    if (v19 != v15) {
      goto LABEL_39;
    }
LABEL_29:
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      goto LABEL_39;
    }
  }
  if (v17[2] != 0xAF46DE79C836B0D8) {
    goto LABEL_29;
  }
LABEL_168:
  uint64_t v9 = v17[5];
LABEL_40:
  *(_DWORD *)(v9 + 324) = 0;
  LOBYTE(v81[0]) = 0;
  char v83 = 0;
  std::__optional_storage_base<std::function<geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::function<geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>,false> const&>((unsigned char *)(v9 + 336), v81);
  if (v83)
  {
    if (v82 == v81)
    {
      (*(void (**)(void *))(v81[0] + 32))(v81);
    }
    else if (v82)
    {
      (*(void (**)(void *))(*v82 + 40))(v82);
    }
  }
  *(unsigned char *)(v9 + 328) = 0;
  LOBYTE(v78[0]) = 0;
  char v80 = 0;
  std::__optional_storage_base<std::function<gdc::CameraFrame<geo::Radians,double> ()(void)>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::function<gdc::CameraFrame<geo::Radians,double> ()(void)>,false> const&>((unsigned char *)(v9 + 376), v78);
  if (v80)
  {
    if (v79 == v78)
    {
      (*(void (**)(void *))(v78[0] + 32))(v78);
    }
    else if (v79)
    {
      (*(void (**)(void))(*v79 + 40))();
    }
  }
  *(unsigned char *)(*(void *)(v9 + 136) + 48) = 0;
  *(unsigned char *)(*(void *)(v9 + 184) + 48) = 0;
  *(unsigned char *)(*(void *)(v9 + 192) + 48) = 0;
  uint64_t v21 = *(void *)(v9 + 416);
  if (v21)
  {
    *(void *)(v21 + 32) = 0;
    *(void *)(v21 + 40) = 0;
  }
  unint64_t v22 = *(int8x8_t **)(a2 + 1120);
  int8x8_t v23 = v22[2];
  if (!*(void *)&v23) {
    goto LABEL_72;
  }
  uint8x8_t v24 = (uint8x8_t)vcnt_s8(v23);
  v24.i16[0] = vaddlv_u8(v24);
  if (v24.u32[0] > 1uLL)
  {
    unint64_t v25 = 0xC267A080D338C6A1;
    if (*(void *)&v23 <= 0xC267A080D338C6A1) {
      unint64_t v25 = 0xC267A080D338C6A1 % *(void *)&v23;
    }
  }
  else
  {
    unint64_t v25 = (*(void *)&v23 - 1) & 0xC267A080D338C6A1;
  }
  unint64_t v26 = *(void **)(*(void *)&v22[1] + 8 * v25);
  if (!v26 || (uint64_t v27 = (void *)*v26) == 0)
  {
LABEL_72:
    unint64_t v30 = 0;
    if (MEMORY[0xE8]) {
      goto LABEL_73;
    }
    goto LABEL_79;
  }
  if (v24.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v29 = v27[1];
      if (v29 == 0xC267A080D338C6A1)
      {
        if (v27[2] == 0xC267A080D338C6A1) {
          goto LABEL_169;
        }
      }
      else if ((v29 & (*(void *)&v23 - 1)) != v25)
      {
        goto LABEL_72;
      }
      uint64_t v27 = (void *)*v27;
      if (!v27) {
        goto LABEL_72;
      }
    }
  }
  while (2)
  {
    unint64_t v28 = v27[1];
    if (v28 != 0xC267A080D338C6A1)
    {
      if (v28 >= *(void *)&v23) {
        v28 %= *(void *)&v23;
      }
      if (v28 != v25) {
        goto LABEL_72;
      }
      goto LABEL_62;
    }
    if (v27[2] != 0xC267A080D338C6A1)
    {
LABEL_62:
      uint64_t v27 = (void *)*v27;
      if (!v27) {
        goto LABEL_72;
      }
      continue;
    }
    break;
  }
LABEL_169:
  unint64_t v30 = (void *)v27[5];
  if (!v30[29]) {
    goto LABEL_79;
  }
LABEL_73:
  uint64_t v31 = (void *)v30[28];
  if (v31)
  {
    do
    {
      uint64_t v32 = (void *)*v31;
      operator delete(v31);
      uint64_t v31 = v32;
    }
    while (v32);
  }
  v30[28] = 0;
  uint64_t v33 = v30[27];
  if (v33)
  {
    for (uint64_t i = 0; i != v33; ++i)
      *(void *)(v30[26] + 8 * i) = 0;
  }
  v30[29] = 0;
  unint64_t v22 = *(int8x8_t **)(a2 + 1120);
  int8x8_t v23 = v22[2];
LABEL_79:
  if (!*(void *)&v23) {
    goto LABEL_99;
  }
  uint8x8_t v35 = (uint8x8_t)vcnt_s8(v23);
  v35.i16[0] = vaddlv_u8(v35);
  if (v35.u32[0] > 1uLL)
  {
    uint64_t v36 = 0x4AC7AB7561675F6;
    if (*(void *)&v23 <= 0x4AC7AB7561675F6uLL) {
      uint64_t v36 = 0x4AC7AB7561675F6uLL % *(void *)&v23;
    }
  }
  else
  {
    uint64_t v36 = (*(void *)&v23 - 1) & 0x4AC7AB7561675F6;
  }
  uint64_t v37 = *(void **)(*(void *)&v22[1] + 8 * v36);
  if (!v37 || (unint64_t v38 = (void *)*v37) == 0)
  {
LABEL_99:
    uint64_t v42 = 0;
    goto LABEL_100;
  }
  if (v35.u32[0] < 2uLL)
  {
    uint64_t v39 = *(void *)&v23 - 1;
    while (1)
    {
      uint64_t v41 = v38[1];
      if (v41 == 0x4AC7AB7561675F6)
      {
        if (v38[2] == 0x4AC7AB7561675F6) {
          goto LABEL_171;
        }
      }
      else if ((v41 & v39) != v36)
      {
        goto LABEL_99;
      }
      unint64_t v38 = (void *)*v38;
      if (!v38) {
        goto LABEL_99;
      }
    }
  }
  while (2)
  {
    unint64_t v40 = v38[1];
    if (v40 != 0x4AC7AB7561675F6)
    {
      if (v40 >= *(void *)&v23) {
        v40 %= *(void *)&v23;
      }
      if (v40 != v36) {
        goto LABEL_99;
      }
      goto LABEL_89;
    }
    if (v38[2] != 0x4AC7AB7561675F6)
    {
LABEL_89:
      unint64_t v38 = (void *)*v38;
      if (!v38) {
        goto LABEL_99;
      }
      continue;
    }
    break;
  }
LABEL_171:
  uint64_t v42 = v38[5];
LABEL_100:
  LOBYTE(v74) = 0;
  char v77 = 0;
  std::__optional_storage_base<std::function<BOOL ()(void)>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::function<BOOL ()(void)>,false> const&>((unsigned char *)(v42 + 144), &v74);
  if (v77)
  {
    if (v76 == &v74)
    {
      (*(void (**)(uint64_t *))(v74 + 32))(&v74);
    }
    else if (v76)
    {
      (*(void (**)(void))(*v76 + 40))();
    }
  }
  LOBYTE(v74) = 0;
  char v77 = 0;
  std::__optional_storage_base<std::function<float ()(void)>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::function<float ()(void)>,false> const&>((unsigned char *)(v42 + 184), &v74);
  if (v77)
  {
    if (v76 == &v74)
    {
      (*(void (**)(uint64_t *))(v74 + 32))(&v74);
    }
    else if (v76)
    {
      (*(void (**)(void))(*v76 + 40))();
    }
  }
  unint64_t v43 = *(int8x8_t **)(a2 + 1120);
  int8x8_t v44 = v43[2];
  if (!*(void *)&v44) {
    goto LABEL_130;
  }
  uint8x8_t v45 = (uint8x8_t)vcnt_s8(v44);
  v45.i16[0] = vaddlv_u8(v45);
  if (v45.u32[0] > 1uLL)
  {
    uint64_t v46 = 0x17767EADC5B287BLL;
    if (*(void *)&v44 <= 0x17767EADC5B287BuLL) {
      uint64_t v46 = 0x17767EADC5B287BuLL % *(void *)&v44;
    }
  }
  else
  {
    uint64_t v46 = (*(void *)&v44 - 1) & 0x17767EADC5B287BLL;
  }
  uint64_t v47 = *(void **)(*(void *)&v43[1] + 8 * v46);
  if (!v47 || (unint64_t v48 = (void *)*v47) == 0)
  {
LABEL_130:
    unint64_t v52 = 0;
    goto LABEL_131;
  }
  if (v45.u32[0] < 2uLL)
  {
    uint64_t v49 = *(void *)&v44 - 1;
    while (1)
    {
      uint64_t v51 = v48[1];
      if (v51 == 0x17767EADC5B287BLL)
      {
        if (v48[2] == 0x17767EADC5B287BLL) {
          goto LABEL_172;
        }
      }
      else if ((v51 & v49) != v46)
      {
        goto LABEL_130;
      }
      unint64_t v48 = (void *)*v48;
      if (!v48) {
        goto LABEL_130;
      }
    }
  }
  while (2)
  {
    unint64_t v50 = v48[1];
    if (v50 != 0x17767EADC5B287BLL)
    {
      if (v50 >= *(void *)&v44) {
        v50 %= *(void *)&v44;
      }
      if (v50 != v46) {
        goto LABEL_130;
      }
      goto LABEL_120;
    }
    if (v48[2] != 0x17767EADC5B287BLL)
    {
LABEL_120:
      unint64_t v48 = (void *)*v48;
      if (!v48) {
        goto LABEL_130;
      }
      continue;
    }
    break;
  }
LABEL_172:
  unint64_t v52 = (unsigned char *)v48[5];
LABEL_131:
  LOBYTE(v71[0]) = 0;
  char v73 = 0;
  md::ElevationLogic::setElevationAdjustmentFeedback(v52, v71);
  if (v73)
  {
    if (v72 == v71)
    {
      (*(void (**)(void *))(v71[0] + 32))(v71);
    }
    else if (v72)
    {
      (*(void (**)(void))(*v72 + 40))();
    }
  }
  uint64_t v53 = *(void *)(*(void *)(a3 + 856) + 40);
  if ((unint64_t)(*(void *)(*(void *)(a3 + 856) + 48) - v53) >= 0x18) {
    uint64_t v54 = *(void *)(v53 + 16);
  }
  else {
    uint64_t v54 = 0;
  }
  long long v55 = +[VKSharedResourcesManager sharedResources];
  [v55 standardCommandBufferSelector];
  uint64_t v56 = v75;
  __int16 v57 = *(_WORD *)(*(void *)(v74 + 8) + 8);
  if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }

  unint64_t v58 = *(_WORD **)(v54 + 8);
  unint64_t v59 = *(_WORD **)(v54 + 24);
  if (v59 == v58)
  {
    if (v59)
    {
      *(void *)(v54 + 16) = v59;
      operator delete(v59);
      *(void *)(v54 + 8) = 0;
      *(void *)(v54 + 16) = 0;
      *(void *)(v54 + 24) = 0;
    }
    unint64_t v58 = operator new(2uLL);
    *(void *)(v54 + 8) = v58;
    *(void *)(v54 + 24) = v58 + 1;
  }
  _WORD *v58 = v57;
  *(void *)(v54 + 16) = v58 + 1;
  *(_WORD *)(v54 + 57) = v57;
  unint64_t v60 = *(int8x8_t **)(a2 + 1120);
  int8x8_t v61 = v60[2];
  if (v61)
  {
    uint8x8_t v62 = (uint8x8_t)vcnt_s8(v61);
    v62.i16[0] = vaddlv_u8(v62);
    if (v62.u32[0] > 1uLL)
    {
      unint64_t v63 = 0x88BE5DF80D25DA79;
      if (*(void *)&v61 <= 0x88BE5DF80D25DA79) {
        unint64_t v63 = 0x88BE5DF80D25DA79 % *(void *)&v61;
      }
    }
    else
    {
      unint64_t v63 = (*(void *)&v61 - 1) & 0x88BE5DF80D25DA79;
    }
    uint64_t v64 = *(void **)(*(void *)&v60[1] + 8 * v63);
    if (v64)
    {
      unint64_t v65 = (void *)*v64;
      if (v65)
      {
        if (v62.u32[0] < 2uLL)
        {
          uint64_t v66 = *(void *)&v61 - 1;
          while (1)
          {
            uint64_t v68 = v65[1];
            if (v68 == 0x88BE5DF80D25DA79)
            {
              if (v65[2] == 0x88BE5DF80D25DA79) {
                goto LABEL_173;
              }
            }
            else if ((v68 & v66) != v63)
            {
              goto LABEL_166;
            }
            unint64_t v65 = (void *)*v65;
            if (!v65) {
              goto LABEL_166;
            }
          }
        }
        do
        {
          unint64_t v67 = v65[1];
          if (v67 == 0x88BE5DF80D25DA79)
          {
            if (v65[2] == 0x88BE5DF80D25DA79)
            {
LABEL_173:
              uint64_t v69 = v65[5];
              return (*(uint64_t (**)(uint64_t))(*(void *)v69 + 16))(v69);
            }
          }
          else
          {
            if (v67 >= *(void *)&v61) {
              v67 %= *(void *)&v61;
            }
            if (v67 != v63) {
              break;
            }
          }
          unint64_t v65 = (void *)*v65;
        }
        while (v65);
      }
    }
  }
LABEL_166:
  uint64_t v69 = 0;
  return (*(uint64_t (**)(uint64_t))(*(void *)v69 + 16))(v69);
}

void sub_1A200BC90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned char *std::__optional_storage_base<std::function<geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::function<geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>,false> const&>(unsigned char *result, unsigned char *a2)
{
  uint64_t v2 = result;
  v8[3] = *MEMORY[0x1E4F143B8];
  if (result[32] == a2[32])
  {
    if (result[32])
    {
      uint64_t v3 = (unsigned char *)*((void *)a2 + 3);
      if (v3)
      {
        if (v3 == a2)
        {
          uint8x8_t v7 = v6;
          (*(void (**)(unsigned char *, void *))(*(void *)a2 + 24))(a2, v6);
        }
        else
        {
          uint8x8_t v7 = (void *)(*(uint64_t (**)(unsigned char *))(*(void *)v3 + 16))(v3);
        }
      }
      else
      {
        uint8x8_t v7 = 0;
      }
      if (v6 != v2)
      {
        uint64_t v4 = v7;
        uint64_t v5 = (void *)v2[3];
        if (v7 == v6)
        {
          if (v5 == v2)
          {
            (*(void (**)(void *, void *))(v6[0] + 24))(v6, v8);
            (*(void (**)(void *))(*v7 + 32))(v7);
            uint8x8_t v7 = 0;
            (*(void (**)(void, void *))(*(void *)v2[3] + 24))(v2[3], v6);
            (*(void (**)(void))(*(void *)v2[3] + 32))(v2[3]);
            v2[3] = 0;
            uint8x8_t v7 = v6;
            (*(void (**)(void *, void *))(v8[0] + 24))(v8, v2);
            (*(void (**)(void *))(v8[0] + 32))(v8);
          }
          else
          {
            (*(void (**)(void *, void *))(v6[0] + 24))(v6, v2);
            (*(void (**)(void *))(*v7 + 32))(v7);
            uint8x8_t v7 = (void *)v2[3];
          }
          v2[3] = v2;
        }
        else if (v5 == v2)
        {
          (*(void (**)(void *, void *))(*v2 + 24))(v2, v6);
          (*(void (**)(void))(*(void *)v2[3] + 32))(v2[3]);
          v2[3] = v7;
          uint8x8_t v7 = v6;
        }
        else
        {
          uint8x8_t v7 = (void *)v2[3];
          v2[3] = v4;
        }
      }
      __n128 result = v7;
      if (v7 == v6)
      {
        return (unsigned char *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else if (v7)
      {
        return (unsigned char *)(*(uint64_t (**)(void))(*v7 + 40))();
      }
    }
  }
  else if (result[32])
  {
    __n128 result = (unsigned char *)*((void *)result + 3);
    if (result == (unsigned char *)v2)
    {
      __n128 result = (unsigned char *)(*(uint64_t (**)(void *))(*v2 + 32))(v2);
      *((unsigned char *)v2 + 32) = 0;
    }
    else
    {
      if (result) {
        __n128 result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 40))(result);
      }
      *((unsigned char *)v2 + 32) = 0;
    }
  }
  else
  {
    __n128 result = (unsigned char *)*((void *)a2 + 3);
    if (result)
    {
      if (result == a2)
      {
        v2[3] = v2;
        __n128 result = (unsigned char *)(*(uint64_t (**)(void, void *))(**((void **)a2 + 3) + 24))(*((void *)a2 + 3), v2);
      }
      else
      {
        __n128 result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 16))(result);
        v2[3] = result;
      }
    }
    else
    {
      v2[3] = 0;
    }
    *((unsigned char *)v2 + 32) = 1;
  }
  return result;
}

unsigned char *std::__optional_storage_base<std::function<BOOL ()(void)>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::function<BOOL ()(void)>,false> const&>(unsigned char *result, unsigned char *a2)
{
  uint64_t v2 = result;
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (result[32] == a2[32])
  {
    if (result[32])
    {
      uint64_t v3 = (unsigned char *)*((void *)a2 + 3);
      if (v3)
      {
        if (v3 == a2)
        {
          uint64_t v5 = v4;
          (*(void (**)(unsigned char *, void *))(*(void *)a2 + 24))(a2, v4);
        }
        else
        {
          uint64_t v5 = (void *)(*(uint64_t (**)(unsigned char *))(*(void *)v3 + 16))(v3);
        }
      }
      else
      {
        uint64_t v5 = 0;
      }
      std::__function::__value_func<BOOL ()(void)>::swap[abi:nn180100](v4, v2);
      __n128 result = v5;
      if (v5 == v4)
      {
        return (unsigned char *)(*(uint64_t (**)(void *))(v4[0] + 32))(v4);
      }
      else if (v5)
      {
        return (unsigned char *)(*(uint64_t (**)(void))(*v5 + 40))();
      }
    }
  }
  else if (result[32])
  {
    __n128 result = (unsigned char *)*((void *)result + 3);
    if (result == v2)
    {
      __n128 result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)v2 + 32))(v2);
      v2[32] = 0;
    }
    else
    {
      if (result) {
        __n128 result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 40))(result);
      }
      v2[32] = 0;
    }
  }
  else
  {
    __n128 result = (unsigned char *)*((void *)a2 + 3);
    if (result)
    {
      if (result == a2)
      {
        *((void *)v2 + 3) = v2;
        __n128 result = (unsigned char *)(*(uint64_t (**)(void, unsigned char *))(**((void **)a2 + 3) + 24))(*((void *)a2 + 3), v2);
      }
      else
      {
        __n128 result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 16))(result);
        *((void *)v2 + 3) = result;
      }
    }
    else
    {
      *((void *)v2 + 3) = 0;
    }
    v2[32] = 1;
  }
  return result;
}

unsigned char *std::__optional_storage_base<std::function<float ()(void)>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::function<float ()(void)>,false> const&>(unsigned char *result, unsigned char *a2)
{
  uint64_t v2 = result;
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (result[32] == a2[32])
  {
    if (result[32])
    {
      uint64_t v3 = (unsigned char *)*((void *)a2 + 3);
      if (v3)
      {
        if (v3 == a2)
        {
          uint64_t v5 = v4;
          (*(void (**)(unsigned char *, void *))(*(void *)a2 + 24))(a2, v4);
        }
        else
        {
          uint64_t v5 = (void *)(*(uint64_t (**)(unsigned char *))(*(void *)v3 + 16))(v3);
        }
      }
      else
      {
        uint64_t v5 = 0;
      }
      std::__function::__value_func<float ()(void)>::swap[abi:nn180100](v4, v2);
      __n128 result = v5;
      if (v5 == v4)
      {
        return (unsigned char *)(*(uint64_t (**)(void *))(v4[0] + 32))(v4);
      }
      else if (v5)
      {
        return (unsigned char *)(*(uint64_t (**)(void))(*v5 + 40))();
      }
    }
  }
  else if (result[32])
  {
    __n128 result = (unsigned char *)*((void *)result + 3);
    if (result == v2)
    {
      __n128 result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)v2 + 32))(v2);
      v2[32] = 0;
    }
    else
    {
      if (result) {
        __n128 result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 40))(result);
      }
      v2[32] = 0;
    }
  }
  else
  {
    __n128 result = (unsigned char *)*((void *)a2 + 3);
    if (result)
    {
      if (result == a2)
      {
        *((void *)v2 + 3) = v2;
        __n128 result = (unsigned char *)(*(uint64_t (**)(void, unsigned char *))(**((void **)a2 + 3) + 24))(*((void *)a2 + 3), v2);
      }
      else
      {
        __n128 result = (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 16))(result);
        *((void *)v2 + 3) = result;
      }
    }
    else
    {
      *((void *)v2 + 3) = 0;
    }
    v2[32] = 1;
  }
  return result;
}

uint64_t std::optional<std::function<geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>>::~optional(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2 == a1)
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    }
    else if (v2)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    }
  }
  return a1;
}

uint64_t std::optional<std::function<BOOL ()(void)>>::~optional(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2 == a1)
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    }
    else if (v2)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    }
  }
  return a1;
}

uint64_t std::optional<std::function<float ()(void)>>::~optional(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2 == a1)
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    }
    else if (v2)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    }
  }
  return a1;
}

void *std::__function::__value_func<float ()(void)>::swap[abi:nn180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void *md::SandboxBaseMapEngineMode::didBecomeActive(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  v121[3] = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 576) = a2[150];
  md::CartographicMapEngineMode::didBecomeActive(a1, (uint64_t)a2, a3, a4);
  uint64_t v7 = *(void *)(a3 + 856);
  uint64_t v8 = *(void *)(v7 + 40);
  unint64_t v9 = *(void *)(v7 + 48) - v8;
  if (v9 > 0x1AF)
  {
    uint64_t v11 = *(void *)(v8 + 424);
    uint64_t v10 = *(void *)(v8 + 80);
    if (v11)
    {
      int v12 = *(unsigned __int8 *)(a1 + 600);
      if (*(unsigned __int8 *)(v11 + 33) != v12)
      {
        *(unsigned char *)(v11 + 33) = v12;
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
        }
        uint64_t v13 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          int v14 = *(unsigned __int8 *)(v11 + 33);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v14;
          _os_log_impl(&dword_1A1780000, v13, OS_LOG_TYPE_INFO, "[FeatureFlag]FlyoverRenderLayer:%d", buf, 8u);
        }
      }
    }
    goto LABEL_11;
  }
  if (v9 >= 0x58)
  {
    uint64_t v10 = *(void *)(v8 + 80);
LABEL_11:
    if (v10)
    {
      int v15 = *(unsigned __int8 *)(a1 + 600);
      if (*(unsigned __int8 *)(v10 + 33) != v15)
      {
        *(unsigned char *)(v10 + 33) = v15;
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
        }
        uint64_t v16 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          int v17 = *(unsigned __int8 *)(v10 + 33);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v17;
          _os_log_impl(&dword_1A1780000, v16, OS_LOG_TYPE_INFO, "[FeatureFlag]GlobeRasterRenderLayer:%d", buf, 8u);
        }
      }
    }
  }
  uint64_t v18 = (int8x8_t *)a2[140];
  int8x8_t v19 = v18[2];
  if (!*(void *)&v19) {
    goto LABEL_52;
  }
  uint8x8_t v20 = (uint8x8_t)vcnt_s8(v19);
  v20.i16[0] = vaddlv_u8(v20);
  unint64_t v21 = v20.u32[0];
  if (v20.u32[0] > 1uLL)
  {
    uint64_t v22 = 0x2FED70A4459DFCA1;
    if (*(void *)&v19 <= 0x2FED70A4459DFCA1uLL) {
      uint64_t v22 = 0x2FED70A4459DFCA1uLL % *(void *)&v19;
    }
  }
  else
  {
    uint64_t v22 = (*(void *)&v19 - 1) & 0x2FED70A4459DFCA1;
  }
  int8x8_t v23 = *(void **)(*(void *)&v18[1] + 8 * v22);
  if (v23)
  {
    uint8x8_t v24 = (void *)*v23;
    if (v24)
    {
      if (v20.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v26 = v24[1];
          if (v26 == 0x2FED70A4459DFCA1)
          {
            if (v24[2] == 0x2FED70A4459DFCA1) {
              goto LABEL_39;
            }
          }
          else if ((v26 & (*(void *)&v19 - 1)) != v22)
          {
            goto LABEL_48;
          }
          uint8x8_t v24 = (void *)*v24;
          if (!v24) {
            goto LABEL_48;
          }
        }
      }
      while (1)
      {
        unint64_t v25 = v24[1];
        if (v25 == 0x2FED70A4459DFCA1)
        {
          if (v24[2] == 0x2FED70A4459DFCA1)
          {
LABEL_39:
            uint64_t v27 = v24[5];
            if (v27)
            {
              unint64_t v28 = (uint64_t *)a2[141];
              uint64_t v29 = *v28;
              uint64_t v30 = v28[1];
              if (v29 != v30)
              {
                while (*(unsigned char *)v29 != 21)
                {
                  v29 += 16;
                  if (v29 == v30) {
                    goto LABEL_46;
                  }
                }
              }
              if (v29 == v30) {
LABEL_46:
              }
                uint64_t v31 = 0;
              else {
                uint64_t v31 = *(void *)(v29 + 8);
              }
              md::StyleLogic::setGroundMode(v27, v31 != 0);
              uint64_t v18 = (int8x8_t *)a2[140];
              int8x8_t v19 = v18[2];
            }
LABEL_48:
            if (v19)
            {
              uint8x8_t v32 = (uint8x8_t)vcnt_s8(v19);
              v32.i16[0] = vaddlv_u8(v32);
              unint64_t v21 = v32.u32[0];
              break;
            }
LABEL_52:
            uint64_t v34 = 0;
            MEMORY[0x8C] = 0;
            MEMORY[0x8D] = 0;
            goto LABEL_88;
          }
        }
        else
        {
          if (v25 >= *(void *)&v19) {
            v25 %= *(void *)&v19;
          }
          if (v25 != v22) {
            goto LABEL_48;
          }
        }
        uint8x8_t v24 = (void *)*v24;
        if (!v24) {
          goto LABEL_48;
        }
      }
    }
  }
  if (v21 > 1)
  {
    unint64_t v33 = 0x91E65CD7F1A7A7FALL;
    if (*(void *)&v19 <= 0x91E65CD7F1A7A7FALL) {
      unint64_t v33 = 0x91E65CD7F1A7A7FALL % *(void *)&v19;
    }
  }
  else
  {
    unint64_t v33 = (*(void *)&v19 - 1) & 0x91E65CD7F1A7A7FALL;
  }
  int8x8_t v35 = v18[1];
  uint64_t v36 = *(void **)(*(void *)&v35 + 8 * v33);
  if (v36 && (uint64_t v37 = (void *)*v36) != 0)
  {
    if (v21 >= 2)
    {
      while (v37[1] != 0x91E65CD7F1A7A7FALL || v37[2] != 0x91E65CD7F1A7A7FALL)
        uint64_t v37 = (void *)*v37;
    }
    else
    {
      while (v37[1] != 0x91E65CD7F1A7A7FALL || v37[2] != 0x91E65CD7F1A7A7FALL)
        uint64_t v37 = (void *)*v37;
    }
    uint64_t v38 = v37[5];
    *(unsigned char *)(v38 + 140) = 0;
    uint64_t v39 = v38 + 141;
  }
  else
  {
    MEMORY[0x8C] = 0;
    uint64_t v39 = 141;
  }
  *(unsigned char *)uint64_t v39 = 0;
  if (v21 > 1)
  {
    unint64_t v40 = 0xAF46DE79C836B0D8;
    if (*(void *)&v19 <= 0xAF46DE79C836B0D8) {
      unint64_t v40 = 0xAF46DE79C836B0D8 % *(void *)&v19;
    }
  }
  else
  {
    unint64_t v40 = (*(void *)&v19 - 1) & 0xAF46DE79C836B0D8;
  }
  uint64_t v41 = *(void **)(*(void *)&v35 + 8 * v40);
  if (!v41 || (uint64_t v42 = (void *)*v41) == 0)
  {
LABEL_87:
    uint64_t v34 = 0;
    goto LABEL_88;
  }
  if (v21 < 2)
  {
    uint64_t v43 = *(void *)&v19 - 1;
    while (1)
    {
      uint64_t v45 = v42[1];
      if (v45 == 0xAF46DE79C836B0D8)
      {
        if (v42[2] == 0xAF46DE79C836B0D8) {
          goto LABEL_233;
        }
      }
      else if ((v45 & v43) != v40)
      {
        goto LABEL_87;
      }
      uint64_t v42 = (void *)*v42;
      if (!v42) {
        goto LABEL_87;
      }
    }
  }
  while (1)
  {
    unint64_t v44 = v42[1];
    if (v44 == 0xAF46DE79C836B0D8) {
      break;
    }
    if (v44 >= *(void *)&v19) {
      v44 %= *(void *)&v19;
    }
    if (v44 != v40) {
      goto LABEL_87;
    }
LABEL_77:
    uint64_t v42 = (void *)*v42;
    if (!v42) {
      goto LABEL_87;
    }
  }
  if (v42[2] != 0xAF46DE79C836B0D8) {
    goto LABEL_77;
  }
LABEL_233:
  uint64_t v34 = v42[5];
LABEL_88:
  *(_DWORD *)(v34 + 324) = 17826054;
  uint64_t v46 = (std::__shared_weak_count *)a2[112];
  if (v46) {
    md::World::setEnableGlobe(v46[1].__shared_owners_, v46[1].__shared_weak_owners_, *(unsigned char *)(a1 + 568));
  }
  *(unsigned char *)(v34 + 328) = 3;
  v116[0] = &unk_1EF5770E8;
  v116[1] = v46;
  uint64_t v117 = v116;
  char v118 = 1;
  std::__optional_storage_base<std::function<geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::function<geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>,false> const&>((unsigned char *)(v34 + 336), v116);
  if (v118)
  {
    if (v117 == v116)
    {
      (*(void (**)(void *))(v116[0] + 32))(v116);
    }
    else if (v117)
    {
      (*(void (**)(void))(*v117 + 40))();
    }
  }
  uint64_t v47 = (int8x8_t *)a2[140];
  int8x8_t v48 = v47[2];
  uint8x8_t v49 = (uint8x8_t)vcnt_s8(v48);
  v49.i16[0] = vaddlv_u8(v49);
  if (v49.u32[0] > 1uLL)
  {
    uint64_t v50 = 0x4BD0C73E70A08DDBuLL % *(void *)&v48;
    if (*(void *)&v48 > 0x4BD0C73E70A08DDBuLL) {
      uint64_t v50 = 0x4BD0C73E70A08DDBLL;
    }
  }
  else
  {
    uint64_t v50 = (*(void *)&v48 - 1) & 0x4BD0C73E70A08DDBLL;
  }
  int8x8_t v51 = v47[1];
  unint64_t v52 = *(void **)(*(void *)&v51 + 8 * v50);
  if (!v52 || (uint64_t v53 = (void *)*v52) == 0)
  {
LABEL_114:
    uint64_t v56 = 0;
    goto LABEL_115;
  }
  if (v49.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v55 = v53[1];
      if (v55 == 0x4BD0C73E70A08DDBLL)
      {
        if (v53[2] == 0x4BD0C73E70A08DDBLL) {
          goto LABEL_226;
        }
      }
      else if ((v55 & (*(void *)&v48 - 1)) != v50)
      {
        goto LABEL_114;
      }
      uint64_t v53 = (void *)*v53;
      if (!v53) {
        goto LABEL_114;
      }
    }
  }
  while (2)
  {
    unint64_t v54 = v53[1];
    if (v54 != 0x4BD0C73E70A08DDBLL)
    {
      if (v54 >= *(void *)&v48) {
        v54 %= *(void *)&v48;
      }
      if (v54 != v50) {
        goto LABEL_114;
      }
      goto LABEL_104;
    }
    if (v53[2] != 0x4BD0C73E70A08DDBLL)
    {
LABEL_104:
      uint64_t v53 = (void *)*v53;
      if (!v53) {
        goto LABEL_114;
      }
      continue;
    }
    break;
  }
LABEL_226:
  uint64_t v56 = v53[5];
LABEL_115:
  if (v49.u32[0] >= 2uLL)
  {
    unint64_t v58 = 0xE3FE7D96C51342ALL;
    if (*(void *)&v48 <= 0xE3FE7D96C51342AuLL) {
      unint64_t v58 = 0xE3FE7D96C51342AuLL % *(void *)&v48;
    }
    __int16 v57 = *(void **)(*(void *)&v51 + 8 * v58);
    do
    {
      do
        __int16 v57 = (void *)*v57;
      while (v57[1] != 0xE3FE7D96C51342ALL);
    }
    while (v57[2] != 0xE3FE7D96C51342ALL);
  }
  else
  {
    __int16 v57 = *(void **)(*(void *)&v51 + 8 * ((*(void *)&v48 - 1) & 0xE3FE7D96C51342ALL));
    do
    {
      do
        __int16 v57 = (void *)*v57;
      while (v57[1] != 0xE3FE7D96C51342ALL);
    }
    while (v57[2] != 0xE3FE7D96C51342ALL);
  }
  *(unsigned char *)(v57[5] + 808) = 0;
  v113[0] = &unk_1EF51EC80;
  v113[1] = v56;
  unint64_t v114 = v113;
  char v115 = 1;
  std::__optional_storage_base<std::function<gdc::CameraFrame<geo::Radians,double> ()(void)>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::function<gdc::CameraFrame<geo::Radians,double> ()(void)>,false> const&>((unsigned char *)(v34 + 376), v113);
  if (v115)
  {
    if (v114 == v113)
    {
      (*(void (**)(void *))(v113[0] + 32))(v113);
    }
    else if (v114)
    {
      (*(void (**)(void))(*v114 + 40))();
    }
  }
  *(unsigned char *)(*(void *)(v34 + 136) + 48) = 1;
  *(unsigned char *)(*(void *)(v34 + 184) + 48) = 1;
  *(unsigned char *)(*(void *)(v34 + 192) + 48) = 1;
  if (*(unsigned char *)(a1 + 568)) {
    __int16 v59 = 7;
  }
  else {
    __int16 v59 = 2;
  }
  unint64_t v60 = (int8x8_t *)a2[140];
  int8x8_t v61 = v60[2];
  if (v61)
  {
    uint8x8_t v62 = (uint8x8_t)vcnt_s8(v61);
    v62.i16[0] = vaddlv_u8(v62);
    if (v62.u32[0] > 1uLL)
    {
      unint64_t v63 = 0xC267A080D338C6A1;
      if (*(void *)&v61 <= 0xC267A080D338C6A1) {
        unint64_t v63 = 0xC267A080D338C6A1 % *(void *)&v61;
      }
    }
    else
    {
      unint64_t v63 = (*(void *)&v61 - 1) & 0xC267A080D338C6A1;
    }
    uint64_t v64 = *(void **)(*(void *)&v60[1] + 8 * v63);
    if (v64)
    {
      unint64_t v65 = (void *)*v64;
      if (v65)
      {
        if (v62.u32[0] < 2uLL)
        {
          uint64_t v66 = *(void *)&v61 - 1;
          while (1)
          {
            uint64_t v68 = v65[1];
            if (v68 == 0xC267A080D338C6A1)
            {
              if (v65[2] == 0xC267A080D338C6A1) {
                goto LABEL_229;
              }
            }
            else if ((v68 & v66) != v63)
            {
              goto LABEL_153;
            }
            unint64_t v65 = (void *)*v65;
            if (!v65) {
              goto LABEL_153;
            }
          }
        }
        do
        {
          unint64_t v67 = v65[1];
          if (v67 == 0xC267A080D338C6A1)
          {
            if (v65[2] == 0xC267A080D338C6A1)
            {
LABEL_229:
              uint64_t v69 = v65[5];
              goto LABEL_154;
            }
          }
          else
          {
            if (v67 >= *(void *)&v61) {
              v67 %= *(void *)&v61;
            }
            if (v67 != v63) {
              break;
            }
          }
          unint64_t v65 = (void *)*v65;
        }
        while (v65);
      }
    }
  }
LABEL_153:
  uint64_t v69 = 0;
LABEL_154:
  uint64_t v70 = (float *)(v69 + 208);
  std::__hash_table<md::TileSelectionTileSetType,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>>::__emplace_unique_key_args<md::TileSelectionTileSetType,md::TileSelectionTileSetType const&>((float *)(v69 + 208), v59, v59);
  unint64_t v71 = (int8x8_t *)a2[140];
  int8x8_t v72 = v71[2];
  if (!*(void *)&v72) {
    goto LABEL_174;
  }
  uint8x8_t v73 = (uint8x8_t)vcnt_s8(v72);
  v73.i16[0] = vaddlv_u8(v73);
  if (v73.u32[0] > 1uLL)
  {
    uint64_t v74 = 0x4AC7AB7561675F6;
    if (*(void *)&v72 <= 0x4AC7AB7561675F6uLL) {
      uint64_t v74 = 0x4AC7AB7561675F6uLL % *(void *)&v72;
    }
  }
  else
  {
    uint64_t v74 = (*(void *)&v72 - 1) & 0x4AC7AB7561675F6;
  }
  uint64_t v75 = *(void **)(*(void *)&v71[1] + 8 * v74);
  if (!v75 || (uint64_t v76 = (void *)*v75) == 0)
  {
LABEL_174:
    uint64_t v80 = 0;
    goto LABEL_175;
  }
  if (v73.u32[0] < 2uLL)
  {
    uint64_t v77 = *(void *)&v72 - 1;
    while (1)
    {
      uint64_t v79 = v76[1];
      if (v79 == 0x4AC7AB7561675F6)
      {
        if (v76[2] == 0x4AC7AB7561675F6) {
          goto LABEL_230;
        }
      }
      else if ((v79 & v77) != v74)
      {
        goto LABEL_174;
      }
      uint64_t v76 = (void *)*v76;
      if (!v76) {
        goto LABEL_174;
      }
    }
  }
  while (2)
  {
    unint64_t v78 = v76[1];
    if (v78 != 0x4AC7AB7561675F6)
    {
      if (v78 >= *(void *)&v72) {
        v78 %= *(void *)&v72;
      }
      if (v78 != v74) {
        goto LABEL_174;
      }
      goto LABEL_164;
    }
    if (v76[2] != 0x4AC7AB7561675F6)
    {
LABEL_164:
      uint64_t v76 = (void *)*v76;
      if (!v76) {
        goto LABEL_174;
      }
      continue;
    }
    break;
  }
LABEL_230:
  uint64_t v80 = v76[5];
LABEL_175:
  unint64_t v81 = +[VKDebugSettings sharedSettings];
  int v82 = [v81 flyoverDrapeGrid];

  if (v82)
  {
    std::__hash_table<md::TileSelectionTileSetType,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>>::__emplace_unique_key_args<md::TileSelectionTileSetType,md::TileSelectionTileSetType const&>(v70, 1u, 1);
    std::__hash_table<md::TileSelectionTileSetType,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>>::__emplace_unique_key_args<md::TileSelectionTileSetType,md::TileSelectionTileSetType const&>(v70, 8u, 8);
  }
  *(void *)buf = &unk_1EF51ECC8;
  unint64_t v111 = buf;
  char v112 = 1;
  std::__optional_storage_base<std::function<BOOL ()(void)>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::function<BOOL ()(void)>,false> const&>((unsigned char *)(v80 + 144), buf);
  if (v112)
  {
    if (v111 == buf)
    {
      (*(void (**)(uint8_t *))(*(void *)buf + 32))(buf);
    }
    else if (v111)
    {
      (*(void (**)(void))(*(void *)v111 + 40))();
    }
  }
  *(void *)buf = &unk_1EF51ED10;
  unint64_t v111 = buf;
  char v112 = 1;
  std::__optional_storage_base<std::function<float ()(void)>,false>::__assign_from[abi:nn180100]<std::__optional_copy_assign_base<std::function<float ()(void)>,false> const&>((unsigned char *)(v80 + 184), buf);
  if (v112)
  {
    if (v111 == buf)
    {
      (*(void (**)(uint8_t *))(*(void *)buf + 32))(buf);
    }
    else if (v111)
    {
      (*(void (**)(void))(*(void *)v111 + 40))();
    }
  }
  uint64_t v83 = *(void *)(v7 + 40);
  if ((unint64_t)(*(void *)(v7 + 48) - v83) >= 0x18) {
    uint64_t v84 = *(void *)(v83 + 16);
  }
  else {
    uint64_t v84 = 0;
  }
  BOOL v85 = +[VKSharedResourcesManager sharedResources];
  [v85 standardCommandBufferSelector];
  unint64_t v86 = v110;
  __int16 v87 = *(_WORD *)(*(void *)(*(void *)buf + 8) + 8);
  if (v110 && !atomic_fetch_add(&v110->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
    std::__shared_weak_count::__release_weak(v86);
  }

  unint64_t v88 = *(_WORD **)(v84 + 8);
  unint64_t v89 = *(_WORD **)(v84 + 24);
  if (v89 == v88)
  {
    if (v89)
    {
      *(void *)(v84 + 16) = v89;
      operator delete(v89);
      *(void *)(v84 + 8) = 0;
      *(void *)(v84 + 16) = 0;
      *(void *)(v84 + 24) = 0;
    }
    unint64_t v88 = operator new(2uLL);
    *(void *)(v84 + 8) = v88;
    *(void *)(v84 + 24) = v88 + 1;
  }
  *unint64_t v88 = v87;
  __n128 result = v88 + 1;
  *(void *)(v84 + 16) = result;
  *(_WORD *)(v84 + 57) = v87;
  uint64_t v91 = (int8x8_t *)a2[140];
  int8x8_t v92 = v91[2];
  if (!*(void *)&v92) {
    goto LABEL_217;
  }
  uint8x8_t v93 = (uint8x8_t)vcnt_s8(v92);
  v93.i16[0] = vaddlv_u8(v93);
  if (v93.u32[0] > 1uLL)
  {
    uint64_t v94 = 0x17767EADC5B287BLL;
    if (*(void *)&v92 <= 0x17767EADC5B287BuLL) {
      uint64_t v94 = 0x17767EADC5B287BuLL % *(void *)&v92;
    }
  }
  else
  {
    uint64_t v94 = (*(void *)&v92 - 1) & 0x17767EADC5B287BLL;
  }
  uint64_t v95 = *(void **)(*(void *)&v91[1] + 8 * v94);
  if (!v95 || (unint64_t v96 = (void *)*v95) == 0)
  {
LABEL_217:
    uint64_t v100 = 0;
    goto LABEL_218;
  }
  if (v93.u32[0] < 2uLL)
  {
    uint64_t v97 = *(void *)&v92 - 1;
    while (1)
    {
      uint64_t v99 = v96[1];
      if (v99 == 0x17767EADC5B287BLL)
      {
        if (v96[2] == 0x17767EADC5B287BLL) {
          goto LABEL_231;
        }
      }
      else if ((v99 & v97) != v94)
      {
        goto LABEL_217;
      }
      unint64_t v96 = (void *)*v96;
      if (!v96) {
        goto LABEL_217;
      }
    }
  }
  while (2)
  {
    unint64_t v98 = v96[1];
    if (v98 != 0x17767EADC5B287BLL)
    {
      if (v98 >= *(void *)&v92) {
        v98 %= *(void *)&v92;
      }
      if (v98 != v94) {
        goto LABEL_217;
      }
      goto LABEL_207;
    }
    if (v96[2] != 0x17767EADC5B287BLL)
    {
LABEL_207:
      unint64_t v96 = (void *)*v96;
      if (!v96) {
        goto LABEL_217;
      }
      continue;
    }
    break;
  }
LABEL_231:
  uint64_t v100 = v96[5];
LABEL_218:
  *(_OWORD *)(v100 + 224) = 0u;
  *(_OWORD *)(v100 + 240) = 0u;
  *(_OWORD *)(v100 + 192) = 0u;
  *(_OWORD *)(v100 + 208) = 0u;
  *(_OWORD *)(v100 + 176) = 0u;
  if (!*(unsigned char *)(a1 + 568)) {
    return result;
  }
  *(void *)buf = &unk_1EF51ED58;
  unint64_t v110 = v46;
  unint64_t v111 = buf;
  char v112 = 1;
  uint64_t v101 = (void *)(a1 + 496);
  if (!*(unsigned char *)(a1 + 528))
  {
    *(void *)(a1 + 520) = v101;
    std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_4,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_4>,std::optional<md::DynamicPitchZoomLimit> ()(std::shared_ptr<gdc::Camera>,float)>::__clone((uint64_t)buf, (void *)(a1 + 496));
    *(unsigned char *)(a1 + 528) = 1;
    if (v112) {
      goto LABEL_242;
    }
    goto LABEL_245;
  }
  size_t v120 = v119;
  std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_4,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_4>,std::optional<md::DynamicPitchZoomLimit> ()(std::shared_ptr<gdc::Camera>,float)>::__clone((uint64_t)buf, v119);
  if (v101 == v119) {
    goto LABEL_235;
  }
  uint64_t v102 = v120;
  uint64_t v103 = *(void **)(a1 + 520);
  if (v120 == v119)
  {
    if (v103 != v101)
    {
      (*(void (**)(void *, uint64_t))(v119[0] + 24))(v119, a1 + 496);
      (*(void (**)(void *))(*v120 + 32))(v120);
      uint64_t v103 = *(void **)(a1 + 520);
      size_t v120 = v103;
      *(void *)(a1 + 520) = v101;
      goto LABEL_236;
    }
    (*(void (**)(void *, void *))(v119[0] + 24))(v119, v121);
    (*(void (**)(void *))(*v120 + 32))(v120);
    size_t v120 = 0;
    (*(void (**)(void, void *))(**(void **)(a1 + 520) + 24))(*(void *)(a1 + 520), v119);
    (*(void (**)(void))(**(void **)(a1 + 520) + 32))(*(void *)(a1 + 520));
    *(void *)(a1 + 520) = 0;
    size_t v120 = v119;
    (*(void (**)(void *, uint64_t))(v121[0] + 24))(v121, a1 + 496);
    (*(void (**)(void *))(v121[0] + 32))(v121);
    *(void *)(a1 + 520) = v101;
LABEL_235:
    uint64_t v103 = v120;
LABEL_236:
    if (v103 == v119) {
      goto LABEL_241;
    }
    if (v103) {
      (*(void (**)(void *))(*v103 + 40))(v103);
    }
    if (!v112) {
      goto LABEL_245;
    }
LABEL_242:
    if (v111 != buf)
    {
      if (v111) {
        (*(void (**)(void))(*(void *)v111 + 40))();
      }
      goto LABEL_245;
    }
    (*(void (**)(uint8_t *))(*(void *)buf + 32))(buf);
    if (*(unsigned char *)(a1 + 592)) {
      goto LABEL_246;
    }
    goto LABEL_247;
  }
  if (v103 != v101)
  {
    size_t v120 = *(void **)(a1 + 520);
    *(void *)(a1 + 520) = v102;
    goto LABEL_236;
  }
  (*(void (**)(uint64_t, void *))(*(void *)(a1 + 496) + 24))(a1 + 496, v119);
  (*(void (**)(void))(**(void **)(a1 + 520) + 32))(*(void *)(a1 + 520));
  *(void *)(a1 + 520) = v120;
  size_t v120 = v119;
LABEL_241:
  (*(void (**)(void *))(v119[0] + 32))(v119);
  if (v112) {
    goto LABEL_242;
  }
LABEL_245:
  if (*(unsigned char *)(a1 + 592)) {
LABEL_246:
  }
    *(unsigned char *)(a1 + 592) = 0;
LABEL_247:
  v106[0] = &unk_1EF51EDA0;
  v106[1] = a1;
  float v107 = v106;
  char v108 = 1;
  md::ElevationLogic::setElevationAdjustmentFeedback((unsigned char *)v100, v106);
  if (v108)
  {
    if (v107 == v106)
    {
      (*(void (**)(void *))(v106[0] + 32))(v106);
    }
    else if (v107)
    {
      (*(void (**)(void))(*v107 + 40))();
    }
  }
  *(void *)buf = &unk_1EF51EDE8;
  unint64_t v110 = (std::__shared_weak_count *)a1;
  unint64_t v111 = buf;
  char v112 = 1;
  unint64_t v104 = (void *)(a1 + 456);
  if (!*(unsigned char *)(a1 + 488))
  {
    *(void *)(a1 + 480) = v104;
    __n128 result = (void *)std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_6,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_6>,BOOL ()(std::shared_ptr<gdc::Camera>,geo::Unit<geo::MeterUnitDescription,double> &,geo::Unit<geo::MeterUnitDescription,double> &)>::__clone((uint64_t)buf, (void *)(a1 + 456));
    *(unsigned char *)(a1 + 488) = 1;
    goto LABEL_269;
  }
  size_t v120 = v119;
  std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_6,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_6>,BOOL ()(std::shared_ptr<gdc::Camera>,geo::Unit<geo::MeterUnitDescription,double> &,geo::Unit<geo::MeterUnitDescription,double> &)>::__clone((uint64_t)buf, v119);
  if (v104 == v119) {
    goto LABEL_264;
  }
  uint64_t v105 = v120;
  __n128 result = *(void **)(a1 + 480);
  if (v120 != v119)
  {
    if (result != v104)
    {
      size_t v120 = *(void **)(a1 + 480);
      *(void *)(a1 + 480) = v105;
      goto LABEL_265;
    }
    (*(void (**)(uint64_t, void *))(*(void *)(a1 + 456) + 24))(a1 + 456, v119);
    (*(void (**)(void))(**(void **)(a1 + 480) + 32))(*(void *)(a1 + 480));
    *(void *)(a1 + 480) = v120;
    size_t v120 = v119;
LABEL_268:
    __n128 result = (void *)(*(uint64_t (**)(void *))(v119[0] + 32))(v119);
    goto LABEL_269;
  }
  if (result == v104)
  {
    (*(void (**)(void *, void *))(v119[0] + 24))(v119, v121);
    (*(void (**)(void *))(*v120 + 32))(v120);
    size_t v120 = 0;
    (*(void (**)(void, void *))(**(void **)(a1 + 480) + 24))(*(void *)(a1 + 480), v119);
    (*(void (**)(void))(**(void **)(a1 + 480) + 32))(*(void *)(a1 + 480));
    *(void *)(a1 + 480) = 0;
    size_t v120 = v119;
    (*(void (**)(void *, uint64_t))(v121[0] + 24))(v121, a1 + 456);
    (*(void (**)(void *))(v121[0] + 32))(v121);
    *(void *)(a1 + 480) = v104;
LABEL_264:
    __n128 result = v120;
    goto LABEL_265;
  }
  (*(void (**)(void *, uint64_t))(v119[0] + 24))(v119, a1 + 456);
  (*(void (**)(void *))(*v120 + 32))(v120);
  __n128 result = *(void **)(a1 + 480);
  size_t v120 = result;
  *(void *)(a1 + 480) = v104;
LABEL_265:
  if (result == v119) {
    goto LABEL_268;
  }
  if (result) {
    __n128 result = (void *)(*(uint64_t (**)(void *))(*result + 40))(result);
  }
LABEL_269:
  if (v112)
  {
    __n128 result = v111;
    if (v111 == buf)
    {
      return (void *)(*(uint64_t (**)(uint8_t *))(*(void *)buf + 32))(buf);
    }
    else if (v111)
    {
      return (void *)(*(uint64_t (**)(void))(*(void *)v111 + 40))();
    }
  }
  return result;
}

void sub_1A200DEC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::optional<std::function<void ()(std::optional<double> const&)>>::~optional((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A200DEDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__hash_table<md::TileSelectionTileSetType,std::hash<md::TileSelectionTileSetType>,std::equal_to<md::TileSelectionTileSetType>,std::allocator<md::TileSelectionTileSetType>>::__emplace_unique_key_args<md::TileSelectionTileSetType,md::TileSelectionTileSetType const&>(float *a1, unsigned __int16 a2, __int16 a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            int v12 = v10[1];
            if (v12 == (uint64_t *)a2)
            {
              if (*((unsigned __int16 *)v10 + 8) == a2) {
                return;
              }
            }
            else if (((unint64_t)v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v10 = (uint64_t **)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = (unint64_t)v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int16 *)v10 + 8) == a2) {
              return;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  uint64_t v13 = operator new(0x18uLL);
  *uint64_t v13 = 0;
  v13[1] = v6;
  *((_WORD *)v13 + 8) = a3;
  float v14 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v15 = a1[8];
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t prime = v18;
    }
    else {
      size_t prime = v17;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *((void *)a1 + 1);
    }
    if (prime <= v7)
    {
      if (prime >= v7) {
        goto LABEL_59;
      }
      unint64_t v31 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (prime <= v31) {
        size_t prime = v31;
      }
      if (prime >= v7)
      {
        unint64_t v7 = *((void *)a1 + 1);
LABEL_59:
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6) {
            unint64_t v3 = v6 % v7;
          }
          else {
            unint64_t v3 = v6;
          }
        }
        else
        {
          unint64_t v3 = (v7 - 1) & v6;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        unint64_t v40 = *(void **)a1;
        *(void *)a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v7 = 0;
        *((void *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint8x8_t v20 = operator new(8 * prime);
    unint64_t v21 = *(void **)a1;
    *(void *)a1 = v20;
    if (v21) {
      operator delete(v21);
    }
    uint64_t v22 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v22++) = 0;
    while (prime != v22);
    uint8x8_t v24 = (uint64_t *)(a1 + 4);
    int8x8_t v23 = (void *)*((void *)a1 + 2);
    if (!v23)
    {
LABEL_58:
      unint64_t v7 = prime;
      goto LABEL_59;
    }
    size_t v25 = v23[1];
    size_t v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v27 = v25 & v26;
      *(void *)(*(void *)a1 + 8 * v27) = v24;
      for (uint64_t i = (void *)*v23; *v23; uint64_t i = (void *)*v23)
      {
        size_t v29 = i[1] & v26;
        if (v29 == v27)
        {
          int8x8_t v23 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v29))
        {
          void *v23 = *i;
          uint64_t v30 = 8 * v29;
          void *i = **(void **)(*(void *)a1 + v30);
          **(void **)(*(void *)a1 + v30) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v29) = v23;
          int8x8_t v23 = i;
          size_t v27 = v29;
        }
      }
      goto LABEL_58;
    }
    if (v25 >= prime) {
      v25 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v25) = v24;
    uint64_t v34 = (void *)*v23;
    if (!*v23) {
      goto LABEL_58;
    }
    while (1)
    {
      size_t v36 = v34[1];
      if (v36 >= prime) {
        v36 %= prime;
      }
      if (v36 != v25)
      {
        if (!*(void *)(*(void *)a1 + 8 * v36))
        {
          *(void *)(*(void *)a1 + 8 * v36) = v23;
          goto LABEL_63;
        }
        void *v23 = *v34;
        uint64_t v35 = 8 * v36;
        *uint64_t v34 = **(void **)(*(void *)a1 + v35);
        **(void **)(*(void *)a1 + v35) = v34;
        uint64_t v34 = v23;
      }
      size_t v36 = v25;
LABEL_63:
      int8x8_t v23 = v34;
      uint64_t v34 = (void *)*v34;
      size_t v25 = v36;
      if (!v34) {
        goto LABEL_58;
      }
    }
  }
LABEL_72:
  uint64_t v37 = *(void **)a1;
  uint64_t v38 = *(void **)(*(void *)a1 + 8 * v3);
  if (v38)
  {
    *uint64_t v13 = *v38;
LABEL_80:
    *uint64_t v38 = v13;
    goto LABEL_81;
  }
  *uint64_t v13 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v13;
  v37[v3] = a1 + 4;
  if (*v13)
  {
    unint64_t v39 = *(void *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v39 >= v7) {
        v39 %= v7;
      }
    }
    else
    {
      v39 &= v7 - 1;
    }
    uint64_t v38 = (void *)(*(void *)a1 + 8 * v39);
    goto LABEL_80;
  }
LABEL_81:
  ++*((void *)a1 + 3);
}

void sub_1A200E398(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_6,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_6>,BOOL ()(std::shared_ptr<gdc::Camera>,geo::Unit<geo::MeterUnitDescription,double> &,geo::Unit<geo::MeterUnitDescription,double> &)>::operator()(uint64_t a1, uint64_t *a2, double *a3, double *a4)
{
  uint64_t v6 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v7 = *(void *)(a1 + 8);
  double v8 = *(double *)(v6 + 40);
  *a3 = fmax(*(double *)(v6 + 32) * 0.15, 5.0);
  long long v9 = *(_OWORD *)(v6 + 24);
  v27[0] = *(_OWORD *)(v6 + 8);
  v27[1] = v9;
  v27[2] = *(_OWORD *)(v6 + 40);
  uint64_t v28 = *(void *)(v6 + 56);
  gdc::CameraFrame<geo::Radians,double>::toRigidTransformMercator(v26, (double *)v27, *(unsigned char *)v6 == 0);
  if (*(unsigned char *)(v7 + 592)) {
    double v10 = *(double *)(v7 + 584);
  }
  else {
    double v10 = 0.0;
  }
  double v11 = v26[2];
  double v13 = *(double *)(v6 + 368);
  double v12 = *(double *)(v6 + 376);
  if (v12 >= v13)
  {
    double v19 = *(double *)(v6 + 456);
  }
  else
  {
    double v14 = v12 * v13;
    double v15 = v12 / v13;
    if (v14 <= 0.0) {
      double v16 = 1.0;
    }
    else {
      double v16 = v15;
    }
    long double v17 = tan(*(double *)(v6 + 456) * 0.5);
    long double v18 = atan(v16 * v17);
    double v19 = v18 + v18;
  }
  __double2 v20 = __sincos_stret(v8);
  double v21 = (fabs(v10) + v11 * 40075017.0) / fmax(v20.__cosval, 0.01745);
  double v22 = v19 * 0.5;
  double v23 = sin(1.57079633 - (v8 + v19 * 0.5));
  double v24 = tan(v19 * 0.5);
  *a4 = fmax((v21 * (v20.__sinval * v24 * sin(v22 + 1.57079633)) / fmax(v23, 0.01745) + v21) * 1.5, 600.0);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return 1;
}

uint64_t std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_6,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_6>,BOOL ()(std::shared_ptr<gdc::Camera>,geo::Unit<geo::MeterUnitDescription,double> &,geo::Unit<geo::MeterUnitDescription,double> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF51EDE8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_6,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_6>,BOOL ()(std::shared_ptr<gdc::Camera>,geo::Unit<geo::MeterUnitDescription,double> &,geo::Unit<geo::MeterUnitDescription,double> &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51EDE8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_6,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_6>,BOOL ()(std::shared_ptr<gdc::Camera>,geo::Unit<geo::MeterUnitDescription,double> &,geo::Unit<geo::MeterUnitDescription,double> &)>::~__func()
{
}

double std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_5,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_5>,void ()(std::optional<double> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  double result = *(double *)a2;
  *(float *)&double result = *(double *)a2;
  if (!*(unsigned char *)(a2 + 8)) {
    *(float *)&double result = 0.0;
  }
  if (*(unsigned __int8 *)(v2 + 592) == *(unsigned __int8 *)(a2 + 8))
  {
    if (*(unsigned char *)(v2 + 592))
    {
      double result = *(float *)&result;
      *(double *)(v2 + 584) = result;
    }
  }
  else if (*(unsigned char *)(v2 + 592))
  {
    *(unsigned char *)(v2 + 592) = 0;
  }
  else
  {
    double result = *(float *)&result;
    *(double *)(v2 + 584) = result;
    *(unsigned char *)(v2 + 592) = 1;
  }
  return result;
}

uint64_t std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_5,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_5>,void ()(std::optional<double> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF51EDA0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_5,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_5>,void ()(std::optional<double> const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51EDA0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_5,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_5>,void ()(std::optional<double> const&)>::~__func()
{
}

void std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_4,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_4>,std::optional<md::DynamicPitchZoomLimit> ()(std::shared_ptr<gdc::Camera>,float)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, float *a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  float v7 = *a3;
  *a4 = 0;
  a4[16] = 0;
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8) {
    goto LABEL_8;
  }
  long long v9 = *(const QuadTile **)(v8 + 352);
  if (!v9 || v7 <= 15.0) {
    goto LABEL_8;
  }
  double v11 = *(double *)(v5 + 16);
  long double v12 = tan(*(double *)(v5 + 8) * 0.5 + 0.785398163);
  long double v13 = log(v12);
  int v14 = 1 << (int)v7;
  v15[0] = -1;
  v15[1] = (int)v7;
  unsigned int v16 = v14 + ~vcvtmd_s64_f64((v13 * 0.159154943 + 0.5) * (double)v14);
  unsigned int v17 = vcvtmd_s64_f64((v11 * 0.159154943 + 0.5) * (double)v14);
  md::FlyoverMetaData::tileCacheLookup((md::FlyoverMetaData *)v18, v9, v15, 0, 1);
  if (!v18[48]) {
    goto LABEL_14;
  }
  if (v18[28] == 1)
  {
LABEL_8:
    if (!v6) {
      return;
    }
  }
  else
  {
LABEL_14:
    *(_OWORD *)a4 = xmmword_1A28FD630;
    a4[16] = 1;
    if (!v6) {
      return;
    }
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1A200E88C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_4,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_4>,std::optional<md::DynamicPitchZoomLimit> ()(std::shared_ptr<gdc::Camera>,float)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF51ED58;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_4,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_4>,std::optional<md::DynamicPitchZoomLimit> ()(std::shared_ptr<gdc::Camera>,float)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51ED58;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_4,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_4>,std::optional<md::DynamicPitchZoomLimit> ()(std::shared_ptr<gdc::Camera>,float)>::~__func()
{
}

float std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_3,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_3>,float ()(void)>::operator()()
{
  v0 = +[VKDebugSettings sharedSettings];
  [v0 flyoverGridNDCBias];
  float v2 = v1;

  return v2;
}

void sub_1A200E9B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_3,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_3>,float ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51ED10;
}

void *std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_3,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_3>,float ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF51ED10;
  return result;
}

void std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_3,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_3>,float ()(void)>::~__func()
{
}

uint64_t std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_2,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_2>,BOOL ()(void)>::operator()()
{
  v0 = +[VKDebugSettings sharedSettings];
  uint64_t v1 = [v0 flyoverDrapeGrid];

  return v1;
}

void sub_1A200EA78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_2,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_2>,BOOL ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51ECC8;
}

void *std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_2,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_2>,BOOL ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF51ECC8;
  return result;
}

void std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_2,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_2>,BOOL ()(void)>::~__func()
{
}

void std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_1,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_1>,gdc::CameraFrame<geo::Radians,double> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (LOBYTE(v7[0]) = 0, char v9 = 0, !*(unsigned char *)(v2 + 320)))
  {
    *(int64x2_t *)a2 = vdupq_n_s64(0xC00921FB54442D18);
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(void *)(a2 + 48) = 0;
    return;
  }
  uint64_t v4 = *(void *)(v2 + 312);
  if (v4)
  {
    if (v4 == v2 + 288)
    {
      uint64_t v8 = v7;
      (*(void (**)(uint64_t, void *))(*(void *)(v2 + 288) + 24))(v2 + 288, v7);
    }
    else
    {
      uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  char v9 = 1;
  if (v8 == v7)
  {
    (*(void (**)(void *))(v7[0] + 32))(v7);
  }
  else if (v8)
  {
    (*(void (**)(void))(*v8 + 40))();
  }
  uint64_t v5 = *(void *)(a1 + 8);
  LOBYTE(v7[0]) = 0;
  char v9 = 0;
  if (!*(unsigned char *)(v5 + 320))
  {
    std::__throw_bad_optional_access[abi:nn180100]();
LABEL_28:
    __break(1u);
    return;
  }
  uint64_t v6 = *(void *)(v5 + 312);
  if (v6)
  {
    if (v6 == v5 + 288)
    {
      uint64_t v8 = v7;
      (*(void (**)(uint64_t, void *))(*(void *)(v5 + 288) + 24))(v5 + 288, v7);
    }
    else
    {
      uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  char v9 = 1;
  if (!v8)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_28;
  }
  (*(void (**)(void *))(*v8 + 48))(v8);
  if (v9)
  {
    if (v8 == v7)
    {
      (*(void (**)(void *))(v7[0] + 32))(v7);
    }
    else if (v8)
    {
      (*(void (**)(void))(*v8 + 40))();
    }
  }
}

void sub_1A200EDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13)
{
  if (a13)
  {
    if (a12 == &a9)
    {
      (*(void (**)(uint64_t *))(a9 + 32))(&a9);
      _Unwind_Resume(exception_object);
    }
    if (a12)
    {
      (*(void (**)(void))(*a12 + 40))();
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_1,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_1>,gdc::CameraFrame<geo::Radians,double> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF51EC80;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_1,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_1>,gdc::CameraFrame<geo::Radians,double> ()(void)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51EC80;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_1,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_1>,gdc::CameraFrame<geo::Radians,double> ()(void)>::~__func()
{
}

void std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_0,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_0>,geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>::operator()(uint64_t a1@<X0>, QuadTile *a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = 0;
  md::FlyoverMetaData::tileCacheLookup((md::FlyoverMetaData *)v19, *(const QuadTile **)(*(void *)(a1 + 8) + 352), &a2->_type, 0, 0);
  if (v22)
  {
    md::World::getDsmTileData((md::World *)&v17, *(const QuadTile **)(*(void *)(a1 + 8) + 80), *(const QuadTile **)(*(void *)(a1 + 8) + 88), (int *)a2);
    uint64_t v6 = v17;
    if (v17)
    {
      md::FlyoverMetaData::tileCacheLookup((md::FlyoverMetaData *)v19, *(const QuadTile **)(*(void *)(a1 + 8) + 352), &a2->_type, 0, 0);
      if (v22)
      {
        *(void *)&v14._yIdx = v20[0];
        char v15 = v21;
        *(_WORD *)&v14._type = *(_WORD *)v19;
        char v16 = 1;
        md::FlyoverMetaData::elevationBoundsForTile((md::FlyoverMetaData *)v19, *(const QuadTile **)(*(void *)(a1 + 8) + 352), &v14);
      }
      else
      {
        v14._type = 0;
        char v16 = 0;
        md::FlyoverMetaData::elevationBoundsForTile((md::FlyoverMetaData *)v19, *(const QuadTile **)(*(void *)(a1 + 8) + 352), a2);
      }
      int v7 = v19[0];
      if (v19[0])
      {
        *(_OWORD *)(a3 + 8) = *(_OWORD *)((char *)v20 + 4);
        int v7 = 1;
        *(unsigned char *)a3 = 1;
      }
      if (!v7)
      {
        uint64_t v9 = 720;
        if (*(void *)(v6 + 720))
        {
          uint64_t v10 = (unint64_t *)(v6 + 720);
        }
        else
        {
          uint64_t v9 = 736;
          uint64_t v10 = (unint64_t *)(v6 + 736);
        }
        uint64_t v11 = *(void *)(v6 + v9);
        if (v11)
        {
          unint64_t v12 = *(unsigned char *)(v11 + 24) == 8
              ? md::FlyoverDsmTileData::_heightBounds<unsigned char>(v6, (uint64_t)a2, v10)
              : md::FlyoverDsmTileData::_heightBounds<unsigned short>(v6, (uint64_t)a2, v10);
          if (v13)
          {
            *(double *)(a3 + 8) = *(float *)&v12;
            *(double *)(a3 + 16) = *((float *)&v12 + 1);
            *(unsigned char *)a3 = 1;
          }
        }
      }
    }
    uint64_t v8 = v18;
    if (v18)
    {
      if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_1A200F0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15)
  {
    if (!atomic_fetch_add(&a15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
      std::__shared_weak_count::__release_weak(a15);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_0,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_0>,geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5770E8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_0,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_0>,geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF5770E8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_0,std::allocator<md::SandboxBaseMapEngineMode::didBecomeActive(md::MapEngine &,md::MapEngineSyncAccessor,md::MapEngineSettings *)::$_0>,geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>::~__func()
{
}

void md::SandboxBaseMapEngineMode::applyMapDataTypeSettings(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!*(void *)(a2 + 1128)) {
    goto LABEL_123;
  }
  if (*(unsigned char *)(a1 + 568)) {
    int v3 = 7;
  }
  else {
    int v3 = 2;
  }
  int8x8_t v4 = (int8x8_t)a3[1];
  if (!*(void *)&v4) {
    goto LABEL_100;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  unint64_t v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v7 = 11;
    if (*(void *)&v4 <= 0xBuLL) {
      uint64_t v7 = 0xBu % a3[1];
    }
  }
  else
  {
    uint64_t v7 = (v4.i32[0] - 1) & 0xBLL;
  }
  uint64_t v8 = *(uint64_t ***)(*a3 + 8 * v7);
  if (!v8) {
    goto LABEL_30;
  }
  uint64_t v9 = *v8;
  if (!v9) {
    goto LABEL_30;
  }
  if (v5.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v11 = v9[1];
      if (v11 == 11)
      {
        if (*((_WORD *)v9 + 8) == 11) {
          goto LABEL_26;
        }
      }
      else if ((v11 & (*(void *)&v4 - 1)) != v7)
      {
        goto LABEL_28;
      }
      uint64_t v9 = (uint64_t *)*v9;
      if (!v9) {
        goto LABEL_28;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v9[1];
    if (v10 == 11) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v7) {
      goto LABEL_28;
    }
LABEL_15:
    uint64_t v9 = (uint64_t *)*v9;
    if (!v9) {
      goto LABEL_28;
    }
  }
  if (*((_WORD *)v9 + 8) != 11) {
    goto LABEL_15;
  }
LABEL_26:
  if (*((unsigned char *)v9 + 18) == 2)
  {
    *(_DWORD *)((char *)v9 + 18) = (v3 << 16) | 2;
    int8x8_t v4 = (int8x8_t)a3[1];
  }
LABEL_28:
  if (!*(void *)&v4) {
    goto LABEL_100;
  }
  uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4);
  v12.i16[0] = vaddlv_u8(v12);
  unint64_t v6 = v12.u32[0];
LABEL_30:
  if (v6 > 1)
  {
    uint64_t v13 = 12;
    if (*(void *)&v4 <= 0xCuLL) {
      uint64_t v13 = 0xCu % v4.u8[0];
    }
  }
  else
  {
    uint64_t v13 = (v4.i8[0] - 1) & 0xC;
  }
  QuadTile v14 = *(uint64_t ***)(*a3 + 8 * v13);
  if (!v14) {
    goto LABEL_54;
  }
  char v15 = *v14;
  if (!v15) {
    goto LABEL_54;
  }
  if (v6 < 2)
  {
    while (1)
    {
      uint64_t v17 = v15[1];
      if (v17 == 12)
      {
        if (*((_WORD *)v15 + 8) == 12) {
          goto LABEL_50;
        }
      }
      else if ((v17 & (*(void *)&v4 - 1)) != v13)
      {
        goto LABEL_52;
      }
      char v15 = (uint64_t *)*v15;
      if (!v15) {
        goto LABEL_52;
      }
    }
  }
  while (2)
  {
    unint64_t v16 = v15[1];
    if (v16 != 12)
    {
      if (v16 >= *(void *)&v4) {
        v16 %= *(void *)&v4;
      }
      if (v16 != v13) {
        goto LABEL_52;
      }
      goto LABEL_39;
    }
    if (*((_WORD *)v15 + 8) != 12)
    {
LABEL_39:
      char v15 = (uint64_t *)*v15;
      if (!v15) {
        goto LABEL_52;
      }
      continue;
    }
    break;
  }
LABEL_50:
  if (*((unsigned char *)v15 + 18) == 2)
  {
    *(_DWORD *)((char *)v15 + 18) = (v3 << 16) | 2;
    int8x8_t v4 = (int8x8_t)a3[1];
  }
LABEL_52:
  if (!*(void *)&v4) {
    goto LABEL_100;
  }
  uint8x8_t v18 = (uint8x8_t)vcnt_s8(v4);
  v18.i16[0] = vaddlv_u8(v18);
  unint64_t v6 = v18.u32[0];
LABEL_54:
  if (v6 > 1)
  {
    uint64_t v19 = 71;
    if (*(void *)&v4 <= 0x47uLL) {
      uint64_t v19 = 0x47u % v4.u8[0];
    }
  }
  else
  {
    uint64_t v19 = (v4.i32[0] - 1) & 0x47;
  }
  __double2 v20 = *(uint64_t ***)(*a3 + 8 * v19);
  if (!v20) {
    goto LABEL_78;
  }
  char v21 = *v20;
  if (!v21) {
    goto LABEL_78;
  }
  if (v6 < 2)
  {
    while (1)
    {
      uint64_t v23 = v21[1];
      if (v23 == 71)
      {
        if (*((_WORD *)v21 + 8) == 71) {
          goto LABEL_74;
        }
      }
      else if ((v23 & (*(void *)&v4 - 1)) != v19)
      {
        goto LABEL_76;
      }
      char v21 = (uint64_t *)*v21;
      if (!v21) {
        goto LABEL_76;
      }
    }
  }
  while (2)
  {
    unint64_t v22 = v21[1];
    if (v22 != 71)
    {
      if (v22 >= *(void *)&v4) {
        v22 %= *(void *)&v4;
      }
      if (v22 != v19) {
        goto LABEL_76;
      }
      goto LABEL_63;
    }
    if (*((_WORD *)v21 + 8) != 71)
    {
LABEL_63:
      char v21 = (uint64_t *)*v21;
      if (!v21) {
        goto LABEL_76;
      }
      continue;
    }
    break;
  }
LABEL_74:
  if (*((unsigned char *)v21 + 18) == 2)
  {
    *(_DWORD *)((char *)v21 + 18) = (v3 << 16) | 2;
    int8x8_t v4 = (int8x8_t)a3[1];
  }
LABEL_76:
  if (v4)
  {
    uint8x8_t v24 = (uint8x8_t)vcnt_s8(v4);
    v24.i16[0] = vaddlv_u8(v24);
    unint64_t v6 = v24.u32[0];
LABEL_78:
    if (v6 > 1)
    {
      uint64_t v25 = 72;
      if (*(void *)&v4 <= 0x48uLL) {
        uint64_t v25 = 0x48u % v4.u8[0];
      }
    }
    else
    {
      uint64_t v25 = (v4.i32[0] - 1) & 0x48;
    }
    size_t v26 = *(uint64_t ***)(*a3 + 8 * v25);
    if (!v26) {
      goto LABEL_100;
    }
    size_t v27 = *v26;
    if (!v27) {
      goto LABEL_100;
    }
    if (v6 < 2)
    {
      uint64_t v28 = *(void *)&v4 - 1;
      while (1)
      {
        uint64_t v30 = v27[1];
        if (v30 == 72)
        {
          if (*((_WORD *)v27 + 8) == 72) {
            goto LABEL_98;
          }
        }
        else if ((v30 & v28) != v25)
        {
          goto LABEL_100;
        }
        size_t v27 = (uint64_t *)*v27;
        if (!v27) {
          goto LABEL_100;
        }
      }
    }
    do
    {
      unint64_t v29 = v27[1];
      if (v29 == 72)
      {
        if (*((_WORD *)v27 + 8) == 72)
        {
LABEL_98:
          if (*((unsigned char *)v27 + 18) == 2) {
            *(_DWORD *)((char *)v27 + 18) = (v3 << 16) | 2;
          }
          break;
        }
      }
      else
      {
        if (v29 >= *(void *)&v4) {
          v29 %= *(void *)&v4;
        }
        if (v29 != v25) {
          break;
        }
      }
      size_t v27 = (uint64_t *)*v27;
    }
    while (v27);
  }
LABEL_100:
  if (*(unsigned char *)(a1 + 568))
  {
    int8x8_t v31 = (int8x8_t)a3[1];
    if (v31)
    {
      uint8x8_t v32 = (uint8x8_t)vcnt_s8(v31);
      v32.i16[0] = vaddlv_u8(v32);
      if (v32.u32[0] > 1uLL)
      {
        uint64_t v33 = 81;
        if (*(void *)&v31 <= 0x51uLL) {
          uint64_t v33 = 0x51u % a3[1];
        }
      }
      else
      {
        uint64_t v33 = (v31.i32[0] - 1) & 0x51;
      }
      uint64_t v34 = *(uint64_t ***)(*a3 + 8 * v33);
      if (v34)
      {
        uint64_t v35 = *v34;
        if (v35)
        {
          if (v32.u32[0] < 2uLL)
          {
            uint64_t v36 = *(void *)&v31 - 1;
            while (1)
            {
              uint64_t v38 = v35[1];
              if (v38 == 81)
              {
                if (*((_WORD *)v35 + 8) == 81) {
                  goto LABEL_122;
                }
              }
              else if ((v38 & v36) != v33)
              {
                goto LABEL_123;
              }
              uint64_t v35 = (uint64_t *)*v35;
              if (!v35) {
                goto LABEL_123;
              }
            }
          }
          do
          {
            unint64_t v37 = v35[1];
            if (v37 == 81)
            {
              if (*((_WORD *)v35 + 8) == 81)
              {
LABEL_122:
                *(_DWORD *)((char *)v35 + 18) = (*((unsigned __int16 *)v35 + 10) << 16) | 1;
                break;
              }
            }
            else
            {
              if (v37 >= *(void *)&v31) {
                v37 %= *(void *)&v31;
              }
              if (v37 != v33) {
                break;
              }
            }
            uint64_t v35 = (uint64_t *)*v35;
          }
          while (v35);
        }
      }
    }
  }
LABEL_123:
  md::MapEngineMode::applyMapDataTypeSettings(a1, a2, a3);
}

void md::SandboxBaseMapEngineMode::applyRenderLayerSettings(uint64_t a1, uint64_t a2, void *a3)
{
  int v3 = *(uint64_t **)(a2 + 1128);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = v4;
  if (v4 != v5)
  {
    uint64_t v6 = v4;
    while (*(unsigned char *)v6 != 5)
    {
      v6 += 16;
      if (v6 == v5) {
        goto LABEL_31;
      }
    }
  }
  if (v6 != v5)
  {
    if (*(void *)(v6 + 8))
    {
      int8x8_t v7 = (int8x8_t)a3[1];
      if (v7)
      {
        uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
        v8.i16[0] = vaddlv_u8(v8);
        if (v8.u32[0] > 1uLL)
        {
          uint64_t v9 = 41;
          if (*(void *)&v7 <= 0x29uLL) {
            uint64_t v9 = 0x29u % a3[1];
          }
        }
        else
        {
          uint64_t v9 = (v7.i32[0] - 1) & 0x29;
        }
        unint64_t v10 = *(uint64_t ***)(*a3 + 8 * v9);
        if (v10)
        {
          uint64_t v11 = *v10;
          if (v11)
          {
            if (v8.u32[0] < 2uLL)
            {
              uint64_t v12 = *(void *)&v7 - 1;
              while (1)
              {
                uint64_t v14 = v11[1];
                if (v14 == 41)
                {
                  if (*((unsigned char *)v11 + 16) == 41) {
                    goto LABEL_29;
                  }
                }
                else if ((v14 & v12) != v9)
                {
                  goto LABEL_31;
                }
                uint64_t v11 = (uint64_t *)*v11;
                if (!v11) {
                  goto LABEL_31;
                }
              }
            }
            do
            {
              unint64_t v13 = v11[1];
              if (v13 == 41)
              {
                if (*((unsigned char *)v11 + 16) == 41)
                {
LABEL_29:
                  if (*((unsigned char *)v11 + 17) == 2) {
                    *((unsigned char *)v11 + 17) = 1;
                  }
                  break;
                }
              }
              else
              {
                if (v13 >= *(void *)&v7) {
                  v13 %= *(void *)&v7;
                }
                if (v13 != v9) {
                  break;
                }
              }
              uint64_t v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
    }
  }
LABEL_31:
  if (v4 != v5)
  {
    while (*(unsigned char *)v4 != 5)
    {
      v4 += 16;
      if (v4 == v5) {
        return;
      }
    }
  }
  if (v4 != v5)
  {
    if (*(void *)(v4 + 8))
    {
      int8x8_t v15 = (int8x8_t)a3[1];
      if (v15)
      {
        uint8x8_t v16 = (uint8x8_t)vcnt_s8(v15);
        v16.i16[0] = vaddlv_u8(v16);
        if (v16.u32[0] > 1uLL)
        {
          uint64_t v17 = 42;
          if (*(void *)&v15 <= 0x2AuLL) {
            uint64_t v17 = 0x2Au % a3[1];
          }
        }
        else
        {
          uint64_t v17 = (v15.i32[0] - 1) & 0x2ALL;
        }
        uint8x8_t v18 = *(uint64_t ***)(*a3 + 8 * v17);
        if (v18)
        {
          uint64_t v19 = *v18;
          if (v19)
          {
            if (v16.u32[0] < 2uLL)
            {
              uint64_t v20 = *(void *)&v15 - 1;
              while (1)
              {
                uint64_t v22 = v19[1];
                if (v22 == 42)
                {
                  if (*((unsigned char *)v19 + 16) == 42) {
                    goto LABEL_58;
                  }
                }
                else if ((v22 & v20) != v17)
                {
                  return;
                }
                uint64_t v19 = (uint64_t *)*v19;
                if (!v19) {
                  return;
                }
              }
            }
            do
            {
              unint64_t v21 = v19[1];
              if (v21 == 42)
              {
                if (*((unsigned char *)v19 + 16) == 42)
                {
LABEL_58:
                  if (*((unsigned char *)v19 + 17) == 2) {
                    *((unsigned char *)v19 + 17) = 1;
                  }
                  return;
                }
              }
              else
              {
                if (v21 >= *(void *)&v15) {
                  v21 %= *(void *)&v15;
                }
                if (v21 != v17) {
                  return;
                }
              }
              uint64_t v19 = (uint64_t *)*v19;
            }
            while (v19);
          }
        }
      }
    }
  }
}

void md::SandboxBaseMapEngineMode::~SandboxBaseMapEngineMode(md::SandboxBaseMapEngineMode *this)
{
  *(void *)this = &unk_1EF5463F0;
  if (*((unsigned char *)this + 548)) {
    *((unsigned char *)this + 548) = 0;
  }
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A6239270);
}

{
  *(void *)this = &unk_1EF5463F0;
  if (*((unsigned char *)this + 548)) {
    *((unsigned char *)this + 548) = 0;
  }
  md::MapEngineMode::~MapEngineMode(this);
}

uint64_t md::SandboxBaseMapEngineMode::SandboxBaseMapEngineMode(uint64_t a1, char a2, int a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = md::CartographicMapEngineMode::CartographicMapEngineMode(a1, a2);
  *(void *)uint64_t v5 = &unk_1EF545880;
  *(unsigned char *)(v5 + 568) = a3;
  *(unsigned char *)(v5 + 584) = 0;
  *(unsigned char *)(v5 + 592) = 0;
  *(unsigned char *)(a1 + 600) = MapsFeature_IsEnabled_VKMLayout_Flyover();
  int v6 = *(unsigned __int8 *)(a1 + 548);
  *(_OWORD *)(a1 + 552) = xmmword_1A28FCDD0;
  if (!v6) {
    *(unsigned char *)(a1 + 548) = 1;
  }
  *(void *)(a1 + 536) = 100;
  *(unsigned char *)(a1 + 49) = 0;
  *(_DWORD *)(a1 + 52) = 20;
  LOWORD(v44) = 2560;
  *((void *)&v44 + 1) = 0;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 432), (unsigned __int8 *)&v44);
  LOWORD(v44) = 5386;
  *((void *)&v44 + 1) = 0x3FE0C152382D7365;
  geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 432), (unsigned __int8 *)&v44);
  if (*(unsigned char *)(a1 + 568))
  {
    LOWORD(v44) = 2560;
    *((void *)&v44 + 1) = 0;
    geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 384), (unsigned __int8 *)&v44);
    LOWORD(v44) = 5386;
    *((void *)&v44 + 1) = 0x3FD657184AE74487;
    geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 384), (unsigned __int8 *)&v44);
    LOWORD(v44) = 768;
    *((void *)&v44 + 1) = 0;
    geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v44);
    LOWORD(v44) = 3843;
    *((void *)&v44 + 1) = 0x3FE38C35418A5BF6;
    geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v44);
    LOWORD(v44) = 4111;
    *((void *)&v44 + 1) = 0x3FF0C152382D7365;
    geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v44);
    LOWORD(v44) = 6416;
    *((void *)&v44 + 1) = 0x3FF38C35418A5BF6;
    geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v44);
    uint8x8_t v8 = (void *)(a1 + 128);
    uint64_t v7 = *(void *)(a1 + 128);
    if (v7)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = (void *)v7;
          unsigned int v10 = *(unsigned __int16 *)(v7 + 26);
          if (v10 < 9) {
            break;
          }
          uint64_t v7 = *v9;
          uint8x8_t v8 = v9;
          if (!*v9) {
            goto LABEL_11;
          }
        }
        if (v10 == 8) {
          break;
        }
        uint64_t v7 = v9[1];
        if (!v7)
        {
          uint8x8_t v8 = v9 + 1;
          goto LABEL_11;
        }
      }
    }
    else
    {
      uint64_t v9 = (void *)(a1 + 128);
LABEL_11:
      uint64_t v11 = operator new(0x20uLL);
      v11[13] = 8;
      *(void *)uint64_t v11 = 0;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = v9;
      *uint8x8_t v8 = v11;
      uint64_t v12 = **(void **)(a1 + 120);
      if (v12)
      {
        *(void *)(a1 + 120) = v12;
        uint64_t v11 = (_WORD *)*v8;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 128), (uint64_t *)v11);
      ++*(void *)(a1 + 136);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 52) = 20;
    LOWORD(v44) = 5120;
    *((void *)&v44 + 1) = 0;
    geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 384), (unsigned __int8 *)&v44);
    LOWORD(v44) = 5120;
    *((void *)&v44 + 1) = 0;
    geo::range_map<unsigned char,geo::Unit<geo::RadianUnitDescription,double>,std::less<unsigned char>,std::allocator<std::pair<gm::Range<unsigned char> const,geo::Unit<geo::RadianUnitDescription,double>>>>::insert((uint64_t *)(a1 + 408), (unsigned __int8 *)&v44);
  }
  LOBYTE(v44) = 0;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0, &v44)+ 17) = 0;
  LOBYTE(v44) = 2;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 2u, &v44)+ 17) = 0;
  LOBYTE(v44) = 31;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x1Fu, &v44)+ 17) = 0;
  uint64_t v33 = a1 + 144;
  if (*(unsigned char *)(a1 + 568))
  {
    LOBYTE(v44) = 1;
    *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 1u, &v44)+ 17) = 0;
    LOBYTE(v44) = 10;
    *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0xAu, &v44)+ 17) = 0;
    LOBYTE(v44) = 53;
    *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x35u, &v44)+ 17) = 0;
    char v13 = 6;
    char v14 = 2;
  }
  else
  {
    LOBYTE(v44) = 3;
    *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 3u, &v44)+ 17) = 0;
    LOBYTE(v44) = 21;
    *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 0x15u, &v44)+ 17) = 0;
    LOBYTE(v44) = 9;
    int8x8_t v15 = std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 144, 9u, &v44);
    char v14 = 0;
    char v13 = 0;
    *((unsigned char *)v15 + 17) = 0;
  }
  *(unsigned char *)(a1 + 224) = v14;
  *(unsigned char *)(a1 + 225) = v13;
  *(void *)&long long v38 = 0xEA624BC935BAF297;
  *((void *)&v38 + 1) = "md::mun::MuninLogic]";
  uint64_t v39 = 19;
  *(void *)&long long v34 = 0x8EA84A1BD3791AFALL;
  *((void *)&v34 + 1) = "md::mun::MuninContext]";
  *(void *)&long long v35 = 21;
  BYTE8(v35) = 1;
  *(void *)&long long v44 = &v45;
  *((void *)&v44 + 1) = 3;
  long long v47 = xmmword_1E5A97EB0;
  long long v48 = unk_1E5A97EC0;
  *(void *)&long long v49 = 20;
  long long v45 = xmmword_1E5A97E90;
  long long v46 = unk_1E5A97EA0;
  unint64_t v41 = (unint64_t)&v43;
  uint64_t v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 1, (uint64_t)&v44, (uint64_t)&v41);
  unint64_t v41 = 0x79FE0BD9535D5C4DLL;
  uint64_t v42 = "md::AnchorLogic]";
  uint64_t v43 = 15;
  *(void *)&long long v44 = &v45;
  *(void *)&long long v38 = 0x63B6FE00C0848868;
  *((void *)&v38 + 1) = "md::AnchorContext]";
  uint64_t v39 = 17;
  char v40 = 1;
  *((void *)&v44 + 1) = 2;
  long long v45 = xmmword_1E5A97998;
  long long v46 = unk_1E5A979A8;
  long long v47 = xmmword_1E5A979B8;
  *(void *)&long long v34 = &v35;
  *((void *)&v34 + 1) = 1;
  long long v35 = xmmword_1E5A98030;
  *(void *)&long long v36 = 21;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v41, &v38, 0, (uint64_t)&v44, (uint64_t)&v34);
  *(void *)&long long v38 = 0x85B8F2BE93EDF996;
  *((void *)&v38 + 1) = "md::AssetLogic]";
  uint64_t v39 = 14;
  *(void *)&long long v34 = 0x88B81689974D86F3;
  *((void *)&v34 + 1) = "md::AssetContext]";
  *(void *)&long long v35 = 16;
  BYTE8(v35) = 1;
  *(void *)&long long v44 = &v45;
  *((void *)&v44 + 1) = 1;
  long long v45 = xmmword_1E5A97E18;
  *(void *)&long long v46 = 29;
  unint64_t v41 = (unint64_t)&v43;
  uint64_t v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(void *)&long long v38 = 0x582FBDD84553E215;
  *((void *)&v38 + 1) = "md::AssetInjectionLogic]";
  uint64_t v39 = 23;
  *(void *)&long long v34 = 0xD77FB76AFC10A710;
  *((void *)&v34 + 1) = "md::AssetInjectionContext]";
  *(void *)&long long v35 = 25;
  BYTE8(v35) = 1;
  *(void *)&long long v44 = &v45;
  *((void *)&v44 + 1) = 1;
  long long v45 = xmmword_1E5A97E00;
  *(void *)&long long v46 = 16;
  unint64_t v41 = (unint64_t)&v43;
  uint64_t v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(void *)&long long v38 = 0x8E629317B3523E63;
  *((void *)&v38 + 1) = "md::CameraLogic]";
  uint64_t v39 = 15;
  *(void *)&long long v34 = 0x1AF456233693CD46;
  *((void *)&v34 + 1) = "md::CameraContext]";
  *(void *)&long long v35 = 17;
  BYTE8(v35) = 1;
  *(void *)&long long v44 = &v45;
  *((void *)&v44 + 1) = 1;
  long long v45 = xmmword_1E5A979C8;
  *(void *)&long long v46 = 20;
  unint64_t v41 = (unint64_t)&v43;
  uint64_t v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  unint64_t v41 = 0x17767EADC5B287BLL;
  uint64_t v42 = "md::ElevationLogic]";
  uint64_t v43 = 18;
  *(void *)&long long v44 = &v45;
  *(void *)&long long v38 = 0x8BD499FBD96FBB9ELL;
  *((void *)&v38 + 1) = "md::ElevationContext]";
  uint64_t v39 = 20;
  char v40 = 1;
  *((void *)&v44 + 1) = 2;
  long long v45 = xmmword_1E5A97A70;
  long long v46 = unk_1E5A97A80;
  long long v47 = xmmword_1E5A97A90;
  *(void *)&long long v34 = &v35;
  *((void *)&v34 + 1) = 1;
  long long v35 = xmmword_1E5A97AA0;
  *(void *)&long long v36 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v41, &v38, 0, (uint64_t)&v44, (uint64_t)&v34);
  *(void *)&long long v34 = 0x701C95861FC50076;
  *((void *)&v34 + 1) = "md::GeometryLogic]";
  *(void *)&long long v35 = 17;
  *(void *)&long long v44 = 0x3070CB6B3C7F21D3;
  *((void *)&v44 + 1) = "md::GeometryContext]";
  *(void *)&long long v45 = 19;
  BYTE8(v45) = 1;
  *(void *)&long long v38 = &v39;
  *((void *)&v38 + 1) = 0;
  unint64_t v41 = (unint64_t)&v43;
  uint64_t v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v34, &v44, 0, (uint64_t)&v38, (uint64_t)&v41);
  unint64_t v41 = 0x4AC7AB7561675F6;
  uint64_t v42 = "md::GridLogic]";
  uint64_t v43 = 13;
  *(void *)&long long v38 = 0x336A901A15BB7353;
  *((void *)&v38 + 1) = "md::GridContext]";
  uint64_t v39 = 15;
  char v40 = 1;
  *(void *)&long long v44 = &v45;
  *((void *)&v44 + 1) = 1;
  long long v45 = xmmword_1E5A97DD0;
  *(void *)&long long v46 = 21;
  *(void *)&long long v34 = &v35;
  *((void *)&v34 + 1) = 1;
  long long v35 = xmmword_1E5A97CE0;
  *(void *)&long long v36 = 24;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v41, &v38, 0, (uint64_t)&v44, (uint64_t)&v34);
  unint64_t v41 = 0x8B855FB229857EA1;
  uint64_t v42 = "md::IdentifiedResourceLogic]";
  uint64_t v43 = 27;
  *(void *)&long long v44 = &v45;
  *(void *)&long long v38 = 0x12B1E486D3040E2CLL;
  *((void *)&v38 + 1) = "md::IdentifiedResourceContext]";
  uint64_t v39 = 29;
  char v40 = 1;
  *((void *)&v44 + 1) = 4;
  long long v47 = xmmword_1E5A97C40;
  long long v48 = unk_1E5A97C50;
  long long v49 = xmmword_1E5A97C60;
  long long v50 = *(_OWORD *)&off_1E5A97C70;
  long long v45 = xmmword_1E5A97C20;
  long long v46 = unk_1E5A97C30;
  *(void *)&long long v34 = &v35;
  *((void *)&v34 + 1) = 1;
  long long v35 = xmmword_1E5A97C80;
  *(void *)&long long v36 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v41, &v38, 0, (uint64_t)&v44, (uint64_t)&v34);
  unint64_t v41 = 0x20A1ED17D78F322BLL;
  uint64_t v42 = "md::LabelsLogic]";
  uint64_t v43 = 15;
  *(void *)&long long v44 = &v45;
  *(void *)&long long v38 = 0xA588623CD4116DAELL;
  *((void *)&v38 + 1) = "md::LabelsContext]";
  uint64_t v39 = 17;
  char v40 = 1;
  *((void *)&v44 + 1) = 1;
  long long v45 = xmmword_1E5A97DD0;
  *(void *)&long long v46 = 21;
  *(void *)&long long v34 = &v35;
  *((void *)&v34 + 1) = 1;
  long long v35 = xmmword_1E5A97DE8;
  *(void *)&long long v36 = 25;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v41, &v38, 0, (uint64_t)&v44, (uint64_t)&v34);
  *(void *)&long long v38 = 0x91E65CD7F1A7A7FALL;
  *((void *)&v38 + 1) = "md::LightingLogic]";
  uint64_t v39 = 17;
  *(void *)&long long v34 = 0x41E8D6E445F4145;
  *((void *)&v34 + 1) = "md::LightingLogicContext]";
  *(void *)&long long v35 = 24;
  BYTE8(v35) = 1;
  *(void *)&long long v44 = &v45;
  *((void *)&v44 + 1) = 4;
  long long v47 = xmmword_1E5A96DA0;
  long long v48 = unk_1E5A96DB0;
  long long v49 = xmmword_1E5A96DC0;
  long long v50 = *(_OWORD *)&off_1E5A96DD0;
  long long v45 = xmmword_1E5A96D80;
  long long v46 = unk_1E5A96D90;
  unint64_t v41 = (unint64_t)&v43;
  uint64_t v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  unint64_t v41 = 0x653D1F33EF15EF04;
  uint64_t v42 = "md::LoadingStatusLogic]";
  uint64_t v43 = 22;
  *(void *)&long long v44 = &v45;
  *(void *)&long long v38 = 0x90B6813830DCB581;
  *((void *)&v38 + 1) = "md::LoadingStatusContext]";
  uint64_t v39 = 24;
  char v40 = 1;
  *((void *)&v44 + 1) = 1;
  long long v45 = xmmword_1E5A97E00;
  *(void *)&long long v46 = 16;
  *(void *)&long long v34 = &v35;
  *((void *)&v34 + 1) = 1;
  long long v35 = xmmword_1E5A97E18;
  *(void *)&long long v36 = 29;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v41, &v38, 0, (uint64_t)&v44, (uint64_t)&v34);
  *(void *)&long long v38 = 0xBDB8C71631E0AA6CLL;
  *((void *)&v38 + 1) = "md::MapZoomLevelStyleLogic]";
  uint64_t v39 = 26;
  *(void *)&long long v34 = 0xF0AA2DB42EB710AFLL;
  *((void *)&v34 + 1) = "md::MapZoomLevelStyleLogicContext]";
  *(void *)&long long v35 = 33;
  BYTE8(v35) = 1;
  *(void *)&long long v44 = &v45;
  *((void *)&v44 + 1) = 2;
  long long v45 = xmmword_1E5A97A40;
  long long v46 = unk_1E5A97A50;
  long long v47 = xmmword_1E5A97A60;
  unint64_t v41 = (unint64_t)&v43;
  uint64_t v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(void *)&long long v38 = 0xA1851987210F8D55;
  *((void *)&v38 + 1) = "md::MaterialLogic]";
  uint64_t v39 = 17;
  *(void *)&long long v34 = 0xD2404CDD1F9A6950;
  *((void *)&v34 + 1) = "md::MaterialContext]";
  *(void *)&long long v35 = 19;
  BYTE8(v35) = 1;
  *(void *)&long long v44 = &v45;
  *((void *)&v44 + 1) = 5;
  long long v49 = xmmword_1E5A96E20;
  long long v50 = *(_OWORD *)&off_1E5A96E30;
  long long v51 = xmmword_1E5A96E40;
  *(void *)&long long v52 = 21;
  long long v45 = xmmword_1E5A96DE0;
  long long v46 = unk_1E5A96DF0;
  long long v47 = xmmword_1E5A96E00;
  long long v48 = unk_1E5A96E10;
  unint64_t v41 = (unint64_t)&v43;
  uint64_t v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(void *)&long long v38 = 0x88BE5DF80D25DA79;
  *((void *)&v38 + 1) = "md::MeshRenderableLogic]";
  uint64_t v39 = 23;
  *(void *)&long long v34 = 0xF014CCE28176CA44;
  *((void *)&v34 + 1) = "md::MeshRenderableContext]";
  *(void *)&long long v35 = 25;
  BYTE8(v35) = 1;
  *(void *)&long long v44 = &v45;
  *((void *)&v44 + 1) = 9;
  long long v55 = xmmword_1E5A96F88;
  long long v56 = *(_OWORD *)&off_1E5A96F98;
  long long v57 = xmmword_1E5A96FA8;
  uint64_t v58 = 15;
  long long v51 = xmmword_1E5A96F48;
  long long v52 = unk_1E5A96F58;
  long long v53 = xmmword_1E5A96F68;
  long long v54 = unk_1E5A96F78;
  long long v47 = xmmword_1E5A96F08;
  long long v48 = unk_1E5A96F18;
  long long v49 = xmmword_1E5A96F28;
  long long v50 = *(_OWORD *)&off_1E5A96F38;
  long long v45 = xmmword_1E5A96EE8;
  long long v46 = unk_1E5A96EF8;
  unint64_t v41 = (unint64_t)&v43;
  uint64_t v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  unint64_t v41 = 0xBEC1A12372CEEC00;
  uint64_t v42 = "md::NavigationLogic]";
  uint64_t v43 = 19;
  *(void *)&long long v44 = &v45;
  *(void *)&long long v38 = 0x1B8B241A8D896A1DLL;
  *((void *)&v38 + 1) = "md::NavigationContext]";
  uint64_t v39 = 21;
  char v40 = 1;
  *((void *)&v44 + 1) = 3;
  long long v47 = xmmword_1E5A97A00;
  long long v48 = unk_1E5A97A10;
  *(void *)&long long v49 = 17;
  long long v45 = xmmword_1E5A979E0;
  long long v46 = unk_1E5A979F0;
  *(void *)&long long v34 = &v35;
  *((void *)&v34 + 1) = 1;
  long long v35 = xmmword_1E5A97A28;
  *(void *)&long long v36 = 23;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v41, &v38, 0, (uint64_t)&v44, (uint64_t)&v34);
  unint64_t v41 = 0x7173CF8D2BE8FE53;
  uint64_t v42 = "md::RouteLineLogic]";
  uint64_t v43 = 18;
  *(void *)&long long v44 = &v45;
  *(void *)&long long v38 = 0x8E4587A431F9C696;
  *((void *)&v38 + 1) = "md::RouteLineContext]";
  uint64_t v39 = 20;
  char v40 = 1;
  *((void *)&v44 + 1) = 4;
  long long v47 = xmmword_1E5A97AD8;
  long long v48 = unk_1E5A97AE8;
  long long v49 = xmmword_1E5A97AF8;
  long long v50 = *(_OWORD *)&off_1E5A97B08;
  long long v45 = xmmword_1E5A97AB8;
  long long v46 = unk_1E5A97AC8;
  *(void *)&long long v34 = &v35;
  *((void *)&v34 + 1) = 2;
  long long v35 = xmmword_1E5A97B18;
  long long v36 = unk_1E5A97B28;
  long long v37 = xmmword_1E5A97B38;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v41, &v38, 0, (uint64_t)&v44, (uint64_t)&v34);
  *(void *)&long long v38 = 0x1FCDF994595CDE24;
  *((void *)&v38 + 1) = "md::PuckLocationAnimationTracingLogic]";
  uint64_t v39 = 37;
  *(void *)&long long v34 = 0xA81ACD73F9C92AA1;
  *((void *)&v34 + 1) = "md::PuckLocationAnimationTracingContext]";
  *(void *)&long long v35 = 39;
  BYTE8(v35) = 1;
  *(void *)&long long v44 = &v45;
  *((void *)&v44 + 1) = 1;
  long long v45 = xmmword_1E5A98030;
  *(void *)&long long v46 = 21;
  unint64_t v41 = (unint64_t)&v43;
  uint64_t v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(void *)&long long v38 = 0x87668FB4D087F775;
  *((void *)&v38 + 1) = "md::OverlaysLogic]";
  uint64_t v39 = 17;
  *(void *)&long long v34 = 0xADE8F13E6C18D970;
  *((void *)&v34 + 1) = "md::OverlaysContext]";
  *(void *)&long long v35 = 19;
  BYTE8(v35) = 1;
  *(void *)&long long v44 = &v45;
  *((void *)&v44 + 1) = 4;
  long long v47 = xmmword_1E5A97E50;
  long long v48 = unk_1E5A97E60;
  long long v49 = xmmword_1E5A97E70;
  long long v50 = *(_OWORD *)&off_1E5A97E80;
  long long v45 = xmmword_1E5A97E30;
  long long v46 = unk_1E5A97E40;
  unint64_t v41 = (unint64_t)&v43;
  uint64_t v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(void *)&long long v38 = 0x3B36D43422893971;
  *((void *)&v38 + 1) = "md::DrapingLogic]";
  uint64_t v39 = 16;
  *(void *)&long long v34 = 0x1B9039CBDAB12E5CLL;
  *((void *)&v34 + 1) = "md::DrapingContext]";
  *(void *)&long long v35 = 18;
  BYTE8(v35) = 1;
  *(void *)&long long v44 = &v45;
  *((void *)&v44 + 1) = 4;
  long long v47 = xmmword_1E5A96E78;
  long long v48 = unk_1E5A96E88;
  long long v49 = xmmword_1E5A96E98;
  long long v50 = *(_OWORD *)&off_1E5A96EA8;
  long long v45 = xmmword_1E5A96E58;
  long long v46 = unk_1E5A96E68;
  unint64_t v41 = (unint64_t)&v43;
  uint64_t v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(void *)&long long v38 = 0xDEBD99099DA2C65BLL;
  *((void *)&v38 + 1) = "md::RegistryLogic]";
  uint64_t v39 = 17;
  *(void *)&long long v34 = 0xFBD83FDA8879FF7ELL;
  *((void *)&v34 + 1) = "md::RegistryContext]";
  *(void *)&long long v35 = 19;
  BYTE8(v35) = 1;
  *(void *)&long long v44 = &v45;
  *((void *)&v44 + 1) = 1;
  long long v45 = xmmword_1E5A97E00;
  *(void *)&long long v46 = 16;
  unint64_t v41 = (unint64_t)&v43;
  uint64_t v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(void *)&long long v38 = 0x8B45D3D7944796A2;
  *((void *)&v38 + 1) = "md::PendingRegistryLogic]";
  uint64_t v39 = 24;
  *(void *)&long long v34 = 0xA8300AA8F44B09FFLL;
  *((void *)&v34 + 1) = "md::PendingRegistryContext]";
  *(void *)&long long v35 = 26;
  BYTE8(v35) = 1;
  *(void *)&long long v44 = &v45;
  *((void *)&v44 + 1) = 1;
  long long v45 = xmmword_1E5A97DB8;
  *(void *)&long long v46 = 23;
  unint64_t v41 = (unint64_t)&v43;
  uint64_t v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(void *)&long long v34 = 0x5CBBA028798243FLL;
  *((void *)&v34 + 1) = "md::RouteOverlayLogic]";
  *(void *)&long long v35 = 21;
  *(void *)&long long v44 = 0x13043386C0978CC2;
  *((void *)&v44 + 1) = "md::RouteOverlayContext]";
  *(void *)&long long v45 = 23;
  BYTE8(v45) = 1;
  *(void *)&long long v38 = &v39;
  *((void *)&v38 + 1) = 0;
  unint64_t v41 = (unint64_t)&v43;
  uint64_t v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v34, &v44, 0, (uint64_t)&v38, (uint64_t)&v41);
  *(void *)&long long v34 = 0x90C2E4CBBB63E301;
  *((void *)&v34 + 1) = "md::LayerDataLogic]";
  *(void *)&long long v35 = 18;
  *(void *)&long long v44 = 0x7851AF310F49C988;
  *((void *)&v44 + 1) = "md::LayerDataLogicContext]";
  *(void *)&long long v45 = 25;
  BYTE8(v45) = 1;
  *(void *)&long long v38 = &v39;
  *((void *)&v38 + 1) = 0;
  unint64_t v41 = (unint64_t)&v43;
  uint64_t v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v34, &v44, 0, (uint64_t)&v38, (uint64_t)&v41);
  unint64_t v41 = 0xC267A080D338C6A1;
  uint64_t v42 = "md::TerrainMeshProviderLogic]";
  uint64_t v43 = 28;
  *(void *)&long long v38 = 0x44B2D9808992962CLL;
  *((void *)&v38 + 1) = "md::TerrainMeshProviderContext]";
  uint64_t v39 = 30;
  char v40 = 1;
  *(void *)&long long v44 = &v45;
  *((void *)&v44 + 1) = 2;
  long long v45 = xmmword_1E5A8EE20;
  long long v46 = unk_1E5A8EE30;
  long long v47 = xmmword_1E5A8EE40;
  *(void *)&long long v34 = &v35;
  *((void *)&v34 + 1) = 2;
  long long v35 = xmmword_1E5A8EE50;
  long long v36 = unk_1E5A8EE60;
  long long v37 = xmmword_1E5A8EE70;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v41, &v38, 0, (uint64_t)&v44, (uint64_t)&v34);
  *(void *)&long long v38 = 0xAF46DE79C836B0D8;
  *((void *)&v38 + 1) = "md::TileSelectionLogic]";
  uint64_t v39 = 22;
  *(void *)&long long v34 = 0x64780CBD71DF7CF5;
  *((void *)&v34 + 1) = "md::TileSelectionContext]";
  *(void *)&long long v35 = 24;
  BYTE8(v35) = 1;
  *(void *)&long long v44 = &v45;
  *((void *)&v44 + 1) = 3;
  long long v47 = xmmword_1E5A97CB8;
  long long v48 = unk_1E5A97CC8;
  *(void *)&long long v49 = 21;
  long long v45 = xmmword_1E5A97C98;
  long long v46 = unk_1E5A97CA8;
  unint64_t v41 = (unint64_t)&v43;
  uint64_t v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(void *)&long long v38 = 0x4BD0C73E70A08DDBLL;
  *((void *)&v38 + 1) = "md::FlyoverTileDataLogic]";
  uint64_t v39 = 24;
  *(void *)&long long v34 = 0x479E84E48468DB70;
  *((void *)&v34 + 1) = "md::FlyoverTileDataResolverContext]";
  *(void *)&long long v35 = 34;
  BYTE8(v35) = 1;
  *(void *)&long long v44 = &v45;
  *((void *)&v44 + 1) = 3;
  long long v47 = xmmword_1E5A8EEA0;
  long long v48 = unk_1E5A8EEB0;
  *(void *)&long long v49 = 17;
  long long v45 = xmmword_1E5A8EE80;
  long long v46 = unk_1E5A8EE90;
  unint64_t v41 = (unint64_t)&v43;
  uint64_t v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(void *)&long long v38 = 0xE3FE7D96C51342ALL;
  *((void *)&v38 + 1) = "md::FlyoverCompleteTileDataLogic]";
  uint64_t v39 = 32;
  *(void *)&long long v34 = 0xD3D7935EF848FCE7;
  *((void *)&v34 + 1) = "md::FlyoverCompleteTileDataContext]";
  *(void *)&long long v35 = 34;
  BYTE8(v35) = 1;
  *(void *)&long long v44 = &v45;
  *((void *)&v44 + 1) = 3;
  long long v47 = xmmword_1E5A8EEE8;
  long long v48 = unk_1E5A8EEF8;
  *(void *)&long long v49 = 23;
  long long v45 = xmmword_1E5A8EEC8;
  long long v46 = unk_1E5A8EED8;
  unint64_t v41 = (unint64_t)&v43;
  uint64_t v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  uint64_t v16 = 0xCBF29CE484222325;
  uint64_t v17 = 0x26u;
  do
    uint64_t v16 = 0x100000001B3 * (v16 ^ aStdStringViewG_928[v17++]);
  while (v17 != 368);
  unint64_t v41 = v16;
  uint64_t v42 = "md::TileDependencyLogicImpl<md::TileDependencies<>, md::TileDependencies<md::TileDependency<md::MapDataType::Flyover, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverMetadata, md::FlyoverTileDataResolverContext>, md::TileDependency<md::MapDataType::FlyoverDsm, md::FlyoverTileDataResolverContext>>>]";
  uint64_t v43 = 330;
  *(void *)&long long v38 = 0x8677AD8BA9352C1DLL;
  *((void *)&v38 + 1) = "md::ResolvedTileSelectionContext]";
  uint64_t v39 = 32;
  char v40 = 1;
  *(void *)&long long v44 = &v45;
  *((void *)&v44 + 1) = 1;
  long long v45 = xmmword_1E5A97CE0;
  *(void *)&long long v46 = 24;
  *(void *)&long long v34 = &v35;
  *((void *)&v34 + 1) = 1;
  long long v35 = xmmword_1E5A97CF8;
  *(void *)&long long v36 = 34;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v41, &v38, 0, (uint64_t)&v44, (uint64_t)&v34);
  *(void *)&long long v38 = 0x87BA2765F9E38E05;
  *((void *)&v38 + 1) = "md::PendingSceneLogic]";
  uint64_t v39 = 21;
  *(void *)&long long v34 = 0x9F2276D081C2CB20;
  *((void *)&v34 + 1) = "md::PendingSceneContext]";
  *(void *)&long long v35 = 23;
  BYTE8(v35) = 1;
  *(void *)&long long v44 = &v45;
  *((void *)&v44 + 1) = 5;
  long long v49 = xmmword_1E5A97D50;
  long long v50 = *(_OWORD *)&off_1E5A97D60;
  long long v51 = xmmword_1E5A97D70;
  *(void *)&long long v52 = 25;
  long long v45 = xmmword_1E5A97D10;
  long long v46 = unk_1E5A97D20;
  long long v47 = xmmword_1E5A97D30;
  long long v48 = unk_1E5A97D40;
  unint64_t v41 = (unint64_t)&v43;
  uint64_t v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  unint64_t v41 = 0x2B7C4502BD3C99C6;
  uint64_t v42 = "md::ResolvedSceneLogic]";
  uint64_t v43 = 22;
  *(void *)&long long v44 = &v45;
  *(void *)&long long v38 = 0x99BED48DEFBBD82BLL;
  *((void *)&v38 + 1) = "md::SceneContext]";
  uint64_t v39 = 16;
  char v40 = 1;
  *(void *)&long long v34 = &v35;
  *((void *)&v34 + 1) = 1;
  long long v35 = xmmword_1E5A97DB8;
  *(void *)&long long v36 = 23;
  *((void *)&v44 + 1) = 2;
  long long v45 = xmmword_1E5A97D88;
  long long v46 = unk_1E5A97D98;
  long long v47 = xmmword_1E5A97DA8;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v41, &v38, 0, (uint64_t)&v34, (uint64_t)&v44);
  *(void *)&long long v38 = 0x1F3242C85D9F2F62;
  *((void *)&v38 + 1) = "md::SceneQueryLogic]";
  uint64_t v39 = 19;
  *(void *)&long long v34 = 0xDFC317497CF9A4BFLL;
  *((void *)&v34 + 1) = "md::SceneQueryContext]";
  *(void *)&long long v35 = 21;
  BYTE8(v35) = 1;
  *(void *)&long long v44 = &v45;
  *((void *)&v44 + 1) = 5;
  long long v49 = xmmword_1E5A97060;
  long long v50 = *(_OWORD *)&off_1E5A97070;
  long long v51 = xmmword_1E5A97080;
  *(void *)&long long v52 = 19;
  long long v45 = xmmword_1E5A97020;
  long long v46 = unk_1E5A97030;
  long long v47 = xmmword_1E5A97040;
  long long v48 = unk_1E5A97050;
  unint64_t v41 = (unint64_t)&v43;
  uint64_t v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(void *)&long long v34 = 0xD2443A61CED86C69;
  *((void *)&v34 + 1) = "md::SettingsLogic]";
  *(void *)&long long v35 = 17;
  *(void *)&long long v44 = 0xC97B9E962ADF4AD4;
  *((void *)&v44 + 1) = "md::SettingsContext]";
  *(void *)&long long v45 = 19;
  BYTE8(v45) = 1;
  *(void *)&long long v38 = &v39;
  *((void *)&v38 + 1) = 0;
  unint64_t v41 = (unint64_t)&v43;
  uint64_t v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v34, &v44, 0, (uint64_t)&v38, (uint64_t)&v41);
  *(void *)&long long v34 = 0x3F812BA5755E8568;
  *((void *)&v34 + 1) = "md::SharedResourcesLogic]";
  *(void *)&long long v35 = 24;
  *(void *)&long long v44 = 0xA60DDA5A69582425;
  *((void *)&v44 + 1) = "md::SharedResourcesContext]";
  *(void *)&long long v45 = 26;
  BYTE8(v45) = 1;
  *(void *)&long long v38 = &v39;
  *((void *)&v38 + 1) = 0;
  unint64_t v41 = (unint64_t)&v43;
  uint64_t v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v34, &v44, 0, (uint64_t)&v38, (uint64_t)&v41);
  *(void *)&long long v38 = 0xDAD5CEE0DC5FF509;
  *((void *)&v38 + 1) = "md::SkyLogic]";
  uint64_t v39 = 12;
  *(void *)&long long v34 = 0x7C7EC6C7C111B0D0;
  *((void *)&v34 + 1) = "md::SkyLogicContext]";
  *(void *)&long long v35 = 19;
  BYTE8(v35) = 1;
  *(void *)&long long v44 = &v45;
  *((void *)&v44 + 1) = 2;
  long long v45 = xmmword_1E5A97A40;
  long long v46 = unk_1E5A97A50;
  long long v47 = xmmword_1E5A97A60;
  unint64_t v41 = (unint64_t)&v43;
  uint64_t v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(void *)&long long v34 = 0x2FED70A4459DFCA1;
  *((void *)&v34 + 1) = "md::StyleLogic]";
  *(void *)&long long v35 = 14;
  *(void *)&long long v44 = 0xE42D19AFCA302E68;
  *((void *)&v44 + 1) = "md::StyleLogicContext]";
  *(void *)&long long v45 = 21;
  BYTE8(v45) = 1;
  *(void *)&long long v38 = &v39;
  *((void *)&v38 + 1) = 0;
  unint64_t v41 = (unint64_t)&v43;
  uint64_t v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v34, &v44, 0, (uint64_t)&v38, (uint64_t)&v41);
  *(void *)&long long v38 = 0x33D44727E59BE9E9;
  *((void *)&v38 + 1) = "md::PuckLogic]";
  uint64_t v39 = 13;
  *(void *)&long long v34 = 0x9AEE7E062376E454;
  *((void *)&v34 + 1) = "md::PuckContext]";
  *(void *)&long long v35 = 15;
  BYTE8(v35) = 1;
  *(void *)&long long v44 = &v45;
  *((void *)&v44 + 1) = 9;
  long long v55 = xmmword_1E5A97BE8;
  long long v56 = *(_OWORD *)&off_1E5A97BF8;
  long long v57 = xmmword_1E5A97C08;
  uint64_t v58 = 24;
  long long v51 = xmmword_1E5A97BA8;
  long long v52 = unk_1E5A97BB8;
  long long v53 = xmmword_1E5A97BC8;
  long long v54 = unk_1E5A97BD8;
  long long v47 = xmmword_1E5A97B68;
  long long v48 = unk_1E5A97B78;
  long long v49 = xmmword_1E5A97B88;
  long long v50 = *(_OWORD *)&off_1E5A97B98;
  long long v45 = xmmword_1E5A97B48;
  long long v46 = unk_1E5A97B58;
  unint64_t v41 = (unint64_t)&v43;
  uint64_t v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(void *)&long long v34 = 0x6139471CB89383CBLL;
  *((void *)&v34 + 1) = "md::NonTiledAssetLogic]";
  *(void *)&long long v35 = 22;
  *(void *)&long long v44 = 0x932EE29454ABDC4ELL;
  *((void *)&v44 + 1) = "md::NonTiledAssetContext]";
  *(void *)&long long v45 = 24;
  BYTE8(v45) = 1;
  *(void *)&long long v38 = &v39;
  *((void *)&v38 + 1) = 0;
  unint64_t v41 = (unint64_t)&v43;
  uint64_t v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v34, &v44, 0, (uint64_t)&v38, (uint64_t)&v41);
  *(void *)&long long v38 = 0x652FEFC5C602CC21;
  *((void *)&v38 + 1) = "md::StandardLogic]";
  uint64_t v39 = 17;
  *(void *)&long long v34 = 0xFFA06A69D924B0E8;
  *((void *)&v34 + 1) = "md::StandardLogicContext]";
  *(void *)&long long v35 = 24;
  BYTE8(v35) = 1;
  *(void *)&long long v44 = &v45;
  *((void *)&v44 + 1) = 2;
  long long v45 = xmmword_1E5A970E0;
  long long v46 = unk_1E5A970F0;
  long long v47 = xmmword_1E5A97100;
  unint64_t v41 = (unint64_t)&v43;
  uint64_t v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
  *(void *)&long long v34 = 0x41948F4CADE567A1;
  *((void *)&v34 + 1) = "md::DebugDrawLogic]";
  *(void *)&long long v35 = 18;
  *(void *)&long long v44 = 0x3619066E3FB5F2CLL;
  *((void *)&v44 + 1) = "md::DebugDrawContext]";
  *(void *)&long long v45 = 20;
  BYTE8(v45) = 1;
  *(void *)&long long v38 = &v39;
  *((void *)&v38 + 1) = 0;
  unint64_t v41 = (unint64_t)&v43;
  uint64_t v42 = 0;
  gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v34, &v44, 0, (uint64_t)&v38, (uint64_t)&v41);
  if (*(unsigned char *)(a1 + 600))
  {
    *(void *)&long long v38 = 0xBCE247AEE562B774;
    *((void *)&v38 + 1) = "md::CollectMapDataLogic<md::MapDataType::Flyover>]";
    uint64_t v39 = 49;
    *(void *)&long long v34 = 0x4B05BEFA631D0889;
    *((void *)&v34 + 1) = "md::CollectMapDataContext<md::MapDataType::Flyover>]";
    *(void *)&long long v35 = 51;
    BYTE8(v35) = 1;
    *(void *)&long long v44 = &v45;
    *((void *)&v44 + 1) = 1;
    long long v45 = xmmword_1E5A97E00;
    *(void *)&long long v46 = 16;
    unint64_t v41 = (unint64_t)&v43;
    uint64_t v42 = 0;
    gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
    unint64_t v41 = 0x1643CA7DB4F8EC0BLL;
    uint64_t v42 = "md::CollectRenderablesLogic<md::MapDataType::Flyover, md::FlyoverRenderable>]";
    uint64_t v43 = 76;
    *(void *)&long long v44 = &v45;
    *(void *)&long long v38 = 0x57AAF780DF3EC6C0;
    *((void *)&v38 + 1) = "md::CollectRenderablesLogicContext<md::MapDataType::Flyover>]";
    uint64_t v39 = 60;
    char v40 = 1;
    *((void *)&v44 + 1) = 1;
    long long v45 = xmmword_1E5A97158;
    *(void *)&long long v46 = 19;
    *(void *)&long long v34 = &v35;
    *((void *)&v34 + 1) = 1;
    long long v35 = xmmword_1E5A8EF10;
    *(void *)&long long v36 = 51;
    gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v41, &v38, 0, (uint64_t)&v44, (uint64_t)&v34);
    *(void *)&long long v38 = 0x3FE9EE0C18B7C16;
    *((void *)&v38 + 1) = "md::CollectMapDataLogic<md::MapDataType::PolarFlyover>]";
    uint64_t v39 = 54;
    *(void *)&long long v34 = 0xE4007F1EDCD91179;
    *((void *)&v34 + 1) = "md::CollectMapDataContext<md::MapDataType::PolarFlyover>]";
    *(void *)&long long v35 = 56;
    BYTE8(v35) = 1;
    *(void *)&long long v44 = &v45;
    *((void *)&v44 + 1) = 1;
    long long v45 = xmmword_1E5A97E00;
    *(void *)&long long v46 = 16;
    unint64_t v41 = (unint64_t)&v43;
    uint64_t v42 = 0;
    gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, (unint64_t *)&v38, &v34, 0, (uint64_t)&v44, (uint64_t)&v41);
    unint64_t v41 = 0xAE08CA453A162E8BLL;
    uint64_t v42 = "md::CollectRenderablesLogic<md::MapDataType::PolarFlyover, md::FlyoverRenderable>]";
    uint64_t v43 = 81;
    *(void *)&long long v44 = &v45;
    *(void *)&long long v38 = 0x4F6DB855E2E136BALL;
    *((void *)&v38 + 1) = "md::CollectRenderablesLogicContext<md::MapDataType::PolarFlyover>]";
    uint64_t v39 = 65;
    char v40 = 1;
    *((void *)&v44 + 1) = 1;
    long long v45 = xmmword_1E5A97158;
    *(void *)&long long v46 = 19;
    *(void *)&long long v34 = &v35;
    *((void *)&v34 + 1) = 1;
    long long v35 = xmmword_1E5A8EF28;
    *(void *)&long long v36 = 56;
    gdc::LogicExecutionGraphBuilder::addLogic(a1 + 232, &v41, &v38, 0, (uint64_t)&v44, (uint64_t)&v34);
  }
  int v18 = *(unsigned __int8 *)(a1 + 568);
  if (*(unsigned char *)(a1 + 568))
  {
    LOWORD(v44) = 75;
    WORD1(v44) = v18;
    DWORD1(v44) = 327759;
    *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 0x4Bu, &v44)+ 18) = v18 << 16;
    int v19 = WORD3(v44);
    uint64_t v20 = std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v44), (_WORD *)&v44 + 2);
    int v21 = v19 << 16;
  }
  else
  {
    LOWORD(v44) = 10;
    WORD1(v44) = v18;
    uint64_t v20 = std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 0xAu, &v44);
    int v21 = v18 << 16;
  }
  *(_DWORD *)((char *)v20 + 18) = v21;
  LOWORD(v44) = 27;
  WORD1(v44) = v18;
  WORD2(v44) = 15;
  WORD3(v44) = v18;
  WORD4(v44) = 28;
  WORD5(v44) = v18;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 0x1Bu, &v44)+ 18) = (v18 << 16) | 1;
  int v22 = WORD3(v44);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v44), (_WORD *)&v44 + 2)+ 18) = (v22 << 16) | 1;
  int v23 = WORD5(v44);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD4(v44), (_WORD *)&v44 + 4)+ 18) = (v23 << 16) | 1;
  if (*(unsigned char *)(a1 + 568))
  {
    LOWORD(v44) = 76;
    WORD1(v44) = v18;
    WORD2(v44) = 77;
    WORD3(v44) = v18;
    *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 0x4Cu, &v44)+ 18) = (v18 << 16) | 1;
    int v24 = WORD3(v44);
    *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v44), (_WORD *)&v44 + 2)+ 18) = (v24 << 16) | 1;
  }
  LOBYTE(v44) = 44;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v33, 0x2Cu, &v44)+ 17) = 1;
  LOBYTE(v44) = 40;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v33, 0x28u, &v44)+ 17) = 1;
  LOBYTE(v44) = 18;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v33, 0x12u, &v44)+ 17) = 1;
  int v25 = *(unsigned __int8 *)(a1 + 568);
  LOWORD(v44) = 11;
  if (v25) {
    int v26 = 7;
  }
  else {
    int v26 = 2;
  }
  WORD1(v44) = v26;
  WORD2(v44) = 12;
  WORD3(v44) = v26;
  WORD4(v44) = 71;
  WORD5(v44) = v26;
  WORD6(v44) = 72;
  HIWORD(v44) = v26;
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 0xBu, &v44)+ 18) = (v26 << 16) | 2;
  int v27 = WORD3(v44);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD2(v44), (_WORD *)&v44 + 2)+ 18) = (v27 << 16) | 2;
  int v28 = WORD5(v44);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD4(v44), (_WORD *)&v44 + 4)+ 18) = (v28 << 16) | 2;
  int v29 = HIWORD(v44);
  *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, WORD6(v44), (_WORD *)&v44 + 6)+ 18) = (v29 << 16) | 2;
  if (*(unsigned char *)(a1 + 568))
  {
    LODWORD(v44) = 327761;
    *(_DWORD *)((char *)std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 0x51u, &v44)+ 18) = 327682;
  }
  LOWORD(v44) = 40;
  WORD1(v44) = a3;
  uint64_t v30 = std::__hash_table<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::__unordered_map_hasher<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,gdc::IntTypeHash<md::MapDataType,unsigned short>,std::equal_to<md::MapDataType>,true>,std::__unordered_map_equal<md::MapDataType,std::__hash_value_type<md::MapDataType,md::MapDataTypeState>,std::equal_to<md::MapDataType>,gdc::IntTypeHash<md::MapDataType,unsigned short>,true>,std::allocator<std::__hash_value_type<md::MapDataType,md::MapDataTypeState>>>::__emplace_unique_key_args<md::MapDataType,std::piecewise_construct_t const&,std::tuple<md::MapDataType const&>,std::tuple<>>(a1 + 80, 0x28u, &v44);
  if (a3) {
    int v31 = 65538;
  }
  else {
    int v31 = 2;
  }
  *(_DWORD *)((char *)v30 + 18) = v31;
  LOBYTE(v44) = 41;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v33, 0x29u, &v44)+ 17) = 2;
  LOBYTE(v44) = 42;
  *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,md::DataRequirement>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,md::DataRequirement>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,md::DataRequirement>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(v33, 0x2Au, &v44)+ 17) = 2;
  return a1;
}

void sub_1A2011A48(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = &unk_1EF5463F0;
  if (*((unsigned char *)v1 + 548)) {
    *((unsigned char *)v1 + 548) = 0;
  }
  md::MapEngineMode::~MapEngineMode(v1);
  _Unwind_Resume(a1);
}

uint64_t md::S2TileFetcher::tileKey(uint64_t a1, void *a2)
{
  id v2 = a2;
  [v2 size];
  [v2 scale];
  [v2 style];
  uint64_t v3 = GEOS2TileKeyMake();

  return v3;
}

void sub_1A2011B74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::S2TileFetcher::~S2TileFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A6239270);
}

void sub_1A2011C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2011F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2012298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2012388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2012428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A20124E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2012598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2012638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A20126D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A201278C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A201282C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2012940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A20129FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2012D80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A20131F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&a11);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a16);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a18);
  if (a20)
  {
    a21 = a20;
    (*(void (**)(uint64_t))(*(void *)a23 + 40))(a23);
  }
  _Unwind_Resume(a1);
}

void sub_1A20132DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (!a20) {
    JUMPOUT(0x1A20132D4);
  }
  JUMPOUT(0x1A20132A4);
}

void sub_1A20132EC()
{
  if (v0) {
    JUMPOUT(0x1A20132C8);
  }
  JUMPOUT(0x1A20132D4);
}

void sub_1A2016C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);

  gss::QueryableLocker<gss::ScenePropertyID>::~QueryableLocker((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t gss::RenderStyle<gss::ScenePropertyID>::hasValueForKeyAtZAtEnd(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4 = *(void *)(a1 + 16 * a4 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(void **)(v4 + 72);
  if (!v5
    || (uint64_t v6 = *v5 + 80 * *((unsigned __int8 *)v5 + a3 + 16), v7 = *(unsigned __int16 *)(v6 + 10), !*(_WORD *)(v6 + 10)))
  {
LABEL_28:
    uint64_t v19 = a1 + 16 * a4;
    uint64_t v20 = *(unsigned __int16 *)(v19 + 56);
    if (*(_WORD *)(v19 + 56))
    {
      uint64_t v21 = *(void *)(v19 + 48);
      uint64_t v22 = v21 + 8 * v20;
      while (1)
      {
        int v24 = *(void **)(*(void *)v21 + 72);
        if (v24)
        {
          uint64_t v25 = *v24 + 80 * *((unsigned __int8 *)v24 + a3 + 16);
          unint64_t v26 = *(unsigned __int16 *)(v25 + 10);
          if (!*(_WORD *)(v25 + 10))
          {
            unsigned __int16 v23 = 0;
            goto LABEL_31;
          }
          int v27 = *(unsigned __int8 **)v25;
          if (!*(unsigned char *)(v25 + 15))
          {
            uint64_t v36 = *(unsigned __int16 *)(v25 + 10);
            int v28 = *(unsigned __int8 **)v25;
            while (*v28 != a2)
            {
              ++v28;
              if (!--v36)
              {
                LOWORD(v28) = (_WORD)v27 + v26;
                break;
              }
            }
LABEL_52:
            unsigned __int16 v23 = (_WORD)v28 - (_WORD)v27;
LABEL_31:
            if (v26 != v23) {
              return 1;
            }
            goto LABEL_32;
          }
          int v28 = *(unsigned __int8 **)v25;
          unint64_t v29 = v26;
          if (v26 < 0x1E)
          {
            uint64_t v30 = 0;
            while (1)
            {
              unsigned int v31 = v27[v30];
              if (v31 >= a2) {
                break;
              }
              if (v26 == ++v30) {
                goto LABEL_32;
              }
            }
            if (v31 == a2) {
              unsigned __int16 v23 = v30;
            }
            else {
              unsigned __int16 v23 = v26;
            }
            goto LABEL_31;
          }
          do
          {
            unint64_t v32 = v29 >> 1;
            uint64_t v33 = &v28[v29 >> 1];
            unsigned int v35 = *v33;
            long long v34 = v33 + 1;
            v29 += ~(v29 >> 1);
            if (v35 < a2) {
              int v28 = v34;
            }
            else {
              unint64_t v29 = v32;
            }
          }
          while (v29);
          if (v28 != &v27[v26] && *v28 == a2) {
            goto LABEL_52;
          }
        }
LABEL_32:
        v21 += 8;
        if (v21 == v22) {
          return 0;
        }
      }
    }
    return 0;
  }
  uint64_t v8 = *(unsigned __int8 **)v6;
  if (!*(unsigned char *)(v6 + 15))
  {
    uint64_t v11 = *(unsigned __int16 *)(v6 + 10);
    uint64_t v12 = *(unsigned __int8 **)v6;
    while (*v12 != a2)
    {
      ++v12;
      if (!--v11)
      {
        LOWORD(v12) = (_WORD)v8 + v7;
        break;
      }
    }
LABEL_22:
    if (v7 == (unsigned __int16)((_WORD)v12 - (_WORD)v8)) {
      goto LABEL_28;
    }
    return 1;
  }
  if (v7 >= 0x1E)
  {
    uint64_t v12 = *(unsigned __int8 **)v6;
    unint64_t v13 = v7;
    do
    {
      unint64_t v14 = v13 >> 1;
      int8x8_t v15 = &v12[v13 >> 1];
      unsigned int v17 = *v15;
      uint64_t v16 = v15 + 1;
      v13 += ~(v13 >> 1);
      if (v17 < a2) {
        uint64_t v12 = v16;
      }
      else {
        unint64_t v13 = v14;
      }
    }
    while (v13);
    if (v12 == &v8[v7] || *v12 != a2) {
      goto LABEL_28;
    }
    goto LABEL_22;
  }
  uint64_t v9 = 0;
  while (1)
  {
    unsigned int v10 = v8[v9];
    if (v10 >= a2) {
      break;
    }
    if (v7 == ++v9) {
      goto LABEL_28;
    }
  }
  if (v10 == a2) {
    unsigned __int16 v18 = v9;
  }
  else {
    unsigned __int16 v18 = v7;
  }
  if (v7 == v18) {
    goto LABEL_28;
  }
  return 1;
}

int *gss::RenderStyle<gss::ScenePropertyID>::styleValueForKeyAtZ<float>(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned char *a5)
{
  uint64_t v6 = *(void *)(a1 + 16 * a4 + 16);
  if (v6)
  {
    uint64_t v7 = a1 + 16 * a4;
    uint64_t v8 = *(unsigned __int16 *)(v7 + 56);
    if (*(_WORD *)(v7 + 56))
    {
      uint64_t v9 = *(void *)(v7 + 48);
      uint64_t v10 = v9 + 8 * v8;
      if (a3 >= 0x17) {
        uint64_t v11 = 23;
      }
      else {
        uint64_t v11 = a3;
      }
      while (1)
      {
        unint64_t v13 = *(uint64_t **)(*(void *)v9 + 72);
        if (!v13) {
          goto LABEL_8;
        }
        uint64_t v16 = *v13;
        int8x8_t v15 = v13 + 2;
        uint64_t v14 = v16;
        unsigned int v17 = (unsigned __int8 **)(v16 + 80 * *((unsigned __int8 *)v15 + a3));
        unint64_t v18 = *((unsigned __int16 *)v17 + 5);
        if (!*((_WORD *)v17 + 5))
        {
          unsigned __int16 v12 = 0;
          goto LABEL_7;
        }
        uint64_t v19 = (uint64_t)*v17;
        if (!*((unsigned char *)v17 + 15)) {
          break;
        }
        uint64_t v20 = *v17;
        unint64_t v21 = v18;
        if (v18 >= 0x1E)
        {
          do
          {
            unint64_t v24 = v21 >> 1;
            uint64_t v25 = &v20[v21 >> 1];
            unsigned int v27 = *v25;
            unint64_t v26 = v25 + 1;
            v21 += ~(v21 >> 1);
            if (v27 < a2) {
              uint64_t v20 = v26;
            }
            else {
              unint64_t v21 = v24;
            }
          }
          while (v21);
          if (v20 == (unsigned __int8 *)(v19 + v18) || *v20 != a2) {
            goto LABEL_8;
          }
          goto LABEL_28;
        }
        uint64_t v22 = 0;
        while (1)
        {
          unsigned int v23 = *(unsigned __int8 *)(v19 + v22);
          if (v23 >= a2) {
            break;
          }
          if (v18 == ++v22) {
            goto LABEL_8;
          }
        }
        if (v23 == a2) {
          unsigned __int16 v12 = v22;
        }
        else {
          unsigned __int16 v12 = v18;
        }
LABEL_7:
        if (v18 != v12)
        {
          unsigned int v31 = *((unsigned __int8 *)v15 + v11);
          uint64_t v32 = v14 + 80 * *((unsigned __int8 *)v15 + v11);
          uint64_t v33 = (unsigned __int8 *)*(unsigned __int16 *)(v32 + 42);
          if (!*(_WORD *)(v32 + 42)) {
            return &gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
          }
          uint64_t v34 = v14 + 80 * *((unsigned __int8 *)v15 + v11);
          uint64_t v35 = *(void *)(v34 + 32);
          if (*(unsigned char *)(v34 + 47))
          {
            if (v33 < 0x1E)
            {
              uint64_t v36 = 0;
              double result = &gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
              while (1)
              {
                unsigned int v37 = v36[v35];
                if (v37 >= a2) {
                  break;
                }
                if (v33 == ++v36) {
                  return result;
                }
              }
              if (v37 != a2) {
                LOWORD(v36) = (_WORD)v33;
              }
              if (v33 <= (unsigned __int16)v36) {
                return &gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
              }
              return (int *)(v35 + *(unsigned __int16 *)(v14 + 80 * v31 + 40) + 4 * (unsigned __int16)v36);
            }
            uint64_t v36 = *(unsigned __int8 **)(v34 + 32);
            uint64_t v39 = v33;
            do
            {
              char v40 = (unsigned __int8 *)((unint64_t)v39 >> 1);
              unint64_t v41 = &v36[(unint64_t)v39 >> 1];
              unsigned int v43 = *v41;
              uint64_t v42 = v41 + 1;
              v39 += ~((unint64_t)v39 >> 1);
              if (v43 < a2) {
                uint64_t v36 = v42;
              }
              else {
                uint64_t v39 = v40;
              }
            }
            while (v39);
            if (v36 == &v33[v35] || *v36 != a2) {
              return &gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            }
          }
          else
          {
            long long v38 = v33;
            uint64_t v36 = *(unsigned __int8 **)(v34 + 32);
            while (*v36 != a2)
            {
              ++v36;
              if (!--v38)
              {
                LOWORD(v36) = v35 + (_WORD)v33;
                break;
              }
            }
          }
          LOWORD(v36) = (_WORD)v36 - v35;
          if (v33 <= (unsigned __int16)v36) {
            return &gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
          }
          return (int *)(v35 + *(unsigned __int16 *)(v14 + 80 * v31 + 40) + 4 * (unsigned __int16)v36);
        }
LABEL_8:
        v9 += 8;
        if (v9 == v10) {
          goto LABEL_32;
        }
      }
      uint64_t v28 = *((unsigned __int16 *)v17 + 5);
      uint64_t v20 = *v17;
      while (*v20 != a2)
      {
        ++v20;
        if (!--v28)
        {
          LOWORD(v20) = v19 + v18;
          break;
        }
      }
LABEL_28:
      unsigned __int16 v12 = (_WORD)v20 - v19;
      goto LABEL_7;
    }
LABEL_32:
    unint64_t v29 = *(int **)(v6 + 72);
    return gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<float>(v29, a2, a3, a5);
  }
  else
  {
    if (a5) {
      *a5 = 0;
    }
    return (int *)gss::defaultValueForKey<gss::ScenePropertyID,float>(a2);
  }
}

int *gss::RenderStyle<gss::ScenePropertyID>::styleValueForKeyAtZ<unsigned int>(uint64_t a1, unsigned int a2, unsigned int a3, unsigned char *a4)
{
  uint64_t v4 = *(void *)(a1 + 16 * a3 + 16);
  if (v4)
  {
    uint64_t v6 = a1 + 16 * a3;
    uint64_t v7 = *(unsigned __int16 *)(v6 + 56);
    if (!*(_WORD *)(v6 + 56)) {
      return gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<unsigned int>(*(int **)(v4 + 72), 0x15u, a2, a4);
    }
    uint64_t v8 = *(void *)(v6 + 48);
    uint64_t v9 = v8 + 8 * v7;
    if (a2 >= 0x17) {
      uint64_t v10 = 23;
    }
    else {
      uint64_t v10 = a2;
    }
    while (1)
    {
      unsigned __int16 v12 = *(uint64_t **)(*(void *)v8 + 72);
      if (!v12) {
        goto LABEL_8;
      }
      uint64_t v15 = *v12;
      uint64_t v14 = v12 + 2;
      uint64_t v13 = v15;
      uint64_t v16 = v15 + 80 * *((unsigned __int8 *)v14 + a2);
      unint64_t v17 = *(unsigned __int16 *)(v16 + 10);
      if (!*(_WORD *)(v16 + 10))
      {
        unsigned __int16 v11 = 0;
        goto LABEL_7;
      }
      unint64_t v18 = *(unsigned __int8 **)v16;
      if (!*(unsigned char *)(v16 + 15)) {
        break;
      }
      uint64_t v19 = *(unsigned __int8 **)v16;
      unint64_t v20 = v17;
      if (v17 >= 0x1E)
      {
        do
        {
          unint64_t v23 = v20 >> 1;
          unint64_t v24 = &v19[v20 >> 1];
          unsigned int v26 = *v24;
          uint64_t v25 = v24 + 1;
          v20 += ~(v20 >> 1);
          if (v26 < 0x15) {
            uint64_t v19 = v25;
          }
          else {
            unint64_t v20 = v23;
          }
        }
        while (v20);
        if (v19 == &v18[v17] || *v19 != 21) {
          goto LABEL_8;
        }
        goto LABEL_28;
      }
      uint64_t v21 = 0;
      while (1)
      {
        unsigned int v22 = v18[v21];
        if (v22 >= 0x15) {
          break;
        }
        if (v17 == ++v21) {
          goto LABEL_8;
        }
      }
      if (v22 == 21) {
        unsigned __int16 v11 = v21;
      }
      else {
        unsigned __int16 v11 = v17;
      }
LABEL_7:
      if (v17 != v11)
      {
        unsigned int v29 = *((unsigned __int8 *)v14 + v10);
        uint64_t v30 = v13 + 80 * *((unsigned __int8 *)v14 + v10);
        unsigned int v31 = (unsigned __int8 *)*(unsigned __int16 *)(v30 + 42);
        if (!*(_WORD *)(v30 + 42)) {
          return &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        }
        uint64_t v32 = v13 + 80 * *((unsigned __int8 *)v14 + v10);
        uint64_t v33 = *(void *)(v32 + 32);
        if (*(unsigned char *)(v32 + 47))
        {
          if (v31 < 0x1E)
          {
            uint64_t v34 = 0;
            double result = &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            while (1)
            {
              unsigned int v35 = v34[v33];
              if (v35 >= 0x15) {
                break;
              }
              if (v31 == ++v34) {
                return result;
              }
            }
            if (v35 != 21) {
              LOWORD(v34) = (_WORD)v31;
            }
            if (v31 <= (unsigned __int16)v34) {
              return &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            }
            return (int *)(v33 + *(unsigned __int16 *)(v13 + 80 * v29 + 40) + 4 * (unsigned __int16)v34);
          }
          uint64_t v34 = *(unsigned __int8 **)(v32 + 32);
          unint64_t v37 = (unint64_t)v31;
          do
          {
            long long v38 = (unsigned char *)(v37 >> 1);
            uint64_t v39 = &v34[v37 >> 1];
            unsigned int v41 = *v39;
            char v40 = v39 + 1;
            v37 += ~(v37 >> 1);
            if (v41 < 0x15) {
              uint64_t v34 = v40;
            }
            else {
              unint64_t v37 = (unint64_t)v38;
            }
          }
          while (v37);
          if (v34 == &v31[v33] || *v34 != 21) {
            return &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
          }
        }
        else
        {
          uint64_t v36 = v31;
          uint64_t v34 = *(unsigned __int8 **)(v32 + 32);
          while (*v34 != 21)
          {
            ++v34;
            if (!--v36)
            {
              LOWORD(v34) = v33 + (_WORD)v31;
              break;
            }
          }
        }
        LOWORD(v34) = (_WORD)v34 - v33;
        if (v31 <= (unsigned __int16)v34) {
          return &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        }
        return (int *)(v33 + *(unsigned __int16 *)(v13 + 80 * v29 + 40) + 4 * (unsigned __int16)v34);
      }
LABEL_8:
      v8 += 8;
      if (v8 == v9) {
        return gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<unsigned int>(*(int **)(v4 + 72), 0x15u, a2, a4);
      }
    }
    uint64_t v27 = *(unsigned __int16 *)(v16 + 10);
    uint64_t v19 = *(unsigned __int8 **)v16;
    while (*v19 != 21)
    {
      ++v19;
      if (!--v27)
      {
        LOWORD(v19) = (_WORD)v18 + v17;
        break;
      }
    }
LABEL_28:
    unsigned __int16 v11 = (_WORD)v19 - (_WORD)v18;
    goto LABEL_7;
  }
  if (a4) {
    *a4 = 0;
  }
  return (int *)gss::defaultValueForKey<gss::ScenePropertyID,unsigned int>(0x15u);
}

uint64_t gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<float>(uint64_t result, unsigned int a2, unsigned int a3, unsigned char *a4)
{
  uint64_t v4 = *(void *)(result + 16 * a3 + 16);
  if (!v4)
  {
    if (a4) {
      *a4 = 0;
    }
    return (uint64_t)gss::defaultValueForKey<gss::ScenePropertyID,float>(a2);
  }
  uint64_t v5 = result + 16 * a3;
  uint64_t v6 = *(unsigned __int16 *)(v5 + 56);
  if (*(_WORD *)(v5 + 56))
  {
    uint64_t v7 = *(void *)(v5 + 48);
    uint64_t v8 = v7 + 8 * v6;
    while (1)
    {
      uint64_t v10 = *(unsigned __int8 ****)(*(void *)v7 + 72);
      if (!v10) {
        goto LABEL_6;
      }
      unsigned __int16 v11 = *v10;
      uint64_t v12 = *((unsigned __int16 *)v11 + 5);
      if (!*((_WORD *)v11 + 5))
      {
        unsigned __int16 v9 = 0;
        goto LABEL_5;
      }
      uint64_t v13 = (uint64_t)*v11;
      if (!*((unsigned char *)v11 + 15)) {
        break;
      }
      uint64_t v14 = *v11;
      unint64_t v15 = *((unsigned __int16 *)v11 + 5);
      if (v12 >= 0x1E)
      {
        do
        {
          unint64_t v18 = v15 >> 1;
          uint64_t v19 = &v14[v15 >> 1];
          unsigned int v21 = *v19;
          unint64_t v20 = v19 + 1;
          double result = v21;
          v15 += ~(v15 >> 1);
          if (v21 < a2) {
            uint64_t v14 = v20;
          }
          else {
            unint64_t v15 = v18;
          }
        }
        while (v15);
        if (v14 == (unsigned __int8 *)(v13 + v12) || *v14 != a2) {
          goto LABEL_6;
        }
        goto LABEL_26;
      }
      uint64_t v16 = 0;
      while (1)
      {
        unsigned int v17 = *(unsigned __int8 *)(v13 + v16);
        if (v17 >= a2) {
          break;
        }
        if (v12 == ++v16) {
          goto LABEL_6;
        }
      }
      if (v17 == a2) {
        unsigned __int16 v9 = v16;
      }
      else {
        unsigned __int16 v9 = *((_WORD *)v11 + 5);
      }
LABEL_5:
      if (v12 != v9)
      {
        uint64_t v28 = (unsigned __int8 *)*((unsigned __int16 *)v11 + 21);
        if (!*((_WORD *)v11 + 21)) {
          return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        }
        unsigned int v29 = v11[4];
        if (*((unsigned char *)v11 + 47))
        {
          if (v28 < 0x1E)
          {
            uint64_t v30 = 0;
            double result = (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            while (1)
            {
              unsigned int v31 = v30[(void)v29];
              if (v31 >= a2) {
                break;
              }
              if (v28 == ++v30) {
                return result;
              }
            }
            if (v31 != a2) {
              LOWORD(v30) = *((_WORD *)v11 + 21);
            }
            if (v28 > (unsigned __int16)v30) {
              return (uint64_t)&v29[4 * (unsigned __int16)v30 + *((unsigned __int16 *)v11 + 20)];
            }
            return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
          }
          uint64_t v30 = v11[4];
          unint64_t v44 = *((unsigned __int16 *)v11 + 21);
          do
          {
            unint64_t v45 = v44 >> 1;
            long long v46 = &v30[v44 >> 1];
            unsigned int v48 = *v46;
            long long v47 = v46 + 1;
            v44 += ~(v44 >> 1);
            if (v48 < a2) {
              uint64_t v30 = v47;
            }
            else {
              unint64_t v44 = v45;
            }
          }
          while (v44);
          if (v30 == &v28[(void)v29] || *v30 != a2) {
            return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
          }
        }
        else
        {
          uint64_t v42 = *((unsigned __int16 *)v11 + 21);
          uint64_t v30 = v11[4];
          while (*v30 != a2)
          {
            ++v30;
            if (!--v42)
            {
              LOWORD(v30) = (_WORD)v29 + (_WORD)v28;
              break;
            }
          }
        }
        LOWORD(v30) = (_WORD)v30 - (_WORD)v29;
        if (v28 > (unsigned __int16)v30) {
          return (uint64_t)&v29[4 * (unsigned __int16)v30 + *((unsigned __int16 *)v11 + 20)];
        }
        return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      }
LABEL_6:
      v7 += 8;
      if (v7 == v8) {
        goto LABEL_30;
      }
    }
    uint64_t v22 = *((unsigned __int16 *)v11 + 5);
    uint64_t v14 = *v11;
    while (*v14 != a2)
    {
      ++v14;
      if (!--v22)
      {
        LOWORD(v14) = v13 + v12;
        break;
      }
    }
LABEL_26:
    unsigned __int16 v9 = (_WORD)v14 - v13;
    goto LABEL_5;
  }
LABEL_30:
  unint64_t v23 = *(unsigned __int8 ****)(v4 + 72);
  if (!v23) {
    goto LABEL_61;
  }
  unsigned __int16 v11 = *v23;
  uint64_t v24 = *((unsigned __int16 *)v11 + 5);
  if (!*((_WORD *)v11 + 5)) {
    goto LABEL_61;
  }
  uint64_t v25 = (uint64_t)*v11;
  if (!*((unsigned char *)v11 + 15))
  {
    uint64_t v32 = *((unsigned __int16 *)v11 + 5);
    uint64_t v33 = *v11;
    while (*v33 != a2)
    {
      ++v33;
      if (!--v32)
      {
        LOWORD(v33) = v25 + v24;
        break;
      }
    }
LABEL_60:
    if (v24 != (unsigned __int16)((_WORD)v33 - v25)) {
      goto LABEL_68;
    }
    goto LABEL_61;
  }
  if (v24 >= 0x1E)
  {
    uint64_t v33 = *v11;
    unint64_t v34 = *((unsigned __int16 *)v11 + 5);
    do
    {
      unint64_t v35 = v34 >> 1;
      uint64_t v36 = &v33[v34 >> 1];
      unsigned int v38 = *v36;
      unint64_t v37 = v36 + 1;
      v34 += ~(v34 >> 1);
      if (v38 < a2) {
        uint64_t v33 = v37;
      }
      else {
        unint64_t v34 = v35;
      }
    }
    while (v34);
    if (v33 != (unsigned __int8 *)(v25 + v24) && *v33 == a2) {
      goto LABEL_60;
    }
LABEL_61:
    if (a4) {
      *a4 = 0;
    }
    return (uint64_t)gss::defaultValueForKey<gss::ScenePropertyID,float>(a2);
  }
  uint64_t v26 = 0;
  while (1)
  {
    unsigned int v27 = *(unsigned __int8 *)(v25 + v26);
    if (v27 >= a2) {
      break;
    }
    if (v24 == ++v26) {
      goto LABEL_61;
    }
  }
  if (v27 == a2) {
    unsigned __int16 v39 = v26;
  }
  else {
    unsigned __int16 v39 = *((_WORD *)v11 + 5);
  }
  if (v24 == v39) {
    goto LABEL_61;
  }
LABEL_68:
  char v40 = (unsigned __int8 *)*((unsigned __int16 *)v11 + 21);
  if (!*((_WORD *)v11 + 21)) {
    return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
  unsigned int v29 = v11[4];
  if (*((unsigned char *)v11 + 47))
  {
    if (v40 < 0x1E)
    {
      uint64_t v30 = 0;
      double result = (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      while (1)
      {
        unsigned int v41 = v30[(void)v29];
        if (v41 >= a2) {
          break;
        }
        if (v40 == ++v30) {
          return result;
        }
      }
      if (v41 != a2) {
        LOWORD(v30) = *((_WORD *)v11 + 21);
      }
      if (v40 == (unsigned __int16)v30) {
        return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      }
      goto LABEL_109;
    }
    uint64_t v30 = v11[4];
    unint64_t v49 = *((unsigned __int16 *)v11 + 21);
    do
    {
      unint64_t v50 = v49 >> 1;
      long long v51 = &v30[v49 >> 1];
      unsigned int v53 = *v51;
      long long v52 = v51 + 1;
      v49 += ~(v49 >> 1);
      if (v53 < a2) {
        uint64_t v30 = v52;
      }
      else {
        unint64_t v49 = v50;
      }
    }
    while (v49);
    if (v30 == &v40[(void)v29] || *v30 != a2) {
      return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
    }
  }
  else
  {
    uint64_t v43 = *((unsigned __int16 *)v11 + 21);
    uint64_t v30 = v11[4];
    while (*v30 != a2)
    {
      ++v30;
      if (!--v43)
      {
        LOWORD(v30) = (_WORD)v29 + (_WORD)v40;
        break;
      }
    }
  }
  LOWORD(v30) = (_WORD)v30 - (_WORD)v29;
  if (v40 == (unsigned __int16)v30) {
    return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
LABEL_109:
  if (v40 > (unsigned __int16)v30) {
    return (uint64_t)&v29[4 * (unsigned __int16)v30 + *((unsigned __int16 *)v11 + 20)];
  }
  return result;
}

unint64_t gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<unsigned char>(unint64_t result, unsigned int a2, unsigned int a3, unsigned char *a4)
{
  uint64_t v4 = *(void *)(result + 16 * a3 + 16);
  if (!v4)
  {
    if (a4) {
      *a4 = 0;
    }
    return (unint64_t)gss::defaultValueForKey<gss::ScenePropertyID,unsigned char>();
  }
  uint64_t v5 = (char *)(result + 16 * a3);
  uint64_t v6 = *((unsigned __int16 *)v5 + 28);
  if (*((_WORD *)v5 + 28))
  {
    uint64_t v7 = *((void *)v5 + 6);
    uint64_t v8 = v7 + 8 * v6;
    while (1)
    {
      uint64_t v10 = *(unsigned __int8 ****)(*(void *)v7 + 72);
      if (!v10) {
        goto LABEL_6;
      }
      unsigned __int16 v11 = *v10;
      uint64_t v12 = *((unsigned __int16 *)v11 + 5);
      if (!*((_WORD *)v11 + 5))
      {
        unsigned __int16 v9 = 0;
        goto LABEL_5;
      }
      uint64_t v13 = (uint64_t)*v11;
      if (!*((unsigned char *)v11 + 15)) {
        break;
      }
      uint64_t v14 = *v11;
      unint64_t v15 = *((unsigned __int16 *)v11 + 5);
      if (v12 >= 0x1E)
      {
        do
        {
          unint64_t v18 = v15 >> 1;
          uint64_t v19 = &v14[v15 >> 1];
          unsigned int v21 = *v19;
          unint64_t v20 = v19 + 1;
          double result = v21;
          v15 += ~(v15 >> 1);
          if (v21 < a2) {
            uint64_t v14 = v20;
          }
          else {
            unint64_t v15 = v18;
          }
        }
        while (v15);
        if (v14 == (unsigned __int8 *)(v13 + v12) || *v14 != a2) {
          goto LABEL_6;
        }
        goto LABEL_26;
      }
      uint64_t v16 = 0;
      while (1)
      {
        unsigned int v17 = *(unsigned __int8 *)(v13 + v16);
        if (v17 >= a2) {
          break;
        }
        if (v12 == ++v16) {
          goto LABEL_6;
        }
      }
      if (v17 == a2) {
        unsigned __int16 v9 = v16;
      }
      else {
        unsigned __int16 v9 = *((_WORD *)v11 + 5);
      }
LABEL_5:
      if (v12 != v9)
      {
        uint64_t v28 = (unsigned __int8 *)*((unsigned __int16 *)v11 + 13);
        if (!*((_WORD *)v11 + 13)) {
          return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned char>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        }
        unsigned int v29 = v11[2];
        if (*((unsigned char *)v11 + 31))
        {
          if (v28 < 0x1E)
          {
            uint64_t v30 = 0;
            double result = (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned char>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            while (1)
            {
              unsigned int v31 = v30[(void)v29];
              if (v31 >= a2) {
                break;
              }
              if (v28 == ++v30) {
                return result;
              }
            }
            if (v31 != a2) {
              LOWORD(v30) = *((_WORD *)v11 + 13);
            }
            if (v28 > (unsigned __int16)v30) {
              return (unint64_t)&v29[*((unsigned __int16 *)v11 + 12) + (unsigned __int16)v30];
            }
            return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned char>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
          }
          uint64_t v30 = v11[2];
          unint64_t v44 = *((unsigned __int16 *)v11 + 13);
          do
          {
            unint64_t v45 = v44 >> 1;
            long long v46 = &v30[v44 >> 1];
            unsigned int v48 = *v46;
            long long v47 = v46 + 1;
            v44 += ~(v44 >> 1);
            if (v48 < a2) {
              uint64_t v30 = v47;
            }
            else {
              unint64_t v44 = v45;
            }
          }
          while (v44);
          if (v30 == &v28[(void)v29] || *v30 != a2) {
            return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned char>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
          }
        }
        else
        {
          uint64_t v42 = *((unsigned __int16 *)v11 + 13);
          uint64_t v30 = v11[2];
          while (*v30 != a2)
          {
            ++v30;
            if (!--v42)
            {
              LOWORD(v30) = (_WORD)v29 + (_WORD)v28;
              break;
            }
          }
        }
        LOWORD(v30) = (_WORD)v30 - (_WORD)v29;
        if (v28 > (unsigned __int16)v30) {
          return (unint64_t)&v29[*((unsigned __int16 *)v11 + 12) + (unsigned __int16)v30];
        }
        return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned char>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      }
LABEL_6:
      v7 += 8;
      if (v7 == v8) {
        goto LABEL_30;
      }
    }
    uint64_t v22 = *((unsigned __int16 *)v11 + 5);
    uint64_t v14 = *v11;
    while (*v14 != a2)
    {
      ++v14;
      if (!--v22)
      {
        LOWORD(v14) = v13 + v12;
        break;
      }
    }
LABEL_26:
    unsigned __int16 v9 = (_WORD)v14 - v13;
    goto LABEL_5;
  }
LABEL_30:
  unint64_t v23 = *(unsigned __int8 ****)(v4 + 72);
  if (!v23) {
    goto LABEL_61;
  }
  unsigned __int16 v11 = *v23;
  uint64_t v24 = *((unsigned __int16 *)v11 + 5);
  if (!*((_WORD *)v11 + 5)) {
    goto LABEL_61;
  }
  uint64_t v25 = (uint64_t)*v11;
  if (!*((unsigned char *)v11 + 15))
  {
    uint64_t v32 = *((unsigned __int16 *)v11 + 5);
    uint64_t v33 = *v11;
    while (*v33 != a2)
    {
      ++v33;
      if (!--v32)
      {
        LOWORD(v33) = v25 + v24;
        break;
      }
    }
LABEL_60:
    if (v24 != (unsigned __int16)((_WORD)v33 - v25)) {
      goto LABEL_68;
    }
    goto LABEL_61;
  }
  if (v24 >= 0x1E)
  {
    uint64_t v33 = *v11;
    unint64_t v34 = *((unsigned __int16 *)v11 + 5);
    do
    {
      unint64_t v35 = v34 >> 1;
      uint64_t v36 = &v33[v34 >> 1];
      unsigned int v38 = *v36;
      unint64_t v37 = v36 + 1;
      v34 += ~(v34 >> 1);
      if (v38 < a2) {
        uint64_t v33 = v37;
      }
      else {
        unint64_t v34 = v35;
      }
    }
    while (v34);
    if (v33 != (unsigned __int8 *)(v25 + v24) && *v33 == a2) {
      goto LABEL_60;
    }
LABEL_61:
    if (a4) {
      *a4 = 0;
    }
    return (unint64_t)gss::defaultValueForKey<gss::ScenePropertyID,unsigned char>();
  }
  uint64_t v26 = 0;
  while (1)
  {
    unsigned int v27 = *(unsigned __int8 *)(v25 + v26);
    if (v27 >= a2) {
      break;
    }
    if (v24 == ++v26) {
      goto LABEL_61;
    }
  }
  if (v27 == a2) {
    unsigned __int16 v39 = v26;
  }
  else {
    unsigned __int16 v39 = *((_WORD *)v11 + 5);
  }
  if (v24 == v39) {
    goto LABEL_61;
  }
LABEL_68:
  char v40 = (unsigned __int8 *)*((unsigned __int16 *)v11 + 13);
  if (!*((_WORD *)v11 + 13)) {
    return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned char>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
  unsigned int v29 = v11[2];
  if (*((unsigned char *)v11 + 31))
  {
    if (v40 < 0x1E)
    {
      uint64_t v30 = 0;
      double result = (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned char>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      while (1)
      {
        unsigned int v41 = v30[(void)v29];
        if (v41 >= a2) {
          break;
        }
        if (v40 == ++v30) {
          return result;
        }
      }
      if (v41 != a2) {
        LOWORD(v30) = *((_WORD *)v11 + 13);
      }
      if (v40 == (unsigned __int16)v30) {
        return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned char>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      }
      goto LABEL_109;
    }
    uint64_t v30 = v11[2];
    unint64_t v49 = *((unsigned __int16 *)v11 + 13);
    do
    {
      unint64_t v50 = v49 >> 1;
      long long v51 = &v30[v49 >> 1];
      unsigned int v53 = *v51;
      long long v52 = v51 + 1;
      v49 += ~(v49 >> 1);
      if (v53 < a2) {
        uint64_t v30 = v52;
      }
      else {
        unint64_t v49 = v50;
      }
    }
    while (v49);
    if (v30 == &v40[(void)v29] || *v30 != a2) {
      return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned char>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
    }
  }
  else
  {
    uint64_t v43 = *((unsigned __int16 *)v11 + 13);
    uint64_t v30 = v11[2];
    while (*v30 != a2)
    {
      ++v30;
      if (!--v43)
      {
        LOWORD(v30) = (_WORD)v29 + (_WORD)v40;
        break;
      }
    }
  }
  LOWORD(v30) = (_WORD)v30 - (_WORD)v29;
  if (v40 == (unsigned __int16)v30) {
    return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned char>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
LABEL_109:
  if (v40 > (unsigned __int16)v30) {
    return (unint64_t)&v29[*((unsigned __int16 *)v11 + 12) + (unsigned __int16)v30];
  }
  return result;
}

uint64_t gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<int>(uint64_t result, unsigned int a2, unsigned int a3, unsigned char *a4)
{
  uint64_t v4 = *(void *)(result + 16 * a3 + 16);
  if (!v4)
  {
    if (a4) {
      *a4 = 0;
    }
    return (uint64_t)gss::defaultValueForKey<gss::ScenePropertyID,int>(a2);
  }
  uint64_t v5 = result + 16 * a3;
  uint64_t v6 = *(unsigned __int16 *)(v5 + 56);
  if (*(_WORD *)(v5 + 56))
  {
    uint64_t v7 = *(void *)(v5 + 48);
    uint64_t v8 = v7 + 8 * v6;
    while (1)
    {
      uint64_t v10 = *(unsigned __int8 ****)(*(void *)v7 + 72);
      if (!v10) {
        goto LABEL_6;
      }
      unsigned __int16 v11 = *v10;
      uint64_t v12 = *((unsigned __int16 *)v11 + 5);
      if (!*((_WORD *)v11 + 5))
      {
        unsigned __int16 v9 = 0;
        goto LABEL_5;
      }
      uint64_t v13 = (uint64_t)*v11;
      if (!*((unsigned char *)v11 + 15)) {
        break;
      }
      uint64_t v14 = *v11;
      unint64_t v15 = *((unsigned __int16 *)v11 + 5);
      if (v12 >= 0x1E)
      {
        do
        {
          unint64_t v18 = v15 >> 1;
          uint64_t v19 = &v14[v15 >> 1];
          unsigned int v21 = *v19;
          unint64_t v20 = v19 + 1;
          double result = v21;
          v15 += ~(v15 >> 1);
          if (v21 < a2) {
            uint64_t v14 = v20;
          }
          else {
            unint64_t v15 = v18;
          }
        }
        while (v15);
        if (v14 == (unsigned __int8 *)(v13 + v12) || *v14 != a2) {
          goto LABEL_6;
        }
        goto LABEL_26;
      }
      uint64_t v16 = 0;
      while (1)
      {
        unsigned int v17 = *(unsigned __int8 *)(v13 + v16);
        if (v17 >= a2) {
          break;
        }
        if (v12 == ++v16) {
          goto LABEL_6;
        }
      }
      if (v17 == a2) {
        unsigned __int16 v9 = v16;
      }
      else {
        unsigned __int16 v9 = *((_WORD *)v11 + 5);
      }
LABEL_5:
      if (v12 != v9)
      {
        uint64_t v28 = (unsigned __int8 *)*((unsigned __int16 *)v11 + 21);
        if (!*((_WORD *)v11 + 21)) {
          return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        }
        unsigned int v29 = v11[4];
        if (*((unsigned char *)v11 + 47))
        {
          if (v28 < 0x1E)
          {
            uint64_t v30 = 0;
            double result = (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            while (1)
            {
              unsigned int v31 = v30[(void)v29];
              if (v31 >= a2) {
                break;
              }
              if (v28 == ++v30) {
                return result;
              }
            }
            if (v31 != a2) {
              LOWORD(v30) = *((_WORD *)v11 + 21);
            }
            if (v28 > (unsigned __int16)v30) {
              return (uint64_t)&v29[4 * (unsigned __int16)v30 + *((unsigned __int16 *)v11 + 20)];
            }
            return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
          }
          uint64_t v30 = v11[4];
          unint64_t v44 = *((unsigned __int16 *)v11 + 21);
          do
          {
            unint64_t v45 = v44 >> 1;
            long long v46 = &v30[v44 >> 1];
            unsigned int v48 = *v46;
            long long v47 = v46 + 1;
            v44 += ~(v44 >> 1);
            if (v48 < a2) {
              uint64_t v30 = v47;
            }
            else {
              unint64_t v44 = v45;
            }
          }
          while (v44);
          if (v30 == &v28[(void)v29] || *v30 != a2) {
            return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
          }
        }
        else
        {
          uint64_t v42 = *((unsigned __int16 *)v11 + 21);
          uint64_t v30 = v11[4];
          while (*v30 != a2)
          {
            ++v30;
            if (!--v42)
            {
              LOWORD(v30) = (_WORD)v29 + (_WORD)v28;
              break;
            }
          }
        }
        LOWORD(v30) = (_WORD)v30 - (_WORD)v29;
        if (v28 > (unsigned __int16)v30) {
          return (uint64_t)&v29[4 * (unsigned __int16)v30 + *((unsigned __int16 *)v11 + 20)];
        }
        return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      }
LABEL_6:
      v7 += 8;
      if (v7 == v8) {
        goto LABEL_30;
      }
    }
    uint64_t v22 = *((unsigned __int16 *)v11 + 5);
    uint64_t v14 = *v11;
    while (*v14 != a2)
    {
      ++v14;
      if (!--v22)
      {
        LOWORD(v14) = v13 + v12;
        break;
      }
    }
LABEL_26:
    unsigned __int16 v9 = (_WORD)v14 - v13;
    goto LABEL_5;
  }
LABEL_30:
  unint64_t v23 = *(unsigned __int8 ****)(v4 + 72);
  if (!v23) {
    goto LABEL_61;
  }
  unsigned __int16 v11 = *v23;
  uint64_t v24 = *((unsigned __int16 *)v11 + 5);
  if (!*((_WORD *)v11 + 5)) {
    goto LABEL_61;
  }
  uint64_t v25 = (uint64_t)*v11;
  if (!*((unsigned char *)v11 + 15))
  {
    uint64_t v32 = *((unsigned __int16 *)v11 + 5);
    uint64_t v33 = *v11;
    while (*v33 != a2)
    {
      ++v33;
      if (!--v32)
      {
        LOWORD(v33) = v25 + v24;
        break;
      }
    }
LABEL_60:
    if (v24 != (unsigned __int16)((_WORD)v33 - v25)) {
      goto LABEL_68;
    }
    goto LABEL_61;
  }
  if (v24 >= 0x1E)
  {
    uint64_t v33 = *v11;
    unint64_t v34 = *((unsigned __int16 *)v11 + 5);
    do
    {
      unint64_t v35 = v34 >> 1;
      uint64_t v36 = &v33[v34 >> 1];
      unsigned int v38 = *v36;
      unint64_t v37 = v36 + 1;
      v34 += ~(v34 >> 1);
      if (v38 < a2) {
        uint64_t v33 = v37;
      }
      else {
        unint64_t v34 = v35;
      }
    }
    while (v34);
    if (v33 != (unsigned __int8 *)(v25 + v24) && *v33 == a2) {
      goto LABEL_60;
    }
LABEL_61:
    if (a4) {
      *a4 = 0;
    }
    return (uint64_t)gss::defaultValueForKey<gss::ScenePropertyID,int>(a2);
  }
  uint64_t v26 = 0;
  while (1)
  {
    unsigned int v27 = *(unsigned __int8 *)(v25 + v26);
    if (v27 >= a2) {
      break;
    }
    if (v24 == ++v26) {
      goto LABEL_61;
    }
  }
  if (v27 == a2) {
    unsigned __int16 v39 = v26;
  }
  else {
    unsigned __int16 v39 = *((_WORD *)v11 + 5);
  }
  if (v24 == v39) {
    goto LABEL_61;
  }
LABEL_68:
  char v40 = (unsigned __int8 *)*((unsigned __int16 *)v11 + 21);
  if (!*((_WORD *)v11 + 21)) {
    return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
  unsigned int v29 = v11[4];
  if (*((unsigned char *)v11 + 47))
  {
    if (v40 < 0x1E)
    {
      uint64_t v30 = 0;
      double result = (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      while (1)
      {
        unsigned int v41 = v30[(void)v29];
        if (v41 >= a2) {
          break;
        }
        if (v40 == ++v30) {
          return result;
        }
      }
      if (v41 != a2) {
        LOWORD(v30) = *((_WORD *)v11 + 21);
      }
      if (v40 == (unsigned __int16)v30) {
        return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      }
      goto LABEL_109;
    }
    uint64_t v30 = v11[4];
    unint64_t v49 = *((unsigned __int16 *)v11 + 21);
    do
    {
      unint64_t v50 = v49 >> 1;
      long long v51 = &v30[v49 >> 1];
      unsigned int v53 = *v51;
      long long v52 = v51 + 1;
      v49 += ~(v49 >> 1);
      if (v53 < a2) {
        uint64_t v30 = v52;
      }
      else {
        unint64_t v49 = v50;
      }
    }
    while (v49);
    if (v30 == &v40[(void)v29] || *v30 != a2) {
      return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
    }
  }
  else
  {
    uint64_t v43 = *((unsigned __int16 *)v11 + 21);
    uint64_t v30 = v11[4];
    while (*v30 != a2)
    {
      ++v30;
      if (!--v43)
      {
        LOWORD(v30) = (_WORD)v29 + (_WORD)v40;
        break;
      }
    }
  }
  LOWORD(v30) = (_WORD)v30 - (_WORD)v29;
  if (v40 == (unsigned __int16)v30) {
    return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
LABEL_109:
  if (v40 > (unsigned __int16)v30) {
    return (uint64_t)&v29[4 * (unsigned __int16)v30 + *((unsigned __int16 *)v11 + 20)];
  }
  return result;
}

unint64_t gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<BOOL>(unint64_t result, unsigned int a2, unsigned int a3, unsigned char *a4)
{
  uint64_t v4 = *(void *)(result + 16 * a3 + 16);
  if (!v4)
  {
    if (a4) {
      *a4 = 0;
    }
    return (unint64_t)gss::defaultValueForKey<gss::ScenePropertyID,BOOL>();
  }
  uint64_t v5 = (char *)(result + 16 * a3);
  uint64_t v6 = *((unsigned __int16 *)v5 + 28);
  if (*((_WORD *)v5 + 28))
  {
    uint64_t v7 = *((void *)v5 + 6);
    uint64_t v8 = v7 + 8 * v6;
    while (1)
    {
      uint64_t v10 = *(unsigned __int8 ****)(*(void *)v7 + 72);
      if (!v10) {
        goto LABEL_6;
      }
      unsigned __int16 v11 = *v10;
      uint64_t v12 = *((unsigned __int16 *)v11 + 5);
      if (!*((_WORD *)v11 + 5))
      {
        unsigned __int16 v9 = 0;
        goto LABEL_5;
      }
      uint64_t v13 = (uint64_t)*v11;
      if (!*((unsigned char *)v11 + 15)) {
        break;
      }
      uint64_t v14 = *v11;
      unint64_t v15 = *((unsigned __int16 *)v11 + 5);
      if (v12 >= 0x1E)
      {
        do
        {
          unint64_t v18 = v15 >> 1;
          uint64_t v19 = &v14[v15 >> 1];
          unsigned int v21 = *v19;
          unint64_t v20 = v19 + 1;
          double result = v21;
          v15 += ~(v15 >> 1);
          if (v21 < a2) {
            uint64_t v14 = v20;
          }
          else {
            unint64_t v15 = v18;
          }
        }
        while (v15);
        if (v14 == (unsigned __int8 *)(v13 + v12) || *v14 != a2) {
          goto LABEL_6;
        }
        goto LABEL_26;
      }
      uint64_t v16 = 0;
      while (1)
      {
        unsigned int v17 = *(unsigned __int8 *)(v13 + v16);
        if (v17 >= a2) {
          break;
        }
        if (v12 == ++v16) {
          goto LABEL_6;
        }
      }
      if (v17 == a2) {
        unsigned __int16 v9 = v16;
      }
      else {
        unsigned __int16 v9 = *((_WORD *)v11 + 5);
      }
LABEL_5:
      if (v12 != v9)
      {
        uint64_t v28 = (unsigned __int8 *)*((unsigned __int16 *)v11 + 13);
        if (!*((_WORD *)v11 + 13)) {
          return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        }
        unsigned int v29 = v11[2];
        if (*((unsigned char *)v11 + 31))
        {
          if (v28 < 0x1E)
          {
            uint64_t v30 = 0;
            double result = (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            while (1)
            {
              unsigned int v31 = v30[(void)v29];
              if (v31 >= a2) {
                break;
              }
              if (v28 == ++v30) {
                return result;
              }
            }
            if (v31 != a2) {
              LOWORD(v30) = *((_WORD *)v11 + 13);
            }
            if (v28 > (unsigned __int16)v30) {
              return (unint64_t)&v29[*((unsigned __int16 *)v11 + 12) + (unsigned __int16)v30];
            }
            return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
          }
          uint64_t v30 = v11[2];
          unint64_t v44 = *((unsigned __int16 *)v11 + 13);
          do
          {
            unint64_t v45 = v44 >> 1;
            long long v46 = &v30[v44 >> 1];
            unsigned int v48 = *v46;
            long long v47 = v46 + 1;
            v44 += ~(v44 >> 1);
            if (v48 < a2) {
              uint64_t v30 = v47;
            }
            else {
              unint64_t v44 = v45;
            }
          }
          while (v44);
          if (v30 == &v28[(void)v29] || *v30 != a2) {
            return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
          }
        }
        else
        {
          uint64_t v42 = *((unsigned __int16 *)v11 + 13);
          uint64_t v30 = v11[2];
          while (*v30 != a2)
          {
            ++v30;
            if (!--v42)
            {
              LOWORD(v30) = (_WORD)v29 + (_WORD)v28;
              break;
            }
          }
        }
        LOWORD(v30) = (_WORD)v30 - (_WORD)v29;
        if (v28 > (unsigned __int16)v30) {
          return (unint64_t)&v29[*((unsigned __int16 *)v11 + 12) + (unsigned __int16)v30];
        }
        return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      }
LABEL_6:
      v7 += 8;
      if (v7 == v8) {
        goto LABEL_30;
      }
    }
    uint64_t v22 = *((unsigned __int16 *)v11 + 5);
    uint64_t v14 = *v11;
    while (*v14 != a2)
    {
      ++v14;
      if (!--v22)
      {
        LOWORD(v14) = v13 + v12;
        break;
      }
    }
LABEL_26:
    unsigned __int16 v9 = (_WORD)v14 - v13;
    goto LABEL_5;
  }
LABEL_30:
  unint64_t v23 = *(unsigned __int8 ****)(v4 + 72);
  if (!v23) {
    goto LABEL_61;
  }
  unsigned __int16 v11 = *v23;
  uint64_t v24 = *((unsigned __int16 *)v11 + 5);
  if (!*((_WORD *)v11 + 5)) {
    goto LABEL_61;
  }
  uint64_t v25 = (uint64_t)*v11;
  if (!*((unsigned char *)v11 + 15))
  {
    uint64_t v32 = *((unsigned __int16 *)v11 + 5);
    uint64_t v33 = *v11;
    while (*v33 != a2)
    {
      ++v33;
      if (!--v32)
      {
        LOWORD(v33) = v25 + v24;
        break;
      }
    }
LABEL_60:
    if (v24 != (unsigned __int16)((_WORD)v33 - v25)) {
      goto LABEL_68;
    }
    goto LABEL_61;
  }
  if (v24 >= 0x1E)
  {
    uint64_t v33 = *v11;
    unint64_t v34 = *((unsigned __int16 *)v11 + 5);
    do
    {
      unint64_t v35 = v34 >> 1;
      uint64_t v36 = &v33[v34 >> 1];
      unsigned int v38 = *v36;
      unint64_t v37 = v36 + 1;
      v34 += ~(v34 >> 1);
      if (v38 < a2) {
        uint64_t v33 = v37;
      }
      else {
        unint64_t v34 = v35;
      }
    }
    while (v34);
    if (v33 != (unsigned __int8 *)(v25 + v24) && *v33 == a2) {
      goto LABEL_60;
    }
LABEL_61:
    if (a4) {
      *a4 = 0;
    }
    return (unint64_t)gss::defaultValueForKey<gss::ScenePropertyID,BOOL>();
  }
  uint64_t v26 = 0;
  while (1)
  {
    unsigned int v27 = *(unsigned __int8 *)(v25 + v26);
    if (v27 >= a2) {
      break;
    }
    if (v24 == ++v26) {
      goto LABEL_61;
    }
  }
  if (v27 == a2) {
    unsigned __int16 v39 = v26;
  }
  else {
    unsigned __int16 v39 = *((_WORD *)v11 + 5);
  }
  if (v24 == v39) {
    goto LABEL_61;
  }
LABEL_68:
  char v40 = (unsigned __int8 *)*((unsigned __int16 *)v11 + 13);
  if (!*((_WORD *)v11 + 13)) {
    return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
  unsigned int v29 = v11[2];
  if (*((unsigned char *)v11 + 31))
  {
    if (v40 < 0x1E)
    {
      uint64_t v30 = 0;
      double result = (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      while (1)
      {
        unsigned int v41 = v30[(void)v29];
        if (v41 >= a2) {
          break;
        }
        if (v40 == ++v30) {
          return result;
        }
      }
      if (v41 != a2) {
        LOWORD(v30) = *((_WORD *)v11 + 13);
      }
      if (v40 == (unsigned __int16)v30) {
        return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      }
      goto LABEL_109;
    }
    uint64_t v30 = v11[2];
    unint64_t v49 = *((unsigned __int16 *)v11 + 13);
    do
    {
      unint64_t v50 = v49 >> 1;
      long long v51 = &v30[v49 >> 1];
      unsigned int v53 = *v51;
      long long v52 = v51 + 1;
      v49 += ~(v49 >> 1);
      if (v53 < a2) {
        uint64_t v30 = v52;
      }
      else {
        unint64_t v49 = v50;
      }
    }
    while (v49);
    if (v30 == &v40[(void)v29] || *v30 != a2) {
      return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
    }
  }
  else
  {
    uint64_t v43 = *((unsigned __int16 *)v11 + 13);
    uint64_t v30 = v11[2];
    while (*v30 != a2)
    {
      ++v30;
      if (!--v43)
      {
        LOWORD(v30) = (_WORD)v29 + (_WORD)v40;
        break;
      }
    }
  }
  LOWORD(v30) = (_WORD)v30 - (_WORD)v29;
  if (v40 == (unsigned __int16)v30) {
    return (unint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,BOOL>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
LABEL_109:
  if (v40 > (unsigned __int16)v30) {
    return (unint64_t)&v29[*((unsigned __int16 *)v11 + 12) + (unsigned __int16)v30];
  }
  return result;
}

uint64_t gss::RenderStyle<gss::ScenePropertyID>::styleValueForKey<gm::Matrix<float,2,1>>(uint64_t result, unsigned int a2, unsigned int a3, unsigned char *a4)
{
  uint64_t v4 = *(void *)(result + 16 * a3 + 16);
  if (!v4)
  {
    if (a4) {
      *a4 = 0;
    }
    return (uint64_t)gss::defaultValueForKey<gss::ScenePropertyID,gm::Matrix<float,2,1>>();
  }
  uint64_t v5 = result + 16 * a3;
  uint64_t v6 = *(unsigned __int16 *)(v5 + 56);
  if (*(_WORD *)(v5 + 56))
  {
    uint64_t v7 = *(void *)(v5 + 48);
    uint64_t v8 = v7 + 8 * v6;
    while (1)
    {
      uint64_t v10 = *(unsigned __int8 ****)(*(void *)v7 + 72);
      if (!v10) {
        goto LABEL_6;
      }
      unsigned __int16 v11 = *v10;
      uint64_t v12 = *((unsigned __int16 *)v11 + 5);
      if (!*((_WORD *)v11 + 5))
      {
        unsigned __int16 v9 = 0;
        goto LABEL_5;
      }
      uint64_t v13 = (uint64_t)*v11;
      if (!*((unsigned char *)v11 + 15)) {
        break;
      }
      uint64_t v14 = *v11;
      unint64_t v15 = *((unsigned __int16 *)v11 + 5);
      if (v12 >= 0x1E)
      {
        do
        {
          unint64_t v18 = v15 >> 1;
          uint64_t v19 = &v14[v15 >> 1];
          unsigned int v21 = *v19;
          unint64_t v20 = v19 + 1;
          double result = v21;
          v15 += ~(v15 >> 1);
          if (v21 < a2) {
            uint64_t v14 = v20;
          }
          else {
            unint64_t v15 = v18;
          }
        }
        while (v15);
        if (v14 == (unsigned __int8 *)(v13 + v12) || *v14 != a2) {
          goto LABEL_6;
        }
        goto LABEL_26;
      }
      uint64_t v16 = 0;
      while (1)
      {
        unsigned int v17 = *(unsigned __int8 *)(v13 + v16);
        if (v17 >= a2) {
          break;
        }
        if (v12 == ++v16) {
          goto LABEL_6;
        }
      }
      if (v17 == a2) {
        unsigned __int16 v9 = v16;
      }
      else {
        unsigned __int16 v9 = *((_WORD *)v11 + 5);
      }
LABEL_5:
      if (v12 != v9)
      {
        uint64_t v28 = (unsigned __int8 *)*((unsigned __int16 *)v11 + 29);
        if (!*((_WORD *)v11 + 29)) {
          return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
        }
        unsigned int v29 = v11[6];
        if (*((unsigned char *)v11 + 63))
        {
          if (v28 < 0x1E)
          {
            uint64_t v30 = 0;
            double result = (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            while (1)
            {
              unsigned int v31 = v30[(void)v29];
              if (v31 >= a2) {
                break;
              }
              if (v28 == ++v30) {
                return result;
              }
            }
            if (v31 != a2) {
              LOWORD(v30) = *((_WORD *)v11 + 29);
            }
            if (v28 > (unsigned __int16)v30) {
              return (uint64_t)&v29[8 * (unsigned __int16)v30 + *((unsigned __int16 *)v11 + 28)];
            }
            return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
          }
          uint64_t v30 = v11[6];
          unint64_t v44 = *((unsigned __int16 *)v11 + 29);
          do
          {
            unint64_t v45 = v44 >> 1;
            long long v46 = &v30[v44 >> 1];
            unsigned int v48 = *v46;
            long long v47 = v46 + 1;
            v44 += ~(v44 >> 1);
            if (v48 < a2) {
              uint64_t v30 = v47;
            }
            else {
              unint64_t v44 = v45;
            }
          }
          while (v44);
          if (v30 == &v28[(void)v29] || *v30 != a2) {
            return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
          }
        }
        else
        {
          uint64_t v42 = *((unsigned __int16 *)v11 + 29);
          uint64_t v30 = v11[6];
          while (*v30 != a2)
          {
            ++v30;
            if (!--v42)
            {
              LOWORD(v30) = (_WORD)v29 + (_WORD)v28;
              break;
            }
          }
        }
        LOWORD(v30) = (_WORD)v30 - (_WORD)v29;
        if (v28 > (unsigned __int16)v30) {
          return (uint64_t)&v29[8 * (unsigned __int16)v30 + *((unsigned __int16 *)v11 + 28)];
        }
        return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      }
LABEL_6:
      v7 += 8;
      if (v7 == v8) {
        goto LABEL_30;
      }
    }
    uint64_t v22 = *((unsigned __int16 *)v11 + 5);
    uint64_t v14 = *v11;
    while (*v14 != a2)
    {
      ++v14;
      if (!--v22)
      {
        LOWORD(v14) = v13 + v12;
        break;
      }
    }
LABEL_26:
    unsigned __int16 v9 = (_WORD)v14 - v13;
    goto LABEL_5;
  }
LABEL_30:
  unint64_t v23 = *(unsigned __int8 ****)(v4 + 72);
  if (!v23) {
    goto LABEL_61;
  }
  unsigned __int16 v11 = *v23;
  uint64_t v24 = *((unsigned __int16 *)v11 + 5);
  if (!*((_WORD *)v11 + 5)) {
    goto LABEL_61;
  }
  uint64_t v25 = (uint64_t)*v11;
  if (!*((unsigned char *)v11 + 15))
  {
    uint64_t v32 = *((unsigned __int16 *)v11 + 5);
    uint64_t v33 = *v11;
    while (*v33 != a2)
    {
      ++v33;
      if (!--v32)
      {
        LOWORD(v33) = v25 + v24;
        break;
      }
    }
LABEL_60:
    if (v24 != (unsigned __int16)((_WORD)v33 - v25)) {
      goto LABEL_68;
    }
    goto LABEL_61;
  }
  if (v24 >= 0x1E)
  {
    uint64_t v33 = *v11;
    unint64_t v34 = *((unsigned __int16 *)v11 + 5);
    do
    {
      unint64_t v35 = v34 >> 1;
      uint64_t v36 = &v33[v34 >> 1];
      unsigned int v38 = *v36;
      unint64_t v37 = v36 + 1;
      v34 += ~(v34 >> 1);
      if (v38 < a2) {
        uint64_t v33 = v37;
      }
      else {
        unint64_t v34 = v35;
      }
    }
    while (v34);
    if (v33 != (unsigned __int8 *)(v25 + v24) && *v33 == a2) {
      goto LABEL_60;
    }
LABEL_61:
    if (a4) {
      *a4 = 0;
    }
    return (uint64_t)gss::defaultValueForKey<gss::ScenePropertyID,gm::Matrix<float,2,1>>();
  }
  uint64_t v26 = 0;
  while (1)
  {
    unsigned int v27 = *(unsigned __int8 *)(v25 + v26);
    if (v27 >= a2) {
      break;
    }
    if (v24 == ++v26) {
      goto LABEL_61;
    }
  }
  if (v27 == a2) {
    unsigned __int16 v39 = v26;
  }
  else {
    unsigned __int16 v39 = *((_WORD *)v11 + 5);
  }
  if (v24 == v39) {
    goto LABEL_61;
  }
LABEL_68:
  char v40 = (unsigned __int8 *)*((unsigned __int16 *)v11 + 29);
  if (!*((_WORD *)v11 + 29)) {
    return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
  unsigned int v29 = v11[6];
  if (*((unsigned char *)v11 + 63))
  {
    if (v40 < 0x1E)
    {
      uint64_t v30 = 0;
      double result = (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      while (1)
      {
        unsigned int v41 = v30[(void)v29];
        if (v41 >= a2) {
          break;
        }
        if (v40 == ++v30) {
          return result;
        }
      }
      if (v41 != a2) {
        LOWORD(v30) = *((_WORD *)v11 + 29);
      }
      if (v40 == (unsigned __int16)v30) {
        return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      }
      goto LABEL_109;
    }
    uint64_t v30 = v11[6];
    unint64_t v49 = *((unsigned __int16 *)v11 + 29);
    do
    {
      unint64_t v50 = v49 >> 1;
      long long v51 = &v30[v49 >> 1];
      unsigned int v53 = *v51;
      long long v52 = v51 + 1;
      v49 += ~(v49 >> 1);
      if (v53 < a2) {
        uint64_t v30 = v52;
      }
      else {
        unint64_t v49 = v50;
      }
    }
    while (v49);
    if (v30 == &v40[(void)v29] || *v30 != a2) {
      return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
    }
  }
  else
  {
    uint64_t v43 = *((unsigned __int16 *)v11 + 29);
    uint64_t v30 = v11[6];
    while (*v30 != a2)
    {
      ++v30;
      if (!--v43)
      {
        LOWORD(v30) = (_WORD)v29 + (_WORD)v40;
        break;
      }
    }
  }
  LOWORD(v30) = (_WORD)v30 - (_WORD)v29;
  if (v40 == (unsigned __int16)v30) {
    return (uint64_t)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
LABEL_109:
  if (v40 > (unsigned __int16)v30) {
    return (uint64_t)&v29[8 * (unsigned __int16)v30 + *((unsigned __int16 *)v11 + 28)];
  }
  return result;
}

unsigned __int8 *gss::RenderStyle<gss::ScenePropertyID>::styleValueForKeyAtZ<gm::Matrix<float,2,1>>(unsigned __int8 *result, unsigned int a2, int a3, unsigned char *a4)
{
  uint64_t v4 = *(void *)&result[16 * a3 + 16];
  if (!v4)
  {
    if (a4) {
      *a4 = 0;
    }
    return (unsigned __int8 *)gss::defaultValueForKey<gss::ScenePropertyID,gm::Matrix<float,2,1>>();
  }
  uint64_t v5 = (char *)&result[16 * a3];
  uint64_t v6 = *((unsigned __int16 *)v5 + 28);
  if (!*((_WORD *)v5 + 28))
  {
LABEL_32:
    uint64_t v24 = *(uint64_t **)(v4 + 72);
    if (v24)
    {
      uint64_t v25 = a2 >= 0x17 ? 23 : a2;
      unsigned int v26 = *((unsigned __int8 *)v24 + v25 + 16);
      uint64_t v27 = *v24;
      uint64_t v28 = v27 + 80 * v26;
      unint64_t v29 = *(unsigned __int16 *)(v28 + 10);
      if (*(_WORD *)(v28 + 10))
      {
        uint64_t v30 = *(unsigned __int8 **)v28;
        if (!*(unsigned char *)(v28 + 15))
        {
          uint64_t v40 = *(unsigned __int16 *)(v28 + 10);
          unsigned int v41 = *(unsigned __int8 **)v28;
          while (*v41 != 32)
          {
            ++v41;
            if (!--v40)
            {
              LOWORD(v41) = (_WORD)v30 + v29;
              break;
            }
          }
LABEL_65:
          if (v29 != (unsigned __int16)((_WORD)v41 - (_WORD)v30)) {
            goto LABEL_73;
          }
          goto LABEL_66;
        }
        if (v29 < 0x1E)
        {
          uint64_t v31 = 0;
          while (1)
          {
            unsigned int v32 = v30[v31];
            if (v32 >= 0x20) {
              break;
            }
            if (v29 == ++v31) {
              goto LABEL_66;
            }
          }
          if (v32 == 32) {
            unsigned __int16 v47 = v31;
          }
          else {
            unsigned __int16 v47 = v29;
          }
          if (v29 != v47)
          {
LABEL_73:
            uint64_t v48 = v27 + 80 * v26;
            unint64_t v49 = (unsigned __int8 *)*(unsigned __int16 *)(v48 + 58);
            if (!*(_WORD *)(v48 + 58)) {
              return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            }
            uint64_t v50 = v27 + 80 * v26;
            uint64_t v37 = *(void *)(v50 + 48);
            if (*(unsigned char *)(v50 + 63))
            {
              if (v49 < 0x1E)
              {
                unsigned int v38 = 0;
                double result = (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
                while (1)
                {
                  unsigned int v51 = v38[v37];
                  if (v51 >= 0x20) {
                    break;
                  }
                  if (v49 == ++v38) {
                    return result;
                  }
                }
                if (v51 != 32) {
                  LOWORD(v38) = (_WORD)v49;
                }
                if (v49 == (unsigned __int16)v38) {
                  return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
                }
                goto LABEL_115;
              }
              unsigned int v38 = *(unsigned __int8 **)(v50 + 48);
              unint64_t v59 = (unint64_t)v49;
              do
              {
                unint64_t v60 = (unsigned char *)(v59 >> 1);
                int8x8_t v61 = &v38[v59 >> 1];
                unsigned int v63 = *v61;
                uint8x8_t v62 = v61 + 1;
                v59 += ~(v59 >> 1);
                if (v63 < 0x20) {
                  unsigned int v38 = v62;
                }
                else {
                  unint64_t v59 = (unint64_t)v60;
                }
              }
              while (v59);
              if (v38 == &v49[v37] || *v38 != 32) {
                return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
              }
            }
            else
            {
              unsigned int v53 = v49;
              unsigned int v38 = *(unsigned __int8 **)(v50 + 48);
              while (*v38 != 32)
              {
                ++v38;
                if (!--v53)
                {
                  LOWORD(v38) = v37 + (_WORD)v49;
                  break;
                }
              }
            }
            LOWORD(v38) = (_WORD)v38 - v37;
            if (v49 == (unsigned __int16)v38) {
              return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
            }
LABEL_115:
            if (v49 > (unsigned __int16)v38)
            {
              uint64_t v64 = v27 + 80 * v26;
              return (unsigned __int8 *)(v37 + *(unsigned __int16 *)(v64 + 56) + 8 * (unsigned __int16)v38);
            }
            return result;
          }
          goto LABEL_66;
        }
        unsigned int v41 = *(unsigned __int8 **)v28;
        unint64_t v42 = v29;
        do
        {
          unint64_t v43 = v42 >> 1;
          unint64_t v44 = &v41[v42 >> 1];
          unsigned int v46 = *v44;
          unint64_t v45 = v44 + 1;
          v42 += ~(v42 >> 1);
          if (v46 < 0x20) {
            unsigned int v41 = v45;
          }
          else {
            unint64_t v42 = v43;
          }
        }
        while (v42);
        if (v41 != &v30[v29] && *v41 == 32) {
          goto LABEL_65;
        }
      }
    }
LABEL_66:
    if (a4) {
      *a4 = 0;
    }
    return (unsigned __int8 *)gss::defaultValueForKey<gss::ScenePropertyID,gm::Matrix<float,2,1>>();
  }
  uint64_t v7 = *((void *)v5 + 6);
  uint64_t v8 = v7 + 8 * v6;
  if (a2 >= 0x17) {
    uint64_t v9 = 23;
  }
  else {
    uint64_t v9 = a2;
  }
  while (1)
  {
    unsigned __int16 v11 = *(uint64_t **)(*(void *)v7 + 72);
    if (!v11) {
      goto LABEL_8;
    }
    uint64_t v14 = *v11;
    uint64_t v13 = v11 + 2;
    uint64_t v12 = v14;
    double result = (unsigned __int8 *)(v14 + 80 * *((unsigned __int8 *)v13 + a2));
    unint64_t v15 = (unsigned __int8 *)*((unsigned __int16 *)result + 5);
    if (!*((_WORD *)result + 5))
    {
      unsigned __int16 v10 = 0;
      goto LABEL_7;
    }
    uint64_t v16 = *(unsigned __int8 **)result;
    if (!result[15])
    {
      uint64_t v23 = *((unsigned __int16 *)result + 5);
      double result = *(unsigned __int8 **)result;
      while (*result != 32)
      {
        ++result;
        if (!--v23)
        {
          double result = &v15[(void)v16];
          break;
        }
      }
LABEL_28:
      unsigned __int16 v10 = (_WORD)result - (_WORD)v16;
      goto LABEL_7;
    }
    double result = *(unsigned __int8 **)result;
    unint64_t v17 = (unint64_t)v15;
    if (v15 >= 0x1E)
    {
      do
      {
        uint64_t v19 = (char *)(v17 >> 1);
        unint64_t v20 = &result[v17 >> 1];
        unsigned int v22 = *v20;
        unsigned int v21 = v20 + 1;
        v17 += ~(v17 >> 1);
        if (v22 < 0x20) {
          double result = v21;
        }
        else {
          unint64_t v17 = (unint64_t)v19;
        }
      }
      while (v17);
      if (result == &v15[(void)v16] || *result != 32) {
        goto LABEL_8;
      }
      goto LABEL_28;
    }
    double result = 0;
    while (1)
    {
      unsigned int v18 = result[(void)v16];
      if (v18 >= 0x20) {
        break;
      }
      if (v15 == ++result) {
        goto LABEL_8;
      }
    }
    unsigned __int16 v10 = v18 == 32 ? (unsigned __int16)result : (unsigned __int16)v15;
LABEL_7:
    if (v15 != v10) {
      break;
    }
LABEL_8:
    v7 += 8;
    if (v7 == v8) {
      goto LABEL_32;
    }
  }
  unsigned int v33 = *((unsigned __int8 *)v13 + v9);
  uint64_t v34 = v12 + 80 * *((unsigned __int8 *)v13 + v9);
  unint64_t v35 = (unsigned __int8 *)*(unsigned __int16 *)(v34 + 58);
  if (!*(_WORD *)(v34 + 58)) {
    return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
  uint64_t v36 = v12 + 80 * *((unsigned __int8 *)v13 + v9);
  uint64_t v37 = *(void *)(v36 + 48);
  if (!*(unsigned char *)(v36 + 63))
  {
    long long v52 = v35;
    unsigned int v38 = *(unsigned __int8 **)(v36 + 48);
    while (*v38 != 32)
    {
      ++v38;
      if (!--v52)
      {
        LOWORD(v38) = v37 + (_WORD)v35;
        break;
      }
    }
LABEL_95:
    LOWORD(v38) = (_WORD)v38 - v37;
    if (v35 > (unsigned __int16)v38) {
      goto LABEL_109;
    }
    return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
  if (v35 >= 0x1E)
  {
    unsigned int v38 = *(unsigned __int8 **)(v36 + 48);
    unint64_t v54 = (unint64_t)v35;
    do
    {
      long long v55 = (unsigned char *)(v54 >> 1);
      long long v56 = &v38[v54 >> 1];
      unsigned int v58 = *v56;
      long long v57 = v56 + 1;
      v54 += ~(v54 >> 1);
      if (v58 < 0x20) {
        unsigned int v38 = v57;
      }
      else {
        unint64_t v54 = (unint64_t)v55;
      }
    }
    while (v54);
    if (v38 == &v35[v37] || *v38 != 32) {
      return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
    }
    goto LABEL_95;
  }
  unsigned int v38 = 0;
  double result = (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  while (1)
  {
    unsigned int v39 = v38[v37];
    if (v39 >= 0x20) {
      break;
    }
    if (v35 == ++v38) {
      return result;
    }
  }
  if (v39 != 32) {
    LOWORD(v38) = (_WORD)v35;
  }
  if (v35 > (unsigned __int16)v38)
  {
LABEL_109:
    uint64_t v64 = v12 + 80 * v33;
    return (unsigned __int8 *)(v37 + *(unsigned __int16 *)(v64 + 56) + 8 * (unsigned __int16)v38);
  }
  return (unsigned __int8 *)&gss::PropertySetValueHelper<gss::ScenePropertyID,gm::Matrix<float,2,1>>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
}

int *gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<unsigned int>(int *result, unsigned int a2, unsigned int a3, unsigned char *a4)
{
  if (!result) {
    goto LABEL_25;
  }
  uint64_t v4 = a3 >= 0x17 ? 23 : a3;
  unsigned int v5 = *((unsigned __int8 *)result + v4 + 16);
  uint64_t v6 = *(void *)result;
  uint64_t v7 = *(void *)result + 80 * v5;
  unint64_t v8 = *(unsigned __int16 *)(v7 + 10);
  if (!*(_WORD *)(v7 + 10)) {
    goto LABEL_25;
  }
  uint64_t v9 = *(unsigned __int8 **)v7;
  if (!*(unsigned char *)(v7 + 15))
  {
    uint64_t v12 = *(unsigned __int16 *)(v7 + 10);
    uint64_t v13 = *(unsigned __int8 **)v7;
    while (*v13 != a2)
    {
      ++v13;
      if (!--v12)
      {
        LOWORD(v13) = (_WORD)v9 + v8;
        break;
      }
    }
LABEL_24:
    if (v8 != (unsigned __int16)((_WORD)v13 - (_WORD)v9)) {
      goto LABEL_32;
    }
LABEL_25:
    if (a4) {
      *a4 = 0;
    }
    return (int *)gss::defaultValueForKey<gss::ScenePropertyID,unsigned int>(a2);
  }
  if (v8 >= 0x1E)
  {
    uint64_t v13 = *(unsigned __int8 **)v7;
    unint64_t v14 = v8;
    do
    {
      unint64_t v15 = v14 >> 1;
      uint64_t v16 = &v13[v14 >> 1];
      unsigned int v18 = *v16;
      unint64_t v17 = v16 + 1;
      v14 += ~(v14 >> 1);
      if (v18 < a2) {
        uint64_t v13 = v17;
      }
      else {
        unint64_t v14 = v15;
      }
    }
    while (v14);
    if (v13 == &v9[v8] || *v13 != a2) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  uint64_t v10 = 0;
  while (1)
  {
    unsigned int v11 = v9[v10];
    if (v11 >= a2) {
      break;
    }
    if (v8 == ++v10) {
      goto LABEL_25;
    }
  }
  if (v11 == a2) {
    unsigned __int16 v19 = v10;
  }
  else {
    unsigned __int16 v19 = v8;
  }
  if (v8 == v19) {
    goto LABEL_25;
  }
LABEL_32:
  uint64_t v20 = v6 + 80 * v5;
  unsigned int v21 = (unsigned __int8 *)*(unsigned __int16 *)(v20 + 42);
  if (!*(_WORD *)(v20 + 42)) {
    return &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
  uint64_t v22 = v6 + 80 * v5;
  uint64_t v23 = *(void *)(v22 + 32);
  if (*(unsigned char *)(v22 + 47))
  {
    if (v21 < 0x1E)
    {
      uint64_t v24 = 0;
      double result = &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      while (1)
      {
        unsigned int v25 = v24[v23];
        if (v25 >= a2) {
          break;
        }
        if (v21 == ++v24) {
          return result;
        }
      }
      if (v25 != a2) {
        LOWORD(v24) = (_WORD)v21;
      }
      if (v21 != (unsigned __int16)v24) {
        goto LABEL_55;
      }
      return &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
    }
    uint64_t v24 = *(unsigned __int8 **)(v22 + 32);
    uint64_t v27 = v21;
    do
    {
      uint64_t v28 = (unsigned __int8 *)((unint64_t)v27 >> 1);
      unint64_t v29 = &v24[(unint64_t)v27 >> 1];
      unsigned int v31 = *v29;
      uint64_t v30 = v29 + 1;
      v27 += ~((unint64_t)v27 >> 1);
      if (v31 < a2) {
        uint64_t v24 = v30;
      }
      else {
        uint64_t v27 = v28;
      }
    }
    while (v27);
    if (v24 == &v21[v23] || *v24 != a2) {
      return &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
    }
  }
  else
  {
    unsigned int v26 = v21;
    uint64_t v24 = *(unsigned __int8 **)(v22 + 32);
    while (*v24 != a2)
    {
      ++v24;
      if (!--v26)
      {
        LOWORD(v24) = v23 + (_WORD)v21;
        break;
      }
    }
  }
  LOWORD(v24) = (_WORD)v24 - v23;
  if (v21 == (unsigned __int16)v24) {
    return &gss::PropertySetValueHelper<gss::ScenePropertyID,unsigned int>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
LABEL_55:
  if (v21 > (unsigned __int16)v24) {
    return (int *)(v23 + *(unsigned __int16 *)(v6 + 80 * v5 + 40) + 4 * (unsigned __int16)v24);
  }
  return result;
}

int *gss::CartoStyle<gss::ScenePropertyID>::valueForKeyAtZ<float>(int *result, unsigned int a2, unsigned int a3, unsigned char *a4)
{
  if (!result) {
    goto LABEL_25;
  }
  uint64_t v4 = a3 >= 0x17 ? 23 : a3;
  unsigned int v5 = *((unsigned __int8 *)result + v4 + 16);
  uint64_t v6 = *(void *)result;
  uint64_t v7 = *(void *)result + 80 * v5;
  unint64_t v8 = *(unsigned __int16 *)(v7 + 10);
  if (!*(_WORD *)(v7 + 10)) {
    goto LABEL_25;
  }
  uint64_t v9 = *(unsigned __int8 **)v7;
  if (!*(unsigned char *)(v7 + 15))
  {
    uint64_t v12 = *(unsigned __int16 *)(v7 + 10);
    uint64_t v13 = *(unsigned __int8 **)v7;
    while (*v13 != a2)
    {
      ++v13;
      if (!--v12)
      {
        LOWORD(v13) = (_WORD)v9 + v8;
        break;
      }
    }
LABEL_24:
    if (v8 != (unsigned __int16)((_WORD)v13 - (_WORD)v9)) {
      goto LABEL_32;
    }
LABEL_25:
    if (a4) {
      *a4 = 0;
    }
    return (int *)gss::defaultValueForKey<gss::ScenePropertyID,float>(a2);
  }
  if (v8 >= 0x1E)
  {
    uint64_t v13 = *(unsigned __int8 **)v7;
    unint64_t v14 = v8;
    do
    {
      unint64_t v15 = v14 >> 1;
      uint64_t v16 = &v13[v14 >> 1];
      unsigned int v18 = *v16;
      unint64_t v17 = v16 + 1;
      v14 += ~(v14 >> 1);
      if (v18 < a2) {
        uint64_t v13 = v17;
      }
      else {
        unint64_t v14 = v15;
      }
    }
    while (v14);
    if (v13 == &v9[v8] || *v13 != a2) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  uint64_t v10 = 0;
  while (1)
  {
    unsigned int v11 = v9[v10];
    if (v11 >= a2) {
      break;
    }
    if (v8 == ++v10) {
      goto LABEL_25;
    }
  }
  if (v11 == a2) {
    unsigned __int16 v19 = v10;
  }
  else {
    unsigned __int16 v19 = v8;
  }
  if (v8 == v19) {
    goto LABEL_25;
  }
LABEL_32:
  uint64_t v20 = v6 + 80 * v5;
  unsigned int v21 = (unsigned __int8 *)*(unsigned __int16 *)(v20 + 42);
  if (!*(_WORD *)(v20 + 42)) {
    return &gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
  uint64_t v22 = v6 + 80 * v5;
  uint64_t v23 = *(void *)(v22 + 32);
  if (*(unsigned char *)(v22 + 47))
  {
    if (v21 < 0x1E)
    {
      uint64_t v24 = 0;
      double result = &gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
      while (1)
      {
        unsigned int v25 = v24[v23];
        if (v25 >= a2) {
          break;
        }
        if (v21 == ++v24) {
          return result;
        }
      }
      if (v25 != a2) {
        LOWORD(v24) = (_WORD)v21;
      }
      if (v21 != (unsigned __int16)v24) {
        goto LABEL_55;
      }
      return &gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
    }
    uint64_t v24 = *(unsigned __int8 **)(v22 + 32);
    uint64_t v27 = v21;
    do
    {
      uint64_t v28 = (unsigned __int8 *)((unint64_t)v27 >> 1);
      unint64_t v29 = &v24[(unint64_t)v27 >> 1];
      unsigned int v31 = *v29;
      uint64_t v30 = v29 + 1;
      v27 += ~((unint64_t)v27 >> 1);
      if (v31 < a2) {
        uint64_t v24 = v30;
      }
      else {
        uint64_t v27 = v28;
      }
    }
    while (v27);
    if (v24 == &v21[v23] || *v24 != a2) {
      return &gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
    }
  }
  else
  {
    unsigned int v26 = v21;
    uint64_t v24 = *(unsigned __int8 **)(v22 + 32);
    while (*v24 != a2)
    {
      ++v24;
      if (!--v26)
      {
        LOWORD(v24) = v23 + (_WORD)v21;
        break;
      }
    }
  }
  LOWORD(v24) = (_WORD)v24 - v23;
  if (v21 == (unsigned __int16)v24) {
    return &gss::PropertySetValueHelper<gss::ScenePropertyID,float>::value(gss::ScenePropertyID,gss::StylePropertySet<gss::ScenePropertyID> const&)::_defaultValue;
  }
LABEL_55:
  if (v21 > (unsigned __int16)v24) {
    return (int *)(v23 + *(unsigned __int16 *)(v6 + 80 * v5 + 40) + 4 * (unsigned __int16)v24);
  }
  return result;
}

void sub_1A20194E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t gss::Queryable<gss::ScenePropertyID>::~Queryable(uint64_t a1)
{
  *(void *)a1 = &unk_1EF567528;
  id v2 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 32));
  if (v2) {
    geo::read_write_lock::logFailure(v2, (uint64_t)"destruction", v3);
  }
  uint64_t v4 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v4) {
    std::default_delete<gss::RenderStyle<gss::PropertyID>>::operator()[abi:nn180100](v4);
  }
  unsigned int v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

{
  geo::read_write_lock *v2;
  const char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  *(void *)a1 = &unk_1EF567528;
  id v2 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 32));
  if (v2) {
    geo::read_write_lock::logFailure(v2, (uint64_t)"destruction", v3);
  }
  uint64_t v4 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v4) {
    std::default_delete<gss::RenderStyle<gss::PropertyID>>::operator()[abi:nn180100](v4);
  }
  unsigned int v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      uint64_t v4 = *(a2 - 1);
      uint64_t v5 = *a1;
      if (*(unsigned __int8 *)(*a3 + v4) < *(unsigned __int8 *)(*a3 + v5))
      {
        *a1 = v4;
        *(a2 - 1) = v5;
      }
      return 1;
    case 3:
      uint64_t v16 = *a1;
      uint64_t v17 = a1[1];
      uint64_t v18 = *a3;
      unsigned int v19 = *(unsigned __int8 *)(*a3 + v17);
      unsigned int v20 = *(unsigned __int8 *)(*a3 + v16);
      uint64_t v21 = *(a2 - 1);
      unsigned int v22 = *(unsigned __int8 *)(*a3 + v21);
      if (v19 >= v20)
      {
        if (v22 < v19)
        {
          a1[1] = v21;
          *(a2 - 1) = v17;
          uint64_t v45 = *a1;
          uint64_t v44 = a1[1];
          if (*(unsigned __int8 *)(v18 + v44) < *(unsigned __int8 *)(v18 + v45))
          {
            *a1 = v44;
            a1[1] = v45;
          }
        }
      }
      else if (v22 >= v19)
      {
        *a1 = v17;
        a1[1] = v16;
        uint64_t v46 = *(a2 - 1);
        if (*(unsigned __int8 *)(v18 + v46) < v20)
        {
          a1[1] = v46;
          *(a2 - 1) = v16;
        }
      }
      else
      {
        *a1 = v21;
        *(a2 - 1) = v16;
      }
      return 1;
    case 4:
      uint64_t v23 = a1 + 1;
      uint64_t v24 = a1[1];
      unsigned int v25 = a1 + 2;
      uint64_t v26 = a1[2];
      unsigned int v27 = a1[1];
      uint64_t v28 = *a3;
      unsigned int v29 = *(unsigned __int8 *)(*a3 + v24);
      uint64_t v30 = *a1;
      unsigned int v31 = *(unsigned __int8 *)(*a3 + v30);
      unsigned int v32 = *(unsigned __int8 *)(*a3 + v26);
      if (v29 >= v31)
      {
        if (v32 < v29)
        {
          _DWORD *v23 = v26;
          _DWORD *v25 = v24;
          unsigned int v33 = a1;
          uint64_t v34 = a1 + 1;
          if (v32 >= v31) {
            goto LABEL_39;
          }
          goto LABEL_37;
        }
      }
      else
      {
        if (v32 < v29)
        {
          unsigned int v33 = a1;
          uint64_t v34 = a1 + 2;
          uint64_t v24 = *a1;
          unsigned int v27 = *a1;
LABEL_37:
          *unsigned int v33 = v26;
          *uint64_t v34 = v30;
          goto LABEL_39;
        }
        unsigned int v33 = a1 + 1;
        *a1 = v24;
        a1[1] = v30;
        uint64_t v34 = a1 + 2;
        uint64_t v24 = v30;
        unsigned int v27 = v30;
        if (v32 < v31) {
          goto LABEL_37;
        }
      }
      uint64_t v24 = v26;
      unsigned int v27 = v26;
LABEL_39:
      uint64_t v47 = *(a2 - 1);
      if (*(unsigned __int8 *)(v28 + v47) < *(unsigned __int8 *)(v28 + v24))
      {
        _DWORD *v25 = v47;
        *(a2 - 1) = v27;
        uint64_t v48 = *v25;
        uint64_t v49 = *v23;
        unsigned int v50 = *(unsigned __int8 *)(v28 + v48);
        if (v50 < *(unsigned __int8 *)(v28 + v49))
        {
          a1[1] = v48;
          a1[2] = v49;
          uint64_t v51 = *a1;
          if (v50 < *(unsigned __int8 *)(v28 + v51))
          {
            *a1 = v48;
            a1[1] = v51;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, *a3);
      return 1;
    default:
      uint64_t v7 = a1 + 2;
      uint64_t v6 = a1[2];
      uint64_t v8 = a1[1];
      uint64_t v9 = *a3;
      unsigned int v10 = *(unsigned __int8 *)(*a3 + v8);
      uint64_t v11 = *a1;
      unsigned int v12 = *(unsigned __int8 *)(v9 + v11);
      unsigned int v13 = *(unsigned __int8 *)(v9 + v6);
      if (v10 >= v12)
      {
        if (v13 >= v10) {
          goto LABEL_18;
        }
        a1[1] = v6;
        *uint64_t v7 = v8;
        uint64_t v14 = a1;
        unint64_t v15 = a1 + 1;
      }
      else
      {
        uint64_t v14 = a1;
        unint64_t v15 = a1 + 2;
        if (v13 < v10) {
          goto LABEL_17;
        }
        *a1 = v8;
        a1[1] = v11;
        uint64_t v14 = a1 + 1;
        unint64_t v15 = a1 + 2;
      }
      if (v13 >= v12) {
        goto LABEL_18;
      }
LABEL_17:
      *uint64_t v14 = v6;
      _DWORD *v15 = v11;
LABEL_18:
      unint64_t v35 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v36 = 0;
      for (uint64_t i = 12; ; i += 4)
      {
        uint64_t v39 = *v35;
        uint64_t v40 = *v7;
        unsigned int v41 = *(unsigned __int8 *)(v9 + v39);
        if (v41 < *(unsigned __int8 *)(v9 + v40))
        {
          uint64_t v42 = i;
          do
          {
            *(unsigned int *)((char *)a1 + v42) = v40;
            uint64_t v43 = v42 - 4;
            if (v42 == 4)
            {
              unsigned int v38 = a1;
              goto LABEL_21;
            }
            uint64_t v40 = *(unsigned int *)((char *)a1 + v42 - 8);
            v42 -= 4;
          }
          while (v41 < *(unsigned __int8 *)(v9 + v40));
          unsigned int v38 = (unsigned int *)((char *)a1 + v43);
LABEL_21:
          *unsigned int v38 = v39;
          if (++v36 == 8) {
            break;
          }
        }
        uint64_t v7 = v35++;
        if (v35 == a2) {
          return 1;
        }
      }
      return v35 + 1 == a2;
  }
}

uint64_t std::__function::__func<geo::intern_map_allocator<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::operator()(gss::Allocator *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)gss::Allocator::instance(a1) + 40);
  return v1();
}

_DWORD *std::__function::__func<geo::intern_map_allocator<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  *(void *)double result = &unk_1EF57A8E0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

void std::__function::__func<geo::intern_map_allocator<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::~__func()
{
}

uint64_t std::__function::__func<geo::intern_map_allocator<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::operator()(gss::Allocator *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)gss::Allocator::instance(a1) + 40);
  return v1();
}

_DWORD *std::__function::__func<geo::intern_map_allocator<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  *(void *)double result = &unk_1EF57A898;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

void std::__function::__func<geo::intern_map_allocator<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::ScenePropertyID,unsigned int,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::~__func()
{
}

uint64_t std::__function::__func<geo::intern_map_allocator<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::operator()(gss::Allocator *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)gss::Allocator::instance(a1) + 40);
  return v1();
}

_DWORD *std::__function::__func<geo::intern_map_allocator<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  *(void *)double result = &unk_1EF57A850;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

void std::__function::__func<geo::intern_map_allocator<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1},std::allocator<geo::intern_map_allocator<gss::ScenePropertyID,unsigned char,geo::StdAllocator<unsigned char,gss::Allocator>>::allocate(unsigned long,unsigned short &)::{lambda(unsigned char *)#1}>,void ()(unsigned char *)>::~__func()
{
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,gss::StylePropertySetInternObject,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,gss::StylePropertySetInternObject*,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      uint64_t v4 = *(a2 - 1);
      uint64_t v5 = *a1;
      if (*(unsigned __int8 *)(*a3 + v4) < *(unsigned __int8 *)(*a3 + v5))
      {
        *a1 = v4;
        *(a2 - 1) = v5;
      }
      return 1;
    case 3:
      uint64_t v16 = *a1;
      uint64_t v17 = a1[1];
      uint64_t v18 = *a3;
      unsigned int v19 = *(unsigned __int8 *)(*a3 + v17);
      unsigned int v20 = *(unsigned __int8 *)(*a3 + v16);
      uint64_t v21 = *(a2 - 1);
      unsigned int v22 = *(unsigned __int8 *)(*a3 + v21);
      if (v19 >= v20)
      {
        if (v22 < v19)
        {
          a1[1] = v21;
          *(a2 - 1) = v17;
          uint64_t v45 = *a1;
          uint64_t v44 = a1[1];
          if (*(unsigned __int8 *)(v18 + v44) < *(unsigned __int8 *)(v18 + v45))
          {
            *a1 = v44;
            a1[1] = v45;
          }
        }
      }
      else if (v22 >= v19)
      {
        *a1 = v17;
        a1[1] = v16;
        uint64_t v46 = *(a2 - 1);
        if (*(unsigned __int8 *)(v18 + v46) < v20)
        {
          a1[1] = v46;
          *(a2 - 1) = v16;
        }
      }
      else
      {
        *a1 = v21;
        *(a2 - 1) = v16;
      }
      return 1;
    case 4:
      uint64_t v23 = a1 + 1;
      uint64_t v24 = a1[1];
      unsigned int v25 = a1 + 2;
      uint64_t v26 = a1[2];
      unsigned int v27 = a1[1];
      uint64_t v28 = *a3;
      unsigned int v29 = *(unsigned __int8 *)(*a3 + v24);
      uint64_t v30 = *a1;
      unsigned int v31 = *(unsigned __int8 *)(*a3 + v30);
      unsigned int v32 = *(unsigned __int8 *)(*a3 + v26);
      if (v29 >= v31)
      {
        if (v32 < v29)
        {
          _DWORD *v23 = v26;
          _DWORD *v25 = v24;
          unsigned int v33 = a1;
          uint64_t v34 = a1 + 1;
          if (v32 >= v31) {
            goto LABEL_39;
          }
          goto LABEL_37;
        }
      }
      else
      {
        if (v32 < v29)
        {
          unsigned int v33 = a1;
          uint64_t v34 = a1 + 2;
          uint64_t v24 = *a1;
          unsigned int v27 = *a1;
LABEL_37:
          *unsigned int v33 = v26;
          *uint64_t v34 = v30;
          goto LABEL_39;
        }
        unsigned int v33 = a1 + 1;
        *a1 = v24;
        a1[1] = v30;
        uint64_t v34 = a1 + 2;
        uint64_t v24 = v30;
        unsigned int v27 = v30;
        if (v32 < v31) {
          goto LABEL_37;
        }
      }
      uint64_t v24 = v26;
      unsigned int v27 = v26;
LABEL_39:
      uint64_t v47 = *(a2 - 1);
      if (*(unsigned __int8 *)(v28 + v47) < *(unsigned __int8 *)(v28 + v24))
      {
        _DWORD *v25 = v47;
        *(a2 - 1) = v27;
        uint64_t v48 = *v25;
        uint64_t v49 = *v23;
        unsigned int v50 = *(unsigned __int8 *)(v28 + v48);
        if (v50 < *(unsigned __int8 *)(v28 + v49))
        {
          a1[1] = v48;
          a1[2] = v49;
          uint64_t v51 = *a1;
          if (v50 < *(unsigned __int8 *)(v28 + v51))
          {
            *a1 = v48;
            a1[1] = v51;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::intern_linear_map<gss::ScenePropertyID,unsigned long long,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::moveContent(gss::ScenePropertyID*,unsigned long long *,BOOL)::{lambda(unsigned long,unsigned long)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, *a3);
      return 1;
    default:
      uint64_t v7 = a1 + 2;
      uint64_t v6 = a1[2];
      uint64_t v8 = a1[1];
      uint64_t v9 = *a3;
      unsigned int v10 = *(unsigned __int8 *)(*a3 + v8);
      uint64_t v11 = *a1;
      unsigned int v12 = *(unsigned __int8 *)(v9 + v11);
      unsigned int v13 = *(unsigned __int8 *)(v9 + v6);
      if (v10 >= v12)
      {
        if (v13 >= v10) {
          goto LABEL_18;
        }
        a1[1] = v6;
        *uint64_t v7 = v8;
        uint64_t v14 = a1;
        unint64_t v15 = a1 + 1;
      }
      else
      {
        uint64_t v14 = a1;
        unint64_t v15 = a1 + 2;
        if (v13 < v10) {
          goto LABEL_17;
        }
        *a1 = v8;
        a1[1] = v11;
        uint64_t v14 = a1 + 1;
        unint64_t v15 = a1 + 2;
      }
      if (v13 >= v12) {
        goto LABEL_18;
      }
LABEL_17:
      *uint64_t v14 = v6;
      _DWORD *v15 = v11;
LABEL_18:
      unint64_t v35 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v36 = 0;
      for (uint64_t i = 12; ; i += 4)
      {
        uint64_t v39 = *v35;
        uint64_t v40 = *v7;
        unsigned int v41 = *(unsigned __int8 *)(v9 + v39);
        if (v41 < *(unsigned __int8 *)(v9 + v40))
        {
          uint64_t v42 = i;
          do
          {
            *(unsigned int *)((char *)a1 + v42) = v40;
            uint64_t v43 = v42 - 4;
            if (v42 == 4)
            {
              unsigned int v38 = a1;
              goto LABEL_21;
            }
            uint64_t v40 = *(unsigned int *)((char *)a1 + v42 - 8);
            v42 -= 4;
          }
          while (v41 < *(unsigned __int8 *)(v9 + v40));
          unsigned int v38 = (unsigned int *)((char *)a1 + v43);
LABEL_21:
          *unsigned int v38 = v39;
          if (++v36 == 8) {
            break;
          }
        }
        uint64_t v7 = v35++;
        if (v35 == a2) {
          return 1;
        }
      }
      return v35 + 1 == a2;
  }
}

uint64_t std::__shared_ptr_emplace<gss::CartoStyle<gss::ScenePropertyID>::ResolvedStyle,geo::StdAllocator<gss::CartoStyle<gss::ScenePropertyID>::ResolvedStyle,gss::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 72);
}

gss::Allocator *std::__shared_ptr_emplace<gss::CartoStyle<gss::ScenePropertyID>::ResolvedStyle,geo::StdAllocator<gss::CartoStyle<gss::ScenePropertyID>::ResolvedStyle,gss::Allocator>>::__on_zero_shared(gss::Allocator *result)
{
  uint64_t v1 = (char *)result + 32;
  if (!*((unsigned char *)result + 44))
  {
    id v2 = result;
    double result = *(gss::Allocator **)v1;
    if (*(void *)v1)
    {
      if (*((_WORD *)v2 + 20))
      {
        uint64_t v3 = 80 * *((unsigned __int16 *)v2 + 20);
        do
        {
          double result = (gss::Allocator *)(gss::StylePropertySet<gss::PropertyID>::~StylePropertySet((uint64_t)result) + 80);
          v3 -= 80;
        }
        while (v3);
      }
      uint64_t v4 = gss::Allocator::instance(result);
      double result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v4 + 40))(v4, *((void *)v2 + 4), 80 * *((unsigned __int16 *)v2 + 21));
    }
  }
  *(void *)(v1 + 5) = 0;
  *(void *)uint64_t v1 = 0;
  return result;
}

void std::__shared_ptr_emplace<gss::CartoStyle<gss::ScenePropertyID>::ResolvedStyle,geo::StdAllocator<gss::CartoStyle<gss::ScenePropertyID>::ResolvedStyle,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A4A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<gss::CartoStyle<gss::ScenePropertyID>::ResolvedStyle,geo::StdAllocator<gss::CartoStyle<gss::ScenePropertyID>::ResolvedStyle,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A4A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void gss::Queryable<gss::ScenePropertyID>::targetCartoStyle(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void gss::Queryable<gss::ScenePropertyID>::sourceCartoStyle(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void gss::Queryable<gss::ScenePropertyID>::~Queryable(uint64_t a1)
{
  *(void *)a1 = &unk_1EF567528;
  id v2 = (geo::read_write_lock *)pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 32));
  if (v2) {
    geo::read_write_lock::logFailure(v2, (uint64_t)"destruction", v3);
  }
  uint64_t v4 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v4) {
    std::default_delete<gss::RenderStyle<gss::PropertyID>>::operator()[abi:nn180100](v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  JUMPOUT(0x1A6239270);
}

void gss::StylesheetQuery<gss::ScenePropertyID>::~StylesheetQuery(uint64_t a1)
{
  gss::StylesheetQuery<gss::ScenePropertyID>::~StylesheetQuery(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<gss::StylesheetQuery<gss::ScenePropertyID>,geo::StdAllocator<gss::StylesheetQuery<gss::ScenePropertyID>,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A5F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<gss::StylesheetQuery<gss::ScenePropertyID>,geo::StdAllocator<gss::StylesheetQuery<gss::ScenePropertyID>,gss::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A5F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1A201A3BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(char *a1)
{
  if (!a1) {
    return;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(void *)a1);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((void *)a1 + 1));
  if (a1[79] < 0)
  {
    operator delete(*((void **)a1 + 7));
    if ((a1[55] & 0x80000000) == 0) {
      goto LABEL_4;
    }
LABEL_9:
    operator delete(*((void **)a1 + 4));
    goto LABEL_4;
  }
  if (a1[55] < 0) {
    goto LABEL_9;
  }
LABEL_4:
  operator delete(a1);
}

BOOL md::DataOverrideManager::getColorOverrideForAttributes(uint64_t **a1, uint64_t *a2, _DWORD *a3)
{
  unsigned __int16 v29 = -1;
  unsigned __int16 v28 = -1;
  unsigned __int16 v27 = -1;
  unsigned __int16 v26 = -1;
  unsigned __int16 v25 = -1;
  gss::FeatureAttributeSet::getValueForAttributeKey(a2, 50, &v29);
  gss::FeatureAttributeSet::getValueForAttributeKey(a2, 49, &v28);
  gss::FeatureAttributeSet::getValueForAttributeKey(a2, 37, &v27);
  gss::FeatureAttributeSet::getValueForAttributeKey(a2, 4, &v26);
  gss::FeatureAttributeSet::getValueForAttributeKey(a2, 53, &v25);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if (*a1 == v7)
  {
    unsigned __int8 v8 = 0;
  }
  else
  {
    unsigned __int8 v8 = 0;
    uint64_t v9 = v27;
    uint64_t v10 = v29;
    uint64_t v11 = v26;
    uint64_t v12 = v25;
    uint64_t v13 = v28;
    do
    {
      uint64_t v14 = *v6;
      if (*v6 == -1 || v14 == v9)
      {
        uint64_t v16 = v6[1];
        if (v16 == -1 || v16 == v13)
        {
          uint64_t v18 = v6[2];
          if (v18 == -1 || v18 == v10)
          {
            uint64_t v20 = v6[3];
            if (v20 == -1 || v20 == v11)
            {
              uint64_t v22 = v6[4];
              if ((v22 == -1 || v22 == v12) && (v16 & v14 & v18 & v20 & v22) != 0xFFFFFFFFFFFFFFFFLL)
              {
                unsigned int v23 = (2 * (v14 != -1)) | (16 * (v18 != -1)) | (8 * (v22 != -1)) | (4 * (v16 != -1)) | (v20 != -1);
                if (v23 > v8)
                {
                  *a3 = *((_DWORD *)v6 + 10);
                  a3[1] = *((_DWORD *)v6 + 11);
                  a3[2] = *((_DWORD *)v6 + 12);
                  a3[3] = *((_DWORD *)v6 + 13);
                  unsigned __int8 v8 = v23;
                }
              }
            }
          }
        }
      }
      v6 += 9;
    }
    while (v6 != v7);
  }
  return v8 != 0;
}

void ecs2::UtlityTaskDescriptor::~UtlityTaskDescriptor(void **this)
{
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  id v2 = (ecs2::UtlityTaskDescriptor *)this[4];
  if (v2 == (ecs2::UtlityTaskDescriptor *)(this + 1))
  {
    (*((void (**)(char *))this[1] + 4))((char *)this + 8);
  }
  else if (v2)
  {
    (*(void (**)(ecs2::UtlityTaskDescriptor *))(*(void *)v2 + 40))(v2);
  }
}

void ecs2::ModuleBucketExecutionDescriptor::~ModuleBucketExecutionDescriptor(ecs2::ModuleBucketExecutionDescriptor *this)
{
  uint64_t v11 = (void **)((char *)this + 48);
  std::vector<ecs2::ExecutionDebugTaskDescriptor>::__destroy_vector::operator()[abi:nn180100](&v11);
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 4);
    uint64_t v4 = (void *)*((void *)this + 3);
    if (v3 != v2)
    {
      uint64_t v5 = *((void *)this + 4);
      do
      {
        uint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v2;
    operator delete(v4);
  }
  uint64_t v8 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v9 = *((void *)this + 1);
    uint64_t v10 = *(void **)this;
    if (v9 != v8)
    {
      do
      {
        v9 -= 128;
        std::__destroy_at[abi:nn180100]<ecs2::ExecutionTaskDescriptor,0>(v9);
      }
      while (v9 != v8);
      uint64_t v10 = *(void **)this;
    }
    *((void *)this + 1) = v8;
    operator delete(v10);
  }
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatusRenderables>(md::ita::UpdateProcessedStatusRenderables &&)::{lambda(void)#2},std::allocator<md::ita::UpdateProcessedStatusRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatusRenderables>(md::ita::UpdateProcessedStatusRenderables &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF52BC10;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatusRenderables>(md::ita::UpdateProcessedStatusRenderables &&)::{lambda(void)#2},std::allocator<md::ita::UpdateProcessedStatusRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatusRenderables>(md::ita::UpdateProcessedStatusRenderables &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatusRenderables>(md::ita::UpdateProcessedStatusRenderables &&)::{lambda(void)#1},std::allocator<md::ita::UpdateProcessedStatusRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatusRenderables>(md::ita::UpdateProcessedStatusRenderables &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF52BC58;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatusRenderables>(md::ita::UpdateProcessedStatusRenderables &&)::{lambda(void)#1},std::allocator<md::ita::UpdateProcessedStatusRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatusRenderables>(md::ita::UpdateProcessedStatusRenderables &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>::Model<ecs2::RuntimeQuery<md::ls::FinishedProcessingDepthPrePass const&,md::ls::PendingProcessingDepthPrePass const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::FinishedProcessingDepthPrePass>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::PendingProcessingDepthPrePass>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7]) {
    uint64_t v6 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(void *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7]) {
    uint64_t v7 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v7 = (uint64_t)v5;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

BOOL gdc::ComponentStorageWrapper<md::ls::PendingProcessingDepthPrePass>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::PendingProcessingDepthPrePass>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          uint64_t v13 = a1[10];
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          uint64_t v14 = a1[11];
          *(unsigned char *)(v13 + v7) = *(unsigned char *)(v14 - 1);
          a1[11] = v14 - 1;
          unint64_t v15 = (void *)a1[28];
          if (v15)
          {
            uint64_t v16 = a1[31];
            while (1)
            {
              v21[0] = &v19;
              v21[1] = 1;
              uint64_t v20 = v16;
              uint64_t v17 = v15[6];
              if (!v17) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v20, v21);
              unint64_t v15 = (void *)*v15;
              if (!v15) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<md::ls::PendingProcessingDepthPrePass>::~ComponentStorageWrapper(v18);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<md::ls::PendingProcessingDepthPrePass>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FinishedProcessingDepthPrePass>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::FinishedProcessingDepthPrePass>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FinishedProcessingDepthPrePass>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::FinishedProcessingDepthPrePass>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL ecs2::Query<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>::Model<ecs2::RuntimeQuery<md::ls::FinishedProcessingShadow const&,md::ls::PendingProcessingShadow const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::FinishedProcessingShadow>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::PendingProcessingShadow>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7]) {
    uint64_t v6 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(void *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7]) {
    uint64_t v7 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v7 = (uint64_t)v5;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

BOOL gdc::ComponentStorageWrapper<md::ls::PendingProcessingShadow>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::PendingProcessingShadow>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          uint64_t v13 = a1[10];
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          uint64_t v14 = a1[11];
          *(unsigned char *)(v13 + v7) = *(unsigned char *)(v14 - 1);
          a1[11] = v14 - 1;
          uint64_t v15 = (void *)a1[28];
          if (v15)
          {
            uint64_t v16 = a1[31];
            while (1)
            {
              v21[0] = &v19;
              v21[1] = 1;
              uint64_t v20 = v16;
              uint64_t v17 = v15[6];
              if (!v17) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v20, v21);
              uint64_t v15 = (void *)*v15;
              if (!v15) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<md::ls::PendingProcessingShadow>::~ComponentStorageWrapper(v18);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<md::ls::PendingProcessingShadow>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FinishedProcessingShadow>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::FinishedProcessingShadow>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FinishedProcessingShadow>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::FinishedProcessingShadow>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL ecs2::Query<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>::Model<ecs2::RuntimeQuery<md::ls::FinishedProcessing const&,md::ls::PendingProcessing const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::FinishedProcessing>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::PendingProcessing>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7]) {
    uint64_t v6 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(void *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7]) {
    uint64_t v7 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v7 = (uint64_t)v5;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

BOOL gdc::ComponentStorageWrapper<md::ls::PendingProcessing>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::PendingProcessing>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          uint64_t v13 = a1[10];
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          uint64_t v14 = a1[11];
          *(unsigned char *)(v13 + v7) = *(unsigned char *)(v14 - 1);
          a1[11] = v14 - 1;
          uint64_t v15 = (void *)a1[28];
          if (v15)
          {
            uint64_t v16 = a1[31];
            while (1)
            {
              v21[0] = &v19;
              v21[1] = 1;
              uint64_t v20 = v16;
              uint64_t v17 = v15[6];
              if (!v17) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v20, v21);
              uint64_t v15 = (void *)*v15;
              if (!v15) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<md::ls::PendingProcessing>::~ComponentStorageWrapper(v18);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<md::ls::PendingProcessing>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FinishedProcessing>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::FinishedProcessing>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FinishedProcessing>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::FinishedProcessing>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatusRenderables>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatusRenderables>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C838;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatusRenderables>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatusRenderables>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatus>(md::ita::UpdateProcessedStatus &&)::{lambda(void)#2},std::allocator<md::ita::UpdateProcessedStatus &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatus>(md::ita::UpdateProcessedStatus &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF528610;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatus>(md::ita::UpdateProcessedStatus &&)::{lambda(void)#2},std::allocator<md::ita::UpdateProcessedStatus &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatus>(md::ita::UpdateProcessedStatus &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatus>(md::ita::UpdateProcessedStatus &&)::{lambda(void)#1},std::allocator<md::ita::UpdateProcessedStatus &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatus>(md::ita::UpdateProcessedStatus &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF528658;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatus>(md::ita::UpdateProcessedStatus &&)::{lambda(void)#1},std::allocator<md::ita::UpdateProcessedStatus &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateProcessedStatus>(md::ita::UpdateProcessedStatus &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatus>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatus>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51AD38;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatus>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateProcessedStatus>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupMeshRendererLayout>(CleanupMeshRendererLayout &&)::{lambda(void)#2},std::allocator<CleanupMeshRendererLayout &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupMeshRendererLayout>(CleanupMeshRendererLayout &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF526D50;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupMeshRendererLayout>(CleanupMeshRendererLayout &&)::{lambda(void)#2},std::allocator<CleanupMeshRendererLayout &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupMeshRendererLayout>(CleanupMeshRendererLayout &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupMeshRendererLayout>(CleanupMeshRendererLayout &&)::{lambda(void)#1},std::allocator<CleanupMeshRendererLayout &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupMeshRendererLayout>(CleanupMeshRendererLayout &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF526D98;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupMeshRendererLayout>(CleanupMeshRendererLayout &&)::{lambda(void)#1},std::allocator<CleanupMeshRendererLayout &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<CleanupMeshRendererLayout>(CleanupMeshRendererLayout &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::function<void ()(md::ls::CommandBufferDescriptionCreation const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL gdc::ComponentStorageWrapper<md::ls::MarkForEntityDeletion>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::MarkForEntityDeletion>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MarkForEntityDeletion>(gdc::Entity,md::ls::MarkForEntityDeletion &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  double result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF523708;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MarkForEntityDeletion>(gdc::Entity,md::ls::MarkForEntityDeletion &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

uint64_t std::__function::__func<CleanupMeshRendererLayout::operator()(ecs2::Query<md::ls::CommandBufferDescriptionCreation const&>)::{lambda(md::ls::CommandBufferDescriptionCreation const&)#1},std::allocator<CleanupMeshRendererLayout::operator()(ecs2::Query<md::ls::CommandBufferDescriptionCreation const&>)::{lambda(md::ls::CommandBufferDescriptionCreation const&)#1}>,void ()(md::ls::CommandBufferDescriptionCreation const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF51D9A8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<CleanupMeshRendererLayout::operator()(ecs2::Query<md::ls::CommandBufferDescriptionCreation const&>)::{lambda(md::ls::CommandBufferDescriptionCreation const&)#1},std::allocator<CleanupMeshRendererLayout::operator()(ecs2::Query<md::ls::CommandBufferDescriptionCreation const&>)::{lambda(md::ls::CommandBufferDescriptionCreation const&)#1}>,void ()(md::ls::CommandBufferDescriptionCreation const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D9A8;
  result[1] = v3;
  return result;
}

void std::__function::__func<CleanupMeshRendererLayout::operator()(ecs2::Query<md::ls::CommandBufferDescriptionCreation const&>)::{lambda(md::ls::CommandBufferDescriptionCreation const&)#1},std::allocator<CleanupMeshRendererLayout::operator()(ecs2::Query<md::ls::CommandBufferDescriptionCreation const&>)::{lambda(md::ls::CommandBufferDescriptionCreation const&)#1}>,void ()(md::ls::CommandBufferDescriptionCreation const&)>::~__func()
{
}

BOOL ecs2::Query<md::ls::CommandBufferDescriptionCreation const&>::Model<ecs2::RuntimeQuery<md::ls::CommandBufferDescriptionCreation const&>>::empty(uint64_t a1)
{
  uint64_t v1 = (void *)gdc::Registry::storage<md::ls::CommandBufferDescriptionCreation>(*(int8x8_t **)(*(void *)(a1 + 8)
                                                                                               + 8));
  uint64_t v3 = v1[7];
  uint64_t v2 = v1[8];
  uint64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if ((unint64_t v5 = *(unsigned int *)(v3 + 4), v6 = v1[4], v7 = (v1[5] - v6) >> 3, v5 >> 7 >= v7)
      || (uint64_t v8 = *(void *)(v6 + 8 * (v5 >> 7))) == 0
      || (unint64_t v9 = *(unsigned __int16 *)(v8 + 2 * (v5 & 0x7F)), v9 >= v4 >> 3)
      || ((uint64_t v10 = v3 + 8 * v9, v10 != v2) ? (v11 = *(_DWORD *)(v10 + 4) == v5) : (v11 = 0), !v11))
    {
      unint64_t v12 = v4 >> 3;
      uint64_t v13 = v3 + 8;
      while (v13 != v2)
      {
        unint64_t v14 = *(unsigned int *)(v13 + 4);
        uint64_t v15 = v1[8];
        if (v14 >> 7 < v7)
        {
          uint64_t v16 = *(void *)(v6 + 8 * (v14 >> 7));
          uint64_t v15 = v1[8];
          if (v16)
          {
            unint64_t v17 = *(unsigned __int16 *)(v16 + 2 * (v14 & 0x7F));
            uint64_t v15 = v1[8];
            if (v12 > v17)
            {
              uint64_t v15 = v3 + 8 * v17;
              if (*(_DWORD *)(v15 + 4) != v14) {
                uint64_t v15 = v1[8];
              }
            }
          }
        }
        v13 += 8;
        if (v15 != v2)
        {
          uint64_t v3 = v13 - 8;
          return v2 == v3;
        }
      }
      uint64_t v3 = v1[8];
    }
  }
  return v2 == v3;
}

void *std::__function::__func<ecs2::ForwardToExecute<CleanupMeshRendererLayout>,std::allocator<ecs2::ForwardToExecute<CleanupMeshRendererLayout>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51A048;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<CleanupMeshRendererLayout>,std::allocator<ecs2::ForwardToExecute<CleanupMeshRendererLayout>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanupRampMaterialData>(md::ita::CleanupRampMaterialData &&)::{lambda(void)#2},std::allocator<md::ita::CleanupRampMaterialData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanupRampMaterialData>(md::ita::CleanupRampMaterialData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF528F10;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanupRampMaterialData>(md::ita::CleanupRampMaterialData &&)::{lambda(void)#2},std::allocator<md::ita::CleanupRampMaterialData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanupRampMaterialData>(md::ita::CleanupRampMaterialData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanupRampMaterialData>(md::ita::CleanupRampMaterialData &&)::{lambda(void)#1},std::allocator<md::ita::CleanupRampMaterialData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanupRampMaterialData>(md::ita::CleanupRampMaterialData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF528F58;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanupRampMaterialData>(md::ita::CleanupRampMaterialData &&)::{lambda(void)#1},std::allocator<md::ita::CleanupRampMaterialData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanupRampMaterialData>(md::ita::CleanupRampMaterialData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::CleanupRampMaterialData>,std::allocator<ecs2::ForwardToExecute<md::ita::CleanupRampMaterialData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B1B8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CleanupRampMaterialData>,std::allocator<ecs2::ForwardToExecute<md::ita::CleanupRampMaterialData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SortCommandBuffers>(md::ita::SortCommandBuffers &&)::{lambda(void)#2},std::allocator<md::ita::SortCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SortCommandBuffers>(md::ita::SortCommandBuffers &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF5279B0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SortCommandBuffers>(md::ita::SortCommandBuffers &&)::{lambda(void)#2},std::allocator<md::ita::SortCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SortCommandBuffers>(md::ita::SortCommandBuffers &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SortCommandBuffers>(md::ita::SortCommandBuffers &&)::{lambda(void)#1},std::allocator<md::ita::SortCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SortCommandBuffers>(md::ita::SortCommandBuffers &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF5279F8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SortCommandBuffers>(md::ita::SortCommandBuffers &&)::{lambda(void)#1},std::allocator<md::ita::SortCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SortCommandBuffers>(md::ita::SortCommandBuffers &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::SortCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::SortCommandBuffers>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51A708;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::SortCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::SortCommandBuffers>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushRenderItems>(md::ita::PushRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::PushRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushRenderItems>(md::ita::PushRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF5271D0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushRenderItems>(md::ita::PushRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::PushRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushRenderItems>(md::ita::PushRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushRenderItems>(md::ita::PushRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::PushRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushRenderItems>(md::ita::PushRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF527218;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushRenderItems>(md::ita::PushRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::PushRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PushRenderItems>(md::ita::PushRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::CommandBufferRef>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::CommandBufferRef>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          uint64_t v13 = a1[10];
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          *(void *)(v13 + 8 * v7) = *(void *)(a1[11] - 8);
          a1[11] -= 8;
          unint64_t v14 = (void *)a1[28];
          if (v14)
          {
            uint64_t v15 = a1[31];
            while (1)
            {
              v20[0] = &v18;
              v20[1] = 1;
              uint64_t v19 = v15;
              uint64_t v16 = v14[6];
              if (!v16) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v19, v20);
              unint64_t v14 = (void *)*v14;
              if (!v14) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<md::ls::CommandBufferRef>::~ComponentStorageWrapper(v17);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<md::ls::CommandBufferRef>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ItemsPrepared>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::ItemsPrepared>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  unint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    unint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::ItemsPrepared>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::ItemsPrepared>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderItemID>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RenderItemID>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10] + 24 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  uint64_t v16 = *(void *)(v15 - 8);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)(v15 - 24);
  *(void *)(v14 + 16) = v16;
  a1[11] -= 24;
  unint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    unint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RenderItemID>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RenderItemID>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PushRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::PushRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51A318;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PushRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::PushRenderItems>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssembleRenderItems>(md::ita::AssembleRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::AssembleRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssembleRenderItems>(md::ita::AssembleRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF527A40;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssembleRenderItems>(md::ita::AssembleRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::AssembleRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssembleRenderItems>(md::ita::AssembleRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssembleRenderItems>(md::ita::AssembleRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::AssembleRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssembleRenderItems>(md::ita::AssembleRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF527A88;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssembleRenderItems>(md::ita::AssembleRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::AssembleRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssembleRenderItems>(md::ita::AssembleRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID,md::ls::RenderState const,md::ls::PipelineSetup const,md::ls::IndexRange const,md::ls::HasMeshHandle const,md::ls::FunctionConstants const>,gdc::Any<md::ls::RenderOrderToUse const,md::ls::InstanceCount const,md::ls::StencilRefValueToUse const,md::ls::VisibilityTestResult const,md::ls::ShouldSkipRender const>,gdc::None<>>::Iterator::isValid(void *a1)
{
  uint64_t v1 = (void *)a1[1];
  unint64_t v2 = *(unsigned int *)(a1[8] + 4);
  unint64_t v3 = v2 >> 7;
  uint64_t v4 = v1[4];
  if (v2 >> 7 >= (v1[5] - v4) >> 3) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 8 * v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v2 & 0x7F;
  unint64_t v7 = *(unsigned __int16 *)(v5 + 2 * v6);
  unint64_t v10 = v1 + 7;
  uint64_t v8 = v1[7];
  uint64_t v9 = v10[1];
  if (v7 >= (v9 - v8) >> 3) {
    return 0;
  }
  uint64_t v11 = v8 + 8 * v7;
  if (v11 == v9 || *(_DWORD *)(v11 + 4) != v2) {
    return 0;
  }
  uint64_t v13 = (void *)a1[2];
  uint64_t v14 = v13[4];
  if (v3 >= (v13[5] - v14) >> 3) {
    return 0;
  }
  uint64_t v15 = *(void *)(v14 + 8 * v3);
  if (!v15) {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v15 + 2 * v6);
  uint64_t v19 = v13 + 7;
  uint64_t v17 = v13[7];
  uint64_t v18 = v19[1];
  if (v16 >= (v18 - v17) >> 3) {
    return 0;
  }
  uint64_t v20 = v17 + 8 * v16;
  if (v20 == v18 || *(_DWORD *)(v20 + 4) != v2) {
    return 0;
  }
  uint64_t v22 = (void *)a1[3];
  uint64_t v23 = v22[4];
  if (v3 >= (v22[5] - v23) >> 3) {
    return 0;
  }
  uint64_t v24 = *(void *)(v23 + 8 * v3);
  if (!v24) {
    return 0;
  }
  unint64_t v25 = *(unsigned __int16 *)(v24 + 2 * v6);
  unsigned __int16 v28 = v22 + 7;
  uint64_t v26 = v22[7];
  uint64_t v27 = v28[1];
  if (v25 >= (v27 - v26) >> 3) {
    return 0;
  }
  uint64_t v29 = v26 + 8 * v25;
  if (v29 == v27 || *(_DWORD *)(v29 + 4) != v2) {
    return 0;
  }
  unsigned int v31 = (void *)a1[4];
  uint64_t v32 = v31[4];
  if (v3 >= (v31[5] - v32) >> 3) {
    return 0;
  }
  uint64_t v33 = *(void *)(v32 + 8 * v3);
  if (!v33) {
    return 0;
  }
  unint64_t v34 = *(unsigned __int16 *)(v33 + 2 * v6);
  uint64_t v37 = v31 + 7;
  uint64_t v35 = v31[7];
  uint64_t v36 = v37[1];
  if (v34 >= (v36 - v35) >> 3) {
    return 0;
  }
  uint64_t v38 = v35 + 8 * v34;
  if (v38 == v36 || *(_DWORD *)(v38 + 4) != v2) {
    return 0;
  }
  uint64_t v40 = (void *)a1[5];
  uint64_t v41 = v40[4];
  if (v3 >= (v40[5] - v41) >> 3) {
    return 0;
  }
  uint64_t v42 = *(void *)(v41 + 8 * v3);
  if (!v42) {
    return 0;
  }
  unint64_t v43 = *(unsigned __int16 *)(v42 + 2 * v6);
  uint64_t v45 = v40[7];
  uint64_t v44 = v40[8];
  if (v43 >= (v44 - v45) >> 3) {
    return 0;
  }
  uint64_t v46 = 0;
  uint64_t v47 = v45 + 8 * v43;
  if (v47 != v44 && *(_DWORD *)(v47 + 4) == v2)
  {
    uint64_t v48 = (void *)a1[6];
    uint64_t v49 = v48[4];
    if (v3 < (v48[5] - v49) >> 3 && (uint64_t v50 = *(void *)(v49 + 8 * v3)) != 0)
    {
      unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * v6);
      uint64_t v53 = v48[7];
      uint64_t v52 = v48[8];
      if (v51 < (v52 - v53) >> 3)
      {
        uint64_t v54 = v53 + 8 * v51;
        if (*(_DWORD *)(v54 + 4) == v2) {
          uint64_t v55 = v54;
        }
        else {
          uint64_t v55 = v48[8];
        }
        return v55 != v52;
      }
    }
    else
    {
      uint64_t v52 = v48[8];
    }
    uint64_t v55 = v52;
    return v55 != v52;
  }
  return v46;
}

BOOL gdc::ComponentStorageWrapper<md::ls::ShouldSkipRender>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::ShouldSkipRender>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::ShouldSkipRender>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::ShouldSkipRender>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::VisibilityTestResult>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::VisibilityTestResult>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::VisibilityTestResult>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::VisibilityTestResult>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::StencilRefValueToUse>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::StencilRefValueToUse>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(unsigned char *)(v14 + v7) = *(unsigned char *)--a1[11];
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::StencilRefValueToUse>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::StencilRefValueToUse>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::InstanceCount>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::InstanceCount>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(void *)(v14 + 8 * v7) = *(void *)(v15 - 8);
  a1[11] = v15 - 8;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::InstanceCount>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::InstanceCount>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderOrderToUse>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RenderOrderToUse>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(void *)(v14 + 8 * v7) = *(void *)(v15 - 8);
  a1[11] = v15 - 8;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RenderOrderToUse>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RenderOrderToUse>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FunctionConstants>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::FunctionConstants>::remove(void *a1, unint64_t a2)
{
  unint64_t v21 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10] + 33 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  long long v16 = *(_OWORD *)(v15 - 33);
  long long v17 = *(_OWORD *)(v15 - 17);
  *(unsigned char *)(v14 + 32) = *(unsigned char *)(v15 - 1);
  *(_OWORD *)uint64_t v14 = v16;
  *(_OWORD *)(v14 + 16) = v17;
  a1[11] -= 33;
  uint64_t v18 = (void *)a1[28];
  if (!v18) {
    return 1;
  }
  uint64_t v19 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    uint64_t v22 = v19;
    uint64_t v20 = v18[6];
    if (!v20) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v20 + 48))(v20, &v22, v23);
    uint64_t v18 = (void *)*v18;
    if (!v18) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FunctionConstants>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::FunctionConstants>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::HasMeshHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::HasMeshHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::HasMeshHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::HasMeshHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IndexRange>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::IndexRange>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(_OWORD *)(v14 + 16 * v7) = *(_OWORD *)(a1[11] - 16);
  a1[11] -= 16;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IndexRange>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::IndexRange>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PipelineSetup>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::PipelineSetup>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PipelineSetup>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::PipelineSetup>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderState>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RenderState>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RenderState>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RenderState>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssembleRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::AssembleRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51A750;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssembleRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::AssembleRenderItems>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverNightTextureIndex>(md::ita::AssignFlyoverNightTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverNightTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverNightTextureIndex>(md::ita::AssignFlyoverNightTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF52B280;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverNightTextureIndex>(md::ita::AssignFlyoverNightTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverNightTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverNightTextureIndex>(md::ita::AssignFlyoverNightTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverNightTextureIndex>(md::ita::AssignFlyoverNightTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverNightTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverNightTextureIndex>(md::ita::AssignFlyoverNightTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF52B2C8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverNightTextureIndex>(md::ita::AssignFlyoverNightTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverNightTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverNightTextureIndex>(md::ita::AssignFlyoverNightTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::FlyoverInstance>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::FlyoverInstance>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FlyoverInstance>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::FlyoverInstance>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<Flyover::NightTexture>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<Flyover::NightTexture>>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<Flyover::NightTexture>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<Flyover::NightTexture>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<Flyover::NightTexture>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<Flyover::NightTexture>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<Flyover::NightTexture>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<Flyover::NightTexture>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverNightTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverNightTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C370;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverNightTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverNightTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverAtmosphereTextureIndex>(md::ita::AssignFlyoverAtmosphereTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverAtmosphereTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverAtmosphereTextureIndex>(md::ita::AssignFlyoverAtmosphereTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF52C2D0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverAtmosphereTextureIndex>(md::ita::AssignFlyoverAtmosphereTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverAtmosphereTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverAtmosphereTextureIndex>(md::ita::AssignFlyoverAtmosphereTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverAtmosphereTextureIndex>(md::ita::AssignFlyoverAtmosphereTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverAtmosphereTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverAtmosphereTextureIndex>(md::ita::AssignFlyoverAtmosphereTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF52C318;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverAtmosphereTextureIndex>(md::ita::AssignFlyoverAtmosphereTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverAtmosphereTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverAtmosphereTextureIndex>(md::ita::AssignFlyoverAtmosphereTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<Flyover::AtmosphereTexture>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<Flyover::AtmosphereTexture>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<Flyover::AtmosphereTexture>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<Flyover::AtmosphereTexture>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverAtmosphereTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverAtmosphereTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51CB98;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverAtmosphereTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverAtmosphereTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverDiffuseTextureIndex>(md::ita::AssignFlyoverDiffuseTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverDiffuseTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverDiffuseTextureIndex>(md::ita::AssignFlyoverDiffuseTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF52BA60;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverDiffuseTextureIndex>(md::ita::AssignFlyoverDiffuseTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverDiffuseTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverDiffuseTextureIndex>(md::ita::AssignFlyoverDiffuseTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverDiffuseTextureIndex>(md::ita::AssignFlyoverDiffuseTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverDiffuseTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverDiffuseTextureIndex>(md::ita::AssignFlyoverDiffuseTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF52BAA8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverDiffuseTextureIndex>(md::ita::AssignFlyoverDiffuseTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverDiffuseTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverDiffuseTextureIndex>(md::ita::AssignFlyoverDiffuseTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<Flyover::DiffuseTexture>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<Flyover::DiffuseTexture>>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<Flyover::DiffuseTexture>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<Flyover::DiffuseTexture>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<Flyover::DiffuseTexture>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<Flyover::DiffuseTexture>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<Flyover::DiffuseTexture>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<Flyover::DiffuseTexture>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverDiffuseTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverDiffuseTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C760;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverDiffuseTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverDiffuseTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverMaterialConstantData>(md::ita::AssignFlyoverMaterialConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverMaterialConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverMaterialConstantData>(md::ita::AssignFlyoverMaterialConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF52BD30;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverMaterialConstantData>(md::ita::AssignFlyoverMaterialConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverMaterialConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverMaterialConstantData>(md::ita::AssignFlyoverMaterialConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverMaterialConstantData>(md::ita::AssignFlyoverMaterialConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverMaterialConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverMaterialConstantData>(md::ita::AssignFlyoverMaterialConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF52BD78;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverMaterialConstantData>(md::ita::AssignFlyoverMaterialConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverMaterialConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverMaterialConstantData>(md::ita::AssignFlyoverMaterialConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Material>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FlyoverCommonMaterialHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::FlyoverCommonMaterialHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FlyoverCommonMaterialHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::FlyoverCommonMaterialHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverMaterialConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverMaterialConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C8C8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverMaterialConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverMaterialConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTexcoordsConstantData>(md::ita::AssignFlyoverTexcoordsConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverTexcoordsConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTexcoordsConstantData>(md::ita::AssignFlyoverTexcoordsConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF52BF70;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTexcoordsConstantData>(md::ita::AssignFlyoverTexcoordsConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverTexcoordsConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTexcoordsConstantData>(md::ita::AssignFlyoverTexcoordsConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTexcoordsConstantData>(md::ita::AssignFlyoverTexcoordsConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverTexcoordsConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTexcoordsConstantData>(md::ita::AssignFlyoverTexcoordsConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF52BFB8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTexcoordsConstantData>(md::ita::AssignFlyoverTexcoordsConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverTexcoordsConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTexcoordsConstantData>(md::ita::AssignFlyoverTexcoordsConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Texcoords>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FlyoverCommonTexcoordsHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::FlyoverCommonTexcoordsHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FlyoverCommonTexcoordsHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::FlyoverCommonTexcoordsHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverTexcoordsConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverTexcoordsConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C9E8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverTexcoordsConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverTexcoordsConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverS2TransformConstantData>(md::ita::AssignFlyoverS2TransformConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverS2TransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverS2TransformConstantData>(md::ita::AssignFlyoverS2TransformConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF52C510;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverS2TransformConstantData>(md::ita::AssignFlyoverS2TransformConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverS2TransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverS2TransformConstantData>(md::ita::AssignFlyoverS2TransformConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverS2TransformConstantData>(md::ita::AssignFlyoverS2TransformConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverS2TransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverS2TransformConstantData>(md::ita::AssignFlyoverS2TransformConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF52C558;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverS2TransformConstantData>(md::ita::AssignFlyoverS2TransformConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverS2TransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverS2TransformConstantData>(md::ita::AssignFlyoverS2TransformConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::S2Transform>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FlyoverCommonS2TransformHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::FlyoverCommonS2TransformHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FlyoverCommonS2TransformHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::FlyoverCommonS2TransformHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverS2TransformConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverS2TransformConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51CCB8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverS2TransformConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverS2TransformConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverSharedConstantData>(md::ita::AssignFlyoverSharedConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverSharedConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverSharedConstantData>(md::ita::AssignFlyoverSharedConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF52B5E0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverSharedConstantData>(md::ita::AssignFlyoverSharedConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverSharedConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverSharedConstantData>(md::ita::AssignFlyoverSharedConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverSharedConstantData>(md::ita::AssignFlyoverSharedConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverSharedConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverSharedConstantData>(md::ita::AssignFlyoverSharedConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_1EF52B628;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverSharedConstantData>(md::ita::AssignFlyoverSharedConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverSharedConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverSharedConstantData>(md::ita::AssignFlyoverSharedConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&>::Model<ecs2::RuntimeQuery<md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::FlyoverInstance>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::PipelineSetup>(v1);
  if (*(void *)(v2 + 64) - *(void *)(v2 + 56) >= *(void *)(v4 + 64) - *(void *)(v4 + 56)) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = v2;
  }
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) < *(void *)(v5 + 64) - *(void *)(v5 + 56)) {
    uint64_t v5 = v3;
  }
  v11[0] = v5 + 32;
  v11[1] = v4;
  v11[2] = v2;
  v11[3] = v3;
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    uint64_t v8 = v7 + 8;
    do
    {
      uint64_t v7 = v8;
      uint64_t v12 = v8;
      if (v8 == v6) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      uint64_t v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>>(int8x8_t *a1)
{
  uint64_t v10 = 0x5E5AF20C38ADA136;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x5E5AF20C38ADA136;
    if (*(void *)&v1 <= 0x5E5AF20C38ADA136uLL) {
      uint64_t v3 = 0x5E5AF20C38ADA136uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x5E5AF20C38ADA136;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x5E5AF20C38ADA136)
      {
        if (v5[2] == 0x5E5AF20C38ADA136) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x5E5AF20C38ADA136) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x5E5AF20C38ADA136) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A201F1DC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t ecs2::Query<md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&>::Model<ecs2::RuntimeQuery<md::ls::PipelineSetup &,md::ls::FlyoverInstance const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>> const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::FlyoverInstance>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Shared>>>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  unint64_t v10 = (void *)v6;
  uint64_t v11 = (void *)(v6 + 32);
  if (v4[8] - v4[7] < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v11 = v4 + 4;
  }
  if (v5[8] - v5[7] >= v11[4] - v11[3]) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = v5 + 4;
  }
  v82[0] = v12;
  v82[1] = v6;
  v82[2] = v4;
  v82[3] = v5;
  uint64_t v14 = (void *)v12[3];
  uint64_t v13 = (void *)v12[4];
  uint64_t v83 = v14;
  if (v13 != v14
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82))
  {
    uint64_t v15 = v14 + 1;
    do
    {
      uint64_t v14 = v15;
      uint64_t v83 = v15;
      if (v15 == v13) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82);
      uint64_t v15 = v14 + 1;
    }
    while (!isValid);
  }
  unint64_t v17 = &ecs2::Runtime::_localEntity;
  uint64_t v18 = ecs2::Runtime::_localEntity;
  if (v13 == v14) {
    goto LABEL_82;
  }
  uint64_t v19 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *uint64_t v19 = *v14;
    unint64_t v21 = *v14;
    uint64_t v22 = HIDWORD(*v14);
    unint64_t v23 = *v14 >> 39;
    uint64_t v24 = v10[4];
    if (v23 >= (v10[5] - v24) >> 3) {
      goto LABEL_23;
    }
    uint64_t v25 = *(void *)(v24 + 8 * v23);
    if (!v25) {
      goto LABEL_23;
    }
    unint64_t v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F));
    uint64_t v28 = v10[7];
    uint64_t v27 = v10[8];
    if (v26 >= (v27 - v28) >> 3) {
      goto LABEL_23;
    }
    uint64_t v29 = v28 + 8 * v26;
    if (v29 != v27 && *(_DWORD *)(v29 + 4) == v22)
    {
      uint64_t v31 = v10[11];
      uint64_t v32 = v10[10] + 8 * v26;
    }
    else
    {
LABEL_23:
      uint64_t v31 = v10[11];
      uint64_t v32 = v31;
    }
    uint64_t v33 = v32 == v31 ? 0 : v32;
    if ((uint64_t v34 = v4[4], v23 < (v4[5] - v34) >> 3)
      && (uint64_t v35 = *(void *)(v34 + 8 * v23)) != 0
      && (unint64_t v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v21) & 0x7F)), v38 = v4[7], v37 = v4[8], v36 < (v37 - v38) >> 3)
      && ((v39 = v38 + 8 * v36, v39 != v37) ? (BOOL v40 = *(_DWORD *)(v39 + 4) == v22) : (BOOL v40 = 0), v40))
    {
      unint64_t v41 = v4[11];
      unint64_t v42 = v4[10] + v36;
    }
    else
    {
      unint64_t v41 = v4[11];
      unint64_t v42 = v41;
    }
    unint64_t v43 = v42 == v41 ? 0 : v42;
    uint64_t v44 = v5[4];
    if (v23 < (v5[5] - v44) >> 3)
    {
      uint64_t v45 = *(void *)(v44 + 8 * v23);
      if (v45)
      {
        unint64_t v46 = *(unsigned __int16 *)(v45 + 2 * (HIDWORD(v21) & 0x7F));
        uint64_t v48 = v5[7];
        uint64_t v47 = v5[8];
        if (v46 < (v47 - v48) >> 3)
        {
          uint64_t v49 = v48 + 8 * v46;
          if (v49 != v47 && *(_DWORD *)(v49 + 4) == v22) {
            break;
          }
        }
      }
    }
    unint64_t v51 = v5[11];
    unint64_t v52 = v51;
    uint64_t v53 = *(void *)(a2 + 24);
    if (!v53) {
      goto LABEL_81;
    }
LABEL_46:
    if (v52 == v51) {
      unint64_t v54 = 0;
    }
    else {
      unint64_t v54 = v52;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(void *)v53 + 48))(v53, v33, v43, v54);
    long long v56 = (void *)v12[4];
    uint64_t v20 = v14 + 1;
    uint64_t v83 = v14 + 1;
    if (v14 + 1 != v56)
    {
      uint64_t v57 = v10[4];
      uint64_t v59 = v10[7];
      uint64_t v58 = v10[8];
      uint64_t v60 = v4[4];
      uint64_t result = v4[7];
      uint64_t v61 = v4[8];
      uint64_t v62 = v5[4];
      uint64_t v64 = v5[7];
      uint64_t v63 = v5[8];
      while (1)
      {
        unint64_t v65 = *((unsigned int *)v20 + 1);
        unint64_t v66 = v65 >> 7;
        if (v65 >> 7 < (v10[5] - v57) >> 3)
        {
          uint64_t v67 = *(void *)(v57 + 8 * v66);
          if (v67)
          {
            uint64_t v68 = v65 & 0x7F;
            unint64_t v69 = *(unsigned __int16 *)(v67 + 2 * v68);
            if ((v58 - v59) >> 3 > v69)
            {
              uint64_t v70 = v59 + 8 * v69;
              BOOL v71 = v70 != v58 && *(_DWORD *)(v70 + 4) == v65;
              if (v71 && v66 < (v4[5] - v60) >> 3)
              {
                uint64_t v73 = *(void *)(v60 + 8 * v66);
                if (v73)
                {
                  unint64_t v74 = *(unsigned __int16 *)(v73 + 2 * v68);
                  if ((v61 - result) >> 3 > v74)
                  {
                    unint64_t v75 = result + 8 * v74;
                    BOOL v76 = v75 != v61 && *(_DWORD *)(v75 + 4) == v65;
                    if (v76 && v66 < (v5[5] - v62) >> 3)
                    {
                      uint64_t v78 = *(void *)(v62 + 8 * v66);
                      if (v78)
                      {
                        unint64_t v79 = *(unsigned __int16 *)(v78 + 2 * v68);
                        if ((v63 - v64) >> 3 > v79)
                        {
                          uint64_t v80 = v64 + 8 * v79;
                          if (*(_DWORD *)(v80 + 4) == v65 && v80 != v63) {
                            break;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v20 == v56)
        {
          uint64_t v20 = v56;
          goto LABEL_14;
        }
      }
      long long v56 = v20;
LABEL_14:
      uint64_t v83 = v20;
    }
    uint64_t v14 = v56;
    if (v13 == v56) {
      goto LABEL_83;
    }
  }
  unint64_t v51 = v5[11];
  unint64_t v52 = v5[10] + v46;
  uint64_t v53 = *(void *)(a2 + 24);
  if (v53) {
    goto LABEL_46;
  }
LABEL_81:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_82:
  uint64_t result = ((uint64_t (*)(uint64_t (**)(void), uint64_t, uint64_t, uint64_t))v18)(v17, v7, v8, v9);
  uint64_t v19 = (void *)result;
LABEL_83:
  *uint64_t v19 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::FlyoverSharedConstants const&>::Model<ecs2::RuntimeQuery<md::ls::FlyoverSharedConstants const&>>::empty(uint64_t a1)
{
  uint64_t v1 = (void *)gdc::Registry::storage<md::ls::FlyoverSharedConstants>(*(int8x8_t **)(*(void *)(a1 + 8) + 8));
  uint64_t v3 = v1[7];
  uint64_t v2 = v1[8];
  uint64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if ((unint64_t v5 = *(unsigned int *)(v3 + 4), v6 = v1[4], v7 = (v1[5] - v6) >> 3, v5 >> 7 >= v7)
      || (uint64_t v8 = *(void *)(v6 + 8 * (v5 >> 7))) == 0
      || (unint64_t v9 = *(unsigned __int16 *)(v8 + 2 * (v5 & 0x7F)), v9 >= v4 >> 3)
      || ((uint64_t v10 = v3 + 8 * v9, v10 != v2) ? (v11 = *(_DWORD *)(v10 + 4) == v5) : (v11 = 0), !v11))
    {
      unint64_t v12 = v4 >> 3;
      uint64_t v13 = v3 + 8;
      while (v13 != v2)
      {
        unint64_t v14 = *(unsigned int *)(v13 + 4);
        uint64_t v15 = v1[8];
        if (v14 >> 7 < v7)
        {
          uint64_t v16 = *(void *)(v6 + 8 * (v14 >> 7));
          uint64_t v15 = v1[8];
          if (v16)
          {
            unint64_t v17 = *(unsigned __int16 *)(v16 + 2 * (v14 & 0x7F));
            uint64_t v15 = v1[8];
            if (v12 > v17)
            {
              uint64_t v15 = v3 + 8 * v17;
              if (*(_DWORD *)(v15 + 4) != v14) {
                uint64_t v15 = v1[8];
              }
            }
          }
        }
        v13 += 8;
        if (v15 != v2)
        {
          uint64_t v3 = v13 - 8;
          return v2 == v3;
        }
      }
      uint64_t v3 = v1[8];
    }
  }
  return v2 == v3;
}

BOOL gdc::ComponentStorageWrapper<md::ls::FlyoverSharedConstants>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::FlyoverSharedConstants>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FlyoverSharedConstants>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::FlyoverSharedConstants>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverSharedConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverSharedConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C520;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverSharedConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverSharedConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverClipConstantData>(md::ita::AssignFlyoverClipConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverClipConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverClipConstantData>(md::ita::AssignFlyoverClipConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52AAA0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverClipConstantData>(md::ita::AssignFlyoverClipConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverClipConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverClipConstantData>(md::ita::AssignFlyoverClipConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverClipConstantData>(md::ita::AssignFlyoverClipConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverClipConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverClipConstantData>(md::ita::AssignFlyoverClipConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52AAE8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverClipConstantData>(md::ita::AssignFlyoverClipConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverClipConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverClipConstantData>(md::ita::AssignFlyoverClipConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Clip>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FlyoverClipConstantDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::FlyoverClipConstantDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FlyoverClipConstantDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::FlyoverClipConstantDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverClipConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverClipConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51BF80;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverClipConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverClipConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTransformConstantData>(md::ita::AssignFlyoverTransformConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverTransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTransformConstantData>(md::ita::AssignFlyoverTransformConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C000;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTransformConstantData>(md::ita::AssignFlyoverTransformConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignFlyoverTransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTransformConstantData>(md::ita::AssignFlyoverTransformConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTransformConstantData>(md::ita::AssignFlyoverTransformConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverTransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTransformConstantData>(md::ita::AssignFlyoverTransformConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C048;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTransformConstantData>(md::ita::AssignFlyoverTransformConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignFlyoverTransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignFlyoverTransformConstantData>(md::ita::AssignFlyoverTransformConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::FlyoverCommon::Transform>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FlyoverCommonTransformConstantDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::FlyoverCommonTransformConstantDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FlyoverCommonTransformConstantDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::FlyoverCommonTransformConstantDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverTransformConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverTransformConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51CA30;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignFlyoverTransformConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignFlyoverTransformConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignUVsDeviceData>(md::ita::AssignUVsDeviceData &&)::{lambda(void)#2},std::allocator<md::ita::AssignUVsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignUVsDeviceData>(md::ita::AssignUVsDeviceData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF527AD0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignUVsDeviceData>(md::ita::AssignUVsDeviceData &&)::{lambda(void)#2},std::allocator<md::ita::AssignUVsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignUVsDeviceData>(md::ita::AssignUVsDeviceData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignUVsDeviceData>(md::ita::AssignUVsDeviceData &&)::{lambda(void)#1},std::allocator<md::ita::AssignUVsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignUVsDeviceData>(md::ita::AssignUVsDeviceData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF527B18;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignUVsDeviceData>(md::ita::AssignUVsDeviceData &&)::{lambda(void)#1},std::allocator<md::ita::AssignUVsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignUVsDeviceData>(md::ita::AssignUVsDeviceData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::UVs>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UVsHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::UVsHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UVsHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::UVsHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignUVsDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignUVsDeviceData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51A798;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignUVsDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignUVsDeviceData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignNormalsDeviceData>(md::ita::AssignNormalsDeviceData &&)::{lambda(void)#2},std::allocator<md::ita::AssignNormalsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignNormalsDeviceData>(md::ita::AssignNormalsDeviceData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF528C40;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignNormalsDeviceData>(md::ita::AssignNormalsDeviceData &&)::{lambda(void)#2},std::allocator<md::ita::AssignNormalsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignNormalsDeviceData>(md::ita::AssignNormalsDeviceData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignNormalsDeviceData>(md::ita::AssignNormalsDeviceData &&)::{lambda(void)#1},std::allocator<md::ita::AssignNormalsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignNormalsDeviceData>(md::ita::AssignNormalsDeviceData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF528C88;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignNormalsDeviceData>(md::ita::AssignNormalsDeviceData &&)::{lambda(void)#1},std::allocator<md::ita::AssignNormalsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignNormalsDeviceData>(md::ita::AssignNormalsDeviceData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Normals>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::NormalsHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::NormalsHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::NormalsHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::NormalsHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignNormalsDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignNormalsDeviceData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B050;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignNormalsDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignNormalsDeviceData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignElevationsDeviceData>(md::ita::AssignElevationsDeviceData &&)::{lambda(void)#2},std::allocator<md::ita::AssignElevationsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignElevationsDeviceData>(md::ita::AssignElevationsDeviceData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529AE0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignElevationsDeviceData>(md::ita::AssignElevationsDeviceData &&)::{lambda(void)#2},std::allocator<md::ita::AssignElevationsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignElevationsDeviceData>(md::ita::AssignElevationsDeviceData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignElevationsDeviceData>(md::ita::AssignElevationsDeviceData &&)::{lambda(void)#1},std::allocator<md::ita::AssignElevationsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignElevationsDeviceData>(md::ita::AssignElevationsDeviceData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529B28;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignElevationsDeviceData>(md::ita::AssignElevationsDeviceData &&)::{lambda(void)#1},std::allocator<md::ita::AssignElevationsDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignElevationsDeviceData>(md::ita::AssignElevationsDeviceData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::Elevations>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ElevationHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::ElevationHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::ElevationHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::ElevationHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignElevationsDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignElevationsDeviceData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B7A0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignElevationsDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignElevationsDeviceData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignInstanceTransformDeviceData>(md::ita::AssignInstanceTransformDeviceData &&)::{lambda(void)#2},std::allocator<md::ita::AssignInstanceTransformDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignInstanceTransformDeviceData>(md::ita::AssignInstanceTransformDeviceData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52BDC0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignInstanceTransformDeviceData>(md::ita::AssignInstanceTransformDeviceData &&)::{lambda(void)#2},std::allocator<md::ita::AssignInstanceTransformDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignInstanceTransformDeviceData>(md::ita::AssignInstanceTransformDeviceData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignInstanceTransformDeviceData>(md::ita::AssignInstanceTransformDeviceData &&)::{lambda(void)#1},std::allocator<md::ita::AssignInstanceTransformDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignInstanceTransformDeviceData>(md::ita::AssignInstanceTransformDeviceData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52BE08;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignInstanceTransformDeviceData>(md::ita::AssignInstanceTransformDeviceData &&)::{lambda(void)#1},std::allocator<md::ita::AssignInstanceTransformDeviceData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignInstanceTransformDeviceData>(md::ita::AssignInstanceTransformDeviceData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderDeviceDataID<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::InstanceTransformHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::InstanceTransformHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::InstanceTransformHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::InstanceTransformHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignInstanceTransformDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignInstanceTransformDeviceData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C910;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignInstanceTransformDeviceData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignInstanceTransformDeviceData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDiffuseTextureIndex>(md::ita::AssignDiffuseTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignDiffuseTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDiffuseTextureIndex>(md::ita::AssignDiffuseTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529780;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDiffuseTextureIndex>(md::ita::AssignDiffuseTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignDiffuseTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDiffuseTextureIndex>(md::ita::AssignDiffuseTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDiffuseTextureIndex>(md::ita::AssignDiffuseTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignDiffuseTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDiffuseTextureIndex>(md::ita::AssignDiffuseTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF5297C8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDiffuseTextureIndex>(md::ita::AssignDiffuseTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignDiffuseTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDiffuseTextureIndex>(md::ita::AssignDiffuseTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::DiffuseTexture>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::DiffuseTexture>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::DiffuseTexture>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::DiffuseTexture>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignDiffuseTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignDiffuseTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B5F0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignDiffuseTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignDiffuseTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient2TextureIndex>(md::ita::AssignGradient2TextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignGradient2TextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient2TextureIndex>(md::ita::AssignGradient2TextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529FF0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient2TextureIndex>(md::ita::AssignGradient2TextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignGradient2TextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient2TextureIndex>(md::ita::AssignGradient2TextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient2TextureIndex>(md::ita::AssignGradient2TextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignGradient2TextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient2TextureIndex>(md::ita::AssignGradient2TextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A038;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient2TextureIndex>(md::ita::AssignGradient2TextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignGradient2TextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient2TextureIndex>(md::ita::AssignGradient2TextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::Gradient2Texture>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::Gradient2Texture>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::Gradient2Texture>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::Gradient2Texture>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          uint64_t v13 = a1[10];
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          *(void *)(v13 + 8 * v7) = *(void *)(a1[11] - 8);
          a1[11] -= 8;
          uint64_t v14 = (void *)a1[28];
          if (v14)
          {
            uint64_t v15 = a1[31];
            while (1)
            {
              v20[0] = &v18;
              v20[1] = 1;
              uint64_t v19 = v15;
              uint64_t v16 = v14[6];
              if (!v16) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v19, v20);
              uint64_t v14 = (void *)*v14;
              if (!v14) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>::~ComponentStorageWrapper(v17);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::Gradient2Texture>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGradient2TextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGradient2TextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51BA28;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGradient2TextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGradient2TextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient1TextureIndex>(md::ita::AssignGradient1TextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignGradient1TextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient1TextureIndex>(md::ita::AssignGradient1TextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529F60;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient1TextureIndex>(md::ita::AssignGradient1TextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignGradient1TextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient1TextureIndex>(md::ita::AssignGradient1TextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient1TextureIndex>(md::ita::AssignGradient1TextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignGradient1TextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient1TextureIndex>(md::ita::AssignGradient1TextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529FA8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient1TextureIndex>(md::ita::AssignGradient1TextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignGradient1TextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradient1TextureIndex>(md::ita::AssignGradient1TextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::Gradient1Texture>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::Gradient1Texture>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::Gradient1Texture>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::Gradient1Texture>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          uint64_t v13 = a1[10];
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          *(void *)(v13 + 8 * v7) = *(void *)(a1[11] - 8);
          a1[11] -= 8;
          uint64_t v14 = (void *)a1[28];
          if (v14)
          {
            uint64_t v15 = a1[31];
            while (1)
            {
              v20[0] = &v18;
              v20[1] = 1;
              uint64_t v19 = v15;
              uint64_t v16 = v14[6];
              if (!v16) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v19, v20);
              uint64_t v14 = (void *)*v14;
              if (!v14) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>::~ComponentStorageWrapper(v17);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::Gradient1Texture>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGradient1TextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGradient1TextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B9E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGradient1TextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGradient1TextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTemperatureTextureIndex>(md::ita::AssignTemperatureTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignTemperatureTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTemperatureTextureIndex>(md::ita::AssignTemperatureTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52AC50;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTemperatureTextureIndex>(md::ita::AssignTemperatureTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignTemperatureTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTemperatureTextureIndex>(md::ita::AssignTemperatureTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTemperatureTextureIndex>(md::ita::AssignTemperatureTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignTemperatureTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTemperatureTextureIndex>(md::ita::AssignTemperatureTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52AC98;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTemperatureTextureIndex>(md::ita::AssignTemperatureTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignTemperatureTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTemperatureTextureIndex>(md::ita::AssignTemperatureTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::TemperatureTexture>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::TemperatureTexture>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::TemperatureTexture>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::TemperatureTexture>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::HasStyleAttributeRasterSet>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::HasStyleAttributeRasterSet>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::HasStyleAttributeRasterSet>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::HasStyleAttributeRasterSet>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTemperatureTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTemperatureTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C058;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTemperatureTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTemperatureTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAridityTextureIndex>(md::ita::AssignAridityTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignAridityTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAridityTextureIndex>(md::ita::AssignAridityTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF5296F0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAridityTextureIndex>(md::ita::AssignAridityTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignAridityTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAridityTextureIndex>(md::ita::AssignAridityTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAridityTextureIndex>(md::ita::AssignAridityTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignAridityTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAridityTextureIndex>(md::ita::AssignAridityTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529738;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAridityTextureIndex>(md::ita::AssignAridityTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignAridityTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAridityTextureIndex>(md::ita::AssignAridityTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::AridityTexture>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::AridityTexture>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::AridityTexture>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::AridityTexture>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignAridityTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignAridityTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B5A8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignAridityTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignAridityTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTextureIndex>(md::ita::AssignStyleTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTextureIndex>(md::ita::AssignStyleTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF528E80;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTextureIndex>(md::ita::AssignStyleTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTextureIndex>(md::ita::AssignStyleTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTextureIndex>(md::ita::AssignStyleTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTextureIndex>(md::ita::AssignStyleTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF528EC8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTextureIndex>(md::ita::AssignStyleTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTextureIndex>(md::ita::AssignStyleTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::StyleTexture>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::StyleTexture>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::StyleTexture>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::StyleTexture>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::HasMaterialRasterRenderItem>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::HasMaterialRasterRenderItem>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::HasMaterialRasterRenderItem>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::HasMaterialRasterRenderItem>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B170;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleIndexTextureIndex>(md::ita::AssignStyleIndexTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleIndexTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleIndexTextureIndex>(md::ita::AssignStyleIndexTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A620;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleIndexTextureIndex>(md::ita::AssignStyleIndexTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleIndexTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleIndexTextureIndex>(md::ita::AssignStyleIndexTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleIndexTextureIndex>(md::ita::AssignStyleIndexTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleIndexTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleIndexTextureIndex>(md::ita::AssignStyleIndexTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A668;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleIndexTextureIndex>(md::ita::AssignStyleIndexTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleIndexTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleIndexTextureIndex>(md::ita::AssignStyleIndexTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::StyleIndexTexture>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::StyleIndexTexture>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::StyleIndexTexture>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::StyleIndexTexture>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleIndexTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleIndexTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51BD40;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleIndexTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleIndexTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOverlayTextureIndex>(md::ita::AssignOverlayTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignOverlayTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOverlayTextureIndex>(md::ita::AssignOverlayTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529810;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOverlayTextureIndex>(md::ita::AssignOverlayTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignOverlayTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOverlayTextureIndex>(md::ita::AssignOverlayTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOverlayTextureIndex>(md::ita::AssignOverlayTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignOverlayTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOverlayTextureIndex>(md::ita::AssignOverlayTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529858;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOverlayTextureIndex>(md::ita::AssignOverlayTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignOverlayTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOverlayTextureIndex>(md::ita::AssignOverlayTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::OverlayTexture>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::OverlayTexture>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::OverlayTexture>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::OverlayTexture>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::OverlayTexture>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::OverlayTexture>>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::OverlayTexture>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::OverlayTexture>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignOverlayTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignOverlayTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B638;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignOverlayTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignOverlayTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignEmissiveTextureIndex>(md::ita::AssignEmissiveTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignEmissiveTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignEmissiveTextureIndex>(md::ita::AssignEmissiveTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529B70;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignEmissiveTextureIndex>(md::ita::AssignEmissiveTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignEmissiveTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignEmissiveTextureIndex>(md::ita::AssignEmissiveTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignEmissiveTextureIndex>(md::ita::AssignEmissiveTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignEmissiveTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignEmissiveTextureIndex>(md::ita::AssignEmissiveTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529BB8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignEmissiveTextureIndex>(md::ita::AssignEmissiveTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignEmissiveTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignEmissiveTextureIndex>(md::ita::AssignEmissiveTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::EmissiveTexture>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::EmissiveTexture>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::EmissiveTexture>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::EmissiveTexture>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignEmissiveTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignEmissiveTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B7E8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignEmissiveTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignEmissiveTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRouteMaskTextureIndex>(md::ita::AssignRouteMaskTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignRouteMaskTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRouteMaskTextureIndex>(md::ita::AssignRouteMaskTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A110;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRouteMaskTextureIndex>(md::ita::AssignRouteMaskTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignRouteMaskTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRouteMaskTextureIndex>(md::ita::AssignRouteMaskTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRouteMaskTextureIndex>(md::ita::AssignRouteMaskTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignRouteMaskTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRouteMaskTextureIndex>(md::ita::AssignRouteMaskTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A158;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRouteMaskTextureIndex>(md::ita::AssignRouteMaskTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignRouteMaskTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRouteMaskTextureIndex>(md::ita::AssignRouteMaskTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture> const&,md::ls::PipelineSetup &>::Model<ecs2::RuntimeQuery<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture> const&,md::ls::PipelineSetup &>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture>>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::PipelineSetup>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7]) {
    uint64_t v6 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(void *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7]) {
    uint64_t v7 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v7 = (uint64_t)v5;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture>>(int8x8_t *a1)
{
  uint64_t v10 = 0x3B44468EF6722590;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x3B44468EF6722590;
    if (*(void *)&v1 <= 0x3B44468EF6722590uLL) {
      uint64_t v3 = 0x3B44468EF6722590uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x3B44468EF6722590;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x3B44468EF6722590)
      {
        if (v5[2] == 0x3B44468EF6722590) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x3B44468EF6722590) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x3B44468EF6722590) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A2023AA4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture> const&,md::ls::PipelineSetup &>::Model<ecs2::RuntimeQuery<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture> const&,md::ls::PipelineSetup &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::RouteMaskTexture>>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  uint64_t v6 = v5;
  unint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(void *)(v9 + 32));
  unint64_t v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61) {
    goto LABEL_55;
  }
  unint64_t v12 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    void *v12 = *v11;
    unint64_t v13 = *v11;
    unint64_t v14 = HIDWORD(*v11);
    unint64_t v15 = v13 >> 39;
    uint64_t v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3) {
      goto LABEL_17;
    }
    uint64_t v17 = *(void *)(v16 + 8 * v15);
    if (!v17) {
      goto LABEL_17;
    }
    unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    uint64_t v20 = v4[7];
    uint64_t v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3) {
      goto LABEL_17;
    }
    uint64_t v21 = v20 + 8 * v18;
    BOOL v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == v14;
    if (v22)
    {
      unint64_t v23 = v4[11];
      unint64_t v24 = v4[10] + v18;
    }
    else
    {
LABEL_17:
      unint64_t v23 = v4[11];
      unint64_t v24 = v23;
    }
    unint64_t v25 = v24 == v23 ? 0 : v24;
    uint64_t v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      uint64_t v27 = *(void *)(v26 + 8 * v15);
      if (v27)
      {
        unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        uint64_t v30 = v6[7];
        uint64_t v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          uint64_t v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == v14) {
            break;
          }
        }
      }
    }
    uint64_t v33 = v6[11];
    uint64_t v34 = v33;
    uint64_t v35 = *(void *)(a2 + 24);
    if (!v35) {
      goto LABEL_54;
    }
LABEL_29:
    if (v34 == v33) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = v34;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v35 + 48))(v35, v25, v36);
    uint64_t v38 = v61;
    uint64_t v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      uint64_t v39 = v59[4];
      unint64_t v40 = (v59[5] - v39) >> 3;
      unint64_t v41 = v38 + 2;
      while (1)
      {
        unint64_t v42 = *((unsigned int *)v41 - 1);
        unint64_t v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          uint64_t v44 = *(void *)(v39 + 8 * v43);
          if (v44)
          {
            unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            uint64_t v46 = v59[7];
            uint64_t result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              uint64_t v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == v42)
              {
                uint64_t v49 = v60[4];
                uint64_t result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  uint64_t v50 = *(void *)(v49 + 8 * v43);
                  if (v50)
                  {
                    unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    uint64_t v53 = v60[7];
                    uint64_t v52 = v60[8];
                    uint64_t result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      uint64_t v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == v42) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v61 = v41;
        BOOL v22 = v41++ == v11;
        if (v22) {
          goto LABEL_9;
        }
      }
      uint64_t v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11) {
      goto LABEL_56;
    }
  }
  uint64_t v33 = v6[11];
  uint64_t v34 = v6[10] + 8 * v28;
  uint64_t v35 = *(void *)(a2 + 24);
  if (v35) {
    goto LABEL_29;
  }
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  uint64_t result = (*v10)();
  unint64_t v12 = (void *)result;
LABEL_56:
  void *v12 = 0xFFFFFFFF00000000;
  return result;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRouteMaskTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRouteMaskTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51BAB8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRouteMaskTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRouteMaskTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOcclusionTextureIndex>(md::ita::AssignOcclusionTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignOcclusionTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOcclusionTextureIndex>(md::ita::AssignOcclusionTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A080;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOcclusionTextureIndex>(md::ita::AssignOcclusionTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignOcclusionTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOcclusionTextureIndex>(md::ita::AssignOcclusionTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOcclusionTextureIndex>(md::ita::AssignOcclusionTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignOcclusionTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOcclusionTextureIndex>(md::ita::AssignOcclusionTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A0C8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOcclusionTextureIndex>(md::ita::AssignOcclusionTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignOcclusionTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignOcclusionTextureIndex>(md::ita::AssignOcclusionTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture> const&,md::ls::PipelineSetup &>::Model<ecs2::RuntimeQuery<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture> const&,md::ls::PipelineSetup &>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture>>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::PipelineSetup>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7]) {
    uint64_t v6 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(void *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7]) {
    uint64_t v7 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v7 = (uint64_t)v5;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  unint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    unint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::OcclusionTexture>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignOcclusionTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignOcclusionTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51BA70;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignOcclusionTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignOcclusionTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTexTextureIndex>(md::ita::AssignTexTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignTexTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTexTextureIndex>(md::ita::AssignTexTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF528100;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTexTextureIndex>(md::ita::AssignTexTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignTexTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTexTextureIndex>(md::ita::AssignTexTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTexTextureIndex>(md::ita::AssignTexTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignTexTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTexTextureIndex>(md::ita::AssignTexTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF528148;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTexTextureIndex>(md::ita::AssignTexTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignTexTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTexTextureIndex>(md::ita::AssignTexTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::TexTexture>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::TexTexture>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  unint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    unint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::TexTexture>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::TexTexture>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::TexTexture>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::TexTexture>>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::TexTexture>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::TextureHandleForType<DaVinci::TexTexture>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTexTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTexTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51AAB0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTexTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTexTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowTextureIndex>(md::ita::AssignShadowTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignShadowTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowTextureIndex>(md::ita::AssignShadowTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529270;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowTextureIndex>(md::ita::AssignShadowTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignShadowTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowTextureIndex>(md::ita::AssignShadowTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowTextureIndex>(md::ita::AssignShadowTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignShadowTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowTextureIndex>(md::ita::AssignShadowTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF5292B8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowTextureIndex>(md::ita::AssignShadowTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignShadowTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowTextureIndex>(md::ita::AssignShadowTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture> const&,md::ls::PipelineSetup &>::Model<ecs2::RuntimeQuery<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture> const&,md::ls::PipelineSetup &>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture>>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::PipelineSetup>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7]) {
    uint64_t v6 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(void *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7]) {
    uint64_t v7 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v7 = (uint64_t)v5;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

uint64_t gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture>>(int8x8_t *a1)
{
  uint64_t v10 = 0x4B2419C7BBAFEE01;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x4B2419C7BBAFEE01;
    if (*(void *)&v1 <= 0x4B2419C7BBAFEE01uLL) {
      uint64_t v3 = 0x4B2419C7BBAFEE01uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x4B2419C7BBAFEE01;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x4B2419C7BBAFEE01)
      {
        if (v5[2] == 0x4B2419C7BBAFEE01) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x4B2419C7BBAFEE01) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x4B2419C7BBAFEE01) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A2024AF4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t ecs2::Query<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture> const&,md::ls::PipelineSetup &>::Model<ecs2::RuntimeQuery<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture> const&,md::ls::PipelineSetup &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::RequiresShaderTextureID<DaVinci::ShadowTexture>>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::PipelineSetup>(v3);
  uint64_t v6 = v5;
  unint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(void *)(v9 + 32));
  unint64_t v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61) {
    goto LABEL_55;
  }
  unint64_t v12 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    void *v12 = *v11;
    unint64_t v13 = *v11;
    unint64_t v14 = HIDWORD(*v11);
    unint64_t v15 = v13 >> 39;
    uint64_t v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3) {
      goto LABEL_17;
    }
    uint64_t v17 = *(void *)(v16 + 8 * v15);
    if (!v17) {
      goto LABEL_17;
    }
    unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    uint64_t v20 = v4[7];
    uint64_t v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3) {
      goto LABEL_17;
    }
    uint64_t v21 = v20 + 8 * v18;
    BOOL v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == v14;
    if (v22)
    {
      unint64_t v23 = v4[11];
      unint64_t v24 = v4[10] + v18;
    }
    else
    {
LABEL_17:
      unint64_t v23 = v4[11];
      unint64_t v24 = v23;
    }
    unint64_t v25 = v24 == v23 ? 0 : v24;
    uint64_t v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      uint64_t v27 = *(void *)(v26 + 8 * v15);
      if (v27)
      {
        unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        uint64_t v30 = v6[7];
        uint64_t v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          uint64_t v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == v14) {
            break;
          }
        }
      }
    }
    uint64_t v33 = v6[11];
    uint64_t v34 = v33;
    uint64_t v35 = *(void *)(a2 + 24);
    if (!v35) {
      goto LABEL_54;
    }
LABEL_29:
    if (v34 == v33) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = v34;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v35 + 48))(v35, v25, v36);
    uint64_t v38 = v61;
    uint64_t v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      uint64_t v39 = v59[4];
      unint64_t v40 = (v59[5] - v39) >> 3;
      unint64_t v41 = v38 + 2;
      while (1)
      {
        unint64_t v42 = *((unsigned int *)v41 - 1);
        unint64_t v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          uint64_t v44 = *(void *)(v39 + 8 * v43);
          if (v44)
          {
            unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            uint64_t v46 = v59[7];
            uint64_t result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              uint64_t v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == v42)
              {
                uint64_t v49 = v60[4];
                uint64_t result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  uint64_t v50 = *(void *)(v49 + 8 * v43);
                  if (v50)
                  {
                    unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    uint64_t v53 = v60[7];
                    uint64_t v52 = v60[8];
                    uint64_t result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      uint64_t v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == v42) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v61 = v41;
        BOOL v22 = v41++ == v11;
        if (v22) {
          goto LABEL_9;
        }
      }
      uint64_t v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11) {
      goto LABEL_56;
    }
  }
  uint64_t v33 = v6[11];
  uint64_t v34 = v6[10] + 8 * v28;
  uint64_t v35 = *(void *)(a2 + 24);
  if (v35) {
    goto LABEL_29;
  }
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  uint64_t result = (*v10)();
  unint64_t v12 = (void *)result;
LABEL_56:
  void *v12 = 0xFFFFFFFF00000000;
  return result;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignShadowTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignShadowTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B368;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignShadowTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignShadowTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAmbientTextureIndex>(md::ita::AssignAmbientTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignAmbientTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAmbientTextureIndex>(md::ita::AssignAmbientTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529660;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAmbientTextureIndex>(md::ita::AssignAmbientTextureIndex &&)::{lambda(void)#2},std::allocator<md::ita::AssignAmbientTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAmbientTextureIndex>(md::ita::AssignAmbientTextureIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAmbientTextureIndex>(md::ita::AssignAmbientTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignAmbientTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAmbientTextureIndex>(md::ita::AssignAmbientTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF5296A8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAmbientTextureIndex>(md::ita::AssignAmbientTextureIndex &&)::{lambda(void)#1},std::allocator<md::ita::AssignAmbientTextureIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignAmbientTextureIndex>(md::ita::AssignAmbientTextureIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::AmbientTexture>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::AmbientTexture>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  unint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    unint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::AmbientTexture>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderTextureID<DaVinci::AmbientTexture>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignAmbientTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignAmbientTextureIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B560;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignAmbientTextureIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignAmbientTextureIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradientParametersConstantData>(md::ita::AssignGradientParametersConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignGradientParametersConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradientParametersConstantData>(md::ita::AssignGradientParametersConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C5A0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradientParametersConstantData>(md::ita::AssignGradientParametersConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignGradientParametersConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradientParametersConstantData>(md::ita::AssignGradientParametersConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradientParametersConstantData>(md::ita::AssignGradientParametersConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignGradientParametersConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradientParametersConstantData>(md::ita::AssignGradientParametersConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C5E8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradientParametersConstantData>(md::ita::AssignGradientParametersConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignGradientParametersConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGradientParametersConstantData>(md::ita::AssignGradientParametersConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::GradientConstantDataHandle2>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::GradientConstantDataHandle2>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          uint64_t v13 = a1[10];
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          *(void *)(v13 + 8 * v7) = *(void *)(a1[11] - 8);
          a1[11] -= 8;
          unint64_t v14 = (void *)a1[28];
          if (v14)
          {
            uint64_t v15 = a1[31];
            while (1)
            {
              v20[0] = &v18;
              v20[1] = 1;
              uint64_t v19 = v15;
              uint64_t v16 = v14[6];
              if (!v16) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v19, v20);
              unint64_t v14 = (void *)*v14;
              if (!v14) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<md::ls::GradientConstantDataHandle2>::~ComponentStorageWrapper(v17);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<md::ls::GradientConstantDataHandle2>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  unint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    unint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GradientParameters>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::GradientConstantDataHandle1>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::GradientConstantDataHandle1>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          uint64_t v13 = a1[10];
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          *(void *)(v13 + 8 * v7) = *(void *)(a1[11] - 8);
          a1[11] -= 8;
          unint64_t v14 = (void *)a1[28];
          if (v14)
          {
            uint64_t v15 = a1[31];
            while (1)
            {
              v20[0] = &v18;
              v20[1] = 1;
              uint64_t v19 = v15;
              uint64_t v16 = v14[6];
              if (!v16) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v19, v20);
              unint64_t v14 = (void *)*v14;
              if (!v14) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<md::ls::GradientConstantDataHandle1>::~ComponentStorageWrapper(v17);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<md::ls::GradientConstantDataHandle1>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGradientParametersConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGradientParametersConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51CD00;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGradientParametersConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGradientParametersConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignMaterialStyleConstantData>(md::ita::AssignMaterialStyleConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignMaterialStyleConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignMaterialStyleConstantData>(md::ita::AssignMaterialStyleConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B670;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignMaterialStyleConstantData>(md::ita::AssignMaterialStyleConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignMaterialStyleConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignMaterialStyleConstantData>(md::ita::AssignMaterialStyleConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignMaterialStyleConstantData>(md::ita::AssignMaterialStyleConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignMaterialStyleConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignMaterialStyleConstantData>(md::ita::AssignMaterialStyleConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B6B8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignMaterialStyleConstantData>(md::ita::AssignMaterialStyleConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignMaterialStyleConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignMaterialStyleConstantData>(md::ita::AssignMaterialStyleConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  unint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    unint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::MaterialStyle>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignMaterialStyleConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignMaterialStyleConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C568;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignMaterialStyleConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignMaterialStyleConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleGroundOcclusionConstantData>(md::ita::AssignStyleGroundOcclusionConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleGroundOcclusionConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleGroundOcclusionConstantData>(md::ita::AssignStyleGroundOcclusionConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52CBD0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleGroundOcclusionConstantData>(md::ita::AssignStyleGroundOcclusionConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleGroundOcclusionConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleGroundOcclusionConstantData>(md::ita::AssignStyleGroundOcclusionConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleGroundOcclusionConstantData>(md::ita::AssignStyleGroundOcclusionConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleGroundOcclusionConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleGroundOcclusionConstantData>(md::ita::AssignStyleGroundOcclusionConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52CC18;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleGroundOcclusionConstantData>(md::ita::AssignStyleGroundOcclusionConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleGroundOcclusionConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleGroundOcclusionConstantData>(md::ita::AssignStyleGroundOcclusionConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  unint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    unint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleGroundOcclusion>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::StyleGroundOcclusionConstantDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::StyleGroundOcclusionConstantDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::StyleGroundOcclusionConstantDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::StyleGroundOcclusionConstantDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleGroundOcclusionConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleGroundOcclusionConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D018;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleGroundOcclusionConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleGroundOcclusionConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleRouteLineMaskConstantData>(md::ita::AssignStyleRouteLineMaskConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleRouteLineMaskConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleRouteLineMaskConstantData>(md::ita::AssignStyleRouteLineMaskConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C6C0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleRouteLineMaskConstantData>(md::ita::AssignStyleRouteLineMaskConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleRouteLineMaskConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleRouteLineMaskConstantData>(md::ita::AssignStyleRouteLineMaskConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleRouteLineMaskConstantData>(md::ita::AssignStyleRouteLineMaskConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleRouteLineMaskConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleRouteLineMaskConstantData>(md::ita::AssignStyleRouteLineMaskConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C708;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleRouteLineMaskConstantData>(md::ita::AssignStyleRouteLineMaskConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleRouteLineMaskConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleRouteLineMaskConstantData>(md::ita::AssignStyleRouteLineMaskConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleRouteLineMask>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::StyleRouteLineMaskDataKeyHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::StyleRouteLineMaskDataKeyHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::StyleRouteLineMaskDataKeyHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::StyleRouteLineMaskDataKeyHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleRouteLineMaskConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleRouteLineMaskConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51CD90;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleRouteLineMaskConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleRouteLineMaskConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleEmissiveColorConstantData>(md::ita::AssignStyleEmissiveColorConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleEmissiveColorConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleEmissiveColorConstantData>(md::ita::AssignStyleEmissiveColorConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C630;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleEmissiveColorConstantData>(md::ita::AssignStyleEmissiveColorConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleEmissiveColorConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleEmissiveColorConstantData>(md::ita::AssignStyleEmissiveColorConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleEmissiveColorConstantData>(md::ita::AssignStyleEmissiveColorConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleEmissiveColorConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleEmissiveColorConstantData>(md::ita::AssignStyleEmissiveColorConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C678;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleEmissiveColorConstantData>(md::ita::AssignStyleEmissiveColorConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleEmissiveColorConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleEmissiveColorConstantData>(md::ita::AssignStyleEmissiveColorConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleEmissiveColor>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::StyleEmissiveDataKeyHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::StyleEmissiveDataKeyHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(void *)(v14 + 8 * v7) = *(void *)(v15 - 8);
  a1[11] = v15 - 8;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::StyleEmissiveDataKeyHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::StyleEmissiveDataKeyHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleEmissiveColorConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleEmissiveColorConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51CD48;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleEmissiveColorConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleEmissiveColorConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLandCoverSettingsConstantData>(md::ita::AssignLandCoverSettingsConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignLandCoverSettingsConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLandCoverSettingsConstantData>(md::ita::AssignLandCoverSettingsConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C360;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLandCoverSettingsConstantData>(md::ita::AssignLandCoverSettingsConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignLandCoverSettingsConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLandCoverSettingsConstantData>(md::ita::AssignLandCoverSettingsConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLandCoverSettingsConstantData>(md::ita::AssignLandCoverSettingsConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignLandCoverSettingsConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLandCoverSettingsConstantData>(md::ita::AssignLandCoverSettingsConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C3A8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLandCoverSettingsConstantData>(md::ita::AssignLandCoverSettingsConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignLandCoverSettingsConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLandCoverSettingsConstantData>(md::ita::AssignLandCoverSettingsConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::LandCoverSettings>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::LandCoverSettingsConstantDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::LandCoverSettingsConstantDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::LandCoverSettingsConstantDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::LandCoverSettingsConstantDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLandCoverSettingsConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLandCoverSettingsConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51CBE0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLandCoverSettingsConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLandCoverSettingsConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLinearDepthConstantData>(md::ita::AssignLinearDepthConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignLinearDepthConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLinearDepthConstantData>(md::ita::AssignLinearDepthConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52AB30;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLinearDepthConstantData>(md::ita::AssignLinearDepthConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignLinearDepthConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLinearDepthConstantData>(md::ita::AssignLinearDepthConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLinearDepthConstantData>(md::ita::AssignLinearDepthConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignLinearDepthConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLinearDepthConstantData>(md::ita::AssignLinearDepthConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52AB78;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLinearDepthConstantData>(md::ita::AssignLinearDepthConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignLinearDepthConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLinearDepthConstantData>(md::ita::AssignLinearDepthConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::LinearDepth>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PrepassConstantDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::PrepassConstantDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PrepassConstantDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::PrepassConstantDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLinearDepthConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLinearDepthConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51BFC8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLinearDepthConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLinearDepthConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleShadowConstantData>(md::ita::AssignStyleShadowConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleShadowConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleShadowConstantData>(md::ita::AssignStyleShadowConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52ABC0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleShadowConstantData>(md::ita::AssignStyleShadowConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleShadowConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleShadowConstantData>(md::ita::AssignStyleShadowConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleShadowConstantData>(md::ita::AssignStyleShadowConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleShadowConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleShadowConstantData>(md::ita::AssignStyleShadowConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52AC08;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleShadowConstantData>(md::ita::AssignStyleShadowConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleShadowConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleShadowConstantData>(md::ita::AssignStyleShadowConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleShadow>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleShadowConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleShadowConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C010;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleShadowConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleShadowConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDepthPrePassConstantData>(md::ita::AssignDepthPrePassConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignDepthPrePassConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDepthPrePassConstantData>(md::ita::AssignDepthPrePassConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B1F0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDepthPrePassConstantData>(md::ita::AssignDepthPrePassConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignDepthPrePassConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDepthPrePassConstantData>(md::ita::AssignDepthPrePassConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDepthPrePassConstantData>(md::ita::AssignDepthPrePassConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignDepthPrePassConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDepthPrePassConstantData>(md::ita::AssignDepthPrePassConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B238;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDepthPrePassConstantData>(md::ita::AssignDepthPrePassConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignDepthPrePassConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignDepthPrePassConstantData>(md::ita::AssignDepthPrePassConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Shadow>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PrepassShadowConstantDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::PrepassShadowConstantDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PrepassShadowConstantDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::PrepassShadowConstantDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignDepthPrePassConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignDepthPrePassConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C328;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignDepthPrePassConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignDepthPrePassConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowConstantData>(md::ita::AssignShadowConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignShadowConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowConstantData>(md::ita::AssignShadowConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF5291E0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowConstantData>(md::ita::AssignShadowConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignShadowConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowConstantData>(md::ita::AssignShadowConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowConstantData>(md::ita::AssignShadowConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignShadowConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowConstantData>(md::ita::AssignShadowConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529228;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowConstantData>(md::ita::AssignShadowConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignShadowConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignShadowConstantData>(md::ita::AssignShadowConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::ShadowConstantDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::ShadowConstantDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::ShadowConstantDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::ShadowConstantDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignShadowConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignShadowConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B320;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignShadowConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignShadowConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderTargetSizeConstantData>(md::ita::AssignRenderTargetSizeConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignRenderTargetSizeConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderTargetSizeConstantData>(md::ita::AssignRenderTargetSizeConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C1B0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderTargetSizeConstantData>(md::ita::AssignRenderTargetSizeConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignRenderTargetSizeConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderTargetSizeConstantData>(md::ita::AssignRenderTargetSizeConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderTargetSizeConstantData>(md::ita::AssignRenderTargetSizeConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignRenderTargetSizeConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderTargetSizeConstantData>(md::ita::AssignRenderTargetSizeConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C1F8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderTargetSizeConstantData>(md::ita::AssignRenderTargetSizeConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignRenderTargetSizeConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderTargetSizeConstantData>(md::ita::AssignRenderTargetSizeConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RenderTargetSize>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRenderTargetSizeConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRenderTargetSizeConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51CB08;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRenderTargetSizeConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRenderTargetSizeConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSSAOConstantData>(md::ita::AssignStyleSSAOConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleSSAOConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSSAOConstantData>(md::ita::AssignStyleSSAOConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A1A0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSSAOConstantData>(md::ita::AssignStyleSSAOConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleSSAOConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSSAOConstantData>(md::ita::AssignStyleSSAOConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSSAOConstantData>(md::ita::AssignStyleSSAOConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleSSAOConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSSAOConstantData>(md::ita::AssignStyleSSAOConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A1E8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSSAOConstantData>(md::ita::AssignStyleSSAOConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleSSAOConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSSAOConstantData>(md::ita::AssignStyleSSAOConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::IsMaterial const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>> const&,md::ls::PipelineSetup &>::Model<ecs2::RuntimeQuery<md::ls::IsMaterial const&,md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>> const&,md::ls::PipelineSetup &>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::IsMaterial>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::PipelineSetup>(v1);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v3;
  }
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < *(void *)(v5 + 64) - *(void *)(v5 + 56)) {
    uint64_t v5 = v4;
  }
  v11[0] = v5 + 32;
  v11[1] = v2;
  v11[2] = v3;
  v11[3] = v4;
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    uint64_t v8 = v7 + 8;
    do
    {
      uint64_t v7 = v8;
      uint64_t v12 = v8;
      if (v8 == v6) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      uint64_t v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSSAO>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IsMaterial>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::IsMaterial>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IsMaterial>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::IsMaterial>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleSSAOConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleSSAOConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51BB00;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleSSAOConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleSSAOConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleBlendConstantData>(md::ita::AssignStyleBlendConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleBlendConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleBlendConstantData>(md::ita::AssignStyleBlendConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A590;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleBlendConstantData>(md::ita::AssignStyleBlendConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleBlendConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleBlendConstantData>(md::ita::AssignStyleBlendConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleBlendConstantData>(md::ita::AssignStyleBlendConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleBlendConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleBlendConstantData>(md::ita::AssignStyleBlendConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A5D8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleBlendConstantData>(md::ita::AssignStyleBlendConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleBlendConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleBlendConstantData>(md::ita::AssignStyleBlendConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleBlend>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleBlendConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleBlendConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51BCF8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleBlendConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleBlendConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGroundAtmosphereConstantData>(md::ita::AssignGroundAtmosphereConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignGroundAtmosphereConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGroundAtmosphereConstantData>(md::ita::AssignGroundAtmosphereConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C090;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGroundAtmosphereConstantData>(md::ita::AssignGroundAtmosphereConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignGroundAtmosphereConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGroundAtmosphereConstantData>(md::ita::AssignGroundAtmosphereConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGroundAtmosphereConstantData>(md::ita::AssignGroundAtmosphereConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignGroundAtmosphereConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGroundAtmosphereConstantData>(md::ita::AssignGroundAtmosphereConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C0D8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGroundAtmosphereConstantData>(md::ita::AssignGroundAtmosphereConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignGroundAtmosphereConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignGroundAtmosphereConstantData>(md::ita::AssignGroundAtmosphereConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::GroundAtmosphere>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGroundAtmosphereConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGroundAtmosphereConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51CA78;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignGroundAtmosphereConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignGroundAtmosphereConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPlanarParametersConstantData>(md::ita::AssignPlanarParametersConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignPlanarParametersConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPlanarParametersConstantData>(md::ita::AssignPlanarParametersConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C120;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPlanarParametersConstantData>(md::ita::AssignPlanarParametersConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignPlanarParametersConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPlanarParametersConstantData>(md::ita::AssignPlanarParametersConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPlanarParametersConstantData>(md::ita::AssignPlanarParametersConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignPlanarParametersConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPlanarParametersConstantData>(md::ita::AssignPlanarParametersConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C168;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPlanarParametersConstantData>(md::ita::AssignPlanarParametersConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignPlanarParametersConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPlanarParametersConstantData>(md::ita::AssignPlanarParametersConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::PlanarParameters>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PlanarConstantDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::PlanarConstantDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10] + 16 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  char v16 = *(unsigned char *)(v15 - 8);
  *(void *)uint64_t v14 = *(void *)(v15 - 16);
  *(unsigned char *)(v14 + 8) = v16;
  a1[11] -= 16;
  unint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    unint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PlanarConstantDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::PlanarConstantDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignPlanarParametersConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignPlanarParametersConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51CAC0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignPlanarParametersConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignPlanarParametersConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileTransformConstantData>(md::ita::AssignTileTransformConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignTileTransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileTransformConstantData>(md::ita::AssignTileTransformConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B790;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileTransformConstantData>(md::ita::AssignTileTransformConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignTileTransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileTransformConstantData>(md::ita::AssignTileTransformConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileTransformConstantData>(md::ita::AssignTileTransformConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignTileTransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileTransformConstantData>(md::ita::AssignTileTransformConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B7D8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileTransformConstantData>(md::ita::AssignTileTransformConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignTileTransformConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileTransformConstantData>(md::ita::AssignTileTransformConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Transform>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Transform>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Transform>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Transform>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::TransformConstantDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::TransformConstantDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TransformConstantDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::TransformConstantDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTileTransformConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTileTransformConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C5F8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTileTransformConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTileTransformConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleCameraLightingConstantData>(md::ita::AssignStyleCameraLightingConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleCameraLightingConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleCameraLightingConstantData>(md::ita::AssignStyleCameraLightingConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C990;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleCameraLightingConstantData>(md::ita::AssignStyleCameraLightingConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleCameraLightingConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleCameraLightingConstantData>(md::ita::AssignStyleCameraLightingConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleCameraLightingConstantData>(md::ita::AssignStyleCameraLightingConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleCameraLightingConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleCameraLightingConstantData>(md::ita::AssignStyleCameraLightingConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C9D8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleCameraLightingConstantData>(md::ita::AssignStyleCameraLightingConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleCameraLightingConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleCameraLightingConstantData>(md::ita::AssignStyleCameraLightingConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleCameraLighting>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::StyleCameraConstantDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::StyleCameraConstantDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::StyleCameraConstantDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::StyleCameraConstantDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleCameraLightingConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleCameraLightingConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51CEF8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleCameraLightingConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleCameraLightingConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignClippingConstantData>(md::ita::AssignClippingConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignClippingConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignClippingConstantData>(md::ita::AssignClippingConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529A50;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignClippingConstantData>(md::ita::AssignClippingConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignClippingConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignClippingConstantData>(md::ita::AssignClippingConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignClippingConstantData>(md::ita::AssignClippingConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignClippingConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignClippingConstantData>(md::ita::AssignClippingConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529A98;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignClippingConstantData>(md::ita::AssignClippingConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignClippingConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignClippingConstantData>(md::ita::AssignClippingConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Clipping>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Clipping>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Clipping>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::Clipping>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ClippingConstantDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::ClippingConstantDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::ClippingConstantDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::ClippingConstantDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignClippingConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignClippingConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B758;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignClippingConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignClippingConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightingConfigurationVertexData>(md::ita::AssignLightingConfigurationVertexData &&)::{lambda(void)#2},std::allocator<md::ita::AssignLightingConfigurationVertexData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightingConfigurationVertexData>(md::ita::AssignLightingConfigurationVertexData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C900;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightingConfigurationVertexData>(md::ita::AssignLightingConfigurationVertexData &&)::{lambda(void)#2},std::allocator<md::ita::AssignLightingConfigurationVertexData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightingConfigurationVertexData>(md::ita::AssignLightingConfigurationVertexData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightingConfigurationVertexData>(md::ita::AssignLightingConfigurationVertexData &&)::{lambda(void)#1},std::allocator<md::ita::AssignLightingConfigurationVertexData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightingConfigurationVertexData>(md::ita::AssignLightingConfigurationVertexData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C948;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightingConfigurationVertexData>(md::ita::AssignLightingConfigurationVertexData &&)::{lambda(void)#1},std::allocator<md::ita::AssignLightingConfigurationVertexData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightingConfigurationVertexData>(md::ita::AssignLightingConfigurationVertexData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightConfigurationVertex>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLightingConfigurationVertexData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLightingConfigurationVertexData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51CEB0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLightingConfigurationVertexData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLightingConfigurationVertexData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSunMatrixData>(md::ita::AssignStyleSunMatrixData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleSunMatrixData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSunMatrixData>(md::ita::AssignStyleSunMatrixData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529300;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSunMatrixData>(md::ita::AssignStyleSunMatrixData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleSunMatrixData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSunMatrixData>(md::ita::AssignStyleSunMatrixData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSunMatrixData>(md::ita::AssignStyleSunMatrixData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleSunMatrixData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSunMatrixData>(md::ita::AssignStyleSunMatrixData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529348;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSunMatrixData>(md::ita::AssignStyleSunMatrixData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleSunMatrixData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleSunMatrixData>(md::ita::AssignStyleSunMatrixData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleSunMatrix>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleSunMatrixData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleSunMatrixData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B3B0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleSunMatrixData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleSunMatrixData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTransitionToFlatData>(md::ita::AssignStyleTransitionToFlatData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleTransitionToFlatData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTransitionToFlatData>(md::ita::AssignStyleTransitionToFlatData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B700;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTransitionToFlatData>(md::ita::AssignStyleTransitionToFlatData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleTransitionToFlatData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTransitionToFlatData>(md::ita::AssignStyleTransitionToFlatData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTransitionToFlatData>(md::ita::AssignStyleTransitionToFlatData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleTransitionToFlatData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTransitionToFlatData>(md::ita::AssignStyleTransitionToFlatData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B748;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTransitionToFlatData>(md::ita::AssignStyleTransitionToFlatData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleTransitionToFlatData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleTransitionToFlatData>(md::ita::AssignStyleTransitionToFlatData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleTransitionToFlat>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleTransitionToFlatData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleTransitionToFlatData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C5B0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleTransitionToFlatData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleTransitionToFlatData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileElevatedStrokeData>(md::ita::AssignTileElevatedStrokeData &&)::{lambda(void)#2},std::allocator<md::ita::AssignTileElevatedStrokeData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileElevatedStrokeData>(md::ita::AssignTileElevatedStrokeData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A6B0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileElevatedStrokeData>(md::ita::AssignTileElevatedStrokeData &&)::{lambda(void)#2},std::allocator<md::ita::AssignTileElevatedStrokeData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileElevatedStrokeData>(md::ita::AssignTileElevatedStrokeData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileElevatedStrokeData>(md::ita::AssignTileElevatedStrokeData &&)::{lambda(void)#1},std::allocator<md::ita::AssignTileElevatedStrokeData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileElevatedStrokeData>(md::ita::AssignTileElevatedStrokeData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A6F8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileElevatedStrokeData>(md::ita::AssignTileElevatedStrokeData &&)::{lambda(void)#1},std::allocator<md::ita::AssignTileElevatedStrokeData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileElevatedStrokeData>(md::ita::AssignTileElevatedStrokeData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ElevatedStroke>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTileElevatedStrokeData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTileElevatedStrokeData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51BD88;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTileElevatedStrokeData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTileElevatedStrokeData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignSRGBBlendStyleData>(md::ita::AssignSRGBBlendStyleData &&)::{lambda(void)#2},std::allocator<md::ita::AssignSRGBBlendStyleData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignSRGBBlendStyleData>(md::ita::AssignSRGBBlendStyleData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529150;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignSRGBBlendStyleData>(md::ita::AssignSRGBBlendStyleData &&)::{lambda(void)#2},std::allocator<md::ita::AssignSRGBBlendStyleData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignSRGBBlendStyleData>(md::ita::AssignSRGBBlendStyleData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignSRGBBlendStyleData>(md::ita::AssignSRGBBlendStyleData &&)::{lambda(void)#1},std::allocator<md::ita::AssignSRGBBlendStyleData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignSRGBBlendStyleData>(md::ita::AssignSRGBBlendStyleData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529198;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignSRGBBlendStyleData>(md::ita::AssignSRGBBlendStyleData &&)::{lambda(void)#1},std::allocator<md::ita::AssignSRGBBlendStyleData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignSRGBBlendStyleData>(md::ita::AssignSRGBBlendStyleData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Blending::SRGBBlendStyle>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::BlendRasterConstantDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::BlendRasterConstantDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::BlendRasterConstantDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::BlendRasterConstantDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignSRGBBlendStyleData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignSRGBBlendStyleData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B2D8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignSRGBBlendStyleData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignSRGBBlendStyleData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRasterOverlayData>(md::ita::AssignRasterOverlayData &&)::{lambda(void)#2},std::allocator<md::ita::AssignRasterOverlayData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRasterOverlayData>(md::ita::AssignRasterOverlayData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF528D60;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRasterOverlayData>(md::ita::AssignRasterOverlayData &&)::{lambda(void)#2},std::allocator<md::ita::AssignRasterOverlayData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRasterOverlayData>(md::ita::AssignRasterOverlayData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRasterOverlayData>(md::ita::AssignRasterOverlayData &&)::{lambda(void)#1},std::allocator<md::ita::AssignRasterOverlayData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRasterOverlayData>(md::ita::AssignRasterOverlayData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF528DA8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRasterOverlayData>(md::ita::AssignRasterOverlayData &&)::{lambda(void)#1},std::allocator<md::ita::AssignRasterOverlayData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRasterOverlayData>(md::ita::AssignRasterOverlayData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::RasterOverlay>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RasterOverlayConstantDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RasterOverlayConstantDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = (_OWORD *)(a1[10] + 32 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  long long v16 = *(_OWORD *)(v15 - 16);
  *uint64_t v14 = *(_OWORD *)(v15 - 32);
  v14[1] = v16;
  a1[11] -= 32;
  unint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    unint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RasterOverlayConstantDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RasterOverlayConstantDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRasterOverlayData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRasterOverlayData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B0E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRasterOverlayData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRasterOverlayData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleColorData>(md::ita::AssignStyleColorData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleColorData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleColorData>(md::ita::AssignStyleColorData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF527E30;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleColorData>(md::ita::AssignStyleColorData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleColorData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleColorData>(md::ita::AssignStyleColorData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleColorData>(md::ita::AssignStyleColorData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleColorData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleColorData>(md::ita::AssignStyleColorData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF527E78;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleColorData>(md::ita::AssignStyleColorData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleColorData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleColorData>(md::ita::AssignStyleColorData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::StyleColorConstantDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::StyleColorConstantDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::StyleColorConstantDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::StyleColorConstantDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleColorData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleColorData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51A948;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleColorData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleColorData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileViewData>(md::ita::AssignTileViewData &&)::{lambda(void)#2},std::allocator<md::ita::AssignTileViewData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileViewData>(md::ita::AssignTileViewData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF527800;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileViewData>(md::ita::AssignTileViewData &&)::{lambda(void)#2},std::allocator<md::ita::AssignTileViewData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileViewData>(md::ita::AssignTileViewData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileViewData>(md::ita::AssignTileViewData &&)::{lambda(void)#1},std::allocator<md::ita::AssignTileViewData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileViewData>(md::ita::AssignTileViewData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF527848;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileViewData>(md::ita::AssignTileViewData &&)::{lambda(void)#1},std::allocator<md::ita::AssignTileViewData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignTileViewData>(md::ita::AssignTileViewData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::View>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::View>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::View>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::View>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ViewConstantDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::ViewConstantDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::ViewConstantDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::ViewConstantDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTileViewData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTileViewData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51A630;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignTileViewData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignTileViewData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPositionScaleInfo>(md::ita::AssignPositionScaleInfo &&)::{lambda(void)#2},std::allocator<md::ita::AssignPositionScaleInfo &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPositionScaleInfo>(md::ita::AssignPositionScaleInfo &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF528CD0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPositionScaleInfo>(md::ita::AssignPositionScaleInfo &&)::{lambda(void)#2},std::allocator<md::ita::AssignPositionScaleInfo &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPositionScaleInfo>(md::ita::AssignPositionScaleInfo &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPositionScaleInfo>(md::ita::AssignPositionScaleInfo &&)::{lambda(void)#1},std::allocator<md::ita::AssignPositionScaleInfo &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPositionScaleInfo>(md::ita::AssignPositionScaleInfo &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF528D18;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPositionScaleInfo>(md::ita::AssignPositionScaleInfo &&)::{lambda(void)#1},std::allocator<md::ita::AssignPositionScaleInfo &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignPositionScaleInfo>(md::ita::AssignPositionScaleInfo &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Tile::PositionScaleInfo>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PositionScaleInfoConstantDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::PositionScaleInfoConstantDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10] + 16 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  char v16 = *(unsigned char *)(v15 - 8);
  *(void *)uint64_t v14 = *(void *)(v15 - 16);
  *(unsigned char *)(v14 + 8) = v16;
  a1[11] -= 16;
  unint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    unint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PositionScaleInfoConstantDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::PositionScaleInfoConstantDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignPositionScaleInfo>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignPositionScaleInfo>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B098;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignPositionScaleInfo>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignPositionScaleInfo>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightSpecularConfiguration>(md::ita::AssignLightSpecularConfiguration &&)::{lambda(void)#2},std::allocator<md::ita::AssignLightSpecularConfiguration &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightSpecularConfiguration>(md::ita::AssignLightSpecularConfiguration &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52BAF0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightSpecularConfiguration>(md::ita::AssignLightSpecularConfiguration &&)::{lambda(void)#2},std::allocator<md::ita::AssignLightSpecularConfiguration &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightSpecularConfiguration>(md::ita::AssignLightSpecularConfiguration &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightSpecularConfiguration>(md::ita::AssignLightSpecularConfiguration &&)::{lambda(void)#1},std::allocator<md::ita::AssignLightSpecularConfiguration &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightSpecularConfiguration>(md::ita::AssignLightSpecularConfiguration &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52BB38;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightSpecularConfiguration>(md::ita::AssignLightSpecularConfiguration &&)::{lambda(void)#1},std::allocator<md::ita::AssignLightSpecularConfiguration &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignLightSpecularConfiguration>(md::ita::AssignLightSpecularConfiguration &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::Lighting::LightSpecularConfiguration>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLightSpecularConfiguration>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLightSpecularConfiguration>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C7A8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignLightSpecularConfiguration>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignLightSpecularConfiguration>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignColorCorrectionFactor>(md::ita::AssignColorCorrectionFactor &&)::{lambda(void)#2},std::allocator<md::ita::AssignColorCorrectionFactor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignColorCorrectionFactor>(md::ita::AssignColorCorrectionFactor &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529ED0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignColorCorrectionFactor>(md::ita::AssignColorCorrectionFactor &&)::{lambda(void)#2},std::allocator<md::ita::AssignColorCorrectionFactor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignColorCorrectionFactor>(md::ita::AssignColorCorrectionFactor &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignColorCorrectionFactor>(md::ita::AssignColorCorrectionFactor &&)::{lambda(void)#1},std::allocator<md::ita::AssignColorCorrectionFactor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignColorCorrectionFactor>(md::ita::AssignColorCorrectionFactor &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529F18;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignColorCorrectionFactor>(md::ita::AssignColorCorrectionFactor &&)::{lambda(void)#1},std::allocator<md::ita::AssignColorCorrectionFactor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignColorCorrectionFactor>(md::ita::AssignColorCorrectionFactor &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::ColorCorrectionFactor>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignColorCorrectionFactor>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignColorCorrectionFactor>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B998;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignColorCorrectionFactor>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignColorCorrectionFactor>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleConstantData>(md::ita::AssignStyleConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleConstantData>(md::ita::AssignStyleConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF528DF0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleConstantData>(md::ita::AssignStyleConstantData &&)::{lambda(void)#2},std::allocator<md::ita::AssignStyleConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleConstantData>(md::ita::AssignStyleConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleConstantData>(md::ita::AssignStyleConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleConstantData>(md::ita::AssignStyleConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF528E38;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleConstantData>(md::ita::AssignStyleConstantData &&)::{lambda(void)#1},std::allocator<md::ita::AssignStyleConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignStyleConstantData>(md::ita::AssignStyleConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::StyleDataKeyHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::StyleDataKeyHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::StyleDataKeyHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::StyleDataKeyHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Style>>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Style>>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Style>>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresShaderConstantDataID<ggl::ConstantDataTyped<ggl::DaVinci::Style>>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B128;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignStyleConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignStyleConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::MarkPipelineDataRequirements>(md::ita::MarkPipelineDataRequirements &&)::{lambda(void)#2},std::allocator<md::ita::MarkPipelineDataRequirements &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::MarkPipelineDataRequirements>(md::ita::MarkPipelineDataRequirements &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A8F0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::MarkPipelineDataRequirements>(md::ita::MarkPipelineDataRequirements &&)::{lambda(void)#2},std::allocator<md::ita::MarkPipelineDataRequirements &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::MarkPipelineDataRequirements>(md::ita::MarkPipelineDataRequirements &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::MarkPipelineDataRequirements>(md::ita::MarkPipelineDataRequirements &&)::{lambda(void)#1},std::allocator<md::ita::MarkPipelineDataRequirements &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::MarkPipelineDataRequirements>(md::ita::MarkPipelineDataRequirements &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A938;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::MarkPipelineDataRequirements>(md::ita::MarkPipelineDataRequirements &&)::{lambda(void)#1},std::allocator<md::ita::MarkPipelineDataRequirements &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::MarkPipelineDataRequirements>(md::ita::MarkPipelineDataRequirements &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderItemUpdate const&,md::ls::DataIDSetToUse const&,md::ls::RequiredPipelinePoolID const&,md::ls::PipelineSetup &>::Model<ecs2::RuntimeQuery<md::ls::RenderItemID const&,md::ls::RenderItemUpdate const&,md::ls::DataIDSetToUse const&,md::ls::RequiredPipelinePoolID const&,md::ls::PipelineSetup &>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::RenderItemID>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::RenderItemUpdate>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::DataIDSetToUse>(v1);
  uint64_t v5 = gdc::Registry::storage<md::ls::RequiredPipelinePoolID>(v1);
  uint64_t v6 = gdc::Registry::storage<md::ls::PipelineSetup>(v1);
  v9[0] = v2;
  v9[1] = v3;
  v9[2] = v4;
  v9[3] = v5;
  v9[4] = v6;
  gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::begin(v10, v9);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v7 = v2;
  }
  else {
    uint64_t v7 = v3;
  }
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < *(void *)(v7 + 64) - *(void *)(v7 + 56)) {
    uint64_t v7 = v4;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v7 + 64) - *(void *)(v7 + 56)) {
    uint64_t v7 = v5;
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < *(void *)(v7 + 64) - *(void *)(v7 + 56)) {
    uint64_t v7 = v6;
  }
  return *(void *)(v7 + 64) == v10[7];
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiredPipelinePoolID>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiredPipelinePoolID>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiredPipelinePoolID>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiredPipelinePoolID>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::DataIDSetToUse>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::DataIDSetToUse>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::DataIDSetToUse>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::DataIDSetToUse>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderItemUpdate>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RenderItemUpdate>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(void *)(v14 + 8 * v7) = *(void *)(v15 - 8);
  a1[11] = v15 - 8;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RenderItemUpdate>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RenderItemUpdate>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::MarkPipelineDataRequirements>,std::allocator<ecs2::ForwardToExecute<md::ita::MarkPipelineDataRequirements>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51BEA8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::MarkPipelineDataRequirements>,std::allocator<ecs2::ForwardToExecute<md::ita::MarkPipelineDataRequirements>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::TransferPipelines>(md::ita::TransferPipelines &&)::{lambda(void)#2},std::allocator<md::ita::TransferPipelines &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::TransferPipelines>(md::ita::TransferPipelines &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF527770;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::TransferPipelines>(md::ita::TransferPipelines &&)::{lambda(void)#2},std::allocator<md::ita::TransferPipelines &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::TransferPipelines>(md::ita::TransferPipelines &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::TransferPipelines>(md::ita::TransferPipelines &&)::{lambda(void)#1},std::allocator<md::ita::TransferPipelines &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::TransferPipelines>(md::ita::TransferPipelines &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF5277B8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::TransferPipelines>(md::ita::TransferPipelines &&)::{lambda(void)#1},std::allocator<md::ita::TransferPipelines &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::TransferPipelines>(md::ita::TransferPipelines &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&>::Model<ecs2::RuntimeQuery<md::ls::PipelineSetupToApply const&,md::ls::RenderState const&,md::ls::DataIDSetToUse const&,md::ls::RenderItemID const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::PipelineSetupToApply>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::RenderState>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::DataIDSetToUse>(v1);
  uint64_t v5 = gdc::Registry::storage<md::ls::RenderItemID>(v1);
  v8[0] = v2;
  v8[1] = v3;
  uint64_t v8[2] = v4;
  v8[3] = v5;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v9, v8);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v6 = v2;
  }
  else {
    uint64_t v6 = v3;
  }
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v6 = v4;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v6 = v5;
  }
  return *(void *)(v6 + 64) == v9[6];
}

BOOL gdc::ComponentStorageWrapper<md::ls::PipelineSetupToApply>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::PipelineSetupToApply>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PipelineSetupToApply>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::PipelineSetupToApply>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL ecs2::Query<md::ls::PipelineSetupToApply const&,md::ls::DataIDSetToUse const&,md::ls::PipelineState const&>::Model<ecs2::RuntimeQuery<md::ls::PipelineSetupToApply const&,md::ls::DataIDSetToUse const&,md::ls::PipelineState const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::PipelineSetupToApply>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::DataIDSetToUse>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::PipelineState>(v1);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v3;
  }
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < *(void *)(v5 + 64) - *(void *)(v5 + 56)) {
    uint64_t v5 = v4;
  }
  v11[0] = v5 + 32;
  v11[1] = v2;
  v11[2] = v3;
  v11[3] = v4;
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    uint64_t v8 = v7 + 8;
    do
    {
      uint64_t v7 = v8;
      uint64_t v12 = v8;
      if (v8 == v6) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      uint64_t v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

BOOL gdc::ComponentStorageWrapper<md::ls::PipelineState>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::PipelineState>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PipelineState>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::PipelineState>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::TransferPipelines>,std::allocator<ecs2::ForwardToExecute<md::ita::TransferPipelines>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51A5E8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::TransferPipelines>,std::allocator<ecs2::ForwardToExecute<md::ita::TransferPipelines>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignCommandBuffersToRenderItems>(md::ita::AssignCommandBuffersToRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::AssignCommandBuffersToRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignCommandBuffersToRenderItems>(md::ita::AssignCommandBuffersToRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52BCA0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignCommandBuffersToRenderItems>(md::ita::AssignCommandBuffersToRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::AssignCommandBuffersToRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignCommandBuffersToRenderItems>(md::ita::AssignCommandBuffersToRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignCommandBuffersToRenderItems>(md::ita::AssignCommandBuffersToRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::AssignCommandBuffersToRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignCommandBuffersToRenderItems>(md::ita::AssignCommandBuffersToRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52BCE8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignCommandBuffersToRenderItems>(md::ita::AssignCommandBuffersToRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::AssignCommandBuffersToRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignCommandBuffersToRenderItems>(md::ita::AssignCommandBuffersToRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::DataForCommandBuffer>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::DataForCommandBuffer>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10] + 24 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  uint64_t v16 = *(void *)(v15 - 8);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)(v15 - 24);
  *(void *)(v14 + 16) = v16;
  a1[11] -= 24;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::DataForCommandBuffer>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::DataForCommandBuffer>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignCommandBuffersToRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignCommandBuffersToRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C880;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignCommandBuffersToRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignCommandBuffersToRenderItems>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleColorConstantDataHandle>(md::ita::UpdateStyleColorConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::UpdateStyleColorConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleColorConstantDataHandle>(md::ita::UpdateStyleColorConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C240;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleColorConstantDataHandle>(md::ita::UpdateStyleColorConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::UpdateStyleColorConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleColorConstantDataHandle>(md::ita::UpdateStyleColorConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleColorConstantDataHandle>(md::ita::UpdateStyleColorConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::UpdateStyleColorConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleColorConstantDataHandle>(md::ita::UpdateStyleColorConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C288;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleColorConstantDataHandle>(md::ita::UpdateStyleColorConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::UpdateStyleColorConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleColorConstantDataHandle>(md::ita::UpdateStyleColorConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::ColorDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::ColorDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::ColorDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::ColorDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateStyleColorConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateStyleColorConstantDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51CB50;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateStyleColorConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateStyleColorConstantDataHandle>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateColorRampGradientResources>(md::ita::UpdateColorRampGradientResources &&)::{lambda(void)#2},std::allocator<md::ita::UpdateColorRampGradientResources &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateColorRampGradientResources>(md::ita::UpdateColorRampGradientResources &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52BB80;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateColorRampGradientResources>(md::ita::UpdateColorRampGradientResources &&)::{lambda(void)#2},std::allocator<md::ita::UpdateColorRampGradientResources &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateColorRampGradientResources>(md::ita::UpdateColorRampGradientResources &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateColorRampGradientResources>(md::ita::UpdateColorRampGradientResources &&)::{lambda(void)#1},std::allocator<md::ita::UpdateColorRampGradientResources &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateColorRampGradientResources>(md::ita::UpdateColorRampGradientResources &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52BBC8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateColorRampGradientResources>(md::ita::UpdateColorRampGradientResources &&)::{lambda(void)#1},std::allocator<md::ita::UpdateColorRampGradientResources &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateColorRampGradientResources>(md::ita::UpdateColorRampGradientResources &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::ColorRampDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::ColorRampDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::ColorRampDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::ColorRampDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateColorRampGradientResources>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateColorRampGradientResources>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C7F0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateColorRampGradientResources>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateColorRampGradientResources>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DecidePipelineForMainPass>(md::ita::DecidePipelineForMainPass &&)::{lambda(void)#2},std::allocator<md::ita::DecidePipelineForMainPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DecidePipelineForMainPass>(md::ita::DecidePipelineForMainPass &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529930;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DecidePipelineForMainPass>(md::ita::DecidePipelineForMainPass &&)::{lambda(void)#2},std::allocator<md::ita::DecidePipelineForMainPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DecidePipelineForMainPass>(md::ita::DecidePipelineForMainPass &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DecidePipelineForMainPass>(md::ita::DecidePipelineForMainPass &&)::{lambda(void)#1},std::allocator<md::ita::DecidePipelineForMainPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DecidePipelineForMainPass>(md::ita::DecidePipelineForMainPass &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529978;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DecidePipelineForMainPass>(md::ita::DecidePipelineForMainPass &&)::{lambda(void)#1},std::allocator<md::ita::DecidePipelineForMainPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DecidePipelineForMainPass>(md::ita::DecidePipelineForMainPass &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::IsMercator>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::IsMercator>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IsMercator>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::IsMercator>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IsS2>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::IsS2>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(unsigned char *)(v14 + v7) = *(unsigned char *)--a1[11];
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IsS2>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::IsS2>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IsDecal>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::IsDecal>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IsDecal>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::IsDecal>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MainPassItem>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::MainPassItem>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MainPassItem>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::MainPassItem>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::DecidePipelineForMainPass>,std::allocator<ecs2::ForwardToExecute<md::ita::DecidePipelineForMainPass>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B6C8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::DecidePipelineForMainPass>,std::allocator<ecs2::ForwardToExecute<md::ita::DecidePipelineForMainPass>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelineStates>(md::ita::CreatePipelineStates &&)::{lambda(void)#2},std::allocator<md::ita::CreatePipelineStates &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelineStates>(md::ita::CreatePipelineStates &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF527F50;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelineStates>(md::ita::CreatePipelineStates &&)::{lambda(void)#2},std::allocator<md::ita::CreatePipelineStates &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelineStates>(md::ita::CreatePipelineStates &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelineStates>(md::ita::CreatePipelineStates &&)::{lambda(void)#1},std::allocator<md::ita::CreatePipelineStates &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelineStates>(md::ita::CreatePipelineStates &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF527F98;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelineStates>(md::ita::CreatePipelineStates &&)::{lambda(void)#1},std::allocator<md::ita::CreatePipelineStates &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelineStates>(md::ita::CreatePipelineStates &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsTransparent const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsTransparent const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::FunctionConstants>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::RequiredPipelinePoolID>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::IsTransparent>(v1);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v3;
  }
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < *(void *)(v5 + 64) - *(void *)(v5 + 56)) {
    uint64_t v5 = v4;
  }
  v11[0] = v5 + 32;
  v11[1] = v2;
  v11[2] = v3;
  v11[3] = v4;
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    uint64_t v8 = v7 + 8;
    do
    {
      uint64_t v7 = v8;
      uint64_t v12 = v8;
      if (v8 == v6) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      uint64_t v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

BOOL gdc::ComponentStorageWrapper<md::ls::IsTransparent>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::IsTransparent>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IsTransparent>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::IsTransparent>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL ecs2::Query<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsOpaque const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants const&,md::ls::RequiredPipelinePoolID const&,md::ls::IsOpaque const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::FunctionConstants>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::RequiredPipelinePoolID>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::IsOpaque>(v1);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v3;
  }
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < *(void *)(v5 + 64) - *(void *)(v5 + 56)) {
    uint64_t v5 = v4;
  }
  v11[0] = v5 + 32;
  v11[1] = v2;
  v11[2] = v3;
  v11[3] = v4;
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    uint64_t v8 = v7 + 8;
    do
    {
      uint64_t v7 = v8;
      uint64_t v12 = v8;
      if (v8 == v6) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      uint64_t v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

BOOL gdc::ComponentStorageWrapper<md::ls::IsOpaque>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::IsOpaque>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IsOpaque>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::IsOpaque>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::CreatePipelineStates>,std::allocator<ecs2::ForwardToExecute<md::ita::CreatePipelineStates>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51A9D8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CreatePipelineStates>,std::allocator<ecs2::ForwardToExecute<md::ita::CreatePipelineStates>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DetermineDataIDsNeeded>(md::ita::DetermineDataIDsNeeded &&)::{lambda(void)#2},std::allocator<md::ita::DetermineDataIDsNeeded &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DetermineDataIDsNeeded>(md::ita::DetermineDataIDsNeeded &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF5288E0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DetermineDataIDsNeeded>(md::ita::DetermineDataIDsNeeded &&)::{lambda(void)#2},std::allocator<md::ita::DetermineDataIDsNeeded &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DetermineDataIDsNeeded>(md::ita::DetermineDataIDsNeeded &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DetermineDataIDsNeeded>(md::ita::DetermineDataIDsNeeded &&)::{lambda(void)#1},std::allocator<md::ita::DetermineDataIDsNeeded &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DetermineDataIDsNeeded>(md::ita::DetermineDataIDsNeeded &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF528928;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DetermineDataIDsNeeded>(md::ita::DetermineDataIDsNeeded &&)::{lambda(void)#1},std::allocator<md::ita::DetermineDataIDsNeeded &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::DetermineDataIDsNeeded>(md::ita::DetermineDataIDsNeeded &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::DetermineDataIDsNeeded>,std::allocator<ecs2::ForwardToExecute<md::ita::DetermineDataIDsNeeded>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51AEA0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::DetermineDataIDsNeeded>,std::allocator<ecs2::ForwardToExecute<md::ita::DetermineDataIDsNeeded>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelines>(md::ita::CreatePipelines &&)::{lambda(void)#2},std::allocator<md::ita::CreatePipelines &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelines>(md::ita::CreatePipelines &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF527020;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelines>(md::ita::CreatePipelines &&)::{lambda(void)#2},std::allocator<md::ita::CreatePipelines &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelines>(md::ita::CreatePipelines &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelines>(md::ita::CreatePipelines &&)::{lambda(void)#1},std::allocator<md::ita::CreatePipelines &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelines>(md::ita::CreatePipelines &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF527068;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelines>(md::ita::CreatePipelines &&)::{lambda(void)#1},std::allocator<md::ita::CreatePipelines &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreatePipelines>(md::ita::CreatePipelines &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::CreatePipelines>,std::allocator<ecs2::ForwardToExecute<md::ita::CreatePipelines>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51A240;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CreatePipelines>,std::allocator<ecs2::ForwardToExecute<md::ita::CreatePipelines>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStates>(md::ita::SetupRenderStates &&)::{lambda(void)#2},std::allocator<md::ita::SetupRenderStates &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStates>(md::ita::SetupRenderStates &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF5276E0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStates>(md::ita::SetupRenderStates &&)::{lambda(void)#2},std::allocator<md::ita::SetupRenderStates &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStates>(md::ita::SetupRenderStates &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStates>(md::ita::SetupRenderStates &&)::{lambda(void)#1},std::allocator<md::ita::SetupRenderStates &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStates>(md::ita::SetupRenderStates &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF527728;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStates>(md::ita::SetupRenderStates &&)::{lambda(void)#1},std::allocator<md::ita::SetupRenderStates &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStates>(md::ita::SetupRenderStates &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::NeedsNewRenderState>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::NeedsNewRenderState>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = (_DWORD *)(a1[10] - v7 + 8 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  int v16 = *(_DWORD *)(v15 - 4);
  *uint64_t v14 = *(_DWORD *)(v15 - 7);
  *(_DWORD *)((char *)v14 + 3) = v16;
  a1[11] -= 7;
  unint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    unint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::NeedsNewRenderState>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::NeedsNewRenderState>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupRenderStates>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupRenderStates>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51A5A0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupRenderStates>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupRenderStates>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForDecals>(md::ita::SetupRenderStatesForDecals &&)::{lambda(void)#2},std::allocator<md::ita::SetupRenderStatesForDecals &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForDecals>(md::ita::SetupRenderStatesForDecals &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529E40;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForDecals>(md::ita::SetupRenderStatesForDecals &&)::{lambda(void)#2},std::allocator<md::ita::SetupRenderStatesForDecals &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForDecals>(md::ita::SetupRenderStatesForDecals &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForDecals>(md::ita::SetupRenderStatesForDecals &&)::{lambda(void)#1},std::allocator<md::ita::SetupRenderStatesForDecals &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForDecals>(md::ita::SetupRenderStatesForDecals &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529E88;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForDecals>(md::ita::SetupRenderStatesForDecals &&)::{lambda(void)#1},std::allocator<md::ita::SetupRenderStatesForDecals &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForDecals>(md::ita::SetupRenderStatesForDecals &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::NeedsRenderState>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::NeedsRenderState>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::NeedsRenderState>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::NeedsRenderState>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForDecals>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForDecals>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B950;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForDecals>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForDecals>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupPredefinedRenderState>(md::ita::SetupPredefinedRenderState &&)::{lambda(void)#2},std::allocator<md::ita::SetupPredefinedRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupPredefinedRenderState>(md::ita::SetupPredefinedRenderState &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529DB0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupPredefinedRenderState>(md::ita::SetupPredefinedRenderState &&)::{lambda(void)#2},std::allocator<md::ita::SetupPredefinedRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupPredefinedRenderState>(md::ita::SetupPredefinedRenderState &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupPredefinedRenderState>(md::ita::SetupPredefinedRenderState &&)::{lambda(void)#1},std::allocator<md::ita::SetupPredefinedRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupPredefinedRenderState>(md::ita::SetupPredefinedRenderState &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529DF8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupPredefinedRenderState>(md::ita::SetupPredefinedRenderState &&)::{lambda(void)#1},std::allocator<md::ita::SetupPredefinedRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupPredefinedRenderState>(md::ita::SetupPredefinedRenderState &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::PredefinedRenderState>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::PredefinedRenderState>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PredefinedRenderState>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::PredefinedRenderState>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupPredefinedRenderState>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupPredefinedRenderState>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B908;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupPredefinedRenderState>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupPredefinedRenderState>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForSeeThrough>(md::ita::SetupRenderStatesForSeeThrough &&)::{lambda(void)#2},std::allocator<md::ita::SetupRenderStatesForSeeThrough &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForSeeThrough>(md::ita::SetupRenderStatesForSeeThrough &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B550;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForSeeThrough>(md::ita::SetupRenderStatesForSeeThrough &&)::{lambda(void)#2},std::allocator<md::ita::SetupRenderStatesForSeeThrough &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForSeeThrough>(md::ita::SetupRenderStatesForSeeThrough &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForSeeThrough>(md::ita::SetupRenderStatesForSeeThrough &&)::{lambda(void)#1},std::allocator<md::ita::SetupRenderStatesForSeeThrough &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForSeeThrough>(md::ita::SetupRenderStatesForSeeThrough &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B598;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForSeeThrough>(md::ita::SetupRenderStatesForSeeThrough &&)::{lambda(void)#1},std::allocator<md::ita::SetupRenderStatesForSeeThrough &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupRenderStatesForSeeThrough>(md::ita::SetupRenderStatesForSeeThrough &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)3>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)3>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)3>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)3>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForSeeThrough>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForSeeThrough>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C4D8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForSeeThrough>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupRenderStatesForSeeThrough>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderStateStencilRefValue>(md::ita::SetupCustomRenderStateStencilRefValue &&)::{lambda(void)#2},std::allocator<md::ita::SetupCustomRenderStateStencilRefValue &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderStateStencilRefValue>(md::ita::SetupCustomRenderStateStencilRefValue &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52CB40;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderStateStencilRefValue>(md::ita::SetupCustomRenderStateStencilRefValue &&)::{lambda(void)#2},std::allocator<md::ita::SetupCustomRenderStateStencilRefValue &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderStateStencilRefValue>(md::ita::SetupCustomRenderStateStencilRefValue &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderStateStencilRefValue>(md::ita::SetupCustomRenderStateStencilRefValue &&)::{lambda(void)#1},std::allocator<md::ita::SetupCustomRenderStateStencilRefValue &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderStateStencilRefValue>(md::ita::SetupCustomRenderStateStencilRefValue &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52CB88;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderStateStencilRefValue>(md::ita::SetupCustomRenderStateStencilRefValue &&)::{lambda(void)#1},std::allocator<md::ita::SetupCustomRenderStateStencilRefValue &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderStateStencilRefValue>(md::ita::SetupCustomRenderStateStencilRefValue &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::CustomRenderState>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::CustomRenderState>::remove(void *a1, unint64_t a2)
{
  unint64_t v25 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  uint64_t v15 = (void *)(v14 + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v16 = a1[11];
  uint64_t v18 = *(void *)(v16 - 24);
  uint64_t v17 = *(void *)(v16 - 16);
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v19 = (std::__shared_weak_count *)v15[1];
  void *v15 = v18;
  v15[1] = v17;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  *(_WORD *)(v14 + 24 * v7 + 16) = *(_WORD *)(v16 - 8);
  uint64_t v20 = a1[11];
  uint64_t v21 = *(std::__shared_weak_count **)(v20 - 16);
  if (v21)
  {
    if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  a1[11] = v20 - 24;
  BOOL v22 = (void *)a1[28];
  if (!v22) {
    return 1;
  }
  uint64_t v23 = a1[31];
  while (1)
  {
    v27[0] = &v25;
    v27[1] = 1;
    uint64_t v26 = v23;
    uint64_t v24 = v22[6];
    if (!v24) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v24 + 48))(v24, &v26, v27);
    BOOL v22 = (void *)*v22;
    if (!v22) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::CustomRenderState>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::CustomRenderState>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,md::components::CustomRenderState>::~sparse_map((void *)(a1 + 32));
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::ComponentStorageWrapper<md::ls::CustomRenderState>::~ComponentStorageWrapper(uint64_t a1)
{
  return a1;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupCustomRenderStateStencilRefValue>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupCustomRenderStateStencilRefValue>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51CFD0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupCustomRenderStateStencilRefValue>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupCustomRenderStateStencilRefValue>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderState>(md::ita::SetupCustomRenderState &&)::{lambda(void)#2},std::allocator<md::ita::SetupCustomRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderState>(md::ita::SetupCustomRenderState &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF528A90;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderState>(md::ita::SetupCustomRenderState &&)::{lambda(void)#2},std::allocator<md::ita::SetupCustomRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderState>(md::ita::SetupCustomRenderState &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderState>(md::ita::SetupCustomRenderState &&)::{lambda(void)#1},std::allocator<md::ita::SetupCustomRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderState>(md::ita::SetupCustomRenderState &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF528AD8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderState>(md::ita::SetupCustomRenderState &&)::{lambda(void)#1},std::allocator<md::ita::SetupCustomRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCustomRenderState>(md::ita::SetupCustomRenderState &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)4>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)4>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)4>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)4>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupCustomRenderState>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupCustomRenderState>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51AF78;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupCustomRenderState>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupCustomRenderState>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupDefaultRenderState>(md::ita::SetupDefaultRenderState &&)::{lambda(void)#2},std::allocator<md::ita::SetupDefaultRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupDefaultRenderState>(md::ita::SetupDefaultRenderState &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529030;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupDefaultRenderState>(md::ita::SetupDefaultRenderState &&)::{lambda(void)#2},std::allocator<md::ita::SetupDefaultRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupDefaultRenderState>(md::ita::SetupDefaultRenderState &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupDefaultRenderState>(md::ita::SetupDefaultRenderState &&)::{lambda(void)#1},std::allocator<md::ita::SetupDefaultRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupDefaultRenderState>(md::ita::SetupDefaultRenderState &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529078;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupDefaultRenderState>(md::ita::SetupDefaultRenderState &&)::{lambda(void)#1},std::allocator<md::ita::SetupDefaultRenderState &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupDefaultRenderState>(md::ita::SetupDefaultRenderState &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupDefaultRenderState>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupDefaultRenderState>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B248;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::SetupDefaultRenderState>,std::allocator<ecs2::ForwardToExecute<md::ita::SetupDefaultRenderState>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorBlendedWater>(md::ita::PrepareFunctionConstantDescriptorBlendedWater &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorBlendedWater &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorBlendedWater>(md::ita::PrepareFunctionConstantDescriptorBlendedWater &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D680;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorBlendedWater>(md::ita::PrepareFunctionConstantDescriptorBlendedWater &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorBlendedWater &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorBlendedWater>(md::ita::PrepareFunctionConstantDescriptorBlendedWater &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorBlendedWater>(md::ita::PrepareFunctionConstantDescriptorBlendedWater &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorBlendedWater &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorBlendedWater>(md::ita::PrepareFunctionConstantDescriptorBlendedWater &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D6C8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorBlendedWater>(md::ita::PrepareFunctionConstantDescriptorBlendedWater &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorBlendedWater &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorBlendedWater>(md::ita::PrepareFunctionConstantDescriptorBlendedWater &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::FunctionConstants &,md::ls::ColorRampDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::ColorRampDataHandle const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::ColorRampDataHandle>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (v2[8] - v2[7] >= v3[8] - v3[7]) {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v2 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v3, v2, *(void *)(v6 + 24));
  if (v2[8] - v2[7] >= v4[8] - v4[7]) {
    uint64_t v7 = (uint64_t)v5;
  }
  else {
    uint64_t v7 = (uint64_t)(v2 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v4, v2, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorBlendedWater>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorBlendedWater>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D570;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorBlendedWater>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorBlendedWater>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorWater>(md::ita::PrepareFunctionConstantDescriptorWater &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorWater &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorWater>(md::ita::PrepareFunctionConstantDescriptorWater &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52CC60;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorWater>(md::ita::PrepareFunctionConstantDescriptorWater &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorWater &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorWater>(md::ita::PrepareFunctionConstantDescriptorWater &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorWater>(md::ita::PrepareFunctionConstantDescriptorWater &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorWater &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorWater>(md::ita::PrepareFunctionConstantDescriptorWater &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52CCA8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorWater>(md::ita::PrepareFunctionConstantDescriptorWater &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorWater &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorWater>(md::ita::PrepareFunctionConstantDescriptorWater &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorWater>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorWater>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D060;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorWater>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorWater>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorClimateTint>(md::ita::PrepareFunctionConstantDescriptorClimateTint &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorClimateTint &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorClimateTint>(md::ita::PrepareFunctionConstantDescriptorClimateTint &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D5F0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorClimateTint>(md::ita::PrepareFunctionConstantDescriptorClimateTint &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorClimateTint &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorClimateTint>(md::ita::PrepareFunctionConstantDescriptorClimateTint &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorClimateTint>(md::ita::PrepareFunctionConstantDescriptorClimateTint &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorClimateTint &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorClimateTint>(md::ita::PrepareFunctionConstantDescriptorClimateTint &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D638;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorClimateTint>(md::ita::PrepareFunctionConstantDescriptorClimateTint &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorClimateTint &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorClimateTint>(md::ita::PrepareFunctionConstantDescriptorClimateTint &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorClimateTint>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorClimateTint>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D528;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorClimateTint>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorClimateTint>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>(md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>(md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D8C0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>(md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>(md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>(md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>(md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D908;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>(md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>(md::ita::PrepareFunctionConstantDescriptorRoutelineMask &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::FunctionConstants &,md::ls::StyleRouteLineMaskDataKeyHandle const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::StyleRouteLineMaskDataKeyHandle const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::StyleRouteLineMaskDataKeyHandle>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (v2[8] - v2[7] >= v3[8] - v3[7]) {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v2 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v3, v2, *(void *)(v6 + 24));
  if (v2[8] - v2[7] >= v4[8] - v4[7]) {
    uint64_t v7 = (uint64_t)v5;
  }
  else {
    uint64_t v7 = (uint64_t)(v2 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v4, v2, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

uint64_t ecs2::Query<md::ls::FunctionConstants &,md::ls::StyleRouteLineMaskDataKeyHandle const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::StyleRouteLineMaskDataKeyHandle const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::StyleRouteLineMaskDataKeyHandle>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7]) {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v59, v8, v5, v4, *(void *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7]) {
    uint64_t v9 = (uint64_t)v7;
  }
  else {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v57, v9, v6, v4, *(void *)(v9 + 32));
  unint64_t v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v58 == v62) {
    goto LABEL_55;
  }
  uint64_t v12 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    void *v12 = *v11;
    unint64_t v13 = *v11;
    unint64_t v14 = HIDWORD(*v11);
    unint64_t v15 = v13 >> 39;
    uint64_t v16 = v6[4];
    if (v13 >> 39 >= (v6[5] - v16) >> 3) {
      goto LABEL_17;
    }
    uint64_t v17 = *(void *)(v16 + 8 * v15);
    if (!v17) {
      goto LABEL_17;
    }
    unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    uint64_t v20 = v6[7];
    uint64_t v19 = v6[8];
    if (v18 >= (v19 - v20) >> 3) {
      goto LABEL_17;
    }
    uint64_t v21 = v20 + 8 * v18;
    BOOL v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == v14;
    if (v22)
    {
      uint64_t v56 = 33 * v18;
      uint64_t v23 = v6[11];
      uint64_t v24 = v6[10] + v56;
    }
    else
    {
LABEL_17:
      uint64_t v23 = v6[11];
      uint64_t v24 = v23;
    }
    uint64_t v25 = v24 == v23 ? 0 : v24;
    uint64_t v26 = v4[4];
    if (v15 < (v4[5] - v26) >> 3)
    {
      uint64_t v27 = *(void *)(v26 + 8 * v15);
      if (v27)
      {
        unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        uint64_t v30 = v4[7];
        uint64_t v29 = v4[8];
        if (v28 < (v29 - v30) >> 3)
        {
          uint64_t v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == v14) {
            break;
          }
        }
      }
    }
    uint64_t v33 = v4[11];
    uint64_t v34 = v33;
    uint64_t v35 = *(void *)(a2 + 24);
    if (!v35) {
      goto LABEL_54;
    }
LABEL_29:
    if (v34 == v33) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = v34;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v35 + 48))(v35, v25, v36);
    uint64_t v38 = v62;
    uint64_t v11 = *(unint64_t **)(v59 + 32);
    if (++v62 != v11)
    {
      uint64_t v39 = v60[4];
      unint64_t v40 = (v60[5] - v39) >> 3;
      unint64_t v41 = v38 + 2;
      while (1)
      {
        unint64_t v42 = *((unsigned int *)v41 - 1);
        unint64_t v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          uint64_t v44 = *(void *)(v39 + 8 * v43);
          if (v44)
          {
            unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            uint64_t v46 = v60[7];
            uint64_t result = v60[8];
            if (v45 < (result - v46) >> 3)
            {
              uint64_t v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == v42)
              {
                uint64_t v49 = v61[4];
                uint64_t result = v61[5] - v49;
                if (v43 < result >> 3)
                {
                  uint64_t v50 = *(void *)(v49 + 8 * v43);
                  if (v50)
                  {
                    unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    uint64_t v53 = v61[7];
                    uint64_t v52 = v61[8];
                    uint64_t result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      uint64_t v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == v42) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v62 = v41;
        BOOL v22 = v41++ == v11;
        if (v22) {
          goto LABEL_9;
        }
      }
      uint64_t v11 = v41 - 1;
    }
LABEL_9:
    if (v58 == v11) {
      goto LABEL_56;
    }
  }
  uint64_t v33 = v4[11];
  uint64_t v34 = v4[10] + 8 * v28;
  uint64_t v35 = *(void *)(a2 + 24);
  if (v35) {
    goto LABEL_29;
  }
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  uint64_t result = (*v10)();
  uint64_t v12 = (void *)result;
LABEL_56:
  void *v12 = 0xFFFFFFFF00000000;
  return result;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D690;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorRoutelineMask>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>(md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>(md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52DB00;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>(md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>(md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>(md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>(md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52DB48;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>(md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>(md::ita::PrepareFunctionConstantDescriptorUseCameraZBias &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::NeedsZBias>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::NeedsZBias>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  unint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    unint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::NeedsZBias>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::NeedsZBias>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D7B0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorUseCameraZBias>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52DA70;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52DAB8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorTextureEnabled &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D768;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTextureEnabled>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52DDD0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52DE18;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>(md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D918;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmissiveTextureEnabled>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>(md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>(md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52DC20;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>(md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>(md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>(md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>(md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52DC68;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>(md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>(md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D840;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorEmmisiveEnabled>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>(md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>(md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D9E0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>(md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>(md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>(md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>(md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52DA28;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>(md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>(md::ita::PrepareFunctionConstantDescriptorPreserveHeight &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::PreserveHeight>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::PreserveHeight>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  unint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    unint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PreserveHeight>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::PreserveHeight>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D720;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPreserveHeight>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorColorCorrection>(md::ita::PrepareFunctionConstantDescriptorColorCorrection &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorColorCorrection &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorColorCorrection>(md::ita::PrepareFunctionConstantDescriptorColorCorrection &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52DB90;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorColorCorrection>(md::ita::PrepareFunctionConstantDescriptorColorCorrection &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorColorCorrection &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorColorCorrection>(md::ita::PrepareFunctionConstantDescriptorColorCorrection &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorColorCorrection>(md::ita::PrepareFunctionConstantDescriptorColorCorrection &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorColorCorrection &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorColorCorrection>(md::ita::PrepareFunctionConstantDescriptorColorCorrection &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52DBD8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorColorCorrection>(md::ita::PrepareFunctionConstantDescriptorColorCorrection &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorColorCorrection &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorColorCorrection>(md::ita::PrepareFunctionConstantDescriptorColorCorrection &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorColorCorrection>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorColorCorrection>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D7F8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorColorCorrection>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorColorCorrection>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLandCover>(md::ita::PrepareFunctionConstantDescriptorLandCover &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorLandCover &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLandCover>(md::ita::PrepareFunctionConstantDescriptorLandCover &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D290;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLandCover>(md::ita::PrepareFunctionConstantDescriptorLandCover &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorLandCover &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLandCover>(md::ita::PrepareFunctionConstantDescriptorLandCover &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLandCover>(md::ita::PrepareFunctionConstantDescriptorLandCover &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorLandCover &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLandCover>(md::ita::PrepareFunctionConstantDescriptorLandCover &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D2D8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLandCover>(md::ita::PrepareFunctionConstantDescriptorLandCover &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorLandCover &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLandCover>(md::ita::PrepareFunctionConstantDescriptorLandCover &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLandCover>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLandCover>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D378;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLandCover>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLandCover>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPlanar>(md::ita::PrepareFunctionConstantDescriptorPlanar &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorPlanar &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPlanar>(md::ita::PrepareFunctionConstantDescriptorPlanar &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52CEA0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPlanar>(md::ita::PrepareFunctionConstantDescriptorPlanar &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorPlanar &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPlanar>(md::ita::PrepareFunctionConstantDescriptorPlanar &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPlanar>(md::ita::PrepareFunctionConstantDescriptorPlanar &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorPlanar &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPlanar>(md::ita::PrepareFunctionConstantDescriptorPlanar &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52CEE8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPlanar>(md::ita::PrepareFunctionConstantDescriptorPlanar &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorPlanar &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPlanar>(md::ita::PrepareFunctionConstantDescriptorPlanar &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPlanar>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPlanar>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D180;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPlanar>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPlanar>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>(md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>(md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52DCB0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>(md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>(md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>(md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>(md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52DCF8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>(md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>(md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::IntendedStandardPassSceneDepth>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::IntendedStandardPassSceneDepth>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  unint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    unint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IntendedStandardPassSceneDepth>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::IntendedStandardPassSceneDepth>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D888;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOutputLinearDepth>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>(md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>(md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D950;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>(md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>(md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>(md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>(md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D998;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>(md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>(md::ita::PrepareFunctionConstantDescriptorIdentityMatrix &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::UseIdentityMatrix>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::UseIdentityMatrix>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  unint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    unint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UseIdentityMatrix>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::UseIdentityMatrix>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D6D8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorIdentityMatrix>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTileClipping>(md::ita::PrepareFunctionConstantDescriptorTileClipping &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorTileClipping &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTileClipping>(md::ita::PrepareFunctionConstantDescriptorTileClipping &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D710;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTileClipping>(md::ita::PrepareFunctionConstantDescriptorTileClipping &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorTileClipping &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTileClipping>(md::ita::PrepareFunctionConstantDescriptorTileClipping &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTileClipping>(md::ita::PrepareFunctionConstantDescriptorTileClipping &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorTileClipping &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTileClipping>(md::ita::PrepareFunctionConstantDescriptorTileClipping &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D758;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTileClipping>(md::ita::PrepareFunctionConstantDescriptorTileClipping &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorTileClipping &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorTileClipping>(md::ita::PrepareFunctionConstantDescriptorTileClipping &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::SharedUniqueID>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::SharedUniqueID>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10] + 24 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  uint64_t v16 = *(void *)(v15 - 8);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)(v15 - 24);
  *(void *)(v14 + 16) = v16;
  a1[11] -= 24;
  unint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    unint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SharedUniqueID>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::SharedUniqueID>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UniqueRenderArrayID>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::UniqueRenderArrayID>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(void *)(v14 + 8 * v7) = *(void *)(v15 - 8);
  a1[11] = v15 - 8;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UniqueRenderArrayID>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::UniqueRenderArrayID>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTileClipping>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTileClipping>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D5B8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTileClipping>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorTileClipping>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPositionScale>(md::ita::PrepareFunctionConstantDescriptorPositionScale &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorPositionScale &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPositionScale>(md::ita::PrepareFunctionConstantDescriptorPositionScale &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D830;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPositionScale>(md::ita::PrepareFunctionConstantDescriptorPositionScale &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorPositionScale &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPositionScale>(md::ita::PrepareFunctionConstantDescriptorPositionScale &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPositionScale>(md::ita::PrepareFunctionConstantDescriptorPositionScale &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorPositionScale &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPositionScale>(md::ita::PrepareFunctionConstantDescriptorPositionScale &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D878;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPositionScale>(md::ita::PrepareFunctionConstantDescriptorPositionScale &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorPositionScale &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorPositionScale>(md::ita::PrepareFunctionConstantDescriptorPositionScale &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPositionScale>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPositionScale>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D648;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPositionScale>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorPositionScale>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorECEF>(md::ita::PrepareFunctionConstantDescriptorECEF &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorECEF &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorECEF>(md::ita::PrepareFunctionConstantDescriptorECEF &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52CA20;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorECEF>(md::ita::PrepareFunctionConstantDescriptorECEF &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorECEF &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorECEF>(md::ita::PrepareFunctionConstantDescriptorECEF &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorECEF>(md::ita::PrepareFunctionConstantDescriptorECEF &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorECEF &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorECEF>(md::ita::PrepareFunctionConstantDescriptorECEF &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52CA68;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorECEF>(md::ita::PrepareFunctionConstantDescriptorECEF &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorECEF &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorECEF>(md::ita::PrepareFunctionConstantDescriptorECEF &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::FunctionConstants &,md::ls::IsNotMercator const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::IsNotMercator const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  IsNot = (void *)gdc::Registry::storage<md::ls::IsNotMercator>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (IsNot[8] - IsNot[7] >= v3[8] - v3[7]) {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(IsNot + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v3, IsNot, *(void *)(v6 + 24));
  if (IsNot[8] - IsNot[7] >= v4[8] - v4[7]) {
    uint64_t v7 = (uint64_t)v5;
  }
  else {
    uint64_t v7 = (uint64_t)(IsNot + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v4, IsNot, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

BOOL gdc::ComponentStorageWrapper<md::ls::IsNotMercator>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::IsNotMercator>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IsNotMercator>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::IsNotMercator>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::IsMercator const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::IsMercator>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (v2[8] - v2[7] >= v3[8] - v3[7]) {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v2 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v3, v2, *(void *)(v6 + 24));
  if (v2[8] - v2[7] >= v4[8] - v4[7]) {
    uint64_t v7 = (uint64_t)v5;
  }
  else {
    uint64_t v7 = (uint64_t)(v2 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v4, v2, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorECEF>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorECEF>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51CF40;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorECEF>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorECEF>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorAO>(md::ita::PrepareFunctionConstantDescriptorAO &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorAO &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorAO>(md::ita::PrepareFunctionConstantDescriptorAO &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C3F0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorAO>(md::ita::PrepareFunctionConstantDescriptorAO &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorAO &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorAO>(md::ita::PrepareFunctionConstantDescriptorAO &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorAO>(md::ita::PrepareFunctionConstantDescriptorAO &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorAO &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorAO>(md::ita::PrepareFunctionConstantDescriptorAO &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C438;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorAO>(md::ita::PrepareFunctionConstantDescriptorAO &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorAO &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorAO>(md::ita::PrepareFunctionConstantDescriptorAO &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorAO>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorAO>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51CC28;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorAO>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorAO>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorFog>(md::ita::PrepareFunctionConstantDescriptorFog &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorFog &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorFog>(md::ita::PrepareFunctionConstantDescriptorFog &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C7E0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorFog>(md::ita::PrepareFunctionConstantDescriptorFog &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorFog &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorFog>(md::ita::PrepareFunctionConstantDescriptorFog &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorFog>(md::ita::PrepareFunctionConstantDescriptorFog &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorFog &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorFog>(md::ita::PrepareFunctionConstantDescriptorFog &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C828;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorFog>(md::ita::PrepareFunctionConstantDescriptorFog &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorFog &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorFog>(md::ita::PrepareFunctionConstantDescriptorFog &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMaterial const&,md::ls::MainPassItem const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::IsMaterial const&,md::ls::MainPassItem const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::IsMaterial>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::MainPassItem>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::FunctionConstants>(v1);
  if (*(void *)(v2 + 64) - *(void *)(v2 + 56) >= *(void *)(v4 + 64) - *(void *)(v4 + 56)) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = v2;
  }
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) < *(void *)(v5 + 64) - *(void *)(v5 + 56)) {
    uint64_t v5 = v3;
  }
  v11[0] = v5 + 32;
  v11[1] = v4;
  v11[2] = v2;
  v11[3] = v3;
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    uint64_t v8 = v7 + 8;
    do
    {
      uint64_t v7 = v8;
      uint64_t v12 = v8;
      if (v8 == v6) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      uint64_t v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

uint64_t ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMaterial const&,md::ls::MainPassItem const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::IsMaterial const&,md::ls::MainPassItem const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::IsMaterial>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::MainPassItem>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  unint64_t v10 = (void *)v6;
  uint64_t v11 = (void *)(v6 + 32);
  if (v4[8] - v4[7] < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v11 = v4 + 4;
  }
  if (v5[8] - v5[7] >= v11[4] - v11[3]) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = v5 + 4;
  }
  v83[0] = v12;
  v83[1] = v6;
  v83[2] = v4;
  v83[3] = v5;
  uint64_t v14 = (void *)v12[3];
  unint64_t v13 = (void *)v12[4];
  uint64_t v84 = v14;
  if (v13 != v14
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v83))
  {
    uint64_t v15 = v14 + 1;
    do
    {
      uint64_t v14 = v15;
      uint64_t v84 = v15;
      if (v15 == v13) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v83);
      uint64_t v15 = v14 + 1;
    }
    while (!isValid);
  }
  unint64_t v17 = &ecs2::Runtime::_localEntity;
  uint64_t v18 = ecs2::Runtime::_localEntity;
  if (v13 == v14) {
    goto LABEL_82;
  }
  unint64_t v19 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *unint64_t v19 = *v14;
    unint64_t v21 = *v14;
    uint64_t v22 = HIDWORD(*v14);
    unint64_t v23 = *v14 >> 39;
    uint64_t v24 = v10[4];
    if (v23 >= (v10[5] - v24) >> 3) {
      goto LABEL_23;
    }
    uint64_t v25 = *(void *)(v24 + 8 * v23);
    if (!v25) {
      goto LABEL_23;
    }
    unint64_t v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F));
    uint64_t v28 = v10[7];
    uint64_t v27 = v10[8];
    if (v26 >= (v27 - v28) >> 3) {
      goto LABEL_23;
    }
    uint64_t v29 = v28 + 8 * v26;
    if (v29 != v27 && *(_DWORD *)(v29 + 4) == v22)
    {
      uint64_t v82 = 33 * v26;
      uint64_t v31 = v10[11];
      uint64_t v32 = v10[10] + v82;
    }
    else
    {
LABEL_23:
      uint64_t v31 = v10[11];
      uint64_t v32 = v31;
    }
    uint64_t v33 = v32 == v31 ? 0 : v32;
    if ((uint64_t v34 = v4[4], v23 < (v4[5] - v34) >> 3)
      && (uint64_t v35 = *(void *)(v34 + 8 * v23)) != 0
      && (unint64_t v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v21) & 0x7F)), v38 = v4[7], v37 = v4[8], v36 < (v37 - v38) >> 3)
      && ((v39 = v38 + 8 * v36, v39 != v37) ? (BOOL v40 = *(_DWORD *)(v39 + 4) == v22) : (BOOL v40 = 0), v40))
    {
      uint64_t v41 = v4[11];
      uint64_t v42 = v4[10] + 8 * v36;
    }
    else
    {
      uint64_t v41 = v4[11];
      uint64_t v42 = v41;
    }
    uint64_t v43 = v42 == v41 ? 0 : v42;
    uint64_t v44 = v5[4];
    if (v23 < (v5[5] - v44) >> 3)
    {
      uint64_t v45 = *(void *)(v44 + 8 * v23);
      if (v45)
      {
        unint64_t v46 = *(unsigned __int16 *)(v45 + 2 * (HIDWORD(v21) & 0x7F));
        uint64_t v48 = v5[7];
        uint64_t v47 = v5[8];
        if (v46 < (v47 - v48) >> 3)
        {
          uint64_t v49 = v48 + 8 * v46;
          if (v49 != v47 && *(_DWORD *)(v49 + 4) == v22) {
            break;
          }
        }
      }
    }
    unint64_t v51 = v5[11];
    unint64_t v52 = v51;
    uint64_t v53 = *(void *)(a2 + 24);
    if (!v53) {
      goto LABEL_81;
    }
LABEL_46:
    if (v52 == v51) {
      unint64_t v54 = 0;
    }
    else {
      unint64_t v54 = v52;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(void *)v53 + 48))(v53, v33, v43, v54);
    uint64_t v56 = (void *)v12[4];
    uint64_t v20 = v14 + 1;
    uint64_t v84 = v14 + 1;
    if (v14 + 1 != v56)
    {
      uint64_t v57 = v10[4];
      uint64_t v59 = v10[7];
      uint64_t v58 = v10[8];
      uint64_t v60 = v4[4];
      uint64_t result = v4[7];
      uint64_t v61 = v4[8];
      uint64_t v62 = v5[4];
      uint64_t v64 = v5[7];
      uint64_t v63 = v5[8];
      while (1)
      {
        unint64_t v65 = *((unsigned int *)v20 + 1);
        unint64_t v66 = v65 >> 7;
        if (v65 >> 7 < (v10[5] - v57) >> 3)
        {
          uint64_t v67 = *(void *)(v57 + 8 * v66);
          if (v67)
          {
            uint64_t v68 = v65 & 0x7F;
            unint64_t v69 = *(unsigned __int16 *)(v67 + 2 * v68);
            if ((v58 - v59) >> 3 > v69)
            {
              uint64_t v70 = v59 + 8 * v69;
              BOOL v71 = v70 != v58 && *(_DWORD *)(v70 + 4) == v65;
              if (v71 && v66 < (v4[5] - v60) >> 3)
              {
                uint64_t v73 = *(void *)(v60 + 8 * v66);
                if (v73)
                {
                  unint64_t v74 = *(unsigned __int16 *)(v73 + 2 * v68);
                  if ((v61 - result) >> 3 > v74)
                  {
                    unint64_t v75 = result + 8 * v74;
                    BOOL v76 = v75 != v61 && *(_DWORD *)(v75 + 4) == v65;
                    if (v76 && v66 < (v5[5] - v62) >> 3)
                    {
                      uint64_t v78 = *(void *)(v62 + 8 * v66);
                      if (v78)
                      {
                        unint64_t v79 = *(unsigned __int16 *)(v78 + 2 * v68);
                        if ((v63 - v64) >> 3 > v79)
                        {
                          uint64_t v80 = v64 + 8 * v79;
                          if (*(_DWORD *)(v80 + 4) == v65 && v80 != v63) {
                            break;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v20 == v56)
        {
          uint64_t v20 = v56;
          goto LABEL_14;
        }
      }
      uint64_t v56 = v20;
LABEL_14:
      uint64_t v84 = v20;
    }
    uint64_t v14 = v56;
    if (v13 == v56) {
      goto LABEL_83;
    }
  }
  unint64_t v51 = v5[11];
  unint64_t v52 = v5[10] + v46;
  uint64_t v53 = *(void *)(a2 + 24);
  if (v53) {
    goto LABEL_46;
  }
LABEL_81:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_82:
  uint64_t result = ((uint64_t (*)(uint64_t (**)(void), uint64_t, uint64_t, uint64_t))v18)(v17, v7, v8, v9);
  unint64_t v19 = (void *)result;
LABEL_83:
  *unint64_t v19 = 0xFFFFFFFF00000000;
  return result;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorFog>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorFog>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51CE20;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorFog>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorFog>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLightDebug>(md::ita::PrepareFunctionConstantDescriptorLightDebug &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorLightDebug &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLightDebug>(md::ita::PrepareFunctionConstantDescriptorLightDebug &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D4D0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLightDebug>(md::ita::PrepareFunctionConstantDescriptorLightDebug &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorLightDebug &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLightDebug>(md::ita::PrepareFunctionConstantDescriptorLightDebug &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLightDebug>(md::ita::PrepareFunctionConstantDescriptorLightDebug &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorLightDebug &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLightDebug>(md::ita::PrepareFunctionConstantDescriptorLightDebug &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D518;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLightDebug>(md::ita::PrepareFunctionConstantDescriptorLightDebug &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorLightDebug &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorLightDebug>(md::ita::PrepareFunctionConstantDescriptorLightDebug &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::UsesDebugLight>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::UsesDebugLight>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UsesDebugLight>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::UsesDebugLight>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLightDebug>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLightDebug>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D498;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLightDebug>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorLightDebug>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorShadows>(md::ita::PrepareFunctionConstantDescriptorShadows &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorShadows &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorShadows>(md::ita::PrepareFunctionConstantDescriptorShadows &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52CFC0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorShadows>(md::ita::PrepareFunctionConstantDescriptorShadows &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorShadows &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorShadows>(md::ita::PrepareFunctionConstantDescriptorShadows &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorShadows>(md::ita::PrepareFunctionConstantDescriptorShadows &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorShadows &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorShadows>(md::ita::PrepareFunctionConstantDescriptorShadows &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D008;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorShadows>(md::ita::PrepareFunctionConstantDescriptorShadows &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorShadows &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorShadows>(md::ita::PrepareFunctionConstantDescriptorShadows &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::UsesShadow const&,md::ls::IntendedStandardPassSceneDepth const*,md::ls::IntendedStandardPassShadow const*>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::UsesShadow>(v1);
  gdc::Registry::storage<md::ls::IntendedStandardPassSceneDepth>(v1);
  gdc::Registry::storage<md::ls::IntendedStandardPassShadow>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (v2[8] - v2[7] >= v3[8] - v3[7]) {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v2 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v3, v2, *(void *)(v6 + 24));
  if (v2[8] - v2[7] >= v4[8] - v4[7]) {
    uint64_t v7 = (uint64_t)v5;
  }
  else {
    uint64_t v7 = (uint64_t)(v2 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v4, v2, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

BOOL gdc::ComponentStorageWrapper<md::ls::IntendedStandardPassShadow>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::IntendedStandardPassShadow>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IntendedStandardPassShadow>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::IntendedStandardPassShadow>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UsesShadow>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::UsesShadow>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UsesShadow>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::UsesShadow>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::UsesShadow const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::UsesShadow>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (v2[8] - v2[7] >= v3[8] - v3[7]) {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v2 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v3, v2, *(void *)(v6 + 24));
  if (v2[8] - v2[7] >= v4[8] - v4[7]) {
    uint64_t v7 = (uint64_t)v5;
  }
  else {
    uint64_t v7 = (uint64_t)(v2 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v4, v2, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

uint64_t ecs2::Query<md::ls::FunctionConstants &,md::ls::UsesShadow const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::UsesShadow const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::UsesShadow>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(v3);
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 4;
  if (v4[8] - v4[7] >= v5[8] - v5[7]) {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v59, v8, v5, v4, *(void *)(v8 + 24));
  if (v4[8] - v4[7] >= v6[8] - v6[7]) {
    uint64_t v9 = (uint64_t)v7;
  }
  else {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v57, v9, v6, v4, *(void *)(v9 + 32));
  unint64_t v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v58 == v62) {
    goto LABEL_55;
  }
  uint64_t v12 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    void *v12 = *v11;
    unint64_t v13 = *v11;
    unint64_t v14 = HIDWORD(*v11);
    unint64_t v15 = v13 >> 39;
    uint64_t v16 = v6[4];
    if (v13 >> 39 >= (v6[5] - v16) >> 3) {
      goto LABEL_17;
    }
    uint64_t v17 = *(void *)(v16 + 8 * v15);
    if (!v17) {
      goto LABEL_17;
    }
    unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    uint64_t v20 = v6[7];
    uint64_t v19 = v6[8];
    if (v18 >= (v19 - v20) >> 3) {
      goto LABEL_17;
    }
    uint64_t v21 = v20 + 8 * v18;
    BOOL v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == v14;
    if (v22)
    {
      uint64_t v56 = 33 * v18;
      uint64_t v23 = v6[11];
      uint64_t v24 = v6[10] + v56;
    }
    else
    {
LABEL_17:
      uint64_t v23 = v6[11];
      uint64_t v24 = v23;
    }
    uint64_t v25 = v24 == v23 ? 0 : v24;
    uint64_t v26 = v4[4];
    if (v15 < (v4[5] - v26) >> 3)
    {
      uint64_t v27 = *(void *)(v26 + 8 * v15);
      if (v27)
      {
        unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        uint64_t v30 = v4[7];
        uint64_t v29 = v4[8];
        if (v28 < (v29 - v30) >> 3)
        {
          uint64_t v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == v14) {
            break;
          }
        }
      }
    }
    unint64_t v33 = v4[11];
    unint64_t v34 = v33;
    uint64_t v35 = *(void *)(a2 + 24);
    if (!v35) {
      goto LABEL_54;
    }
LABEL_29:
    if (v34 == v33) {
      unint64_t v36 = 0;
    }
    else {
      unint64_t v36 = v34;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v35 + 48))(v35, v25, v36);
    uint64_t v38 = v62;
    uint64_t v11 = *(unint64_t **)(v59 + 32);
    if (++v62 != v11)
    {
      uint64_t v39 = v60[4];
      unint64_t v40 = (v60[5] - v39) >> 3;
      uint64_t v41 = v38 + 2;
      while (1)
      {
        unint64_t v42 = *((unsigned int *)v41 - 1);
        unint64_t v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          uint64_t v44 = *(void *)(v39 + 8 * v43);
          if (v44)
          {
            unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            uint64_t v46 = v60[7];
            uint64_t result = v60[8];
            if (v45 < (result - v46) >> 3)
            {
              uint64_t v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == v42)
              {
                uint64_t v49 = v61[4];
                uint64_t result = v61[5] - v49;
                if (v43 < result >> 3)
                {
                  uint64_t v50 = *(void *)(v49 + 8 * v43);
                  if (v50)
                  {
                    unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    uint64_t v53 = v61[7];
                    uint64_t v52 = v61[8];
                    uint64_t result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      uint64_t v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == v42) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v62 = v41;
        BOOL v22 = v41++ == v11;
        if (v22) {
          goto LABEL_9;
        }
      }
      uint64_t v11 = v41 - 1;
    }
LABEL_9:
    if (v58 == v11) {
      goto LABEL_56;
    }
  }
  unint64_t v33 = v4[11];
  unint64_t v34 = v4[10] + v28;
  uint64_t v35 = *(void *)(a2 + 24);
  if (v35) {
    goto LABEL_29;
  }
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  uint64_t result = (*v10)();
  uint64_t v12 = (void *)result;
LABEL_56:
  void *v12 = 0xFFFFFFFF00000000;
  return result;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorShadows>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorShadows>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D210;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorShadows>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorShadows>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorGlobeLight>(md::ita::PrepareFunctionConstantDescriptorGlobeLight &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorGlobeLight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorGlobeLight>(md::ita::PrepareFunctionConstantDescriptorGlobeLight &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D440;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorGlobeLight>(md::ita::PrepareFunctionConstantDescriptorGlobeLight &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorGlobeLight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorGlobeLight>(md::ita::PrepareFunctionConstantDescriptorGlobeLight &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorGlobeLight>(md::ita::PrepareFunctionConstantDescriptorGlobeLight &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorGlobeLight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorGlobeLight>(md::ita::PrepareFunctionConstantDescriptorGlobeLight &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D488;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorGlobeLight>(md::ita::PrepareFunctionConstantDescriptorGlobeLight &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorGlobeLight &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorGlobeLight>(md::ita::PrepareFunctionConstantDescriptorGlobeLight &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::UseGlobeLighting>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::UseGlobeLighting>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  unint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    unint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UseGlobeLighting>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::UseGlobeLighting>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorGlobeLight>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorGlobeLight>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D450;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorGlobeLight>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorGlobeLight>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>(md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>(md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52DD40;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>(md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>(md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>(md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>(md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52DD88;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>(md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>(md::ita::PrepareFunctionConstantDescriptorSpecularContribution &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::MaterialSpecularity>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::MaterialSpecularity>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MaterialSpecularity>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::MaterialSpecularity>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D8D0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSpecularContribution>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOverlay>(md::ita::PrepareFunctionConstantDescriptorOverlay &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorOverlay &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOverlay>(md::ita::PrepareFunctionConstantDescriptorOverlay &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52CF30;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOverlay>(md::ita::PrepareFunctionConstantDescriptorOverlay &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorOverlay &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOverlay>(md::ita::PrepareFunctionConstantDescriptorOverlay &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOverlay>(md::ita::PrepareFunctionConstantDescriptorOverlay &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorOverlay &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOverlay>(md::ita::PrepareFunctionConstantDescriptorOverlay &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52CF78;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOverlay>(md::ita::PrepareFunctionConstantDescriptorOverlay &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorOverlay &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorOverlay>(md::ita::PrepareFunctionConstantDescriptorOverlay &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::HasOverlayPatch>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::HasOverlayPatch>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::HasOverlayPatch>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::HasOverlayPatch>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOverlay>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOverlay>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D1C8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOverlay>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorOverlay>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorDualElevation>(md::ita::PrepareFunctionConstantDescriptorDualElevation &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorDualElevation &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorDualElevation>(md::ita::PrepareFunctionConstantDescriptorDualElevation &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D7A0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorDualElevation>(md::ita::PrepareFunctionConstantDescriptorDualElevation &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorDualElevation &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorDualElevation>(md::ita::PrepareFunctionConstantDescriptorDualElevation &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorDualElevation>(md::ita::PrepareFunctionConstantDescriptorDualElevation &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorDualElevation &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorDualElevation>(md::ita::PrepareFunctionConstantDescriptorDualElevation &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D7E8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorDualElevation>(md::ita::PrepareFunctionConstantDescriptorDualElevation &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorDualElevation &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorDualElevation>(md::ita::PrepareFunctionConstantDescriptorDualElevation &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::IsElevated>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::IsElevated>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IsElevated>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::IsElevated>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorDualElevation>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorDualElevation>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D600;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorDualElevation>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorDualElevation>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSSAO>(md::ita::PrepareFunctionConstantDescriptorSSAO &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorSSAO &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSSAO>(md::ita::PrepareFunctionConstantDescriptorSSAO &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52CAB0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSSAO>(md::ita::PrepareFunctionConstantDescriptorSSAO &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorSSAO &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSSAO>(md::ita::PrepareFunctionConstantDescriptorSSAO &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSSAO>(md::ita::PrepareFunctionConstantDescriptorSSAO &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorSSAO &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSSAO>(md::ita::PrepareFunctionConstantDescriptorSSAO &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52CAF8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSSAO>(md::ita::PrepareFunctionConstantDescriptorSSAO &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorSSAO &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSSAO>(md::ita::PrepareFunctionConstantDescriptorSSAO &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSSAO>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSSAO>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51CF88;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSSAO>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSSAO>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSplined>(md::ita::PrepareFunctionConstantDescriptorSplined &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorSplined &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSplined>(md::ita::PrepareFunctionConstantDescriptorSplined &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D050;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSplined>(md::ita::PrepareFunctionConstantDescriptorSplined &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFunctionConstantDescriptorSplined &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSplined>(md::ita::PrepareFunctionConstantDescriptorSplined &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSplined>(md::ita::PrepareFunctionConstantDescriptorSplined &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorSplined &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSplined>(md::ita::PrepareFunctionConstantDescriptorSplined &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D098;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSplined>(md::ita::PrepareFunctionConstantDescriptorSplined &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFunctionConstantDescriptorSplined &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFunctionConstantDescriptorSplined>(md::ita::PrepareFunctionConstantDescriptorSplined &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::FunctionConstants &,md::ls::IsTransparent const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::IsTransparent const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::IsTransparent>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (v2[8] - v2[7] >= v3[8] - v3[7]) {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v2 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v3, v2, *(void *)(v6 + 24));
  if (v2[8] - v2[7] >= v4[8] - v4[7]) {
    uint64_t v7 = (uint64_t)v5;
  }
  else {
    uint64_t v7 = (uint64_t)(v2 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v4, v2, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

BOOL ecs2::Query<md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&>::Model<ecs2::RuntimeQuery<md::ls::FunctionConstants &,md::ls::IsMercator const&,md::ls::IsOpaque const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::IsMercator>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::IsOpaque>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::FunctionConstants>(v1);
  if (*(void *)(v2 + 64) - *(void *)(v2 + 56) >= *(void *)(v4 + 64) - *(void *)(v4 + 56)) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = v2;
  }
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) < *(void *)(v5 + 64) - *(void *)(v5 + 56)) {
    uint64_t v5 = v3;
  }
  v11[0] = v5 + 32;
  v11[1] = v4;
  v11[2] = v2;
  v11[3] = v3;
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    uint64_t v8 = v7 + 8;
    do
    {
      uint64_t v7 = v8;
      uint64_t v12 = v8;
      if (v8 == v6) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      uint64_t v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSplined>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSplined>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D258;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSplined>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFunctionConstantDescriptorSplined>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PerformVisibilityTestOnRenderItem>(md::ita::PerformVisibilityTestOnRenderItem &&)::{lambda(void)#2},std::allocator<md::ita::PerformVisibilityTestOnRenderItem &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PerformVisibilityTestOnRenderItem>(md::ita::PerformVisibilityTestOnRenderItem &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52BEE0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PerformVisibilityTestOnRenderItem>(md::ita::PerformVisibilityTestOnRenderItem &&)::{lambda(void)#2},std::allocator<md::ita::PerformVisibilityTestOnRenderItem &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PerformVisibilityTestOnRenderItem>(md::ita::PerformVisibilityTestOnRenderItem &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PerformVisibilityTestOnRenderItem>(md::ita::PerformVisibilityTestOnRenderItem &&)::{lambda(void)#1},std::allocator<md::ita::PerformVisibilityTestOnRenderItem &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PerformVisibilityTestOnRenderItem>(md::ita::PerformVisibilityTestOnRenderItem &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52BF28;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PerformVisibilityTestOnRenderItem>(md::ita::PerformVisibilityTestOnRenderItem &&)::{lambda(void)#1},std::allocator<md::ita::PerformVisibilityTestOnRenderItem &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PerformVisibilityTestOnRenderItem>(md::ita::PerformVisibilityTestOnRenderItem &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::AssociationHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::AssociationHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(_OWORD *)(v14 + 16 * v7) = *(_OWORD *)(a1[11] - 16);
  a1[11] -= 16;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::AssociationHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::AssociationHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::VisibilityGroupTest>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::VisibilityGroupTest>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10] + 8 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  char v16 = *(unsigned char *)(v15 - 4);
  *(_DWORD *)uint64_t v14 = *(_DWORD *)(v15 - 8);
  *(unsigned char *)(v14 + 4) = v16;
  a1[11] -= 8;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::VisibilityGroupTest>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::VisibilityGroupTest>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PerformVisibilityTestOnRenderItem>,std::allocator<ecs2::ForwardToExecute<md::ita::PerformVisibilityTestOnRenderItem>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C9A0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PerformVisibilityTestOnRenderItem>,std::allocator<ecs2::ForwardToExecute<md::ita::PerformVisibilityTestOnRenderItem>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderOrder>(md::ita::AssignRenderOrder &&)::{lambda(void)#2},std::allocator<md::ita::AssignRenderOrder &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderOrder>(md::ita::AssignRenderOrder &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF527410;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderOrder>(md::ita::AssignRenderOrder &&)::{lambda(void)#2},std::allocator<md::ita::AssignRenderOrder &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderOrder>(md::ita::AssignRenderOrder &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderOrder>(md::ita::AssignRenderOrder &&)::{lambda(void)#1},std::allocator<md::ita::AssignRenderOrder &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderOrder>(md::ita::AssignRenderOrder &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF527458;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderOrder>(md::ita::AssignRenderOrder &&)::{lambda(void)#1},std::allocator<md::ita::AssignRenderOrder &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::AssignRenderOrder>(md::ita::AssignRenderOrder &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::RenderItemID>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::RenderableHash>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::IntendedStandardPassSceneDepth>(v1);
  uint64_t v5 = gdc::Registry::storage<md::ls::RenderOrderToUse>(v1);
  v8[0] = v2;
  v8[1] = v3;
  uint64_t v8[2] = v4;
  v8[3] = v5;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v9, v8);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v6 = v2;
  }
  else {
    uint64_t v6 = v3;
  }
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v6 = v4;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v6 = v5;
  }
  return *(void *)(v6 + 64) == v9[6];
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderableHash>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RenderableHash>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(void *)(v14 + 8 * v7) = *(void *)(v15 - 8);
  a1[11] = v15 - 8;
  char v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    char v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RenderableHash>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RenderableHash>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::RenderItemID>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::RenderableHash>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::IntendedStandardPassShadow>(v1);
  uint64_t v5 = gdc::Registry::storage<md::ls::RenderOrderToUse>(v1);
  v8[0] = v2;
  v8[1] = v3;
  uint64_t v8[2] = v4;
  v8[3] = v5;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v9, v8);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v6 = v2;
  }
  else {
    uint64_t v6 = v3;
  }
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v6 = v4;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v6 = v5;
  }
  return *(void *)(v6 + 64) == v9[6];
}

BOOL ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::IsMaterial>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::RenderItemID>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::SharedMaterialZIndexHandle>(v1);
  uint64_t v5 = gdc::Registry::storage<md::ls::RenderableHash>(v1);
  uint64_t v6 = gdc::Registry::storage<md::ls::IsOpaque>(v1);
  uint64_t v7 = gdc::Registry::storage<md::ls::RenderOrderToUse>(v1);
  v10[0] = v2;
  v10[1] = v3;
  v10[2] = v4;
  v10[3] = v5;
  v10[4] = v6;
  void v10[5] = v7;
  gdc::RegistryQueryView<gdc::All<md::ls::IsMaterial const,md::ls::RenderItemID const,md::ls::SharedMaterialZIndexHandle const,md::ls::RenderableHash const,md::ls::RenderOrderToUse>,gdc::Any<md::ls::IsOpaque const>,gdc::None<>>::begin(v11, v10);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v8 = v2;
  }
  else {
    uint64_t v8 = v3;
  }
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < *(void *)(v8 + 64) - *(void *)(v8 + 56)) {
    uint64_t v8 = v4;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v8 + 64) - *(void *)(v8 + 56)) {
    uint64_t v8 = v5;
  }
  if (*(void *)(v7 + 64) - *(void *)(v7 + 56) < *(void *)(v8 + 64) - *(void *)(v8 + 56)) {
    uint64_t v8 = v7;
  }
  return *(void *)(v8 + 64) == v11[7];
}

BOOL gdc::ComponentStorageWrapper<md::ls::SharedMaterialZIndexHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::SharedMaterialZIndexHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SharedMaterialZIndexHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::SharedMaterialZIndexHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::IsMaterial>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::RenderItemID>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::CustomZIndex>(v1);
  uint64_t v5 = gdc::Registry::storage<md::ls::RenderableHash>(v1);
  uint64_t v6 = gdc::Registry::storage<md::ls::IsOpaque>(v1);
  uint64_t v7 = gdc::Registry::storage<md::ls::RenderOrderToUse>(v1);
  v10[0] = v2;
  v10[1] = v3;
  v10[2] = v4;
  v10[3] = v5;
  v10[4] = v6;
  void v10[5] = v7;
  gdc::RegistryQueryView<gdc::All<md::ls::IsMaterial const,md::ls::RenderItemID const,md::ls::SharedMaterialZIndexHandle const,md::ls::RenderableHash const,md::ls::RenderOrderToUse>,gdc::Any<md::ls::IsOpaque const>,gdc::None<>>::begin(v11, v10);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v8 = v2;
  }
  else {
    uint64_t v8 = v3;
  }
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < *(void *)(v8 + 64) - *(void *)(v8 + 56)) {
    uint64_t v8 = v4;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v8 + 64) - *(void *)(v8 + 56)) {
    uint64_t v8 = v5;
  }
  if (*(void *)(v7 + 64) - *(void *)(v7 + 56) < *(void *)(v8 + 64) - *(void *)(v8 + 56)) {
    uint64_t v8 = v7;
  }
  return *(void *)(v8 + 64) == v11[7];
}

BOOL gdc::ComponentStorageWrapper<md::ls::CustomZIndex>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::CustomZIndex>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(void *)(v14 + 8 * v7) = *(void *)(v15 - 8);
  a1[11] = v15 - 8;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::CustomZIndex>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::CustomZIndex>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>::Model<ecs2::RuntimeQuery<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::IsDecal>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::RenderItemID>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::RenderOrderToUse>(v1);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v3;
  }
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < *(void *)(v5 + 64) - *(void *)(v5 + 56)) {
    uint64_t v5 = v4;
  }
  v11[0] = v5 + 32;
  v11[1] = v2;
  v11[2] = v3;
  v11[3] = v4;
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    uint64_t v8 = v7 + 8;
    do
    {
      uint64_t v7 = v8;
      uint64_t v12 = v8;
      if (v8 == v6) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      uint64_t v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRenderOrder>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRenderOrder>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51A438;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::AssignRenderOrder>,std::allocator<ecs2::ForwardToExecute<md::ita::AssignRenderOrder>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfRenderableIsUnique>(md::ita::CheckIfRenderableIsUnique &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfRenderableIsUnique &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfRenderableIsUnique>(md::ita::CheckIfRenderableIsUnique &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF5298A0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfRenderableIsUnique>(md::ita::CheckIfRenderableIsUnique &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfRenderableIsUnique &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfRenderableIsUnique>(md::ita::CheckIfRenderableIsUnique &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfRenderableIsUnique>(md::ita::CheckIfRenderableIsUnique &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfRenderableIsUnique &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfRenderableIsUnique>(md::ita::CheckIfRenderableIsUnique &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF5298E8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfRenderableIsUnique>(md::ita::CheckIfRenderableIsUnique &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfRenderableIsUnique &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfRenderableIsUnique>(md::ita::CheckIfRenderableIsUnique &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::UniqueRenderArrayID const&,md::ls::SharedUniqueID const&>::Model<ecs2::RuntimeQuery<md::ls::UniqueRenderArrayID const&,md::ls::SharedUniqueID const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::UniqueRenderArrayID>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::SharedUniqueID>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7]) {
    uint64_t v6 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(void *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7]) {
    uint64_t v7 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v7 = (uint64_t)v5;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfRenderableIsUnique>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfRenderableIsUnique>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B680;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfRenderableIsUnique>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfRenderableIsUnique>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResetFunctionConstants>(md::ita::ResetFunctionConstants &&)::{lambda(void)#2},std::allocator<md::ita::ResetFunctionConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResetFunctionConstants>(md::ita::ResetFunctionConstants &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF528A00;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResetFunctionConstants>(md::ita::ResetFunctionConstants &&)::{lambda(void)#2},std::allocator<md::ita::ResetFunctionConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResetFunctionConstants>(md::ita::ResetFunctionConstants &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResetFunctionConstants>(md::ita::ResetFunctionConstants &&)::{lambda(void)#1},std::allocator<md::ita::ResetFunctionConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResetFunctionConstants>(md::ita::ResetFunctionConstants &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF528A48;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResetFunctionConstants>(md::ita::ResetFunctionConstants &&)::{lambda(void)#1},std::allocator<md::ita::ResetFunctionConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResetFunctionConstants>(md::ita::ResetFunctionConstants &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::ResetFunctionConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::ResetFunctionConstants>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51AF30;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ResetFunctionConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::ResetFunctionConstants>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPeeledRenderItems>(md::ita::CreateDepthPeeledRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateDepthPeeledRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPeeledRenderItems>(md::ita::CreateDepthPeeledRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A7D0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPeeledRenderItems>(md::ita::CreateDepthPeeledRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateDepthPeeledRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPeeledRenderItems>(md::ita::CreateDepthPeeledRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPeeledRenderItems>(md::ita::CreateDepthPeeledRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateDepthPeeledRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPeeledRenderItems>(md::ita::CreateDepthPeeledRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A818;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPeeledRenderItems>(md::ita::CreateDepthPeeledRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateDepthPeeledRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPeeledRenderItems>(md::ita::CreateDepthPeeledRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::RegistryQueryView<gdc::All<md::ls::SliceAssignmentT<(md::SliceType)7> const,md::ls::RenderableMeshVertexFormat const,md::ls::TileType const,md::ls::RequiresDepthPeel const,md::ls::MeshLayerTypeV const,md::ls::IntendedSceneLayer const,md::ls::PendingProcessing const>,gdc::Any<md::ls::AssociationHandle,md::ls::PrepassConstantDataHandle,md::ls::ShadowConstantDataHandle,md::ls::PreserveHeight,md::ls::HasMeshHandle,md::ls::PositionScaleInfoConstantDataHandle,md::ls::ViewConstantDataHandle,md::ls::TransformConstantDataHandle,md::ls::IndexRange,md::ls::NormalsHandle,md::ls::InstanceTransformHandle,md::ls::UVsHandle,md::ls::NeedsZBias,md::ls::ClippingConstantDataHandle,md::ls::IsMercator,md::ls::ElevationHandle>,gdc::None<>>::Iterator::isValid(void *a1)
{
  uint64_t v1 = (void *)a1[1];
  unint64_t v2 = *(unsigned int *)(a1[9] + 4);
  unint64_t v3 = v2 >> 7;
  uint64_t v4 = v1[4];
  if (v2 >> 7 >= (v1[5] - v4) >> 3) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 8 * v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v2 & 0x7F;
  unint64_t v7 = *(unsigned __int16 *)(v5 + 2 * v6);
  unint64_t v10 = v1 + 7;
  uint64_t v8 = v1[7];
  uint64_t v9 = v10[1];
  if (v7 >= (v9 - v8) >> 3) {
    return 0;
  }
  uint64_t v11 = v8 + 8 * v7;
  if (v11 == v9 || *(_DWORD *)(v11 + 4) != v2) {
    return 0;
  }
  unint64_t v13 = (void *)a1[2];
  uint64_t v14 = v13[4];
  if (v3 >= (v13[5] - v14) >> 3) {
    return 0;
  }
  uint64_t v15 = *(void *)(v14 + 8 * v3);
  if (!v15) {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v15 + 2 * v6);
  unint64_t v19 = v13 + 7;
  uint64_t v17 = v13[7];
  uint64_t v18 = v19[1];
  if (v16 >= (v18 - v17) >> 3) {
    return 0;
  }
  uint64_t v20 = v17 + 8 * v16;
  if (v20 == v18 || *(_DWORD *)(v20 + 4) != v2) {
    return 0;
  }
  BOOL v22 = (void *)a1[3];
  uint64_t v23 = v22[4];
  if (v3 >= (v22[5] - v23) >> 3) {
    return 0;
  }
  uint64_t v24 = *(void *)(v23 + 8 * v3);
  if (!v24) {
    return 0;
  }
  unint64_t v25 = *(unsigned __int16 *)(v24 + 2 * v6);
  unint64_t v28 = v22 + 7;
  uint64_t v26 = v22[7];
  uint64_t v27 = v28[1];
  if (v25 >= (v27 - v26) >> 3) {
    return 0;
  }
  uint64_t v29 = v26 + 8 * v25;
  if (v29 == v27 || *(_DWORD *)(v29 + 4) != v2) {
    return 0;
  }
  uint64_t v31 = (void *)a1[4];
  uint64_t v32 = v31[4];
  if (v3 >= (v31[5] - v32) >> 3) {
    return 0;
  }
  uint64_t v33 = *(void *)(v32 + 8 * v3);
  if (!v33) {
    return 0;
  }
  unint64_t v34 = *(unsigned __int16 *)(v33 + 2 * v6);
  uint64_t v37 = v31 + 7;
  uint64_t v35 = v31[7];
  uint64_t v36 = v37[1];
  if (v34 >= (v36 - v35) >> 3) {
    return 0;
  }
  uint64_t v38 = v35 + 8 * v34;
  if (v38 == v36 || *(_DWORD *)(v38 + 4) != v2) {
    return 0;
  }
  unint64_t v40 = (void *)a1[5];
  uint64_t v41 = v40[4];
  if (v3 >= (v40[5] - v41) >> 3) {
    return 0;
  }
  uint64_t v42 = *(void *)(v41 + 8 * v3);
  if (!v42) {
    return 0;
  }
  unint64_t v43 = *(unsigned __int16 *)(v42 + 2 * v6);
  uint64_t v45 = v40[7];
  uint64_t v44 = v40[8];
  if (v43 >= (v44 - v45) >> 3) {
    return 0;
  }
  uint64_t v46 = 0;
  uint64_t v47 = v45 + 8 * v43;
  if (v47 == v44 || *(_DWORD *)(v47 + 4) != v2) {
    return v46;
  }
  uint64_t v48 = (void *)a1[6];
  uint64_t v49 = v48[4];
  if (v3 >= (v48[5] - v49) >> 3) {
    return 0;
  }
  uint64_t v50 = *(void *)(v49 + 8 * v3);
  if (!v50) {
    return 0;
  }
  unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * v6);
  uint64_t v53 = v48[7];
  uint64_t v52 = v48[8];
  if (v51 >= (v52 - v53) >> 3) {
    return 0;
  }
  uint64_t v46 = 0;
  uint64_t v54 = v53 + 8 * v51;
  if (v54 != v52 && *(_DWORD *)(v54 + 4) == v2)
  {
    uint64_t v55 = (void *)a1[7];
    uint64_t v56 = v55[4];
    if (v3 < (v55[5] - v56) >> 3 && (uint64_t v57 = *(void *)(v56 + 8 * v3)) != 0)
    {
      unint64_t v58 = *(unsigned __int16 *)(v57 + 2 * v6);
      uint64_t v60 = v55[7];
      uint64_t v59 = v55[8];
      if (v58 < (v59 - v60) >> 3)
      {
        uint64_t v61 = v60 + 8 * v58;
        if (*(_DWORD *)(v61 + 4) == v2) {
          uint64_t v62 = v61;
        }
        else {
          uint64_t v62 = v55[8];
        }
        return v62 != v59;
      }
    }
    else
    {
      uint64_t v59 = v55[8];
    }
    uint64_t v62 = v59;
    return v62 != v59;
  }
  return v46;
}

BOOL gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayer>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayer>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  unint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    unint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayer>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayer>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MeshLayerTypeV>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::MeshLayerTypeV>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  unint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    unint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MeshLayerTypeV>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::MeshLayerTypeV>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresDepthPeel>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresDepthPeel>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresDepthPeel>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RequiresDepthPeel>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderableMeshVertexFormat>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RenderableMeshVertexFormat>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RenderableMeshVertexFormat>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RenderableMeshVertexFormat>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateDepthPeeledRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateDepthPeeledRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51BE18;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateDepthPeeledRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateDepthPeeledRenderItems>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForShadowPass>(md::ita::CreateTileClearRenderItemsForShadowPass &&)::{lambda(void)#2},std::allocator<md::ita::CreateTileClearRenderItemsForShadowPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForShadowPass>(md::ita::CreateTileClearRenderItemsForShadowPass &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52CE10;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForShadowPass>(md::ita::CreateTileClearRenderItemsForShadowPass &&)::{lambda(void)#2},std::allocator<md::ita::CreateTileClearRenderItemsForShadowPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForShadowPass>(md::ita::CreateTileClearRenderItemsForShadowPass &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForShadowPass>(md::ita::CreateTileClearRenderItemsForShadowPass &&)::{lambda(void)#1},std::allocator<md::ita::CreateTileClearRenderItemsForShadowPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForShadowPass>(md::ita::CreateTileClearRenderItemsForShadowPass &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52CE58;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForShadowPass>(md::ita::CreateTileClearRenderItemsForShadowPass &&)::{lambda(void)#1},std::allocator<md::ita::CreateTileClearRenderItemsForShadowPass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForShadowPass>(md::ita::CreateTileClearRenderItemsForShadowPass &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::EnteringView>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::SupportsShadows>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::AssociationTileHandle>(v1);
  uint64_t v5 = gdc::Registry::storage<md::ls::BaseMapTileHandle>(v1);
  uint64_t v6 = gdc::Registry::storage<md::ls::TileViewConstantDataHandle>(v1);
  uint64_t v7 = gdc::Registry::storage<md::ls::TileTransformConstantDataHandle>(v1);
  uint64_t v8 = gdc::Registry::storage<md::ls::TileMatrix>(v1);
  uint64_t v9 = gdc::Registry::storage<md::ls::TileShadowConstantDataHandle>(v1);
  v12[0] = v2;
  v12[1] = v3;
  char v12[2] = v4;
  v12[3] = v5;
  v12[4] = v6;
  v12[5] = v7;
  v12[6] = v8;
  v12[7] = v9;
  gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsShadows const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileShadowConstantDataHandle const>,gdc::Any<>,gdc::None<>>::begin(v13, v12);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v10 = v2;
  }
  else {
    uint64_t v10 = v3;
  }
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < *(void *)(v10 + 64) - *(void *)(v10 + 56)) {
    uint64_t v10 = v4;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v10 + 64) - *(void *)(v10 + 56)) {
    uint64_t v10 = v5;
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < *(void *)(v10 + 64) - *(void *)(v10 + 56)) {
    uint64_t v10 = v6;
  }
  if (*(void *)(v7 + 64) - *(void *)(v7 + 56) < *(void *)(v10 + 64) - *(void *)(v10 + 56)) {
    uint64_t v10 = v7;
  }
  if (*(void *)(v8 + 64) - *(void *)(v8 + 56) < *(void *)(v10 + 64) - *(void *)(v10 + 56)) {
    uint64_t v10 = v8;
  }
  if (*(void *)(v9 + 64) - *(void *)(v9 + 56) < *(void *)(v10 + 64) - *(void *)(v10 + 56)) {
    uint64_t v10 = v9;
  }
  return *(void *)(v10 + 64) == v13[10];
}

BOOL gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsShadows const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileShadowConstantDataHandle const>,gdc::Any<>,gdc::None<>>::Iterator::isValid(void *a1)
{
  uint64_t v1 = (void *)a1[1];
  unint64_t v2 = *(unsigned int *)(a1[10] + 4);
  unint64_t v3 = v2 >> 7;
  uint64_t v4 = v1[4];
  if (v2 >> 7 >= (v1[5] - v4) >> 3) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 8 * v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v2 & 0x7F;
  unint64_t v7 = *(unsigned __int16 *)(v5 + 2 * v6);
  uint64_t v10 = v1 + 7;
  uint64_t v8 = v1[7];
  uint64_t v9 = v10[1];
  if (v7 >= (v9 - v8) >> 3) {
    return 0;
  }
  uint64_t v11 = v8 + 8 * v7;
  if (v11 == v9 || *(_DWORD *)(v11 + 4) != v2) {
    return 0;
  }
  unint64_t v13 = (void *)a1[2];
  uint64_t v14 = v13[4];
  if (v3 >= (v13[5] - v14) >> 3) {
    return 0;
  }
  uint64_t v15 = *(void *)(v14 + 8 * v3);
  if (!v15) {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v15 + 2 * v6);
  unint64_t v19 = v13 + 7;
  uint64_t v17 = v13[7];
  uint64_t v18 = v19[1];
  if (v16 >= (v18 - v17) >> 3) {
    return 0;
  }
  uint64_t v20 = v17 + 8 * v16;
  if (v20 == v18 || *(_DWORD *)(v20 + 4) != v2) {
    return 0;
  }
  BOOL v22 = (void *)a1[3];
  uint64_t v23 = v22[4];
  if (v3 >= (v22[5] - v23) >> 3) {
    return 0;
  }
  uint64_t v24 = *(void *)(v23 + 8 * v3);
  if (!v24) {
    return 0;
  }
  unint64_t v25 = *(unsigned __int16 *)(v24 + 2 * v6);
  unint64_t v28 = v22 + 7;
  uint64_t v26 = v22[7];
  uint64_t v27 = v28[1];
  if (v25 >= (v27 - v26) >> 3) {
    return 0;
  }
  uint64_t v29 = v26 + 8 * v25;
  if (v29 == v27 || *(_DWORD *)(v29 + 4) != v2) {
    return 0;
  }
  uint64_t v31 = (void *)a1[4];
  uint64_t v32 = v31[4];
  if (v3 >= (v31[5] - v32) >> 3) {
    return 0;
  }
  uint64_t v33 = *(void *)(v32 + 8 * v3);
  if (!v33) {
    return 0;
  }
  unint64_t v34 = *(unsigned __int16 *)(v33 + 2 * v6);
  uint64_t v37 = v31 + 7;
  uint64_t v35 = v31[7];
  uint64_t v36 = v37[1];
  if (v34 >= (v36 - v35) >> 3) {
    return 0;
  }
  uint64_t v38 = v35 + 8 * v34;
  if (v38 == v36 || *(_DWORD *)(v38 + 4) != v2) {
    return 0;
  }
  unint64_t v40 = (void *)a1[5];
  uint64_t v41 = v40[4];
  if (v3 >= (v40[5] - v41) >> 3) {
    return 0;
  }
  uint64_t v42 = *(void *)(v41 + 8 * v3);
  if (!v42) {
    return 0;
  }
  unint64_t v43 = *(unsigned __int16 *)(v42 + 2 * v6);
  uint64_t v45 = v40[7];
  uint64_t v44 = v40[8];
  if (v43 >= (v44 - v45) >> 3) {
    return 0;
  }
  uint64_t v46 = 0;
  uint64_t v47 = v45 + 8 * v43;
  if (v47 == v44 || *(_DWORD *)(v47 + 4) != v2) {
    return v46;
  }
  uint64_t v48 = (void *)a1[6];
  uint64_t v49 = v48[4];
  if (v3 >= (v48[5] - v49) >> 3) {
    return 0;
  }
  uint64_t v50 = *(void *)(v49 + 8 * v3);
  if (!v50) {
    return 0;
  }
  unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * v6);
  uint64_t v53 = v48[7];
  uint64_t v52 = v48[8];
  if (v51 >= (v52 - v53) >> 3) {
    return 0;
  }
  uint64_t v46 = 0;
  uint64_t v54 = v53 + 8 * v51;
  if (v54 == v52 || *(_DWORD *)(v54 + 4) != v2) {
    return v46;
  }
  uint64_t v55 = (void *)a1[7];
  uint64_t v56 = v55[4];
  if (v3 >= (v55[5] - v56) >> 3) {
    return 0;
  }
  uint64_t v57 = *(void *)(v56 + 8 * v3);
  if (!v57) {
    return 0;
  }
  unint64_t v58 = *(unsigned __int16 *)(v57 + 2 * v6);
  uint64_t v60 = v55[7];
  uint64_t v59 = v55[8];
  if (v58 >= (v59 - v60) >> 3) {
    return 0;
  }
  uint64_t v46 = 0;
  uint64_t v61 = v60 + 8 * v58;
  if (v61 != v59 && *(_DWORD *)(v61 + 4) == v2)
  {
    uint64_t v62 = (void *)a1[8];
    uint64_t v63 = v62[4];
    if (v3 < (v62[5] - v63) >> 3 && (uint64_t v64 = *(void *)(v63 + 8 * v3)) != 0)
    {
      unint64_t v65 = *(unsigned __int16 *)(v64 + 2 * v6);
      uint64_t v67 = v62[7];
      uint64_t v66 = v62[8];
      if (v65 < (v66 - v67) >> 3)
      {
        uint64_t v68 = v67 + 8 * v65;
        if (*(_DWORD *)(v68 + 4) == v2) {
          uint64_t v69 = v68;
        }
        else {
          uint64_t v69 = v62[8];
        }
        return v69 != v66;
      }
    }
    else
    {
      uint64_t v66 = v62[8];
    }
    uint64_t v69 = v66;
    return v69 != v66;
  }
  return v46;
}

BOOL gdc::ComponentStorageWrapper<md::ls::EnteringView>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::EnteringView>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  unint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    unint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::EnteringView>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::EnteringView>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForShadowPass>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForShadowPass>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D138;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForShadowPass>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForShadowPass>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForDepthPrePass>(md::ita::CreateTileClearRenderItemsForDepthPrePass &&)::{lambda(void)#2},std::allocator<md::ita::CreateTileClearRenderItemsForDepthPrePass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForDepthPrePass>(md::ita::CreateTileClearRenderItemsForDepthPrePass &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D170;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForDepthPrePass>(md::ita::CreateTileClearRenderItemsForDepthPrePass &&)::{lambda(void)#2},std::allocator<md::ita::CreateTileClearRenderItemsForDepthPrePass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForDepthPrePass>(md::ita::CreateTileClearRenderItemsForDepthPrePass &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForDepthPrePass>(md::ita::CreateTileClearRenderItemsForDepthPrePass &&)::{lambda(void)#1},std::allocator<md::ita::CreateTileClearRenderItemsForDepthPrePass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForDepthPrePass>(md::ita::CreateTileClearRenderItemsForDepthPrePass &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D1B8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForDepthPrePass>(md::ita::CreateTileClearRenderItemsForDepthPrePass &&)::{lambda(void)#1},std::allocator<md::ita::CreateTileClearRenderItemsForDepthPrePass &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateTileClearRenderItemsForDepthPrePass>(md::ita::CreateTileClearRenderItemsForDepthPrePass &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  *(void *)&long long v4 = gdc::Registry::storage<md::ls::EnteringView>(v1);
  *((void *)&v4 + 1) = gdc::Registry::storage<md::ls::SupportsDepthPrePass>(v1);
  *(void *)&long long v5 = gdc::Registry::storage<md::ls::RenderablesCount>(v1);
  *((void *)&v5 + 1) = gdc::Registry::storage<md::ls::AssociationTileHandle>(v1);
  *(void *)&long long v6 = gdc::Registry::storage<md::ls::BaseMapTileHandle>(v1);
  *((void *)&v6 + 1) = gdc::Registry::storage<md::ls::TileViewConstantDataHandle>(v1);
  *(void *)&long long v7 = gdc::Registry::storage<md::ls::TileTransformConstantDataHandle>(v1);
  *((void *)&v7 + 1) = gdc::Registry::storage<md::ls::TileMatrix>(v1);
  *(void *)&long long v8 = gdc::Registry::storage<md::ls::TilePrepassShadowConstantDataHandle>(v1);
  *((void *)&v8 + 1) = gdc::Registry::storage<md::ls::TilePrepassConstantDataHandle>(v1);
  gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsDepthPrePass const,md::ls::RenderablesCount const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const>,gdc::Any<>,gdc::None<>>::begin(v9, &v4);
  v10[0] = v4;
  v10[1] = v5;
  v10[2] = v6;
  v10[3] = v7;
  v10[4] = v8;
  uint64_t v2 = gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsDepthPrePass const,md::ls::RenderablesCount const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const>,gdc::Any<>,gdc::None<>>::minSizeStorage<gdc::ComponentStorageWrapper<md::ls::EnteringView> const*,gdc::ComponentStorageWrapper<md::ls::SupportsDepthPrePass> const*,gdc::ComponentStorageWrapper<md::ls::RenderablesCount> const*,gdc::ComponentStorageWrapper<md::ls::AssociationTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::BaseMapTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileViewConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileTransformConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileMatrix> const*,gdc::ComponentStorageWrapper<md::ls::TilePrepassShadowConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TilePrepassConstantDataHandle> const*>(v10);
  return *(void *)(v2 + 32) == v9[12];
}

BOOL gdc::RegistryQueryView<gdc::All<md::ls::EnteringView const,md::ls::SupportsDepthPrePass const,md::ls::RenderablesCount const,md::ls::AssociationTileHandle const,md::ls::BaseMapTileHandle const,md::ls::TileViewConstantDataHandle const,md::ls::TileTransformConstantDataHandle const,md::ls::TileMatrix const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const>,gdc::Any<>,gdc::None<>>::Iterator::isValid(void *a1)
{
  uint64_t v1 = (void *)a1[1];
  unint64_t v2 = *(unsigned int *)(a1[12] + 4);
  unint64_t v3 = v2 >> 7;
  uint64_t v4 = v1[4];
  if (v2 >> 7 >= (v1[5] - v4) >> 3) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 8 * v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v2 & 0x7F;
  unint64_t v7 = *(unsigned __int16 *)(v5 + 2 * v6);
  unint64_t v10 = v1 + 7;
  uint64_t v8 = v1[7];
  uint64_t v9 = v10[1];
  if (v7 >= (v9 - v8) >> 3) {
    return 0;
  }
  uint64_t v11 = v8 + 8 * v7;
  if (v11 == v9 || *(_DWORD *)(v11 + 4) != v2) {
    return 0;
  }
  unint64_t v13 = (void *)a1[2];
  uint64_t v14 = v13[4];
  if (v3 >= (v13[5] - v14) >> 3) {
    return 0;
  }
  uint64_t v15 = *(void *)(v14 + 8 * v3);
  if (!v15) {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v15 + 2 * v6);
  unint64_t v19 = v13 + 7;
  uint64_t v17 = v13[7];
  uint64_t v18 = v19[1];
  if (v16 >= (v18 - v17) >> 3) {
    return 0;
  }
  uint64_t v20 = v17 + 8 * v16;
  if (v20 == v18 || *(_DWORD *)(v20 + 4) != v2) {
    return 0;
  }
  BOOL v22 = (void *)a1[3];
  uint64_t v23 = v22[4];
  if (v3 >= (v22[5] - v23) >> 3) {
    return 0;
  }
  uint64_t v24 = *(void *)(v23 + 8 * v3);
  if (!v24) {
    return 0;
  }
  unint64_t v25 = *(unsigned __int16 *)(v24 + 2 * v6);
  unint64_t v28 = v22 + 7;
  uint64_t v26 = v22[7];
  uint64_t v27 = v28[1];
  if (v25 >= (v27 - v26) >> 3) {
    return 0;
  }
  uint64_t v29 = v26 + 8 * v25;
  if (v29 == v27 || *(_DWORD *)(v29 + 4) != v2) {
    return 0;
  }
  uint64_t v31 = (void *)a1[4];
  uint64_t v32 = v31[4];
  if (v3 >= (v31[5] - v32) >> 3) {
    return 0;
  }
  uint64_t v33 = *(void *)(v32 + 8 * v3);
  if (!v33) {
    return 0;
  }
  unint64_t v34 = *(unsigned __int16 *)(v33 + 2 * v6);
  uint64_t v37 = v31 + 7;
  uint64_t v35 = v31[7];
  uint64_t v36 = v37[1];
  if (v34 >= (v36 - v35) >> 3) {
    return 0;
  }
  uint64_t v38 = v35 + 8 * v34;
  if (v38 == v36 || *(_DWORD *)(v38 + 4) != v2) {
    return 0;
  }
  unint64_t v40 = (void *)a1[5];
  uint64_t v41 = v40[4];
  if (v3 >= (v40[5] - v41) >> 3) {
    return 0;
  }
  uint64_t v42 = *(void *)(v41 + 8 * v3);
  if (!v42) {
    return 0;
  }
  unint64_t v43 = *(unsigned __int16 *)(v42 + 2 * v6);
  uint64_t v45 = v40[7];
  uint64_t v44 = v40[8];
  if (v43 >= (v44 - v45) >> 3) {
    return 0;
  }
  uint64_t v46 = 0;
  uint64_t v47 = v45 + 8 * v43;
  if (v47 == v44 || *(_DWORD *)(v47 + 4) != v2) {
    return v46;
  }
  uint64_t v48 = (void *)a1[6];
  uint64_t v49 = v48[4];
  if (v3 >= (v48[5] - v49) >> 3) {
    return 0;
  }
  uint64_t v50 = *(void *)(v49 + 8 * v3);
  if (!v50) {
    return 0;
  }
  unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * v6);
  uint64_t v53 = v48[7];
  uint64_t v52 = v48[8];
  if (v51 >= (v52 - v53) >> 3) {
    return 0;
  }
  uint64_t v46 = 0;
  uint64_t v54 = v53 + 8 * v51;
  if (v54 == v52 || *(_DWORD *)(v54 + 4) != v2) {
    return v46;
  }
  uint64_t v55 = (void *)a1[7];
  uint64_t v56 = v55[4];
  if (v3 >= (v55[5] - v56) >> 3) {
    return 0;
  }
  uint64_t v57 = *(void *)(v56 + 8 * v3);
  if (!v57) {
    return 0;
  }
  unint64_t v58 = *(unsigned __int16 *)(v57 + 2 * v6);
  uint64_t v60 = v55[7];
  uint64_t v59 = v55[8];
  if (v58 >= (v59 - v60) >> 3) {
    return 0;
  }
  uint64_t v46 = 0;
  uint64_t v61 = v60 + 8 * v58;
  if (v61 == v59 || *(_DWORD *)(v61 + 4) != v2) {
    return v46;
  }
  uint64_t v62 = (void *)a1[8];
  uint64_t v63 = v62[4];
  if (v3 >= (v62[5] - v63) >> 3) {
    return 0;
  }
  uint64_t v64 = *(void *)(v63 + 8 * v3);
  if (!v64) {
    return 0;
  }
  unint64_t v65 = *(unsigned __int16 *)(v64 + 2 * v6);
  uint64_t v67 = v62[7];
  uint64_t v66 = v62[8];
  if (v65 >= (v66 - v67) >> 3) {
    return 0;
  }
  uint64_t v46 = 0;
  uint64_t v68 = v67 + 8 * v65;
  if (v68 == v66 || *(_DWORD *)(v68 + 4) != v2) {
    return v46;
  }
  uint64_t v69 = (void *)a1[9];
  uint64_t v70 = v69[4];
  if (v3 >= (v69[5] - v70) >> 3) {
    return 0;
  }
  uint64_t v71 = *(void *)(v70 + 8 * v3);
  if (!v71) {
    return 0;
  }
  unint64_t v72 = *(unsigned __int16 *)(v71 + 2 * v6);
  uint64_t v74 = v69[7];
  uint64_t v73 = v69[8];
  if (v72 >= (v73 - v74) >> 3) {
    return 0;
  }
  uint64_t v46 = 0;
  uint64_t v75 = v74 + 8 * v72;
  if (v75 != v73 && *(_DWORD *)(v75 + 4) == v2) {
    return geo::sparse_map<gdc::Entity,md::ls::TilePrepassConstantDataHandle>::count((void *)(a1[10] + 32), v2);
  }
  return v46;
}

BOOL geo::sparse_map<gdc::Entity,md::ls::TilePrepassConstantDataHandle>::count(void *a1, unsigned int a2)
{
  unint64_t v2 = (unint64_t)a2 >> 7;
  if (v2 >= (uint64_t)(a1[1] - *a1) >> 3 || (uint64_t v3 = *(void *)(*a1 + 8 * v2)) == 0)
  {
    uint64_t v5 = a1[4];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (a2 & 0x7F));
  uint64_t v6 = a1[3];
  uint64_t v5 = a1[4];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != a2) {
    uint64_t v7 = a1[4];
  }
  return v7 != v5;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForDepthPrePass>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForDepthPrePass>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D2E8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForDepthPrePass>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateTileClearRenderItemsForDepthPrePass>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateUnflattenedRenderItems>(md::ita::CreateUnflattenedRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateUnflattenedRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateUnflattenedRenderItems>(md::ita::CreateUnflattenedRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A860;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateUnflattenedRenderItems>(md::ita::CreateUnflattenedRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateUnflattenedRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateUnflattenedRenderItems>(md::ita::CreateUnflattenedRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateUnflattenedRenderItems>(md::ita::CreateUnflattenedRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateUnflattenedRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateUnflattenedRenderItems>(md::ita::CreateUnflattenedRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A8A8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateUnflattenedRenderItems>(md::ita::CreateUnflattenedRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateUnflattenedRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateUnflattenedRenderItems>(md::ita::CreateUnflattenedRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::DefaultZIndex>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::DefaultZIndex>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          --a1[11];
          unint64_t v13 = (void *)a1[28];
          if (v13)
          {
            uint64_t v14 = a1[31];
            while (1)
            {
              v19[0] = &v17;
              v19[1] = 1;
              uint64_t v18 = v14;
              uint64_t v15 = v13[6];
              if (!v15) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v15 + 48))(v15, &v18, v19);
              unint64_t v13 = (void *)*v13;
              if (!v13) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<md::ls::DefaultZIndex>::~ComponentStorageWrapper(v16);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<md::ls::DefaultZIndex>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ZIndex>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::ZIndex>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          uint64_t v13 = a1[10];
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          *(void *)(v13 + 8 * v7) = *(void *)(a1[11] - 8);
          a1[11] -= 8;
          uint64_t v14 = (void *)a1[28];
          if (v14)
          {
            uint64_t v15 = a1[31];
            while (1)
            {
              v20[0] = &v18;
              v20[1] = 1;
              uint64_t v19 = v15;
              uint64_t v16 = v14[6];
              if (!v16) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v19, v20);
              uint64_t v14 = (void *)*v14;
              if (!v14) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<md::ls::ZIndex>::~ComponentStorageWrapper(v17);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<md::ls::ZIndex>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::HasMaterialRaster>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::HasMaterialRaster>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::HasMaterialRaster>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::HasMaterialRaster>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateUnflattenedRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateUnflattenedRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51BE60;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateUnflattenedRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateUnflattenedRenderItems>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPrePassRenderItems>(md::ita::CreateDepthPrePassRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateDepthPrePassRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPrePassRenderItems>(md::ita::CreateDepthPrePassRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52AE90;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPrePassRenderItems>(md::ita::CreateDepthPrePassRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateDepthPrePassRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPrePassRenderItems>(md::ita::CreateDepthPrePassRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPrePassRenderItems>(md::ita::CreateDepthPrePassRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateDepthPrePassRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPrePassRenderItems>(md::ita::CreateDepthPrePassRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52AED8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPrePassRenderItems>(md::ita::CreateDepthPrePassRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateDepthPrePassRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateDepthPrePassRenderItems>(md::ita::CreateDepthPrePassRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)5>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)5>>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)5>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)5>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateDepthPrePassRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateDepthPrePassRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C178;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateDepthPrePassRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateDepthPrePassRenderItems>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateShadowPassRenderItems>(md::ita::CreateShadowPassRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateShadowPassRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateShadowPassRenderItems>(md::ita::CreateShadowPassRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A230;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateShadowPassRenderItems>(md::ita::CreateShadowPassRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateShadowPassRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateShadowPassRenderItems>(md::ita::CreateShadowPassRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateShadowPassRenderItems>(md::ita::CreateShadowPassRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateShadowPassRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateShadowPassRenderItems>(md::ita::CreateShadowPassRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A278;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateShadowPassRenderItems>(md::ita::CreateShadowPassRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateShadowPassRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateShadowPassRenderItems>(md::ita::CreateShadowPassRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)4>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)4>>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)4>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)4>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MeshRenderableID>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::MeshRenderableID>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          uint64_t v13 = a1[10];
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          uint64_t v14 = a1[11];
          *(void *)(v13 + 8 * v7) = *(void *)(v14 - 8);
          a1[11] = v14 - 8;
          uint64_t v15 = (void *)a1[28];
          if (v15)
          {
            uint64_t v16 = a1[31];
            while (1)
            {
              v21[0] = &v19;
              v21[1] = 1;
              uint64_t v20 = v16;
              uint64_t v17 = v15[6];
              if (!v17) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v20, v21);
              uint64_t v15 = (void *)*v15;
              if (!v15) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<md::ls::MeshRenderableID>::~ComponentStorageWrapper(v18);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<md::ls::MeshRenderableID>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateShadowPassRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateShadowPassRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51BB48;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateShadowPassRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateShadowPassRenderItems>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateMainRenderItems>(md::ita::CreateMainRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateMainRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateMainRenderItems>(md::ita::CreateMainRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF528340;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateMainRenderItems>(md::ita::CreateMainRenderItems &&)::{lambda(void)#2},std::allocator<md::ita::CreateMainRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateMainRenderItems>(md::ita::CreateMainRenderItems &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateMainRenderItems>(md::ita::CreateMainRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateMainRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateMainRenderItems>(md::ita::CreateMainRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF528388;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateMainRenderItems>(md::ita::CreateMainRenderItems &&)::{lambda(void)#1},std::allocator<md::ita::CreateMainRenderItems &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CreateMainRenderItems>(md::ita::CreateMainRenderItems &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateMainRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateMainRenderItems>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51ABD0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CreateMainRenderItems>,std::allocator<ecs2::ForwardToExecute<md::ita::CreateMainRenderItems>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareColorCorrectionFactorsConstantHandle>(md::ita::PrepareColorCorrectionFactorsConstantHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareColorCorrectionFactorsConstantHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareColorCorrectionFactorsConstantHandle>(md::ita::PrepareColorCorrectionFactorsConstantHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D320;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareColorCorrectionFactorsConstantHandle>(md::ita::PrepareColorCorrectionFactorsConstantHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareColorCorrectionFactorsConstantHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareColorCorrectionFactorsConstantHandle>(md::ita::PrepareColorCorrectionFactorsConstantHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareColorCorrectionFactorsConstantHandle>(md::ita::PrepareColorCorrectionFactorsConstantHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareColorCorrectionFactorsConstantHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareColorCorrectionFactorsConstantHandle>(md::ita::PrepareColorCorrectionFactorsConstantHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D368;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareColorCorrectionFactorsConstantHandle>(md::ita::PrepareColorCorrectionFactorsConstantHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareColorCorrectionFactorsConstantHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareColorCorrectionFactorsConstantHandle>(md::ita::PrepareColorCorrectionFactorsConstantHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::MaterialBrightnessAndSaturation>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::MaterialBrightnessAndSaturation>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = (_DWORD *)(a1[10] + 16 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = (_DWORD *)a1[11];
  int v16 = *(v15 - 4);
  v15 -= 4;
  *uint64_t v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  a1[11] = v15;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MaterialBrightnessAndSaturation>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::MaterialBrightnessAndSaturation>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderableMaterialData>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RenderableMaterialData>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = (_OWORD *)(a1[10] + 32 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  long long v16 = *(_OWORD *)(v15 - 16);
  *uint64_t v14 = *(_OWORD *)(v15 - 32);
  v14[1] = v16;
  a1[11] -= 32;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RenderableMaterialData>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RenderableMaterialData>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareColorCorrectionFactorsConstantHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareColorCorrectionFactorsConstantHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D3C0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareColorCorrectionFactorsConstantHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareColorCorrectionFactorsConstantHandle>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfNeedsDepthPeel>(md::ita::CheckIfNeedsDepthPeel &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfNeedsDepthPeel &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfNeedsDepthPeel>(md::ita::CheckIfNeedsDepthPeel &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF528220;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfNeedsDepthPeel>(md::ita::CheckIfNeedsDepthPeel &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfNeedsDepthPeel &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfNeedsDepthPeel>(md::ita::CheckIfNeedsDepthPeel &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfNeedsDepthPeel>(md::ita::CheckIfNeedsDepthPeel &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfNeedsDepthPeel &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfNeedsDepthPeel>(md::ita::CheckIfNeedsDepthPeel &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF528268;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfNeedsDepthPeel>(md::ita::CheckIfNeedsDepthPeel &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfNeedsDepthPeel &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfNeedsDepthPeel>(md::ita::CheckIfNeedsDepthPeel &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::IntendedSceneLayer const&,md::ls::CheckIfRequiresDepthPeel const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::IntendedSceneLayer const&,md::ls::CheckIfRequiresDepthPeel const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::InView>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::IntendedSceneLayer>(v1);
  uint64_t v5 = gdc::Registry::storage<md::ls::CheckIfRequiresDepthPeel>(v1);
  v8[0] = v2;
  v8[1] = v3;
  uint64_t v8[2] = v4;
  v8[3] = v5;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v9, v8);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v6 = v2;
  }
  else {
    uint64_t v6 = v3;
  }
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v6 = v4;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v6 = v5;
  }
  return *(void *)(v6 + 64) == v9[6];
}

uint64_t gdc::Registry::storage<md::ls::CheckIfRequiresDepthPeel>(int8x8_t *a1)
{
  unint64_t v10 = 0x910D7E292AD5622FLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x910D7E292AD5622FLL;
    if (*(void *)&v1 <= 0x910D7E292AD5622FLL) {
      unint64_t v3 = 0x910D7E292AD5622FLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x910D7E292AD5622FLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x910D7E292AD5622FLL)
      {
        if (v5[2] == 0x910D7E292AD5622FLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x910D7E292AD5622FLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x910D7E292AD5622FLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A2037890(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<md::ls::CheckIfRequiresDepthPeel>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::CheckIfRequiresDepthPeel>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::CheckIfRequiresDepthPeel>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::CheckIfRequiresDepthPeel>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::IntendedSceneLayer const&,md::ls::CheckIfRequiresDepthPeel const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::IntendedSceneLayer const&,md::ls::CheckIfRequiresDepthPeel const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::InView>(v2);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::IntendedSceneLayer>(v2);
  uint64_t v6 = (void *)gdc::Registry::storage<md::ls::CheckIfRequiresDepthPeel>(v2);
  v97[0] = (uint64_t)v3;
  v97[1] = (uint64_t)v4;
  v97[2] = (uint64_t)v5;
  v97[3] = (uint64_t)v6;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v95, v97);
  unint64_t v7 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7]) {
    unint64_t v7 = v4 + 4;
  }
  if (v5[8] - v5[7] < v7[4] - v7[3]) {
    unint64_t v7 = v5 + 4;
  }
  if (v6[8] - v6[7] < v7[4] - v7[3]) {
    unint64_t v7 = v6 + 4;
  }
  uint64_t v8 = (unint64_t *)v7[4];
  uint64_t v9 = v96;
  if (v8 == v96)
  {
    uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    unint64_t v10 = (void *)result;
  }
  else
  {
    unint64_t v10 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v11 = v95[0];
    uint64_t v12 = (void *)v95[1];
    uint64_t v13 = (void *)v95[2];
    int8x8_t v92 = (void *)v95[4];
    uint8x8_t v93 = (void *)v95[3];
    do
    {
      *unint64_t v10 = *v9;
      unint64_t v15 = *v9;
      unint64_t v16 = HIDWORD(*v9);
      unint64_t v17 = *v9 >> 39;
      uint64_t v18 = v3[4];
      if (v17 < (v3[5] - v18) >> 3
        && (uint64_t v19 = *(void *)(v18 + 8 * v17)) != 0
        && (unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v22 = v3[7],
            uint64_t v21 = v3[8],
            v20 < (v21 - v22) >> 3)
        && ((v23 = v22 + 8 * v20, v23 != v21) ? (BOOL v24 = *(_DWORD *)(v23 + 4) == v16) : (BOOL v24 = 0), v24))
      {
        uint64_t v25 = v3[11];
        uint64_t v26 = v3[10] + 8 * v20;
      }
      else
      {
        uint64_t v25 = v3[11];
        uint64_t v26 = v25;
      }
      if (v26 == v25) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = v26;
      }
      uint64_t v28 = v4[4];
      if (v17 < (v4[5] - v28) >> 3
        && (uint64_t v29 = *(void *)(v28 + 8 * v17)) != 0
        && (unint64_t v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v32 = v4[7],
            uint64_t v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((uint64_t v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == v16) : (v34 = 0), v34))
      {
        uint64_t v35 = v4[11];
        uint64_t v36 = v4[10] + 4 * v30;
      }
      else
      {
        uint64_t v35 = v4[11];
        uint64_t v36 = v35;
      }
      if (v36 == v35) {
        uint64_t v37 = 0;
      }
      else {
        uint64_t v37 = v36;
      }
      uint64_t v38 = v5[4];
      if (v17 < (v5[5] - v38) >> 3
        && (uint64_t v39 = *(void *)(v38 + 8 * v17)) != 0
        && (unint64_t v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v42 = v5[7],
            uint64_t v41 = v5[8],
            v40 < (v41 - v42) >> 3)
        && ((uint64_t v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == v16) : (v44 = 0), v44))
      {
        unint64_t v45 = v5[11];
        unint64_t v46 = v5[10] + v40;
      }
      else
      {
        unint64_t v45 = v5[11];
        unint64_t v46 = v45;
      }
      if (v46 == v45) {
        unint64_t v47 = 0;
      }
      else {
        unint64_t v47 = v46;
      }
      uint64_t v48 = v6[4];
      if (v17 < (v6[5] - v48) >> 3
        && (uint64_t v49 = *(void *)(v48 + 8 * v17)) != 0
        && (unint64_t v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v52 = v6[7],
            uint64_t v51 = v6[8],
            v50 < (v51 - v52) >> 3)
        && ((v53 = v52 + 8 * v50, v53 != v51) ? (BOOL v54 = *(_DWORD *)(v53 + 4) == v16) : (BOOL v54 = 0), v54))
      {
        unint64_t v55 = v6[11];
        unint64_t v56 = v6[10] + v50;
      }
      else
      {
        unint64_t v55 = v6[11];
        unint64_t v56 = v55;
      }
      uint64_t v57 = *(void *)(a2 + 24);
      if (!v57)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        JUMPOUT(0x1A2037EB4);
      }
      if (v56 == v55) {
        unint64_t v58 = 0;
      }
      else {
        unint64_t v58 = v56;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t))(*(void *)v57 + 48))(v57, v27, v37, v47, v58);
      uint64_t v60 = *(unint64_t **)(v11 + 32);
      uint64_t v14 = v9 + 1;
      unint64_t v96 = v9 + 1;
      if (v9 + 1 != v60)
      {
        uint64_t v61 = v12[4];
        while (1)
        {
          unint64_t v62 = *((unsigned int *)v14 + 1);
          unint64_t v63 = v62 >> 7;
          if (v62 >> 7 < (v12[5] - v61) >> 3)
          {
            uint64_t v64 = *(void *)(v61 + 8 * v63);
            if (v64)
            {
              uint64_t v65 = v62 & 0x7F;
              unint64_t v66 = *(unsigned __int16 *)(v64 + 2 * v65);
              uint64_t v68 = v12[7];
              uint64_t v67 = v12[8];
              uint64_t result = v67 - v68;
              if (v66 < (v67 - v68) >> 3)
              {
                uint64_t v69 = v68 + 8 * v66;
                if (v69 != v67 && *(_DWORD *)(v69 + 4) == v62)
                {
                  uint64_t v71 = v13[4];
                  if (v63 < (v13[5] - v71) >> 3)
                  {
                    uint64_t v72 = *(void *)(v71 + 8 * v63);
                    if (v72)
                    {
                      unint64_t v73 = *(unsigned __int16 *)(v72 + 2 * v65);
                      uint64_t v75 = v13[7];
                      uint64_t v74 = v13[8];
                      uint64_t result = v74 - v75;
                      if (v73 < (v74 - v75) >> 3)
                      {
                        uint64_t v76 = v75 + 8 * v73;
                        if (v76 != v74 && *(_DWORD *)(v76 + 4) == v62)
                        {
                          uint64_t v78 = v93[4];
                          if (v63 < (v93[5] - v78) >> 3)
                          {
                            uint64_t v79 = *(void *)(v78 + 8 * v63);
                            if (v79)
                            {
                              unint64_t v80 = *(unsigned __int16 *)(v79 + 2 * v65);
                              uint64_t v82 = v93[7];
                              uint64_t v81 = v93[8];
                              uint64_t result = v81 - v82;
                              if (v80 < (v81 - v82) >> 3)
                              {
                                uint64_t v83 = v82 + 8 * v80;
                                if (v83 != v81 && *(_DWORD *)(v83 + 4) == v62)
                                {
                                  uint64_t v85 = v92[4];
                                  if (v63 < (v92[5] - v85) >> 3)
                                  {
                                    uint64_t v86 = *(void *)(v85 + 8 * v63);
                                    if (v86)
                                    {
                                      unint64_t v87 = *(unsigned __int16 *)(v86 + 2 * v65);
                                      uint64_t v89 = v92[7];
                                      uint64_t v88 = v92[8];
                                      if (v87 < (v88 - v89) >> 3)
                                      {
                                        uint64_t v90 = v89 + 8 * v87;
                                        if (*(_DWORD *)(v90 + 4) == v62 && v90 != v88) {
                                          break;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v60)
          {
            uint64_t v14 = v60;
            goto LABEL_10;
          }
        }
        uint64_t v60 = v14;
LABEL_10:
        unint64_t v96 = v14;
      }
      uint64_t v9 = v60;
    }
    while (v8 != v60);
  }
  *unint64_t v10 = 0xFFFFFFFF00000000;
  return result;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfNeedsDepthPeel>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfNeedsDepthPeel>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51AB40;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfNeedsDepthPeel>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfNeedsDepthPeel>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareGradientParametersConstantDataHandle>(md::ita::PrepareGradientParametersConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareGradientParametersConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareGradientParametersConstantDataHandle>(md::ita::PrepareGradientParametersConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D560;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareGradientParametersConstantDataHandle>(md::ita::PrepareGradientParametersConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareGradientParametersConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareGradientParametersConstantDataHandle>(md::ita::PrepareGradientParametersConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareGradientParametersConstantDataHandle>(md::ita::PrepareGradientParametersConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareGradientParametersConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareGradientParametersConstantDataHandle>(md::ita::PrepareGradientParametersConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D5A8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareGradientParametersConstantDataHandle>(md::ita::PrepareGradientParametersConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareGradientParametersConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareGradientParametersConstantDataHandle>(md::ita::PrepareGradientParametersConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::InView const&,md::ls::RampMaterialData const&,md::ls::ColorRampDataHandle &>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::InView>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::RampMaterialData>(v1);
  uint64_t v5 = gdc::Registry::storage<md::ls::ColorRampDataHandle>(v1);
  v8[0] = v2;
  v8[1] = v3;
  uint64_t v8[2] = v4;
  v8[3] = v5;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v9, v8);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v6 = v2;
  }
  else {
    uint64_t v6 = v3;
  }
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v6 = v4;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v6 = v5;
  }
  return *(void *)(v6 + 64) == v9[6];
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareGradientParametersConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareGradientParametersConstantDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D4E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareGradientParametersConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareGradientParametersConstantDataHandle>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyColorCorrection>(md::ita::ApplyColorCorrection &&)::{lambda(void)#2},std::allocator<md::ita::ApplyColorCorrection &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyColorCorrection>(md::ita::ApplyColorCorrection &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF527DA0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyColorCorrection>(md::ita::ApplyColorCorrection &&)::{lambda(void)#2},std::allocator<md::ita::ApplyColorCorrection &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyColorCorrection>(md::ita::ApplyColorCorrection &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyColorCorrection>(md::ita::ApplyColorCorrection &&)::{lambda(void)#1},std::allocator<md::ita::ApplyColorCorrection &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyColorCorrection>(md::ita::ApplyColorCorrection &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF527DE8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyColorCorrection>(md::ita::ApplyColorCorrection &&)::{lambda(void)#1},std::allocator<md::ita::ApplyColorCorrection &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyColorCorrection>(md::ita::ApplyColorCorrection &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const&,md::ls::RenderableMaterialData const&>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const&,md::ls::RenderableMaterialData const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::InView>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  uint64_t CanEnable = gdc::Registry::storage<md::ls::CanEnableTexture>(v1);
  uint64_t v5 = gdc::Registry::storage<md::ls::RenderableMaterialData>(v1);
  v8[0] = v2;
  v8[1] = v3;
  uint64_t v8[2] = CanEnable;
  v8[3] = v5;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v9, v8);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v6 = v2;
  }
  else {
    uint64_t v6 = v3;
  }
  if (*(void *)(CanEnable + 64) - *(void *)(CanEnable + 56) < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v6 = CanEnable;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v6 = v5;
  }
  return *(void *)(v6 + 64) == v9[6];
}

BOOL gdc::ComponentStorageWrapper<md::ls::CanEnableTexture>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::CanEnableTexture>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::CanEnableTexture>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::CanEnableTexture>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyColorCorrection>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyColorCorrection>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51A900;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyColorCorrection>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyColorCorrection>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyAlbedoTint>(md::ita::ApplyAlbedoTint &&)::{lambda(void)#2},std::allocator<md::ita::ApplyAlbedoTint &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyAlbedoTint>(md::ita::ApplyAlbedoTint &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF526F90;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyAlbedoTint>(md::ita::ApplyAlbedoTint &&)::{lambda(void)#2},std::allocator<md::ita::ApplyAlbedoTint &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyAlbedoTint>(md::ita::ApplyAlbedoTint &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyAlbedoTint>(md::ita::ApplyAlbedoTint &&)::{lambda(void)#1},std::allocator<md::ita::ApplyAlbedoTint &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyAlbedoTint>(md::ita::ApplyAlbedoTint &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF526FD8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyAlbedoTint>(md::ita::ApplyAlbedoTint &&)::{lambda(void)#1},std::allocator<md::ita::ApplyAlbedoTint &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyAlbedoTint>(md::ita::ApplyAlbedoTint &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::UniqueColorDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::UniqueColorDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UniqueColorDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::UniqueColorDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::AlbedoTintColor>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::AlbedoTintColor>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = (_DWORD *)(a1[10] + 16 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = (_DWORD *)a1[11];
  int v16 = *(v15 - 4);
  v15 -= 4;
  *uint64_t v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  a1[11] = v15;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::AlbedoTintColor>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::AlbedoTintColor>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SharedColorDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::SharedColorDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SharedColorDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::SharedColorDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyAlbedoTint>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyAlbedoTint>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51A1F8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyAlbedoTint>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyAlbedoTint>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfOpaque>(md::ita::CheckIfOpaque &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfOpaque &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfOpaque>(md::ita::CheckIfOpaque &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF526E70;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfOpaque>(md::ita::CheckIfOpaque &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfOpaque &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfOpaque>(md::ita::CheckIfOpaque &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfOpaque>(md::ita::CheckIfOpaque &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfOpaque &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfOpaque>(md::ita::CheckIfOpaque &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF526EB8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfOpaque>(md::ita::CheckIfOpaque &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfOpaque &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfOpaque>(md::ita::CheckIfOpaque &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const*,md::ls::ColorDataHandle const&,md::ls::RenderableMaterialData const&,md::ls::HasOverlayPatch const*>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::CanEnableTexture const*,md::ls::ColorDataHandle const&,md::ls::RenderableMaterialData const&,md::ls::HasOverlayPatch const*>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::InView>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::ColorDataHandle>(v1);
  uint64_t v5 = gdc::Registry::storage<md::ls::RenderableMaterialData>(v1);
  v8[0] = v2;
  v8[1] = v3;
  uint64_t v8[2] = v4;
  v8[3] = v5;
  uint64_t v8[4] = gdc::Registry::storage<md::ls::CanEnableTexture>(v1);
  v8[5] = gdc::Registry::storage<md::ls::HasOverlayPatch>(v1);
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v9, v8);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v6 = v2;
  }
  else {
    uint64_t v6 = v3;
  }
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v6 = v4;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v6 = v5;
  }
  return *(void *)(v6 + 64) == v9[6];
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfOpaque>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfOpaque>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51A168;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfOpaque>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfOpaque>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleRouteLineMask>(md::ita::ProcessRenderableForStyleRouteLineMask &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForStyleRouteLineMask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleRouteLineMask>(md::ita::ProcessRenderableForStyleRouteLineMask &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52CD80;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleRouteLineMask>(md::ita::ProcessRenderableForStyleRouteLineMask &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForStyleRouteLineMask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleRouteLineMask>(md::ita::ProcessRenderableForStyleRouteLineMask &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleRouteLineMask>(md::ita::ProcessRenderableForStyleRouteLineMask &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForStyleRouteLineMask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleRouteLineMask>(md::ita::ProcessRenderableForStyleRouteLineMask &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52CDC8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleRouteLineMask>(md::ita::ProcessRenderableForStyleRouteLineMask &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForStyleRouteLineMask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleRouteLineMask>(md::ita::ProcessRenderableForStyleRouteLineMask &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::GradientMaskColorFactors const&,md::ls::StyleRouteLineMaskDataKeyHandle *>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::GradientMaskColorFactors const&,md::ls::StyleRouteLineMaskDataKeyHandle *>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::InView>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::GradientMaskColorFactors>(v1);
  gdc::Registry::storage<md::ls::StyleRouteLineMaskDataKeyHandle>(v1);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v3;
  }
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < *(void *)(v5 + 64) - *(void *)(v5 + 56)) {
    uint64_t v5 = v4;
  }
  v11[0] = v5 + 32;
  v11[1] = v2;
  v11[2] = v3;
  v11[3] = v4;
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    uint64_t v8 = v7 + 8;
    do
    {
      uint64_t v7 = v8;
      uint64_t v12 = v8;
      if (v8 == v6) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      uint64_t v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

uint64_t gdc::Registry::storage<md::ls::GradientMaskColorFactors>(int8x8_t *a1)
{
  uint64_t v10 = 0x52AE3240ED071F6CLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x52AE3240ED071F6CLL;
    if (*(void *)&v1 <= 0x52AE3240ED071F6CuLL) {
      uint64_t v3 = 0x52AE3240ED071F6CuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x52AE3240ED071F6CLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x52AE3240ED071F6CLL)
      {
        if (v5[2] == 0x52AE3240ED071F6CLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x52AE3240ED071F6CLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x52AE3240ED071F6CLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A2039044(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<md::ls::GradientMaskColorFactors>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::GradientMaskColorFactors>::remove(void *a1, unint64_t a2)
{
  unint64_t v27 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = a1[10];
  uint64_t v15 = v14 + 36 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v16 = a1[11];
  if (*(unsigned __int8 *)(v15 + 16) == *(unsigned __int8 *)(v16 - 20))
  {
    if (*(unsigned char *)(v15 + 16))
    {
      *(_DWORD *)uint64_t v15 = *(_DWORD *)(v16 - 36);
      *(_DWORD *)(v15 + 4) = *(_DWORD *)(v16 - 32);
      *(_DWORD *)(v15 + 8) = *(_DWORD *)(v16 - 28);
      *(_DWORD *)(v15 + 12) = *(_DWORD *)(v16 - 24);
    }
  }
  else if (*(unsigned char *)(v15 + 16))
  {
    *(unsigned char *)(v15 + 16) = 0;
  }
  else
  {
    *(_OWORD *)uint64_t v15 = *(_OWORD *)(v16 - 36);
    *(unsigned char *)(v15 + 16) = 1;
  }
  uint64_t v17 = v14 + 36 * v7;
  int v20 = *(unsigned __int8 *)(v17 + 32);
  unint64_t v18 = (unsigned char *)(v17 + 32);
  int v19 = v20;
  uint64_t v21 = v18 - 12;
  if (v20 == *(unsigned __int8 *)(v16 - 4))
  {
    if (v19)
    {
      _DWORD *v21 = *(_DWORD *)(v16 - 16);
      uint64_t v22 = v14 + 36 * v7;
      *(_DWORD *)(v22 + 24) = *(_DWORD *)(v16 - 12);
      *(_DWORD *)(v22 + 28) = *(_DWORD *)(v16 - 8);
    }
  }
  else if (v19)
  {
    *unint64_t v18 = 0;
  }
  else
  {
    uint64_t v23 = *(void *)(v16 - 16);
    *((_DWORD *)v18 - 1) = *(_DWORD *)(v16 - 8);
    *(void *)uint64_t v21 = v23;
    *unint64_t v18 = 1;
  }
  a1[11] -= 36;
  BOOL v24 = (void *)a1[28];
  if (!v24) {
    return 1;
  }
  uint64_t v25 = a1[31];
  while (1)
  {
    v29[0] = &v27;
    v29[1] = 1;
    uint64_t v28 = v25;
    uint64_t v26 = v24[6];
    if (!v26) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v26 + 48))(v26, &v28, v29);
    BOOL v24 = (void *)*v24;
    if (!v24) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::GradientMaskColorFactors>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::GradientMaskColorFactors>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::GradientMaskColorFactors const&,md::ls::StyleRouteLineMaskDataKeyHandle *>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::GradientMaskColorFactors const&,md::ls::StyleRouteLineMaskDataKeyHandle *>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::InView>(v2);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::GradientMaskColorFactors>(v2);
  uint64_t v6 = (void *)gdc::Registry::storage<md::ls::StyleRouteLineMaskDataKeyHandle>(v2);
  unint64_t v7 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7]) {
    unint64_t v7 = v4 + 4;
  }
  if (v5[8] - v5[7] >= v7[4] - v7[3]) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = v5 + 4;
  }
  v87[0] = v8;
  v87[1] = v3;
  v87[2] = v4;
  v87[3] = v5;
  unint64_t v10 = (void *)v8[3];
  uint64_t v9 = (void *)v8[4];
  uint64_t v88 = v10;
  if (v9 != v10
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v87))
  {
    uint64_t v11 = v10 + 1;
    do
    {
      unint64_t v10 = v11;
      uint64_t v88 = v11;
      if (v11 == v9) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v87);
      uint64_t v11 = v10 + 1;
    }
    while (!isValid);
  }
  if (v9 == v10)
  {
    uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v13 = (void *)result;
  }
  else
  {
    uint64_t v13 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    do
    {
      *uint64_t v13 = *v10;
      unint64_t v15 = *v10;
      uint64_t v16 = HIDWORD(*v10);
      unint64_t v17 = *v10 >> 39;
      uint64_t v18 = v3[4];
      if (v17 < (v3[5] - v18) >> 3
        && (uint64_t v19 = *(void *)(v18 + 8 * v17)) != 0
        && (unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v22 = v3[7],
            uint64_t v21 = v3[8],
            v20 < (v21 - v22) >> 3)
        && ((v23 = v22 + 8 * v20, v23 != v21) ? (BOOL v24 = *(_DWORD *)(v23 + 4) == v16) : (BOOL v24 = 0), v24))
      {
        uint64_t v25 = v3[11];
        uint64_t v26 = v3[10] + 4 * v20;
      }
      else
      {
        uint64_t v25 = v3[11];
        uint64_t v26 = v25;
      }
      if (v26 == v25) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = v26;
      }
      uint64_t v28 = v4[4];
      if (v17 < (v4[5] - v28) >> 3
        && (uint64_t v29 = *(void *)(v28 + 8 * v17)) != 0
        && (unint64_t v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v32 = v4[7],
            uint64_t v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((uint64_t v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == v16) : (v34 = 0), v34))
      {
        uint64_t v35 = v4[11];
        uint64_t v36 = v4[10] + 8 * v30;
      }
      else
      {
        uint64_t v35 = v4[11];
        uint64_t v36 = v35;
      }
      if (v36 == v35) {
        uint64_t v37 = 0;
      }
      else {
        uint64_t v37 = v36;
      }
      uint64_t v38 = v5[4];
      if (v17 < (v5[5] - v38) >> 3
        && (uint64_t v39 = *(void *)(v38 + 8 * v17)) != 0
        && (unint64_t v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v42 = v5[7],
            uint64_t v41 = v5[8],
            v40 < (v41 - v42) >> 3)
        && ((uint64_t v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == v16) : (v44 = 0), v44))
      {
        uint64_t v45 = v5[11];
        uint64_t v46 = v5[10] + 36 * v40;
      }
      else
      {
        uint64_t v45 = v5[11];
        uint64_t v46 = v45;
      }
      if (v46 == v45) {
        uint64_t v47 = 0;
      }
      else {
        uint64_t v47 = v46;
      }
      uint64_t v48 = v6[4];
      if (v17 < (v6[5] - v48) >> 3
        && (uint64_t v49 = *(void *)(v48 + 8 * v17)) != 0
        && (unint64_t v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v52 = v6[7],
            uint64_t v51 = v6[8],
            v50 < (v51 - v52) >> 3)
        && ((v53 = v52 + 8 * v50, v53 != v51) ? (BOOL v54 = *(_DWORD *)(v53 + 4) == v16) : (BOOL v54 = 0), v54))
      {
        uint64_t v55 = v6[11];
        uint64_t v56 = v6[10] + 8 * v50;
      }
      else
      {
        uint64_t v55 = v6[11];
        uint64_t v56 = v55;
      }
      if (v56 == v55) {
        uint64_t v57 = 0;
      }
      else {
        uint64_t v57 = v56;
      }
      uint64_t v89 = v57;
      uint64_t v58 = *(void *)(a2 + 24);
      if (!v58)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        JUMPOUT(0x1A2039700);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v58 + 48))(v58, v27, v37, v47, &v89);
      uint64_t v60 = (void *)v8[4];
      uint64_t v14 = v10 + 1;
      uint64_t v88 = v10 + 1;
      if (v10 + 1 != v60)
      {
        uint64_t v61 = v3[4];
        uint64_t v63 = v3[7];
        uint64_t v62 = v3[8];
        uint64_t v64 = v4[4];
        uint64_t result = v4[7];
        uint64_t v65 = v4[8];
        uint64_t v66 = v5[4];
        uint64_t v68 = v5[7];
        uint64_t v67 = v5[8];
        while (1)
        {
          unint64_t v69 = *((unsigned int *)v14 + 1);
          unint64_t v70 = v69 >> 7;
          if (v69 >> 7 < (v3[5] - v61) >> 3)
          {
            uint64_t v71 = *(void *)(v61 + 8 * v70);
            if (v71)
            {
              uint64_t v72 = v69 & 0x7F;
              unint64_t v73 = *(unsigned __int16 *)(v71 + 2 * v72);
              if ((v62 - v63) >> 3 > v73)
              {
                uint64_t v74 = v63 + 8 * v73;
                BOOL v75 = v74 != v62 && *(_DWORD *)(v74 + 4) == v69;
                if (v75 && v70 < (v4[5] - v64) >> 3)
                {
                  uint64_t v77 = *(void *)(v64 + 8 * v70);
                  if (v77)
                  {
                    unint64_t v78 = *(unsigned __int16 *)(v77 + 2 * v72);
                    if ((v65 - result) >> 3 > v78)
                    {
                      unint64_t v79 = result + 8 * v78;
                      BOOL v80 = v79 != v65 && *(_DWORD *)(v79 + 4) == v69;
                      if (v80 && v70 < (v5[5] - v66) >> 3)
                      {
                        uint64_t v82 = *(void *)(v66 + 8 * v70);
                        if (v82)
                        {
                          unint64_t v83 = *(unsigned __int16 *)(v82 + 2 * v72);
                          if ((v67 - v68) >> 3 > v83)
                          {
                            uint64_t v84 = v68 + 8 * v83;
                            if (*(_DWORD *)(v84 + 4) == v69 && v84 != v67) {
                              break;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v60)
          {
            uint64_t v14 = v60;
            goto LABEL_14;
          }
        }
        uint64_t v60 = v14;
LABEL_14:
        uint64_t v88 = v14;
      }
      unint64_t v10 = v60;
    }
    while (v9 != v60);
  }
  *uint64_t v13 = 0xFFFFFFFF00000000;
  return result;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleRouteLineMask>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleRouteLineMask>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D0F0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleRouteLineMask>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleRouteLineMask>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleTextureIfNecessary>(md::ita::UpdateStyleTextureIfNecessary &&)::{lambda(void)#2},std::allocator<md::ita::UpdateStyleTextureIfNecessary &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleTextureIfNecessary>(md::ita::UpdateStyleTextureIfNecessary &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B160;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleTextureIfNecessary>(md::ita::UpdateStyleTextureIfNecessary &&)::{lambda(void)#2},std::allocator<md::ita::UpdateStyleTextureIfNecessary &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleTextureIfNecessary>(md::ita::UpdateStyleTextureIfNecessary &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleTextureIfNecessary>(md::ita::UpdateStyleTextureIfNecessary &&)::{lambda(void)#1},std::allocator<md::ita::UpdateStyleTextureIfNecessary &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleTextureIfNecessary>(md::ita::UpdateStyleTextureIfNecessary &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B1A8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleTextureIfNecessary>(md::ita::UpdateStyleTextureIfNecessary &&)::{lambda(void)#1},std::allocator<md::ita::UpdateStyleTextureIfNecessary &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleTextureIfNecessary>(md::ita::UpdateStyleTextureIfNecessary &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&,md::ls::ColorRampDataHandle &,md::ls::HasMaterialRaster const*,md::ls::MaterialRasterMaxIndex const*>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::InView>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::RenderableMaterialData>(v1);
  uint64_t HasMaterial = gdc::Registry::storage<md::ls::HasMaterialRaster>(v1);
  uint64_t v6 = gdc::Registry::storage<md::ls::MaterialRasterMaxIndex>(v1);
  uint64_t v7 = gdc::Registry::storage<md::ls::ColorRampDataHandle>(v1);
  v10[0] = v2;
  v10[1] = v3;
  v10[2] = v4;
  v10[3] = HasMaterial;
  v10[4] = v6;
  void v10[5] = v7;
  gdc::RegistryQueryView<gdc::All<md::ls::InView const,md::ls::MeshRenderableID const,md::ls::RenderableMaterialData const,md::ls::ColorRampDataHandle>,gdc::Any<md::ls::HasMaterialRaster const,md::ls::MaterialRasterMaxIndex const>,gdc::None<>>::begin(v11, v10);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v8 = v2;
  }
  else {
    uint64_t v8 = v3;
  }
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < *(void *)(v8 + 64) - *(void *)(v8 + 56)) {
    uint64_t v8 = v4;
  }
  if (*(void *)(v7 + 64) - *(void *)(v7 + 56) < *(void *)(v8 + 64) - *(void *)(v8 + 56)) {
    uint64_t v8 = v7;
  }
  return *(void *)(v8 + 64) == v11[6];
}

BOOL gdc::ComponentStorageWrapper<md::ls::MaterialRasterMaxIndex>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::MaterialRasterMaxIndex>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_WORD *)(v14 + 2 * v7) = *(_WORD *)(v15 - 2);
  a1[11] = v15 - 2;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MaterialRasterMaxIndex>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::MaterialRasterMaxIndex>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateStyleTextureIfNecessary>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateStyleTextureIfNecessary>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C2E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateStyleTextureIfNecessary>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateStyleTextureIfNecessary>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMaterialStyleConstantDataHandle>(md::ita::PrepareMaterialStyleConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMaterialStyleConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMaterialStyleConstantDataHandle>(md::ita::PrepareMaterialStyleConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52CCF0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMaterialStyleConstantDataHandle>(md::ita::PrepareMaterialStyleConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMaterialStyleConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMaterialStyleConstantDataHandle>(md::ita::PrepareMaterialStyleConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMaterialStyleConstantDataHandle>(md::ita::PrepareMaterialStyleConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMaterialStyleConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMaterialStyleConstantDataHandle>(md::ita::PrepareMaterialStyleConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52CD38;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMaterialStyleConstantDataHandle>(md::ita::PrepareMaterialStyleConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMaterialStyleConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMaterialStyleConstantDataHandle>(md::ita::PrepareMaterialStyleConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::InView const&,md::ls::RenderableMaterialData const&>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::RenderableMaterialData const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::InView>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::RenderableMaterialData>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7]) {
    uint64_t v6 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(void *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7]) {
    uint64_t v7 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v7 = (uint64_t)v5;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMaterialStyleConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMaterialStyleConstantDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D0A8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMaterialStyleConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMaterialStyleConstantDataHandle>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareTileElevatedStrokeDataHandle>(md::ita::PrepareTileElevatedStrokeDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareTileElevatedStrokeDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareTileElevatedStrokeDataHandle>(md::ita::PrepareTileElevatedStrokeDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C480;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareTileElevatedStrokeDataHandle>(md::ita::PrepareTileElevatedStrokeDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareTileElevatedStrokeDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareTileElevatedStrokeDataHandle>(md::ita::PrepareTileElevatedStrokeDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareTileElevatedStrokeDataHandle>(md::ita::PrepareTileElevatedStrokeDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareTileElevatedStrokeDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareTileElevatedStrokeDataHandle>(md::ita::PrepareTileElevatedStrokeDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C4C8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareTileElevatedStrokeDataHandle>(md::ita::PrepareTileElevatedStrokeDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareTileElevatedStrokeDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareTileElevatedStrokeDataHandle>(md::ita::PrepareTileElevatedStrokeDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::MercatorBounds>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::MercatorBounds>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = (void *)(a1[10] + 48 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = (void *)a1[11];
  uint64_t v16 = *(v15 - 6);
  v15 -= 6;
  *uint64_t v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  v14[4] = v15[4];
  v14[5] = v15[5];
  a1[11] = v15;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MercatorBounds>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::MercatorBounds>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareTileElevatedStrokeDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareTileElevatedStrokeDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51CC70;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareTileElevatedStrokeDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareTileElevatedStrokeDataHandle>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRasterOverlayDataHandle>(md::ita::PrepareRasterOverlayDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareRasterOverlayDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRasterOverlayDataHandle>(md::ita::PrepareRasterOverlayDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B3A0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRasterOverlayDataHandle>(md::ita::PrepareRasterOverlayDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareRasterOverlayDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRasterOverlayDataHandle>(md::ita::PrepareRasterOverlayDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRasterOverlayDataHandle>(md::ita::PrepareRasterOverlayDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareRasterOverlayDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRasterOverlayDataHandle>(md::ita::PrepareRasterOverlayDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B3E8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRasterOverlayDataHandle>(md::ita::PrepareRasterOverlayDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareRasterOverlayDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareRasterOverlayDataHandle>(md::ita::PrepareRasterOverlayDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareRasterOverlayDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareRasterOverlayDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C400;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareRasterOverlayDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareRasterOverlayDataHandle>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareStyleConstantDataHandle>(md::ita::PrepareStyleConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareStyleConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareStyleConstantDataHandle>(md::ita::PrepareStyleConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B430;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareStyleConstantDataHandle>(md::ita::PrepareStyleConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareStyleConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareStyleConstantDataHandle>(md::ita::PrepareStyleConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareStyleConstantDataHandle>(md::ita::PrepareStyleConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareStyleConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareStyleConstantDataHandle>(md::ita::PrepareStyleConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B478;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareStyleConstantDataHandle>(md::ita::PrepareStyleConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareStyleConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareStyleConstantDataHandle>(md::ita::PrepareStyleConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::OrientedBox const*,md::ls::StyleDataKeyHandle &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::OrientedBox const*,md::ls::StyleDataKeyHandle &>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  gdc::Registry::storage<md::ls::OrientedBox>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::StyleDataKeyHandle>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7]) {
    uint64_t v6 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(void *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7]) {
    uint64_t v7 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v7 = (uint64_t)v5;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

BOOL gdc::ComponentStorageWrapper<md::ls::OrientedBox>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::OrientedBox>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = (void *)(a1[10] + 104 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = (void *)a1[11];
  v14[3] = *(v15 - 10);
  v14[4] = *(v15 - 9);
  v14[5] = *(v15 - 8);
  v14[6] = *(v15 - 7);
  uint64_t v16 = *(v15 - 13);
  v15 -= 13;
  *uint64_t v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[7] = v15[7];
  v14[8] = v15[8];
  v14[9] = v15[9];
  v14[10] = v15[10];
  v14[11] = v15[11];
  v14[12] = v15[12];
  a1[11] = v15;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::OrientedBox>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::OrientedBox>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareStyleConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareStyleConstantDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C448;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareStyleConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareStyleConstantDataHandle>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateShadowConstants>(md::ita::UpdateShadowConstants &&)::{lambda(void)#2},std::allocator<md::ita::UpdateShadowConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateShadowConstants>(md::ita::UpdateShadowConstants &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF5286A0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateShadowConstants>(md::ita::UpdateShadowConstants &&)::{lambda(void)#2},std::allocator<md::ita::UpdateShadowConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateShadowConstants>(md::ita::UpdateShadowConstants &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateShadowConstants>(md::ita::UpdateShadowConstants &&)::{lambda(void)#1},std::allocator<md::ita::UpdateShadowConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateShadowConstants>(md::ita::UpdateShadowConstants &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF5286E8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateShadowConstants>(md::ita::UpdateShadowConstants &&)::{lambda(void)#1},std::allocator<md::ita::UpdateShadowConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateShadowConstants>(md::ita::UpdateShadowConstants &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateShadowConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateShadowConstants>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A203AA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::function<void ()(md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle &)>::~function(&a27);
  (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  _Unwind_Resume(a1);
}

BOOL ecs2::Query<md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle &>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::TileMatrix>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::TileShadowConstantDataHandle>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7]) {
    uint64_t v6 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(void *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7]) {
    uint64_t v7 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v7 = (uint64_t)v5;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

uint64_t ecs2::Query<md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::TileMatrix>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::TileShadowConstantDataHandle>(v3);
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(void *)(v9 + 32));
  unint64_t v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61) {
    goto LABEL_55;
  }
  uint64_t v12 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    void *v12 = *v11;
    unint64_t v13 = *v11;
    unint64_t v14 = HIDWORD(*v11);
    unint64_t v15 = v13 >> 39;
    uint64_t v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3) {
      goto LABEL_17;
    }
    uint64_t v17 = *(void *)(v16 + 8 * v15);
    if (!v17) {
      goto LABEL_17;
    }
    unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    uint64_t v20 = v4[7];
    uint64_t v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3) {
      goto LABEL_17;
    }
    uint64_t v21 = v20 + 8 * v18;
    BOOL v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == v14;
    if (v22)
    {
      uint64_t v23 = v4[11];
      uint64_t v24 = v4[10] + 8 * v18;
    }
    else
    {
LABEL_17:
      uint64_t v23 = v4[11];
      uint64_t v24 = v23;
    }
    uint64_t v25 = v24 == v23 ? 0 : v24;
    uint64_t v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      uint64_t v27 = *(void *)(v26 + 8 * v15);
      if (v27)
      {
        unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        uint64_t v30 = v6[7];
        uint64_t v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          uint64_t v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == v14) {
            break;
          }
        }
      }
    }
    uint64_t v33 = v6[11];
    uint64_t v34 = v33;
    uint64_t v35 = *(void *)(a2 + 24);
    if (!v35) {
      goto LABEL_54;
    }
LABEL_29:
    if (v34 == v33) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = v34;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v35 + 48))(v35, v25, v36);
    uint64_t v38 = v61;
    uint64_t v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      uint64_t v39 = v59[4];
      unint64_t v40 = (v59[5] - v39) >> 3;
      uint64_t v41 = v38 + 2;
      while (1)
      {
        unint64_t v42 = *((unsigned int *)v41 - 1);
        unint64_t v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          uint64_t v44 = *(void *)(v39 + 8 * v43);
          if (v44)
          {
            unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            uint64_t v46 = v59[7];
            uint64_t result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              uint64_t v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == v42)
              {
                uint64_t v49 = v60[4];
                uint64_t result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  uint64_t v50 = *(void *)(v49 + 8 * v43);
                  if (v50)
                  {
                    unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    uint64_t v53 = v60[7];
                    uint64_t v52 = v60[8];
                    uint64_t result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      uint64_t v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == v42) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v61 = v41;
        BOOL v22 = v41++ == v11;
        if (v22) {
          goto LABEL_9;
        }
      }
      uint64_t v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11) {
      goto LABEL_56;
    }
  }
  uint64_t v33 = v6[11];
  uint64_t v34 = v6[10] + 8 * v28;
  uint64_t v35 = *(void *)(a2 + 24);
  if (v35) {
    goto LABEL_29;
  }
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  uint64_t result = (*v10)();
  uint64_t v12 = (void *)result;
LABEL_56:
  void *v12 = 0xFFFFFFFF00000000;
  return result;
}

void ecs2::Query<md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle &>>::~Model()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateShadowConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateShadowConstants>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51AD80;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateShadowConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateShadowConstants>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateDepthPrePassConstants>(md::ita::UpdateDepthPrePassConstants &&)::{lambda(void)#2},std::allocator<md::ita::UpdateDepthPrePassConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateDepthPrePassConstants>(md::ita::UpdateDepthPrePassConstants &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A3E0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateDepthPrePassConstants>(md::ita::UpdateDepthPrePassConstants &&)::{lambda(void)#2},std::allocator<md::ita::UpdateDepthPrePassConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateDepthPrePassConstants>(md::ita::UpdateDepthPrePassConstants &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateDepthPrePassConstants>(md::ita::UpdateDepthPrePassConstants &&)::{lambda(void)#1},std::allocator<md::ita::UpdateDepthPrePassConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateDepthPrePassConstants>(md::ita::UpdateDepthPrePassConstants &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A428;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateDepthPrePassConstants>(md::ita::UpdateDepthPrePassConstants &&)::{lambda(void)#1},std::allocator<md::ita::UpdateDepthPrePassConstants &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateDepthPrePassConstants>(md::ita::UpdateDepthPrePassConstants &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::SharedTileMatrix const&,md::ls::PrepassConstantDataHandle &>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::SharedTileMatrix>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::PrepassConstantDataHandle>(v1);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v3;
  }
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < *(void *)(v5 + 64) - *(void *)(v5 + 56)) {
    uint64_t v5 = v4;
  }
  v11[0] = v5 + 32;
  v11[1] = v2;
  v11[2] = v3;
  v11[3] = v4;
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    uint64_t v8 = v7 + 8;
    do
    {
      uint64_t v7 = v8;
      uint64_t v12 = v8;
      if (v8 == v6) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      uint64_t v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

BOOL gdc::ComponentStorageWrapper<md::ls::SharedTileMatrix>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::SharedTileMatrix>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  unint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    unint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SharedTileMatrix>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::SharedTileMatrix>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::SharedRenderableDataHandle const&,md::ls::InView const&,md::ls::PrepassShadowConstantDataHandle &>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::SharedRenderableDataHandle>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::InView>(v1);
  uint64_t v5 = gdc::Registry::storage<md::ls::PrepassShadowConstantDataHandle>(v1);
  v8[0] = v2;
  v8[1] = v3;
  uint64_t v8[2] = v4;
  v8[3] = v5;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v9, v8);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v6 = v2;
  }
  else {
    uint64_t v6 = v3;
  }
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v6 = v4;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v6 = v5;
  }
  return *(void *)(v6 + 64) == v9[6];
}

BOOL gdc::ComponentStorageWrapper<md::ls::SharedRenderableDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::SharedRenderableDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  unint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    unint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SharedRenderableDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::SharedRenderableDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateDepthPrePassConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateDepthPrePassConstants>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51BC20;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateDepthPrePassConstants>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateDepthPrePassConstants>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialEmissiveTexture>(md::ita::ResolveMaterialEmissiveTexture &&)::{lambda(void)#2},std::allocator<md::ita::ResolveMaterialEmissiveTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialEmissiveTexture>(md::ita::ResolveMaterialEmissiveTexture &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B4C0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialEmissiveTexture>(md::ita::ResolveMaterialEmissiveTexture &&)::{lambda(void)#2},std::allocator<md::ita::ResolveMaterialEmissiveTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialEmissiveTexture>(md::ita::ResolveMaterialEmissiveTexture &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialEmissiveTexture>(md::ita::ResolveMaterialEmissiveTexture &&)::{lambda(void)#1},std::allocator<md::ita::ResolveMaterialEmissiveTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialEmissiveTexture>(md::ita::ResolveMaterialEmissiveTexture &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B508;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialEmissiveTexture>(md::ita::ResolveMaterialEmissiveTexture &&)::{lambda(void)#1},std::allocator<md::ita::ResolveMaterialEmissiveTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialEmissiveTexture>(md::ita::ResolveMaterialEmissiveTexture &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::SharedMaterialEmissiveTexture &,md::ls::TextureHandleForType<DaVinci::EmissiveTexture> &>::Model<ecs2::RuntimeQuery<md::ls::SharedMaterialEmissiveTexture &,md::ls::TextureHandleForType<DaVinci::EmissiveTexture> &>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::SharedMaterialEmissiveTexture>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7]) {
    uint64_t v6 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(void *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7]) {
    uint64_t v7 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v7 = (uint64_t)v5;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

uint64_t gdc::Registry::storage<md::ls::SharedMaterialEmissiveTexture>(int8x8_t *a1)
{
  uint64_t v10 = 0x553C3DE8C694F909;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x553C3DE8C694F909;
    if (*(void *)&v1 <= 0x553C3DE8C694F909uLL) {
      uint64_t v3 = 0x553C3DE8C694F909uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x553C3DE8C694F909;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x553C3DE8C694F909)
      {
        if (v5[2] == 0x553C3DE8C694F909) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x553C3DE8C694F909) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x553C3DE8C694F909) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A203B87C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SharedMaterialEmissiveTexture>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::SharedMaterialEmissiveTexture>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  unint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    unint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SharedMaterialEmissiveTexture>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::SharedMaterialEmissiveTexture>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t ecs2::Query<md::ls::SharedMaterialEmissiveTexture &,md::ls::TextureHandleForType<DaVinci::EmissiveTexture> &>::Model<ecs2::RuntimeQuery<md::ls::SharedMaterialEmissiveTexture &,md::ls::TextureHandleForType<DaVinci::EmissiveTexture> &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::SharedMaterialEmissiveTexture>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>(v3);
  uint64_t v6 = v5;
  unint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(void *)(v9 + 32));
  unint64_t v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61) {
    goto LABEL_55;
  }
  uint64_t v12 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    void *v12 = *v11;
    unint64_t v13 = *v11;
    unint64_t v14 = HIDWORD(*v11);
    unint64_t v15 = v13 >> 39;
    uint64_t v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3) {
      goto LABEL_17;
    }
    uint64_t v17 = *(void *)(v16 + 8 * v15);
    if (!v17) {
      goto LABEL_17;
    }
    unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    uint64_t v20 = v4[7];
    uint64_t v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3) {
      goto LABEL_17;
    }
    uint64_t v21 = v20 + 8 * v18;
    BOOL v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == v14;
    if (v22)
    {
      uint64_t v23 = v4[11];
      uint64_t v24 = v4[10] + 8 * v18;
    }
    else
    {
LABEL_17:
      uint64_t v23 = v4[11];
      uint64_t v24 = v23;
    }
    uint64_t v25 = v24 == v23 ? 0 : v24;
    uint64_t v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      uint64_t v27 = *(void *)(v26 + 8 * v15);
      if (v27)
      {
        unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        uint64_t v30 = v6[7];
        uint64_t v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          uint64_t v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == v14) {
            break;
          }
        }
      }
    }
    uint64_t v33 = v6[11];
    uint64_t v34 = v33;
    uint64_t v35 = *(void *)(a2 + 24);
    if (!v35) {
      goto LABEL_54;
    }
LABEL_29:
    if (v34 == v33) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = v34;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v35 + 48))(v35, v25, v36);
    uint64_t v38 = v61;
    uint64_t v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      uint64_t v39 = v59[4];
      unint64_t v40 = (v59[5] - v39) >> 3;
      uint64_t v41 = v38 + 2;
      while (1)
      {
        unint64_t v42 = *((unsigned int *)v41 - 1);
        unint64_t v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          uint64_t v44 = *(void *)(v39 + 8 * v43);
          if (v44)
          {
            unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            uint64_t v46 = v59[7];
            uint64_t result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              uint64_t v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == v42)
              {
                uint64_t v49 = v60[4];
                uint64_t result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  uint64_t v50 = *(void *)(v49 + 8 * v43);
                  if (v50)
                  {
                    unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    uint64_t v53 = v60[7];
                    uint64_t v52 = v60[8];
                    uint64_t result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      uint64_t v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == v42) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v61 = v41;
        BOOL v22 = v41++ == v11;
        if (v22) {
          goto LABEL_9;
        }
      }
      uint64_t v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11) {
      goto LABEL_56;
    }
  }
  uint64_t v33 = v6[11];
  uint64_t v34 = v6[10] + 8 * v28;
  uint64_t v35 = *(void *)(a2 + 24);
  if (v35) {
    goto LABEL_29;
  }
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  uint64_t result = (*v10)();
  uint64_t v12 = (void *)result;
LABEL_56:
  void *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialEmissiveTexture &>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialEmissiveTexture &>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::UniqueMaterialData>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::UniqueMaterialEmissiveTexture>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7]) {
    uint64_t v6 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(void *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7]) {
    uint64_t v7 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v7 = (uint64_t)v5;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

BOOL gdc::ComponentStorageWrapper<md::ls::UniqueMaterialEmissiveTexture>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::UniqueMaterialEmissiveTexture>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  unint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    unint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UniqueMaterialEmissiveTexture>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::UniqueMaterialEmissiveTexture>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UniqueMaterialData>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::UniqueMaterialData>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10] + 24 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  uint64_t v16 = *(void *)(v15 - 8);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)(v15 - 24);
  *(void *)(v14 + 16) = v16;
  a1[11] -= 24;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UniqueMaterialData>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::UniqueMaterialData>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::ResolveMaterialEmissiveTexture>,std::allocator<ecs2::ForwardToExecute<md::ita::ResolveMaterialEmissiveTexture>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C490;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ResolveMaterialEmissiveTexture>,std::allocator<ecs2::ForwardToExecute<md::ita::ResolveMaterialEmissiveTexture>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialDiffuseTexture>(md::ita::ResolveMaterialDiffuseTexture &&)::{lambda(void)#2},std::allocator<md::ita::ResolveMaterialDiffuseTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialDiffuseTexture>(md::ita::ResolveMaterialDiffuseTexture &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B0D0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialDiffuseTexture>(md::ita::ResolveMaterialDiffuseTexture &&)::{lambda(void)#2},std::allocator<md::ita::ResolveMaterialDiffuseTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialDiffuseTexture>(md::ita::ResolveMaterialDiffuseTexture &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialDiffuseTexture>(md::ita::ResolveMaterialDiffuseTexture &&)::{lambda(void)#1},std::allocator<md::ita::ResolveMaterialDiffuseTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialDiffuseTexture>(md::ita::ResolveMaterialDiffuseTexture &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B118;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialDiffuseTexture>(md::ita::ResolveMaterialDiffuseTexture &&)::{lambda(void)#1},std::allocator<md::ita::ResolveMaterialDiffuseTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialDiffuseTexture>(md::ita::ResolveMaterialDiffuseTexture &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::SharedMaterialDiffuseTexture &,md::ls::TextureHandleForType<DaVinci::DiffuseTexture> &>::Model<ecs2::RuntimeQuery<md::ls::SharedMaterialDiffuseTexture &,md::ls::TextureHandleForType<DaVinci::DiffuseTexture> &>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::SharedMaterialDiffuseTexture>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7]) {
    uint64_t v6 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(void *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7]) {
    uint64_t v7 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v7 = (uint64_t)v5;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

uint64_t gdc::Registry::storage<md::ls::SharedMaterialDiffuseTexture>(int8x8_t *a1)
{
  unint64_t v10 = 0x9ADEB1E4572AC694;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x9ADEB1E4572AC694;
    if (*(void *)&v1 <= 0x9ADEB1E4572AC694) {
      unint64_t v3 = 0x9ADEB1E4572AC694 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x9ADEB1E4572AC694;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x9ADEB1E4572AC694)
      {
        if (v5[2] == 0x9ADEB1E4572AC694) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x9ADEB1E4572AC694) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x9ADEB1E4572AC694) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A203C550(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SharedMaterialDiffuseTexture>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::SharedMaterialDiffuseTexture>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SharedMaterialDiffuseTexture>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::SharedMaterialDiffuseTexture>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t ecs2::Query<md::ls::SharedMaterialDiffuseTexture &,md::ls::TextureHandleForType<DaVinci::DiffuseTexture> &>::Model<ecs2::RuntimeQuery<md::ls::SharedMaterialDiffuseTexture &,md::ls::TextureHandleForType<DaVinci::DiffuseTexture> &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::SharedMaterialDiffuseTexture>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>(v3);
  uint64_t v6 = v5;
  unint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(void *)(v9 + 32));
  unint64_t v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61) {
    goto LABEL_55;
  }
  uint64_t v12 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    void *v12 = *v11;
    unint64_t v13 = *v11;
    unint64_t v14 = HIDWORD(*v11);
    unint64_t v15 = v13 >> 39;
    uint64_t v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3) {
      goto LABEL_17;
    }
    uint64_t v17 = *(void *)(v16 + 8 * v15);
    if (!v17) {
      goto LABEL_17;
    }
    unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    uint64_t v20 = v4[7];
    uint64_t v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3) {
      goto LABEL_17;
    }
    uint64_t v21 = v20 + 8 * v18;
    BOOL v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == v14;
    if (v22)
    {
      uint64_t v23 = v4[11];
      uint64_t v24 = v4[10] + 8 * v18;
    }
    else
    {
LABEL_17:
      uint64_t v23 = v4[11];
      uint64_t v24 = v23;
    }
    uint64_t v25 = v24 == v23 ? 0 : v24;
    uint64_t v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      uint64_t v27 = *(void *)(v26 + 8 * v15);
      if (v27)
      {
        unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        uint64_t v30 = v6[7];
        uint64_t v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          uint64_t v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == v14) {
            break;
          }
        }
      }
    }
    uint64_t v33 = v6[11];
    uint64_t v34 = v33;
    uint64_t v35 = *(void *)(a2 + 24);
    if (!v35) {
      goto LABEL_54;
    }
LABEL_29:
    if (v34 == v33) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = v34;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v35 + 48))(v35, v25, v36);
    uint64_t v38 = v61;
    uint64_t v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      uint64_t v39 = v59[4];
      unint64_t v40 = (v59[5] - v39) >> 3;
      uint64_t v41 = v38 + 2;
      while (1)
      {
        unint64_t v42 = *((unsigned int *)v41 - 1);
        unint64_t v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          uint64_t v44 = *(void *)(v39 + 8 * v43);
          if (v44)
          {
            unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            uint64_t v46 = v59[7];
            uint64_t result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              uint64_t v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == v42)
              {
                uint64_t v49 = v60[4];
                uint64_t result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  uint64_t v50 = *(void *)(v49 + 8 * v43);
                  if (v50)
                  {
                    unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    uint64_t v53 = v60[7];
                    uint64_t v52 = v60[8];
                    uint64_t result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      uint64_t v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == v42) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v61 = v41;
        BOOL v22 = v41++ == v11;
        if (v22) {
          goto LABEL_9;
        }
      }
      uint64_t v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11) {
      goto LABEL_56;
    }
  }
  uint64_t v33 = v6[11];
  uint64_t v34 = v6[10] + 8 * v28;
  uint64_t v35 = *(void *)(a2 + 24);
  if (v35) {
    goto LABEL_29;
  }
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  uint64_t result = (*v10)();
  uint64_t v12 = (void *)result;
LABEL_56:
  void *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialDiffuseTexture &>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialDiffuseTexture &>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::UniqueMaterialData>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::UniqueMaterialDiffuseTexture>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7]) {
    uint64_t v6 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(void *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7]) {
    uint64_t v7 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v7 = (uint64_t)v5;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

BOOL gdc::ComponentStorageWrapper<md::ls::UniqueMaterialDiffuseTexture>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::UniqueMaterialDiffuseTexture>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  unint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    unint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UniqueMaterialDiffuseTexture>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::UniqueMaterialDiffuseTexture>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::ResolveMaterialDiffuseTexture>,std::allocator<ecs2::ForwardToExecute<md::ita::ResolveMaterialDiffuseTexture>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C298;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ResolveMaterialDiffuseTexture>,std::allocator<ecs2::ForwardToExecute<md::ita::ResolveMaterialDiffuseTexture>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialAlbedoTexture>(md::ita::ResolveMaterialAlbedoTexture &&)::{lambda(void)#2},std::allocator<md::ita::ResolveMaterialAlbedoTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialAlbedoTexture>(md::ita::ResolveMaterialAlbedoTexture &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A980;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialAlbedoTexture>(md::ita::ResolveMaterialAlbedoTexture &&)::{lambda(void)#2},std::allocator<md::ita::ResolveMaterialAlbedoTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialAlbedoTexture>(md::ita::ResolveMaterialAlbedoTexture &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialAlbedoTexture>(md::ita::ResolveMaterialAlbedoTexture &&)::{lambda(void)#1},std::allocator<md::ita::ResolveMaterialAlbedoTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialAlbedoTexture>(md::ita::ResolveMaterialAlbedoTexture &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A9C8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialAlbedoTexture>(md::ita::ResolveMaterialAlbedoTexture &&)::{lambda(void)#1},std::allocator<md::ita::ResolveMaterialAlbedoTexture &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ResolveMaterialAlbedoTexture>(md::ita::ResolveMaterialAlbedoTexture &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::SharedMaterialAlbedoTexture &,md::ls::TextureHandleForType<DaVinci::TexTexture> &>::Model<ecs2::RuntimeQuery<md::ls::SharedMaterialAlbedoTexture &,md::ls::TextureHandleForType<DaVinci::TexTexture> &>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::SharedMaterialAlbedoTexture>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::TexTexture>>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7]) {
    uint64_t v6 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(void *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7]) {
    uint64_t v7 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v7 = (uint64_t)v5;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

BOOL gdc::ComponentStorageWrapper<md::ls::SharedMaterialAlbedoTexture>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::SharedMaterialAlbedoTexture>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  unint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    unint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SharedMaterialAlbedoTexture>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::SharedMaterialAlbedoTexture>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t ecs2::Query<md::ls::SharedMaterialAlbedoTexture &,md::ls::TextureHandleForType<DaVinci::TexTexture> &>::Model<ecs2::RuntimeQuery<md::ls::SharedMaterialAlbedoTexture &,md::ls::TextureHandleForType<DaVinci::TexTexture> &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::SharedMaterialAlbedoTexture>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::TexTexture>>(v3);
  uint64_t v6 = v5;
  unint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(void *)(v9 + 32));
  unint64_t v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61) {
    goto LABEL_55;
  }
  uint64_t v12 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    void *v12 = *v11;
    unint64_t v13 = *v11;
    unint64_t v14 = HIDWORD(*v11);
    unint64_t v15 = v13 >> 39;
    uint64_t v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3) {
      goto LABEL_17;
    }
    uint64_t v17 = *(void *)(v16 + 8 * v15);
    if (!v17) {
      goto LABEL_17;
    }
    unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    uint64_t v20 = v4[7];
    uint64_t v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3) {
      goto LABEL_17;
    }
    uint64_t v21 = v20 + 8 * v18;
    BOOL v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == v14;
    if (v22)
    {
      uint64_t v23 = v4[11];
      uint64_t v24 = v4[10] + 8 * v18;
    }
    else
    {
LABEL_17:
      uint64_t v23 = v4[11];
      uint64_t v24 = v23;
    }
    uint64_t v25 = v24 == v23 ? 0 : v24;
    uint64_t v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      uint64_t v27 = *(void *)(v26 + 8 * v15);
      if (v27)
      {
        unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        uint64_t v30 = v6[7];
        uint64_t v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          uint64_t v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == v14) {
            break;
          }
        }
      }
    }
    uint64_t v33 = v6[11];
    uint64_t v34 = v33;
    uint64_t v35 = *(void *)(a2 + 24);
    if (!v35) {
      goto LABEL_54;
    }
LABEL_29:
    if (v34 == v33) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = v34;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v35 + 48))(v35, v25, v36);
    uint64_t v38 = v61;
    uint64_t v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      uint64_t v39 = v59[4];
      unint64_t v40 = (v59[5] - v39) >> 3;
      uint64_t v41 = v38 + 2;
      while (1)
      {
        unint64_t v42 = *((unsigned int *)v41 - 1);
        unint64_t v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          uint64_t v44 = *(void *)(v39 + 8 * v43);
          if (v44)
          {
            unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            uint64_t v46 = v59[7];
            uint64_t result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              uint64_t v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == v42)
              {
                uint64_t v49 = v60[4];
                uint64_t result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  uint64_t v50 = *(void *)(v49 + 8 * v43);
                  if (v50)
                  {
                    unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    uint64_t v53 = v60[7];
                    uint64_t v52 = v60[8];
                    uint64_t result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      uint64_t v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == v42) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v61 = v41;
        BOOL v22 = v41++ == v11;
        if (v22) {
          goto LABEL_9;
        }
      }
      uint64_t v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11) {
      goto LABEL_56;
    }
  }
  uint64_t v33 = v6[11];
  uint64_t v34 = v6[10] + 8 * v28;
  uint64_t v35 = *(void *)(a2 + 24);
  if (v35) {
    goto LABEL_29;
  }
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  uint64_t result = (*v10)();
  uint64_t v12 = (void *)result;
LABEL_56:
  void *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::RenderableAlbedoTexture const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::RenderableAlbedoTexture>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7]) {
    uint64_t v6 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(void *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7]) {
    uint64_t v7 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v7 = (uint64_t)v5;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderableAlbedoTexture>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RenderableAlbedoTexture>::remove(void *a1, unint64_t a2)
{
  unint64_t v25 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  unint64_t v15 = (void *)(v14 + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v16 = a1[11];
  uint64_t v18 = *(void *)(v16 - 24);
  uint64_t v17 = *(void *)(v16 - 16);
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = (std::__shared_weak_count *)v15[1];
  void *v15 = v18;
  v15[1] = v17;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  *(void *)(v14 + 24 * v7 + 16) = *(void *)(v16 - 8);
  uint64_t v20 = a1[11];
  uint64_t v21 = *(std::__shared_weak_count **)(v20 - 16);
  if (v21)
  {
    if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  a1[11] = v20 - 24;
  BOOL v22 = (void *)a1[28];
  if (!v22) {
    return 1;
  }
  uint64_t v23 = a1[31];
  while (1)
  {
    v27[0] = &v25;
    v27[1] = 1;
    uint64_t v26 = v23;
    uint64_t v24 = v22[6];
    if (!v24) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v24 + 48))(v24, &v26, v27);
    BOOL v22 = (void *)*v22;
    if (!v22) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RenderableAlbedoTexture>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RenderableAlbedoTexture>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,md::components::CustomRenderState>::~sparse_map((void *)(a1 + 32));
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RenderableAlbedoTexture>::~ComponentStorageWrapper(uint64_t a1)
{
  return a1;
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::SharedMaterialAlbedoTexture const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::SharedMaterialAlbedoTexture>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7]) {
    uint64_t v6 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(void *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7]) {
    uint64_t v7 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v7 = (uint64_t)v5;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

BOOL ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture &>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::UniqueMaterialData>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::UniqueMaterialAlbedoTexture>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7]) {
    uint64_t v6 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(void *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7]) {
    uint64_t v7 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v7 = (uint64_t)v5;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

BOOL gdc::ComponentStorageWrapper<md::ls::UniqueMaterialAlbedoTexture>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::UniqueMaterialAlbedoTexture>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  unint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    unint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UniqueMaterialAlbedoTexture>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::UniqueMaterialAlbedoTexture>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::ResolveMaterialAlbedoTexture>,std::allocator<ecs2::ForwardToExecute<md::ita::ResolveMaterialAlbedoTexture>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51BEF0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ResolveMaterialAlbedoTexture>,std::allocator<ecs2::ForwardToExecute<md::ita::ResolveMaterialAlbedoTexture>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyPositionScaleInfo>(md::ita::ApplyPositionScaleInfo &&)::{lambda(void)#2},std::allocator<md::ita::ApplyPositionScaleInfo &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyPositionScaleInfo>(md::ita::ApplyPositionScaleInfo &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF5287C0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyPositionScaleInfo>(md::ita::ApplyPositionScaleInfo &&)::{lambda(void)#2},std::allocator<md::ita::ApplyPositionScaleInfo &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyPositionScaleInfo>(md::ita::ApplyPositionScaleInfo &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyPositionScaleInfo>(md::ita::ApplyPositionScaleInfo &&)::{lambda(void)#1},std::allocator<md::ita::ApplyPositionScaleInfo &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyPositionScaleInfo>(md::ita::ApplyPositionScaleInfo &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF528808;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyPositionScaleInfo>(md::ita::ApplyPositionScaleInfo &&)::{lambda(void)#1},std::allocator<md::ita::ApplyPositionScaleInfo &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyPositionScaleInfo>(md::ita::ApplyPositionScaleInfo &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::MeshRenderablePositionScaleInfo>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::MeshRenderablePositionScaleInfo>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MeshRenderablePositionScaleInfo>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::MeshRenderablePositionScaleInfo>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderablePendingProcessing>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RenderablePendingProcessing>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RenderablePendingProcessing>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RenderablePendingProcessing>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyPositionScaleInfo>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyPositionScaleInfo>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51AE10;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyPositionScaleInfo>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyPositionScaleInfo>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectColorData>(md::ita::CollectColorData &&)::{lambda(void)#2},std::allocator<md::ita::CollectColorData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectColorData>(md::ita::CollectColorData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF527260;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectColorData>(md::ita::CollectColorData &&)::{lambda(void)#2},std::allocator<md::ita::CollectColorData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectColorData>(md::ita::CollectColorData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectColorData>(md::ita::CollectColorData &&)::{lambda(void)#1},std::allocator<md::ita::CollectColorData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectColorData>(md::ita::CollectColorData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF5272A8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectColorData>(md::ita::CollectColorData &&)::{lambda(void)#1},std::allocator<md::ita::CollectColorData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectColorData>(md::ita::CollectColorData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectColorData>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectColorData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51A360;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectColorData>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectColorData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectParameters>(md::ita::CollectParameters &&)::{lambda(void)#2},std::allocator<md::ita::CollectParameters &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectParameters>(md::ita::CollectParameters &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF5274A0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectParameters>(md::ita::CollectParameters &&)::{lambda(void)#2},std::allocator<md::ita::CollectParameters &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectParameters>(md::ita::CollectParameters &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectParameters>(md::ita::CollectParameters &&)::{lambda(void)#1},std::allocator<md::ita::CollectParameters &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectParameters>(md::ita::CollectParameters &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF5274E8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectParameters>(md::ita::CollectParameters &&)::{lambda(void)#1},std::allocator<md::ita::CollectParameters &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectParameters>(md::ita::CollectParameters &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&>::Model<ecs2::RuntimeQuery<md::ls::InView const&,md::ls::MeshRenderableID const&,md::ls::RenderableMaterialData const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::InView>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::RenderableMaterialData>(v1);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v3;
  }
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < *(void *)(v5 + 64) - *(void *)(v5 + 56)) {
    uint64_t v5 = v4;
  }
  v11[0] = v5 + 32;
  v11[1] = v2;
  v11[2] = v3;
  v11[3] = v4;
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    uint64_t v8 = v7 + 8;
    do
    {
      uint64_t v7 = v8;
      uint64_t v12 = v8;
      if (v8 == v6) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      uint64_t v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectParameters>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectParameters>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51A480;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectParameters>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectParameters>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyUsesIdentityMatrix>(md::ita::ApplyUsesIdentityMatrix &&)::{lambda(void)#2},std::allocator<md::ita::ApplyUsesIdentityMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyUsesIdentityMatrix>(md::ita::ApplyUsesIdentityMatrix &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF528BB0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyUsesIdentityMatrix>(md::ita::ApplyUsesIdentityMatrix &&)::{lambda(void)#2},std::allocator<md::ita::ApplyUsesIdentityMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyUsesIdentityMatrix>(md::ita::ApplyUsesIdentityMatrix &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyUsesIdentityMatrix>(md::ita::ApplyUsesIdentityMatrix &&)::{lambda(void)#1},std::allocator<md::ita::ApplyUsesIdentityMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyUsesIdentityMatrix>(md::ita::ApplyUsesIdentityMatrix &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF528BF8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyUsesIdentityMatrix>(md::ita::ApplyUsesIdentityMatrix &&)::{lambda(void)#1},std::allocator<md::ita::ApplyUsesIdentityMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyUsesIdentityMatrix>(md::ita::ApplyUsesIdentityMatrix &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::InstanceDataV>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::InstanceDataV>::remove(void *a1, unint64_t a2)
{
  unint64_t v24 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = (void *)(a1[10] + 16 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  uint64_t v17 = *(void *)(v15 - 16);
  uint64_t v16 = *(void *)(v15 - 8);
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = (std::__shared_weak_count *)v14[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = a1[11];
  uint64_t v20 = *(std::__shared_weak_count **)(v19 - 8);
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  a1[11] = v19 - 16;
  uint64_t v21 = (void *)a1[28];
  if (!v21) {
    return 1;
  }
  uint64_t v22 = a1[31];
  while (1)
  {
    v26[0] = &v24;
    v26[1] = 1;
    uint64_t v25 = v22;
    uint64_t v23 = v21[6];
    if (!v23) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v23 + 48))(v23, &v25, v26);
    uint64_t v21 = (void *)*v21;
    if (!v21) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::InstanceDataV>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::InstanceDataV>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,arComponents::MeshComponent>::~sparse_map((void *)(a1 + 32));
  JUMPOUT(0x1A6239270);
}

uint64_t gdc::ComponentStorageWrapper<md::ls::InstanceDataV>::~ComponentStorageWrapper(uint64_t a1)
{
  return a1;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyUsesIdentityMatrix>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyUsesIdentityMatrix>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B008;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyUsesIdentityMatrix>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyUsesIdentityMatrix>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForPlanarParameters>(md::ita::ProcessRenderableForPlanarParameters &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForPlanarParameters &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForPlanarParameters>(md::ita::ProcessRenderableForPlanarParameters &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C870;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForPlanarParameters>(md::ita::ProcessRenderableForPlanarParameters &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForPlanarParameters &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForPlanarParameters>(md::ita::ProcessRenderableForPlanarParameters &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForPlanarParameters>(md::ita::ProcessRenderableForPlanarParameters &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForPlanarParameters &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForPlanarParameters>(md::ita::ProcessRenderableForPlanarParameters &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C8B8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForPlanarParameters>(md::ita::ProcessRenderableForPlanarParameters &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForPlanarParameters &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForPlanarParameters>(md::ita::ProcessRenderableForPlanarParameters &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::UniqueMaterialData>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::UniqueMaterialAlbedoTexture>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::UnitsPerMeter>(v1);
  uint64_t CanUpdateWithStyle = gdc::Registry::storage<md::ls::CanUpdateWithStyleZChange>(v1);
  v8[0] = v2;
  v8[1] = v3;
  uint64_t v8[2] = v4;
  v8[3] = CanUpdateWithStyle;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v9, v8);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v6 = v2;
  }
  else {
    uint64_t v6 = v3;
  }
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v6 = v4;
  }
  if (*(void *)(CanUpdateWithStyle + 64) - *(void *)(CanUpdateWithStyle + 56) < *(void *)(v6 + 64)
                                                                                   - *(void *)(v6 + 56))
    uint64_t v6 = CanUpdateWithStyle;
  return *(void *)(v6 + 64) == v9[6];
}

BOOL gdc::ComponentStorageWrapper<md::ls::CanUpdateWithStyleZChange>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::CanUpdateWithStyleZChange>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::CanUpdateWithStyleZChange>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::CanUpdateWithStyleZChange>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UnitsPerMeter>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::UnitsPerMeter>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = (_DWORD *)(a1[10] + 12 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  int v16 = *(_DWORD *)(v15 - 12);
  v15 -= 12;
  *uint64_t v14 = v16;
  v14[1] = *(_DWORD *)(v15 + 4);
  v14[2] = *(_DWORD *)(v15 + 8);
  a1[11] = v15;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UnitsPerMeter>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::UnitsPerMeter>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForPlanarParameters>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForPlanarParameters>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51CE68;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForPlanarParameters>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForPlanarParameters>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleGroundOcclusion>(md::ita::ProcessRenderableForStyleGroundOcclusion &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForStyleGroundOcclusion &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleGroundOcclusion>(md::ita::ProcessRenderableForStyleGroundOcclusion &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D0E0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleGroundOcclusion>(md::ita::ProcessRenderableForStyleGroundOcclusion &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForStyleGroundOcclusion &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleGroundOcclusion>(md::ita::ProcessRenderableForStyleGroundOcclusion &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleGroundOcclusion>(md::ita::ProcessRenderableForStyleGroundOcclusion &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForStyleGroundOcclusion &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleGroundOcclusion>(md::ita::ProcessRenderableForStyleGroundOcclusion &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D128;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleGroundOcclusion>(md::ita::ProcessRenderableForStyleGroundOcclusion &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForStyleGroundOcclusion &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForStyleGroundOcclusion>(md::ita::ProcessRenderableForStyleGroundOcclusion &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::UnitsPerMeter>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::InView>(v1);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v3;
  }
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < *(void *)(v5 + 64) - *(void *)(v5 + 56)) {
    uint64_t v5 = v4;
  }
  v11[0] = v5 + 32;
  v11[1] = v2;
  v11[2] = v3;
  v11[3] = v4;
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    uint64_t v8 = v7 + 8;
    do
    {
      uint64_t v7 = v8;
      uint64_t v12 = v8;
      if (v8 == v6) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      uint64_t v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

uint64_t ecs2::Query<md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::MeshRenderableID>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::UnitsPerMeter>(v3);
  uint64_t v6 = gdc::Registry::storage<md::ls::InView>(v3);
  unint64_t v10 = (void *)v6;
  uint64_t v11 = v4 + 4;
  if (v5[8] - v5[7] < v4[8] - v4[7]) {
    uint64_t v11 = v5 + 4;
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) >= v11[4] - v11[3]) {
    uint64_t v12 = (uint64_t)v11;
  }
  else {
    uint64_t v12 = v6 + 32;
  }
  v82[0] = v12;
  v82[1] = v4;
  v82[2] = v5;
  v82[3] = v6;
  uint64_t v14 = *(void **)(v12 + 24);
  unint64_t v13 = *(void **)(v12 + 32);
  unint64_t v83 = v14;
  if (v13 != v14
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82))
  {
    uint64_t v15 = v14 + 1;
    do
    {
      uint64_t v14 = v15;
      unint64_t v83 = v15;
      if (v15 == v13) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v82);
      uint64_t v15 = v14 + 1;
    }
    while (!isValid);
  }
  uint64_t v17 = &ecs2::Runtime::_localEntity;
  uint64_t v18 = ecs2::Runtime::_localEntity;
  if (v13 == v14) {
    goto LABEL_82;
  }
  uint64_t v19 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    *uint64_t v19 = *v14;
    unint64_t v21 = *v14;
    uint64_t v22 = HIDWORD(*v14);
    unint64_t v23 = *v14 >> 39;
    uint64_t v24 = v4[4];
    if (v23 >= (v4[5] - v24) >> 3) {
      goto LABEL_23;
    }
    uint64_t v25 = *(void *)(v24 + 8 * v23);
    if (!v25) {
      goto LABEL_23;
    }
    unint64_t v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v21) & 0x7F));
    uint64_t v28 = v4[7];
    uint64_t v27 = v4[8];
    if (v26 >= (v27 - v28) >> 3) {
      goto LABEL_23;
    }
    uint64_t v29 = v28 + 8 * v26;
    if (v29 != v27 && *(_DWORD *)(v29 + 4) == v22)
    {
      uint64_t v31 = v4[11];
      uint64_t v32 = v4[10] + 8 * v26;
    }
    else
    {
LABEL_23:
      uint64_t v31 = v4[11];
      uint64_t v32 = v31;
    }
    uint64_t v33 = v32 == v31 ? 0 : v32;
    if ((uint64_t v34 = v5[4], v23 < (v5[5] - v34) >> 3)
      && (uint64_t v35 = *(void *)(v34 + 8 * v23)) != 0
      && (unint64_t v36 = *(unsigned __int16 *)(v35 + 2 * (HIDWORD(v21) & 0x7F)), v38 = v5[7], v37 = v5[8], v36 < (v37 - v38) >> 3)
      && ((v39 = v38 + 8 * v36, v39 != v37) ? (BOOL v40 = *(_DWORD *)(v39 + 4) == v22) : (BOOL v40 = 0), v40))
    {
      uint64_t v41 = v5[11];
      uint64_t v42 = v5[10] + 12 * v36;
    }
    else
    {
      uint64_t v41 = v5[11];
      uint64_t v42 = v41;
    }
    uint64_t v43 = v42 == v41 ? 0 : v42;
    uint64_t v44 = v10[4];
    if (v23 < (v10[5] - v44) >> 3)
    {
      uint64_t v45 = *(void *)(v44 + 8 * v23);
      if (v45)
      {
        unint64_t v46 = *(unsigned __int16 *)(v45 + 2 * (HIDWORD(v21) & 0x7F));
        uint64_t v48 = v10[7];
        uint64_t v47 = v10[8];
        if (v46 < (v47 - v48) >> 3)
        {
          uint64_t v49 = v48 + 8 * v46;
          if (v49 != v47 && *(_DWORD *)(v49 + 4) == v22) {
            break;
          }
        }
      }
    }
    uint64_t v51 = v10[11];
    uint64_t v52 = v51;
    uint64_t v53 = *(void *)(a2 + 24);
    if (!v53) {
      goto LABEL_81;
    }
LABEL_46:
    if (v52 == v51) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = v52;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v53 + 48))(v53, v33, v43, v54);
    uint64_t v56 = *(void **)(v12 + 32);
    unint64_t v20 = v14 + 1;
    unint64_t v83 = v14 + 1;
    if (v14 + 1 != v56)
    {
      uint64_t v57 = v4[4];
      uint64_t v59 = v4[7];
      uint64_t v58 = v4[8];
      uint64_t v60 = v5[4];
      uint64_t result = v5[7];
      uint64_t v61 = v5[8];
      uint64_t v62 = v10[4];
      uint64_t v64 = v10[7];
      uint64_t v63 = v10[8];
      while (1)
      {
        unint64_t v65 = *((unsigned int *)v20 + 1);
        unint64_t v66 = v65 >> 7;
        if (v65 >> 7 < (v4[5] - v57) >> 3)
        {
          uint64_t v67 = *(void *)(v57 + 8 * v66);
          if (v67)
          {
            uint64_t v68 = v65 & 0x7F;
            unint64_t v69 = *(unsigned __int16 *)(v67 + 2 * v68);
            if ((v58 - v59) >> 3 > v69)
            {
              uint64_t v70 = v59 + 8 * v69;
              BOOL v71 = v70 != v58 && *(_DWORD *)(v70 + 4) == v65;
              if (v71 && v66 < (v5[5] - v60) >> 3)
              {
                uint64_t v73 = *(void *)(v60 + 8 * v66);
                if (v73)
                {
                  unint64_t v74 = *(unsigned __int16 *)(v73 + 2 * v68);
                  if ((v61 - result) >> 3 > v74)
                  {
                    unint64_t v75 = result + 8 * v74;
                    BOOL v76 = v75 != v61 && *(_DWORD *)(v75 + 4) == v65;
                    if (v76 && v66 < (v10[5] - v62) >> 3)
                    {
                      uint64_t v78 = *(void *)(v62 + 8 * v66);
                      if (v78)
                      {
                        unint64_t v79 = *(unsigned __int16 *)(v78 + 2 * v68);
                        if ((v63 - v64) >> 3 > v79)
                        {
                          uint64_t v80 = v64 + 8 * v79;
                          if (*(_DWORD *)(v80 + 4) == v65 && v80 != v63) {
                            break;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (++v20 == v56)
        {
          unint64_t v20 = v56;
          goto LABEL_14;
        }
      }
      uint64_t v56 = v20;
LABEL_14:
      unint64_t v83 = v20;
    }
    uint64_t v14 = v56;
    if (v13 == v56) {
      goto LABEL_83;
    }
  }
  uint64_t v51 = v10[11];
  uint64_t v52 = v10[10] + 4 * v46;
  uint64_t v53 = *(void *)(a2 + 24);
  if (v53) {
    goto LABEL_46;
  }
LABEL_81:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_82:
  uint64_t result = ((uint64_t (*)(uint64_t (**)(void), uint64_t, uint64_t, uint64_t))v18)(v17, v7, v8, v9);
  uint64_t v19 = (void *)result;
LABEL_83:
  *uint64_t v19 = 0xFFFFFFFF00000000;
  return result;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleGroundOcclusion>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleGroundOcclusion>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D2A0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleGroundOcclusion>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForStyleGroundOcclusion>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForLandCover>(md::ita::ProcessRenderableForLandCover &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForLandCover &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForLandCover>(md::ita::ProcessRenderableForLandCover &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B040;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForLandCover>(md::ita::ProcessRenderableForLandCover &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForLandCover &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForLandCover>(md::ita::ProcessRenderableForLandCover &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForLandCover>(md::ita::ProcessRenderableForLandCover &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForLandCover &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForLandCover>(md::ita::ProcessRenderableForLandCover &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B088;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForLandCover>(md::ita::ProcessRenderableForLandCover &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForLandCover &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForLandCover>(md::ita::ProcessRenderableForLandCover &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForLandCover>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForLandCover>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C250;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForLandCover>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForLandCover>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverS2TransformConstantDataHandle>(md::ita::PrepareFlyoverS2TransformConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFlyoverS2TransformConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverS2TransformConstantDataHandle>(md::ita::PrepareFlyoverS2TransformConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D3B0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverS2TransformConstantDataHandle>(md::ita::PrepareFlyoverS2TransformConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFlyoverS2TransformConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverS2TransformConstantDataHandle>(md::ita::PrepareFlyoverS2TransformConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverS2TransformConstantDataHandle>(md::ita::PrepareFlyoverS2TransformConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFlyoverS2TransformConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverS2TransformConstantDataHandle>(md::ita::PrepareFlyoverS2TransformConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D3F8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverS2TransformConstantDataHandle>(md::ita::PrepareFlyoverS2TransformConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFlyoverS2TransformConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverS2TransformConstantDataHandle>(md::ita::PrepareFlyoverS2TransformConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::FlyoverCommonS2TransformHandle &,md::ls::BaseMapTileHandle const&>::Model<ecs2::RuntimeQuery<md::ls::FlyoverCommonS2TransformHandle &,md::ls::BaseMapTileHandle const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::BaseMapTileHandle>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::FlyoverCommonS2TransformHandle>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (v2[8] - v2[7] >= v3[8] - v3[7]) {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v2 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v3, v2, *(void *)(v6 + 24));
  if (v2[8] - v2[7] >= v4[8] - v4[7]) {
    uint64_t v7 = (uint64_t)v5;
  }
  else {
    uint64_t v7 = (uint64_t)(v2 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v4, v2, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFlyoverS2TransformConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFlyoverS2TransformConstantDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D408;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFlyoverS2TransformConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFlyoverS2TransformConstantDataHandle>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverTransformConstantDataHandle>(md::ita::PrepareFlyoverTransformConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFlyoverTransformConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverTransformConstantDataHandle>(md::ita::PrepareFlyoverTransformConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D200;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverTransformConstantDataHandle>(md::ita::PrepareFlyoverTransformConstantDataHandle &&)::{lambda(void)#2},std::allocator<md::ita::PrepareFlyoverTransformConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverTransformConstantDataHandle>(md::ita::PrepareFlyoverTransformConstantDataHandle &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverTransformConstantDataHandle>(md::ita::PrepareFlyoverTransformConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFlyoverTransformConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverTransformConstantDataHandle>(md::ita::PrepareFlyoverTransformConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52D248;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverTransformConstantDataHandle>(md::ita::PrepareFlyoverTransformConstantDataHandle &&)::{lambda(void)#1},std::allocator<md::ita::PrepareFlyoverTransformConstantDataHandle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareFlyoverTransformConstantDataHandle>(md::ita::PrepareFlyoverTransformConstantDataHandle &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::FlyoverCommonTransformConstantDataHandle &,md::ls::ModelTransformData const&,md::ls::GlobeMatrix const&>::Model<ecs2::RuntimeQuery<md::ls::FlyoverCommonTransformConstantDataHandle &,md::ls::ModelTransformData const&,md::ls::GlobeMatrix const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::ModelTransformData>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::GlobeMatrix>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::FlyoverCommonTransformConstantDataHandle>(v1);
  if (*(void *)(v2 + 64) - *(void *)(v2 + 56) >= *(void *)(v4 + 64) - *(void *)(v4 + 56)) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = v2;
  }
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) < *(void *)(v5 + 64) - *(void *)(v5 + 56)) {
    uint64_t v5 = v3;
  }
  v11[0] = v5 + 32;
  v11[1] = v4;
  v11[2] = v2;
  v11[3] = v3;
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    uint64_t v8 = v7 + 8;
    do
    {
      uint64_t v7 = v8;
      uint64_t v12 = v8;
      if (v8 == v6) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      uint64_t v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

BOOL gdc::ComponentStorageWrapper<md::ls::GlobeMatrix>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::GlobeMatrix>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::GlobeMatrix>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::GlobeMatrix>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ModelTransformData>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::ModelTransformData>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = (_DWORD *)(a1[10] + 48 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = (_DWORD *)a1[11];
  int v16 = *(v15 - 12);
  v15 -= 12;
  *uint64_t v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  v14[4] = v15[4];
  v14[5] = v15[5];
  v14[6] = v15[6];
  v14[7] = v15[7];
  v14[8] = v15[8];
  v14[9] = v15[9];
  v14[10] = v15[10];
  v14[11] = v15[11];
  a1[11] = v15;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::ModelTransformData>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::ModelTransformData>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFlyoverTransformConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFlyoverTransformConstantDataHandle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51D330;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareFlyoverTransformConstantDataHandle>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareFlyoverTransformConstantDataHandle>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForFlyoverClip>(md::ita::ProcessRenderableForFlyoverClip &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForFlyoverClip &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForFlyoverClip>(md::ita::ProcessRenderableForFlyoverClip &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B940;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForFlyoverClip>(md::ita::ProcessRenderableForFlyoverClip &&)::{lambda(void)#2},std::allocator<md::ita::ProcessRenderableForFlyoverClip &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForFlyoverClip>(md::ita::ProcessRenderableForFlyoverClip &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForFlyoverClip>(md::ita::ProcessRenderableForFlyoverClip &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForFlyoverClip &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForFlyoverClip>(md::ita::ProcessRenderableForFlyoverClip &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B988;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForFlyoverClip>(md::ita::ProcessRenderableForFlyoverClip &&)::{lambda(void)#1},std::allocator<md::ita::ProcessRenderableForFlyoverClip &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessRenderableForFlyoverClip>(md::ita::ProcessRenderableForFlyoverClip &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::FlyoverClipPlaneData>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::FlyoverClipPlaneData>::remove(void *a1, unint64_t a2)
{
  unint64_t v26 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  uint64_t v15 = v14 + 240 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v16 = a1[11];
  if (*(unsigned __int8 *)(v15 + 104) == *(unsigned __int8 *)(v16 - 136))
  {
    uint64_t v17 = a1[11];
    if (*(unsigned char *)(v15 + 104))
    {
      *(void *)(v15 + 24) = *(void *)(v16 - 216);
      *(void *)(v15 + 32) = *(void *)(v16 - 208);
      *(void *)(v15 + 40) = *(void *)(v16 - 200);
      *(void *)(v15 + 48) = *(void *)(v16 - 192);
      *(void *)uint64_t v15 = *(void *)(v16 - 240);
      *(void *)(v15 + 8) = *(void *)(v16 - 232);
      *(void *)(v15 + 16) = *(void *)(v16 - 224);
      *(void *)(v15 + 56) = *(void *)(v16 - 184);
      *(void *)(v15 + 64) = *(void *)(v16 - 176);
      *(void *)(v15 + 72) = *(void *)(v16 - 168);
      *(void *)(v15 + 80) = *(void *)(v16 - 160);
      *(void *)(v15 + 88) = *(void *)(v16 - 152);
      *(void *)(v15 + 96) = *(void *)(v16 - 144);
      uint64_t v17 = v16;
    }
  }
  else if (*(unsigned char *)(v15 + 104))
  {
    *(unsigned char *)(v15 + 104) = 0;
    uint64_t v17 = v16;
  }
  else
  {
    long long v18 = *(_OWORD *)(v16 - 240);
    *(void *)(v15 + 16) = *(void *)(v16 - 224);
    *(_OWORD *)uint64_t v15 = v18;
    long long v19 = *(_OWORD *)(v16 - 216);
    *(void *)(v15 + 40) = *(void *)(v16 - 200);
    *(_OWORD *)(v15 + 24) = v19;
    *(void *)(v15 + 48) = *(void *)(v16 - 192);
    long long v20 = *(_OWORD *)(v16 - 184);
    long long v21 = *(_OWORD *)(v16 - 168);
    *(_OWORD *)(v15 + 88) = *(_OWORD *)(v16 - 152);
    *(_OWORD *)(v15 + 72) = v21;
    *(_OWORD *)(v15 + 56) = v20;
    *(unsigned char *)(v15 + 104) = 1;
    uint64_t v17 = a1[11];
  }
  uint64_t v22 = (void *)(v14 + 240 * v7);
  v22[14] = *(void *)(v16 - 128);
  v22[15] = *(void *)(v16 - 120);
  v22[16] = *(void *)(v16 - 112);
  v22[17] = *(void *)(v16 - 104);
  v22[18] = *(void *)(v16 - 96);
  v22[19] = *(void *)(v16 - 88);
  v22[20] = *(void *)(v16 - 80);
  v22[21] = *(void *)(v16 - 72);
  v22[22] = *(void *)(v16 - 64);
  v22[23] = *(void *)(v16 - 56);
  v22[24] = *(void *)(v16 - 48);
  v22[25] = *(void *)(v16 - 40);
  v22[26] = *(void *)(v16 - 32);
  v22[27] = *(void *)(v16 - 24);
  v22[28] = *(void *)(v16 - 16);
  v22[29] = *(void *)(v16 - 8);
  a1[11] = v17 - 240;
  unint64_t v23 = (void *)a1[28];
  if (!v23) {
    return 1;
  }
  uint64_t v24 = a1[31];
  while (1)
  {
    v28[0] = &v26;
    v28[1] = 1;
    uint64_t v27 = v24;
    uint64_t v25 = v23[6];
    if (!v25) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v25 + 48))(v25, &v27, v28);
    unint64_t v23 = (void *)*v23;
    if (!v23) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FlyoverClipPlaneData>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::FlyoverClipPlaneData>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::BoundData>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::BoundData>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = (_DWORD *)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = (_DWORD *)a1[11];
  int v16 = *(v15 - 6);
  v15 -= 6;
  *uint64_t v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  v14[4] = v15[4];
  v14[5] = v15[5];
  a1[11] = v15;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::BoundData>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::BoundData>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForFlyoverClip>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForFlyoverClip>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C6D0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessRenderableForFlyoverClip>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessRenderableForFlyoverClip>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverSharedConstantData>(md::ita::UpdateFlyoverSharedConstantData &&)::{lambda(void)#2},std::allocator<md::ita::UpdateFlyoverSharedConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverSharedConstantData>(md::ita::UpdateFlyoverSharedConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B9D0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverSharedConstantData>(md::ita::UpdateFlyoverSharedConstantData &&)::{lambda(void)#2},std::allocator<md::ita::UpdateFlyoverSharedConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverSharedConstantData>(md::ita::UpdateFlyoverSharedConstantData &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverSharedConstantData>(md::ita::UpdateFlyoverSharedConstantData &&)::{lambda(void)#1},std::allocator<md::ita::UpdateFlyoverSharedConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverSharedConstantData>(md::ita::UpdateFlyoverSharedConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52BA18;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverSharedConstantData>(md::ita::UpdateFlyoverSharedConstantData &&)::{lambda(void)#1},std::allocator<md::ita::UpdateFlyoverSharedConstantData &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverSharedConstantData>(md::ita::UpdateFlyoverSharedConstantData &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateFlyoverSharedConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateFlyoverSharedConstantData>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C718;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateFlyoverSharedConstantData>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateFlyoverSharedConstantData>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverTileViewMatrix>(md::ita::UpdateFlyoverTileViewMatrix &&)::{lambda(void)#2},std::allocator<md::ita::UpdateFlyoverTileViewMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverTileViewMatrix>(md::ita::UpdateFlyoverTileViewMatrix &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A470;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverTileViewMatrix>(md::ita::UpdateFlyoverTileViewMatrix &&)::{lambda(void)#2},std::allocator<md::ita::UpdateFlyoverTileViewMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverTileViewMatrix>(md::ita::UpdateFlyoverTileViewMatrix &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverTileViewMatrix>(md::ita::UpdateFlyoverTileViewMatrix &&)::{lambda(void)#1},std::allocator<md::ita::UpdateFlyoverTileViewMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverTileViewMatrix>(md::ita::UpdateFlyoverTileViewMatrix &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A4B8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverTileViewMatrix>(md::ita::UpdateFlyoverTileViewMatrix &&)::{lambda(void)#1},std::allocator<md::ita::UpdateFlyoverTileViewMatrix &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateFlyoverTileViewMatrix>(md::ita::UpdateFlyoverTileViewMatrix &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::TileViewMatrix>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::TileViewMatrix>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::TileViewMatrix>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::TileViewMatrix>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateFlyoverTileViewMatrix>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateFlyoverTileViewMatrix>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51BC68;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateFlyoverTileViewMatrix>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateFlyoverTileViewMatrix>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPassCommandBuffers>(md::ita::PrepareMainPassCommandBuffers &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMainPassCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPassCommandBuffers>(md::ita::PrepareMainPassCommandBuffers &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52AF20;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPassCommandBuffers>(md::ita::PrepareMainPassCommandBuffers &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMainPassCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPassCommandBuffers>(md::ita::PrepareMainPassCommandBuffers &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPassCommandBuffers>(md::ita::PrepareMainPassCommandBuffers &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMainPassCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPassCommandBuffers>(md::ita::PrepareMainPassCommandBuffers &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52AF68;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPassCommandBuffers>(md::ita::PrepareMainPassCommandBuffers &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMainPassCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainPassCommandBuffers>(md::ita::PrepareMainPassCommandBuffers &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::PassToCommandBuffers &>::Model<ecs2::RuntimeQuery<md::ls::PassToCommandBuffers &>>::empty(uint64_t a1)
{
  uint64_t v1 = (void *)gdc::Registry::storage<md::ls::PassToCommandBuffers>(*(int8x8_t **)(*(void *)(a1 + 8) + 8));
  uint64_t v3 = v1[7];
  uint64_t v2 = v1[8];
  uint64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if ((unint64_t v5 = *(unsigned int *)(v3 + 4), v6 = v1[4], v7 = (v1[5] - v6) >> 3, v5 >> 7 >= v7)
      || (uint64_t v8 = *(void *)(v6 + 8 * (v5 >> 7))) == 0
      || (unint64_t v9 = *(unsigned __int16 *)(v8 + 2 * (v5 & 0x7F)), v9 >= v4 >> 3)
      || ((uint64_t v10 = v3 + 8 * v9, v10 != v2) ? (v11 = *(_DWORD *)(v10 + 4) == v5) : (v11 = 0), !v11))
    {
      unint64_t v12 = v4 >> 3;
      uint64_t v13 = v3 + 8;
      while (v13 != v2)
      {
        unint64_t v14 = *(unsigned int *)(v13 + 4);
        uint64_t v15 = v1[8];
        if (v14 >> 7 < v7)
        {
          uint64_t v16 = *(void *)(v6 + 8 * (v14 >> 7));
          uint64_t v15 = v1[8];
          if (v16)
          {
            unint64_t v17 = *(unsigned __int16 *)(v16 + 2 * (v14 & 0x7F));
            uint64_t v15 = v1[8];
            if (v12 > v17)
            {
              uint64_t v15 = v3 + 8 * v17;
              if (*(_DWORD *)(v15 + 4) != v14) {
                uint64_t v15 = v1[8];
              }
            }
          }
        }
        v13 += 8;
        if (v15 != v2)
        {
          uint64_t v3 = v13 - 8;
          return v2 == v3;
        }
      }
      uint64_t v3 = v1[8];
    }
  }
  return v2 == v3;
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassToCommandBuffers>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::PassToCommandBuffers>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainPassCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainPassCommandBuffers>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C1C0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainPassCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainPassCommandBuffers>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPassCommandBuffers>(md::ita::PrepareShadowPassCommandBuffers &&)::{lambda(void)#2},std::allocator<md::ita::PrepareShadowPassCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPassCommandBuffers>(md::ita::PrepareShadowPassCommandBuffers &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B820;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPassCommandBuffers>(md::ita::PrepareShadowPassCommandBuffers &&)::{lambda(void)#2},std::allocator<md::ita::PrepareShadowPassCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPassCommandBuffers>(md::ita::PrepareShadowPassCommandBuffers &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPassCommandBuffers>(md::ita::PrepareShadowPassCommandBuffers &&)::{lambda(void)#1},std::allocator<md::ita::PrepareShadowPassCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPassCommandBuffers>(md::ita::PrepareShadowPassCommandBuffers &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B868;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPassCommandBuffers>(md::ita::PrepareShadowPassCommandBuffers &&)::{lambda(void)#1},std::allocator<md::ita::PrepareShadowPassCommandBuffers &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowPassCommandBuffers>(md::ita::PrepareShadowPassCommandBuffers &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareShadowPassCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareShadowPassCommandBuffers>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A20408A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::function<void ()(md::ls::PassToCommandBuffers &)>::~function((uint64_t *)va);
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareShadowPassCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareShadowPassCommandBuffers>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C640;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareShadowPassCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareShadowPassCommandBuffers>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledDepthPrePassSlice>(md::ita::PrepareCulledDepthPrePassSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareCulledDepthPrePassSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledDepthPrePassSlice>(md::ita::PrepareCulledDepthPrePassSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B310;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledDepthPrePassSlice>(md::ita::PrepareCulledDepthPrePassSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareCulledDepthPrePassSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledDepthPrePassSlice>(md::ita::PrepareCulledDepthPrePassSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledDepthPrePassSlice>(md::ita::PrepareCulledDepthPrePassSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareCulledDepthPrePassSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledDepthPrePassSlice>(md::ita::PrepareCulledDepthPrePassSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B358;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledDepthPrePassSlice>(md::ita::PrepareCulledDepthPrePassSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareCulledDepthPrePassSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledDepthPrePassSlice>(md::ita::PrepareCulledDepthPrePassSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>::Model<ecs2::RuntimeQuery<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::VisibilityGroupID>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)8>>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7]) {
    uint64_t v6 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(void *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7]) {
    uint64_t v7 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v7 = (uint64_t)v5;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

BOOL gdc::ComponentStorageWrapper<md::ls::VisibilityGroupID>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::VisibilityGroupID>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(void *)(v14 + 8 * v7) = *(void *)(v15 - 8);
  a1[11] = v15 - 8;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::VisibilityGroupID>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::VisibilityGroupID>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>::Model<ecs2::RuntimeQuery<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::VisibilityGroupID>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)8>>(v3);
  uint64_t v6 = v5;
  unint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(void *)(v9 + 32));
  unint64_t v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61) {
    goto LABEL_55;
  }
  unint64_t v12 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    void *v12 = *v11;
    unint64_t v13 = *v11;
    unint64_t v14 = HIDWORD(*v11);
    unint64_t v15 = v13 >> 39;
    uint64_t v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3) {
      goto LABEL_17;
    }
    uint64_t v17 = *(void *)(v16 + 8 * v15);
    if (!v17) {
      goto LABEL_17;
    }
    unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    uint64_t v20 = v4[7];
    uint64_t v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3) {
      goto LABEL_17;
    }
    uint64_t v21 = v20 + 8 * v18;
    BOOL v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == v14;
    if (v22)
    {
      uint64_t v23 = v4[11];
      uint64_t v24 = v4[10] + 8 * v18;
    }
    else
    {
LABEL_17:
      uint64_t v23 = v4[11];
      uint64_t v24 = v23;
    }
    uint64_t v25 = v24 == v23 ? 0 : v24;
    uint64_t v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      uint64_t v27 = *(void *)(v26 + 8 * v15);
      if (v27)
      {
        unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        uint64_t v30 = v6[7];
        uint64_t v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          uint64_t v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == v14) {
            break;
          }
        }
      }
    }
    uint64_t v33 = v6[11];
    uint64_t v34 = v33;
    uint64_t v35 = *(void *)(a2 + 24);
    if (!v35) {
      goto LABEL_54;
    }
LABEL_29:
    if (v34 == v33) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = v34;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v35 + 48))(v35, v25, v36);
    uint64_t v38 = v61;
    uint64_t v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      uint64_t v39 = v59[4];
      unint64_t v40 = (v59[5] - v39) >> 3;
      uint64_t v41 = v38 + 2;
      while (1)
      {
        unint64_t v42 = *((unsigned int *)v41 - 1);
        unint64_t v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          uint64_t v44 = *(void *)(v39 + 8 * v43);
          if (v44)
          {
            unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            uint64_t v46 = v59[7];
            uint64_t result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              uint64_t v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == v42)
              {
                uint64_t v49 = v60[4];
                uint64_t result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  uint64_t v50 = *(void *)(v49 + 8 * v43);
                  if (v50)
                  {
                    unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    uint64_t v53 = v60[7];
                    uint64_t v52 = v60[8];
                    uint64_t result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      uint64_t v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == v42) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v61 = v41;
        BOOL v22 = v41++ == v11;
        if (v22) {
          goto LABEL_9;
        }
      }
      uint64_t v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11) {
      goto LABEL_56;
    }
  }
  uint64_t v33 = v6[11];
  uint64_t v34 = v6[10] + 4 * v28;
  uint64_t v35 = *(void *)(a2 + 24);
  if (v35) {
    goto LABEL_29;
  }
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  uint64_t result = (*v10)();
  unint64_t v12 = (void *)result;
LABEL_56:
  void *v12 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>::Model<ecs2::RuntimeQuery<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::VisibilityGroupID>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)1>>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7]) {
    uint64_t v6 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(void *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7]) {
    uint64_t v7 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v7 = (uint64_t)v5;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

uint64_t ecs2::Query<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>::Model<ecs2::RuntimeQuery<md::ls::VisibilityGroupID const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::VisibilityGroupID>(v3);
  uint64_t v5 = (void *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)1>>(v3);
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 4;
  if (v5[8] - v5[7] >= v4[8] - v4[7]) {
    uint64_t v8 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v8 = (uint64_t)(v5 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(&v58, v8, v4, v5, *(void *)(v8 + 24));
  if (v6[8] - v6[7] >= v4[8] - v4[7]) {
    uint64_t v9 = (uint64_t)(v4 + 4);
  }
  else {
    uint64_t v9 = (uint64_t)v7;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v56, v9, v4, v6, *(void *)(v9 + 32));
  unint64_t v10 = (uint64_t (**)(void))&ecs2::Runtime::_localEntity;
  if (v57 == v61) {
    goto LABEL_55;
  }
  unint64_t v12 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  while (1)
  {
    void *v12 = *v11;
    unint64_t v13 = *v11;
    unint64_t v14 = HIDWORD(*v11);
    unint64_t v15 = v13 >> 39;
    uint64_t v16 = v4[4];
    if (v13 >> 39 >= (v4[5] - v16) >> 3) {
      goto LABEL_17;
    }
    uint64_t v17 = *(void *)(v16 + 8 * v15);
    if (!v17) {
      goto LABEL_17;
    }
    unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v13) & 0x7F));
    uint64_t v20 = v4[7];
    uint64_t v19 = v4[8];
    if (v18 >= (v19 - v20) >> 3) {
      goto LABEL_17;
    }
    uint64_t v21 = v20 + 8 * v18;
    BOOL v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == v14;
    if (v22)
    {
      uint64_t v23 = v4[11];
      uint64_t v24 = v4[10] + 8 * v18;
    }
    else
    {
LABEL_17:
      uint64_t v23 = v4[11];
      uint64_t v24 = v23;
    }
    uint64_t v25 = v24 == v23 ? 0 : v24;
    uint64_t v26 = v6[4];
    if (v15 < (v6[5] - v26) >> 3)
    {
      uint64_t v27 = *(void *)(v26 + 8 * v15);
      if (v27)
      {
        unint64_t v28 = *(unsigned __int16 *)(v27 + 2 * (HIDWORD(v13) & 0x7F));
        uint64_t v30 = v6[7];
        uint64_t v29 = v6[8];
        if (v28 < (v29 - v30) >> 3)
        {
          uint64_t v31 = v30 + 8 * v28;
          if (v31 != v29 && *(_DWORD *)(v31 + 4) == v14) {
            break;
          }
        }
      }
    }
    uint64_t v33 = v6[11];
    uint64_t v34 = v33;
    uint64_t v35 = *(void *)(a2 + 24);
    if (!v35) {
      goto LABEL_54;
    }
LABEL_29:
    if (v34 == v33) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = v34;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v35 + 48))(v35, v25, v36);
    uint64_t v38 = v61;
    uint64_t v11 = *(unint64_t **)(v58 + 32);
    if (++v61 != v11)
    {
      uint64_t v39 = v59[4];
      unint64_t v40 = (v59[5] - v39) >> 3;
      uint64_t v41 = v38 + 2;
      while (1)
      {
        unint64_t v42 = *((unsigned int *)v41 - 1);
        unint64_t v43 = v42 >> 7;
        if (v42 >> 7 < v40)
        {
          uint64_t v44 = *(void *)(v39 + 8 * v43);
          if (v44)
          {
            unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * (v42 & 0x7F));
            uint64_t v46 = v59[7];
            uint64_t result = v59[8];
            if (v45 < (result - v46) >> 3)
            {
              uint64_t v47 = v46 + 8 * v45;
              if (v47 != result && *(_DWORD *)(v47 + 4) == v42)
              {
                uint64_t v49 = v60[4];
                uint64_t result = v60[5] - v49;
                if (v43 < result >> 3)
                {
                  uint64_t v50 = *(void *)(v49 + 8 * v43);
                  if (v50)
                  {
                    unint64_t v51 = *(unsigned __int16 *)(v50 + 2 * (v42 & 0x7F));
                    uint64_t v53 = v60[7];
                    uint64_t v52 = v60[8];
                    uint64_t result = v52 - v53;
                    if (v51 < (v52 - v53) >> 3)
                    {
                      uint64_t v54 = v53 + 8 * v51;
                      if (v54 != v52 && *(_DWORD *)(v54 + 4) == v42) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v61 = v41;
        BOOL v22 = v41++ == v11;
        if (v22) {
          goto LABEL_9;
        }
      }
      uint64_t v11 = v41 - 1;
    }
LABEL_9:
    if (v57 == v11) {
      goto LABEL_56;
    }
  }
  uint64_t v33 = v6[11];
  uint64_t v34 = v6[10] + 4 * v28;
  uint64_t v35 = *(void *)(a2 + 24);
  if (v35) {
    goto LABEL_29;
  }
LABEL_54:
  std::__throw_bad_function_call[abi:nn180100]();
LABEL_55:
  uint64_t result = (*v10)();
  unint64_t v12 = (void *)result;
LABEL_56:
  void *v12 = 0xFFFFFFFF00000000;
  return result;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareCulledDepthPrePassSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareCulledDepthPrePassSlice>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C3B8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareCulledDepthPrePassSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareCulledDepthPrePassSlice>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledShadowSlice>(md::ita::PrepareCulledShadowSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareCulledShadowSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledShadowSlice>(md::ita::PrepareCulledShadowSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF5294B0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledShadowSlice>(md::ita::PrepareCulledShadowSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareCulledShadowSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledShadowSlice>(md::ita::PrepareCulledShadowSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledShadowSlice>(md::ita::PrepareCulledShadowSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareCulledShadowSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledShadowSlice>(md::ita::PrepareCulledShadowSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF5294F8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledShadowSlice>(md::ita::PrepareCulledShadowSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareCulledShadowSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledShadowSlice>(md::ita::PrepareCulledShadowSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)3> const&,md::ls::VisibilityGroupID const&,md::ls::SharedRenderableDataHandle const&,md::ls::AppliedWantsDynamicShadowBounds const*,md::BoundData const&,md::ls::BoundZScale const*,md::ls::BoundZAdjust const*>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)3> const&,md::ls::VisibilityGroupID const&,md::ls::SharedRenderableDataHandle const&,md::ls::AppliedWantsDynamicShadowBounds const*,md::BoundData const&,md::ls::BoundZScale const*,md::ls::BoundZAdjust const*>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)3>>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::VisibilityGroupID>(v1);
  uint64_t v5 = gdc::Registry::storage<md::ls::SharedRenderableDataHandle>(v1);
  uint64_t v6 = gdc::Registry::storage<md::BoundData>(v1);
  v9[0] = v2;
  v9[1] = v3;
  v9[2] = v4;
  v9[3] = v5;
  v9[4] = v6;
  void v9[5] = gdc::Registry::storage<md::ls::AppliedWantsDynamicShadowBounds>(v1);
  v9[6] = gdc::Registry::storage<md::ls::BoundZScale>(v1);
  uint64_t v9[7] = gdc::Registry::storage<md::ls::BoundZAdjust>(v1);
  gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::RenderItemUpdate const,md::ls::DataIDSetToUse const,md::ls::RequiredPipelinePoolID const,md::ls::PipelineSetup>,gdc::Any<>,gdc::None<>>::begin(v10, v9);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v7 = v2;
  }
  else {
    uint64_t v7 = v3;
  }
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < *(void *)(v7 + 64) - *(void *)(v7 + 56)) {
    uint64_t v7 = v4;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v7 + 64) - *(void *)(v7 + 56)) {
    uint64_t v7 = v5;
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < *(void *)(v7 + 64) - *(void *)(v7 + 56)) {
    uint64_t v7 = v6;
  }
  return *(void *)(v7 + 64) == v10[7];
}

BOOL gdc::ComponentStorageWrapper<md::ls::BoundZAdjust>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::BoundZAdjust>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::BoundZAdjust>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::BoundZAdjust>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::BoundZScale>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::BoundZScale>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::BoundZScale>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::BoundZScale>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::AppliedWantsDynamicShadowBounds>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::AppliedWantsDynamicShadowBounds>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::AppliedWantsDynamicShadowBounds>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::AppliedWantsDynamicShadowBounds>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)3>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)3>>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)3>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)3>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareCulledShadowSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareCulledShadowSlice>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B488;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareCulledShadowSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareCulledShadowSlice>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowSlice>(md::ita::PrepareShadowSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareShadowSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowSlice>(md::ita::PrepareShadowSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF527920;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowSlice>(md::ita::PrepareShadowSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareShadowSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowSlice>(md::ita::PrepareShadowSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowSlice>(md::ita::PrepareShadowSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareShadowSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowSlice>(md::ita::PrepareShadowSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF527968;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowSlice>(md::ita::PrepareShadowSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareShadowSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowSlice>(md::ita::PrepareShadowSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareShadowSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareShadowSlice>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  operator new();
}

void sub_1A204227C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13 == v16)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
  }
  else if (a13)
  {
    (*(void (**)(void))(*(void *)a13 + 40))();
  }

  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::VisibilityGroupID>(v1);
  uint64_t CanCast = gdc::Registry::storage<md::ls::CanCastShadow>(v1);
  uint64_t v5 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)8>>(v1);
  v8[0] = v2;
  v8[1] = v3;
  uint64_t v8[2] = CanCast;
  v8[3] = v5;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v9, v8);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v6 = v2;
  }
  else {
    uint64_t v6 = v3;
  }
  if (*(void *)(CanCast + 64) - *(void *)(CanCast + 56) < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v6 = CanCast;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v6 = v5;
  }
  return *(void *)(v6 + 64) == v9[6];
}

uint64_t gdc::Registry::storage<md::ls::CanCastShadow>(int8x8_t *a1)
{
  unint64_t v10 = 0x8D203CEEEBEC82DELL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0x8D203CEEEBEC82DELL;
    if (*(void *)&v1 <= 0x8D203CEEEBEC82DELL) {
      unint64_t v3 = 0x8D203CEEEBEC82DELL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0x8D203CEEEBEC82DELL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x8D203CEEEBEC82DELL)
      {
        if (v5[2] == 0x8D203CEEEBEC82DELL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x8D203CEEEBEC82DELL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x8D203CEEEBEC82DELL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A20426D4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<md::ls::CanCastShadow>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::CanCastShadow>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::CanCastShadow>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::CanCastShadow>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::VisibilityGroupID>(v2);
  uint64_t CanCast = (void *)gdc::Registry::storage<md::ls::CanCastShadow>(v2);
  uint64_t v6 = (void *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)8>>(v2);
  v97[0] = (uint64_t)v3;
  v97[1] = (uint64_t)v4;
  v97[2] = (uint64_t)CanCast;
  v97[3] = (uint64_t)v6;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v95, v97);
  unint64_t v7 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7]) {
    unint64_t v7 = v4 + 4;
  }
  if (CanCast[8] - CanCast[7] < v7[4] - v7[3]) {
    unint64_t v7 = CanCast + 4;
  }
  if (v6[8] - v6[7] < v7[4] - v7[3]) {
    unint64_t v7 = v6 + 4;
  }
  uint64_t v8 = (unint64_t *)v7[4];
  uint64_t v9 = v96;
  if (v8 == v96)
  {
    uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    unint64_t v10 = (void *)result;
  }
  else
  {
    unint64_t v10 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v11 = v95[0];
    unint64_t v12 = (void *)v95[1];
    uint64_t v13 = (void *)v95[2];
    int8x8_t v92 = (void *)v95[4];
    uint8x8_t v93 = (void *)v95[3];
    do
    {
      *unint64_t v10 = *v9;
      unint64_t v15 = *v9;
      unint64_t v16 = HIDWORD(*v9);
      unint64_t v17 = *v9 >> 39;
      uint64_t v18 = v3[4];
      if (v17 < (v3[5] - v18) >> 3
        && (uint64_t v19 = *(void *)(v18 + 8 * v17)) != 0
        && (unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v22 = v3[7],
            uint64_t v21 = v3[8],
            v20 < (v21 - v22) >> 3)
        && ((v23 = v22 + 8 * v20, v23 != v21) ? (BOOL v24 = *(_DWORD *)(v23 + 4) == v16) : (BOOL v24 = 0), v24))
      {
        uint64_t v25 = v3[11];
        uint64_t v26 = v3[10] + 8 * v20;
      }
      else
      {
        uint64_t v25 = v3[11];
        uint64_t v26 = v25;
      }
      if (v26 == v25) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = v26;
      }
      uint64_t v28 = v4[4];
      if (v17 < (v4[5] - v28) >> 3
        && (uint64_t v29 = *(void *)(v28 + 8 * v17)) != 0
        && (unint64_t v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v32 = v4[7],
            uint64_t v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((uint64_t v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == v16) : (v34 = 0), v34))
      {
        uint64_t v35 = v4[11];
        uint64_t v36 = v4[10] + 8 * v30;
      }
      else
      {
        uint64_t v35 = v4[11];
        uint64_t v36 = v35;
      }
      if (v36 == v35) {
        uint64_t v37 = 0;
      }
      else {
        uint64_t v37 = v36;
      }
      uint64_t v38 = CanCast[4];
      if (v17 < (CanCast[5] - v38) >> 3
        && (uint64_t v39 = *(void *)(v38 + 8 * v17)) != 0
        && (unint64_t v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v42 = CanCast[7],
            uint64_t v41 = CanCast[8],
            v40 < (v41 - v42) >> 3)
        && ((uint64_t v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == v16) : (v44 = 0), v44))
      {
        unint64_t v45 = CanCast[11];
        unint64_t v46 = CanCast[10] + v40;
      }
      else
      {
        unint64_t v45 = CanCast[11];
        unint64_t v46 = v45;
      }
      if (v46 == v45) {
        unint64_t v47 = 0;
      }
      else {
        unint64_t v47 = v46;
      }
      uint64_t v48 = v6[4];
      if (v17 < (v6[5] - v48) >> 3
        && (uint64_t v49 = *(void *)(v48 + 8 * v17)) != 0
        && (unint64_t v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v52 = v6[7],
            uint64_t v51 = v6[8],
            v50 < (v51 - v52) >> 3)
        && ((v53 = v52 + 8 * v50, v53 != v51) ? (BOOL v54 = *(_DWORD *)(v53 + 4) == v16) : (BOOL v54 = 0), v54))
      {
        uint64_t v55 = v6[11];
        uint64_t v56 = v6[10] + 4 * v50;
      }
      else
      {
        uint64_t v55 = v6[11];
        uint64_t v56 = v55;
      }
      uint64_t v57 = *(void *)(a2 + 24);
      if (!v57)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>>::~Model();
      }
      if (v56 == v55) {
        uint64_t v58 = 0;
      }
      else {
        uint64_t v58 = v56;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)v57 + 48))(v57, v27, v37, v47, v58);
      uint64_t v60 = *(unint64_t **)(v11 + 32);
      uint64_t v14 = v9 + 1;
      unint64_t v96 = v9 + 1;
      if (v9 + 1 != v60)
      {
        uint64_t v61 = v12[4];
        while (1)
        {
          unint64_t v62 = *((unsigned int *)v14 + 1);
          unint64_t v63 = v62 >> 7;
          if (v62 >> 7 < (v12[5] - v61) >> 3)
          {
            uint64_t v64 = *(void *)(v61 + 8 * v63);
            if (v64)
            {
              uint64_t v65 = v62 & 0x7F;
              unint64_t v66 = *(unsigned __int16 *)(v64 + 2 * v65);
              uint64_t v68 = v12[7];
              uint64_t v67 = v12[8];
              uint64_t result = v67 - v68;
              if (v66 < (v67 - v68) >> 3)
              {
                uint64_t v69 = v68 + 8 * v66;
                if (v69 != v67 && *(_DWORD *)(v69 + 4) == v62)
                {
                  uint64_t v71 = v13[4];
                  if (v63 < (v13[5] - v71) >> 3)
                  {
                    uint64_t v72 = *(void *)(v71 + 8 * v63);
                    if (v72)
                    {
                      unint64_t v73 = *(unsigned __int16 *)(v72 + 2 * v65);
                      uint64_t v75 = v13[7];
                      uint64_t v74 = v13[8];
                      uint64_t result = v74 - v75;
                      if (v73 < (v74 - v75) >> 3)
                      {
                        uint64_t v76 = v75 + 8 * v73;
                        if (v76 != v74 && *(_DWORD *)(v76 + 4) == v62)
                        {
                          uint64_t v78 = v93[4];
                          if (v63 < (v93[5] - v78) >> 3)
                          {
                            uint64_t v79 = *(void *)(v78 + 8 * v63);
                            if (v79)
                            {
                              unint64_t v80 = *(unsigned __int16 *)(v79 + 2 * v65);
                              uint64_t v82 = v93[7];
                              uint64_t v81 = v93[8];
                              uint64_t result = v81 - v82;
                              if (v80 < (v81 - v82) >> 3)
                              {
                                uint64_t v83 = v82 + 8 * v80;
                                if (v83 != v81 && *(_DWORD *)(v83 + 4) == v62)
                                {
                                  uint64_t v85 = v92[4];
                                  if (v63 < (v92[5] - v85) >> 3)
                                  {
                                    uint64_t v86 = *(void *)(v85 + 8 * v63);
                                    if (v86)
                                    {
                                      unint64_t v87 = *(unsigned __int16 *)(v86 + 2 * v65);
                                      uint64_t v89 = v92[7];
                                      uint64_t v88 = v92[8];
                                      if (v87 < (v88 - v89) >> 3)
                                      {
                                        uint64_t v90 = v89 + 8 * v87;
                                        if (*(_DWORD *)(v90 + 4) == v62 && v90 != v88) {
                                          break;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v60)
          {
            uint64_t v14 = v60;
            goto LABEL_10;
          }
        }
        uint64_t v60 = v14;
LABEL_10:
        unint64_t v96 = v14;
      }
      uint64_t v9 = v60;
    }
    while (v8 != v60);
  }
  *unint64_t v10 = 0xFFFFFFFF00000000;
  return result;
}

void ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>>::~Model()
{
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::VisibilityGroupID>(v1);
  uint64_t CanCast = gdc::Registry::storage<md::ls::CanCastShadow>(v1);
  uint64_t v5 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)1>>(v1);
  v8[0] = v2;
  v8[1] = v3;
  uint64_t v8[2] = CanCast;
  v8[3] = v5;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v9, v8);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v6 = v2;
  }
  else {
    uint64_t v6 = v3;
  }
  if (*(void *)(CanCast + 64) - *(void *)(CanCast + 56) < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v6 = CanCast;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v6 = v5;
  }
  return *(void *)(v6 + 64) == v9[6];
}

uint64_t ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::VisibilityGroupID>(v2);
  uint64_t CanCast = (void *)gdc::Registry::storage<md::ls::CanCastShadow>(v2);
  uint64_t v6 = (void *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)1>>(v2);
  v97[0] = (uint64_t)v3;
  v97[1] = (uint64_t)v4;
  v97[2] = (uint64_t)CanCast;
  v97[3] = (uint64_t)v6;
  gdc::RegistryQueryView<gdc::All<md::ls::PipelineSetupToApply const,md::ls::RenderState const,md::ls::DataIDSetToUse const,md::ls::RenderItemID const>,gdc::Any<>,gdc::None<>>::begin(v95, v97);
  unint64_t v7 = v3 + 4;
  if (v4[8] - v4[7] < v3[8] - v3[7]) {
    unint64_t v7 = v4 + 4;
  }
  if (CanCast[8] - CanCast[7] < v7[4] - v7[3]) {
    unint64_t v7 = CanCast + 4;
  }
  if (v6[8] - v6[7] < v7[4] - v7[3]) {
    unint64_t v7 = v6 + 4;
  }
  uint64_t v8 = (unint64_t *)v7[4];
  uint64_t v9 = v96;
  if (v8 == v96)
  {
    uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    unint64_t v10 = (void *)result;
  }
  else
  {
    unint64_t v10 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v11 = v95[0];
    unint64_t v12 = (void *)v95[1];
    uint64_t v13 = (void *)v95[2];
    int8x8_t v92 = (void *)v95[4];
    uint8x8_t v93 = (void *)v95[3];
    do
    {
      *unint64_t v10 = *v9;
      unint64_t v15 = *v9;
      unint64_t v16 = HIDWORD(*v9);
      unint64_t v17 = *v9 >> 39;
      uint64_t v18 = v3[4];
      if (v17 < (v3[5] - v18) >> 3
        && (uint64_t v19 = *(void *)(v18 + 8 * v17)) != 0
        && (unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v22 = v3[7],
            uint64_t v21 = v3[8],
            v20 < (v21 - v22) >> 3)
        && ((v23 = v22 + 8 * v20, v23 != v21) ? (BOOL v24 = *(_DWORD *)(v23 + 4) == v16) : (BOOL v24 = 0), v24))
      {
        uint64_t v25 = v3[11];
        uint64_t v26 = v3[10] + 8 * v20;
      }
      else
      {
        uint64_t v25 = v3[11];
        uint64_t v26 = v25;
      }
      if (v26 == v25) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = v26;
      }
      uint64_t v28 = v4[4];
      if (v17 < (v4[5] - v28) >> 3
        && (uint64_t v29 = *(void *)(v28 + 8 * v17)) != 0
        && (unint64_t v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v32 = v4[7],
            uint64_t v31 = v4[8],
            v30 < (v31 - v32) >> 3)
        && ((uint64_t v33 = v32 + 8 * v30, v33 != v31) ? (v34 = *(_DWORD *)(v33 + 4) == v16) : (v34 = 0), v34))
      {
        uint64_t v35 = v4[11];
        uint64_t v36 = v4[10] + 8 * v30;
      }
      else
      {
        uint64_t v35 = v4[11];
        uint64_t v36 = v35;
      }
      if (v36 == v35) {
        uint64_t v37 = 0;
      }
      else {
        uint64_t v37 = v36;
      }
      uint64_t v38 = CanCast[4];
      if (v17 < (CanCast[5] - v38) >> 3
        && (uint64_t v39 = *(void *)(v38 + 8 * v17)) != 0
        && (unint64_t v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v42 = CanCast[7],
            uint64_t v41 = CanCast[8],
            v40 < (v41 - v42) >> 3)
        && ((uint64_t v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == v16) : (v44 = 0), v44))
      {
        unint64_t v45 = CanCast[11];
        unint64_t v46 = CanCast[10] + v40;
      }
      else
      {
        unint64_t v45 = CanCast[11];
        unint64_t v46 = v45;
      }
      if (v46 == v45) {
        unint64_t v47 = 0;
      }
      else {
        unint64_t v47 = v46;
      }
      uint64_t v48 = v6[4];
      if (v17 < (v6[5] - v48) >> 3
        && (uint64_t v49 = *(void *)(v48 + 8 * v17)) != 0
        && (unint64_t v50 = *(unsigned __int16 *)(v49 + 2 * (HIDWORD(v15) & 0x7F)),
            uint64_t v52 = v6[7],
            uint64_t v51 = v6[8],
            v50 < (v51 - v52) >> 3)
        && ((v53 = v52 + 8 * v50, v53 != v51) ? (BOOL v54 = *(_DWORD *)(v53 + 4) == v16) : (BOOL v54 = 0), v54))
      {
        uint64_t v55 = v6[11];
        uint64_t v56 = v6[10] + 4 * v50;
      }
      else
      {
        uint64_t v55 = v6[11];
        uint64_t v56 = v55;
      }
      uint64_t v57 = *(void *)(a2 + 24);
      if (!v57)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>>::~Model();
      }
      if (v56 == v55) {
        uint64_t v58 = 0;
      }
      else {
        uint64_t v58 = v56;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)v57 + 48))(v57, v27, v37, v47, v58);
      uint64_t v60 = *(unint64_t **)(v11 + 32);
      uint64_t v14 = v9 + 1;
      unint64_t v96 = v9 + 1;
      if (v9 + 1 != v60)
      {
        uint64_t v61 = v12[4];
        while (1)
        {
          unint64_t v62 = *((unsigned int *)v14 + 1);
          unint64_t v63 = v62 >> 7;
          if (v62 >> 7 < (v12[5] - v61) >> 3)
          {
            uint64_t v64 = *(void *)(v61 + 8 * v63);
            if (v64)
            {
              uint64_t v65 = v62 & 0x7F;
              unint64_t v66 = *(unsigned __int16 *)(v64 + 2 * v65);
              uint64_t v68 = v12[7];
              uint64_t v67 = v12[8];
              uint64_t result = v67 - v68;
              if (v66 < (v67 - v68) >> 3)
              {
                uint64_t v69 = v68 + 8 * v66;
                if (v69 != v67 && *(_DWORD *)(v69 + 4) == v62)
                {
                  uint64_t v71 = v13[4];
                  if (v63 < (v13[5] - v71) >> 3)
                  {
                    uint64_t v72 = *(void *)(v71 + 8 * v63);
                    if (v72)
                    {
                      unint64_t v73 = *(unsigned __int16 *)(v72 + 2 * v65);
                      uint64_t v75 = v13[7];
                      uint64_t v74 = v13[8];
                      uint64_t result = v74 - v75;
                      if (v73 < (v74 - v75) >> 3)
                      {
                        uint64_t v76 = v75 + 8 * v73;
                        if (v76 != v74 && *(_DWORD *)(v76 + 4) == v62)
                        {
                          uint64_t v78 = v93[4];
                          if (v63 < (v93[5] - v78) >> 3)
                          {
                            uint64_t v79 = *(void *)(v78 + 8 * v63);
                            if (v79)
                            {
                              unint64_t v80 = *(unsigned __int16 *)(v79 + 2 * v65);
                              uint64_t v82 = v93[7];
                              uint64_t v81 = v93[8];
                              uint64_t result = v81 - v82;
                              if (v80 < (v81 - v82) >> 3)
                              {
                                uint64_t v83 = v82 + 8 * v80;
                                if (v83 != v81 && *(_DWORD *)(v83 + 4) == v62)
                                {
                                  uint64_t v85 = v92[4];
                                  if (v63 < (v92[5] - v85) >> 3)
                                  {
                                    uint64_t v86 = *(void *)(v85 + 8 * v63);
                                    if (v86)
                                    {
                                      unint64_t v87 = *(unsigned __int16 *)(v86 + 2 * v65);
                                      uint64_t v89 = v92[7];
                                      uint64_t v88 = v92[8];
                                      if (v87 < (v88 - v89) >> 3)
                                      {
                                        uint64_t v90 = v89 + 8 * v87;
                                        if (*(_DWORD *)(v90 + 4) == v62 && v90 != v88) {
                                          break;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (++v14 == v60)
          {
            uint64_t v14 = v60;
            goto LABEL_10;
          }
        }
        uint64_t v60 = v14;
LABEL_10:
        unint64_t v96 = v14;
      }
      uint64_t v9 = v60;
    }
    while (v8 != v60);
  }
  *unint64_t v10 = 0xFFFFFFFF00000000;
  return result;
}

void ecs2::Query<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::VisibilityGroupID const&,md::ls::CanCastShadow const&,md::ls::SliceAssignmentT<(md::SliceType)1> const&>>::~Model()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareShadowSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareShadowSlice>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51A6C0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareShadowSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareShadowSlice>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareUnflattenedCulledSlice>(md::ita::PrepareUnflattenedCulledSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareUnflattenedCulledSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareUnflattenedCulledSlice>(md::ita::PrepareUnflattenedCulledSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52AFB0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareUnflattenedCulledSlice>(md::ita::PrepareUnflattenedCulledSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareUnflattenedCulledSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareUnflattenedCulledSlice>(md::ita::PrepareUnflattenedCulledSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareUnflattenedCulledSlice>(md::ita::PrepareUnflattenedCulledSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareUnflattenedCulledSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareUnflattenedCulledSlice>(md::ita::PrepareUnflattenedCulledSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52AFF8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareUnflattenedCulledSlice>(md::ita::PrepareUnflattenedCulledSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareUnflattenedCulledSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareUnflattenedCulledSlice>(md::ita::PrepareUnflattenedCulledSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::IntendedSceneLayer>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::VisibilityGroupID>(v1);
  uint64_t v5 = gdc::Registry::storage<md::ls::RenderableVisibilityOptions>(v1);
  uint64_t v6 = gdc::Registry::storage<md::ls::MeshLayerTypeV>(v1);
  uint64_t v7 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)8>>(v1);
  v10[0] = v2;
  v10[1] = v3;
  v10[2] = v4;
  v10[3] = v5;
  v10[4] = v6;
  void v10[5] = v7;
  gdc::RegistryQueryView<gdc::All<md::ls::MeshRenderableID const,md::ls::IntendedSceneLayer const,md::ls::VisibilityGroupID const,md::ls::RenderableVisibilityOptions const,md::ls::MeshLayerTypeV const,md::ls::SliceAssignmentT<(md::SliceType)8> const>,gdc::Any<>,gdc::None<>>::begin(v11, v10);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v8 = v2;
  }
  else {
    uint64_t v8 = v3;
  }
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < *(void *)(v8 + 64) - *(void *)(v8 + 56)) {
    uint64_t v8 = v4;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v8 + 64) - *(void *)(v8 + 56)) {
    uint64_t v8 = v5;
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < *(void *)(v8 + 64) - *(void *)(v8 + 56)) {
    uint64_t v8 = v6;
  }
  if (*(void *)(v7 + 64) - *(void *)(v7 + 56) < *(void *)(v8 + 64) - *(void *)(v8 + 56)) {
    uint64_t v8 = v7;
  }
  return *(void *)(v8 + 64) == v11[8];
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderableVisibilityOptions>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RenderableVisibilityOptions>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(a1[11] - 4);
  a1[11] -= 4;
  unint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    unint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RenderableVisibilityOptions>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RenderableVisibilityOptions>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t ecs2::Query<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::IntendedSceneLayer const&,md::ls::VisibilityGroupID const&,md::ls::RenderableVisibilityOptions const&,md::ls::MeshLayerTypeV const&,md::ls::SliceAssignmentT<(md::SliceType)8> const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v3 = gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::IntendedSceneLayer>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::VisibilityGroupID>(v2);
  uint64_t v6 = (void *)gdc::Registry::storage<md::ls::RenderableVisibilityOptions>(v2);
  unint64_t v7 = (void *)gdc::Registry::storage<md::ls::MeshLayerTypeV>(v2);
  uint64_t v8 = (void *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)8>>(v2);
  unint64_t v87 = (void *)v3;
  uint64_t v88 = (void *)v4;
  uint64_t v89 = (void *)v5;
  uint64_t v90 = v6;
  uint64_t v91 = v7;
  int8x8_t v92 = v8;
  gdc::RegistryQueryView<gdc::All<md::ls::MeshRenderableID const,md::ls::IntendedSceneLayer const,md::ls::VisibilityGroupID const,md::ls::RenderableVisibilityOptions const,md::ls::MeshLayerTypeV const,md::ls::SliceAssignmentT<(md::SliceType)8> const>,gdc::Any<>,gdc::None<>>::begin(v85, (uint64_t *)&v87);
  uint64_t v9 = v6 + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) >= *(void *)(v3 + 64) - *(void *)(v3 + 56)) {
    uint64_t v10 = v3;
  }
  else {
    uint64_t v10 = v4;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v10 + 64) - *(void *)(v10 + 56)) {
    uint64_t v10 = v5;
  }
  if (v6[8] - v6[7] >= *(void *)(v10 + 64) - *(void *)(v10 + 56)) {
    uint64_t v9 = (void *)(v10 + 32);
  }
  if (v7[8] - v7[7] < v9[4] - v9[3]) {
    uint64_t v9 = v7 + 4;
  }
  if (v8[8] - v8[7] < v9[4] - v9[3]) {
    uint64_t v9 = v8 + 4;
  }
  uint64_t v11 = (unint64_t *)v9[4];
  unint64_t v12 = v86;
  if (v11 == v86)
  {
    uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v13 = (void *)result;
  }
  else
  {
    uint64_t v13 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v14 = v87;
    unint64_t v15 = v88;
    uint64_t v16 = v89;
    uint64_t v83 = v85[0];
    do
    {
      *uint64_t v13 = *v12;
      unint64_t v17 = *v12;
      unint64_t v18 = HIDWORD(*v12);
      unint64_t v19 = *v12 >> 39;
      uint64_t v20 = v14[4];
      if (v19 < (v14[5] - v20) >> 3
        && (uint64_t v21 = *(void *)(v20 + 8 * v19)) != 0
        && (unint64_t v22 = *(unsigned __int16 *)(v21 + 2 * (HIDWORD(v17) & 0x7F)),
            uint64_t v24 = v14[7],
            uint64_t v23 = v14[8],
            v22 < (v23 - v24) >> 3)
        && ((v25 = v24 + 8 * v22, v25 != v23) ? (BOOL v26 = *(_DWORD *)(v25 + 4) == v18) : (BOOL v26 = 0), v26))
      {
        uint64_t v27 = v14[11];
        uint64_t v28 = v14[10] + 8 * v22;
      }
      else
      {
        uint64_t v27 = v14[11];
        uint64_t v28 = v27;
      }
      if (v28 == v27) {
        uint64_t v29 = 0;
      }
      else {
        uint64_t v29 = v28;
      }
      uint64_t v30 = v15[4];
      if (v19 < (v15[5] - v30) >> 3
        && (uint64_t v31 = *(void *)(v30 + 8 * v19)) != 0
        && (unint64_t v32 = *(unsigned __int16 *)(v31 + 2 * (HIDWORD(v17) & 0x7F)),
            uint64_t v34 = v15[7],
            uint64_t v33 = v15[8],
            v32 < (v33 - v34) >> 3)
        && ((v35 = v34 + 8 * v32, v35 != v33) ? (BOOL v36 = *(_DWORD *)(v35 + 4) == v18) : (BOOL v36 = 0), v36))
      {
        unint64_t v37 = v15[11];
        unint64_t v38 = v15[10] + v32;
      }
      else
      {
        unint64_t v37 = v15[11];
        unint64_t v38 = v37;
      }
      if (v38 == v37) {
        unint64_t v39 = 0;
      }
      else {
        unint64_t v39 = v38;
      }
      uint64_t v40 = v16[4];
      if (v19 < (v16[5] - v40) >> 3
        && (uint64_t v41 = *(void *)(v40 + 8 * v19)) != 0
        && (unint64_t v42 = *(unsigned __int16 *)(v41 + 2 * (HIDWORD(v17) & 0x7F)),
            uint64_t v44 = v16[7],
            uint64_t v43 = v16[8],
            v42 < (v43 - v44) >> 3)
        && ((uint64_t v45 = v44 + 8 * v42, v45 != v43) ? (v46 = *(_DWORD *)(v45 + 4) == v18) : (v46 = 0), v46))
      {
        uint64_t v47 = v16[11];
        uint64_t v48 = v16[10] + 8 * v42;
      }
      else
      {
        uint64_t v47 = v16[11];
        uint64_t v48 = v47;
      }
      if (v48 == v47) {
        uint64_t v49 = 0;
      }
      else {
        uint64_t v49 = v48;
      }
      uint64_t v50 = v6[4];
      if (v19 < (v6[5] - v50) >> 3
        && (uint64_t v51 = *(void *)(v50 + 8 * v19)) != 0
        && (unint64_t v52 = *(unsigned __int16 *)(v51 + 2 * (HIDWORD(v17) & 0x7F)),
            uint64_t v54 = v6[7],
            uint64_t v53 = v6[8],
            v52 < (v53 - v54) >> 3)
        && ((uint64_t v55 = v54 + 8 * v52, v55 != v53) ? (v56 = *(_DWORD *)(v55 + 4) == v18) : (v56 = 0), v56))
      {
        uint64_t v57 = v6[11];
        uint64_t v58 = v6[10] + 4 * v52;
      }
      else
      {
        uint64_t v57 = v6[11];
        uint64_t v58 = v57;
      }
      if (v58 == v57) {
        uint64_t v59 = 0;
      }
      else {
        uint64_t v59 = v58;
      }
      uint64_t v60 = v7[4];
      if (v19 < (v7[5] - v60) >> 3
        && (uint64_t v61 = *(void *)(v60 + 8 * v19)) != 0
        && (unint64_t v62 = *(unsigned __int16 *)(v61 + 2 * (HIDWORD(v17) & 0x7F)),
            uint64_t v64 = v7[7],
            uint64_t v63 = v7[8],
            v62 < (v63 - v64) >> 3)
        && ((v65 = v64 + 8 * v62, v65 != v63) ? (BOOL v66 = *(_DWORD *)(v65 + 4) == v18) : (BOOL v66 = 0), v66))
      {
        unint64_t v67 = v7[11];
        unint64_t v68 = v7[10] + v62;
      }
      else
      {
        unint64_t v67 = v7[11];
        unint64_t v68 = v67;
      }
      if (v68 == v67) {
        unint64_t v69 = 0;
      }
      else {
        unint64_t v69 = v68;
      }
      uint64_t v70 = v8[4];
      if (v19 < (v8[5] - v70) >> 3
        && (uint64_t v71 = *(void *)(v70 + 8 * v19)) != 0
        && (unint64_t v72 = *(unsigned __int16 *)(v71 + 2 * (HIDWORD(v17) & 0x7F)),
            uint64_t v74 = v8[7],
            uint64_t v73 = v8[8],
            v72 < (v73 - v74) >> 3)
        && ((uint64_t v75 = v74 + 8 * v72, v75 != v73) ? (v76 = *(_DWORD *)(v75 + 4) == v18) : (v76 = 0), v76))
      {
        uint64_t v77 = v8[11];
        uint64_t v78 = v8[10] + 4 * v72;
      }
      else
      {
        uint64_t v77 = v8[11];
        uint64_t v78 = v77;
      }
      uint64_t v79 = *(void *)(a2 + 24);
      if (!v79)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        JUMPOUT(0x1A2043A64);
      }
      if (v78 == v77) {
        uint64_t v80 = 0;
      }
      else {
        uint64_t v80 = v78;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)v79 + 48))(v79, v29, v39, v49, v59, v69, v80);
      uint64_t v82 = *(unint64_t **)(v83 + 32);
      while (1)
      {
        uint64_t v86 = ++v12;
        if (v12 == v82) {
          break;
        }
        uint64_t result = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID,md::ls::RenderState const,md::ls::PipelineSetup const,md::ls::IndexRange const,md::ls::HasMeshHandle const,md::ls::FunctionConstants const>,gdc::Any<md::ls::RenderOrderToUse const,md::ls::InstanceCount const,md::ls::StencilRefValueToUse const,md::ls::VisibilityTestResult const,md::ls::ShouldSkipRender const>,gdc::None<>>::Iterator::isValid(v85);
        if (result) {
          goto LABEL_15;
        }
      }
      unint64_t v12 = v82;
LABEL_15:
      ;
    }
    while (v11 != v12);
  }
  *uint64_t v13 = 0xFFFFFFFF00000000;
  return result;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareUnflattenedCulledSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareUnflattenedCulledSlice>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C208;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareUnflattenedCulledSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareUnflattenedCulledSlice>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSliceWithCulled>(md::ita::PrepareMainSliceWithCulled &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMainSliceWithCulled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSliceWithCulled>(md::ita::PrepareMainSliceWithCulled &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529D20;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSliceWithCulled>(md::ita::PrepareMainSliceWithCulled &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMainSliceWithCulled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSliceWithCulled>(md::ita::PrepareMainSliceWithCulled &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSliceWithCulled>(md::ita::PrepareMainSliceWithCulled &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMainSliceWithCulled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSliceWithCulled>(md::ita::PrepareMainSliceWithCulled &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529D68;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSliceWithCulled>(md::ita::PrepareMainSliceWithCulled &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMainSliceWithCulled &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSliceWithCulled>(md::ita::PrepareMainSliceWithCulled &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::WantsCulledSlices>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::WantsCulledSlices>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::WantsCulledSlices>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::WantsCulledSlices>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainSliceWithCulled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainSliceWithCulled>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B8C0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainSliceWithCulled>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainSliceWithCulled>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSlice>(md::ita::PrepareMainSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMainSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSlice>(md::ita::PrepareMainSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF527380;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSlice>(md::ita::PrepareMainSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMainSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSlice>(md::ita::PrepareMainSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSlice>(md::ita::PrepareMainSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMainSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSlice>(md::ita::PrepareMainSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF5273C8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSlice>(md::ita::PrepareMainSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMainSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMainSlice>(md::ita::PrepareMainSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)0>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)0>>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)0>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::SliceAssignmentT<(md::SliceType)0>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IgnoreCulling>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::IgnoreCulling>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IgnoreCulling>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::IgnoreCulling>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainSlice>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51A3F0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMainSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMainSlice>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledSlice>(md::ita::PrepareCulledSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareCulledSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledSlice>(md::ita::PrepareCulledSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF527890;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledSlice>(md::ita::PrepareCulledSlice &&)::{lambda(void)#2},std::allocator<md::ita::PrepareCulledSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledSlice>(md::ita::PrepareCulledSlice &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledSlice>(md::ita::PrepareCulledSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareCulledSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledSlice>(md::ita::PrepareCulledSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF5278D8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledSlice>(md::ita::PrepareCulledSlice &&)::{lambda(void)#1},std::allocator<md::ita::PrepareCulledSlice &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareCulledSlice>(md::ita::PrepareCulledSlice &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareCulledSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareCulledSlice>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51A678;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareCulledSlice>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareCulledSlice>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowBounds>(md::ita::PrepareShadowBounds &&)::{lambda(void)#2},std::allocator<md::ita::PrepareShadowBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowBounds>(md::ita::PrepareShadowBounds &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF527C80;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowBounds>(md::ita::PrepareShadowBounds &&)::{lambda(void)#2},std::allocator<md::ita::PrepareShadowBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowBounds>(md::ita::PrepareShadowBounds &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowBounds>(md::ita::PrepareShadowBounds &&)::{lambda(void)#1},std::allocator<md::ita::PrepareShadowBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowBounds>(md::ita::PrepareShadowBounds &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF527CC8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowBounds>(md::ita::PrepareShadowBounds &&)::{lambda(void)#1},std::allocator<md::ita::PrepareShadowBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareShadowBounds>(md::ita::PrepareShadowBounds &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareShadowBounds>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareShadowBounds>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51A870;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareShadowBounds>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareShadowBounds>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMeshRenderableBounds>(md::ita::PrepareMeshRenderableBounds &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMeshRenderableBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMeshRenderableBounds>(md::ita::PrepareMeshRenderableBounds &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A350;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMeshRenderableBounds>(md::ita::PrepareMeshRenderableBounds &&)::{lambda(void)#2},std::allocator<md::ita::PrepareMeshRenderableBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMeshRenderableBounds>(md::ita::PrepareMeshRenderableBounds &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMeshRenderableBounds>(md::ita::PrepareMeshRenderableBounds &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMeshRenderableBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMeshRenderableBounds>(md::ita::PrepareMeshRenderableBounds &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A398;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMeshRenderableBounds>(md::ita::PrepareMeshRenderableBounds &&)::{lambda(void)#1},std::allocator<md::ita::PrepareMeshRenderableBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareMeshRenderableBounds>(md::ita::PrepareMeshRenderableBounds &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)0>>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::BoundZScale>(v1);
  uint64_t v5 = gdc::Registry::storage<md::ls::BoundZAdjust>(v1);
  uint64_t v6 = gdc::Registry::storage<md::ls::MeshRenderableBounds>(v1);
  uint64_t v7 = gdc::Registry::storage<md::BoundData>(v1);
  v10[0] = v2;
  v10[1] = v3;
  v10[2] = v4;
  v10[3] = v5;
  v10[4] = v6;
  void v10[5] = v7;
  gdc::RegistryQueryView<gdc::All<md::ls::MeshRenderableID const,md::ls::IntendedSceneLayer const,md::ls::VisibilityGroupID const,md::ls::RenderableVisibilityOptions const,md::ls::MeshLayerTypeV const,md::ls::SliceAssignmentT<(md::SliceType)8> const>,gdc::Any<>,gdc::None<>>::begin(v11, v10);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v8 = v2;
  }
  else {
    uint64_t v8 = v3;
  }
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < *(void *)(v8 + 64) - *(void *)(v8 + 56)) {
    uint64_t v8 = v4;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v8 + 64) - *(void *)(v8 + 56)) {
    uint64_t v8 = v5;
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < *(void *)(v8 + 64) - *(void *)(v8 + 56)) {
    uint64_t v8 = v6;
  }
  if (*(void *)(v7 + 64) - *(void *)(v7 + 56) < *(void *)(v8 + 64) - *(void *)(v8 + 56)) {
    uint64_t v8 = v7;
  }
  return *(void *)(v8 + 64) == v11[8];
}

BOOL gdc::ComponentStorageWrapper<md::ls::MeshRenderableBounds>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::MeshRenderableBounds>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = (_DWORD *)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = (_DWORD *)a1[11];
  int v16 = *(v15 - 6);
  v15 -= 6;
  *uint64_t v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  v14[4] = v15[4];
  v14[5] = v15[5];
  a1[11] = v15;
  unint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    unint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MeshRenderableBounds>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::MeshRenderableBounds>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t ecs2::Query<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::BoundZScale const&,md::ls::BoundZAdjust const&,md::ls::MeshRenderableBounds const&,md::BoundData &>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v3 = gdc::Registry::storage<md::ls::MeshRenderableID>(v2);
  uint64_t v4 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)0>>(v2);
  uint64_t v5 = gdc::Registry::storage<md::ls::BoundZScale>(v2);
  uint64_t v6 = (void *)gdc::Registry::storage<md::ls::BoundZAdjust>(v2);
  unint64_t v7 = (void *)gdc::Registry::storage<md::ls::MeshRenderableBounds>(v2);
  uint64_t v8 = (void *)gdc::Registry::storage<md::BoundData>(v2);
  unint64_t v87 = (void *)v3;
  uint64_t v88 = (void *)v4;
  uint64_t v89 = (void *)v5;
  uint64_t v90 = v6;
  uint64_t v91 = v7;
  int8x8_t v92 = v8;
  gdc::RegistryQueryView<gdc::All<md::ls::MeshRenderableID const,md::ls::IntendedSceneLayer const,md::ls::VisibilityGroupID const,md::ls::RenderableVisibilityOptions const,md::ls::MeshLayerTypeV const,md::ls::SliceAssignmentT<(md::SliceType)8> const>,gdc::Any<>,gdc::None<>>::begin(v85, (uint64_t *)&v87);
  uint64_t v9 = v6 + 4;
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) >= *(void *)(v3 + 64) - *(void *)(v3 + 56)) {
    uint64_t v10 = v3;
  }
  else {
    uint64_t v10 = v4;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v10 + 64) - *(void *)(v10 + 56)) {
    uint64_t v10 = v5;
  }
  if (v6[8] - v6[7] >= *(void *)(v10 + 64) - *(void *)(v10 + 56)) {
    uint64_t v9 = (void *)(v10 + 32);
  }
  if (v7[8] - v7[7] < v9[4] - v9[3]) {
    uint64_t v9 = v7 + 4;
  }
  if (v8[8] - v8[7] < v9[4] - v9[3]) {
    uint64_t v9 = v8 + 4;
  }
  uint64_t v11 = (unint64_t *)v9[4];
  unint64_t v12 = v86;
  if (v11 == v86)
  {
    uint64_t result = ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v13 = (void *)result;
  }
  else
  {
    uint64_t v13 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v14 = v87;
    uint64_t v15 = v88;
    int v16 = v89;
    uint64_t v83 = v85[0];
    do
    {
      *uint64_t v13 = *v12;
      unint64_t v17 = *v12;
      unint64_t v18 = HIDWORD(*v12);
      unint64_t v19 = *v12 >> 39;
      uint64_t v20 = v14[4];
      if (v19 < (v14[5] - v20) >> 3
        && (uint64_t v21 = *(void *)(v20 + 8 * v19)) != 0
        && (unint64_t v22 = *(unsigned __int16 *)(v21 + 2 * (HIDWORD(v17) & 0x7F)),
            uint64_t v24 = v14[7],
            uint64_t v23 = v14[8],
            v22 < (v23 - v24) >> 3)
        && ((v25 = v24 + 8 * v22, v25 != v23) ? (BOOL v26 = *(_DWORD *)(v25 + 4) == v18) : (BOOL v26 = 0), v26))
      {
        uint64_t v27 = v14[11];
        uint64_t v28 = v14[10] + 8 * v22;
      }
      else
      {
        uint64_t v27 = v14[11];
        uint64_t v28 = v27;
      }
      if (v28 == v27) {
        uint64_t v29 = 0;
      }
      else {
        uint64_t v29 = v28;
      }
      uint64_t v30 = v15[4];
      if (v19 < (v15[5] - v30) >> 3
        && (uint64_t v31 = *(void *)(v30 + 8 * v19)) != 0
        && (unint64_t v32 = *(unsigned __int16 *)(v31 + 2 * (HIDWORD(v17) & 0x7F)),
            uint64_t v34 = v15[7],
            uint64_t v33 = v15[8],
            v32 < (v33 - v34) >> 3)
        && ((v35 = v34 + 8 * v32, v35 != v33) ? (BOOL v36 = *(_DWORD *)(v35 + 4) == v18) : (BOOL v36 = 0), v36))
      {
        uint64_t v37 = v15[11];
        uint64_t v38 = v15[10] + 4 * v32;
      }
      else
      {
        uint64_t v37 = v15[11];
        uint64_t v38 = v37;
      }
      if (v38 == v37) {
        uint64_t v39 = 0;
      }
      else {
        uint64_t v39 = v38;
      }
      uint64_t v40 = v16[4];
      if (v19 < (v16[5] - v40) >> 3
        && (uint64_t v41 = *(void *)(v40 + 8 * v19)) != 0
        && (unint64_t v42 = *(unsigned __int16 *)(v41 + 2 * (HIDWORD(v17) & 0x7F)),
            uint64_t v44 = v16[7],
            uint64_t v43 = v16[8],
            v42 < (v43 - v44) >> 3)
        && ((uint64_t v45 = v44 + 8 * v42, v45 != v43) ? (v46 = *(_DWORD *)(v45 + 4) == v18) : (v46 = 0), v46))
      {
        uint64_t v47 = v16[11];
        uint64_t v48 = v16[10] + 4 * v42;
      }
      else
      {
        uint64_t v47 = v16[11];
        uint64_t v48 = v47;
      }
      if (v48 == v47) {
        uint64_t v49 = 0;
      }
      else {
        uint64_t v49 = v48;
      }
      uint64_t v50 = v6[4];
      if (v19 < (v6[5] - v50) >> 3
        && (uint64_t v51 = *(void *)(v50 + 8 * v19)) != 0
        && (unint64_t v52 = *(unsigned __int16 *)(v51 + 2 * (HIDWORD(v17) & 0x7F)),
            uint64_t v54 = v6[7],
            uint64_t v53 = v6[8],
            v52 < (v53 - v54) >> 3)
        && ((uint64_t v55 = v54 + 8 * v52, v55 != v53) ? (v56 = *(_DWORD *)(v55 + 4) == v18) : (v56 = 0), v56))
      {
        uint64_t v57 = v6[11];
        uint64_t v58 = v6[10] + 4 * v52;
      }
      else
      {
        uint64_t v57 = v6[11];
        uint64_t v58 = v57;
      }
      if (v58 == v57) {
        uint64_t v59 = 0;
      }
      else {
        uint64_t v59 = v58;
      }
      uint64_t v60 = v7[4];
      if (v19 < (v7[5] - v60) >> 3
        && (uint64_t v61 = *(void *)(v60 + 8 * v19)) != 0
        && (unint64_t v62 = *(unsigned __int16 *)(v61 + 2 * (HIDWORD(v17) & 0x7F)),
            uint64_t v64 = v7[7],
            uint64_t v63 = v7[8],
            v62 < (v63 - v64) >> 3)
        && ((v65 = v64 + 8 * v62, v65 != v63) ? (BOOL v66 = *(_DWORD *)(v65 + 4) == v18) : (BOOL v66 = 0), v66))
      {
        uint64_t v67 = v7[11];
        uint64_t v68 = v7[10] + 24 * v62;
      }
      else
      {
        uint64_t v67 = v7[11];
        uint64_t v68 = v67;
      }
      if (v68 == v67) {
        uint64_t v69 = 0;
      }
      else {
        uint64_t v69 = v68;
      }
      uint64_t v70 = v8[4];
      if (v19 < (v8[5] - v70) >> 3
        && (uint64_t v71 = *(void *)(v70 + 8 * v19)) != 0
        && (unint64_t v72 = *(unsigned __int16 *)(v71 + 2 * (HIDWORD(v17) & 0x7F)),
            uint64_t v74 = v8[7],
            uint64_t v73 = v8[8],
            v72 < (v73 - v74) >> 3)
        && ((uint64_t v75 = v74 + 8 * v72, v75 != v73) ? (v76 = *(_DWORD *)(v75 + 4) == v18) : (v76 = 0), v76))
      {
        uint64_t v77 = v8[11];
        uint64_t v78 = v8[10] + 24 * v72;
      }
      else
      {
        uint64_t v77 = v8[11];
        uint64_t v78 = v77;
      }
      uint64_t v79 = *(void *)(a2 + 24);
      if (!v79)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        JUMPOUT(0x1A2044B9CLL);
      }
      if (v78 == v77) {
        uint64_t v80 = 0;
      }
      else {
        uint64_t v80 = v78;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v79 + 48))(v79, v29, v39, v49, v59, v69, v80);
      uint64_t v82 = *(unint64_t **)(v83 + 32);
      while (1)
      {
        uint64_t v86 = ++v12;
        if (v12 == v82) {
          break;
        }
        uint64_t result = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID,md::ls::RenderState const,md::ls::PipelineSetup const,md::ls::IndexRange const,md::ls::HasMeshHandle const,md::ls::FunctionConstants const>,gdc::Any<md::ls::RenderOrderToUse const,md::ls::InstanceCount const,md::ls::StencilRefValueToUse const,md::ls::VisibilityTestResult const,md::ls::ShouldSkipRender const>,gdc::None<>>::Iterator::isValid(v85);
        if (result) {
          goto LABEL_15;
        }
      }
      unint64_t v12 = v82;
LABEL_15:
      ;
    }
    while (v11 != v12);
  }
  *uint64_t v13 = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::GeocentricBounds const&,md::ls::SliceAssignmentT<(md::SliceType)0> const&,md::ls::MeshRenderableTransformConstantDataHandle const&,md::ls::MeshRenderableBounds const&,md::BoundData &>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::GeocentricBounds>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)0>>(v1);
  uint64_t v5 = gdc::Registry::storage<md::ls::MeshRenderableTransformConstantDataHandle>(v1);
  uint64_t v6 = gdc::Registry::storage<md::ls::MeshRenderableBounds>(v1);
  uint64_t v7 = gdc::Registry::storage<md::BoundData>(v1);
  v10[0] = v2;
  v10[1] = v3;
  v10[2] = v4;
  v10[3] = v5;
  v10[4] = v6;
  void v10[5] = v7;
  gdc::RegistryQueryView<gdc::All<md::ls::MeshRenderableID const,md::ls::IntendedSceneLayer const,md::ls::VisibilityGroupID const,md::ls::RenderableVisibilityOptions const,md::ls::MeshLayerTypeV const,md::ls::SliceAssignmentT<(md::SliceType)8> const>,gdc::Any<>,gdc::None<>>::begin(v11, v10);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v8 = v2;
  }
  else {
    uint64_t v8 = v3;
  }
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < *(void *)(v8 + 64) - *(void *)(v8 + 56)) {
    uint64_t v8 = v4;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v8 + 64) - *(void *)(v8 + 56)) {
    uint64_t v8 = v5;
  }
  if (*(void *)(v6 + 64) - *(void *)(v6 + 56) < *(void *)(v8 + 64) - *(void *)(v8 + 56)) {
    uint64_t v8 = v6;
  }
  if (*(void *)(v7 + 64) - *(void *)(v7 + 56) < *(void *)(v8 + 64) - *(void *)(v8 + 56)) {
    uint64_t v8 = v7;
  }
  return *(void *)(v8 + 64) == v11[8];
}

BOOL gdc::ComponentStorageWrapper<md::ls::MeshRenderableTransformConstantDataHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::MeshRenderableTransformConstantDataHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MeshRenderableTransformConstantDataHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::MeshRenderableTransformConstantDataHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::GeocentricBounds>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::GeocentricBounds>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  uint64_t v14 = (_DWORD *)(a1[10] + 36 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = (_DWORD *)a1[11];
  int v16 = *(v15 - 9);
  v15 -= 9;
  *uint64_t v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  v14[4] = v15[4];
  v14[5] = v15[5];
  v14[6] = v15[6];
  v14[7] = v15[7];
  v14[8] = v15[8];
  a1[11] = v15;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::GeocentricBounds>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::GeocentricBounds>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMeshRenderableBounds>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMeshRenderableBounds>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51BBD8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareMeshRenderableBounds>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareMeshRenderableBounds>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBoundsScaleAndAdjust>(md::ita::PrepareBoundsScaleAndAdjust &&)::{lambda(void)#2},std::allocator<md::ita::PrepareBoundsScaleAndAdjust &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBoundsScaleAndAdjust>(md::ita::PrepareBoundsScaleAndAdjust &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A2C0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBoundsScaleAndAdjust>(md::ita::PrepareBoundsScaleAndAdjust &&)::{lambda(void)#2},std::allocator<md::ita::PrepareBoundsScaleAndAdjust &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBoundsScaleAndAdjust>(md::ita::PrepareBoundsScaleAndAdjust &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBoundsScaleAndAdjust>(md::ita::PrepareBoundsScaleAndAdjust &&)::{lambda(void)#1},std::allocator<md::ita::PrepareBoundsScaleAndAdjust &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBoundsScaleAndAdjust>(md::ita::PrepareBoundsScaleAndAdjust &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52A308;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBoundsScaleAndAdjust>(md::ita::PrepareBoundsScaleAndAdjust &&)::{lambda(void)#1},std::allocator<md::ita::PrepareBoundsScaleAndAdjust &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBoundsScaleAndAdjust>(md::ita::PrepareBoundsScaleAndAdjust &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::BoundZScale &,md::ls::BoundZAdjust &,md::ls::MeshRenderableTransformConstantDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::BoundZScale &,md::ls::BoundZAdjust &,md::ls::MeshRenderableTransformConstantDataHandle const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::MeshRenderableTransformConstantDataHandle>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::BoundZScale>(v1);
  uint64_t v5 = gdc::Registry::storage<md::ls::BoundZAdjust>(v1);
  v8[0] = v2;
  v8[1] = v3;
  uint64_t v8[2] = v4;
  v8[3] = v5;
  gdc::RegistryQueryView<gdc::All<md::ls::MeshRenderableID const,md::ls::BoundZScale,md::ls::BoundZAdjust,md::ls::MeshRenderableTransformConstantDataHandle const>,gdc::Any<>,gdc::None<>>::begin(v9, v8);
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v6 = v2;
  }
  else {
    uint64_t v6 = v4;
  }
  if (*(void *)(v5 + 64) - *(void *)(v5 + 56) < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v6 = v5;
  }
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) < *(void *)(v6 + 64) - *(void *)(v6 + 56)) {
    uint64_t v6 = v3;
  }
  return *(void *)(v6 + 64) == v9[6];
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareBoundsScaleAndAdjust>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareBoundsScaleAndAdjust>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51BB90;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareBoundsScaleAndAdjust>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareBoundsScaleAndAdjust>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyWantsDynamicShadowBounds>(md::ita::ApplyWantsDynamicShadowBounds &&)::{lambda(void)#2},std::allocator<md::ita::ApplyWantsDynamicShadowBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyWantsDynamicShadowBounds>(md::ita::ApplyWantsDynamicShadowBounds &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52AA10;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyWantsDynamicShadowBounds>(md::ita::ApplyWantsDynamicShadowBounds &&)::{lambda(void)#2},std::allocator<md::ita::ApplyWantsDynamicShadowBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyWantsDynamicShadowBounds>(md::ita::ApplyWantsDynamicShadowBounds &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyWantsDynamicShadowBounds>(md::ita::ApplyWantsDynamicShadowBounds &&)::{lambda(void)#1},std::allocator<md::ita::ApplyWantsDynamicShadowBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyWantsDynamicShadowBounds>(md::ita::ApplyWantsDynamicShadowBounds &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52AA58;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyWantsDynamicShadowBounds>(md::ita::ApplyWantsDynamicShadowBounds &&)::{lambda(void)#1},std::allocator<md::ita::ApplyWantsDynamicShadowBounds &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ApplyWantsDynamicShadowBounds>(md::ita::ApplyWantsDynamicShadowBounds &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyWantsDynamicShadowBounds>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyWantsDynamicShadowBounds>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51BF38;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ApplyWantsDynamicShadowBounds>,std::allocator<ecs2::ForwardToExecute<md::ita::ApplyWantsDynamicShadowBounds>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSlices>(md::ita::PrepareSlices &&)::{lambda(void)#2},std::allocator<md::ita::PrepareSlices &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSlices>(md::ita::PrepareSlices &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF526F00;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSlices>(md::ita::PrepareSlices &&)::{lambda(void)#2},std::allocator<md::ita::PrepareSlices &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSlices>(md::ita::PrepareSlices &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSlices>(md::ita::PrepareSlices &&)::{lambda(void)#1},std::allocator<md::ita::PrepareSlices &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSlices>(md::ita::PrepareSlices &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF526F48;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSlices>(md::ita::PrepareSlices &&)::{lambda(void)#1},std::allocator<md::ita::PrepareSlices &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareSlices>(md::ita::PrepareSlices &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::UniqueMaterialVisibilityOptionsHandle const&>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialVisibilityOptionsHandle const&>>::empty(uint64_t a1)
{
  uint64_t v1 = (void *)gdc::Registry::storage<md::ls::UniqueMaterialVisibilityOptionsHandle>(*(int8x8_t **)(*(void *)(a1 + 8) + 8));
  uint64_t v3 = v1[7];
  uint64_t v2 = v1[8];
  uint64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if ((unint64_t v5 = *(unsigned int *)(v3 + 4), v6 = v1[4], v7 = (v1[5] - v6) >> 3, v5 >> 7 >= v7)
      || (uint64_t v8 = *(void *)(v6 + 8 * (v5 >> 7))) == 0
      || (unint64_t v9 = *(unsigned __int16 *)(v8 + 2 * (v5 & 0x7F)), v9 >= v4 >> 3)
      || ((uint64_t v10 = v3 + 8 * v9, v10 != v2) ? (v11 = *(_DWORD *)(v10 + 4) == v5) : (v11 = 0), !v11))
    {
      unint64_t v12 = v4 >> 3;
      uint64_t v13 = v3 + 8;
      while (v13 != v2)
      {
        unint64_t v14 = *(unsigned int *)(v13 + 4);
        uint64_t v15 = v1[8];
        if (v14 >> 7 < v7)
        {
          uint64_t v16 = *(void *)(v6 + 8 * (v14 >> 7));
          uint64_t v15 = v1[8];
          if (v16)
          {
            unint64_t v17 = *(unsigned __int16 *)(v16 + 2 * (v14 & 0x7F));
            uint64_t v15 = v1[8];
            if (v12 > v17)
            {
              uint64_t v15 = v3 + 8 * v17;
              if (*(_DWORD *)(v15 + 4) != v14) {
                uint64_t v15 = v1[8];
              }
            }
          }
        }
        v13 += 8;
        if (v15 != v2)
        {
          uint64_t v3 = v13 - 8;
          return v2 == v3;
        }
      }
      uint64_t v3 = v1[8];
    }
  }
  return v2 == v3;
}

BOOL gdc::ComponentStorageWrapper<md::ls::UniqueMaterialVisibilityOptionsHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::UniqueMaterialVisibilityOptionsHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10] + 16 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  char v16 = *(unsigned char *)(v15 - 8);
  *(void *)uint64_t v14 = *(void *)(v15 - 16);
  *(unsigned char *)(v14 + 8) = v16;
  a1[11] -= 16;
  unint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    unint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UniqueMaterialVisibilityOptionsHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::UniqueMaterialVisibilityOptionsHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *ecs2::Query<md::ls::UniqueMaterialVisibilityOptionsHandle const&>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialVisibilityOptionsHandle const&>>::each(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::UniqueMaterialVisibilityOptionsHandle>(*(int8x8_t **)(*(void *)(a1 + 8) + 8));
  uint64_t v4 = v3;
  uint64_t v6 = (unint64_t *)v3[7];
  uint64_t v5 = (uint64_t *)v3[8];
  uint64_t v7 = (char *)v5 - (char *)v6;
  if (v5 == (uint64_t *)v6
    || (unint64_t v8 = *((unsigned int *)v6 + 1), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 < v10)
    && (uint64_t v11 = *(void *)(v9 + 8 * (v8 >> 7))) != 0
    && (unint64_t v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 < v7 >> 3)
    && ((uint64_t v13 = (uint64_t *)&v6[v12], v13 != v5) ? (v14 = *((_DWORD *)v13 + 1) == v8) : (v14 = 0), v14))
  {
LABEL_19:
    if (v5 != (uint64_t *)v6)
    {
      uint64_t v21 = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
      do
      {
        unint64_t *v21 = *v6;
        unint64_t v23 = *v6;
        unint64_t v24 = *v6 >> 39;
        uint64_t v25 = v4[4];
        if (v24 < (v4[5] - v25) >> 3
          && (uint64_t v26 = *(void *)(v25 + 8 * v24)) != 0
          && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v23) & 0x7F)),
              uint64_t v29 = v4[7],
              uint64_t v28 = v4[8],
              v27 < (v28 - v29) >> 3)
          && ((unint64_t v30 = HIDWORD(v23), v31 = v29 + 8 * v27, v31 != v28)
            ? (BOOL v32 = *(_DWORD *)(v31 + 4) == v30)
            : (BOOL v32 = 0),
              v32))
        {
          uint64_t v33 = v4[11];
          uint64_t v34 = v4[10] + 16 * v27;
          uint64_t v35 = *(void *)(a2 + 24);
          if (!v35)
          {
LABEL_44:
            std::__throw_bad_function_call[abi:nn180100]();
            break;
          }
        }
        else
        {
          uint64_t v33 = v4[11];
          uint64_t v34 = v33;
          uint64_t v35 = *(void *)(a2 + 24);
          if (!v35) {
            goto LABEL_44;
          }
        }
        if (v34 == v33) {
          uint64_t v36 = 0;
        }
        else {
          uint64_t v36 = v34;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 48))(v35, v36);
        uint64_t v37 = v4[4];
        uint64_t v38 = v4[7];
        unint64_t v22 = (uint64_t *)v4[8];
        uint64_t v39 = (uint64_t *)(v6 + 1);
        while (v39 != v22)
        {
          unint64_t v40 = *((unsigned int *)v39 + 1);
          uint64_t v41 = v4[8];
          if (v40 >> 7 < (v4[5] - v37) >> 3)
          {
            uint64_t v42 = *(void *)(v37 + 8 * (v40 >> 7));
            uint64_t v41 = v4[8];
            if (v42)
            {
              unint64_t v43 = *(unsigned __int16 *)(v42 + 2 * (v40 & 0x7F));
              uint64_t v41 = v4[8];
              if (((uint64_t)v22 - v38) >> 3 > v43)
              {
                uint64_t v41 = v38 + 8 * v43;
                if (*(_DWORD *)(v41 + 4) != v40) {
                  uint64_t v41 = v4[8];
                }
              }
            }
          }
          ++v39;
          if ((uint64_t *)v41 != v22)
          {
            unint64_t v22 = v39 - 1;
            break;
          }
        }
        uint64_t v6 = (unint64_t *)v22;
      }
      while (v5 != v22);
    }
  }
  else
  {
    unint64_t v15 = v7 >> 3;
    char v16 = (uint64_t *)(v6 + 1);
    while (v16 != v5)
    {
      unint64_t v17 = *((unsigned int *)v16 + 1);
      uint64_t v18 = (uint64_t *)v3[8];
      if (v17 >> 7 < v10)
      {
        uint64_t v19 = *(void *)(v9 + 8 * (v17 >> 7));
        uint64_t v18 = (uint64_t *)v3[8];
        if (v19)
        {
          unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
          uint64_t v18 = (uint64_t *)v3[8];
          if (v15 > v20)
          {
            uint64_t v18 = (uint64_t *)&v6[v20];
            if (*((_DWORD *)v18 + 1) != v17) {
              uint64_t v18 = (uint64_t *)v3[8];
            }
          }
        }
      }
      ++v16;
      if (v18 != v5)
      {
        uint64_t v6 = (unint64_t *)(v16 - 1);
        goto LABEL_19;
      }
    }
  }
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  void *result = 0xFFFFFFFF00000000;
  return result;
}

BOOL ecs2::Query<md::ls::MeshRenderableID const&,md::ls::PrimitiveType const&,md::ls::SharedMaterialVisibilityOptionsHandle const*,md::ls::RenderableVisibilityOptions const*,md::ls::MarketMask const*>::Model<ecs2::RuntimeQuery<md::ls::MeshRenderableID const&,md::ls::PrimitiveType const&,md::ls::SharedMaterialVisibilityOptionsHandle const*,md::ls::RenderableVisibilityOptions const*,md::ls::MarketMask const*>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::MeshRenderableID>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::PrimitiveType>(v1);
  gdc::Registry::storage<md::ls::SharedMaterialVisibilityOptionsHandle>(v1);
  gdc::Registry::storage<md::ls::RenderableVisibilityOptions>(v1);
  gdc::Registry::storage<md::ls::MarketMask>(v1);
  if (v3[8] - v3[7] >= v2[8] - v2[7]) {
    uint64_t v4 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v4 = (uint64_t)(v3 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v8, v4, v2, v3, *(void *)(v4 + 24));
  if (v3[8] - v3[7] >= v2[8] - v2[7]) {
    uint64_t v5 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v5 = (uint64_t)(v3 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v7, v5, v2, v3, *(void *)(v5 + 32));
  return v7[4] == v8[4];
}

BOOL gdc::ComponentStorageWrapper<md::ls::MarketMask>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::MarketMask>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(unsigned char *)(v14 + v7) = *(unsigned char *)--a1[11];
  unint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    unint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MarketMask>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::MarketMask>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::SharedMaterialVisibilityOptionsHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::SharedMaterialVisibilityOptionsHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  unint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    unint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::SharedMaterialVisibilityOptionsHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::SharedMaterialVisibilityOptionsHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PrimitiveType>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::PrimitiveType>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PrimitiveType>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::PrimitiveType>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareSlices>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareSlices>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51A1B0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareSlices>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareSlices>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleEmmisiveColor>(md::ita::UpdateStyleEmmisiveColor &&)::{lambda(void)#2},std::allocator<md::ita::UpdateStyleEmmisiveColor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleEmmisiveColor>(md::ita::UpdateStyleEmmisiveColor &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF5295D0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleEmmisiveColor>(md::ita::UpdateStyleEmmisiveColor &&)::{lambda(void)#2},std::allocator<md::ita::UpdateStyleEmmisiveColor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleEmmisiveColor>(md::ita::UpdateStyleEmmisiveColor &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleEmmisiveColor>(md::ita::UpdateStyleEmmisiveColor &&)::{lambda(void)#1},std::allocator<md::ita::UpdateStyleEmmisiveColor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleEmmisiveColor>(md::ita::UpdateStyleEmmisiveColor &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529618;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleEmmisiveColor>(md::ita::UpdateStyleEmmisiveColor &&)::{lambda(void)#1},std::allocator<md::ita::UpdateStyleEmmisiveColor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::UpdateStyleEmmisiveColor>(md::ita::UpdateStyleEmmisiveColor &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::UniqueStyleEmissiveDataKeyHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::UniqueStyleEmissiveDataKeyHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 < (v5 - v4) >> 3)
  {
    uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
    if (v6)
    {
      unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
      uint64_t v9 = a1[7];
      uint64_t v8 = a1[8];
      if (v7 < (v8 - v9) >> 3)
      {
        unint64_t v10 = HIDWORD(a2);
        uint64_t v11 = v9 + 8 * v7;
        if (v11 != v8 && *(_DWORD *)(v11 + 4) == v10)
        {
          uint64_t v13 = a1[10];
          geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
          *(void *)(v13 + 8 * v7) = *(void *)(a1[11] - 8);
          a1[11] -= 8;
          uint64_t v14 = (void *)a1[28];
          if (v14)
          {
            uint64_t v15 = a1[31];
            while (1)
            {
              v20[0] = &v18;
              v20[1] = 1;
              uint64_t v19 = v15;
              uint64_t v16 = v14[6];
              if (!v16) {
                break;
              }
              (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v19, v20);
              uint64_t v14 = (void *)*v14;
              if (!v14) {
                return;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
            gdc::ComponentStorageWrapper<md::ls::UniqueStyleEmissiveDataKeyHandle>::~ComponentStorageWrapper(v17);
          }
        }
      }
    }
  }
}

void gdc::ComponentStorageWrapper<md::ls::UniqueStyleEmissiveDataKeyHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateStyleEmmisiveColor>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateStyleEmmisiveColor>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B518;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::UpdateStyleEmmisiveColor>,std::allocator<ecs2::ForwardToExecute<md::ita::UpdateStyleEmmisiveColor>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForUpdatedStyle>(md::ita::ProcessMaterialsForUpdatedStyle &&)::{lambda(void)#2},std::allocator<md::ita::ProcessMaterialsForUpdatedStyle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForUpdatedStyle>(md::ita::ProcessMaterialsForUpdatedStyle &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B8B0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForUpdatedStyle>(md::ita::ProcessMaterialsForUpdatedStyle &&)::{lambda(void)#2},std::allocator<md::ita::ProcessMaterialsForUpdatedStyle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForUpdatedStyle>(md::ita::ProcessMaterialsForUpdatedStyle &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForUpdatedStyle>(md::ita::ProcessMaterialsForUpdatedStyle &&)::{lambda(void)#1},std::allocator<md::ita::ProcessMaterialsForUpdatedStyle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForUpdatedStyle>(md::ita::ProcessMaterialsForUpdatedStyle &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52B8F8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForUpdatedStyle>(md::ita::ProcessMaterialsForUpdatedStyle &&)::{lambda(void)#1},std::allocator<md::ita::ProcessMaterialsForUpdatedStyle &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForUpdatedStyle>(md::ita::ProcessMaterialsForUpdatedStyle &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialZIndexHandle &>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::UniqueMaterialData>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::UniqueMaterialZIndexHandle>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7]) {
    uint64_t v6 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(void *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7]) {
    uint64_t v7 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v7 = (uint64_t)v5;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

BOOL gdc::ComponentStorageWrapper<md::ls::UniqueMaterialZIndexHandle>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::UniqueMaterialZIndexHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10] + 24 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  uint64_t v16 = *(void *)(v15 - 8);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)(v15 - 24);
  *(void *)(v14 + 16) = v16;
  a1[11] -= 24;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UniqueMaterialZIndexHandle>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::UniqueMaterialZIndexHandle>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialVisibilityOptionsHandle &>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::UniqueMaterialData>(v1);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::UniqueMaterialVisibilityOptionsHandle>(v1);
  uint64_t v4 = v3;
  uint64_t v5 = v3 + 4;
  if (v3[8] - v3[7] >= v2[8] - v2[7]) {
    uint64_t v6 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v6 = (uint64_t)(v3 + 4);
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v10, v6, v2, v3, *(void *)(v6 + 24));
  if (v4[8] - v4[7] >= v2[8] - v2[7]) {
    uint64_t v7 = (uint64_t)(v2 + 4);
  }
  else {
    uint64_t v7 = (uint64_t)v5;
  }
  gdc::RegistryQueryView<gdc::All<md::ls::FinishedProcessingDepthPrePass const,md::ls::PendingProcessingDepthPrePass const>,gdc::Any<>,gdc::None<>>::Iterator::Iterator(v9, v7, v2, v4, *(void *)(v7 + 32));
  return v9[4] == v10[4];
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForUpdatedStyle>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForUpdatedStyle>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C688;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForUpdatedStyle>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForUpdatedStyle>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForZIndex>(md::ita::ProcessMaterialsForZIndex &&)::{lambda(void)#2},std::allocator<md::ita::ProcessMaterialsForZIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForZIndex>(md::ita::ProcessMaterialsForZIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF5299C0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForZIndex>(md::ita::ProcessMaterialsForZIndex &&)::{lambda(void)#2},std::allocator<md::ita::ProcessMaterialsForZIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForZIndex>(md::ita::ProcessMaterialsForZIndex &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForZIndex>(md::ita::ProcessMaterialsForZIndex &&)::{lambda(void)#1},std::allocator<md::ita::ProcessMaterialsForZIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForZIndex>(md::ita::ProcessMaterialsForZIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF529A08;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForZIndex>(md::ita::ProcessMaterialsForZIndex &&)::{lambda(void)#1},std::allocator<md::ita::ProcessMaterialsForZIndex &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::ProcessMaterialsForZIndex>(md::ita::ProcessMaterialsForZIndex &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&,md::ls::DefaultZIndex const*,md::ls::ZIndex const*>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = (void *)gdc::Registry::storage<md::ls::UniqueMaterialData>(v1);
  gdc::Registry::storage<md::ls::DefaultZIndex>(v1);
  gdc::Registry::storage<md::ls::ZIndex>(v1);
  uint64_t v4 = v2[7];
  uint64_t v3 = v2[8];
  uint64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((unint64_t v6 = *(unsigned int *)(v4 + 4), v7 = v2[4], v8 = (v2[5] - v7) >> 3, v6 >> 7 >= v8)
      || (uint64_t v9 = *(void *)(v7 + 8 * (v6 >> 7))) == 0
      || (unint64_t v10 = *(unsigned __int16 *)(v9 + 2 * (v6 & 0x7F)), v10 >= v5 >> 3)
      || ((uint64_t v11 = v4 + 8 * v10, v11 != v3) ? (v12 = *(_DWORD *)(v11 + 4) == v6) : (v12 = 0), !v12))
    {
      unint64_t v13 = v5 >> 3;
      uint64_t v14 = v4 + 8;
      while (v14 != v3)
      {
        unint64_t v15 = *(unsigned int *)(v14 + 4);
        uint64_t v16 = v2[8];
        if (v15 >> 7 < v8)
        {
          uint64_t v17 = *(void *)(v7 + 8 * (v15 >> 7));
          uint64_t v16 = v2[8];
          if (v17)
          {
            unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (v15 & 0x7F));
            uint64_t v16 = v2[8];
            if (v13 > v18)
            {
              uint64_t v16 = v4 + 8 * v18;
              if (*(_DWORD *)(v16 + 4) != v15) {
                uint64_t v16 = v2[8];
              }
            }
          }
        }
        v14 += 8;
        if (v16 != v3)
        {
          uint64_t v4 = v14 - 8;
          return v3 == v4;
        }
      }
      uint64_t v4 = v2[8];
    }
  }
  return v3 == v4;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForZIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForZIndex>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B710;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForZIndex>,std::allocator<ecs2::ForwardToExecute<md::ita::ProcessMaterialsForZIndex>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfStyleZChanged>(md::ita::CheckIfStyleZChanged &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfStyleZChanged &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfStyleZChanged>(md::ita::CheckIfStyleZChanged &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF527EC0;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfStyleZChanged>(md::ita::CheckIfStyleZChanged &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfStyleZChanged &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfStyleZChanged>(md::ita::CheckIfStyleZChanged &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfStyleZChanged>(md::ita::CheckIfStyleZChanged &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfStyleZChanged &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfStyleZChanged>(md::ita::CheckIfStyleZChanged &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF527F08;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfStyleZChanged>(md::ita::CheckIfStyleZChanged &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfStyleZChanged &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfStyleZChanged>(md::ita::CheckIfStyleZChanged &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::UpdatesWithStyleZChange>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::UpdatesWithStyleZChange>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UpdatesWithStyleZChange>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::UpdatesWithStyleZChange>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfStyleZChanged>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfStyleZChanged>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51A990;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfStyleZChanged>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfStyleZChanged>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialRequiresEmissiveColor>(md::ita::CheckIfMaterialRequiresEmissiveColor &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfMaterialRequiresEmissiveColor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialRequiresEmissiveColor>(md::ita::CheckIfMaterialRequiresEmissiveColor &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C750;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialRequiresEmissiveColor>(md::ita::CheckIfMaterialRequiresEmissiveColor &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfMaterialRequiresEmissiveColor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialRequiresEmissiveColor>(md::ita::CheckIfMaterialRequiresEmissiveColor &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialRequiresEmissiveColor>(md::ita::CheckIfMaterialRequiresEmissiveColor &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfMaterialRequiresEmissiveColor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialRequiresEmissiveColor>(md::ita::CheckIfMaterialRequiresEmissiveColor &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52C798;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialRequiresEmissiveColor>(md::ita::CheckIfMaterialRequiresEmissiveColor &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfMaterialRequiresEmissiveColor &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialRequiresEmissiveColor>(md::ita::CheckIfMaterialRequiresEmissiveColor &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::MaterialPendingProcessing>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::MaterialPendingProcessing>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MaterialPendingProcessing>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::MaterialPendingProcessing>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfMaterialRequiresEmissiveColor>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfMaterialRequiresEmissiveColor>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51CDD8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfMaterialRequiresEmissiveColor>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfMaterialRequiresEmissiveColor>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectFlyoverMeshRenderables>(md::ita::CollectFlyoverMeshRenderables &&)::{lambda(void)#2},std::allocator<md::ita::CollectFlyoverMeshRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectFlyoverMeshRenderables>(md::ita::CollectFlyoverMeshRenderables &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52AE00;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectFlyoverMeshRenderables>(md::ita::CollectFlyoverMeshRenderables &&)::{lambda(void)#2},std::allocator<md::ita::CollectFlyoverMeshRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectFlyoverMeshRenderables>(md::ita::CollectFlyoverMeshRenderables &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectFlyoverMeshRenderables>(md::ita::CollectFlyoverMeshRenderables &&)::{lambda(void)#1},std::allocator<md::ita::CollectFlyoverMeshRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectFlyoverMeshRenderables>(md::ita::CollectFlyoverMeshRenderables &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EF52AE48;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectFlyoverMeshRenderables>(md::ita::CollectFlyoverMeshRenderables &&)::{lambda(void)#1},std::allocator<md::ita::CollectFlyoverMeshRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectFlyoverMeshRenderables>(md::ita::CollectFlyoverMeshRenderables &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const&,md::ls::MapDataTypeV const&,md::ls::AssociationTileHandle const&,md::ls::GlobeMatrixData const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::FlyoverOctileKey const&>::Model<ecs2::RuntimeQuery<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const&,md::ls::MapDataTypeV const&,md::ls::AssociationTileHandle const&,md::ls::GlobeMatrixData const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::FlyoverOctileKey const&>>::empty(uint64_t a1)
{
  gdc::Registry::storageTuple<md::ls::RegisterHandle,md::ls::EnteringView,md::ls::BaseMapTileHandle,md::ls::TileRenderableTypeT<md::FlyoverRenderable>,md::ls::MapDataTypeV,md::ls::AssociationTileHandle,md::ls::GlobeMatrixData,md::ls::TileMatrix,md::ls::TileTransformConstantDataHandle,md::ls::TileViewConstantDataHandle,md::ls::FlyoverOctileKey>((uint64_t *)&v11, *(int8x8_t **)(*(void *)(a1 + 8) + 8));
  uint64_t v1 = v16;
  long long v7 = v12;
  long long v8 = v11;
  long long v5 = v14;
  long long v6 = v13;
  long long v4 = v15;
  v9[0] = v11;
  v9[1] = v12;
  v9[2] = v13;
  v9[3] = v14;
  v9[4] = v15;
  uint64_t v10 = v16;
  gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const,md::ls::MapDataTypeV const,md::ls::AssociationTileHandle const,md::ls::GlobeMatrixData const,md::ls::TileMatrix const,md::ls::TileTransformConstantDataHandle const,md::ls::TileViewConstantDataHandle const,md::ls::FlyoverOctileKey const>,gdc::Any<>,gdc::None<>>::begin((uint64_t *)&v11, v9);
  v18[0] = v8;
  v18[1] = v7;
  unsigned char v18[2] = v6;
  v18[3] = v5;
  v18[4] = v4;
  uint64_t v19 = v1;
  uint64_t v2 = gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const,md::ls::MapDataTypeV const,md::ls::AssociationTileHandle const,md::ls::GlobeMatrixData const,md::ls::TileMatrix const,md::ls::TileTransformConstantDataHandle const,md::ls::TileViewConstantDataHandle const,md::ls::FlyoverOctileKey const>,gdc::Any<>,gdc::None<>>::minSizeStorage<gdc::ComponentStorageWrapper<md::ls::RegisterHandle> const*,gdc::ComponentStorageWrapper<md::ls::EnteringView> const*,gdc::ComponentStorageWrapper<md::ls::BaseMapTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileRenderableTypeT<md::FlyoverRenderable>> const*,gdc::ComponentStorageWrapper<md::ls::MapDataTypeV> const*,gdc::ComponentStorageWrapper<md::ls::AssociationTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::GlobeMatrixData> const*,gdc::ComponentStorageWrapper<md::ls::TileMatrix> const*,gdc::ComponentStorageWrapper<md::ls::TileTransformConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileViewConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::FlyoverOctileKey> const*>(v18);
  return *(void *)(v2 + 32) == v17;
}

uint64_t gdc::Registry::storageTuple<md::ls::RegisterHandle,md::ls::EnteringView,md::ls::BaseMapTileHandle,md::ls::TileRenderableTypeT<md::FlyoverRenderable>,md::ls::MapDataTypeV,md::ls::AssociationTileHandle,md::ls::GlobeMatrixData,md::ls::TileMatrix,md::ls::TileTransformConstantDataHandle,md::ls::TileViewConstantDataHandle,md::ls::FlyoverOctileKey>(uint64_t *a1, int8x8_t *a2)
{
  uint64_t v14 = gdc::Registry::storage<md::ls::RegisterHandle>(a2);
  uint64_t v13 = gdc::Registry::storage<md::ls::EnteringView>(a2);
  uint64_t v4 = gdc::Registry::storage<md::ls::BaseMapTileHandle>(a2);
  uint64_t v5 = gdc::Registry::storage<md::ls::TileRenderableTypeT<md::FlyoverRenderable>>(a2);
  uint64_t v6 = gdc::Registry::storage<md::ls::MapDataTypeV>(a2);
  uint64_t v7 = gdc::Registry::storage<md::ls::AssociationTileHandle>(a2);
  uint64_t v8 = gdc::Registry::storage<md::ls::GlobeMatrixData>(a2);
  uint64_t v9 = gdc::Registry::storage<md::ls::TileMatrix>(a2);
  uint64_t v10 = gdc::Registry::storage<md::ls::TileTransformConstantDataHandle>(a2);
  uint64_t v11 = gdc::Registry::storage<md::ls::TileViewConstantDataHandle>(a2);
  uint64_t result = gdc::Registry::storage<md::ls::FlyoverOctileKey>(a2);
  *a1 = v14;
  a1[1] = v13;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = result;
  return result;
}

uint64_t gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const,md::ls::MapDataTypeV const,md::ls::AssociationTileHandle const,md::ls::GlobeMatrixData const,md::ls::TileMatrix const,md::ls::TileTransformConstantDataHandle const,md::ls::TileViewConstantDataHandle const,md::ls::FlyoverOctileKey const>,gdc::Any<>,gdc::None<>>::begin(uint64_t *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v16 = a2[10];
  uint64_t v17 = a2[9];
  v18[0] = *a2;
  uint64_t v3 = v18[0];
  v18[1] = v4;
  unsigned char v18[2] = v5;
  v18[3] = v6;
  v18[4] = v7;
  _OWORD v18[5] = v8;
  v18[6] = v9;
  v18[7] = v10;
  v18[8] = v11;
  v18[9] = v17;
  v18[10] = v16;
  uint64_t result = gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const,md::ls::MapDataTypeV const,md::ls::AssociationTileHandle const,md::ls::GlobeMatrixData const,md::ls::TileMatrix const,md::ls::TileTransformConstantDataHandle const,md::ls::TileViewConstantDataHandle const,md::ls::FlyoverOctileKey const>,gdc::Any<>,gdc::None<>>::minSizeStorage<gdc::ComponentStorageWrapper<md::ls::RegisterHandle> const*,gdc::ComponentStorageWrapper<md::ls::EnteringView> const*,gdc::ComponentStorageWrapper<md::ls::BaseMapTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileRenderableTypeT<md::FlyoverRenderable>> const*,gdc::ComponentStorageWrapper<md::ls::MapDataTypeV> const*,gdc::ComponentStorageWrapper<md::ls::AssociationTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::GlobeMatrixData> const*,gdc::ComponentStorageWrapper<md::ls::TileMatrix> const*,gdc::ComponentStorageWrapper<md::ls::TileTransformConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileViewConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::FlyoverOctileKey> const*>(v18);
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v17;
  a1[11] = v16;
  uint64_t v14 = *(void *)(result + 24);
  uint64_t v13 = *(void *)(result + 32);
  a1[13] = v14;
  if (v13 != v14)
  {
    uint64_t result = gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const,md::ls::MapDataTypeV const,md::ls::AssociationTileHandle const,md::ls::GlobeMatrixData const,md::ls::TileMatrix const,md::ls::TileTransformConstantDataHandle const,md::ls::TileViewConstantDataHandle const,md::ls::FlyoverOctileKey const>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
    if ((result & 1) == 0)
    {
      uint64_t v15 = v14 + 8;
      do
      {
        a1[13] = v15;
        if (v15 == v13) {
          break;
        }
        uint64_t result = gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const,md::ls::MapDataTypeV const,md::ls::AssociationTileHandle const,md::ls::GlobeMatrixData const,md::ls::TileMatrix const,md::ls::TileTransformConstantDataHandle const,md::ls::TileViewConstantDataHandle const,md::ls::FlyoverOctileKey const>,gdc::Any<>,gdc::None<>>::Iterator::isValid(a1);
        v15 += 8;
      }
      while (!result);
    }
  }
  return result;
}

uint64_t gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const,md::ls::MapDataTypeV const,md::ls::AssociationTileHandle const,md::ls::GlobeMatrixData const,md::ls::TileMatrix const,md::ls::TileTransformConstantDataHandle const,md::ls::TileViewConstantDataHandle const,md::ls::FlyoverOctileKey const>,gdc::Any<>,gdc::None<>>::minSizeStorage<gdc::ComponentStorageWrapper<md::ls::RegisterHandle> const*,gdc::ComponentStorageWrapper<md::ls::EnteringView> const*,gdc::ComponentStorageWrapper<md::ls::BaseMapTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileRenderableTypeT<md::FlyoverRenderable>> const*,gdc::ComponentStorageWrapper<md::ls::MapDataTypeV> const*,gdc::ComponentStorageWrapper<md::ls::AssociationTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::GlobeMatrixData> const*,gdc::ComponentStorageWrapper<md::ls::TileMatrix> const*,gdc::ComponentStorageWrapper<md::ls::TileTransformConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileViewConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::FlyoverOctileKey> const*>(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1) {
    uint64_t v2 = *a1 + 32;
  }
  else {
    uint64_t v2 = 0;
  }
  if (v1) {
    uint64_t v3 = v1 + 32;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  if (v4) {
    uint64_t v6 = v4 + 32;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v5) {
    uint64_t v7 = v5 + 32;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  if (v8) {
    uint64_t v10 = v8 + 32;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v9) {
    uint64_t v11 = v9 + 32;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = a1[6];
  uint64_t v13 = a1[7];
  if (v12) {
    uint64_t v14 = v12 + 32;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v13) {
    uint64_t v15 = v13 + 32;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = a1[8];
  uint64_t v17 = a1[9];
  uint64_t v18 = v16 + 32;
  if (!v16) {
    uint64_t v18 = 0;
  }
  if (v17) {
    uint64_t v19 = v17 + 32;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = a1[10];
  if (v20) {
    uint64_t v21 = v20 + 32;
  }
  else {
    uint64_t v21 = 0;
  }
  if (*(void *)(v3 + 32) - *(void *)(v3 + 24) < *(void *)(v2 + 32) - *(void *)(v2 + 24)) {
    uint64_t v2 = v3;
  }
  if (*(void *)(v6 + 32) - *(void *)(v6 + 24) < *(void *)(v2 + 32) - *(void *)(v2 + 24)) {
    uint64_t v2 = v6;
  }
  if (*(void *)(v7 + 32) - *(void *)(v7 + 24) < *(void *)(v2 + 32) - *(void *)(v2 + 24)) {
    uint64_t v2 = v7;
  }
  if (*(void *)(v10 + 32) - *(void *)(v10 + 24) < *(void *)(v2 + 32) - *(void *)(v2 + 24)) {
    uint64_t v2 = v10;
  }
  if (*(void *)(v11 + 32) - *(void *)(v11 + 24) >= *(void *)(v2 + 32) - *(void *)(v2 + 24)) {
    uint64_t v11 = v2;
  }
  if (*(void *)(v14 + 32) - *(void *)(v14 + 24) >= *(void *)(v11 + 32) - *(void *)(v11 + 24)) {
    uint64_t v14 = v11;
  }
  if (*(void *)(v15 + 32) - *(void *)(v15 + 24) >= *(void *)(v14 + 32) - *(void *)(v14 + 24)) {
    uint64_t v15 = v14;
  }
  if (*(void *)(v18 + 32) - *(void *)(v18 + 24) >= *(void *)(v15 + 32) - *(void *)(v15 + 24)) {
    uint64_t v18 = v15;
  }
  if (*(void *)(v19 + 32) - *(void *)(v19 + 24) >= *(void *)(v18 + 32) - *(void *)(v18 + 24)) {
    uint64_t v19 = v18;
  }
  if (*(void *)(v21 + 32) - *(void *)(v21 + 24) >= *(void *)(v19 + 32) - *(void *)(v19 + 24)) {
    return v19;
  }
  else {
    return v21;
  }
}

BOOL gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const,md::ls::MapDataTypeV const,md::ls::AssociationTileHandle const,md::ls::GlobeMatrixData const,md::ls::TileMatrix const,md::ls::TileTransformConstantDataHandle const,md::ls::TileViewConstantDataHandle const,md::ls::FlyoverOctileKey const>,gdc::Any<>,gdc::None<>>::Iterator::isValid(void *a1)
{
  uint64_t v1 = (void *)a1[1];
  unint64_t v2 = *(unsigned int *)(a1[13] + 4);
  unint64_t v3 = v2 >> 7;
  uint64_t v4 = v1[4];
  if (v2 >> 7 >= (v1[5] - v4) >> 3) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 8 * v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v2 & 0x7F;
  unint64_t v7 = *(unsigned __int16 *)(v5 + 2 * v6);
  uint64_t v10 = v1 + 7;
  uint64_t v8 = v1[7];
  uint64_t v9 = v10[1];
  if (v7 >= (v9 - v8) >> 3) {
    return 0;
  }
  uint64_t v11 = v8 + 8 * v7;
  if (v11 == v9 || *(_DWORD *)(v11 + 4) != v2) {
    return 0;
  }
  uint64_t v13 = (void *)a1[2];
  uint64_t v14 = v13[4];
  if (v3 >= (v13[5] - v14) >> 3) {
    return 0;
  }
  uint64_t v15 = *(void *)(v14 + 8 * v3);
  if (!v15) {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v15 + 2 * v6);
  uint64_t v19 = v13 + 7;
  uint64_t v17 = v13[7];
  uint64_t v18 = v19[1];
  if (v16 >= (v18 - v17) >> 3) {
    return 0;
  }
  uint64_t v20 = v17 + 8 * v16;
  if (v20 == v18 || *(_DWORD *)(v20 + 4) != v2) {
    return 0;
  }
  unint64_t v22 = (void *)a1[3];
  uint64_t v23 = v22[4];
  if (v3 >= (v22[5] - v23) >> 3) {
    return 0;
  }
  uint64_t v24 = *(void *)(v23 + 8 * v3);
  if (!v24) {
    return 0;
  }
  unint64_t v25 = *(unsigned __int16 *)(v24 + 2 * v6);
  uint64_t v28 = v22 + 7;
  uint64_t v26 = v22[7];
  uint64_t v27 = v28[1];
  if (v25 >= (v27 - v26) >> 3) {
    return 0;
  }
  uint64_t v29 = v26 + 8 * v25;
  if (v29 == v27 || *(_DWORD *)(v29 + 4) != v2) {
    return 0;
  }
  uint64_t v31 = (void *)a1[4];
  uint64_t v32 = v31[4];
  if (v3 >= (v31[5] - v32) >> 3) {
    return 0;
  }
  uint64_t v33 = *(void *)(v32 + 8 * v3);
  if (!v33) {
    return 0;
  }
  unint64_t v34 = *(unsigned __int16 *)(v33 + 2 * v6);
  uint64_t v37 = v31 + 7;
  uint64_t v35 = v31[7];
  uint64_t v36 = v37[1];
  if (v34 >= (v36 - v35) >> 3) {
    return 0;
  }
  unsigned int v81 = *(_DWORD *)(a1[13] + 4);
  uint64_t v38 = v35 + 8 * v34;
  if (v38 == v36 || *(_DWORD *)(v38 + 4) != v2) {
    return 0;
  }
  unint64_t v40 = (void *)a1[5];
  uint64_t v41 = v40[4];
  if (v3 >= (v40[5] - v41) >> 3) {
    return 0;
  }
  uint64_t v42 = *(void *)(v41 + 8 * v3);
  if (!v42) {
    return 0;
  }
  unint64_t v43 = *(unsigned __int16 *)(v42 + 2 * v6);
  BOOL v46 = v40 + 7;
  uint64_t v44 = v40[7];
  uint64_t v45 = v46[1];
  if (v43 >= (v45 - v44) >> 3) {
    return 0;
  }
  BOOL result = 0;
  uint64_t v48 = v44 + 8 * v43;
  if (v48 == v45 || *(_DWORD *)(v48 + 4) != v81) {
    return result;
  }
  uint64_t v49 = (void *)a1[6];
  uint64_t v50 = v49[4];
  if (v3 >= (v49[5] - v50) >> 3) {
    return 0;
  }
  uint64_t v51 = *(void *)(v50 + 8 * v3);
  if (!v51) {
    return 0;
  }
  unint64_t v52 = *(unsigned __int16 *)(v51 + 2 * v6);
  uint64_t v55 = v49 + 7;
  uint64_t v53 = v49[7];
  uint64_t v54 = v55[1];
  if (v52 >= (v54 - v53) >> 3) {
    return 0;
  }
  BOOL result = 0;
  uint64_t v56 = v53 + 8 * v52;
  if (v56 == v54 || *(_DWORD *)(v56 + 4) != v81) {
    return result;
  }
  uint64_t v57 = (void *)a1[7];
  uint64_t v58 = v57[4];
  if (v3 >= (v57[5] - v58) >> 3) {
    return 0;
  }
  uint64_t v59 = *(void *)(v58 + 8 * v3);
  if (!v59) {
    return 0;
  }
  unint64_t v60 = *(unsigned __int16 *)(v59 + 2 * v6);
  uint64_t v63 = v57 + 7;
  uint64_t v61 = v57[7];
  uint64_t v62 = v63[1];
  if (v60 >= (v62 - v61) >> 3) {
    return 0;
  }
  BOOL result = 0;
  uint64_t v64 = v61 + 8 * v60;
  if (v64 == v62 || *(_DWORD *)(v64 + 4) != v81) {
    return result;
  }
  uint64_t v65 = (void *)a1[8];
  uint64_t v66 = v65[4];
  if (v3 >= (v65[5] - v66) >> 3) {
    return 0;
  }
  uint64_t v67 = *(void *)(v66 + 8 * v3);
  if (!v67) {
    return 0;
  }
  unint64_t v68 = *(unsigned __int16 *)(v67 + 2 * v6);
  uint64_t v71 = v65 + 7;
  uint64_t v69 = v65[7];
  uint64_t v70 = v71[1];
  if (v68 >= (v70 - v69) >> 3) {
    return 0;
  }
  BOOL result = 0;
  uint64_t v72 = v69 + 8 * v68;
  if (v72 == v70 || *(_DWORD *)(v72 + 4) != v81) {
    return result;
  }
  uint64_t v73 = (void *)a1[9];
  uint64_t v74 = v73[4];
  if (v3 >= (v73[5] - v74) >> 3) {
    return 0;
  }
  uint64_t v75 = *(void *)(v74 + 8 * v3);
  if (!v75) {
    return 0;
  }
  unint64_t v76 = *(unsigned __int16 *)(v75 + 2 * v6);
  uint64_t v79 = v73 + 7;
  uint64_t v78 = v73[7];
  uint64_t v77 = v79[1];
  if (v76 >= (v77 - v78) >> 3) {
    return 0;
  }
  BOOL result = 0;
  uint64_t v80 = v78 + 8 * v76;
  if (v80 != v77 && *(_DWORD *)(v80 + 4) == v81)
  {
    BOOL result = geo::sparse_map<gdc::Entity,md::ls::TilePrepassConstantDataHandle>::count((void *)(a1[10] + 32), v81);
    if (result) {
      return geo::sparse_map<gdc::Entity,md::ls::TilePrepassConstantDataHandle>::count((void *)(a1[11] + 32), v81);
    }
  }
  return result;
}

unint64_t *ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const&,md::ls::MapDataTypeV const&,md::ls::AssociationTileHandle const&,md::ls::GlobeMatrixData const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::FlyoverOctileKey const&>::Model<ecs2::RuntimeQuery<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const&,md::ls::MapDataTypeV const&,md::ls::AssociationTileHandle const&,md::ls::GlobeMatrixData const&,md::ls::TileMatrix const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::FlyoverOctileKey const&>>::each(uint64_t a1, uint64_t a2)
{
  gdc::Registry::storageTuple<md::ls::RegisterHandle,md::ls::EnteringView,md::ls::BaseMapTileHandle,md::ls::TileRenderableTypeT<md::FlyoverRenderable>,md::ls::MapDataTypeV,md::ls::AssociationTileHandle,md::ls::GlobeMatrixData,md::ls::TileMatrix,md::ls::TileTransformConstantDataHandle,md::ls::TileViewConstantDataHandle,md::ls::FlyoverOctileKey>((uint64_t *)&v126, *(int8x8_t **)(*(void *)(a1 + 8) + 8));
  unint64_t v2 = v131;
  long long v120 = v127;
  long long v122 = v126;
  long long v117 = v129;
  long long v118 = v128;
  long long v123 = v130;
  v133[0] = v126;
  v133[1] = v127;
  v133[2] = v128;
  v133[3] = v129;
  v133[4] = v130;
  unint64_t v134 = v131;
  gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const,md::ls::MapDataTypeV const,md::ls::AssociationTileHandle const,md::ls::GlobeMatrixData const,md::ls::TileMatrix const,md::ls::TileTransformConstantDataHandle const,md::ls::TileViewConstantDataHandle const,md::ls::FlyoverOctileKey const>,gdc::Any<>,gdc::None<>>::begin((uint64_t *)&v126, v133);
  v135[0] = v122;
  v135[1] = v120;
  v135[2] = v118;
  v135[3] = v117;
  v135[4] = v123;
  unsigned __int8 v136 = v2;
  unint64_t v3 = *(unint64_t **)(gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const,md::ls::MapDataTypeV const,md::ls::AssociationTileHandle const,md::ls::GlobeMatrixData const,md::ls::TileMatrix const,md::ls::TileTransformConstantDataHandle const,md::ls::TileViewConstantDataHandle const,md::ls::FlyoverOctileKey const>,gdc::Any<>,gdc::None<>>::minSizeStorage<gdc::ComponentStorageWrapper<md::ls::RegisterHandle> const*,gdc::ComponentStorageWrapper<md::ls::EnteringView> const*,gdc::ComponentStorageWrapper<md::ls::BaseMapTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileRenderableTypeT<md::FlyoverRenderable>> const*,gdc::ComponentStorageWrapper<md::ls::MapDataTypeV> const*,gdc::ComponentStorageWrapper<md::ls::AssociationTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::GlobeMatrixData> const*,gdc::ComponentStorageWrapper<md::ls::TileMatrix> const*,gdc::ComponentStorageWrapper<md::ls::TileTransformConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileViewConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::FlyoverOctileKey> const*>(v135)
                            + 32);
  uint64_t v4 = v132;
  unint64_t v124 = v3;
  if (v3 == v132)
  {
    BOOL result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  }
  else
  {
    uint64_t v5 = (void *)*((void *)&v123 + 1);
    uint64_t v6 = (void *)v118;
    unint64_t v7 = (void *)v120;
    BOOL result = (unint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v119 = v126;
    uint64_t v121 = result;
    do
    {
      unint64_t *result = *v4;
      unint64_t v9 = *v4;
      unint64_t v10 = HIDWORD(*v4);
      unint64_t v11 = *v4 >> 39;
      uint64_t v12 = *(void *)(v122 + 32);
      if (v11 < (*(void *)(v122 + 40) - v12) >> 3
        && (uint64_t v13 = *(void *)(v12 + 8 * v11)) != 0
        && (unint64_t v14 = *(unsigned __int16 *)(v13 + 2 * (HIDWORD(v9) & 0x7F)),
            uint64_t v16 = *(void *)(v122 + 56),
            uint64_t v15 = *(void *)(v122 + 64),
            v14 < (v15 - v16) >> 3)
        && ((uint64_t v17 = v16 + 8 * v14, v17 != v15) ? (v18 = *(_DWORD *)(v17 + 4) == v10) : (v18 = 0), v18))
      {
        uint64_t v19 = *(void *)(v122 + 88);
        uint64_t v20 = *(void *)(v122 + 80) + 8 * v14;
      }
      else
      {
        uint64_t v19 = *(void *)(v122 + 88);
        uint64_t v20 = v19;
      }
      if (v20 == v19) {
        uint64_t v21 = 0;
      }
      else {
        uint64_t v21 = v20;
      }
      uint64_t v22 = *(void *)(*((void *)&v122 + 1) + 32);
      if (v11 < (*(void *)(*((void *)&v122 + 1) + 40) - v22) >> 3
        && (uint64_t v23 = *(void *)(v22 + 8 * v11)) != 0
        && (unint64_t v24 = *(unsigned __int16 *)(v23 + 2 * (HIDWORD(v9) & 0x7F)),
            uint64_t v26 = *(void *)(*((void *)&v122 + 1) + 56),
            uint64_t v25 = *(void *)(*((void *)&v122 + 1) + 64),
            v24 < (v25 - v26) >> 3)
        && ((uint64_t v27 = v26 + 8 * v24, v27 != v25) ? (v28 = *(_DWORD *)(v27 + 4) == v10) : (v28 = 0), v28))
      {
        unint64_t v29 = *(void *)(*((void *)&v122 + 1) + 88);
        unint64_t v30 = *(void *)(*((void *)&v122 + 1) + 80) + v24;
      }
      else
      {
        unint64_t v29 = *(void *)(*((void *)&v122 + 1) + 88);
        unint64_t v30 = v29;
      }
      if (v30 == v29) {
        unint64_t v31 = 0;
      }
      else {
        unint64_t v31 = v30;
      }
      uint64_t v32 = v7[4];
      if (v11 < (v7[5] - v32) >> 3
        && (uint64_t v33 = *(void *)(v32 + 8 * v11)) != 0
        && (unint64_t v34 = *(unsigned __int16 *)(v33 + 2 * (HIDWORD(v9) & 0x7F)), v36 = v7[7],
                                                                         uint64_t v35 = v7[8],
                                                                         v34 < (v35 - v36) >> 3)
        && ((uint64_t v37 = v36 + 8 * v34, v37 != v35) ? (v38 = *(_DWORD *)(v37 + 4) == v10) : (v38 = 0), v38))
      {
        uint64_t v39 = v7[11];
        uint64_t v40 = v7[10] + 8 * v34;
      }
      else
      {
        uint64_t v39 = v7[11];
        uint64_t v40 = v39;
      }
      if (v40 == v39) {
        uint64_t v41 = 0;
      }
      else {
        uint64_t v41 = v40;
      }
      uint64_t v42 = *(void *)(*((void *)&v120 + 1) + 32);
      if (v11 < (*(void *)(*((void *)&v120 + 1) + 40) - v42) >> 3
        && (uint64_t v43 = *(void *)(v42 + 8 * v11)) != 0
        && (unint64_t v44 = *(unsigned __int16 *)(v43 + 2 * (HIDWORD(v9) & 0x7F)),
            uint64_t v46 = *(void *)(*((void *)&v120 + 1) + 56),
            uint64_t v45 = *(void *)(*((void *)&v120 + 1) + 64),
            v44 < (v45 - v46) >> 3)
        && ((v47 = v46 + 8 * v44, v47 != v45) ? (BOOL v48 = *(_DWORD *)(v47 + 4) == v10) : (BOOL v48 = 0), v48))
      {
        unint64_t v49 = *(void *)(*((void *)&v120 + 1) + 88);
        unint64_t v50 = *(void *)(*((void *)&v120 + 1) + 80) + v44;
      }
      else
      {
        unint64_t v49 = *(void *)(*((void *)&v120 + 1) + 88);
        unint64_t v50 = v49;
      }
      if (v50 == v49) {
        unint64_t v51 = 0;
      }
      else {
        unint64_t v51 = v50;
      }
      uint64_t v52 = v6[4];
      if (v11 < (v6[5] - v52) >> 3
        && (uint64_t v53 = *(void *)(v52 + 8 * v11)) != 0
        && (unint64_t v54 = *(unsigned __int16 *)(v53 + 2 * (HIDWORD(v9) & 0x7F)), v56 = v6[7],
                                                                         uint64_t v55 = v6[8],
                                                                         v54 < (v55 - v56) >> 3)
        && ((uint64_t v57 = v56 + 8 * v54, v57 != v55) ? (v58 = *(_DWORD *)(v57 + 4) == v10) : (v58 = 0), v58))
      {
        uint64_t v59 = v6[11];
        uint64_t v60 = v6[10] + 2 * v54;
      }
      else
      {
        uint64_t v59 = v6[11];
        uint64_t v60 = v59;
      }
      if (v60 == v59) {
        uint64_t v61 = 0;
      }
      else {
        uint64_t v61 = v60;
      }
      uint64_t v62 = *(void *)(*((void *)&v118 + 1) + 32);
      if (v11 < (*(void *)(*((void *)&v118 + 1) + 40) - v62) >> 3
        && (uint64_t v63 = *(void *)(v62 + 8 * v11)) != 0
        && (unint64_t v64 = *(unsigned __int16 *)(v63 + 2 * (HIDWORD(v9) & 0x7F)),
            uint64_t v66 = *(void *)(*((void *)&v118 + 1) + 56),
            uint64_t v65 = *(void *)(*((void *)&v118 + 1) + 64),
            v64 < (v65 - v66) >> 3)
        && ((v67 = v66 + 8 * v64, v67 != v65) ? (BOOL v68 = *(_DWORD *)(v67 + 4) == v10) : (BOOL v68 = 0), v68))
      {
        uint64_t v69 = *(void *)(*((void *)&v118 + 1) + 88);
        uint64_t v70 = *(void *)(*((void *)&v118 + 1) + 80) + 8 * v64;
      }
      else
      {
        uint64_t v69 = *(void *)(*((void *)&v118 + 1) + 88);
        uint64_t v70 = v69;
      }
      if (v70 == v69) {
        uint64_t v71 = 0;
      }
      else {
        uint64_t v71 = v70;
      }
      uint64_t v72 = *(void *)(v117 + 32);
      if (v11 < (*(void *)(v117 + 40) - v72) >> 3
        && (uint64_t v73 = *(void *)(v72 + 8 * v11)) != 0
        && (unint64_t v74 = *(unsigned __int16 *)(v73 + 2 * (HIDWORD(v9) & 0x7F)),
            uint64_t v76 = *(void *)(v117 + 56),
            uint64_t v75 = *(void *)(v117 + 64),
            v74 < (v75 - v76) >> 3)
        && (uint64_t v77 = v76 + 8 * v74, v77 != v75)
        && *(_DWORD *)(v77 + 4) == v10)
      {
        unint64_t v78 = *(void *)(v117 + 88);
        unint64_t v79 = *(void *)(v117 + 80) + (v74 << 7);
      }
      else
      {
        unint64_t v78 = *(void *)(v117 + 88);
        unint64_t v79 = v78;
      }
      if (v79 == v78) {
        unint64_t v80 = 0;
      }
      else {
        unint64_t v80 = v79;
      }
      uint64_t v81 = *(void *)(*((void *)&v117 + 1) + 32);
      if (v11 < (*(void *)(*((void *)&v117 + 1) + 40) - v81) >> 3
        && (uint64_t v82 = *(void *)(v81 + 8 * v11)) != 0
        && (unint64_t v83 = *(unsigned __int16 *)(v82 + 2 * (HIDWORD(v9) & 0x7F)),
            uint64_t v85 = *(void *)(*((void *)&v117 + 1) + 56),
            uint64_t v84 = *(void *)(*((void *)&v117 + 1) + 64),
            v83 < (v84 - v85) >> 3)
        && (uint64_t v86 = v85 + 8 * v83, v86 != v84)
        && *(_DWORD *)(v86 + 4) == v10)
      {
        uint64_t v87 = *(void *)(*((void *)&v117 + 1) + 88);
        uint64_t v88 = *(void *)(*((void *)&v117 + 1) + 80) + 8 * v83;
      }
      else
      {
        uint64_t v87 = *(void *)(*((void *)&v117 + 1) + 88);
        uint64_t v88 = v87;
      }
      if (v88 == v87) {
        uint64_t v88 = 0;
      }
      uint64_t v89 = *(void *)(v123 + 32);
      if (v11 < (*(void *)(v123 + 40) - v89) >> 3
        && (uint64_t v90 = *(void *)(v89 + 8 * v11)) != 0
        && (unint64_t v91 = *(unsigned __int16 *)(v90 + 2 * (HIDWORD(v9) & 0x7F)),
            uint64_t v93 = *(void *)(v123 + 56),
            uint64_t v92 = *(void *)(v123 + 64),
            v91 < (v92 - v93) >> 3)
        && (uint64_t v94 = v93 + 8 * v91, v94 != v92)
        && *(_DWORD *)(v94 + 4) == v10)
      {
        uint64_t v95 = *(void *)(v123 + 88);
        uint64_t v96 = *(void *)(v123 + 80) + 8 * v91;
      }
      else
      {
        uint64_t v95 = *(void *)(v123 + 88);
        uint64_t v96 = v95;
      }
      if (v96 == v95) {
        uint64_t v96 = 0;
      }
      uint64_t v97 = v5[4];
      if (v11 < (v5[5] - v97) >> 3
        && (uint64_t v98 = *(void *)(v97 + 8 * v11)) != 0
        && (unint64_t v99 = *(unsigned __int16 *)(v98 + 2 * (HIDWORD(v9) & 0x7F)),
            uint64_t v101 = v5[7],
            uint64_t v100 = v5[8],
            v99 < (v100 - v101) >> 3)
        && (uint64_t v102 = v101 + 8 * v99, v102 != v100)
        && *(_DWORD *)(v102 + 4) == v10)
      {
        uint64_t v103 = v5[11];
        uint64_t v104 = v5[10] + 8 * v99;
      }
      else
      {
        uint64_t v103 = v5[11];
        uint64_t v104 = v103;
      }
      if (v104 == v103) {
        uint64_t v104 = 0;
      }
      uint64_t v105 = v2[4];
      if (v11 < (v2[5] - v105) >> 3
        && (uint64_t v106 = *(void *)(v105 + 8 * v11)) != 0
        && (unint64_t v107 = *(unsigned __int16 *)(v106 + 2 * (HIDWORD(v9) & 0x7F)),
            uint64_t v109 = v2[7],
            uint64_t v108 = v2[8],
            v107 < (v108 - v109) >> 3)
        && (uint64_t v110 = v109 + 8 * v107, v110 != v108)
        && *(_DWORD *)(v110 + 4) == v10)
      {
        uint64_t v111 = v2[11];
        uint64_t v112 = v2[10] + 40 * v107;
      }
      else
      {
        uint64_t v111 = v2[11];
        uint64_t v112 = v111;
      }
      uint64_t v113 = *(void *)(a2 + 24);
      if (!v113)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        JUMPOUT(0x1A2047BB8);
      }
      unint64_t v114 = v2;
      if (v112 == v111) {
        uint64_t v115 = 0;
      }
      else {
        uint64_t v115 = v112;
      }
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v113 + 48))(v113, v21, v31, v41, v51, v61, v71, v80, v88, v96, v104, v115);
      long long v116 = *(unint64_t **)(v119 + 32);
      while (1)
      {
        size_t v132 = ++v4;
        if (v4 == v116) {
          break;
        }
        if (gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::TileRenderableTypeT<md::FlyoverRenderable> const,md::ls::MapDataTypeV const,md::ls::AssociationTileHandle const,md::ls::GlobeMatrixData const,md::ls::TileMatrix const,md::ls::TileTransformConstantDataHandle const,md::ls::TileViewConstantDataHandle const,md::ls::FlyoverOctileKey const>,gdc::Any<>,gdc::None<>>::Iterator::isValid(&v126)) {
          goto LABEL_4;
        }
      }
      uint64_t v4 = v116;
LABEL_4:
      unint64_t v2 = v114;
      uint64_t v5 = (void *)*((void *)&v123 + 1);
      BOOL result = v121;
    }
    while (v124 != v4);
  }
  unint64_t *result = 0xFFFFFFFF00000000;
  return result;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectFlyoverMeshRenderables>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectFlyoverMeshRenderables>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C130;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectFlyoverMeshRenderables>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectFlyoverMeshRenderables>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectDaVinciMeshRenderables>(md::ita::CollectDaVinciMeshRenderables &&)::{lambda(void)#2},std::allocator<md::ita::CollectDaVinciMeshRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectDaVinciMeshRenderables>(md::ita::CollectDaVinciMeshRenderables &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  void *result = &unk_1EF52AD70;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectDaVinciMeshRenderables>(md::ita::CollectDaVinciMeshRenderables &&)::{lambda(void)#2},std::allocator<md::ita::CollectDaVinciMeshRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectDaVinciMeshRenderables>(md::ita::CollectDaVinciMeshRenderables &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectDaVinciMeshRenderables>(md::ita::CollectDaVinciMeshRenderables &&)::{lambda(void)#1},std::allocator<md::ita::CollectDaVinciMeshRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectDaVinciMeshRenderables>(md::ita::CollectDaVinciMeshRenderables &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  void *result = &unk_1EF52ADB8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectDaVinciMeshRenderables>(md::ita::CollectDaVinciMeshRenderables &&)::{lambda(void)#1},std::allocator<md::ita::CollectDaVinciMeshRenderables &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CollectDaVinciMeshRenderables>(md::ita::CollectDaVinciMeshRenderables &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>::Model<ecs2::RuntimeQuery<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>>::empty(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(*(void *)(a1 + 8) + 8);
  uint64_t v2 = gdc::Registry::storage<md::ls::BaseMapTileHandle>(v1);
  uint64_t v3 = gdc::Registry::storage<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>>(v1);
  uint64_t v4 = gdc::Registry::storage<md::ls::TileRenderableDataHandle>(v1);
  if (*(void *)(v3 + 64) - *(void *)(v3 + 56) >= *(void *)(v2 + 64) - *(void *)(v2 + 56)) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v3;
  }
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) < *(void *)(v5 + 64) - *(void *)(v5 + 56)) {
    uint64_t v5 = v4;
  }
  v11[0] = v5 + 32;
  v11[1] = v2;
  v11[2] = v3;
  v11[3] = v4;
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v12 = v7;
  if (v6 != v7
    && !gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11))
  {
    uint64_t v8 = v7 + 8;
    do
    {
      uint64_t v7 = v8;
      uint64_t v12 = v8;
      if (v8 == v6) {
        break;
      }
      BOOL isValid = gdc::RegistryQueryView<gdc::All<md::ls::RenderItemID const,md::ls::ItemsPrepared const,md::ls::CommandBufferRef>,gdc::Any<>,gdc::None<>>::Iterator::isValid(v11);
      uint64_t v8 = v7 + 8;
    }
    while (!isValid);
  }
  return v6 == v7;
}

BOOL ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>::Model<ecs2::RuntimeQuery<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>>::empty(uint64_t a1)
{
  gdc::Registry::storageTuple<md::ls::RegisterHandle,md::ls::EnteringView,md::ls::BaseMapTileHandle,md::ls::AssociationTileHandle,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>,md::ls::TileUnitsPerMeter,md::ls::MapDataTypeV,md::ls::TileViewConstantDataHandle,md::ls::TileMatrix,md::ls::TileRenderableDataHandle,md::ls::RenderablesCount,md::ls::TileTransformConstantDataHandle,md::ls::TransferStyleAttributeRasterSet,md::ls::TileClippingConstantDataHandle,md::ls::TileShadowConstantDataHandle,md::ls::TilePrepassShadowConstantDataHandle,md::ls::TilePrepassConstantDataHandle,md::ls::TileStyleCameraConstantDataHandle>((uint64_t *)v11, *(int8x8_t **)(*(void *)(a1 + 8) + 8));
  long long v7 = v11[1];
  long long v8 = v11[0];
  long long v5 = v11[3];
  long long v6 = v11[2];
  long long v3 = v11[5];
  long long v4 = v11[4];
  gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::AssociationTileHandle const,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const,md::ls::TileUnitsPerMeter const,md::ls::MapDataTypeV const,md::ls::TileViewConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileRenderableDataHandle const,md::ls::RenderablesCount const,md::ls::TileTransformConstantDataHandle const>,gdc::Any<md::ls::TransferStyleAttributeRasterSet const,md::ls::TileClippingConstantDataHandle const,md::ls::TileShadowConstantDataHandle const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const,md::ls::TileStyleCameraConstantDataHandle const>,gdc::None<>>::begin(v9, v11);
  v10[0] = v8;
  v10[1] = v7;
  v10[2] = v6;
  v10[3] = v5;
  v10[4] = v4;
  void v10[5] = v3;
  uint64_t v1 = gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::AssociationTileHandle const,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const,md::ls::TileUnitsPerMeter const,md::ls::MapDataTypeV const,md::ls::TileViewConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileRenderableDataHandle const,md::ls::RenderablesCount const,md::ls::TileTransformConstantDataHandle const>,gdc::Any<md::ls::TransferStyleAttributeRasterSet const,md::ls::TileClippingConstantDataHandle const,md::ls::TileShadowConstantDataHandle const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const,md::ls::TileStyleCameraConstantDataHandle const>,gdc::None<>>::minSizeStorage<gdc::ComponentStorageWrapper<md::ls::RegisterHandle> const*,gdc::ComponentStorageWrapper<md::ls::EnteringView> const*,gdc::ComponentStorageWrapper<md::ls::BaseMapTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::AssociationTileHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable>> const*,gdc::ComponentStorageWrapper<md::ls::TileUnitsPerMeter> const*,gdc::ComponentStorageWrapper<md::ls::MapDataTypeV> const*,gdc::ComponentStorageWrapper<md::ls::TileViewConstantDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::TileMatrix> const*,gdc::ComponentStorageWrapper<md::ls::TileRenderableDataHandle> const*,gdc::ComponentStorageWrapper<md::ls::RenderablesCount> const*,gdc::ComponentStorageWrapper<md::ls::TileTransformConstantDataHandle> const*>(v10);
  return *(void *)(v1 + 32) == v9[14];
}

BOOL gdc::RegistryQueryView<gdc::All<md::ls::RegisterHandle const,md::ls::EnteringView const,md::ls::BaseMapTileHandle const,md::ls::AssociationTileHandle const,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const,md::ls::TileUnitsPerMeter const,md::ls::MapDataTypeV const,md::ls::TileViewConstantDataHandle const,md::ls::TileMatrix const,md::ls::TileRenderableDataHandle const,md::ls::RenderablesCount const,md::ls::TileTransformConstantDataHandle const>,gdc::Any<md::ls::TransferStyleAttributeRasterSet const,md::ls::TileClippingConstantDataHandle const,md::ls::TileShadowConstantDataHandle const,md::ls::TilePrepassShadowConstantDataHandle const,md::ls::TilePrepassConstantDataHandle const,md::ls::TileStyleCameraConstantDataHandle const>,gdc::None<>>::Iterator::isValid(void *a1)
{
  uint64_t v1 = (void *)a1[1];
  unint64_t v2 = *(unsigned int *)(a1[14] + 4);
  unint64_t v3 = v2 >> 7;
  uint64_t v4 = v1[4];
  if (v2 >> 7 >= (v1[5] - v4) >> 3) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 8 * v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v2 & 0x7F;
  unint64_t v7 = *(unsigned __int16 *)(v5 + 2 * v6);
  unint64_t v10 = v1 + 7;
  uint64_t v8 = v1[7];
  uint64_t v9 = v10[1];
  if (v7 >= (v9 - v8) >> 3) {
    return 0;
  }
  uint64_t v11 = v8 + 8 * v7;
  if (v11 == v9 || *(_DWORD *)(v11 + 4) != v2) {
    return 0;
  }
  uint64_t v13 = (void *)a1[2];
  uint64_t v14 = v13[4];
  if (v3 >= (v13[5] - v14) >> 3) {
    return 0;
  }
  uint64_t v15 = *(void *)(v14 + 8 * v3);
  if (!v15) {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v15 + 2 * v6);
  uint64_t v19 = v13 + 7;
  uint64_t v17 = v13[7];
  uint64_t v18 = v19[1];
  if (v16 >= (v18 - v17) >> 3) {
    return 0;
  }
  uint64_t v20 = v17 + 8 * v16;
  if (v20 == v18 || *(_DWORD *)(v20 + 4) != v2) {
    return 0;
  }
  uint64_t v22 = (void *)a1[3];
  uint64_t v23 = v22[4];
  if (v3 >= (v22[5] - v23) >> 3) {
    return 0;
  }
  uint64_t v24 = *(void *)(v23 + 8 * v3);
  if (!v24) {
    return 0;
  }
  unint64_t v25 = *(unsigned __int16 *)(v24 + 2 * v6);
  BOOL v28 = v22 + 7;
  uint64_t v26 = v22[7];
  uint64_t v27 = v28[1];
  if (v25 >= (v27 - v26) >> 3) {
    return 0;
  }
  uint64_t v29 = v26 + 8 * v25;
  if (v29 == v27 || *(_DWORD *)(v29 + 4) != v2) {
    return 0;
  }
  unint64_t v31 = (void *)a1[4];
  uint64_t v32 = v31[4];
  if (v3 >= (v31[5] - v32) >> 3) {
    return 0;
  }
  uint64_t v33 = *(void *)(v32 + 8 * v3);
  if (!v33) {
    return 0;
  }
  unint64_t v34 = *(unsigned __int16 *)(v33 + 2 * v6);
  uint64_t v37 = v31 + 7;
  uint64_t v35 = v31[7];
  uint64_t v36 = v37[1];
  if (v34 >= (v36 - v35) >> 3) {
    return 0;
  }
  unsigned int v81 = *(_DWORD *)(a1[14] + 4);
  uint64_t v38 = v35 + 8 * v34;
  if (v38 == v36 || *(_DWORD *)(v38 + 4) != v2) {
    return 0;
  }
  uint64_t v40 = (void *)a1[5];
  uint64_t v41 = v40[4];
  if (v3 >= (v40[5] - v41) >> 3) {
    return 0;
  }
  uint64_t v42 = *(void *)(v41 + 8 * v3);
  if (!v42) {
    return 0;
  }
  unint64_t v43 = *(unsigned __int16 *)(v42 + 2 * v6);
  uint64_t v46 = v40 + 7;
  uint64_t v44 = v40[7];
  uint64_t v45 = v46[1];
  if (v43 >= (v45 - v44) >> 3) {
    return 0;
  }
  BOOL result = 0;
  uint64_t v48 = v44 + 8 * v43;
  if (v48 == v45 || *(_DWORD *)(v48 + 4) != v81) {
    return result;
  }
  unint64_t v49 = (void *)a1[6];
  uint64_t v50 = v49[4];
  if (v3 >= (v49[5] - v50) >> 3) {
    return 0;
  }
  uint64_t v51 = *(void *)(v50 + 8 * v3);
  if (!v51) {
    return 0;
  }
  unint64_t v52 = *(unsigned __int16 *)(v51 + 2 * v6);
  uint64_t v55 = v49 + 7;
  uint64_t v53 = v49[7];
  uint64_t v54 = v55[1];
  if (v52 >= (v54 - v53) >> 3) {
    return 0;
  }
  BOOL result = 0;
  uint64_t v56 = v53 + 8 * v52;
  if (v56 == v54 || *(_DWORD *)(v56 + 4) != v81) {
    return result;
  }
  uint64_t v57 = (void *)a1[7];
  uint64_t v58 = v57[4];
  if (v3 >= (v57[5] - v58) >> 3) {
    return 0;
  }
  uint64_t v59 = *(void *)(v58 + 8 * v3);
  if (!v59) {
    return 0;
  }
  unint64_t v60 = *(unsigned __int16 *)(v59 + 2 * v6);
  uint64_t v63 = v57 + 7;
  uint64_t v61 = v57[7];
  uint64_t v62 = v63[1];
  if (v60 >= (v62 - v61) >> 3) {
    return 0;
  }
  BOOL result = 0;
  uint64_t v64 = v61 + 8 * v60;
  if (v64 == v62 || *(_DWORD *)(v64 + 4) != v81) {
    return result;
  }
  uint64_t v65 = (void *)a1[8];
  uint64_t v66 = v65[4];
  if (v3 >= (v65[5] - v66) >> 3) {
    return 0;
  }
  uint64_t v67 = *(void *)(v66 + 8 * v3);
  if (!v67) {
    return 0;
  }
  unint64_t v68 = *(unsigned __int16 *)(v67 + 2 * v6);
  uint64_t v71 = v65 + 7;
  uint64_t v69 = v65[7];
  uint64_t v70 = v71[1];
  if (v68 >= (v70 - v69) >> 3) {
    return 0;
  }
  BOOL result = 0;
  uint64_t v72 = v69 + 8 * v68;
  if (v72 == v70 || *(_DWORD *)(v72 + 4) != v81) {
    return result;
  }
  uint64_t v73 = (void *)a1[9];
  uint64_t v74 = v73[4];
  if (v3 >= (v73[5] - v74) >> 3) {
    return 0;
  }
  uint64_t v75 = *(void *)(v74 + 8 * v3);
  if (!v75) {
    return 0;
  }
  unint64_t v76 = *(unsigned __int16 *)(v75 + 2 * v6);
  unint64_t v79 = v73 + 7;
  uint64_t v78 = v73[7];
  uint64_t v77 = v79[1];
  if (v76 >= (v77 - v78) >> 3) {
    return 0;
  }
  BOOL result = 0;
  uint64_t v80 = v78 + 8 * v76;
  if (v80 != v77 && *(_DWORD *)(v80 + 4) == v81)
  {
    BOOL result = geo::sparse_map<gdc::Entity,md::ls::TilePrepassConstantDataHandle>::count((void *)(a1[10] + 32), v81);
    if (result)
    {
      BOOL result = geo::sparse_map<gdc::Entity,md::ls::TilePrepassConstantDataHandle>::count((void *)(a1[11] + 32), v81);
      if (result) {
        return geo::sparse_map<gdc::Entity,md::ls::TilePrepassConstantDataHandle>::count((void *)(a1[12] + 32), v81);
      }
    }
  }
  return result;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectDaVinciMeshRenderables>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectDaVinciMeshRenderables>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51C0E8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CollectDaVinciMeshRenderables>,std::allocator<ecs2::ForwardToExecute<md::ita::CollectDaVinciMeshRenderables>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialNeedsUpdate>(md::ita::CheckIfMaterialNeedsUpdate &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfMaterialNeedsUpdate &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialNeedsUpdate>(md::ita::CheckIfMaterialNeedsUpdate &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  void *result = &unk_1EF529C00;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialNeedsUpdate>(md::ita::CheckIfMaterialNeedsUpdate &&)::{lambda(void)#2},std::allocator<md::ita::CheckIfMaterialNeedsUpdate &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialNeedsUpdate>(md::ita::CheckIfMaterialNeedsUpdate &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialNeedsUpdate>(md::ita::CheckIfMaterialNeedsUpdate &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfMaterialNeedsUpdate &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialNeedsUpdate>(md::ita::CheckIfMaterialNeedsUpdate &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  void *result = &unk_1EF529C48;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialNeedsUpdate>(md::ita::CheckIfMaterialNeedsUpdate &&)::{lambda(void)#1},std::allocator<md::ita::CheckIfMaterialNeedsUpdate &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CheckIfMaterialNeedsUpdate>(md::ita::CheckIfMaterialNeedsUpdate &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::UniqueMaterialData const&>::Model<ecs2::RuntimeQuery<md::ls::UniqueMaterialData const&>>::empty(uint64_t a1)
{
  uint64_t v1 = (void *)gdc::Registry::storage<md::ls::UniqueMaterialData>(*(int8x8_t **)(*(void *)(a1 + 8) + 8));
  uint64_t v3 = v1[7];
  uint64_t v2 = v1[8];
  uint64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if ((unint64_t v5 = *(unsigned int *)(v3 + 4), v6 = v1[4], v7 = (v1[5] - v6) >> 3, v5 >> 7 >= v7)
      || (uint64_t v8 = *(void *)(v6 + 8 * (v5 >> 7))) == 0
      || (unint64_t v9 = *(unsigned __int16 *)(v8 + 2 * (v5 & 0x7F)), v9 >= v4 >> 3)
      || ((uint64_t v10 = v3 + 8 * v9, v10 != v2) ? (v11 = *(_DWORD *)(v10 + 4) == v5) : (v11 = 0), !v11))
    {
      unint64_t v12 = v4 >> 3;
      uint64_t v13 = v3 + 8;
      while (v13 != v2)
      {
        unint64_t v14 = *(unsigned int *)(v13 + 4);
        uint64_t v15 = v1[8];
        if (v14 >> 7 < v7)
        {
          uint64_t v16 = *(void *)(v6 + 8 * (v14 >> 7));
          uint64_t v15 = v1[8];
          if (v16)
          {
            unint64_t v17 = *(unsigned __int16 *)(v16 + 2 * (v14 & 0x7F));
            uint64_t v15 = v1[8];
            if (v12 > v17)
            {
              uint64_t v15 = v3 + 8 * v17;
              if (*(_DWORD *)(v15 + 4) != v14) {
                uint64_t v15 = v1[8];
              }
            }
          }
        }
        v13 += 8;
        if (v15 != v2)
        {
          uint64_t v3 = v13 - 8;
          return v2 == v3;
        }
      }
      uint64_t v3 = v1[8];
    }
  }
  return v2 == v3;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfMaterialNeedsUpdate>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfMaterialNeedsUpdate>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EF51B830;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CheckIfMaterialNeedsUpdate>,std::allocator<ecs2::ForwardToExecute<md::ita::CheckIfMaterialNeedsUpdate>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCommonDataTask>(md::ita::SetupCommonDataTask &&)::{lambda(void)#2},std::allocator<md::ita::SetupCommonDataTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCommonDataTask>(md::ita::SetupCommonDataTask &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  void *result = &unk_1EF527D10;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCommonDataTask>(md::ita::SetupCommonDataTask &&)::{lambda(void)#2},std::allocator<md::ita::SetupCommonDataTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCommonDataTask>(md::ita::SetupCommonDataTask &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCommonDataTask>(md::ita::SetupCommonDataTask &&)::{lambda(void)#1},std::allocator<md::ita::SetupCommonDataTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCommonDataTask>(md::ita::SetupCommonDataTask &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  void *result = &unk_1EF527D58;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCommonDataTask>(md::ita::SetupCommonDataTask &&)::{lambda(void)#1},std::allocator<md::ita::SetupCommonDataTask &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::SetupCommonDataTask>(md::ita::SetupCommonDataTask &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL ecs2::Query<md::ls::RegisterHandle &>::Model<ecs2::RuntimeQuery<md::ls::RegisterHandle &>>::empty(uint64_t a1)
{
  uint64_t v1 = (void *)gdc::Registry::storage<md::ls::RegisterHandle>(*(int8x8_t **)(*(void *)(a1 + 8) + 8));
  uint64_t v3 = v1[7];
  uint64_t v2 = v1[8];
  uint64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if ((unint64_t v5 = *(unsigned int *)(v3 + 4), v6 = v1[4], v7 = (v1[5] - v6) >> 3, v5 >> 7 >= v7)
      || (uint64_t v8 = *(void *)(v6 + 8 * (v5 >> 7))) == 0
      || (unint64_t v9 = *(unsigned __int16 *)(v8 + 2 * (v5 & 0x7F)), v9 >= v4 >> 3)
      || ((uint64_t v10 = v3 + 8 * v9, v10 != v2) ? (v11 = *(_DWORD *)(v10 + 4) == v5) : (v11 = 0), !v11))
    {
      unint64_t v12 = v4 >> 3;
      uint64_t v13 = v3 + 8;
      while (v13 != v2)
      {
        unint64_t v14 = *(unsigned int *)(v13 + 4);
        uint64_t v15 = v1[8];
        if (v14 >> 7 < v7)
        {
          uint64_t v16 = *(void *)(v6 + 8 * (v14 >> 7));
          uint64_t v15 = v1[8];
          if (v16)
          {
            unint64_t v17 = *(unsigned __int16 *)(v16 + 2 * (v14 & 0x7F));
            uint64_t v15 = v1[8];
            if (v12 > v17)
            {
              uint64_t v15 = v3 + 8 * v17;
              if (*(_DWORD *)(v15 + 4) != v14) {
                uint64_t v15 = v1[8];
              }
            }
          }
        }
        v13 += 8;
        if (v15 != v2)
        {
          uint64_t v3 = v13 - 8;
          return v2 == v3;
        }
      }
      uint64_t v3 = v1[8];
    }
  }
  return v2 == v3;
}