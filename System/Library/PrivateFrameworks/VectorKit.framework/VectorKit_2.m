void sub_1A182AA10(_Unwind_Exception *a1)
{
  void *v1;
  std::__shared_weak_count *v2;
  void *v4;

  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);

  _Unwind_Resume(a1);
}

md::LabelExternalPointFeature *md::LabelExternalPointFeature::LabelExternalPointFeature(md::LabelExternalPointFeature *this)
{
  *((_WORD *)this + 4) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0x7FFFFFFF437C0000;
  *((unsigned char *)this + 88) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((unsigned char *)this + 112) = 0;
  *(void *)this = &unk_1EF546788;
  *((unsigned char *)this + 176) = 0;
  *((unsigned char *)this + 220) = 0;
  *((unsigned char *)this + 224) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((unsigned char *)this + 228) = 0;
  *((unsigned char *)this + 216) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_DWORD *)((char *)this + 279) = 0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((void *)this + 40) = 0;
  *((void *)this + 41) = &unk_1EF559B98;
  *((void *)this + 42) = 0;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  {
    qword_1EB317748 = 0;
    md::LabelPoint::NullPoint(void)::kNullLabelPoint = 0u;
    *(_OWORD *)&qword_1EB317738 = 0u;
    dword_1EB317750 = 2139095039;
    word_1EB317754 = 256;
    byte_1EB317756 = 1;
  }
  v3 = (long long *)*((void *)this + 25);
  unint64_t v2 = *((void *)this + 26);
  if ((unint64_t)v3 >= v2)
  {
    v7 = (_OWORD *)*((void *)this + 24);
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v3 - v7) + 1;
    if (v8 > 0x555555555555555) {
      abort();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (void)v7) >> 4);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v10 = 0x555555555555555;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x555555555555555) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      v11 = (char *)operator new(48 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[16 * (v3 - v7)];
    *(_OWORD *)v12 = md::LabelPoint::NullPoint(void)::kNullLabelPoint;
    *((void *)v12 + 2) = qword_1EB317738;
    *(_OWORD *)(v12 + 24) = unk_1EB317740;
    *((_DWORD *)v12 + 10) = dword_1EB317750;
    *(_DWORD *)(v12 + 43) = *(int *)((char *)&dword_1EB317750 + 3);
    v6 = v12 + 48;
    if (v3 != v7)
    {
      do
      {
        long long v13 = *(v3 - 3);
        *((void *)v12 - 4) = *((void *)v3 - 4);
        *((_OWORD *)v12 - 3) = v13;
        *(_OWORD *)(v12 - 24) = *(long long *)((char *)v3 - 24);
        int v14 = *((_DWORD *)v3 - 2);
        *(_DWORD *)(v12 - 5) = *(_DWORD *)((char *)v3 - 5);
        *((_DWORD *)v12 - 2) = v14;
        v12 -= 48;
        v3 -= 3;
      }
      while (v3 != v7);
      v3 = (long long *)*((void *)this + 24);
    }
    *((void *)this + 24) = v12;
    *((void *)this + 25) = v6;
    *((void *)this + 26) = &v11[48 * v10];
    if (v3) {
      operator delete(v3);
    }
  }
  else
  {
    long long v4 = md::LabelPoint::NullPoint(void)::kNullLabelPoint;
    *((void *)v3 + 2) = qword_1EB317738;
    long long *v3 = v4;
    *(long long *)((char *)v3 + 24) = unk_1EB317740;
    int v5 = dword_1EB317750;
    *(_DWORD *)((char *)v3 + 43) = *(int *)((char *)&dword_1EB317750 + 3);
    *((_DWORD *)v3 + 10) = v5;
    v6 = v3 + 3;
  }
  *((void *)this + 25) = v6;
  return this;
}

void sub_1A182AD0C(_Unwind_Exception *a1)
{
  md::DynamicTrafficTileList::~DynamicTrafficTileList(v5);
  unint64_t v8 = *(void **)(v1 + 400);
  if (v8)
  {
    *(void *)(v1 + 408) = v8;
    operator delete(v8);
  }
  std::vector<md::LabelFeaturePlacementInfo>::~vector[abi:nn180100](v4);
  unint64_t v9 = *v6;
  if (*v6)
  {
    *(void *)(v1 + 360) = v9;
    operator delete(v9);
  }
  *(void *)(v1 + 328) = v2;

  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v3);
  unint64_t v10 = *(std::__shared_weak_count **)(v1 + 304);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }

  v11 = *(void **)(v1 + 192);
  if (v11)
  {
    *(void *)(v1 + 200) = v11;
    operator delete(v11);
  }
  md::LabelExternalFeature::~LabelExternalFeature((md::LabelExternalFeature *)v1);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__2(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t ___ZN3geo9TaskQueue11barrierSyncENSt3__18functionIFvvEEE_block_invoke_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
    return v2();
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__function::__func<ecs2::ForwardToExecute<CleanupEntities>,std::allocator<ecs2::ForwardToExecute<CleanupEntities>>,void ()(ecs2::Runtime &)>::operator()();
  }
}

void *std::__function::__func<ecs2::ForwardToExecute<CleanupEntities>,std::allocator<ecs2::ForwardToExecute<CleanupEntities>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::MarkForEntityDeletion>(*(int8x8_t **)(a2 + 8));
  long long v4 = v3;
  v6 = (uint64_t *)v3[7];
  int v5 = (uint64_t *)v3[8];
  uint64_t v7 = (char *)v5 - (char *)v6;
  if (v5 == v6
    || (unint64_t v8 = *((unsigned int *)v6 + 1), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 < v10)
    && (uint64_t v11 = *(void *)(v9 + 8 * (v8 >> 7))) != 0
    && (unint64_t v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 < v7 >> 3)
    && ((long long v13 = &v6[v12], v13 != v5) ? (v14 = *((_DWORD *)v13 + 1) == v8) : (v14 = 0), v14))
  {
LABEL_19:
    if (v5 != v6)
    {
      v21 = (uint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
      do
      {
        uint64_t v23 = *v6;
        uint64_t *v21 = *v6;
        v24 = *(void **)(a1 + 8);
        v34[0] = v23;
        int v35 = 2;
        ecs2::Runtime::queueCommand(v24, (uint64_t)v34);
        if (v35 != -1) {
          ((void (*)(char *, void *))off_1EF591450[v35])(&v33, v34);
        }
        uint64_t v25 = v4[4];
        uint64_t v26 = v4[7];
        v22 = (uint64_t *)v4[8];
        v27 = v6 + 1;
        while (v27 != v22)
        {
          unint64_t v28 = *((unsigned int *)v27 + 1);
          uint64_t v29 = v4[8];
          if (v28 >> 7 < (v4[5] - v25) >> 3)
          {
            uint64_t v30 = *(void *)(v25 + 8 * (v28 >> 7));
            uint64_t v29 = v4[8];
            if (v30)
            {
              unint64_t v31 = *(unsigned __int16 *)(v30 + 2 * (v28 & 0x7F));
              uint64_t v29 = v4[8];
              if (((uint64_t)v22 - v26) >> 3 > v31)
              {
                uint64_t v29 = v26 + 8 * v31;
                if (*(_DWORD *)(v29 + 4) != v28) {
                  uint64_t v29 = v4[8];
                }
              }
            }
          }
          ++v27;
          if ((uint64_t *)v29 != v22)
          {
            v22 = v27 - 1;
            break;
          }
        }
        v6 = v22;
      }
      while (v5 != v22);
    }
  }
  else
  {
    unint64_t v15 = v7 >> 3;
    v16 = v6 + 1;
    while (v16 != v5)
    {
      unint64_t v17 = *((unsigned int *)v16 + 1);
      v18 = (uint64_t *)v3[8];
      if (v17 >> 7 < v10)
      {
        uint64_t v19 = *(void *)(v9 + 8 * (v17 >> 7));
        v18 = (uint64_t *)v3[8];
        if (v19)
        {
          unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
          v18 = (uint64_t *)v3[8];
          if (v15 > v20)
          {
            v18 = &v6[v20];
            if (*((_DWORD *)v18 + 1) != v17) {
              v18 = (uint64_t *)v3[8];
            }
          }
        }
      }
      ++v16;
      if (v18 != v5)
      {
        v6 = v16 - 1;
        goto LABEL_19;
      }
    }
  }
  __n128 result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *__n128 result = 0xFFFFFFFF00000000;
  *(void *)(a1 + 8) = 0;
  return result;
}

void ecs2::Runtime::queueCommand(void *a1, uint64_t a2)
{
  int v5 = (char *)a1[4];
  unint64_t v4 = a1[5];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v8 = (char *)a1[3];
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v8) >> 3) + 1;
    if (v9 > 0x666666666666666) {
      abort();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - (void)v8) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0x666666666666666) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v12 = (char *)operator new(40 * v11);
    }
    else
    {
      unint64_t v12 = 0;
    }
    long long v13 = &v12[8 * ((v5 - v8) >> 3)];
    *long long v13 = 0;
    *((_DWORD *)v13 + 8) = -1;
    uint64_t v14 = *(unsigned int *)(a2 + 32);
    if (v14 != -1)
    {
      ((void (*)(char *, char *, uint64_t))off_1EF591570[v14])(&v23, &v12[8 * ((v5 - v8) >> 3)], a2);
      *((_DWORD *)v13 + 8) = v14;
      unint64_t v8 = (char *)a1[3];
      int v5 = (char *)a1[4];
    }
    uint64_t v7 = v13 + 40;
    if (v5 == v8)
    {
      a1[3] = v13;
      a1[4] = v7;
      a1[5] = &v12[40 * v11];
    }
    else
    {
      v21 = &v12[40 * v11];
      uint64_t v15 = 0;
      do
      {
        v13[v15 - 40] = 0;
        *(_DWORD *)&v13[v15 - 8] = -1;
        uint64_t v16 = *(unsigned int *)&v5[v15 - 8];
        if (v16 != -1)
        {
          ((void (*)(char *, char *, char *))off_1EF591590[v16])(&v24, &v13[v15 - 40], &v5[v15 - 40]);
          *(_DWORD *)&v13[v15 - 8] = v16;
        }
        v15 -= 40;
      }
      while (&v5[v15] != v8);
      unint64_t v17 = &v13[v15];
      unint64_t v8 = (char *)a1[3];
      v18 = (char *)a1[4];
      a1[3] = v17;
      a1[4] = v7;
      a1[5] = v21;
      if (v18 != v8)
      {
        do
        {
          uint64_t v19 = v18 - 40;
          uint64_t v20 = *((unsigned int *)v18 - 2);
          if (v20 != -1) {
            ((void (*)(char *, char *))off_1EF591550[v20])(&v25, v18 - 40);
          }
          *((_DWORD *)v18 - 2) = -1;
          v18 -= 40;
        }
        while (v19 != v8);
      }
    }
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *int v5 = 0;
    *((_DWORD *)v5 + 8) = -1;
    uint64_t v6 = *(unsigned int *)(a2 + 32);
    if (v6 != -1)
    {
      ((void (*)(char *, char *, uint64_t))off_1EF591570[v6])(&v22, v5, a2);
      *((_DWORD *)v5 + 8) = v6;
    }
    uint64_t v7 = v5 + 40;
  }
  a1[4] = v7;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4ecs212AddComponentENS8_15RemoveComponentENS8_13DestroyEntityENS8_14ClearComponentEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a3 + 24);
  if (result)
  {
    if (result == a3)
    {
      *(void *)(a2 + 24) = a2;
      int v5 = *(uint64_t (**)(void))(**(void **)(a3 + 24) + 24);
      return v5();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      *(void *)(a2 + 24) = result;
    }
  }
  else
  {
    *(void *)(a2 + 24) = 0;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4ecs212AddComponentENS8_15RemoveComponentENS8_13DestroyEntityENS8_14ClearComponentEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 24);
  if (v3)
  {
    if (v3 == a3)
    {
      *(void *)(a2 + 24) = a2;
      return (*(uint64_t (**)(void))(**(void **)(a3 + 24) + 24))();
    }
    else
    {
      *(void *)(a2 + 24) = v3;
      *(void *)(a3 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a2 + 24) = 0;
  }
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MarkForEntityDeletion>(gdc::Entity,md::ls::MarkForEntityDeletion &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF523708;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CommandBufferDescriptionCreation>(gdc::Entity,md::ls::CommandBufferDescriptionCreation &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF525BE0;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

uint64_t std::__function::__func<ecs2::ForwardToExecute<Commit>,std::allocator<ecs2::ForwardToExecute<Commit>>,void ()(ecs2::Runtime &)>::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  *(void *)(result + 8) = a2;
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  if (v4 != v5)
  {
    do
    {
      uint64_t v12 = a2;
      uint64_t v6 = *(unsigned int *)(v4 + 32);
      if (v6 == -1)
      {
        uint64_t v10 = std::__throw_bad_variant_access[abi:nn180100]();
        return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN4ecs212AddComponentENS8_15RemoveComponentENS8_13DestroyEntityENS8_14ClearComponentEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS9_SA_SB_SC_EEEEEEDcSG_DpT0_(v10, v11);
      }
      long long v13 = &v12;
      uint64_t result = ((uint64_t (*)(uint64_t **, uint64_t))off_1EF5915B0[v6])(&v13, v4);
      v4 += 40;
    }
    while (v4 != v5);
    uint64_t v7 = *(void *)(a2 + 24);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4 != v7)
    {
      do
      {
        uint64_t v8 = v4 - 40;
        uint64_t v9 = *(unsigned int *)(v4 - 8);
        if (v9 != -1) {
          uint64_t result = ((uint64_t (*)(uint64_t **, uint64_t))off_1EF591550[v9])(&v13, v4 - 40);
        }
        *(_DWORD *)(v4 - 8) = -1;
        v4 -= 40;
      }
      while (v8 != v7);
      uint64_t v4 = v7;
    }
  }
  *(void *)(a2 + 32) = v4;
  *(void *)(v3 + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN4ecs212AddComponentENS8_15RemoveComponentENS8_13DestroyEntityENS8_14ClearComponentEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS9_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, void *a2)
{
  uint64_t result = a2[3];
  if ((void *)result == a2) {
    return (*(uint64_t (**)(void *))(*a2 + 32))(a2);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<ecs2::Runtime::commit(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,ecs2::AddComponent,ecs2::RemoveComponent,ecs2::DestroyEntity,ecs2::ClearComponent> &>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  if (!v2)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x1A182B5C8);
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 48);
  return v3();
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN4ecs212AddComponentENS8_15RemoveComponentENS8_13DestroyEntityENS8_14ClearComponentEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS9_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, void *a2)
{
  uint64_t result = a2[3];
  if ((void *)result == a2) {
    return (*(uint64_t (**)(void *))(*a2 + 32))(a2);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t gdc::Registry::destroy(uint64_t result, unint64_t a2)
{
  unint64_t v49 = a2;
  int v3 = (unsigned __int16)a2;
  if (*(unsigned __int16 *)(result + 40) == (unsigned __int16)a2)
  {
    uint64_t v4 = (int8x8_t *)result;
    unint64_t v5 = HIDWORD(a2);
    uint64_t v6 = *(void *)(result + 48);
    if (HIDWORD(a2) < (unint64_t)((*(void *)(result + 56) - v6) >> 3))
    {
      uint64_t v7 = (unsigned __int16 *)(v6 + 8 * v5);
      if (*v7 == (unsigned __int16)a2)
      {
        int v8 = WORD1(a2);
        if (v7[1] == WORD1(a2) && *((_DWORD *)v7 + 1) == HIDWORD(a2))
        {
          uint64_t v9 = *(void *)(result + 96);
          uint64_t v10 = 8 * v5;
          unint64_t v11 = *(unint64_t ***)(v9 + 8 * v5);
          *(void *)(v9 + v10) = 0;
          uint64_t v12 = *(void *)(result + 96);
          uint64_t v13 = *(void *)(v12 + 8 * v5);
          *(void *)(v12 + v10) = 0;
          if (!v13) {
            goto LABEL_73;
          }
          uint64_t v14 = *(void **)v13;
          if (*(void *)v13)
          {
            *(void *)(v13 + 8) = v14;
            operator delete(v14);
          }
          MEMORY[0x1A6239270](v13, 0x20C40960023A9);
          if (v4[5].u16[0] == v3)
          {
LABEL_73:
            int8x8_t v15 = v4[6];
            if (v5 < (uint64_t)(*(void *)&v4[7] - *(void *)&v15) >> 3)
            {
              uint64_t v16 = (unsigned __int16 *)(*(void *)&v15 + 8 * v5);
              if (*v16 == v3 && v16[1] == v8 && *((_DWORD *)v16 + 1) == v5)
              {
                unint64_t v17 = *v11;
                v18 = v11[1];
                if (*v11 != v18)
                {
                  int8x8_t v19 = v4[16];
                  if (v19)
                  {
LABEL_16:
                    unint64_t v20 = *v17;
                    uint8x8_t v21 = (uint8x8_t)vcnt_s8(v19);
                    v21.i16[0] = vaddlv_u8(v21);
                    if (v21.u32[0] > 1uLL)
                    {
                      unint64_t v22 = *v17;
                      if (v20 >= *(void *)&v19) {
                        unint64_t v22 = v20 % *(void *)&v19;
                      }
                    }
                    else
                    {
                      unint64_t v22 = (*(void *)&v19 - 1) & v20;
                    }
                    char v23 = *(uint64_t ****)(*(void *)&v4[15] + 8 * v22);
                    if (v23)
                    {
                      char v24 = *v23;
                      if (v24)
                      {
                        if (v21.u32[0] < 2uLL)
                        {
                          uint64_t v25 = *(void *)&v19 - 1;
                          while (1)
                          {
                            v27 = v24[1];
                            if (v27 == (uint64_t *)v20)
                            {
                              if (v24[2] == (uint64_t *)v20) {
                                goto LABEL_36;
                              }
                            }
                            else if (((unint64_t)v27 & v25) != v22)
                            {
                              goto LABEL_37;
                            }
                            char v24 = (uint64_t **)*v24;
                            if (!v24) {
                              goto LABEL_37;
                            }
                          }
                        }
                        do
                        {
                          unint64_t v26 = (unint64_t)v24[1];
                          if (v26 == v20)
                          {
                            if (v24[2] == (uint64_t *)v20)
                            {
LABEL_36:
                              (*(void (**)(uint64_t *, unint64_t))(*v24[3] + 16))(v24[3], a2);
                              break;
                            }
                          }
                          else
                          {
                            if (v26 >= *(void *)&v19) {
                              v26 %= *(void *)&v19;
                            }
                            if (v26 != v22) {
                              break;
                            }
                          }
                          char v24 = (uint64_t **)*v24;
                        }
                        while (v24);
                      }
                    }
LABEL_37:
                    while (1)
                    {
                      v17 += 3;
                      if (v17 == v18) {
                        break;
                      }
                      int8x8_t v19 = v4[16];
                      if (v19) {
                        goto LABEL_16;
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v29 = (char *)v4[10];
          unint64_t v28 = (unint64_t)v4[11];
          if ((unint64_t)v29 >= v28)
          {
            unint64_t v31 = (char *)v4[9];
            uint64_t v32 = (v29 - v31) >> 2;
            unint64_t v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 62) {
              goto LABEL_69;
            }
            uint64_t v34 = v28 - (void)v31;
            if (v34 >> 1 > v33) {
              unint64_t v33 = v34 >> 1;
            }
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v35 = v33;
            }
            if (v35)
            {
              if (v35 >> 62) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              uint64_t v36 = operator new(4 * v35);
            }
            else
            {
              uint64_t v36 = 0;
            }
            v37 = &v36[4 * v32];
            v38 = &v36[4 * v35];
            _DWORD *v37 = v5;
            uint64_t v30 = v37 + 1;
            if (v29 != v31)
            {
              unint64_t v39 = v29 - v31 - 4;
              if (v39 < 0x2C) {
                goto LABEL_74;
              }
              if ((unint64_t)(v31 - v36) < 0x20) {
                goto LABEL_74;
              }
              uint64_t v40 = (v39 >> 2) + 1;
              v41 = &v36[4 * v32 - 16];
              v42 = v29 - 16;
              uint64_t v43 = v40 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v44 = *(_OWORD *)v42;
                *(v41 - 1) = *((_OWORD *)v42 - 1);
                _OWORD *v41 = v44;
                v41 -= 2;
                v42 -= 32;
                v43 -= 8;
              }
              while (v43);
              v37 -= v40 & 0x7FFFFFFFFFFFFFF8;
              v29 -= 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
              if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_74:
                do
                {
                  int v45 = *((_DWORD *)v29 - 1);
                  v29 -= 4;
                  *--v37 = v45;
                }
                while (v29 != v31);
              }
            }
            v4[9] = (int8x8_t)v37;
            v4[10] = (int8x8_t)v30;
            v4[11] = (int8x8_t)v38;
            if (v31) {
              operator delete(v31);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v29 = v5;
            uint64_t v30 = v29 + 4;
          }
          v4[10] = (int8x8_t)v30;
          *(void *)(*(void *)&v4[6] + 8 * v5) = v49 | 0xFFFFFFFF00000000;
          v46 = (void *)v4[35];
          if (v46)
          {
            while (1)
            {
              v51[0] = &v49;
              v51[1] = 1;
              v50 = v4;
              uint64_t v47 = v46[6];
              if (!v47) {
                break;
              }
              (*(void (**)(uint64_t, int8x8_t **, void *))(*(void *)v47 + 48))(v47, &v50, v51);
              v46 = (void *)*v46;
              if (!v46) {
                goto LABEL_64;
              }
            }
            std::__throw_bad_function_call[abi:nn180100]();
LABEL_69:
            abort();
          }
LABEL_64:
          v48 = *v11;
          if (*v11)
          {
            v11[1] = v48;
            operator delete(v48);
          }
          return MEMORY[0x1A6239270](v11, 0x20C40960023A9);
        }
      }
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4ecs212AddComponentENS8_15RemoveComponentENS8_13DestroyEntityENS8_14ClearComponentEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<ecs2::Runtime::commit(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,ecs2::AddComponent,ecs2::RemoveComponent,ecs2::DestroyEntity,ecs2::ClearComponent> &>(uint64_t a1, unint64_t *a2)
{
  return gdc::Registry::destroy(*(void *)(**(void **)a1 + 8), *a2);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassToCommandBuffers>(gdc::Entity,md::ls::PassToCommandBuffers &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF523318;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassToCommandBuffers>(gdc::Entity,md::ls::PassToCommandBuffers &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::PassToCommandBuffers>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      int8x8_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_34;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v20 = operator new(8 * v19);
      }
      else
      {
        unint64_t v20 = 0;
      }
      uint8x8_t v21 = &v20[8 * v16];
      unint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 != v15)
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_38;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_38;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        unint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint8x8_t v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    int v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *int v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      uint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          uint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  uint64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      uint64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_33;
  }
}

uint64_t gdc::Registry::storage<md::ls::PassToCommandBuffers>(int8x8_t *a1)
{
  unint64_t v10 = 0xA7E255916A50AFB1;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xA7E255916A50AFB1;
    if (*(void *)&v1 <= 0xA7E255916A50AFB1) {
      unint64_t v3 = 0xA7E255916A50AFB1 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xA7E255916A50AFB1;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xA7E255916A50AFB1)
      {
        if (v5[2] == 0xA7E255916A50AFB1) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xA7E255916A50AFB1) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xA7E255916A50AFB1) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A182BF0C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CommandBufferDescriptionCreation>(gdc::Entity,md::ls::CommandBufferDescriptionCreation &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 12);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::CommandBufferDescriptionCreation>(a2);
  __int16 v24 = *(_WORD *)(a1 + 8);
  char v25 = *(unsigned char *)(a1 + 10);
  uint64_t v26 = v3;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v26);
  if (v6)
  {
    unint64_t v12 = (unsigned char *)v4[11];
    unint64_t v11 = v4[12];
    if ((unint64_t)v12 >= v11)
    {
      uint64_t v14 = (unsigned char *)v4[10];
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v12 - v14) + 1;
      if (v15 >= 0x5555555555555556) {
        goto LABEL_30;
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (v11 - (void)v14);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x2AAAAAAAAAAAAAAALL) {
        unint64_t v17 = 0x5555555555555555;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        if (v17 >= 0x5555555555555556) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v18 = (char *)operator new(3 * v17);
      }
      else
      {
        uint64_t v18 = 0;
      }
      unint64_t v19 = &v18[v12 - v14];
      *(_WORD *)unint64_t v19 = v24;
      v19[2] = v25;
      uint64_t v13 = v19 + 3;
      if (v12 != v14)
      {
        do
        {
          __int16 v20 = *(_WORD *)(v12 - 3);
          v12 -= 3;
          char v21 = v12[2];
          *(_WORD *)(v19 - 3) = v20;
          v19 -= 3;
          v19[2] = v21;
        }
        while (v12 != v14);
        unint64_t v12 = (unsigned char *)v4[10];
      }
      v4[10] = v19;
      v4[11] = v13;
      v4[12] = &v18[3 * v17];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(_WORD *)unint64_t v12 = v24;
      v12[2] = v25;
      uint64_t v13 = v12 + 3;
    }
    v4[11] = v13;
    uint64_t v8 = v4[31];
  }
  else
  {
    uint64_t v7 = v4[10] + (((uint64_t)v5 - v4[7]) >> 2) + (((uint64_t)v5 - v4[7]) >> 3);
    *(_WORD *)uint64_t v7 = v24;
    *(unsigned char *)(v7 + 2) = v25;
    uint64_t v8 = v4[31];
    if (v7 != v4[11])
    {
      uint64_t v9 = (void *)v4[16];
      if (v9)
      {
        while (1)
        {
          long long v28 = &v26;
          uint64_t v29 = 1;
          uint64_t v27 = v8;
          uint64_t v10 = v9[6];
          if (!v10) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v10 + 48))(v10, &v27, &v28);
          uint64_t v9 = (void *)*v9;
          if (!v9) {
            return;
          }
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  unint64_t v22 = (void *)v4[22];
  if (v22)
  {
    while (1)
    {
      long long v28 = &v26;
      uint64_t v29 = 1;
      uint64_t v27 = v8;
      uint64_t v23 = v22[6];
      if (!v23) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v23 + 48))(v23, &v27, &v28);
      unint64_t v22 = (void *)*v22;
      if (!v22) {
        return;
      }
    }
    goto LABEL_29;
  }
}

uint64_t gdc::Registry::storage<md::ls::CommandBufferDescriptionCreation>(int8x8_t *a1)
{
  uint64_t v10 = 0x7C0654221E3B4567;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x7C0654221E3B4567;
    if (*(void *)&v1 <= 0x7C0654221E3B4567uLL) {
      uint64_t v3 = 0x7C0654221E3B4567uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x7C0654221E3B4567;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x7C0654221E3B4567)
      {
        if (v5[2] == 0x7C0654221E3B4567) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x7C0654221E3B4567) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x7C0654221E3B4567) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A182C3D4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::ComponentStorageWrapper<md::ls::CommandBufferDescriptionCreation>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10] + 3 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  char v16 = *(unsigned char *)(v15 - 1);
  *(_WORD *)uint64_t v14 = *(_WORD *)(v15 - 3);
  *(unsigned char *)(v14 + 2) = v16;
  a1[11] -= 3;
  unint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    unint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MarkForEntityDeletion>::remove();
}

uint64_t gdc::ComponentStorageWrapper<md::ls::MarkForEntityDeletion>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__func<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#3},std::allocator<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#3}>,void ()(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)>::operator()();
}

void *std::__function::__func<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#3},std::allocator<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#3}>,void ()(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)>::operator()(void *result, uint64_t *a2, unint64_t **a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  unint64_t v7 = (void *)result[5];
  if (v6)
  {
    uint64_t v8 = *a3;
    do
    {
      unint64_t v9 = *v8;
      int v10 = (unsigned __int16)*v8;
      if (*(unsigned __int16 *)(v4 + 40) == v10)
      {
        unint64_t v11 = HIDWORD(v9);
        uint64_t v12 = *(void *)(v4 + 48);
        if (HIDWORD(v9) < (unint64_t)((*(void *)(v4 + 56) - v12) >> 3))
        {
          uint64_t v13 = (unsigned __int16 *)(v12 + 8 * v11);
          if (*v13 == v10 && v13[1] == WORD1(v9) && *((_DWORD *)v13 + 1) == HIDWORD(v9))
          {
            uint64_t v14 = *(char ***)(v7[12] + 8 * v11);
            if (v14)
            {
              uint64_t v16 = *v14;
              uint64_t v15 = v14[1];
              if (*v14 != v15)
              {
                unint64_t v17 = v3[2];
                while (1)
                {
                  unint64_t v18 = *(void *)v16;
                  if (*(void *)v16 == v17) {
                    break;
                  }
                  v16 += 24;
                  if (v17 < v18 || v16 == v15) {
                    goto LABEL_4;
                  }
                }
              }
              if (v16 != v15)
              {
                int64_t v20 = v15 - (v16 + 24);
                if (v15 != v16 + 24) {
                  __n128 result = memmove(v16, v16 + 24, v15 - (v16 + 24));
                }
                v14[1] = &v16[v20];
              }
            }
          }
        }
      }
LABEL_4:
      ++v8;
    }
    while (v8 != &v5[(void)v6]);
  }
  for (i = (void *)v7[23]; i; i = (void *)*i)
  {
    uint64_t v30 = v5;
    uint64_t v31 = v6;
    uint64_t v29 = v4;
    uint64_t v22 = i[6];
    if (!v22) {
      goto LABEL_31;
    }
    __n128 result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v22 + 48))(v22, &v29, &v30);
  }
  uint64_t v23 = (void *)v7[47];
  if (v23)
  {
    uint64_t v24 = v3[1];
    while (1)
    {
      uint64_t v30 = v5;
      uint64_t v31 = v6;
      uint64_t v28 = v24;
      uint64_t v29 = v4;
      uint64_t v25 = v23[6];
      if (!v25) {
        break;
      }
      __n128 result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *, unint64_t **, uint64_t *))(*(void *)v25 + 48))(v25, &v29, &v30, &v28);
      uint64_t v23 = (void *)*v23;
      if (!v23) {
        return result;
      }
    }
LABEL_31:
    std::__throw_bad_function_call[abi:nn180100]();
    return geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v26, v27);
  }
  return result;
}

void *geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(uint64_t *a1, void *a2)
{
  uint64_t v4 = a1[4];
  if ((void *)(v4 - 8) != a2)
  {
    *a2 = *(void *)(v4 - 8);
    uint64_t v5 = a1[3];
    unint64_t v6 = *(unsigned int *)(a1[4] - 4);
    unint64_t v7 = v6 >> 7;
    uint64_t v8 = *a1;
    unint64_t v9 = (a1[1] - *a1) >> 3;
    BOOL v10 = v6 >> 7 >= v9;
    unint64_t v11 = (v6 >> 7) - v9;
    if (v10)
    {
      std::vector<std::unique_ptr<std::array<unsigned short,128ul>>>::__append(a1, v11 + 1);
      uint64_t v8 = *a1;
    }
    unint64_t v12 = (unint64_t)a2 - v5;
    if (!*(void *)(v8 + 8 * v7)) {
      operator new();
    }
    *(_WORD *)(*(void *)(*a1 + 8 * v7) + 2 * (v6 & 0x7F)) = v12 >> 3;
    uint64_t v4 = a1[4];
  }
  a1[4] = v4 - 8;
  return a2;
}

uint64_t std::__function::__func<CleanupMeshRendererLayout::operator()(ecs2::Query<md::ls::CommandBufferDescriptionCreation const&>)::{lambda(md::ls::CommandBufferDescriptionCreation const&)#1},std::allocator<CleanupMeshRendererLayout::operator()(ecs2::Query<md::ls::CommandBufferDescriptionCreation const&>)::{lambda(md::ls::CommandBufferDescriptionCreation const&)#1}>,void ()(md::ls::CommandBufferDescriptionCreation const&)>::operator()()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  v0 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  uint64_t v1 = HIDWORD(*v0);
  uint64_t v2 = *v0 << 32;
  v6[0] = &unk_1EF523708;
  v6[1] = v2;
  int v7 = v1;
  unint64_t v11 = v9;
  uint64_t v8 = v6;
  v9[0] = &unk_1EF523708;
  v9[1] = v2;
  int v10 = v1;
  int v12 = 0;
  ecs2::Runtime::queueCommand(v3, (uint64_t)v9);
  if (v12 != -1) {
    ((void (*)(char *, void *))off_1EF58FA08[v12])(&v5, v9);
  }
  int v12 = -1;
  uint64_t result = (uint64_t)v8;
  if (v8 == v6) {
    return (*(uint64_t (**)(void *))(v6[0] + 32))(v6);
  }
  if (v8) {
    return (*(uint64_t (**)(void))(*v8 + 40))();
  }
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MarkForEntityDeletion>(gdc::Entity,md::ls::MarkForEntityDeletion &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::MarkForEntityDeletion>(a2);
  uint64_t v22 = v2;
  uint64_t v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if (v5)
  {
    int v10 = (unsigned char *)v3[11];
    unint64_t v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      int v12 = (char *)v3[10];
      uint64_t v13 = v10 - v12;
      uint64_t v14 = v10 - v12 + 1;
      if (v14 < 0) {
        goto LABEL_28;
      }
      unint64_t v15 = v9 - (void)v12;
      if (2 * v15 > v14) {
        uint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16) {
        unint64_t v17 = (char *)operator new(v16);
      }
      else {
        unint64_t v17 = 0;
      }
      unint64_t v18 = &v17[v16];
      uint64_t v11 = (uint64_t)&v17[v13 + 1];
      uint64_t v19 = (char *)(v12 - v10);
      if (v12 == v10) {
        uint64_t v19 = 0;
      }
      v3[10] = &v17[v13 + (void)v19];
      v3[11] = v11;
      v3[12] = v18;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    uint64_t v6 = v3[31];
  }
  else
  {
    uint64_t v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      int v7 = (void *)v3[16];
      if (v7)
      {
        while (1)
        {
          uint64_t v24 = &v22;
          uint64_t v25 = 1;
          uint64_t v23 = v6;
          uint64_t v8 = v7[6];
          if (!v8) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v8 + 48))(v8, &v23, &v24);
          int v7 = (void *)*v7;
          if (!v7) {
            return;
          }
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  int64_t v20 = (void *)v3[22];
  if (v20)
  {
    while (1)
    {
      uint64_t v24 = &v22;
      uint64_t v25 = 1;
      uint64_t v23 = v6;
      uint64_t v21 = v20[6];
      if (!v21) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v21 + 48))(v21, &v23, &v24);
      int64_t v20 = (void *)*v20;
      if (!v20) {
        return;
      }
    }
    goto LABEL_27;
  }
}

uint64_t gdc::Registry::storage<md::ls::MarkForEntityDeletion>(int8x8_t *a1)
{
  unint64_t v10 = 0xC3545FB0365E4B12;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xC3545FB0365E4B12;
    if (*(void *)&v1 <= 0xC3545FB0365E4B12) {
      unint64_t v3 = 0xC3545FB0365E4B12 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xC3545FB0365E4B12;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (char v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xC3545FB0365E4B12)
      {
        if (v5[2] == 0xC3545FB0365E4B12) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      char v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xC3545FB0365E4B12) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    char v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xC3545FB0365E4B12) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A182CE4C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::ComponentStorageWrapper<md::ls::PassToCommandBuffers>::remove(void *a1, unint64_t a2)
{
  unint64_t v22 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(void *)(v14 + 8 * v7) = *(void *)(v15 - 8);
  a1[11] = v15 - 8;
  size_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v24[0] = &v22;
    v24[1] = 1;
    uint64_t v23 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v23, v24);
    size_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4ecs212AddComponentENS8_15RemoveComponentENS8_13DestroyEntityENS8_14ClearComponentEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(v19, v20, v21);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4ecs212AddComponentENS8_15RemoveComponentENS8_13DestroyEntityENS8_14ClearComponentEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a3 + 24);
  if (result)
  {
    if (result == a3)
    {
      *(void *)(a2 + 24) = a2;
      uint64_t v5 = *(uint64_t (**)(void))(**(void **)(a3 + 24) + 24);
      return v5();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      *(void *)(a2 + 24) = result;
    }
  }
  else
  {
    *(void *)(a2 + 24) = 0;
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<ecs2::Runtime::commit(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,ecs2::AddComponent,ecs2::RemoveComponent,ecs2::DestroyEntity,ecs2::ClearComponent> &>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  if (v2)
  {
    unint64_t v3 = *(void (**)(void))(*(void *)v2 + 48);
    v3();
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    std::__throw_bad_function_call[abi:nn180100]();
  }
}

void std::__throw_bad_function_call[abi:nn180100]()
{
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN4ecs212AddComponentENS8_15RemoveComponentENS8_13DestroyEntityENS8_14ClearComponentEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS9_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, void *a2)
{
  uint64_t result = a2[3];
  if ((void *)result == a2) {
    return (*(uint64_t (**)(void *))(*a2 + 32))(a2);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4ecs212AddComponentENS8_15RemoveComponentENS8_13DestroyEntityENS8_14ClearComponentEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 24);
  if (v3)
  {
    if (v3 == a3)
    {
      *(void *)(a2 + 24) = a2;
      return (*(uint64_t (**)(void))(**(void **)(a3 + 24) + 24))();
    }
    else
    {
      *(void *)(a2 + 24) = v3;
      *(void *)(a3 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a2 + 24) = 0;
  }
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderTargetToPrepare>(gdc::Entity,md::ls::RenderTargetToPrepare &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF523828;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PreviousResourceStamp>(gdc::Entity,md::ls::PreviousResourceStamp &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5237E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameGraphRenderTarget>(gdc::Entity,md::ls::FrameGraphRenderTarget &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF523948;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameGraphBuilder>(gdc::Entity,md::ls::FrameGraphBuilder &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF522B80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameGraphRenderResourcesRegistry>(gdc::Entity,md::ls::FrameGraphRenderResourcesRegistry &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF525CB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassRoutelineMaskConfiguration>(gdc::Entity,md::ls::PassRoutelineMaskConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_1EF5259A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassDOFConfiguration>(gdc::Entity,md::ls::PassDOFConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF523288;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4ecs212AddComponentENS8_15RemoveComponentENS8_13DestroyEntityENS8_14ClearComponentEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a3 + 24);
  if (result)
  {
    if (result == a3)
    {
      *(void *)(a2 + 24) = a2;
      uint64_t v5 = *(uint64_t (**)(void))(**(void **)(a3 + 24) + 24);
      return v5();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      *(void *)(a2 + 24) = result;
    }
  }
  else
  {
    *(void *)(a2 + 24) = 0;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN4ecs212AddComponentENS8_15RemoveComponentENS8_13DestroyEntityENS8_14ClearComponentEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 24);
  if (v3)
  {
    if (v3 == a3)
    {
      *(void *)(a2 + 24) = a2;
      return (*(uint64_t (**)(void))(**(void **)(a3 + 24) + 24))();
    }
    else
    {
      *(void *)(a2 + 24) = v3;
      *(void *)(a3 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a2 + 24) = 0;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<ecs2::Runtime::commit(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,ecs2::AddComponent,ecs2::RemoveComponent,ecs2::DestroyEntity,ecs2::ClearComponent> &>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  if (v2)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 48);
    return v3();
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphRenderTarget>(gdc::Entity,std::type_identity<md::ls::FrameGraphRenderTarget>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphRenderTarget>(gdc::Entity,std::type_identity<md::ls::FrameGraphRenderTarget>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(v5, v6);
  }
}

uint64_t std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphRenderTarget>(gdc::Entity,std::type_identity<md::ls::FrameGraphRenderTarget>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphRenderTarget>(gdc::Entity,std::type_identity<md::ls::FrameGraphRenderTarget>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF5269A8;
  a2[1] = *(void *)(result + 8);
  return result;
}

uint64_t std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphBuilder>(gdc::Entity,std::type_identity<md::ls::FrameGraphBuilder>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphBuilder>(gdc::Entity,std::type_identity<md::ls::FrameGraphBuilder>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF526888;
  a2[1] = *(void *)(result + 8);
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)2>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)2>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)2>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)2>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF5264E0;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)1>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)1>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)1>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)1>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF526498;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)0>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)0>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)0>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)0>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF526450;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::RampMaterialData>(std::type_identity<md::ls::RampMaterialData>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::RampMaterialData>(std::type_identity<md::ls::RampMaterialData>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF526378;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::ItemsPrepared>(std::type_identity<md::ls::ItemsPrepared>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::ItemsPrepared>(std::type_identity<md::ls::ItemsPrepared>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF5262E8;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::EnteringView>(std::type_identity<md::ls::EnteringView>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::EnteringView>(std::type_identity<md::ls::EnteringView>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF5262A0;
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareCommandBuffers>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareCommandBuffers>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::CommandBufferDescriptionCreation>(*(int8x8_t **)(a2 + 8));
  uint64_t v4 = v3;
  uint64_t v5 = (unint64_t *)v3[7];
  uint64_t v6 = (uint64_t *)v3[8];
  uint64_t v7 = (char *)v6 - (char *)v5;
  if (v6 != (uint64_t *)v5)
  {
    if ((unint64_t v8 = *((unsigned int *)v5 + 1), v9 = v3[4], v10 = (v3[5] - v9) >> 3, v8 >> 7 >= v10)
      || (uint64_t v11 = *(void *)(v9 + 8 * (v8 >> 7))) == 0
      || (unint64_t v12 = *(unsigned __int16 *)(v11 + 2 * (v8 & 0x7F)), v12 >= v7 >> 3)
      || ((uint64_t v13 = (uint64_t *)&v5[v12], v13 != v6) ? (v14 = *((_DWORD *)v13 + 1) == v8) : (v14 = 0), !v14))
    {
      unint64_t v15 = v7 >> 3;
      size_t v16 = (uint64_t *)(v5 + 1);
      do
      {
        if (v16 == v6) {
          goto LABEL_95;
        }
        unint64_t v17 = *((unsigned int *)v16 + 1);
        uint64_t v18 = (uint64_t *)v3[8];
        if (v17 >> 7 < v10)
        {
          uint64_t v19 = *(void *)(v9 + 8 * (v17 >> 7));
          uint64_t v18 = (uint64_t *)v3[8];
          if (v19)
          {
            unint64_t v20 = *(unsigned __int16 *)(v19 + 2 * (v17 & 0x7F));
            uint64_t v18 = (uint64_t *)v3[8];
            if (v15 > v20)
            {
              uint64_t v18 = (uint64_t *)&v5[v20];
              if (*((_DWORD *)v18 + 1) != v17) {
                uint64_t v18 = (uint64_t *)v3[8];
              }
            }
          }
        }
        ++v16;
      }
      while (v18 == v6);
      uint64_t v5 = (unint64_t *)(v16 - 1);
    }
  }
  if (v6 != (uint64_t *)v5)
  {
    v83 = (uint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
    uint64_t v80 = v2;
    do
    {
      uint64_t *v83 = *v5;
      unint64_t v22 = *v5;
      unint64_t v23 = *v5 >> 39;
      uint64_t v24 = v4[4];
      if (v23 < (v4[5] - v24) >> 3
        && (uint64_t v25 = *(void *)(v24 + 8 * v23)) != 0
        && (unint64_t v26 = *(unsigned __int16 *)(v25 + 2 * (HIDWORD(v22) & 0x7F)),
            uint64_t v28 = v4[7],
            uint64_t v27 = v4[8],
            v26 < (v27 - v28) >> 3)
        && ((unint64_t v29 = HIDWORD(v22), v30 = v28 + 8 * v26, v30 != v27)
          ? (BOOL v31 = *(_DWORD *)(v30 + 4) == v29)
          : (BOOL v31 = 0),
            v31))
      {
        uint64_t v32 = v4[11];
        uint64_t v33 = v4[10] + 3 * v26;
      }
      else
      {
        uint64_t v32 = v4[11];
        uint64_t v33 = v32;
      }
      if (v33 == v32) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = (unsigned __int8 *)v33;
      }
      uint64_t v35 = **(void **)(v2 + 8);
      uint64_t v36 = *(void **)v35;
      v37 = *(void **)(v35 + 8);
      if (v36 != v37)
      {
        while (*v36 != 0xC94DD89A7B09BE9CLL)
        {
          v36 += 5;
          if (v36 == v37) {
            goto LABEL_42;
          }
        }
      }
      if (v36 == v37)
      {
LABEL_42:
        uint64_t v39 = 0;
      }
      else
      {
        uint64_t v39 = v36[3];
        v38 = (std::__shared_weak_count *)v36[4];
        if (v38)
        {
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
      }
      uint64_t v40 = ***(uint64_t ****)(v2 + 8);
      uint64_t v82 = v39;
      if (v40 != *(uint64_t **)(**(void **)(v2 + 8) + 8) && *v40 != 0xD369A4D92C8FFE6CLL)
      {
        v41 = v40 + 5;
        do
        {
          uint64_t v42 = *v41;
          v41 += 5;
        }
        while (v42 != 0xD369A4D92C8FFE6CLL);
        uint64_t v40 = v41 - 5;
      }
      uint64_t v43 = v40[3];
      long long v44 = (std::__shared_weak_count *)v40[4];
      if (v44)
      {
        atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      int v45 = *(void **)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v43 + 16))(v43) + 24) + 8);
      uint64_t v46 = v45[3];
      uint64_t v47 = v45[4];
      uint64_t v48 = v47 - v46;
      if (v47 != v46)
      {
        uint64_t v49 = 0;
        uint64_t v50 = *v34;
        unint64_t v51 = v48 >> 3;
        while (1)
        {
          v52 = *(unsigned __int8 **)(v46 + 8 * v49);
          if (*v52 == v50)
          {
            unint64_t v53 = *((void *)v52 + 1);
            uint64_t v54 = v45[15];
            if (v53 < (v45[16] - v54) >> 3) {
              break;
            }
          }
          if (++v49 >= v51) {
            goto LABEL_86;
          }
        }
        uint64_t v55 = *(void *)(v54 + 8 * v53);
        if (v55)
        {
          v56 = *(void **)(*(void *)(v55 + 24) + 8 * v34[1]);
          if (v56)
          {
            unsigned int v81 = v34[2];
            v56[4] = 0;
            uint64_t v57 = v56[9];
            if (v56[10] != v57) {
              v56[10] = v57;
            }
            v56[14] = v56[13];
            v56[6] = v56[5];
            v59 = (void *)v56[25];
            v58 = (void *)v56[26];
            if (v58 != v59)
            {
              v60 = v58 - 4;
              v61 = v58 - 4;
              do
              {
                v63 = (void *)v61[3];
                if (v61 == v63)
                {
                  (*(void (**)(void *))(*v61 + 32))(v61);
                  if (!*((unsigned char *)v61 - 28)) {
                    goto LABEL_68;
                  }
                }
                else
                {
                  if (v63) {
                    (*(void (**)(void *))(*v63 + 40))(v63);
                  }
                  if (!*((unsigned char *)v61 - 28)) {
                    goto LABEL_68;
                  }
                }
                *((unsigned char *)v61 - 28) = 0;
LABEL_68:
                if (*((unsigned char *)v61 - 32)) {
                  *((unsigned char *)v61 - 32) = 0;
                }
                v62 = v61 - 6;
                v61 -= 10;
                v60 -= 10;
              }
              while (v62 != v59);
            }
            v56[26] = v59;
            v65 = (void *)v56[29];
            v64 = (void *)v56[30];
            if (v64 != v65)
            {
              v66 = v64 - 4;
              v67 = v64 - 4;
              do
              {
                v69 = (void *)v67[3];
                if (v67 == v69)
                {
                  (*(void (**)(void *))(*v67 + 32))(v67);
                }
                else if (v69)
                {
                  (*(void (**)(void *))(*v69 + 40))(v69);
                }
                v68 = v67 - 4;
                v67 -= 8;
                v66 -= 8;
              }
              while (v68 != v65);
            }
            v56[30] = v65;
            (*(void (**)(uint64_t, uint64_t, void, void *))(*(void *)v82 + 16))(v82, v50, v81, v56);
            uint64_t v2 = v80;
            v70 = *(void **)(v80 + 8);
            uint64_t v71 = *v83;
            v85 = (void (**)(void **))&unk_1EF523318;
            *(void *)&long long v86 = v50;
            *((void *)&v86 + 1) = v71;
            v87 = (void **)&v85;
            v90 = &v88;
            v88 = &unk_1EF523318;
            long long v89 = v86;
            int v91 = 0;
            ecs2::Runtime::queueCommand(v70, (uint64_t)&v88);
            if (v91 != -1) {
              ((void (*)(char *, void **))off_1EF590C08[v91])(&v84, &v88);
            }
            int v91 = -1;
            if (v87 == (void **)&v85)
            {
              v85[4]((void **)&v85);
            }
            else if (v87)
            {
              (*((void (**)(void))*v87 + 5))();
            }
          }
        }
      }
LABEL_86:
      uint64_t v72 = v4[4];
      uint64_t v73 = v4[7];
      uint64_t v21 = (uint64_t *)v4[8];
      v74 = (uint64_t *)(v5 + 1);
      while (v74 != v21)
      {
        unint64_t v75 = *((unsigned int *)v74 + 1);
        uint64_t v76 = v4[8];
        if (v75 >> 7 < (v4[5] - v72) >> 3)
        {
          uint64_t v77 = *(void *)(v72 + 8 * (v75 >> 7));
          uint64_t v76 = v4[8];
          if (v77)
          {
            unint64_t v78 = *(unsigned __int16 *)(v77 + 2 * (v75 & 0x7F));
            uint64_t v76 = v4[8];
            if (((uint64_t)v21 - v73) >> 3 > v78)
            {
              uint64_t v76 = v73 + 8 * v78;
              if (*(_DWORD *)(v76 + 4) != v75) {
                uint64_t v76 = v4[8];
              }
            }
          }
        }
        ++v74;
        if ((uint64_t *)v76 != v21)
        {
          uint64_t v21 = v74 - 1;
          break;
        }
      }
      uint64_t v5 = (unint64_t *)v21;
    }
    while (v6 != v21);
  }
LABEL_95:
  uint64_t result = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  *uint64_t result = 0xFFFFFFFF00000000;
  *(void *)(v2 + 8) = 0;
  return result;
}

uint64_t RendererPassListProviderWrapper::renderer(RendererPassListProviderWrapper *this)
{
  return *((void *)this + 1);
}

void md::RenderLayerProviderWrapper::addCommandBuffer(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = a1;
  uint64_t v7 = *(void **)(a1 + 8);
  uint64_t v8 = v7[1];
  if (*v7 == v8)
  {
    uint64_t v11 = ((v7[7] - v7[6]) >> 3) | 0x100000000;
    uint64_t v13 = (uint64_t *)v7[4];
    unint64_t v12 = v7[5];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (uint64_t *)v7[3];
      int64_t v16 = (char *)v13 - (char *)v15;
      uint64_t v17 = v13 - v15;
      unint64_t v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61) {
        goto LABEL_192;
      }
      uint64_t v19 = v12 - (void)v15;
      if (v19 >> 2 > v18) {
        unint64_t v18 = v19 >> 2;
      }
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v18;
      }
      if (v20)
      {
        if (v20 >> 61) {
          goto LABEL_193;
        }
        uint64_t v21 = a4;
        unint64_t v22 = operator new(8 * v20);
        a4 = v21;
        int64_t v16 = (char *)v13 - (char *)v15;
      }
      else
      {
        unint64_t v22 = 0;
      }
      unint64_t v23 = (uint64_t *)&v22[8 * v17];
      uint64_t v24 = &v22[8 * v20];
      *unint64_t v23 = v11;
      BOOL v14 = v23 + 1;
      if (v13 == v15)
      {
        unint64_t v15 = v13;
      }
      else
      {
        unint64_t v25 = (char *)v13 - (char *)v15 - 8;
        if (v25 < 0x58) {
          goto LABEL_196;
        }
        if ((unint64_t)((char *)v13 - v22 - v16) < 0x20) {
          goto LABEL_196;
        }
        uint64_t v26 = (v25 >> 3) + 1;
        uint64_t v27 = &v22[8 * v17 - 16];
        uint64_t v28 = v13 - 2;
        uint64_t v29 = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v30 = *(_OWORD *)v28;
          *(v27 - 1) = *((_OWORD *)v28 - 1);
          _OWORD *v27 = v30;
          v27 -= 2;
          v28 -= 4;
          v29 -= 4;
        }
        while (v29);
        v23 -= v26 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= v26 & 0x3FFFFFFFFFFFFFFCLL;
        if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_196:
          do
          {
            uint64_t v31 = *--v13;
            *--unint64_t v23 = v31;
          }
          while (v13 != v15);
          unint64_t v15 = (uint64_t *)v7[3];
        }
      }
      v7[3] = v23;
      v7[4] = v14;
      v7[5] = v24;
      if (v15)
      {
        uint64_t v32 = a4;
        operator delete(v15);
        a4 = v32;
      }
    }
    else
    {
      *uint64_t v13 = v11;
      BOOL v14 = v13 + 1;
    }
    v7[4] = v14;
    unint64_t v10 = *(v14 - 1);
  }
  else
  {
    uint64_t v9 = *(void *)(v8 - 8);
    v7[1] = v8 - 8;
    *(_DWORD *)(v7[3] + 8 * v9) = (v7[7] - v7[6]) >> 3;
    *(_DWORD *)(v7[3] + 8 * v9 + 4) = (((unint64_t)*(unsigned int *)(v7[3] + 8 * v9 + 4) << 32) + 0x100000000) >> 32;
    unint64_t v10 = v9 | ((unint64_t)*(unsigned int *)(v7[3] + 8 * v9 + 4) << 32);
  }
  uint64_t v34 = (char *)v7[7];
  unint64_t v33 = v7[8];
  uint64_t v130 = v6;
  if ((unint64_t)v34 < v33)
  {
    *(void *)uint64_t v34 = a4;
    uint64_t v35 = v34 + 8;
    goto LABEL_51;
  }
  uint64_t v36 = (char *)v7[6];
  uint64_t v37 = (v34 - v36) >> 3;
  unint64_t v38 = v37 + 1;
  if ((unint64_t)(v37 + 1) >> 61) {
    goto LABEL_192;
  }
  unint64_t v39 = a2;
  unsigned int v40 = a3;
  unint64_t v41 = v10;
  uint64_t v42 = v33 - (void)v36;
  if (v42 >> 2 > v38) {
    unint64_t v38 = v42 >> 2;
  }
  if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v43 = v38;
  }
  if (v43)
  {
    if (v43 >> 61) {
      goto LABEL_193;
    }
    uint64_t v44 = a4;
    int v45 = operator new(8 * v43);
    a4 = v44;
  }
  else
  {
    int v45 = 0;
  }
  uint64_t v46 = &v45[8 * v37];
  uint64_t v47 = &v45[8 * v43];
  void *v46 = a4;
  uint64_t v35 = v46 + 1;
  if (v34 == v36)
  {
    uint64_t v36 = v34;
    unint64_t v10 = v41;
    a3 = v40;
    a2 = v39;
    uint64_t v6 = v130;
    goto LABEL_49;
  }
  unint64_t v48 = v34 - v36 - 8;
  unint64_t v10 = v41;
  if (v48 >= 0x58)
  {
    a3 = v40;
    a2 = v39;
    uint64_t v6 = v130;
    if ((unint64_t)(v36 - v45) >= 0x20)
    {
      uint64_t v49 = (v48 >> 3) + 1;
      uint64_t v50 = &v45[8 * v37 - 16];
      unint64_t v51 = v34 - 16;
      uint64_t v52 = v49 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v53 = *(_OWORD *)v51;
        *(v50 - 1) = *((_OWORD *)v51 - 1);
        _OWORD *v50 = v53;
        v50 -= 2;
        v51 -= 32;
        v52 -= 4;
      }
      while (v52);
      v46 -= v49 & 0x3FFFFFFFFFFFFFFCLL;
      v34 -= 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
      if (v49 == (v49 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_49;
      }
    }
  }
  else
  {
    a3 = v40;
    a2 = v39;
    uint64_t v6 = v130;
  }
  do
  {
    uint64_t v54 = *((void *)v34 - 1);
    v34 -= 8;
    *--uint64_t v46 = v54;
  }
  while (v34 != v36);
  uint64_t v36 = (char *)v7[6];
LABEL_49:
  v7[6] = v46;
  v7[7] = v35;
  v7[8] = v47;
  if (v36) {
    operator delete(v36);
  }
LABEL_51:
  v7[7] = v35;
  v56 = (char *)v7[10];
  unint64_t v55 = v7[11];
  if ((unint64_t)v56 >= v55)
  {
    v58 = (char *)v7[9];
    uint64_t v59 = (v56 - v58) >> 3;
    unint64_t v60 = v59 + 1;
    if ((unint64_t)(v59 + 1) >> 61) {
      goto LABEL_192;
    }
    uint64_t v61 = v55 - (void)v58;
    if (v61 >> 2 > v60) {
      unint64_t v60 = v61 >> 2;
    }
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v62 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v62 = v60;
    }
    if (v62)
    {
      if (v62 >> 61) {
        goto LABEL_193;
      }
      v63 = operator new(8 * v62);
    }
    else
    {
      v63 = 0;
    }
    v64 = &v63[8 * v59];
    void *v64 = v10;
    unint64_t v57 = (unint64_t)(v64 + 1);
    if (v56 != v58)
    {
      unint64_t v65 = v56 - v58 - 8;
      if (v65 < 0x58) {
        goto LABEL_197;
      }
      if ((unint64_t)(v58 - v63) < 0x20) {
        goto LABEL_197;
      }
      uint64_t v66 = (v65 >> 3) + 1;
      v67 = &v63[8 * v59 - 16];
      v68 = v56 - 16;
      uint64_t v69 = v66 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v70 = *(_OWORD *)v68;
        *(v67 - 1) = *((_OWORD *)v68 - 1);
        _OWORD *v67 = v70;
        v67 -= 2;
        v68 -= 32;
        v69 -= 4;
      }
      while (v69);
      v64 -= v66 & 0x3FFFFFFFFFFFFFFCLL;
      v56 -= 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
      if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_197:
        do
        {
          uint64_t v71 = *((void *)v56 - 1);
          v56 -= 8;
          *--v64 = v71;
        }
        while (v56 != v58);
      }
    }
    v7[9] = v64;
    v7[10] = v57;
    v7[11] = &v63[8 * v62];
    if (v58) {
      operator delete(v58);
    }
    uint64_t v6 = v130;
  }
  else
  {
    *(void *)v56 = v10;
    unint64_t v57 = (unint64_t)(v56 + 8);
  }
  v7[10] = v57;
  uint64_t v72 = *(void *)(v6 + 8);
  uint64_t v73 = a3;
  unint64_t v74 = a3 ^ a2;
  unint64_t v75 = *(void *)(v72 + 104);
  if (v75)
  {
    uint8x8_t v76 = (uint8x8_t)vcnt_s8((int8x8_t)v75);
    v76.i16[0] = vaddlv_u8(v76);
    if (v76.u32[0] > 1uLL)
    {
      unint64_t v57 = a3 ^ a2;
      if (v74 >= v75) {
        unint64_t v57 = v74 % v75;
      }
    }
    else
    {
      unint64_t v57 = (v75 - 1) & v74;
    }
    uint64_t v77 = *(void ***)(*(void *)(v72 + 96) + 8 * v57);
    if (v77)
    {
      unint64_t v78 = *v77;
      if (*v77)
      {
        if (v76.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v82 = v78[1];
            if (v82 == v74)
            {
              if (v78[2] == a2 && *((unsigned __int8 *)v78 + 24) == a3) {
                goto LABEL_169;
              }
            }
            else if ((v82 & (v75 - 1)) != v57)
            {
              goto LABEL_102;
            }
            unint64_t v78 = (void *)*v78;
            if (!v78) {
              goto LABEL_102;
            }
          }
        }
        do
        {
          unint64_t v80 = v78[1];
          if (v80 == v74)
          {
            if (v78[2] == a2 && *((unsigned __int8 *)v78 + 24) == a3) {
              goto LABEL_169;
            }
          }
          else
          {
            if (v80 >= v75) {
              v80 %= v75;
            }
            if (v80 != v57) {
              break;
            }
          }
          unint64_t v78 = (void *)*v78;
        }
        while (v78);
      }
    }
  }
LABEL_102:
  v83 = (void *)(v72 + 112);
  unint64_t v78 = operator new(0x38uLL);
  *unint64_t v78 = 0;
  v78[1] = v74;
  v78[2] = a2;
  v78[3] = v73;
  v78[5] = 0;
  v78[6] = 0;
  v78[4] = 0;
  float v84 = (float)(unint64_t)(*(void *)(v72 + 120) + 1);
  float v85 = *(float *)(v72 + 128);
  if (!v75 || (float)(v85 * (float)v75) < v84)
  {
    BOOL v86 = 1;
    if (v75 >= 3) {
      BOOL v86 = (v75 & (v75 - 1)) != 0;
    }
    unint64_t v87 = v86 | (2 * v75);
    unint64_t v88 = vcvtps_u32_f32(v84 / v85);
    if (v87 <= v88) {
      size_t prime = v88;
    }
    else {
      size_t prime = v87;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v75 = *(void *)(v72 + 104);
    }
    if (prime <= v75)
    {
      if (prime >= v75) {
        goto LABEL_154;
      }
      unint64_t v101 = vcvtps_u32_f32((float)*(unint64_t *)(v72 + 120) / *(float *)(v72 + 128));
      if (v75 < 3 || (uint8x8_t v102 = (uint8x8_t)vcnt_s8((int8x8_t)v75), v102.i16[0] = vaddlv_u8(v102), v102.u32[0] > 1uLL))
      {
        unint64_t v101 = std::__next_prime(v101);
      }
      else
      {
        uint64_t v103 = 1 << -(char)__clz(v101 - 1);
        if (v101 >= 2) {
          unint64_t v101 = v103;
        }
      }
      if (prime <= v101) {
        size_t prime = v101;
      }
      if (prime >= v75) {
        goto LABEL_154;
      }
      if (!prime)
      {
        v108 = *(void **)(v72 + 96);
        *(void *)(v72 + 96) = 0;
        if (v108) {
          operator delete(v108);
        }
        *(void *)(v72 + 104) = 0;
        goto LABEL_154;
      }
    }
    if (prime >> 61) {
      goto LABEL_193;
    }
    v90 = operator new(8 * prime);
    int v91 = *(void **)(v72 + 96);
    *(void *)(v72 + 96) = v90;
    if (v91) {
      operator delete(v91);
    }
    uint64_t v92 = 0;
    *(void *)(v72 + 104) = prime;
    do
      *(void *)(*(void *)(v72 + 96) + 8 * v92++) = 0;
    while (prime != v92);
    v93 = (void *)*v83;
    if (!*v83) {
      goto LABEL_154;
    }
    size_t v94 = v93[1];
    size_t v95 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v96 = v94 & v95;
      *(void *)(*(void *)(v72 + 96) + 8 * v96) = v83;
      while (1)
      {
        v97 = (void *)*v93;
        if (!*v93) {
          break;
        }
        size_t v98 = v97[1] & v95;
        if (v98 == v96)
        {
          v93 = (void *)*v93;
        }
        else
        {
          uint64_t v99 = *(void *)(v72 + 96);
          if (*(void *)(v99 + 8 * v98))
          {
            void *v93 = *v97;
            uint64_t v100 = 8 * v98;
            void *v97 = **(void **)(*(void *)(v72 + 96) + v100);
            **(void **)(*(void *)(v72 + 96) + v100) = v97;
          }
          else
          {
            *(void *)(v99 + 8 * v98) = v93;
            v93 = v97;
            size_t v96 = v98;
          }
        }
      }
LABEL_154:
      unint64_t v75 = *(void *)(v72 + 104);
      if ((v75 & (v75 - 1)) != 0)
      {
        if (v74 >= v75) {
          unint64_t v57 = v74 % v75;
        }
        else {
          unint64_t v57 = v74;
        }
      }
      else
      {
        unint64_t v57 = (v75 - 1) & v74;
      }
      goto LABEL_159;
    }
    if (v94 >= prime) {
      v94 %= prime;
    }
    *(void *)(*(void *)(v72 + 96) + 8 * v94) = v83;
    v104 = (void *)*v93;
    if (!*v93) {
      goto LABEL_154;
    }
    while (1)
    {
      size_t v106 = v104[1];
      if (v106 >= prime) {
        v106 %= prime;
      }
      if (v106 != v94)
      {
        uint64_t v107 = *(void *)(v72 + 96);
        if (!*(void *)(v107 + 8 * v106))
        {
          *(void *)(v107 + 8 * v106) = v93;
          goto LABEL_140;
        }
        void *v93 = *v104;
        uint64_t v105 = 8 * v106;
        void *v104 = **(void **)(*(void *)(v72 + 96) + v105);
        **(void **)(*(void *)(v72 + 96) + v105) = v104;
        v104 = v93;
      }
      size_t v106 = v94;
LABEL_140:
      v93 = v104;
      v104 = (void *)*v104;
      size_t v94 = v106;
      if (!v104) {
        goto LABEL_154;
      }
    }
  }
LABEL_159:
  uint64_t v109 = *(void *)(v72 + 96);
  v110 = *(void **)(v109 + 8 * v57);
  if (v110)
  {
    *unint64_t v78 = *v110;
LABEL_167:
    void *v110 = v78;
    goto LABEL_168;
  }
  *unint64_t v78 = *v83;
  void *v83 = v78;
  *(void *)(v109 + 8 * v57) = v83;
  if (*v78)
  {
    unint64_t v111 = *(void *)(*v78 + 8);
    if ((v75 & (v75 - 1)) != 0)
    {
      if (v111 >= v75) {
        v111 %= v75;
      }
    }
    else
    {
      v111 &= v75 - 1;
    }
    v110 = (void *)(*(void *)(v72 + 96) + 8 * v111);
    goto LABEL_167;
  }
LABEL_168:
  ++*(void *)(v72 + 120);
LABEL_169:
  v113 = (unint64_t *)v78[5];
  unint64_t v112 = v78[6];
  if ((unint64_t)v113 < v112)
  {
    unint64_t *v113 = v10;
    v114 = v113 + 1;
    goto LABEL_191;
  }
  v115 = (char *)v78[4];
  uint64_t v116 = ((char *)v113 - v115) >> 3;
  unint64_t v117 = v116 + 1;
  if ((unint64_t)(v116 + 1) >> 61) {
LABEL_192:
  }
    abort();
  uint64_t v118 = v112 - (void)v115;
  if (v118 >> 2 > v117) {
    unint64_t v117 = v118 >> 2;
  }
  if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v119 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v119 = v117;
  }
  if (!v119)
  {
    v120 = 0;
    goto LABEL_181;
  }
  if (v119 >> 61) {
LABEL_193:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  v120 = (char *)operator new(8 * v119);
LABEL_181:
  v121 = (unint64_t *)&v120[8 * v116];
  v122 = &v120[8 * v119];
  unint64_t *v121 = v10;
  v114 = v121 + 1;
  if (v113 != (unint64_t *)v115)
  {
    unint64_t v123 = (char *)v113 - v115 - 8;
    if (v123 < 0x58) {
      goto LABEL_198;
    }
    if ((unint64_t)(v115 - v120) < 0x20) {
      goto LABEL_198;
    }
    uint64_t v124 = (v123 >> 3) + 1;
    v125 = &v120[8 * v116 - 16];
    v126 = v113 - 2;
    uint64_t v127 = v124 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v128 = *(_OWORD *)v126;
      *((_OWORD *)v125 - 1) = *((_OWORD *)v126 - 1);
      *(_OWORD *)v125 = v128;
      v125 -= 32;
      v126 -= 4;
      v127 -= 4;
    }
    while (v127);
    v121 -= v124 & 0x3FFFFFFFFFFFFFFCLL;
    v113 -= v124 & 0x3FFFFFFFFFFFFFFCLL;
    if (v124 != (v124 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_198:
      do
      {
        unint64_t v129 = *--v113;
        *--v121 = v129;
      }
      while (v113 != (unint64_t *)v115);
    }
    v113 = (unint64_t *)v78[4];
  }
  v78[4] = v121;
  v78[5] = v114;
  v78[6] = v122;
  if (v113) {
    operator delete(v113);
  }
LABEL_191:
  v78[5] = v114;
}

void sub_1A182E628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<geo::handle<md::CommandBufferResource>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<unsigned long,md::SceneLayer>,std::vector<geo::handle<md::CommandBufferResource>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::erq::RenderTargetToSubmit>(gdc::Entity,md::erq::RenderTargetToSubmit &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::erq::RenderTargetToSubmit>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v20 = operator new(8 * v19);
      }
      else
      {
        unint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      unint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      BOOL v14 = v21 + 1;
      if (v13 == v15)
      {
        unint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        unint64_t v25 = &v20[8 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *unint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          unint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      BOOL v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      unint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          unint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  long long v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      long long v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::erq::RenderQueueToSubmit>(gdc::Entity,md::erq::RenderQueueToSubmit &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::erq::RenderQueueToSubmit>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v20 = operator new(8 * v19);
      }
      else
      {
        unint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      unint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      BOOL v14 = v21 + 1;
      if (v13 == v15)
      {
        unint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        unint64_t v25 = &v20[8 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *unint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          unint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      BOOL v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      unint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          unint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  long long v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      long long v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::erq::GPUWorkCallbacks>(gdc::Entity,md::erq::GPUWorkCallbacks &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = (void *)gdc::Registry::storage<md::erq::GPUWorkCallbacks>(a2);
  long long v23 = *(_OWORD *)(a1 + 8);
  uint64_t v24 = *(void *)(a1 + 24);
  uint64_t v25 = v3;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v25);
  if (v6)
  {
    unint64_t v12 = (void *)v4[11];
    unint64_t v11 = v4[12];
    if ((unint64_t)v12 >= v11)
    {
      BOOL v14 = (void *)v4[10];
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v12 - v14) + 1;
      if (v15 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_30;
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)v14) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        if (v17 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v18 = (char *)operator new(24 * v17);
      }
      else
      {
        uint64_t v18 = 0;
      }
      unint64_t v19 = &v18[8 * (v12 - v14)];
      *(_OWORD *)unint64_t v19 = v23;
      *((void *)v19 + 2) = v24;
      uint64_t v13 = v19 + 24;
      if (v12 != v14)
      {
        do
        {
          long long v20 = *(_OWORD *)(v12 - 3);
          *((void *)v19 - 1) = *(v12 - 1);
          *(_OWORD *)(v19 - 24) = v20;
          v19 -= 24;
          v12 -= 3;
        }
        while (v12 != v14);
        unint64_t v12 = (void *)v4[10];
      }
      v4[10] = v19;
      v4[11] = v13;
      v4[12] = &v18[24 * v17];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v12 = v23;
      v12[2] = v24;
      uint64_t v13 = v12 + 3;
    }
    v4[11] = v13;
    uint64_t v8 = v4[31];
  }
  else
  {
    uint64_t v7 = v4[10] + 24 * (((uint64_t)v5 - v4[7]) >> 3);
    *(_OWORD *)uint64_t v7 = v23;
    *(void *)(v7 + 16) = v24;
    uint64_t v8 = v4[31];
    if (v7 != v4[11])
    {
      uint64_t v9 = (void *)v4[16];
      if (v9)
      {
        while (1)
        {
          uint64_t v27 = &v25;
          uint64_t v28 = 1;
          uint64_t v26 = v8;
          uint64_t v10 = v9[6];
          if (!v10) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v10 + 48))(v10, &v26, &v27);
          uint64_t v9 = (void *)*v9;
          if (!v9) {
            return;
          }
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  uint64_t v21 = (void *)v4[22];
  if (v21)
  {
    while (1)
    {
      uint64_t v27 = &v25;
      uint64_t v28 = 1;
      uint64_t v26 = v8;
      uint64_t v22 = v21[6];
      if (!v22) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v22 + 48))(v22, &v26, &v27);
      uint64_t v21 = (void *)*v21;
      if (!v21) {
        return;
      }
    }
    goto LABEL_29;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::erq::RenderTargetToSubmit>(gdc::Entity,md::erq::RenderTargetToSubmit &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF526210;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::erq::RenderQueueToSubmit>(gdc::Entity,md::erq::RenderQueueToSubmit &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5261C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::erq::GPUWorkCallbacks>(gdc::Entity,md::erq::GPUWorkCallbacks &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF526180;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::InView>(std::type_identity<md::ls::InView>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::InView>(std::type_identity<md::ls::InView>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, int8x8_t *a2)
{
  __n128 result = (void *)gdc::Registry::storage<md::ls::InView>(a2);
  uint64_t v3 = result;
  if (result[29] && (uint64_t v4 = (void *)result[28]) != 0)
  {
    uint64_t v5 = result[31];
    uint64_t v6 = result[7];
    uint64_t v7 = (result[8] - v6) >> 3;
    while (1)
    {
      v10[0] = v6;
      v10[1] = v7;
      uint64_t v9 = v5;
      uint64_t v8 = v4[6];
      if (!v8) {
        break;
      }
      __n128 result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v8 + 48))(v8, &v9, v10);
      uint64_t v4 = (void *)*v4;
      if (!v4) {
        goto LABEL_6;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return (void *)std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassCount>(gdc::Entity,md::ls::PassCount &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()();
  }
  else
  {
LABEL_6:
    v3[8] = v3[7];
    v3[11] = v3[10];
  }
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassCount>(gdc::Entity,md::ls::PassCount &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 12);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::PassCount>(a2);
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 2;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62) {
        goto LABEL_34;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 1 > v17) {
        unint64_t v17 = v18 >> 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 62) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        long long v20 = operator new(4 * v19);
      }
      else
      {
        long long v20 = 0;
      }
      uint64_t v21 = &v20[4 * v16];
      uint64_t v22 = &v20[4 * v19];
      _DWORD *v21 = v5;
      BOOL v14 = v21 + 1;
      if (v13 != v15)
      {
        unint64_t v23 = v13 - v15 - 4;
        if (v23 < 0x2C) {
          goto LABEL_38;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_38;
        }
        uint64_t v24 = (v23 >> 2) + 1;
        uint64_t v25 = &v20[4 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        v21 -= v24 & 0x7FFFFFFFFFFFFFF8;
        v13 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          do
          {
            int v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v13 = v5;
      BOOL v14 = v13 + 4;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (_DWORD *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 1));
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (_DWORD *)v4[11])
    {
      uint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          uint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  long long v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      long long v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_33;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameGraphRenderResourcesRegistry>(gdc::Entity,md::ls::FrameGraphRenderResourcesRegistry &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v42 = 0x5D2A68BC4355A70CLL;
  int8x8_t v3 = a2[16];
  if (!*(void *)&v3) {
    goto LABEL_21;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    uint64_t v5 = 0x5D2A68BC4355A70CLL;
    if (*(void *)&v3 <= 0x5D2A68BC4355A70CuLL) {
      uint64_t v5 = 0x5D2A68BC4355A70CuLL % *(void *)&v3;
    }
  }
  else
  {
    uint64_t v5 = (*(void *)&v3 - 1) & 0x5D2A68BC4355A70CLL;
  }
  uint64_t v6 = *(void **)(*(void *)&a2[15] + 8 * v5);
  if (!v6 || (char v7 = (void *)*v6) == 0) {
LABEL_21:
  }
    operator new();
  if (v4.u32[0] < 2uLL)
  {
    uint64_t v8 = *(void *)&v3 - 1;
    while (1)
    {
      uint64_t v10 = v7[1];
      if (v10 == 0x5D2A68BC4355A70CLL)
      {
        if (v7[2] == 0x5D2A68BC4355A70CLL) {
          goto LABEL_55;
        }
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_21;
      }
      char v7 = (void *)*v7;
      if (!v7) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v7[1];
    if (v9 == 0x5D2A68BC4355A70CLL) {
      break;
    }
    if (v9 >= *(void *)&v3) {
      v9 %= *(void *)&v3;
    }
    if (v9 != v5) {
      goto LABEL_21;
    }
LABEL_11:
    char v7 = (void *)*v7;
    if (!v7) {
      goto LABEL_21;
    }
  }
  if (v7[2] != 0x5D2A68BC4355A70CLL) {
    goto LABEL_11;
  }
LABEL_55:
  unint64_t v38 = (void *)v7[3];
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v41 = v2;
  unint64_t v12 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v38 + 4, (uint64_t)&v41);
  if (v13)
  {
    unint64_t v19 = (char *)v38[11];
    unint64_t v18 = v38[12];
    if ((unint64_t)v19 >= v18)
    {
      uint64_t v21 = (char *)v38[10];
      uint64_t v22 = (v19 - v21) >> 3;
      unint64_t v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61) {
        goto LABEL_57;
      }
      uint64_t v24 = v18 - (void)v21;
      if (v24 >> 2 > v23) {
        unint64_t v23 = v24 >> 2;
      }
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v23;
      }
      if (v25)
      {
        if (v25 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v26 = (char *)operator new(8 * v25);
      }
      else
      {
        uint64_t v26 = 0;
      }
      uint64_t v27 = &v26[8 * v22];
      long long v28 = &v26[8 * v25];
      *(void *)uint64_t v27 = v11;
      long long v20 = v27 + 8;
      if (v19 != v21)
      {
        unint64_t v29 = v19 - v21 - 8;
        if (v29 < 0x58) {
          goto LABEL_61;
        }
        if ((unint64_t)(v21 - v26) < 0x20) {
          goto LABEL_61;
        }
        uint64_t v30 = (v29 >> 3) + 1;
        uint64_t v31 = &v26[8 * v22 - 16];
        uint64_t v32 = (long long *)(v19 - 16);
        uint64_t v33 = v30 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v34 = *v32;
          *((_OWORD *)v31 - 1) = *(v32 - 1);
          *(_OWORD *)uint64_t v31 = v34;
          v31 -= 32;
          v32 -= 2;
          v33 -= 4;
        }
        while (v33);
        v27 -= 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
        v19 -= 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
        if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_61:
          do
          {
            uint64_t v35 = *((void *)v19 - 1);
            v19 -= 8;
            *((void *)v27 - 1) = v35;
            v27 -= 8;
          }
          while (v19 != v21);
        }
        unint64_t v19 = (char *)v38[10];
      }
      v38[10] = v27;
      v38[11] = v20;
      v38[12] = v28;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *(void *)unint64_t v19 = v11;
      long long v20 = v19 + 8;
    }
    v38[11] = v20;
    uint64_t v15 = v38[31];
LABEL_51:
    uint64_t v36 = (void *)v38[22];
    if (!v36) {
      return;
    }
    while (1)
    {
      unint64_t v39 = &v41;
      uint64_t v40 = 1;
      uint64_t v42 = v15;
      uint64_t v37 = v36[6];
      if (!v37) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v37 + 48))(v37, &v42, &v39);
      uint64_t v36 = (void *)*v36;
      if (!v36) {
        return;
      }
    }
LABEL_56:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_57:
    abort();
  }
  BOOL v14 = (void *)((char *)v12 + v38[10] - v38[7]);
  *BOOL v14 = v11;
  uint64_t v15 = v38[31];
  if (v14 == (void *)v38[11]) {
    goto LABEL_51;
  }
  uint64_t v16 = (void *)v38[16];
  if (v16)
  {
    while (1)
    {
      unint64_t v39 = &v41;
      uint64_t v40 = 1;
      uint64_t v42 = v15;
      uint64_t v17 = v16[6];
      if (!v17) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v17 + 48))(v17, &v42, &v39);
      uint64_t v16 = (void *)*v16;
      if (!v16) {
        return;
      }
    }
    goto LABEL_56;
  }
}

void sub_1A182F58C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassRoutelineMaskConfiguration>(gdc::Entity,md::ls::PassRoutelineMaskConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint8x8_t v4 = (void *)gdc::Registry::storage<md::ls::PassRoutelineMaskConfiguration>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    char v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        long long v20 = operator new(8 * v19);
      }
      else
      {
        long long v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      uint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      BOOL v14 = v21 + 1;
      if (v13 == v15)
      {
        uint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        unint64_t v25 = &v20[8 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *unint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          uint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)char v13 = v5;
      BOOL v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      uint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          long long v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          uint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  uint64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      long long v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      uint64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassMapEngineCapabilities>(gdc::Entity,md::ls::PassMapEngineCapabilities &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 12);
  uint8x8_t v4 = (void *)gdc::Registry::storage<md::ls::PassMapEngineCapabilities>(a2);
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t v36 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if (v7)
  {
    char v13 = (unsigned char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      *char v13 = v5;
      uint64_t v14 = (uint64_t)(v13 + 1);
LABEL_37:
      v4[11] = v14;
      uint64_t v9 = v4[31];
      goto LABEL_38;
    }
    uint64_t v15 = (unsigned char *)v4[10];
    unint64_t v16 = v13 - v15;
    uint64_t v17 = v13 - v15 + 1;
    if (v17 < 0) {
      goto LABEL_43;
    }
    unint64_t v18 = v12 - (void)v15;
    if (2 * v18 > v17) {
      uint64_t v17 = 2 * v18;
    }
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v19 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v19 = v17;
    }
    if (v19) {
      long long v20 = (char *)operator new(v19);
    }
    else {
      long long v20 = 0;
    }
    uint64_t v21 = &v20[v16];
    uint64_t v22 = &v20[v19];
    v20[v16] = v5;
    uint64_t v14 = (uint64_t)&v20[v16 + 1];
    if (v13 == v15)
    {
LABEL_35:
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
      goto LABEL_37;
    }
    if (v16 < 8 || (unint64_t)(v15 - v20) < 0x20) {
      goto LABEL_32;
    }
    if (v16 >= 0x20)
    {
      unint64_t v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v24 = (long long *)(v13 - 16);
      unint64_t v25 = &v20[v13 - 16 - v15];
      unint64_t v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v27 = *v24;
        *((_OWORD *)v25 - 1) = *(v24 - 1);
        *(_OWORD *)unint64_t v25 = v27;
        v25 -= 32;
        v24 -= 2;
        v26 -= 32;
      }
      while (v26);
      if (v16 == v23) {
        goto LABEL_34;
      }
      if ((v16 & 0x18) == 0)
      {
        v21 -= v23;
        v13 -= v23;
        goto LABEL_32;
      }
    }
    else
    {
      unint64_t v23 = 0;
    }
    unint64_t v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v29 = &v13[-v23 - 8];
    int64_t v30 = v29 - v15;
    do
    {
      uint64_t v31 = *(void *)v29;
      v29 -= 8;
      *(void *)&v20[v30] = v31;
      v30 -= 8;
      v28 += 8;
    }
    while (v28);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_34;
    }
    v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
LABEL_32:
    uint64_t v32 = v21 - 1;
    do
    {
      char v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
LABEL_34:
    uint64_t v21 = v20;
    goto LABEL_35;
  }
  uint64_t v8 = (unsigned char *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *uint64_t v8 = v5;
  uint64_t v9 = v4[31];
  if (v8 != (unsigned char *)v4[11])
  {
    uint64_t v10 = (void *)v4[16];
    if (v10)
    {
      while (1)
      {
        unint64_t v38 = &v36;
        uint64_t v39 = 1;
        uint64_t v37 = v9;
        uint64_t v11 = v10[6];
        if (!v11) {
          break;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v37, &v38);
        uint64_t v10 = (void *)*v10;
        if (!v10) {
          return;
        }
      }
LABEL_42:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
      abort();
    }
    return;
  }
LABEL_38:
  long long v34 = (void *)v4[22];
  if (v34)
  {
    while (1)
    {
      unint64_t v38 = &v36;
      uint64_t v39 = 1;
      uint64_t v37 = v9;
      uint64_t v35 = v34[6];
      if (!v35) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v35 + 48))(v35, &v37, &v38);
      long long v34 = (void *)*v34;
      if (!v34) {
        return;
      }
    }
    goto LABEL_42;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresStencilReserve>(gdc::Entity,md::ls::RequiresStencilReserve &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  uint64_t v33 = 0x7F7146BC12E4A905;
  int8x8_t v3 = a2[16];
  if (!*(void *)&v3) {
    goto LABEL_21;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    uint64_t v5 = 0x7F7146BC12E4A905;
    if (*(void *)&v3 <= 0x7F7146BC12E4A905uLL) {
      uint64_t v5 = 0x7F7146BC12E4A905uLL % *(void *)&v3;
    }
  }
  else
  {
    uint64_t v5 = (*(void *)&v3 - 1) & 0x7F7146BC12E4A905;
  }
  uint64_t v6 = *(void **)(*(void *)&a2[15] + 8 * v5);
  if (!v6 || (char v7 = (void *)*v6) == 0) {
LABEL_21:
  }
    operator new();
  if (v4.u32[0] < 2uLL)
  {
    uint64_t v8 = *(void *)&v3 - 1;
    while (1)
    {
      uint64_t v10 = v7[1];
      if (v10 == 0x7F7146BC12E4A905)
      {
        if (v7[2] == 0x7F7146BC12E4A905) {
          goto LABEL_48;
        }
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_21;
      }
      char v7 = (void *)*v7;
      if (!v7) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v7[1];
    if (v9 == 0x7F7146BC12E4A905) {
      break;
    }
    if (v9 >= *(void *)&v3) {
      v9 %= *(void *)&v3;
    }
    if (v9 != v5) {
      goto LABEL_21;
    }
LABEL_11:
    char v7 = (void *)*v7;
    if (!v7) {
      goto LABEL_21;
    }
  }
  if (v7[2] != 0x7F7146BC12E4A905) {
    goto LABEL_11;
  }
LABEL_48:
  uint64_t v29 = (void *)v7[3];
  uint64_t v32 = v2;
  uint64_t v11 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v29 + 4, (uint64_t)&v32);
  if (v12)
  {
    uint64_t v17 = (unsigned char *)v29[11];
    unint64_t v16 = v29[12];
    if ((unint64_t)v17 >= v16)
    {
      size_t v19 = (char *)v29[10];
      uint64_t v20 = v17 - v19;
      uint64_t v21 = v17 - v19 + 1;
      if (v21 < 0) {
        goto LABEL_50;
      }
      unint64_t v22 = v16 - (void)v19;
      if (2 * v22 > v21) {
        uint64_t v21 = 2 * v22;
      }
      if (v22 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v23 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v23 = v21;
      }
      if (v23) {
        uint64_t v24 = (char *)operator new(v23);
      }
      else {
        uint64_t v24 = 0;
      }
      unint64_t v25 = &v24[v23];
      uint64_t v18 = (uint64_t)&v24[v20 + 1];
      unint64_t v26 = (char *)(v19 - v17);
      if (v19 == v17) {
        unint64_t v26 = 0;
      }
      v29[10] = &v24[v20 + (void)v26];
      v29[11] = v18;
      v29[12] = v25;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      uint64_t v18 = (uint64_t)(v17 + 1);
    }
    v29[11] = v18;
    uint64_t v13 = v29[31];
LABEL_44:
    long long v27 = (void *)v29[22];
    if (!v27) {
      return;
    }
    while (1)
    {
      int64_t v30 = &v32;
      uint64_t v31 = 1;
      uint64_t v33 = v13;
      uint64_t v28 = v27[6];
      if (!v28) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v28 + 48))(v28, &v33, &v30);
      long long v27 = (void *)*v27;
      if (!v27) {
        return;
      }
    }
LABEL_49:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_50:
    abort();
  }
  uint64_t v13 = v29[31];
  if (v29[10] + (((uint64_t)v11 - v29[7]) >> 3) == v29[11]) {
    goto LABEL_44;
  }
  uint64_t v14 = (void *)v29[16];
  if (v14)
  {
    while (1)
    {
      int64_t v30 = &v32;
      uint64_t v31 = 1;
      uint64_t v33 = v13;
      uint64_t v15 = v14[6];
      if (!v15) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v15 + 48))(v15, &v33, &v30);
      uint64_t v14 = (void *)*v14;
      if (!v14) {
        return;
      }
    }
    goto LABEL_49;
  }
}

void sub_1A182FE6C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassDeviceCapabilities>(gdc::Entity,md::ls::PassDeviceCapabilities &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 12);
  uint8x8_t v4 = (void *)gdc::Registry::storage<md::ls::PassDeviceCapabilities>(a2);
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t v36 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if (v7)
  {
    uint64_t v13 = (unsigned char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      *uint64_t v13 = v5;
      uint64_t v14 = (uint64_t)(v13 + 1);
LABEL_37:
      v4[11] = v14;
      uint64_t v9 = v4[31];
      goto LABEL_38;
    }
    uint64_t v15 = (unsigned char *)v4[10];
    unint64_t v16 = v13 - v15;
    uint64_t v17 = v13 - v15 + 1;
    if (v17 < 0) {
      goto LABEL_43;
    }
    unint64_t v18 = v12 - (void)v15;
    if (2 * v18 > v17) {
      uint64_t v17 = 2 * v18;
    }
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v19 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v19 = v17;
    }
    if (v19) {
      uint64_t v20 = (char *)operator new(v19);
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = &v20[v16];
    unint64_t v22 = &v20[v19];
    v20[v16] = v5;
    uint64_t v14 = (uint64_t)&v20[v16 + 1];
    if (v13 == v15)
    {
LABEL_35:
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
      goto LABEL_37;
    }
    if (v16 < 8 || (unint64_t)(v15 - v20) < 0x20) {
      goto LABEL_32;
    }
    if (v16 >= 0x20)
    {
      unint64_t v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v24 = (long long *)(v13 - 16);
      unint64_t v25 = &v20[v13 - 16 - v15];
      unint64_t v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v27 = *v24;
        *((_OWORD *)v25 - 1) = *(v24 - 1);
        *(_OWORD *)unint64_t v25 = v27;
        v25 -= 32;
        v24 -= 2;
        v26 -= 32;
      }
      while (v26);
      if (v16 == v23) {
        goto LABEL_34;
      }
      if ((v16 & 0x18) == 0)
      {
        v21 -= v23;
        v13 -= v23;
        goto LABEL_32;
      }
    }
    else
    {
      unint64_t v23 = 0;
    }
    unint64_t v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v29 = &v13[-v23 - 8];
    int64_t v30 = v29 - v15;
    do
    {
      uint64_t v31 = *(void *)v29;
      v29 -= 8;
      *(void *)&v20[v30] = v31;
      v30 -= 8;
      v28 += 8;
    }
    while (v28);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_34;
    }
    v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
LABEL_32:
    uint64_t v32 = v21 - 1;
    do
    {
      char v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
LABEL_34:
    uint64_t v21 = v20;
    goto LABEL_35;
  }
  uint64_t v8 = (unsigned char *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *uint64_t v8 = v5;
  uint64_t v9 = v4[31];
  if (v8 != (unsigned char *)v4[11])
  {
    uint64_t v10 = (void *)v4[16];
    if (v10)
    {
      while (1)
      {
        unint64_t v38 = &v36;
        uint64_t v39 = 1;
        uint64_t v37 = v9;
        uint64_t v11 = v10[6];
        if (!v11) {
          break;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v37, &v38);
        uint64_t v10 = (void *)*v10;
        if (!v10) {
          return;
        }
      }
LABEL_42:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
      abort();
    }
    return;
  }
LABEL_38:
  long long v34 = (void *)v4[22];
  if (v34)
  {
    while (1)
    {
      unint64_t v38 = &v36;
      uint64_t v39 = 1;
      uint64_t v37 = v9;
      uint64_t v35 = v34[6];
      if (!v35) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v35 + 48))(v35, &v37, &v38);
      long long v34 = (void *)*v34;
      if (!v34) {
        return;
      }
    }
    goto LABEL_42;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameGraphRenderTarget>(gdc::Entity,md::ls::FrameGraphRenderTarget &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint8x8_t v4 = (void *)gdc::Registry::storage<md::ls::FrameGraphRenderTarget>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(8 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      unint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        uint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        unint64_t v25 = &v20[8 * v16 - 16];
        unint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *unint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          uint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      uint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          long long v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          uint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  int64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      long long v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      int64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderTargetToPrepare>(gdc::Entity,md::ls::RenderTargetToPrepare &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint8x8_t v4 = (void *)gdc::Registry::storage<md::ls::RenderTargetToPrepare>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(8 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      unint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        uint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        unint64_t v25 = &v20[8 * v16 - 16];
        unint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *unint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          uint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      uint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          long long v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          uint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  int64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      long long v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      int64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PreviousResourceStamp>(gdc::Entity,md::ls::PreviousResourceStamp &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint8x8_t v4 = (void *)gdc::Registry::storage<md::ls::PreviousResourceStamp>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_34;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(8 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      unint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 != v15)
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_38;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_38;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        unint64_t v25 = &v20[8 * v16 - 16];
        unint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *unint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      uint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          long long v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          uint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  int64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      long long v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      int64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_33;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassSSAOConfiguration>(gdc::Entity,md::ls::PassSSAOConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 20);
  uint8x8_t v4 = (void *)gdc::Registry::storage<md::ls::PassSSAOConfiguration>(a2);
  uint64_t v24 = *(void *)(a1 + 8);
  int v25 = *(_DWORD *)(a1 + 16);
  uint64_t v26 = v3;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v26);
  if (v6)
  {
    unint64_t v12 = (_DWORD *)v4[11];
    unint64_t v11 = v4[12];
    if ((unint64_t)v12 >= v11)
    {
      uint64_t v14 = (_DWORD *)v4[10];
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v12 - v14) + 1;
      if (v15 > 0x1555555555555555) {
        goto LABEL_30;
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)v14) >> 2);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v17 = 0x1555555555555555;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        if (v17 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v18 = (char *)operator new(12 * v17);
      }
      else
      {
        uint64_t v18 = 0;
      }
      unint64_t v19 = &v18[4 * (v12 - v14)];
      *(void *)unint64_t v19 = v24;
      *((_DWORD *)v19 + 2) = v25;
      uint64_t v13 = v19 + 12;
      if (v12 != v14)
      {
        do
        {
          uint64_t v20 = *(void *)(v12 - 3);
          v12 -= 3;
          int v21 = v12[2];
          *(void *)(v19 - 12) = v20;
          v19 -= 12;
          *((_DWORD *)v19 + 2) = v21;
        }
        while (v12 != v14);
        unint64_t v12 = (_DWORD *)v4[10];
      }
      v4[10] = v19;
      v4[11] = v13;
      v4[12] = &v18[12 * v17];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(void *)unint64_t v12 = v24;
      v12[2] = v25;
      uint64_t v13 = v12 + 3;
    }
    v4[11] = v13;
    uint64_t v8 = v4[31];
  }
  else
  {
    uint64_t v7 = v4[10] + 12 * (((uint64_t)v5 - v4[7]) >> 3);
    *(void *)uint64_t v7 = v24;
    *(_DWORD *)(v7 + 8) = v25;
    uint64_t v8 = v4[31];
    if (v7 != v4[11])
    {
      uint64_t v9 = (void *)v4[16];
      if (v9)
      {
        while (1)
        {
          long long v28 = &v26;
          uint64_t v29 = 1;
          uint64_t v27 = v8;
          uint64_t v10 = v9[6];
          if (!v10) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v10 + 48))(v10, &v27, &v28);
          uint64_t v9 = (void *)*v9;
          if (!v9) {
            return;
          }
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  unint64_t v22 = (void *)v4[22];
  if (v22)
  {
    while (1)
    {
      long long v28 = &v26;
      uint64_t v29 = 1;
      uint64_t v27 = v8;
      uint64_t v23 = v22[6];
      if (!v23) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v23 + 48))(v23, &v27, &v28);
      unint64_t v22 = (void *)*v22;
      if (!v22) {
        return;
      }
    }
    goto LABEL_29;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassDOFConfiguration>(gdc::Entity,md::ls::PassDOFConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  unint64_t v46 = 0x860C7F11DE38DFC9;
  int8x8_t v3 = a2[16];
  if (!*(void *)&v3) {
    goto LABEL_21;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = 0x860C7F11DE38DFC9;
    if (*(void *)&v3 <= 0x860C7F11DE38DFC9) {
      unint64_t v5 = 0x860C7F11DE38DFC9 % *(void *)&v3;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v3 - 1) & 0x860C7F11DE38DFC9;
  }
  char v6 = *(void **)(*(void *)&a2[15] + 8 * v5);
  if (!v6 || (uint64_t v7 = (void *)*v6) == 0) {
LABEL_21:
  }
    operator new();
  if (v4.u32[0] < 2uLL)
  {
    uint64_t v8 = *(void *)&v3 - 1;
    while (1)
    {
      uint64_t v10 = v7[1];
      if (v10 == 0x860C7F11DE38DFC9)
      {
        if (v7[2] == 0x860C7F11DE38DFC9) {
          goto LABEL_44;
        }
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_21;
      }
      uint64_t v7 = (void *)*v7;
      if (!v7) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v7[1];
    if (v9 == 0x860C7F11DE38DFC9) {
      break;
    }
    if (v9 >= *(void *)&v3) {
      v9 %= *(void *)&v3;
    }
    if (v9 != v5) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v7 = (void *)*v7;
    if (!v7) {
      goto LABEL_21;
    }
  }
  if (v7[2] != 0x860C7F11DE38DFC9) {
    goto LABEL_11;
  }
LABEL_44:
  int64_t v30 = (void *)v7[3];
  char v11 = *(unsigned char *)(a1 + 8);
  uint64_t v45 = v2;
  unint64_t v12 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v30 + 4, (uint64_t)&v45);
  if (v13)
  {
    unint64_t v19 = (unsigned char *)v30[11];
    unint64_t v18 = v30[12];
    if ((unint64_t)v19 < v18)
    {
      *unint64_t v19 = v11;
      uint64_t v20 = (uint64_t)(v19 + 1);
LABEL_59:
      v30[11] = v20;
      unint64_t v15 = v30[31];
      goto LABEL_60;
    }
    int v21 = (unsigned char *)v30[10];
    unint64_t v22 = v19 - v21;
    uint64_t v23 = v19 - v21 + 1;
    if (v23 < 0) {
      goto LABEL_65;
    }
    unint64_t v24 = v18 - (void)v21;
    if (2 * v24 > v23) {
      uint64_t v23 = 2 * v24;
    }
    if (v24 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v25 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v25 = v23;
    }
    if (v25) {
      uint64_t v26 = (char *)operator new(v25);
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t v27 = &v26[v22];
    long long v28 = &v26[v25];
    v26[v22] = v11;
    uint64_t v20 = (uint64_t)&v26[v22 + 1];
    if (v19 == v21)
    {
LABEL_57:
      v30[10] = v27;
      v30[11] = v20;
      v30[12] = v28;
      if (v21) {
        operator delete(v21);
      }
      goto LABEL_59;
    }
    if (v22 < 8 || (unint64_t)(v21 - v26) < 0x20) {
      goto LABEL_54;
    }
    if (v22 >= 0x20)
    {
      unint64_t v29 = v22 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v31 = (long long *)(v19 - 16);
      uint64_t v32 = &v26[v19 - 16 - v21];
      unint64_t v33 = v22 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v34 = *v31;
        *((_OWORD *)v32 - 1) = *(v31 - 1);
        *(_OWORD *)uint64_t v32 = v34;
        v32 -= 32;
        v31 -= 2;
        v33 -= 32;
      }
      while (v33);
      if (v22 == v29) {
        goto LABEL_56;
      }
      if ((v22 & 0x18) == 0)
      {
        v27 -= v29;
        v19 -= v29;
        goto LABEL_54;
      }
    }
    else
    {
      unint64_t v29 = 0;
    }
    unint64_t v35 = v29 - (v22 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v36 = &v19[-v29 - 8];
    int64_t v37 = v36 - v21;
    do
    {
      uint64_t v38 = *(void *)v36;
      v36 -= 8;
      *(void *)&v26[v37] = v38;
      v37 -= 8;
      v35 += 8;
    }
    while (v35);
    if (v22 == (v22 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_56;
    }
    v27 -= v22 & 0xFFFFFFFFFFFFFFF8;
    v19 -= v22 & 0xFFFFFFFFFFFFFFF8;
LABEL_54:
    uint64_t v39 = v27 - 1;
    do
    {
      char v40 = *--v19;
      *v39-- = v40;
    }
    while (v19 != v21);
LABEL_56:
    uint64_t v27 = v26;
    goto LABEL_57;
  }
  uint64_t v14 = (unsigned char *)(v30[10] + (((uint64_t)v12 - v30[7]) >> 3));
  *uint64_t v14 = v11;
  unint64_t v15 = v30[31];
  if (v14 == (unsigned char *)v30[11])
  {
LABEL_60:
    uint64_t v41 = (void *)v30[22];
    if (!v41) {
      return;
    }
    while (1)
    {
      unint64_t v43 = &v45;
      uint64_t v44 = 1;
      unint64_t v46 = v15;
      uint64_t v42 = v41[6];
      if (!v42) {
        break;
      }
      (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(void *)v42 + 48))(v42, &v46, &v43);
      uint64_t v41 = (void *)*v41;
      if (!v41) {
        return;
      }
    }
LABEL_64:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_65:
    abort();
  }
  unint64_t v16 = (void *)v30[16];
  if (v16)
  {
    while (1)
    {
      unint64_t v43 = &v45;
      uint64_t v44 = 1;
      unint64_t v46 = v15;
      uint64_t v17 = v16[6];
      if (!v17) {
        break;
      }
      (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(void *)v17 + 48))(v17, &v46, &v43);
      unint64_t v16 = (void *)*v16;
      if (!v16) {
        return;
      }
    }
    goto LABEL_64;
  }
}

void sub_1A1830F54(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameGraphBuilder>(gdc::Entity,md::ls::FrameGraphBuilder &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint8x8_t v4 = (void *)gdc::Registry::storage<md::ls::FrameGraphBuilder>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  char v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    char v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(8 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      int v21 = &v20[8 * v16];
      unint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        unint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        size_t v25 = &v20[8 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *size_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--int v21 = v29;
          }
          while (v13 != v15);
          unint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)char v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      uint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          long long v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          uint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  int64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      long long v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      int64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameBufferDesc>(gdc::Entity,md::ls::FrameBufferDesc &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint8x8_t v4 = (void *)gdc::Registry::storage<md::ls::FrameBufferDesc>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  char v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    char v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(8 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      int v21 = &v20[8 * v16];
      unint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        unint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        size_t v25 = &v20[8 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *size_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--int v21 = v29;
          }
          while (v13 != v15);
          unint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)char v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      uint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          long long v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          uint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  int64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      long long v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      int64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassCount>(gdc::Entity,md::ls::PassCount &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5260F0;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassMapEngineCapabilities>(gdc::Entity,md::ls::PassMapEngineCapabilities &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5245A8;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresStencilReserve>(gdc::Entity,md::ls::RequiresStencilReserve &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF523C18;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassDeviceCapabilities>(gdc::Entity,md::ls::PassDeviceCapabilities &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF523B40;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassSSAOConfiguration>(gdc::Entity,md::ls::PassSSAOConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF523750;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_DWORD *)v2 + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameBufferDesc>(gdc::Entity,md::ls::FrameBufferDesc &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5223A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphRenderTarget>(gdc::Entity,std::type_identity<md::ls::FrameGraphRenderTarget>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphRenderTarget>(gdc::Entity,std::type_identity<md::ls::FrameGraphRenderTarget>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::FrameGraphRenderTarget>(a2);
  unint64_t v4 = *(void *)(a1 + 8);
  return gdc::ComponentStorageWrapper<md::ls::FrameGraphRenderTarget>::remove(v3, v4);
}

uint64_t std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphBuilder>(gdc::Entity,std::type_identity<md::ls::FrameGraphBuilder>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphBuilder>(gdc::Entity,std::type_identity<md::ls::FrameGraphBuilder>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::FrameGraphBuilder>(a2);
  unint64_t v4 = *(void *)(a1 + 8);
  return gdc::ComponentStorageWrapper<md::ls::FrameGraphBuilder>::remove(v3, v4);
}

void *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::CanUpdateWithStyleZChange>(std::type_identity<md::ls::CanUpdateWithStyleZChange>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::CanUpdateWithStyleZChange>(std::type_identity<md::ls::CanUpdateWithStyleZChange>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, int8x8_t *a2)
{
  __n128 result = (void *)gdc::Registry::storage<md::ls::CanUpdateWithStyleZChange>(a2);
  uint64_t v3 = result;
  if (result[29] && (unint64_t v4 = (void *)result[28]) != 0)
  {
    uint64_t v5 = result[31];
    uint64_t v6 = result[7];
    uint64_t v7 = (result[8] - v6) >> 3;
    while (1)
    {
      v10[0] = v6;
      v10[1] = v7;
      uint64_t v9 = v5;
      uint64_t v8 = v4[6];
      if (!v8) {
        break;
      }
      __n128 result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v8 + 48))(v8, &v9, v10);
      unint64_t v4 = (void *)*v4;
      if (!v4) {
        goto LABEL_6;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return (void *)std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)8>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)8>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)8>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)8>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()();
  }
  else
  {
LABEL_6:
    v3[8] = v3[7];
    v3[11] = v3[10];
  }
  return result;
}

void *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)8>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)8>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)8>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)8>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, int8x8_t *a2)
{
  __n128 result = (void *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)8>>(a2);
  uint64_t v3 = result;
  if (result[29] && (unint64_t v4 = (void *)result[28]) != 0)
  {
    uint64_t v5 = result[31];
    uint64_t v6 = result[7];
    uint64_t v7 = (result[8] - v6) >> 3;
    while (1)
    {
      v10[0] = v6;
      v10[1] = v7;
      uint64_t v9 = v5;
      uint64_t v8 = v4[6];
      if (!v8) {
        break;
      }
      __n128 result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v8 + 48))(v8, &v9, v10);
      unint64_t v4 = (void *)*v4;
      if (!v4) {
        goto LABEL_6;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return (void *)std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)6>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)6>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)6>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)6>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()();
  }
  else
  {
LABEL_6:
    v3[8] = v3[7];
    v3[11] = v3[10];
  }
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)6>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)6>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)6>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)6>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v19 = 0x30A3530A3A347BD0;
  int8x8_t v2 = a2[16];
  if (!*(void *)&v2) {
    goto LABEL_21;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v4 = 0x30A3530A3A347BD0;
    if (*(void *)&v2 <= 0x30A3530A3A347BD0uLL) {
      uint64_t v4 = 0x30A3530A3A347BD0uLL % *(void *)&v2;
    }
  }
  else
  {
    uint64_t v4 = (*(void *)&v2 - 1) & 0x30A3530A3A347BD0;
  }
  uint64_t v5 = *(void **)(*(void *)&a2[15] + 8 * v4);
  if (!v5 || (uint64_t v6 = (void *)*v5) == 0) {
LABEL_21:
  }
    operator new();
  if (v3.u32[0] < 2uLL)
  {
    uint64_t v7 = *(void *)&v2 - 1;
    while (1)
    {
      uint64_t v9 = v6[1];
      if (v9 == 0x30A3530A3A347BD0)
      {
        if (v6[2] == 0x30A3530A3A347BD0) {
          goto LABEL_27;
        }
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_21;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v8 = v6[1];
    if (v8 == 0x30A3530A3A347BD0) {
      break;
    }
    if (v8 >= *(void *)&v2) {
      v8 %= *(void *)&v2;
    }
    if (v8 != v4) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_21;
    }
  }
  if (v6[2] != 0x30A3530A3A347BD0) {
    goto LABEL_11;
  }
LABEL_27:
  unint64_t v15 = (void *)v6[3];
  if (v15[29])
  {
    uint64_t v10 = (void *)v15[28];
    if (v10)
    {
      uint64_t v11 = v15[31];
      uint64_t v12 = v15[7];
      uint64_t v13 = (v15[8] - v12) >> 3;
      do
      {
        v18[0] = v12;
        v18[1] = v13;
        uint64_t v19 = v11;
        uint64_t v14 = v10[6];
        if (!v14)
        {
          std::__throw_bad_function_call[abi:nn180100]();
          unint64_t v17 = v16;
          (*(void (**)(void *))(*v15 + 8))(v15);
          _Unwind_Resume(v17);
        }
        (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v14 + 48))(v14, &v19, v18);
        uint64_t v10 = (void *)*v10;
      }
      while (v10);
    }
  }
  v15[8] = v15[7];
  v15[11] = v15[10];
}

void *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)5>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)5>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)5>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)5>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, int8x8_t *a2)
{
  __n128 result = (void *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)5>>(a2);
  uint8x8_t v3 = result;
  if (result[29] && (uint64_t v4 = (void *)result[28]) != 0)
  {
    uint64_t v5 = result[31];
    uint64_t v6 = result[7];
    uint64_t v7 = (result[8] - v6) >> 3;
    while (1)
    {
      v10[0] = v6;
      v10[1] = v7;
      uint64_t v9 = v5;
      uint64_t v8 = v4[6];
      if (!v8) {
        break;
      }
      __n128 result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v8 + 48))(v8, &v9, v10);
      uint64_t v4 = (void *)*v4;
      if (!v4) {
        goto LABEL_6;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return (void *)std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)1>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)1>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)1>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)1>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()();
  }
  else
  {
LABEL_6:
    v3[8] = v3[7];
    v3[11] = v3[10];
  }
  return result;
}

void *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)1>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)1>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)1>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)1>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, int8x8_t *a2)
{
  __n128 result = (void *)gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)1>>(a2);
  uint8x8_t v3 = result;
  if (result[29] && (uint64_t v4 = (void *)result[28]) != 0)
  {
    uint64_t v5 = result[31];
    uint64_t v6 = result[7];
    uint64_t v7 = (result[8] - v6) >> 3;
    while (1)
    {
      v10[0] = v6;
      v10[1] = v7;
      uint64_t v9 = v5;
      uint64_t v8 = v4[6];
      if (!v8) {
        break;
      }
      __n128 result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v8 + 48))(v8, &v9, v10);
      uint64_t v4 = (void *)*v4;
      if (!v4) {
        goto LABEL_6;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return (void *)std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::RenderItemUpdate>(std::type_identity<md::ls::RenderItemUpdate>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::RenderItemUpdate>(std::type_identity<md::ls::RenderItemUpdate>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()();
  }
  else
  {
LABEL_6:
    v3[8] = v3[7];
    v3[11] = v3[10];
  }
  return result;
}

void *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::RenderItemUpdate>(std::type_identity<md::ls::RenderItemUpdate>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::RenderItemUpdate>(std::type_identity<md::ls::RenderItemUpdate>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, int8x8_t *a2)
{
  __n128 result = (void *)gdc::Registry::storage<md::ls::RenderItemUpdate>(a2);
  uint8x8_t v3 = result;
  if (result[29] && (uint64_t v4 = (void *)result[28]) != 0)
  {
    uint64_t v5 = result[31];
    uint64_t v6 = result[7];
    uint64_t v7 = (result[8] - v6) >> 3;
    while (1)
    {
      v10[0] = v6;
      v10[1] = v7;
      uint64_t v9 = v5;
      uint64_t v8 = v4[6];
      if (!v8) {
        break;
      }
      __n128 result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v8 + 48))(v8, &v9, v10);
      uint64_t v4 = (void *)*v4;
      if (!v4) {
        goto LABEL_6;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return (void *)std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::RampMaterialData>(std::type_identity<md::ls::RampMaterialData>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::RampMaterialData>(std::type_identity<md::ls::RampMaterialData>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()();
  }
  else
  {
LABEL_6:
    v3[8] = v3[7];
    v3[11] = v3[10];
  }
  return result;
}

void *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::RampMaterialData>(std::type_identity<md::ls::RampMaterialData>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::RampMaterialData>(std::type_identity<md::ls::RampMaterialData>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, int8x8_t *a2)
{
  __n128 result = (void *)gdc::Registry::storage<md::ls::RampMaterialData>(a2);
  uint8x8_t v3 = result;
  if (result[29] && (uint64_t v4 = (void *)result[28]) != 0)
  {
    uint64_t v5 = result[31];
    uint64_t v6 = result[7];
    uint64_t v7 = (result[8] - v6) >> 3;
    while (1)
    {
      v10[0] = v6;
      v10[1] = v7;
      uint64_t v9 = v5;
      uint64_t v8 = v4[6];
      if (!v8) {
        break;
      }
      __n128 result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v8 + 48))(v8, &v9, v10);
      uint64_t v4 = (void *)*v4;
      if (!v4) {
        goto LABEL_6;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return (void *)std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::CanEnableTexture>(std::type_identity<md::ls::CanEnableTexture>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::CanEnableTexture>(std::type_identity<md::ls::CanEnableTexture>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()();
  }
  else
  {
LABEL_6:
    v3[8] = v3[7];
    v3[11] = v3[10];
  }
  return result;
}

void *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::CanEnableTexture>(std::type_identity<md::ls::CanEnableTexture>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::CanEnableTexture>(std::type_identity<md::ls::CanEnableTexture>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, int8x8_t *a2)
{
  __n128 result = (void *)gdc::Registry::storage<md::ls::CanEnableTexture>(a2);
  uint8x8_t v3 = result;
  if (result[29] && (uint64_t v4 = (void *)result[28]) != 0)
  {
    uint64_t v5 = result[31];
    uint64_t v6 = result[7];
    uint64_t v7 = (result[8] - v6) >> 3;
    while (1)
    {
      v10[0] = v6;
      v10[1] = v7;
      uint64_t v9 = v5;
      uint64_t v8 = v4[6];
      if (!v8) {
        break;
      }
      __n128 result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v8 + 48))(v8, &v9, v10);
      uint64_t v4 = (void *)*v4;
      if (!v4) {
        goto LABEL_6;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return (void *)std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::EnteringView>(std::type_identity<md::ls::EnteringView>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::EnteringView>(std::type_identity<md::ls::EnteringView>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()();
  }
  else
  {
LABEL_6:
    v3[8] = v3[7];
    v3[11] = v3[10];
  }
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::EnteringView>(std::type_identity<md::ls::EnteringView>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::EnteringView>(std::type_identity<md::ls::EnteringView>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, int8x8_t *a2)
{
  int8x8_t v2 = (void *)gdc::Registry::storage<md::ls::EnteringView>(a2);
  uint8x8_t v3 = v2;
  if (v2[29] && (uint64_t v4 = (void *)v2[28]) != 0)
  {
    uint64_t v5 = v2[31];
    uint64_t v6 = v2[7];
    uint64_t v7 = (v2[8] - v6) >> 3;
    while (1)
    {
      v12[0] = v6;
      v12[1] = v7;
      uint64_t v11 = v5;
      uint64_t v8 = v4[6];
      if (!v8) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v8 + 48))(v8, &v11, v12);
      uint64_t v4 = (void *)*v4;
      if (!v4) {
        goto LABEL_6;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::InView>(std::type_identity<md::ls::InView>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::InView>(std::type_identity<md::ls::InView>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(v9, v10);
  }
  else
  {
LABEL_6:
    v3[8] = v3[7];
    v3[11] = v3[10];
  }
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::InView>(std::type_identity<md::ls::InView>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::InView>(std::type_identity<md::ls::InView>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF5266D8;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::RenderablePendingProcessing>(std::type_identity<md::ls::RenderablePendingProcessing>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::RenderablePendingProcessing>(std::type_identity<md::ls::RenderablePendingProcessing>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF526690;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::MaterialPendingProcessing>(std::type_identity<md::ls::MaterialPendingProcessing>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::MaterialPendingProcessing>(std::type_identity<md::ls::MaterialPendingProcessing>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF526648;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::CanUpdateWithStyleZChange>(std::type_identity<md::ls::CanUpdateWithStyleZChange>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::CanUpdateWithStyleZChange>(std::type_identity<md::ls::CanUpdateWithStyleZChange>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF526600;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)8>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)8>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)8>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)8>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF590168;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)7>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)7>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)7>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)7>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF5265B8;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)6>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)6>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)6>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)6>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF5900F0;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)5>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)5>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)5>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)5>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF5900A8;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)4>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)4>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)4>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)4>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF526570;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)3>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)3>>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::SliceAssignmentT<(md::SliceType)3>>(std::type_identity<md::ls::SliceAssignmentT<(md::SliceType)3>>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF526528;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::ShouldSkipRender>(std::type_identity<md::ls::ShouldSkipRender>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::ShouldSkipRender>(std::type_identity<md::ls::ShouldSkipRender>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF526408;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::RenderItemUpdate>(std::type_identity<md::ls::RenderItemUpdate>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::RenderItemUpdate>(std::type_identity<md::ls::RenderItemUpdate>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF5263C0;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::CanEnableTexture>(std::type_identity<md::ls::CanEnableTexture>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::CanEnableTexture>(std::type_identity<md::ls::CanEnableTexture>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF526330;
}

uint64_t gdc::Registry::storage<md::ls::SliceAssignmentT<(md::SliceType)8>>(int8x8_t *a1)
{
  unint64_t v10 = 0xFB8BCB8E983A05B1;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xFB8BCB8E983A05B1;
    if (*(void *)&v1 <= 0xFB8BCB8E983A05B1) {
      unint64_t v3 = 0xFB8BCB8E983A05B1 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xFB8BCB8E983A05B1;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xFB8BCB8E983A05B1)
      {
        if (v5[2] == 0xFB8BCB8E983A05B1) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xFB8BCB8E983A05B1) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xFB8BCB8E983A05B1) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A183229C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::ComponentStorageWrapper<md::ls::PassCount>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(_DWORD *)(v14 + 4 * v7) = *(_DWORD *)(v15 - 4);
  a1[11] = v15 - 4;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PassRoutelineMaskConfiguration>::remove();
}

uint64_t gdc::ComponentStorageWrapper<md::ls::PassRoutelineMaskConfiguration>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PassMapEngineCapabilities>::remove();
}

uint64_t gdc::ComponentStorageWrapper<md::ls::PassMapEngineCapabilities>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequiresStencilReserve>::remove();
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequiresStencilReserve>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v20, v21);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FrameGraphRenderTarget>::remove(v17, v18);
}

uint64_t gdc::ComponentStorageWrapper<md::ls::FrameGraphRenderTarget>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PreviousResourceStamp>::remove();
}

uint64_t gdc::ComponentStorageWrapper<md::ls::PreviousResourceStamp>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(void *)(v14 + 8 * v7) = *(void *)(v15 - 8);
  a1[11] = v15 - 8;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PassSSAOConfiguration>::remove();
}

uint64_t gdc::ComponentStorageWrapper<md::ls::PassSSAOConfiguration>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10] + 12 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  int v16 = *(_DWORD *)(v15 - 4);
  *(void *)uint64_t v14 = *(void *)(v15 - 12);
  *(_DWORD *)(v14 + 8) = v16;
  a1[11] -= 12;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PassDOFConfiguration>::remove();
}

uint64_t gdc::ComponentStorageWrapper<md::ls::PassDOFConfiguration>::remove(void *a1, unint64_t a2)
{
  unint64_t v21 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  int v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v23[0] = &v21;
    v23[1] = 1;
    uint64_t v22 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v22, v23);
    int v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FrameGraphBuilder>::remove(v19, v20);
}

uint64_t gdc::ComponentStorageWrapper<md::ls::FrameGraphBuilder>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FrameGraphRenderResourcesRegistry>::remove();
}

uint64_t gdc::ComponentStorageWrapper<md::ls::FrameGraphRenderResourcesRegistry>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::FrameBufferDesc>::remove();
}

uint64_t gdc::ComponentStorageWrapper<md::ls::FrameBufferDesc>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = (_DWORD *)(a1[10] + 8 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  int v16 = *(_DWORD *)(v15 - 8);
  v15 -= 8;
  *uint64_t v14 = v16;
  v14[1] = *(_DWORD *)(v15 + 4);
  a1[11] = v15;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ita::FrameHandle>::remove();
}

uint64_t gdc::ComponentStorageWrapper<md::ita::FrameHandle>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::erq::RenderTargetToSubmit>::remove();
}

uint64_t gdc::ComponentStorageWrapper<md::erq::RenderTargetToSubmit>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::erq::RenderQueueToSubmit>::remove();
}

uint64_t gdc::ComponentStorageWrapper<md::erq::RenderQueueToSubmit>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::erq::GPUWorkCallbacks>::remove();
}

uint64_t gdc::ComponentStorageWrapper<md::erq::GPUWorkCallbacks>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10] + 24 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  uint64_t v16 = *(void *)(v15 - 8);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)(v15 - 24);
  *(void *)(v14 + 16) = v16;
  a1[11] -= 24;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PassDeviceCapabilities>::remove();
}

uint64_t gdc::ComponentStorageWrapper<md::ls::PassDeviceCapabilities>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RenderTargetToPrepare>::remove();
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RenderTargetToPrepare>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RequestReset>::remove();
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RequestReset>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v21, v22);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return esl::FontKey::tokenize(v19);
}

uint64_t esl::FontKey::tokenize@<X0>(std::string *__str@<X0>, uint64_t *a2@<X8>)
{
  *a2 = (uint64_t)a2;
  a2[1] = (uint64_t)a2;
  a2[2] = 0;
  std::string::basic_string(&v21, __str, 1uLL, 1uLL, (std::allocator<char> *)&__p);
  uint64_t v4 = (char *)operator new(0x28uLL);
  *(std::string *)(v4 + 16) = v21;
  uint64_t v5 = *a2;
  *(void *)uint64_t v4 = *a2;
  *((void *)v4 + 1) = a2;
  *(void *)(v5 + 8) = v4;
  *a2 = (uint64_t)v4;
  ++a2[2];
  std::string::basic_string(&__p, __str, 2uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v25);
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)&v21, &__p, 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(&__p, 0, sizeof(__p));
  while (1)
  {
    uint64_t v6 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v21, (uint64_t)&__p, 0x2Cu);
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) != 0) {
      break;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v9 = std::remove_if[abi:ne180100]<std::__wrap_iter<char *>,int (*)(int)>((char *)p_p, (char *)p_p + size, (unsigned int (*)(void))isspace);
    unint64_t v10 = (char *)&__p + HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      uint64_t v11 = &__p;
    }
    else
    {
      unint64_t v10 = (char *)(__p.__r_.__value_.__r.__words[0] + __p.__r_.__value_.__l.__size_);
      uint64_t v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    std::string::erase(&__p, v9 - (char *)v11, v10 - v9);
    uint64_t v12 = a2[1];
    uint64_t v13 = (void *)(v12 + 16);
    int v14 = *(char *)(v12 + 39);
    if (v14 < 0)
    {
      if (*(void *)(v12 + 24) == 1)
      {
        uint64_t v13 = (void *)*v13;
LABEL_18:
        if (*(unsigned char *)v13 == 33 && a2[2] == 1) {
          goto LABEL_20;
        }
      }
    }
    else if (v14 == 1)
    {
      goto LABEL_18;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v17 = (std::string *)((char *)&__p + HIBYTE(__p.__r_.__value_.__r.__words[2]));
    }
    else {
      uint64_t v17 = (std::string *)(__p.__r_.__value_.__r.__words[0] + __p.__r_.__value_.__l.__size_);
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v18 = &__p;
    }
    else {
      uint64_t v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    while (v18 != v17)
    {
      v18->__r_.__value_.__s.__data_[0] = __tolower(v18->__r_.__value_.__s.__data_[0]);
      uint64_t v18 = (std::string *)((char *)v18 + 1);
    }
LABEL_20:
    uint64_t v15 = std::__list_imp<std::string>::__create_node[abi:ne180100]<std::string const&>((uint64_t)a2, 0, 0, (uint64_t)&__p);
    v15[1] = a2;
    uint64_t v16 = *a2;
    *uint64_t v15 = *a2;
    *(void *)(v16 + 8) = v15;
    *a2 = (uint64_t)v15;
    ++a2[2];
  }
  if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v21.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA410];
  *(std::string::size_type *)((char *)v21.__r_.__value_.__r.__words + *(void *)(v21.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA410] + 24);
  v21.__r_.__value_.__r.__words[2] = MEMORY[0x1E4FBA470] + 16;
  if (v23 < 0) {
    operator delete(v22);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  return MEMORY[0x1A62391A0](&v24);
}

void sub_1A183384C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__list_imp<std::string>::clear(v20);
  _Unwind_Resume(a1);
}

void *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, uint64_t a2, unsigned __int8 a3)
{
  MEMORY[0x1A6238C70](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    unint64_t v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    uint64_t v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1A1833A1C(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1A18339DCLL);
  }
  __cxa_rethrow();
}

void sub_1A1833A98(_Unwind_Exception *a1)
{
}

char *std::remove_if[abi:ne180100]<std::__wrap_iter<char *>,int (*)(int)>(char *a1, char *a2, unsigned int (*a3)(void))
{
  if (a1 == a2) {
    return a2;
  }
  uint64_t v5 = a1;
  while (!a3(*v5))
  {
    if (++v5 == a2) {
      return a2;
    }
  }
  if (v5 != a2)
  {
    for (i = v5 + 1; i != a2; ++i)
    {
      if (!a3(*i)) {
        *v5++ = *i;
      }
    }
  }
  return v5;
}

int isspace(int _c)
{
  if (_c <= 0x7F) {
    int v1 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * _c + 60) & 0x4000;
  }
  else {
    int v1 = __maskrune(_c, 0x4000uLL);
  }
  return v1 != 0;
}

void *std::__list_imp<std::string>::__create_node[abi:ne180100]<std::string const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = operator new(0x28uLL);
  void *v7 = a2;
  v7[1] = a3;
  uint64_t v8 = (std::string *)(v7 + 2);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    v7[4] = *(void *)(a4 + 16);
  }
  return v7;
}

void sub_1A1833BE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::istringstream::basic_istringstream[abi:ne180100](uint64_t *a1, const std::string *a2, int a3)
{
  uint64_t v6 = MEMORY[0x1E4FBA490] + 64;
  a1[15] = MEMORY[0x1E4FBA490] + 64;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = *(void *)(MEMORY[0x1E4FBA410] + 16);
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA410] + 8);
  *a1 = v9;
  *(uint64_t *)((char *)a1 + *(void *)(v9 - 24)) = v8;
  a1[1] = 0;
  unint64_t v10 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v10, a1 + 2);
  uint64_t v11 = MEMORY[0x1E4FBA490] + 24;
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  *a1 = v11;
  a1[15] = v6;
  std::stringbuf::basic_stringbuf[abi:ne180100](v7, a2, a3 | 8);
  return a1;
}

void sub_1A1833D50(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x1A62391A0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v6 = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_1A1833DF4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    uint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

uint64_t md::CaptionedIconLabelPart::needsCrossfade(uint64_t a1, uint64_t a2, const md::LabelLayoutContext *a3, unsigned char *a4)
{
  std::string::size_type v7 = *(uint64_t **)(a1 + 32);
  if (*(unsigned char *)(a1 + 926))
  {
    uint64_t v8 = *(void *)(a1 + 16);
    uint64_t v9 = *(void *)(v8 + 8);
    uint64_t v10 = *(void *)(v9 + 464);
    if (v10)
    {
      unsigned int v11 = (int)*(float *)(v8 + 392);
      int v12 = *(unsigned __int8 *)(v8 + 256);
      uint64_t v13 = v9 + 464;
      unsigned int v14 = *(_DWORD *)(v8 + 48);
      uint64_t v15 = v13;
      do
      {
        unsigned int v16 = *(_DWORD *)(v10 + 32);
        BOOL v17 = v16 >= v14;
        if (v16 >= v14) {
          uint64_t v18 = (uint64_t *)v10;
        }
        else {
          uint64_t v18 = (uint64_t *)(v10 + 8);
        }
        if (v17) {
          uint64_t v15 = v10;
        }
        uint64_t v10 = *v18;
      }
      while (*v18);
      if (v15 != v13 && v14 >= *(_DWORD *)(v15 + 32))
      {
        uint64_t v20 = v15 + 40;
        uint64_t v19 = *(void **)(v15 + 40);
        uint64_t v21 = *(void *)(v20 + 8) - (void)v19;
        if ((unint64_t)v21 < 9)
        {
          uint64_t v26 = 1;
        }
        else
        {
          unint64_t v22 = v21 >> 3;
          if (*v19) {
            uint64_t v23 = *v19 + 8;
          }
          else {
            uint64_t v23 = 0;
          }
          uint64_t v24 = *(void *)(v23 + 72);
          uint64_t v25 = 2;
          if (v22 > 2) {
            uint64_t v25 = v22;
          }
          uint64_t v26 = 1;
          while (1)
          {
            uint64_t v27 = v19[v26];
            uint64_t v28 = v27 ? v27 + 8 : 0;
            if (*(void *)(v28 + 72) != v24 || *(unsigned __int8 *)(v28 + 129) > v11) {
              break;
            }
            if (v25 == ++v26)
            {
              uint64_t v26 = v25;
              break;
            }
          }
        }
        uint64_t v29 = v19[v26 - 1];
        if (v29)
        {
          uint64_t v30 = v29 + 139;
          if (v12 == 2) {
            uint64_t v30 = v29 + 140;
          }
          uint64_t v31 = (unsigned __int8 *)(v12 == 3 ? v29 + 141 : v30);
          if (*(unsigned __int8 *)(v29 + 138) != *(unsigned __int8 *)(a1 + 943)
            || *v31 != *(unsigned __int8 *)(a1 + 944))
          {
            goto LABEL_81;
          }
        }
      }
    }
  }
  if (!a3)
  {
    uint64_t v44 = *(void *)(a1 + 576);
    uint64_t v45 = *(void *)(a1 + 584);
    if (v44 != v45)
    {
      uint64_t v46 = v44 + 8;
      do
      {
        char v47 = (*(uint64_t (**)(void, uint64_t, void, unsigned char *))(**(void **)(v46 - 8) + 760))(*(void *)(v46 - 8), a2, 0, a4);
        if (v47) {
          break;
        }
        BOOL v37 = v46 == v45;
        v46 += 8;
      }
      while (!v37);
      if (v47) {
        return 1;
      }
    }
    goto LABEL_65;
  }
  uint64_t v32 = *v7;
  if (*(unsigned __int8 *)(*v7 + 250) == *(unsigned __int8 *)(a1 + 922))
  {
    if (!*(unsigned char *)(a1 + 926)
      || !*(unsigned char *)(a1 + 958)
      || *(_WORD *)(v32 + 246)
      || *(unsigned __int8 *)(a1 + 832) == *(unsigned __int8 *)(a1 + 837)
      && *(unsigned __int8 *)(a1 + 833) == *(unsigned __int8 *)(a1 + 838)
      && (int v53 = *(unsigned __int8 *)(a1 + 835), v53 == *(unsigned __int8 *)(a1 + 840))
      && (v53 != 10 || *(unsigned __int8 *)(a1 + 836) == *(unsigned __int8 *)(a1 + 841)))
    {
      if (*(unsigned __int8 *)(v32 + 253) != *(unsigned __int8 *)(a1 + 857)
        || (md::LabelIconStyleMonitor::needsCrossfade((unsigned __int8 *)(a1 + 736), v32, a4) & 1) != 0)
      {
        return 1;
      }
      uint64_t v33 = *(void *)(a1 + 576);
      uint64_t v34 = *(void *)(a1 + 584);
      if (v33 != v34)
      {
        uint64_t v35 = v33 + 8;
        do
        {
          char v36 = (*(uint64_t (**)(void, uint64_t, uint64_t, unsigned char *))(**(void **)(v35 - 8) + 760))(*(void *)(v35 - 8), a2, 1, a4);
          if (v36) {
            break;
          }
          BOOL v37 = v35 == v34;
          v35 += 8;
        }
        while (!v37);
        if (v36) {
          return 1;
        }
      }
      uint64_t v38 = *v7;
      if (*(unsigned __int8 *)(*v7 + 144) != *(unsigned __int8 *)(a1 + 923)) {
        return 1;
      }
      uint64_t v39 = *(void *)(v38 + 272);
      if (!v39)
      {
        char v40 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*v7);
        uint64_t v39 = *v40;
        *(void *)(v38 + 272) = *v40;
      }
      if (*(unsigned __int8 *)(a1 + 924) != *(unsigned __int8 *)(v39 + 70)) {
        return 1;
      }
      if (!*(unsigned char *)(a1 + 926)) {
        return 0;
      }
      uint64_t v41 = *v7;
      uint64_t v42 = *(void *)(*v7 + 272);
      if (!v42)
      {
        unint64_t v43 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*v7);
        uint64_t v42 = *v43;
        *(void *)(v41 + 272) = *v43;
      }
      if (*(unsigned __int8 *)(v42 + 64) != *(unsigned __int8 *)(a1 + 853)
        || md::LabelAnnotationStyleMonitor::needsCrossfade(a1 + 933, *v7))
      {
        return 1;
      }
LABEL_65:
      if (*(unsigned char *)(a1 + 926))
      {
        if (*(unsigned char *)(a1 + 832) == 5)
        {
          if (md::CaptionedIconLabelPart::evaluateFeatureNormalTextPosition(*(md::CaptionedIconLabelPart **)(a1 + 16), *(md::Label **)(a2 + 432), a3) == *(unsigned __int8 *)(a1 + 847))return 0; {
        }
          }
        else
        {
          if (!*(unsigned char *)(a1 + 920)) {
            return 0;
          }
          int v48 = *(unsigned __int8 *)(*(void *)(a2 + 432) + 472) + *(unsigned __int8 *)(a1 + 836);
          unsigned int v49 = ((v48 + 32) >> 5) & 6;
          int v50 = (v48 + 16) >> 5;
          unsigned int v51 = *(unsigned char *)(a1 + 856) ? v50 : v49;
          if (v51 == *(unsigned __int8 *)(a1 + 847)) {
            return 0;
          }
        }
        return 1;
      }
      return 0;
    }
  }
LABEL_81:
  uint64_t result = 1;
  a4[8] = 1;
  *a4 = 1;
  return result;
}

uint64_t md::TextLabelPart::needsCrossfade(uint64_t a1, uint64_t a2, int a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v4 = **(void **)(a1 + 32);
  BOOL v5 = *(unsigned __int8 *)(a1 + 864) == 1;
  uint64_t v6 = v4 + 280;
  if (*(unsigned char *)(a1 + 864) == 1) {
    uint64_t v7 = 6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(float **)(v6 + 8 * (*(unsigned char *)(a1 + 864) == 1));
  if (v8)
  {
    if (vabds_f32(v8[2], *(float *)(v4 + 104)) >= 0.01)
    {
      md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>((unsigned __int8 *)v4, (uint64_t)v8, v7);
      uint64_t v8 = *(float **)(v6 + 8 * v5);
    }
  }
  else
  {
    uint64_t v8 = (float *)md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(v4, v7);
    *(void *)(v6 + 8 * v5) = v8;
  }
  uint64_t v10 = *(void *)v8;
  if (*(float *)(*(void *)v8 + 100) == 0.0) {
    return 0;
  }
  uint64_t v11 = *(void *)(a1 + 576);
  uint64_t v12 = *(void *)(v11 + 16);
  if (!*(unsigned char *)(v12 + 120)) {
    return 1;
  }
  char v13 = *(unsigned char *)(*(void *)(a1 + 16) + 404);
  uint64_t v14 = *(unsigned int *)(v11 + 8);
  uint64_t v15 = 1 << v13;
  if (((1 << v13) & v14) != 0) {
    return 0;
  }
  unsigned int v16 = *(unsigned __int8 **)(v12 + 16);
  if (v16[36] != *(unsigned __int8 *)(v10 + 108)
    || v16[37] != *(unsigned __int8 *)(v10 + 109)
    || v16[38] != *(unsigned __int8 *)(v10 + 110)
    || v16[39] != *(unsigned __int8 *)(v10 + 111)
    || v16[40] != *(unsigned __int8 *)(v10 + 112))
  {
    return 1;
  }
  uint64_t v17 = v16[23];
  if ((v17 & 0x80u) == 0) {
    uint64_t v18 = v16[23];
  }
  else {
    uint64_t v18 = *((void *)v16 + 1);
  }
  uint64_t v19 = *(unsigned __int8 *)(v10 + 95);
  int v20 = (char)v19;
  if ((v19 & 0x80u) != 0) {
    uint64_t v19 = *(void *)(v10 + 80);
  }
  if (v18 != v19) {
    return 1;
  }
  uint64_t v23 = *(unsigned __int8 **)(v10 + 72);
  uint64_t v21 = (unsigned __int8 *)(v10 + 72);
  unint64_t v22 = v23;
  if (v20 >= 0) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v22;
  }
  if ((v17 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v16, v24, *((void *)v16 + 1))) {
      return 1;
    }
  }
  else if (v16[23])
  {
    while (*v16 == *v24)
    {
      ++v16;
      ++v24;
      if (!--v17) {
        goto LABEL_35;
      }
    }
    return 1;
  }
LABEL_35:
  uint64_t result = 0;
  *(_DWORD *)(v11 + 8) = v14 | v15;
  return result;
}

uint64_t md::PointIconLabelPart::needsCrossfade(uint64_t a1, uint64_t a2, int a3, unsigned char *a4)
{
  if (!a3) {
    return 0;
  }
  BOOL v5 = (unsigned __int8 *)(a1 + 768);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(v6 + 8);
  uint64_t v8 = *(unsigned int *)(v6 + 48);
  LOBYTE(v6) = atomic_load((unsigned __int8 *)(v6 + 1240));
  uint64_t v9 = *(void *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void))(*(void *)v7 + 552))(v7, v8, 0, v6 & 1, 0);
  return md::LabelIconStyleMonitor::needsCrossfade(v5, v9, a4);
}

uint64_t md::LabelIconStyleMonitor::needsCrossfade(unsigned __int8 *a1, uint64_t a2, unsigned char *a3)
{
  if (!a1[51]) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 296);
  if (!v6)
  {
    uint64_t v7 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a2, 0);
    uint64_t v6 = *v7;
    *(void *)(a2 + 296) = *v7;
  }
  int v8 = a1[50];
  uint64_t v9 = *(void *)(a2 + 272);
  if (!v9)
  {
    uint64_t v10 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(a2);
    uint64_t v9 = *v10;
    *(void *)(a2 + 272) = *v10;
  }
  if (v8 != *(unsigned __int8 *)(v9 + 69)
    || a1[49] != *(unsigned __int8 *)(v6 + 88)
    || *((_DWORD *)a1 + 8) != *(_DWORD *)(v6 + 64)
    || *((_DWORD *)a1 + 9) != *(_DWORD *)(v6 + 68)
    || a1[48] != *(unsigned __int8 *)(v6 + 92))
  {
    goto LABEL_33;
  }
  if (*(char *)(v9 + 263) < 0) {
    uint64_t v11 = *(void *)(v9 + 248);
  }
  else {
    uint64_t v11 = *(unsigned __int8 *)(v9 + 263);
  }
  uint64_t v12 = (unsigned __int8 *)(v9 + 240);
  uint64_t v13 = 80;
  if (v11) {
    uint64_t v13 = 240;
  }
  else {
    uint64_t v12 = (unsigned __int8 *)(v9 + 80);
  }
  uint64_t v14 = a1[23];
  if ((v14 & 0x80u) == 0) {
    uint64_t v15 = a1[23];
  }
  else {
    uint64_t v15 = *((void *)a1 + 1);
  }
  uint64_t v16 = v12[23];
  int v17 = (char)v16;
  if ((v16 & 0x80u) != 0) {
    uint64_t v16 = *((void *)v12 + 1);
  }
  if (v15 != v16) {
    goto LABEL_33;
  }
  uint64_t v18 = *(unsigned __int8 **)(v9 + v13);
  if (v17 >= 0) {
    uint64_t v19 = v12;
  }
  else {
    uint64_t v19 = v18;
  }
  if ((v14 & 0x80) == 0)
  {
    if (a1[23])
    {
      int v20 = a1;
      while (*v20 == *v19)
      {
        ++v20;
        ++v19;
        if (!--v14) {
          goto LABEL_52;
        }
      }
      goto LABEL_55;
    }
    goto LABEL_52;
  }
  if (memcmp(*(const void **)a1, v19, *((void *)a1 + 1)))
  {
LABEL_33:
    if ((a1[23] & 0x80u) == 0) {
      uint64_t v15 = a1[23];
    }
    else {
      uint64_t v15 = *((void *)a1 + 1);
    }
    goto LABEL_36;
  }
LABEL_52:
  if (*(_DWORD *)(v6 + 56) != *((_DWORD *)a1 + 10) || *(_DWORD *)(v6 + 60) != *((_DWORD *)a1 + 11))
  {
LABEL_55:
    if (!v9)
    {
      uint64_t v26 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(a2);
      uint64_t v9 = *v26;
      *(void *)(a2 + 272) = *v26;
    }
LABEL_36:
    if (*(char *)(v9 + 263) < 0) {
      uint64_t v21 = *(void *)(v9 + 248);
    }
    else {
      uint64_t v21 = *(unsigned __int8 *)(v9 + 263);
    }
    if (v21) {
      uint64_t v22 = v9 + 240;
    }
    else {
      uint64_t v22 = v9 + 80;
    }
    uint64_t v23 = *(unsigned __int8 *)(v22 + 23);
    uint64_t v24 = *(void *)(v22 + 8);
    if ((v23 & 0x80u) == 0) {
      uint64_t v24 = v23;
    }
    if (v24)
    {
      if (!v15) {
        goto LABEL_51;
      }
    }
    else if (v15)
    {
LABEL_51:
      uint64_t result = 1;
      a3[8] = 1;
      *a3 = 1;
      return result;
    }
    if ((*((_DWORD *)a1 + 8) != 0) != (*(_DWORD *)(v6 + 64) == 0)
      && (*((_DWORD *)a1 + 9) != 0) != (*(_DWORD *)(v6 + 68) == 0))
    {
      return 1;
    }
    goto LABEL_51;
  }
  return 0;
}

void sub_1A183491C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL md::CameraContext::isSplinedEnabled(md::CameraContext *this, float a2)
{
  float v3 = *((float *)this + 769);
  float v4 = *((float *)this + 770);
  BOOL v5 = +[VKDebugSettings sharedSettings];
  [v5 daVinciGlobeSplinedMaxZoom];
  BOOL v7 = fmaxf(v4 + v3, 1.0) <= v6 && *((unsigned __int8 *)this + 3776) - 1 < 3;

  return v7;
}

void sub_1A18349E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL md::CartographicMapEngineConfiguration::shouldRebuildCurrentMode(md::CartographicMapEngineConfiguration *this, md::MapEngine *a2)
{
  float v4 = +[VKDebugSettings sharedSettings];
  int v5 = [v4 daVinciCameraControllerForceMercatorZoom];

  float v6 = +[VKDebugSettings sharedSettings];
  int v7 = [v6 daVinciCameraController];

  uint64_t v8 = *((void *)a2 + 564);
  uint64_t v9 = *(void **)v8;
  uint64_t v10 = *(void **)(v8 + 8);
  if (v9 != v10)
  {
    while (*v9 != 0x3815A15069F224CDLL)
    {
      v9 += 5;
      if (v9 == v10) {
        goto LABEL_9;
      }
    }
  }
  if (v9 == v10)
  {
LABEL_9:
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = v9[3];
    uint64_t v11 = (std::__shared_weak_count *)v9[4];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (*((unsigned __int8 *)this + 35) == v5 && *((unsigned __int8 *)this + 36) == v7)
  {
    uint64_t v13 = *(unsigned char **)(v12 + 40);
    BOOL result = *v13 != 0;
    *uint64_t v13 = 0;
  }
  else
  {
    BOOL result = 1;
  }
  *((unsigned char *)this + 35) = v5;
  *((unsigned char *)this + 36) = v7;
  return result;
}

void sub_1A1834B40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t md::TiledGEOResourceFetcher::TiledGEOResourceFetcher(uint64_t a1, void *a2, int a3, unsigned __int16 *a4, uint64_t a5, void *a6, uint64_t a7, float a8)
{
  id v15 = a2;
  gdc::ResourceFetcher::ResourceFetcher(a1, a4, a5, a8);
  *(void *)a1 = &unk_1EF544180;
  *(void *)(a1 + 440) = *a6;
  uint64_t v16 = a6[1];
  *(void *)(a1 + 448) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 456) = &unk_1EF559F18;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 480) = &unk_1EF559F18;
  *(void *)(a1 + 488) = 0;
  id v17 = v15;
  *(void *)(a1 + 504) = &unk_1EF559AF8;
  *(void *)(a1 + 512) = v17;
  *(void *)(a1 + 528) = &unk_1EF559518;
  *(void *)(a1 + 536) = 0;
  id v18 = *(id *)(a7 + 8);
  uint64_t v19 = *(void **)(a1 + 536);
  *(void *)(a1 + 536) = v18;

  *(_WORD *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 556) = a3;
  *(void *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(unsigned char *)(a1 + 592) = 0;
  *(_WORD *)(a1 + 616) = 257;
  objc_msgSend(NSString, "stringWithFormat:", @"TiledResourceFetcher<%p>", a1, &unk_1EF559F18, v15);
  id v28 = (id)objc_claimAutoreleasedReturnValue();
  int v20 = *(void **)(a1 + 464);
  *(void *)(a1 + 464) = v28;
  id v21 = v28;

  objc_msgSend(NSString, "stringWithFormat:", @"PreliminaryTiledResourceFetcher<%p>", a1);
  id v29 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v22 = *(void **)(a1 + 488);
  *(void *)(a1 + 488) = v29;
  id v23 = v29;

  uint64_t v24 = md::TiledGEOResourceFetcher::getTileLoader((id *)a1);
  [v24 openForClient:*(void *)(a1 + 464)];
  [v24 openForClient:*(void *)(a1 + 488)];
  uint64_t v25 = *(void **)(a1 + 560);
  *(void *)(a1 + 560) = 0;

  uint64_t v26 = *(void **)(a1 + 608);
  *(void *)(a1 + 608) = 0;

  return a1;
}

void sub_1A1834E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (*(unsigned char *)(v11 + 592)) {
    *(unsigned char *)(v11 + 592) = 0;
  }
  std::pair<GEOActiveTileSet * {__strong},std::vector<md::TiledGEOResourceFetcher::TileSetRegion>>::~pair(v11 + 560);
  *(void *)(v11 + 528) = v14;

  *(void *)(v11 + 504) = v13;
  *(void *)(v11 + 480) = v12;

  *(void *)(v11 + 456) = a10;
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v11 + 440);
  gdc::ResourceFetcher::~ResourceFetcher((gdc::ResourceFetcher *)v11);

  _Unwind_Resume(a1);
}

void sub_1A1834EA4()
{
}

void gdc::ResourceManager::finishBatch(gdc::ResourceManager *this)
{
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)*((void *)this + 28);
  if (v2)
  {
    v93 = (char *)this + 88;
    uint64_t v92 = (char *)this + 32;
    int v91 = (void *)((char *)this + 264);
    while (1)
    {
      int v3 = *((unsigned __int16 *)v2 + 9);
      uint64_t v4 = *((void *)this + 10);
      *((void *)this + 10) = v4 + 1;
      uint64_t v94 = v2[2];
      size_t v95 = v99;
      size_t v96 = (char *)v99;
      v97 = v99;
      uint64_t v98 = 32;
      float v6 = (char *)v2[3];
      int v5 = (char *)v2[4];
      unint64_t v7 = v5 - v6;
      uint64_t v8 = v99;
      if ((unint64_t)(v5 - v6) < 0x21) {
        goto LABEL_25;
      }
      size_t v9 = v7 <= 0x40 ? 64 : v5 - v6;
      uint64_t v8 = malloc_type_malloc(v9, 0x100004077774924uLL);
      uint64_t v10 = (char *)v95;
      uint64_t v11 = v96;
      if (v95 != v96) {
        break;
      }
LABEL_24:
      size_t v95 = v8;
      size_t v96 = (char *)v8;
      uint64_t v98 = v9;
LABEL_25:
      if (v6 == v5) {
        goto LABEL_43;
      }
      if (v7 < 8)
      {
        uint64_t v26 = v8;
        goto LABEL_41;
      }
      if ((unint64_t)((char *)v8 - v6) < 0x20)
      {
        uint64_t v26 = v8;
        goto LABEL_41;
      }
      if (v7 >= 0x20)
      {
        unint64_t v25 = v7 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v27 = (long long *)(v6 + 16);
        id v28 = v8 + 2;
        unint64_t v29 = v7 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v30 = *v27;
          *(v28 - 1) = *(v27 - 1);
          *id v28 = v30;
          v27 += 2;
          v28 += 2;
          v29 -= 32;
        }
        while (v29);
        if (v7 == v25) {
          goto LABEL_42;
        }
        if ((v7 & 0x18) == 0)
        {
          v6 += v25;
          uint64_t v26 = (char *)v8 + v25;
          goto LABEL_41;
        }
      }
      else
      {
        unint64_t v25 = 0;
      }
      unint64_t v31 = v7 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v26 = (char *)v8 + (v7 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v32 = v25 - (v7 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v33 = (uint64_t *)&v6[v25];
      uint64_t v34 = (void *)((char *)v8 + v25);
      do
      {
        uint64_t v35 = *v33++;
        *v34++ = v35;
        v32 += 8;
      }
      while (v32);
      if (v7 == v31) {
        goto LABEL_42;
      }
      v6 += v31;
      do
      {
LABEL_41:
        char v36 = *v6++;
        *v26++ = v36;
      }
      while (v6 != v5);
LABEL_42:
      uint64_t v8 = v96;
LABEL_43:
      uint64_t v37 = v2[11];
      size_t v96 = (char *)v8 + v7;
      v99[4] = v37;
      long long v100 = *((_OWORD *)v2 + 6);
      uint64_t v101 = v4;
      if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
      }
      uint64_t v38 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
      os_signpost_id_t v39 = os_signpost_id_generate(v38);

      *(void *)&long long v100 = v39;
      if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
      }
      char v40 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
      {
        gdc::ResourceKey::keysInt32Str(&v107, (unsigned __int8 *)v2 + 16);
        uint64_t v41 = &v107;
        if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v41 = (std::string *)v107.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&buf[4] = v41;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v101;
        _os_log_impl(&dword_1A1780000, v40, OS_LOG_TYPE_DEBUG, "Adding to requests in progress: %s, %lu", buf, 0x16u);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v107.__r_.__value_.__l.__data_);
        }
      }

      std::__hash_table<std::__hash_value_type<gdc::ResourceKey,unsigned long long>,std::__unordered_map_hasher<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,unsigned long long>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,true>,std::__unordered_map_equal<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,unsigned long long>,std::equal_to<gdc::ResourceKey>,gdc::ResourceKeyHash,true>,std::allocator<std::__hash_value_type<gdc::ResourceKey,unsigned long long>>>::__emplace_unique_key_args<gdc::ResourceKey,std::pair<gdc::ResourceKey,unsigned long> &>((uint64_t)v93, (unsigned __int8 *)&v94, (uint64_t)&v94);
      uint64_t v42 = (char *)*((void *)this + 4);
      unint64_t v43 = (char *)*((void *)this + 5);
      if (v42 != v43)
      {
        while (v3 != *(unsigned __int16 *)v42)
        {
          v42 += 16;
          if (v42 == v43) {
            goto LABEL_57;
          }
        }
      }
      if (v42 == v43)
      {
LABEL_57:
        LOWORD(v107.__r_.__value_.__l.__data_) = v3;
        v107.__r_.__value_.__l.__size_ = 0;
        uint64_t v42 = geo::linear_map<unsigned short,gdc::ResourceFetcher *,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,gdc::ResourceFetcher *>>,std::vector<std::pair<unsigned short,gdc::ResourceFetcher *>>>::insert((uint64_t)v92, (unsigned __int16 *)&v107);
      }
      unint64_t v44 = *((void *)v42 + 1);
      uint64_t v45 = (char *)*((void *)this + 31);
      uint64_t v46 = (char *)*((void *)this + 32);
      char v47 = v45;
      if (v45 != v46)
      {
        char v47 = (char *)*((void *)this + 31);
        while (v44 != *(void *)v47)
        {
          v47 += 48;
          if (v47 == v46) {
            goto LABEL_64;
          }
        }
      }
      if (v47 != v46) {
        goto LABEL_101;
      }
LABEL_64:
      v104 = 0;
      uint64_t v105 = 0;
      int v106 = 1065353216;
      *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v44;
      std::string __p = 0;
      uint64_t v103 = 0;
      v107.__r_.__value_.__r.__words[2] = 0;
      v108 = 0;
      uint64_t v109 = 0;
      int v110 = 1065353216;
      char v47 = v45;
      if (v45 != v46)
      {
        while (v44 != *(void *)v47)
        {
          v47 += 48;
          if (v47 == v46) {
            goto LABEL_69;
          }
        }
      }
      if (v47 == v46)
      {
LABEL_69:
        if ((unint64_t)v46 >= *v91)
        {
          unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 4);
          if (v48 + 1 > 0x555555555555555) {
            abort();
          }
          unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v91 - (void)v45) >> 4);
          uint64_t v50 = 2 * v49;
          if (2 * v49 <= v48 + 1) {
            uint64_t v50 = v48 + 1;
          }
          if (v49 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v51 = 0x555555555555555;
          }
          else {
            unint64_t v51 = v50;
          }
          v113 = v91;
          if (v51)
          {
            if (v51 > 0x555555555555555) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            uint64_t v52 = (char *)operator new(48 * v51);
          }
          else
          {
            uint64_t v52 = 0;
          }
          int v53 = &v52[48 * v48];
          *(void *)buf = v52;
          *(void *)&buf[8] = v53;
          *(void *)&buf[16] = v53;
          unint64_t v112 = &v52[48 * v51];
          *(void *)int v53 = v44;
          std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>>::unordered_map((uint64_t)(v53 + 8), (uint64_t)&v107.__r_.__value_.__l.__size_);
          uint64_t v54 = (void *)*((void *)this + 31);
          unint64_t v55 = (void *)*((void *)this + 32);
          uint64_t v56 = *(void *)&buf[8];
          uint64_t v57 = *(void *)&buf[16];
          if (v55 == v54)
          {
            uint64_t v66 = (void *)*((void *)this + 32);
          }
          else
          {
            uint64_t v58 = 0;
            do
            {
              uint64_t v60 = v56 + v58 * 8;
              uint64_t v61 = (char *)&v55[v58];
              *(void *)(v60 - 48) = v55[v58 - 6];
              uint64_t v62 = v55[v58 - 5];
              *((void *)v61 - 5) = 0;
              *(void *)(v60 - 40) = v62;
              *(void *)(v60 - 32) = v55[v58 - 4];
              *((void *)v61 - 4) = 0;
              uint64_t v63 = v55[v58 - 3];
              *(void *)(v56 + v58 * 8 - 24) = v63;
              uint64_t v64 = v55[v58 - 2];
              *(void *)(v60 - 16) = v64;
              *(_DWORD *)(v60 - 8) = v55[v58 - 1];
              if (v64)
              {
                unint64_t v59 = *(void *)(v63 + 8);
                unint64_t v65 = *(void *)(v60 - 32);
                if ((v65 & (v65 - 1)) != 0)
                {
                  if (v59 >= v65) {
                    v59 %= v65;
                  }
                }
                else
                {
                  v59 &= v65 - 1;
                }
                *(void *)(v62 + 8 * v59) = v56 + v58 * 8 - 24;
                v55[v58 - 3] = 0;
                v55[v58 - 2] = 0;
              }
              v58 -= 6;
            }
            while (&v55[v58] != v54);
            v56 += v58 * 8;
            uint64_t v66 = (void *)*((void *)this + 31);
            unint64_t v55 = (void *)*((void *)this + 32);
          }
          uint64_t v67 = v57 + 48;
          *((void *)this + 31) = v56;
          *((void *)this + 32) = v57 + 48;
          v68 = (char *)*((void *)this + 33);
          *((void *)this + 33) = v112;
          unint64_t v112 = v68;
          *(void *)buf = v66;
          *(void *)&buf[8] = v66;
          if (v55 == v66)
          {
            if (v55) {
              goto LABEL_94;
            }
          }
          else
          {
            do
            {
              *(void *)&buf[16] = v55 - 6;
              uint64_t v73 = (void *)*(v55 - 3);
              if (v73)
              {
                do
                {
                  unint64_t v75 = (void *)*v73;
                  uint8x8_t v76 = (void *)v73[3];
                  if (v76 != (void *)v73[5]) {
                    free(v76);
                  }
                  operator delete(v73);
                  uint64_t v73 = v75;
                }
                while (v75);
              }
              unint64_t v74 = (void *)*(v55 - 5);
              *(v55 - 5) = 0;
              if (v74) {
                operator delete(v74);
              }
              unint64_t v55 = *(void **)&buf[16];
            }
            while (*(void **)&buf[16] != v66);
            unint64_t v55 = *(void **)buf;
            if (*(void *)buf) {
LABEL_94:
            }
              operator delete(v55);
          }
          uint64_t v69 = v108;
          *((void *)this + 32) = v67;
          char v47 = (char *)(v67 - 48);
          if (v69)
          {
            do
            {
              uint64_t v77 = (void *)*v69;
              unint64_t v78 = (void *)v69[3];
              if (v78 != (void *)v69[5]) {
                free(v78);
              }
              operator delete(v69);
              uint64_t v69 = v77;
            }
            while (v77);
          }
          goto LABEL_96;
        }
        *(void *)uint64_t v46 = v44;
        std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>>::unordered_map((uint64_t)(v46 + 8), (uint64_t)&v107.__r_.__value_.__l.__size_);
        *((void *)this + 32) = v46 + 48;
        char v47 = v46;
      }
LABEL_96:
      if (v107.__r_.__value_.__l.__size_) {
        operator delete((void *)v107.__r_.__value_.__l.__size_);
      }
      long long v70 = v104;
      if (v104)
      {
        do
        {
          uint64_t v71 = (void *)*v70;
          uint64_t v72 = (void *)v70[3];
          if (v72 != (void *)v70[5]) {
            free(v72);
          }
          operator delete(v70);
          long long v70 = v71;
        }
        while (v71);
      }
      if (__p) {
        operator delete(__p);
      }
LABEL_101:
      std::__hash_table<std::__hash_value_type<gdc::ResourceKey,unsigned long long>,std::__unordered_map_hasher<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,unsigned long long>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,true>,std::__unordered_map_equal<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,unsigned long long>,std::equal_to<gdc::ResourceKey>,gdc::ResourceKeyHash,true>,std::allocator<std::__hash_value_type<gdc::ResourceKey,unsigned long long>>>::__emplace_unique_key_args<gdc::ResourceKey,std::pair<gdc::ResourceKey,unsigned long> &>((uint64_t)(v47 + 8), (unsigned __int8 *)&v94, (uint64_t)&v94);
      if (v95 != v97) {
        free(v95);
      }
      uint64_t v2 = (uint64_t *)*v2;
      if (!v2) {
        goto LABEL_118;
      }
    }
    unint64_t v12 = v96 - (unsigned char *)v95;
    if ((unint64_t)(v96 - (unsigned char *)v95) < 8)
    {
      uint64_t v13 = v8;
    }
    else
    {
      uint64_t v13 = v8;
      if ((unint64_t)((char *)v8 - (unsigned char *)v95) >= 0x20)
      {
        if (v12 < 0x20)
        {
          uint64_t v14 = 0;
LABEL_18:
          unint64_t v19 = v12 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v13 = (char *)v8 + (v12 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v20 = v14 - (v12 & 0xFFFFFFFFFFFFFFF8);
          id v21 = (uint64_t *)&v10[v14];
          uint64_t v22 = (void *)((char *)v8 + v14);
          do
          {
            uint64_t v23 = *v21++;
            *v22++ = v23;
            v20 += 8;
          }
          while (v20);
          if (v12 == v19) {
            goto LABEL_24;
          }
          v10 += v19;
          goto LABEL_23;
        }
        uint64_t v14 = v12 & 0xFFFFFFFFFFFFFFE0;
        id v15 = (long long *)((char *)v95 + 16);
        uint64_t v16 = v8 + 2;
        unint64_t v17 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v18 = *v15;
          *(v16 - 1) = *(v15 - 1);
          _OWORD *v16 = v18;
          v15 += 2;
          v16 += 2;
          v17 -= 32;
        }
        while (v17);
        if (v12 == v14) {
          goto LABEL_24;
        }
        if ((v12 & 0x18) != 0) {
          goto LABEL_18;
        }
        v10 += v14;
        uint64_t v13 = (char *)v8 + v14;
      }
    }
    do
    {
LABEL_23:
      char v24 = *v10++;
      *v13++ = v24;
    }
    while (v10 != v11);
    goto LABEL_24;
  }
LABEL_118:
  v79 = (void *)*((void *)this + 31);
  unint64_t v80 = (void *)*((void *)this + 32);
  while (v79 != v80)
  {
    (*(void (**)(void, void *, void, void))(*(void *)*v79 + 16))(*v79, v79 + 1, *((void *)this + 34), 0);
    if (v79[4])
    {
      unsigned int v81 = (void *)v79[3];
      if (v81)
      {
        do
        {
          float v84 = (void *)*v81;
          float v85 = (void *)v81[3];
          if (v85 != (void *)v81[5]) {
            free(v85);
          }
          operator delete(v81);
          unsigned int v81 = v84;
        }
        while (v84);
      }
      v79[3] = 0;
      uint64_t v82 = v79[2];
      if (v82)
      {
        for (uint64_t i = 0; i != v82; ++i)
          *(void *)(v79[1] + 8 * i) = 0;
      }
      v79[4] = 0;
    }
    v79 += 6;
  }
  if (*((void *)this + 29))
  {
    BOOL v86 = (void *)*((void *)this + 28);
    if (v86)
    {
      do
      {
        long long v89 = (void *)*v86;
        v90 = (void *)v86[3];
        if (v90 != (void *)v86[5]) {
          free(v90);
        }
        operator delete(v86);
        BOOL v86 = v89;
      }
      while (v89);
    }
    *((void *)this + 28) = 0;
    uint64_t v87 = *((void *)this + 27);
    if (v87)
    {
      for (uint64_t j = 0; j != v87; ++j)
        *(void *)(*((void *)this + 26) + 8 * j) = 0;
    }
    *((void *)this + 29) = 0;
  }
}

void sub_1A1835774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  std::pair<gdc::ResourceFetcher *,std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>>>::~pair(v32 - 192);
  std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::~__hash_table((uint64_t)&a32);
  if (a20 != a22)
  {
    free(a20);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void md::TiledGEOResourceFetcher::fetchResources(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v198 = *MEMORY[0x1E4F143B8];
  id v144 = a4;
  if (*(void *)(a1 + 608) || !*(unsigned char *)(a1 + 617))
  {
    uint64_t v6 = 7;
    if (!*(unsigned char *)(a1 + 552)) {
      uint64_t v6 = 3;
    }
    if (*(unsigned char *)(a1 + 553)) {
      v6 |= 8uLL;
    }
    uint64_t v137 = v6;
    v143 = md::TiledGEOResourceFetcher::getTileLoader((id *)a1);
    unint64_t v7 = *(void **)(a1 + 608);
    if (v7 && [v7 hasTimeToLiveSeconds])
    {
      uint64_t v141 = 1000 * [*(id *)(a1 + 608) timeToLiveSeconds];
      uint64_t v8 = *(uint64_t **)(a2 + 16);
      if (!v8) {
        goto LABEL_165;
      }
    }
    else
    {
      uint64_t v141 = 0;
      uint64_t v8 = *(uint64_t **)(a2 + 16);
      if (!v8)
      {
LABEL_165:

        goto LABEL_167;
      }
    }
    char v136 = (*MEMORY[0x1E4F63EC8] + 1) & 0x7F;
    int v138 = *MEMORY[0x1E4F64270];
    size_t v9 = &qword_1EB31E000;
    uint64_t v10 = &qword_1EB31E000;
    while (1)
    {
      uint64_t v11 = v8[14];
      uint64_t v176 = v8[2];
      unint64_t v12 = v181;
      v177 = v181;
      v178 = v181;
      v179 = v181;
      uint64_t v180 = 32;
      uint64_t v13 = (char *)v8[3];
      uint64_t v14 = (char *)v8[4];
      unint64_t v15 = v14 - v13;
      if ((unint64_t)(v14 - v13) < 0x21) {
        goto LABEL_34;
      }
      size_t v16 = v15 <= 0x40 ? 64 : v14 - v13;
      unint64_t v12 = malloc_type_malloc(v16, 0x100004077774924uLL);
      unint64_t v17 = (char *)v177;
      long long v18 = v178;
      if (v177 != v178) {
        break;
      }
LABEL_33:
      v177 = v12;
      v178 = v12;
      uint64_t v180 = v16;
LABEL_34:
      if (v13 != v14)
      {
        if (v15 < 8)
        {
          uint64_t v33 = v12;
        }
        else if ((unint64_t)(v12 - v13) < 0x20)
        {
          uint64_t v33 = v12;
        }
        else
        {
          if (v15 < 0x20)
          {
            uint64_t v32 = 0;
LABEL_45:
            unint64_t v38 = v15 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v33 = &v12[v15 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v39 = v32 - (v15 & 0xFFFFFFFFFFFFFFF8);
            char v40 = (uint64_t *)&v13[v32];
            uint64_t v41 = &v12[v32];
            do
            {
              uint64_t v42 = *v40++;
              *v41++ = v42;
              v39 += 8;
            }
            while (v39);
            if (v15 != v38)
            {
              v13 += v38;
              goto LABEL_50;
            }
LABEL_51:
            unint64_t v12 = v178;
            goto LABEL_52;
          }
          uint64_t v32 = v15 & 0xFFFFFFFFFFFFFFE0;
          uint64_t v34 = (long long *)(v13 + 16);
          uint64_t v35 = v12 + 16;
          unint64_t v36 = v15 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v37 = *v34;
            *(v35 - 1) = *(v34 - 1);
            *uint64_t v35 = v37;
            v34 += 2;
            v35 += 2;
            v36 -= 32;
          }
          while (v36);
          if (v15 == v32) {
            goto LABEL_51;
          }
          if ((v15 & 0x18) != 0) {
            goto LABEL_45;
          }
          v13 += v32;
          uint64_t v33 = &v12[v32];
        }
        do
        {
LABEL_50:
          char v43 = *v13++;
          *v33++ = v43;
        }
        while (v13 != v14);
        goto LABEL_51;
      }
LABEL_52:
      uint64_t v44 = v8[11];
      v178 = &v12[v15];
      uint64_t v182 = v44;
      long long v183 = *((_OWORD *)v8 + 6);
      long long v197 = 0uLL;
      *(void *)&long long v197 = (*(uint64_t (**)(uint64_t, void, uint64_t *))(*(void *)a1 + 144))(a1, *(void *)(a1 + 608), &v176);
      *((void *)&v197 + 1) = v45;
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t *))(*(void *)a1 + 152))(v175, a1, &v176);
      uint64_t v46 = +[VKDebugSettings sharedSettings];
      int v47 = [v46 shouldUseTestTileLoader];

      if (v47 && (v197 & 0x7F) == v138) {
        LOBYTE(v197) = v136 | v197 & 0x80;
      }
      if (*(unsigned char *)(a1 + 616))
      {
        GEOTileKeyAssertIsStandard();
        if (v9[442] != -1) {
          dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
        }
        unint64_t v48 = (id)v10[441];
        unint64_t v49 = v48;
        os_signpost_id_t v50 = v183;
        if ((unint64_t)(v183 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v48))
        {
          *(_DWORD *)&buf[4] = ((*(void *)((char *)&v197 + 1) >> 46) | (*(_DWORD *)((char *)&v197 + 9) << 18)) & 0x3FFFFFF;
          *(_DWORD *)buf = 67110144;
          __int16 v189 = 1024;
          int v190 = ((*(unsigned int *)((char *)&v197 + 9) | ((unint64_t)(*(unsigned __int16 *)((char *)&v197 + 13) | (HIBYTE(v197) << 16)) << 32)) >> 8) & 0x3FFFFFF;
          __int16 v191 = 1024;
          int v192 = (*(void *)((char *)&v197 + 1) >> 40) & 0x3F;
          __int16 v193 = 1024;
          int v194 = *(unsigned __int16 *)((char *)&v197 + 13) >> 2;
          __int16 v195 = 2048;
          uint64_t v196 = *((void *)&v183 + 1);
          unint64_t v51 = v49;
          os_signpost_id_t v52 = v50;
          int v53 = "key=%d.%d.%d type=%d parent_signpost=%llu";
          uint32_t v54 = 36;
LABEL_66:
          _os_signpost_emit_with_name_impl(&dword_1A1780000, v51, OS_SIGNPOST_INTERVAL_BEGIN, v52, "ResourceFetch", v53, buf, v54);
        }
      }
      else
      {
        if (v9[442] != -1) {
          dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
        }
        unint64_t v55 = (id)v10[441];
        unint64_t v49 = v55;
        os_signpost_id_t v56 = v183;
        if ((unint64_t)(v183 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v55))
        {
          *(_WORD *)buf = 0;
          unint64_t v51 = v49;
          os_signpost_id_t v52 = v56;
          int v53 = "Unknown tile key";
          uint32_t v54 = 2;
          goto LABEL_66;
        }
      }

      if (v9[442] != -1) {
        dispatch_once(&GEOGetVectorKitResourceLoadingLog_onceToken, &__block_literal_global_25);
      }
      uint64_t v57 = (id)v10[441];
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
      {
        gdc::ResourceKey::keysInt32Str((std::string *)buf, (unsigned __int8 *)&v176);
        uint64_t v58 = buf;
        if ((v194 & 0x8000) != 0) {
          uint64_t v58 = *(uint8_t **)buf;
        }
        *(_DWORD *)v184 = 136315394;
        v185 = v58;
        __int16 v186 = 2048;
        uint64_t v187 = v11;
        _os_log_impl(&dword_1A1780000, v57, OS_LOG_TYPE_DEBUG, "TiledGEOResourceFetcher fetching resource: %s, %llu", v184, 0x16u);
        if (SBYTE1(v194) < 0) {
          operator delete(*(void **)buf);
        }
      }

      if (!(_BYTE)v176)
      {
        unint64_t v74 = atomic_load((unint64_t *)(a1 + 104));
        if (v74) {
          (*(void (**)(unint64_t))(*(void *)v74 + 16))(v74);
        }
        unint64_t v75 = (char *)v175 + 4;
        if (!LOBYTE(v175[0])) {
          unint64_t v75 = 0;
        }
        v148 = v75;
        uint64_t v76 = HIDWORD(v176);
        id v77 = *(id *)(a1 + 464);
        qos_class_t v78 = qos_class_self();
        uint64_t v146 = v183;
        id v79 = *(id *)(a1 + 512);
        id v150 = *(id *)(a3 + 16);
        v163[0] = MEMORY[0x1E4F143A8];
        v163[1] = 3321888768;
        unint64_t v80 = v171;
        v163[2] = ___ZN2md23TiledGEOResourceFetcher14fetchResourcesERKNSt3__113unordered_mapIN3gdc11ResourceKeyEyNS3_15ResourceKeyHashENS1_8equal_toIS4_EENS1_9allocatorINS1_4pairIKS4_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObject_block_invoke;
        v163[3] = &unk_1EF58DF90;
        unsigned int v81 = (char *)v177;
        uint64_t v165 = a1;
        uint64_t v166 = v176;
        v167 = (char *)v171;
        v168 = (char *)v171;
        v169 = (char *)v171;
        uint64_t v170 = 32;
        uint64_t v82 = v178;
        unint64_t v83 = v178 - (unsigned char *)v177;
        if ((unint64_t)(v178 - (unsigned char *)v177) < 0x21) {
          goto LABEL_145;
        }
        id v140 = v79;
        if (v83 <= 0x40) {
          size_t v84 = 64;
        }
        else {
          size_t v84 = v178 - (unsigned char *)v177;
        }
        unint64_t v80 = malloc_type_malloc(v84, 0x100004077774924uLL);
        float v85 = v167;
        BOOL v86 = v168;
        if (v167 == v168) {
          goto LABEL_144;
        }
        unint64_t v87 = v168 - v167;
        if ((unint64_t)(v168 - v167) < 8)
        {
          unint64_t v88 = v80;
        }
        else
        {
          unint64_t v88 = v80;
          if ((unint64_t)((char *)v80 - v167) >= 0x20)
          {
            if (v87 < 0x20)
            {
              uint64_t v89 = 0;
LABEL_113:
              unint64_t v103 = v87 & 0xFFFFFFFFFFFFFFF8;
              unint64_t v88 = (char *)v80 + (v87 & 0xFFFFFFFFFFFFFFF8);
              uint64_t v104 = v89 - (v87 & 0xFFFFFFFFFFFFFFF8);
              uint64_t v105 = &v85[v89];
              int v106 = (void *)((char *)v80 + v89);
              do
              {
                uint64_t v107 = *(void *)v105;
                v105 += 8;
                *v106++ = v107;
                v104 += 8;
              }
              while (v104);
              if (v87 != v103)
              {
                v85 += v103;
                goto LABEL_143;
              }
LABEL_144:
              v167 = (char *)v80;
              v168 = (char *)v80;
              uint64_t v170 = v84;
              id v79 = v140;
LABEL_145:
              if (v81 == v82) {
                goto LABEL_163;
              }
              if (v83 < 8)
              {
                uint64_t v124 = v80;
              }
              else if ((unint64_t)((char *)v80 - v81) < 0x20)
              {
                uint64_t v124 = v80;
              }
              else
              {
                if (v83 < 0x20)
                {
                  uint64_t v123 = 0;
LABEL_156:
                  unint64_t v129 = v83 & 0xFFFFFFFFFFFFFFF8;
                  uint64_t v124 = (char *)v80 + (v83 & 0xFFFFFFFFFFFFFFF8);
                  uint64_t v130 = v123 - (v83 & 0xFFFFFFFFFFFFFFF8);
                  v131 = (uint64_t *)&v81[v123];
                  v132 = (void *)((char *)v80 + v123);
                  do
                  {
                    uint64_t v133 = *v131++;
                    *v132++ = v133;
                    v130 += 8;
                  }
                  while (v130);
                  if (v83 != v129)
                  {
                    v81 += v129;
                    goto LABEL_161;
                  }
LABEL_162:
                  unint64_t v80 = v168;
LABEL_163:
                  v168 = (char *)v80 + v83;
                  v171[4] = v182;
                  long long v172 = v183;
                  uint64_t v173 = v11;
                  uint64_t v174 = v141;
                  id v164 = v144;
                  LODWORD(v135) = v78;
                  [v143 loadKey:&v197 additionalInfo:v148 priority:v76 forClient:v77 options:v137 reason:1 qos:v135 signpostID:v146 auditToken:v79 callbackQ:v150 beginNetwork:0 callback:v163];
                  uint64_t v10 = &qword_1EB31E000;

                  size_t v9 = &qword_1EB31E000;
                  v121 = v167;
                  if (v167 == v169) {
                    goto LABEL_140;
                  }
LABEL_139:
                  free(v121);
                  goto LABEL_140;
                }
                uint64_t v123 = v83 & 0xFFFFFFFFFFFFFFE0;
                v125 = (long long *)(v81 + 16);
                v126 = v80 + 2;
                unint64_t v127 = v83 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v128 = *v125;
                  *(v126 - 1) = *(v125 - 1);
                  _OWORD *v126 = v128;
                  v125 += 2;
                  v126 += 2;
                  v127 -= 32;
                }
                while (v127);
                if (v83 == v123) {
                  goto LABEL_162;
                }
                if ((v83 & 0x18) != 0) {
                  goto LABEL_156;
                }
                v81 += v123;
                uint64_t v124 = (char *)v80 + v123;
              }
              do
              {
LABEL_161:
                char v134 = *v81++;
                *v124++ = v134;
              }
              while (v81 != v82);
              goto LABEL_162;
            }
            uint64_t v89 = v87 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v99 = (long long *)(v167 + 16);
            long long v100 = v80 + 2;
            unint64_t v101 = v87 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v102 = *v99;
              *(v100 - 1) = *(v99 - 1);
              *long long v100 = v102;
              v99 += 2;
              v100 += 2;
              v101 -= 32;
            }
            while (v101);
            if (v87 == v89) {
              goto LABEL_144;
            }
            if ((v87 & 0x18) != 0) {
              goto LABEL_113;
            }
            v85 += v89;
            unint64_t v88 = (char *)v80 + v89;
          }
        }
        do
        {
LABEL_143:
          char v122 = *v85++;
          *v88++ = v122;
        }
        while (v85 != v86);
        goto LABEL_144;
      }
      unint64_t v59 = (char *)v175 + 4;
      if (!LOBYTE(v175[0])) {
        unint64_t v59 = 0;
      }
      v147 = v59;
      uint64_t v60 = HIDWORD(v176);
      id v61 = *(id *)(a1 + 488);
      qos_class_t v62 = qos_class_self();
      uint64_t v145 = v183;
      id v63 = *(id *)(a1 + 512);
      id v149 = *(id *)(a3 + 16);
      v151[0] = MEMORY[0x1E4F143A8];
      v151[1] = 3321888768;
      uint64_t v64 = v159;
      v151[2] = ___ZN2md23TiledGEOResourceFetcher14fetchResourcesERKNSt3__113unordered_mapIN3gdc11ResourceKeyEyNS3_15ResourceKeyHashENS1_8equal_toIS4_EENS1_9allocatorINS1_4pairIKS4_yEEEEEEPN3geo9TaskQueueEPU32objcproto21OS_dispatch_semaphore8NSObject_block_invoke_17;
      v151[3] = &unk_1EF58DF90;
      unint64_t v65 = (char *)v177;
      uint64_t v153 = a1;
      uint64_t v154 = v176;
      v155 = v159;
      v156 = (char *)v159;
      v157 = v159;
      uint64_t v158 = 32;
      uint64_t v66 = v178;
      unint64_t v67 = v178 - (unsigned char *)v177;
      if ((unint64_t)(v178 - (unsigned char *)v177) >= 0x21)
      {
        id v139 = v63;
        if (v67 <= 0x40) {
          size_t v68 = 64;
        }
        else {
          size_t v68 = v178 - (unsigned char *)v177;
        }
        uint64_t v64 = malloc_type_malloc(v68, 0x100004077774924uLL);
        uint64_t v69 = (char *)v155;
        long long v70 = v156;
        if (v155 == v156) {
          goto LABEL_119;
        }
        unint64_t v71 = v156 - (unsigned char *)v155;
        if ((unint64_t)(v156 - (unsigned char *)v155) < 8)
        {
          uint64_t v72 = v64;
        }
        else
        {
          uint64_t v72 = v64;
          if ((unint64_t)((char *)v64 - (unsigned char *)v155) >= 0x20)
          {
            if (v71 < 0x20)
            {
              uint64_t v73 = 0;
LABEL_104:
              unint64_t v94 = v71 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v72 = (char *)v64 + (v71 & 0xFFFFFFFFFFFFFFF8);
              uint64_t v95 = v73 - (v71 & 0xFFFFFFFFFFFFFFF8);
              size_t v96 = &v69[v73];
              v97 = (void *)((char *)v64 + v73);
              do
              {
                uint64_t v98 = *(void *)v96;
                v96 += 8;
                *v97++ = v98;
                v95 += 8;
              }
              while (v95);
              if (v71 != v94)
              {
                v69 += v94;
                goto LABEL_118;
              }
LABEL_119:
              v155 = v64;
              v156 = (char *)v64;
              uint64_t v158 = v68;
              id v63 = v139;
              goto LABEL_120;
            }
            uint64_t v73 = v71 & 0xFFFFFFFFFFFFFFE0;
            v90 = (long long *)((char *)v155 + 16);
            int v91 = v64 + 2;
            unint64_t v92 = v71 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v93 = *v90;
              *(v91 - 1) = *(v90 - 1);
              *int v91 = v93;
              v90 += 2;
              v91 += 2;
              v92 -= 32;
            }
            while (v92);
            if (v71 == v73) {
              goto LABEL_119;
            }
            if ((v71 & 0x18) != 0) {
              goto LABEL_104;
            }
            v69 += v73;
            uint64_t v72 = (char *)v64 + v73;
          }
        }
        do
        {
LABEL_118:
          char v108 = *v69++;
          *v72++ = v108;
        }
        while (v69 != v70);
        goto LABEL_119;
      }
LABEL_120:
      if (v65 == v66) {
        goto LABEL_138;
      }
      if (v67 < 8)
      {
        int v110 = v64;
        goto LABEL_136;
      }
      if ((unint64_t)((char *)v64 - v65) < 0x20)
      {
        int v110 = v64;
        goto LABEL_136;
      }
      if (v67 >= 0x20)
      {
        unint64_t v109 = v67 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v111 = (long long *)(v65 + 16);
        unint64_t v112 = v64 + 2;
        unint64_t v113 = v67 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v114 = *v111;
          *(v112 - 1) = *(v111 - 1);
          *unint64_t v112 = v114;
          v111 += 2;
          v112 += 2;
          v113 -= 32;
        }
        while (v113);
        if (v67 == v109) {
          goto LABEL_137;
        }
        if ((v67 & 0x18) == 0)
        {
          v65 += v109;
          int v110 = (char *)v64 + v109;
          goto LABEL_136;
        }
      }
      else
      {
        unint64_t v109 = 0;
      }
      unint64_t v115 = v67 & 0xFFFFFFFFFFFFFFF8;
      int v110 = (char *)v64 + (v67 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v116 = v109 - (v67 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v117 = (uint64_t *)&v65[v109];
      uint64_t v118 = (void *)((char *)v64 + v109);
      do
      {
        uint64_t v119 = *v117++;
        *v118++ = v119;
        v116 += 8;
      }
      while (v116);
      if (v67 == v115) {
        goto LABEL_137;
      }
      v65 += v115;
      do
      {
LABEL_136:
        char v120 = *v65++;
        *v110++ = v120;
      }
      while (v65 != v66);
LABEL_137:
      uint64_t v64 = v156;
LABEL_138:
      v156 = (char *)v64 + v67;
      v159[4] = v182;
      long long v160 = v183;
      uint64_t v161 = v11;
      uint64_t v162 = v141;
      id v152 = v144;
      LODWORD(v135) = v62;
      [v143 loadKey:&v197 additionalInfo:v147 priority:v60 forClient:v61 options:65 reason:1 qos:v135 signpostID:v145 auditToken:v63 callbackQ:v149 beginNetwork:0 callback:v151];
      uint64_t v10 = &qword_1EB31E000;

      size_t v9 = &qword_1EB31E000;
      v121 = v155;
      if (v155 != v157) {
        goto LABEL_139;
      }
LABEL_140:
      if (v177 != v179) {
        free(v177);
      }
      uint64_t v8 = (uint64_t *)*v8;
      if (!v8) {
        goto LABEL_165;
      }
    }
    unint64_t v19 = v178 - (unsigned char *)v177;
    if ((unint64_t)(v178 - (unsigned char *)v177) < 8)
    {
      uint64_t v20 = v12;
    }
    else
    {
      uint64_t v20 = v12;
      if ((unint64_t)(v12 - (unsigned char *)v177) >= 0x20)
      {
        if (v19 < 0x20)
        {
          uint64_t v21 = 0;
LABEL_27:
          unint64_t v26 = v19 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v20 = &v12[v19 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v27 = v21 - (v19 & 0xFFFFFFFFFFFFFFF8);
          id v28 = (uint64_t *)&v17[v21];
          unint64_t v29 = &v12[v21];
          do
          {
            uint64_t v30 = *v28++;
            *v29++ = v30;
            v27 += 8;
          }
          while (v27);
          if (v19 == v26) {
            goto LABEL_33;
          }
          v17 += v26;
          goto LABEL_32;
        }
        uint64_t v21 = v19 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v22 = (long long *)((char *)v177 + 16);
        uint64_t v23 = v12 + 16;
        unint64_t v24 = v19 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v25 = *v22;
          *(v23 - 1) = *(v22 - 1);
          *uint64_t v23 = v25;
          v22 += 2;
          v23 += 2;
          v24 -= 32;
        }
        while (v24);
        if (v19 == v21) {
          goto LABEL_33;
        }
        if ((v19 & 0x18) != 0) {
          goto LABEL_27;
        }
        v17 += v21;
        uint64_t v20 = &v12[v21];
      }
    }
    do
    {
LABEL_32:
      char v31 = *v17++;
      *v20++ = v31;
    }
    while (v17 != v18);
    goto LABEL_33;
  }
LABEL_167:
}

void sub_1A1836500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,void *a36)
{
  _Unwind_Resume(a1);
}

id md::TiledGEOResourceFetcher::getTileLoader(id *this)
{
  id v2 = this[67];
  int v3 = v2;
  if (v2)
  {
    char v4 = [v2 isEqual:0];

    if ((v4 & 1) == 0)
    {
      id v5 = this[67];
LABEL_9:
      id v8 = v5;
      goto LABEL_11;
    }
  }
  else
  {
  }
  uint64_t v6 = +[VKDebugSettings sharedSettings];
  char v7 = [v6 shouldUseTestTileLoader];

  if (v7)
  {
    if (md::TiledGEOResourceFetcher::getTileLoader(void)const::onceToken != -1) {
      dispatch_once(&md::TiledGEOResourceFetcher::getTileLoader(void)const::onceToken, &__block_literal_global_15525);
    }
    id v5 = (id)md::TiledGEOResourceFetcher::getTileLoader(void)const::loader;
    goto LABEL_9;
  }
  id v8 = [MEMORY[0x1E4F64AC8] modernLoader];
LABEL_11:
  return v8;
}

void sub_1A18366DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<gdc::ResourceKey,unsigned long long>,std::__unordered_map_hasher<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,unsigned long long>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,true>,std::__unordered_map_equal<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,unsigned long long>,std::equal_to<gdc::ResourceKey>,gdc::ResourceKeyHash,true>,std::allocator<std::__hash_value_type<gdc::ResourceKey,unsigned long long>>>::__emplace_unique_key_args<gdc::ResourceKey,std::pair<gdc::ResourceKey,unsigned long> &>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *((unsigned __int16 *)a2 + 1);
  unint64_t v8 = (v7
      + ((v6 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v6 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v6 - 0x61C8864680B583EBLL);
  size_t v9 = (uint64_t *)*((void *)a2 + 9);
  unint64_t v10 = ((unint64_t)&v9[8 * v8 - 0xC3910C8D016B07DLL] + (v8 >> 2) - 3) ^ v8;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      uint64_t v3 = ((unint64_t)&v9[8 * v8 - 0xC3910C8D016B07DLL] + (v8 >> 2) - 3) ^ v8;
      if (v10 >= v11) {
        uint64_t v3 = v10 % v11;
      }
    }
    else
    {
      uint64_t v3 = v10 & (v11 - 1);
    }
    uint64_t v13 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        unint64_t v15 = (const void *)*((void *)a2 + 1);
        size_t v16 = *((void *)a2 + 2) - (void)v15;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == (uint64_t *)v10)
            {
              if (*((unsigned __int8 *)v14 + 16) == v6
                && *((unsigned __int16 *)v14 + 9) == v7
                && v14[11] == v9)
              {
                uint64_t v22 = v14[3];
                if ((char *)v14[4] - (char *)v22 == v16)
                {
                  size_t v70 = v16;
                  uint64_t v72 = v15;
                  int v23 = memcmp(v22, v15, v16);
                  size_t v16 = v70;
                  unint64_t v15 = v72;
                  if (!v23) {
                    return;
                  }
                }
              }
            }
            else if (((unint64_t)v21 & (v11 - 1)) != v3)
            {
              goto LABEL_31;
            }
            uint64_t v14 = (uint64_t **)*v14;
            if (!v14) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v17 = (unint64_t)v14[1];
          if (v17 == v10)
          {
            if (*((unsigned __int8 *)v14 + 16) == v6
              && *((unsigned __int16 *)v14 + 9) == v7
              && v14[11] == v9)
            {
              long long v18 = v14[3];
              if ((char *)v14[4] - (char *)v18 == v16)
              {
                unint64_t v71 = v15;
                size_t v19 = v16;
                int v20 = memcmp(v18, v15, v16);
                size_t v16 = v19;
                unint64_t v15 = v71;
                if (!v20) {
                  return;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v14 = (uint64_t **)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  uint64_t v24 = a1 + 16;
  long long v25 = operator new(0x78uLL);
  uint64_t v73 = v25;
  *long long v25 = 0;
  v25[1] = v10;
  unint64_t v26 = (char *)(v25 + 7);
  uint64_t v27 = *(char **)(a3 + 8);
  v25[2] = *(void *)a3;
  v25[3] = v25 + 7;
  v25[5] = v25 + 7;
  v25[6] = 32;
  id v28 = *(char **)(a3 + 16);
  unint64_t v29 = v28 - v27;
  v25[4] = v25 + 7;
  if ((unint64_t)(v28 - v27) >= 0x21)
  {
    if (v29 <= 0x40) {
      size_t v30 = 64;
    }
    else {
      size_t v30 = v28 - v27;
    }
    unint64_t v26 = (char *)malloc_type_malloc(v30, 0x100004077774924uLL);
    char v31 = (char *)v25[3];
    uint64_t v32 = (char *)v25[4];
    if (v31 == v32) {
      goto LABEL_51;
    }
    unint64_t v33 = v32 - v31;
    if ((unint64_t)(v32 - v31) < 8)
    {
      uint64_t v34 = v26;
      goto LABEL_50;
    }
    uint64_t v34 = v26;
    if ((unint64_t)(v26 - v31) < 0x20) {
      goto LABEL_50;
    }
    if (v33 >= 0x20)
    {
      unint64_t v35 = v33 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v36 = (long long *)(v31 + 16);
      long long v37 = v26 + 16;
      unint64_t v38 = v33 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v39 = *v36;
        *(v37 - 1) = *(v36 - 1);
        _OWORD *v37 = v39;
        v36 += 2;
        v37 += 2;
        v38 -= 32;
      }
      while (v38);
      if (v33 == v35) {
        goto LABEL_51;
      }
      if ((v33 & 0x18) == 0)
      {
        v31 += v35;
        uint64_t v34 = &v26[v35];
        goto LABEL_50;
      }
    }
    else
    {
      unint64_t v35 = 0;
    }
    unint64_t v40 = v33 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v34 = &v26[v33 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v41 = v35 - (v33 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v42 = (uint64_t *)&v31[v35];
    char v43 = &v26[v35];
    do
    {
      uint64_t v44 = *v42++;
      *(void *)char v43 = v44;
      v43 += 8;
      v41 += 8;
    }
    while (v41);
    if (v33 == v40) {
      goto LABEL_51;
    }
    v31 += v40;
    do
    {
LABEL_50:
      char v45 = *v31++;
      *v34++ = v45;
    }
    while (v31 != v32);
LABEL_51:
    v25[3] = v26;
    v25[4] = v26;
    v25[6] = v30;
    uint64_t v24 = a1 + 16;
  }
  if (v27 == v28) {
    goto LABEL_70;
  }
  if (v29 < 8)
  {
    int v47 = v26;
    goto LABEL_68;
  }
  if ((unint64_t)(v26 - v27) < 0x20)
  {
    int v47 = v26;
    goto LABEL_68;
  }
  if (v29 >= 0x20)
  {
    unint64_t v46 = v29 & 0xFFFFFFFFFFFFFFE0;
    unint64_t v48 = (long long *)(v27 + 16);
    unint64_t v49 = v26 + 16;
    unint64_t v50 = v29 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v51 = *v48;
      *(v49 - 1) = *(v48 - 1);
      *unint64_t v49 = v51;
      v48 += 2;
      v49 += 2;
      v50 -= 32;
    }
    while (v50);
    if (v29 == v46) {
      goto LABEL_69;
    }
    if ((v29 & 0x18) == 0)
    {
      v27 += v46;
      int v47 = &v26[v46];
      goto LABEL_68;
    }
  }
  else
  {
    unint64_t v46 = 0;
  }
  unint64_t v52 = v29 & 0xFFFFFFFFFFFFFFF8;
  int v47 = &v26[v29 & 0xFFFFFFFFFFFFFFF8];
  unint64_t v53 = v46 - (v29 & 0xFFFFFFFFFFFFFFF8);
  uint32_t v54 = (uint64_t *)&v27[v46];
  unint64_t v55 = &v26[v46];
  do
  {
    uint64_t v56 = *v54++;
    *(void *)unint64_t v55 = v56;
    v55 += 8;
    v53 += 8;
  }
  while (v53);
  if (v29 == v52) {
    goto LABEL_69;
  }
  v27 += v52;
  do
  {
LABEL_68:
    char v57 = *v27++;
    *v47++ = v57;
  }
  while (v27 != v28);
LABEL_69:
  unint64_t v26 = (char *)v25[4];
LABEL_70:
  v25[4] = &v26[v29];
  v25[11] = *(void *)(a3 + 72);
  *((_OWORD *)v25 + 6) = *(_OWORD *)(a3 + 80);
  v25[14] = *(void *)(a3 + 96);
  float v58 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v59 = *(float *)(a1 + 32);
  if (!v11 || (float)(v59 * (float)v11) < v58)
  {
    BOOL v60 = 1;
    if (v11 >= 3) {
      BOOL v60 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v61 = v60 | (2 * v11);
    unint64_t v62 = vcvtps_u32_f32(v58 / v59);
    if (v61 <= v62) {
      size_t prime = v62;
    }
    else {
      size_t prime = v61;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v64 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v64) {
      goto LABEL_82;
    }
    if (prime < *(void *)&v64)
    {
      unint64_t v65 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v64 < 3uLL || (uint8x8_t v66 = (uint8x8_t)vcnt_s8(v64), v66.i16[0] = vaddlv_u8(v66), v66.u32[0] > 1uLL))
      {
        unint64_t v65 = std::__next_prime(v65);
      }
      else
      {
        uint64_t v67 = 1 << -(char)__clz(v65 - 1);
        if (v65 >= 2) {
          unint64_t v65 = v67;
        }
      }
      if (prime <= v65) {
        size_t prime = v65;
      }
      if (prime < *(void *)&v64) {
LABEL_82:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        uint64_t v3 = v10 % v11;
      }
      else {
        uint64_t v3 = v10;
      }
    }
    else
    {
      uint64_t v3 = (v11 - 1) & v10;
    }
  }
  size_t v68 = *(void **)(*(void *)a1 + 8 * v3);
  if (v68)
  {
    *uint64_t v73 = *v68;
    void *v68 = v73;
  }
  else
  {
    *uint64_t v73 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v73;
    *(void *)(*(void *)a1 + 8 * v3) = v24;
    if (*v73)
    {
      unint64_t v69 = *(void *)(*v73 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v69 >= v11) {
          v69 %= v11;
        }
      }
      else
      {
        v69 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v69) = v73;
    }
  }
  ++*(void *)(a1 + 24);
}

void sub_1A1836CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<gdc::ResourceKey,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<gdc::ResourceKey,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::RoadLayer::layout(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v216 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 56))
  {
    uint64_t v4 = *(void *)(a1 + 200);
    id v5 = (uint64_t *)(v4 + 80);
    uint64_t v6 = (uint64_t *)(v4 + 104);
  }
  else
  {
    uint64_t v7 = *(uint64_t **)(a1 + 200);
    unint64_t v8 = v7 + 9;
    size_t v9 = v7 + 12;
    unint64_t v10 = v7 + 11;
    unint64_t v11 = v7 + 14;
    if (*(unsigned char *)(a2 + 105)) {
      uint64_t v6 = v11;
    }
    else {
      uint64_t v6 = v9;
    }
    if (*(unsigned char *)(a2 + 105)) {
      id v5 = v10;
    }
    else {
      id v5 = v8;
    }
  }
  uint64_t v12 = *v5;
  uint64_t v13 = *v6;
  if (*(unsigned char *)(a2 + 104))
  {
    uint64_t v14 = *(void **)(*(void *)a2 + 8);
    unint64_t v15 = v14[1];
    if ((v15 & (v15 - 1)) != 0)
    {
      unint64_t v17 = 0x1AF456233693CD46;
      if (v15 <= 0x1AF456233693CD46) {
        unint64_t v17 = 0x1AF456233693CD46 % v15;
      }
      size_t v16 = *(void **)(*v14 + 8 * v17);
      do
      {
        do
          size_t v16 = (void *)*v16;
        while (v16[1] != 0x1AF456233693CD46);
      }
      while (v16[2] != 0x1AF456233693CD46);
    }
    else
    {
      size_t v16 = *(void **)(*v14 + 8 * ((v15 - 1) & 0x1AF456233693CD46));
      do
      {
        do
          size_t v16 = (void *)*v16;
        while (v16[1] != 0x1AF456233693CD46);
      }
      while (v16[2] != 0x1AF456233693CD46);
    }
    long long v18 = *(double **)(v16[5] + 32);
    float v19 = *(float *)(a2 + 64);
    long double v20 = v18[64];
    double v21 = sqrt(v18[62] * v18[62] + v18[63] * v18[63]);
    double v22 = atan2(v20, v21 * 0.996647189);
    __double2 v23 = __sincos_stret(v22);
    double v24 = atan2(v20 + v23.__sinval * v23.__sinval * 42841.3115 * v23.__sinval, v21 + v23.__cosval * v23.__cosval * -42697.6727 * v23.__cosval);
    __double2 v25 = __sincos_stret(v24);
    float v26 = v21 / v25.__cosval + -6378137.0 / sqrt(v25.__sinval * v25.__sinval * -0.00669437999 + 1.0);
    float v27 = fmaxf(fminf(fmaxf((float)(v26 * 0.00021053) + -0.10526, 0.0), 1.0) * fminf(fmaxf(v19, 0.2), 1.0), 0.0);
    float v28 = (float)(v27 * -200000.0) + -5000.0;
    BOOL v29 = v27 <= 1.0;
    float v30 = -205000.0;
    if (v29) {
      float v30 = v28;
    }
    *(float *)(v12 + 40) = v30;
  }
  *(void *)(a1 + 56) = v12;
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 88) = v12;
  *(void *)(a1 + 96) = v12;
  *(void *)(a1 + 72) = v12;
  *(void *)(a1 + 80) = v12;
  *(void *)(a1 + 104) = v13;
  char v31 = *(void **)(*(void *)v2 + 8);
  int8x8_t v32 = (int8x8_t)v31[1];
  if (!*(void *)&v32) {
    goto LABEL_52;
  }
  uint8x8_t v33 = (uint8x8_t)vcnt_s8(v32);
  v33.i16[0] = vaddlv_u8(v33);
  if (v33.u32[0] > 1uLL)
  {
    uint64_t v34 = 0x1AF456233693CD46;
    if (*(void *)&v32 <= 0x1AF456233693CD46uLL) {
      uint64_t v34 = 0x1AF456233693CD46uLL % *(void *)&v32;
    }
  }
  else
  {
    uint64_t v34 = (*(void *)&v32 - 1) & 0x1AF456233693CD46;
  }
  unint64_t v35 = *(void **)(*v31 + 8 * v34);
  if (!v35) {
    goto LABEL_52;
  }
  unint64_t v36 = (void *)*v35;
  if (!v36) {
    goto LABEL_52;
  }
  if (v33.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v38 = v36[1];
      if (v38 == 0x1AF456233693CD46)
      {
        if (v36[2] == 0x1AF456233693CD46) {
          goto LABEL_45;
        }
      }
      else if ((v38 & (*(void *)&v32 - 1)) != v34)
      {
        goto LABEL_52;
      }
      unint64_t v36 = (void *)*v36;
      if (!v36) {
        goto LABEL_52;
      }
    }
  }
  while (1)
  {
    unint64_t v37 = v36[1];
    if (v37 == 0x1AF456233693CD46) {
      break;
    }
    if (v37 >= *(void *)&v32) {
      v37 %= *(void *)&v32;
    }
    if (v37 != v34) {
      goto LABEL_52;
    }
LABEL_34:
    unint64_t v36 = (void *)*v36;
    if (!v36) {
      goto LABEL_52;
    }
  }
  if (v36[2] != 0x1AF456233693CD46) {
    goto LABEL_34;
  }
LABEL_45:
  uint64_t v39 = v36[5];
  if (*(void *)(v39 + 8) != 0x1AF456233693CD46)
  {
LABEL_52:
    uint64_t v40 = 0;
    if (MEMORY[0xEC0]) {
      goto LABEL_53;
    }
LABEL_47:
    if ((*(void *)&v32 & (*(void *)&v32 - 1)) != 0)
    {
      unint64_t v47 = 0x8BD499FBD96FBB9ELL;
      if (*(void *)&v32 <= 0x8BD499FBD96FBB9ELL) {
        unint64_t v47 = 0x8BD499FBD96FBB9ELL % *(void *)&v32;
      }
      unint64_t v41 = *(void **)(*v31 + 8 * v47);
      do
      {
        do
          unint64_t v41 = (void *)*v41;
        while (v41[1] != 0x8BD499FBD96FBB9ELL);
      }
      while (v41[2] != 0x8BD499FBD96FBB9ELL);
    }
    else
    {
      unint64_t v41 = *(void **)(*v31 + 8 * ((*(void *)&v32 - 1) & 0x8BD499FBD96FBB9ELL));
      do
      {
        do
          unint64_t v41 = (void *)*v41;
        while (v41[1] != 0x8BD499FBD96FBB9ELL);
      }
      while (v41[2] != 0x8BD499FBD96FBB9ELL);
    }
    double v48 = 0.0;
    if (**(unsigned char **)(v41[5] + 32) && *(unsigned char *)(a1 + 152)) {
      double v48 = *(double *)(v40 + 24) * 0.0000000249532021 * (double)(1 << *(unsigned char *)(a1 + 129));
    }
    uint64_t v49 = *(void *)(a1 + 160);
    if ((*(unsigned char *)(v49 + 16) & 2) == 0
      && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
    {
      *(void *)buf = &v212;
      *(void *)v214 = buf;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, v214, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
    char v45 = *(float **)(v49 + 72);
    double v46 = v48;
    goto LABEL_71;
  }
  uint64_t v40 = *(void *)(v39 + 32);
  if (!*(unsigned char *)(v40 + 3776)) {
    goto LABEL_47;
  }
LABEL_53:
  uint64_t v42 = *(void *)(a1 + 120);
  if (!v42)
  {
    uint64_t v44 = *(void *)(a1 + 160);
    if ((*(unsigned char *)(v44 + 16) & 2) == 0
      && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
    {
      *(void *)buf = &v212;
      *(void *)v214 = buf;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, v214, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
    }
    char v45 = *(float **)(v44 + 72);
    double v46 = 0.0;
LABEL_71:
    int v43 = ggl::CullingGrid::intersectedCellsForView(v45, v46);
    goto LABEL_72;
  }
  int v43 = gdc::GlobeTileGrid::intersectWithFrustum(v42, (const double *)(v40 + 984), *(double *)(v40 + 24));
LABEL_72:
  uint64_t v50 = *(void *)(a1 + 8);
  uint64_t v51 = *(void *)(a1 + 16);
  if (v50 != v51)
  {
    do
    {
      unint64_t v53 = *(unsigned char **)v50;
      uint32_t v54 = *(uint64_t **)(*(void *)v50 + 1016);
      unint64_t v55 = *(uint64_t **)(*(void *)v50 + 1024);
      if (v54 == v55)
      {
        char v52 = 0;
      }
      else
      {
        char v52 = 0;
        do
        {
          uint64_t v56 = *v54++;
          BOOL v57 = (*(_DWORD *)(v56 + 96) & v43) != 0;
          v52 |= v57;
          *(unsigned char *)(v56 + 48) = v57;
        }
        while (v54 != v55);
      }
      v53[136] = v52 & 1;
      v53[264] = v52 & 1;
      v53[392] = v52 & 1;
      v53[520] = v52 & 1;
      v53[648] = v52 & 1;
      v53[776] = v52 & 1;
      v53[904] = v52 & 1;
      v50 += 8;
      v53[1040] = v52 & 1;
    }
    while (v50 != v51);
    float v58 = *(uint64_t **)(a1 + 8);
    v209 = *(uint64_t **)(a1 + 16);
    if (v58 != v209)
    {
      uint64_t v204 = v2;
      while (1)
      {
        uint64_t v59 = *v58;
        if (!*(unsigned char *)(*v58 + 1040)) {
          goto LABEL_82;
        }
        uint64_t v60 = *(void *)(v59 + 1072);
        if (!v60) {
          break;
        }
LABEL_94:
        int v66 = *(unsigned __int8 *)(v60 + 72);
        *(unsigned char *)(v59 + 136) = v66;
        *(unsigned char *)(v59 + 264) = v66;
        *(unsigned char *)(v59 + 392) = v66;
        *(unsigned char *)(v59 + 520) = v66;
        *(unsigned char *)(v59 + 648) = v66;
        *(unsigned char *)(v59 + 776) = v66;
        *(unsigned char *)(v59 + 904) = v66;
        *(unsigned char *)(v59 + 1040) = v66;
        if (v66)
        {
          *(void *)(*(void *)(*(void *)(v59 + 1120) + 96) + 8) = *(void *)(v60 + 16);
          **(void **)(*(void *)(v59 + 1128) + 96) = *(void *)(*(void *)(v59 + 1072) + 16);
          if (*(unsigned char *)(v2 + 76)) {
            BOOL v210 = *(unsigned char *)(*(void *)(v59 + 1072) + 48) != 0;
          }
          else {
            BOOL v210 = 0;
          }
          uint64_t v67 = *(uint64_t ***)(*(void *)(v59 + 8) + 200);
          uint64_t v211 = *(void *)(v2 + 96);
          size_t v68 = +[VKDebugSettings sharedSettings];
          __int8 v69 = [v68 enableTileClippingDebug];

          unsigned __int8 v70 = *(unsigned char *)(v2 + 117);
          v71.i16[3] = 0;
          v71.i64[1] = 0;
          __int8 v208 = *(unsigned char *)(v2 + 88);
          v71.i8[0] = v208;
          __int8 v207 = *(unsigned char *)(v2 + 106);
          v71.i8[1] = v207;
          __int8 v206 = *(unsigned char *)(v2 + 107);
          v71.i8[2] = v206;
          v71.i8[3] = v210;
          v71.i8[4] = v211 != 0;
          v71.i8[5] = v69;
          *(__int32 *)((char *)&v71.i32[2] + 1) = v70;
          uint64_t v72 = *v67;
          int8x16_t v73 = vceqzq_s8(v71);
          int16x8_t v74 = vmovl_s8(*(int8x8_t *)v73.i8);
          int32x4_t v75 = vmovl_high_s16(v74);
          v76.i64[0] = v75.u32[2];
          v76.i64[1] = v75.u32[3];
          int8x16_t v77 = v76;
          int16x8_t v78 = vmovl_high_s8(v73);
          int32x4_t v79 = vmovl_high_s16(v78);
          v76.i64[0] = v79.u32[2];
          v76.i64[1] = v79.u32[3];
          int8x16_t v80 = v76;
          int32x4_t v81 = vmovl_s16(*(int16x4_t *)v74.i8);
          v76.i64[0] = v81.u32[2];
          v76.i64[1] = v81.u32[3];
          int8x16_t v82 = v76;
          int32x4_t v83 = vmovl_s16(*(int16x4_t *)v78.i8);
          v76.i64[0] = v83.u32[2];
          v76.i64[1] = v83.u32[3];
          int8x16_t v84 = v76;
          v76.i64[0] = v75.u32[0];
          v76.i64[1] = v75.u32[1];
          int8x16_t v85 = v76;
          v76.i64[0] = v79.u32[0];
          v76.i64[1] = v79.u32[1];
          int8x16_t v86 = v76;
          v76.i64[0] = v81.u32[0];
          v76.i64[1] = v81.u32[1];
          int8x16_t v87 = v76;
          v76.i64[0] = v83.u32[0];
          v76.i64[1] = v83.u32[1];
          unint64_t v88 = vaddvq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v87), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v76)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v85), vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v86))), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v82), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v84)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC980, v77), vbicq_s8((int8x16_t)xmmword_1A28FC990, v80)))));
          unint64_t v89 = v88;
          int v91 = (uint64_t **)(v72 + 13);
          v90 = (void *)v72[13];
          if (!v90) {
            goto LABEL_109;
          }
          unint64_t v92 = (uint64_t **)(v72 + 13);
          do
          {
            unint64_t v93 = v90[4];
            BOOL v94 = v93 >= v88;
            if (v93 >= v88) {
              uint64_t v95 = v90;
            }
            else {
              uint64_t v95 = v90 + 1;
            }
            if (v94) {
              unint64_t v92 = (uint64_t **)v90;
            }
            v90 = (void *)*v95;
          }
          while (*v95);
          if (v92 == v91 || v88 < (unint64_t)v92[4])
          {
LABEL_109:
            size_t v96 = (char *)operator new(0x198uLL);
            char v205 = v70;
            *((void *)v96 + 1) = 0;
            *((void *)v96 + 2) = 0;
            *(void *)size_t v96 = &unk_1EF5835B8;
            long long v97 = *((_OWORD *)v72 + 2);
            *(_OWORD *)buf = *((_OWORD *)v72 + 1);
            *(_OWORD *)&buf[16] = v97;
            {
              if (v203)
              {
                {
                  if (v203)
                  {
                    {
                      {
                        ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Ribbon::defaultVboReflection;
                      }
                      ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::attributesReflection(void)::r;
                      unk_1EB32B738 = 1;
                    }
                    ggl::SolidRibbon::PipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::Ribbon::DefaultVbo>::typedReflection(void)::r;
                    *(void *)algn_1EB320748 = &ggl::SolidRibbon::pipelineDataPipelineDeviceStructs(void)::ref;
                    qword_1EB320750 = 0;
                    {
                      ggl::SolidRibbon::pipelineDataPipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
                      unk_1EB320780 = ggl::Tile::Transform::reflection(void)::reflection;
                      qword_1EB320788 = (uint64_t)ggl::OffsetRibbon::Style::reflection(void)::reflection;
                      unk_1EB320790 = ggl::Tile::Clipping::reflection(void)::reflection;
                    }
                    qword_1EB320758 = (uint64_t)&ggl::SolidRibbon::pipelineDataPipelineConstantStructs(void)::ref;
                    unk_1EB320760 = xmmword_1A28FC860;
                  }
                }
                ggl::SolidRibbon::PipelineState::typedReflection(void)::ref = (uint64_t)&ggl::SolidRibbon::PipelineSetup::typedReflection(void)::ref;
                ggl::SolidRibbonShader::typedReflection(v203);
                qword_1EB318880 = (uint64_t)&ggl::SolidRibbonShader::typedReflection(void)::ref;
                {
                  ggl::SolidRibbon::pipelineStatePipelineAttributeStructBinding(void)::attr = 0;
                  unk_1E9581DA0 = 0;
                  qword_1E9581DA8 = (uint64_t)"";
                  dword_1E9581DB0 = 0;
                  qword_1E9581DB8 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineAttributeBinding_0(void)::attr;
                  unk_1E9581DC0 = 4;
                }
                qword_1EB318888 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineAttributeStructBinding(void)::attr;
                unk_1EB318890 = 1;
                qword_1EB318898 = 0;
                unk_1EB3188A0 = 2;
                qword_1EB3188A8 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineDeviceStructBinding(void)::ref;
                unk_1EB3188B0 = 0;
                {
                  ggl::SolidRibbon::pipelineStatePipelineConstantStructBinding(void)::ref = 0;
                  unk_1E9581CE0 = 0;
                  qword_1E9581CE8 = (uint64_t)"view";
                  dword_1E9581CF0 = 3;
                  qword_1E9581CF8 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineConstantViewBinding(void)::reflection;
                  unk_1E9581D00 = xmmword_1A28FCEB0;
                  qword_1E9581D10 = 1;
                  qword_1E9581D18 = (uint64_t)"transform";
                  dword_1E9581D20 = 3;
                  qword_1E9581D28 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineConstantTransformBinding(void)::reflection;
                  *(_OWORD *)algn_1E9581D30 = xmmword_1A28FCF70;
                  qword_1E9581D40 = 2;
                  unk_1E9581D48 = "style";
                  dword_1E9581D50 = 3;
                  qword_1E9581D58 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineConstantStyleBinding(void)::reflection;
                  unk_1E9581D60 = xmmword_1A28FD1E0;
                  qword_1E9581D70 = 3;
                  unk_1E9581D78 = "tileClipping";
                  dword_1E9581D80 = 3;
                  qword_1E9581D88 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineConstantTileClippingBinding(void)::reflection;
                  unk_1E9581D90 = 2;
                }
                qword_1EB3188B8 = (uint64_t)&ggl::SolidRibbon::pipelineStatePipelineConstantStructBinding(void)::ref;
                unk_1EB3188C0 = 4;
              }
            }
            uint64_t v98 = *v72;
            uint64_t v99 = (std::__shared_weak_count *)v72[1];
            if (v99) {
              atomic_fetch_add_explicit(&v99->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(_OWORD *)v214 = *((_OWORD *)v72 + 3);
            *(_OWORD *)&v214[12] = *(_OWORD *)((char *)v72 + 60);
            long long v100 = *(_OWORD *)((char *)v72 + 76);
            char v101 = *((unsigned char *)v72 + 92);
            *((void *)v96 + 4) = 0;
            *((void *)v96 + 5) = 0;
            *((_DWORD *)v96 + 14) = 0;
            *((void *)v96 + 6) = 0;
            *((void *)v96 + 3) = &unk_1EF55B208;
            *((void *)v96 + 8) = &ggl::SolidRibbon::PipelineState::typedReflection(void)::ref;
            *((void *)v96 + 9) = v98;
            *((void *)v96 + 10) = v99;
            if (v99) {
              atomic_fetch_add_explicit(&v99->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v96[136] = 0;
            *(_OWORD *)(v96 + 140) = xmmword_1A28FC970;
            *(void *)(v96 + 156) = 0;
            *(void *)(v96 + 172) = 0;
            *(void *)(v96 + 164) = 0;
            v96[184] = 0;
            *(_OWORD *)(v96 + 188) = xmmword_1A28FC970;
            *(void *)(v96 + 204) = 0;
            *(void *)(v96 + 220) = 0;
            *(void *)(v96 + 212) = 0;
            v96[232] = 0;
            *(_OWORD *)(v96 + 236) = xmmword_1A28FC970;
            *(void *)(v96 + 252) = 0;
            *(void *)(v96 + 268) = 0;
            *(void *)(v96 + 260) = 0;
            long long v102 = *(_OWORD *)&buf[16];
            *(_OWORD *)(v96 + 280) = *(_OWORD *)buf;
            *(_OWORD *)(v96 + 296) = v102;
            v96[312] = 0;
            *((void *)v96 + 48) = 0;
            *((_OWORD *)v96 + 22) = 0u;
            *((_OWORD *)v96 + 23) = 0u;
            *((_OWORD *)v96 + 20) = 0u;
            *((_OWORD *)v96 + 21) = 0u;
            *((void *)v96 + 49) = 0x100000001;
            v96[400] = 0;
            *(_OWORD *)(v96 + 100) = *(_OWORD *)&v214[12];
            *(_OWORD *)(v96 + 88) = *(_OWORD *)v214;
            *(_OWORD *)(v96 + 116) = v100;
            v96[132] = v101;
            if (v99 && !atomic_fetch_add(&v99->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
              std::__shared_weak_count::__release_weak(v99);
            }
            v96[329] = v208;
            v96[330] = v207;
            v96[331] = v206;
            v96[332] = v210;
            v96[333] = v211 != 0;
            v96[334] = v69;
            *(_WORD *)(v96 + 335) = 0;
            v96[337] = 0;
            v96[338] = v205;
            v96[339] = 0;
            int8x16_t v103 = vceqzq_s8(*(int8x16_t *)(v96 + 328));
            int16x8_t v104 = vmovl_high_s8(v103);
            int32x4_t v105 = vmovl_s16(*(int16x4_t *)v104.i8);
            v106.i64[0] = v105.u32[0];
            v106.i64[1] = v105.u32[1];
            int8x16_t v107 = v106;
            int16x8_t v108 = vmovl_s8(*(int8x8_t *)v103.i8);
            int32x4_t v109 = vmovl_s16(*(int16x4_t *)v108.i8);
            v106.i64[0] = v109.u32[0];
            v106.i64[1] = v109.u32[1];
            int8x16_t v110 = v106;
            int32x4_t v111 = vmovl_high_s16(v104);
            v106.i64[0] = v111.u32[0];
            v106.i64[1] = v111.u32[1];
            int8x16_t v112 = v106;
            int32x4_t v113 = vmovl_high_s16(v108);
            v106.i64[0] = v113.u32[0];
            v106.i64[1] = v113.u32[1];
            int8x16_t v114 = v106;
            v106.i64[0] = v105.u32[2];
            v106.i64[1] = v105.u32[3];
            int8x16_t v115 = v106;
            v106.i64[0] = v109.u32[2];
            v106.i64[1] = v109.u32[3];
            int8x16_t v116 = v106;
            v106.i64[0] = v111.u32[2];
            v106.i64[1] = v111.u32[3];
            int8x16_t v117 = v106;
            v106.i64[0] = v113.u32[2];
            v106.i64[1] = v113.u32[3];
            int8x16_t v118 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v106);
            int8x16_t v119 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v117);
            int8x16_t v120 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v116);
            int8x16_t v121 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v112);
            int8x16_t v122 = vceqzq_s8(*(int8x16_t *)(v96 + 344));
            int16x8_t v123 = vmovl_high_s8(v122);
            int32x4_t v124 = vmovl_s16(*(int16x4_t *)v123.i8);
            v106.i64[0] = v124.u32[0];
            v106.i64[1] = v124.u32[1];
            int8x16_t v125 = v106;
            int16x8_t v126 = vmovl_s8(*(int8x8_t *)v122.i8);
            int32x4_t v127 = vmovl_s16(*(int16x4_t *)v126.i8);
            v106.i64[0] = v127.u32[0];
            v106.i64[1] = v127.u32[1];
            int8x16_t v128 = v106;
            int32x4_t v129 = vmovl_high_s16(v123);
            v106.i64[0] = v129.u32[0];
            v106.i64[1] = v129.u32[1];
            int8x16_t v130 = v106;
            int32x4_t v131 = vmovl_high_s16(v126);
            v106.i64[0] = v131.u32[0];
            v106.i64[1] = v131.u32[1];
            int8x16_t v132 = v106;
            v106.i64[0] = v124.u32[2];
            v106.i64[1] = v124.u32[3];
            int8x16_t v133 = v106;
            v106.i64[0] = v127.u32[2];
            v106.i64[1] = v127.u32[3];
            int8x16_t v134 = v106;
            v106.i64[0] = v129.u32[2];
            v106.i64[1] = v129.u32[3];
            int8x16_t v135 = v106;
            v106.i64[0] = v131.u32[2];
            v106.i64[1] = v131.u32[3];
            int8x16_t v136 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v135);
            int8x16_t v137 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v125), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v107));
            int8x16_t v138 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v128), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v110));
            int8x16_t v139 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v130), v121);
            int8x16_t v140 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v132), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v114));
            int8x16_t v141 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v133), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v115));
            int8x16_t v142 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v134), v120);
            int8x16_t v143 = vorrq_s8(v136, v119);
            int8x16_t v144 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v106), v118);
            int8x16_t v145 = vceqzq_s8(*(int8x16_t *)(v96 + 360));
            int16x8_t v146 = vmovl_s8(*(int8x8_t *)v145.i8);
            int16x8_t v147 = vmovl_high_s8(v145);
            int32x4_t v148 = vmovl_s16(*(int16x4_t *)v147.i8);
            int8x16_t v149 = vceqzq_s8(*(int8x16_t *)(v96 + 376));
            int16x8_t v150 = vmovl_high_s8(v149);
            int32x4_t v151 = vmovl_s16(*(int16x4_t *)v150.i8);
            v106.i64[0] = v151.i32[0];
            v106.i64[1] = v151.i32[1];
            int8x16_t v152 = v106;
            int16x8_t v153 = vmovl_s8(*(int8x8_t *)v149.i8);
            int32x4_t v154 = vmovl_s16(*(int16x4_t *)v153.i8);
            v106.i64[0] = v154.i32[0];
            v106.i64[1] = v154.i32[1];
            int8x16_t v155 = v106;
            int32x4_t v156 = vmovl_high_s16(v150);
            v106.i64[0] = v156.i32[0];
            v106.i64[1] = v156.i32[1];
            int8x16_t v157 = v106;
            int32x4_t v158 = vmovl_high_s16(v153);
            v106.i64[0] = v158.i32[0];
            v106.i64[1] = v158.i32[1];
            int8x16_t v159 = v106;
            v106.i64[0] = v151.i32[2];
            v106.i64[1] = v151.i32[3];
            int8x16_t v160 = v106;
            v106.i64[0] = v154.i32[2];
            v106.i64[1] = v154.i32[3];
            int8x16_t v161 = v106;
            v106.i64[0] = v156.i32[2];
            v106.i64[1] = v156.i32[3];
            int8x16_t v162 = v106;
            v106.i64[0] = v158.i32[2];
            v106.i64[1] = v158.i32[3];
            int8x16_t v163 = vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v106);
            v106.i64[0] = v148.i32[0];
            v106.i64[1] = v148.i32[1];
            int32x4_t v164 = vmovl_s16(*(int16x4_t *)v146.i8);
            int8x16_t v165 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v152), vbicq_s8((int8x16_t)xmmword_1A28FCA70, v106)), v137);
            v106.i64[0] = v164.i32[0];
            v106.i64[1] = v164.i32[1];
            int32x4_t v166 = vmovl_high_s16(v147);
            int8x16_t v167 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v155), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v106)), v138);
            v106.i64[0] = v166.i32[0];
            v106.i64[1] = v166.i32[1];
            int32x4_t v168 = vmovl_high_s16(v146);
            int8x16_t v169 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v157), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v106)), v139);
            v106.i64[0] = v168.i32[0];
            v106.i64[1] = v168.i32[1];
            int8x16_t v170 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v159), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v106)), v140);
            v106.i64[0] = v148.i32[2];
            v106.i64[1] = v148.i32[3];
            int8x16_t v171 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v160), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v106)), v141);
            v106.i64[0] = v164.i32[2];
            v106.i64[1] = v164.i32[3];
            int8x16_t v172 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v161), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v106)), v142);
            v106.i64[0] = v166.i32[2];
            v106.i64[1] = v166.i32[3];
            int8x16_t v173 = vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB00, v162), vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v106)), v143);
            v106.i64[0] = v168.i32[2];
            v106.i64[1] = v168.i32[3];
            *((void *)v96 + 40) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(v167, v165), vorrq_s8(v170, v169)), (int64x2_t)vorrq_s8(vorrq_s8(v172, v171), vorrq_s8(vorrq_s8(vorrq_s8(v163, vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v106)), v144), v173))));
            *((void *)v96 + 3) = &unk_1EF55A930;
            v96[312] = 1;
            v212 = v96 + 24;
            v213 = (std::__shared_weak_count *)v96;
            *(void *)buf = v89;
            *(void *)&uint8_t buf[8] = v96 + 24;
            *(void *)&buf[16] = v96;
            atomic_fetch_add_explicit((atomic_ullong *volatile)v96 + 1, 1uLL, memory_order_relaxed);
            uint64_t v174 = *v91;
            v175 = (uint64_t **)(v72 + 13);
            if (*v91)
            {
              while (1)
              {
                while (1)
                {
                  v175 = (uint64_t **)v174;
                  unint64_t v176 = v174[4];
                  if (v89 >= v176) {
                    break;
                  }
                  uint64_t v174 = *v175;
                  int v91 = v175;
                  if (!*v175) {
                    goto LABEL_124;
                  }
                }
                if (v176 >= v89) {
                  break;
                }
                uint64_t v174 = v175[1];
                if (!v174)
                {
                  int v91 = v175 + 1;
                  goto LABEL_124;
                }
              }
              uint64_t v2 = v204;
            }
            else
            {
LABEL_124:
              v177 = (uint64_t *)operator new(0x38uLL);
              v177[4] = v89;
              v177[5] = (uint64_t)(v96 + 24);
              v177[6] = (uint64_t)v96;
              *(void *)&uint8_t buf[8] = 0;
              *(void *)&buf[16] = 0;
              uint64_t *v177 = 0;
              v177[1] = 0;
              v177[2] = (uint64_t)v175;
              *int v91 = v177;
              uint64_t v178 = *(void *)v72[12];
              if (v178)
              {
                v72[12] = v178;
                v177 = *v91;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v72[13], v177);
              ++v72[14];
              size_t v96 = *(char **)&buf[16];
              uint64_t v2 = v204;
              if (!*(void *)&buf[16])
              {
LABEL_133:
                uint64_t v179 = (uint64_t)v212;
LABEL_134:
                v181 = *(ggl::PipelineSetup **)(v59 + 1112);
                uint64_t v182 = *(ggl::PipelineSetup **)(v59 + 1104);
                long long v183 = *(ggl::PipelineSetup **)(v59 + 1088);
                ggl::Flyover::FlyoverPipelineSetup::setState(v181, v179, v213);
                ggl::Flyover::FlyoverPipelineSetup::setState(v182, (uint64_t)v212, v213);
                ggl::Flyover::FlyoverPipelineSetup::setState(v183, (uint64_t)v212, v213);
                uint64_t v184 = *((void *)v181 + 8);
                *(void *)(v184 + 48) = v211;
                *(void *)(v184 + 56) = 0;
                uint64_t v185 = *((void *)v181 + 20);
                __int16 v186 = *(std::__shared_weak_count **)(v185 + 56);
                *(void *)(v185 + 48) = 0;
                *(void *)(v185 + 56) = 0;
                if (v186 && !atomic_fetch_add(&v186->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                  std::__shared_weak_count::__release_weak(v186);
                }
                uint64_t v187 = *((void *)v182 + 8);
                *(void *)(v187 + 48) = v211;
                *(void *)(v187 + 56) = 0;
                uint64_t v188 = *((void *)v182 + 20);
                __int16 v189 = *(std::__shared_weak_count **)(v188 + 56);
                *(void *)(v188 + 48) = 0;
                *(void *)(v188 + 56) = 0;
                if (v189 && !atomic_fetch_add(&v189->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                  std::__shared_weak_count::__release_weak(v189);
                }
                uint64_t v190 = *((void *)v183 + 8);
                *(void *)(v190 + 48) = v211;
                *(void *)(v190 + 56) = 0;
                uint64_t v191 = *((void *)v183 + 20);
                int v192 = *(std::__shared_weak_count **)(v191 + 56);
                *(void *)(v191 + 48) = 0;
                *(void *)(v191 + 56) = 0;
                if (v192 && !atomic_fetch_add(&v192->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                  std::__shared_weak_count::__release_weak(v192);
                }
                uint64_t v193 = *((void *)v181 + 2);
                BOOL v194 = v210;
                if (!v193) {
                  BOOL v194 = 0;
                }
                if (v194)
                {
                  if (*(unsigned char *)(v193 + 308))
                  {
                    uint64_t v195 = *((void *)v182 + 2);
                    if (v195)
                    {
                      if (*(unsigned char *)(v195 + 308))
                      {
                        uint64_t v196 = *(void *)(v2 + 80);
                        if (!v196) {
                          uint64_t v196 = **(void **)(*(void *)(v2 + 120) + 152);
                        }
                        *(void *)(*((void *)v181 + 12) + 8) = v196;
                        uint64_t v197 = *(void *)(v2 + 80);
                        if (!v197) {
                          uint64_t v197 = **(void **)(*(void *)(v2 + 120) + 152);
                        }
                        *(void *)(*((void *)v182 + 12) + 8) = v197;
                      }
                    }
                  }
                }
                uint64_t v198 = *(unsigned char **)(v59 + 1072);
                *(unsigned char *)(v59 + 648) = v198[268];
                *(unsigned char *)(v59 + 776) = v198[269];
                *(unsigned char *)(v59 + 136) = v198[264];
                *(unsigned char *)(v59 + 264) = v198[265];
                *(unsigned char *)(v59 + 392) = v198[266];
                *(unsigned char *)(v59 + 520) = v198[267];
                *(unsigned char *)(v59 + 904) = v198[270];
                if (!v198[79])
                {
                  if (v198[73])
                  {
                    uint64_t v199 = 4;
                  }
                  else
                  {
                    BOOL v200 = v198[75] == 0;
                    uint64_t v199 = 3;
                    if (!v200) {
                      uint64_t v199 = 4;
                    }
                  }
                  md::RoadBatch::setRenderOrdersForStrokeAndFill(*(unsigned __int8 *)(v2 + 108), v59 + 144, v59 + 272, v59 + (v199 << 7) + 16, v59 + 656, 0, *(_DWORD *)(v59 + 1064), *(unsigned __int8 *)(v59 + 1068), *(void *)(v59 + 1048), *(std::__shared_weak_count **)(v59 + 1056), v2, *(unsigned char *)(v59 + 1144));
                }
                int v201 = *(unsigned __int8 *)(v2 + 57);
                *(_DWORD *)(v59 + 56) = v201;
                *(_DWORD *)(v59 + 184) = v201;
                *(_DWORD *)(v59 + 312) = v201;
                *(_DWORD *)(v59 + 440) = v201;
                *(_DWORD *)(v59 + 568) = v201;
                *(_DWORD *)(v59 + 696) = v201;
                *(_DWORD *)(v59 + 824) = v201;
                v202 = v213;
                if (v213)
                {
                  if (!atomic_fetch_add(&v213->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                    std::__shared_weak_count::__release_weak(v202);
                  }
                }
                goto LABEL_82;
              }
            }
            if (!atomic_fetch_add((atomic_ullong *volatile)v96 + 1, 0xFFFFFFFFFFFFFFFFLL))
            {
              (*(void (**)(char *))(*(void *)v96 + 16))(v96);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v96);
            }
            goto LABEL_133;
          }
          uint64_t v179 = (uint64_t)v92[5];
          uint64_t v180 = (std::__shared_weak_count *)v92[6];
          v212 = (char *)v179;
          v213 = v180;
          if (v180) {
            atomic_fetch_add_explicit(&v180->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_134;
        }
LABEL_82:
        if (++v58 == v209) {
          return;
        }
      }
      unsigned __int8 v61 = atomic_exchange(md::RoadBatch::layout(md::RoadLayoutContext const&)::FAULTED__VectorKit, 1u);
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      unint64_t v62 = (id)GEOGetVectorKitVKDefaultLog_log;
      id v63 = v62;
      if (v61)
      {
        if (!os_log_type_enabled(v62, OS_LOG_TYPE_ERROR)) {
          goto LABEL_93;
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "_style != nullptr";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/RoadFramework.mm";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 610;
        int8x8_t v64 = v63;
        os_log_type_t v65 = OS_LOG_TYPE_ERROR;
      }
      else
      {
        if (!os_log_type_enabled(v62, OS_LOG_TYPE_FAULT)) {
          goto LABEL_93;
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "_style != nullptr";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/RoadFramework.mm";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 610;
        int8x8_t v64 = v63;
        os_log_type_t v65 = OS_LOG_TYPE_FAULT;
      }
      _os_log_impl(&dword_1A1780000, v64, v65, "Null style detected: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
LABEL_93:

      uint64_t v60 = *(void *)(v59 + 1072);
      if (!v60) {
        goto LABEL_82;
      }
      goto LABEL_94;
    }
  }
}

void sub_1A18382B8(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 - 208);
  _Unwind_Resume(a1);
}

void sub_1A18382DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ggl::Flyover::FlyoverPipelineSetup::setState(ggl::PipelineSetup *this, uint64_t a2, std::__shared_weak_count *a3)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a2 && **(void **)(a2 + 40) == *((void *)this + 1))
  {
    uint64_t v7 = *((void *)this + 2);
    if (v7 && v7 != a2) {
      ggl::PipelineSetup::resetData((uint64_t)this);
    }
    if (a3) {
      atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 3);
    *((void *)this + 2) = a2;
    *((void *)this + 3) = a3;
    if (!v6)
    {
LABEL_14:
      if (!a3) {
        return;
      }
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 3);
    *((void *)this + 2) = 0;
    *((void *)this + 3) = 0;
    if (!v6) {
      goto LABEL_14;
    }
  }
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (!a3) {
    return;
  }
LABEL_15:
  if (!atomic_fetch_add(&a3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
    std::__shared_weak_count::__release_weak(a3);
  }
}

void gdc::LoadingStatusTracker::willStartLoadingResources(gdc::LoadingStatusTracker *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  int v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = v3 + 1;
  if (!v3)
  {
    if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
    }
    uint64_t v4 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
    if (os_signpost_enabled(v4))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_signpost_emit_with_name_impl(&dword_1A1780000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LoadingResources", "", v6, 2u);
    }

    uint64_t v5 = *((void *)this + 15);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 48))(v5);
    }
  }
  std::mutex::unlock(v2);
}

void sub_1A1838594(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void md::TiledGEOResourceFetcher::tileLoaderAdditionalInfo(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

unint64_t md::GEOVectorTileResourceFetcher::tileKey(uint64_t a1, void *a2)
{
  id v2 = a2;
  [v2 size];
  [v2 scale];
  unsigned int v3 = [v2 style];
  uint64_t v4 = GEOTileKeyMake();
  if (v3 <= 0x19 && ((1 << v3) & 0x200101C) != 0) {
    unint64_t v5 = 128;
  }
  else {
    unint64_t v5 = (unint64_t)(v3 == 26) << 7;
  }
  unint64_t v6 = v5 | v4 & 0xFFFFFFFFFFFFFF7FLL;

  return v6;
}

void sub_1A183869C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ggl::CullingGrid::intersectedCellsForView(float *a1, double a2)
{
  uint64_t v2 = 0;
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  float v3 = a2;
  float v54 = *a1;
  float v55 = a1[8] * v3;
  float v4 = a1[2];
  float v5 = a1[4];
  float v6 = a1[5];
  float v52 = a1[9] * v3;
  float v53 = a1[1];
  float v7 = a1[14];
  float v50 = a1[13];
  float v51 = a1[12];
  float v49 = a1[10] * v3;
  float v8 = a1[3];
  float v9 = a1[11] * v3;
  float v10 = a1[6];
  float v11 = a1[7];
  float v12 = a1[15];
  do
  {
    float v14 = (float)(int)v2 * 0.25;
    float v15 = v54 * v14;
    float v16 = v8 * v14;
    float v17 = v55 + v51;
    float v18 = (float)(v54 * v14) + (float)(v55 + v51);
    float v19 = v9 + v12;
    float v20 = (float)(v8 * v14) + (float)(v9 + v12);
    if (v18 <= v20)
    {
      if (v18 >= (float)-v20) {
        char v21 = 0;
      }
      else {
        char v21 = 2;
      }
    }
    else
    {
      char v21 = 1;
    }
    float v22 = v53 * v14;
    float v23 = v52 + v50;
    float v24 = (float)(v53 * v14) + (float)(v52 + v50);
    if (v24 <= v20)
    {
      if (v24 < (float)-v20) {
        v21 |= 8u;
      }
    }
    else
    {
      v21 |= 4u;
    }
    float v25 = v4 * v14;
    float v26 = v49 + v7;
    float v27 = v25 + (float)(v49 + v7);
    if (v27 <= v20)
    {
      if (v27 < (float)-v20) {
        v21 |= 0x20u;
      }
    }
    else
    {
      v21 |= 0x10u;
    }
    *(&v56 + v2) = v21;
    float v28 = (float)((float)(v5 * 0.25) + v15) + v17;
    float v29 = (float)((float)(v11 * 0.25) + v16) + v19;
    if (v28 <= v29)
    {
      if (v28 >= (float)-v29) {
        char v30 = 0;
      }
      else {
        char v30 = 2;
      }
    }
    else
    {
      char v30 = 1;
    }
    float v31 = (float)((float)(v6 * 0.25) + v22) + v23;
    if (v31 <= v29)
    {
      if (v31 < (float)-v29) {
        v30 |= 8u;
      }
    }
    else
    {
      v30 |= 4u;
    }
    float v32 = (float)((float)(v10 * 0.25) + v25) + v26;
    if (v32 <= v29)
    {
      if (v32 < (float)-v29) {
        v30 |= 0x20u;
      }
    }
    else
    {
      v30 |= 0x10u;
    }
    *(&v61 + v2) = v30;
    float v33 = (float)((float)(v5 * 0.5) + v15) + v17;
    float v34 = (float)((float)(v11 * 0.5) + v16) + v19;
    if (v33 <= v34)
    {
      if (v33 >= (float)-v34) {
        char v35 = 0;
      }
      else {
        char v35 = 2;
      }
    }
    else
    {
      char v35 = 1;
    }
    float v36 = (float)((float)(v6 * 0.5) + v22) + v23;
    if (v36 <= v34)
    {
      if (v36 < (float)-v34) {
        v35 |= 8u;
      }
    }
    else
    {
      v35 |= 4u;
    }
    float v37 = (float)((float)(v10 * 0.5) + v25) + v26;
    if (v37 <= v34)
    {
      if (v37 < (float)-v34) {
        v35 |= 0x20u;
      }
    }
    else
    {
      v35 |= 0x10u;
    }
    *(&v66 + v2) = v35;
    float v38 = (float)((float)(v5 * 0.75) + v15) + v17;
    float v39 = (float)((float)(v11 * 0.75) + v16) + v19;
    if (v38 <= v39)
    {
      if (v38 >= (float)-v39) {
        char v40 = 0;
      }
      else {
        char v40 = 2;
      }
    }
    else
    {
      char v40 = 1;
    }
    float v41 = (float)((float)(v6 * 0.75) + v22) + v23;
    if (v41 <= v39)
    {
      if (v41 < (float)-v39) {
        v40 |= 8u;
      }
    }
    else
    {
      v40 |= 4u;
    }
    float v42 = (float)((float)(v10 * 0.75) + v25) + v26;
    if (v42 <= v39)
    {
      if (v42 < (float)-v39) {
        v40 |= 0x20u;
      }
    }
    else
    {
      v40 |= 0x10u;
    }
    *(&v71 + v2) = v40;
    float v43 = (float)(v5 + v15) + v17;
    float v44 = (float)(v11 + v16) + v19;
    if (v43 <= v44)
    {
      if (v43 >= (float)-v44) {
        char v13 = 0;
      }
      else {
        char v13 = 2;
      }
    }
    else
    {
      char v13 = 1;
    }
    float v45 = (float)(v6 + v22) + v23;
    if (v45 <= v44)
    {
      if (v45 < (float)-v44) {
        v13 |= 8u;
      }
    }
    else
    {
      v13 |= 4u;
    }
    float v46 = (float)(v10 + v25) + v26;
    if (v46 > v44)
    {
      v13 |= 0x10u;
    }
    else if (v46 < (float)-v44)
    {
      v13 |= 0x20u;
    }
    *(&v76 + v2++) = v13;
  }
  while (v2 != 5);
  unsigned int v47 = (v57 & v56 & v61 & v62) == 0;
  if (((v62 & v61 & v66) & v67) == 0) {
    v47 |= 8u;
  }
  if (((v67 & v66 & v71) & v72) == 0) {
    v47 |= 0x1000u;
  }
  if (((v71 & v76 & v72) & v77) == 0) {
    v47 |= 0x8000u;
  }
  if (((v58 & v57 & v62) & v63) == 0) {
    v47 |= 2u;
  }
  if (((v63 & v62 & v67) & v68) == 0) {
    v47 |= 4u;
  }
  if (((v68 & v67 & v72) & v73) == 0) {
    v47 |= 0x2000u;
  }
  if (((v73 & v72 & v77) & v78) == 0) {
    v47 |= 0x4000u;
  }
  if (((v59 & v58 & v63) & v64) == 0) {
    v47 |= 0x10u;
  }
  if (((v64 & v63 & v68) & v69) == 0) {
    v47 |= 0x80u;
  }
  if (((v69 & v68 & v73) & v74) == 0) {
    v47 |= 0x100u;
  }
  if (((v74 & v73 & v78) & v79) == 0) {
    v47 |= 0x800u;
  }
  if (((v60 & v59 & v64) & v65) == 0) {
    v47 |= 0x20u;
  }
  if (((v65 & v64 & v69) & v70) == 0) {
    v47 |= 0x40u;
  }
  if (((v70 & v69 & v74) & v75) == 0) {
    v47 |= 0x200u;
  }
  if (((v74 & v80 & v75) & v79) != 0) {
    return v47;
  }
  else {
    return v47 | 0x400;
  }
}

uint64_t md::RegionalResourceSetFetcher::tileKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v3 = *(unsigned int **)(a3 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = GEOResourceFilterScaleForScale();
  uint64_t v7 = *MEMORY[0x1E4F641C8];
  return MEMORY[0x1F411C370](v4, v7, v6, v5);
}

uint64_t std::unordered_map<gdc::ResourceKey,unsigned long long,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,unsigned long long>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v6 = *(int8x8_t *)(a1 + 8);
    BOOL v7 = prime >= *(void *)&v6;
    if (prime > *(void *)&v6) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v6 = 0;
    BOOL v7 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v7)
  {
    unint64_t v8 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v6 < 3uLL || (uint8x8_t v9 = (uint8x8_t)vcnt_s8(v6), v9.i16[0] = vaddlv_u8(v9), v9.u32[0] > 1uLL))
    {
      unint64_t v8 = std::__next_prime(v8);
    }
    else
    {
      uint64_t v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2) {
        unint64_t v8 = v10;
      }
    }
    if (prime <= v8) {
      size_t prime = v8;
    }
    if (prime < *(void *)&v6) {
      goto LABEL_17;
    }
  }
LABEL_18:
  float v11 = *(uint64_t **)(a2 + 16);
  if (!v11) {
    return a1;
  }
LABEL_19:
  while (2)
  {
    uint64_t v12 = *((unsigned __int8 *)v11 + 16);
    uint64_t v13 = *((unsigned __int16 *)v11 + 9);
    unint64_t v14 = (v13
         - 0x61C8864680B583EBLL
         + ((v12 - 0x61C8864680B583EBLL) << 6)
         + ((unint64_t)(v12 - 0x61C8864680B583EBLL) >> 2)) ^ (v12 - 0x61C8864680B583EBLL);
    float v15 = (uint64_t *)v11[11];
    unint64_t v16 = ((unint64_t)&v15[8 * v14 - 0xC3910C8D016B07DLL] + (v14 >> 2) - 3) ^ v14;
    unint64_t v17 = *(void *)(a1 + 8);
    if (v17)
    {
      uint8x8_t v18 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
      v18.i16[0] = vaddlv_u8(v18);
      if (v18.u32[0] > 1uLL)
      {
        uint64_t v2 = ((unint64_t)&v15[8 * v14 - 0xC3910C8D016B07DLL] + (v14 >> 2) - 3) ^ v14;
        if (v16 >= v17) {
          uint64_t v2 = v16 % v17;
        }
      }
      else
      {
        uint64_t v2 = v16 & (v17 - 1);
      }
      float v19 = *(uint64_t ****)(*(void *)a1 + 8 * v2);
      if (v19)
      {
        float v20 = *v19;
        if (*v19)
        {
          if (v18.u32[0] < 2uLL)
          {
            while (1)
            {
              float v25 = v20[1];
              if (v25 == (uint64_t *)v16)
              {
                if (*((unsigned __int8 *)v20 + 16) == v12
                  && *((unsigned __int16 *)v20 + 9) == v13
                  && v20[11] == v15)
                {
                  float v26 = v20[3];
                  size_t v27 = (char *)v20[4] - (char *)v26;
                  float v28 = (const void *)v11[3];
                  if (v27 == v11[4] - (void)v28 && !memcmp(v26, v28, v27)) {
                    goto LABEL_47;
                  }
                }
              }
              else if (((unint64_t)v25 & (v17 - 1)) != v2)
              {
                goto LABEL_49;
              }
              float v20 = (uint64_t **)*v20;
              if (!v20) {
                goto LABEL_49;
              }
            }
          }
          do
          {
            unint64_t v21 = (unint64_t)v20[1];
            if (v21 == v16)
            {
              if (*((unsigned __int8 *)v20 + 16) == v12
                && *((unsigned __int16 *)v20 + 9) == v13
                && v20[11] == v15)
              {
                float v22 = v20[3];
                size_t v23 = (char *)v20[4] - (char *)v22;
                float v24 = (const void *)v11[3];
                if (v23 == v11[4] - (void)v24 && !memcmp(v22, v24, v23))
                {
LABEL_47:
                  float v11 = (uint64_t *)*v11;
                  if (!v11) {
                    return a1;
                  }
                  goto LABEL_19;
                }
              }
            }
            else
            {
              if (v21 >= v17) {
                v21 %= v17;
              }
              if (v21 != v2) {
                break;
              }
            }
            float v20 = (uint64_t **)*v20;
          }
          while (v20);
        }
      }
    }
LABEL_49:
    float v29 = operator new(0x78uLL);
    unsigned __int8 v75 = v29;
    *float v29 = 0;
    v29[1] = v16;
    char v30 = (char *)(v29 + 7);
    v29[2] = v11[2];
    v29[3] = v29 + 7;
    v29[4] = v29 + 7;
    v29[5] = v29 + 7;
    v29[6] = 32;
    float v32 = (char *)v11[3];
    float v31 = (char *)v11[4];
    unint64_t v33 = v31 - v32;
    if ((unint64_t)(v31 - v32) < 0x21) {
      goto LABEL_70;
    }
    if (v33 <= 0x40) {
      size_t v34 = 64;
    }
    else {
      size_t v34 = v31 - v32;
    }
    char v30 = (char *)malloc_type_malloc(v34, 0x100004077774924uLL);
    char v35 = (char *)v29[3];
    float v36 = (char *)v29[4];
    if (v35 == v36) {
      goto LABEL_69;
    }
    unint64_t v37 = v36 - v35;
    if ((unint64_t)(v36 - v35) < 8)
    {
      float v38 = v30;
      goto LABEL_68;
    }
    float v38 = v30;
    if ((unint64_t)(v30 - v35) < 0x20) {
      goto LABEL_68;
    }
    if (v37 >= 0x20)
    {
      unint64_t v39 = v37 & 0xFFFFFFFFFFFFFFE0;
      char v40 = (long long *)(v35 + 16);
      float v41 = v30 + 16;
      unint64_t v42 = v37 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v43 = *v40;
        *(v41 - 1) = *(v40 - 1);
        _OWORD *v41 = v43;
        v40 += 2;
        v41 += 2;
        v42 -= 32;
      }
      while (v42);
      if (v37 == v39) {
        goto LABEL_69;
      }
      if ((v37 & 0x18) != 0) {
        goto LABEL_63;
      }
      v35 += v39;
      float v38 = &v30[v39];
      do
      {
LABEL_68:
        char v49 = *v35++;
        *v38++ = v49;
      }
      while (v35 != v36);
      goto LABEL_69;
    }
    unint64_t v39 = 0;
LABEL_63:
    unint64_t v44 = v37 & 0xFFFFFFFFFFFFFFF8;
    float v38 = &v30[v37 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v45 = v39 - (v37 & 0xFFFFFFFFFFFFFFF8);
    float v46 = (uint64_t *)&v35[v39];
    unsigned int v47 = &v30[v39];
    do
    {
      uint64_t v48 = *v46++;
      *(void *)unsigned int v47 = v48;
      v47 += 8;
      v45 += 8;
    }
    while (v45);
    if (v37 != v44)
    {
      v35 += v44;
      goto LABEL_68;
    }
LABEL_69:
    v29[3] = v30;
    v29[4] = v30;
    v29[6] = v34;
LABEL_70:
    if (v32 == v31) {
      goto LABEL_88;
    }
    if (v33 < 8)
    {
      float v51 = v30;
      goto LABEL_86;
    }
    if ((unint64_t)(v30 - v32) < 0x20)
    {
      float v51 = v30;
      goto LABEL_86;
    }
    if (v33 >= 0x20)
    {
      unint64_t v50 = v33 & 0xFFFFFFFFFFFFFFE0;
      float v52 = (long long *)(v32 + 16);
      float v53 = v30 + 16;
      unint64_t v54 = v33 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v55 = *v52;
        *(v53 - 1) = *(v52 - 1);
        *float v53 = v55;
        v52 += 2;
        v53 += 2;
        v54 -= 32;
      }
      while (v54);
      if (v33 == v50) {
        goto LABEL_87;
      }
      if ((v33 & 0x18) != 0) {
        goto LABEL_81;
      }
      v32 += v50;
      float v51 = &v30[v50];
      do
      {
LABEL_86:
        char v61 = *v32++;
        *v51++ = v61;
      }
      while (v32 != v31);
      goto LABEL_87;
    }
    unint64_t v50 = 0;
LABEL_81:
    unint64_t v56 = v33 & 0xFFFFFFFFFFFFFFF8;
    float v51 = &v30[v33 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v57 = v50 - (v33 & 0xFFFFFFFFFFFFFFF8);
    char v58 = (uint64_t *)&v32[v50];
    char v59 = &v30[v50];
    do
    {
      uint64_t v60 = *v58++;
      *(void *)char v59 = v60;
      v59 += 8;
      v57 += 8;
    }
    while (v57);
    if (v33 != v56)
    {
      v32 += v56;
      goto LABEL_86;
    }
LABEL_87:
    char v30 = (char *)v29[4];
LABEL_88:
    v29[4] = &v30[v33];
    v29[11] = v11[11];
    *((_OWORD *)v29 + 6) = *((_OWORD *)v11 + 6);
    v29[14] = v11[14];
    float v62 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
    float v63 = *(float *)(a1 + 32);
    if (!v17 || (float)(v63 * (float)v17) < v62)
    {
      BOOL v64 = (v17 & (v17 - 1)) != 0;
      if (v17 < 3) {
        BOOL v64 = 1;
      }
      unint64_t v65 = v64 | (2 * v17);
      unint64_t v66 = vcvtps_u32_f32(v62 / v63);
      if (v65 <= v66) {
        size_t v67 = v66;
      }
      else {
        size_t v67 = v65;
      }
      if (v67 == 1)
      {
        size_t v67 = 2;
      }
      else if ((v67 & (v67 - 1)) != 0)
      {
        size_t v67 = std::__next_prime(v67);
      }
      int8x8_t v68 = *(int8x8_t *)(a1 + 8);
      if (v67 > *(void *)&v68) {
        goto LABEL_100;
      }
      if (v67 < *(void *)&v68)
      {
        unint64_t v69 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (*(void *)&v68 < 3uLL || (uint8x8_t v70 = (uint8x8_t)vcnt_s8(v68), v70.i16[0] = vaddlv_u8(v70), v70.u32[0] > 1uLL))
        {
          unint64_t v69 = std::__next_prime(v69);
        }
        else
        {
          uint64_t v71 = 1 << -(char)__clz(v69 - 1);
          if (v69 >= 2) {
            unint64_t v69 = v71;
          }
        }
        if (v67 <= v69) {
          size_t v67 = v69;
        }
        if (v67 < *(void *)&v68) {
LABEL_100:
        }
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, v67);
      }
      unint64_t v17 = *(void *)(a1 + 8);
      if ((v17 & (v17 - 1)) != 0)
      {
        if (v16 >= v17) {
          uint64_t v2 = v16 % v17;
        }
        else {
          uint64_t v2 = v16;
        }
      }
      else
      {
        uint64_t v2 = (v17 - 1) & v16;
      }
    }
    unsigned __int8 v72 = *(void **)(*(void *)a1 + 8 * v2);
    if (v72)
    {
      *unsigned __int8 v75 = *v72;
      *unsigned __int8 v72 = v75;
    }
    else
    {
      *unsigned __int8 v75 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v75;
      *(void *)(*(void *)a1 + 8 * v2) = a1 + 16;
      if (*v75)
      {
        unint64_t v73 = *(void *)(*v75 + 8);
        if ((v17 & (v17 - 1)) != 0)
        {
          if (v73 >= v17) {
            v73 %= v17;
          }
        }
        else
        {
          v73 &= v17 - 1;
        }
        *(void *)(*(void *)a1 + 8 * v73) = v75;
      }
    }
    ++*(void *)(a1 + 24);
    float v11 = (uint64_t *)*v11;
    if (v11) {
      continue;
    }
    return a1;
  }
}

void sub_1A1839340(_Unwind_Exception *a1)
{
  std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void md::LabelFeature::~LabelFeature(md::LabelFeature *this)
{
  *(void *)this = &unk_1EF5313F8;
  uint64_t v2 = *((void *)this + 20);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 21);
    uint64_t v4 = *((void *)this + 20);
    if (v3 != v2)
    {
      do
      {
        v3 -= 56;
        geo::StdAllocator<md::TextDataEntry,mdm::Allocator>::destroy(v3);
      }
      while (v3 != v2);
      uint64_t v4 = *((void *)this + 20);
    }
    *((void *)this + 21) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 23) + 40))(*((void *)this + 23), v4, *((void *)this + 22) - v4);
  }
  uint64_t v5 = *((void *)this + 12);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 13);
    uint64_t v7 = *((void *)this + 12);
    if (v6 != v5)
    {
      do
      {
        unint64_t v8 = *(std::__shared_weak_count **)(v6 - 8);
        if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v8->__on_zero_shared)(v8, v7);
          std::__shared_weak_count::__release_weak(v8);
        }
        v6 -= 16;
      }
      while (v6 != v5);
      uint64_t v7 = *((void *)this + 12);
    }
    *((void *)this + 13) = v5;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 15) + 40))(*((void *)this + 15), v7, *((void *)this + 14) - v7);
  }
  uint8x8_t v9 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

void md::Label::Label(uint64_t a1, uint64_t a2, void *a3, _DWORD *a4)
{
  *(void *)a1 = &unk_1EF554058;
  *(void *)(a1 + 8) = *a3;
  uint64_t v6 = a3[1];
  *(void *)(a1 + 16) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 31) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF550AF0;
  *(void *)(a1 + 40) = &unk_1EF550B48;
  *(_DWORD *)(a1 + 48) = *a4;
  *(_DWORD *)(a1 + 60) = 0x7FFFFFFF;
  *(void *)(a1 + 52) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = (*(uint64_t (**)(void, uint64_t))(*(void *)*a3 + 136))(*a3, a1 + 48);
  *(void *)(a1 + 160) = v7;
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a3 + 144))(*a3, a1 + 48);
  LOBYTE(v10) = 0;
  *(void *)(a1 + 168) = v8;
  *(void *)(a1 + 176) = v9;
  if (*(unsigned char *)(a1 + 164))
  {
    if ((v9 & 0xFF00000000) != 0) {
      unsigned int v10 = COERCE_UNSIGNED_INT(-(float)((float)(*(float *)(a1 + 156) * *(float *)&v8)
    }
                                       - (float)(*(float *)(a1 + 152) * *((float *)&v8 + 1)))) >> 31;
  }
  *(unsigned char *)(a1 + 184) = v10;
  *(unsigned char *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 196) = 0;
  *(float *)(a1 + 200) = (*(float (**)(void))(*(void *)*a3 + 296))();
  *(_DWORD *)(a1 + 204) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  (*(void (**)(void, uint64_t))(*(void *)*a3 + 152))(*a3, a1 + 48);
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 224) = _Q0;
  *(unsigned char *)(a1 + 252) = 0;
  *(void *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 0x1000000;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 311) = 0;
  *(unsigned char *)(a1 + 315) = 9;
  *(_DWORD *)(a1 + 316) = 0;
  *(_WORD *)(a1 + 320) = 9;
  operator new();
}

void sub_1A183AA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  unint64_t v21 = v17;
  if (a13 && !atomic_fetch_add(&a13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
    std::__shared_weak_count::__release_weak(a13);
  }
  if (a16 && !atomic_fetch_add(&a16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
    std::__shared_weak_count::__release_weak(a16);
  }
  uint64_t v23 = v16[154];
  v16[154] = 0;
  if (v23)
  {
    float v24 = *(std::__shared_weak_count **)(v23 + 8);
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    MEMORY[0x1A6239270](v23, 0x20C40A4A59CD2);
  }
  float v25 = (md::LabelAnimator **)(v16 + 148);
  float v26 = (std::__shared_weak_count *)v16[150];
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  size_t v27 = *v25;
  *float v25 = 0;
  if (v27)
  {
    md::LabelAnimator::~LabelAnimator(v27);
    MEMORY[0x1A6239270]();
  }
  md::Label::{unnamed type#4}::~Label(v18);
  float v28 = (std::__shared_weak_count *)v16[89];
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  float v29 = (std::__shared_weak_count *)v16[87];
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  uint64_t v30 = v16[85];
  v16[85] = 0;
  if (v30) {
    MEMORY[0x1A6239270](v30, 0x1000C40C179455ELL);
  }
  uint64_t v31 = v16[84];
  v16[84] = 0;
  if (v31) {
    MEMORY[0x1A6239270](v31, 0x1000C4015B1EB14);
  }
  float v32 = (std::__shared_weak_count *)v16[58];
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  unint64_t v33 = (std::__shared_weak_count *)v16[48];
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  uint64_t v34 = v16[43];
  v16[43] = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  uint64_t v35 = *v21;
  uint64_t *v21 = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  uint64_t v36 = v16[41];
  v16[41] = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  uint64_t v37 = v16[38];
  v16[38] = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  uint64_t v38 = v16[37];
  v16[37] = 0;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  uint64_t v39 = v16[35];
  v16[35] = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
  uint64_t v40 = v16[34];
  v16[34] = 0;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  uint64_t v41 = *v19;
  *float v19 = 0;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  unint64_t v42 = (std::__shared_weak_count *)v16[11];
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  long long v43 = (std::__shared_weak_count *)v16[9];
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
  void *v16 = v20;
  unint64_t v44 = (std::__shared_weak_count *)v16[2];
  if (v44)
  {
    if (!atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t md::PointLabelFeature::externalPointFeature(md::PointLabelFeature *this)
{
  return *((void *)this + 63);
}

void md::LabelFeature::updateTextVector(md::LabelFeature *this)
{
  uint64_t v2 = (unsigned __int8 **)((char *)this + 160);
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)this + 21) - *((void *)this + 20)) >> 3);
  if (v3 == (*(uint64_t (**)(md::LabelFeature *))(*(void *)this + 488))(this)) {
    return;
  }
  (*(void (**)(uint64_t *__return_ptr, md::LabelFeature *, void))(*(void *)this + 584))(&v29, this, 0);
  if (!v29) {
    goto LABEL_11;
  }
  unint64_t v4 = *(unsigned __int8 *)(v29 + 33);
  if (!*(unsigned char *)(v29 + 33)) {
    goto LABEL_11;
  }
  uint64_t v5 = *(_DWORD **)v29;
  if (**(_DWORD **)v29 != 4)
  {
    unint64_t v6 = 0;
    uint64_t v8 = v5 + 2;
    while (v4 - 1 != v6)
    {
      int v9 = *v8;
      v8 += 2;
      ++v6;
      if (v9 == 4)
      {
        if (v6 < v4) {
          goto LABEL_6;
        }
        break;
      }
    }
LABEL_11:
    LOWORD(v7) = -1;
    goto LABEL_12;
  }
  unint64_t v6 = 0;
LABEL_6:
  int v7 = v5[2 * v6 + 1];
LABEL_12:
  unint64_t v10 = (*(uint64_t (**)(md::LabelFeature *))(*(void *)this + 488))(this);
  unint64_t v11 = v10;
  uint64_t v12 = *((void *)this + 20);
  if (0x6DB6DB6DB6DB6DB7 * ((*((void *)this + 22) - v12) >> 3) < v10)
  {
    if (v10 >= 0x492492492492493) {
      abort();
    }
    uint64_t v13 = *((void *)this + 21);
    uint64_t v14 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**((void **)this + 23) + 16))(*((void *)this + 23), 56 * v10, 8);
    uint64_t v15 = v14 + v13 - v12;
    uint64_t v16 = v14 + 56 * v11;
    uint64_t v17 = *((void *)this + 20);
    uint64_t v18 = *((void *)this + 21);
    if (v18 == v17)
    {
      *((void *)this + 20) = v15;
      *((void *)this + 21) = v15;
      uint64_t v23 = *((void *)this + 22);
      *((void *)this + 22) = v16;
      if (!v18) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v19 = 0;
      do
      {
        uint64_t v20 = v15 + v19;
        uint64_t v21 = v18 + v19;
        *(unsigned char *)(v20 - 56) = *(unsigned char *)(v18 + v19 - 56);
        *(_OWORD *)(v20 - 48) = *(_OWORD *)(v18 + v19 - 48);
        *(void *)(v21 - 48) = 0;
        *(void *)(v21 - 40) = 0;
        *(void *)(v20 - 32) = 0;
        *(void *)(v20 - 24) = 0;
        *(void *)(v20 - 16) = 0;
        *(void *)(v20 - 8) = *(void *)(v18 + v19 - 8);
        *(_OWORD *)(v20 - 32) = *(_OWORD *)(v18 + v19 - 32);
        *(void *)(v20 - 16) = *(void *)(v18 + v19 - 16);
        *(void *)(v21 - 32) = 0;
        *(void *)(v21 - 24) = 0;
        *(void *)(v21 - 16) = 0;
        v19 -= 56;
      }
      while (v18 + v19 != v17);
      uint64_t v18 = *((void *)this + 20);
      uint64_t v22 = *((void *)this + 21);
      *((void *)this + 20) = v15 + v19;
      *((void *)this + 21) = v15;
      uint64_t v23 = *((void *)this + 22);
      *((void *)this + 22) = v16;
      while (v22 != v18)
      {
        v22 -= 56;
        geo::StdAllocator<md::TextDataEntry,mdm::Allocator>::destroy(v22);
      }
      if (!v18) {
        goto LABEL_21;
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 23) + 40))(*((void *)this + 23), v18, v23 - v18);
  }
LABEL_21:
  unint64_t v24 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)this + 21) - *((void *)this + 20)) >> 3);
  int v25 = (unsigned __int16)v7;
  while (v24 < (*(uint64_t (**)(md::LabelFeature *))(*(void *)this + 488))(this))
  {
    float v26 = (long long *)(*(uint64_t (**)(md::LabelFeature *, unint64_t))(*(void *)this + 472))(this, v24);
    size_t v27 = (long long *)(*(uint64_t (**)(md::LabelFeature *, unint64_t))(*(void *)this + 480))(this, v24);
    md::TextDataStore::addString(v2, v26, v27, v25);
    ++v24;
  }
  float v28 = v30;
  if (v30)
  {
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_1A183B3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t md::PointLabelFeature::publicNameCount(md::PointLabelFeature *this)
{
  return (uint64_t)(*((void *)this + 69) - *((void *)this + 68)) >> 6;
}

void std::__shared_ptr_emplace<FeatureStyleAttributes>::__on_zero_shared(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  else
  {
    free(*(void **)(a1 + 24));
    *(void *)(a1 + 24) = 0;
    *(unsigned char *)(a1 + 57) = 0;
  }
  uint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    free(v3);
    *(void *)(a1 + 48) = 0;
    *(unsigned char *)(a1 + 56) = 0;
  }
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

{
  FeatureStyleAttributes::~FeatureStyleAttributes((FeatureStyleAttributes *)(a1 + 24));
}

void md::PointLabelFeature::styleAttributes(void *a1@<X0>, void ***a2@<X8>)
{
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  {
    operator new();
  }
  uint64_t v25 = mdm::Allocator::instance(void)::alloc;
  (*(void (**)(void *, uint64_t *))(*a1 + 544))(a1, &v22);
  uint64_t v4 = v22;
  if (v22 == v23)
  {
    uint64_t v21 = a1[83];
    *a2 = (void **)a1[82];
    a2[1] = (void **)v21;
    if (v21) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v5 = (const FeatureStyleAttributes *)a1[82];
    unint64_t v6 = (char *)operator new(0x40uLL);
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = 0;
    *(void *)unint64_t v6 = &unk_1EF57F680;
    int v7 = (void **)(v6 + 24);
    FeatureStyleAttributes::FeatureStyleAttributes((FeatureStyleAttributes *)(v6 + 24), v5);
    uint64_t v8 = v22;
    if (((v23 - v22) & 0x7FFFFFFF8) != 0)
    {
      uint64_t v9 = 0;
      char v10 = 0;
      uint64_t v11 = ((unint64_t)(v23 - v22) >> 3);
      unsigned __int8 v12 = v6[57];
      while (1)
      {
        size_t v13 = v12;
        uint64_t v14 = *v7;
        if (v12) {
          break;
        }
LABEL_5:
        v14[v13] = *(void *)(v8 + 8 * v9);
        unsigned __int8 v12 = v6[57] + 1;
        v6[57] = v12;
        ++v9;
        char v10 = 1;
        if (v9 == v11)
        {
          uint64_t v14 = *v7;
          size_t v13 = v12;
LABEL_24:
          qsort(v14, v13, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
          goto LABEL_25;
        }
      }
      if (v12 > 0x1Fu)
      {
        do
        {
          uint64_t v18 = 0;
          uint64_t v19 = (int *)v14;
          while (1)
          {
            int v20 = *v19;
            v19 += 2;
            if (v20 == *(_DWORD *)(v8 + 8 * v9)) {
              break;
            }
            if (v13 == ++v18) {
              goto LABEL_16;
            }
          }
          HIDWORD(v14[v18]) = *(_DWORD *)(v8 + 8 * v9 + 4);
LABEL_16:
          ++v9;
        }
        while (v9 != v11);
      }
      else
      {
        do
        {
          uint64_t v15 = 0;
          uint64_t v16 = (int *)v14;
          while (1)
          {
            int v17 = *v16;
            v16 += 2;
            if (v17 == *(_DWORD *)(v8 + 8 * v9)) {
              break;
            }
            if (v13 == ++v15) {
              goto LABEL_5;
            }
          }
          HIDWORD(v14[v15]) = *(_DWORD *)(v8 + 8 * v9++ + 4);
        }
        while (v9 != v11);
      }
      if (v10) {
        goto LABEL_24;
      }
    }
LABEL_25:
    *a2 = v7;
    a2[1] = (void **)v6;
    uint64_t v4 = v22;
  }
  if (v4)
  {
    uint64_t v23 = v4;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v25 + 40))(v25, v4, v24 - v4);
  }
}

void sub_1A183B7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a11)
  {
    a12 = a11;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a14 + 40))(a14, a11, a13 - a11);
  }
  _Unwind_Resume(a1);
}

void FeatureStyleAttributes::FeatureStyleAttributes(FeatureStyleAttributes *this, const FeatureStyleAttributes *a2)
{
  *(_DWORD *)((char *)this + 31) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  uint64_t v4 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
  *(void *)this = v4;
  if (v4) {
    memcpy(v4, *(const void **)a2, 8 * *((unsigned __int8 *)a2 + 33));
  }
  *(_WORD *)((char *)this + 33) = *(_WORD *)((char *)a2 + 33);
  *((unsigned char *)this + 32) = 0;
  uint64_t v5 = *((unsigned __int8 *)a2 + 32);
  if (*((unsigned char *)a2 + 32))
  {
    unint64_t v6 = (const void *)*((void *)a2 + 3);
    int v7 = malloc_type_malloc(12 * v5, 0x10000403E1C8BA9uLL);
    *((void *)this + 3) = v7;
    if (v7)
    {
      *((unsigned char *)this + 32) = v5;
      memcpy(v7, v6, 12 * v5);
    }
  }
}

{
  void *v4;
  uint64_t v5;
  const void *v6;
  void *v7;

  *(_DWORD *)((char *)this + 31) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  uint64_t v4 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
  *(void *)this = v4;
  if (v4) {
    memcpy(v4, *(const void **)a2, 8 * *((unsigned __int8 *)a2 + 33));
  }
  *(_WORD *)((char *)this + 33) = *(_WORD *)((char *)a2 + 33);
  *((unsigned char *)this + 32) = 0;
  uint64_t v5 = *((unsigned __int8 *)a2 + 32);
  if (*((unsigned char *)a2 + 32))
  {
    unint64_t v6 = (const void *)*((void *)a2 + 3);
    int v7 = malloc_type_malloc(12 * v5, 0x10000403E1C8BA9uLL);
    *((void *)this + 3) = v7;
    if (v7)
    {
      *((unsigned char *)this + 32) = v5;
      memcpy(v7, v6, 12 * v5);
    }
  }
}

void sub_1A183B8F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1A183BA00(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::PointLabelFeature::populateAdditionalStyleAttributes(unsigned __int8 *a1, uint64_t a2)
{
  md::PointLabelFeatureBase::populateAdditionalStyleAttributes((uint64_t)a1, (uint64_t *)a2);
  uint64_t result = (*(uint64_t (**)(unsigned __int8 *))(*(void *)a1 + 360))(a1);
  int v5 = result;
  unint64_t v6 = *(uint64_t **)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  if ((unint64_t)v6 < v7)
  {
    if (v6)
    {
      uint64_t v8 = 65601;
      if (result) {
        uint64_t v8 = 0x100010041;
      }
      uint64_t *v6 = v8;
    }
    uint64_t v9 = v6 + 1;
    goto LABEL_31;
  }
  uint64_t v10 = ((uint64_t)v6 - *(void *)a2) >> 3;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61) {
    goto LABEL_58;
  }
  uint64_t v12 = v7 - *(void *)a2;
  if (v12 >> 2 > v11) {
    unint64_t v11 = v12 >> 2;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
  }
  if (v11)
  {
    uint64_t v13 = 8 * v11;
    uint64_t result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a2 + 24) + 16))(*(void *)(a2 + 24), 8 * v11, 4);
    uint64_t v14 = (uint64_t *)(result + 8 * v10);
    unint64_t v11 = result + v13;
    if (result)
    {
      uint64_t v15 = 65601;
      if (v5) {
        uint64_t v15 = 0x100010041;
      }
      *uint64_t v14 = v15;
    }
  }
  else
  {
    uint64_t v14 = (uint64_t *)(8 * v10);
  }
  uint64_t v9 = v14 + 1;
  uint64_t v17 = *(void *)a2;
  uint64_t v16 = *(void *)(a2 + 8);
  if (v16 != *(void *)a2)
  {
    unint64_t v18 = v16 - *(void *)a2 - 8;
    if (v18 < 0x38)
    {
      uint64_t v20 = *(void *)(a2 + 8);
    }
    else if ((unint64_t)(v16 - (void)v14) < 0x20)
    {
      uint64_t v20 = *(void *)(a2 + 8);
    }
    else
    {
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = v16 - 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v21 = v14 - 2;
      uint64_t v22 = (long long *)(v16 - 16);
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *v22;
        *((_OWORD *)v21 - 1) = *(v22 - 1);
        *(_OWORD *)uint64_t v21 = v24;
        v21 -= 4;
        v22 -= 2;
        v23 -= 4;
      }
      while (v23);
      v14 -= v19 & 0x3FFFFFFFFFFFFFFCLL;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_28;
      }
    }
    do
    {
      uint64_t v25 = *(void *)(v20 - 8);
      v20 -= 8;
      *--uint64_t v14 = v25;
    }
    while (v20 != v17);
LABEL_28:
    uint64_t v16 = *(void *)a2;
  }
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = v9;
  uint64_t v26 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = v11;
  if (v16) {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24), v16, v26 - v16);
  }
LABEL_31:
  *(void *)(a2 + 8) = v9;
  if (!a1[655]) {
    return result;
  }
  uint64_t v27 = a1[654];
  unint64_t v28 = *(void *)(a2 + 16);
  if ((unint64_t)v9 >= v28)
  {
    uint64_t v30 = ((uint64_t)v9 - *(void *)a2) >> 3;
    if (!((unint64_t)(v30 + 1) >> 61))
    {
      uint64_t v31 = v28 - *(void *)a2;
      uint64_t v32 = v31 >> 2;
      if (v31 >> 2 <= (unint64_t)(v30 + 1)) {
        uint64_t v32 = v30 + 1;
      }
      BOOL v33 = (unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8;
      uint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v33) {
        uint64_t v34 = v32;
      }
      if (v34)
      {
        uint64_t v35 = 8 * v34;
        uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 24) + 16))(*(void *)(a2 + 24), 8 * v34, 4);
        uint64_t v36 = (uint64_t *)(result + 8 * v30);
        uint64_t v34 = result + v35;
        if (result) {
          *uint64_t v36 = (v27 << 32) | 0x1007D;
        }
      }
      else
      {
        uint64_t v36 = (uint64_t *)(8 * v30);
      }
      uint64_t v29 = v36 + 1;
      uint64_t v38 = *(void *)a2;
      uint64_t v37 = *(void *)(a2 + 8);
      if (v37 == *(void *)a2) {
        goto LABEL_54;
      }
      unint64_t v39 = v37 - *(void *)a2 - 8;
      if (v39 < 0x38)
      {
        uint64_t v41 = *(void *)(a2 + 8);
      }
      else if ((unint64_t)(v37 - (void)v36) < 0x20)
      {
        uint64_t v41 = *(void *)(a2 + 8);
      }
      else
      {
        uint64_t v40 = (v39 >> 3) + 1;
        uint64_t v41 = v37 - 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v42 = v36 - 2;
        long long v43 = (long long *)(v37 - 16);
        uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v45 = *v43;
          *((_OWORD *)v42 - 1) = *(v43 - 1);
          *(_OWORD *)unint64_t v42 = v45;
          v42 -= 4;
          v43 -= 2;
          v44 -= 4;
        }
        while (v44);
        v36 -= v40 & 0x3FFFFFFFFFFFFFFCLL;
        if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_53;
        }
      }
      do
      {
        uint64_t v46 = *(void *)(v41 - 8);
        v41 -= 8;
        *--uint64_t v36 = v46;
      }
      while (v41 != v38);
LABEL_53:
      uint64_t v37 = *(void *)a2;
LABEL_54:
      *(void *)a2 = v36;
      *(void *)(a2 + 8) = v29;
      uint64_t v47 = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = v34;
      if (v37) {
        uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24), v37, v47 - v37);
      }
      goto LABEL_56;
    }
LABEL_58:
    abort();
  }
  *uint64_t v9 = (v27 << 32) | 0x1007D;
  uint64_t v29 = v9 + 1;
LABEL_56:
  *(void *)(a2 + 8) = v29;
  return result;
}

uint64_t md::PointLabelFeatureBase::populateAdditionalStyleAttributes(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = (unsigned char *)result;
  if (!*(unsigned char *)(result + 241))
  {
    uint64_t v4 = *(unsigned __int8 *)(result + 140);
    int v5 = (void *)a2[1];
    unint64_t v6 = a2[2];
    if ((unint64_t)v5 < v6)
    {
      if (v5) {
        *int v5 = ((v4 << 32) | 0x10022) + 3;
      }
      unint64_t v7 = v5 + 1;
      goto LABEL_28;
    }
    uint64_t v8 = ((uint64_t)v5 - *a2) >> 3;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      goto LABEL_164;
    }
    uint64_t v10 = v6 - *a2;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    if (v9)
    {
      uint64_t v11 = 8 * v9;
      uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2[3] + 16))(a2[3], 8 * v9, 4);
      uint64_t v12 = (void *)(result + 8 * v8);
      unint64_t v9 = result + v11;
      if (result) {
        void *v12 = ((v4 << 32) | 0x10022) + 3;
      }
    }
    else
    {
      uint64_t v12 = (void *)(8 * v8);
    }
    unint64_t v7 = v12 + 1;
    uint64_t v14 = *a2;
    uint64_t v13 = a2[1];
    if (v13 == *a2)
    {
LABEL_26:
      *a2 = (uint64_t)v12;
      a2[1] = (uint64_t)v7;
      uint64_t v23 = a2[2];
      a2[2] = v9;
      if (v13) {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2[3] + 40))(a2[3], v13, v23 - v13);
      }
LABEL_28:
      a2[1] = (uint64_t)v7;
      if (!v3[141]) {
        goto LABEL_54;
      }
      unint64_t v24 = a2[2];
      if ((unint64_t)v7 < v24)
      {
        void *v7 = 0x100010056;
        uint64_t v25 = v7 + 1;
LABEL_53:
        a2[1] = (uint64_t)v25;
        goto LABEL_54;
      }
      uint64_t v26 = ((uint64_t)v7 - *a2) >> 3;
      if ((unint64_t)(v26 + 1) >> 61) {
        goto LABEL_164;
      }
      uint64_t v27 = v24 - *a2;
      uint64_t v28 = v27 >> 2;
      if (v27 >> 2 <= (unint64_t)(v26 + 1)) {
        uint64_t v28 = v26 + 1;
      }
      BOOL v29 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8;
      uint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v29) {
        uint64_t v30 = v28;
      }
      if (v30)
      {
        uint64_t v31 = 8 * v30;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2[3] + 16))(a2[3], 8 * v30, 4);
        uint64_t v32 = (void *)(result + 8 * v26);
        uint64_t v30 = result + v31;
        if (result) {
          *uint64_t v32 = 0x100010056;
        }
      }
      else
      {
        uint64_t v32 = (void *)(8 * v26);
      }
      uint64_t v25 = v32 + 1;
      uint64_t v34 = *a2;
      uint64_t v33 = a2[1];
      if (v33 == *a2)
      {
LABEL_51:
        *a2 = (uint64_t)v32;
        a2[1] = (uint64_t)v25;
        uint64_t v43 = a2[2];
        a2[2] = v30;
        if (v33) {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2[3] + 40))(a2[3], v33, v43 - v33);
        }
        goto LABEL_53;
      }
      unint64_t v35 = v33 - *a2 - 8;
      if (v35 < 0x38)
      {
        uint64_t v37 = a2[1];
      }
      else if ((unint64_t)(v33 - (void)v32) < 0x20)
      {
        uint64_t v37 = a2[1];
      }
      else
      {
        uint64_t v36 = (v35 >> 3) + 1;
        uint64_t v37 = v33 - 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v38 = v32 - 2;
        unint64_t v39 = (long long *)(v33 - 16);
        uint64_t v40 = v36 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v41 = *v39;
          *(v38 - 1) = *(v39 - 1);
          _OWORD *v38 = v41;
          v38 -= 2;
          v39 -= 2;
          v40 -= 4;
        }
        while (v40);
        v32 -= v36 & 0x3FFFFFFFFFFFFFFCLL;
        if (v36 == (v36 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_50;
        }
      }
      do
      {
        uint64_t v42 = *(void *)(v37 - 8);
        v37 -= 8;
        *--uint64_t v32 = v42;
      }
      while (v37 != v34);
LABEL_50:
      uint64_t v33 = *a2;
      goto LABEL_51;
    }
    unint64_t v15 = v13 - *a2 - 8;
    if (v15 < 0x38)
    {
      uint64_t v17 = a2[1];
    }
    else if ((unint64_t)(v13 - (void)v12) < 0x20)
    {
      uint64_t v17 = a2[1];
    }
    else
    {
      uint64_t v16 = (v15 >> 3) + 1;
      uint64_t v17 = v13 - 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v18 = v12 - 2;
      uint64_t v19 = (long long *)(v13 - 16);
      uint64_t v20 = v16 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v21 = *v19;
        *(v18 - 1) = *(v19 - 1);
        _OWORD *v18 = v21;
        v18 -= 2;
        v19 -= 2;
        v20 -= 4;
      }
      while (v20);
      v12 -= v16 & 0x3FFFFFFFFFFFFFFCLL;
      if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_25;
      }
    }
    do
    {
      uint64_t v22 = *(void *)(v17 - 8);
      v17 -= 8;
      *--uint64_t v12 = v22;
    }
    while (v17 != v14);
LABEL_25:
    uint64_t v13 = *a2;
    goto LABEL_26;
  }
LABEL_54:
  if (!v3[240])
  {
    uint64_t v44 = (void *)a2[1];
    unint64_t v45 = a2[2];
    if ((unint64_t)v44 < v45)
    {
      if (v44) {
        *uint64_t v44 = 65572;
      }
      uint64_t v46 = v44 + 1;
      goto LABEL_83;
    }
    uint64_t v47 = ((uint64_t)v44 - *a2) >> 3;
    unint64_t v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 61) {
      goto LABEL_164;
    }
    uint64_t v49 = v45 - *a2;
    if (v49 >> 2 > v48) {
      unint64_t v48 = v49 >> 2;
    }
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
    }
    if (v48)
    {
      uint64_t v50 = 8 * v48;
      uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2[3] + 16))(a2[3], 8 * v48, 4);
      float v51 = (void *)(result + 8 * v47);
      unint64_t v48 = result + v50;
      if (result) {
        *float v51 = 65572;
      }
    }
    else
    {
      float v51 = (void *)(8 * v47);
    }
    uint64_t v46 = v51 + 1;
    uint64_t v53 = *a2;
    uint64_t v52 = a2[1];
    if (v52 == *a2)
    {
LABEL_81:
      *a2 = (uint64_t)v51;
      a2[1] = (uint64_t)v46;
      uint64_t v62 = a2[2];
      a2[2] = v48;
      if (v52) {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2[3] + 40))(a2[3], v52, v62 - v52);
      }
LABEL_83:
      a2[1] = (uint64_t)v46;
      unint64_t v63 = a2[2];
      if ((unint64_t)v46 < v63)
      {
        void *v46 = 65570;
        BOOL v64 = v46 + 1;
        goto LABEL_107;
      }
      uint64_t v65 = ((uint64_t)v46 - *a2) >> 3;
      if ((unint64_t)(v65 + 1) >> 61) {
        goto LABEL_164;
      }
      uint64_t v66 = v63 - *a2;
      uint64_t v67 = v66 >> 2;
      if (v66 >> 2 <= (unint64_t)(v65 + 1)) {
        uint64_t v67 = v65 + 1;
      }
      BOOL v29 = (unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8;
      uint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v29) {
        uint64_t v68 = v67;
      }
      if (v68)
      {
        uint64_t v69 = 8 * v68;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2[3] + 16))(a2[3], 8 * v68, 4);
        uint8x8_t v70 = (void *)(result + 8 * v65);
        uint64_t v68 = result + v69;
        if (result) {
          void *v70 = 65570;
        }
      }
      else
      {
        uint8x8_t v70 = (void *)(8 * v65);
      }
      BOOL v64 = v70 + 1;
      uint64_t v72 = *a2;
      uint64_t v71 = a2[1];
      if (v71 == *a2)
      {
LABEL_105:
        *a2 = (uint64_t)v70;
        a2[1] = (uint64_t)v64;
        uint64_t v81 = a2[2];
        a2[2] = v68;
        if (v71) {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2[3] + 40))(a2[3], v71, v81 - v71);
        }
LABEL_107:
        a2[1] = (uint64_t)v64;
        if (!v3[142]) {
          goto LABEL_135;
        }
LABEL_108:
        int8x16_t v82 = (void *)a2[1];
        unint64_t v83 = a2[2];
        if ((unint64_t)v82 < v83)
        {
          if (v82) {
            *int8x16_t v82 = 0x100010043;
          }
          int8x16_t v84 = v82 + 1;
LABEL_134:
          a2[1] = (uint64_t)v84;
          goto LABEL_135;
        }
        uint64_t v85 = ((uint64_t)v82 - *a2) >> 3;
        unint64_t v86 = v85 + 1;
        if ((unint64_t)(v85 + 1) >> 61) {
          goto LABEL_164;
        }
        uint64_t v87 = v83 - *a2;
        if (v87 >> 2 > v86) {
          unint64_t v86 = v87 >> 2;
        }
        if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
        }
        if (v86)
        {
          uint64_t v88 = 8 * v86;
          uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2[3] + 16))(a2[3], 8 * v86, 4);
          unint64_t v89 = (void *)(result + 8 * v85);
          unint64_t v86 = result + v88;
          if (result) {
            *unint64_t v89 = 0x100010043;
          }
        }
        else
        {
          unint64_t v89 = (void *)(8 * v85);
        }
        int8x16_t v84 = v89 + 1;
        uint64_t v91 = *a2;
        uint64_t v90 = a2[1];
        if (v90 == *a2)
        {
LABEL_132:
          *a2 = (uint64_t)v89;
          a2[1] = (uint64_t)v84;
          uint64_t v100 = a2[2];
          a2[2] = v86;
          if (v90) {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2[3] + 40))(a2[3], v90, v100 - v90);
          }
          goto LABEL_134;
        }
        unint64_t v92 = v90 - *a2 - 8;
        if (v92 < 0x38)
        {
          uint64_t v94 = a2[1];
        }
        else if ((unint64_t)(v90 - (void)v89) < 0x20)
        {
          uint64_t v94 = a2[1];
        }
        else
        {
          uint64_t v93 = (v92 >> 3) + 1;
          uint64_t v94 = v90 - 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v95 = v89 - 2;
          size_t v96 = (long long *)(v90 - 16);
          uint64_t v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v98 = *v96;
            *(v95 - 1) = *(v96 - 1);
            *uint64_t v95 = v98;
            v95 -= 2;
            v96 -= 2;
            v97 -= 4;
          }
          while (v97);
          v89 -= v93 & 0x3FFFFFFFFFFFFFFCLL;
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_131;
          }
        }
        do
        {
          uint64_t v99 = *(void *)(v94 - 8);
          v94 -= 8;
          *--unint64_t v89 = v99;
        }
        while (v94 != v91);
LABEL_131:
        uint64_t v90 = *a2;
        goto LABEL_132;
      }
      unint64_t v73 = v71 - *a2 - 8;
      if (v73 < 0x38)
      {
        uint64_t v75 = a2[1];
      }
      else if ((unint64_t)(v71 - (void)v70) < 0x20)
      {
        uint64_t v75 = a2[1];
      }
      else
      {
        uint64_t v74 = (v73 >> 3) + 1;
        uint64_t v75 = v71 - 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
        char v76 = v70 - 2;
        unsigned __int8 v77 = (long long *)(v71 - 16);
        uint64_t v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v79 = *v77;
          *(v76 - 1) = *(v77 - 1);
          *char v76 = v79;
          v76 -= 2;
          v77 -= 2;
          v78 -= 4;
        }
        while (v78);
        v70 -= v74 & 0x3FFFFFFFFFFFFFFCLL;
        if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_104;
        }
      }
      do
      {
        uint64_t v80 = *(void *)(v75 - 8);
        v75 -= 8;
        *--uint8x8_t v70 = v80;
      }
      while (v75 != v72);
LABEL_104:
      uint64_t v71 = *a2;
      goto LABEL_105;
    }
    unint64_t v54 = v52 - *a2 - 8;
    if (v54 < 0x38)
    {
      uint64_t v56 = a2[1];
    }
    else if ((unint64_t)(v52 - (void)v51) < 0x20)
    {
      uint64_t v56 = a2[1];
    }
    else
    {
      uint64_t v55 = (v54 >> 3) + 1;
      uint64_t v56 = v52 - 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v57 = v51 - 2;
      char v58 = (long long *)(v52 - 16);
      uint64_t v59 = v55 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v60 = *v58;
        *(v57 - 1) = *(v58 - 1);
        *unint64_t v57 = v60;
        v57 -= 2;
        v58 -= 2;
        v59 -= 4;
      }
      while (v59);
      v51 -= v55 & 0x3FFFFFFFFFFFFFFCLL;
      if (v55 == (v55 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_80;
      }
    }
    do
    {
      uint64_t v61 = *(void *)(v56 - 8);
      v56 -= 8;
      *--float v51 = v61;
    }
    while (v56 != v53);
LABEL_80:
    uint64_t v52 = *a2;
    goto LABEL_81;
  }
  if (v3[142]) {
    goto LABEL_108;
  }
LABEL_135:
  uint64_t v101 = (char)v3[244];
  if (v101 == -1) {
    return result;
  }
  long long v102 = (void *)a2[1];
  unint64_t v103 = a2[2];
  if ((unint64_t)v102 >= v103)
  {
    uint64_t v105 = ((uint64_t)v102 - *a2) >> 3;
    unint64_t v106 = v105 + 1;
    if (!((unint64_t)(v105 + 1) >> 61))
    {
      uint64_t v107 = v103 - *a2;
      if (v107 >> 2 > v106) {
        unint64_t v106 = v107 >> 2;
      }
      if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v106 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v106)
      {
        uint64_t v108 = 8 * v106;
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2[3] + 16))(a2[3], 8 * v106, 4);
        int32x4_t v109 = (void *)(result + 8 * v105);
        unint64_t v106 = result + v108;
        if (result) {
          *int32x4_t v109 = ((v101 << 32) | 0x10022) + 55;
        }
      }
      else
      {
        int32x4_t v109 = (void *)(8 * v105);
      }
      int16x8_t v104 = v109 + 1;
      uint64_t v111 = *a2;
      uint64_t v110 = a2[1];
      if (v110 == *a2) {
        goto LABEL_160;
      }
      unint64_t v112 = v110 - *a2 - 8;
      if (v112 < 0x38)
      {
        uint64_t v114 = a2[1];
      }
      else if ((unint64_t)(v110 - (void)v109) < 0x20)
      {
        uint64_t v114 = a2[1];
      }
      else
      {
        uint64_t v113 = (v112 >> 3) + 1;
        uint64_t v114 = v110 - 8 * (v113 & 0x3FFFFFFFFFFFFFFCLL);
        int8x16_t v115 = v109 - 2;
        int8x16_t v116 = (long long *)(v110 - 16);
        uint64_t v117 = v113 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v118 = *v116;
          *(v115 - 1) = *(v116 - 1);
          _OWORD *v115 = v118;
          v115 -= 2;
          v116 -= 2;
          v117 -= 4;
        }
        while (v117);
        v109 -= v113 & 0x3FFFFFFFFFFFFFFCLL;
        if (v113 == (v113 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_159;
        }
      }
      do
      {
        uint64_t v119 = *(void *)(v114 - 8);
        v114 -= 8;
        *--int32x4_t v109 = v119;
      }
      while (v114 != v111);
LABEL_159:
      uint64_t v110 = *a2;
LABEL_160:
      *a2 = (uint64_t)v109;
      a2[1] = (uint64_t)v104;
      uint64_t v120 = a2[2];
      a2[2] = v106;
      if (v110) {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2[3] + 40))(a2[3], v110, v120 - v110);
      }
      goto LABEL_162;
    }
LABEL_164:
    abort();
  }
  if (v102) {
    *long long v102 = ((v101 << 32) | 0x10022) + 55;
  }
  int16x8_t v104 = v102 + 1;
LABEL_162:
  a2[1] = (uint64_t)v104;
  return result;
}

void md::Label::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 24))(a3, a1);
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 112))(*(void *)(a1 + 8), a1 + 48);
  md::LabelPoint::coordinate((md::LabelPoint *)&v38, v6);
  *(_OWORD *)(a1 + 128) = v38;
  *(void *)(a1 + 144) = v39;
  float v7 = *(float *)(v6 + 40);
  BOOL v8 = v7 != 3.4028e38;
  if (v7 == 3.4028e38) {
    float v7 = 0.0;
  }
  *(float *)(a1 + 188) = v7;
  *(unsigned char *)(a1 + 192) = v8;
  if (*(unsigned char *)(*(void *)(a2 + 232) + 17))
  {
    unint64_t v9 = (md::LabelPoint *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 112))(*(void *)(a1 + 8), a1 + 48);
    uint64_t v10 = (void *)md::LabelPoint::mercatorPoint(v9);
    *(void *)(a1 + 640) = *v10;
    *(void *)(a1 + 648) = v10[1];
  }
  if (*(unsigned char *)(a1 + 1211) == 1)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = *(void *)(v11 + 464);
    if (!v12) {
      goto LABEL_37;
    }
    uint64_t v13 = v11 + 464;
    unsigned int v14 = *(_DWORD *)(a1 + 48);
    uint64_t v15 = v11 + 464;
    do
    {
      unsigned int v16 = *(_DWORD *)(v12 + 32);
      BOOL v17 = v16 >= v14;
      if (v16 >= v14) {
        unint64_t v18 = (uint64_t *)v12;
      }
      else {
        unint64_t v18 = (uint64_t *)(v12 + 8);
      }
      if (v17) {
        uint64_t v15 = v12;
      }
      uint64_t v12 = *v18;
    }
    while (*v18);
    if (v15 == v13 || v14 < *(_DWORD *)(v15 + 32)) {
      goto LABEL_37;
    }
    uint64_t v20 = v15 + 40;
    uint64_t v19 = *(void **)(v15 + 40);
    uint64_t v21 = *(void *)(v20 + 8) - (void)v19;
    if ((unint64_t)v21 < 9)
    {
      uint64_t v26 = 1;
    }
    else
    {
      unint64_t v22 = v21 >> 3;
      if (*v19) {
        uint64_t v23 = *v19 + 8;
      }
      else {
        uint64_t v23 = 0;
      }
      uint64_t v24 = *(void *)(v23 + 72);
      uint64_t v25 = 2;
      if (v22 > 2) {
        uint64_t v25 = v22;
      }
      uint64_t v26 = 1;
      while (1)
      {
        uint64_t v27 = v19[v26];
        uint64_t v28 = v27 ? v27 + 8 : 0;
        if (*(void *)(v28 + 72) != v24
          || *(unsigned __int8 *)(v28 + 129) > *(unsigned __int8 *)(a3 + 9))
        {
          break;
        }
        if (v25 == ++v26)
        {
          uint64_t v26 = v25;
          break;
        }
      }
    }
    uint64_t v29 = v19[v26 - 1];
    if (v29 && *(unsigned char *)(v29 + 136))
    {
      uint64_t v30 = *(void *)(a1 + 680);
      if (!v30) {
        operator new();
      }
      *(void *)uint64_t v30 = *(void *)(a1 + 496);
      *(void *)(v30 + 8) = *(void *)(a1 + 504);
      *(void *)(v30 + 16) = *(void *)(a1 + 512);
      *(void *)(v30 + 24) = *(void *)(v29 + 88);
      *(void *)(v30 + 32) = *(void *)(v29 + 96);
      *(unsigned char *)(v30 + 40) = *(unsigned char *)(v29 + 137);
    }
    else
    {
LABEL_37:
      uint64_t v31 = *(void *)(a1 + 680);
      if (!v31) {
        goto LABEL_40;
      }
      *(void *)(a1 + 680) = 0;
      MEMORY[0x1A6239270](v31, 0x1000C40C179455ELL);
    }
    *(unsigned char *)(a1 + 1294) = 1;
  }
LABEL_40:
  if (*(unsigned char *)(a2 + 3029))
  {
    uint64_t v32 = *(void *)(a3 + 328);
    if (*(void *)(a1 + 64) == v32) {
      goto LABEL_51;
    }
    uint64_t v33 = *(void *)(a3 + 336);
    if (v33) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v34 = *(std::__shared_weak_count **)(a1 + 72);
    *(void *)(a1 + 64) = v32;
    *(void *)(a1 + 72) = v33;
    if (!v34) {
      goto LABEL_50;
    }
    goto LABEL_48;
  }
  if (!*(void *)(a1 + 64)) {
    goto LABEL_51;
  }
  uint64_t v34 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  if (v34)
  {
LABEL_48:
    if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
LABEL_50:
  ++*(_DWORD *)(a1 + 96);
LABEL_51:
  uint64_t v35 = *(void *)(a3 + 296);
  if (*(void *)(a1 + 80) != v35)
  {
    uint64_t v36 = *(void *)(a3 + 304);
    if (v36) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v37 = *(std::__shared_weak_count **)(a1 + 88);
    *(void *)(a1 + 80) = v35;
    *(void *)(a1 + 88) = v36;
    if (v37)
    {
      if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    ++*(_DWORD *)(a1 + 100);
  }
}

long long *md::PointLabelFeature::labelPoint(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 464);
  if (v2)
  {
    unsigned int v3 = *a2;
    uint64_t v4 = a1 + 464;
    do
    {
      unsigned int v5 = *(_DWORD *)(v2 + 32);
      BOOL v6 = v5 >= v3;
      if (v5 >= v3) {
        float v7 = (uint64_t *)v2;
      }
      else {
        float v7 = (uint64_t *)(v2 + 8);
      }
      if (v6) {
        uint64_t v4 = v2;
      }
      uint64_t v2 = *v7;
    }
    while (*v7);
    if (v4 != a1 + 464 && v3 >= *(_DWORD *)(v4 + 32)) {
      return (long long *)(v4 + 72);
    }
  }
  {
    qword_1EB317748 = 0;
    md::LabelPoint::NullPoint(void)::kNullLabelPoint = 0u;
    *(_OWORD *)&qword_1EB317738 = 0u;
    dword_1EB317750 = 2139095039;
    word_1EB317754 = 256;
    byte_1EB317756 = 1;
  }
  return &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
}

double md::LabelPoint::coordinate(md::LabelPoint *this, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 45))
  {
    if (*(float *)(a2 + 40) == 3.4028e38) {
      float v4 = 0.0;
    }
    else {
      float v4 = *(float *)(a2 + 40);
    }
    long double v5 = *(double *)(a2 + 24) * 6.28318531;
    long double v6 = exp(*(double *)(a2 + 32) * 6.28318531 + -3.14159265);
    long double v18 = atan(v6);
    long double v7 = fmod(v5, 6.28318531);
    long double v8 = fmod(v7 + 6.28318531, 6.28318531);
    v9.f64[0] = v18;
    v9.f64[1] = v8;
    *(float64x2_t *)this = vmlaq_f64((float64x2_t)xmmword_1A28FCC00, (float64x2_t)xmmword_1A28FCBF0, v9);
  }
  else
  {
    long double v10 = *(double *)a2;
    long double v11 = *(double *)(a2 + 8);
    long double v12 = *(double *)(a2 + 16);
    double v13 = sqrt(v10 * v10 + v11 * v11);
    double v14 = atan2(v12, v13 * 0.996647189);
    double v15 = atan2(v11, v10);
    __double2 v16 = __sincos_stret(v14);
    *(long double *)this = atan2(v12 + v16.__sinval * v16.__sinval * 42841.3115 * v16.__sinval, v13 + v16.__cosval * v16.__cosval * -42697.6727 * v16.__cosval)* 57.2957795;
    *((double *)this + 1) = v15 * 57.2957795;
    if (*(float *)(a2 + 40) == 3.4028e38) {
      float v4 = 0.0;
    }
    else {
      float v4 = *(float *)(a2 + 40);
    }
  }
  double result = v4;
  *((double *)this + 2) = v4;
  return result;
}

float64x2_t md::StandardGlobeLabelMapTile::assignWorldPointToLabel(md::StandardGlobeLabelMapTile *this, md::Label *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void, char *, void, void))(**((void **)a2 + 1) + 120))(*((void *)a2 + 1), (char *)a2 + 48, *((unsigned __int8 *)this + 9), *((void *)this + 63));
  uint64_t v4 = v3;
  if (*(unsigned char *)(v3 + 44))
  {
    double v5 = *(double *)v3;
    double v6 = *(double *)(v3 + 8);
    double v7 = *(double *)(v3 + 16);
  }
  else
  {
    long double v8 = *(double *)(v3 + 24) * 6.28318531;
    long double v9 = exp(*(double *)(v3 + 32) * 6.28318531 + -3.14159265);
    double v10 = atan(v9) * 2.0 + -1.57079633;
    long double v11 = fmod(v8, 6.28318531);
    double v12 = fmod(v11 + 6.28318531, 6.28318531) + -3.14159265;
    __double2 v13 = __sincos_stret(v10);
    double v14 = 6378137.0 / sqrt(v13.__sinval * v13.__sinval * -0.00669437999 + 1.0);
    __double2 v15 = __sincos_stret(v12);
    double v5 = v14 * v13.__cosval * v15.__cosval;
    double v6 = v14 * v13.__cosval * v15.__sinval;
    double v7 = v13.__sinval * 0.99330562 * v14;
    *(double *)uint64_t v4 = v5;
    *(double *)(v4 + 8) = v6;
    *(double *)(v4 + 16) = v7;
    *(unsigned char *)(v4 + 44) = 1;
  }
  v18.f64[0] = md::LabelPoint::geocentricNormal((md::LabelPoint *)v4);
  *((void *)a2 + 65) = *(void *)&v18.f64[0];
  v18.f64[1] = v16;
  float v19 = *(float *)(v4 + 40);
  BOOL v20 = v19 == 3.4028e38;
  BOOL v21 = v19 != 3.4028e38;
  if (v19 == 3.4028e38) {
    float v19 = 0.0;
  }
  double v22 = v19;
  *((float *)a2 + 47) = v19;
  *((unsigned char *)a2 + 192) = v21;
  *((unsigned char *)a2 + 835) = v21;
  *((double *)a2 + 62) = v5;
  *((double *)a2 + 63) = v6;
  *((double *)a2 + 64) = v7;
  double v23 = 0.0;
  if (!v20) {
    double v23 = v22;
  }
  double v24 = *((double *)a2 + 29) * v23;
  *((double *)a2 + 82) = v24;
  float64x2_t result = vmulq_n_f64(v18, v24);
  *((float64x2_t *)a2 + 34) = result;
  *((double *)a2 + 70) = v17 * v24;
  *((float64_t *)a2 + 66) = v16;
  *((double *)a2 + 67) = v17;
  return result;
}

double md::LabelPoint::geocentricNormal(md::LabelPoint *this)
{
  if (*((unsigned char *)this + 44))
  {
    double v3 = *(double *)this;
    double v2 = *((double *)this + 1);
    double v4 = *((double *)this + 2);
  }
  else
  {
    long double v5 = *((double *)this + 3) * 6.28318531;
    long double v6 = exp(*((double *)this + 4) * 6.28318531 + -3.14159265);
    double v7 = atan(v6) * 2.0 + -1.57079633;
    long double v8 = fmod(v5, 6.28318531);
    double v9 = fmod(v8 + 6.28318531, 6.28318531) + -3.14159265;
    __double2 v10 = __sincos_stret(v7);
    double v11 = 6378137.0 / sqrt(v10.__sinval * v10.__sinval * -0.00669437999 + 1.0);
    __double2 v12 = __sincos_stret(v9);
    double v3 = v11 * v10.__cosval * v12.__cosval;
    double v2 = v11 * v10.__cosval * v12.__sinval;
    double v4 = v10.__sinval * 0.99330562 * v11;
    *(double *)this = v3;
    *((double *)this + 1) = v2;
    *((double *)this + 2) = v4;
    *((unsigned char *)this + 44) = 1;
  }
  return 1.0
       / sqrt(v3 * 2.45817226e-14 * (v3 * 2.45817226e-14)+ v2 * 2.45817226e-14 * (v2 * 2.45817226e-14)+ v4 * 2.4747391e-14 * (v4 * 2.4747391e-14))* (v3* 2.45817226e-14);
}

long long *md::PointLabelFeature::labelPointWithElevationUpdate(uint64_t a1, unsigned int *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v4 = *(void *)(a1 + 464);
  if (!v4) {
    goto LABEL_12;
  }
  unsigned int v6 = *a2;
  uint64_t v7 = a1 + 464;
  do
  {
    unsigned int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 >= v6;
    if (v8 >= v6) {
      __double2 v10 = (uint64_t *)v4;
    }
    else {
      __double2 v10 = (uint64_t *)(v4 + 8);
    }
    if (v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 != a1 + 464 && v6 >= *(_DWORD *)(v7 + 32))
  {
    if (a4)
    {
      if (!*(unsigned char *)(v7 + 122))
      {
        if ((*(unsigned int (**)(unsigned char *))(*(void *)a4 + 64))(a4))
        {
          if (a4[169] > *(unsigned __int8 *)(v7 + 123))
          {
            uint64_t v13 = *(void *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v7 + 72));
            uint64_t v14 = *(void *)(md::LabelPoint::mercatorPoint((md::LabelPoint *)(v7 + 72)) + 8);
            v16[0] = v13;
            v16[1] = v14;
            v16[2] = 0;
            uint64_t v15 = (*(uint64_t (**)(unsigned char *, void *, uint64_t))(*(void *)a4 + 56))(a4, v16, 2);
            if ((v15 & 0xFF00000000) != 0)
            {
              *(unsigned char *)(v7 + 123) = a4[169];
              *(_DWORD *)(v7 + 112) = v15;
            }
          }
        }
      }
    }
    return (long long *)(v7 + 72);
  }
  else
  {
LABEL_12:
    {
      return &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
    }
    else
    {
      double v11 = &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
      {
        qword_1EB317748 = 0;
        md::LabelPoint::NullPoint(void)::kNullLabelPoint = 0u;
        *(_OWORD *)&qword_1EB317738 = 0u;
        dword_1EB317750 = 2139095039;
        word_1EB317754 = 256;
        byte_1EB317756 = 1;
      }
    }
  }
  return v11;
}

void geo::StdAllocator<md::TextDataEntry,mdm::Allocator>::destroy(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 32);
      uint64_t v4 = *(void *)(a1 + 24);
      if (v3 != v2)
      {
        do
        {
          long double v5 = *(std::__shared_weak_count **)(v3 - 8);
          if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
            std::__shared_weak_count::__release_weak(v5);
          }
          v3 -= 16;
        }
        while (v3 != v2);
        uint64_t v4 = *(void *)(a1 + 24);
      }
      *(void *)(a1 + 32) = v2;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), v4, *(void *)(a1 + 40) - v4);
    }
    unsigned int v6 = *(std::__shared_weak_count **)(a1 + 16);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

long long *md::LineLabelFeature::labelPoint(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = *(void *)(a1 + 232);
  uint64_t v2 = a1 + 232;
  uint64_t v3 = v4;
  if (!v4) {
    goto LABEL_12;
  }
  unsigned int v5 = *a2;
  uint64_t v6 = v2;
  do
  {
    unsigned int v7 = *(_DWORD *)(v3 + 32);
    BOOL v8 = v7 >= v5;
    if (v7 >= v5) {
      BOOL v9 = (uint64_t *)v3;
    }
    else {
      BOOL v9 = (uint64_t *)(v3 + 8);
    }
    if (v8) {
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v9;
  }
  while (*v9);
  if (v6 != v2 && v5 >= *(_DWORD *)(v6 + 32))
  {
    uint64_t v13 = *(void *)(v6 + 40);
    __double2 v10 = *(std::__shared_weak_count **)(v6 + 48);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v13)
    {
      double v11 = (long long *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 56))(v13);
      goto LABEL_15;
    }
  }
  else
  {
LABEL_12:
    __double2 v10 = 0;
  }
  {
    double v11 = &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
  }
  else
  {
    double v11 = &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
    {
      qword_1EB317748 = 0;
      md::LabelPoint::NullPoint(void)::kNullLabelPoint = 0u;
      *(_OWORD *)&qword_1EB317738 = 0u;
      dword_1EB317750 = 2139095039;
      word_1EB317754 = 256;
      byte_1EB317756 = 1;
    }
  }
LABEL_15:
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v11;
}

void sub_1A183D508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t md::LabelFeature::skewOffsettingVector()
{
  return 0;
}

void md::LabelFeature::skewOffsettingLimits(void *a1@<X8>)
{
  *a1 = 0;
}

double md::LabelFeature::elevationOffset()
{
  return 0.0;
}

uint64_t md::LabelFeature::isRouteFeature(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::facingVector()
{
  return 0;
}

uint64_t md::PointLabelFeature::labelTypeAtPosition()
{
  return 1;
}

uint64_t md::PointLabelFeature::labelFeatureType(md::PointLabelFeature *this)
{
  return 1;
}

uint64_t md::LabelFeature::labelFeatureSubtype(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::LabelFeature::isOnMeshRoad(md::LabelFeature *this)
{
  return 0;
}

uint64_t md::DaVinciElevationRaster::elevationInMetersAtWorldPoint(uint64_t a1, double *a2, unsigned int a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, float a11)
{
  return md::ElevationRaster::elevationInMetersAtWorldPoint(*(void *)(a1 + 720), a3, *a2, a2[1], a6, a7, a8, a9, a10, a11);
}

BOOL md::DaVinciElevationRaster::isValid(md::DaVinciElevationRaster *this)
{
  uint64_t v1 = (void *)*((void *)this + 90);
  return v1 && *v1 != v1[1];
}

uint64_t md::LabelFeature::labelPointWithElevationUpdate(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 112))();
}

uint64_t std::__shared_ptr_emplace<md::TextDataStringInfo,geo::StdAllocator<md::TextDataStringInfo,mdm::Allocator>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 128);
  if (v2)
  {
    *(void *)(result + 136) = v2;
    float64x2_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 152) + 40))(*(void *)(result + 152), v2, *(void *)(result + 144) - v2);
  }
  if ((*(char *)(v1 + 119) & 0x80000000) == 0)
  {
    if ((*(char *)(v1 + 87) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_8:
    float64x2_t result = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(v1 + 88) + 40))(*(void *)(v1 + 88), *(void *)(v1 + 64), *(void *)(v1 + 80) & 0x7FFFFFFFFFFFFFFFLL);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0) {
      return result;
    }
    goto LABEL_9;
  }
  float64x2_t result = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(v1 + 120) + 40))(*(void *)(v1 + 120), *(void *)(v1 + 96), 2 * *(void *)(v1 + 112));
  if (*(char *)(v1 + 87) < 0) {
    goto LABEL_8;
  }
LABEL_5:
  if ((*(char *)(v1 + 55) & 0x80000000) == 0) {
    return result;
  }
LABEL_9:
  uint64_t v3 = *(uint64_t (**)(void))(**(void **)(v1 + 56) + 40);
  return v3();
}

uint64_t std::__shared_ptr_emplace<md::TextDataString,geo::StdAllocator<md::TextDataString,mdm::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 160);
}

uint64_t std::__shared_ptr_emplace<md::TextDataStringInfo,geo::StdAllocator<md::TextDataStringInfo,mdm::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 168);
}

void md::LabelFeature::styleAttributes(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  double v11 = 0;
  __double2 v12 = 0;
  uint64_t v13 = 0;
  v14[0] = &unk_1EF52DE60;
  v14[1] = &v11;
  uint64_t v15 = v14;
  uint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 152);
  if (v5) {
    (*(void (**)(uint64_t, void *))(*(void *)v5 + 24))(v5, v14);
  }
  std::mutex::unlock(v4);
  if (v15 == v14)
  {
    (*(void (**)(void *))(v14[0] + 32))(v14);
  }
  else if (v15)
  {
    (*(void (**)(void))(*v15 + 40))();
  }
  uint64_t v6 = v11;
  unsigned int v7 = v12;
  if (v11 == v12)
  {
    *a2 = 0;
    a2[1] = 0;
    BOOL v9 = v6;
    if (!v6) {
      return;
    }
  }
  else
  {
    uint64_t v8 = v11[1];
    *a2 = *v11;
    a2[1] = v8;
    if (v8)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      unsigned int v7 = v12;
    }
    BOOL v9 = v6;
    if (v7 != v6)
    {
      do
      {
        __double2 v10 = (std::__shared_weak_count *)*(v7 - 1);
        if (v10)
        {
          if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v7 -= 2;
      }
      while (v7 != v6);
      BOOL v9 = v11;
    }
  }
  __double2 v12 = v6;
  operator delete(v9);
}

void sub_1A183D92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::mutex::unlock(v12);
  std::function<void ()(GeoCodecsFeature const*)>::~function(&a12);
  md::DynamicTrafficTileList::~DynamicTrafficTileList((md::DynamicTrafficTileList *)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::LineLabelFeature::labelTypeAtPosition(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = *(void *)(a1 + 232);
  uint64_t v2 = a1 + 232;
  uint64_t v3 = v4;
  if (!v4) {
    goto LABEL_12;
  }
  unsigned int v5 = *a2;
  uint64_t v6 = v2;
  do
  {
    unsigned int v7 = *(_DWORD *)(v3 + 32);
    BOOL v8 = v7 >= v5;
    if (v7 >= v5) {
      BOOL v9 = (uint64_t *)v3;
    }
    else {
      BOOL v9 = (uint64_t *)(v3 + 8);
    }
    if (v8) {
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v9;
  }
  while (*v9);
  if (v6 != v2 && v5 >= *(_DWORD *)(v6 + 32))
  {
    uint64_t v12 = *(void *)(v6 + 40);
    uint64_t v13 = *(std::__shared_weak_count **)(v6 + 48);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v12 && (*(unsigned char *)(v12 + 9) - 1) <= 7u)
    {
      unint64_t v10 = 0x605030908070402uLL >> (8 * (*(unsigned char *)(v12 + 9) - 1));
      if (!v13) {
        return v10;
      }
    }
    else
    {
      LOBYTE(v10) = 0;
      if (!v13) {
        return v10;
      }
    }
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
LABEL_12:
    LOBYTE(v10) = 0;
  }
  return v10;
}

uint64_t md::UniLineLabelFeature::labelFeatureSubtype(md::UniLineLabelFeature *this)
{
  return *((unsigned __int8 *)this + 449);
}

uint64_t md::UniLineLabelFeature::labelFeatureType(md::UniLineLabelFeature *this)
{
  return *((unsigned __int8 *)this + 448);
}

long long *md::PhysicalLabelFeature::labelPoint(uint64_t a1, unsigned int *a2)
{
  if (*(void *)(a1 + 464)) {
    BOOL v2 = *a2 == 1;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2) {
    return (long long *)(a1 + 480);
  }
  else {
    return md::LineLabelFeature::labelPoint(a1, a2);
  }
}

uint64_t md::PhysicalLabelFeature::labelFeatureSubtype(md::PhysicalLabelFeature *this)
{
  return 3;
}

void __destroy_helper_block_8_40c37_ZTSNSt3__110shared_ptrIN3geo4TaskEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void *md::CartographicRenderer::layoutRenderLayers(void *this, md::LayoutContext *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  BOOL v2 = (md::RenderLayer **)this[5];
  for (uint64_t i = (md::RenderLayer **)this[6]; v2 != i; ++v2)
  {
    unsigned int v5 = *v2;
    if (*v2 && !*((unsigned char *)v5 + 33))
    {
      uint64_t v6 = *(md::PassList **)(*((void *)v5 + 5) + 24);
      md::RenderLayer::lock(*v2, v6, a2);
      uint64_t v7 = *(void *)(*(void *)(*((void *)v5 + 5) + 8) + 8);
      BOOL v8 = operator new(0x20uLL);
      *BOOL v8 = &unk_1EF576518;
      v8[1] = v5;
      v8[2] = a2;
      v8[3] = v6;
      uint64_t v13 = v8;
      geo::TaskQueue::async(&v10, v7, v12);
      BOOL v9 = v11;
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      this = v13;
      if (v13 == v12)
      {
        this = (void *)(*(uint64_t (**)(void *))(v12[0] + 32))(v12);
      }
      else if (v13)
      {
        this = (void *)(*(uint64_t (**)(void))(*v13 + 40))();
      }
    }
  }
  return this;
}

void sub_1A183DCB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15)
{
  if (a15 == &a12)
  {
    (*(void (**)(uint64_t *))(a12 + 32))(&a12);
    _Unwind_Resume(exception_object);
  }
  if (a15) {
    (*(void (**)(void))(*a15 + 40))();
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_48c37_ZTSNSt3__110shared_ptrIN3geo4TaskEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__shared_ptr_emplace<geo::Task>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = a1 + 24;
  uint64_t result = *(void *)(a1 + 48);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void geo::TaskQueue::async(std::__shared_weak_count_vtbl **a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x40uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582E48;
  uint64_t v7 = (std::__shared_weak_count_vtbl *)&v6[1];
  uint64_t v8 = a3[3];
  if (!v8) {
    goto LABEL_4;
  }
  if ((void *)v8 != a3)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
LABEL_4:
    v6[2].__vftable = (std::__shared_weak_count_vtbl *)v8;
    goto LABEL_6;
  }
  v6[2].__vftable = v7;
  (*(void (**)(void *, std::__shared_weak_count_vtbl *))(*a3 + 24))(a3, v7);
LABEL_6:
  LOWORD(v6[2].__shared_owners_) = 0;
  *a1 = v7;
  a1[1] = (std::__shared_weak_count_vtbl *)v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  if (*(unsigned char *)(a2 + 58)) {
    id v9 = *(id *)(a2 + 72);
  }
  else {
    id v9 = 0;
  }
  char v10 = *(unsigned char *)(a2 + 56);
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3321888768;
  void v19[2] = ___ZN3geo9TaskQueue14queueAsyncTaskENSt3__110shared_ptrINS_4TaskEEEPU28objcproto17OS_dispatch_group8NSObject_block_invoke;
  v19[3] = &unk_1EF58E700;
  id v11 = v9;
  char v24 = v10;
  id v20 = v11;
  uint64_t v21 = 0;
  double v22 = v6 + 1;
  double v23 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = (void *)MEMORY[0x1A6239EB0](v19);
  if (*(unsigned char *)(a2 + 56))
  {
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = ___ZN3geo9TaskQueue14queueAsyncTaskENSt3__110shared_ptrINS_4TaskEEEPU28objcproto17OS_dispatch_group8NSObject_block_invoke_6;
    v15[3] = &unk_1E5A990A0;
    uint64_t v18 = a2;
    id v16 = v11;
    id v17 = v12;
    uint64_t v13 = (void *)MEMORY[0x1A6239EB0](v15);
    dispatch_async(*(dispatch_queue_t *)(a2 + 40), v13);
  }
  else
  {
    dispatch_async(*(dispatch_queue_t *)(a2 + 16), v12);
  }

  uint64_t v14 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }

  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1A183E0C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void md::RenderLayer::lock(md::RenderLayer *this, md::PassList *a2, const md::LayoutContext *a3)
{
  (*(void (**)(unsigned __int8 **__return_ptr))(*(void *)this + 32))(&v20);
  unsigned int v5 = v20;
  uint64_t v6 = v21;
  if (v20 != v21)
  {
    int v7 = *((unsigned __int8 *)this + 32);
    do
    {
      id v9 = (void *)*((void *)a2 + 1);
      uint64_t v10 = v9[3];
      uint64_t v11 = v9[4];
      uint64_t v12 = v11 - v10;
      if (v11 != v10)
      {
        uint64_t v13 = 0;
        unint64_t v14 = v12 >> 3;
        while (1)
        {
          uint64_t v15 = *(unsigned __int8 **)(v10 + 8 * v13);
          if (*v15 == *v5)
          {
            unint64_t v16 = *((void *)v15 + 1);
            uint64_t v17 = v9[15];
            if (v16 < (v9[16] - v17) >> 3) {
              break;
            }
          }
          if (++v13 >= v14) {
            goto LABEL_5;
          }
        }
        uint64_t v18 = *(void *)(v17 + 8 * v16);
        if (v18)
        {
          uint64_t v19 = v5[1];
          if (v7) {
            uint64_t v8 = *(ggl::CommandBuffer **)(*(void *)(v18 + 24) + 8 * v19);
          }
          else {
            uint64_t v8 = 0;
          }
          ggl::RenderQueue::setBufferForLayer(*(void *)(v18 + 8), v19, v8);
        }
      }
LABEL_5:
      v5 += 2;
    }
    while (v5 != v6);
    unsigned int v5 = v20;
  }
  if (v5)
  {
    uint64_t v21 = v5;
    operator delete(v5);
  }
}

__n128 std::__function::__func<md::CartographicRenderLayer::frame(md::LayoutContext const&)::$_0,std::allocator<md::CartographicRenderLayer::frame(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  BOOL v2 = (char *)operator new(0x20uLL);
  *(void *)BOOL v2 = &unk_1EF576518;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0,std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0,std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0>,void ()(void)>::destroy[abi:nn180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__alloc_func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0,std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0>,void ()(void)>::destroy[abi:nn180100](void *a1)
{
  BOOL v2 = (std::__shared_weak_count *)a1[8];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[6];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[6];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  unsigned int v5 = (std::__shared_weak_count *)a1[1];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void md::FrameGraphBuilder::addRenderPass<md::StandardCommandBufferIdInfo>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1A183E6AC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1A183E6E0(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v2);
  MEMORY[0x1A6239270](v1, 0xA1C4084DA3AFDLL);
  _Unwind_Resume(a1);
}

uint64_t ggl::RenderQueue::setBufferForLayer(uint64_t this, uint64_t a2, ggl::CommandBuffer *a3)
{
  uint64_t v5 = this;
  unint64_t v6 = a2 + 1;
  uint64_t v8 = *(void *)(this + 104);
  int v7 = *(void **)(this + 112);
  id v9 = (char *)v7 - v8;
  unint64_t v10 = ((uint64_t)v7 - v8) >> 3;
  unint64_t v11 = a2 + 1 - v10;
  if (a2 + 1 > v10)
  {
    uint64_t v12 = *(void *)(this + 120);
    if (v11 <= (v12 - (uint64_t)v7) >> 3)
    {
      id v20 = &v7[v11];
      uint64_t v21 = 8 * a2 - 8 * v10 + 8;
      do
      {
        if (v7) {
          void *v7 = 0;
        }
        ++v7;
        v21 -= 8;
      }
      while (v21);
      *(void *)(this + 112) = v20;
    }
    else
    {
      if (v6 >> 61) {
        abort();
      }
      unint64_t v13 = v12 - v8;
      unint64_t v14 = (v12 - v8) >> 2;
      if (v14 <= v6) {
        unint64_t v14 = a2 + 1;
      }
      if (v13 >= 0x7FFFFFFFFFFFFFF8) {
        uint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v15 = v14;
      }
      this = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(this + 128) + 16))(*(void *)(this + 128), 8 * v15, 8);
      unint64_t v16 = (void *)(this + 8 * v10);
      uint64_t v17 = this + 8 * v6;
      uint64_t v18 = 8 * a2 - 8 * v10 + 8;
      uint64_t v19 = v16;
      do
      {
        if (v19) {
          *uint64_t v19 = 0;
        }
        ++v19;
        v18 -= 8;
      }
      while (v18);
      uint64_t v22 = this + 8 * v15;
      uint64_t v24 = *(void *)(v5 + 104);
      uint64_t v23 = *(void *)(v5 + 112);
      if (v23 != v24)
      {
        unint64_t v25 = v23 - v24 - 8;
        if (v25 < 0x58) {
          goto LABEL_37;
        }
        if ((unint64_t)(v23 - (void)&v9[this]) < 0x20) {
          goto LABEL_37;
        }
        uint64_t v26 = (v25 >> 3) + 1;
        uint64_t v27 = (_OWORD *)(this + 8 * v10 - 16);
        uint64_t v28 = (long long *)(v23 - 16);
        this = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v28;
          *(v27 - 1) = *(v28 - 1);
          _OWORD *v27 = v29;
          v27 -= 2;
          v28 -= 2;
          this -= 4;
        }
        while (this);
        v16 -= v26 & 0x3FFFFFFFFFFFFFFCLL;
        v23 -= 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
        if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_37:
          do
          {
            uint64_t v30 = *(void *)(v23 - 8);
            v23 -= 8;
            *--unint64_t v16 = v30;
          }
          while (v23 != v24);
        }
        uint64_t v23 = *(void *)(v5 + 104);
      }
      *(void *)(v5 + 104) = v16;
      *(void *)(v5 + 112) = v17;
      uint64_t v31 = *(void *)(v5 + 120);
      *(void *)(v5 + 120) = v22;
      if (v23) {
        this = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v5 + 128) + 40))(*(void *)(v5 + 128), v23, v31 - v23);
      }
    }
    uint64_t v8 = *(void *)(v5 + 104);
  }
  uint64_t v32 = *(void *)(v8 + 8 * a2);
  if (v32) {
    *(void *)(v32 + 24) = 0;
  }
  if (a3) {
    *((void *)a3 + 3) = v5;
  }
  *(void *)(v8 + 8 * a2) = a3;
  return this;
}

double ggl::CommandBuffer::CommandBuffer(ggl::CommandBuffer *this, char a2, const char *a3)
{
  *(void *)this = &unk_1EF55AF18;
  *((void *)this + 1) = a3;
  *((unsigned char *)this + 16) = a2;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  uint64_t v3 = &qword_1EB32C000;
  {
    uint64_t v19 = this;
    uint64_t v3 = &qword_1EB32C000;
    int v6 = v5;
    this = v19;
    if (v6) {
      operator new();
    }
  }
  *((void *)this + 8) = v3[287];
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  {
    id v20 = this;
    uint64_t v3 = &qword_1EB32C000;
    int v8 = v7;
    this = v20;
    if (v8) {
      operator new();
    }
  }
  *((void *)this + 12) = v3[287];
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  {
    uint64_t v21 = this;
    uint64_t v3 = &qword_1EB32C000;
    int v10 = v9;
    this = v21;
    if (v10) {
      operator new();
    }
  }
  *((void *)this + 16) = v3[287];
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  {
    uint64_t v22 = this;
    uint64_t v3 = &qword_1EB32C000;
    int v12 = v11;
    this = v22;
    if (v12) {
      operator new();
    }
  }
  *((void *)this + 20) = v3[287];
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  {
    uint64_t v23 = this;
    uint64_t v3 = &qword_1EB32C000;
    int v14 = v13;
    this = v23;
    if (v14) {
      operator new();
    }
  }
  *((void *)this + 24) = v3[287];
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  {
    uint64_t v24 = this;
    uint64_t v3 = &qword_1EB32C000;
    int v16 = v15;
    this = v24;
    if (v16) {
      operator new();
    }
  }
  *((void *)this + 28) = v3[287];
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0;
  {
    unint64_t v25 = this;
    uint64_t v3 = &qword_1EB32C000;
    int v18 = v17;
    this = v25;
    if (v18) {
      operator new();
    }
  }
  *((void *)this + 32) = v3[287];
  double result = 0.0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  return result;
}

void ggl::RenderQueue::RenderQueue(ggl::RenderQueue *this, uint64_t a2)
{
  *((unsigned char *)this + 56) = 0;
  *((_DWORD *)this + 15) = 0;
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((unsigned char *)this + 48) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 9) = 0;
  {
    uint64_t v7 = a2;
    a2 = v7;
    if (v8) {
      operator new();
    }
  }
  *((void *)this + 12) = ggl::Allocator::instance(void)::alloc;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  {
    uint64_t v9 = a2;
    a2 = v9;
    if (v10) {
      operator new();
    }
  }
  uint64_t v3 = ggl::Allocator::instance(void)::alloc;
  *((void *)this + 16) = ggl::Allocator::instance(void)::alloc;
  if (a2)
  {
    uint64_t v4 = a2;
    int v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3 + 16))(v3, 8 * a2, 8);
    *((void *)this + 13) = v5;
    int v6 = &v5[v4];
    *((void *)this + 15) = &v5[v4];
    do
    {
      if (v5) {
        *int v5 = 0;
      }
      ++v5;
      --v4;
    }
    while (v4 * 8);
    *((void *)this + 14) = v6;
  }
  operator new();
}

__n128 std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraphWithFrameBufferFetch(BOOL const&,BOOL const&,BOOL const&,md::FrameGraphRenderTarget const*,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildPrimaryFrameGraphWithFrameBufferFetch(BOOL const&,BOOL const&,BOOL const&,md::FrameGraphRenderTarget const*,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EF572DB0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

uint64_t md::FrameGraphBuilder::addRenderPass(unsigned __int8 ***a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a1;
  int v5 = a1[1];
  if (*a1 == v5)
  {
    int v5 = *a1;
    goto LABEL_9;
  }
  int v6 = *a1;
  while (**v6 != a2)
  {
    if (++v6 == v5) {
      goto LABEL_9;
    }
  }
  if (v6 == v5)
  {
LABEL_9:
    char v9 = a2;
    uint64_t v10 = v5 - v4;
    int v11 = 0;
    std::string __p = 0;
    uint64_t v13 = 0;
    v16[0] = 0;
    v16[1] = 0;
    uint64_t v14 = 0;
    int v15 = v16;
    v17[0] = 0;
    v17[1] = 0;
    v16[2] = v17;
    int v8 = &unk_1EF5484D8;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    memset(v21, 0, 25);
    v21[48] = 0;
    if (a4)
    {
      (*(void (**)(uint64_t, void **))(*(void *)a4 + 48))(a4, &v8);
      md::FrameGraphRenderPassBuilder::build((md::FrameGraphRenderPassBuilder *)&v8);
    }
    std::__throw_bad_function_call[abi:nn180100]();
    abort();
  }
  return 0;
}

__n128 std::__function::__func<md::StandardPassList::_buildPrimaryFrameGraphWithFrameBufferFetch(BOOL const&,BOOL const&,BOOL const&,md::FrameGraphRenderTarget const*,md::FrameGraphBuilder *)::$_0,std::allocator<md::StandardPassList::_buildPrimaryFrameGraphWithFrameBufferFetch(BOOL const&,BOOL const&,BOOL const&,md::FrameGraphRenderTarget const*,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 ***)(a1 + 16);
  HIBYTE(v12) = 7;
  strcpy((char *)&__src, "Primary");
  int v5 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v5, &__src, 7uLL);
  }
  else
  {
    *(_OWORD *)int v5 = __src;
    *(void *)(a2 + 48) = v12;
  }
  if (**(unsigned char **)(a1 + 8)) {
    md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, v4[12]);
  }
  if (**(unsigned char **)(a1 + 24)) {
    md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, v4[15]);
  }
  if (**(unsigned char **)(a1 + 32)) {
    md::FrameGraphPassBuilder::addAttachmentInput((uint64_t *)a2, v4[20]);
  }
  uint64_t v6 = **(void **)(a1 + 40);
  long long v8 = *(_OWORD *)(v6 + 32);
  long long v7 = *(_OWORD *)(v6 + 48);
  uint64_t v9 = *(void *)(v6 + 64);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(v6 + 16);
  *(void *)(a2 + 168) = v9;
  *(_OWORD *)(a2 + 152) = v7;
  *(_OWORD *)(a2 + 136) = v8;
  __n128 result = *(__n128 *)v6;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)v6;
  if (*(unsigned char *)(v6 + 72))
  {
    __n128 result = *(__n128 *)(v6 + 76);
    if (*(unsigned char *)(a2 + 176))
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v6 + 92);
      *(__n128 *)(a2 + 180) = result;
    }
    else
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v6 + 92);
      *(__n128 *)(a2 + 180) = result;
      *(unsigned char *)(a2 + 176) = 1;
    }
  }
  else if (*(unsigned char *)(a2 + 176))
  {
    *(unsigned char *)(a2 + 176) = 0;
  }
  return result;
}

void md::FrameGraphRenderPassBuilder::build(md::FrameGraphRenderPassBuilder *this)
{
}

char *std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0,std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = (char *)operator new(0x50uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)__n128 result = &unk_1EF572078;
  *((void *)result + 1) = v4;
  *((void *)result + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 40);
  *((void *)result + 5) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(a1 + 56);
  *((void *)result + 6) = *(void *)(a1 + 48);
  *((void *)result + 7) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a1 + 72);
  *((void *)result + 8) = *(void *)(a1 + 64);
  *((void *)result + 9) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::__clone(void *a1)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  *__n128 result = &unk_1EF57E568;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a1[4];
  result[3] = a1[3];
  result[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = a1[6];
  result[5] = a1[5];
  result[6] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0,std::allocator<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0>,void ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void *std::__function::__func<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0,std::allocator<md::LabelManager::evaluateUpdateOperation(BOOL &,BOOL &)::$_0>,void ()(void)>::__clone(void *a1)
{
  __n128 result = operator new(0x28uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  *__n128 result = &unk_1EF56EBE0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  result[3] = a1[3];
  *(void *)((char *)result + 29) = *(void *)((char *)a1 + 29);
  return result;
}

void *std::__function::__func<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0,std::allocator<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0xA0uLL);
  *uint64_t v2 = &unk_1EF56DB90;
  std::__compressed_pair_elem<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1A1840930(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__compressed_pair_elem<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(void *)(a1 + 52) = *(void *)(a2 + 52);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(void *)(a1 + 76) = *(void *)(a2 + 76);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  std::vector<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::DrapingItem,std::allocator<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::DrapingItem>>::vector((void *)(a1 + 104), (uint64_t *)(a2 + 104));
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  uint64_t v8 = *(void *)(a2 + 128);
  uint64_t v7 = *(void *)(a2 + 136);
  int64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (v9 >> 4);
    if (v10 >= 0x333333333333334) {
      abort();
    }
    int v11 = (char *)operator new(v9);
    *(void *)(a1 + 128) = v11;
    *(void *)(a1 + 136) = v11;
    *(void *)(a1 + 144) = &v11[80 * v10];
    do
    {
      uint64_t v12 = *(void *)(v8 + 8);
      *(void *)int v11 = *(void *)v8;
      *((void *)v11 + 1) = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      long long v13 = *(_OWORD *)(v8 + 16);
      long long v14 = *(_OWORD *)(v8 + 32);
      *(_OWORD *)(v11 + 46) = *(_OWORD *)(v8 + 46);
      *((_OWORD *)v11 + 1) = v13;
      *((_OWORD *)v11 + 2) = v14;
      uint64_t v15 = *(void *)(v8 + 72);
      *((void *)v11 + 8) = *(void *)(v8 + 64);
      *((void *)v11 + 9) = v15;
      if (v15) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
      }
      v11 += 80;
      v8 += 80;
    }
    while (v8 != v7);
    *(void *)(a1 + 136) = v11;
  }
  return a1;
}

void sub_1A1840AA8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[5];
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (std::__shared_weak_count *)v1[3];
    if (!v4)
    {
LABEL_3:
      uint64_t v5 = (std::__shared_weak_count *)v1[1];
      if (!v5) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v4 = (std::__shared_weak_count *)v1[3];
    if (!v4) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v4);
  uint64_t v5 = (std::__shared_weak_count *)v1[1];
  if (!v5) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(exception_object);
}

void *std::vector<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::DrapingItem,std::allocator<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::DrapingItem>>::vector(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  int64_t v5 = v4 - *a2;
  if (v4 != *a2)
  {
    unint64_t v6 = 0xF0F0F0F0F0F0F0F1 * (v5 >> 3);
    if (v6 >= 0x1E1E1E1E1E1E1E2) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v7 = (char *)operator new(v5);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[136 * v6];
    do
    {
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v3;
      uint64_t v10 = *(void *)(v3 + 16);
      *((void *)v7 + 2) = v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = *(void *)(v3 + 32);
      *((void *)v7 + 3) = *(void *)(v3 + 24);
      *((void *)v7 + 4) = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = *(void *)(v3 + 48);
      *((void *)v7 + 5) = *(void *)(v3 + 40);
      *((void *)v7 + 6) = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = *(void *)(v3 + 64);
      *((void *)v7 + 7) = *(void *)(v3 + 56);
      *((void *)v7 + 8) = v13;
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v14 = *(void *)(v3 + 80);
      *((void *)v7 + 9) = *(void *)(v3 + 72);
      *((void *)v7 + 10) = v14;
      if (v14) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = *(void *)(v3 + 88);
      v7[96] = *(unsigned char *)(v3 + 96);
      *((void *)v7 + 11) = v8;
      long long v9 = *(_OWORD *)(v3 + 104);
      *(_OWORD *)(v7 + 116) = *(_OWORD *)(v3 + 116);
      *(_OWORD *)(v7 + 104) = v9;
      v7 += 136;
      v3 += 136;
    }
    while (v3 != v4);
    a1[1] = v7;
  }
  return a1;
}

uint64_t std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0,std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0>,void ()(void)>::operator()(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  v23[0] = &unk_1EF57E7F0;
  uint64_t v24 = v23;
  v21[0] = &unk_1EF57E760;
  uint64_t v22 = v21;
  uint64_t v26 = v25;
  v25[0] = &unk_1EF57E760;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsGenerateGlyphInfos", "", buf, 2u);
  }

  if (v22 == v21)
  {
    (*(void (**)(void *))(v21[0] + 32))(v21);
  }
  else if (v22)
  {
    (*(void (**)(void))(*v22 + 40))();
  }
  if (v24 == v23)
  {
    (*(void (**)(void *))(v23[0] + 32))(v23);
  }
  else if (v24)
  {
    (*(void (**)(void))(*v24 + 40))();
  }
  uint64_t v3 = (unsigned __int8 **)a1[1];
  uint64_t v4 = (unsigned __int8 **)a1[2];
  while (v3 != v4)
  {
    unint64_t v6 = *v3;
    uint64_t v7 = (grl::FontManager **)[*(id *)(a1[5] + 96) grlFontManager];
    unsigned __int8 v8 = atomic_load(v6 + 125);
    if ((v8 & 1) == 0)
    {
      if (*(void *)v6) {
        md::TextDataString::generateGlyphInfosAndPositions((md::TextDataString *)v6, v7);
      }
      atomic_store(1u, v6 + 125);
    }
    int64_t v5 = *v3;
    v3 += 2;
    atomic_store(0, v5 + 124);
  }
  uint64_t v10 = a1[5];
  uint64_t v9 = a1[6];
  uint64_t v11 = *(void *)(*(void *)(v10 + 152) + 136);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = a1[7];
  uint64_t v12 = a1[8];
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  long long v20 = 0;
  uint64_t v14 = (uint8_t *)operator new(0x28uLL);
  *(void *)uint64_t v14 = &unk_1EF57E7A8;
  *((void *)v14 + 1) = v10;
  *((void *)v14 + 2) = v9;
  *((void *)v14 + 3) = v13;
  *((void *)v14 + 4) = v12;
  long long v20 = v14;
  geo::TaskQueue::async(&v17, v11, buf);
  uint64_t v15 = v18;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (v20 == buf)
  {
    (*(void (**)(uint8_t *))(*(void *)buf + 32))(buf);
  }
  else if (v20)
  {
    (*(void (**)(void))(*(void *)v20 + 40))();
  }
  if (!v26)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    JUMPOUT(0x1A18411CCLL);
  }
  (*(void (**)(void *))(*v26 + 48))(v26);
  uint64_t result = (uint64_t)v26;
  if (v26 == v25) {
    return (*(uint64_t (**)(void *))(v25[0] + 32))(v25);
  }
  if (v26) {
    return (*(uint64_t (**)(void *))(*v26 + 40))(v26);
  }
  return result;
}

void std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[4];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)__p[2];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[2];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  operator delete(__p);
}

void std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::operator()()
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "LabelsGenerateGlyphInfos", "", v1, 2u);
  }
}

void *std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::__clone(void *a1)
{
  uint64_t result = operator new(0x28uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  *uint64_t result = &unk_1EF57E7A8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a1[4];
  result[3] = a1[3];
  result[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0,std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x48uLL);
  *uint64_t v2 = &unk_1EF5748B0;
  std::__compressed_pair_elem<md::LabelTextDataLoader::finishBatch(void)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::LabelTextDataLoader::finishBatch(void)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_1A18414BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__compressed_pair_elem<md::LabelTextDataLoader::finishBatch(void)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::LabelTextDataLoader::finishBatch(void)::$_0 const&,0ul>(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *(void *)(a2 + 24);
  a1[2] = 0;
  a1[3] = v4;
  uint64_t v5 = *(void **)a2;
  unint64_t v6 = *(void **)(a2 + 8);
  uint64_t v7 = (uint64_t)v6 - *(void *)a2;
  if (v7)
  {
    if (v7 < 0) {
      abort();
    }
    uint64_t v8 = v7 >> 4;
    uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    *a1 = v9;
    a1[1] = v9;
    a1[2] = &v9[2 * v8];
    do
    {
      if (v9)
      {
        uint64_t v10 = v5[1];
        *uint64_t v9 = *v5;
        v9[1] = v10;
        if (v10) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
        }
      }
      v5 += 2;
      v9 += 2;
    }
    while (v5 != v6);
    a1[1] = v9;
  }
  uint64_t v11 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(void *)(a2 + 56);
  a1[6] = *(void *)(a2 + 48);
  a1[7] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void std::__function::__func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[4];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)__p[2];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[2];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  operator delete(__p);
}

void std::__function::__func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0,std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::~$_0((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = *(void *)(a1 + 8);
    if (v5 != v4)
    {
      do
      {
        uint64_t v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v7->__on_zero_shared)(v7, v6);
          std::__shared_weak_count::__release_weak(v7);
        }
        v5 -= 16;
      }
      while (v5 != v4);
      uint64_t v6 = *(void *)(a1 + 8);
    }
    *(void *)(a1 + 16) = v4;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32), v6, *(void *)(a1 + 24) - v6);
  }
  return a1;
}

void *std::__function::__func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::__clone(void *a1)
{
  uint64_t result = operator new(0x28uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  *uint64_t result = &unk_1EF57E9A0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a1[4];
  result[3] = a1[3];
  result[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1A18425F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void sub_1A184277C()
{
}

float pitchForZ(void *a1, double a2)
{
  unsigned int v2 = vcvtmd_s64_f64(a2);
  uint64_t v3 = a1 + 1;
  uint64_t v4 = (void *)*a1;
  uint64_t v5 = (void *)*a1;
  if ((void *)*a1 != a1 + 1)
  {
    unint64_t v6 = 0;
    uint64_t v7 = (void *)*a1;
    do
    {
      uint64_t v8 = (void *)v7[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v7[2];
          BOOL v10 = *v9 == (void)v7;
          uint64_t v7 = v9;
        }
        while (!v10);
      }
      ++v6;
      uint64_t v7 = v9;
    }
    while (v9 != v3);
    uint64_t v5 = (void *)*a1;
    do
    {
      unint64_t v11 = v6 >> 1;
      uint64_t v12 = v5;
      if (v6 != 1)
      {
        uint64_t v14 = v6 >> 1;
        uint64_t v15 = v5;
        do
        {
          int v16 = (void *)v15[1];
          if (v16)
          {
            do
            {
              uint64_t v12 = v16;
              int v16 = (void *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              uint64_t v12 = (void *)v15[2];
              BOOL v10 = *v12 == (void)v15;
              uint64_t v15 = v12;
            }
            while (!v10);
          }
          uint64_t v15 = v12;
          BOOL v17 = v14-- <= 1;
        }
        while (!v17);
      }
      if (*((unsigned __int8 *)v12 + 33) <= v2)
      {
        uint64_t v13 = (void *)v12[1];
        if (v13)
        {
          do
          {
            uint64_t v5 = v13;
            uint64_t v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            uint64_t v5 = (void *)v12[2];
            BOOL v10 = *v5 == (void)v12;
            uint64_t v12 = v5;
          }
          while (!v10);
        }
        unint64_t v11 = v6 + ~v11;
      }
      unint64_t v6 = v11;
    }
    while (v11);
  }
  if (v5 == v3 || (*((unsigned __int8 *)v5 + 32) <= v2 ? (BOOL v17 = *((unsigned __int8 *)v5 + 33) > v2) : (BOOL v17 = 0), !v17)) {
    uint64_t v5 = a1 + 1;
  }
  unsigned int v18 = vcvtpd_s64_f64(a2);
  if (v4 != v3)
  {
    unint64_t v19 = 0;
    long long v20 = (void *)*a1;
    do
    {
      uint64_t v21 = (void *)v20[1];
      if (v21)
      {
        do
        {
          uint64_t v22 = v21;
          uint64_t v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          uint64_t v22 = (void *)v20[2];
          BOOL v10 = *v22 == (void)v20;
          long long v20 = v22;
        }
        while (!v10);
      }
      ++v19;
      long long v20 = v22;
    }
    while (v22 != v3);
    do
    {
      unint64_t v23 = v19 >> 1;
      uint64_t v24 = v4;
      if (v19 != 1)
      {
        uint64_t v26 = v19 >> 1;
        uint64_t v27 = v4;
        do
        {
          uint64_t v28 = (void *)v27[1];
          if (v28)
          {
            do
            {
              uint64_t v24 = v28;
              uint64_t v28 = (void *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              uint64_t v24 = (void *)v27[2];
              BOOL v10 = *v24 == (void)v27;
              uint64_t v27 = v24;
            }
            while (!v10);
          }
          uint64_t v27 = v24;
          BOOL v17 = v26-- <= 1;
        }
        while (!v17);
      }
      if (*((unsigned __int8 *)v24 + 33) <= v18)
      {
        unint64_t v25 = (void *)v24[1];
        if (v25)
        {
          do
          {
            uint64_t v4 = v25;
            unint64_t v25 = (void *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            uint64_t v4 = (void *)v24[2];
            BOOL v10 = *v4 == (void)v24;
            uint64_t v24 = v4;
          }
          while (!v10);
        }
        unint64_t v23 = v19 + ~v23;
      }
      unint64_t v19 = v23;
    }
    while (v23);
  }
  if (v4 == v3
    || (*((unsigned __int8 *)v4 + 32) <= v18 ? (BOOL v29 = *((unsigned __int8 *)v4 + 33) > v18) : (BOOL v29 = 0), !v29))
  {
    uint64_t v4 = a1 + 1;
  }
  if (v5 != v3 || (float result = 0.0, v4 != v3))
  {
    BOOL v10 = v4 == v3;
    uint64_t v31 = v4 + 5;
    if (v10) {
      uint64_t v31 = a1 + 6;
    }
    if (v5 == v3) {
      uint64_t v32 = v31;
    }
    else {
      uint64_t v32 = v5 + 5;
    }
    return *(double *)v32;
  }
  return result;
}

void sub_1A1842C54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1842CC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1842D48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1842E80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void VKCameraMakeGroundPoint(const VKCameraState *a1, CGPoint a2, double a3, double *a4)
{
  double y = a2.y;
  double x = a2.x;
  double v8 = a4[3];
  double v9 = a4[4];
  double v11 = a4[5];
  double v10 = a4[6];
  double v12 = a4[7];
  double v13 = tan(a4[8] * 0.5);
  char v14 = 0;
  double v15 = a4[2];
  if (v15 > 0.0)
  {
    double v16 = v11 * (v13 * v12 + v13 * v12);
    double v17 = v9 * -2.0 * (v13 * v12);
    double v18 = v17 * v10;
    double v19 = v13 * v12 + v17 * v9 - v16 * v11;
    double v20 = -(v17 * v8 - v16 * v10);
    double v21 = v18 + v16 * v8;
    double v22 = v11 * -2.0 * v13;
    double v23 = (v8 + v8) * v13;
    double v24 = v23 * v10;
    double v25 = v23 * v9 + v22 * v10;
    double v26 = v13 + v22 * v11 - v23 * v8;
    double v27 = x * 2.0 + -1.0;
    double v28 = y * 2.0 + -1.0;
    double v29 = v25 * v28 - (v11 * (v8 + v8) - v10 * (v9 * -2.0)) + v19 * v27;
    double v30 = v9 * -2.0 * v11 + v10 * (v8 + v8) + v20 * v27 + v26 * v28;
    double v31 = -(-(v24 - v22 * v9) * v28 - ((v8 + v8) * v8 + -1.0 - v9 * -2.0 * v9) - v21 * v27);
    double v32 = 1.0 / sqrt(v30 * v30 + v31 * v31 + v29 * v29);
    double v33 = v32 * v31;
    if (v33 < 0.0)
    {
      double v34 = v32 * v30;
      double v35 = v32 * v29;
      double v36 = -v15 / v33;
      double v37 = a4[1] + v34 * v36;
      a1->var0._translation._e[1] = *a4 + v35 * v36;
      a1->var0._translation._e[2] = v37;
      a1->var0._rotation._imaginary._e[0] = v15 + v36 * v33;
      char v14 = 1;
    }
  }
  LOBYTE(a1->var0._translation._e[0]) = v14;
}

void sub_1A184307C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1843118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::MapEngine::updateRunLoopStatus(md::MapEngine *this)
{
  [*((id *)this + 105) size];
  char v4 = *((unsigned char *)this + 1177);
  if (v4) {
    char v4 = *((unsigned char *)this + 1178) == 0;
  }
  BOOL v5 = 0;
  if ((v4 & 1) == 0 && !*((unsigned char *)this + 1176))
  {
    double v6 = v3 * v2;
    if ([*((id *)this + 105) hasRenderTarget])
    {
      if (v6 <= 0.0)
      {
        BOOL v5 = 0;
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    BOOL v5 = 0;
    if (*((void *)this + 150) == 1 && v6 > 0.0)
    {
LABEL_10:
      unsigned __int8 v7 = atomic_load((unsigned __int8 *)this + 1181);
      BOOL v5 = (v7 & 1) == 0;
    }
  }
LABEL_11:
  (*(void (**)(void, BOOL))(**((void **)this + 13) + 48))(*((void *)this + 13), v5);
  if (v5)
  {
    id WeakRetained = objc_loadWeakRetained((id *)this + 106);

    if (WeakRetained
      && (id v9 = objc_loadWeakRetained((id *)this + 106), v10 = [v9 wantsTimerTick], v9, v10))
    {
      atomic_fetch_or((atomic_ullong *volatile)this + 174, 0x20uLL);
      int v11 = 1;
    }
    else
    {
      int v11 = 0;
    }
    if (md::AnimationManager::wantsTimerTick(*((md::AnimationManager **)this + 13))) {
      atomic_fetch_or((atomic_ullong *volatile)this + 174, 0x40uLL);
    }
    if ((v11 | md::AnimationManager::wantsTimerTick(*((md::AnimationManager **)this + 13)))) {
      goto LABEL_21;
    }
    unsigned __int8 v12 = atomic_load((unsigned __int8 *)this + 1179);
    if (v12) {
      goto LABEL_21;
    }
  }
  double v13 = +[VKDebugSettings sharedSettings];
  char v14 = [v13 layoutContinuously];

  if (v14)
  {
LABEL_21:
    uint64_t v15 = *((void *)this + 11);
    if (!v15) {
      goto LABEL_37;
    }
    int v16 = 1;
    int v17 = 1;
  }
  else
  {
    if (*((unsigned char *)this + 1160)) {
      md::MapEngine::setDisplayRate((uint64_t)this, *((void *)this + 146));
    }
    uint64_t v15 = *((void *)this + 11);
    if (!v15) {
      goto LABEL_37;
    }
    int v16 = 0;
    int v17 = *((unsigned __int8 *)this + 1160);
  }
  if (v17 == (*(unsigned int (**)(uint64_t))(*(void *)v15 + 24))(v15))
  {
    atomic_fetch_add((atomic_uint *volatile)this + 228, 1u);
    (*(void (**)(void, void))(**((void **)this + 11) + 16))(*((void *)this + 11), v16 ^ 1u);
    if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
    }
    double v18 = (id)GEOGetVectorKitPerformanceLog_log;
    BOOL v19 = os_signpost_enabled(v18);
    if (v16)
    {
      if (v19)
      {
        __int16 v23 = 0;
        double v20 = "DisplayLinkUnpause";
        double v21 = (uint8_t *)&v23;
LABEL_35:
        _os_signpost_emit_with_name_impl(&dword_1A1780000, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v20, "", v21, 2u);
      }
    }
    else if (v19)
    {
      __int16 v22 = 0;
      double v20 = "DisplayLinkPause";
      double v21 = (uint8_t *)&v22;
      goto LABEL_35;
    }
  }
LABEL_37:
  atomic_store(0, (unsigned __int8 *)this + 1180);
}

void sub_1A18433F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t md::AnimationManager::wantsTimerTick(md::AnimationManager *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 184);
  if (v1) {
    return 1;
  }
  double v3 = (std::mutex *)((char *)this + 40);
  std::mutex::lock((std::mutex *)((char *)this + 40));
  for (uint64_t i = (uint64_t **)*((void *)this + 15); i; uint64_t i = (uint64_t **)*i)
  {
    unsigned __int8 v7 = i[3];
    int v8 = [v7 running];

    if (v8)
    {
      id v9 = i[3];
      char v10 = [v9 hasFrequency];

      if ((v10 & 1) == 0) {
        goto LABEL_12;
      }
    }
  }
  BOOL v5 = (uint64_t **)*((void *)this + 20);
  if (v5)
  {
    while (1)
    {
      int v11 = v5[3];
      int v12 = [v11 running];

      if (v12)
      {
        double v13 = v5[3];
        int v14 = [v13 hasFrequency];

        if (!v14) {
          break;
        }
      }
      BOOL v5 = (uint64_t **)*v5;
      if (!v5) {
        goto LABEL_4;
      }
    }
LABEL_12:
    uint64_t v6 = 1;
    goto LABEL_13;
  }
LABEL_4:
  uint64_t v6 = 0;
LABEL_13:
  std::mutex::unlock(v3);
  return v6;
}

void sub_1A1843508(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t ggl::DisplayLink::paused(id *this)
{
  return [this[9] isPaused];
}

void md::AnimationManager::setEnabled(md::AnimationManager *this, int a2)
{
  if (*((unsigned __int8 *)this + 232) != a2)
  {
    *((unsigned char *)this + 232) = a2;
    double v2 = (uint64_t **)*((void *)this + 26);
    if (a2)
    {
      for (; v2; double v2 = (uint64_t **)*v2)
      {
        uint64_t v6 = v2[3];
        double v3 = v6;
        [v3 frequency];
        double v5 = 1.0 / v4;

        (*(void (**)(uint64_t *, double, double))(*v2[5] + 32))(v2[5], 0.0, v5);
      }
    }
    else
    {
      for (; v2; double v2 = (uint64_t **)*v2)
        (*(void (**)(uint64_t *))(*v2[5] + 40))(v2[5]);
    }
  }
}

void sub_1A184369C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1A18436F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1843820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A184397C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A1844270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ggl::DisplayLink::setPaused(id *this, uint64_t a2)
{
  return [this[9] setPaused:a2];
}

void md::LabelManager::updateDebugSettings(md::LabelManager *this)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  double v2 = (unsigned char *)*((void *)this + 483);
  BOOL v3 = *v2 != 0;
  if (*v2)
  {
    *double v2 = 0;
    uint64_t v4 = *((void *)this + 481);
    double v5 = (const char *)(v4 + 16);
    if (*(char *)(v4 + 39) < 0) {
      double v5 = *(const char **)v5;
    }
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = "\n    {\n        default:false,\n    }\n    ";
    }
    *((unsigned char *)this + 3860) = 0;
    *((_DWORD *)this + 964) = 0;
    size_t v7 = strlen(v6);
    if (v7 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    size_t v8 = v7;
    if (v7 >= 0x17)
    {
      uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v10 = v7 | 7;
      }
      uint64_t v11 = v10 + 1;
      id v9 = operator new(v10 + 1);
      __dst[1] = v8;
      unint64_t v47 = v11 | 0x8000000000000000;
      __dst[0] = v9;
    }
    else
    {
      HIBYTE(v47) = v7;
      id v9 = __dst;
      if (!v7)
      {
LABEL_15:
        *((unsigned char *)v9 + v8) = 0;
        md::StyleSettingsParser::StyleSettingsParser((uint64_t)&__p);
      }
    }
    memcpy(v9, v6, v8);
    goto LABEL_15;
  }
  id v44 = +[VKDebugSettings sharedSettings];
  *((unsigned char *)this + 3608) = [v44 layoutContinuously];
  *((unsigned char *)this + 3609) = [v44 labelUpdateMapTilesContinuously];
  *((unsigned char *)this + 3610) = [v44 labelCollisionDisabled] ^ 1;
  *((unsigned char *)this + 3611) = [v44 labelCollideContinuously];
  atomic_store([v44 labelTileDecodeEnabled], (unsigned __int8 *)this + 3622);
  *((unsigned char *)this + 3646) = [v44 disableBackgroundLabelLayout];
  *((unsigned char *)this + 3616) = [v44 paintLabelRoadFeatures];
  *((unsigned char *)this + 3617) = [v44 paintLabelCounts];
  *((unsigned char *)this + 3618) = [v44 showClientStyleAttributes];
  *((unsigned char *)this + 3619) = [v44 showLabelsNavState];
  *((unsigned char *)this + 3620) = [v44 showFlexZoneRanges];
  *((unsigned char *)this + 3623) = [v44 paintLabelCollisionLines];
  *((unsigned char *)this + 3624) = *(unsigned char *)(*((void *)this + 42) + 157) ^ 1;
  *((unsigned char *)this + 3625) = [v44 textlessPOIsEnabled];
  [v44 textlessPOIsMinZoom];
  *((_DWORD *)this + 908) = v12;
  *((unsigned char *)this + 3626) = [v44 displayTextureAtlas];
  *((_WORD *)this + 1814) = [v44 textureAtlasPageIndex];
  *((unsigned char *)this + 3627) = [v44 textureAtlasIndex];
  if ([v44 labelFlipAlternatePositionsEnable]) {
    *((unsigned char *)this + 3624) ^= 1u;
  }
  BOOL v13 = ([v44 labelHideLineFeatures] & 1) != 0 || *((unsigned char *)this + 3858) != 0;
  *((unsigned char *)this + 3637) = v13;
  BOOL v14 = ([v44 labelHidePointFeatures] & 1) != 0 || *((unsigned char *)this + 3857) != 0;
  *((unsigned char *)this + 3638) = v14;
  BOOL v15 = ([v44 labelHidePhysicalFeatures] & 1) != 0 || *((unsigned char *)this + 3859) != 0;
  *((unsigned char *)this + 3639) = v15;
  BOOL v16 = ([v44 hideDirectionalArrows] & 1) != 0 || *((unsigned char *)this + 3860) != 0;
  *((unsigned char *)this + 3640) = v16;
  int v17 = *((unsigned __int8 *)this + 3856);
  *((unsigned char *)this + 3636) = v17;
  if (*((unsigned char *)this + 3637) || *((unsigned char *)this + 3638))
  {
    BOOL v16 = 1;
  }
  else if (*((unsigned __int8 *)this + 3639) | v17)
  {
    BOOL v16 = 1;
  }
  *((unsigned char *)this + 3641) = v16;
  *((unsigned char *)this + 3621) = [v44 labelTransitLineCollisionEnabled];
  *((unsigned char *)this + 3642) = [v44 labelHighlightingVerboseLoggingEnabled];
  *((unsigned char *)this + 3643) = [v44 disableOverlayTextConsole];
  *((unsigned char *)this + 3644) = [v44 labelHighlightingTransitFeaturesOnly];
  *((_DWORD *)this + 912) = [v44 debugOverlayOffsetX];
  *((_DWORD *)this + 913) = [v44 debugOverlayOffsetY];
  *((unsigned char *)this + 3657) = [v44 showGRLDebugInfo];
  atomic_store([v44 labelAllowDefaultStyle], (unsigned __int8 *)this + 3658);
  atomic_store([v44 labelUseDefaultStyle], (unsigned __int8 *)this + 3659);
  *((unsigned char *)this + 3662) = [v44 labelAllowDefaultIcon];
  *((unsigned char *)this + 3663) = [v44 labelRingAnimationEnabled];
  *((unsigned char *)this + 3664) = [v44 labelDebugHoverLayers];
  *((unsigned char *)this + 3665) = [v44 labelShowPlaceholderIcons];
  atomic_store(*((unsigned char *)this + 3784), (unsigned __int8 *)this + 3660);
  atomic_store(*((unsigned char *)this + 3704), (unsigned __int8 *)this + 3661);
  *((unsigned char *)this + 3656) = [v44 enableLabelAnimationTuning];
  *((unsigned char *)this + 3686) = [v44 labelPOIUpdatesDisabled];
  if ([v44 shouldOverrideSuperSampleKernelSize])
  {
    [v44 sdfGlyphSuperSampleKernelSize];
    char v19 = 1;
  }
  else
  {
    char v19 = 0;
    int v18 = 0;
  }
  *((_DWORD *)this + 917) = v18;
  *((unsigned char *)this + 3672) = v19;
  if ([v44 shouldOverrideUpscaleFactor])
  {
    [v44 sdfGlyphShaderUpscaleFactor];
    unsigned int v21 = v20;
    char v22 = 1;
  }
  else
  {
    char v22 = 0;
    unsigned int v21 = 0;
  }
  *((_DWORD *)this + 919) = v21;
  *((unsigned char *)this + 3680) = v22;
  *((unsigned char *)this + 3684) = [v44 shouldUseSDFGlyphs];
  *((unsigned char *)this + 3685) = [v44 shouldUseSDFSuperSampling];
  int v23 = *((unsigned __int8 *)this + 3614);
  if (v23 != [v44 labelFacingCullDisabled])
  {
    *((unsigned char *)this + 3614) = [v44 labelFacingCullDisabled];
    BOOL v3 = 1;
  }
  int v24 = *((unsigned __int8 *)this + 3613);
  if (v24 != [v44 labelDedupingDisabled])
  {
    *((unsigned char *)this + 3613) = [v44 labelDedupingDisabled];
    BOOL v3 = 1;
  }
  int v25 = *((unsigned __int8 *)this + 3612);
  if (v25 != ([v44 labelOcclusionDisabled] ^ 1))
  {
    *((unsigned char *)this + 3612) = [v44 labelOcclusionDisabled] ^ 1;
    BOOL v3 = 1;
  }
  int v26 = *((unsigned __int8 *)this + 3645);
  if (v26 == [v44 labelAutoOffsetRoadText])
  {
    if (!v3) {
      goto LABEL_53;
    }
  }
  else
  {
    *((unsigned char *)this + 3645) = [v44 labelAutoOffsetRoadText];
  }
  std::string __p = &unk_1EF56E5F8;
  uint64_t v49 = this;
  uint64_t v50 = 0;
  p_p = &__p;
  md::LabelManager::queueCommand(this, 19, 1, &__p);
  if (p_p == &__p)
  {
    (*((void (**)(void **))__p + 4))(&__p);
  }
  else if (p_p)
  {
    (*((void (**)(void))*p_p + 5))();
  }
LABEL_53:

  id v45 = +[VKDebugSettings sharedSettings];
  if (([v45 labelHighlighting] & 1) == 0
    && ([v45 lockLabelHighlighting] & 1) == 0
    && !*((unsigned char *)this + 3643))
  {
    (*(void (**)(void))(**((void **)this + 30) + 272))(*((void *)this + 30));
  }
  (*(void (**)(void))(**((void **)this + 30) + 248))(*((void *)this + 30));
  double v27 = (float *)((char *)this + 3668);
  uint64_t v28 = *((void *)this + 41);
  double v29 = (float *)(v28 + 1852);
  if (*((unsigned char *)this + 3672) && *(unsigned char *)(v28 + 1856))
  {
    if (*v27 == *v29) {
      goto LABEL_65;
    }
  }
  else if ((*((unsigned char *)this + 3672) != 0) == (*(unsigned char *)(v28 + 1856) != 0))
  {
    goto LABEL_65;
  }
  float v30 = *v27;
  *(unsigned char *)(v28 + 1856) = *((unsigned char *)this + 3672);
  *double v29 = v30;
  if (!*(unsigned char *)(v28 + 1856)) {
    double v29 = (float *)&kDefaultSdfGlyphSuperSampleKernelSize;
  }
  _S0 = *v29;
  double v32 = *(void **)(v28 + 992);
  unint64_t v33 = v32[1];
  __asm { FCVT            H0, S0 }
  *(_WORD *)(v32[9] + 16) = LOWORD(_S0);
  if (v32[8] > v33) {
    unint64_t v33 = v32[8];
  }
  v32[7] = 0;
  v32[8] = v33;
LABEL_65:
  long long v38 = (int *)((char *)this + 3676);
  *(unsigned char *)(v28 + 1861) = *((unsigned char *)this + 3684);
  *(unsigned char *)(v28 + 1860) = *((unsigned char *)this + 3685);
  uint64_t v39 = (md::LabelManager *)*((void *)this + 35);
  uint64_t v40 = (int *)((char *)v39 + 68);
  if (*((unsigned char *)v39 + 72) && *((unsigned char *)this + 3680))
  {
    if (*v40 == *v38) {
      goto LABEL_81;
    }
  }
  else if ((*((unsigned char *)v39 + 72) != 0) == (*((unsigned char *)this + 3680) != 0))
  {
    goto LABEL_81;
  }
  int v41 = *v38;
  *((unsigned char *)v39 + 72) = *((unsigned char *)this + 3680);
  *uint64_t v40 = v41;
  if (!*((unsigned char *)v39 + 72)) {
    uint64_t v40 = (int *)&kDefaultUpscaleFactor;
  }
  int v42 = *v40;
  unsigned int v43 = atomic_load((unsigned int *)(*(void *)v39 + 104));
  if (v42 != v43)
  {
    std::string __p = &unk_1EF575678;
    uint64_t v49 = v39;
    p_p = &__p;
    md::LabelGlyphImageLoader::queueCommand(v39, &__p);
    if (p_p == &__p)
    {
      (*((void (**)(void **))__p + 4))(&__p);
    }
    else if (p_p)
    {
      (*((void (**)(void))*p_p + 5))();
    }
  }
LABEL_81:
}

void sub_1A1844CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18 == v18)
  {
    (*(void (**)(uint64_t *))(a15 + 32))(&a15);
  }
  else if (a18)
  {
    (*(void (**)(void))(*(void *)a18 + 40))();
  }

  _Unwind_Resume(a1);
}

uint64_t md::CompositeLabeler::clearDebugHighlight(uint64_t this)
{
  unsigned __int8 v1 = *(uint64_t **)(this + 8);
  for (uint64_t i = *(uint64_t **)(this + 16); v1 != i; this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 272))(v3))
    uint64_t v3 = *v1++;
  return this;
}

void md::StandardLabeler::clearDebugHighlight(md::StandardLabeler *this)
{
  v4[0] = 0;
  v4[1] = 0;
  v1[1] = 0;
  v2[0] = 0;
  v1[0] = 0;
  v2[3] = -1;
  *(void *)&v2[1] = -1;
  uint64_t v3 = 0;
  md::StandardLabeler::setDebugHighlight((uint64_t)this, v4, v1);
}

void sub_1A1844E5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v2 - 32);
  _Unwind_Resume(a1);
}

void md::StandardLabeler::setDebugHighlight(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(*(void *)(a1 + 24) + 3644)
    || !*a3
    || (*(unsigned int (**)(void))(*(void *)*a3 + 264))(*a3) - 8 <= 5)
  {
    uint64_t v6 = *(void *)(a1 + 184);
    if (v6 != *a2)
    {
      if (v6)
      {
        atomic_store(0, (unsigned __int8 *)(v6 + 1242));
        unsigned __int8 v7 = atomic_load((unsigned __int8 *)(v6 + 1242));
        if ((v7 & 1) == 0) {
          *(void *)(v6 + 352) = 0;
        }
      }
      uint64_t v8 = *a2;
      uint64_t v9 = a2[1];
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v10 = *(std::__shared_weak_count **)(a1 + 192);
      *(void *)(a1 + 184) = v8;
      *(void *)(a1 + 192) = v9;
      if (v10)
      {
        if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        uint64_t v8 = *(void *)(a1 + 184);
      }
      if (v8)
      {
        atomic_store(1u, (unsigned __int8 *)(v8 + 1242));
        unsigned __int8 v11 = atomic_load((unsigned __int8 *)(v8 + 1242));
        if ((v11 & 1) == 0) {
          *(void *)(v8 + 352) = 0;
        }
      }
      uint64_t v12 = *(void *)(*(void *)(a1 + 24) + 136);
      if (v12)
      {
        uint64_t v13 = *(void *)(v12 + 24);
        if (v13)
        {
          __p[0] = *(void **)(a1 + 24);
          buf[0] = 9;
          (*(void (**)(uint64_t, void **, uint8_t *))(*(void *)v13 + 48))(v13, __p, buf);
        }
      }
    }
    uint64_t v14 = *(void *)(a1 + 200);
    uint64_t v15 = *a3;
    if (v14 != *a3
      || *(_DWORD *)(a1 + 216) != *((_DWORD *)a3 + 4)
      || *(_DWORD *)(a1 + 220) != *((_DWORD *)a3 + 5)
      || *(_DWORD *)(a1 + 224) != *((_DWORD *)a3 + 6)
      || *(_DWORD *)(a1 + 228) != *((_DWORD *)a3 + 7))
    {
      if (v14)
      {
        atomic_store(0, (unsigned __int8 *)(v14 + 139));
        uint64_t v15 = *a3;
      }
      uint64_t v16 = a3[1];
      if (v16) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
      }
      int v17 = *(std::__shared_weak_count **)(a1 + 208);
      *(void *)(a1 + 200) = v15;
      *(void *)(a1 + 208) = v16;
      if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      *(_DWORD *)(a1 + 216) = *((_DWORD *)a3 + 4);
      long long v18 = *(_OWORD *)((char *)a3 + 20);
      *(_DWORD *)(a1 + 236) = *((_DWORD *)a3 + 9);
      *(_OWORD *)(a1 + 220) = v18;
      uint64_t v19 = *(void *)(a1 + 200);
      if (v19) {
        atomic_store(1u, (unsigned __int8 *)(v19 + 139));
      }
      uint64_t v20 = *(void *)(*(void *)(a1 + 24) + 136);
      if (v20)
      {
        uint64_t v21 = *(void *)(v20 + 24);
        if (v21)
        {
          __p[0] = *(void **)(a1 + 24);
          buf[0] = 9;
          (*(void (**)(uint64_t, void **, uint8_t *))(*(void *)v21 + 48))(v21, __p, buf);
        }
      }
    }
    if (*(void *)(a1 + 184))
    {
      if (GEOGetVectorKitLabelHighlightLog(void)::onceToken != -1) {
        dispatch_once(&GEOGetVectorKitLabelHighlightLog(void)::onceToken, &__block_literal_global_29016);
      }
      char v22 = (id)GEOGetVectorKitLabelHighlightLog(void)::log;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        md::Label::debugString((md::Label *)__p, *(md::LabelManager **)(a1 + 184), *(void *)(a1 + 24));
        int v23 = v27 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        double v29 = v23;
        _os_log_impl(&dword_1A1780000, v22, OS_LOG_TYPE_INFO, "\n%s", buf, 0xCu);
        if (v27 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    if (*(void *)(a1 + 200))
    {
      if (GEOGetVectorKitLabelHighlightLog(void)::onceToken != -1) {
        dispatch_once(&GEOGetVectorKitLabelHighlightLog(void)::onceToken, &__block_literal_global_29016);
      }
      int v24 = (id)GEOGetVectorKitLabelHighlightLog(void)::log;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        (*(void (**)(void **__return_ptr))(**(void **)(a1 + 200) + 448))(__p);
        if (v27 >= 0) {
          int v25 = __p;
        }
        else {
          int v25 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315138;
        double v29 = v25;
        _os_log_impl(&dword_1A1780000, v24, OS_LOG_TYPE_INFO, "\n%s", buf, 0xCu);
        if (v27 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_1A18452F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::CompositeLabeler::updateDebugSettings(md::CompositeLabeler *this)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 1);
  uint64_t v3 = (uint64_t *)*((void *)this + 2);
  while (v2 != v3)
  {
    uint64_t v4 = *v2++;
    (*(void (**)(uint64_t))(*(void *)v4 + 248))(v4);
  }
  id v5 = +[VKDebugSettings sharedSettings];
  *((unsigned char *)this + 40) = [v5 labelerOutputIndex];
}

void sub_1A18453B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void md::MapNavLabeler::updateDebugSettings(md::MapNavLabeler *this)
{
  id v8 = +[VKDebugSettings sharedSettings];
  *((unsigned char *)this + 827) = [v8 disableRouteAnnotationLimit];
  id v2 = *((id *)this + 7);
  objc_msgSend(v2, "setDebugDisableRoadSignLimit:", objc_msgSend(v8, "disableRoadSignLimit"));

  uint64_t v3 = *((void *)this + 9);
  *(unsigned char *)(v3 + 232) = [v8 enableTrafficFeatureLabelDebugging];
  uint64_t v4 = *((void *)this + 8);
  *(unsigned char *)(v4 + 249) = [v8 enableRouteLineLabelingDebugging];
  int v5 = [v8 enableRoadSignArtworkDebugging];
  uint64_t v6 = *((void *)this + 87);
  if (v5 != (*(unsigned char *)(v6 + 24) != 0))
  {
    char v7 = [v8 enableRoadSignArtworkDebugging];
    *(unsigned char *)(v6 + 24) = v7;
    *(unsigned char *)(*(void *)(v6 + 16) + 80) = v7;
    (*(void (**)(md::MapNavLabeler *, uint64_t))(*(void *)this + 104))(this, 2);
  }
}

void sub_1A18454C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void md::MapStandardLabeler::updateDebugSettings(md::MapStandardLabeler *this)
{
  id v2 = +[VKDebugSettings sharedSettings];
  *((unsigned char *)this + 452) = [v2 enableTrafficFeatureLabelDebugging];
}

void sub_1A1845538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t gdc::CameraLimits::CameraLimits(uint64_t a1, double *a2, double *a3, double *a4, long double *a5, void *a6, double *a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11)
{
  *(double *)a1 = a9;
  *(void *)(a1 + 8) = *a6;
  long double v18 = cos(*a5);
  double v19 = *(double *)(a8 + 16);
  float v20 = 0.0;
  float v21 = 0.0;
  if (v19 > 0.0) {
    float v21 = log2(*(double *)(a8 + 8) / v19);
  }
  double v62 = v18;
  float v22 = *(float *)a8;
  float v61 = fminf(fmaxf(*(float *)a8 + v21, 1.0), 25.0);
  double v23 = *(double *)(a10 + 16);
  if (v23 > 0.0) {
    float v20 = log2(*(double *)(a10 + 8) / v23);
  }
  float v24 = fminf(fmaxf(*(float *)a10 + v20, 1.0), 25.0);
  double v25 = *a3 * 0.5;
  float v26 = v25;
  double v27 = cosf(v26);
  double v28 = *(double *)a6;
  float v29 = *(double *)a6;
  double v30 = cosf(v29);
  double v31 = exp2(v24);
  long double v32 = tan(*a4 * 0.5);
  long double v33 = v32 + v32;
  long double v34 = (v32 + v32) * v27 * v31;
  *(float *)&long double v32 = v28 - v25;
  double v35 = v62 * cosf(*(float *)&v32) / (v34 * v30);
  double v36 = (1.0 - exp2((float)-v22)) / v33;
  double v37 = exp2((float)-v61) / v33;
  long double v38 = *a7;
  double v39 = *a7 + v25;
  if (v39 < 1.57079633)
  {
    double v40 = cos(v25);
    long double v41 = cos(v39) * v37;
    double v37 = v41 / (v40 * cos(v38));
  }
  double v42 = fmin(v36, v37);
  double v43 = fmax(v35, *(double *)(a11 + 8));
  if (!*(unsigned char *)a11) {
    double v43 = v35;
  }
  if (*(unsigned char *)(a11 + 16))
  {
    double v44 = fmax(v43, *(double *)(a11 + 24));
    double v42 = fmin(v44, v42);
    double v36 = fmin(v44, v36);
  }
  double v45 = fmin(v42, v43);
  *(double *)(a1 + 48) = v45;
  *(double *)(a1 + 56) = v42;
  *(double *)(a1 + 64) = v36;
  double v46 = *a2;
  long double v47 = cos(v46 + v46) * -559.82 + 111132.92;
  long double v48 = v47 + cos(v46 * 4.0) * 1.175;
  long double v49 = v48 + cos(v46 * 6.0) * -0.0023;
  double v50 = v46 * 0.5;
  long double v51 = tan(v50 + 0.78103484);
  double v52 = log(v51);
  long double v53 = tan(v50 + 0.789761487);
  long double v54 = fabs((log(v53) - v52) * 0.159154943) / v49;
  *(long double *)(a1 + 32) = v45 * v62 / v54;
  *(long double *)(a1 + 40) = v42 * v62 / v54;
  long double v55 = tan(*a4 * 0.5);
  long double v56 = v55 + v55;
  float v57 = log2((v55 + v55) * v45);
  *(float *)(a1 + 16) = fminf(fmaxf(-v57, 1.0), 25.0);
  float v58 = log2(v56 * v42);
  *(float *)(a1 + 20) = fminf(fmaxf(-v58, 1.0), 25.0);
  float v59 = log2(v56 * v36);
  *(float *)(a1 + 24) = fminf(fmaxf(-v59, 1.0), 25.0);
  return a1;
}

void sub_1A1845EDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void setupAttachments(ggl::MetalResourceManager *,ggl::RenderTarget *,ggl::PassDescriptor const&,ggl::ClearItem *,MTLRenderPassDescriptor *,unsigned long)::$_0::operator()(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  id v20 = v5;
  if (!a3)
  {
    [v5 setTexture:0];
    [v20 setLoadAction:0];
    uint64_t v11 = 0;
    goto LABEL_6;
  }
  [v5 setTexture:**(void **)a1];
  [v20 setLevel:*(void *)(**(void **)(a1 + 8) + 288)];
  [v20 setSlice:*(void *)(**(void **)(a1 + 8) + 296)];
  int v6 = *(_DWORD *)(*(void *)(a1 + 16) + 40);
  uint64_t v7 = **(void **)(a1 + 24);
  uint64_t v8 = **(void **)(a1 + 32);
  if (v8 && *(unsigned char *)(v8 + 28))
  {
    uint64_t v9 = 2;
    uint64_t v10 = v20;
    goto LABEL_16;
  }
  uint64_t v10 = v20;
  if (*(_DWORD *)(v7 + 56))
  {
    int v12 = 0;
    if (v6 != 2) {
      goto LABEL_11;
    }
LABEL_14:
    uint64_t v9 = 1;
    goto LABEL_16;
  }
  int v12 = *(_DWORD *)(v7 + 76);
  if (v6 == 2) {
    goto LABEL_14;
  }
LABEL_11:
  if (v6) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v12 == 0;
  }
LABEL_16:
  [v10 setLoadAction:v9];
  uint64_t v13 = *(void *)(a1 + 8);
  int v14 = *(_DWORD *)(*(void *)(a1 + 16) + 44);
  uint64_t v15 = *(void *)(*(void *)v13 + 304);
  if (v15)
  {
    uint64_t v16 = *(void *)(*(void *)v13 + 304);
    if (*(_DWORD *)(v15 + 56)) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v16 = **(void **)(a1 + 24);
    if (*(_DWORD *)(v16 + 56))
    {
LABEL_18:
      int v17 = 0;
      if (v14 != 3) {
        goto LABEL_19;
      }
LABEL_28:
      if (v15) {
        uint64_t v11 = 2;
      }
      else {
        uint64_t v11 = 1;
      }
      goto LABEL_6;
    }
  }
  int v17 = *(_DWORD *)(v16 + 76);
  if (v14 == 3) {
    goto LABEL_28;
  }
LABEL_19:
  if (v14 == 2)
  {
    uint64_t v11 = 1;
  }
  else if (v14)
  {
    uint64_t v11 = 0;
  }
  else
  {
    BOOL v18 = v15 == 0;
    uint64_t v19 = 1;
    if (!v18) {
      uint64_t v19 = 2;
    }
    if (v17) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v19;
    }
  }
LABEL_6:
  [v20 setStoreAction:v11];
}

void sub_1A1846394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *>(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned int v6 = *((unsigned __int16 *)a2 + 1);
  unsigned int v7 = *((unsigned __int16 *)a1 + 1);
  BOOL v8 = v6 >= v7;
  if (v6 == v7 && (v9 = *a2, v10 = *a1, BOOL v8 = v9 >= v10, v9 == v10)) {
    BOOL v11 = gdc::GenericKey::operator<(*((void *)a2 + 1), *((void *)a2 + 2), *((void *)a1 + 1), *((void *)a1 + 2));
  }
  else {
    BOOL v11 = !v8;
  }
  unsigned int v13 = *((unsigned __int16 *)a3 + 1);
  BOOL v14 = v13 >= v6;
  if (v13 != v6 || (v15 = *a3, v16 = *a2, BOOL v14 = v15 >= v16, v15 != v16))
  {
    BOOL v17 = !v14;
    if (!v11) {
      goto LABEL_10;
    }
LABEL_19:
    if (v17)
    {
      double v23 = (uint64_t *)a1;
    }
    else
    {
      double result = std::swap[abi:nn180100]<gdc::ResourceKey>((uint64_t *)a1, (uint64_t *)a2);
      unsigned int v24 = *((unsigned __int16 *)a3 + 1);
      unsigned int v25 = *((unsigned __int16 *)a2 + 1);
      BOOL v26 = v24 >= v25;
      if (v24 == v25 && (v27 = *a3, v28 = *a2, BOOL v26 = v27 >= v28, v27 == v28))
      {
        if (!gdc::GenericKey::operator<(*((void *)a3 + 1), *((void *)a3 + 2), *((void *)a2 + 1), *((void *)a2 + 2)))return result; {
      }
        }
      else if (v26)
      {
        return result;
      }
      double v23 = (uint64_t *)a2;
    }
    float v29 = (uint64_t *)a3;
    goto LABEL_30;
  }
  BOOL v17 = gdc::GenericKey::operator<(*((void *)a3 + 1), *((void *)a3 + 2), *((void *)a2 + 1), *((void *)a2 + 2));
  if (v11) {
    goto LABEL_19;
  }
LABEL_10:
  if (!v17) {
    return result;
  }
  double result = std::swap[abi:nn180100]<gdc::ResourceKey>((uint64_t *)a2, (uint64_t *)a3);
  unsigned int v18 = *((unsigned __int16 *)a2 + 1);
  unsigned int v19 = *((unsigned __int16 *)a1 + 1);
  BOOL v20 = v18 >= v19;
  if (v18 == v19 && (v21 = *a2, v22 = *a1, BOOL v20 = v21 >= v22, v21 == v22))
  {
    if (!gdc::GenericKey::operator<(*((void *)a2 + 1), *((void *)a2 + 2), *((void *)a1 + 1), *((void *)a1 + 2))) {
      return result;
    }
  }
  else if (v20)
  {
    return result;
  }
  double v23 = (uint64_t *)a1;
  float v29 = (uint64_t *)a2;
LABEL_30:
  return std::swap[abi:nn180100]<gdc::ResourceKey>(v23, v29);
}

void std::__introsort<std::_ClassicAlgPolicy,anonymous namespace'::LayerDataIndexLessThan &,gdc::LayerDataIndex *,false>(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, char a4)
{
BOOL gdc::GenericKey::operator<(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a2 - a1;
  if (a2 - a1 < (unint64_t)(a4 - a3)) {
    return 1;
  }
  uint64_t v5 = 0;
  if (a2 - a1 > (unint64_t)(a4 - a3) || v4 < 4) {
    return v5;
  }
  unint64_t v7 = v4 >> 2;
  if (v7 <= 1) {
    unint64_t v7 = 1;
  }
  uint64_t v8 = 0;
  if ((a1 & 3) != 0)
  {
    if ((a3 & 3) != 0)
    {
      while (1)
      {
        int v9 = *(_DWORD *)(a1 + (v8 & 0x3FC));
        int v10 = *(_DWORD *)(a3 + (v8 & 0x3FC));
        if (v9 != v10) {
          break;
        }
        LOWORD(v8) = v8 + 4;
        if (!--v7) {
          return 0;
        }
      }
    }
    else
    {
      while (1)
      {
        uint64_t v11 = 4 * v8;
        int v9 = *(_DWORD *)(a1 + v11);
        int v10 = *(_DWORD *)(a3 + v11);
        if (v9 != v10) {
          break;
        }
        uint64_t v5 = 0;
        if (v7 == ++v8) {
          return v5;
        }
      }
    }
  }
  else if ((a3 & 3) != 0)
  {
    while (1)
    {
      uint64_t v12 = 4 * v8;
      int v9 = *(_DWORD *)(a1 + v12);
      int v10 = *(_DWORD *)(a3 + v12);
      if (v9 != v10) {
        break;
      }
      uint64_t v5 = 0;
      if (v7 == ++v8) {
        return v5;
      }
    }
  }
  else
  {
    while (1)
    {
      uint64_t v13 = 4 * v8;
      int v9 = *(_DWORD *)(a1 + v13);
      int v10 = *(_DWORD *)(a3 + v13);
      if (v9 != v10) {
        break;
      }
      uint64_t v5 = 0;
      if (v7 == ++v8) {
        return v5;
      }
    }
  }
  return v9 < v10;
}

void std::swap[abi:nn180100]<gdc::LayerDataIndex>(uint64_t a1, uint64_t a2)
{
  char v43 = *(unsigned char *)a1;
  gdc::LayerDataKey::LayerDataKey((uint64_t)&v44, a1 + 8);
  char v49 = 0;
  if (*(unsigned char *)(a1 + 96))
  {
    int v50 = *(_DWORD *)(a1 + 100);
    char v49 = 1;
  }
  uint64_t v51 = *(void *)(a1 + 104);
  LOWORD(v52) = *(_WORD *)(a1 + 112);
  *(void *)((char *)&v52 + 4) = *(void *)(a1 + 116);
  uint64_t v54 = *(void *)(a1 + 136);
  gdc::LayerDataRequestKey::operator=(a1, a2);
  long long v4 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v4;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)a2 = v43;
  *(_WORD *)(a2 + 8) = v44;
  if (&v43 != (char *)a2)
  {
    uint64_t v5 = (char *)(a2 + 48);
    unsigned int v6 = *(void **)(a2 + 16);
    if (v6 != *(void **)(a2 + 32)) {
      free(v6);
    }
    *(void *)(a2 + 16) = v5;
    *(void *)(a2 + 24) = v5;
    *(void *)(a2 + 32) = v5;
    *(void *)(a2 + 40) = 32;
    unint64_t v7 = (char *)v45;
    uint64_t v8 = v46;
    unint64_t v9 = v46 - (unsigned char *)v45;
    if ((unint64_t)(v46 - (unsigned char *)v45) < 0x21)
    {
LABEL_27:
      if (v7 == v8)
      {
LABEL_45:
        *(void *)(a2 + 24) = &v5[v9];
        goto LABEL_46;
      }
      if (v9 < 8)
      {
        unsigned int v28 = v5;
        goto LABEL_43;
      }
      if ((unint64_t)(v5 - v7) < 0x20)
      {
        unsigned int v28 = v5;
        goto LABEL_43;
      }
      if (v9 >= 0x20)
      {
        unint64_t v27 = v9 & 0xFFFFFFFFFFFFFFE0;
        int v29 = (long long *)(v7 + 16);
        int v30 = v5 + 16;
        unint64_t v31 = v9 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v32 = *v29;
          *(v30 - 1) = *(v29 - 1);
          *int v30 = v32;
          v29 += 2;
          v30 += 2;
          v31 -= 32;
        }
        while (v31);
        if (v9 == v27) {
          goto LABEL_44;
        }
        if ((v9 & 0x18) == 0)
        {
          v7 += v27;
          unsigned int v28 = &v5[v27];
          goto LABEL_43;
        }
      }
      else
      {
        unint64_t v27 = 0;
      }
      unint64_t v33 = v9 & 0xFFFFFFFFFFFFFFF8;
      unsigned int v28 = &v5[v9 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v34 = v27 - (v9 & 0xFFFFFFFFFFFFFFF8);
      double v35 = (uint64_t *)&v7[v27];
      unsigned int v36 = &v5[v27];
      do
      {
        uint64_t v37 = *v35++;
        *(void *)unsigned int v36 = v37;
        v36 += 8;
        v34 += 8;
      }
      while (v34);
      if (v9 == v33) {
        goto LABEL_44;
      }
      v7 += v33;
      do
      {
LABEL_43:
        char v38 = *v7++;
        *v28++ = v38;
      }
      while (v7 != v8);
LABEL_44:
      uint64_t v5 = *(char **)(a2 + 24);
      goto LABEL_45;
    }
    if (v9 <= 0x40) {
      size_t v10 = 64;
    }
    else {
      size_t v10 = v46 - (unsigned char *)v45;
    }
    uint64_t v11 = (char *)malloc_type_malloc(v10, 0x100004077774924uLL);
    uint64_t v5 = v11;
    uint64_t v12 = *(char **)(a2 + 16);
    uint64_t v13 = *(char **)(a2 + 24);
    if (v12 == v13)
    {
LABEL_26:
      *(void *)(a2 + 16) = v11;
      *(void *)(a2 + 24) = v11;
      *(void *)(a2 + 40) = v10;
      goto LABEL_27;
    }
    unint64_t v14 = v13 - v12;
    if ((unint64_t)(v13 - v12) < 8)
    {
      BOOL v15 = v11;
    }
    else
    {
      BOOL v15 = v11;
      if ((unint64_t)(v11 - v12) >= 0x20)
      {
        if (v14 < 0x20)
        {
          uint64_t v16 = 0;
LABEL_20:
          unint64_t v21 = v14 & 0xFFFFFFFFFFFFFFF8;
          BOOL v15 = &v11[v14 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v22 = v16 - (v14 & 0xFFFFFFFFFFFFFFF8);
          double v23 = (uint64_t *)&v12[v16];
          size_t v24 = &v11[v16];
          do
          {
            uint64_t v25 = *v23++;
            *(void *)size_t v24 = v25;
            v24 += 8;
            v22 += 8;
          }
          while (v22);
          if (v14 == v21) {
            goto LABEL_26;
          }
          v12 += v21;
          goto LABEL_25;
        }
        uint64_t v16 = v14 & 0xFFFFFFFFFFFFFFE0;
        int v17 = (long long *)(v12 + 16);
        BOOL v18 = v11 + 16;
        unint64_t v19 = v14 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v20 = *v17;
          *(v18 - 1) = *(v17 - 1);
          _OWORD *v18 = v20;
          v17 += 2;
          v18 += 2;
          v19 -= 32;
        }
        while (v19);
        if (v14 == v16) {
          goto LABEL_26;
        }
        if ((v14 & 0x18) != 0) {
          goto LABEL_20;
        }
        v12 += v16;
        BOOL v15 = &v11[v16];
      }
    }
    do
    {
LABEL_25:
      char v26 = *v12++;
      *v15++ = v26;
    }
    while (v12 != v13);
    goto LABEL_26;
  }
LABEL_46:
  BOOL v39 = (_OWORD *)(a2 + 112);
  *(_OWORD *)(a2 + 80) = v48;
  if (v49)
  {
    int v40 = v50;
    if (!*(unsigned char *)(a2 + 96)) {
      *(unsigned char *)(a2 + 96) = 1;
    }
    *(_DWORD *)(a2 + 100) = v40;
    uint64_t v41 = v54;
    *(void *)(a2 + 104) = v51;
    *BOOL v39 = v52;
    *(void *)(a2 + 128) = v53;
    *(void *)(a2 + 136) = v41;
    char v49 = 0;
  }
  else
  {
    if (*(unsigned char *)(a2 + 96)) {
      *(unsigned char *)(a2 + 96) = 0;
    }
    uint64_t v42 = v54;
    *(void *)(a2 + 104) = v51;
    *BOOL v39 = v52;
    *(void *)(a2 + 128) = v53;
    *(void *)(a2 + 136) = v42;
  }
  if (v45 != v47) {
    free(v45);
  }
}

uint64_t gdc::LayerDataRequestKey::operator=(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  if (a1 != a2)
  {
    long long v4 = (char *)(a1 + 48);
    uint64_t v5 = *(void **)(a1 + 16);
    if (v5 != *(void **)(a1 + 32)) {
      free(v5);
    }
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v4;
    *(void *)(a1 + 40) = 32;
    unsigned int v6 = *(char **)(a2 + 16);
    unint64_t v7 = *(char **)(a2 + 24);
    unint64_t v8 = v7 - v6;
    if ((unint64_t)(v7 - v6) < 0x21)
    {
LABEL_25:
      if (v6 == v7)
      {
LABEL_43:
        *(void *)(a1 + 24) = &v4[v8];
        goto LABEL_44;
      }
      if (v8 < 8)
      {
        unint64_t v27 = v4;
        goto LABEL_41;
      }
      if ((unint64_t)(v4 - v6) < 0x20)
      {
        unint64_t v27 = v4;
        goto LABEL_41;
      }
      if (v8 >= 0x20)
      {
        unint64_t v26 = v8 & 0xFFFFFFFFFFFFFFE0;
        unsigned int v28 = (long long *)(v6 + 16);
        int v29 = v4 + 16;
        unint64_t v30 = v8 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v31 = *v28;
          *(v29 - 1) = *(v28 - 1);
          *int v29 = v31;
          v28 += 2;
          v29 += 2;
          v30 -= 32;
        }
        while (v30);
        if (v8 == v26) {
          goto LABEL_42;
        }
        if ((v8 & 0x18) == 0)
        {
          v6 += v26;
          unint64_t v27 = &v4[v26];
          goto LABEL_41;
        }
      }
      else
      {
        unint64_t v26 = 0;
      }
      unint64_t v32 = v8 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v27 = &v4[v8 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v33 = v26 - (v8 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v34 = (uint64_t *)&v6[v26];
      double v35 = &v4[v26];
      do
      {
        uint64_t v36 = *v34++;
        *(void *)double v35 = v36;
        v35 += 8;
        v33 += 8;
      }
      while (v33);
      if (v8 == v32) {
        goto LABEL_42;
      }
      v6 += v32;
      do
      {
LABEL_41:
        char v37 = *v6++;
        *v27++ = v37;
      }
      while (v6 != v7);
LABEL_42:
      long long v4 = *(char **)(a1 + 24);
      goto LABEL_43;
    }
    if (v8 <= 0x40) {
      size_t v9 = 64;
    }
    else {
      size_t v9 = v7 - v6;
    }
    size_t v10 = (char *)malloc_type_malloc(v9, 0x100004077774924uLL);
    long long v4 = v10;
    uint64_t v11 = *(char **)(a1 + 16);
    uint64_t v12 = *(char **)(a1 + 24);
    if (v11 == v12)
    {
LABEL_24:
      *(void *)(a1 + 16) = v10;
      *(void *)(a1 + 24) = v10;
      *(void *)(a1 + 40) = v9;
      goto LABEL_25;
    }
    unint64_t v13 = v12 - v11;
    if ((unint64_t)(v12 - v11) < 8)
    {
      unint64_t v14 = v10;
    }
    else
    {
      unint64_t v14 = v10;
      if ((unint64_t)(v10 - v11) >= 0x20)
      {
        if (v13 < 0x20)
        {
          uint64_t v15 = 0;
LABEL_18:
          unint64_t v20 = v13 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v14 = &v10[v13 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v21 = v15 - (v13 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v22 = (uint64_t *)&v11[v15];
          double v23 = &v10[v15];
          do
          {
            uint64_t v24 = *v22++;
            *(void *)double v23 = v24;
            v23 += 8;
            v21 += 8;
          }
          while (v21);
          if (v13 == v20) {
            goto LABEL_24;
          }
          v11 += v20;
          goto LABEL_23;
        }
        uint64_t v15 = v13 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v16 = (long long *)(v11 + 16);
        int v17 = v10 + 16;
        unint64_t v18 = v13 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v19 = *v16;
          *(v17 - 1) = *(v16 - 1);
          *int v17 = v19;
          v16 += 2;
          v17 += 2;
          v18 -= 32;
        }
        while (v18);
        if (v13 == v15) {
          goto LABEL_24;
        }
        if ((v13 & 0x18) != 0) {
          goto LABEL_18;
        }
        v11 += v15;
        unint64_t v14 = &v10[v15];
      }
    }
    do
    {
LABEL_23:
      char v25 = *v11++;
      *v14++ = v25;
    }
    while (v11 != v12);
    goto LABEL_24;
  }
LABEL_44:
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  int v38 = *(unsigned __int8 *)(a1 + 96);
  if (*(unsigned char *)(a2 + 96))
  {
    *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
    if (!v38) {
      *(unsigned char *)(a1 + 96) = 1;
    }
  }
  else if (*(unsigned char *)(a1 + 96))
  {
    *(unsigned char *)(a1 + 96) = 0;
  }
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  return a1;
}

uint64_t gss::StyleSheet<gss::ScenePropertyID>::decodeStyles(uint64_t a1, void *a2, uint64_t a3, int a4, void *a5)
{
  uint64_t v309 = *MEMORY[0x1E4F143B8];
  size_t v9 = gss::StylFile::chapter(a2, 0x15u);
  size_t v10 = v9;
  memset(&v307, 0, sizeof(v307));
  uint64_t v11 = *((unsigned __int8 *)v9 + 24);
  char v12 = v11 + 5;
  unint64_t v13 = v9[1];
  uint64_t v14 = v9[2];
  unint64_t v15 = v14 + ((unint64_t)(v11 + 5) >> 3);
  unsigned int v16 = (v11 + 5) & 7;
  unint64_t v17 = v14 + 1;
  if (v15 < v14 + 1)
  {
    if (*((unsigned char *)v9 + 24)) {
      unint64_t v18 = v14 + 1;
    }
    else {
      unint64_t v18 = v9[2];
    }
    if (v13 < v18) {
      goto LABEL_14;
    }
    if (*((unsigned char *)v9 + 24))
    {
      if (v13 >= v17)
      {
        unsigned int v19 = (((1 << (8 - v11)) - 1) & *(unsigned __int8 *)(*v9 + v14)) << v11;
        goto LABEL_25;
      }
      goto LABEL_13;
    }
    if (v13 >= v17)
    {
      LOBYTE(v19) = *(unsigned char *)(*v9 + v14);
      goto LABEL_25;
    }
LABEL_13:
    void v9[2] = v15;
    *((unsigned char *)v9 + 24) = v16;
LABEL_14:
    uint64_t v21 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 522;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "Could not read number of bits for inheritance list length.";
      _os_log_impl(&dword_1A1780000, v21, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    uint64_t v22 = (void *)std::ostream::operator<<();
    double v23 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)" STYL Parse Error Here: ", 24);
    uint64_t v24 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)"Could not read number of bits for inheritance list length.", 58);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n", 1);
    goto LABEL_137;
  }
  if (v11 <= 3) {
    unint64_t v20 = v14 + 1;
  }
  else {
    unint64_t v20 = v14 + 2;
  }
  if (v13 < v20) {
    goto LABEL_13;
  }
  uint64_t v25 = *v9;
  if (*((unsigned char *)v9 + 24))
  {
    int v26 = *(unsigned __int8 *)(v25 + v14);
    if (v17 >= v13) {
      int v27 = 0;
    }
    else {
      int v27 = *(unsigned __int8 *)(v25 + v17);
    }
    unsigned int v19 = ((v27 & (0xFFFF << (8 - v11))) >> (8 - v11)) | ((((1 << (8 - v11)) + 255) & v26) << v11);
    void v9[2] = v17;
  }
  else
  {
    LOBYTE(v19) = *(unsigned char *)(v25 + v14);
  }
LABEL_25:
  void v9[2] = v15;
  *((unsigned char *)v9 + 24) = v16;
  *(unsigned char *)(a3 + 89) = (v19 >> 3) + 1;
  char v28 = v12 & 7;
  unsigned int v29 = (v12 & 7) + 5;
  unint64_t v30 = v15 + (v29 >> 3);
  unsigned int v31 = v29 & 7;
  unint64_t v32 = v15 + 1;
  if (v30 < v15 + 1)
  {
    if (v16) {
      unint64_t v33 = v15 + 1;
    }
    else {
      unint64_t v33 = v15;
    }
    if (v13 < v33) {
      goto LABEL_38;
    }
    if (v16)
    {
      if (v13 >= v32)
      {
        LODWORD(v15) = (((1 << (8 - v16)) - 1) & *(unsigned __int8 *)(*v9 + v15)) << v28;
        goto LABEL_49;
      }
      goto LABEL_37;
    }
    uint64_t v43 = *v9;
    void v9[2] = v15;
    if (v13 >= v32)
    {
      LOBYTE(v15) = *(unsigned char *)(v43 + v15);
      goto LABEL_49;
    }
LABEL_37:
    void v9[2] = v30;
    *((unsigned char *)v9 + 24) = v31;
LABEL_38:
    double v35 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 524;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "Could not read number of bits for zoom style count.";
      _os_log_impl(&dword_1A1780000, v35, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    uint64_t v36 = (void *)std::ostream::operator<<();
    char v37 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)" STYL Parse Error Here: ", 24);
    int v38 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v37, (uint64_t)"Could not read number of bits for zoom style count.", 51);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v38, (uint64_t)"\n", 1);
    goto LABEL_137;
  }
  if (v16 <= 3) {
    unint64_t v34 = v15 + 1;
  }
  else {
    unint64_t v34 = v15 + 2;
  }
  if (v13 < v34) {
    goto LABEL_37;
  }
  uint64_t v39 = *v9;
  if (v16)
  {
    char v40 = 8 - v16;
    int v41 = *(unsigned __int8 *)(v39 + v15);
    if (v32 >= v13) {
      int v42 = 0;
    }
    else {
      int v42 = *(unsigned __int8 *)(v39 + v32);
    }
    LODWORD(v15) = ((v42 & (0xFFFF << v40)) >> v40) | ((((1 << v40) + 255) & v41) << v28);
    void v9[2] = v32;
  }
  else
  {
    LOBYTE(v15) = *(unsigned char *)(v39 + v15);
  }
LABEL_49:
  void v9[2] = v30;
  *((unsigned char *)v9 + 24) = v31;
  *(unsigned char *)(a3 + 90) = (v15 >> 3) + 1;
  char v44 = v29 & 7;
  unsigned int v45 = (v29 & 7) + 5;
  unint64_t v46 = v30 + (v45 >> 3);
  unsigned int v47 = v45 & 7;
  unint64_t v48 = v30 + 1;
  if (v46 < v30 + 1)
  {
    if (v31) {
      unint64_t v49 = v30 + 1;
    }
    else {
      unint64_t v49 = v30;
    }
    if (v13 < v49) {
      goto LABEL_62;
    }
    if (v31)
    {
      if (v13 >= v48)
      {
        LODWORD(v30) = (((1 << (8 - v31)) - 1) & *(unsigned __int8 *)(*v9 + v30)) << v44;
        goto LABEL_73;
      }
      goto LABEL_61;
    }
    uint64_t v59 = *v9;
    void v9[2] = v30;
    if (v13 >= v48)
    {
      LOBYTE(v30) = *(unsigned char *)(v59 + v30);
      goto LABEL_73;
    }
LABEL_61:
    void v9[2] = v46;
    *((unsigned char *)v9 + 24) = v47;
LABEL_62:
    uint64_t v51 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 526;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "Could not read number of bits for conditional style count.";
      _os_log_impl(&dword_1A1780000, v51, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    long long v52 = (void *)std::ostream::operator<<();
    uint64_t v53 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v52, (uint64_t)" STYL Parse Error Here: ", 24);
    uint64_t v54 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v53, (uint64_t)"Could not read number of bits for conditional style count.", 58);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)"\n", 1);
    goto LABEL_137;
  }
  if (v31 <= 3) {
    unint64_t v50 = v30 + 1;
  }
  else {
    unint64_t v50 = v30 + 2;
  }
  if (v13 < v50) {
    goto LABEL_61;
  }
  uint64_t v55 = *v9;
  if (v31)
  {
    char v56 = 8 - v31;
    int v57 = *(unsigned __int8 *)(v55 + v30);
    if (v48 >= v13) {
      int v58 = 0;
    }
    else {
      int v58 = *(unsigned __int8 *)(v55 + v48);
    }
    LODWORD(v30) = ((v58 & (0xFFFF << v56)) >> v56) | ((((1 << v56) + 255) & v57) << v44);
    void v9[2] = v48;
  }
  else
  {
    LOBYTE(v30) = *(unsigned char *)(v55 + v30);
  }
LABEL_73:
  void v9[2] = v46;
  *((unsigned char *)v9 + 24) = v47;
  *(unsigned char *)(a3 + 91) = (v30 >> 3) + 1;
  char v60 = v45 & 7;
  unsigned int v61 = (v45 & 7) + 5;
  unint64_t v62 = v46 + (v61 >> 3);
  unsigned int v63 = v61 & 7;
  unint64_t v64 = v46 + 1;
  if (v62 < v46 + 1)
  {
    if (v47) {
      unint64_t v65 = v46 + 1;
    }
    else {
      unint64_t v65 = v46;
    }
    if (v13 < v65) {
      goto LABEL_86;
    }
    if (v47)
    {
      if (v13 >= v64)
      {
        LODWORD(v46) = (((1 << (8 - v47)) - 1) & *(unsigned __int8 *)(*v9 + v46)) << v60;
        goto LABEL_97;
      }
      goto LABEL_85;
    }
    uint64_t v75 = *v9;
    void v9[2] = v46;
    if (v13 >= v64)
    {
      LOBYTE(v46) = *(unsigned char *)(v75 + v46);
      goto LABEL_97;
    }
LABEL_85:
    void v9[2] = v62;
    *((unsigned char *)v9 + 24) = v63;
LABEL_86:
    BOOL v67 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 528;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "Could not read number of bits for condition count.";
      _os_log_impl(&dword_1A1780000, v67, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    unsigned int v68 = (void *)std::ostream::operator<<();
    int v69 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v68, (uint64_t)" STYL Parse Error Here: ", 24);
    BOOL v70 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v69, (uint64_t)"Could not read number of bits for condition count.", 50);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v70, (uint64_t)"\n", 1);
    goto LABEL_137;
  }
  if (v47 <= 3) {
    unint64_t v66 = v46 + 1;
  }
  else {
    unint64_t v66 = v46 + 2;
  }
  if (v13 < v66) {
    goto LABEL_85;
  }
  uint64_t v71 = *v9;
  if (v47)
  {
    char v72 = 8 - v47;
    int v73 = *(unsigned __int8 *)(v71 + v46);
    if (v64 >= v13) {
      int v74 = 0;
    }
    else {
      int v74 = *(unsigned __int8 *)(v71 + v64);
    }
    LODWORD(v46) = ((v74 & (0xFFFF << v72)) >> v72) | ((((1 << v72) + 255) & v73) << v60);
    void v9[2] = v64;
  }
  else
  {
    LOBYTE(v46) = *(unsigned char *)(v71 + v46);
  }
LABEL_97:
  void v9[2] = v62;
  *((unsigned char *)v9 + 24) = v63;
  *(unsigned char *)(a3 + 92) = (v46 >> 3) + 1;
  char v76 = v61 & 7;
  unsigned int v77 = (v61 & 7) + 5;
  unint64_t v78 = v62 + (v77 >> 3);
  unsigned int v79 = v77 & 7;
  unint64_t v80 = v62 + 1;
  if (v78 < v62 + 1)
  {
    if (v63) {
      unint64_t v81 = v62 + 1;
    }
    else {
      unint64_t v81 = v62;
    }
    if (v13 < v81) {
      goto LABEL_110;
    }
    if (v63)
    {
      if (v13 >= v80)
      {
        LODWORD(v62) = (((1 << (8 - v63)) - 1) & *(unsigned __int8 *)(*v9 + v62)) << v76;
        goto LABEL_121;
      }
      goto LABEL_109;
    }
    uint64_t v91 = *v9;
    void v9[2] = v62;
    if (v13 >= v80)
    {
      LOBYTE(v62) = *(unsigned char *)(v91 + v62);
      goto LABEL_121;
    }
LABEL_109:
    void v9[2] = v78;
    *((unsigned char *)v9 + 24) = v79;
LABEL_110:
    unint64_t v83 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 530;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "Could not read number of bits for condition attribute count.";
      _os_log_impl(&dword_1A1780000, v83, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    unsigned int v84 = (void *)std::ostream::operator<<();
    int v85 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v84, (uint64_t)" STYL Parse Error Here: ", 24);
    int v86 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v85, (uint64_t)"Could not read number of bits for condition attribute count.", 60);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v86, (uint64_t)"\n", 1);
    goto LABEL_137;
  }
  if (v63 <= 3) {
    unint64_t v82 = v62 + 1;
  }
  else {
    unint64_t v82 = v62 + 2;
  }
  if (v13 < v82) {
    goto LABEL_109;
  }
  uint64_t v87 = *v9;
  if (v63)
  {
    char v88 = 8 - v63;
    int v89 = *(unsigned __int8 *)(v87 + v62);
    if (v80 >= v13) {
      int v90 = 0;
    }
    else {
      int v90 = *(unsigned __int8 *)(v87 + v80);
    }
    LODWORD(v62) = ((v90 & (0xFFFF << v88)) >> v88) | ((((1 << v88) + 255) & v89) << v76);
    void v9[2] = v80;
  }
  else
  {
    LOBYTE(v62) = *(unsigned char *)(v87 + v62);
  }
LABEL_121:
  void v9[2] = v78;
  *((unsigned char *)v9 + 24) = v79;
  *(unsigned char *)(a3 + 93) = (v62 >> 3) + 1;
  int v92 = v77 & 7;
  unint64_t v93 = v78 + ((v92 + 5) >> 3);
  char v94 = (v92 + 5) & 7;
  unint64_t v95 = v78 + 1;
  if (v93 < v78 + 1)
  {
    if (v79) {
      unint64_t v96 = v78 + 1;
    }
    else {
      unint64_t v96 = v78;
    }
    if (v13 < v96) {
      goto LABEL_134;
    }
    if (v79)
    {
      if (v13 >= v95)
      {
        unsigned int v97 = (((1 << (8 - v79)) - 1) & *(unsigned __int8 *)(*v9 + v78)) << v92;
        goto LABEL_149;
      }
      goto LABEL_133;
    }
    uint64_t v109 = *v9;
    void v9[2] = v78;
    if (v13 >= v95)
    {
      LOBYTE(v97) = *(unsigned char *)(v109 + v78);
      goto LABEL_149;
    }
LABEL_133:
    void v9[2] = v93;
    *((unsigned char *)v9 + 24) = v94;
LABEL_134:
    long long v99 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 532;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "Could not read number of bits for style count.";
      _os_log_impl(&dword_1A1780000, v99, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    uint64_t v100 = (void *)std::ostream::operator<<();
    uint64_t v101 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v100, (uint64_t)" STYL Parse Error Here: ", 24);
    long long v102 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v101, (uint64_t)"Could not read number of bits for style count.", 46);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v102, (uint64_t)"\n", 1);
    goto LABEL_137;
  }
  if (v79 <= 3) {
    unint64_t v98 = v78 + 1;
  }
  else {
    unint64_t v98 = v78 + 2;
  }
  if (v13 < v98) {
    goto LABEL_133;
  }
  uint64_t v105 = *v9;
  if (v79)
  {
    char v106 = 8 - v79;
    int v107 = *(unsigned __int8 *)(v105 + v78);
    if (v95 >= v13) {
      int v108 = 0;
    }
    else {
      int v108 = *(unsigned __int8 *)(v105 + v95);
    }
    unsigned int v97 = ((v108 & (0xFFFF << v106)) >> v106) | ((((1 << v106) + 255) & v107) << v92);
    void v9[2] = v95;
  }
  else
  {
    LOBYTE(v97) = *(unsigned char *)(v105 + v78);
  }
LABEL_149:
  int v110 = v97 >> 3;
  void v9[2] = v93;
  *((unsigned char *)v9 + 24) = v94;
  *(unsigned char *)(a3 + 94) = v110 + 1;
  uint64_t v111 = (gss::Allocator *)geo::ibitstream::readUIntBits(&v306, v9, v110 + 1);
  if (!(_BYTE)v306)
  {
    uint64_t v117 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 535;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "Could not read number of styles.";
      _os_log_impl(&dword_1A1780000, v117, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    long long v118 = (void *)std::ostream::operator<<();
    uint64_t v119 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v118, (uint64_t)" STYL Parse Error Here: ", 24);
    unsigned __int8 v120 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v119, (uint64_t)"Could not read number of styles.", 32);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v120, (uint64_t)"\n", 1);
    goto LABEL_137;
  }
  uint64_t v112 = DWORD1(v306);
  uint64_t v295 = DWORD1(v306);
  v296 = (gss::Allocator **)(a1 + 64);
  if (*(unsigned char *)(a1 + 76)) {
    goto LABEL_181;
  }
  unint64_t v113 = *(unsigned __int16 *)(a1 + 72);
  if (v113 > DWORD1(v306))
  {
    uint64_t v114 = 16 * v113 - 16 * DWORD1(v306);
    unint64_t v115 = (std::__shared_weak_count **)((char *)*v296 + 16 * DWORD1(v306) + 8);
    do
    {
      unint64_t v116 = *v115;
      if (*v115 && !atomic_fetch_add(&v116->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
      v115 += 2;
      v114 -= 16;
    }
    while (v114);
LABEL_180:
    uint64_t v112 = v295;
    *(_WORD *)(a1 + 72) = v295;
    goto LABEL_181;
  }
  if (v113 < DWORD1(v306))
  {
    if (DWORD1(v306) <= *(unsigned __int16 *)(a1 + 74))
    {
      unint64_t v128 = *v296;
    }
    else
    {
      uint64_t v121 = gss::Allocator::instance(v111);
      uint64_t v111 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v121 + 16))(v121, 16 * v112, 8);
      v297 = v111;
      uint64_t v122 = *(void *)(a1 + 64);
      unint64_t v113 = *(unsigned __int16 *)(a1 + 72);
      if (v122)
      {
        if (*(_WORD *)(a1 + 72))
        {
          int v123 = *(unsigned __int16 *)(a1 + 72);
          int32x4_t v124 = v111;
          do
          {
            *(_OWORD *)int32x4_t v124 = *(_OWORD *)v122;
            int32x4_t v124 = (gss::Allocator *)((char *)v124 + 16);
            *(void *)uint64_t v122 = 0;
            *(void *)(v122 + 8) = 0;
            v122 += 16;
            --v123;
          }
          while ((_WORD)v123);
        }
        if (!*(unsigned char *)(a1 + 76) && *v296)
        {
          if (*(_WORD *)(a1 + 72))
          {
            uint64_t v125 = 16 * *(unsigned __int16 *)(a1 + 72);
            long long v126 = (std::__shared_weak_count **)((char *)*v296 + 8);
            do
            {
              unint64_t v127 = *v126;
              if (*v126 && !atomic_fetch_add(&v127->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                std::__shared_weak_count::__release_weak(v127);
              }
              v126 += 2;
              v125 -= 16;
            }
            while (v125);
          }
          uint64_t v129 = gss::Allocator::instance(v111);
          uint64_t v111 = (gss::Allocator *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v129 + 40))(v129, *(void *)(a1 + 64), 16 * *(unsigned __int16 *)(a1 + 74));
        }
        *(void *)(a1 + 69) = 0;
        void *v296 = 0;
        *(_WORD *)(a1 + 72) = v113;
      }
      uint64_t v112 = v295;
      *(_WORD *)(a1 + 74) = v295;
      unint64_t v128 = v297;
      *(void *)(a1 + 64) = v297;
    }
    if (v113 != v112) {
      bzero((char *)v128 + 16 * v113, 16 * v295 - 16 * v113);
    }
    goto LABEL_180;
  }
LABEL_181:
  if (!v112)
  {
LABEL_278:
    if (*(_WORD *)(a1 + 72))
    {
      uint64_t v186 = *(void *)(a1 + 64);
      uint64_t v187 = v186 + 16 * *(unsigned __int16 *)(a1 + 72);
      do
      {
        BOOL v188 = *(gss::Allocator **)v186;
        *(void *)buf = *(void *)v186;
        int v189 = *(std::__shared_weak_count **)(v186 + 8);
        *(void *)&uint8_t buf[8] = v189;
        if (v189) {
          atomic_fetch_add_explicit(&v189->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        gss::CartoStyle<gss::ScenePropertyID>::initConditionalStyleList(v188, a1);
        gss::CartoStyle<gss::PropertyID>::internOnDecode((uint64_t)v188, a1 + 232);
        if (v189 && !atomic_fetch_add(&v189->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
          std::__shared_weak_count::__release_weak(v189);
        }
        v186 += 16;
        uint64_t v103 = 1;
      }
      while (v186 != v187);
    }
    else
    {
      uint64_t v103 = 1;
    }
    goto LABEL_138;
  }
  uint64_t v294 = 0;
  int v289 = 0;
  while (1)
  {
    uint64_t v130 = gss::Allocator::instance(v111);
    uint64_t v131 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v130 + 16))(v130, 160, 8);
    unsigned __int8 v132 = (std::__shared_weak_count *)v131;
    *(void *)(v131 + 16) = 0;
    *(void *)(v131 + 8) = 0;
    *(void *)uint64_t v131 = &unk_1EF58A4D8;
    *(void *)(v131 + 24) = v130;
    uint64_t v133 = v131 + 32;
    *(void *)(v131 + 48) = 0;
    *(void *)(v131 + 56) = 0;
    *(void *)(v131 + 32) = &unk_1EF567350;
    *(void *)(v131 + 40) = 0;
    *(void *)(v131 + 61) = 0;
    *(void *)(v131 + 72) = 0;
    *(void *)(v131 + 77) = 0;
    *(void *)(v131 + 88) = 0;
    *(void *)(v131 + 93) = 0;
    *(_OWORD *)(v131 + 120) = 0u;
    *(_OWORD *)(v131 + 104) = 0u;
    *(void *)(v131 + 136) = 0;
    *(_DWORD *)(v131 + 152) = 0;
    atomic_store(0, (unsigned __int8 *)(v131 + 154));
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v131 + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v131 + 16), 1uLL, memory_order_relaxed);
    *(void *)(v131 + 40) = v131 + 32;
    *(void *)(v131 + 48) = v131;
    if (!atomic_fetch_add((atomic_ullong *volatile)(v131 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(uint64_t))(*(void *)v131 + 16))(v131);
      std::__shared_weak_count::__release_weak(v132);
    }
    *(void *)&long long v134 = v133;
    *((void *)&v134 + 1) = v132;
    uint64_t v135 = (uint64_t)*v296 + 16 * v294;
    unsigned int v136 = *(std::__shared_weak_count **)(v135 + 8);
    *(_OWORD *)uint64_t v135 = v134;
    if (v136 && !atomic_fetch_add(&v136->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
    uint64_t v298 = (uint64_t)*v296 + 16 * v294;
    if (*(unsigned char *)(a3 + 12))
    {
      if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
      {
        *v307.__r_.__value_.__l.__data_ = 0;
        v307.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v307.__r_.__value_.__s.__data_[0] = 0;
        *((unsigned char *)&v307.__r_.__value_.__s + 23) = 0;
      }
      if ((geo::ibitstream::readString(v10, &v307) & 1) == 0)
      {
        unsigned __int8 v226 = GEOGetGeoCSSStyleSheetLog();
        if (os_log_type_enabled(v226, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 543;
          *(_WORD *)&buf[18] = 2082;
          *(void *)&buf[20] = "Could not read style name.";
          _os_log_impl(&dword_1A1780000, v226, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }

        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
        int v227 = (void *)std::ostream::operator<<();
        long long v228 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v227, (uint64_t)" STYL Parse Error Here: ", 24);
        unsigned int v229 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v228, (uint64_t)"Could not read style name.", 26);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v229, (uint64_t)"\n", 1);
        goto LABEL_137;
      }
      if (a4) {
        operator new[]();
      }
    }
    geo::ibitstream::readVarInt((uint64_t)&v306, v10);
    if (!(_BYTE)v306)
    {
      v218 = GEOGetGeoCSSStyleSheetLog();
      if (os_log_type_enabled(v218, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 552;
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = "Could not read style score.";
        _os_log_impl(&dword_1A1780000, v218, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      unint64_t v219 = (void *)std::ostream::operator<<();
      long long v220 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v219, (uint64_t)" STYL Parse Error Here: ", 24);
      unint64_t v221 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v220, (uint64_t)"Could not read style score.", 27);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v221, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
    *(void *)(*(void *)v298 + 112) = *((void *)&v306 + 1);
    geo::ibitstream::readUIntBits(&v306, v10, *(unsigned __int8 *)(a3 + 89));
    if (!(_BYTE)v306)
    {
      unint64_t v222 = GEOGetGeoCSSStyleSheetLog();
      if (os_log_type_enabled(v222, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 556;
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = "Could not read number of inheritted styles.";
        _os_log_impl(&dword_1A1780000, v222, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v223 = (void *)std::ostream::operator<<();
      v224 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v223, (uint64_t)" STYL Parse Error Here: ", 24);
      uint64_t v225 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v224, (uint64_t)"Could not read number of inheritted styles.", 43);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v225, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
    for (int i = DWORD1(v306); i; --i)
    {
      geo::ibitstream::readUIntBits(&v306, v10, *(unsigned __int8 *)(a3 + 94));
      if (!(_BYTE)v306)
      {
        unsigned int v190 = GEOGetGeoCSSStyleSheetLog();
        if (os_log_type_enabled(v190, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 559;
          *(_WORD *)&buf[18] = 2082;
          *(void *)&buf[20] = "Could not read inherited style index.";
          _os_log_impl(&dword_1A1780000, v190, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }

        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
        uint64_t v191 = (void *)std::ostream::operator<<();
        uint64_t v192 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v191, (uint64_t)" STYL Parse Error Here: ", 24);
        long long v193 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v192, (uint64_t)"Could not read inherited style index.", 37);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v193, (uint64_t)"\n", 1);
        goto LABEL_137;
      }
      int v138 = DWORD1(v306);
      if (DWORD1(v306) >= v112)
      {
        BOOL v194 = GEOGetGeoCSSStyleSheetLog();
        if (os_log_type_enabled(v194, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 560;
          *(_WORD *)&buf[18] = 2082;
          *(void *)&buf[20] = "Inherited style index out of bounds.";
          _os_log_impl(&dword_1A1780000, v194, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }

        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
        uint64_t v195 = (void *)std::ostream::operator<<();
        uint64_t v196 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v195, (uint64_t)" STYL Parse Error Here: ", 24);
        uint64_t v197 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v196, (uint64_t)"Inherited style index out of bounds.", 36);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v197, (uint64_t)"\n", 1);
        goto LABEL_137;
      }
      uint64_t v139 = *(void *)v298;
      geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::reserve(*(void *)v298 + 24, *(unsigned __int16 *)(*(void *)v298 + 32) + 1);
      uint64_t v140 = *(unsigned __int16 *)(v139 + 32);
      *(_DWORD *)(*(void *)(v139 + 24) + 4 * v140) = v138;
      *(_WORD *)(v139 + 32) = v140 + 1;
    }
    geo::ibitstream::readUIntBits(&v306, v10, *(unsigned __int8 *)(a3 + 88));
    if (!(_BYTE)v306)
    {
      unsigned int v230 = GEOGetGeoCSSStyleSheetLog();
      if (os_log_type_enabled(v230, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 565;
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = "Could not read property set index.";
        _os_log_impl(&dword_1A1780000, v230, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      int v231 = (void *)std::ostream::operator<<();
      int v232 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v231, (uint64_t)" STYL Parse Error Here: ", 24);
      BOOL v233 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v232, (uint64_t)"Could not read property set index.", 34);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v233, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
    if (DWORD1(v306) >= *(unsigned __int16 *)(a1 + 152))
    {
      int v234 = GEOGetGeoCSSStyleSheetLog();
      if (os_log_type_enabled(v234, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 566;
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = "Property set index out of bounds.";
        _os_log_impl(&dword_1A1780000, v234, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      int v235 = (void *)std::ostream::operator<<();
      v236 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v235, (uint64_t)" STYL Parse Error Here: ", 24);
      v237 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v236, (uint64_t)"Property set index out of bounds.", 33);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v237, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
    uint64_t v141 = *(void *)v298;
    long long v142 = *(_OWORD *)(*(void *)(a1 + 144) + 16 * DWORD1(v306));
    long long v305 = v142;
    uint64_t v143 = *((void *)&v142 + 1);
    if (*((void *)&v142 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v142 + 1) + 8), 1uLL, memory_order_relaxed);
      uint64_t v143 = *((void *)&v305 + 1);
    }
    gss::CartoStyle<gss::PropertyID>::setPropertySet(v141, v142, v143);
    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&v305);
    geo::ibitstream::readUIntBits(&v306, v10, *(unsigned __int8 *)(a3 + 90));
    if (!(_BYTE)v306)
    {
      v238 = GEOGetGeoCSSStyleSheetLog();
      if (os_log_type_enabled(v238, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 570;
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = "Could not read number of zoom styles.";
        _os_log_impl(&dword_1A1780000, v238, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      unsigned int v239 = (void *)std::ostream::operator<<();
      unsigned int v240 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v239, (uint64_t)" STYL Parse Error Here: ", 24);
      BOOL v241 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v240, (uint64_t)"Could not read number of zoom styles.", 37);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v241, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
    uint64_t v144 = DWORD1(v306);
    int v292 = (gss::Allocator **)(*(void *)v298 + 40);
    geo::intern_vector<gss::ZoomStyle<gss::PropertyID>,geo::StdAllocator<gss::ZoomStyle<gss::PropertyID>,gss::Allocator>>::resize(v292, DWORD1(v306));
    if (v144) {
      break;
    }
LABEL_247:
    geo::ibitstream::readUIntBits(&v306, v10, *(unsigned __int8 *)(a3 + 91));
    if (!(_BYTE)v306)
    {
      v266 = GEOGetGeoCSSStyleSheetLog();
      if (os_log_type_enabled(v266, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 585;
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = "Could not read number of conditional styles.";
        _os_log_impl(&dword_1A1780000, v266, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      unint64_t v267 = (void *)std::ostream::operator<<();
      long long v268 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v267, (uint64_t)" STYL Parse Error Here: ", 24);
      unint64_t v269 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v268, (uint64_t)"Could not read number of conditional styles.", 44);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v269, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
    int v165 = DWORD1(v306);
    uint64_t v291 = *(void *)v298;
    uint64_t v293 = *(void *)v298 + 56;
    uint64_t v111 = (gss::Allocator *)geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::reserve(v293, DWORD1(v306));
    if (v165)
    {
      int v287 = 0;
      int v286 = v165;
      while (1)
      {
        geo::ibitstream::readUIntBits(&v306, v10, *(unsigned __int8 *)(a3 + 92));
        if (!(_BYTE)v306) {
          break;
        }
        unint64_t v166 = DWORD1(v306);
        *(void *)((char *)&v306 + 5) = 0;
        *(void *)&long long v306 = 0;
        geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::resize((gss::Allocator *)&v306, v166);
        geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::intern<geo::StdAllocator<gss::StyleCondition,gss::Allocator>>((gss::Allocator *)&v306, a1 + 448);
        if (v166)
        {
          uint64_t v167 = 0;
          unint64_t v288 = v166;
          while (1)
          {
            unsigned int v304 = 0;
            if (!gss::decodeAttributeEncoding(v10, &v304, *(unsigned char *)(a3 + 13), *(unsigned char *)(a3 + 14), a5))
            {
              int v242 = GEOGetGeoCSSStyleSheetLog();
              if (os_log_type_enabled(v242, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 596;
                *(_WORD *)&buf[18] = 2082;
                *(void *)&buf[20] = "Could not decode attribute.";
                _os_log_impl(&dword_1A1780000, v242, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
              }

              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
              int v243 = (void *)std::ostream::operator<<();
              BOOL v244 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v243, (uint64_t)" STYL Parse Error Here: ", 24);
              int v245 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v244, (uint64_t)"Could not decode attribute.", 27);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v245, (uint64_t)"\n", 1);
              goto LABEL_296;
            }
            unsigned int v168 = *(unsigned __int8 *)std::map<unsigned int,unsigned char,std::less<unsigned int>,geo::StdAllocator<std::pair<unsigned int const,unsigned char>,gss::Allocator>>::operator[]((uint64_t **)(a3 + 16), &v304);
            geo::ibitstream::readUIntBits(v303, v10, *(unsigned __int8 *)(a3 + 93));
            if (!LOBYTE(v303[0]))
            {
              int v246 = GEOGetGeoCSSStyleSheetLog();
              if (os_log_type_enabled(v246, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 599;
                *(_WORD *)&buf[18] = 2082;
                *(void *)&buf[20] = "Could not read number of attribute values for condition.";
                _os_log_impl(&dword_1A1780000, v246, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
              }

              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
              unsigned int v247 = (void *)std::ostream::operator<<();
              unsigned int v248 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v247, (uint64_t)" STYL Parse Error Here: ", 24);
              v249 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v248, (uint64_t)"Could not read number of attribute values for condition.", 56);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v249, (uint64_t)"\n", 1);
              goto LABEL_296;
            }
            unint64_t v169 = HIDWORD(v303[0]);
            memset(v303, 0, 13);
            geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::resize((gss::Allocator *)v303, v169);
            geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::intern<geo::StdAllocator<unsigned int,gss::Allocator>>((uint64_t)v303, a1 + 416);
            if (v169) {
              break;
            }
LABEL_259:
            *(_DWORD *)buf = v304;
            geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::intern_vector((uint64_t)&buf[8], (uint64_t)v303);
            gss::StyleCondition::operator=(v306 + 24 * v167, (uint64_t)buf);
            gss::StyleCondition::~StyleCondition((gss::StyleCondition *)buf);
            geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::~intern_vector(v303);
            if (++v167 == v288) {
              goto LABEL_260;
            }
          }
          uint64_t v170 = 0;
          uint64_t v171 = 4 * v169;
          while (1)
          {
            geo::ibitstream::readUIntBits(v301, v10, v168);
            if (!v301[0]) {
              break;
            }
            *(_DWORD *)(v303[0] + v170) = v302;
            v170 += 4;
            if (v171 == v170) {
              goto LABEL_259;
            }
          }
          unint64_t v198 = GEOGetGeoCSSStyleSheetLog();
          if (os_log_type_enabled(v198, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 605;
            *(_WORD *)&buf[18] = 2082;
            *(void *)&buf[20] = "Could not read value for condition attribute.";
            _os_log_impl(&dword_1A1780000, v198, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }

          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
          size_t v199 = (void *)std::ostream::operator<<();
          BOOL v200 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v199, (uint64_t)" STYL Parse Error Here: ", 24);
          int v201 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v200, (uint64_t)"Could not read value for condition attribute.", 45);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v201, (uint64_t)"\n", 1);
          geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::~intern_vector(v303);
          goto LABEL_296;
        }
LABEL_260:
        gss::make_shared<gss::ConditionalStyle<gss::ScenePropertyID>,geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>>((gss::Allocator *)buf, (uint64_t *)&v306);
        geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::emplace_back<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>>(v293, (__n128 *)buf);
        std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)buf);
        uint64_t v172 = *(void *)(v291 + 56);
        uint64_t v173 = *(unsigned __int16 *)(v291 + 64);
        geo::ibitstream::readUIntBits(v303, v10, *(unsigned __int8 *)(a3 + 88));
        if (!LOBYTE(v303[0]))
        {
          char v274 = GEOGetGeoCSSStyleSheetLog();
          if (os_log_type_enabled(v274, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 613;
            *(_WORD *)&buf[18] = 2082;
            *(void *)&buf[20] = "Could not read conditional style property set index.";
            _os_log_impl(&dword_1A1780000, v274, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }

          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
          unint64_t v275 = (void *)std::ostream::operator<<();
          v276 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v275, (uint64_t)" STYL Parse Error Here: ", 24);
          v277 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v276, (uint64_t)"Could not read conditional style property set index.", 52);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v277, (uint64_t)"\n", 1);
          goto LABEL_296;
        }
        if (HIDWORD(v303[0]) >= *(unsigned __int16 *)(a1 + 152))
        {
          v278 = GEOGetGeoCSSStyleSheetLog();
          if (os_log_type_enabled(v278, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 614;
            *(_WORD *)&buf[18] = 2082;
            *(void *)&buf[20] = "Conditional style property set index out of bounds.";
            _os_log_impl(&dword_1A1780000, v278, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }

          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
          unint64_t v279 = (void *)std::ostream::operator<<();
          long long v280 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v279, (uint64_t)" STYL Parse Error Here: ", 24);
          unint64_t v281 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v280, (uint64_t)"Conditional style property set index out of bounds.", 51);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v281, (uint64_t)"\n", 1);
          goto LABEL_296;
        }
        uint64_t v174 = v172 + 16 * v173;
        uint64_t v175 = *(void *)(v174 - 16);
        long long v176 = *(_OWORD *)(*(void *)(a1 + 144) + 16 * HIDWORD(v303[0]));
        long long v300 = v176;
        uint64_t v177 = *((void *)&v176 + 1);
        if (*((void *)&v176 + 1))
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v176 + 1) + 8), 1uLL, memory_order_relaxed);
          uint64_t v177 = *((void *)&v300 + 1);
        }
        gss::CartoStyle<gss::PropertyID>::setPropertySet(v175, v176, v177);
        std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&v300);
        geo::ibitstream::readUIntBits(v303, v10, *(unsigned __int8 *)(a3 + 90));
        if (!LOBYTE(v303[0]))
        {
          unint64_t v282 = GEOGetGeoCSSStyleSheetLog();
          if (os_log_type_enabled(v282, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 617;
            *(_WORD *)&buf[18] = 2082;
            *(void *)&buf[20] = "Could not read conditional style's zoom style count.";
            _os_log_impl(&dword_1A1780000, v282, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }

          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
          v283 = (void *)std::ostream::operator<<();
          v284 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v283, (uint64_t)" STYL Parse Error Here: ", 24);
          uint64_t v285 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v284, (uint64_t)"Could not read conditional style's zoom style count.", 52);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v285, (uint64_t)"\n", 1);
LABEL_296:
          geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::~intern_vector((uint64_t)&v306);
          goto LABEL_137;
        }
        uint64_t v178 = HIDWORD(v303[0]);
        unsigned int v179 = (gss::Allocator **)(*(void *)(v174 - 16) + 40);
        geo::intern_vector<gss::ZoomStyle<gss::PropertyID>,geo::StdAllocator<gss::ZoomStyle<gss::PropertyID>,gss::Allocator>>::resize(v179, HIDWORD(v303[0]));
        if (v178)
        {
          uint64_t v180 = 0;
          uint64_t v181 = 24 * v178;
          while (1)
          {
            geo::ibitstream::readUIntBits(buf, v10, 8u);
            if (!buf[0]) {
              break;
            }
            unsigned int v182 = *(_DWORD *)&buf[4];
            geo::ibitstream::readUIntBits(buf, v10, 8u);
            if (!buf[0])
            {
              v254 = GEOGetGeoCSSStyleSheetLog();
              if (os_log_type_enabled(v254, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 624;
                *(_WORD *)&buf[18] = 2082;
                *(void *)&buf[20] = "Could not read conditional style's zoom style max zoom.";
                _os_log_impl(&dword_1A1780000, v254, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
              }

              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
              v255 = (void *)std::ostream::operator<<();
              v256 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v255, (uint64_t)" STYL Parse Error Here: ", 24);
              v257 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v256, (uint64_t)"Could not read conditional style's zoom style max zoom.", 55);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v257, (uint64_t)"\n", 1);
              goto LABEL_296;
            }
            unsigned int v183 = *(_DWORD *)&buf[4];
            geo::ibitstream::readUIntBits(v303, v10, *(unsigned __int8 *)(a3 + 88));
            if (!LOBYTE(v303[0]))
            {
              unint64_t v258 = GEOGetGeoCSSStyleSheetLog();
              if (os_log_type_enabled(v258, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 625;
                *(_WORD *)&buf[18] = 2082;
                *(void *)&buf[20] = "Could not read conditional style's zoom style property set index.";
                _os_log_impl(&dword_1A1780000, v258, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
              }

              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
              size_t v259 = (void *)std::ostream::operator<<();
              v260 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v259, (uint64_t)" STYL Parse Error Here: ", 24);
              v261 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v260, (uint64_t)"Could not read conditional style's zoom style property set index.", 65);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v261, (uint64_t)"\n", 1);
              goto LABEL_296;
            }
            if (HIDWORD(v303[0]) >= *(unsigned __int16 *)(a1 + 152))
            {
              unint64_t v262 = GEOGetGeoCSSStyleSheetLog();
              if (os_log_type_enabled(v262, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 626;
                *(_WORD *)&buf[18] = 2082;
                *(void *)&buf[20] = "Conditional style's zoom style property set index out of bounds.";
                _os_log_impl(&dword_1A1780000, v262, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
              }

              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
              v263 = (void *)std::ostream::operator<<();
              uint64_t v264 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v263, (uint64_t)" STYL Parse Error Here: ", 24);
              v265 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v264, (uint64_t)"Conditional style's zoom style property set index out of bounds.", 64);
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v265, (uint64_t)"\n", 1);
              goto LABEL_296;
            }
            long long v184 = *(_OWORD *)(*(void *)(a1 + 144) + 16 * HIDWORD(v303[0]));
            long long v299 = v184;
            if (*((void *)&v184 + 1))
            {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v184 + 1) + 8), 1uLL, memory_order_relaxed);
              *(float *)buf = (float)v182 * 0.125;
              *(float *)&uint8_t buf[4] = (float)v183 * 0.125;
              *(void *)&uint8_t buf[8] = v184;
              *(void *)&buf[16] = *((void *)&v299 + 1);
              if (*((void *)&v299 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v299 + 1) + 8), 1uLL, memory_order_relaxed);
              }
            }
            else
            {
              *(float *)buf = (float)v182 * 0.125;
              *(float *)&uint8_t buf[4] = (float)v183 * 0.125;
              *(void *)&uint8_t buf[8] = v184;
              *(void *)&buf[16] = 0;
            }
            gss::ZoomStyle<gss::PropertyID>::operator=((uint64_t)*v179 + v180, (uint64_t)buf);
            md::components::Material::~Material((md::components::Material *)buf);
            std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&v299);
            v180 += 24;
            if (v181 == v180) {
              goto LABEL_276;
            }
          }
          size_t v250 = GEOGetGeoCSSStyleSheetLog();
          if (os_log_type_enabled(v250, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 623;
            *(_WORD *)&buf[18] = 2082;
            *(void *)&buf[20] = "Could not read conditional style's zoom style min zoom.";
            _os_log_impl(&dword_1A1780000, v250, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
          }

          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
          v251 = (void *)std::ostream::operator<<();
          v252 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v251, (uint64_t)" STYL Parse Error Here: ", 24);
          v253 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v252, (uint64_t)"Could not read conditional style's zoom style min zoom.", 55);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v253, (uint64_t)"\n", 1);
          goto LABEL_296;
        }
LABEL_276:
        uint64_t v185 = *(void *)(v174 - 16);
        *(_DWORD *)(v185 + 152) = v289;
        *(_DWORD *)(v185 + 156) = v287;
        *(void *)(v185 + 144) = *(void *)v298;
        ++v289;
        uint64_t v111 = (gss::Allocator *)geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::~intern_vector((uint64_t)&v306);
        ++v287;
        uint64_t v112 = v295;
        if (v287 == v286) {
          goto LABEL_277;
        }
      }
      uint64_t v270 = GEOGetGeoCSSStyleSheetLog();
      if (os_log_type_enabled(v270, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 590;
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = "Could not read number of conditions.";
        _os_log_impl(&dword_1A1780000, v270, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v271 = (void *)std::ostream::operator<<();
      v272 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v271, (uint64_t)" STYL Parse Error Here: ", 24);
      uint64_t v273 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v272, (uint64_t)"Could not read number of conditions.", 36);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v273, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
LABEL_277:
    if (++v294 == v112) {
      goto LABEL_278;
    }
  }
  uint64_t v145 = 0;
  uint64_t v290 = 24 * v144;
  while (1)
  {
    uint64_t v146 = *((unsigned __int8 *)v10 + 24);
    unint64_t v147 = v10[1];
    uint64_t v148 = v10[2];
    unint64_t v149 = v148 + ((unint64_t)(v146 + 8) >> 3);
    int v150 = v146 & 7;
    unint64_t v151 = v148 + 1;
    if (v149 >= v148 + 1) {
      break;
    }
    if (*((unsigned char *)v10 + 24)) {
      unint64_t v152 = v148 + 1;
    }
    else {
      unint64_t v152 = v10[2];
    }
    if (v147 < v152) {
      goto LABEL_298;
    }
    if (!*((unsigned char *)v10 + 24))
    {
      if (v147 < v151) {
        goto LABEL_297;
      }
      uint64_t v153 = *v10;
LABEL_226:
      LOBYTE(v154) = *(unsigned char *)(v153 + v148);
      goto LABEL_229;
    }
    if (v147 < v151) {
      goto LABEL_297;
    }
    uint64_t v153 = *v10;
    unsigned int v154 = (((1 << (8 - v146)) - 1) & *(unsigned __int8 *)(*v10 + v148)) << v146;
LABEL_229:
    void v10[2] = v149;
    *((unsigned char *)v10 + 24) = v150;
    unint64_t v157 = v149 + 1;
    if (v147 < v149 + 1)
    {
      void v10[2] = v157;
      *((unsigned char *)v10 + 24) = v150;
      __int8 v206 = GEOGetGeoCSSStyleSheetLog();
      if (os_log_type_enabled(v206, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 577;
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = "Could not read zoom style max zoom.";
        _os_log_impl(&dword_1A1780000, v206, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      unint64_t v207 = (void *)std::ostream::operator<<();
      long long v208 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v207, (uint64_t)" STYL Parse Error Here: ", 24);
      unint64_t v209 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v208, (uint64_t)"Could not read zoom style max zoom.", 35);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v209, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
    if (v150)
    {
      if (v157 >= v147) {
        int v158 = 0;
      }
      else {
        int v158 = *(unsigned __int8 *)(v153 + v157);
      }
      unsigned int v159 = ((v158 & (0xFFFF << (8 - v150))) >> (8 - v150)) | ((((1 << (8 - v150)) + 255) & *(unsigned __int8 *)(v153 + v149)) << v150);
      void v10[2] = v157;
    }
    else
    {
      LOBYTE(v159) = *(unsigned char *)(v153 + v149);
    }
    void v10[2] = v157;
    *((unsigned char *)v10 + 24) = v150;
    geo::ibitstream::readUIntBits(&v306, v10, *(unsigned __int8 *)(a3 + 88));
    if (!(_BYTE)v306)
    {
      unint64_t v210 = GEOGetGeoCSSStyleSheetLog();
      if (os_log_type_enabled(v210, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 578;
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = "Could not read zoom style property set index.";
        _os_log_impl(&dword_1A1780000, v210, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      uint64_t v211 = (void *)std::ostream::operator<<();
      v212 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v211, (uint64_t)" STYL Parse Error Here: ", 24);
      uint64_t v213 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v212, (uint64_t)"Could not read zoom style property set index.", 45);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v213, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
    if (DWORD1(v306) >= *(unsigned __int16 *)(a1 + 152))
    {
      unsigned __int8 v214 = GEOGetGeoCSSStyleSheetLog();
      if (os_log_type_enabled(v214, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 579;
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = "Zoom style property set index out of bounds.";
        _os_log_impl(&dword_1A1780000, v214, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      v215 = (void *)std::ostream::operator<<();
      unint64_t v216 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v215, (uint64_t)" STYL Parse Error Here: ", 24);
      v217 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v216, (uint64_t)"Zoom style property set index out of bounds.", 44);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v217, (uint64_t)"\n", 1);
      goto LABEL_137;
    }
    uint64_t v160 = *(void *)(a1 + 144);
    long long v161 = *(_OWORD *)(v160 + 16 * DWORD1(v306));
    int8x16_t v162 = *(std::__shared_weak_count **)(v160 + 16 * DWORD1(v306) + 8);
    if (v162)
    {
      atomic_fetch_add_explicit(&v162->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v162->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      *((void *)&v161 + 1) = 0;
    }
    int8x16_t v163 = (char *)*v292 + v145;
    *(float *)int8x16_t v163 = (float)v154 * 0.125;
    *((float *)v163 + 1) = (float)v159 * 0.125;
    unsigned int v164 = (std::__shared_weak_count *)*((void *)v163 + 2);
    *(_OWORD *)(v163 + 8) = v161;
    if (v164 && !atomic_fetch_add(&v164->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
    if (v162 && !atomic_fetch_add(&v162->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
    v145 += 24;
    uint64_t v112 = v295;
    if (v290 == v145) {
      goto LABEL_247;
    }
  }
  if (v146 <= 8) {
    unint64_t v155 = v148 + 1;
  }
  else {
    unint64_t v155 = v148 + 2;
  }
  if (v147 >= v155)
  {
    uint64_t v153 = *v10;
    if (!*((unsigned char *)v10 + 24)) {
      goto LABEL_226;
    }
    if (v151 >= v147) {
      int v156 = 0;
    }
    else {
      int v156 = *(unsigned __int8 *)(v153 + v151);
    }
    unsigned int v154 = ((v156 & (0xFFFF << (8 - v146))) >> (8 - v146)) | ((((1 << (8 - v146)) + 255) & *(unsigned __int8 *)(v153 + v148)) << v146);
    void v10[2] = v151;
    goto LABEL_229;
  }
LABEL_297:
  void v10[2] = v149;
  *((unsigned char *)v10 + 24) = v150;
LABEL_298:
  unint64_t v202 = GEOGetGeoCSSStyleSheetLog();
  if (os_log_type_enabled(v202, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 576;
    *(_WORD *)&buf[18] = 2082;
    *(void *)&buf[20] = "Could not read zoom style min zoom.";
    _os_log_impl(&dword_1A1780000, v202, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
  }

  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleSheet.hpp", 80);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
  v203 = (void *)std::ostream::operator<<();
  unint64_t v204 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v203, (uint64_t)" STYL Parse Error Here: ", 24);
  char v205 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v204, (uint64_t)"Could not read zoom style min zoom.", 35);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v205, (uint64_t)"\n", 1);
LABEL_137:
  uint64_t v103 = 0;
LABEL_138:
  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v307.__r_.__value_.__l.__data_);
  }
  return v103;
}

void sub_1A184D238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::~intern_vector((uint64_t)&a34);
  if (*(char *)(v34 - 177) < 0) {
    operator delete(*(void **)(v34 - 200));
  }
  _Unwind_Resume(a1);
}

gss::Allocator *geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::resize(gss::Allocator *result, unint64_t a2)
{
  if (!*((unsigned char *)result + 12))
  {
    uint64_t v3 = result;
    unint64_t v4 = *((unsigned __int16 *)result + 4);
    if (v4 > a2)
    {
      uint64_t v5 = 24 * *((unsigned __int16 *)result + 4) - 24 * a2;
      unsigned int v6 = (unsigned char *)(24 * a2 + *(void *)result + 20);
      do
      {
        unint64_t v7 = v6 - 12;
        if (!*v6)
        {
          if (*v7)
          {
            uint64_t v8 = gss::Allocator::instance(result);
            double result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v8 + 40))(v8, *(void *)(v6 - 12), 4 * *((unsigned __int16 *)v6 - 1));
          }
        }
        *(void *)(v6 - 7) = 0;
        void *v7 = 0;
        v6 += 24;
        v5 -= 24;
      }
      while (v5);
      goto LABEL_17;
    }
    if (v4 >= a2) {
      return result;
    }
    if (*((unsigned __int16 *)result + 5) >= a2)
    {
      size_t v10 = *(gss::Allocator **)result;
      if (v4 == a2)
      {
LABEL_17:
        *((_WORD *)v3 + 4) = a2;
        return result;
      }
    }
    else
    {
      uint64_t v9 = gss::Allocator::instance(result);
      double result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v9 + 16))(v9, 24 * a2, 8);
      size_t v10 = result;
      if (*(void *)v3) {
        double result = geo::intern_vector<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,geo::StdAllocator<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,gss::Allocator>>::moveContent(v3, (uint64_t)result);
      }
      *((_WORD *)v3 + 5) = a2;
      *(void *)uint64_t v3 = v10;
      unint64_t v4 = *((unsigned __int16 *)v3 + 4);
      if (v4 == a2) {
        goto LABEL_17;
      }
    }
    uint64_t v11 = 24 * v4;
    char v12 = (void *)((char *)v10 + 24 * v4);
    unint64_t v13 = 24 * a2 - v11;
    do
    {
      void *v12 = 0;
      v12[1] = 0;
      void v12[2] = 0;
      v12 += 3;
      v13 -= 24;
    }
    while (v13);
    goto LABEL_17;
  }
  return result;
}

gss::Allocator *geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::intern<geo::StdAllocator<gss::StyleCondition,gss::Allocator>>(gss::Allocator *result, uint64_t a2)
{
  if (!*((unsigned char *)result + 12))
  {
    id v2 = result;
    unint64_t v3 = *((unsigned __int16 *)result + 4);
    if (!*((_WORD *)result + 4))
    {
LABEL_9:
      *((unsigned char *)v2 + 12) = 1;
      return result;
    }
    if (*(_DWORD *)(a2 + 24) >= v3)
    {
      uint64_t v4 = *(void *)(a2 + 8);
      if (*(void *)a2 == v4 || (uint64_t v5 = *(uint64_t **)(v4 - 8), v6 = v5[1], v5[2] - v6 < v3)) {
        operator new();
      }
      uint64_t v7 = *v5;
      v5[1] = v6 + v3;
      if (v7)
      {
        uint64_t v8 = v7 + 24 * v6;
        double result = geo::intern_vector<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,geo::StdAllocator<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,gss::Allocator>>::moveContent(result, v8);
        *((_WORD *)v2 + 5) = 0;
        *(void *)id v2 = v8;
        goto LABEL_9;
      }
    }
  }
  return result;
}

void sub_1A184D7D8(_Unwind_Exception *a1)
{
  std::default_delete<geo::intern_allocator<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::PageInfo>::operator()[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void sub_1A184D7EC(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x1020C4024DAA5DELL);
  _Unwind_Resume(a1);
}

gss::Allocator *geo::intern_vector<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,geo::StdAllocator<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,gss::Allocator>>::moveContent(gss::Allocator *result, uint64_t a2)
{
  id v2 = result;
  __int16 v3 = *((_WORD *)result + 4);
  if (v3)
  {
    uint64_t v5 = *(void *)result;
    int v6 = *((unsigned __int16 *)result + 4);
    while (1)
    {
      *(_DWORD *)a2 = *(_DWORD *)v5;
      *(void *)(a2 + 8) = 0;
      double result = (gss::Allocator *)(a2 + 8);
      *(void *)(a2 + 13) = 0;
      uint64_t v7 = *(void *)(v5 + 8);
      if (!*(unsigned char *)(v5 + 20)) {
        break;
      }
      *(void *)(a2 + 8) = v7;
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(v5 + 16);
      *(unsigned char *)(a2 + 20) = 1;
LABEL_4:
      a2 += 24;
      v5 += 24;
      if (!(_WORD)--v6) {
        goto LABEL_17;
      }
    }
    uint64_t v8 = *(unsigned __int16 *)(v5 + 16);
    if (*(_WORD *)(v5 + 16))
    {
      double result = (gss::Allocator *)geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::reserve((uint64_t)result, *(unsigned __int16 *)(v5 + 16));
      uint64_t v9 = *(unsigned __int16 *)(a2 + 16);
      uint64_t v10 = *(void *)(a2 + 8);
      uint64_t v11 = (_DWORD *)(v10 + 4 * v9);
      unint64_t v12 = (v8 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v12 >= 7)
      {
        unint64_t v13 = (int *)v7;
        if ((unint64_t)(4 * v9 + v10 - v7) >= 0x20)
        {
          uint64_t v14 = (v12 + 1) & 0x7FFFFFFFFFFFFFF8;
          v11 += v14;
          unint64_t v15 = (long long *)(v7 + 16);
          unsigned int v16 = (_OWORD *)(v10 + 4 * v9 + 16);
          uint64_t v17 = v14;
          do
          {
            long long v18 = *v15;
            *(v16 - 1) = *(v15 - 1);
            _OWORD *v16 = v18;
            v15 += 2;
            v16 += 2;
            v17 -= 8;
          }
          while (v17);
          if (v12 + 1 == v14) {
            goto LABEL_16;
          }
          unint64_t v13 = (int *)(v7 + 4 * v14);
        }
      }
      else
      {
        unint64_t v13 = (int *)v7;
      }
      do
      {
        int v19 = *v13++;
        *v11++ = v19;
      }
      while (v13 != (int *)(v7 + 4 * v8));
    }
    else
    {
      LOWORD(v9) = 0;
    }
LABEL_16:
    *(_WORD *)(a2 + 16) = v9 + v8;
    goto LABEL_4;
  }
LABEL_17:
  if (!*((unsigned char *)v2 + 12) && *(void *)v2)
  {
    if (*((_WORD *)v2 + 4))
    {
      uint64_t v20 = 24 * *((unsigned __int16 *)v2 + 4);
      uint64_t v21 = (unsigned char *)(*(void *)v2 + 20);
      do
      {
        uint64_t v22 = v21 - 12;
        if (!*v21 && *v22)
        {
          uint64_t v23 = gss::Allocator::instance(result);
          double result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v23 + 40))(v23, *(void *)(v21 - 12), 4 * *((unsigned __int16 *)v21 - 1));
        }
        *(void *)(v21 - 7) = 0;
        void *v22 = 0;
        v21 += 24;
        v20 -= 24;
      }
      while (v20);
    }
    uint64_t v24 = gss::Allocator::instance(result);
    double result = (gss::Allocator *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v24 + 40))(v24, *(void *)v2, 24 * *((unsigned __int16 *)v2 + 5));
  }
  *(void *)((char *)v2 + 5) = 0;
  *(void *)id v2 = 0;
  *((_WORD *)v2 + 4) = v3;
  return result;
}

void gss::make_shared<gss::ConditionalStyle<gss::ScenePropertyID>,geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>>(gss::Allocator *a1, uint64_t *a2)
{
  uint64_t v4 = gss::Allocator::instance(a1);
  uint64_t v5 = (std::__shared_weak_count *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 16))(v4, 192, 8);
  v5->__shared_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A660;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  p_shared_owners = &v5[1].__shared_owners_;
  v5[2].__vftable = 0;
  v5[2].__shared_owners_ = 0;
  v5[1].__shared_owners_ = (uint64_t)&unk_1EF567350;
  v5[1].__shared_weak_owners_ = 0;
  *(uint64_t *)((char *)&v5[2].__shared_owners_ + 5) = 0;
  v5[3].__vftable = 0;
  *(std::__shared_weak_count_vtbl **)((char *)&v5[3].__vftable + 5) = 0;
  v5[3].__shared_weak_owners_ = 0;
  *(uint64_t *)((char *)&v5[3].__shared_weak_owners_ + 5) = 0;
  *(_OWORD *)&v5[4].__shared_owners_ = 0u;
  v5[5].std::__shared_count = 0u;
  v5[5].__shared_weak_owners_ = 0;
  LODWORD(v5[6].__shared_owners_) = 0;
  atomic_store(0, (unsigned __int8 *)&v5[6].__shared_owners_ + 2);
  v5[1].__shared_owners_ = (uint64_t)&unk_1EF567450;
  *(uint64_t *)((char *)&v5[6].__shared_weak_owners_ + 5) = 0;
  v5[6].__shared_weak_owners_ = 0;
  geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::copy((uint64_t)&v5[6].__shared_weak_owners_, a2);
  v5[7].__shared_owners_ = 0;
  v5[7].__shared_weak_owners_ = 0;
  *(void *)a1 = (char *)v5 + 32;
  *((void *)a1 + 1) = v5;
  uint64_t v7 = (std::__shared_weak_count *)v5[2].__vftable;
  if (v7)
  {
    if (v7->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v5[1].__shared_weak_owners_ = (uint64_t)p_shared_owners;
    v5[2].__vftable = (std::__shared_weak_count_vtbl *)v5;
    std::__shared_weak_count::__release_weak(v7);
  }
  else
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v5[1].__shared_weak_owners_ = (uint64_t)p_shared_owners;
    v5[2].__vftable = (std::__shared_weak_count_vtbl *)v5;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1A184DBF0(_Unwind_Exception *a1)
{
  gss::CartoStyle<gss::ScenePropertyID>::~CartoStyle(v3);
  std::__shared_weak_count::~__shared_weak_count(v1);
  (*(void (**)(uint64_t, std::__shared_weak_count *, uint64_t))(*(void *)v2 + 40))(v2, v1, 192);
  _Unwind_Resume(a1);
}

void gss::make_shared<gss::ConditionalStyle<gss::PropertyID>,geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>>(gss::Allocator *a1, uint64_t *a2)
{
  uint64_t v4 = gss::Allocator::instance(a1);
  uint64_t v5 = (std::__shared_weak_count *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 16))(v4, 192, 8);
  v5->__shared_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF58A628;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  p_shared_owners = &v5[1].__shared_owners_;
  v5[2].__vftable = 0;
  v5[2].__shared_owners_ = 0;
  v5[1].__shared_owners_ = (uint64_t)&unk_1EF567328;
  v5[1].__shared_weak_owners_ = 0;
  *(uint64_t *)((char *)&v5[2].__shared_owners_ + 5) = 0;
  v5[3].__vftable = 0;
  *(std::__shared_weak_count_vtbl **)((char *)&v5[3].__vftable + 5) = 0;
  v5[3].__shared_weak_owners_ = 0;
  *(uint64_t *)((char *)&v5[3].__shared_weak_owners_ + 5) = 0;
  *(_OWORD *)&v5[4].__shared_owners_ = 0u;
  v5[5].std::__shared_count = 0u;
  v5[5].__shared_weak_owners_ = 0;
  LODWORD(v5[6].__shared_owners_) = 0;
  atomic_store(0, (unsigned __int8 *)&v5[6].__shared_owners_ + 2);
  v5[1].__shared_owners_ = (uint64_t)&unk_1EF567428;
  *(uint64_t *)((char *)&v5[6].__shared_weak_owners_ + 5) = 0;
  v5[6].__shared_weak_owners_ = 0;
  geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::copy((uint64_t)&v5[6].__shared_weak_owners_, a2);
  v5[7].__shared_owners_ = 0;
  v5[7].__shared_weak_owners_ = 0;
  *(void *)a1 = (char *)v5 + 32;
  *((void *)a1 + 1) = v5;
  uint64_t v7 = (std::__shared_weak_count *)v5[2].__vftable;
  if (v7)
  {
    if (v7->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v5[1].__shared_weak_owners_ = (uint64_t)p_shared_owners;
    v5[2].__vftable = (std::__shared_weak_count_vtbl *)v5;
    std::__shared_weak_count::__release_weak(v7);
  }
  else
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v5[1].__shared_weak_owners_ = (uint64_t)p_shared_owners;
    v5[2].__vftable = (std::__shared_weak_count_vtbl *)v5;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1A184DE00(_Unwind_Exception *a1)
{
  gss::CartoStyle<gss::PropertyID>::~CartoStyle(v3);
  std::__shared_weak_count::~__shared_weak_count(v1);
  (*(void (**)(uint64_t, std::__shared_weak_count *, uint64_t))(*(void *)v2 + 40))(v2, v1, 192);
  _Unwind_Resume(a1);
}

uint64_t geo::intern_vector<gss::StyleCondition,geo::StdAllocator<gss::StyleCondition,gss::Allocator>>::copy(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = (unsigned __int16 *)result;
  if (!*(unsigned char *)(result + 12) && *(void *)result)
  {
    if (*(_WORD *)(result + 8))
    {
      uint64_t v4 = 24 * *(unsigned __int16 *)(result + 8);
      uint64_t v5 = (unsigned char *)(*(void *)result + 20);
      do
      {
        int v6 = v5 - 12;
        if (!*v5 && *v6)
        {
          uint64_t v7 = gss::Allocator::instance((gss::Allocator *)result);
          double result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v7 + 40))(v7, *(void *)(v5 - 12), 4 * *((unsigned __int16 *)v5 - 1));
        }
        *(void *)(v5 - 7) = 0;
        void *v6 = 0;
        v5 += 24;
        v4 -= 24;
      }
      while (v4);
    }
    uint64_t v8 = gss::Allocator::instance((gss::Allocator *)result);
    double result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v8 + 40))(v8, *(void *)v3, 24 * v3[5]);
  }
  *(void *)((char *)v3 + 5) = 0;
  *(void *)uint64_t v3 = 0;
  uint64_t v9 = *a2;
  if (*((unsigned char *)a2 + 12))
  {
    *(void *)uint64_t v3 = v9;
    *((_DWORD *)v3 + 2) = *((_DWORD *)a2 + 2);
    *((unsigned char *)v3 + 12) = 1;
    return result;
  }
  uint64_t v10 = *((unsigned __int16 *)a2 + 4);
  if (*((_WORD *)a2 + 4))
  {
    uint64_t v11 = gss::Allocator::instance((gss::Allocator *)result);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11 + 16))(v11, 24 * v10, 8);
    if (*(void *)v3) {
      geo::intern_vector<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,geo::StdAllocator<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,gss::Allocator>>::moveContent((gss::Allocator *)v3, v12);
    }
    uint64_t v13 = v9 + 24 * v10;
    v3[5] = v10;
    *(void *)uint64_t v3 = v12;
    uint64_t v14 = v12 + 24 * v3[4];
    while (1)
    {
      *(_DWORD *)uint64_t v14 = *(_DWORD *)v9;
      *(void *)(v14 + 8) = 0;
      double result = v14 + 8;
      *(void *)(v14 + 13) = 0;
      uint64_t v15 = *(void *)(v9 + 8);
      if (!*(unsigned char *)(v9 + 20)) {
        break;
      }
      *(void *)(v14 + 8) = v15;
      *(_DWORD *)(v14 + 16) = *(_DWORD *)(v9 + 16);
      *(unsigned char *)(v14 + 20) = 1;
LABEL_17:
      v9 += 24;
      v14 += 24;
      if (v9 == v13)
      {
        unsigned __int16 v28 = v3[4];
        goto LABEL_32;
      }
    }
    uint64_t v16 = *(unsigned __int16 *)(v9 + 16);
    if (*(_WORD *)(v9 + 16))
    {
      double result = geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::reserve(result, *(unsigned __int16 *)(v9 + 16));
      uint64_t v17 = *(unsigned __int16 *)(v14 + 16);
      uint64_t v18 = *(void *)(v14 + 8);
      int v19 = (_DWORD *)(v18 + 4 * v17);
      unint64_t v20 = (v16 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v20 >= 7)
      {
        uint64_t v21 = (int *)v15;
        if ((unint64_t)(4 * v17 + v18 - v15) >= 0x20)
        {
          uint64_t v22 = (v20 + 1) & 0x7FFFFFFFFFFFFFF8;
          v19 += v22;
          uint64_t v23 = (long long *)(v15 + 16);
          uint64_t v24 = (_OWORD *)(v18 + 4 * v17 + 16);
          uint64_t v25 = v22;
          do
          {
            long long v26 = *v23;
            *(v24 - 1) = *(v23 - 1);
            _OWORD *v24 = v26;
            v23 += 2;
            v24 += 2;
            v25 -= 8;
          }
          while (v25);
          if (v20 + 1 == v22) {
            goto LABEL_29;
          }
          uint64_t v21 = (int *)(v15 + 4 * v22);
        }
      }
      else
      {
        uint64_t v21 = (int *)v15;
      }
      do
      {
        int v27 = *v21++;
        *v19++ = v27;
      }
      while (v21 != (int *)(v15 + 4 * v16));
    }
    else
    {
      LOWORD(v17) = 0;
    }
LABEL_29:
    *(_WORD *)(v14 + 16) = v17 + v16;
    goto LABEL_17;
  }
  unsigned __int16 v28 = 0;
LABEL_32:
  v3[4] = v28 + v10;
  return result;
}

void gdc::LayerDataManager::createDataRequests(void *a1, unsigned __int16 **a2, unsigned __int16 **a3, uint64_t a4)
{
  uint64_t v8 = (void *)a1[7];
  if (v8[29])
  {
    uint64_t v9 = (void *)v8[28];
    if (v9)
    {
      do
      {
        unint64_t v20 = (void *)*v9;
        uint64_t v21 = (void *)v9[3];
        if (v21 != (void *)v9[5]) {
          free(v21);
        }
        operator delete(v9);
        uint64_t v9 = v20;
      }
      while (v20);
    }
    v8[28] = 0;
    uint64_t v10 = v8[27];
    if (v10)
    {
      for (uint64_t i = 0; i != v10; ++i)
        *(void *)(v8[26] + 8 * i) = 0;
    }
    v8[29] = 0;
  }
  uint64_t v12 = (unsigned __int16 *)a1[1];
  uint64_t v13 = (unsigned __int16 *)a1[2];
  while (v12 != v13)
  {
    int v14 = *v12;
    uint64_t v15 = (gdc::LayerDataSource *)*((void *)v12 + 1);
    uint64_t v16 = *a2;
    uint64_t v17 = a2[1];
    if (*a2 != v17)
    {
      while (v14 != *v16)
      {
        v16 += 24;
        if (v16 == v17) {
          goto LABEL_16;
        }
      }
    }
    if (v16 != v17) {
      gdc::LayerDataSource::createLayerDataRequests(*((gdc::LayerDataSource **)v12 + 1), (uint64_t)(v16 + 4), a4, (void *)a1[7]);
    }
LABEL_16:
    uint64_t v18 = *a3;
    int v19 = a3[1];
    if (*a3 != v19)
    {
      while (v14 != *v18)
      {
        v18 += 24;
        if (v18 == v19) {
          goto LABEL_8;
        }
      }
    }
    if (v18 != v19) {
      gdc::LayerDataSource::createLayerDataRequests(v15, (uint64_t)(v18 + 4), a4, (void *)a1[7]);
    }
LABEL_8:
    v12 += 12;
  }
  uint64_t v22 = (gdc::ResourceManager *)a1[7];
  gdc::ResourceManager::finishBatch(v22);
}

void gdc::LayerDataSource::createLayerDataRequests(void *a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v293 = *MEMORY[0x1E4F143B8];
  (*(void (**)(void *, void, void))(*a1 + 80))(a1, *a2, a2[1]);
  uint64_t v7 = (char *)a1[28];
  int v6 = (char *)a1[29];
  if (v6 != v7)
  {
    do
    {
      uint64_t v8 = (void *)*((void *)v6 - 11);
      if (v8 != *((void **)v6 - 9)) {
        free(v8);
      }
      v6 -= 96;
    }
    while (v6 != v7);
    int v6 = (char *)a1[28];
  }
  a1[29] = v7;
  uint64_t v9 = a1[26] - a1[25];
  uint64_t v10 = v9 >> 4;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[30] - (void)v6) >> 5) < v9 >> 4)
  {
    if ((unint64_t)v9 >= 0x2AAAAAAAAAAAAAA1) {
      goto LABEL_390;
    }
    uint64_t v11 = 96 * v10;
    uint64_t v12 = (char *)operator new(96 * v10);
    uint64_t v13 = &v12[v11];
    uint64_t v14 = (v7 - v6) / 96;
    uint64_t v15 = &v12[96 * v14];
    if (v7 != v6)
    {
      uint64_t v16 = 0;
      uint64_t v17 = (uint64_t)&v12[96 * v14 - 56];
      uint64_t v18 = v15;
      int v19 = v7;
      while (1)
      {
        unint64_t v20 = v18;
        uint64_t v21 = *((void *)v19 - 12);
        v19 -= 96;
        *((void *)v18 - 12) = v21;
        v18 -= 96;
        uint64_t v22 = v18 + 40;
        *((void *)v18 + 1) = v18 + 40;
        uint64_t v23 = (char *)*((void *)v7 - 11);
        *((void *)v18 + 3) = v18 + 40;
        *((void *)v18 + 4) = *((void *)v7 - 8);
        if (v23 == *((char **)v7 - 9))
        {
          uint64_t v24 = (char *)*((void *)v7 - 10);
          unint64_t v25 = v24 - v23;
          *(v20 - 10) = &v22[v24 - v23];
          if (v24 != v23)
          {
            if (v25 >= 8 && (unint64_t)(v17 - 96 * v16 - (void)v23) >= 0x20)
            {
              if (v25 < 0x20)
              {
                unint64_t v26 = 0;
                goto LABEL_23;
              }
              unint64_t v27 = 0;
              unint64_t v26 = v25 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                unsigned __int16 v28 = &v20[v27 / 8];
                long long v29 = *(_OWORD *)&v23[v27 + 16];
                *(_OWORD *)(v28 - 7) = *(_OWORD *)&v23[v27];
                *(_OWORD *)(v28 - 5) = v29;
                v27 += 32;
              }
              while (v26 != v27);
              if (v25 == v26) {
                goto LABEL_12;
              }
              if ((v25 & 0x18) != 0)
              {
LABEL_23:
                unint64_t v30 = v25 & 0xFFFFFFFFFFFFFFF8;
                v22 += v25 & 0xFFFFFFFFFFFFFFF8;
                do
                {
                  *(void *)((char *)v20 + v26 - 56) = *(void *)&v23[v26];
                  v26 += 8;
                }
                while (v30 != v26);
                if (v25 == v30) {
                  goto LABEL_12;
                }
                v23 += v30;
              }
              else
              {
                v23 += v26;
                v22 += v26;
              }
            }
            do
            {
              char v31 = *v23++;
              *v22++ = v31;
            }
            while (v23 != v24);
          }
        }
        else
        {
          *(v20 - 11) = v23;
          *(v20 - 10) = *((void *)v7 - 10);
          *(_OWORD *)(v7 - 88) = 0uLL;
          *(_OWORD *)(v7 - 72) = 0uLL;
        }
LABEL_12:
        *(v20 - 3) = *((void *)v7 - 3);
        *((_OWORD *)v20 - 1) = *((_OWORD *)v7 - 1);
        ++v16;
        uint64_t v7 = v19;
        if (v19 == v6)
        {
          uint64_t v7 = (char *)a1[28];
          unint64_t v32 = (char *)a1[29];
          a1[28] = v18;
          a1[29] = v15;
          a1[30] = v13;
          while (v32 != v7)
          {
            unint64_t v33 = (void *)*((void *)v32 - 11);
            if (v33 != *((void **)v32 - 9)) {
              free(v33);
            }
            v32 -= 96;
          }
          goto LABEL_36;
        }
      }
    }
    a1[28] = v15;
    a1[29] = v15;
    a1[30] = v13;
LABEL_36:
    if (v7) {
      operator delete(v7);
    }
  }
  uint64_t v273 = a1;
  uint64_t v34 = *a2;
  uint64_t v35 = a2[1];
  if (*a2 != v35)
  {
    while (1)
    {
      uint64_t v36 = *(unsigned __int16 **)v34;
      if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
      }
      char v37 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
      if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG))
      {
        gdc::LayerDataRequestKey::keysInt32Str((std::string *)&__p, *(unsigned __int16 **)v34);
        p_p = &__p;
        if (v280[7] < 0) {
          p_p = __p;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
        _os_log_impl(&dword_1A1780000, v37, OS_LOG_TYPE_DEBUG, "Requesting layer data for: %s", (uint8_t *)&buf, 0xCu);
        if ((v280[7] & 0x80000000) != 0) {
          operator delete(__p);
        }
        if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
          dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
        }
      }
      uint64_t v39 = *(unsigned __int16 **)v34;
      os_signpost_id_t v40 = *(void *)(*(void *)v34 + 112);
      if (v40 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        int v41 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
        if (os_signpost_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log))
        {
          int v42 = (int *)*((void *)v36 + 2);
          int v43 = *v42;
          int v44 = v42[1];
          int v45 = v42[2];
          int v46 = v36[4];
          int v47 = *(unsigned __int8 *)v36;
          unint64_t v48 = "<Invalid>";
          if (v47 == 1) {
            unint64_t v48 = "Preliminary";
          }
          BOOL v49 = v47 == 0;
          unint64_t v50 = "Standard";
          if (!v49) {
            unint64_t v50 = v48;
          }
          LODWORD(__p) = 67110146;
          HIDWORD(__p) = v43;
          LOWORD(v279) = 1024;
          *(_DWORD *)((char *)&v279 + 2) = v44;
          HIWORD(v279) = 1024;
          *(_DWORD *)long long v280 = v45;
          *(_WORD *)&v280[4] = 1024;
          *(_DWORD *)&v280[6] = v46;
          *(_WORD *)&v280[10] = 2080;
          *(void *)&v280[12] = v50;
          _os_signpost_emit_with_name_impl(&dword_1A1780000, v41, OS_SIGNPOST_INTERVAL_BEGIN, v40, "LayerDataRequest", "tileKey=%d.%d.%d type=%d requestType=%s", (uint8_t *)&__p, 0x24u);
          uint64_t v39 = *(unsigned __int16 **)v34;
        }
      }
      LOBYTE(__p) = *(unsigned char *)v39;
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v279, (uint64_t)(v39 + 4));
      char v283 = 0;
      if (*((unsigned char *)v39 + 96))
      {
        int v284 = *((_DWORD *)v39 + 25);
        char v283 = 1;
      }
      uint64_t v285 = *((void *)v39 + 13);
      int v286 = *(unsigned __int16 **)v34;
      uint64_t v51 = *(std::__shared_weak_count **)(v34 + 8);
      int v287 = v51;
      if (v51) {
        atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,std::pair<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>((uint64_t)(v273 + 5), (unsigned __int8 *)&__p, (uint64_t)&__p);
      long long v52 = v287;
      if (v287)
      {
        if (!atomic_fetch_add(&v287->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      if (v283) {
        goto LABEL_64;
      }
LABEL_65:
      if (*(void *)v280 != *(void *)&v280[16]) {
        free(*(void **)v280);
      }
      v34 += 16;
      if (v34 == v35) {
        goto LABEL_69;
      }
    }
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
    if (!v283) {
      goto LABEL_65;
    }
LABEL_64:
    char v283 = 0;
    goto LABEL_65;
  }
LABEL_69:
  uint64_t v53 = v273;
  uint64_t v54 = *(uint64_t **)(v273[34] + 24);
  if (!v54) {
    goto LABEL_194;
  }
  while (2)
  {
    if (*((_DWORD *)v54 + 28)) {
      goto LABEL_74;
    }
    unint64_t v58 = v53[29];
    unint64_t v57 = v53[30];
    if (v58 < v57)
    {
      uint64_t v55 = (char *)(v58 + 40);
      *(void *)unint64_t v58 = v54[2];
      *(void *)(v58 + 8) = v58 + 40;
      *(void *)(v58 + 16) = v58 + 40;
      *(void *)(v58 + 24) = v58 + 40;
      *(void *)(v58 + 32) = 32;
      uint64_t v59 = (char *)v54[3];
      char v60 = (char *)v54[4];
      unint64_t v61 = v60 - v59;
      if ((unint64_t)(v60 - v59) < 0x21) {
        goto LABEL_126;
      }
      if (v61 <= 0x40) {
        size_t v62 = 64;
      }
      else {
        size_t v62 = v60 - v59;
      }
      uint64_t v55 = (char *)malloc_type_malloc(v62, 0x100004077774924uLL);
      unsigned int v63 = *(char **)(v58 + 8);
      unint64_t v64 = *(char **)(v58 + 16);
      if (v63 == v64)
      {
LABEL_125:
        *(void *)(v58 + 8) = v55;
        *(void *)(v58 + 16) = v55;
        *(void *)(v58 + 32) = v62;
LABEL_126:
        if (v59 == v60) {
          goto LABEL_72;
        }
        if (v61 < 8)
        {
          int v107 = v55;
          goto LABEL_142;
        }
        if ((unint64_t)(v55 - v59) < 0x20)
        {
          int v107 = v55;
          goto LABEL_142;
        }
        if (v61 >= 0x20)
        {
          unint64_t v106 = v61 & 0xFFFFFFFFFFFFFFE0;
          int v108 = (long long *)(v59 + 16);
          uint64_t v109 = v55 + 16;
          unint64_t v110 = v61 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v111 = *v108;
            *(v109 - 1) = *(v108 - 1);
            *uint64_t v109 = v111;
            v108 += 2;
            v109 += 2;
            v110 -= 32;
          }
          while (v110);
          if (v61 == v106) {
            goto LABEL_71;
          }
          if ((v61 & 0x18) == 0)
          {
            v59 += v106;
            int v107 = &v55[v106];
            goto LABEL_142;
          }
        }
        else
        {
          unint64_t v106 = 0;
        }
        unint64_t v112 = v61 & 0xFFFFFFFFFFFFFFF8;
        int v107 = &v55[v61 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v113 = v106 - (v61 & 0xFFFFFFFFFFFFFFF8);
        uint64_t v114 = (uint64_t *)&v59[v106];
        unint64_t v115 = &v55[v106];
        do
        {
          uint64_t v116 = *v114++;
          *(void *)unint64_t v115 = v116;
          v115 += 8;
          v113 += 8;
        }
        while (v113);
        if (v61 == v112) {
          goto LABEL_71;
        }
        v59 += v112;
        do
        {
LABEL_142:
          char v117 = *v59++;
          *v107++ = v117;
        }
        while (v59 != v60);
LABEL_71:
        uint64_t v55 = *(char **)(v58 + 16);
LABEL_72:
        *(void *)(v58 + 16) = &v55[v61];
        *(void *)(v58 + 72) = v54[11];
        *(_OWORD *)(v58 + 80) = *((_OWORD *)v54 + 6);
        char v56 = (int64x2_t *)(v58 + 96);
        v53[29] = v58 + 96;
        goto LABEL_73;
      }
      unint64_t v65 = v64 - v63;
      if ((unint64_t)(v64 - v63) < 8)
      {
        unint64_t v66 = v55;
      }
      else
      {
        unint64_t v66 = v55;
        if ((unint64_t)(v55 - v63) >= 0x20)
        {
          if (v65 < 0x20)
          {
            uint64_t v67 = 0;
LABEL_110:
            unint64_t v91 = v65 & 0xFFFFFFFFFFFFFFF8;
            unint64_t v66 = &v55[v65 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v92 = v67 - (v65 & 0xFFFFFFFFFFFFFFF8);
            unint64_t v93 = (uint64_t *)&v63[v67];
            char v94 = &v55[v67];
            do
            {
              uint64_t v95 = *v93++;
              *(void *)char v94 = v95;
              v94 += 8;
              v92 += 8;
            }
            while (v92);
            if (v65 == v91) {
              goto LABEL_125;
            }
            v63 += v91;
            goto LABEL_124;
          }
          uint64_t v67 = v65 & 0xFFFFFFFFFFFFFFE0;
          uint64_t v87 = (long long *)(v63 + 16);
          char v88 = v55 + 16;
          unint64_t v89 = v65 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v90 = *v87;
            *(v88 - 1) = *(v87 - 1);
            _OWORD *v88 = v90;
            v87 += 2;
            v88 += 2;
            v89 -= 32;
          }
          while (v89);
          if (v65 == v67) {
            goto LABEL_125;
          }
          if ((v65 & 0x18) != 0) {
            goto LABEL_110;
          }
          v63 += v67;
          unint64_t v66 = &v55[v67];
        }
      }
      do
      {
LABEL_124:
        char v105 = *v63++;
        *v66++ = v105;
      }
      while (v63 != v64);
      goto LABEL_125;
    }
    uint64_t v68 = v53[28];
    unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - v68) >> 5);
    unint64_t v70 = v69 + 1;
    if (v69 + 1 > 0x2AAAAAAAAAAAAAALL) {
LABEL_390:
    }
      abort();
    unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - v68) >> 5);
    if (2 * v71 > v70) {
      unint64_t v70 = 2 * v71;
    }
    if (v71 >= 0x155555555555555) {
      unint64_t v72 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v72 = v70;
    }
    uint64_t v275 = v58 - v68;
    if (v72)
    {
      if (v72 > 0x2AAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      int v73 = (char *)operator new(96 * v72);
    }
    else
    {
      int v73 = 0;
    }
    int v74 = (int64x2_t *)&v73[96 * v69];
    v74->i64[0] = v54[2];
    uint64_t v75 = &v74[2].u64[1];
    v74->i64[1] = (uint64_t)&v74[2].i64[1];
    char v76 = &v74->i64[1];
    v74[1] = vdupq_n_s64((unint64_t)&v74[2].u64[1]);
    unsigned int v77 = v74 + 1;
    v74[2].i64[0] = 32;
    unint64_t v78 = (char *)v54[3];
    unsigned int v79 = (char *)v54[4];
    unint64_t v80 = v79 - v78;
    if ((unint64_t)(v79 - v78) >= 0x21)
    {
      unint64_t v270 = v72;
      v271 = v73;
      if (v80 <= 0x40) {
        size_t v81 = 64;
      }
      else {
        size_t v81 = v79 - v78;
      }
      uint64_t v75 = (unint64_t *)malloc_type_malloc(v81, 0x100004077774924uLL);
      unint64_t v82 = (unint64_t *)*v76;
      unint64_t v83 = (unint64_t *)v77->i64[0];
      if (*v76 == v77->i64[0]) {
        goto LABEL_146;
      }
      unint64_t v84 = (char *)v83 - (char *)v82;
      if ((unint64_t)((char *)v83 - (char *)v82) < 8)
      {
        int v85 = v75;
        goto LABEL_145;
      }
      int v85 = v75;
      if ((unint64_t)((char *)v75 - (char *)v82) < 0x20) {
        goto LABEL_145;
      }
      if (v84 >= 0x20)
      {
        unint64_t v86 = v84 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v96 = (long long *)(v82 + 2);
        unsigned int v97 = v75 + 2;
        unint64_t v98 = v84 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v99 = *v96;
          *(v97 - 1) = *(v96 - 1);
          _OWORD *v97 = v99;
          v96 += 2;
          v97 += 2;
          v98 -= 32;
        }
        while (v98);
        if (v84 == v86) {
          goto LABEL_146;
        }
        if ((v84 & 0x18) == 0)
        {
          unint64_t v82 = (unint64_t *)((char *)v82 + v86);
          int v85 = (unint64_t *)((char *)v75 + v86);
          goto LABEL_145;
        }
      }
      else
      {
        unint64_t v86 = 0;
      }
      unint64_t v100 = v84 & 0xFFFFFFFFFFFFFFF8;
      int v85 = (unint64_t *)((char *)v75 + (v84 & 0xFFFFFFFFFFFFFFF8));
      unint64_t v101 = v86 - (v84 & 0xFFFFFFFFFFFFFFF8);
      long long v102 = (uint64_t *)((char *)v82 + v86);
      uint64_t v103 = (unint64_t *)((char *)v75 + v86);
      do
      {
        uint64_t v104 = *v102++;
        *v103++ = v104;
        v101 += 8;
      }
      while (v101);
      if (v84 == v100) {
        goto LABEL_146;
      }
      unint64_t v82 = (unint64_t *)((char *)v82 + v100);
      do
      {
LABEL_145:
        char v118 = *(unsigned char *)v82;
        unint64_t v82 = (unint64_t *)((char *)v82 + 1);
        *(unsigned char *)int v85 = v118;
        int v85 = (unint64_t *)((char *)v85 + 1);
      }
      while (v82 != v83);
LABEL_146:
      *char v76 = (uint64_t)v75;
      v77->i64[0] = (uint64_t)v75;
      v74[2].i64[0] = v81;
      unint64_t v72 = v270;
      int v73 = v271;
    }
    if (v78 != v79)
    {
      if (v80 < 8)
      {
        unsigned __int8 v120 = v75;
        goto LABEL_163;
      }
      if ((unint64_t)((char *)v75 - v78) < 0x20)
      {
        unsigned __int8 v120 = v75;
        goto LABEL_163;
      }
      if (v80 >= 0x20)
      {
        unint64_t v119 = v80 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v121 = (long long *)(v78 + 16);
        uint64_t v122 = v75 + 2;
        unint64_t v123 = v80 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v124 = *v121;
          *(v122 - 1) = *(v121 - 1);
          _OWORD *v122 = v124;
          v121 += 2;
          v122 += 2;
          v123 -= 32;
        }
        while (v123);
        if (v80 == v119) {
          goto LABEL_164;
        }
        if ((v80 & 0x18) == 0)
        {
          v78 += v119;
          unsigned __int8 v120 = (unint64_t *)((char *)v75 + v119);
          goto LABEL_163;
        }
      }
      else
      {
        unint64_t v119 = 0;
      }
      unint64_t v125 = v80 & 0xFFFFFFFFFFFFFFF8;
      unsigned __int8 v120 = (unint64_t *)((char *)v75 + (v80 & 0xFFFFFFFFFFFFFFF8));
      unint64_t v126 = v119 - (v80 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v127 = (uint64_t *)&v78[v119];
      unint64_t v128 = (unint64_t *)((char *)v75 + v119);
      do
      {
        uint64_t v129 = *v127++;
        *v128++ = v129;
        v126 += 8;
      }
      while (v126);
      if (v80 == v125) {
        goto LABEL_164;
      }
      v78 += v125;
      do
      {
LABEL_163:
        char v130 = *v78++;
        *(unsigned char *)unsigned __int8 v120 = v130;
        unsigned __int8 v120 = (unint64_t *)((char *)v120 + 1);
      }
      while (v78 != v79);
LABEL_164:
      uint64_t v75 = (unint64_t *)v77->i64[0];
    }
    uint64_t v131 = &v73[96 * v72];
    v77->i64[0] = (uint64_t)v75 + v80;
    unsigned __int8 v132 = &v73[96 * v69];
    *((void *)v132 + 9) = v54[11];
    *((_OWORD *)v132 + 5) = *((_OWORD *)v54 + 6);
    char v56 = v74 + 6;
    uint64_t v53 = v273;
    uint64_t v133 = (int64x2_t *)v273[28];
    long long v134 = (int64x2_t *)v273[29];
    if (v134 == v133)
    {
      v273[28] = v74;
      v273[29] = v56;
      v273[30] = v131;
      goto LABEL_192;
    }
    uint64_t v135 = 0;
    uint64_t v136 = (uint64_t)&v73[v275 - 56];
    uint64_t v137 = (int64x2_t *)v273[29];
    do
    {
      int v138 = v74;
      uint64_t v139 = v137[-6].i64[0];
      v137 -= 6;
      v74[-6].i64[0] = v139;
      v74 -= 6;
      uint64_t v140 = &v74[2].i8[8];
      v74->i64[1] = (uint64_t)&v74[2].i64[1];
      uint64_t v141 = (__int8 *)v134[-6].i64[1];
      v74[1].i64[0] = (uint64_t)&v74[2].i64[1];
      v74[1].i64[1] = (uint64_t)&v74[2].i64[1];
      v74[2].i64[0] = v134[-4].i64[0];
      if (v141 != (__int8 *)v134[-5].i64[1])
      {
        v138[-6].i64[1] = (uint64_t)v141;
        v138[-5].i64[0] = v134[-5].i64[0];
        *(int64x2_t *)((char *)&v134[-6] + 8) = 0u;
        *(int64x2_t *)((char *)&v134[-5] + 8) = 0u;
        goto LABEL_168;
      }
      v138[-5].i64[0] = (uint64_t)&v140[v134[-5].i64[0] - (void)v141];
      long long v142 = (__int8 *)v134[-5].i64[0];
      if (v141 != v142)
      {
        unint64_t v143 = v142 - v141;
        if ((unint64_t)(v142 - v141) < 8 || (unint64_t)(v136 - 96 * v135 - (void)v141) < 0x20) {
          goto LABEL_184;
        }
        if (v143 >= 0x20)
        {
          unint64_t v145 = 0;
          unint64_t v144 = v143 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            uint64_t v146 = &v138[v145 / 0x10];
            int64x2_t v147 = *(int64x2_t *)&v141[v145 + 16];
            *(int64x2_t *)((char *)v146 - 56) = *(int64x2_t *)&v141[v145];
            *(int64x2_t *)((char *)v146 - 40) = v147;
            v145 += 32;
          }
          while (v144 != v145);
          if (v143 == v144) {
            goto LABEL_168;
          }
          if ((v143 & 0x18) == 0)
          {
            v141 += v144;
            v140 += v144;
            do
            {
LABEL_184:
              __int8 v149 = *v141++;
              *v140++ = v149;
            }
            while (v141 != v142);
            goto LABEL_168;
          }
        }
        else
        {
          unint64_t v144 = 0;
        }
        unint64_t v148 = v143 & 0xFFFFFFFFFFFFFFF8;
        v140 += v143 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          *(void *)((char *)&v138[-3] + v144 - 8) = *(void *)&v141[v144];
          v144 += 8;
        }
        while (v148 != v144);
        if (v143 != v148)
        {
          v141 += v148;
          goto LABEL_184;
        }
      }
LABEL_168:
      v138[-2].i64[1] = v134[-2].i64[1];
      v138[-1] = v134[-1];
      ++v135;
      long long v134 = v137;
    }
    while (v137 != v133);
    long long v134 = (int64x2_t *)v273[28];
    int v150 = (int64x2_t *)v273[29];
    v273[28] = v74;
    v273[29] = v56;
    for (v273[30] = v131; v150 != v134; v150 -= 6)
    {
      unint64_t v151 = (void *)v150[-6].i64[1];
      if (v151 != (void *)v150[-5].i64[1]) {
        free(v151);
      }
    }
LABEL_192:
    if (v134) {
      operator delete(v134);
    }
LABEL_73:
    v53[29] = v56;
LABEL_74:
    uint64_t v54 = (uint64_t *)*v54;
    if (v54) {
      continue;
    }
    break;
  }
LABEL_194:
  unint64_t v152 = (uint64_t *)v53[28];
  uint64_t v153 = (unsigned __int8 *)v53[29];
  unint64_t v154 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v153 - (unsigned __int8 *)v152) >> 5));
  if (v153 == (unsigned __int8 *)v152) {
    uint64_t v155 = 0;
  }
  else {
    uint64_t v155 = v154;
  }
  std::__introsort<std::_ClassicAlgPolicy,gdc::ResourceKeyLessThan &,gdc::ResourceKey *,false>(v152, v153, v155, 1);
  unint64_t v157 = (unsigned __int8 *)v53[28];
  int v156 = (unsigned __int8 *)v53[29];
  if (v157 == v156) {
    return;
  }
  for (uint64_t i = 0; ; i += 96)
  {
    unsigned int v159 = &v157[i];
    uint64_t v160 = (uint64_t)&v157[i + 96];
    if ((unsigned __int8 *)v160 == v156) {
      goto LABEL_239;
    }
    if (*v159 == v159[96]
      && *(unsigned __int16 *)&v157[i + 2] == *(unsigned __int16 *)&v157[i + 98]
      && *(void *)&v157[i + 72] == *(void *)&v157[i + 168])
    {
      long long v161 = *(const void **)&v157[i + 8];
      size_t v162 = *(void *)&v157[i + 16] - (void)v161;
      int8x16_t v163 = *(const void **)&v157[i + 104];
      if (v162 == *(void *)&v157[i + 112] - (void)v163 && !memcmp(v161, v163, v162)) {
        break;
      }
    }
  }
  unsigned int v164 = v159 + 192;
  if (v159 + 192 == v156) {
    goto LABEL_236;
  }
  while (2)
  {
    int v165 = v164;
    if (*v159 == *v164
      && *((unsigned __int16 *)v159 + 1) == *((unsigned __int16 *)v164 + 1)
      && *((void *)v159 + 9) == *((void *)v164 + 9))
    {
      unint64_t v166 = (const void *)*((void *)v159 + 1);
      size_t v167 = *((void *)v159 + 2) - (void)v166;
      unsigned int v168 = (const void *)*((void *)v164 + 1);
      if (v167 == *((void *)v164 + 2) - (void)v168 && !memcmp(v166, v168, v167)) {
        goto LABEL_234;
      }
    }
    *((void *)v159 + 12) = *v165;
    if (v159 == (unsigned __int8 *)v160) {
      goto LABEL_233;
    }
    unint64_t v169 = (void *)*((void *)v159 + 13);
    if (v169 != *((void **)v159 + 15)) {
      free(v169);
    }
    uint64_t v170 = v159 + 136;
    *((void *)v159 + 15) = v159 + 136;
    uint64_t v171 = *(void *)(v160 + 104);
    if (v171 != *(void *)(v160 + 120))
    {
      *((void *)v159 + 13) = v171;
      *((void *)v159 + 14) = *(void *)(v160 + 112);
      *(_OWORD *)(v160 + 104) = 0u;
      *(_OWORD *)(v160 + 120) = 0u;
      goto LABEL_232;
    }
    *((void *)v159 + 13) = v170;
    uint64_t v172 = *(char **)(v160 + 104);
    *((void *)v159 + 14) = &v170[*(void *)(v160 + 112) - (void)v172];
    uint64_t v173 = *(char **)(v160 + 112);
    if (v172 == v173) {
      goto LABEL_232;
    }
    unint64_t v174 = v173 - v172;
    if ((unint64_t)(v173 - v172) < 8 || (unint64_t)(v159 - (unsigned __int8 *)v172 + 136) < 0x20)
    {
      do
      {
LABEL_231:
        char v185 = *v172++;
        *v170++ = v185;
      }
      while (v172 != v173);
      goto LABEL_232;
    }
    if (v174 >= 0x20)
    {
      unint64_t v175 = v174 & 0xFFFFFFFFFFFFFFE0;
      long long v176 = (long long *)(v172 + 16);
      uint64_t v177 = v159 + 152;
      unint64_t v178 = v174 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v179 = *v176;
        *(v177 - 1) = *(v176 - 1);
        _OWORD *v177 = v179;
        v176 += 2;
        v177 += 2;
        v178 -= 32;
      }
      while (v178);
      if (v174 == v175) {
        goto LABEL_232;
      }
      if ((v174 & 0x18) != 0) {
        goto LABEL_226;
      }
      v172 += v175;
      v170 += v175;
      goto LABEL_231;
    }
    unint64_t v175 = 0;
LABEL_226:
    unint64_t v180 = v174 & 0xFFFFFFFFFFFFFFF8;
    v170 += v174 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v181 = v175 - (v174 & 0xFFFFFFFFFFFFFFF8);
    unsigned int v182 = (uint64_t *)&v172[v175];
    unsigned int v183 = &v159[v175 + 136];
    do
    {
      uint64_t v184 = *v182++;
      *(void *)unsigned int v183 = v184;
      v183 += 8;
      v181 += 8;
    }
    while (v181);
    if (v174 != v180)
    {
      v172 += v180;
      goto LABEL_231;
    }
LABEL_232:
    *((void *)v159 + 16) = *(void *)(v160 + 128);
LABEL_233:
    *((void *)v159 + 21) = *(void *)(v160 + 168);
    *((_OWORD *)v159 + 11) = *(_OWORD *)(v160 + 176);
    v159 += 96;
LABEL_234:
    unsigned int v164 = (unsigned __int8 *)(v165 + 12);
    uint64_t v160 = (uint64_t)v165;
    if (v165 + 12 != (void *)v156) {
      continue;
    }
    break;
  }
  unint64_t v157 = (unsigned __int8 *)v53[28];
  int v156 = (unsigned __int8 *)v53[29];
LABEL_236:
  uint64_t v186 = v159 + 96;
  if (v159 + 96 == v156)
  {
LABEL_239:
    BOOL v188 = v156;
    if (v157 == v156) {
      return;
    }
    goto LABEL_240;
  }
  uint64_t v187 = (v186 - v157) / 96;
  BOOL v188 = &v157[96 * v187];
  int v189 = &v188[v156 - v186];
  if (v189 == v156) {
    goto LABEL_384;
  }
  uint64_t v190 = 0;
  uint64_t v191 = (uint64_t)&v157[96 * v187 + 40];
  while (2)
  {
    *(void *)BOOL v188 = *(void *)v189;
    if (v188 != v189)
    {
      v253 = (void *)*((void *)v188 + 1);
      v254 = v188;
      if (v253 != *((void **)v188 + 3)) {
        free(v253);
      }
      BOOL v188 = v254;
      v255 = v254 + 40;
      *((void *)v254 + 3) = v254 + 40;
      uint64_t v256 = *((void *)v189 + 1);
      if (v256 != *((void *)v189 + 3))
      {
        *((void *)v254 + 1) = v256;
        *((void *)v254 + 2) = *((void *)v189 + 2);
        *(_OWORD *)(v189 + 8) = 0u;
        *(_OWORD *)(v189 + 24) = 0u;
        goto LABEL_361;
      }
      *((void *)v254 + 1) = v255;
      v257 = (char *)*((void *)v189 + 1);
      *((void *)v254 + 2) = &v255[*((void *)v189 + 2) - (void)v257];
      unint64_t v258 = (char *)*((void *)v189 + 2);
      if (v257 != v258)
      {
        unint64_t v259 = v258 - v257;
        if ((unint64_t)(v258 - v257) >= 8 && (unint64_t)(v191 + 96 * v190 - (void)v257) >= 0x20)
        {
          if (v259 < 0x20)
          {
            unint64_t v260 = 0;
LABEL_376:
            unint64_t v264 = v259 & 0xFFFFFFFFFFFFFFF8;
            v255 += v259 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              *(void *)&v254[v260 + 40] = *(void *)&v257[v260];
              v260 += 8;
            }
            while (v264 != v260);
            if (v259 != v264)
            {
              v257 += v264;
              goto LABEL_381;
            }
            goto LABEL_361;
          }
          unint64_t v261 = 0;
          unint64_t v260 = v259 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            unint64_t v262 = &v254[v261];
            long long v263 = *(_OWORD *)&v257[v261 + 16];
            *(_OWORD *)(v262 + 40) = *(_OWORD *)&v257[v261];
            *(_OWORD *)(v262 + 56) = v263;
            v261 += 32;
          }
          while (v260 != v261);
          if (v259 == v260) {
            goto LABEL_361;
          }
          if ((v259 & 0x18) != 0) {
            goto LABEL_376;
          }
          v257 += v260;
          v255 += v260;
        }
        do
        {
LABEL_381:
          char v265 = *v257++;
          *v255++ = v265;
        }
        while (v257 != v258);
      }
LABEL_361:
      *((void *)v254 + 4) = *((void *)v189 + 4);
    }
    *((void *)v188 + 9) = *((void *)v189 + 9);
    *((_OWORD *)v188 + 5) = *((_OWORD *)v189 + 5);
    v189 += 96;
    v188 += 96;
    ++v190;
    if (v189 != v156) {
      continue;
    }
    break;
  }
  int v156 = (unsigned __int8 *)v53[29];
LABEL_384:
  if (v156 != v188)
  {
    do
    {
      v266 = v188;
      unint64_t v267 = (void *)*((void *)v156 - 11);
      if (v267 != *((void **)v156 - 9)) {
        free(v267);
      }
      v156 -= 96;
      BOOL v188 = v266;
    }
    while (v156 != v266);
  }
  v53[29] = v188;
  unint64_t v157 = (unsigned __int8 *)v53[28];
  if (v157 != v188)
  {
LABEL_240:
    unint64_t v269 = a4 + 26;
    uint64_t v192 = v157;
    v272 = v188;
    while (1)
    {
      BOOL v194 = v192;
      v192 += 96;
      int v195 = *((unsigned __int16 *)v194 + 1);
      if (v192 != v188 && v195 == *((unsigned __int16 *)v194 + 49)) {
        goto LABEL_241;
      }
      uint64_t v197 = (int8x8_t **)a4[7];
      uint64_t v196 = (unsigned __int16 *)a4[8];
      if (v197 != (int8x8_t **)v196)
      {
        do
        {
          if (*(unsigned __int16 *)v197 == v195) {
            goto LABEL_249;
          }
          v197 += 3;
        }
        while (v197 != (int8x8_t **)v196);
LABEL_253:
        long long v193 = v192;
        goto LABEL_242;
      }
LABEL_249:
      long long v193 = v192;
      if (v197 != (int8x8_t **)v196)
      {
        unint64_t v198 = (unsigned __int16 *)a4[4];
        size_t v199 = (unsigned __int16 *)a4[5];
        if (v198 != v199)
        {
          while (*v198 != v195)
          {
            v198 += 8;
            if (v198 == v199) {
              goto LABEL_253;
            }
          }
        }
        long long v193 = v192;
        if (v198 != v199) {
          break;
        }
      }
LABEL_242:
      unint64_t v157 = v193;
      BOOL v188 = v272;
      if (v192 == v272) {
        return;
      }
    }
    if (v157 == v192)
    {
LABEL_241:
      long long v193 = v157;
      goto LABEL_242;
    }
    while (1)
    {
      std::string __p = *(void **)v157;
      unint64_t v279 = v281;
      *(void *)long long v280 = v281;
      *(void *)&v280[8] = v281;
      *(void *)&v280[16] = 32;
      int v201 = (char *)*((void *)v157 + 1);
      BOOL v200 = (char *)*((void *)v157 + 2);
      unint64_t v202 = v200 - v201;
      v203 = v281;
      if ((unint64_t)(v200 - v201) < 0x21) {
        goto LABEL_279;
      }
      size_t v204 = v202 <= 0x40 ? 64 : v200 - v201;
      v203 = malloc_type_malloc(v204, 0x100004077774924uLL);
      char v205 = (char *)v279;
      __int8 v206 = *(char **)v280;
      if (v279 != *(void **)v280) {
        break;
      }
LABEL_278:
      unint64_t v279 = v203;
      *(void *)long long v280 = v203;
      *(void *)&v280[16] = v204;
LABEL_279:
      if (v201 == v200) {
        goto LABEL_297;
      }
      if (v202 < 8)
      {
        unint64_t v221 = v203;
        goto LABEL_295;
      }
      if ((unint64_t)((char *)v203 - v201) < 0x20)
      {
        unint64_t v221 = v203;
        goto LABEL_295;
      }
      if (v202 >= 0x20)
      {
        unint64_t v220 = v202 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v222 = (long long *)(v201 + 16);
        v223 = v203 + 2;
        unint64_t v224 = v202 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v225 = *v222;
          *(v223 - 1) = *(v222 - 1);
          _OWORD *v223 = v225;
          v222 += 2;
          v223 += 2;
          v224 -= 32;
        }
        while (v224);
        if (v202 == v220) {
          goto LABEL_296;
        }
        if ((v202 & 0x18) == 0)
        {
          v201 += v220;
          unint64_t v221 = (char *)v203 + v220;
          goto LABEL_295;
        }
      }
      else
      {
        unint64_t v220 = 0;
      }
      unint64_t v226 = v202 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v221 = (char *)v203 + (v202 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v227 = v220 - (v202 & 0xFFFFFFFFFFFFFFF8);
      long long v228 = (uint64_t *)&v201[v220];
      unsigned int v229 = (void *)((char *)v203 + v220);
      do
      {
        uint64_t v230 = *v228++;
        *v229++ = v230;
        v227 += 8;
      }
      while (v227);
      if (v202 == v226) {
        goto LABEL_296;
      }
      v201 += v226;
      do
      {
LABEL_295:
        char v231 = *v201++;
        *v221++ = v231;
      }
      while (v201 != v200);
LABEL_296:
      v203 = *(void **)v280;
LABEL_297:
      uint64_t v232 = *((void *)v157 + 9);
      *(void *)long long v280 = (char *)v203 + v202;
      v281[4] = v232;
      long long v282 = *((_OWORD *)v157 + 5);
      if (std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(a4 + 11, (unsigned __int8 *)&__p))
      {
        if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
          dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
        }
        BOOL v233 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
        if (os_log_type_enabled(v233, OS_LOG_TYPE_DEBUG))
        {
          gdc::ResourceKey::keysInt32Str(&buf, (unsigned __int8 *)&__p);
          p_std::string buf = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)unint64_t v288 = 136315138;
          int v289 = p_buf;
          _os_log_impl(&dword_1A1780000, v233, OS_LOG_TYPE_DEBUG, "Requesting in progress resource: %s", v288, 0xCu);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }
      }
      else if (std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(a4 + 16, (unsigned __int8 *)&__p))
      {
        if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
          dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
        }
        int v235 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
        if (os_log_type_enabled(v235, OS_LOG_TYPE_DEBUG))
        {
          gdc::ResourceKey::keysInt32Str(&buf, (unsigned __int8 *)&__p);
          v236 = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            v236 = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)unint64_t v288 = 136315138;
          int v289 = v236;
          _os_log_impl(&dword_1A1780000, v235, OS_LOG_TYPE_DEBUG, "Requesting failed resource: %s", v288, 0xCu);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }

        v237 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((void *)(a4[38] + 8), (unsigned __int8 *)&__p);
        if (v237) {
          *((_DWORD *)v237 + 28) = 3;
        }
      }
      else if (!std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v269, (unsigned __int8 *)&__p))
      {
        gdc::ResourceStore::resource((gdc::ResourceStore *)&v276, v197[1], (unsigned __int8 *)&__p);
        uint64_t v238 = v276;
        if (!v276) {
          goto LABEL_347;
        }
        *(void *)(v276 + 104) = a3;
        uint64_t v239 = *(void *)(v238 + 112);
        if (v239 < 1 || *(void *)(v238 + 96) + v239 >= a3)
        {
          if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
            dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
          }
          int v245 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
          if (os_log_type_enabled(v245, OS_LOG_TYPE_DEBUG))
          {
            gdc::ResourceKey::keysInt32Str(&buf, (unsigned __int8 *)&__p);
            uint64_t v246 = *(void *)(v238 + 128);
            unsigned int v247 = (std::string *)buf.__r_.__value_.__r.__words[0];
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unsigned int v247 = &buf;
            }
            *(_DWORD *)unint64_t v288 = 136315394;
            int v289 = v247;
            __int16 v290 = 2048;
            uint64_t v291 = v246;
            _os_log_impl(&dword_1A1780000, v245, OS_LOG_TYPE_DEBUG, "Requested resource already arrived: %s, %llu", v288, 0x16u);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
          }

          unsigned int v248 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((void *)(a4[38] + 8), (unsigned __int8 *)&__p);
          if (v248)
          {
            int v249 = 2;
            goto LABEL_356;
          }
        }
        else
        {
          if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
            dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
          }
          unsigned int v240 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
          if (os_log_type_enabled(v240, OS_LOG_TYPE_DEBUG))
          {
            gdc::ResourceKey::keysInt32Str(&buf, (unsigned __int8 *)&__p);
            BOOL v241 = &buf;
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              BOOL v241 = (std::string *)buf.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)unint64_t v288 = 136315138;
            int v289 = v241;
            _os_log_impl(&dword_1A1780000, v240, OS_LOG_TYPE_DEBUG, "Requested resource expired: %s", v288, 0xCu);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
          }

          gdc::ResourceStore::erase(v197[1], (const gdc::ResourceKey *)v238);
          int v242 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((void *)(a4[38] + 8), (unsigned __int8 *)v238);
          if (v242) {
            *((_DWORD *)v242 + 28) = 0;
          }
          int v243 = (char *)a4[4];
          BOOL v244 = (char *)a4[5];
          if (v243 != v244)
          {
            while (*(unsigned __int16 *)(v238 + 2) != *(unsigned __int16 *)v243)
            {
              v243 += 16;
              if (v243 == v244) {
                goto LABEL_345;
              }
            }
          }
          if (v243 == v244)
          {
LABEL_345:
            LOWORD(buf.__r_.__value_.__l.__data_) = *(_WORD *)(v238 + 2);
            buf.__r_.__value_.__l.__size_ = 0;
            int v243 = geo::linear_map<unsigned short,gdc::ResourceFetcher *,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,gdc::ResourceFetcher *>>,std::vector<std::pair<unsigned short,gdc::ResourceFetcher *>>>::insert((uint64_t)(a4 + 4), (unsigned __int16 *)&buf);
          }
          (*(void (**)(void, uint64_t))(**((void **)v243 + 1) + 48))(*((void *)v243 + 1), v238);
LABEL_347:
          if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
            dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
          }
          size_t v250 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
          if (os_log_type_enabled(v250, OS_LOG_TYPE_DEBUG))
          {
            gdc::ResourceKey::keysInt32Str(&buf, (unsigned __int8 *)&__p);
            v251 = &buf;
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              v251 = (std::string *)buf.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)unint64_t v288 = 136315138;
            int v289 = v251;
            _os_log_impl(&dword_1A1780000, v250, OS_LOG_TYPE_DEBUG, "Requesting resource: %s", v288, 0xCu);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
          }

          std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::__emplace_unique_key_args<gdc::ResourceKey,gdc::ResourceKey const&>((uint64_t)v269, (unsigned __int8 *)&__p, (uint64_t)&__p);
          unsigned int v248 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((void *)(a4[38] + 8), (unsigned __int8 *)&__p);
          if (v248)
          {
            int v249 = 1;
LABEL_356:
            *((_DWORD *)v248 + 28) = v249;
          }
        }
        v252 = v277;
        if (v277 && !atomic_fetch_add(&v277->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
          std::__shared_weak_count::__release_weak(v252);
        }
      }
      if (v279 != *(void **)&v280[8]) {
        free(v279);
      }
      BOOL v49 = v157 == v194;
      v157 += 96;
      if (v49) {
        goto LABEL_253;
      }
    }
    unint64_t v207 = *(void *)v280 - (void)v279;
    if (*(void *)v280 - (void)v279 < 8uLL)
    {
      long long v208 = v203;
    }
    else
    {
      long long v208 = v203;
      if ((unint64_t)((char *)v203 - (unsigned char *)v279) >= 0x20)
      {
        if (v207 < 0x20)
        {
          uint64_t v209 = 0;
LABEL_272:
          unint64_t v214 = v207 & 0xFFFFFFFFFFFFFFF8;
          long long v208 = (char *)v203 + (v207 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v215 = v209 - (v207 & 0xFFFFFFFFFFFFFFF8);
          unint64_t v216 = (uint64_t *)&v205[v209];
          v217 = (void *)((char *)v203 + v209);
          do
          {
            uint64_t v218 = *v216++;
            *v217++ = v218;
            v215 += 8;
          }
          while (v215);
          if (v207 == v214) {
            goto LABEL_278;
          }
          v205 += v214;
          goto LABEL_277;
        }
        uint64_t v209 = v207 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v210 = (long long *)((char *)v279 + 16);
        uint64_t v211 = v203 + 2;
        unint64_t v212 = v207 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v213 = *v210;
          *(v211 - 1) = *(v210 - 1);
          *uint64_t v211 = v213;
          v210 += 2;
          v211 += 2;
          v212 -= 32;
        }
        while (v212);
        if (v207 == v209) {
          goto LABEL_278;
        }
        if ((v207 & 0x18) != 0) {
          goto LABEL_272;
        }
        v205 += v209;
        long long v208 = (char *)v203 + v209;
      }
    }
    do
    {
LABEL_277:
      char v219 = *v205++;
      *v208++ = v219;
    }
    while (v205 != v206);
    goto LABEL_278;
  }
}

void sub_1A184FBB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,void *a28,uint64_t a29,void *a30)
{
  if (a26 && !atomic_fetch_add(&a26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a26->__on_zero_shared)(a26);
    std::__shared_weak_count::__release_weak(a26);
  }
  if (a28 != a30)
  {
    free(a28);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void md::SingleGEOResourceLayerDataSource::constructRequests(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  if (a2 != a3)
  {
    uint64_t v21 = v3;
    uint64_t v22 = v4;
    int v6 = a2;
    do
    {
      uint64_t v8 = *v6;
      uint64_t v9 = (int32x2_t *)*((void *)*v6 + 2);
      __int32 v10 = v9[1].i32[0];
      v19[0] = v9[1].i32[1];
      v19[1] = v10;
      int32x2_t v20 = vrev64_s32(*v9);
      uint64_t v11 = *v8;
      uint64_t v12 = *((void *)v8 + 14);
      v14[0] = 0;
      if (v8[96])
      {
        int v15 = *((_DWORD *)v8 + 25);
        v14[0] = 1;
      }
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unsigned char *, uint64_t, char *))(*(void *)a1 + 144))(&v16, a1, v11, v19, v12, v14);
      if (v14[0]) {
        v14[0] = 0;
      }
      uint64_t v13 = *v6;
      v6 += 2;
      gdc::LayerDataRequest::request(v13, (uint64_t)&v16, 0);
      if (v17 != v18) {
        free(v17);
      }
    }
    while (v6 != a3);
  }
}

uint64_t **gdc::LayerDataRequest::request(void *a1, uint64_t a2, int a3)
{
  int v5 = *(unsigned __int16 *)(a2 + 2);
  if (a3)
  {
    int v6 = (unsigned __int16 *)a1[18];
    uint64_t v7 = (unsigned __int16 *)a1[19];
    uint64_t v8 = (char **)(a1 + 18);
    if (v6 != v7)
    {
      uint64_t v9 = (unsigned __int16 *)a1[18];
      while (v5 != *v9)
      {
        v9 += 24;
        if (v9 == v7) {
          goto LABEL_23;
        }
      }
      if (v9 != v7)
      {
        if (v6 != v7)
        {
          while (v5 != *v6)
          {
            v6 += 24;
            if (v6 == v7) {
              goto LABEL_21;
            }
          }
        }
        goto LABEL_22;
      }
    }
  }
  else
  {
    int v6 = (unsigned __int16 *)a1[15];
    uint64_t v7 = (unsigned __int16 *)a1[16];
    uint64_t v8 = (char **)(a1 + 15);
    if (v6 != v7)
    {
      __int32 v10 = (unsigned __int16 *)a1[15];
      while (v5 != *v10)
      {
        v10 += 24;
        if (v10 == v7) {
          goto LABEL_23;
        }
      }
      if (v10 != v7)
      {
        if (v6 != v7)
        {
          while (v5 != *v6)
          {
            v6 += 24;
            if (v6 == v7)
            {
LABEL_21:
              int v6 = v7;
              break;
            }
          }
        }
LABEL_22:
        double result = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((void *)v6 + 1, (unsigned __int8 *)a2);
        if (result) {
          return result;
        }
      }
    }
  }
LABEL_23:
  uint64_t v12 = geo::linear_map<unsigned short,std::unordered_set<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_set<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>>>,std::vector<std::pair<unsigned short,std::unordered_set<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>>>>::operator[](v8, v5);
  std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::__emplace_unique_key_args<gdc::ResourceKey,gdc::ResourceKey const&>((uint64_t)v12, (unsigned __int8 *)a2, a2);
  uint64_t v13 = (gdc::ResourceStatusContainer *)a1[24];
  return (uint64_t **)gdc::ResourceStatusContainer::incrementResourceReference(v13, (const gdc::ResourceKey *)a2);
}

void std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::__emplace_unique_key_args<gdc::ResourceKey,gdc::ResourceKey const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *((unsigned __int16 *)a2 + 1);
  unint64_t v8 = (v7
      + ((v6 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v6 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v6 - 0x61C8864680B583EBLL);
  uint64_t v9 = (uint64_t *)*((void *)a2 + 9);
  unint64_t v10 = ((unint64_t)&v9[8 * v8 - 0xC3910C8D016B07DLL] + (v8 >> 2) - 3) ^ v8;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      uint64_t v3 = ((unint64_t)&v9[8 * v8 - 0xC3910C8D016B07DLL] + (v8 >> 2) - 3) ^ v8;
      if (v10 >= v11) {
        uint64_t v3 = v10 % v11;
      }
    }
    else
    {
      uint64_t v3 = v10 & (v11 - 1);
    }
    uint64_t v13 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        int v15 = (const void *)*((void *)a2 + 1);
        size_t v16 = *((void *)a2 + 2) - (void)v15;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == (uint64_t *)v10)
            {
              if (*((unsigned __int8 *)v14 + 16) == v6
                && *((unsigned __int16 *)v14 + 9) == v7
                && v14[11] == v9)
              {
                uint64_t v22 = v14[3];
                if ((char *)v14[4] - (char *)v22 == v16)
                {
                  size_t v70 = v16;
                  unint64_t v72 = v15;
                  int v23 = memcmp(v22, v15, v16);
                  size_t v16 = v70;
                  int v15 = v72;
                  if (!v23) {
                    return;
                  }
                }
              }
            }
            else if (((unint64_t)v21 & (v11 - 1)) != v3)
            {
              goto LABEL_31;
            }
            uint64_t v14 = (uint64_t **)*v14;
            if (!v14) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v17 = (unint64_t)v14[1];
          if (v17 == v10)
          {
            if (*((unsigned __int8 *)v14 + 16) == v6
              && *((unsigned __int16 *)v14 + 9) == v7
              && v14[11] == v9)
            {
              uint64_t v18 = v14[3];
              if ((char *)v14[4] - (char *)v18 == v16)
              {
                unint64_t v71 = v15;
                size_t v19 = v16;
                int v20 = memcmp(v18, v15, v16);
                size_t v16 = v19;
                int v15 = v71;
                if (!v20) {
                  return;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v14 = (uint64_t **)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  uint64_t v24 = a1 + 16;
  unint64_t v25 = operator new(0x70uLL);
  int v73 = v25;
  *unint64_t v25 = 0;
  v25[1] = v10;
  unint64_t v26 = (char *)(v25 + 7);
  unint64_t v27 = *(char **)(a3 + 8);
  v25[2] = *(void *)a3;
  void v25[3] = v25 + 7;
  v25[5] = v25 + 7;
  v25[6] = 32;
  unsigned __int16 v28 = *(char **)(a3 + 16);
  unint64_t v29 = v28 - v27;
  v25[4] = v25 + 7;
  if ((unint64_t)(v28 - v27) >= 0x21)
  {
    if (v29 <= 0x40) {
      size_t v30 = 64;
    }
    else {
      size_t v30 = v28 - v27;
    }
    unint64_t v26 = (char *)malloc_type_malloc(v30, 0x100004077774924uLL);
    char v31 = (char *)v25[3];
    unint64_t v32 = (char *)v25[4];
    if (v31 == v32) {
      goto LABEL_51;
    }
    unint64_t v33 = v32 - v31;
    if ((unint64_t)(v32 - v31) < 8)
    {
      uint64_t v34 = v26;
      goto LABEL_50;
    }
    uint64_t v34 = v26;
    if ((unint64_t)(v26 - v31) < 0x20) {
      goto LABEL_50;
    }
    if (v33 >= 0x20)
    {
      unint64_t v35 = v33 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v36 = (long long *)(v31 + 16);
      char v37 = v26 + 16;
      unint64_t v38 = v33 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v39 = *v36;
        *(v37 - 1) = *(v36 - 1);
        _OWORD *v37 = v39;
        v36 += 2;
        v37 += 2;
        v38 -= 32;
      }
      while (v38);
      if (v33 == v35) {
        goto LABEL_51;
      }
      if ((v33 & 0x18) == 0)
      {
        v31 += v35;
        uint64_t v34 = &v26[v35];
        goto LABEL_50;
      }
    }
    else
    {
      unint64_t v35 = 0;
    }
    unint64_t v40 = v33 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v34 = &v26[v33 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v41 = v35 - (v33 & 0xFFFFFFFFFFFFFFF8);
    int v42 = (uint64_t *)&v31[v35];
    int v43 = &v26[v35];
    do
    {
      uint64_t v44 = *v42++;
      *(void *)int v43 = v44;
      v43 += 8;
      v41 += 8;
    }
    while (v41);
    if (v33 == v40) {
      goto LABEL_51;
    }
    v31 += v40;
    do
    {
LABEL_50:
      char v45 = *v31++;
      *v34++ = v45;
    }
    while (v31 != v32);
LABEL_51:
    void v25[3] = v26;
    v25[4] = v26;
    v25[6] = v30;
    uint64_t v24 = a1 + 16;
  }
  if (v27 == v28) {
    goto LABEL_70;
  }
  if (v29 < 8)
  {
    int v47 = v26;
    goto LABEL_68;
  }
  if ((unint64_t)(v26 - v27) < 0x20)
  {
    int v47 = v26;
    goto LABEL_68;
  }
  if (v29 >= 0x20)
  {
    unint64_t v46 = v29 & 0xFFFFFFFFFFFFFFE0;
    unint64_t v48 = (long long *)(v27 + 16);
    BOOL v49 = v26 + 16;
    unint64_t v50 = v29 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v51 = *v48;
      *(v49 - 1) = *(v48 - 1);
      *BOOL v49 = v51;
      v48 += 2;
      v49 += 2;
      v50 -= 32;
    }
    while (v50);
    if (v29 == v46) {
      goto LABEL_69;
    }
    if ((v29 & 0x18) == 0)
    {
      v27 += v46;
      int v47 = &v26[v46];
      goto LABEL_68;
    }
  }
  else
  {
    unint64_t v46 = 0;
  }
  unint64_t v52 = v29 & 0xFFFFFFFFFFFFFFF8;
  int v47 = &v26[v29 & 0xFFFFFFFFFFFFFFF8];
  unint64_t v53 = v46 - (v29 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v54 = (uint64_t *)&v27[v46];
  uint64_t v55 = &v26[v46];
  do
  {
    uint64_t v56 = *v54++;
    *(void *)uint64_t v55 = v56;
    v55 += 8;
    v53 += 8;
  }
  while (v53);
  if (v29 == v52) {
    goto LABEL_69;
  }
  v27 += v52;
  do
  {
LABEL_68:
    char v57 = *v27++;
    *v47++ = v57;
  }
  while (v27 != v28);
LABEL_69:
  unint64_t v26 = (char *)v25[4];
LABEL_70:
  v25[4] = &v26[v29];
  v25[11] = *(void *)(a3 + 72);
  *((_OWORD *)v25 + 6) = *(_OWORD *)(a3 + 80);
  float v58 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v59 = *(float *)(a1 + 32);
  if (!v11 || (float)(v59 * (float)v11) < v58)
  {
    BOOL v60 = 1;
    if (v11 >= 3) {
      BOOL v60 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v61 = v60 | (2 * v11);
    unint64_t v62 = vcvtps_u32_f32(v58 / v59);
    if (v61 <= v62) {
      size_t prime = v62;
    }
    else {
      size_t prime = v61;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v64 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v64) {
      goto LABEL_82;
    }
    if (prime < *(void *)&v64)
    {
      unint64_t v65 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v64 < 3uLL || (uint8x8_t v66 = (uint8x8_t)vcnt_s8(v64), v66.i16[0] = vaddlv_u8(v66), v66.u32[0] > 1uLL))
      {
        unint64_t v65 = std::__next_prime(v65);
      }
      else
      {
        uint64_t v67 = 1 << -(char)__clz(v65 - 1);
        if (v65 >= 2) {
          unint64_t v65 = v67;
        }
      }
      if (prime <= v65) {
        size_t prime = v65;
      }
      if (prime < *(void *)&v64) {
LABEL_82:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        uint64_t v3 = v10 % v11;
      }
      else {
        uint64_t v3 = v10;
      }
    }
    else
    {
      uint64_t v3 = (v11 - 1) & v10;
    }
  }
  uint64_t v68 = *(void **)(*(void *)a1 + 8 * v3);
  if (v68)
  {
    *int v73 = *v68;
    void *v68 = v73;
  }
  else
  {
    *int v73 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v73;
    *(void *)(*(void *)a1 + 8 * v3) = v24;
    if (*v73)
    {
      unint64_t v69 = *(void *)(*v73 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v69 >= v11) {
          v69 %= v11;
        }
      }
      else
      {
        v69 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v69) = v73;
    }
  }
  ++*(void *)(a1 + 24);
}

void sub_1A1850444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<gdc::ResourceKey,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<gdc::ResourceKey,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int16 *geo::linear_map<unsigned short,std::unordered_set<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_set<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>>>,std::vector<std::pair<unsigned short,std::unordered_set<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>>>>::operator[](char **a1, unsigned __int16 a2)
{
  uint64_t v4 = *a1;
  int v5 = a1[1];
  uint64_t v6 = *a1;
  if (*a1 != v5)
  {
    uint64_t v6 = *a1;
    while (*(unsigned __int16 *)v6 != a2)
    {
      v6 += 48;
      if (v6 == v5) {
        goto LABEL_7;
      }
    }
  }
  if (v6 == v5)
  {
LABEL_7:
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)char v37 = 0u;
    int v38 = 1065353216;
    uint64_t v6 = v4;
    if (v4 != v5)
    {
      while (*(unsigned __int16 *)v6 != a2)
      {
        v6 += 48;
        if (v6 == v5) {
          goto LABEL_12;
        }
      }
    }
    if (v6 == v5)
    {
LABEL_12:
      unint64_t v7 = (unint64_t)a1[2];
      if ((unint64_t)v5 >= v7)
      {
        unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 4);
        unint64_t v10 = v9 + 1;
        if (v9 + 1 > 0x555555555555555) {
          abort();
        }
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v4) >> 4);
        if (2 * v11 > v10) {
          unint64_t v10 = 2 * v11;
        }
        if (v11 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v12 = 0x555555555555555;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12)
        {
          if (v12 > 0x555555555555555) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v13 = (char *)operator new(48 * v12);
        }
        else
        {
          uint64_t v13 = 0;
        }
        int v15 = &v13[48 * v12];
        uint64_t v14 = &v13[48 * v9];
        *(_WORD *)uint64_t v14 = a2;
        unint64_t v8 = v14 + 48;
        std::unordered_set<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::unordered_set((uint64_t)(v14 + 8), (uint64_t)__p);
        size_t v16 = *a1;
        unint64_t v17 = a1[1];
        if (v17 == *a1)
        {
          *a1 = v14;
          a1[1] = v8;
          a1[2] = v15;
        }
        else
        {
          uint64_t v18 = 0;
          do
          {
            int v20 = &v14[v18];
            uint64_t v21 = &v17[v18];
            *((_WORD *)v20 - 24) = *(_WORD *)&v17[v18 - 48];
            uint64_t v22 = *(void *)&v17[v18 - 40];
            *((void *)v21 - 5) = 0;
            *((void *)v20 - 5) = v22;
            *((void *)v20 - 4) = *(void *)&v17[v18 - 32];
            *((void *)v21 - 4) = 0;
            uint64_t v23 = *(void *)&v17[v18 - 24];
            *(void *)&v14[v18 - 24] = v23;
            uint64_t v24 = *(void *)&v17[v18 - 16];
            *((void *)v20 - 2) = v24;
            *((_DWORD *)v20 - 2) = *(_DWORD *)&v17[v18 - 8];
            if (v24)
            {
              unint64_t v19 = *(void *)(v23 + 8);
              unint64_t v25 = *((void *)v20 - 4);
              if ((v25 & (v25 - 1)) != 0)
              {
                if (v19 >= v25) {
                  v19 %= v25;
                }
              }
              else
              {
                v19 &= v25 - 1;
              }
              *(void *)(v22 + 8 * v19) = &v14[v18 - 24];
              *(void *)&v17[v18 - 24] = 0;
              *(void *)&v17[v18 - 16] = 0;
            }
            v18 -= 48;
          }
          while (&v17[v18] != v16);
          unint64_t v26 = &v14[v18];
          unint64_t v17 = *a1;
          unint64_t v27 = a1[1];
          *a1 = v26;
          a1[1] = v8;
          a1[2] = v15;
          while (v27 != v17)
          {
            unsigned __int16 v28 = (void *)*((void *)v27 - 3);
            if (v28)
            {
              do
              {
                size_t v30 = (void *)*v28;
                char v31 = (void *)v28[3];
                if (v31 != (void *)v28[5]) {
                  free(v31);
                }
                operator delete(v28);
                unsigned __int16 v28 = v30;
              }
              while (v30);
            }
            unint64_t v29 = (void *)*((void *)v27 - 5);
            *((void *)v27 - 5) = 0;
            if (v29) {
              operator delete(v29);
            }
            v27 -= 48;
          }
        }
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *(_WORD *)int v5 = a2;
        unint64_t v8 = v5 + 48;
        std::unordered_set<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::unordered_set((uint64_t)(v5 + 8), (uint64_t)__p);
      }
      a1[1] = v8;
      uint64_t v6 = v8 - 48;
      unint64_t v32 = v37[0];
      if (v37[0])
      {
        do
        {
          uint64_t v34 = (void *)*v32;
          unint64_t v35 = (void *)v32[3];
          if (v35 != (void *)v32[5]) {
            free(v35);
          }
          operator delete(v32);
          unint64_t v32 = v34;
        }
        while (v34);
      }
    }
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }
  return (unsigned __int16 *)(v6 + 8);
}

void std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,std::pair<gdc::LayerDataRequestKey,std::shared_ptr<gdc::LayerDataRequest>>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v6 = *((void *)a2 + 13);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *((void *)a2 + 13);
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        int v11 = *a2;
        int v12 = *((unsigned __int16 *)a2 + 4);
        uint64_t v13 = (uint64_t *)*((void *)a2 + 10);
        uint64_t v14 = (const void *)*((void *)a2 + 2);
        size_t v15 = *((void *)a2 + 3) - (void)v14;
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            int v20 = v10[1];
            if (v20 == (uint64_t *)v6)
            {
              if (*((unsigned __int8 *)v10 + 16) == v11 && *((unsigned __int16 *)v10 + 12) == v12 && v10[12] == v13)
              {
                uint64_t v21 = v10[4];
                if ((char *)v10[5] - (char *)v21 == v15)
                {
                  long long v39 = v14;
                  unint64_t v41 = v13;
                  uint64_t v22 = v14;
                  size_t v23 = v15;
                  int v24 = memcmp(v21, v22, v15);
                  size_t v15 = v23;
                  uint64_t v14 = v39;
                  uint64_t v13 = v41;
                  if (!v24) {
                    return;
                  }
                }
              }
            }
            else if (((unint64_t)v20 & (v7 - 1)) != v3)
            {
              goto LABEL_31;
            }
            unint64_t v10 = (uint64_t **)*v10;
            if (!v10) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v16 = (unint64_t)v10[1];
          if (v16 == v6)
          {
            if (*((unsigned __int8 *)v10 + 16) == v11 && *((unsigned __int16 *)v10 + 12) == v12 && v10[12] == v13)
            {
              unint64_t v17 = v10[4];
              if ((char *)v10[5] - (char *)v17 == v15)
              {
                size_t v18 = v15;
                unint64_t v40 = v13;
                int v19 = memcmp(v17, v14, v15);
                size_t v15 = v18;
                uint64_t v13 = v40;
                if (!v19) {
                  return;
                }
              }
            }
          }
          else
          {
            if (v16 >= v7) {
              v16 %= v7;
            }
            if (v16 != v3) {
              break;
            }
          }
          unint64_t v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_31:
  unint64_t v25 = operator new(0x90uLL);
  *unint64_t v25 = 0;
  v25[1] = v6;
  *((unsigned char *)v25 + 16) = *(unsigned char *)a3;
  gdc::LayerDataKey::LayerDataKey((uint64_t)(v25 + 3), a3 + 8);
  *((unsigned char *)v25 + 112) = 0;
  if (*(unsigned char *)(a3 + 96))
  {
    *((_DWORD *)v25 + 29) = *(_DWORD *)(a3 + 100);
    *((unsigned char *)v25 + 112) = 1;
  }
  v25[15] = *(void *)(a3 + 104);
  *((_OWORD *)v25 + 8) = *(_OWORD *)(a3 + 112);
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 120) = 0;
  float v26 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v27 = *(float *)(a1 + 32);
  if (!v7 || (float)(v27 * (float)v7) < v26)
  {
    BOOL v28 = 1;
    if (v7 >= 3) {
      BOOL v28 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v29 = v28 | (2 * v7);
    unint64_t v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30) {
      size_t prime = v30;
    }
    else {
      size_t prime = v29;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v32 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v32) {
      goto LABEL_55;
    }
    if (prime < *(void *)&v32)
    {
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v32 < 3uLL || (uint8x8_t v34 = (uint8x8_t)vcnt_s8(v32), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (prime <= v33) {
        size_t prime = v33;
      }
      if (prime < *(void *)&v32) {
LABEL_55:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v36 = *(void *)a1;
  char v37 = *(void **)(*(void *)a1 + 8 * v3);
  if (v37)
  {
    *unint64_t v25 = *v37;
LABEL_69:
    void *v37 = v25;
    goto LABEL_70;
  }
  *unint64_t v25 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v25;
  *(void *)(v36 + 8 * v3) = a1 + 16;
  if (*v25)
  {
    unint64_t v38 = *(void *)(*v25 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7) {
        v38 %= v7;
      }
    }
    else
    {
      v38 &= v7 - 1;
    }
    char v37 = (void *)(*(void *)a1 + 8 * v38);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
}

uint64_t std::unordered_set<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::__emplace_unique_key_args<gdc::ResourceKey,gdc::ResourceKey const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1A1850C20(_Unwind_Exception *a1)
{
  std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void md::SelectedDaVinciRoadsLayerDataSource::constructRequests(uint64_t a1, void **a2, void **a3)
{
  if (*(void *)(a1 + 856)) {
    BOOL v3 = a2 == a3;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    int8x8_t v5 = a2;
    do
    {
      unint64_t v7 = *(void **)(a1 + 848);
      if (v7)
      {
        uint8x8_t v8 = (uint64_t *)(*v5)[2];
        uint64_t v9 = *v8;
        unsigned int v10 = *((unsigned __int8 *)v8 + 8);
        do
        {
          uint64_t v11 = v7[2];
          v17[0] = v9;
          void v17[2] = v11;
          v17[1] = v10;
          int v12 = *v5;
          if (*((unsigned char *)*v5 + 96)) {
            int v13 = *((_DWORD *)v12 + 25);
          }
          else {
            int v13 = 2147483646;
          }
          gdc::ResourceKey::ResourceKey((uint64_t)v14, *(_WORD *)(a1 + 584), (uint64_t)v17, 0x18uLL, *((void *)v12 + 14), v13);
          gdc::LayerDataRequest::request(*v5, (uint64_t)v14, 0);
          if (v15 != v16) {
            free(v15);
          }
          unint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      v5 += 2;
    }
    while (v5 != a3);
  }
}

void gdc::ResourceManager::cleanupResources(gdc::ResourceManager *this)
{
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
    dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
  }
  uint64_t v2 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1A1780000, v2, OS_LOG_TYPE_DEBUG, "cleanupResourceRequests", (uint8_t *)&buf, 2u);
  }

  BOOL v3 = (void *)*((void *)this + 38);
  uint64_t v4 = (void (**)(void *))&unk_1EF57A5C8;
  v120[0] = &unk_1EF57A5C8;
  v120[1] = this;
  uint64_t v121 = v120;
  int8x8_t v5 = (char *)v3[3];
  if (!v5) {
    goto LABEL_122;
  }
  BOOL v6 = (uint64_t **)(v3 + 7);
  unint64_t v110 = this;
  do
  {
    if (*((uint64_t *)v5 + 15) >= 1)
    {
      unint64_t v7 = *(char **)v5;
      goto LABEL_8;
    }
    if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
    }
    uint8x8_t v8 = (unsigned __int8 *)(v5 + 16);
    uint64_t v9 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      gdc::ResourceKey::keysInt32Str(&buf, (unsigned __int8 *)v5 + 16);
      p_std::string buf = &buf;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      uint64_t v11 = *((unsigned int *)v5 + 28);
      int v12 = "<Invalid>";
      if (v11 <= 4) {
        int v12 = off_1E5A9A098[v11];
      }
      *(_DWORD *)uint64_t v122 = 136315394;
      unint64_t v123 = p_buf;
      __int16 v124 = 2080;
      unint64_t v125 = v12;
      _os_log_impl(&dword_1A1780000, v9, OS_LOG_TYPE_DEBUG, "Removing %s from Resource status container, status is: %s", v122, 0x16u);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }

    int v13 = *((_DWORD *)v5 + 28);
    buf.__r_.__value_.__r.__words[0] = *((void *)v5 + 2);
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)v117;
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v117;
    unint64_t v115 = v117;
    uint64_t v116 = 32;
    size_t v15 = (char *)*((void *)v5 + 3);
    uint64_t v14 = (char *)*((void *)v5 + 4);
    unint64_t v16 = v14 - v15;
    unint64_t v17 = v117;
    if ((unint64_t)(v14 - v15) >= 0x21)
    {
      if (v16 <= 0x40) {
        size_t v18 = 64;
      }
      else {
        size_t v18 = v14 - v15;
      }
      unint64_t v17 = malloc_type_malloc(v18, 0x100004077774924uLL);
      int v20 = (char *)buf.__r_.__value_.__r.__words[2];
      std::string::size_type size = (char *)buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_ == buf.__r_.__value_.__r.__words[2]) {
        goto LABEL_39;
      }
      std::string::size_type v21 = buf.__r_.__value_.__r.__words[2] - buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__r.__words[2] - buf.__r_.__value_.__l.__size_ < 8)
      {
        uint64_t v22 = v17;
        goto LABEL_38;
      }
      uint64_t v22 = v17;
      if ((unint64_t)v17 - buf.__r_.__value_.__l.__size_ < 0x20) {
        goto LABEL_38;
      }
      if (v21 >= 0x20)
      {
        unint64_t v23 = v21 & 0xFFFFFFFFFFFFFFE0;
        int v24 = (long long *)(buf.__r_.__value_.__l.__size_ + 16);
        unint64_t v25 = v17 + 2;
        unint64_t v26 = v21 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v27 = *v24;
          *(v25 - 1) = *(v24 - 1);
          *unint64_t v25 = v27;
          v24 += 2;
          v25 += 2;
          v26 -= 32;
        }
        while (v26);
        if (v21 == v23) {
          goto LABEL_39;
        }
        if ((v21 & 0x18) == 0)
        {
          size += v23;
          uint64_t v22 = (char *)v17 + v23;
          goto LABEL_38;
        }
      }
      else
      {
        unint64_t v23 = 0;
      }
      unint64_t v28 = v21 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v22 = (char *)v17 + (v21 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v29 = v23 - (v21 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v30 = (uint64_t *)&size[v23];
      char v31 = (void *)((char *)v17 + v23);
      do
      {
        uint64_t v32 = *v30++;
        *v31++ = v32;
        v29 += 8;
      }
      while (v29);
      if (v21 == v28) {
        goto LABEL_39;
      }
      size += v28;
      do
      {
LABEL_38:
        char v33 = *size++;
        *v22++ = v33;
      }
      while (size != v20);
LABEL_39:
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)v17;
      buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v17;
      uint64_t v116 = v18;
    }
    if (v15 != v14)
    {
      if (v16 < 8)
      {
        uint64_t v35 = v17;
        goto LABEL_56;
      }
      if ((unint64_t)((char *)v17 - v15) < 0x20)
      {
        uint64_t v35 = v17;
        goto LABEL_56;
      }
      if (v16 >= 0x20)
      {
        unint64_t v34 = v16 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v36 = (long long *)(v15 + 16);
        char v37 = v17 + 2;
        unint64_t v38 = v16 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v39 = *v36;
          *(v37 - 1) = *(v36 - 1);
          _OWORD *v37 = v39;
          v36 += 2;
          v37 += 2;
          v38 -= 32;
        }
        while (v38);
        if (v16 == v34) {
          goto LABEL_57;
        }
        if ((v16 & 0x18) == 0)
        {
          v15 += v34;
          uint64_t v35 = (char *)v17 + v34;
          goto LABEL_56;
        }
      }
      else
      {
        unint64_t v34 = 0;
      }
      unint64_t v40 = v16 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v35 = (char *)v17 + (v16 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v41 = v34 - (v16 & 0xFFFFFFFFFFFFFFF8);
      int v42 = (uint64_t *)&v15[v34];
      int v43 = (void *)((char *)v17 + v34);
      do
      {
        uint64_t v44 = *v42++;
        *v43++ = v44;
        v41 += 8;
      }
      while (v41);
      if (v16 == v40) {
        goto LABEL_57;
      }
      v15 += v40;
      do
      {
LABEL_56:
        char v45 = *v15++;
        *v35++ = v45;
      }
      while (v15 != v14);
LABEL_57:
      unint64_t v17 = (void *)buf.__r_.__value_.__r.__words[2];
    }
    uint64_t v46 = *((void *)v5 + 11);
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v17 + v16;
    v117[4] = v46;
    long long v118 = *((_OWORD *)v5 + 6);
    int v119 = v13;
    int v47 = *v6;
    if (*v6)
    {
      unsigned int v48 = *((unsigned __int16 *)v5 + 9);
      BOOL v49 = v3 + 7;
      unint64_t v50 = *v6;
      do
      {
        unsigned int v53 = *((unsigned __int16 *)v50 + 17);
        BOOL v54 = v53 >= v48;
        if (v53 == v48 && (v55 = *((unsigned __int8 *)v50 + 32), v56 = *v8, BOOL v54 = v55 >= v56, v55 == v56)) {
          BOOL v51 = gdc::GenericKey::operator<(v50[5], v50[6], *((void *)v5 + 3), *((void *)v5 + 4));
        }
        else {
          BOOL v51 = !v54;
        }
        unint64_t v52 = (uint64_t **)(v50 + 1);
        if (!v51)
        {
          unint64_t v52 = (uint64_t **)v50;
          BOOL v49 = v50;
        }
        unint64_t v50 = *v52;
      }
      while (*v52);
      if (v49 != (uint64_t *)v6)
      {
        unsigned int v57 = *((unsigned __int16 *)v49 + 17);
        BOOL v58 = v48 >= v57;
        if (v48 == v57 && (unsigned int v59 = *v8, v60 = *((unsigned __int8 *)v49 + 32), v58 = v59 >= v60, v59 == v60))
        {
          if (gdc::GenericKey::operator<(*((void *)v5 + 3), *((void *)v5 + 4), v49[5], v49[6])) {
            goto LABEL_86;
          }
        }
        else if (!v58)
        {
          goto LABEL_86;
        }
        unint64_t v61 = (uint64_t *)v49[1];
        unint64_t v62 = v49;
        if (v61)
        {
          do
          {
            unsigned int v63 = v61;
            unint64_t v61 = (uint64_t *)*v61;
          }
          while (v61);
        }
        else
        {
          do
          {
            unsigned int v63 = (uint64_t *)v62[2];
            BOOL v64 = *v63 == (void)v62;
            unint64_t v62 = v63;
          }
          while (!v64);
        }
        if ((uint64_t *)v3[6] == v49) {
          v3[6] = v63;
        }
        --v3[8];
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v47, v49);
        unint64_t v65 = (void *)v49[5];
        if (v65 != (void *)v49[7]) {
          free(v65);
        }
        operator delete(v49);
      }
    }
LABEL_86:
    int8x8_t v66 = (int8x8_t)v3[2];
    unint64_t v7 = *(char **)v5;
    unint64_t v67 = *((void *)v5 + 1);
    uint8x8_t v68 = (uint8x8_t)vcnt_s8(v66);
    v68.i16[0] = vaddlv_u8(v68);
    if (v68.u32[0] > 1uLL)
    {
      this = v110;
      if (v67 >= *(void *)&v66) {
        v67 %= *(void *)&v66;
      }
    }
    else
    {
      v67 &= *(void *)&v66 - 1;
      this = v110;
    }
    uint64_t v69 = v3[1];
    size_t v70 = *(uint64_t **)(v69 + 8 * v67);
    do
    {
      unint64_t v71 = v70;
      size_t v70 = (uint64_t *)*v70;
    }
    while (v70 != (uint64_t *)v5);
    if (v71 == v3 + 3) {
      goto LABEL_184;
    }
    unint64_t v72 = v71[1];
    if (v68.u32[0] > 1uLL)
    {
      if (v72 >= *(void *)&v66) {
        v72 %= *(void *)&v66;
      }
    }
    else
    {
      v72 &= *(void *)&v66 - 1;
    }
    uint64_t v73 = *(void *)v5;
    if (v72 != v67)
    {
LABEL_184:
      if (v7)
      {
        unint64_t v74 = *((void *)v7 + 1);
        if (v68.u32[0] > 1uLL)
        {
          if (v74 >= *(void *)&v66) {
            v74 %= *(void *)&v66;
          }
        }
        else
        {
          v74 &= *(void *)&v66 - 1;
        }
        uint64_t v73 = *(void *)v5;
        if (v74 == v67)
        {
LABEL_106:
          unint64_t v75 = *(void *)(v73 + 8);
          if (v68.u32[0] > 1uLL)
          {
            if (v75 >= *(void *)&v66) {
              v75 %= *(void *)&v66;
            }
          }
          else
          {
            v75 &= *(void *)&v66 - 1;
          }
          if (v75 != v67)
          {
            *(void *)(v3[1] + 8 * v75) = v71;
            uint64_t v73 = *(void *)v5;
          }
          goto LABEL_112;
        }
      }
      *(void *)(v69 + 8 * v67) = 0;
      uint64_t v73 = *(void *)v5;
    }
    if (v73) {
      goto LABEL_106;
    }
LABEL_112:
    *unint64_t v71 = v73;
    *(void *)int8x8_t v5 = 0;
    --v3[4];
    char v76 = (void *)*((void *)v5 + 3);
    if (v76 != *((void **)v5 + 5)) {
      free(v76);
    }
    operator delete(v5);
    if (v121) {
      (*(void (**)(void *, std::string *))(*v121 + 48))(v121, &buf);
    }
    if ((void *)buf.__r_.__value_.__l.__size_ != v115) {
      free((void *)buf.__r_.__value_.__l.__size_);
    }
LABEL_8:
    int8x8_t v5 = v7;
  }
  while (v7);
  if (v121 == v120)
  {
    uint64_t v4 = (void (**)(void *))v120[0];
LABEL_122:
    v4[4](v120);
    goto LABEL_123;
  }
  if (v121) {
    (*(void (**)(void))(*v121 + 40))();
  }
LABEL_123:
  uint64_t v77 = *((void *)this + 7);
  uint64_t v112 = *((void *)this + 8);
  if (v77 != v112)
  {
    uint64_t v111 = *((void *)this + 38);
    unint64_t v78 = (unsigned __int8 *)(v111 + 56);
    while (1)
    {
      unint64_t v80 = *(void **)(v77 + 8);
      unsigned int v79 = *(std::__shared_weak_count **)(v77 + 16);
      if (v79) {
        atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v113 = v79;
      size_t v81 = *(unsigned __int8 **)(v111 + 48);
      if (v81 != v78)
      {
        do
        {
          unint64_t v82 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v80 + 46, v81 + 32);
          if (v82) {
            v82[14] = geo::MarkedLRUCache<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>>::_elementAccessed(v80 + 43, v82[14]);
          }
          unint64_t v83 = (unsigned __int8 *)*((void *)v81 + 1);
          if (v83)
          {
            do
            {
              unint64_t v84 = v83;
              unint64_t v83 = *(unsigned __int8 **)v83;
            }
            while (v83);
          }
          else
          {
            do
            {
              unint64_t v84 = (unsigned __int8 *)*((void *)v81 + 2);
              BOOL v64 = *(void *)v84 == (void)v81;
              size_t v81 = v84;
            }
            while (!v64);
          }
          size_t v81 = v84;
        }
        while (v84 != v78);
      }
      uint64_t v85 = v80[44];
      unint64_t v86 = (uint64_t *)v80[51];
      if ((uint64_t *)v85 != v86)
      {
        unint64_t v87 = 0;
        uint64_t v88 = v80[49] + 1;
        while (--v88)
        {
          uint64_t v89 = *(void *)(v85 + 128);
          long long v90 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v80 + 46, (unsigned __int8 *)(v85 + 16));
          if (v90)
          {
            std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&buf, v80 + 46, v90);
            unint64_t v91 = (void *)buf.__r_.__value_.__r.__words[0];
            if (buf.__r_.__value_.__r.__words[0])
            {
              if (buf.__r_.__value_.__s.__data_[16])
              {
                uint64_t v92 = *(void **)(buf.__r_.__value_.__r.__words[0] + 24);
                if (v92 != *(void **)(buf.__r_.__value_.__r.__words[0] + 40)) {
                  free(v92);
                }
              }
              operator delete(v91);
            }
            unint64_t v86 = (uint64_t *)v80[51];
          }
          v87 += v89;
          uint64_t v85 = *(void *)(v85 + 8);
          if ((uint64_t *)v85 == v86) {
            goto LABEL_151;
          }
        }
        unint64_t v86 = (uint64_t *)v85;
LABEL_151:
        unint64_t v93 = (uint64_t *)v80[44];
        if (v93 != v86)
        {
          uint64_t v94 = *v86;
          uint64_t v95 = *v93;
          *(void *)(v95 + 8) = *(void *)(*v86 + 8);
          **(void **)(v94 + 8) = v95;
          do
          {
            unint64_t v96 = (uint64_t *)v93[1];
            --v80[45];
            unsigned int v97 = (std::__shared_weak_count *)v93[15];
            if (v97 && !atomic_fetch_add(&v97->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
              std::__shared_weak_count::__release_weak(v97);
            }
            unint64_t v98 = (void *)v93[3];
            if (v98 != (void *)v93[5]) {
              free(v98);
            }
            operator delete(v93);
            unint64_t v93 = v96;
          }
          while (v96 != v86);
        }
        unint64_t v99 = v80[52];
        BOOL v54 = v99 >= v87;
        unint64_t v100 = v99 - v87;
        if (!v54) {
          unint64_t v100 = 0;
        }
        v80[52] = v100;
      }
      unint64_t v101 = (void *)v80[35];
      if (v101) {
        break;
      }
LABEL_179:
      if (v113)
      {
        if (!atomic_fetch_add(&v113->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
          std::__shared_weak_count::__release_weak(v113);
        }
      }
      v77 += 24;
      if (v77 == v112) {
        return;
      }
    }
    while (1)
    {
      long long v102 = (std::__shared_weak_count *)v101[15];
      if (v102)
      {
        uint64_t v103 = std::__shared_weak_count::lock(v102);
        if (v103)
        {
          uint64_t v104 = v103;
          uint64_t v105 = v101[14];
          if (atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            if (v105) {
              goto LABEL_170;
            }
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
            std::__shared_weak_count::__release_weak(v104);
            if (v105)
            {
LABEL_170:
              unint64_t v101 = (void *)*v101;
              if (!v101) {
                goto LABEL_179;
              }
              continue;
            }
          }
        }
      }
      unint64_t v106 = (void *)*v101;
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&buf, v80 + 33, v101);
      int v107 = (void *)buf.__r_.__value_.__r.__words[0];
      if (buf.__r_.__value_.__r.__words[0])
      {
        if (buf.__r_.__value_.__s.__data_[16])
        {
          int v108 = *(std::__shared_weak_count **)(buf.__r_.__value_.__r.__words[0] + 120);
          if (v108) {
            std::__shared_weak_count::__release_weak(v108);
          }
          uint64_t v109 = (void *)v107[3];
          if (v109 != (void *)v107[5]) {
            free(v109);
          }
        }
        operator delete(v107);
      }
      unint64_t v101 = v106;
      if (!v106) {
        goto LABEL_179;
      }
    }
  }
}

void sub_1A18517A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t *a32)
{
  if (a32 == &a29)
  {
    (*(void (**)(uint64_t *))(a29 + 32))(&a29);
    _Unwind_Resume(exception_object);
  }
  if (a32)
  {
    (*(void (**)(void))(*a32 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(void *a1, unsigned __int8 *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  uint64_t v4 = *((unsigned __int16 *)a2 + 1);
  unint64_t v5 = (v4
      + ((v3 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v3 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v3 - 0x61C8864680B583EBLL);
  BOOL v6 = (uint64_t *)*((void *)a2 + 9);
  unint64_t v7 = ((unint64_t)&v6[8 * v5 - 0xC3910C8D016B07DLL] + (v5 >> 2) - 3) ^ v5;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v2);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    uint64_t v9 = ((unint64_t)&v6[8 * v5 - 0xC3910C8D016B07DLL] + (v5 >> 2) - 3) ^ v5;
    if (v7 >= *(void *)&v2) {
      uint64_t v9 = v7 % *(void *)&v2;
    }
  }
  else
  {
    uint64_t v9 = v7 & (*(void *)&v2 - 1);
  }
  unsigned int v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    int v12 = (const void *)*((void *)a2 + 1);
    size_t v13 = *((void *)a2 + 2) - (void)v12;
    if (v8.u32[0] < 2uLL)
    {
      uint64_t v14 = *(void *)&v2 - 1;
      while (1)
      {
        unint64_t v17 = v11[1];
        if (v17 == (uint64_t *)v7)
        {
          if (*((unsigned __int8 *)v11 + 16) == v3
            && *((unsigned __int16 *)v11 + 9) == v4
            && v11[11] == v6)
          {
            size_t v18 = v11[3];
            if ((char *)v11[4] - (char *)v18 == v13 && !memcmp(v18, v12, v13)) {
              return v11;
            }
          }
        }
        else if (((unint64_t)v17 & v14) != v9)
        {
          return 0;
        }
        uint64_t v11 = (uint64_t **)*v11;
        if (!v11) {
          return v11;
        }
      }
    }
    do
    {
      unint64_t v15 = (unint64_t)v11[1];
      if (v15 == v7)
      {
        if (*((unsigned __int8 *)v11 + 16) == v3
          && *((unsigned __int16 *)v11 + 9) == v4
          && v11[11] == v6)
        {
          unint64_t v16 = v11[3];
          if ((char *)v11[4] - (char *)v16 == v13 && !memcmp(v16, v12, v13)) {
            return v11;
          }
        }
      }
      else
      {
        if (v15 >= *(void *)&v2) {
          v15 %= *(void *)&v2;
        }
        if (v15 != v9) {
          return 0;
        }
      }
      uint64_t v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

{
  int8x8_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  const void *v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;

  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  uint64_t v4 = *((unsigned __int16 *)a2 + 1);
  unint64_t v5 = (v4
      + ((v3 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v3 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v3 - 0x61C8864680B583EBLL);
  BOOL v6 = (uint64_t *)*((void *)a2 + 9);
  unint64_t v7 = ((unint64_t)&v6[8 * v5 - 0xC3910C8D016B07DLL] + (v5 >> 2) - 3) ^ v5;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v2);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    uint64_t v9 = ((unint64_t)&v6[8 * v5 - 0xC3910C8D016B07DLL] + (v5 >> 2) - 3) ^ v5;
    if (v7 >= *(void *)&v2) {
      uint64_t v9 = v7 % *(void *)&v2;
    }
  }
  else
  {
    uint64_t v9 = v7 & (*(void *)&v2 - 1);
  }
  unsigned int v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    int v12 = (const void *)*((void *)a2 + 1);
    size_t v13 = *((void *)a2 + 2) - (void)v12;
    if (v8.u32[0] < 2uLL)
    {
      uint64_t v14 = *(void *)&v2 - 1;
      while (1)
      {
        unint64_t v17 = v11[1];
        if ((uint64_t *)v7 == v17)
        {
          if (*((unsigned __int8 *)v11 + 16) == v3
            && *((unsigned __int16 *)v11 + 9) == v4
            && v11[11] == v6)
          {
            size_t v18 = v11[3];
            if ((char *)v11[4] - (char *)v18 == v13 && !memcmp(v18, v12, v13)) {
              return v11;
            }
          }
        }
        else if (((unint64_t)v17 & v14) != v9)
        {
          return 0;
        }
        uint64_t v11 = (uint64_t **)*v11;
        if (!v11) {
          return v11;
        }
      }
    }
    do
    {
      unint64_t v15 = (unint64_t)v11[1];
      if (v7 == v15)
      {
        if (*((unsigned __int8 *)v11 + 16) == v3
          && *((unsigned __int16 *)v11 + 9) == v4
          && v11[11] == v6)
        {
          unint64_t v16 = v11[3];
          if ((char *)v11[4] - (char *)v16 == v13 && !memcmp(v16, v12, v13)) {
            return v11;
          }
        }
      }
      else
      {
        if (v15 >= *(void *)&v2) {
          v15 %= *(void *)&v2;
        }
        if (v15 != v9) {
          return 0;
        }
      }
      uint64_t v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove(uint64_t result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)a2[1];
  unint64_t v4 = a3[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  BOOL v6 = *(void **)(*a2 + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    BOOL v6 = (void *)*v6;
  }
  while (v6 != a3);
  if (v7 == a2 + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a3) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a3 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*a2 + 8 * v4) = 0;
  }
  uint64_t v10 = *a3;
  if (*a3)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*a2 + 8 * v11) = v7;
      uint64_t v10 = *a3;
    }
  }
  void *v7 = v10;
  *a3 = 0;
  --a2[3];
  *(void *)double result = a3;
  *(void *)(result + 8) = a2 + 2;
  *(unsigned char *)(result + 16) = 1;
  return result;
}

void md::DaVinciGroundLayerDataSource::constructRequests(uint64_t a1, unsigned char **a2, unsigned char **a3)
{
  uint64_t v189 = *MEMORY[0x1E4F143B8];
  if (a2 == a3) {
    return;
  }
  int8x8_t v3 = a3;
  unint64_t v4 = a2;
  while (2)
  {
    BOOL v6 = (int32x2_t *)*((void *)*v4 + 2);
    __int32 v7 = v6[1].i32[0];
    v171[24] = v6[1].i32[1];
    unsigned __int8 v172 = v7;
    int32x2_t v173 = vrev64_s32(*v6);
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 24) + 16))(&v170);
    if (!(_BYTE)v170) {
      goto LABEL_3;
    }
    unint64_t v8 = *v4;
    uint64_t v9 = **v4;
    uint64_t v10 = *((void *)*v4 + 14);
    v162[0] = 0;
    if (v8[96])
    {
      int v163 = *((_DWORD *)v8 + 25);
      v162[0] = 1;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unsigned char *, uint64_t, char *))(*(void *)a1 + 144))(&v164, a1, v9, v171, v10, v162);
    if (v162[0]) {
      v162[0] = 0;
    }
    gdc::LayerDataRequest::request(*v4, (uint64_t)&v164, 0);
    if (v171[1] >= v172) {
      goto LABEL_202;
    }
    unint64_t v11 = *v4;
    LOBYTE(v155) = **v4;
    gdc::LayerDataKey::LayerDataKey((uint64_t)&v156, (uint64_t)(v11 + 8));
    char v159 = 0;
    if (v11[96])
    {
      int v160 = *((_DWORD *)v11 + 25);
      char v159 = 1;
    }
    uint64_t v161 = *((void *)v11 + 13);
    int v12 = (char *)v165;
    size_t v13 = v152;
    uint64_t v147 = v164;
    unint64_t v148 = v152;
    __int8 v149 = v152;
    int v150 = v152;
    uint64_t v151 = 32;
    uint64_t v14 = v166;
    unint64_t v15 = v166 - (unsigned char *)v165;
    if ((unint64_t)(v166 - (unsigned char *)v165) >= 0x21)
    {
      if (v15 <= 0x40) {
        size_t v16 = 64;
      }
      else {
        size_t v16 = v166 - (unsigned char *)v165;
      }
      size_t v13 = malloc_type_malloc(v16, 0x100004077774924uLL);
      unint64_t v17 = (char *)v148;
      size_t v18 = v149;
      if (v148 == v149) {
        goto LABEL_32;
      }
      unint64_t v19 = v149 - (unsigned char *)v148;
      if ((unint64_t)(v149 - (unsigned char *)v148) < 8)
      {
        int v20 = v13;
        goto LABEL_31;
      }
      int v20 = v13;
      if ((unint64_t)(v13 - (unsigned char *)v148) < 0x20) {
        goto LABEL_31;
      }
      if (v19 >= 0x20)
      {
        unint64_t v21 = v19 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v22 = (long long *)((char *)v148 + 16);
        unint64_t v23 = v13 + 16;
        unint64_t v24 = v19 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v25 = *v22;
          *(v23 - 1) = *(v22 - 1);
          *unint64_t v23 = v25;
          v22 += 2;
          v23 += 2;
          v24 -= 32;
        }
        while (v24);
        if (v19 == v21) {
          goto LABEL_32;
        }
        if ((v19 & 0x18) == 0)
        {
          v17 += v21;
          int v20 = &v13[v21];
          goto LABEL_31;
        }
      }
      else
      {
        unint64_t v21 = 0;
      }
      unint64_t v26 = v19 & 0xFFFFFFFFFFFFFFF8;
      int v20 = &v13[v19 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v27 = v21 - (v19 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v28 = (uint64_t *)&v17[v21];
      unint64_t v29 = &v13[v21];
      do
      {
        uint64_t v30 = *v28++;
        *v29++ = v30;
        v27 += 8;
      }
      while (v27);
      if (v19 == v26) {
        goto LABEL_32;
      }
      v17 += v26;
      do
      {
LABEL_31:
        char v31 = *v17++;
        *v20++ = v31;
      }
      while (v17 != v18);
LABEL_32:
      unint64_t v148 = v13;
      __int8 v149 = v13;
      uint64_t v151 = v16;
    }
    if (v12 == v14) {
      goto LABEL_51;
    }
    if (v15 < 8)
    {
      char v33 = v13;
      goto LABEL_49;
    }
    if ((unint64_t)(v13 - v12) < 0x20)
    {
      char v33 = v13;
      goto LABEL_49;
    }
    if (v15 >= 0x20)
    {
      unint64_t v32 = v15 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v34 = (long long *)(v12 + 16);
      uint64_t v35 = v13 + 16;
      unint64_t v36 = v15 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v37 = *v34;
        *(v35 - 1) = *(v34 - 1);
        *uint64_t v35 = v37;
        v34 += 2;
        v35 += 2;
        v36 -= 32;
      }
      while (v36);
      if (v15 == v32) {
        goto LABEL_50;
      }
      if ((v15 & 0x18) == 0)
      {
        v12 += v32;
        char v33 = &v13[v32];
        goto LABEL_49;
      }
    }
    else
    {
      unint64_t v32 = 0;
    }
    unint64_t v38 = v15 & 0xFFFFFFFFFFFFFFF8;
    char v33 = &v13[v15 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v39 = v32 - (v15 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v40 = (uint64_t *)&v12[v32];
    unint64_t v41 = &v13[v32];
    do
    {
      uint64_t v42 = *v40++;
      *v41++ = v42;
      v39 += 8;
    }
    while (v39);
    if (v15 == v38) {
      goto LABEL_50;
    }
    v12 += v38;
    do
    {
LABEL_49:
      char v43 = *v12++;
      *v33++ = v43;
    }
    while (v12 != v14);
LABEL_50:
    size_t v13 = v149;
LABEL_51:
    __int8 v149 = &v13[v15];
    uint64_t v153 = v168;
    long long v154 = v169;
    if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
    }
    uint64_t v44 = GEOGetGeoDisplayCoreResourceLoadingLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoDisplayCoreResourceLoadingLog::log, OS_LOG_TYPE_DEBUG))
    {
      gdc::LayerDataRequestKey::keysInt32Str(&__p, &v155);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      gdc::ResourceKey::keysInt32Str(&v184, (unsigned __int8 *)&v147);
      uint64_t v46 = &v184;
      if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v46 = (std::string *)v184.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v186 = p_p;
      __int16 v187 = 2080;
      BOOL v188 = v46;
      _os_log_impl(&dword_1A1780000, v44, OS_LOG_TYPE_DEBUG, "extending key: %s (resource:%s) ", buf, 0x16u);
      if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v184.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_61;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_61;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_61:
    gdc::ResourceStatusContainer::incrementResourceReference(*(gdc::ResourceStatusContainer **)(a1 + 272), (const gdc::ResourceKey *)&v147);
    __p.__r_.__value_.__s.__data_[0] = v155;
    gdc::LayerDataKey::LayerDataKey((uint64_t)&__p.__r_.__value_.__l.__size_, (uint64_t)&v156);
    char v176 = 0;
    if (v159)
    {
      int v177 = v160;
      char v176 = 1;
    }
    int v47 = (char *)v148;
    *(void *)&long long v178 = v161;
    *((void *)&v178 + 1) = v147;
    unsigned int v48 = v181;
    *(void *)&long long v179 = v181;
    *((void *)&v179 + 1) = v181;
    *(void *)&long long v180 = v181;
    *((void *)&v180 + 1) = 32;
    BOOL v49 = v149;
    unint64_t v50 = v149 - (unsigned char *)v148;
    if ((unint64_t)(v149 - (unsigned char *)v148) >= 0x21)
    {
      if (v50 <= 0x40) {
        size_t v51 = 64;
      }
      else {
        size_t v51 = v149 - (unsigned char *)v148;
      }
      unsigned int v48 = malloc_type_malloc(v51, 0x100004077774924uLL);
      unsigned int v53 = (char *)*((void *)&v179 + 1);
      unint64_t v52 = (char *)v179;
      if ((void)v179 == *((void *)&v179 + 1)) {
        goto LABEL_85;
      }
      unint64_t v54 = *((void *)&v179 + 1) - v179;
      if (*((void *)&v179 + 1) - (void)v179 < 8uLL)
      {
        unsigned int v55 = v48;
        goto LABEL_84;
      }
      unsigned int v55 = v48;
      if ((unint64_t)&v48[-v179] < 0x20) {
        goto LABEL_84;
      }
      if (v54 >= 0x20)
      {
        unint64_t v56 = v54 & 0xFFFFFFFFFFFFFFE0;
        unsigned int v57 = (long long *)(v179 + 16);
        BOOL v58 = v48 + 16;
        unint64_t v59 = v54 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v60 = *v57;
          *(v58 - 1) = *(v57 - 1);
          _OWORD *v58 = v60;
          v57 += 2;
          v58 += 2;
          v59 -= 32;
        }
        while (v59);
        if (v54 == v56) {
          goto LABEL_85;
        }
        if ((v54 & 0x18) == 0)
        {
          v52 += v56;
          unsigned int v55 = &v48[v56];
          goto LABEL_84;
        }
      }
      else
      {
        unint64_t v56 = 0;
      }
      unint64_t v61 = v54 & 0xFFFFFFFFFFFFFFF8;
      unsigned int v55 = &v48[v54 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v62 = v56 - (v54 & 0xFFFFFFFFFFFFFFF8);
      unsigned int v63 = (uint64_t *)&v52[v56];
      BOOL v64 = &v48[v56];
      do
      {
        uint64_t v65 = *v63++;
        *v64++ = v65;
        v62 += 8;
      }
      while (v62);
      if (v54 == v61) {
        goto LABEL_85;
      }
      v52 += v61;
      do
      {
LABEL_84:
        char v66 = *v52++;
        *v55++ = v66;
      }
      while (v52 != v53);
LABEL_85:
      *(void *)&long long v179 = v48;
      *((void *)&v179 + 1) = v48;
      *((void *)&v180 + 1) = v51;
    }
    if (v47 == v49) {
      goto LABEL_104;
    }
    if (v50 < 8)
    {
      uint8x8_t v68 = v48;
      goto LABEL_102;
    }
    if ((unint64_t)(v48 - v47) < 0x20)
    {
      uint8x8_t v68 = v48;
      goto LABEL_102;
    }
    if (v50 >= 0x20)
    {
      unint64_t v67 = v50 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v69 = (long long *)(v47 + 16);
      size_t v70 = v48 + 16;
      unint64_t v71 = v50 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v72 = *v69;
        *(v70 - 1) = *(v69 - 1);
        _OWORD *v70 = v72;
        v69 += 2;
        v70 += 2;
        v71 -= 32;
      }
      while (v71);
      if (v50 == v67) {
        goto LABEL_103;
      }
      if ((v50 & 0x18) == 0)
      {
        v47 += v67;
        uint8x8_t v68 = &v48[v67];
        goto LABEL_102;
      }
    }
    else
    {
      unint64_t v67 = 0;
    }
    unint64_t v73 = v50 & 0xFFFFFFFFFFFFFFF8;
    uint8x8_t v68 = &v48[v50 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v74 = v67 - (v50 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v75 = (uint64_t *)&v47[v67];
    char v76 = &v48[v67];
    do
    {
      uint64_t v77 = *v75++;
      *v76++ = v77;
      v74 += 8;
    }
    while (v74);
    if (v50 == v73) {
      goto LABEL_103;
    }
    v47 += v73;
    do
    {
LABEL_102:
      char v78 = *v47++;
      *v68++ = v78;
    }
    while (v47 != v49);
LABEL_103:
    unsigned int v48 = (unsigned char *)*((void *)&v179 + 1);
LABEL_104:
    *((void *)&v179 + 1) = &v48[v50];
    uint64_t v182 = v153;
    long long v183 = v154;
    unint64_t v80 = *(void *)(a1 + 256);
    unint64_t v79 = *(void *)(a1 + 264);
    if (v80 < v79)
    {
      *(unsigned char *)unint64_t v80 = __p.__r_.__value_.__s.__data_[0];
      gdc::LayerDataKey::LayerDataKey(v80 + 8, (uint64_t)&__p.__r_.__value_.__l.__size_);
      *(unsigned char *)(v80 + 96) = 0;
      if (v176)
      {
        *(_DWORD *)(v80 + 100) = v177;
        *(unsigned char *)(v80 + 96) = 1;
      }
      *(_OWORD *)(v80 + 104) = v178;
      size_t v81 = (unsigned char *)(v80 + 152);
      *(void *)(v80 + 120) = v80 + 152;
      *(void *)(v80 + 128) = v80 + 152;
      *(void *)(v80 + 136) = v80 + 152;
      *(void *)(v80 + 144) = *((void *)&v180 + 1);
      unint64_t v82 = (char *)v179;
      if ((void)v179 != (void)v180)
      {
        *(_OWORD *)(v80 + 120) = v179;
        long long v179 = 0u;
        long long v180 = 0u;
LABEL_151:
        *(void *)(v80 + 184) = v182;
        *(_OWORD *)(v80 + 192) = v183;
        uint64_t v122 = (char *)(v80 + 208);
        goto LABEL_190;
      }
      *(void *)(v80 + 128) = &v81[*((void *)&v179 + 1) - v179];
      uint64_t v89 = (char *)*((void *)&v179 + 1);
      if (v82 == *((char **)&v179 + 1)) {
        goto LABEL_151;
      }
      unint64_t v90 = *((void *)&v179 + 1) - (void)v82;
      if (*((void *)&v179 + 1) - (void)v82 >= 8uLL && v80 - (unint64_t)v82 + 152 >= 0x20)
      {
        if (v90 < 0x20)
        {
          uint64_t v91 = 0;
LABEL_137:
          unint64_t v107 = v90 & 0xFFFFFFFFFFFFFFF8;
          v81 += v90 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v108 = v91 - (v90 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v109 = (uint64_t *)&v82[v91];
          unint64_t v110 = (void *)(v80 + v91 + 152);
          do
          {
            uint64_t v111 = *v109++;
            *v110++ = v111;
            v108 += 8;
          }
          while (v108);
          if (v90 == v107) {
            goto LABEL_151;
          }
          v82 += v107;
          goto LABEL_150;
        }
        uint64_t v91 = v90 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v103 = (long long *)(v82 + 16);
        uint64_t v104 = (_OWORD *)(v80 + 168);
        unint64_t v105 = v90 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v106 = *v103;
          *(v104 - 1) = *(v103 - 1);
          _OWORD *v104 = v106;
          v103 += 2;
          v104 += 2;
          v105 -= 32;
        }
        while (v105);
        if (v90 == v91) {
          goto LABEL_151;
        }
        if ((v90 & 0x18) != 0) {
          goto LABEL_137;
        }
        v82 += v91;
        v81 += v91;
      }
      do
      {
LABEL_150:
        char v121 = *v82++;
        *v81++ = v121;
      }
      while (v82 != v89);
      goto LABEL_151;
    }
    uint64_t v83 = *(void *)(a1 + 248);
    uint64_t v84 = v80 - v83;
    unint64_t v85 = 0x4EC4EC4EC4EC4EC5 * (v84 >> 4) + 1;
    if (v85 > 0x13B13B13B13B13BLL) {
      abort();
    }
    unint64_t v86 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v79 - v83) >> 4);
    if (2 * v86 > v85) {
      unint64_t v85 = 2 * v86;
    }
    if (v86 >= 0x9D89D89D89D89DLL) {
      unint64_t v87 = 0x13B13B13B13B13BLL;
    }
    else {
      unint64_t v87 = v85;
    }
    if (v87)
    {
      if (v87 > 0x13B13B13B13B13BLL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v88 = operator new(208 * v87);
    }
    else
    {
      uint64_t v88 = 0;
    }
    uint64_t v92 = &v88[16 * (v84 >> 4)];
    *uint64_t v92 = __p.__r_.__value_.__s.__data_[0];
    gdc::LayerDataKey::LayerDataKey((uint64_t)(v92 + 8), (uint64_t)&__p.__r_.__value_.__l.__size_);
    v92[96] = 0;
    if (v176)
    {
      *((_DWORD *)v92 + 25) = v177;
      v92[96] = 1;
    }
    *(_OWORD *)(v92 + 104) = v178;
    unint64_t v93 = &v88[16 * (v84 >> 4)];
    uint64_t v94 = v93 + 152;
    *((void *)v93 + 15) = v93 + 152;
    uint64_t v95 = v93 + 120;
    unint64_t v96 = v95 + 1;
    uint64_t v97 = *((void *)&v180 + 1);
    v95[2] = v94;
    v95[3] = v97;
    unint64_t v98 = (char *)v179;
    if ((void)v179 == (void)v180)
    {
      unint64_t v99 = (char *)*((void *)&v179 + 1);
      unint64_t v101 = *((void *)&v179 + 1) - v179;
      BOOL v100 = *((void *)&v179 + 1) == (void)v179;
      *unint64_t v96 = &v94[*((void *)&v179 + 1) - v179];
      if (v100) {
        goto LABEL_154;
      }
      if (v101 >= 8 && (unint64_t)(&v88[v84] - v98 + 152) >= 0x20)
      {
        if (v101 < 0x20)
        {
          uint64_t v102 = 0;
LABEL_145:
          unint64_t v116 = v101 & 0xFFFFFFFFFFFFFFF8;
          v94 += v101 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v117 = v102 - (v101 & 0xFFFFFFFFFFFFFFF8);
          long long v118 = (uint64_t *)&v98[v102];
          int v119 = &v88[16 * (v84 >> 4) + 152 + v102];
          do
          {
            uint64_t v120 = *v118++;
            *v119++ = v120;
            v117 += 8;
          }
          while (v117);
          if (v101 == v116) {
            goto LABEL_154;
          }
          v98 += v116;
          goto LABEL_153;
        }
        uint64_t v102 = v101 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v112 = (long long *)(v98 + 16);
        unint64_t v113 = &v88[16 * (v84 >> 4) + 168];
        unint64_t v114 = v101 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v115 = *v112;
          *(v113 - 1) = *(v112 - 1);
          _OWORD *v113 = v115;
          v112 += 2;
          v113 += 2;
          v114 -= 32;
        }
        while (v114);
        if (v101 == v102) {
          goto LABEL_154;
        }
        if ((v101 & 0x18) != 0) {
          goto LABEL_145;
        }
        v98 += v102;
        v94 += v102;
      }
      do
      {
LABEL_153:
        char v123 = *v98++;
        *v94++ = v123;
      }
      while (v98 != v99);
      goto LABEL_154;
    }
    *uint64_t v95 = v179;
    *unint64_t v96 = *((void *)&v179 + 1);
    long long v179 = 0u;
    long long v180 = 0u;
LABEL_154:
    __int16 v124 = &v88[16 * (v84 >> 4)];
    *((void *)v124 + 23) = v182;
    *((_OWORD *)v124 + 12) = v183;
    uint64_t v122 = v92 + 208;
    unint64_t v125 = *(char **)(a1 + 248);
    uint64_t v126 = *(char **)(a1 + 256);
    if (v126 == v125)
    {
      *(void *)(a1 + 248) = v92;
      *(void *)(a1 + 256) = v122;
      *(void *)(a1 + 264) = &v88[208 * v87];
      goto LABEL_187;
    }
    uint64_t v146 = &v88[208 * v87];
    uint64_t v127 = 0;
    uint64_t v128 = (uint64_t)&v88[v84 - 56];
    uint64_t v129 = *(char **)(a1 + 256);
    do
    {
      char v130 = v92;
      char v131 = *(v129 - 208);
      v129 -= 208;
      *(v92 - 208) = v131;
      v92 -= 208;
      gdc::LayerDataKey::LayerDataKey((uint64_t)(v92 + 8), (uint64_t)(v129 + 8));
      v92[96] = 0;
      if (v129[96])
      {
        *((_DWORD *)v130 - 27) = *((_DWORD *)v126 - 27);
        *(v130 - 112) = 1;
      }
      *((void *)v130 - 13) = *((void *)v126 - 13);
      unsigned __int8 v132 = v130 - 56;
      *((void *)v130 - 12) = *((void *)v126 - 12);
      *((void *)v130 - 11) = v130 - 56;
      uint64_t v133 = (char *)*((void *)v126 - 11);
      *((void *)v130 - 10) = v130 - 56;
      *((void *)v130 - 9) = v130 - 56;
      *((void *)v130 - 8) = *((void *)v126 - 8);
      if (v133 != *((char **)v126 - 9))
      {
        *((void *)v130 - 11) = v133;
        *((void *)v130 - 10) = *((void *)v126 - 10);
        *(_OWORD *)(v126 - 88) = 0u;
        *(_OWORD *)(v126 - 72) = 0u;
        goto LABEL_157;
      }
      *((void *)v130 - 10) = &v132[*((void *)v126 - 10) - (void)v133];
      long long v134 = (char *)*((void *)v126 - 10);
      if (v133 != v134)
      {
        unint64_t v135 = v134 - v133;
        if ((unint64_t)(v134 - v133) < 8 || (unint64_t)(v128 - 208 * v127 - (void)v133) < 0x20) {
          goto LABEL_175;
        }
        if (v135 >= 0x20)
        {
          uint64_t v137 = 0;
          unint64_t v136 = v135 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            int v138 = &v130[v137];
            long long v139 = *(_OWORD *)&v133[v137 + 16];
            *(_OWORD *)(v138 - 56) = *(_OWORD *)&v133[v137];
            *(_OWORD *)(v138 - 40) = v139;
            v137 += 32;
          }
          while (v136 != v137);
          if (v135 == v136) {
            goto LABEL_157;
          }
          if ((v135 & 0x18) == 0)
          {
            v133 += v136;
            v132 += v136;
            do
            {
LABEL_175:
              char v141 = *v133++;
              *v132++ = v141;
            }
            while (v133 != v134);
            goto LABEL_157;
          }
        }
        else
        {
          unint64_t v136 = 0;
        }
        unint64_t v140 = v135 & 0xFFFFFFFFFFFFFFF8;
        v132 += v135 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          *(void *)&v130[v136 - 56] = *(void *)&v133[v136];
          v136 += 8;
        }
        while (v140 != v136);
        if (v135 != v140)
        {
          v133 += v140;
          goto LABEL_175;
        }
      }
LABEL_157:
      *((void *)v130 - 3) = *((void *)v126 - 3);
      *((_OWORD *)v130 - 1) = *((_OWORD *)v126 - 1);
      ++v127;
      uint64_t v126 = v129;
    }
    while (v129 != v125);
    uint64_t v126 = *(char **)(a1 + 248);
    long long v142 = *(char **)(a1 + 256);
    *(void *)(a1 + 248) = v92;
    *(void *)(a1 + 256) = v122;
    *(void *)(a1 + 264) = v146;
    if (v142 == v126)
    {
LABEL_187:
      int8x8_t v3 = a3;
      goto LABEL_188;
    }
    int8x8_t v3 = a3;
    do
    {
      unint64_t v143 = (void *)*((void *)v142 - 11);
      if (v143 != *((void **)v142 - 9)) {
        free(v143);
      }
      if (*(v142 - 112)) {
        *(v142 - 112) = 0;
      }
      unint64_t v144 = (void *)*((void *)v142 - 24);
      if (v144 != *((void **)v142 - 22)) {
        free(v144);
      }
      v142 -= 208;
    }
    while (v142 != v126);
LABEL_188:
    if (v126) {
      operator delete(v126);
    }
LABEL_190:
    *(void *)(a1 + 256) = v122;
    if ((void)v179 != (void)v180) {
      free((void *)v179);
    }
    if (v176) {
      char v176 = 0;
    }
    if (__p.__r_.__value_.__r.__words[2] != v175) {
      free((void *)__p.__r_.__value_.__r.__words[2]);
    }
    if (v148 != v150) {
      free(v148);
    }
    if (v159) {
      char v159 = 0;
    }
    if (v157 != v158) {
      free(v157);
    }
LABEL_202:
    if (v165 != v167) {
      free(v165);
    }
LABEL_3:
    v4 += 2;
    if (v4 != v3) {
      continue;
    }
    break;
  }
}

void sub_1A18528D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,void *a54)
{
  if (a38 != a40) {
    free(a38);
  }
  if (a52 != a54)
  {
    free(a52);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void md::DaVinciMaterialLayerDataSource::constructRequests(uint64_t a1, char **a2, char **a3)
{
  if (a2 != a3)
  {
    uint64_t v34 = v3;
    uint64_t v35 = v4;
    BOOL v6 = a2;
    do
    {
      __int32 v7 = *v6;
      char v25 = **v6;
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v26, (uint64_t)(v7 + 8));
      char v29 = 0;
      if (v7[96])
      {
        int v30 = *((_DWORD *)v7 + 25);
        char v29 = 1;
      }
      uint64_t v31 = *((void *)v7 + 13);
      uint64_t v8 = *(void *)v27;
      uint64_t v9 = *((void *)*v6 + 14);
      v15[0] = **v6;
      __int16 v16 = 36;
      unsigned int v17 = 0x80000000;
      size_t v18 = v22;
      unint64_t v19 = v22;
      int v20 = v22;
      uint64_t v21 = 32;
      unint64_t v23 = 0;
      uint64_t v32 = v8;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v18, v22, (char *)&v32, v33);
      uint64_t v10 = (unsigned __int8 *)v18;
      unint64_t v11 = v19 - (unsigned char *)v18;
      if (v19 == v18)
      {
        unint64_t v12 = 0;
      }
      else
      {
        unint64_t v12 = 0;
        if (v11 <= 1) {
          unint64_t v11 = 1;
        }
        do
        {
          unsigned int v13 = *v10++;
          v12 ^= (v12 << 6) + (v12 >> 2) - 0x61C8864680B583EBLL + v13;
          --v11;
        }
        while (v11);
      }
      unint64_t v23 = v12;
      uint64_t v24 = v9;
      uint64_t v14 = *v6;
      v6 += 2;
      gdc::LayerDataRequest::request(v14, (uint64_t)v15, 1);
      if (v18 != v20) {
        free(v18);
      }
      if (v29) {
        char v29 = 0;
      }
      if (v27 != v28) {
        free(v27);
      }
    }
    while (v6 != a3);
  }
}

void std::__function::__func<gdc::ResourceManager::cleanupResourceRequests(void)::$_0,std::allocator<gdc::ResourceManager::cleanupResourceRequests(void)::$_0>,void ()(std::pair<gdc::ResourceKey,gdc::ResourceStatus> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void **)(a1 + 8);
  if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
    dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
  }
  uint64_t v4 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    gdc::ResourceKey::keysInt32Str(&__p, (unsigned __int8 *)a2);
    uint8x8_t v5 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    BOOL v6 = *(uint64_t **)(a2 + 80);
    *(_DWORD *)std::string buf = 136315394;
    char v25 = v5;
    __int16 v26 = 2048;
    unint64_t v27 = v6;
    _os_log_impl(&dword_1A1780000, v4, OS_LOG_TYPE_DEBUG, "ResourceManager cancelling resource: %s, rid: %llu", buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }

  __int32 v7 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>(v3 + 11, (unsigned __int8 *)a2);
  if (v7)
  {
    uint64_t v8 = v7;
    if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
    }
    uint64_t v9 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      gdc::ResourceKey::keysInt32Str(&__p, (unsigned __int8 *)a2);
      uint64_t v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      unint64_t v11 = v8[14];
      *(_DWORD *)std::string buf = 136315394;
      char v25 = v10;
      __int16 v26 = 2048;
      unint64_t v27 = v11;
      _os_log_impl(&dword_1A1780000, v9, OS_LOG_TYPE_DEBUG, "* ResourceManager cancelling resource: %s, rid: %llu", buf, 0x16u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    unsigned int v12 = *(_DWORD *)(a2 + 96);
    if (v12 <= 1)
    {
      unsigned int v13 = std::__hash_table<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<gdc::ResourceKey>>::find<gdc::ResourceKey>((void *)(v3[38] + 8), (unsigned __int8 *)a2);
      if (v13) {
        *((_DWORD *)v13 + 28) = 4;
      }
      if (v12 == 1)
      {
        if (GEOGetGeoDisplayCoreResourceLoadingLog::onceToken != -1) {
          dispatch_once(&GEOGetGeoDisplayCoreResourceLoadingLog::onceToken, &__block_literal_global_5_55056);
        }
        uint64_t v14 = (id)GEOGetGeoDisplayCoreResourceLoadingLog::log;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          gdc::ResourceKey::keysInt32Str(&__p, (unsigned __int8 *)a2);
          unint64_t v15 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          __int16 v16 = v8[14];
          *(_DWORD *)std::string buf = 136315394;
          char v25 = v15;
          __int16 v26 = 2048;
          unint64_t v27 = v16;
          _os_log_impl(&dword_1A1780000, v14, OS_LOG_TYPE_DEBUG, "Adding cancelled resource: %s, rid: %llu", buf, 0x16u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }

        unsigned int v17 = (unsigned __int16 *)v3[4];
        if (v17 != (unsigned __int16 *)v3[5])
        {
          int v18 = *(unsigned __int16 *)(a2 + 2);
          if (*v17 != v18)
          {
            unint64_t v19 = v17 + 8;
            do
            {
              int v20 = *v19;
              v19 += 8;
            }
            while (v20 != v18);
            unsigned int v17 = v19 - 8;
          }
        }
        (*(void (**)(void, uint64_t))(**((void **)v17 + 1) + 32))(*((void *)v17 + 1), a2);
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)(v3 + 21), (unint64_t)v8[14], (uint64_t)v8[14]);
      }
    }
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v3 + 11, v8);
    uint64_t v21 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0])
    {
      if (__p.__r_.__value_.__s.__data_[16])
      {
        uint64_t v22 = *(void **)(__p.__r_.__value_.__r.__words[0] + 24);
        if (v22 != *(void **)(__p.__r_.__value_.__r.__words[0] + 40)) {
          free(v22);
        }
      }
      operator delete(v21);
    }
  }
}

void md::SelectedDaVinciPolygonLayerDataSource::constructRequests(uint64_t a1, void **a2, void **a3)
{
  if (*(void *)(a1 + 832)) {
    BOOL v3 = a2 == a3;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint8x8_t v5 = a2;
    do
    {
      __int32 v7 = *(void **)(a1 + 824);
      if (v7)
      {
        uint64_t v8 = (uint64_t *)(*v5)[2];
        uint64_t v9 = *v8;
        unsigned int v10 = *((unsigned __int8 *)v8 + 8);
        do
        {
          uint64_t v11 = v7[2];
          v17[0] = v9;
          void v17[2] = v11;
          v17[1] = v10;
          unsigned int v12 = *v5;
          if (*((unsigned char *)*v5 + 96)) {
            int v13 = *((_DWORD *)v12 + 25);
          }
          else {
            int v13 = 2147483646;
          }
          gdc::ResourceKey::ResourceKey((uint64_t)v14, *(_WORD *)(a1 + 584), (uint64_t)v17, 0x18uLL, *((void *)v12 + 14), v13);
          gdc::LayerDataRequest::request(*v5, (uint64_t)v14, 0);
          if (v15 != v16) {
            free(v15);
          }
          __int32 v7 = (void *)*v7;
        }
        while (v7);
      }
      v5 += 2;
    }
    while (v5 != a3);
  }
}

void md::SelectedLabelLayerDataSource::constructRequests(uint64_t a1, void **a2, void **a3)
{
  if (*(void *)(a1 + 888)) {
    BOOL v3 = a2 == a3;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint8x8_t v5 = a2;
    do
    {
      uint64_t v7 = (uint64_t)*v5;
      uint64_t v8 = (uint64_t *)(*v5)[2];
      int v9 = *((unsigned __int8 *)v8 + 8);
      uint64_t v10 = *v8;
      int v17 = 0;
      uint64_t v18 = 0;
      uint64_t v15 = v10;
      int v16 = v9;
      uint64_t v18 = **(void **)(a1 + 888);
      if (*(unsigned char *)(v7 + 96)) {
        int v11 = *(_DWORD *)(v7 + 100);
      }
      else {
        int v11 = 2147483646;
      }
      gdc::ResourceKey::ResourceKey((uint64_t)v12, *(_WORD *)(a1 + 584), (uint64_t)&v15, 0x18uLL, *(void *)(v7 + 112), v11);
      gdc::LayerDataRequest::request(*v5, (uint64_t)v12, 0);
      if (v13 != v14) {
        free(v13);
      }
      v5 += 2;
    }
    while (v5 != a3);
  }
}

void std::__shared_ptr_emplace<md::DaVinciMaterialResource>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[23];
  if (v2)
  {
    uint64_t v3 = a1[24];
    uint64_t v4 = (void *)a1[23];
    if (v3 != v2)
    {
      do
      {
        uint8x8_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[23];
    }
    a1[24] = v2;
    operator delete(v4);
  }
  BOOL v6 = (std::__shared_weak_count *)a1[22];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = (void *)a1[4];
  if (v7 != (void *)a1[6])
  {
    free(v7);
  }
}

void md::LabelLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8 = *(_WORD *)(a1 + 584);
  if (*(unsigned char *)a5) {
    int v9 = *(_DWORD *)(a5 + 4);
  }
  else {
    int v9 = 2147483646;
  }
  uint64_t v10 = *(void *)(a3 + 4);
  int v18 = v10;
  int v11 = a3[1];
  int v12 = *a3;
  *(unsigned char *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(void *)(a6 + 8) = a6 + 40;
  *(void *)(a6 + 16) = a6 + 40;
  *(void *)(a6 + 24) = a6 + 40;
  *(void *)(a6 + 32) = 32;
  *(void *)(a6 + 72) = 0;
  int v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v13 = *(unsigned __int8 **)(a6 + 16);
  uint64_t v14 = *(unsigned __int8 **)(a6 + 8);
  unint64_t v15 = v13 - v14;
  if (v13 == v14)
  {
    unint64_t v16 = 0;
  }
  else
  {
    unint64_t v16 = 0;
    if (v15 <= 1) {
      unint64_t v15 = 1;
    }
    do
    {
      unsigned int v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(void *)(a6 + 72) = v16;
  *(void *)(a6 + 88) = a4;
}

uint64_t std::__shared_ptr_pointer<md::RegionalResourceSet *,std::shared_ptr<md::RegionalResourceSet>::__shared_ptr_default_delete<md::RegionalResourceSet,md::RegionalResourceSet>,std::allocator<md::RegionalResourceSet>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {

    uint64_t v2 = *(void **)(v1 + 8);
    if (v2 != *(void **)(v1 + 24)) {
      free(v2);
    }
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void md::DaVinciCenterLineRoadsLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8 = *(_WORD *)(a1 + 584);
  if (*(unsigned char *)a5) {
    int v9 = *(_DWORD *)(a5 + 4);
  }
  else {
    int v9 = 2147483646;
  }
  uint64_t v10 = *(void *)(a3 + 4);
  int v18 = v10;
  int v11 = a3[1];
  int v12 = *a3;
  *(unsigned char *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(void *)(a6 + 8) = a6 + 40;
  *(void *)(a6 + 16) = a6 + 40;
  *(void *)(a6 + 24) = a6 + 40;
  *(void *)(a6 + 32) = 32;
  *(void *)(a6 + 72) = 0;
  int v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v13 = *(unsigned __int8 **)(a6 + 16);
  uint64_t v14 = *(unsigned __int8 **)(a6 + 8);
  unint64_t v15 = v13 - v14;
  if (v13 == v14)
  {
    unint64_t v16 = 0;
  }
  else
  {
    unint64_t v16 = 0;
    if (v15 <= 1) {
      unint64_t v15 = 1;
    }
    do
    {
      unsigned int v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(void *)(a6 + 72) = v16;
  *(void *)(a6 + 88) = a4;
}

void std::__shared_ptr_emplace<md::GEOVectorTileResource>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[22];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != (void *)a1[6])
  {
    free(v3);
  }
}

void md::DaVinciAssetLayerDataSource::constructRequests(uint64_t a1, char **a2, char **a3)
{
  if (a2 != a3)
  {
    uint64_t v34 = v3;
    uint64_t v35 = v4;
    BOOL v6 = a2;
    do
    {
      uint64_t v7 = *v6;
      char v25 = **v6;
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v26, (uint64_t)(v7 + 8));
      char v29 = 0;
      if (v7[96])
      {
        int v30 = *((_DWORD *)v7 + 25);
        char v29 = 1;
      }
      uint64_t v31 = *((void *)v7 + 13);
      uint64_t v8 = *(void *)v27;
      uint64_t v9 = *((void *)*v6 + 14);
      v15[0] = **v6;
      __int16 v16 = 28;
      unsigned int v17 = 0x80000000;
      int v18 = v22;
      int v19 = v22;
      uint64_t v20 = v22;
      uint64_t v21 = 32;
      unint64_t v23 = 0;
      uint64_t v32 = v8;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v18, v22, (char *)&v32, v33);
      uint64_t v32 = 0;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v18, v19, (char *)&v32, v33);
      uint64_t v10 = (unsigned __int8 *)v18;
      unint64_t v11 = v19 - (unsigned char *)v18;
      if (v19 == v18)
      {
        unint64_t v12 = 0;
      }
      else
      {
        unint64_t v12 = 0;
        if (v11 <= 1) {
          unint64_t v11 = 1;
        }
        do
        {
          unsigned int v13 = *v10++;
          v12 ^= (v12 << 6) + (v12 >> 2) - 0x61C8864680B583EBLL + v13;
          --v11;
        }
        while (v11);
      }
      unint64_t v23 = v12;
      uint64_t v24 = v9;
      uint64_t v14 = *v6;
      v6 += 2;
      gdc::LayerDataRequest::request(v14, (uint64_t)v15, 1);
      if (v18 != v20) {
        free(v18);
      }
      if (v29) {
        char v29 = 0;
      }
      if (v27 != v28) {
        free(v27);
      }
    }
    while (v6 != a3);
  }
}

void md::DaVinciElevationRasterLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8 = *(_WORD *)(a1 + 584);
  if (*(unsigned char *)a5) {
    int v9 = *(_DWORD *)(a5 + 4);
  }
  else {
    int v9 = 2147483646;
  }
  uint64_t v10 = *(void *)(a3 + 4);
  int v18 = v10;
  int v11 = a3[1];
  int v12 = *a3;
  *(unsigned char *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(void *)(a6 + 8) = a6 + 40;
  *(void *)(a6 + 16) = a6 + 40;
  *(void *)(a6 + 24) = a6 + 40;
  *(void *)(a6 + 32) = 32;
  *(void *)(a6 + 72) = 0;
  int v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  unsigned int v13 = *(unsigned __int8 **)(a6 + 16);
  uint64_t v14 = *(unsigned __int8 **)(a6 + 8);
  unint64_t v15 = v13 - v14;
  if (v13 == v14)
  {
    unint64_t v16 = 0;
  }
  else
  {
    unint64_t v16 = 0;
    if (v15 <= 1) {
      unint64_t v15 = 1;
    }
    do
    {
      unsigned int v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(void *)(a6 + 72) = v16;
  *(void *)(a6 + 88) = a4;
}

void md::ElevatedStrokeLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8 = *(_WORD *)(a1 + 584);
  if (*(unsigned char *)a5) {
    int v9 = *(_DWORD *)(a5 + 4);
  }
  else {
    int v9 = 2147483646;
  }
  uint64_t v10 = *(void *)(a3 + 4);
  int v18 = v10;
  int v11 = a3[1];
  int v12 = *a3;
  *(unsigned char *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(void *)(a6 + 8) = a6 + 40;
  *(void *)(a6 + 16) = a6 + 40;
  *(void *)(a6 + 24) = a6 + 40;
  *(void *)(a6 + 32) = 32;
  *(void *)(a6 + 72) = 0;
  int v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  unsigned int v13 = *(unsigned __int8 **)(a6 + 16);
  uint64_t v14 = *(unsigned __int8 **)(a6 + 8);
  unint64_t v15 = v13 - v14;
  if (v13 == v14)
  {
    unint64_t v16 = 0;
  }
  else
  {
    unint64_t v16 = 0;
    if (v15 <= 1) {
      unint64_t v15 = 1;
    }
    do
    {
      unsigned int v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(void *)(a6 + 72) = v16;
  *(void *)(a6 + 88) = a4;
}

void md::RegionMetaLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8 = *(_WORD *)(a1 + 584);
  if (*(unsigned char *)a5) {
    int v9 = *(_DWORD *)(a5 + 4);
  }
  else {
    int v9 = -4;
  }
  uint64_t v10 = *(void *)(a3 + 4);
  int v18 = v10;
  int v11 = a3[1];
  int v12 = *a3;
  *(unsigned char *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(void *)(a6 + 8) = a6 + 40;
  *(void *)(a6 + 16) = a6 + 40;
  *(void *)(a6 + 24) = a6 + 40;
  *(void *)(a6 + 32) = 32;
  *(void *)(a6 + 72) = 0;
  int v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  unsigned int v13 = *(unsigned __int8 **)(a6 + 16);
  uint64_t v14 = *(unsigned __int8 **)(a6 + 8);
  unint64_t v15 = v13 - v14;
  if (v13 == v14)
  {
    unint64_t v16 = 0;
  }
  else
  {
    unint64_t v16 = 0;
    if (v15 <= 1) {
      unint64_t v15 = 1;
    }
    do
    {
      unsigned int v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(void *)(a6 + 72) = v16;
  *(void *)(a6 + 88) = a4;
}

void std::__shared_ptr_emplace<md::TextDataString,geo::StdAllocator<md::TextDataString,mdm::Allocator>>::__on_zero_shared(uint64_t a1)
{
  atomic_fetch_add(md::TextDataString::_totalLabelTextData, 0xFFFFFFFF);
  uint64_t v2 = *(void *)(a1 + 120);
  if (v2)
  {
    *(void *)(a1 + 128) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 144) + 40))(*(void *)(a1 + 144), v2, *(void *)(a1 + 136) - v2);
  }
  uint64_t v3 = *(void *)(a1 + 88);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 96);
    uint64_t v5 = *(void *)(a1 + 88);
    if (v4 != v3)
    {
      do
      {
        uint64_t v6 = v4 - 24;
        CGFontRelease(*(CGFontRef *)(v4 - 16));
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      uint64_t v5 = *(void *)(a1 + 88);
    }
    *(void *)(a1 + 96) = v3;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 112) + 40))(*(void *)(a1 + 112), v5, *(void *)(a1 + 104) - v5);
  }
  *(void *)(a1 + 64) = &unk_1EF5592D8;
  uint64_t v7 = *(const void **)(a1 + 72);
  if (v7) {
    CFRelease(v7);
  }
  __int16 v8 = *(std::__shared_weak_count **)(a1 + 56);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    int v9 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v9) {
      return;
    }
  }
  else
  {
    int v9 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v9) {
      return;
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void std::__shared_ptr_emplace<md::FontOptions>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
}

float32x2_t grl::PathLayerMetrics::constructPathMetrics(uint64_t a1, uint64_t a2, int8x8_t *a3, double a4, double a5, double a6, double a7, double a8)
{
  float v8 = ceilf(*(float *)(a2 + 92));
  if (v8 <= 4295000000.0)
  {
    unsigned int v9 = v8;
    if (v8 < 0.0) {
      unsigned int v9 = 0;
    }
  }
  else
  {
    unsigned int v9 = -1;
  }
  float32x2_t v10 = *(float32x2_t *)(a2 + 108);
  unsigned int v11 = *(unsigned __int8 *)(a2 + 120);
  int32x2_t v12 = *(int32x2_t *)(a2 + 52);
  BOOL v13 = *(float *)v12.i32 > 0.0;
  if (*(float *)&v12.i32[1] > 0.0) {
    BOOL v13 = 1;
  }
  if (v11 > 9 || ((1 << v11) & 0x2C4) == 0)
  {
    if (v13)
    {
      if (*(float *)v12.i32 < *(float *)&v12.i32[1]) {
        v12.i32[0] = HIDWORD(*(void *)(a2 + 52));
      }
    }
    else
    {
      v12.i32[0] = a3->i32[0];
      if (*(float *)a3->i32 < *(float *)&a3->i32[1]) {
        v12.i32[0] = a3->i32[1];
      }
    }
    float32x2_t v16 = (float32x2_t)vdup_lane_s32(v12, 0);
  }
  else
  {
    if (v13) {
      unsigned int v15 = -1;
    }
    else {
      unsigned int v15 = 0;
    }
    a8 = COERCE_DOUBLE(vdup_n_s32(v15));
    float32x2_t v16 = (float32x2_t)vbsl_s8(*(int8x8_t *)&a8, (int8x8_t)v12, *a3);
  }
  float32x2_t v17 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a2 + 116), 0);
  float32x2_t v18 = vsub_f32(v17, v10);
  *(float *)&a8 = (float)v9;
  double v19 = *(float *)(a2 + 64) * 3.14159265 / 180.0;
  float32x2_t v20 = vrndp_f32(vmaxnm_f32(vadd_f32(v17, v10), 0));
  float32x2_t v21 = (float32x2_t)vdup_n_s32(0x4F800000u);
  float32x2_t v22 = vrndp_f32(vmaxnm_f32(v18, 0));
  int32x2_t v23 = (int32x2_t)vorr_s8((int8x8_t)vcvt_u32_f32(v22), (int8x8_t)vcgt_f32(v22, v21));
  float32x2_t v24 = vmul_n_f32(v16, COERCE_FLOAT(*(void *)(a2 + 100)));
  float32x2_t v25 = vcvt_f32_u32((uint32x2_t)vadd_s32(vdup_n_s32(v9), v23));
  float32x2_t v26 = vadd_f32(v24, v25);
  float32x2_t v27 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0);
  *(float32x2_t *)(a1 + 12) = v25;
  uint64_t v28 = (float32x2_t *)(a1 + 12);
  float32x2_t v29 = vcvt_f32_u32((uint32x2_t)v23);
  *(float32x2_t *)(a1 + 20) = v26;
  *(float32x2_t *)(a1 + 28) = v29;
  float32x2_t v30 = vadd_f32(vadd_f32(vadd_f32(v24, v27), v27), v29);
  *(float32x2_t *)(a1 + 36) = v30;
  *(float32x2_t *)(a1 + 44) = vadd_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v20, v21), (int8x8_t)v21, (int8x8_t)vcvt_f32_u32(vcvt_u32_f32(v20))), vadd_f32(v26, v27));
  float v31 = v19;
  *(float32x2_t *)(a1 + 116) = v29;
  *(float32x2_t *)(a1 + 124) = v30;
  double GradientStartPoint = grl::LayerMetrics::findGradientStartPoint(v11, (float *)(a1 + 12), v31);
  v28[8].i32[0] = LODWORD(GradientStartPoint);
  v28[8].i32[1] = v33;
  float v34 = fmodf((float)(v31 + -3.1416) + 3.1416, 6.2832);
  float v35 = fmodf(v34 + 6.2832, 6.2832);
  double v36 = grl::LayerMetrics::findGradientStartPoint(v11, (float *)v28, v35 + -3.1416);
  v28[9].i32[0] = LODWORD(v36);
  v28[9].i32[1] = v37;
  float32x2_t result = vadd_f32(vmul_f32(vsub_f32(v26, v25), (float32x2_t)0x3F0000003F000000), v25);
  v28[6] = result;
  v28[7] = result;
  return result;
}

uint64_t grl::LayerMetrics::LayerMetrics(uint64_t a1, uint64_t a2, double *a3, double a4, double a5, double a6, double a7, double a8)
{
  *(void *)a1 = &unk_1EF567000;
  *(_WORD *)(a1 + 8) = 2;
  *(_OWORD *)(a1 + 12) = 0u;
  float32x2_t v10 = (float *)(a1 + 12);
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  float32x2_t v11 = *(float32x2_t *)(a2 + 84);
  float32x2_t v12 = *(float32x2_t *)(a2 + 88);
  v13.i32[0] = *(_DWORD *)(a2 + 40);
  int v14 = *(unsigned __int8 *)(a2 + 112);
  float32x2_t v15 = *(float32x2_t *)(a2 + 124);
  double v16 = *a3;
  if (v14 == 2)
  {
    unsigned int v18 = *(float *)v13.i32 > 0.0;
    if (*(float *)(a2 + 44) > 0.0) {
      unsigned int v18 = 1;
    }
    v13.i32[1] = *(_DWORD *)(a2 + 44);
    *(int8x8_t *)&double v16 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v18), 0x1FuLL)), v13, *(int8x8_t *)&v16);
  }
  else
  {
    float v17 = roundf(*(float *)v13.i32);
    if (*(float *)&v16 >= v17) {
      LODWORD(v17) = *(void *)a3;
    }
    if (v14 == 1) {
      double v16 = COERCE_DOUBLE(__PAIR64__(HIDWORD(v16), LODWORD(v17)));
    }
  }
  float32x2_t v19 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a2 + 132), 0);
  float32x2_t v20 = vsub_f32(v19, v15);
  float32x2_t v21 = vadd_f32(v19, v15);
  *(float *)&a8 = (float)ceilf(*(float *)(a2 + 80));
  float v22 = (float)(*(float *)&v16 + *(float *)&a8) + *(float *)&a8;
  float v23 = (float)(*((float *)&v16 + 1) + *(float *)&a8) + *(float *)&a8;
  float32x2_t v24 = vrndp_f32(vmaxnm_f32(v21, 0));
  float32x2_t v25 = (float32x2_t)vdup_n_s32(0x4F800000u);
  float32x2_t v26 = vrndp_f32(vmaxnm_f32(v20, 0));
  float32x2_t v27 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v26, v25), (int8x8_t)v25, (int8x8_t)vcvt_f32_u32(vcvt_u32_f32(v26)));
  v11.i32[1] = *(_DWORD *)(a2 + 140);
  float32x2_t v28 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0);
  *(float32x2_t *)&long long v29 = vadd_f32(vadd_f32(v11, v27), v28);
  float32x2_t v30 = vadd_f32(*(float32x2_t *)&v29, *(float32x2_t *)&v16);
  v12.i32[1] = *(_DWORD *)(a2 + 144);
  *(float32x2_t *)(a1 + 44) = vadd_f32(v12, vadd_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v24, v25), (int8x8_t)v25, (int8x8_t)vcvt_f32_u32(vcvt_u32_f32(v24))), vadd_f32(v30, v28)));
  *((float32x2_t *)&v29 + 1) = v30;
  *(_OWORD *)(a1 + 12) = v29;
  *(float32x2_t *)(a1 + 28) = v27;
  *(float *)(a1 + 36) = v27.f32[0] + v22;
  *(float *)(a1 + 40) = v27.f32[1] + v23;
  double GradientStartPoint = grl::LayerMetrics::findGradientStartPoint(2u, v10, *(float *)(a2 + 52));
  *(_DWORD *)(a1 + 76) = LODWORD(GradientStartPoint);
  *(_DWORD *)(a1 + 80) = v32;
  float v33 = fmodf((float)(*(float *)(a2 + 52) + -3.1416) + 3.1416, 6.2832);
  float v34 = fmodf(v33 + 6.2832, 6.2832);
  double v35 = grl::LayerMetrics::findGradientStartPoint(2u, v10, v34 + -3.1416);
  *(_DWORD *)(a1 + 84) = LODWORD(v35);
  *(_DWORD *)(a1 + 88) = v36;
  return a1;
}

double grl::LayerMetrics::findGradientStartPoint(unsigned int a1, float *a2, float a3)
{
  __float2 v5 = __sincosf_stret(a3);
  if (a1 > 9) {
    return 0.0;
  }
  double cosval = v5.__cosval;
  double sinval = v5.__sinval;
  if (((1 << a1) & 0x2E6) != 0)
  {
    double v8 = fabs(cosval);
    double v9 = fabs(sinval);
    if (v8 >= v9) {
      double v9 = v8;
    }
    float v10 = a2[1];
    float v11 = a2[2] - *a2;
    if (v11 < 0.0) {
      float v11 = 0.0;
    }
    double v12 = v11 * 0.5 + cosval * v11 * 0.5 / v9 + *a2;
    if ((float)(a2[3] - v10) >= 0.0) {
      float v13 = a2[3] - v10;
    }
    else {
      float v13 = 0.0;
    }
    double result = v13 * 0.5 + sinval * v13 * 0.5 / v9;
    if (v12 <= 3.40282347e38)
    {
      LODWORD(result) = -8388609;
      BOOL v19 = v12 < -3.40282347e38;
      float v20 = v12;
      if (!v19) {
        *(float *)&double result = v20;
      }
    }
    else
    {
      LODWORD(result) = 2139095039;
    }
  }
  else
  {
    float v15 = a2[1];
    float v16 = a2[2] - *a2;
    if (v16 < 0.0) {
      float v16 = 0.0;
    }
    double v17 = v16 * 0.5 + cosval * v16 * 0.5 + *a2;
    if ((float)(a2[3] - v15) >= 0.0) {
      float v18 = a2[3] - v15;
    }
    else {
      float v18 = 0.0;
    }
    double result = v18 * 0.5 + sinval * v18 * 0.5;
    if (v17 <= 3.40282347e38)
    {
      LODWORD(result) = -8388609;
      BOOL v19 = v17 < -3.40282347e38;
      float v21 = v17;
      if (!v19) {
        *(float *)&double result = v21;
      }
    }
    else
    {
      LODWORD(result) = 2139095039;
    }
  }
  return result;
}

void sub_1A1854360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A1855758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, id a11, id location, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::Monitorable(uint64_t a1, _OWORD *a2, void *a3, void *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  *(_OWORD *)a1 = *a2;
  if (*(void *)a1) {
    BOOL v8 = *(void *)(a1 + 8) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8) {
    *(unsigned char *)(a1 + 16) = GEOConfigGetBOOL();
  }
  *(void *)(a1 + 24) = 0;
  double v9 = operator new(0x20uLL);
  v9[1] = 0;
  void v9[2] = 0;
  *double v9 = &unk_1EF52E530;
  *((unsigned char *)v9 + 24) = 1;
  *(void *)(a1 + 32) = v9 + 3;
  *(void *)(a1 + 40) = v9;
  uint64_t v10 = a4[3];
  if (!v10) {
    goto LABEL_9;
  }
  if ((void *)v10 != a4)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
LABEL_9:
    *(void *)(a1 + 72) = v10;
    goto LABEL_11;
  }
  *(void *)(a1 + 72) = a1 + 48;
  (*(void (**)(void, uint64_t))(*(void *)a4[3] + 24))(a4[3], a1 + 48);
LABEL_11:
  uint64_t v11 = a4[3];
  if (!v11)
  {
LABEL_14:
    int v14 = (void *)v11;
    goto LABEL_16;
  }
  if ((void *)v11 != a4)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
    goto LABEL_14;
  }
  int v14 = v13;
  (*(void (**)(void *, void *))(*a4 + 24))(a4, v13);
LABEL_16:
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::setCallbackQueue((void *)a1, v7, v13);
  if (v14 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void))(*v14 + 40))();
  }

  return a1;
}

void sub_1A1855D18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::setCallbackQueue(void *a1, void *a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  if (a1[3])
  {
    GEOConfigRemoveBlockListener();
    uint64_t v6 = (void *)a1[3];
    a1[3] = 0;
  }
  uint64_t v7 = a3[3];
  if (!v7) {
    goto LABEL_6;
  }
  if ((void *)v7 != a3)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
LABEL_6:
    uint64_t v15 = (uint64_t *)v7;
    goto LABEL_8;
  }
  uint64_t v15 = &v13;
  (*(void (**)(void *, uint64_t *))(*a3 + 24))(a3, &v13);
LABEL_8:
  std::__function::__value_func<void ()(BOOL)>::swap[abi:nn180100](&v13, a1 + 6);
  if (v15 == &v13)
  {
    (*(void (**)(uint64_t *))(v13 + 32))(&v13);
  }
  else if (v15)
  {
    (*(void (**)(void))(*v15 + 40))();
  }
  BOOL v8 = (std::__shared_weak_count *)a1[5];
  uint64_t v13 = a1[4];
  int v14 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v12 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = _GEOConfigAddBlockListenerForKey();
  uint64_t v10 = (void *)a1[3];
  a1[3] = v9;

  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v11 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_1A1856000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v9);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(BOOL)>::swap[abi:nn180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    id v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

uint64_t std::__function::__func<md::RouteElevationSource::RouteElevationSource(NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::RouteElevationSource::RouteElevationSource(NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF51E458;
  a2[1] = v2;
  return result;
}

uint64_t md::RouteElevationSource::RouteElevationSource(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  *(void *)a1 = &unk_1EF513470;
  *(_OWORD *)(a1 + 8) = *MEMORY[0x1E4F642F8];
  if (*(void *)(a1 + 8)) {
    BOOL v4 = *(void *)(a1 + 16) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    *(unsigned char *)(a1 + 24) = GEOConfigGetBOOL();
  }
  *(void *)(a1 + 32) = 0;
  id v5 = operator new(0x20uLL);
  v5[1] = 0;
  v5[2] = 0;
  *id v5 = &unk_1EF52E530;
  *((unsigned char *)v5 + 24) = 1;
  *(void *)(a1 + 40) = v5 + 3;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  uint64_t v6 = [MEMORY[0x1E4F64918] modernManager];
  uint64_t v7 = [v6 activeTileGroup];
  BOOL v8 = [v7 activeTileSetForTileType:92 scale:1];
  *(unsigned char *)(a1 + 88) = v8 != 0;

  if (*(unsigned char *)(a1 + 24) && *(unsigned char *)(a1 + 88))
  {
    uint64_t v9 = +[VKSharedResourcesManager sharedResources];
    *(void *)(a1 + 96) = [v9 undulationModel];
  }
  else
  {
    *(void *)(a1 + 96) = 0;
  }
  v11[0] = &unk_1EF51E458;
  v11[1] = a1;
  double v12 = v11;
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::setCallbackQueue((void *)(a1 + 8), v3, v11);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }

  return a1;
}

void sub_1A185653C(_Unwind_Exception *a1)
{
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(v2);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_34,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_34>,void ()(BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5211E8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_33,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_33>,void ()(BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5211A0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_18,std::allocator<md::MapEngine::MapEngine(float,float,float,BOOL,VKMapViewPurpose,std::shared_ptr<md::TaskContext> const&,VKMapPurpose,std::unique_ptr<md::AnimationManager>,geo::linear_map<md::MapEngineSetting,long long,std::equal_to<md::MapEngineSetting>,std::allocator<std::pair<md::MapEngineSetting,long long>>,std::vector<std::pair<md::MapEngineSetting,long long>>> const&,unsigned long long,GEOApplicationAuditToken *)::$_18>,void ()(BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF579C80;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::PuckLocationAnimationTracingLogic::PuckLocationAnimationTracingLogic(md::MapEngineSignals *,VKPuckAnimator *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::PuckLocationAnimationTracingLogic::PuckLocationAnimationTracingLogic(md::MapEngineSignals *,VKPuckAnimator *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF578840;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::ARWorldIntersectorLogic::ARWorldIntersectorLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_1,std::allocator<md::ARWorldIntersectorLogic::ARWorldIntersectorLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_1>,void ()(BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF575EE8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<md::ARWorldIntersectorLogic::ARWorldIntersectorLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::ARWorldIntersectorLogic::ARWorldIntersectorLogic(NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF575EA0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<md::FlyoverTileDataLogic::FlyoverTileDataLogic(md::World *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::FlyoverTileDataLogic::FlyoverTileDataLogic(md::World *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51E380;
}

void std::__function::__func<md::ElevationLogic::ElevationLogic(md::World *,md::MapEngine *,md::RunLoopController *,md::AnimationRunner const*,BOOL,md::DaVinciTransitionManager const*,NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::ElevationLogic::ElevationLogic(md::World *,md::MapEngine *,md::RunLoopController *,md::AnimationRunner const*,BOOL,md::DaVinciTransitionManager const*,NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51DC78;
}

void std::__function::__func<md::StyleLogic::StyleLogic(float,VKSharedResources *,objc_object  {objcproto14MDRenderTarget}*,md::MapEngine *,md::MapEngineSettings const*,md::World *,std::shared_ptr<md::TaskContext> const&,md::AnimationRunner const*,BOOL,md::World *<md::RunLoopController> const&,VKMapPurpose)::$_0,std::allocator<VKMapPurpose>,void ()(BOOL)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF56D680;
}

void sub_1A18568E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::RegionalResourceLayerDataSource::constructRequests(uint64_t a1, void **a2, void **a3)
{
  uint64_t v46 = a3;
  if (a2 != a3)
  {
    id v3 = a2;
    do
    {
      uint64_t v4 = (*v3)[2];
      unsigned int v5 = *(unsigned __int8 *)(v4 + 8);
      int v7 = *(_DWORD *)v4;
      int v6 = *(_DWORD *)(v4 + 4);
      BOOL v8 = objc_msgSend(MEMORY[0x1E4F64918], "modernManager", v46);
      uint64_t v9 = [v8 activeTileGroup];

      unint64_t v10 = 0;
      int v11 = v6 >> v5;
      int v12 = v7 >> v5;
      if (!v5)
      {
        int v11 = v6;
        int v12 = v7;
      }
      BOOL v13 = (v12 | v11) == 0;
      unint64_t v50 = v9;
      size_t v51 = v3;
      BOOL v47 = v13;
      while (v10 < [v9 attributionsCount])
      {
        int v14 = [v9 attributionAtIndex:v10];
        if (v14)
        {
          for (unint64_t i = 0; i < [v14 regionsCount]; ++i)
          {
            uint64_t v62 = 0;
            uint64_t v63 = 0;
            uint64_t v64 = 0;
            [v14 regionAtIndex:i];
            if (HIDWORD(v64) <= v5 && v63 >= v5)
            {
              unsigned int v17 = v6;
              unsigned int v18 = v7;
              if (v5)
              {
                if (v5 >= (v5 - BYTE4(v64))) {
                  char v19 = v5 - BYTE4(v64);
                }
                else {
                  char v19 = v5;
                }
                unsigned int v17 = v6 >> v19;
                unsigned int v18 = v7 >> v19;
              }
              if (v18 >= HIDWORD(v63) && v18 <= v62 && v17 >= v64 && v17 <= HIDWORD(v62)) {
                goto LABEL_36;
              }
            }
          }
        }
        else if ([0 regionsCount])
        {
          uint64_t v62 = 0;
          uint64_t v63 = 0;
          uint64_t v64 = 0;
          if (v5 || !v13)
          {
            for (unint64_t j = 1; j < [0 regionsCount]; ++j)
            {
              uint64_t v62 = 0;
              uint64_t v63 = 0;
              uint64_t v64 = 0;
              if (!v5 && v13) {
                goto LABEL_36;
              }
            }
          }
          else
          {
LABEL_36:
            float v21 = v3;
            uint64_t v22 = *(void *)(a1 + 752);
            uint64_t v23 = (*v21)[14];
            v52[0] = 0;
            __int16 v53 = 19;
            int v54 = -1073741827;
            unsigned int v55 = v59;
            unint64_t v56 = v59;
            unsigned int v57 = v59;
            uint64_t v58 = 32;
            unint64_t v60 = 0;
            int v65 = v10;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v55, v59, (char *)&v65, v66);
            int v65 = v22;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v55, v56, (char *)&v65, v66);
            float32x2_t v24 = (unsigned __int8 *)v55;
            unint64_t v25 = v56 - (unsigned char *)v55;
            if (v56 == v55)
            {
              unint64_t v26 = 0;
            }
            else
            {
              unint64_t v26 = 0;
              if (v25 <= 1) {
                unint64_t v25 = 1;
              }
              do
              {
                unsigned int v27 = *v24++;
                v26 ^= (v26 << 6) - 0x61C8864680B583EBLL + (v26 >> 2) + v27;
                --v25;
              }
              while (v25);
            }
            unint64_t v60 = v26;
            uint64_t v61 = v23;
            id v3 = v51;
            gdc::LayerDataRequest::request(*v51, (uint64_t)v52, 0);
            uint64_t v9 = v50;
            BOOL v13 = v47;
            if (v55 != v57) {
              free(v55);
            }
          }
        }

        ++v10;
      }
      unint64_t v28 = 0;
      int v30 = v7 >> v5;
      int v29 = v6 >> v5;
      if (!v5)
      {
        int v29 = v6;
        int v30 = v7;
      }
      BOOL v31 = (v30 | v29) == 0;
      BOOL v48 = v31;
      while (v28 < [v9 regionalResourcesCount])
      {
        int v32 = [v9 regionalResourceAtIndex:v28];
        if (v32)
        {
          for (unint64_t k = 0; k < [v32 regionsCount]; ++k)
          {
            uint64_t v62 = 0;
            uint64_t v63 = 0;
            uint64_t v64 = 0;
            [v32 regionAtIndex:k];
            if (HIDWORD(v64) <= v5 && v63 >= v5)
            {
              unsigned int v35 = v6;
              unsigned int v36 = v7;
              if (v5)
              {
                if (v5 >= (v5 - BYTE4(v64))) {
                  char v37 = v5 - BYTE4(v64);
                }
                else {
                  char v37 = v5;
                }
                unsigned int v35 = v6 >> v37;
                unsigned int v36 = v7 >> v37;
              }
              if (v36 >= HIDWORD(v63) && v36 <= v62 && v35 >= v64 && v35 <= HIDWORD(v62)) {
                goto LABEL_76;
              }
            }
          }
        }
        else if ([0 regionsCount])
        {
          uint64_t v62 = 0;
          uint64_t v63 = 0;
          uint64_t v64 = 0;
          if (v5 || !v31)
          {
            for (unint64_t m = 1; m < [0 regionsCount]; ++m)
            {
              uint64_t v62 = 0;
              uint64_t v63 = 0;
              uint64_t v64 = 0;
              if (!v5 && v31) {
                goto LABEL_76;
              }
            }
          }
          else
          {
LABEL_76:
            unint64_t v39 = v3;
            uint64_t v40 = *(void *)(a1 + 752);
            uint64_t v41 = (*v39)[14];
            v52[0] = 0;
            __int16 v53 = 18;
            int v54 = -1073741827;
            unsigned int v55 = v59;
            unint64_t v56 = v59;
            unsigned int v57 = v59;
            uint64_t v58 = 32;
            unint64_t v60 = 0;
            int v65 = v28;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v55, v59, (char *)&v65, v66);
            int v65 = v40;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v55, v56, (char *)&v65, v66);
            uint64_t v42 = (unsigned __int8 *)v55;
            unint64_t v43 = v56 - (unsigned char *)v55;
            if (v56 == v55)
            {
              unint64_t v44 = 0;
            }
            else
            {
              unint64_t v44 = 0;
              if (v43 <= 1) {
                unint64_t v43 = 1;
              }
              do
              {
                unsigned int v45 = *v42++;
                v44 ^= (v44 << 6) - 0x61C8864680B583EBLL + (v44 >> 2) + v45;
                --v43;
              }
              while (v43);
            }
            unint64_t v60 = v44;
            uint64_t v61 = v41;
            id v3 = v51;
            gdc::LayerDataRequest::request(*v51, (uint64_t)v52, 0);
            uint64_t v9 = v50;
            BOOL v31 = v48;
            if (v55 != v57) {
              free(v55);
            }
          }
        }

        ++v28;
      }
      v3 += 2;
    }
    while (v3 != v46);
  }
}

void sub_1A1856E58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<gdc::LayerDataRequest>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 144);
  uint64_t v3 = *(void *)(a1 + 152);
  while (v2 != v3)
  {
    for (unint64_t i = *(unsigned __int8 **)(v2 + 24); i; unint64_t i = *(unsigned __int8 **)i)
    {
      unsigned int v5 = std::__hash_table<std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,std::__unordered_map_hasher<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,true>,std::__unordered_map_equal<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,std::equal_to<gdc::ResourceKey>,gdc::ResourceKeyHash,true>,std::allocator<std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>>>::__emplace_unique_key_args<gdc::ResourceKey,std::piecewise_construct_t const&,std::tuple<gdc::ResourceKey const&>,std::tuple<>>(*(void *)(a1 + 216) + 8, i + 16, (uint64_t)(i + 16));
      --v5[15];
    }
    v2 += 48;
  }
  uint64_t v6 = *(void *)(a1 + 168);
  uint64_t v7 = *(void *)(a1 + 176);
  while (v6 != v7)
  {
    for (unint64_t j = *(unsigned __int8 **)(v6 + 24); j; unint64_t j = *(unsigned __int8 **)j)
    {
      uint64_t v9 = std::__hash_table<std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,std::__unordered_map_hasher<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,true>,std::__unordered_map_equal<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,std::equal_to<gdc::ResourceKey>,gdc::ResourceKeyHash,true>,std::allocator<std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>>>::__emplace_unique_key_args<gdc::ResourceKey,std::piecewise_construct_t const&,std::tuple<gdc::ResourceKey const&>,std::tuple<>>(*(void *)(a1 + 216) + 8, j + 16, (uint64_t)(j + 16));
      --v9[15];
    }
    v6 += 48;
  }
  uint64_t v10 = *(void *)(a1 + 192);
  if (v10)
  {
    std::vector<std::pair<unsigned short,std::unordered_map<gdc::ResourceKey,std::shared_ptr<gdc::Resource>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,std::shared_ptr<gdc::Resource>>>>>>::__base_destruct_at_end[abi:nn180100](a1 + 192, v10);
    operator delete(*(void **)(a1 + 192));
  }
  uint64_t v11 = *(void *)(a1 + 168);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 176);
    BOOL v13 = *(void **)(a1 + 168);
    if (v12 != v11)
    {
      do
      {
        int v14 = *(void **)(v12 - 24);
        if (v14)
        {
          do
          {
            uint64_t v16 = (void *)*v14;
            unsigned int v17 = (void *)v14[3];
            if (v17 != (void *)v14[5]) {
              free(v17);
            }
            operator delete(v14);
            int v14 = v16;
          }
          while (v16);
        }
        uint64_t v15 = *(void **)(v12 - 40);
        *(void *)(v12 - 40) = 0;
        if (v15) {
          operator delete(v15);
        }
        v12 -= 48;
      }
      while (v12 != v11);
      BOOL v13 = *(void **)(a1 + 168);
    }
    *(void *)(a1 + 176) = v11;
    operator delete(v13);
  }
  uint64_t v18 = *(void *)(a1 + 144);
  if (v18)
  {
    uint64_t v19 = *(void *)(a1 + 152);
    float v20 = *(void **)(a1 + 144);
    if (v19 != v18)
    {
      do
      {
        float v21 = *(void **)(v19 - 24);
        if (v21)
        {
          do
          {
            uint64_t v23 = (void *)*v21;
            float32x2_t v24 = (void *)v21[3];
            if (v24 != (void *)v21[5]) {
              free(v24);
            }
            operator delete(v21);
            float v21 = v23;
          }
          while (v23);
        }
        uint64_t v22 = *(void **)(v19 - 40);
        *(void *)(v19 - 40) = 0;
        if (v22) {
          operator delete(v22);
        }
        v19 -= 48;
      }
      while (v19 != v18);
      float v20 = *(void **)(a1 + 144);
    }
    *(void *)(a1 + 152) = v18;
    operator delete(v20);
  }
  if (*(unsigned char *)(a1 + 120)) {
    *(unsigned char *)(a1 + 120) = 0;
  }
  unint64_t v25 = *(void **)(a1 + 40);
  if (v25 != *(void **)(a1 + 56))
  {
    free(v25);
  }
}

uint64_t gdc::ResourceStatusContainer::incrementResourceReference(gdc::ResourceStatusContainer *this, const gdc::ResourceKey *a2)
{
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,std::__unordered_map_hasher<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,true>,std::__unordered_map_equal<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,std::equal_to<gdc::ResourceKey>,gdc::ResourceKeyHash,true>,std::allocator<std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>>>::__emplace_unique_key_args<gdc::ResourceKey,std::piecewise_construct_t const&,std::tuple<gdc::ResourceKey const&>,std::tuple<>>((uint64_t)this + 8, (unsigned __int8 *)a2, (uint64_t)a2);
  ++*(void *)(result + 120);
  uint64_t v6 = (void *)((char *)this + 56);
  unsigned int v5 = (char *)*((void *)this + 7);
  if (!v5)
  {
    uint64_t v9 = (char *)*((void *)a2 + 1);
    uint64_t v10 = *((void *)a2 + 2);
    uint64_t v11 = (char *)this + 56;
    goto LABEL_20;
  }
  unsigned int v7 = *((unsigned __int16 *)a2 + 1);
  unsigned int v8 = *(unsigned __int8 *)a2;
  uint64_t v9 = (char *)*((void *)a2 + 1);
  uint64_t v10 = *((void *)a2 + 2);
  do
  {
    while (1)
    {
      uint64_t v11 = v5;
      unsigned int v12 = *((unsigned __int16 *)v5 + 17);
      if (v7 == v12) {
        break;
      }
      if (v7 < v12) {
        goto LABEL_3;
      }
      if (v12 >= v7) {
        return result;
      }
LABEL_16:
      uint64_t v6 = v11 + 8;
      unsigned int v5 = (char *)*((void *)v11 + 1);
      if (!v5) {
        goto LABEL_20;
      }
    }
    unsigned int v13 = v11[32];
    if (v8 == v13)
    {
      uint64_t result = gdc::GenericKey::operator<((uint64_t)v9, v10, *((void *)v11 + 5), *((void *)v11 + 6));
      if (!result) {
        goto LABEL_12;
      }
    }
    else if (v8 >= v13)
    {
LABEL_12:
      unsigned int v14 = v11[32];
      if (v14 == v8)
      {
        uint64_t result = gdc::GenericKey::operator<(*((void *)v11 + 5), *((void *)v11 + 6), (uint64_t)v9, v10);
        if (!result) {
          return result;
        }
      }
      else if (v14 >= v8)
      {
        return result;
      }
      goto LABEL_16;
    }
LABEL_3:
    unsigned int v5 = *(char **)v11;
  }
  while (*(void *)v11);
  uint64_t v6 = v11;
LABEL_20:
  uint64_t v15 = operator new(0x80uLL);
  uint64_t v16 = (char *)(v15 + 9);
  void v15[4] = *(void *)a2;
  v15[5] = v15 + 9;
  v15[6] = v15 + 9;
  v15[7] = v15 + 9;
  v15[8] = 32;
  unint64_t v17 = v10 - (void)v9;
  if ((unint64_t)(v10 - (void)v9) < 0x21) {
    goto LABEL_41;
  }
  if (v17 <= 0x40) {
    size_t v18 = 64;
  }
  else {
    size_t v18 = v10 - (void)v9;
  }
  uint64_t v16 = (char *)malloc_type_malloc(v18, 0x100004077774924uLL);
  uint64_t v19 = (char *)v15[5];
  float v20 = (char *)v15[6];
  if (v19 == v20) {
    goto LABEL_40;
  }
  unint64_t v21 = v20 - v19;
  if ((unint64_t)(v20 - v19) < 8)
  {
    uint64_t v22 = v16;
    goto LABEL_39;
  }
  uint64_t v22 = v16;
  if ((unint64_t)(v16 - v19) < 0x20) {
    goto LABEL_39;
  }
  if (v21 >= 0x20)
  {
    unint64_t v23 = v21 & 0xFFFFFFFFFFFFFFE0;
    float32x2_t v24 = (long long *)(v19 + 16);
    unint64_t v25 = v16 + 16;
    unint64_t v26 = v21 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v27 = *v24;
      *(v25 - 1) = *(v24 - 1);
      *unint64_t v25 = v27;
      v24 += 2;
      v25 += 2;
      v26 -= 32;
    }
    while (v26);
    if (v21 == v23) {
      goto LABEL_40;
    }
    if ((v21 & 0x18) != 0) {
      goto LABEL_34;
    }
    v19 += v23;
    uint64_t v22 = &v16[v23];
    do
    {
LABEL_39:
      char v33 = *v19++;
      *v22++ = v33;
    }
    while (v19 != v20);
    goto LABEL_40;
  }
  unint64_t v23 = 0;
LABEL_34:
  unint64_t v28 = v21 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = &v16[v21 & 0xFFFFFFFFFFFFFFF8];
  unint64_t v29 = v23 - (v21 & 0xFFFFFFFFFFFFFFF8);
  int v30 = (uint64_t *)&v19[v23];
  BOOL v31 = &v16[v23];
  do
  {
    uint64_t v32 = *v30++;
    *(void *)BOOL v31 = v32;
    v31 += 8;
    v29 += 8;
  }
  while (v29);
  if (v21 != v28)
  {
    v19 += v28;
    goto LABEL_39;
  }
LABEL_40:
  v15[5] = v16;
  v15[6] = v16;
  v15[8] = v18;
LABEL_41:
  if (v9 == (char *)v10) {
    goto LABEL_59;
  }
  if (v17 < 8)
  {
    unsigned int v35 = v16;
    goto LABEL_57;
  }
  if ((unint64_t)(v16 - v9) < 0x20)
  {
    unsigned int v35 = v16;
    goto LABEL_57;
  }
  if (v17 >= 0x20)
  {
    unint64_t v34 = v17 & 0xFFFFFFFFFFFFFFE0;
    unsigned int v36 = (long long *)(v9 + 16);
    char v37 = v16 + 16;
    unint64_t v38 = v17 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v39 = *v36;
      *(v37 - 1) = *(v36 - 1);
      _OWORD *v37 = v39;
      v36 += 2;
      v37 += 2;
      v38 -= 32;
    }
    while (v38);
    if (v17 == v34) {
      goto LABEL_58;
    }
    if ((v17 & 0x18) != 0) {
      goto LABEL_52;
    }
    v9 += v34;
    unsigned int v35 = &v16[v34];
    do
    {
LABEL_57:
      char v45 = *v9++;
      *v35++ = v45;
    }
    while (v9 != (char *)v10);
    goto LABEL_58;
  }
  unint64_t v34 = 0;
LABEL_52:
  unint64_t v40 = v17 & 0xFFFFFFFFFFFFFFF8;
  unsigned int v35 = &v16[v17 & 0xFFFFFFFFFFFFFFF8];
  unint64_t v41 = v34 - (v17 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v42 = (uint64_t *)&v9[v34];
  unint64_t v43 = &v16[v34];
  do
  {
    uint64_t v44 = *v42++;
    *(void *)unint64_t v43 = v44;
    v43 += 8;
    v41 += 8;
  }
  while (v41);
  if (v17 != v40)
  {
    v9 += v40;
    goto LABEL_57;
  }
LABEL_58:
  uint64_t v16 = (char *)v15[6];
LABEL_59:
  v15[6] = &v16[v17];
  v15[13] = *((void *)a2 + 9);
  *((_OWORD *)v15 + 7) = *((_OWORD *)a2 + 5);
  *uint64_t v15 = 0;
  v15[1] = 0;
  unsigned char v15[2] = v11;
  void *v6 = v15;
  uint64_t v46 = **((void **)this + 6);
  if (v46)
  {
    *((void *)this + 6) = v46;
    uint64_t v15 = (void *)*v6;
  }
  uint64_t result = (uint64_t)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 7), v15);
  ++*((void *)this + 8);
  return result;
}

void sub_1A1857400(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,std::__unordered_map_hasher<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,true>,std::__unordered_map_equal<gdc::ResourceKey,std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>,std::equal_to<gdc::ResourceKey>,gdc::ResourceKeyHash,true>,std::allocator<std::__hash_value_type<gdc::ResourceKey,gdc::ResourceStatusItem>>>::__emplace_unique_key_args<gdc::ResourceKey,std::piecewise_construct_t const&,std::tuple<gdc::ResourceKey const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *((unsigned __int16 *)a2 + 1);
  unint64_t v8 = (v7
      + ((v6 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v6 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v6 - 0x61C8864680B583EBLL);
  uint64_t v9 = *((void *)a2 + 9);
  unint64_t v10 = (v9 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      uint64_t v3 = (v9 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
      if (v10 >= v11) {
        uint64_t v3 = v10 % v11;
      }
    }
    else
    {
      uint64_t v3 = v10 & (v11 - 1);
    }
    unsigned int v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      unsigned int v14 = *v13;
      if (*v13)
      {
        uint64_t v15 = (void *)*((void *)a2 + 1);
        size_t v16 = *((void *)a2 + 2) - (void)v15;
        if (v12.u32[0] < 2uLL)
        {
          __s2 = (void *)*((void *)a2 + 1);
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              if (*((unsigned __int8 *)v14 + 16) == v6
                && *((unsigned __int16 *)v14 + 9) == v7
                && v14[11] == v9)
              {
                uint64_t v22 = (const void *)v14[3];
                if (v14[4] - (void)v22 == v16)
                {
                  size_t v83 = v16;
                  int v23 = memcmp(v22, __s2, v16);
                  size_t v16 = v83;
                  if (!v23) {
                    return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_31;
            }
            unsigned int v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            if (*((unsigned __int8 *)v14 + 16) == v6
              && *((unsigned __int16 *)v14 + 9) == v7
              && v14[11] == v9)
            {
              size_t v18 = (const void *)v14[3];
              if (v14[4] - (void)v18 == v16)
              {
                __s2a = v15;
                size_t v19 = v16;
                int v20 = memcmp(v18, v15, v16);
                uint64_t v15 = __s2a;
                size_t v16 = v19;
                if (!v20) {
                  return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          unsigned int v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  float32x2_t v24 = (void *)(a1 + 16);
  unsigned int v14 = operator new(0x80uLL);
  *unsigned int v14 = 0;
  v14[1] = v10;
  unint64_t v25 = (char *)(v14 + 7);
  unint64_t v26 = *(char **)(a3 + 8);
  v14[2] = *(void *)a3;
  void v14[3] = v14 + 7;
  v14[5] = v14 + 7;
  v14[6] = 32;
  long long v27 = *(char **)(a3 + 16);
  unint64_t v28 = v27 - v26;
  char v14[4] = v14 + 7;
  if ((unint64_t)(v27 - v26) >= 0x21)
  {
    if (v28 <= 0x40) {
      size_t v29 = 64;
    }
    else {
      size_t v29 = v27 - v26;
    }
    unint64_t v25 = (char *)malloc_type_malloc(v29, 0x100004077774924uLL);
    int v30 = (char *)v14[3];
    BOOL v31 = (char *)v14[4];
    if (v30 == v31) {
      goto LABEL_51;
    }
    unint64_t v32 = v31 - v30;
    if ((unint64_t)(v31 - v30) < 8)
    {
      char v33 = v25;
      goto LABEL_50;
    }
    char v33 = v25;
    if ((unint64_t)(v25 - v30) < 0x20) {
      goto LABEL_50;
    }
    if (v32 >= 0x20)
    {
      unint64_t v34 = v32 & 0xFFFFFFFFFFFFFFE0;
      unsigned int v35 = (long long *)(v30 + 16);
      unsigned int v36 = v25 + 16;
      unint64_t v37 = v32 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v38 = *v35;
        *(v36 - 1) = *(v35 - 1);
        *unsigned int v36 = v38;
        v35 += 2;
        v36 += 2;
        v37 -= 32;
      }
      while (v37);
      if (v32 == v34) {
        goto LABEL_51;
      }
      if ((v32 & 0x18) == 0)
      {
        v30 += v34;
        char v33 = &v25[v34];
        goto LABEL_50;
      }
    }
    else
    {
      unint64_t v34 = 0;
    }
    unint64_t v39 = v32 & 0xFFFFFFFFFFFFFFF8;
    char v33 = &v25[v32 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v40 = v34 - (v32 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v41 = (uint64_t *)&v30[v34];
    uint64_t v42 = &v25[v34];
    do
    {
      uint64_t v43 = *v41++;
      *(void *)uint64_t v42 = v43;
      v42 += 8;
      v40 += 8;
    }
    while (v40);
    if (v32 == v39) {
      goto LABEL_51;
    }
    v30 += v39;
    do
    {
LABEL_50:
      char v44 = *v30++;
      *v33++ = v44;
    }
    while (v30 != v31);
LABEL_51:
    void v14[3] = v25;
    char v14[4] = v25;
    v14[6] = v29;
    float32x2_t v24 = (void *)(a1 + 16);
  }
  if (v26 != v27)
  {
    if (v28 < 8)
    {
      uint64_t v46 = v25;
      goto LABEL_68;
    }
    if ((unint64_t)(v25 - v26) < 0x20)
    {
      uint64_t v46 = v25;
      goto LABEL_68;
    }
    if (v28 >= 0x20)
    {
      unint64_t v45 = v28 & 0xFFFFFFFFFFFFFFE0;
      BOOL v47 = (long long *)(v26 + 16);
      BOOL v48 = v25 + 16;
      unint64_t v49 = v28 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v50 = *v47;
        *(v48 - 1) = *(v47 - 1);
        _OWORD *v48 = v50;
        v47 += 2;
        v48 += 2;
        v49 -= 32;
      }
      while (v49);
      if (v28 == v45) {
        goto LABEL_69;
      }
      if ((v28 & 0x18) == 0)
      {
        v26 += v45;
        uint64_t v46 = &v25[v45];
        goto LABEL_68;
      }
    }
    else
    {
      unint64_t v45 = 0;
    }
    unint64_t v51 = v28 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v46 = &v25[v28 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v52 = v45 - (v28 & 0xFFFFFFFFFFFFFFF8);
    __int16 v53 = (uint64_t *)&v26[v45];
    int v54 = &v25[v45];
    do
    {
      uint64_t v55 = *v53++;
      *(void *)int v54 = v55;
      v54 += 8;
      v52 += 8;
    }
    while (v52);
    if (v28 == v51) {
      goto LABEL_69;
    }
    v26 += v51;
    do
    {
LABEL_68:
      char v56 = *v26++;
      *v46++ = v56;
    }
    while (v26 != v27);
LABEL_69:
    unint64_t v25 = (char *)v14[4];
  }
  char v14[4] = &v25[v28];
  v14[11] = *(void *)(a3 + 72);
  *((_OWORD *)v14 + 6) = *(_OWORD *)(a3 + 80);
  v14[14] = 0;
  v14[15] = 0;
  float v57 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v58 = *(float *)(a1 + 32);
  if (v11 && (float)(v58 * (float)v11) >= v57) {
    goto LABEL_120;
  }
  BOOL v59 = 1;
  if (v11 >= 3) {
    BOOL v59 = (v11 & (v11 - 1)) != 0;
  }
  unint64_t v60 = v59 | (2 * v11);
  unint64_t v61 = vcvtps_u32_f32(v57 / v58);
  if (v60 <= v61) {
    size_t prime = v61;
  }
  else {
    size_t prime = v60;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
  }
  unint64_t v11 = *(void *)(a1 + 8);
  if (prime > v11)
  {
LABEL_82:
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v63 = operator new(8 * prime);
    uint64_t v64 = *(void **)a1;
    *(void *)a1 = v63;
    if (v64) {
      operator delete(v64);
    }
    uint64_t v65 = 0;
    *(void *)(a1 + 8) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v65++) = 0;
    while (prime != v65);
    char v66 = (void *)*v24;
    if (!*v24) {
      goto LABEL_106;
    }
    size_t v67 = v66[1];
    size_t v68 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v69 = v67 & v68;
      *(void *)(*(void *)a1 + 8 * v69) = v24;
      for (unint64_t i = (void *)*v66; *v66; unint64_t i = (void *)*v66)
      {
        size_t v71 = i[1] & v68;
        if (v71 == v69)
        {
          char v66 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v71))
        {
          void *v66 = *i;
          uint64_t v72 = 8 * v71;
          void *i = **(void **)(*(void *)a1 + v72);
          **(void **)(*(void *)a1 + v72) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v71) = v66;
          char v66 = i;
          size_t v69 = v71;
        }
      }
LABEL_106:
      unint64_t v11 = prime;
      goto LABEL_107;
    }
    if (v67 >= prime) {
      v67 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v67) = v24;
    char v76 = (void *)*v66;
    if (!*v66) {
      goto LABEL_106;
    }
    while (1)
    {
      size_t v78 = v76[1];
      if (v78 >= prime) {
        v78 %= prime;
      }
      if (v78 != v67)
      {
        if (!*(void *)(*(void *)a1 + 8 * v78))
        {
          *(void *)(*(void *)a1 + 8 * v78) = v66;
          goto LABEL_111;
        }
        void *v66 = *v76;
        uint64_t v77 = 8 * v78;
        *char v76 = **(void **)(*(void *)a1 + v77);
        **(void **)(*(void *)a1 + v77) = v76;
        char v76 = v66;
      }
      size_t v78 = v67;
LABEL_111:
      char v66 = v76;
      char v76 = (void *)*v76;
      size_t v67 = v78;
      if (!v76) {
        goto LABEL_106;
      }
    }
  }
  if (prime >= v11) {
    goto LABEL_107;
  }
  unint64_t v73 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
  if (v11 < 3 || (uint8x8_t v74 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v74.i16[0] = vaddlv_u8(v74), v74.u32[0] > 1uLL))
  {
    unint64_t v73 = std::__next_prime(v73);
  }
  else
  {
    uint64_t v75 = 1 << -(char)__clz(v73 - 1);
    if (v73 >= 2) {
      unint64_t v73 = v75;
    }
  }
  if (prime <= v73) {
    size_t prime = v73;
  }
  if (prime < v11)
  {
    if (!prime)
    {
      unint64_t v82 = *(void **)a1;
      *(void *)a1 = 0;
      if (v82) {
        operator delete(v82);
      }
      unint64_t v11 = 0;
      *(void *)(a1 + 8) = 0;
      goto LABEL_107;
    }
    goto LABEL_82;
  }
  unint64_t v11 = *(void *)(a1 + 8);
LABEL_107:
  if ((v11 & (v11 - 1)) != 0)
  {
    if (v10 >= v11) {
      uint64_t v3 = v10 % v11;
    }
    else {
      uint64_t v3 = v10;
    }
  }
  else
  {
    uint64_t v3 = (v11 - 1) & v10;
  }
LABEL_120:
  unint64_t v79 = *(void **)(*(void *)a1 + 8 * v3);
  if (v79)
  {
    *unsigned int v14 = *v79;
    void *v79 = v14;
  }
  else
  {
    *unsigned int v14 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v14;
    *(void *)(*(void *)a1 + 8 * v3) = v24;
    if (*v14)
    {
      unint64_t v80 = *(void *)(*v14 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v80 >= v11) {
          v80 %= v11;
        }
      }
      else
      {
        v80 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v80) = v14;
    }
  }
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1A1857B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<gdc::ResourceKey,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<gdc::ResourceKey,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::IdentifiedGEOResourceFetcher::configurationDidChange(md::IdentifiedGEOResourceFetcher *this)
{
  uint64_t v2 = [MEMORY[0x1E4F64918] modernManager];
  id v17 = [v2 activeTileGroup];

  if (v17)
  {
    uint64_t v3 = [v17 activeTileSetForStyle:*((unsigned int *)this + 127)];
    if (v3 != *((void **)this + 65))
    {
      uint64_t v4 = *((void *)this + 2);
      for (uint64_t i = *((void *)this + 3); v4 != i; v4 += 24)
      {
        uint64_t v6 = *(gdc::ResourceStore **)(v4 + 8);
        uint64_t v7 = *(std::__shared_weak_count **)(v4 + 16);
        if (v7)
        {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          gdc::ResourceStore::clearAllResources(v6);
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        else
        {
          gdc::ResourceStore::clearAllResources(v6);
        }
      }
      id v8 = v3;
      uint64_t v9 = v8;
      if (v8) {
        id v10 = v8;
      }
      unint64_t v11 = (void *)*((void *)this + 65);
      *((void *)this + 65) = v9;
    }
  }
  else
  {
    uint8x8_t v12 = (void *)*((void *)this + 65);
    if (v12)
    {
      *((void *)this + 65) = 0;
    }
    uint64_t v13 = *((void *)this + 2);
    for (uint64_t j = *((void *)this + 3); v13 != j; v13 += 24)
    {
      uint64_t v15 = *(gdc::ResourceStore **)(v13 + 8);
      size_t v16 = *(std::__shared_weak_count **)(v13 + 16);
      if (v16)
      {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        gdc::ResourceStore::clearAllResources(v15);
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      else
      {
        gdc::ResourceStore::clearAllResources(v15);
      }
    }
  }
}

void sub_1A1857D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_56c51_ZTSNSt3__110shared_ptrIN3ggl17RenderTransactionEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  *(void *)(result + 56) = *(void *)(a2 + 56);
  *(void *)(result + 64) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void md::FlyoverRegionManager::Internal::updateTriggers(md::FlyoverRegionManager::Internal *this)
{
  uint64_t v2 = [MEMORY[0x1E4F64918] modernManager];
  if (v2)
  {
    uint64_t v3 = [MEMORY[0x1E4F64908] sharedManager];
    uint64_t v4 = [v3 dataForResourceWithName:@"altitude.xml" fallbackBundle:0];

    if (v4)
    {
      char v176 = 0;
      int v177 = 0;
      uint64_t v175 = &v176;
      id v5 = v4;
      uint64_t v6 = xmlParseMemory((const char *)[v5 bytes], objc_msgSend(v5, "length"));
      uint64_t v7 = (xmlDoc *)v6;
      if (v6)
      {
        xmlNodePtr RootElement = xmlDocGetRootElement(v6);
        if (RootElement && (uint64_t v9 = RootElement->children) != 0)
        {
          while (xmlStrncmp(v9->name, (const xmlChar *)"triggers", 8))
          {
            uint64_t v9 = v9->next;
            if (!v9) {
              goto LABEL_8;
            }
          }
          char v131 = v7;
          unsigned __int8 v132 = v2;
          children = v9->children;
          if (children)
          {
            unint64_t v135 = (void *)*MEMORY[0x1E4FBA408];
            unint64_t v133 = *(void *)(MEMORY[0x1E4FBA408] + 72);
            long long v134 = *(void **)(MEMORY[0x1E4FBA408] + 64);
            uint64_t v22 = (void (**)(void))MEMORY[0x1E4FBA9D0];
            while (1)
            {
              memset(&v168, 0, sizeof(v168));
              v171[1] = 0;
              unsigned __int8 v172 = 0;
              v171[0] = 0;
              *(_DWORD *)int32x2_t v173 = 0;
              v174[0] = 0;
              v174[1] = 0;
              Prop = xmlGetProp(children, (const xmlChar *)"name");
              if (Prop) {
                break;
              }
LABEL_209:
              if (v174[1]) {
                std::__shared_weak_count::__release_weak(v174[1]);
              }
              if (v171[0])
              {
                v171[1] = v171[0];
                operator delete(v171[0]);
              }
              if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v168.__r_.__value_.__l.__data_);
              }
              children = children->next;
              if (!children) {
                goto LABEL_224;
              }
            }
            char v141 = Prop;
            std::string::__assign_external(&v168, (const std::string::value_type *)Prop);
            float32x2_t v24 = xmlGetProp(children, (const xmlChar *)"altitude");
            unint64_t v25 = xmlGetProp(children, (const xmlChar *)"latitude");
            long long v142 = v25;
            unint64_t v26 = xmlGetProp(children, (const xmlChar *)"longitude");
            unint64_t v140 = v26;
            long long v27 = xmlGetProp(children, (const xmlChar *)"radius");
            unint64_t v28 = (const char *)v27;
            if (!v24 || !v25 || !v26 || !v27)
            {
LABEL_200:
              if (v28) {
                ((void (*)(const char *))*v22)(v28);
              }
              if (v26) {
                ((void (*)(xmlChar *))*v22)(v26);
              }
              if (v25) {
                ((void (*)(xmlChar *))*v22)(v25);
              }
              if (v24) {
                ((void (*)(xmlChar *))*v22)(v24);
              }
              ((void (*)(xmlChar *))*v22)(v141);
              goto LABEL_209;
            }
            double v29 = atof((const char *)v25);
            double v30 = atof((const char *)v26);
            double v31 = atof((const char *)v24);
            __double2 v32 = __sincos_stret(v29);
            double v33 = 6378137.0 / sqrt(v32.__sinval * v32.__sinval * -0.00669437999 + 1.0);
            double v34 = (v33 + v31) * v32.__cosval;
            __double2 v35 = __sincos_stret(v30);
            double v36 = atof(v28);
            *(double *)&long long v37 = v34 * v35.__cosval;
            *((double *)&v37 + 1) = v34 * v35.__sinval;
            *(double *)&long long v38 = (v31 + v33 * 0.99330562) * v32.__sinval;
            *((double *)&v38 + 1) = v36;
            *(_OWORD *)&v173[8] = v37;
            *(_OWORD *)&v173[24] = v38;
            unint64_t v136 = v28;
            unint64_t v39 = xmlGetProp(children, (const xmlChar *)"meta_levels");
            int v138 = v39;
            unint64_t v143 = xmlGetProp(children, (const xmlChar *)"meta_region");
            unint64_t v40 = xmlGetProp(children, (const xmlChar *)"meta_zmax");
            if (!v39 || !v143 || !v40)
            {
LABEL_194:
              if (v40) {
                (*v22)();
              }
              if (v143) {
                (*v22)();
              }
              if (v39) {
                ((void (*)(xmlChar *))*v22)(v39);
              }
              goto LABEL_200;
            }
            __s = (const char *)v40;
            size_t v41 = strlen((const char *)v39);
            if (v41 > 0x7FFFFFFFFFFFFFF7) {
              abort();
            }
            size_t v42 = v41;
            if (v41 >= 0x17)
            {
              uint64_t v44 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v41 | 7) != 0x17) {
                uint64_t v44 = v41 | 7;
              }
              uint64_t v45 = v44 + 1;
              p_dst = (long long *)operator new(v44 + 1);
              unint64_t v159 = v45 | 0x8000000000000000;
              *(void *)&long long __dst = p_dst;
              *((void *)&__dst + 1) = v42;
            }
            else
            {
              HIBYTE(v159) = v41;
              p_dst = &__dst;
              if (!v41)
              {
LABEL_41:
                *((unsigned char *)p_dst + v42) = 0;
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v165, &__dst);
                if (SHIBYTE(v159) < 0) {
                  operator delete((void *)__dst);
                }
                size_t v46 = strlen(__s);
                if (v46 > 0x7FFFFFFFFFFFFFF7) {
                  abort();
                }
                BOOL v47 = (void *)v46;
                if (v46 >= 0x17)
                {
                  uint64_t v50 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v46 | 7) != 0x17) {
                    uint64_t v50 = v46 | 7;
                  }
                  uint64_t v51 = v50 + 1;
                  BOOL v48 = operator new(v50 + 1);
                  __p[1] = v47;
                  unint64_t v153 = v51 | 0x8000000000000000;
                  __p[0] = v48;
                  unint64_t v49 = __s;
                }
                else
                {
                  HIBYTE(v153) = v46;
                  BOOL v48 = __p;
                  unint64_t v49 = __s;
                  if (!v46)
                  {
LABEL_51:
                    *((unsigned char *)v47 + (void)v48) = 0;
                    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)&__dst, (long long *)__p);
                    unint64_t v52 = (const char *)v143;
                    if (SHIBYTE(v153) < 0) {
                      operator delete(__p[0]);
                    }
                    if (!*(_DWORD *)((char *)&v165[4] + *(void *)(v165[0] - 24)))
                    {
                      uint64_t v137 = v24;
                      while (!*(_DWORD *)&v161[*(void *)(__dst - 24)])
                      {
                        LODWORD(__p[0]) = 0;
                        LODWORD(v150) = 0;
                        MEMORY[0x1A6238CB0](v165, __p);
                        MEMORY[0x1A6238CB0](&__dst, &v150);
                        __int16 v74 = LOBYTE(__p[0]) | (unsigned __int16)((_WORD)v150 << 8);
                        uint64_t v75 = (char *)v171[1];
                        if (v171[1] < v172)
                        {
                          *(_WORD *)v171[1] = v74;
                          unint64_t v73 = v75 + 2;
                          unint64_t v25 = v142;
                        }
                        else
                        {
                          char v76 = (char *)v171[0];
                          int64_t v77 = (char *)v171[1] - (char *)v171[0];
                          if ((char *)v171[1] - (char *)v171[0] <= -3) {
                            std::__throw_bad_array_new_length[abi:nn180100]();
                          }
                          uint64_t v78 = v77 >> 1;
                          if (v172 - (char *)v171[0] <= (unint64_t)((v77 >> 1) + 1)) {
                            uint64_t v79 = v78 + 1;
                          }
                          else {
                            uint64_t v79 = v172 - (char *)v171[0];
                          }
                          if ((unint64_t)(v172 - (char *)v171[0]) >= 0x7FFFFFFFFFFFFFFELL) {
                            uint64_t v80 = 0x7FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            uint64_t v80 = v79;
                          }
                          if (v80)
                          {
                            if (v80 < 0) {
                              goto LABEL_229;
                            }
                            size_t v81 = operator new(2 * v80);
                          }
                          else
                          {
                            size_t v81 = 0;
                          }
                          unint64_t v82 = &v81[2 * v78];
                          *unint64_t v82 = v74;
                          unint64_t v73 = v82 + 1;
                          if (v75 == v76)
                          {
                            char v76 = v75;
                            unint64_t v25 = v142;
                          }
                          else
                          {
                            unint64_t v83 = v75 - 2 - v76;
                            unint64_t v25 = v142;
                            if (v83 < 0x1E) {
                              goto LABEL_235;
                            }
                            if (v75 - v81 - (v77 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
                              goto LABEL_235;
                            }
                            uint64_t v84 = (v83 >> 1) + 1;
                            unint64_t v85 = &v81[2 * v78 - 16];
                            unint64_t v86 = v75 - 16;
                            unint64_t v87 = v84 & 0xFFFFFFFFFFFFFFF0;
                            do
                            {
                              long long v88 = *(_OWORD *)v86;
                              *(v85 - 1) = *((_OWORD *)v86 - 1);
                              *unint64_t v85 = v88;
                              v85 -= 2;
                              v86 -= 32;
                              v87 -= 16;
                            }
                            while (v87);
                            v82 -= v84 & 0xFFFFFFFFFFFFFFF0;
                            v75 -= 2 * (v84 & 0xFFFFFFFFFFFFFFF0);
                            if (v84 != (v84 & 0xFFFFFFFFFFFFFFF0))
                            {
LABEL_235:
                              do
                              {
                                __int16 v89 = *((_WORD *)v75 - 1);
                                v75 -= 2;
                                *--unint64_t v82 = v89;
                              }
                              while (v75 != v76);
                              char v76 = (char *)v171[0];
                            }
                          }
                          v171[0] = v82;
                          v171[1] = v73;
                          unsigned __int8 v172 = &v81[2 * v80];
                          if (v76) {
                            operator delete(v76);
                          }
                          float32x2_t v24 = v137;
                          unint64_t v52 = (const char *)v143;
                        }
                        v171[1] = v73;
                        if (*(_DWORD *)((char *)&v165[4] + *(void *)(v165[0] - 24))) {
                          break;
                        }
                      }
                    }
                    size_t v53 = strlen(v52);
                    if (v53 > 0x7FFFFFFFFFFFFFF7) {
                      abort();
                    }
                    size_t v54 = v53;
                    if (v53 >= 0x17)
                    {
                      uint64_t v56 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v53 | 7) != 0x17) {
                        uint64_t v56 = v53 | 7;
                      }
                      uint64_t v57 = v56 + 1;
                      uint64_t v55 = operator new(v56 + 1);
                      *((void *)&v150 + 1) = v54;
                      unint64_t v151 = v57 | 0x8000000000000000;
                      *(void *)&long long v150 = v55;
                    }
                    else
                    {
                      HIBYTE(v151) = v53;
                      uint64_t v55 = &v150;
                      if (!v53) {
                        goto LABEL_62;
                      }
                    }
                    memmove(v55, v143, v54);
LABEL_62:
                    *((unsigned char *)v55 + v54) = 0;
                    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)__p, &v150);
                    if (SHIBYTE(v151) < 0) {
                      operator delete((void *)v150);
                    }
                    LODWORD(v150) = 0;
                    uint64_t v148 = 0;
                    uint64_t v149 = 0;
                    uint64_t v58 = MEMORY[0x1A6238CB0](__p, &v150);
                    uint64_t v59 = MEMORY[0x1A6238CB0](v58, (char *)&v149 + 4);
                    uint64_t v60 = MEMORY[0x1A6238CB0](v59, &v149);
                    uint64_t v61 = MEMORY[0x1A6238CB0](v60, (char *)&v148 + 4);
                    uint64_t v62 = (void *)MEMORY[0x1A6238CB0](v61, &v148);
                    if ((*((unsigned char *)v62 + *(void *)(*v62 - 24) + 32) & 5) != 0
                      || (LOBYTE(v169) = v150,
                          *(void *)((char *)&v169 + 4) = __PAIR64__(v149, HIDWORD(v149)),
                          HIDWORD(v169) = HIDWORD(v148),
                          int v170 = v148,
                          (uint64_t v63 = xmlGetProp(children, (const xmlChar *)"region")) == 0))
                    {
LABEL_187:
                      __p[0] = v135;
                      *(void **)((char *)__p + *((void *)v135 - 3)) = v134;
                      unint64_t v153 = v133;
                      uint64_t v154 = MEMORY[0x1E4FBA470] + 16;
                      if (v156 < 0) {
                        operator delete(v155);
                      }
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x1A62391A0](&v157);
                      *(void *)&long long __dst = v135;
                      *(void *)((char *)&__dst + *((void *)v135 - 3)) = v134;
                      unint64_t v159 = v133;
                      uint64_t v160 = MEMORY[0x1E4FBA470] + 16;
                      if (v163 < 0) {
                        operator delete(v162);
                      }
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x1A62391A0](&v164);
                      v165[0] = v135;
                      *(void *)((char *)v165 + *((void *)v135 - 3)) = v134;
                      v165[2] = v133;
                      v165[3] = MEMORY[0x1E4FBA470] + 16;
                      if (v166 < 0) {
                        operator delete((void *)v165[11]);
                      }
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x1A62391A0](&v167);
                      uint64_t v22 = (void (**)(void))MEMORY[0x1E4FBA9D0];
                      unint64_t v26 = v140;
                      unint64_t v28 = v136;
                      unint64_t v39 = v138;
                      unint64_t v40 = (xmlChar *)__s;
                      goto LABEL_194;
                    }
                    char v130 = v63;
                    int v64 = atoi((const char *)v63);
                    *(_DWORD *)int32x2_t v173 = v64;
                    char v65 = v150;
                    char v66 = v176;
                    unint64_t v67 = (unint64_t)&v176;
                    size_t v68 = &v176;
                    if (v176)
                    {
                      unsigned int v69 = v64;
                      while (1)
                      {
                        while (1)
                        {
                          unint64_t v67 = (unint64_t)v66;
                          unsigned int v70 = *((unsigned __int8 *)v66 + 32);
                          if (v70 <= v150) {
                            break;
                          }
                          char v66 = *(uint64_t **)v67;
                          size_t v68 = (uint64_t **)v67;
                          if (!*(void *)v67) {
                            goto LABEL_73;
                          }
                        }
                        if (v70 >= v150) {
                          break;
                        }
                        char v66 = *(uint64_t **)(v67 + 8);
                        if (!v66)
                        {
                          size_t v68 = (uint64_t **)(v67 + 8);
                          goto LABEL_73;
                        }
                      }
                      size_t v71 = (char *)v67;
                    }
                    else
                    {
LABEL_73:
                      size_t v71 = (char *)operator new(0x50uLL);
                      v71[32] = v65;
                      *(_OWORD *)(v71 + 40) = 0u;
                      *(_OWORD *)(v71 + 56) = 0u;
                      *((_DWORD *)v71 + 18) = 1065353216;
                      *(void *)size_t v71 = 0;
                      *((void *)v71 + 1) = 0;
                      *((void *)v71 + 2) = v67;
                      unsigned char *v68 = (uint64_t *)v71;
                      uint64_t v72 = (uint64_t *)v71;
                      if (*v175)
                      {
                        uint64_t v175 = (uint64_t **)*v175;
                        uint64_t v72 = *v68;
                      }
                      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v176, v72);
                      int v177 = (uint64_t **)((char *)v177 + 1);
                      unsigned int v69 = *(_DWORD *)v173;
                    }
                    unint64_t v90 = v69;
                    unint64_t v91 = *((void *)v71 + 6);
                    if (v91)
                    {
                      uint8x8_t v92 = (uint8x8_t)vcnt_s8((int8x8_t)v91);
                      v92.i16[0] = vaddlv_u8(v92);
                      if (v92.u32[0] > 1uLL)
                      {
                        unint64_t v67 = v69;
                        if (v91 <= v69) {
                          unint64_t v67 = v69 % v91;
                        }
                      }
                      else
                      {
                        unint64_t v67 = (v91 - 1) & v69;
                      }
                      unint64_t v93 = *(uint64_t ***)(*((void *)v71 + 5) + 8 * v67);
                      if (v93)
                      {
                        uint64_t v94 = *v93;
                        if (v94)
                        {
                          if (v92.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              uint64_t v96 = v94[1];
                              if (v96 == v69)
                              {
                                if (*((_DWORD *)v94 + 4) == v69) {
                                  goto LABEL_186;
                                }
                              }
                              else if ((v96 & (v91 - 1)) != v67)
                              {
                                goto LABEL_125;
                              }
                              uint64_t v94 = (uint64_t *)*v94;
                              if (!v94) {
                                goto LABEL_125;
                              }
                            }
                          }
                          do
                          {
                            unint64_t v95 = v94[1];
                            if (v95 == v69)
                            {
                              if (*((_DWORD *)v94 + 4) == v69) {
                                goto LABEL_186;
                              }
                            }
                            else
                            {
                              if (v95 >= v91) {
                                v95 %= v91;
                              }
                              if (v95 != v67) {
                                break;
                              }
                            }
                            uint64_t v94 = (uint64_t *)*v94;
                          }
                          while (v94);
                        }
                      }
                    }
LABEL_125:
                    uint64_t v97 = (char *)operator new(0x98uLL);
                    uint64_t v129 = v71 + 56;
                    *(void *)uint64_t v97 = 0;
                    *((void *)v97 + 1) = v69;
                    *((_DWORD *)v97 + 4) = v69;
                    *((std::string *)v97 + 1) = v168;
                    memset(&v168, 0, sizeof(v168));
                    *((_OWORD *)v97 + 3) = v169;
                    *((_DWORD *)v97 + 16) = v170;
                    *(_OWORD *)(v97 + 72) = *(_OWORD *)v171;
                    *((void *)v97 + 11) = v172;
                    v171[1] = 0;
                    unsigned __int8 v172 = 0;
                    v171[0] = 0;
                    *((void *)v97 + 16) = *(void *)&v173[32];
                    long long v98 = *(_OWORD *)&v173[16];
                    *((_OWORD *)v97 + 6) = *(_OWORD *)v173;
                    *((_OWORD *)v97 + 7) = v98;
                    *(_OWORD *)(v97 + 136) = *(_OWORD *)v174;
                    v174[0] = 0;
                    v174[1] = 0;
                    float v99 = (float)(unint64_t)(*((void *)v71 + 8) + 1);
                    float v100 = *((float *)v71 + 18);
                    unint64_t v101 = v97;
                    if (v91 && (float)(v100 * (float)v91) >= v99)
                    {
LABEL_176:
                      uint64_t v124 = *((void *)v71 + 5);
                      unint64_t v125 = *(void **)(v124 + 8 * v67);
                      if (v125)
                      {
                        *(void *)unint64_t v101 = *v125;
                      }
                      else
                      {
                        *(void *)unint64_t v101 = *v129;
                        *uint64_t v129 = v101;
                        *(void *)(v124 + 8 * v67) = v129;
                        if (!*(void *)v101) {
                          goto LABEL_185;
                        }
                        unint64_t v126 = *(void *)(*(void *)v101 + 8);
                        if ((v91 & (v91 - 1)) != 0)
                        {
                          if (v126 >= v91) {
                            v126 %= v91;
                          }
                        }
                        else
                        {
                          v126 &= v91 - 1;
                        }
                        unint64_t v125 = (void *)(*((void *)v71 + 5) + 8 * v126);
                      }
                      void *v125 = v101;
LABEL_185:
                      ++*((void *)v71 + 8);
LABEL_186:
                      ((void (*)(xmlChar *))*MEMORY[0x1E4FBA9D0])(v130);
                      goto LABEL_187;
                    }
                    BOOL v102 = v91 >= 3 && (v91 & (v91 - 1)) == 0;
                    uint64_t v128 = v97;
                    unint64_t v103 = (2 * v91) | !v102;
                    unint64_t v104 = vcvtps_u32_f32(v99 / v100);
                    if (v103 <= v104) {
                      size_t prime = v104;
                    }
                    else {
                      size_t prime = v103;
                    }
                    if (prime == 1)
                    {
                      size_t prime = 2;
                    }
                    else if ((prime & (prime - 1)) != 0)
                    {
                      size_t prime = std::__next_prime(prime);
                    }
                    unint64_t v91 = *((void *)v71 + 6);
                    if (prime <= v91)
                    {
                      if (prime >= v91)
                      {
LABEL_162:
                        unint64_t v101 = v128;
LABEL_163:
                        if ((v91 & (v91 - 1)) != 0)
                        {
                          if (v91 <= v90) {
                            unint64_t v67 = v90 % v91;
                          }
                          else {
                            unint64_t v67 = v90;
                          }
                        }
                        else
                        {
                          unint64_t v67 = (v91 - 1) & v90;
                        }
                        goto LABEL_176;
                      }
                      unint64_t v117 = vcvtps_u32_f32((float)*((unint64_t *)v71 + 8) / *((float *)v71 + 18));
                      if (v91 < 3
                        || (uint8x8_t v118 = (uint8x8_t)vcnt_s8((int8x8_t)v91), v118.i16[0] = vaddlv_u8(v118), v118.u32[0] > 1uLL))
                      {
                        unint64_t v117 = std::__next_prime(v117);
                      }
                      else
                      {
                        uint64_t v119 = 1 << -(char)__clz(v117 - 1);
                        if (v117 >= 2) {
                          unint64_t v117 = v119;
                        }
                      }
                      if (prime <= v117) {
                        size_t prime = v117;
                      }
                      if (prime >= v91)
                      {
                        unint64_t v91 = *((void *)v71 + 6);
                        goto LABEL_162;
                      }
                      if (!prime)
                      {
                        uint64_t v127 = (void *)*((void *)v71 + 5);
                        *((void *)v71 + 5) = 0;
                        unint64_t v101 = v128;
                        if (v127) {
                          operator delete(v127);
                        }
                        unint64_t v91 = 0;
                        *((void *)v71 + 6) = 0;
                        goto LABEL_163;
                      }
                    }
                    if (prime >> 61) {
LABEL_229:
                    }
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    long long v106 = operator new(8 * prime);
                    unint64_t v107 = (void *)*((void *)v71 + 5);
                    *((void *)v71 + 5) = v106;
                    if (v107) {
                      operator delete(v107);
                    }
                    uint64_t v108 = 0;
                    *((void *)v71 + 6) = prime;
                    do
                      *(void *)(*((void *)v71 + 5) + 8 * v108++) = 0;
                    while (prime != v108);
                    uint64_t v109 = (void *)*v129;
                    if (!*v129)
                    {
LABEL_161:
                      unint64_t v91 = prime;
                      goto LABEL_162;
                    }
                    size_t v110 = v109[1];
                    size_t v111 = prime - 1;
                    if ((prime & (prime - 1)) == 0)
                    {
                      size_t v112 = v110 & v111;
                      *(void *)(*((void *)v71 + 5) + 8 * v112) = v129;
                      while (1)
                      {
                        unint64_t v113 = (void *)*v109;
                        if (!*v109) {
                          break;
                        }
                        size_t v114 = v113[1] & v111;
                        if (v114 == v112)
                        {
                          uint64_t v109 = (void *)*v109;
                        }
                        else
                        {
                          uint64_t v115 = *((void *)v71 + 5);
                          if (*(void *)(v115 + 8 * v114))
                          {
                            *uint64_t v109 = *v113;
                            uint64_t v116 = 8 * v114;
                            void *v113 = **(void **)(*((void *)v71 + 5) + v116);
                            **(void **)(*((void *)v71 + 5) + v116) = v113;
                          }
                          else
                          {
                            *(void *)(v115 + 8 * v114) = v109;
                            uint64_t v109 = v113;
                            size_t v112 = v114;
                          }
                        }
                      }
                      goto LABEL_161;
                    }
                    if (v110 >= prime) {
                      v110 %= prime;
                    }
                    *(void *)(*((void *)v71 + 5) + 8 * v110) = v129;
                    uint64_t v120 = (void *)*v109;
                    if (!*v109) {
                      goto LABEL_161;
                    }
                    while (1)
                    {
                      size_t v122 = v120[1];
                      if (v122 >= prime) {
                        v122 %= prime;
                      }
                      if (v122 != v110)
                      {
                        uint64_t v123 = *((void *)v71 + 5);
                        if (!*(void *)(v123 + 8 * v122))
                        {
                          *(void *)(v123 + 8 * v122) = v109;
                          goto LABEL_167;
                        }
                        *uint64_t v109 = *v120;
                        uint64_t v121 = 8 * v122;
                        void *v120 = **(void **)(*((void *)v71 + 5) + v121);
                        **(void **)(*((void *)v71 + 5) + v121) = v120;
                        uint64_t v120 = v109;
                      }
                      size_t v122 = v110;
LABEL_167:
                      uint64_t v109 = v120;
                      uint64_t v120 = (void *)*v120;
                      size_t v110 = v122;
                      if (!v120) {
                        goto LABEL_161;
                      }
                    }
                  }
                }
                memmove(v48, v49, (size_t)v47);
                goto LABEL_51;
              }
            }
            memmove(p_dst, v39, v42);
            goto LABEL_41;
          }
LABEL_224:
          unint64_t v144 = v175;
          unint64_t v145 = v176;
          uint64_t v146 = v177;
          if (v177)
          {
            v176[2] = (uint64_t)&v145;
            uint64_t v175 = &v176;
            char v10 = 1;
            char v176 = 0;
            int v177 = 0;
          }
          else
          {
            unint64_t v144 = &v145;
            char v10 = 1;
          }
          uint64_t v2 = v132;
          uint64_t v7 = v131;
        }
        else
        {
LABEL_8:
          char v10 = 0;
          LOBYTE(v144) = 0;
        }
        char v147 = v10;
        xmlFreeDoc(v7);
      }
      else
      {
        LOBYTE(v144) = 0;
        char v147 = 0;
      }

      if (v147)
      {
        uint8x8_t v12 = (uint64_t **)*((void *)this + 9);
        unint64_t v11 = (uint64_t ***)((char *)this + 72);
        uint64_t v13 = v145;
        void *v11 = v144;
        unsigned int v14 = v11[1];
        v11[1] = (uint64_t **)v13;
        unint64_t v144 = v12;
        unint64_t v145 = (uint64_t *)v14;
        uint64_t v15 = v11[2];
        size_t v16 = v146;
        v11[2] = v146;
        uint64_t v146 = v15;
        id v17 = (uint64_t ***)(v13 + 2);
        if (!v16) {
          id v17 = v11;
        }
        *id v17 = (uint64_t **)(v11 + 1);
        if (v15) {
          size_t v18 = (uint64_t ***)(v14 + 2);
        }
        else {
          size_t v18 = &v144;
        }
        const void *v18 = &v145;

        goto LABEL_21;
      }
    }
  }
  if (*((void *)this + 11))
  {
    int v20 = (void *)*((void *)this + 10);
    size_t v19 = (void *)((char *)this + 80);
    *(v19 - 1) = v19;
    *size_t v19 = 0;
    v19[1] = 0;
  }
LABEL_21:
}

void sub_1A1858F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xmlDoc *cur, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54)
{
  uint64_t v58 = (std::__shared_weak_count *)*((void *)__p + 18);
  if (v58) {
    std::__shared_weak_count::__release_weak(v58);
  }
  uint64_t v59 = (void *)*((void *)__p + 9);
  if (v59)
  {
    *((void *)__p + 10) = v59;
    operator delete(v59);
  }
  if (__p[47] < 0) {
    operator delete(*v54);
  }
  operator delete(__p);
  ((void (*)(uint64_t))*MEMORY[0x1E4FBA9D0])(a13);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a54);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x280]);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0x398]);
  ((void (*)(uint64_t))*MEMORY[0x1E4FBA9D0])(a35);
  if (a43) {
    ((void (*)(uint64_t))*MEMORY[0x1E4FBA9D0])(a43);
  }
  if (a33) {
    ((void (*)(uint64_t))*MEMORY[0x1E4FBA9D0])(a33);
  }
  ((void (*)(uint64_t))*MEMORY[0x1E4FBA9D0])(a31);
  if (a38)
  {
    ((void (*)(uint64_t))*MEMORY[0x1E4FBA9D0])(a38);
    if (!a42)
    {
LABEL_13:
      if (!v55) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }
  }
  else if (!a42)
  {
    goto LABEL_13;
  }
  ((void (*)(uint64_t))*MEMORY[0x1E4FBA9D0])(a42);
  if (!v55)
  {
LABEL_15:
    ((void (*)(uint64_t))*MEMORY[0x1E4FBA9D0])(a41);
    xmlFreeDoc(cur);

    _Unwind_Resume(a1);
  }
LABEL_14:
  ((void (*)(uint64_t))*MEMORY[0x1E4FBA9D0])(v55);
  goto LABEL_15;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__n > v8)
    {
      size_t v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= __n - v8)
      {
        uint64_t v9 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          uint64_t v7 = operator new(v11);
          memcpy(v7, __s, __n);
          if (v8 != 22) {
            operator delete(v9);
          }
          this->__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
          this->__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
LABEL_23:
          this->__r_.__value_.__l.__size_ = __n;
          goto LABEL_24;
        }
LABEL_8:
        std::string::size_type v12 = 2 * v8;
        if (__n > 2 * v8) {
          std::string::size_type v12 = __n;
        }
        uint64_t v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v13 = v12 | 7;
        }
        if (v12 >= 0x17) {
          size_t v11 = v13 + 1;
        }
        else {
          size_t v11 = 23;
        }
        goto LABEL_15;
      }
LABEL_25:
      abort();
    }
    unint64_t v6 = HIBYTE(v10);
    uint64_t v7 = (void *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    uint64_t v7 = this;
    if (__n > 0x16)
    {
      if (__n - 0x7FFFFFFFFFFFFFF7 >= 0x800000000000001FLL)
      {
        unint64_t v8 = 22;
        uint64_t v9 = this;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    goto LABEL_23;
  }
  *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
LABEL_24:
  *((unsigned char *)v7 + __n) = 0;
  return this;
}

{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  unint64_t v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    uint64_t v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    uint64_t v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    uint64_t v7 = this;
    if (__n > 0x16)
    {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      uint64_t v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    this->__r_.__value_.__l.__size_ = __n;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100](uint64_t a1, long long *a2)
{
  uint64_t v4 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v5 = a1 + 16;
  uint64_t v6 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  uint64_t v7 = a1 + 24;
  unint64_t v8 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v10 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v10;
  *(void *)(a1 + *(void *)(v10 - 24)) = v9;
  *(void *)(a1 + 8) = 0;
  size_t v11 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v11, (void *)(a1 + 24));
  uint64_t v12 = MEMORY[0x1E4FBA488] + 24;
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  uint64_t v13 = v8[5];
  uint64_t v14 = v8[4];
  *(void *)(a1 + 16) = v14;
  *(void *)(v5 + *(void *)(v14 - 24)) = v13;
  uint64_t v15 = v8[1];
  *(void *)a1 = v15;
  *(void *)(a1 + *(void *)(v15 - 24)) = v8[6];
  *(void *)a1 = v12;
  *(void *)(a1 + 128) = v4;
  *(void *)(a1 + 16) = v6;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  long long v16 = *a2;
  *(void *)(a1 + 104) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 88) = v16;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 24;
  std::stringbuf::__init_buf_ptrs[abi:nn180100](v7);
  return a1;
}

void sub_1A18596D0(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 111) < 0) {
    operator delete(*v3);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A62391A0](v1);
  _Unwind_Resume(a1);
}

std::string *std::stringbuf::__init_buf_ptrs[abi:nn180100](uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  uint64_t result = (std::string *)(a1 + 64);
  unint64_t v3 = *(unsigned __int8 *)(a1 + 87);
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    uint64_t v4 = result;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
    int v6 = *(_DWORD *)(a1 + 96);
    if ((v6 & 8) == 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v4 = *(std::string **)(a1 + 64);
  unint64_t v5 = *(void *)(a1 + 72);
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
LABEL_3:
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
LABEL_4:
  if ((v6 & 0x10) == 0) {
    return result;
  }
  *(void *)(a1 + 88) = (char *)v4 + v5;
  if ((v3 & 0x80) != 0)
  {
    unint64_t v3 = *(void *)(a1 + 72);
    unint64_t v7 = (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v3 >= v7)
    {
      uint64_t result = *(std::string **)(a1 + 64);
      *(void *)(a1 + 72) = v7;
LABEL_14:
      result->__r_.__value_.__s.__data_[v7] = 0;
      LODWORD(v8) = *(char *)(a1 + 87);
      if ((v8 & 0x80000000) != 0) {
        goto LABEL_15;
      }
LABEL_12:
      uint64_t v8 = v8;
      goto LABEL_16;
    }
  }
  else
  {
    unint64_t v7 = 22;
    if (v3 > 0x15)
    {
      *(unsigned char *)(a1 + 87) = 22;
      goto LABEL_14;
    }
  }
  uint64_t result = std::string::append(result, v7 - v3, 0);
  LODWORD(v8) = *(char *)(a1 + 87);
  if ((v8 & 0x80000000) == 0) {
    goto LABEL_12;
  }
LABEL_15:
  uint64_t v8 = *(void *)(a1 + 72);
LABEL_16:
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = (char *)v4 + v8;
  if ((*(unsigned char *)(a1 + 96) & 3) != 0)
  {
    if (v5 >> 31)
    {
      uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
      unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
      uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
      unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
      *(void *)(a1 + 48) = v4;
    }
    if (v5) {
      *(void *)(a1 + 48) = (char *)v4 + v5;
    }
  }
  return result;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

void std::__tree<std::__value_type<unsigned char,std::unordered_map<unsigned int,anonymous namespace'::Trigger>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::unordered_map<unsigned int,anonymous namespace'::Trigger>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::unordered_map<unsigned int,anonymous namespace'::Trigger>>>>::destroy(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (char *)a1[7];
    if (v2)
    {
      do
      {
        size_t v4 = *(char **)v2;
        unint64_t v5 = (std::__shared_weak_count *)*((void *)v2 + 18);
        if (v5) {
          std::__shared_weak_count::__release_weak(v5);
        }
        int v6 = (void *)*((void *)v2 + 9);
        if (v6)
        {
          *((void *)v2 + 10) = v6;
          operator delete(v6);
        }
        if (v2[47] < 0) {
          operator delete(*((void **)v2 + 3));
        }
        operator delete(v2);
        uint64_t v2 = v4;
      }
      while (v4);
    }
    unint64_t v3 = (void *)a1[5];
    a1[5] = 0;
    if (v3) {
      operator delete(v3);
    }
    operator delete(a1);
  }
}

uint64_t md::CompositeLabelPart::needsCrossfade(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 576);
  uint64_t v5 = *(void *)(a1 + 584);
  if (v4 == v5) {
    return 0;
  }
  uint64_t v9 = v4 + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v9 - 8) + 760))(*(void *)(v9 - 8), a2, a3, a4);
    if (result) {
      break;
    }
    BOOL v11 = v9 == v5;
    v9 += 8;
  }
  while (!v11);
  return result;
}

BOOL md::ShieldIconLabelPart::needsCrossfade(uint64_t a1, uint64_t a2, int a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v4 = *(uint64_t **)(a1 + 32);
  uint64_t v5 = *v4;
  uint64_t v6 = *(void *)(*v4 + 296);
  if (!v6)
  {
    unint64_t v7 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*v4, 0);
    uint64_t v6 = *v7;
    *(void *)(v5 + 296) = *v7;
  }
  if (*(unsigned __int8 *)(v6 + 91) != *(unsigned __int8 *)(a1 + 784)) {
    return 1;
  }
  uint64_t v8 = *v4;
  uint64_t v9 = *(void *)(*v4 + 296);
  if (!v9)
  {
    unint64_t v10 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*v4, 0);
    uint64_t v9 = *v10;
    *(void *)(v8 + 296) = *v10;
  }
  return *(_DWORD *)(a1 + 788) != *(_DWORD *)(v9 + 56) || *(_DWORD *)(a1 + 792) != *(_DWORD *)(v9 + 60);
}

uint64_t md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::enumerateGEOVectorObjects(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(result + 24);
  unint64_t v3 = *(uint64_t **)(result + 32);
  if (v2 != v3)
  {
    while (1)
    {
      uint64_t v6 = *v2;
      uint64_t v5 = *(void *)(a2 + 24);
      if (!v5) {
        break;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v5 + 48))(v5, &v6);
      v2 += 3;
      if (v2 == v3) {
        return result;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::enumerateGEOVectorObjects();
  }
  return result;
}

uint64_t md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::enumerateGEOVectorObjects(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(result + 24);
  unint64_t v3 = *(uint64_t **)(result + 32);
  if (v2 != v3)
  {
    while (1)
    {
      uint64_t v6 = *v2;
      uint64_t v5 = *(void *)(a2 + 24);
      if (!v5) {
        break;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v5 + 48))(v5, &v6);
      v2 += 3;
      if (v2 == v3) {
        return result;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return std::__function::__func<md::LabelFeature::styleAttributes(md::LabelIdentifier)::$_0,std::allocator<md::LabelFeature::styleAttributes(md::LabelIdentifier)::$_0>,void ()(GeoCodecsFeature const*)>::operator()();
  }
  return result;
}

void std::__function::__func<md::LabelFeature::styleAttributes(md::LabelIdentifier)::$_0,std::allocator<md::LabelFeature::styleAttributes(md::LabelIdentifier)::$_0>,void ()(GeoCodecsFeature const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  uint64_t v5 = *(void **)(v2 + 8);
  unint64_t v4 = *(void *)(v2 + 16);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = *(void **)v2;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v2) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      abort();
    }
    uint64_t v11 = v4 - (void)v8;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    BOOL v12 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v10;
    }
    if (v13 >> 60) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v14 = 16 * v13;
    uint64_t v15 = (char *)operator new(16 * v13);
    long long v16 = &v15[16 * v9];
    long long v17 = *(_OWORD *)(v3 + 24);
    *(_OWORD *)long long v16 = v17;
    if (*((void *)&v17 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
      uint64_t v8 = *(void **)v2;
      uint64_t v5 = *(void **)(v2 + 8);
    }
    size_t v18 = &v15[v14];
    unint64_t v7 = v16 + 16;
    if (v5 == v8)
    {
      *(void *)uint64_t v2 = v16;
      *(void *)(v2 + 8) = v7;
      *(void *)(v2 + 16) = v18;
    }
    else
    {
      do
      {
        long long v19 = *((_OWORD *)v5 - 1);
        v5 -= 2;
        *((_OWORD *)v16 - 1) = v19;
        v16 -= 16;
        *uint64_t v5 = 0;
        v5[1] = 0;
      }
      while (v5 != v8);
      uint64_t v8 = *(void **)v2;
      int v20 = *(void **)(v2 + 8);
      *(void *)uint64_t v2 = v16;
      *(void *)(v2 + 8) = v7;
      for (*(void *)(v2 + 16) = v18; v20 != v8; v20 -= 2)
      {
        uint64_t v21 = (std::__shared_weak_count *)*(v20 - 1);
        if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    uint64_t v6 = *(void *)(v3 + 32);
    *uint64_t v5 = *(void *)(v3 + 24);
    v5[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v7 = v5 + 2;
  }
  *(void *)(v2 + 8) = v7;
}

uint64_t gdc::GlobeTileGrid::intersectWithFrustum(uint64_t a1, const double *a2, double a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  LODWORD(v9) = 0;
  do
  {
    geo::Frustum<double>::transformed(v28, a2, a1 + v7 + 1688);
    unint64_t v13 = (_OWORD *)(a1 + v6);
    long long v14 = *(_OWORD *)(a1 + v6 + 96);
    long long v25 = *(_OWORD *)(a1 + v6 + 80);
    long long v26 = v14;
    *(_OWORD *)long long v27 = *(_OWORD *)(a1 + v6 + 112);
    if (*((double *)&v14 + 1) >= *(double *)&v25 && v27[0] >= *((double *)&v25 + 1) && v27[1] >= *(double *)&v26)
    {
      *(double *)&long long v26 = *(double *)&v26 + a3;
      v27[1] = v27[1] + a3;
    }
    int v15 = geo::Intersect::encloses<double>(v28, (double *)&v25);
    int v16 = 1 << v8;
    if (!v15) {
      int v16 = 0;
    }
    int v24 = v16;
    geo::Frustum<double>::transformed(v28, a2, a1 + v7 + 1912);
    long long v17 = v13[32];
    long long v25 = v13[31];
    long long v26 = v17;
    *(_OWORD *)long long v27 = v13[33];
    if (*((double *)&v17 + 1) >= *(double *)&v25 && v27[0] >= *((double *)&v25 + 1) && v27[1] >= *(double *)&v26)
    {
      *(double *)&long long v26 = *(double *)&v26 + a3;
      v27[1] = v27[1] + a3;
    }
    if (geo::Intersect::encloses<double>(v28, (double *)&v25)) {
      int v18 = 1 << (v8 + 4);
    }
    else {
      int v18 = 0;
    }
    geo::Frustum<double>::transformed(v28, a2, a1 + v7 + 2136);
    long long v19 = (_OWORD *)(a1 + v6);
    long long v20 = *(_OWORD *)(a1 + v6 + 928);
    long long v25 = *(_OWORD *)(a1 + v6 + 912);
    long long v26 = v20;
    *(_OWORD *)long long v27 = *(_OWORD *)(a1 + v6 + 944);
    if (*((double *)&v20 + 1) >= *(double *)&v25 && v27[0] >= *((double *)&v25 + 1) && v27[1] >= *(double *)&v26)
    {
      *(double *)&long long v26 = *(double *)&v26 + a3;
      v27[1] = v27[1] + a3;
    }
    if (geo::Intersect::encloses<double>(v28, (double *)&v25)) {
      int v21 = 1 << (v8 + 8);
    }
    else {
      int v21 = 0;
    }
    geo::Frustum<double>::transformed(v28, a2, a1 + v7 + 2360);
    long long v22 = v19[84];
    long long v25 = v19[83];
    long long v26 = v22;
    *(_OWORD *)long long v27 = v19[85];
    if (*((double *)&v22 + 1) >= *(double *)&v25 && v27[0] >= *((double *)&v25 + 1) && v27[1] >= *(double *)&v26)
    {
      *(double *)&long long v26 = *(double *)&v26 + a3;
      v27[1] = v27[1] + a3;
    }
    unsigned int v10 = v21 | v18 | v24 | v9;
    int v11 = geo::Intersect::encloses<double>(v28, (double *)&v25);
    int v12 = 1 << (v8 + 12);
    if (!v11) {
      int v12 = 0;
    }
    uint64_t v9 = v12 | v10;
    ++v8;
    v7 += 56;
    v6 += 104;
  }
  while (v8 != 4);
  return v9;
}

void gdc::GlobeTileSelector::tilesInViewInternal(uint64_t a1, double *a2, uint64_t a3, void *a4, double a5)
{
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v551 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  int v9 = *(unsigned __int8 *)(a1 + 273);
  double v11 = a2[46];
  double v10 = a2[47];
  double v12 = v10 * v11;
  if (v10 >= v11)
  {
    double v16 = a2[57];
  }
  else
  {
    if (v12 <= 0.0) {
      double v13 = 1.0;
    }
    else {
      double v13 = v10 / v11;
    }
    long double v14 = tan(a2[57] * 0.5);
    long double v15 = atan(v13 * v14);
    double v16 = v15 + v15;
  }
  double v17 = v6[1];
  double v18 = 1.0;
  if (v9)
  {
    long double v19 = cos(v6[1]);
    double v18 = 1.0 / v19 * (1.0 / v19);
  }
  long double v20 = tan(v16 * 0.5);
  double v21 = v20 * (double)v8 * (v20 * (double)v8) * (v11 * (4.0 * v18)) / (a5 * a5 * v10 * v12);
  float64x2_t v457 = *(float64x2_t *)(v6 + 63);
  long double v458 = v6[62];
  long double v22 = v6[64];
  double v475 = vmulq_f64(v457, v457).f64[0] + v458 * v458;
  double v23 = sqrt(v475);
  double v24 = atan2(v22, v23 * 0.996647189);
  double v472 = atan2(v457.f64[0], v458);
  __double2 v25 = __sincos_stret(v24);
  double v456 = v22;
  double v26 = atan2(v22 + v25.__sinval * v25.__sinval * 42841.3115 * v25.__sinval, v23 + v25.__cosval * v25.__cosval * -42697.6727 * v25.__cosval);
  __double2 v27 = __sincos_stret(v26);
  long double v28 = tan(v26 * 0.5 + 0.785398163);
  double v29 = log(v28);
  double v30 = v6[2];
  double v470 = v6[3];
  double v31 = v6[4];
  gdc::CameraView::geocentricCameraView((gdc::CameraView *)v511, (const Camera *)v6);
  *(_OWORD *)long long v509 = 0u;
  *(_OWORD *)unint64_t v508 = 0u;
  int v510 = 1065353216;
  long long v507 = 0u;
  long long v506 = 0u;
  *(_OWORD *)uint64_t v505 = 0u;
  double v32 = v6[5];
  double v471 = v31;
  if (v31 * 0.0000000249532021 == 0.0)
  {
    unsigned int v33 = *(unsigned __int8 *)(v7 + 274);
  }
  else
  {
    long double v34 = log2(v31 * 0.0000000249532021 * (v31 * 0.0000000249532021) * v21);
    double v35 = *(double *)(v7 + 16);
    double v36 = v35 + v34 * -0.5;
    LOBYTE(v35) = *(unsigned char *)(v7 + 274);
    unsigned int v33 = (int)fmin(fmax(v36, 0.0), (double)*(unint64_t *)&v35);
  }
  uint64_t v480 = v7;
  if (*(unsigned char *)(v7 + 361))
  {
    if (v33 <= 2) {
      unsigned int v37 = 2;
    }
    else {
      unsigned int v37 = v33;
    }
    unsigned int v451 = v37;
    BOOL v450 = v37 > 0xB;
    if (v33 >= *(unsigned __int8 *)(v7 + 360)) {
      goto LABEL_23;
    }
  }
  else
  {
    if (v33 <= 2) {
      unsigned int v33 = 2;
    }
    unsigned int v451 = v33;
    BOOL v450 = v33 > 0xB;
  }
  if (v32 <= 0.699999988)
  {
    int v473 = 0;
    goto LABEL_33;
  }
LABEL_23:
  if (*(unsigned char *)(v7 + 272))
  {
    double v38 = sqrt(v27.__sinval * v27.__sinval * -0.00669437999 + 1.0);
    v490[0] = 0;
    v490[1] = 0;
    *(void *)&long long v491 = 0;
    std::vector<gm::Matrix<double,3,1>>::__insert_with_size[abi:nn180100]<gm::Matrix<double,3,1> const*,gm::Matrix<double,3,1> const*>(v490, (unint64_t)(v6 + 147), (uint64_t)(v6 + 171));
    unint64_t v39 = (double *)v490[0];
    unint64_t v40 = (double *)v490[1];
    if (v490[0] == v490[1])
    {
      double v42 = 0.0;
    }
    else
    {
      unint64_t v41 = (char *)v490[1] - (char *)v490[0] - 24;
      double v42 = 0.0;
      uint64_t v43 = (char *)v490[0];
      if (v41 > 0x47)
      {
        unint64_t v44 = v41 / 0x18 + 1;
        float64x2_t v45 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v458, 0);
        float64x2_t v46 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v457.f64[0], 0);
        float64x2_t v47 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v457, 1);
        float64x2_t v48 = 0uLL;
        unint64_t v49 = (const double *)v490[0];
        uint64_t v50 = v44 & 0x1FFFFFFFFFFFFFFCLL;
        float64x2_t v51 = 0uLL;
        do
        {
          unint64_t v52 = v49;
          v49 += 12;
          float64x2x3_t v552 = vld3q_f64(v52);
          v52 += 6;
          float64x2_t v53 = vsubq_f64(v552.val[0], v45);
          float64x2x3_t v554 = vld3q_f64(v52);
          float64x2_t v54 = vsubq_f64(v554.val[0], v45);
          float64x2_t v55 = vsubq_f64(v552.val[1], v46);
          v552.val[0] = vsubq_f64(v552.val[2], v47);
          v552.val[1] = vsubq_f64(v554.val[1], v46);
          v552.val[2] = vsubq_f64(v554.val[2], v47);
          float64x2_t v48 = vmaxnmq_f64(vsqrtq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v53, v53), v55, v55), v552.val[0], v552.val[0])), v48);
          float64x2_t v51 = vmaxnmq_f64(vsqrtq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v54, v54), v552.val[1], v552.val[1]), v552.val[2], v552.val[2])), v51);
          v50 -= 4;
        }
        while (v50);
        double v42 = vmaxnmvq_f64(vmaxnmq_f64(v48, v51));
        if (v44 == (v44 & 0x1FFFFFFFFFFFFFFCLL)) {
          goto LABEL_39;
        }
        uint64_t v43 = (char *)v490[0] + 24 * (v44 & 0x1FFFFFFFFFFFFFFCLL);
      }
      do
      {
        float64x2_t v56 = vsubq_f64(*(float64x2_t *)(v43 + 8), v457);
        float64x2_t v57 = vmulq_f64(v56, v56);
        double v42 = fmax(sqrt(v57.f64[0] + (*(double *)v43 - v458) * (*(double *)v43 - v458) + v57.f64[1]), v42);
        v43 += 24;
      }
      while (v43 != v490[1]);
    }
LABEL_39:
    double v68 = -6378137.0 / v38;
    double v69 = v42 * 0.0000000249532021;
    if (v69 == 0.0)
    {
      LOBYTE(v70) = *(unsigned char *)(v7 + 274);
    }
    else
    {
      long double v71 = log2(v69 * v69 * v21);
      double v72 = *(double *)(v7 + 16);
      double v73 = v72 + v71 * -0.5;
      LOBYTE(v72) = *(unsigned char *)(v7 + 274);
      int v70 = (int)fmin(fmax(v73, 0.0), (double)*(unint64_t *)&v72);
    }
    char v489 = v70;
    uint64_t v468 = v6;
    double v74 = v23 / v27.__cosval + v68;
    double v75 = v472 * 0.159154943 + 0.5;
    double v76 = v29 * 0.159154943 + 0.5;
    if (v39 == v40)
    {
      unint64_t v101 = 0;
      uint64_t v78 = 0;
      uint64_t v79 = 0;
    }
    else
    {
      double v466 = v29 * 0.159154943 + 0.5;
      int64_t v77 = 0;
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      do
      {
        long double v80 = *v39;
        long double v81 = v39[1];
        long double v82 = v39[2];
        double v83 = sqrt(v80 * v80 + v81 * v81);
        double v84 = atan2(v82, v83 * 0.996647189);
        double v85 = atan2(v81, v80);
        __double2 v86 = __sincos_stret(v84);
        double v87 = atan2(v82 + v86.__sinval * v86.__sinval * 42841.3115 * v86.__sinval, v83 + v86.__cosval * v86.__cosval * -42697.6727 * v86.__cosval);
        __double2 v88 = __sincos_stret(v87);
        double v89 = v83 / v88.__cosval + -6378137.0 / sqrt(v88.__sinval * v88.__sinval * -0.00669437999 + 1.0);
        long double v90 = tan(v87 * 0.5 + 0.785398163);
        double v91 = v85 * 0.159154943 + 0.5;
        double v92 = log(v90) * 0.159154943 + 0.5;
        if (v78 < (double *)v79)
        {
          *uint64_t v78 = v91;
          v78[1] = v92;
          v78[2] = v89;
          v78 += 3;
        }
        else
        {
          unint64_t v93 = 0xAAAAAAAAAAAAAAABLL * (v78 - v77) + 1;
          if (v93 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_506;
          }
          if (0x5555555555555556 * ((v79 - (char *)v77) >> 3) > v93) {
            unint64_t v93 = 0x5555555555555556 * ((v79 - (char *)v77) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v79 - (char *)v77) >> 3) >= 0x555555555555555) {
            unint64_t v94 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v94 = v93;
          }
          if (v94)
          {
            if (v94 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_505;
            }
            unint64_t v95 = (char *)operator new(24 * v94);
          }
          else
          {
            unint64_t v95 = 0;
          }
          uint64_t v96 = (double *)&v95[8 * (v78 - v77)];
          *uint64_t v96 = v91;
          v96[1] = v92;
          v96[2] = v89;
          if (v78 == v77)
          {
            long long v98 = &v95[8 * (v78 - v77)];
          }
          else
          {
            uint64_t v97 = (double *)&v95[8 * (v78 - v77)];
            do
            {
              long long v98 = (char *)(v97 - 3);
              long long v99 = *(_OWORD *)(v78 - 3);
              *(v97 - 1) = *(v78 - 1);
              *(_OWORD *)(v97 - 3) = v99;
              v78 -= 3;
              v97 -= 3;
            }
            while (v78 != v77);
          }
          uint64_t v79 = &v95[24 * v94];
          uint64_t v78 = v96 + 3;
          if (v77) {
            operator delete(v77);
          }
          int64_t v77 = (double *)v98;
        }
        v39 += 3;
      }
      while (v39 != v40);
      if (v78 < (double *)v79)
      {
        *uint64_t v78 = v472 * 0.159154943 + 0.5;
        v78[1] = v466;
        float v100 = v78 + 3;
        v78[2] = v74;
        goto LABEL_83;
      }
      unint64_t v101 = v77;
      double v75 = v472 * 0.159154943 + 0.5;
      double v76 = v466;
    }
    unint64_t v102 = 0xAAAAAAAAAAAAAAABLL * (v78 - v101) + 1;
    if (v102 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_506;
    }
    if (0x5555555555555556 * ((v79 - (char *)v101) >> 3) > v102) {
      unint64_t v102 = 0x5555555555555556 * ((v79 - (char *)v101) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((v79 - (char *)v101) >> 3) >= 0x555555555555555) {
      unint64_t v103 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v103 = v102;
    }
    if (v103)
    {
      if (v103 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_505;
      }
      unint64_t v104 = (char *)operator new(24 * v103);
    }
    else
    {
      unint64_t v104 = 0;
    }
    unint64_t v105 = (double *)&v104[8 * (v78 - v101)];
    uint64_t v79 = &v104[24 * v103];
    *unint64_t v105 = v75;
    v105[1] = v76;
    v105[2] = v74;
    float v100 = v105 + 3;
    if (v78 == v101)
    {
      int64_t v77 = (double *)&v104[8 * (v78 - v101)];
      if (!v101) {
        goto LABEL_83;
      }
    }
    else
    {
      do
      {
        int64_t v77 = v105 - 3;
        long long v106 = *(_OWORD *)(v78 - 3);
        *(v105 - 1) = *(v78 - 1);
        *(_OWORD *)(v105 - 3) = v106;
        v78 -= 3;
        v105 -= 3;
      }
      while (v78 != v101);
      if (!v101) {
        goto LABEL_83;
      }
    }
    operator delete(v101);
LABEL_83:
    if (!*(unsigned char *)(v480 + 352)) {
      goto LABEL_109;
    }
    uint64_t v107 = *(void *)(v480 + 344);
    if (!v107)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>(v446, v447, v448);
      return;
    }
    double v108 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(void *)v107 + 48))(v107));
    double v110 = v109 ? v108 : 0.0;
    if (v110 == 0.0)
    {
LABEL_109:
      int v452 = 0;
      goto LABEL_117;
    }
    double v112 = v6[2];
    *(double *)unint64_t v494 = v6[1];
    size_t v111 = *(void **)v494;
    *(double *)&v494[8] = v112;
    long long v474 = *(_OWORD *)(v6 + 5);
    *(_OWORD *)&v494[16] = *(_OWORD *)(v6 + 3);
    double v461 = *(double *)&v494[16];
    *(_OWORD *)&v494[32] = v474;
    *(double *)v495 = v6[7];
    uint64_t v467 = *(void *)v495;
    gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric((double *)v498, (double *)v494);
    uint64_t v463 = v498[1];
    v465 = v498[0];
    double v113 = *(double *)v499;
    __double2 v114 = __sincos_stret(*(double *)&v111);
    double v115 = 6378137.0 / sqrt(v114.__sinval * v114.__sinval * -0.00669437999 + 1.0);
    __double2 v116 = __sincos_stret(v112);
    *(void *)unint64_t v494 = v111;
    *(double *)&v494[8] = v112;
    *(double *)&v494[16] = v461 - v110;
    *(void *)&v494[24] = fmax(sqrt((*(double *)&v465 - (v115 + *(double *)&v494[16]) * v114.__cosval * v116.__cosval)* (*(double *)&v465 - (v115 + *(double *)&v494[16]) * v114.__cosval * v116.__cosval)+ (*(double *)&v463 - (v115 + *(double *)&v494[16]) * v114.__cosval * v116.__sinval)* (*(double *)&v463 - (v115 + *(double *)&v494[16]) * v114.__cosval * v116.__sinval)+ (v113 - (*(double *)&v494[16] + v115 * 0.99330562) * v114.__sinval)* (v113 - (*(double *)&v494[16] + v115 * 0.99330562) * v114.__sinval)), v471);
    long long v117 = *((_OWORD *)v6 + 23);
    long long v118 = *((_OWORD *)v6 + 24);
    long long v119 = *((_OWORD *)v6 + 26);
    long long v543 = *((_OWORD *)v6 + 25);
    long long v544 = v119;
    long long v545 = *((_OWORD *)v6 + 27);
    int v546 = *((_DWORD *)v6 + 112);
    uint64_t v120 = *((void *)v6 + 57);
    long long v121 = *((_OWORD *)v6 + 29);
    uint64_t v122 = *((void *)v6 + 60);
    v517[1] = v111;
    uint64_t v519 = *((void *)&v474 + 1);
    *(_OWORD *)long long v518 = *(_OWORD *)&v494[8];
    *(_OWORD *)&v518[16] = *(_OWORD *)&v494[24];
    uint64_t v520 = v467;
    uint64_t v522 = 0;
    uint64_t v521 = 0;
    uint64_t v524 = 0;
    uint64_t v523 = 0;
    uint64_t v525 = 0;
    int64x2_t v526 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    int64x2_t v527 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    int64x2_t v528 = v526;
    int64x2_t v529 = v527;
    int64x2_t v530 = v526;
    int64x2_t v531 = v527;
    int64x2_t v532 = v526;
    int64x2_t v533 = v527;
    int64x2_t v534 = v526;
    int64x2_t v535 = v527;
    int64x2_t v536 = v526;
    int64x2_t v537 = v527;
    char v538 = 1;
    char v539 = 0;
    char v540 = 0;
    long long v541 = v117;
    long long v542 = v118;
    uint64_t v547 = v120;
    long long v548 = v121;
    uint64_t v549 = v122;
    uint64_t v550 = 0;
    gdc::CameraView::geocentricCameraView((gdc::CameraView *)v498, (const Camera *)v517);
    gdc::CameraView::operator=((uint64_t)v511, (uint64_t)v498);
    memset(__p, 0, sizeof(__p));
    std::vector<gm::Matrix<double,3,1>>::__insert_with_size[abi:nn180100]<gm::Matrix<double,3,1> const*,gm::Matrix<double,3,1> const*>(__p, (unint64_t)&v513, (uint64_t)__p);
    uint64_t v123 = (double *)__p[1];
    uint64_t v124 = (double *)__p[0];
    if (__p[0] != __p[1])
    {
      double v125 = 1.0;
      while (1)
      {
        long double v127 = *v124;
        long double v128 = v124[1];
        long double v129 = v124[2];
        double v130 = sqrt(v127 * v127 + v128 * v128);
        double v131 = atan2(v129, v130 * 0.996647189);
        double v132 = atan2(v128, v127);
        __double2 v133 = __sincos_stret(v131);
        double v134 = atan2(v129 + v133.__sinval * v133.__sinval * 42841.3115 * v133.__sinval, v130 + v133.__cosval * v133.__cosval * -42697.6727 * v133.__cosval);
        __double2 v135 = __sincos_stret(v134);
        double v136 = v130 / v135.__cosval + -6378137.0 / sqrt(v135.__sinval * v135.__sinval * -0.00669437999 + 1.0);
        long double v137 = tan(v134 * 0.5 + 0.785398163);
        double v138 = v132 * 0.159154943 + 0.5;
        double v139 = log(v137) * 0.159154943 + 0.5;
        if (v100 < (double *)v79)
        {
          *float v100 = v138;
          v100[1] = v139;
          unint64_t v126 = v100 + 3;
          v100[2] = v136;
        }
        else
        {
          unint64_t v140 = 0xAAAAAAAAAAAAAAABLL * (v100 - v77) + 1;
          if (v140 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_506;
          }
          if (0x5555555555555556 * ((v79 - (char *)v77) >> 3) > v140) {
            unint64_t v140 = 0x5555555555555556 * ((v79 - (char *)v77) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v79 - (char *)v77) >> 3) >= 0x555555555555555) {
            unint64_t v141 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v141 = v140;
          }
          if (v141)
          {
            if (v141 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_505;
            }
            long long v142 = (char *)operator new(24 * v141);
          }
          else
          {
            long long v142 = 0;
          }
          unint64_t v143 = (double *)&v142[8 * (v100 - v77)];
          uint64_t v79 = &v142[24 * v141];
          double *v143 = v138;
          v143[1] = v139;
          v143[2] = v136;
          unint64_t v126 = v143 + 3;
          if (v100 == v77) {
            goto LABEL_107;
          }
          do
          {
            long long v144 = *(_OWORD *)(v100 - 3);
            *(v143 - 1) = *(v100 - 1);
            *(_OWORD *)(v143 - 3) = v144;
            v143 -= 3;
            v100 -= 3;
          }
          while (v100 != v77);
          if (v77) {
LABEL_107:
          }
            operator delete(v77);
          int64_t v77 = v143;
        }
        v124 += 3;
        float v100 = v126;
        if (v124 == v123) {
          goto LABEL_113;
        }
      }
    }
    unint64_t v126 = v100;
    double v125 = 1.0;
LABEL_113:
    gdc::CameraFrame<geo::Radians,double>::toRigidTransformGeocentric((double *)v498, (double *)v494);
    unint64_t v145 = v498[0];
    uint64_t v146 = v498[1];
    double v147 = *(double *)v499;
    double v148 = sqrt(*(double *)&v145 * *(double *)&v145 + *(double *)&v146 * *(double *)&v146);
    double v149 = atan2(*(long double *)v499, v148 * 0.996647189);
    double v150 = atan2(*(long double *)&v146, *(long double *)&v145);
    __double2 v151 = __sincos_stret(v149);
    double v152 = atan2(v147 + v151.__sinval * v151.__sinval * 42841.3115 * v151.__sinval, v148 + v151.__cosval * v151.__cosval * -42697.6727 * v151.__cosval);
    __double2 v153 = __sincos_stret(v152);
    double v154 = v148 / v153.__cosval + -6378137.0 / sqrt(v125 + v153.__sinval * v153.__sinval * -0.00669437999);
    long double v155 = tan(v152 * 0.5 + 0.785398163);
    double v156 = v150 * 0.159154943 + 0.5;
    double v157 = log(v155) * 0.159154943 + 0.5;
    if (v126 < (double *)v79)
    {
      double *v126 = v156;
      v126[1] = v157;
      float v100 = v126 + 3;
      v126[2] = v154;
      int v158 = __p[0];
      if (!__p[0])
      {
LABEL_116:
        int v452 = 1;
LABEL_117:
        v483 = v77;
        if (v77 == v100)
        {
          double v160 = -1.79769313e308;
          double v163 = 1.79769313e308;
          double v161 = 1.79769313e308;
          double v164 = -1.79769313e308;
        }
        else
        {
          unint64_t v159 = (char *)v100 - (char *)v77 - 24;
          if (v159 >= 0x60)
          {
            unint64_t v165 = v159 / 0x18 + 1;
            uint64_t v166 = v165 & 3;
            if ((v165 & 3) == 0) {
              uint64_t v166 = 4;
            }
            unint64_t v167 = v165 - v166;
            uint64_t v168 = 3 * v167;
            float64x2_t v169 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
            float64x2_t v170 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
            uint64_t v171 = v77;
            float64x2_t v172 = v170;
            float64x2_t v173 = v170;
            float64x2_t v174 = v170;
            float64x2_t v175 = v169;
            float64x2_t v176 = v169;
            float64x2_t v177 = v169;
            do
            {
              long long v178 = v171;
              v171 += 12;
              float64x2x3_t v553 = vld3q_f64(v178);
              v178 += 6;
              float64x2_t v173 = vminnmq_f64(v553.val[0], v173);
              float64x2x3_t v555 = vld3q_f64(v178);
              float64x2_t v174 = vminnmq_f64(v555.val[0], v174);
              float64x2_t v169 = vmaxnmq_f64(v169, v553.val[0]);
              float64x2_t v175 = vmaxnmq_f64(v175, v555.val[0]);
              float64x2_t v170 = vminnmq_f64(v553.val[1], v170);
              float64x2_t v172 = vminnmq_f64(v555.val[1], v172);
              float64x2_t v176 = vmaxnmq_f64(v176, v553.val[1]);
              float64x2_t v177 = vmaxnmq_f64(v177, v555.val[1]);
              v167 -= 4;
            }
            while (v167);
            size_t v162 = &v77[v168];
            double v164 = vmaxnmvq_f64(vmaxnmq_f64(v176, v177));
            double v160 = vmaxnmvq_f64(vmaxnmq_f64(v169, v175));
            double v163 = vminnmvq_f64(vminnmq_f64(v173, v174));
            double v161 = vminnmvq_f64(vminnmq_f64(v170, v172));
          }
          else
          {
            double v160 = -1.79769313e308;
            double v161 = 1.79769313e308;
            size_t v162 = v77;
            double v163 = 1.79769313e308;
            double v164 = -1.79769313e308;
          }
          do
          {
            double v179 = *v162;
            double v180 = v162[1];
            v162 += 3;
            double v163 = fmin(v179, v163);
            double v160 = fmax(v160, v179);
            double v161 = fmin(v180, v161);
            double v164 = fmax(v164, v180);
          }
          while (v162 != v100);
        }
        double v181 = (double)(1 << v489);
        unsigned int v182 = vcvtmd_s64_f64(v161 * v181);
        int v183 = vcvtmd_s64_f64(v164 * v181) - v182;
        if (v183 >= 0)
        {
          signed int v184 = vcvtmd_s64_f64(v160 * v181);
          signed int v488 = vcvtmd_s64_f64(v163 * v181);
          if (v184 >= v488)
          {
            int v432 = 0;
            int v487 = (1 << v489) + ~v182;
            int v433 = v184 + 1;
            int v486 = v183 + 1;
            unsigned int v434 = (unsigned char *)v506;
            unsigned int v435 = v505[1];
            uint64_t v436 = *((void *)&v507 + 1);
            uint64_t v437 = v507;
            do
            {
              signed int v438 = v488;
              do
              {
                if (v434 == (unsigned char *)v435) {
                  uint64_t v440 = 0;
                }
                else {
                  uint64_t v440 = 170 * ((v434 - (unsigned char *)v435) >> 3) - 1;
                }
                unint64_t v441 = v436 + v437;
                if (v440 == v436 + v437)
                {
                  std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)v505);
                  unsigned int v435 = v505[1];
                  unsigned int v434 = (unsigned char *)v506;
                  uint64_t v436 = *((void *)&v507 + 1);
                  uint64_t v437 = v507;
                  unint64_t v441 = v507 + *((void *)&v507 + 1);
                }
                unint64_t v439 = v435[v441 / 0xAA] + 24 * (v441 % 0xAA);
                *(unsigned char *)unint64_t v439 = -1;
                *(unsigned char *)(v439 + 1) = v489;
                *(_DWORD *)(v439 + 4) = v487 - v432;
                *(_DWORD *)(v439 + 8) = v438;
                *((void *)&v507 + 1) = ++v436;
                ++v438;
              }
              while (v433 != v438);
              ++v432;
            }
            while (v432 != v486);
          }
        }
        if (v483) {
          operator delete(v483);
        }
        uint64_t v7 = v480;
        uint64_t v6 = v468;
        if (v490[0]) {
          operator delete(v490[0]);
        }
        int v473 = 1;
        uint64_t v67 = *((void *)&v507 + 1);
        if (*((void *)&v507 + 1)) {
          goto LABEL_134;
        }
        goto LABEL_467;
      }
LABEL_115:
      operator delete(v158);
      goto LABEL_116;
    }
    unint64_t v442 = 0xAAAAAAAAAAAAAAABLL * (v126 - v77) + 1;
    if (v442 <= 0xAAAAAAAAAAAAAAALL)
    {
      if (0x5555555555555556 * ((v79 - (char *)v77) >> 3) > v442) {
        unint64_t v442 = 0x5555555555555556 * ((v79 - (char *)v77) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v79 - (char *)v77) >> 3) >= 0x555555555555555) {
        unint64_t v442 = 0xAAAAAAAAAAAAAAALL;
      }
      if (!v442)
      {
        unsigned int v443 = 0;
LABEL_497:
        v444 = (double *)&v443[8 * (v126 - v77)];
        double *v444 = v156;
        v444[1] = v157;
        v444[2] = v154;
        float v100 = v444 + 3;
        if (v126 == v77)
        {
          int64_t v77 = v126;
        }
        else
        {
          do
          {
            long long v445 = *(_OWORD *)(v126 - 3);
            *(v444 - 1) = *(v126 - 1);
            *(_OWORD *)(v444 - 3) = v445;
            v444 -= 3;
            v126 -= 3;
          }
          while (v126 != v77);
          if (!v77)
          {
LABEL_503:
            int64_t v77 = v444;
            int v158 = __p[0];
            if (!__p[0]) {
              goto LABEL_116;
            }
            goto LABEL_115;
          }
        }
        operator delete(v77);
        goto LABEL_503;
      }
      if (v442 <= 0xAAAAAAAAAAAAAAALL)
      {
        unsigned int v443 = (char *)operator new(24 * v442);
        goto LABEL_497;
      }
LABEL_505:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_506:
    abort();
  }
  int v473 = 1;
LABEL_33:
  double v58 = fmax(v17, -1.48352986);
  double v59 = v58 * 0.5 + 0.785398163;
  BOOL v60 = v58 <= 1.48352986;
  double v61 = 1.5271631;
  if (v60) {
    double v61 = v59;
  }
  long double v62 = tan(v61);
  unsigned int v63 = vcvtmd_s64_f64((v30 * 0.159154943 + 0.5) * (double)(1 << v451));
  unsigned int v64 = (1 << v451) + ~vcvtmd_s64_f64((log(v62) * 0.159154943 + 0.5) * (double)(1 << v451));
  LOBYTE(v498[0]) = -1;
  BYTE1(v498[0]) = v451;
  HIDWORD(v498[0]) = v64;
  LODWORD(v498[1]) = v63;
  std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)v505);
  uint64_t v65 = *((void *)&v507 + 1);
  unint64_t v66 = *((void *)v505[1] + ((void)v507 + *((void *)&v507 + 1)) / 0xAAuLL)
      + 24 * (((void)v507 + *((void *)&v507 + 1)) % 0xAAuLL);
  *(unsigned char *)unint64_t v66 = -1;
  *(unsigned char *)(v66 + 1) = v451;
  uint64_t v67 = v65 + 1;
  *(_DWORD *)(v66 + 4) = v64;
  *(_DWORD *)(v66 + 8) = v63;
  std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>((uint64_t)v508, (unsigned __int8 *)v498, (uint64_t)v498);
  int v452 = 0;
  if (v67)
  {
LABEL_134:
    unint64_t v460 = (unsigned __int8 *)(v7 + 275);
    v454 = (uint64_t *)(v7 + 248);
    char v185 = (void *)(v7 + 208);
    v449 = (void *)(v7 + 224);
    uint64_t v462 = v7 + 56;
    uint64_t v464 = v7 + 128;
    v469 = (void *)(v7 + 208);
    double v186 = v475 + v456 * v456;
    while (1)
    {
      __int16 v187 = (char *)v505[1];
      uint64_t v188 = v507;
      unint64_t v189 = *((void *)v505[1] + (unint64_t)v507 / 0xAA) + 24 * ((unint64_t)v507 % 0xAA);
      *(_WORD *)v496 = *(_WORD *)v189;
      v497 = *(void **)(v189 + 4);
      *((void *)&v507 + 1) = v67 - 1;
      *(void *)&long long v507 = v507 + 1;
      if ((unint64_t)(v188 + 1) >= 0x154)
      {
        operator delete(*(void **)v505[1]);
        v505[1] = v187 + 8;
        *(void *)&long long v507 = v188 - 169;
      }
      uint64_t v190 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(v185, v496);
      if (v190)
      {
        uint64_t v191 = *(double **)(v7 + 256);
        uint64_t v192 = (uint64_t *)v190[5];
        if (v191 != (double *)v192)
        {
          long long v193 = (uint64_t *)v192[1];
          if (v193 != (uint64_t *)v191)
          {
            uint64_t v194 = *v192;
            *(void *)(v194 + 8) = v193;
            *(void *)v192[1] = v194;
            double v195 = *v191;
            *(void *)(*(void *)&v195 + 8) = v192;
            *(double *)uint64_t v192 = v195;
            *(void *)uint64_t v191 = v192;
            v192[1] = (uint64_t)v191;
            uint64_t v191 = *(double **)(v7 + 256);
          }
        }
        if (*(unsigned char *)(v7 + 48) && v191 != (double *)v454)
        {
          double v197 = v191[5];
          double v196 = v191[6];
          goto LABEL_254;
        }
      }
      uint64_t v198 = *(void *)(v7 + 424);
      double v197 = v470;
      double v196 = v470 + 300.0;
      if (v198)
      {
        (*(void (**)(void **__return_ptr))(*(void *)v198 + 48))(v490);
        double v196 = v470 + 300.0;
        double v197 = v470;
        if (LOBYTE(v490[0]))
        {
          size_t v199 = v490[1];
          double v200 = *(double *)&v491;
          double v196 = v470 + 300.0;
          double v197 = v470;
          if (*(double *)&v491 >= *(double *)&v490[1]) {
            break;
          }
        }
      }
LABEL_254:
      memset(&v494[16], 0, 32);
      uint64_t v258 = 56;
      if (v197 == 0.0 && v196 == 0.0) {
        uint64_t v258 = 128;
      }
      uint64_t v476 = v258;
      if (v197 == 0.0 && v196 == 0.0) {
        uint64_t v259 = v464;
      }
      else {
        uint64_t v259 = v462;
      }
      *(_OWORD *)unint64_t v494 = 0uLL;
      unsigned int v260 = v496[1];
      uint64_t v261 = v496[0];
      LOWORD(v498[0]) = *(_WORD *)v496;
      v477 = v497;
      *(void **)((char *)v498 + 4) = v497;
      *(double *)&v499[8] = v197;
      *(double *)&v499[16] = v196;
      v481 = (uint64_t *)(v259 + 48);
      unint64_t v262 = (void **)(v259 + 8);
      long long v263 = std::__hash_table<std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>,std::__unordered_map_hasher<gdc::TileZBoundsEntry,std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>,gdc::TileZBoundsEntryHash,std::equal_to<gdc::TileZBoundsEntry>,true>,std::__unordered_map_equal<gdc::TileZBoundsEntry,std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>,std::equal_to<gdc::TileZBoundsEntry>,gdc::TileZBoundsEntryHash,true>,std::allocator<std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>>>::find<gdc::TileZBoundsEntry>((void *)(v259 + 8), (double *)v498);
      if (!v263)
      {
        int v264 = HIDWORD(v477);
        int v274 = (int)v477;
        uint64_t v275 = v477;
        goto LABEL_268;
      }
      int v264 = HIDWORD(v477);
      char v265 = *(uint64_t **)(v259 + 56);
      v266 = (uint64_t *)v263[7];
      if (v265 != v266)
      {
        unint64_t v267 = (uint64_t *)v266[1];
        if (v267 != v265)
        {
          uint64_t v268 = *v266;
          *(void *)(v268 + 8) = v267;
          *(void *)v266[1] = v268;
          uint64_t v269 = *v265;
          *(void *)(v269 + 8) = v266;
          uint64_t *v266 = v269;
          uint64_t *v265 = (uint64_t)v266;
          v266[1] = (uint64_t)v265;
          char v265 = *(uint64_t **)(v259 + 56);
        }
        if (v265 != v481) {
          goto LABEL_264;
        }
LABEL_267:
        unsigned int v260 = v496[1];
        int v274 = (int)v497;
        uint64_t v261 = v496[0];
        uint64_t v275 = v497;
LABEL_268:
        v484 = v275;
        double v276 = 1.0 / (double)(1 << v260);
        double v277 = (double)v264;
        int v278 = (1 << v260) + ~v274;
        *(double *)unint64_t v517 = v276 * v277;
        *(double *)&v517[1] = v276 * (double)v278;
        *(double *)long long v518 = v276 + v277 * v276;
        *(double *)&v518[8] = v276 + (double)v278 * v276;
        gdc::GlobeTileUtils::boundsFromMercatorRect((uint64_t)v498, (double *)v517, v197, v196);
        *(_OWORD *)unint64_t v494 = *(_OWORD *)v498;
        *(_OWORD *)&v494[16] = *(_OWORD *)v499;
        *(_OWORD *)&v494[32] = *(_OWORD *)&v499[16];
        *(_OWORD *)v495 = *(_OWORD *)&v499[32];
        uint64_t v478 = *(void *)&v499[32];
        *(_OWORD *)&v495[16] = v500;
        *(_OWORD *)&v495[32] = v501;
        *(void *)&v495[48] = v502;
        LOBYTE(__p[0]) = v261;
        BYTE1(__p[0]) = v260;
        *(void **)((char *)__p + 4) = v484;
        *(double *)&long long v515 = v197;
        *((double *)&v515 + 1) = v196;
        *(void *)long long v518 = *(void *)v499;
        *(_OWORD *)unint64_t v517 = *(_OWORD *)v498;
        *(_OWORD *)&v518[8] = *(_OWORD *)&v494[24];
        *(void *)&v518[24] = *(void *)&v499[24];
        *(_OWORD *)v490 = *(_OWORD *)&v495[8];
        long long v491 = *(_OWORD *)&v495[24];
        long long v492 = *(_OWORD *)&v495[40];
        unint64_t v279 = std::__hash_table<std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>,std::__unordered_map_hasher<gdc::TileZBoundsEntry,std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>,gdc::TileZBoundsEntryHash,std::equal_to<gdc::TileZBoundsEntry>,true>,std::__unordered_map_equal<gdc::TileZBoundsEntry,std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>,std::equal_to<gdc::TileZBoundsEntry>,gdc::TileZBoundsEntryHash,true>,std::allocator<std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>>>::find<gdc::TileZBoundsEntry>((void *)(v259 + 8), (double *)__p);
        if (v279)
        {
          long long v280 = v279;
          unint64_t v281 = (uint64_t *)v279[7];
          uint64_t v282 = *v281;
          *(void *)(v282 + 8) = v281[1];
          *(void *)v281[1] = v282;
          --*(void *)(v259 + 64);
          operator delete(v281);
          std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)v498, (void *)(v259 + 8), v280);
          if (v498[0]) {
            operator delete(v498[0]);
          }
          unsigned int v260 = BYTE1(__p[0]);
          uint64_t v261 = LOBYTE(__p[0]);
          v484 = *(void **)((char *)__p + 4);
          double v196 = *((double *)&v515 + 1);
          double v197 = *(double *)&v515;
        }
        char v283 = (char *)operator new(0xA0uLL);
        v283[16] = v261;
        v283[17] = v260;
        *(void *)(v283 + 20) = v484;
        *(_OWORD *)(v283 + 40) = v515;
        *(_OWORD *)(v283 + 56) = *(_OWORD *)v517;
        *((void *)v283 + 9) = *(void *)v518;
        *((_OWORD *)v283 + 5) = *(_OWORD *)&v518[8];
        *((void *)v283 + 12) = *(void *)&v518[24];
        *((void *)v283 + 13) = v478;
        long long v284 = v491;
        *((_OWORD *)v283 + 7) = *(_OWORD *)v490;
        *((_OWORD *)v283 + 8) = v284;
        *((_OWORD *)v283 + 9) = v492;
        uint64_t v285 = *(void **)(v259 + 56);
        *(void *)char v283 = v481;
        *((void *)v283 + 1) = v285;
        *uint64_t v285 = v283;
        unint64_t v286 = *(void *)(v259 + 64) + 1;
        *(void *)(v259 + 56) = v283;
        *(void *)(v259 + 64) = v286;
        unsigned int v482 = v260;
        unint64_t v287 = (v260
              - 0x61C8864680B583EBLL
              + ((v261 - 0x61C8864680B583EBLL) << 6)
              + ((unint64_t)(v261 - 0x61C8864680B583EBLL) >> 2)) ^ (v261 - 0x61C8864680B583EBLL);
        unint64_t v288 = ((int)v484 - 0x61C8864680B583EBLL + (v287 << 6) + (v287 >> 2)) ^ v287;
        unint64_t v289 = ((SHIDWORD(v484) - 0x61C8864680B583EBLL + (v288 << 6) + (v288 >> 2)) ^ v288) - 0x61C8864680B583EBLL;
        unint64_t v290 = *(void *)&v197 - 0x61C8864680B583EBLL;
        if (v197 == 0.0) {
          unint64_t v290 = 0x9E3779B97F4A7C15;
        }
        unint64_t v291 = (v290 + (v289 << 6) + (v289 >> 2)) ^ v289;
        unint64_t v292 = *(void *)&v196 - 0x61C8864680B583EBLL;
        if (v196 == 0.0) {
          unint64_t v292 = 0x9E3779B97F4A7C15;
        }
        unint64_t v293 = (v292 + (v291 << 6) + (v291 >> 2)) ^ v291;
        unint64_t v294 = *(void *)(v259 + 16);
        if (v294)
        {
          uint8x8_t v295 = (uint8x8_t)vcnt_s8((int8x8_t)v294);
          v295.i16[0] = vaddlv_u8(v295);
          if (v295.u32[0] > 1uLL)
          {
            unint64_t v296 = (v292 + (v291 << 6) + (v291 >> 2)) ^ v291;
            if (v293 >= v294) {
              unint64_t v296 = v293 % v294;
            }
          }
          else
          {
            unint64_t v296 = v293 & (v294 - 1);
          }
          v297 = (uint64_t **)*((void *)*v262 + v296);
          unint64_t v455 = v296;
          if (v297)
          {
            uint64_t v298 = *v297;
            if (v298)
            {
              if (v295.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v300 = v298[1];
                  if (v300 == v293)
                  {
                    if (*((unsigned __int8 *)v298 + 16) == v261
                      && *((unsigned __int8 *)v298 + 17) == v482
                      && *(void **)((char *)v298 + 20) == v484
                      && *((double *)v298 + 5) == v197
                      && *((double *)v298 + 6) == v196)
                    {
                      goto LABEL_304;
                    }
                  }
                  else if ((v300 & (v294 - 1)) != v296)
                  {
                    goto LABEL_305;
                  }
                  uint64_t v298 = (uint64_t *)*v298;
                  if (!v298) {
                    goto LABEL_305;
                  }
                }
              }
              do
              {
                unint64_t v299 = v298[1];
                if (v299 == v293)
                {
                  if (*((unsigned __int8 *)v298 + 16) == v261
                    && *((unsigned __int8 *)v298 + 17) == v482
                    && *(void **)((char *)v298 + 20) == v484
                    && *((double *)v298 + 5) == v197
                    && *((double *)v298 + 6) == v196)
                  {
LABEL_304:
                    uint64_t v7 = v480;
                    uint64_t v301 = v476;
                    goto LABEL_463;
                  }
                }
                else
                {
                  if (v299 >= v294) {
                    v299 %= v294;
                  }
                  if (v299 != v296) {
                    break;
                  }
                }
                uint64_t v298 = (uint64_t *)*v298;
              }
              while (v298);
            }
          }
        }
LABEL_305:
        unint64_t v479 = v293;
        int v302 = (char *)operator new(0x40uLL);
        int8x8_t v303 = (int8x8_t)v294;
        unint64_t v304 = v479;
        long long v305 = v302;
        *(void *)int v302 = 0;
        *((void *)v302 + 1) = v479;
        v302[16] = v261;
        v302[17] = v482;
        *(void *)(v302 + 20) = v484;
        *(_OWORD *)(v302 + 40) = v515;
        *((void *)v302 + 7) = v283;
        float v306 = (float)(unint64_t)(*(void *)(v259 + 32) + 1);
        float v307 = *(float *)(v259 + 40);
        if (v294 && (float)(v307 * (float)v294) >= v306)
        {
          uint64_t v7 = v480;
          unint64_t v304 = v455;
          goto LABEL_362;
        }
        BOOL v308 = (v294 & (v294 - 1)) != 0;
        if (v294 < 3) {
          BOOL v308 = 1;
        }
        unint64_t v309 = v308 | (2 * v294);
        unint64_t v310 = vcvtps_u32_f32(v306 / v307);
        if (v309 <= v310) {
          size_t v311 = v310;
        }
        else {
          size_t v311 = v309;
        }
        if (v311 == 1)
        {
          size_t v311 = 2;
        }
        else if ((v311 & (v311 - 1)) != 0)
        {
          unint64_t v312 = v302;
          size_t prime = std::__next_prime(v311);
          long long v305 = v312;
          unint64_t v304 = v479;
          size_t v311 = prime;
          int8x8_t v303 = *(int8x8_t *)(v259 + 16);
        }
        if (v311 <= *(void *)&v303)
        {
          if (v311 >= *(void *)&v303) {
            goto LABEL_358;
          }
          unint64_t v326 = vcvtps_u32_f32((float)*(unint64_t *)(v259 + 32) / *(float *)(v259 + 40));
          if (*(void *)&v303 < 3uLL
            || (uint8x8_t v327 = (uint8x8_t)vcnt_s8(v303), v327.i16[0] = vaddlv_u8(v327), v327.u32[0] > 1uLL))
          {
            long long v332 = v305;
            int8x8_t v333 = v303;
            unint64_t v326 = std::__next_prime(v326);
            int8x8_t v303 = v333;
            long long v305 = v332;
            unint64_t v304 = v479;
          }
          else
          {
            uint64_t v328 = 1 << -(char)__clz(v326 - 1);
            if (v326 >= 2) {
              unint64_t v326 = v328;
            }
          }
          if (v311 <= v326) {
            size_t v311 = v326;
          }
          if (v311 >= *(void *)&v303) {
            goto LABEL_358;
          }
          if (!v311)
          {
            int64_t v334 = *v262;
            *unint64_t v262 = 0;
            if (v334)
            {
              int64_t v335 = v305;
              operator delete(v334);
              long long v305 = v335;
              unint64_t v304 = v479;
            }
            *(void *)(v259 + 16) = 0;
            goto LABEL_358;
          }
        }
        if (v311 >> 61) {
          goto LABEL_505;
        }
        v314 = v305;
        uint64_t v315 = operator new(8 * v311);
        char v316 = *v262;
        *unint64_t v262 = v315;
        if (v316) {
          operator delete(v316);
        }
        uint64_t v317 = 0;
        *(void *)(v259 + 16) = v311;
        do
          *((void *)*v262 + v317++) = 0;
        while (v311 != v317);
        uint64_t v319 = v259 + 24;
        v318 = *(void **)(v259 + 24);
        unint64_t v304 = v479;
        long long v305 = v314;
        if (!v318) {
          goto LABEL_358;
        }
        size_t v320 = v318[1];
        size_t v321 = v311 - 1;
        if ((v311 & (v311 - 1)) == 0)
        {
          size_t v322 = v320 & v321;
          *((void *)*v262 + v322) = v319;
          while (1)
          {
            unint64_t v323 = (void *)*v318;
            if (!*v318) {
              break;
            }
            size_t v324 = v323[1] & v321;
            if (v324 == v322)
            {
              v318 = (void *)*v318;
            }
            else if (*((void *)*v262 + v324))
            {
              void *v318 = *v323;
              uint64_t v325 = 8 * v324;
              *unint64_t v323 = **(void **)((char *)*v262 + v325);
              **(void **)((char *)*v262 + v325) = v323;
            }
            else
            {
              *((void *)*v262 + v324) = v318;
              v318 = v323;
              size_t v322 = v324;
            }
          }
LABEL_358:
          int8x8_t v303 = *(int8x8_t *)(v259 + 16);
          if ((*(void *)&v303 & (*(void *)&v303 - 1)) != 0)
          {
            uint64_t v7 = v480;
            if (v304 >= *(void *)&v303) {
              v304 %= *(void *)&v303;
            }
          }
          else
          {
            v304 &= *(void *)&v303 - 1;
            uint64_t v7 = v480;
          }
LABEL_362:
          uint64_t v336 = *v262;
          v337 = (void *)*((void *)*v262 + v304);
          if (v337)
          {
            *(void *)long long v305 = *v337;
            uint64_t v301 = v476;
          }
          else
          {
            *(void *)long long v305 = *(void *)(v259 + 24);
            *(void *)(v259 + 24) = v305;
            v336[v304] = v259 + 24;
            uint64_t v301 = v476;
            if (!*(void *)v305) {
              goto LABEL_371;
            }
            unint64_t v338 = *(void *)(*(void *)v305 + 8);
            if ((*(void *)&v303 & (*(void *)&v303 - 1)) != 0)
            {
              if (v338 >= *(void *)&v303) {
                v338 %= *(void *)&v303;
              }
            }
            else
            {
              v338 &= *(void *)&v303 - 1;
            }
            v337 = (char *)*v262 + 8 * v338;
          }
          void *v337 = v305;
LABEL_371:
          ++*(void *)(v259 + 32);
          while (1)
          {
            unint64_t v286 = *(void *)(v259 + 64);
LABEL_463:
            if (v286 <= *(void *)(v7 + v301)) {
              break;
            }
            uint64_t v421 = *(char **)(v259 + 48);
            LOWORD(v498[0]) = *((_WORD *)v421 + 8);
            *(void **)((char *)v498 + 4) = *(void **)(v421 + 20);
            *(_OWORD *)&v499[8] = *(_OWORD *)(v421 + 40);
            *(_OWORD *)&v499[24] = *(_OWORD *)(v421 + 56);
            *(void *)&v499[40] = *((void *)v421 + 9);
            long long v500 = *((_OWORD *)v421 + 5);
            long long v501 = *((_OWORD *)v421 + 6);
            long long v504 = *((_OWORD *)v421 + 9);
            long long v503 = *((_OWORD *)v421 + 8);
            long long v502 = *((_OWORD *)v421 + 7);
            uint64_t v422 = *(void *)v421;
            *(void *)(v422 + 8) = *((void *)v421 + 1);
            **((void **)v421 + 1) = v422;
            *(void *)(v259 + 64) = v286 - 1;
            operator delete(v421);
            int v423 = std::__hash_table<std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>,std::__unordered_map_hasher<gdc::TileZBoundsEntry,std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>,gdc::TileZBoundsEntryHash,std::equal_to<gdc::TileZBoundsEntry>,true>,std::__unordered_map_equal<gdc::TileZBoundsEntry,std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>,std::equal_to<gdc::TileZBoundsEntry>,gdc::TileZBoundsEntryHash,true>,std::allocator<std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>>>::find<gdc::TileZBoundsEntry>((void *)(v259 + 8), (double *)v498);
            if (v423)
            {
              std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&v516, (void *)(v259 + 8), v423);
              if (v516) {
                operator delete(v516);
              }
            }
          }
          goto LABEL_372;
        }
        if (v320 >= v311) {
          v320 %= v311;
        }
        *((void *)*v262 + v320) = v319;
        v329 = (void *)*v318;
        if (!*v318) {
          goto LABEL_358;
        }
        while (1)
        {
          size_t v331 = v329[1];
          if (v331 >= v311) {
            v331 %= v311;
          }
          if (v331 != v320)
          {
            if (!*((void *)*v262 + v331))
            {
              *((void *)*v262 + v331) = v318;
              goto LABEL_344;
            }
            void *v318 = *v329;
            uint64_t v330 = 8 * v331;
            void *v329 = **(void **)((char *)*v262 + v330);
            **(void **)((char *)*v262 + v330) = v329;
            v329 = v318;
          }
          size_t v331 = v320;
LABEL_344:
          v318 = v329;
          v329 = (void *)*v329;
          size_t v320 = v331;
          if (!v329) {
            goto LABEL_358;
          }
        }
      }
      if (v265 == v481) {
        goto LABEL_267;
      }
LABEL_264:
      long long v270 = *(_OWORD *)(v265 + 11);
      long long v271 = *(_OWORD *)(v265 + 9);
      *(_OWORD *)unint64_t v494 = *(_OWORD *)(v265 + 7);
      *(_OWORD *)&v494[16] = v271;
      long long v272 = *(_OWORD *)(v265 + 13);
      *(_OWORD *)&v494[32] = v270;
      *(_OWORD *)v495 = v272;
      long long v273 = *(_OWORD *)(v265 + 17);
      *(_OWORD *)&v495[16] = *(_OWORD *)(v265 + 15);
      *(_OWORD *)&v495[32] = v273;
      *(void *)&v495[48] = v265[19];
LABEL_372:
      unsigned int v339 = v460;
      if (!*(unsigned char *)(v7 + 276)) {
      unsigned int v340 = v496[1];
      }
      BOOL v60 = v496[1] > *v339;
      char v341 = v473;
      if (v60) {
        char v341 = 1;
      }
      if (v341) {
        goto LABEL_379;
      }
      double v342 = (*(double *)&v495[24] - *(double *)&v495[48]) / ((*(double *)&v495[32] - *(double *)&v495[8]) * 0.5);
      __asm { FMOV            V0.2D, #0.5 }
      *(_OWORD *)v498 = _Q0;
      *(void *)unint64_t v499 = 0x3FE0000000000000;
      double v347 = geo::OrientedBox<double,3u,double,double>::pointAt((double *)v494, (double *)v498);
      if ((v456 * v348 + v347 * v458 + v349 * v457.f64[0]) / sqrt((v347 * v347 + v349 * v349 + v348 * v348) * v186) > v342)
      {
LABEL_379:
        double v350 = *(double *)&v494[24];
        long long v351 = *(_OWORD *)&v494[32];
        double v352 = *(double *)v495;
        double v353 = -(*(double *)&v494[16] * *(double *)&v494[32] - *(double *)&v494[8] * *(double *)&v494[40])
             - (*(double *)&v494[16] * *(double *)&v494[32]
              - *(double *)&v494[8] * *(double *)&v494[40]);
        double v354 = -(*(double *)v494 * *(double *)&v494[40] - *(double *)&v494[16] * *(double *)&v494[24])
             - (*(double *)v494 * *(double *)&v494[40]
              - *(double *)&v494[16] * *(double *)&v494[24]);
        double v355 = -(*(double *)&v494[8] * *(double *)&v494[24] - *(double *)v494 * *(double *)&v494[32])
             - (*(double *)&v494[8] * *(double *)&v494[24]
              - *(double *)v494 * *(double *)&v494[32]);
        *(double *)v490 = -(*(double *)v494
                          + v353 * *(double *)v495
                          + v354 * *(double *)&v494[40]
                          - v355 * *(double *)&v494[32]);
        *(double *)&v490[1] = -(v355 * *(double *)&v494[24]
                              - (-(*(double *)&v494[8] - v353 * *(double *)&v494[40])
                               - v354 * *(double *)v495));
        *(double *)&long long v491 = -(*(double *)&v494[16]
                           + v353 * *(double *)&v494[32]
                           + v355 * *(double *)v495
                           - v354 * *(double *)&v494[24]);
        *((double *)&v491 + 1) = -*(double *)&v494[24];
        *(double *)&long long v492 = -*(double *)&v494[32];
        *((double *)&v492 + 1) = -*(double *)&v494[40];
        uint64_t v493 = *(void *)v495;
        geo::Frustum<double>::transformed((double *)v498, v6 + 123, (uint64_t)v490);
        if (geo::Intersect::encloses<double>((double *)v498, (double *)&v495[8])
          || v452
          && (geo::Frustum<double>::transformed((double *)v517, &v512, (uint64_t)v490),
              geo::Intersect::encloses<double>((double *)v517, (double *)&v495[8])))
        {
          if (v473 && *(unsigned char *)(v480 + 272))
          {
            __asm { FMOV            V0.2D, #0.5 }
            *(_OWORD *)unint64_t v517 = _Q0;
            *(void *)long long v518 = 0x3FE0000000000000;
            double v357 = v458 - geo::OrientedBox<double,3u,double,double>::pointAt((double *)v494, (double *)v517);
            double v359 = v457.f64[0] - v358;
            double v361 = v456 - v360;
            double v362 = (*(double *)&v495[32] - *(double *)&v495[8]) * 0.5;
            double v363 = -(v350 * (*(double *)&v351 * -2.0) - v352 * (*((double *)&v351 + 1) + *((double *)&v351 + 1))) * v359
                 - -(*(double *)&v351 * -2.0 * *(double *)&v351
                   + 1.0
                   - (*((double *)&v351 + 1) + *((double *)&v351 + 1)) * *((double *)&v351 + 1))
                 * v357
                 + ((*((double *)&v351 + 1) + *((double *)&v351 + 1)) * v350 + v352 * (*(double *)&v351 * -2.0)) * v361;
            double v364 = v363 - v362;
            if (v363 <= v362) {
              double v364 = 0.0;
            }
            if (v363 < -v362) {
              double v365 = v363 + v362;
            }
            else {
              double v365 = v364;
            }
            double v366 = (*(double *)&v495[48] - *(double *)&v495[24]) * 0.5;
            double v367 = ((v350 + v350) * *(double *)&v351 + v352 * (*((double *)&v351 + 1) * -2.0)) * v357
                 - -(*((double *)&v351 + 1) * -2.0 * *((double *)&v351 + 1) + 1.0 - (v350 + v350) * v350) * v359
                 + -(*((double *)&v351 + 1) * -2.0 * *(double *)&v351 - (v350 + v350) * v352) * v361;
            if (v367 >= -v366)
            {
              double v368 = 0.0;
              if (v367 > v366) {
                double v368 = v367 - v366;
              }
            }
            else
            {
              double v368 = v366 + v367;
            }
            double v387 = (*(double *)&v495[40] - *(double *)&v495[16]) * 0.5;
            double v388 = -(v350 * -2.0 * *((double *)&v351 + 1) - v352 * (*(double *)&v351 + *(double *)&v351)) * v357
                 + ((*(double *)&v351 + *(double *)&v351) * *((double *)&v351 + 1) + v350 * -2.0 * v352) * v359
                 + -((*(double *)&v351 + *(double *)&v351) * *(double *)&v351 + -1.0 - v350 * -2.0 * v350) * v361;
            if (v388 >= -v387)
            {
              double v389 = 0.0;
              if (v388 > v387) {
                double v389 = v388 - v387;
              }
            }
            else
            {
              double v389 = v387 + v388;
            }
            double v390 = sqrt(v365 * v365 + v368 * v368 + v389 * v389) * 0.0000000249532021;
            if (v390 == 0.0)
            {
              unsigned int v391 = *(unsigned __int8 *)(v480 + 274);
            }
            else
            {
              long double v392 = log2(v390 * v390 * v21);
              double v393 = *(double *)(v480 + 16);
              double v394 = v393 + v392 * -0.5;
              LOBYTE(v393) = *(unsigned char *)(v480 + 274);
              unsigned int v391 = (int)fmin(fmax(v394, 0.0), (double)*(unint64_t *)&v393);
            }
            int v395 = v450;
            if (v340 < v451) {
              int v395 = 1;
            }
            if (v340 >= v391 || v395 == 0)
            {
              if (!a4[3]
                || !std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::find<geo::QuadTile>(a4, v496))
              {
                std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>(a3, v496, (uint64_t)v496);
              }
            }
            else
            {
              v397 = v505[1];
              uint64_t v398 = 170 * ((uint64_t)(v506 - (unint64_t)v505[1]) >> 3) - 1;
              int32x2_t v399 = (int32x2_t)v497;
              unsigned __int8 v400 = v496[0];
              if ((void *)v506 == v505[1]) {
                uint64_t v401 = 0;
              }
              else {
                uint64_t v401 = 170 * ((uint64_t)(v506 - (unint64_t)v505[1]) >> 3) - 1;
              }
              uint64_t v403 = *((void *)&v507 + 1);
              uint64_t v402 = v507;
              unint64_t v404 = *((void *)&v507 + 1) + v507;
              if (v401 == *((void *)&v507 + 1) + (void)v507)
              {
                std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)v505);
                v397 = v505[1];
                uint64_t v403 = *((void *)&v507 + 1);
                uint64_t v402 = v507;
                unint64_t v404 = v507 + *((void *)&v507 + 1);
                uint64_t v398 = 170 * ((uint64_t)(v506 - (unint64_t)v505[1]) >> 3) - 1;
              }
              char v405 = v340 + 1;
              int32x2_t v406 = vadd_s32(v399, v399);
              unint64_t v407 = v397[v404 / 0xAA] + 24 * (v404 % 0xAA);
              *(unsigned char *)unint64_t v407 = v400;
              *(unsigned char *)(v407 + 1) = v340 + 1;
              *(int32x2_t *)(v407 + 4) = v406;
              uint64_t v408 = v403 + 1;
              *((void *)&v507 + 1) = v408;
              unint64_t v409 = v408 + v402;
              if (v398 == v408 + v402)
              {
                int32x2_t v485 = v406;
                std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)v505);
                int32x2_t v406 = v485;
                v397 = v505[1];
                uint64_t v408 = *((void *)&v507 + 1);
                uint64_t v402 = v507;
                unint64_t v409 = v507 + *((void *)&v507 + 1);
                uint64_t v398 = 170 * ((uint64_t)(v506 - (unint64_t)v505[1]) >> 3) - 1;
              }
              __int32 v410 = v406.i32[1];
              int v411 = v406.i32[1] | 1;
              unint64_t v412 = v397[v409 / 0xAA] + 24 * (v409 % 0xAA);
              *(unsigned char *)unint64_t v412 = v400;
              *(unsigned char *)(v412 + 1) = v405;
              __int32 v413 = v406.i32[0];
              *(_DWORD *)(v412 + 4) = v406.i32[0];
              *(_DWORD *)(v412 + 8) = v406.i32[1] | 1;
              uint64_t v414 = v408 + 1;
              *((void *)&v507 + 1) = v414;
              unint64_t v415 = v414 + v402;
              if (v398 == v414 + v402)
              {
                std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)v505);
                v397 = v505[1];
                uint64_t v414 = *((void *)&v507 + 1);
                uint64_t v402 = v507;
                unint64_t v415 = v507 + *((void *)&v507 + 1);
                uint64_t v398 = 170 * ((uint64_t)(v506 - (unint64_t)v505[1]) >> 3) - 1;
              }
              int v416 = v413 | 1;
              unint64_t v417 = v397[v415 / 0xAA] + 24 * (v415 % 0xAA);
              *(unsigned char *)unint64_t v417 = v400;
              *(unsigned char *)(v417 + 1) = v405;
              *(_DWORD *)(v417 + 4) = v416;
              *(_DWORD *)(v417 + 8) = v410;
              uint64_t v418 = v414 + 1;
              *((void *)&v507 + 1) = v418;
              unint64_t v419 = v418 + v402;
              if (v398 == v419)
              {
                std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)v505);
                uint64_t v418 = *((void *)&v507 + 1);
                v397 = v505[1];
                unint64_t v419 = v507 + *((void *)&v507 + 1);
              }
              unint64_t v420 = v397[v419 / 0xAA] + 24 * (v419 % 0xAA);
              *(unsigned char *)unint64_t v420 = v400;
              *(unsigned char *)(v420 + 1) = v405;
              *(_DWORD *)(v420 + 4) = v416;
              *(_DWORD *)(v420 + 8) = v411;
              *((void *)&v507 + 1) = v418 + 1;
            }
          }
          else
          {
            if (!a4[3]
              || !std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::find<geo::QuadTile>(a4, v496))
            {
              std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>(a3, v496, (uint64_t)v496);
            }
            for (int i = -1; i != 2; ++i)
            {
              for (int j = -1; j != 2; ++j)
              {
                if (j | i)
                {
                  unsigned __int8 v372 = v496[1];
                  int v373 = ((int)v497 + i + (1 << v496[1])) % (1 << v496[1]);
                  int v374 = ((1 << v496[1]) + j + HIDWORD(v497)) % (1 << v496[1]);
                  LOBYTE(v517[0]) = -1;
                  BYTE1(v517[0]) = v496[1];
                  HIDWORD(v517[0]) = v373;
                  LODWORD(v517[1]) = v374;
                  if (v508[1])
                  {
                    unint64_t v375 = (v373
                          - 0x61C8864680B583EBLL
                          + (((v496[1] + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) << 6)
                          + (((v496[1] + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14) >> 2)) ^ (v496[1]
                                                                                               + 0x53A3C687B1BC605ALL) ^ 0x9E3779B97F4A7D14;
                    unint64_t v376 = (v374 - 0x61C8864680B583EBLL + (v375 << 6) + (v375 >> 2)) ^ v375;
                    uint8x8_t v377 = (uint8x8_t)vcnt_s8((int8x8_t)v508[1]);
                    v377.i16[0] = vaddlv_u8(v377);
                    if (v377.u32[0] > 1uLL)
                    {
                      unint64_t v378 = v376;
                      if ((void *)v376 >= v508[1]) {
                        unint64_t v378 = v376 % (unint64_t)v508[1];
                      }
                    }
                    else
                    {
                      unint64_t v378 = v376 & ((unint64_t)v508[1] - 1);
                    }
                    v379 = (uint64_t **)*((void *)v508[0] + v378);
                    if (v379)
                    {
                      size_t v380 = *v379;
                      if (v380)
                      {
                        if (v377.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            uint64_t v382 = v380[1];
                            if (v376 == v382)
                            {
                              if (__PAIR64__(*((unsigned __int8 *)v380 + 17), *((unsigned __int8 *)v380 + 16)) == __PAIR64__(v496[1], 255)
                                && *((_DWORD *)v380 + 5) == v373
                                && *((_DWORD *)v380 + 6) == v374)
                              {
                                goto LABEL_396;
                              }
                            }
                            else if ((v382 & ((uint64_t)v508[1] - 1)) != v378)
                            {
                              goto LABEL_423;
                            }
                            size_t v380 = (uint64_t *)*v380;
                            if (!v380) {
                              goto LABEL_423;
                            }
                          }
                        }
                        do
                        {
                          unint64_t v381 = v380[1];
                          if (v376 == v381)
                          {
                            if (__PAIR64__(*((unsigned __int8 *)v380 + 17), *((unsigned __int8 *)v380 + 16)) == __PAIR64__(v496[1], 255)
                              && *((_DWORD *)v380 + 5) == v373
                              && *((_DWORD *)v380 + 6) == v374)
                            {
                              goto LABEL_396;
                            }
                          }
                          else
                          {
                            if ((void *)v381 >= v508[1]) {
                              v381 %= (unint64_t)v508[1];
                            }
                            if (v381 != v378) {
                              break;
                            }
                          }
                          size_t v380 = (uint64_t *)*v380;
                        }
                        while (v380);
                      }
                    }
                  }
LABEL_423:
                  BOOL v383 = v505[1];
                  if ((void *)v506 == v505[1]) {
                    uint64_t v384 = 0;
                  }
                  else {
                    uint64_t v384 = 170 * ((uint64_t)(v506 - (unint64_t)v505[1]) >> 3) - 1;
                  }
                  uint64_t v385 = *((void *)&v507 + 1);
                  unint64_t v386 = *((void *)&v507 + 1) + v507;
                  if (v384 == *((void *)&v507 + 1) + (void)v507)
                  {
                    std::deque<geo::QuadTile>::__add_back_capacity((uint64_t)v505);
                    uint64_t v385 = *((void *)&v507 + 1);
                    BOOL v383 = v505[1];
                    unint64_t v386 = v507 + *((void *)&v507 + 1);
                  }
                  unint64_t v371 = v383[v386 / 0xAA] + 24 * (v386 % 0xAA);
                  *(unsigned char *)unint64_t v371 = -1;
                  *(unsigned char *)(v371 + 1) = v372;
                  *(_DWORD *)(v371 + 4) = v373;
                  *(_DWORD *)(v371 + 8) = v374;
                  *((void *)&v507 + 1) = v385 + 1;
                  std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>((uint64_t)v508, (unsigned __int8 *)v517, (uint64_t)v517);
                }
LABEL_396:
                ;
              }
            }
          }
        }
        uint64_t v7 = v480;
      }
      uint64_t v67 = *((void *)&v507 + 1);
      char v185 = v469;
      if (!*((void *)&v507 + 1)) {
        goto LABEL_467;
      }
    }
    if (!*(unsigned char *)(v7 + 48))
    {
LABEL_253:
      double v196 = v200;
      double v197 = *(double *)&v199;
      goto LABEL_254;
    }
    int v201 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(v185, v496);
    if (v201)
    {
      unint64_t v202 = v201;
      v203 = (uint64_t *)v201[5];
      uint64_t v204 = *v203;
      *(void *)(v204 + 8) = v203[1];
      *(void *)v203[1] = v204;
      --*(void *)(v7 + 264);
      operator delete(v203);
      std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)v498, v469, v202);
      if (v498[0]) {
        operator delete(v498[0]);
      }
    }
    char v205 = (char *)operator new(0x38uLL);
    char v206 = v496[1];
    uint64_t v207 = v496[0];
    v205[16] = v496[0];
    v205[17] = v206;
    long long v208 = v497;
    *(void *)(v205 + 20) = v497;
    *((double *)v205 + 5) = *(double *)&v199;
    *((double *)v205 + 6) = v200;
    uint64_t v209 = *(void **)(v7 + 256);
    *(void *)char v205 = v454;
    *((void *)v205 + 1) = v209;
    void *v209 = v205;
    unint64_t v210 = *(void *)(v7 + 264) + 1;
    *(void *)(v7 + 256) = v205;
    *(void *)(v7 + 264) = v210;
    unsigned __int8 v211 = v496[1];
    unint64_t v212 = (v496[1]
          - 0x61C8864680B583EBLL
          + ((v207 - 0x61C8864680B583EBLL) << 6)
          + ((unint64_t)(v207 - 0x61C8864680B583EBLL) >> 2)) ^ (v207 - 0x61C8864680B583EBLL);
    unint64_t v213 = ((int)v208 - 0x61C8864680B583EBLL + (v212 << 6) + (v212 >> 2)) ^ v212;
    unint64_t v214 = (SHIDWORD(v208) - 0x61C8864680B583EBLL + (v213 << 6) + (v213 >> 2)) ^ v213;
    unint64_t v215 = *(void *)(v7 + 216);
    if (v215)
    {
      uint8x8_t v216 = (uint8x8_t)vcnt_s8((int8x8_t)v215);
      v216.i16[0] = vaddlv_u8(v216);
      if (v216.u32[0] > 1uLL)
      {
        uint64_t v67 = (SHIDWORD(v208) - 0x61C8864680B583EBLL + (v213 << 6) + (v213 >> 2)) ^ v213;
        if (v214 >= v215) {
          uint64_t v67 = v214 % v215;
        }
      }
      else
      {
        uint64_t v67 = v214 & (v215 - 1);
      }
      v217 = *(uint64_t ***)(*v469 + 8 * v67);
      if (v217)
      {
        uint64_t v218 = *v217;
        if (v218)
        {
          if (v216.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v220 = v218[1];
              if (v220 == v214)
              {
                if (__PAIR64__(*((unsigned __int8 *)v218 + 17), *((unsigned __int8 *)v218 + 16)) == __PAIR64__(v496[1], v207)
                  && *(void **)((char *)v218 + 20) == v208)
                {
                  goto LABEL_176;
                }
              }
              else if ((v220 & (v215 - 1)) != v67)
              {
                goto LABEL_177;
              }
              uint64_t v218 = (uint64_t *)*v218;
              if (!v218) {
                goto LABEL_177;
              }
            }
          }
          do
          {
            unint64_t v219 = v218[1];
            if (v219 == v214)
            {
              if (__PAIR64__(*((unsigned __int8 *)v218 + 17), *((unsigned __int8 *)v218 + 16)) == __PAIR64__(v496[1], v207)&& *(void **)((char *)v218 + 20) == v208)
              {
LABEL_176:
                uint64_t v7 = v480;
                unint64_t v221 = v469;
                goto LABEL_248;
              }
            }
            else
            {
              if (v219 >= v215) {
                v219 %= v215;
              }
              if (v219 != v67) {
                break;
              }
            }
            uint64_t v218 = (uint64_t *)*v218;
          }
          while (v218);
        }
      }
    }
LABEL_177:
    unint64_t v222 = operator new(0x30uLL);
    *unint64_t v222 = 0;
    v222[1] = v214;
    *((unsigned char *)v222 + 16) = v496[0];
    *((unsigned char *)v222 + 17) = v211;
    *(void *)((char *)v222 + 20) = v497;
    v222[5] = v205;
    float v223 = (float)(unint64_t)(*(void *)(v480 + 232) + 1);
    float v224 = *(float *)(v480 + 240);
    if (v215 && (float)(v224 * (float)v215) >= v223)
    {
      unint64_t v221 = v469;
      goto LABEL_229;
    }
    BOOL v225 = (v215 & (v215 - 1)) != 0;
    if (v215 < 3) {
      BOOL v225 = 1;
    }
    unint64_t v226 = v225 | (2 * v215);
    unint64_t v227 = vcvtps_u32_f32(v223 / v224);
    if (v226 <= v227) {
      size_t v228 = v227;
    }
    else {
      size_t v228 = v226;
    }
    if (v228 == 1)
    {
      size_t v228 = 2;
    }
    else if ((v228 & (v228 - 1)) != 0)
    {
      unsigned int v229 = v222;
      size_t v230 = std::__next_prime(v228);
      unint64_t v222 = v229;
      size_t v228 = v230;
      unint64_t v215 = *(void *)(v480 + 216);
    }
    if (v228 <= v215)
    {
      if (v228 >= v215)
      {
LABEL_215:
        unint64_t v221 = v469;
LABEL_216:
        if ((v215 & (v215 - 1)) != 0)
        {
          if (v214 >= v215) {
            uint64_t v67 = v214 % v215;
          }
          else {
            uint64_t v67 = v214;
          }
        }
        else
        {
          uint64_t v67 = (v215 - 1) & v214;
        }
LABEL_229:
        uint64_t v249 = *v221;
        size_t v250 = *(void **)(*v221 + 8 * v67);
        if (v250)
        {
          *unint64_t v222 = *v250;
        }
        else
        {
          *unint64_t v222 = *v449;
          void *v449 = v222;
          *(void *)(v249 + 8 * v67) = v449;
          if (!*v222) {
            goto LABEL_238;
          }
          unint64_t v251 = *(void *)(*v222 + 8);
          if ((v215 & (v215 - 1)) != 0)
          {
            if (v251 >= v215) {
              v251 %= v215;
            }
          }
          else
          {
            v251 &= v215 - 1;
          }
          size_t v250 = (void *)(*v221 + 8 * v251);
        }
        *size_t v250 = v222;
LABEL_238:
        uint64_t v7 = v480;
        ++*(void *)(v480 + 232);
        while (1)
        {
          unint64_t v210 = *(void *)(v7 + 264);
LABEL_248:
          if (v210 <= *(void *)(v7 + 200)) {
            break;
          }
          v255 = *(char **)(v7 + 248);
          LOWORD(v498[0]) = *((_WORD *)v255 + 8);
          *(void **)((char *)v498 + 4) = *(void **)(v255 + 20);
          *(_OWORD *)&v499[8] = *(_OWORD *)(v255 + 40);
          uint64_t v256 = *(void *)v255;
          *(void *)(v256 + 8) = *((void *)v255 + 1);
          **((void **)v255 + 1) = v256;
          *(void *)(v7 + 264) = v210 - 1;
          operator delete(v255);
          v257 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(v221, (unsigned __int8 *)v498);
          if (v257)
          {
            std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)v517, v221, v257);
            if (v517[0]) {
              operator delete(v517[0]);
            }
          }
        }
        goto LABEL_253;
      }
      unint64_t v243 = vcvtps_u32_f32((float)*(unint64_t *)(v480 + 232) / *(float *)(v480 + 240));
      if (v215 < 3 || (uint8x8_t v244 = (uint8x8_t)vcnt_s8((int8x8_t)v215), v244.i16[0] = vaddlv_u8(v244), v244.u32[0] > 1uLL))
      {
        v252 = v222;
        unint64_t v243 = std::__next_prime(v243);
        unint64_t v222 = v252;
      }
      else
      {
        uint64_t v245 = 1 << -(char)__clz(v243 - 1);
        if (v243 >= 2) {
          unint64_t v243 = v245;
        }
      }
      if (v228 <= v243) {
        size_t v228 = v243;
      }
      if (v228 >= v215)
      {
        unint64_t v215 = *(void *)(v480 + 216);
        goto LABEL_215;
      }
      uint64_t v231 = v480;
      if (!v228)
      {
        unint64_t v221 = v469;
        v253 = (void *)*v469;
        void *v469 = 0;
        if (v253)
        {
          v254 = v222;
          operator delete(v253);
          unint64_t v222 = v254;
        }
        unint64_t v215 = 0;
        *(void *)(v480 + 216) = 0;
        goto LABEL_216;
      }
    }
    else
    {
      uint64_t v231 = v480;
    }
    if (v228 >> 61) {
      goto LABEL_505;
    }
    uint64_t v232 = v222;
    BOOL v233 = operator new(8 * v228);
    int v234 = (void *)*v469;
    void *v469 = v233;
    if (v234) {
      operator delete(v234);
    }
    uint64_t v235 = 0;
    *(void *)(v231 + 216) = v228;
    unint64_t v222 = v232;
    do
      *(void *)(*v469 + 8 * v235++) = 0;
    while (v228 != v235);
    v236 = (void *)*v449;
    if (!*v449)
    {
LABEL_214:
      unint64_t v215 = v228;
      goto LABEL_215;
    }
    size_t v237 = v236[1];
    size_t v238 = v228 - 1;
    if ((v228 & (v228 - 1)) == 0)
    {
      size_t v239 = v237 & v238;
      *(void *)(*v469 + 8 * v239) = v449;
      while (1)
      {
        unsigned int v240 = (void *)*v236;
        if (!*v236) {
          break;
        }
        size_t v241 = v240[1] & v238;
        if (v241 == v239)
        {
          v236 = (void *)*v236;
        }
        else if (*(void *)(*v469 + 8 * v241))
        {
          void *v236 = *v240;
          uint64_t v242 = 8 * v241;
          *unsigned int v240 = **(void **)(*v469 + v242);
          **(void **)(*v469 + v242) = v240;
        }
        else
        {
          *(void *)(*v469 + 8 * v241) = v236;
          v236 = v240;
          size_t v239 = v241;
        }
      }
      goto LABEL_214;
    }
    if (v237 >= v228) {
      v237 %= v228;
    }
    *(void *)(*v469 + 8 * v237) = v449;
    uint64_t v246 = (void *)*v236;
    if (!*v236) {
      goto LABEL_214;
    }
    while (1)
    {
      size_t v248 = v246[1];
      if (v248 >= v228) {
        v248 %= v228;
      }
      if (v248 != v237)
      {
        if (!*(void *)(*v469 + 8 * v248))
        {
          *(void *)(*v469 + 8 * v248) = v236;
          goto LABEL_220;
        }
        void *v236 = *v246;
        uint64_t v247 = 8 * v248;
        *uint64_t v246 = **(void **)(*v469 + v247);
        **(void **)(*v469 + v247) = v246;
        uint64_t v246 = v236;
      }
      size_t v248 = v237;
LABEL_220:
      v236 = v246;
      uint64_t v246 = (void *)*v246;
      size_t v237 = v248;
      if (!v246) {
        goto LABEL_214;
      }
    }
  }
LABEL_467:
  long long v424 = (void **)v505[1];
  int64_t v425 = (void **)v506;
  unint64_t v426 = v506 - (unint64_t)v505[1];
  if ((unint64_t)v506 - (unint64_t)v505[1] >= 0x11)
  {
    do
    {
      uint64_t v427 = *v424++;
      operator delete(v427);
      v426 -= 8;
    }
    while (v426 > 0x10);
  }
  while (v424 != v425)
  {
    uint64_t v428 = *v424++;
    operator delete(v428);
  }
  if (v505[0]) {
    operator delete(v505[0]);
  }
  v429 = v509[0];
  if (v509[0])
  {
    do
    {
      long long v430 = (void *)*v429;
      operator delete(v429);
      v429 = v430;
    }
    while (v430);
  }
  v431 = v508[0];
  v508[0] = 0;
  if (v431) {
    operator delete(v431);
  }
}

void std::__hash_table<geo::QuadTile,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<geo::QuadTile>>::__emplace_unique_key_args<geo::QuadTile,geo::QuadTile const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  unint64_t v8 = (v7
      + ((v6 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v6 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v6 - 0x61C8864680B583EBLL);
  uint64_t v9 = *((int *)a2 + 1);
  uint64_t v10 = *((int *)a2 + 2);
  unint64_t v11 = (v9 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  unint64_t v12 = (v10 + (v11 << 6) + (v11 >> 2) - 0x61C8864680B583EBLL) ^ v11;
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      uint64_t v3 = (v10 + (v11 << 6) + (v11 >> 2) - 0x61C8864680B583EBLL) ^ v11;
      if (v12 >= v13) {
        uint64_t v3 = v12 % v13;
      }
    }
    else
    {
      uint64_t v3 = v12 & (v13 - 1);
    }
    long double v15 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v15)
    {
      double v16 = *v15;
      if (v16)
      {
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v18 = v16[1];
            if (v18 == v12)
            {
              if (__PAIR64__(*((unsigned __int8 *)v16 + 17), *((unsigned __int8 *)v16 + 16)) == __PAIR64__(v7, v6)
                && *(uint64_t *)((char *)v16 + 20) == __PAIR64__(v10, v9))
              {
                return;
              }
            }
            else if ((v18 & (v13 - 1)) != v3)
            {
              goto LABEL_25;
            }
            double v16 = (uint64_t *)*v16;
            if (!v16) {
              goto LABEL_25;
            }
          }
        }
        do
        {
          unint64_t v17 = v16[1];
          if (v17 == v12)
          {
            if (__PAIR64__(*((unsigned __int8 *)v16 + 17), *((unsigned __int8 *)v16 + 16)) == __PAIR64__(v7, v6)
              && *(uint64_t *)((char *)v16 + 20) == __PAIR64__(v10, v9))
            {
              return;
            }
          }
          else
          {
            if (v17 >= v13) {
              v17 %= v13;
            }
            if (v17 != v3) {
              break;
            }
          }
          double v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_25:
  long double v19 = operator new(0x28uLL);
  *long double v19 = 0;
  v19[1] = v12;
  *((_WORD *)v19 + 8) = *(_WORD *)a3;
  *(void *)((char *)v19 + 20) = *(void *)(a3 + 4);
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v13 || (float)(v21 * (float)v13) < v20)
  {
    BOOL v22 = 1;
    if (v13 >= 3) {
      BOOL v22 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v13);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v13 = *(void *)(a1 + 8);
    }
    if (prime > v13) {
      goto LABEL_37;
    }
    if (prime < v13)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v13 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < v13) {
LABEL_37:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13) {
        uint64_t v3 = v12 % v13;
      }
      else {
        uint64_t v3 = v12;
      }
    }
    else
    {
      uint64_t v3 = (v13 - 1) & v12;
    }
  }
  uint64_t v29 = *(void *)a1;
  double v30 = *(void **)(*(void *)a1 + 8 * v3);
  if (v30)
  {
    *long double v19 = *v30;
LABEL_61:
    *double v30 = v19;
    goto LABEL_62;
  }
  *long double v19 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v19;
  *(void *)(v29 + 8 * v3) = a1 + 16;
  if (*v19)
  {
    unint64_t v31 = *(void *)(*v19 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v31 >= v13) {
        v31 %= v13;
      }
    }
    else
    {
      v31 &= v13 - 1;
    }
    double v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
}

void sub_1A185CE10(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t geo::Intersect::encloses<double>(double *a1, double *a2)
{
  double v2 = *a2;
  double v3 = a2[1];
  double v4 = a2[2];
  double v6 = *a1;
  double v5 = a1[1];
  if (*a1 >= 0.0) {
    double v7 = a2[3];
  }
  else {
    double v7 = *a2;
  }
  if (v5 >= 0.0) {
    double v8 = a2[4];
  }
  else {
    double v8 = a2[1];
  }
  double v9 = a1[2];
  double v10 = a1[3];
  if (v9 >= 0.0) {
    double v11 = a2[5];
  }
  else {
    double v11 = a2[2];
  }
  if (v10 + v7 * v6 + v5 * v8 + v9 * v11 < 0.0) {
    return 0;
  }
  double v13 = a1[4];
  double v12 = a1[5];
  double v14 = v13 >= 0.0 ? a2[3] : *a2;
  double v15 = v12 >= 0.0 ? a2[4] : a2[1];
  double v16 = a1[6];
  double v17 = a1[7];
  double v18 = v16 >= 0.0 ? a2[5] : a2[2];
  if (v17 + v14 * v13 + v12 * v15 + v16 * v18 < 0.0) {
    return 0;
  }
  double v20 = a1[8];
  double v19 = a1[9];
  double v21 = v20 >= 0.0 ? a2[3] : *a2;
  double v22 = v19 >= 0.0 ? a2[4] : a2[1];
  double v23 = a1[10];
  double v24 = a1[11];
  double v25 = v23 >= 0.0 ? a2[5] : a2[2];
  if (v24 + v21 * v20 + v19 * v22 + v23 * v25 < 0.0) {
    return 0;
  }
  double v27 = a1[12];
  double v26 = a1[13];
  double v28 = v27 >= 0.0 ? a2[3] : *a2;
  double v29 = v26 >= 0.0 ? a2[4] : a2[1];
  double v31 = a1[14];
  double v30 = a1[15];
  double v32 = v31 >= 0.0 ? a2[5] : a2[2];
  if (v30 + v28 * v27 + v26 * v29 + v31 * v32 < 0.0) {
    return 0;
  }
  double v34 = a1[16];
  double v33 = a1[17];
  double v35 = v34 >= 0.0 ? a2[3] : *a2;
  double v36 = v33 >= 0.0 ? a2[4] : a2[1];
  double v37 = a1[18];
  double v38 = v37 >= 0.0 ? a2[5] : a2[2];
  if (a1[19] + v35 * v34 + v33 * v36 + v37 * v38 < 0.0) {
    return 0;
  }
  double v39 = a1[20];
  double v40 = a1[21];
  double v41 = v39 >= 0.0 ? a2[3] : *a2;
  double v42 = v40 >= 0.0 ? a2[4] : a2[1];
  double v43 = a1[22];
  double v44 = v43 >= 0.0 ? a2[5] : a2[2];
  if (a1[23] + v41 * v39 + v40 * v42 + v43 * v44 < 0.0) {
    return 0;
  }
  if (v6 <= 0.0) {
    double v45 = a2[3];
  }
  else {
    double v45 = *a2;
  }
  double v46 = v10 + v45 * v6;
  if (v5 <= 0.0) {
    double v47 = a2[4];
  }
  else {
    double v47 = a2[1];
  }
  double v48 = v46 + v47 * v5;
  if (v9 <= 0.0) {
    double v49 = a2[5];
  }
  else {
    double v49 = a2[2];
  }
  uint64_t v50 = v48 + v49 * v9 >= 0.0;
  if (v13 <= 0.0) {
    double v51 = a2[3];
  }
  else {
    double v51 = *a2;
  }
  double v52 = v17 + v51 * v13;
  if (v12 <= 0.0) {
    double v53 = a2[4];
  }
  else {
    double v53 = a2[1];
  }
  double v54 = v52 + v53 * v12;
  if (v16 <= 0.0) {
    double v55 = a2[5];
  }
  else {
    double v55 = a2[2];
  }
  if (v54 + v55 * v16 >= 0.0) {
    ++v50;
  }
  if (v20 <= 0.0) {
    double v56 = a2[3];
  }
  else {
    double v56 = *a2;
  }
  double v57 = v24 + v56 * v20;
  if (v19 <= 0.0) {
    double v58 = a2[4];
  }
  else {
    double v58 = a2[1];
  }
  double v59 = v57 + v58 * v19;
  if (v23 <= 0.0) {
    double v60 = a2[5];
  }
  else {
    double v60 = a2[2];
  }
  if (v59 + v60 * v23 >= 0.0) {
    ++v50;
  }
  if (v27 <= 0.0) {
    double v61 = a2[3];
  }
  else {
    double v61 = *a2;
  }
  double v62 = v30 + v61 * v27;
  if (v26 <= 0.0) {
    double v63 = a2[4];
  }
  else {
    double v63 = a2[1];
  }
  double v64 = v62 + v63 * v26;
  if (v31 <= 0.0) {
    double v65 = a2[5];
  }
  else {
    double v65 = a2[2];
  }
  if (v64 + v65 * v31 >= 0.0) {
    ++v50;
  }
  if (v34 <= 0.0) {
    double v66 = a2[3];
  }
  else {
    double v66 = *a2;
  }
  double v67 = a1[19] + v66 * v34;
  if (v33 <= 0.0) {
    double v68 = a2[4];
  }
  else {
    double v68 = a2[1];
  }
  double v69 = v67 + v68 * v33;
  if (v37 <= 0.0) {
    double v70 = a2[5];
  }
  else {
    double v70 = a2[2];
  }
  if (v69 + v70 * v37 >= 0.0) {
    ++v50;
  }
  if (v39 <= 0.0) {
    double v2 = a2[3];
  }
  if (v40 <= 0.0) {
    double v3 = a2[4];
  }
  if (v43 <= 0.0) {
    double v4 = a2[5];
  }
  if (a1[23] + v2 * v39 + v3 * v40 + v4 * v43 >= 0.0) {
    ++v50;
  }
  if (v50 == 6) {
    return 1;
  }
  else {
    return 2;
  }
}

float64x2_t geo::Frustum<double>::transformed(double *a1, const double *a2, uint64_t a3)
{
  double v3 = a2 + 16;
  float64x2x4_t v63 = vld4q_f64(v3);
  float64x2x4_t v58 = v63;
  long long v4 = *(_OWORD *)(a3 + 32);
  long long v5 = *(_OWORD *)(a3 + 40);
  long long v6 = *(_OWORD *)(a3 + 24);
  double v7 = *(double *)(a3 + 48);
  double v8 = a2 + 24;
  float64x2_t v55 = (float64x2_t)vdupq_lane_s64(*(void *)a3, 0);
  double v9 = a2 + 30;
  float64x2x4_t v64 = vld4q_f64(a2);
  double v10 = a2 + 8;
  v63.val[0] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v64.val[1], *(double *)&v5)), v64.val[2], *(double *)&v4);
  float64x2_t v11 = vaddq_f64(v63.val[0], v63.val[0]);
  float64x2_t v12 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v64.val[0], *(double *)&v4)), v64.val[1], *(double *)&v6);
  float64x2_t v13 = vaddq_f64(v12, v12);
  float64x2_t v14 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v64.val[2], *(double *)&v6)), v64.val[0], *(double *)&v5);
  float64x2_t v15 = vaddq_f64(v14, v14);
  v63.val[0] = vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(v64.val[0], v11, v7), v13, *(double *)&v4), v15, *(double *)&v5, 0);
  float64x2_t v16 = vnegq_f64(v64.val[1]);
  v64.val[1] = vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(v64.val[1], v11, *(double *)&v5), v15, v7), v13, *(double *)&v6, 0);
  v63.val[2] = vmlaq_n_f64(vmlaq_n_f64(vmlsq_lane_f64(v64.val[2], v11, *(double *)&v4, 0), v15, *(double *)&v6), v13, v7);
  float64x2_t v17 = vmulq_f64(v64.val[3], v16);
  float64x2_t v53 = (float64x2_t)vdupq_lane_s64(*(void *)(a3 + 8), 0);
  float64x2_t v18 = vmulq_f64(v64.val[3], vnegq_f64(v64.val[0]));
  float64x2_t v19 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v18, *(double *)&v4)), v17, *(double *)&v6);
  float64x2_t v20 = vaddq_f64(v19, v19);
  float64x2_t v21 = vmlsq_lane_f64(vaddq_f64(v53, v17), v20, *(double *)&v6, 0);
  float64x2_t v22 = vmulq_f64(v64.val[3], vnegq_f64(v64.val[2]));
  float64x2_t v23 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v17, *(double *)&v5)), v22, *(double *)&v4);
  float64x2_t v24 = vaddq_f64(v23, v23);
  float64x2_t v25 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v22, *(double *)&v6)), v18, *(double *)&v5);
  float64x2_t v26 = vaddq_f64(v25, v25);
  float64x2x3_t v61 = vld3q_f64(v8);
  float64x2x3_t v59 = vld3q_f64(v9);
  float64x2x3_t v57 = v59;
  float64x2_t v27 = v24;
  v63.val[3] = vmlaq_f64(vnegq_f64(vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(v21, v24, *(double *)&v5), v26, v7), v64.val[1])), v63.val[0], vmlaq_n_f64(vnegq_f64(vmlaq_n_f64(vmlaq_n_f64(vaddq_f64(v55, v18), v20, *(double *)&v4), v24, v7)), v26, *(double *)&v5));
  double v28 = v8 + 12;
  float64x2x3_t v60 = vld3q_f64(v28);
  float64x2x3_t v56 = v60;
  float64x2_t v54 = (float64x2_t)vdupq_lane_s64(*(void *)(a3 + 16), 0);
  float64x2_t v29 = vmlaq_n_f64(vaddq_f64(vmlaq_n_f64(v22, v20, v7), v54), v26, *(double *)&v6);
  v8 += 18;
  float64x2x3_t v62 = vld3q_f64(v8);
  float64x2x4_t v65 = vld4q_f64(v10);
  v63.val[3] = vmlaq_f64(v63.val[3], v63.val[2], vmlaq_n_f64(vnegq_f64(v29), v27, *(double *)&v4));
  v63.val[1] = v64.val[1];
  double v30 = a1;
  vst4q_f64(v30, v63);
  v30 += 8;
  v63.val[0] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v58.val[1], *(double *)&v5)), v58.val[2], *(double *)&v4);
  float64x2_t v31 = vaddq_f64(v63.val[0], v63.val[0]);
  v64.val[0] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v58.val[0], *(double *)&v4)), v58.val[1], *(double *)&v6);
  v64.val[0] = vaddq_f64(v64.val[0], v64.val[0]);
  v60.val[0] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v58.val[2], *(double *)&v6)), v58.val[0], *(double *)&v5);
  v60.val[0] = vaddq_f64(v60.val[0], v60.val[0]);
  v63.val[0] = vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(v58.val[0], v31, v7), v64.val[0], *(double *)&v4), v60.val[0], *(double *)&v5, 0);
  float64x2_t v32 = vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(v58.val[1], v31, *(double *)&v5), v60.val[0], v7), v64.val[0], *(double *)&v6, 0);
  v63.val[2] = vmlaq_n_f64(vmlaq_n_f64(vmlsq_lane_f64(v58.val[2], v31, *(double *)&v4, 0), v60.val[0], *(double *)&v6), v64.val[0], v7);
  float64x2_t v33 = vmulq_f64(v58.val[3], vnegq_f64(v58.val[1]));
  v64.val[0] = vmulq_f64(v58.val[3], vnegq_f64(v58.val[0]));
  v60.val[0] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v64.val[0], *(double *)&v4)), v33, *(double *)&v6);
  v60.val[0] = vaddq_f64(v60.val[0], v60.val[0]);
  v60.val[1] = vmlsq_lane_f64(vaddq_f64(v53, v33), v60.val[0], *(double *)&v6, 0);
  v60.val[2] = vmulq_f64(v58.val[3], vnegq_f64(v58.val[2]));
  float64x2_t v34 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v33, *(double *)&v5)), v60.val[2], *(double *)&v4);
  float64x2_t v35 = vaddq_f64(v34, v34);
  v64.val[1] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v60.val[2], *(double *)&v6)), v64.val[0], *(double *)&v5);
  v64.val[1] = vaddq_f64(v64.val[1], v64.val[1]);
  v63.val[3] = vmlaq_f64(vmlaq_f64(vnegq_f64(vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(v60.val[1], v35, *(double *)&v5), v64.val[1], v7), v32)), v63.val[0], vmlaq_n_f64(vnegq_f64(vmlaq_n_f64(vmlaq_n_f64(vaddq_f64(v55, v64.val[0]), v60.val[0], *(double *)&v4), v35, v7)), v64.val[1], *(double *)&v5)), v63.val[2], vmlaq_n_f64(vnegq_f64(vmlaq_n_f64(vaddq_f64(vmlaq_n_f64(v60.val[2], v60.val[0], v7), v54), v64.val[1], *(double *)&v6)), v35, *(double *)&v4));
  v63.val[1] = v32;
  float64x2_t v36 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v65.val[1], *(double *)&v5)), v65.val[2], *(double *)&v4);
  float64x2_t v37 = vaddq_f64(v36, v36);
  v60.val[0] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v65.val[0], *(double *)&v4)), v65.val[1], *(double *)&v6);
  v60.val[0] = vaddq_f64(v60.val[0], v60.val[0]);
  v60.val[1] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v65.val[2], *(double *)&v6)), v65.val[0], *(double *)&v5);
  v60.val[1] = vaddq_f64(v60.val[1], v60.val[1]);
  v64.val[0] = vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(v65.val[0], v37, v7), v60.val[0], *(double *)&v4), v60.val[1], *(double *)&v5, 0);
  v60.val[2] = vnegq_f64(v65.val[1]);
  v65.val[1] = vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(v65.val[1], v37, *(double *)&v5), v60.val[1], v7), v60.val[0], *(double *)&v6, 0);
  v64.val[2] = vmlaq_n_f64(vmlaq_n_f64(vmlsq_lane_f64(v65.val[2], v37, *(double *)&v4, 0), v60.val[1], *(double *)&v6), v60.val[0], v7);
  float64x2_t v38 = vmulq_f64(v65.val[3], v60.val[2]);
  v60.val[0] = vmulq_f64(v65.val[3], vnegq_f64(v65.val[0]));
  v60.val[1] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v60.val[0], *(double *)&v4)), v38, *(double *)&v6);
  v60.val[1] = vaddq_f64(v60.val[1], v60.val[1]);
  v60.val[2] = vmlsq_lane_f64(vaddq_f64(v53, v38), v60.val[1], *(double *)&v6, 0);
  float64x2_t v39 = vmulq_f64(v65.val[3], vnegq_f64(v65.val[2]));
  float64x2_t v40 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v38, *(double *)&v5)), v39, *(double *)&v4);
  float64x2_t v41 = vaddq_f64(v40, v40);
  float64x2_t v42 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v39, *(double *)&v6)), v60.val[0], *(double *)&v5);
  float64x2_t v43 = vaddq_f64(v42, v42);
  v64.val[3] = vmlaq_f64(vmlaq_f64(vnegq_f64(vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(v60.val[2], v41, *(double *)&v5), v43, v7), v65.val[1])), v64.val[0], vmlaq_n_f64(vnegq_f64(vmlaq_n_f64(vmlaq_n_f64(vaddq_f64(v55, v60.val[0]), v60.val[1], *(double *)&v4), v41, v7)), v43, *(double *)&v5)), v64.val[2], vmlaq_n_f64(vnegq_f64(vmlaq_n_f64(vaddq_f64(vmlaq_n_f64(v39, v60.val[1], v7), v54), v43, *(double *)&v6)), v41, *(double *)&v4));
  v64.val[1] = v65.val[1];
  float64x2_t v44 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v61.val[1], *(double *)&v5)), v61.val[2], *(double *)&v4);
  vst4q_f64(v30, v64);
  v60.val[0] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v61.val[2], *(double *)&v6)), v61.val[0], *(double *)&v5);
  v64.val[0] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v61.val[0], *(double *)&v4)), v61.val[1], *(double *)&v6);
  float64x2_t v45 = vaddq_f64(v44, v44);
  v60.val[0] = vaddq_f64(v60.val[0], v60.val[0]);
  v64.val[0] = vaddq_f64(v64.val[0], v64.val[0]);
  v60.val[1] = vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vaddq_f64(v55, v61.val[0]), v45, v7), v64.val[0], *(double *)&v4), v60.val[0], *(double *)&v5, 0);
  v60.val[2] = vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vaddq_f64(v53, v61.val[1]), v45, *(double *)&v5), v60.val[0], v7), v64.val[0], *(double *)&v6, 0);
  double v46 = a1 + 16;
  vst4q_f64(v46, v63);
  v63.val[0] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v57.val[1], *(double *)&v5)), v57.val[2], *(double *)&v4);
  v63.val[1] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v57.val[2], *(double *)&v6)), v57.val[0], *(double *)&v5);
  v63.val[2] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v57.val[0], *(double *)&v4)), v57.val[1], *(double *)&v6);
  v63.val[0] = vaddq_f64(v63.val[0], v63.val[0]);
  v63.val[1] = vaddq_f64(v63.val[1], v63.val[1]);
  v63.val[2] = vaddq_f64(v63.val[2], v63.val[2]);
  v61.val[0] = vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vaddq_f64(v55, v57.val[0]), v63.val[0], v7), v63.val[2], *(double *)&v4), v63.val[1], *(double *)&v5, 0);
  v61.val[1] = vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vaddq_f64(v53, v57.val[1]), v63.val[0], *(double *)&v5), v63.val[1], v7), v63.val[2], *(double *)&v6, 0);
  float64x2_t v47 = vmlaq_n_f64(vmlaq_n_f64(vmlsq_lane_f64(vaddq_f64(v54, v61.val[2]), v45, *(double *)&v4, 0), v60.val[0], *(double *)&v6), v64.val[0], v7);
  double v48 = a1 + 24;
  vst3q_f64(v48, *(float64x2x3_t *)((char *)&v60 + 16));
  double v49 = a1 + 30;
  v61.val[2] = vmlaq_n_f64(vmlaq_n_f64(vmlsq_lane_f64(vaddq_f64(v54, v57.val[2]), v63.val[0], *(double *)&v4, 0), v63.val[1], *(double *)&v6), v63.val[2], v7);
  v63.val[0] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v56.val[1], *(double *)&v5)), v56.val[2], *(double *)&v4);
  v63.val[1] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v56.val[2], *(double *)&v6)), v56.val[0], *(double *)&v5);
  vst3q_f64(v49, v61);
  v63.val[2] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v56.val[0], *(double *)&v4)), v56.val[1], *(double *)&v6);
  v63.val[0] = vaddq_f64(v63.val[0], v63.val[0]);
  v63.val[1] = vaddq_f64(v63.val[1], v63.val[1]);
  v63.val[2] = vaddq_f64(v63.val[2], v63.val[2]);
  v60.val[0] = vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vaddq_f64(v55, v56.val[0]), v63.val[0], v7), v63.val[2], *(double *)&v4), v63.val[1], *(double *)&v5, 0);
  v60.val[1] = vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vaddq_f64(v53, v56.val[1]), v63.val[0], *(double *)&v5), v63.val[1], v7), v63.val[2], *(double *)&v6, 0);
  v60.val[2] = vmlaq_n_f64(vmlaq_n_f64(vmlsq_lane_f64(vaddq_f64(v54, v56.val[2]), v63.val[0], *(double *)&v4, 0), v63.val[1], *(double *)&v6), v63.val[2], v7);
  uint64_t v50 = a1 + 36;
  vst3q_f64(v50, v60);
  v63.val[0] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v62.val[1], *(double *)&v5)), v62.val[2], *(double *)&v4);
  v63.val[1] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v62.val[2], *(double *)&v6)), v62.val[0], *(double *)&v5);
  v63.val[2] = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(v62.val[0], *(double *)&v4)), v62.val[1], *(double *)&v6);
  float64x2_t result = vaddq_f64(v63.val[0], v63.val[0]);
  v63.val[1] = vaddq_f64(v63.val[1], v63.val[1]);
  v63.val[2] = vaddq_f64(v63.val[2], v63.val[2]);
  v60.val[0] = vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vaddq_f64(v55, v62.val[0]), result, v7), v63.val[2], *(double *)&v4), v63.val[1], *(double *)&v5, 0);
  v60.val[1] = vmlsq_lane_f64(vmlaq_n_f64(vmlaq_n_f64(vaddq_f64(v53, v62.val[1]), result, *(double *)&v5), v63.val[1], v7), v63.val[2], *(double *)&v6, 0);
  v60.val[2] = vmlaq_n_f64(vmlaq_n_f64(vmlsq_lane_f64(vaddq_f64(v54, v62.val[2]), result, *(double *)&v4, 0), v63.val[1], *(double *)&v6), v63.val[2], v7);
  double v52 = a1 + 42;
  vst3q_f64(v52, v60);
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>,std::__unordered_map_hasher<gdc::TileZBoundsEntry,std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>,gdc::TileZBoundsEntryHash,std::equal_to<gdc::TileZBoundsEntry>,true>,std::__unordered_map_equal<gdc::TileZBoundsEntry,std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>,std::equal_to<gdc::TileZBoundsEntry>,gdc::TileZBoundsEntryHash,true>,std::allocator<std::__hash_value_type<gdc::TileZBoundsEntry,std::__list_iterator<std::pair<gdc::TileZBoundsEntry,geo::OrientedBox<double,3u,double,double>>,void *>>>>::find<gdc::TileZBoundsEntry>(void *a1, double *a2)
{
  double v2 = a2[3];
  double v3 = a2[4];
  if (v2 == 0.0) {
    uint64_t v4 = 0x9E3779B97F4A7C15;
  }
  else {
    uint64_t v4 = *((void *)a2 + 3) - 0x61C8864680B583EBLL;
  }
  if (v3 == 0.0) {
    unint64_t v5 = 0x9E3779B97F4A7C15;
  }
  else {
    unint64_t v5 = *(void *)&v3 - 0x61C8864680B583EBLL;
  }
  int8x8_t v6 = (int8x8_t)a1[1];
  if (!*(void *)&v6) {
    return 0;
  }
  uint64_t v7 = *(unsigned __int8 *)a2;
  uint64_t v8 = *((unsigned __int8 *)a2 + 1);
  unint64_t v9 = (v8
      + ((v7 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v7 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v7 - 0x61C8864680B583EBLL);
  uint64_t v10 = *((int *)a2 + 1);
  uint64_t v11 = *((int *)a2 + 2);
  unint64_t v12 = (v10 + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583EBLL) ^ v9;
  uint64_t v13 = (v11 + (v12 << 6) + (v12 >> 2) - 0x61C8864680B583EBLL) ^ v12;
  unint64_t v14 = (v4 + ((v13 - 0x61C8864680B583EBLL) << 6) + ((unint64_t)(v13 - 0x61C8864680B583EBLL) >> 2)) ^ (v13 - 0x61C8864680B583EBLL);
  unint64_t v15 = (v5 + (v14 << 6) + (v14 >> 2)) ^ v14;
  uint8x8_t v16 = (uint8x8_t)vcnt_s8(v6);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] > 1uLL)
  {
    unint64_t v17 = v15;
    if (v15 >= *(void *)&v6) {
      unint64_t v17 = v15 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v17 = v15 & (*(void *)&v6 - 1);
  }
  float64x2_t v18 = *(uint64_t ***)(*a1 + 8 * v17);
  if (!v18) {
    return 0;
  }
  float64x2_t result = *v18;
  if (*v18)
  {
    if (v16.u32[0] < 2uLL)
    {
      uint64_t v20 = *(void *)&v6 - 1;
      while (1)
      {
        uint64_t v22 = result[1];
        if (v22 == v15)
        {
          if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v8, v7)
            && *(uint64_t *)((char *)result + 20) == __PAIR64__(v11, v10)
            && *((double *)result + 5) == v2
            && *((double *)result + 6) == v3)
          {
            return result;
          }
        }
        else if ((v22 & v20) != v17)
        {
          return 0;
        }
        float64x2_t result = (uint64_t *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v21 = result[1];
      if (v21 == v15)
      {
        if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v8, v7)
          && *(uint64_t *)((char *)result + 20) == __PAIR64__(v11, v10)
          && *((double *)result + 5) == v2
          && *((double *)result + 6) == v3)
        {
          return result;
        }
      }
      else
      {
        if (v21 >= *(void *)&v6) {
          v21 %= *(void *)&v6;
        }
        if (v21 != v17) {
          return 0;
        }
      }
      float64x2_t result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(void *a1, unsigned __int8 *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = (v4
      + ((v3 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v3 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v3 - 0x61C8864680B583EBLL);
  uint64_t v6 = *((int *)a2 + 1);
  uint64_t v7 = *((int *)a2 + 2);
  unint64_t v8 = (v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
  unint64_t v9 = (v7 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v2);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    uint64_t v11 = (v7 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
    if (v9 >= *(void *)&v2) {
      uint64_t v11 = v9 % *(void *)&v2;
    }
  }
  else
  {
    uint64_t v11 = v9 & (*(void *)&v2 - 1);
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  float64x2_t result = *v12;
  if (*v12)
  {
    if (v10.u32[0] < 2uLL)
    {
      uint64_t v14 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v16 = result[1];
        if (v16 == v9)
        {
          if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
            && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6))
          {
            return result;
          }
        }
        else if ((v16 & v14) != v11)
        {
          return 0;
        }
        float64x2_t result = (uint64_t *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v15 = result[1];
      if (v15 == v9)
      {
        if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
          && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6))
        {
          return result;
        }
      }
      else
      {
        if (v15 >= *(void *)&v2) {
          v15 %= *(void *)&v2;
        }
        if (v15 != v11) {
          return 0;
        }
      }
      float64x2_t result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

void md::TileSelectionLogic::_elevationBoundsForTile(md::TileSelectionLogic *this, const QuadTile *a2, uint64_t a3)
{
  if (!LOBYTE(a2[15]._xIdx))
  {
    if (!LOBYTE(a2[13]._yIdx))
    {
      *(unsigned char *)this = 1;
      *((void *)this + 1) = 0;
      *((void *)this + 2) = 0;
      return;
    }
    md::DaVinciGroundMetaData::queryMetaTileFromTile((md::DaVinciGroundMetaData *)&v42, *(const QuadTile **)(*(void *)&a2[5]._type + 320));
    if (v42 && (unsigned int v10 = *(unsigned __int16 *)(v42 + 800), v10 != 1))
    {
      int v13 = *(unsigned __int8 *)(v42 + 169);
      int v14 = *(unsigned __int8 *)(a3 + 1) - v13;
      char v15 = *(unsigned char *)(a3 + 1) - v13;
      if (v15)
      {
        int v16 = *(_DWORD *)(a3 + 4) % (*(_DWORD *)(v42 + 172) << v14);
        int v17 = *(_DWORD *)(a3 + 8) % (*(_DWORD *)(v42 + 176) << v14);
        unsigned int v18 = *(unsigned __int8 *)(v42 + 724);
        char v19 = v15 - v18;
        int v20 = (unsigned __int16)v17 >> (v15 - v18);
        int v21 = (unsigned __int16)v16 >> v19;
        if (v18 < v14) {
          int v22 = *(unsigned __int8 *)(v42 + 724);
        }
        else {
          int v22 = v14;
        }
        if (v18 < v14) {
          unsigned __int16 v23 = v20;
        }
        else {
          unsigned __int16 v23 = v17;
        }
        if (v18 < v14) {
          unsigned __int16 v24 = v21;
        }
        else {
          unsigned __int16 v24 = v16;
        }
        int v25 = v18 - v22;
        if ((_BYTE)v18 == (_BYTE)v22)
        {
          int v26 = 0;
          unsigned int v27 = *(unsigned __int16 *)(v42 + 800);
        }
        else
        {
          int v26 = 0;
          unsigned int v27 = *(unsigned __int16 *)(v42 + 800);
          do
          {
            v26 += v27 * v27;
            v27 >>= 1;
            --v25;
          }
          while ((_BYTE)v25);
        }
        unsigned int v29 = v26 + v23 + v27 * v24;
        float v30 = *(float *)(v42 + 716);
        uint64_t v31 = *(void *)(v42 + 776);
        LOBYTE(v7) = *(unsigned char *)(v31 + 2 * v29);
        float v32 = *(float *)(v42 + 720) - v30;
        v28.f32[0] = v30 + (float)((float)((float)v7 * 0.0039216) * v32);
        if (v18 < v14) {
          int v33 = *(unsigned __int8 *)(v42 + 724);
        }
        else {
          int v33 = v14;
        }
        if (v18 < v14) {
          unsigned __int16 v34 = v20;
        }
        else {
          unsigned __int16 v34 = v17;
        }
        if (v18 < v14) {
          unsigned __int16 v35 = v21;
        }
        else {
          unsigned __int16 v35 = v16;
        }
        int v36 = v18 - v33;
        if ((_BYTE)v18 == (_BYTE)v33)
        {
          int v37 = 0;
        }
        else
        {
          int v37 = 0;
          do
          {
            v37 += v10 * v10;
            v10 >>= 1;
            --v36;
          }
          while ((_BYTE)v36);
        }
        LOBYTE(v9) = *(unsigned char *)(v31 + 2 * (v37 + v34 + v10 * v35) + 1);
        v28.f32[1] = v30 + (float)((float)((float)v9 * 0.0039216) * v32);
      }
      else
      {
        float32x2_t v28 = *(float32x2_t *)(v42 + 716);
      }
      int v11 = 0;
      int8x16_t v8 = (int8x16_t)vcvtq_f64_f32(v28);
      unint64_t v12 = (std::__shared_weak_count *)v43.i64[0];
      if (!v43.i64[0]) {
        goto LABEL_44;
      }
    }
    else
    {
      int v11 = 1;
      unint64_t v12 = (std::__shared_weak_count *)v43.i64[0];
      if (!v43.i64[0]) {
        goto LABEL_44;
      }
    }
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      int8x16_t v41 = v8;
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      int8x16_t v8 = v41;
      if (v11) {
        goto LABEL_45;
      }
      goto LABEL_47;
    }
LABEL_44:
    if (v11) {
      goto LABEL_45;
    }
LABEL_47:
    *(void *)&v38.f64[1] = v8.i64[1];
    v38.f64[0] = 0.0;
    int8x16_t v6 = vbicq_s8(v8, (int8x16_t)vcgtq_f64((float64x2_t)v8.u64[0], v38));
    goto LABEL_48;
  }
  uint64_t v5 = *(void *)&a2[15]._type;
  if (v5)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v5 + 48))(&v42);
    if ((_BYTE)v42)
    {
      int8x16_t v6 = v43;
LABEL_48:
      *(int8x16_t *)((char *)this + 8) = v6;
      *(unsigned char *)this = 1;
      return;
    }
LABEL_45:
    *(unsigned char *)this = 0;
    return;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  std::__function::__func<md::GlobeGridBoundsProvider::boundsQuery(void)::{lambda(geo::QuadTile const&)#1},std::allocator<md::GlobeGridBoundsProvider::boundsQuery(void)::{lambda(geo::QuadTile const&)#1}>,geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>::operator()(v39, v40);
}

void *std::__function::__func<md::GlobeGridBoundsProvider::boundsQuery(void)::{lambda(geo::QuadTile const&)#1},std::allocator<md::GlobeGridBoundsProvider::boundsQuery(void)::{lambda(geo::QuadTile const&)#1}>,geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3)
  {
    float64x2_t result = (*(void *(**)(void *__return_ptr))(*(void *)v3 + 48))(v7);
    if (LOBYTE(v7[0])) {
      *(double *)(v2 + 40) = *(double *)(v2 + 40) + (*(double *)&v7[1] - *(double *)(v2 + 40)) * 0.1;
    }
    uint64_t v6 = *(void *)(v2 + 32);
    *(unsigned char *)a2 = 1;
    *(void *)(a2 + 8) = v6;
    *(void *)(a2 + 16) = v6;
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    return (void *)std::__function::__func<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_2,std::allocator<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_2>,geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>::operator()();
  }
  return result;
}

void std::__function::__func<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_2,std::allocator<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_2>,geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, md::TileSelectionLogic *a3@<X8>)
{
}

void std::__function::__func<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_4,std::allocator<md::TileSelectionLogic::TileSelectionLogic(md::World *)::$_4>,geo::optional<gm::Range<double>> ()(geo::QuadTile const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, md::TileSelectionLogic *a3@<X8>)
{
}

void std::deque<geo::QuadTile>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    unsigned int v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_79:
      *(void *)uint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    unsigned int v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v30 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v30 = 1;
      }
      if (!(v30 >> 61))
      {
        unint64_t v31 = v30 >> 2;
        uint64_t v32 = 8 * v30;
        int v33 = (char *)operator new(8 * v30);
        unsigned __int16 v34 = &v33[8 * v31];
        unsigned __int16 v35 = &v33[v32];
        int64_t v37 = v5 - v7;
        BOOL v36 = v5 == v7;
        uint64_t v5 = v34;
        if (!v36)
        {
          uint64_t v5 = &v34[v37 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v38 = v37 - 8;
          if ((unint64_t)(v37 - 8) >= 0x38)
          {
            long double v71 = &v33[8 * v31];
            uint64_t v39 = v71;
            if ((unint64_t)(v71 - v7) >= 0x20)
            {
              uint64_t v72 = (v38 >> 3) + 1;
              uint64_t v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v39 = &v34[v73];
              double v74 = (long long *)(v6 + 3);
              double v75 = v71 + 16;
              uint64_t v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v77 = *v74;
                *(v75 - 1) = *(v74 - 1);
                *double v75 = v77;
                v74 += 2;
                v75 += 2;
                v76 -= 4;
              }
              while (v76);
              if (v72 == (v72 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_77;
              }
              v7 += v73;
            }
          }
          else
          {
            uint64_t v39 = &v33[8 * v31];
          }
          do
          {
            uint64_t v78 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v39 = v78;
            v39 += 8;
          }
          while (v39 != v5);
        }
        goto LABEL_77;
      }
LABEL_88:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    char v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      unsigned int v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_79;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      double v87 = operator new(0xFF0uLL);
      std::__split_buffer<geo::QuadTile *>::push_back((char **)a1, &v87);
      return;
    }
    double v87 = operator new(0xFF0uLL);
    std::__split_buffer<geo::QuadTile *>::push_front((void **)a1, &v87);
    uint64_t v40 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    unsigned int v7 = (char *)(v40 + 1);
    uint64_t v8 = *v40;
    *(void *)(a1 + 8) = v40 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_79;
    }
    unsigned int v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v41 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v41 = 1;
      }
      if (!(v41 >> 61))
      {
        unint64_t v42 = v41 >> 2;
        uint64_t v43 = 8 * v41;
        int v33 = (char *)operator new(8 * v41);
        unsigned __int16 v34 = &v33[8 * v42];
        unsigned __int16 v35 = &v33[v43];
        int64_t v44 = v5 - v7;
        BOOL v36 = v5 == v7;
        uint64_t v5 = v34;
        if (!v36)
        {
          uint64_t v5 = &v34[v44 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v45 = v44 - 8;
          if ((unint64_t)(v44 - 8) >= 0x38)
          {
            uint64_t v79 = &v33[8 * v42];
            double v46 = v79;
            if ((unint64_t)(v79 - v7) >= 0x20)
            {
              uint64_t v80 = (v45 >> 3) + 1;
              uint64_t v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
              double v46 = &v34[v81];
              long double v82 = (long long *)(v40 + 3);
              double v83 = v79 + 16;
              uint64_t v84 = v80 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v85 = *v82;
                *(v83 - 1) = *(v82 - 1);
                _OWORD *v83 = v85;
                v82 += 2;
                v83 += 2;
                v84 -= 4;
              }
              while (v84);
              if (v80 == (v80 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_77;
              }
              v7 += v81;
            }
          }
          else
          {
            double v46 = &v33[8 * v42];
          }
          do
          {
            uint64_t v86 = *(void *)v7;
            v7 += 8;
            *(void *)double v46 = v86;
            v46 += 8;
          }
          while (v46 != v5);
        }
LABEL_77:
        *(void *)a1 = v33;
        *(void *)(a1 + 8) = v34;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v35;
        if (v9)
        {
          operator delete(v9);
          uint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_79;
      }
      goto LABEL_88;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_88;
  }
  int v25 = (char *)operator new(8 * v24);
  int v26 = operator new(0xFF0uLL);
  unsigned int v27 = &v25[8 * v21];
  float32x2_t v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v47 = 1;
      }
      else {
        unint64_t v47 = v20 >> 2;
      }
      if (v47 >> 61) {
        goto LABEL_88;
      }
      unsigned int v27 = (char *)operator new(8 * v47);
      float32x2_t v28 = &v27[8 * v47];
      operator delete(v25);
      uint64_t v19 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      int v25 = v27;
    }
    else
    {
      unint64_t v29 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v29 = v21 + 1;
      }
      v27 -= 8 * (v29 >> 1);
    }
  }
  *(void *)unsigned int v27 = v26;
  double v48 = v27 + 8;
  if (v18 != v19)
  {
    while (v27 != v25)
    {
      double v52 = v27;
      uint64_t v50 = v48;
LABEL_49:
      uint64_t v53 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v52 - 1) = v53;
      double v49 = v52 - 8;
      double v48 = v50;
      unsigned int v27 = v49;
      if (v18 == *(void *)(a1 + 8)) {
        goto LABEL_44;
      }
    }
    if (v48 < v28)
    {
      uint64_t v54 = (v28 - v48) >> 3;
      if (v54 >= -1) {
        unint64_t v55 = v54 + 1;
      }
      else {
        unint64_t v55 = v54 + 2;
      }
      uint64_t v50 = &v48[8 * (v55 >> 1)];
      double v52 = &v27[8 * (v55 >> 1)];
      if (v48 == v27)
      {
        int v25 = v48;
      }
      else
      {
        memmove(&v27[8 * (v55 >> 1)], v27, v48 - v27);
        int v25 = v27;
      }
      goto LABEL_49;
    }
    if (v28 == v27) {
      unint64_t v56 = 1;
    }
    else {
      unint64_t v56 = (v28 - v27) >> 2;
    }
    if (v56 >> 61) {
      goto LABEL_88;
    }
    float64x2x3_t v57 = (char *)operator new(8 * v56);
    int v25 = v57;
    unint64_t v58 = (v56 + 3) >> 2;
    double v52 = &v57[8 * v58];
    uint64_t v50 = v52;
    int64_t v59 = v48 - v27;
    if (v48 != v27)
    {
      uint64_t v50 = &v52[v59 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v60 = v59 - 8;
      float64x2x3_t v61 = &v57[8 * v58];
      float64x2x3_t v62 = v27;
      if (v60 >= 0x38)
      {
        uint64_t v63 = 8 * v58;
        float64x2x3_t v61 = &v57[8 * v58];
        float64x2x3_t v62 = v27;
        if ((unint64_t)(v61 - v27) >= 0x20)
        {
          uint64_t v64 = (v60 >> 3) + 1;
          uint64_t v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
          float64x2x3_t v61 = &v52[v65];
          double v66 = (long long *)(v27 + 16);
          double v67 = &v57[v63 + 16];
          uint64_t v68 = v64 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v69 = *v66;
            *((_OWORD *)v67 - 1) = *(v66 - 1);
            *(_OWORD *)double v67 = v69;
            v66 += 2;
            v67 += 32;
            v68 -= 4;
          }
          while (v68);
          if (v64 == (v64 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_69;
          }
          float64x2x3_t v62 = &v27[v65];
        }
      }
      do
      {
        uint64_t v70 = *(void *)v62;
        v62 += 8;
        *(void *)float64x2x3_t v61 = v70;
        v61 += 8;
      }
      while (v61 != v50);
    }
LABEL_69:
    float32x2_t v28 = &v57[8 * v56];
    operator delete(v27);
    goto LABEL_49;
  }
  double v49 = v27;
  uint64_t v50 = v27 + 8;
LABEL_44:
  double v51 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v49;
  *(void *)(a1 + 16) = v50;
  *(void *)(a1 + 24) = v28;
  if (v51)
  {
    operator delete(v51);
  }
}

void sub_1A185E210(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(unsigned short,grl::codec::PathLayerData const&)>::operator()(uint64_t a1, __int16 a2)
{
  __int16 v6 = a2;
  if (a1) {
    return (*(uint64_t (**)(uint64_t, __int16 *))(*(void *)a1 + 48))(a1, &v6);
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__func<grl::IconRenderer::setupPathLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&)::$_0,std::allocator<grl::IconRenderer::setupPathLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&)::$_0>,void ()(unsigned short,grl::codec::PathLayerData const&)>::operator()(v3, v4, v5);
}

uint64_t std::__function::__func<grl::IconRenderer::setupPathLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&)::$_0,std::allocator<grl::IconRenderer::setupPathLayerRenderer(grl::codec::IconData const&,grl::IconModifiers const&)::$_0>,void ()(unsigned short,grl::codec::PathLayerData const&)>::operator()(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v12 = 0;
  uint64_t v13 = v5;
  uint64_t result = std::vector<grl::LayerStyle,geo::StdAllocator<grl::LayerStyle,grl::Allocator>>::__init_with_size[abi:nn180100]<grl::LayerStyle*,grl::LayerStyle*>((uint64_t)&v10, *(unsigned char **)a3, *(unsigned char **)(a3 + 8), *(void *)(a3 + 8) - *(void *)a3);
  __int16 v14 = *(_WORD *)(a3 + 32);
  int v15 = *(_DWORD *)(a3 + 34);
  int v16 = *(_DWORD *)(a3 + 40);
  int v17 = *(_DWORD *)(a3 + 44);
  long long v18 = *(_OWORD *)(a3 + 48);
  int v7 = *(_DWORD *)(a3 + 68);
  int v19 = *(_DWORD *)(a3 + 64);
  int v20 = v7;
  int v21 = *(_DWORD *)(a3 + 72);
  char v24 = *(unsigned char *)(a3 + 84);
  int v8 = *(_DWORD *)(a3 + 80);
  int v22 = *(_DWORD *)(a3 + 76);
  int v23 = v8;
  int v25 = *(_DWORD *)(a3 + 85);
  uint64_t v26 = *(void *)(a3 + 92);
  int v9 = *(_DWORD *)(a3 + 104);
  int v27 = *(_DWORD *)(a3 + 100);
  int v28 = v9;
  *(void *)&v29[13] = *(void *)(a3 + 121);
  *(_OWORD *)unint64_t v29 = *(_OWORD *)(a3 + 108);
  if (*(void *)(a1[1] + 176) && v29[20])
  {
    if (*(unsigned char *)(a1[2] + 5))
    {
      *((float *)&v18 + 1) = ceilf(*(float *)(a1[3] + 260)) * 60.0;
      DWORD2(v18) = DWORD1(v18);
    }
    operator new();
  }
  if (v10)
  {
    uint64_t v11 = v10;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 40))(v13, v10, v12 - v10);
  }
  return result;
}

grl::ShapeLayerRenderer *grl::ShapeLayerRenderer::ShapeLayerRenderer(grl::ShapeLayerRenderer *this, const grl::codec::PathLayerData *a2)
{
  *((_WORD *)this + 4) = 1;
  *((unsigned char *)this + 10) = 1;
  *(void *)this = &unk_1EF567198;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = 0;
  uint64_t v4 = *((void *)a2 + 3);
  *((void *)this + 4) = 0;
  *((void *)this + 5) = v4;
  std::vector<grl::LayerStyle,geo::StdAllocator<grl::LayerStyle,grl::Allocator>>::__init_with_size[abi:nn180100]<grl::LayerStyle*,grl::LayerStyle*>((uint64_t)this + 16, *(unsigned char **)a2, *((unsigned char **)a2 + 1), *((void *)a2 + 1) - *(void *)a2);
  *((_WORD *)this + 24) = *((_WORD *)a2 + 16);
  *(_DWORD *)((char *)this + 50) = *(_DWORD *)((char *)a2 + 34);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 10);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 11);
  long long v5 = *((_OWORD *)a2 + 3);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 16);
  *((_OWORD *)this + 4) = v5;
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 17);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 18);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 19);
  int v6 = *((_DWORD *)a2 + 20);
  *((unsigned char *)this + 100) = *((unsigned char *)a2 + 84);
  *((_DWORD *)this + 24) = v6;
  *(_DWORD *)((char *)this + 101) = *(_DWORD *)((char *)a2 + 85);
  uint64_t v7 = *(void *)((char *)a2 + 92);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 25);
  *(void *)((char *)this + 108) = v7;
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 26);
  long long v8 = *(_OWORD *)((char *)a2 + 108);
  *(void *)((char *)this + 137) = *(void *)((char *)a2 + 121);
  *(_OWORD *)((char *)this + 124) = v8;
  *((unsigned char *)this + 152) = 0;
  return this;
}

void ___ZN3geo9TaskQueue14queueAsyncTaskENSt3__110shared_ptrINS_4TaskEEEP16dispatch_group_s_block_invoke_28(void *a1)
{
  uint64_t v3 = a1[5];
  unint64_t v2 = a1[6];
  if (v2) {
    dispatch_semaphore_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
  }
  uint64_t v4 = *(NSObject **)(v3 + 16);
  long long v5 = (void *)a1[4];
  dispatch_async(v4, v5);
}

uint64_t md::SettingsLogic::runBeforeLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  v37[0] = &unk_1EF570608;
  v37[1] = a2;
  v35[0] = &unk_1EF570650;
  v35[1] = a2;
  BOOL v36 = v35;
  uint64_t v40 = v39;
  unint64_t v38 = v37;
  v39[0] = &unk_1EF570650;
  v39[1] = a2;
  _ZNSt3__110__function6__funcIZN2md13SettingsLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_15SettingsContextEE3__0NS_9allocatorISH_EEFvvEEclEv((uint64_t)v37);
  if (v36 == v35)
  {
    (*(void (**)(void *))(v35[0] + 32))(v35);
  }
  else if (v36)
  {
    (*(void (**)(void))(*v36 + 40))();
  }
  if (v38 == v37)
  {
    (*(void (**)(void *))(v37[0] + 32))(v37);
  }
  else if (v38)
  {
    (*(void (**)(void))(*v38 + 40))();
  }
  int v6 = *(uint64_t **)(a1 + 120);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (v7 != v8)
  {
    while (*(unsigned char *)v7 != 23)
    {
      v7 += 16;
      if (v7 == v8) {
        goto LABEL_15;
      }
    }
  }
  if (v7 == v8) {
LABEL_15:
  }
    uint64_t v9 = 0;
  else {
    uint64_t v9 = *(void *)(v7 + 8);
  }
  uint64_t v10 = +[VKDebugSettings sharedSettings];
  unsigned int v11 = [v10 showTrafficCasing];
  int v12 = v9 != 0;
  if (v9) {
    unint64_t v13 = v11;
  }
  else {
    unint64_t v13 = 0;
  }

  if (v12 != v13)
  {
    uint64_t v14 = *(void *)(a1 + 120);
    char v34 = 23;
    md::MapEngineSettings::set(v14, &v34, (void *)v13);
  }
  uint64_t v15 = *(void *)(a1 + 120);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a4 + 32));
  *(void *)(a4 + 24) = a4 + 32;
  *(void *)(a4 + 40) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 8) = *(void *)a4;
  int v16 = *(unsigned __int8 **)v15;
  int v17 = *(unsigned __int8 **)(v15 + 8);
  if (*(unsigned __int8 **)v15 != v17)
  {
    do
    {
      geo::linear_map<md::FrameCallback,geo::handle<gdc::tf::Taskflow>,std::equal_to<md::FrameCallback>,std::allocator<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>,std::vector<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>>::insert(a4, v16);
      v16 += 16;
    }
    while (v16 != v17);
  }
  if (*(void *)(v15 + 40))
  {
    long long v18 = *(void **)(v15 + 24);
    int v19 = (void *)(v15 + 32);
    if (v18 == (void *)(v15 + 32))
    {
LABEL_25:
      std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v15 + 32));
      *(void *)(v15 + 32) = 0;
      *(void *)(v15 + 40) = 0;
      *(void *)(v15 + 24) = v19;
      goto LABEL_26;
    }
    while (1)
    {
      uint64_t v21 = *(void *)(a4 + 32);
      uint64_t v22 = a4 + 32;
      if (*(void *)(a4 + 24) == a4 + 32) {
        goto LABEL_37;
      }
      uint64_t v23 = *(void *)(a4 + 32);
      uint64_t v24 = a4 + 32;
      if (v21)
      {
        do
        {
          uint64_t v22 = v23;
          uint64_t v23 = *(void *)(v23 + 8);
        }
        while (v23);
      }
      else
      {
        do
        {
          uint64_t v22 = *(void *)(v24 + 16);
          BOOL v25 = *(void *)v22 == v24;
          uint64_t v24 = v22;
        }
        while (v25);
      }
      unsigned int v26 = *((unsigned __int8 *)v18 + 25);
      if (*(unsigned __int8 *)(v22 + 25) < v26)
      {
LABEL_37:
        if (v21) {
          int v27 = (void *)v22;
        }
        else {
          int v27 = (void *)(a4 + 32);
        }
        if (v21) {
          int v28 = (void *)(v22 + 8);
        }
        else {
          int v28 = (void *)(a4 + 32);
        }
      }
      else
      {
        int v27 = (void *)(a4 + 32);
        int v28 = (void *)(a4 + 32);
        if (v21)
        {
          int v28 = (void *)(a4 + 32);
          while (1)
          {
            while (1)
            {
              int v27 = (void *)v21;
              unsigned int v30 = *(unsigned __int8 *)(v21 + 25);
              if (v26 >= v30) {
                break;
              }
              uint64_t v21 = *v27;
              int v28 = v27;
              if (!*v27) {
                goto LABEL_52;
              }
            }
            if (v30 >= v26) {
              break;
            }
            int v28 = v27 + 1;
            uint64_t v21 = v27[1];
            if (!v21) {
              goto LABEL_52;
            }
          }
        }
      }
      if (*v28)
      {
        unint64_t v29 = (void *)v18[1];
        if (v29) {
          goto LABEL_55;
        }
      }
      else
      {
LABEL_52:
        unint64_t v31 = operator new(0x20uLL);
        v31[25] = *((unsigned char *)v18 + 25);
        *(void *)unint64_t v31 = 0;
        *((void *)v31 + 1) = 0;
        *((void *)v31 + 2) = v27;
        *int v28 = v31;
        uint64_t v32 = **(void **)(a4 + 24);
        if (v32)
        {
          *(void *)(a4 + 24) = v32;
          unint64_t v31 = (unsigned char *)*v28;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a4 + 32), (uint64_t *)v31);
        ++*(void *)(a4 + 40);
        unint64_t v29 = (void *)v18[1];
        if (v29)
        {
          do
          {
LABEL_55:
            int v33 = v29;
            unint64_t v29 = (void *)*v29;
          }
          while (v29);
          goto LABEL_30;
        }
      }
      do
      {
        int v33 = (void *)v18[2];
        BOOL v25 = *v33 == (void)v18;
        long long v18 = v33;
      }
      while (!v25);
LABEL_30:
      long long v18 = v33;
      if (v33 == v19) {
        goto LABEL_25;
      }
    }
  }
LABEL_26:
  *(void *)(a4 + 48) = *(void *)(a1 + 128);
  if (!v40)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v40 + 48))(v40);
  uint64_t result = (uint64_t)v40;
  if (v40 == v39) {
    return (*(uint64_t (**)(void *))(v39[0] + 32))(v39);
  }
  if (v40) {
    return (*(uint64_t (**)(void))(*v40 + 40))();
  }
  return result;
}

void sub_1A185EA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)va);
  _Unwind_Resume(a1);
}

char *geo::linear_map<md::FrameCallback,geo::handle<gdc::tf::Taskflow>,std::equal_to<md::FrameCallback>,std::allocator<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>,std::vector<std::pair<md::FrameCallback,geo::handle<gdc::tf::Taskflow>>>>::insert(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = *(char **)a1;
  long long v5 = *(char **)(a1 + 8);
  uint64_t result = v4;
  if (v4 != v5)
  {
    uint64_t result = v4;
    while (*a2 != *result)
    {
      result += 16;
      if (result == v5) {
        goto LABEL_7;
      }
    }
  }
  if (result == v5)
  {
LABEL_7:
    unint64_t v7 = *(void *)(a1 + 16);
    if ((unint64_t)v5 >= v7)
    {
      uint64_t v9 = (v5 - v4) >> 4;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 60) {
        abort();
      }
      uint64_t v11 = v7 - (void)v4;
      if (v11 >> 3 > v10) {
        unint64_t v10 = v11 >> 3;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12)
      {
        if (v12 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v13 = (char *)operator new(16 * v12);
      }
      else
      {
        unint64_t v13 = 0;
      }
      uint64_t v14 = &v13[16 * v9];
      *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
      uint64_t v8 = v14 + 16;
      if (v4 != v5)
      {
        do
        {
          *((_OWORD *)v14 - 1) = *((_OWORD *)v5 - 1);
          v14 -= 16;
          v5 -= 16;
        }
        while (v5 != v4);
        uint64_t v4 = *(char **)a1;
      }
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = &v13[16 * v12];
      if (v4) {
        operator delete(v4);
      }
    }
    else
    {
      *(_OWORD *)long long v5 = *(_OWORD *)a2;
      uint64_t v8 = v5 + 16;
    }
    *(void *)(a1 + 8) = v8;
    return (char *)(v8 - 1);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN2md13SettingsLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_15SettingsContextEE3__1NS_9allocatorISH_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  unint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)long long v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "SettingsLogic", "", v5, 2u);
  }
}

void _ZNSt3__110__function6__funcIZN2md13SettingsLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJEEESA_EE20ResolvedDependenciesERNS2_15SettingsContextEE3__0NS_9allocatorISH_EEFvvEEclEv(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  unint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)long long v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SettingsLogic", "", v5, 2u);
  }
}

void md::GEOFlyoverTileResourceFetcher::configurationDidChange(md::GEOFlyoverTileResourceFetcher *this)
{
  md::TiledGEOResourceFetcher::configurationDidChange(this);
  if (*((_DWORD *)this + 139) == 15
    && ([MEMORY[0x1E4F64500] sharedConfiguration],
        unint64_t v2 = objc_claimAutoreleasedReturnValue(),
        [v2 countryCode],
        uint64_t v3 = objc_claimAutoreleasedReturnValue(),
        int v4 = [v3 isEqualToString:@"CN"],
        v3,
        v2,
        v4))
  {
    if (!*((unsigned char *)this + 592)) {
      *((unsigned char *)this + 592) = 1;
    }
    *(void *)((char *)this + 596) = 0x1000000001;
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
  }
  *((unsigned char *)this + 618) = v5;
}

void sub_1A185EEF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void gdc::ResourceManager::addResourceFetcher<md::GEOVectorTileResourceFetcher,void,GEOApplicationAuditToken * {__strong},GEOTileSetStyle,unsigned short,float,std::shared_ptr<md::TaskContext>>(uint64_t a1, uint64_t a2, void *a3)
{
}

void sub_1A185F07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, char a11)
{
  if (a10) {
    (*(void (**)(void))(*(void *)a10 + 8))();
  }

  _Unwind_Resume(a1);
}

void gdc::ResourceManager::addResourceFetcher(uint64_t a1, uint64_t *a2)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  (*(void (**)(void))(*(void *)*a2 + 104))();
  char v5 = *(void **)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 24);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v9 = (char *)v5 - v8;
    uint64_t v10 = ((uint64_t)v5 - v8) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      abort();
    }
    uint64_t v11 = v4 - v8;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      if (v13 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v14 = (char *)operator new(8 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v10];
    int v16 = &v14[8 * v13];
    uint64_t v17 = *a2;
    *a2 = 0;
    *(void *)uint64_t v15 = v17;
    unint64_t v7 = v15 + 8;
    long long v18 = *(char **)(a1 + 8);
    int v19 = *(char **)(a1 + 16);
    if (v19 == v18)
    {
      *(void *)(a1 + 8) = v15;
      *(void *)(a1 + 16) = v7;
      *(void *)(a1 + 24) = v16;
    }
    else
    {
      unint64_t v20 = v19 - v18 - 8;
      if (v20 <= 0x77
        || &v19[-(v20 & 0xFFFFFFFFFFFFFFF8) - 8] < v15 && &v9[(void)v14 - (v20 & 0xFFFFFFFFFFFFFFF8) - 8] < v19)
      {
        goto LABEL_137;
      }
      uint64_t v21 = (v20 >> 3) + 1;
      uint64_t v22 = &v14[8 * v10 - 16];
      uint64_t v23 = v19 - 32;
      uint64_t v24 = v21 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v26 = *(_OWORD *)v23;
        long long v25 = *((_OWORD *)v23 + 1);
        *(_OWORD *)uint64_t v23 = 0uLL;
        *((_OWORD *)v23 + 1) = 0uLL;
        v23 -= 32;
        *((_OWORD *)v22 - 1) = v26;
        *(_OWORD *)uint64_t v22 = v25;
        v22 -= 32;
        v24 -= 4;
      }
      while (v24);
      v15 -= 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
      v19 -= 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
      if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_137:
        do
        {
          uint64_t v27 = *((void *)v19 - 1);
          v19 -= 8;
          *(void *)int v19 = 0;
          *((void *)v15 - 1) = v27;
          v15 -= 8;
        }
        while (v19 != v18);
      }
      int v19 = *(char **)(a1 + 8);
      int v28 = *(char **)(a1 + 16);
      *(void *)(a1 + 8) = v15;
      *(void *)(a1 + 16) = v7;
      *(void *)(a1 + 24) = v16;
      while (v28 != v19)
      {
        uint64_t v30 = *((void *)v28 - 1);
        v28 -= 8;
        uint64_t v29 = v30;
        *(void *)int v28 = 0;
        if (v30) {
          (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
        }
      }
    }
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    uint64_t v6 = *a2;
    *a2 = 0;
    *char v5 = v6;
    unint64_t v7 = v5 + 1;
  }
  *(void *)(a1 + 16) = v7;
  uint64_t v31 = *(v7 - 1);
  std::unordered_set<unsigned short>::unordered_set((uint64_t)&v71, v31 + 64);
  uint64_t v32 = (unsigned __int16 *)__p;
  if (__p)
  {
    while (1)
    {
      int v33 = *(char **)(a1 + 32);
      char v34 = *(char **)(a1 + 40);
      if (v33 != v34)
      {
        int v35 = v32[8];
        while (v35 != *(unsigned __int16 *)v33)
        {
          v33 += 16;
          if (v33 == v34) {
            goto LABEL_38;
          }
        }
      }
      if (v33 == v34)
      {
        LOWORD(v35) = v32[8];
LABEL_38:
        LOWORD(v81[0]) = v35;
        v81[1] = 0;
        int v33 = geo::linear_map<unsigned short,gdc::ResourceFetcher *,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,gdc::ResourceFetcher *>>,std::vector<std::pair<unsigned short,gdc::ResourceFetcher *>>>::insert(a1 + 32, (unsigned __int16 *)v81);
      }
      *((void *)v33 + 1) = v31;
      uint64_t v70 = 0;
      BOOL v36 = *(unsigned __int16 **)(a1 + 56);
      int64_t v37 = *(unsigned __int16 **)(a1 + 64);
      if (v36 != v37)
      {
        while (v32[8] != *v36)
        {
          v36 += 12;
          if (v36 == v37) {
            goto LABEL_47;
          }
        }
      }
      if (v36 == v37)
      {
LABEL_47:
        uint64_t v41 = (char *)operator new(0x1C0uLL);
        *((void *)v41 + 1) = 0;
        *((void *)v41 + 2) = 0;
        *(void *)uint64_t v41 = &unk_1EF582CC0;
        unint64_t v42 = v41 + 24;
        *((void *)v41 + 6) = 0;
        *((void *)v41 + 10) = 0;
        *((void *)v41 + 14) = 0;
        *((void *)v41 + 18) = 0;
        *((void *)v41 + 19) = 850045863;
        *((_OWORD *)v41 + 10) = 0u;
        *((_OWORD *)v41 + 11) = 0u;
        *((_OWORD *)v41 + 12) = 0u;
        *((_OWORD *)v41 + 13) = 0u;
        *((_OWORD *)v41 + 14) = 0u;
        *((_OWORD *)v41 + 15) = 0u;
        *((_OWORD *)v41 + 16) = 0u;
        *((_OWORD *)v41 + 17) = 0u;
        *((_OWORD *)v41 + 18) = 0u;
        *((_OWORD *)v41 + 19) = 0u;
        *((_DWORD *)v41 + 80) = 1065353216;
        *(_OWORD *)(v41 + 328) = 0u;
        *(_OWORD *)(v41 + 344) = 0u;
        *((_DWORD *)v41 + 90) = 1065353216;
        *((void *)v41 + 46) = v41 + 368;
        *((void *)v41 + 47) = v41 + 368;
        *((_OWORD *)v41 + 24) = 0u;
        *((_OWORD *)v41 + 25) = 0u;
        *((void *)v41 + 52) = 0;
        *((_DWORD *)v41 + 106) = 1065353216;
        *((void *)v41 + 54) = 0;
        *((void *)v41 + 55) = 0;
        size_t prime = std::__next_prime(0x14uLL);
        unint64_t v44 = prime;
        int8x8_t v45 = *(int8x8_t *)(v41 + 400);
        if (prime > *(void *)&v45) {
          goto LABEL_78;
        }
        if (prime < *(void *)&v45)
        {
          unint64_t v46 = vcvtps_u32_f32((float)*((unint64_t *)v41 + 52) / *((float *)v41 + 106));
          if (*(void *)&v45 < 3uLL || (uint8x8_t v47 = (uint8x8_t)vcnt_s8(v45), v47.i16[0] = vaddlv_u8(v47), v47.u32[0] > 1uLL))
          {
            unint64_t v46 = std::__next_prime(v46);
          }
          else
          {
            uint64_t v48 = 1 << -(char)__clz(v46 - 1);
            if (v46 >= 2) {
              unint64_t v46 = v48;
            }
          }
          if (v44 <= v46) {
            unint64_t v44 = v46;
          }
          if (v44 < *(void *)&v45) {
LABEL_78:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)(v41 + 392), v44);
        }
        *((void *)v41 + 54) = v41 + 368;
        unint64_t v56 = vcvtps_u32_f32(20.0 / *((float *)v41 + 80));
        if (v56 == 1)
        {
          unint64_t v56 = 2;
        }
        else if ((v56 & (v56 - 1)) != 0)
        {
          unint64_t v56 = std::__next_prime(v56);
        }
        int8x8_t v57 = *(int8x8_t *)(v41 + 296);
        if (v56 > *(void *)&v57) {
          goto LABEL_94;
        }
        if (v56 < *(void *)&v57)
        {
          unint64_t v58 = vcvtps_u32_f32((float)*((unint64_t *)v41 + 39) / *((float *)v41 + 80));
          if (*(void *)&v57 < 3uLL || (uint8x8_t v59 = (uint8x8_t)vcnt_s8(v57), v59.i16[0] = vaddlv_u8(v59), v59.u32[0] > 1uLL))
          {
            unint64_t v58 = std::__next_prime(v58);
          }
          else
          {
            uint64_t v60 = 1 << -(char)__clz(v58 - 1);
            if (v58 >= 2) {
              unint64_t v58 = v60;
            }
          }
          if (v56 <= v58) {
            unint64_t v56 = v58;
          }
          if (v56 < *(void *)&v57) {
LABEL_94:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)(v41 + 288), v56);
        }
        uint64_t v70 = (std::__shared_weak_count *)v41;
        uint64_t v61 = v32[8];
        v79[0] = &unk_1EF57A4A8;
        v79[1] = a1;
        v79[2] = v61;
        uint64_t v80 = v79;
        gdc::ResourceStore::setNewResourceNotification((uint64_t)v42, v79);
        if (v80 == v79)
        {
          (*(void (**)(void *))(v79[0] + 32))(v79);
        }
        else if (v80)
        {
          (*(void (**)(void))(*v80 + 40))();
        }
        uint64_t v62 = v32[8];
        v77[0] = &unk_1EF57A4F0;
        v77[1] = a1;
        v77[2] = v62;
        uint64_t v78 = v77;
        gdc::ResourceStore::setRetryResourceNotification((uint64_t)v42, v77);
        if (v78 == v77)
        {
          (*(void (**)(void *))(v77[0] + 32))(v77);
        }
        else if (v78)
        {
          (*(void (**)(void))(*v78 + 40))();
        }
        v75[0] = &unk_1EF57A538;
        v75[1] = a1;
        uint64_t v76 = v75;
        gdc::ResourceStore::setArrivedResourceNotification(v42, v75);
        if (v76 == v75)
        {
          (*(void (**)(void *))(v75[0] + 32))(v75);
        }
        else if (v76)
        {
          (*(void (**)(void))(*v76 + 40))();
        }
        v73[0] = &unk_1EF57A580;
        v73[1] = a1;
        double v74 = v73;
        long double v82 = v81;
        std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_3,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::unordered_map<gdc::ResourceKey,gdc::Error,gdc::ResourceKeyHash,std::equal_to<std::unordered_map>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_3<std::pair<std::unordered_map const,gdc::ResourceKey>>> const&)>::__clone((uint64_t)v73, v81);
        std::__function::__value_func<void ()(std::unordered_map<gdc::ResourceKey,gdc::Error,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,gdc::Error>>> const&)>::swap[abi:nn180100](v81, (void *)v41 + 15);
        if (v82 == v81)
        {
          (*(void (**)(void *))(v81[0] + 32))(v81);
        }
        else if (v82)
        {
          (*(void (**)(void))(*v82 + 40))();
        }
        if (v74 == v73)
        {
          (*(void (**)(void *))(v73[0] + 32))(v73);
        }
        else if (v74)
        {
          (*(void (**)(void))(*v74 + 40))();
        }
        uint64_t v63 = geo::linear_map<unsigned short,std::shared_ptr<gdc::ResourceStore>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>,std::vector<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>>::operator[]((unsigned __int16 **)(a1 + 56), v32[8]);
        atomic_fetch_add_explicit((atomic_ullong *volatile)v41 + 1, 1uLL, memory_order_relaxed);
        uint64_t v64 = (std::__shared_weak_count *)*((void *)v63 + 1);
        *(void *)uint64_t v63 = v42;
        *((void *)v63 + 1) = v41;
        if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
        uint64_t v39 = v41 + 24;
        uint64_t v40 = v32[8];
        if (v41 == (char *)-24)
        {
LABEL_55:
          uint64_t v50 = *(unsigned __int16 **)(v31 + 16);
          double v49 = *(unsigned __int16 **)(v31 + 24);
          if (v50 != v49)
          {
            while (v40 != *v50)
            {
              v50 += 12;
              if (v50 == v49) {
                goto LABEL_123;
              }
            }
          }
          if (v50 != v49)
          {
            if (v50 + 12 != v49)
            {
              do
              {
                double v51 = v50;
                unsigned __int16 *v50 = v50[12];
                long long v52 = *((_OWORD *)v50 + 2);
                *((void *)v50 + 4) = 0;
                *((void *)v50 + 5) = 0;
                uint64_t v53 = (std::__shared_weak_count *)*((void *)v50 + 2);
                *(_OWORD *)(v50 + 4) = v52;
                if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *, uint64_t))v53->__on_zero_shared)(v53, v40);
                  std::__shared_weak_count::__release_weak(v53);
                }
                v50 += 12;
              }
              while (v51 + 24 != v49);
              double v49 = *(unsigned __int16 **)(v31 + 24);
            }
            while (v49 != v50)
            {
              uint64_t v54 = (std::__shared_weak_count *)*((void *)v49 - 1);
              if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *, uint64_t))v54->__on_zero_shared)(v54, v40);
                std::__shared_weak_count::__release_weak(v54);
              }
              v49 -= 12;
            }
            *(void *)(v31 + 24) = v50;
            unint64_t v55 = v70;
            if (!v70) {
              goto LABEL_30;
            }
LABEL_124:
            if (!atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *, uint64_t))v55->__on_zero_shared)(v55, v40);
              std::__shared_weak_count::__release_weak(v55);
            }
            goto LABEL_30;
          }
LABEL_123:
          unint64_t v55 = v70;
          if (v70) {
            goto LABEL_124;
          }
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v39 = (char *)*((void *)v36 + 1);
        unint64_t v38 = (std::__shared_weak_count *)*((void *)v36 + 2);
        if (v38)
        {
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v70 = v38;
          uint64_t v40 = v32[8];
          if (!v39) {
            goto LABEL_55;
          }
        }
        else
        {
          uint64_t v40 = v32[8];
          if (!v39) {
            goto LABEL_55;
          }
        }
      }
      uint64_t v65 = geo::linear_map<unsigned short,std::shared_ptr<gdc::ResourceStore>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>,std::vector<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>>::operator[]((unsigned __int16 **)(v31 + 16), v40);
      if (v70) {
        atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      double v66 = (std::__shared_weak_count *)*((void *)v65 + 1);
      *(void *)uint64_t v65 = v39;
      *((void *)v65 + 1) = v70;
      if (!v66 || atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_123;
      }
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
      unint64_t v55 = v70;
      if (v70) {
        goto LABEL_124;
      }
LABEL_30:
      uint64_t v32 = *(unsigned __int16 **)v32;
      if (!v32)
      {
        double v67 = __p;
        if (__p)
        {
          do
          {
            uint64_t v68 = (void *)*v67;
            operator delete(v67);
            double v67 = v68;
          }
          while (v68);
        }
        break;
      }
    }
  }
  long long v69 = v71;
  long double v71 = 0;
  if (v69) {
    operator delete(v69);
  }
}

void sub_1A185FB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

unsigned __int16 *geo::linear_map<unsigned short,std::shared_ptr<gdc::ResourceStore>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>,std::vector<std::pair<unsigned short,std::shared_ptr<gdc::ResourceStore>>>>::operator[](unsigned __int16 **a1, unsigned __int16 a2)
{
  unint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1;
  if (*a1 != v5)
  {
    uint64_t v6 = *a1;
    while (*v6 != a2)
    {
      v6 += 12;
      if (v6 == v5) {
        goto LABEL_7;
      }
    }
  }
  if (v6 == v5)
  {
LABEL_7:
    uint64_t v6 = *a1;
    if (v4 != v5)
    {
      uint64_t v6 = *a1;
      while (*v6 != a2)
      {
        v6 += 12;
        if (v6 == v5) {
          goto LABEL_13;
        }
      }
    }
    if (v6 == v5)
    {
LABEL_13:
      uint64_t v7 = a1[2];
      if (v5 >= v7)
      {
        unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)v4) >> 3) + 1;
        if (v8 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v4) >> 3);
        if (2 * v9 > v8) {
          unint64_t v8 = 2 * v9;
        }
        if (v9 >= 0x555555555555555) {
          unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v10 = v8;
        }
        if (v10 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v11 = (char *)operator new(24 * v10);
        uint64_t v6 = (unsigned __int16 *)&v11[8 * (((char *)v5 - (char *)v4) >> 3)];
        unsigned __int16 *v6 = a2;
        uint64_t v12 = (unsigned __int16 *)&v11[24 * v10];
        *((void *)v6 + 1) = 0;
        *((void *)v6 + 2) = 0;
        unint64_t v13 = v6 + 12;
        if (v4 == v5)
        {
          *a1 = v6;
          a1[1] = v13;
          a1[2] = v12;
        }
        else
        {
          uint64_t v14 = &v11[8 * (((char *)v5 - (char *)v4) >> 3)];
          do
          {
            __int16 v15 = *(v5 - 12);
            v5 -= 12;
            *((_WORD *)v14 - 12) = v15;
            v14 -= 24;
            *(_OWORD *)(v14 + 8) = *(_OWORD *)(v5 + 4);
            *((void *)v5 + 1) = 0;
            *((void *)v5 + 2) = 0;
          }
          while (v5 != v4);
          unint64_t v4 = *a1;
          int v16 = a1[1];
          *a1 = (unsigned __int16 *)v14;
          a1[1] = v13;
          for (a1[2] = v12; v16 != v4; v16 -= 12)
          {
            uint64_t v17 = (std::__shared_weak_count *)*((void *)v16 - 1);
            if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
        }
        if (v4) {
          operator delete(v4);
        }
        a1[1] = v13;
      }
      else
      {
        *uint64_t v5 = a2;
        *((void *)v5 + 1) = 0;
        *((void *)v5 + 2) = 0;
        a1[1] = v5 + 12;
        uint64_t v6 = v5;
      }
    }
  }
  return v6 + 4;
}

void sub_1A185FE38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  md::components::Material::~Material((md::components::Material *)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_3,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::unordered_map<gdc::ResourceKey,gdc::Error,gdc::ResourceKeyHash,std::equal_to<std::unordered_map>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_3<std::pair<std::unordered_map const,gdc::ResourceKey>>> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57A580;
  a2[1] = v2;
  return result;
}

void md::TiledGEOResourceFetcher::configurationDidChange(md::TiledGEOResourceFetcher *this)
{
  uint64_t v2 = [MEMORY[0x1E4F64918] modernManager];
  id v3 = *((id *)this + 64);
  id v47 = [v2 activeTileGroupForCurrentOfflineModeForAuditToken:v3];

  if (v47)
  {
    unint64_t v4 = [v47 activeTileSetForTileType:*((unsigned int *)this + 139) scale:(*(uint64_t (**)(md::TiledGEOResourceFetcher *))(*(void *)this + 136))(this)];
    uint64_t v5 = v4;
    if (!v4 || ([v4 hasBaseURL] & 1) == 0 && *((_DWORD *)this + 139) == 84)
    {
      uint64_t v6 = (void *)*((void *)this + 76);
      *((void *)this + 76) = 0;

      uint64_t v7 = (void *)*((void *)this + 70);
      *((void *)this + 70) = 0;

      *((void *)this + 72) = *((void *)this + 71);
      if (*((unsigned char *)this + 592)) {
        *((unsigned char *)this + 592) = 0;
      }
      uint64_t v8 = *((void *)this + 2);
      for (uint64_t i = *((void *)this + 3); v8 != i; v8 += 24)
      {
        unint64_t v10 = *(gdc::ResourceStore **)(v8 + 8);
        uint64_t v11 = *(std::__shared_weak_count **)(v8 + 16);
        if (v11)
        {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          gdc::ResourceStore::clearAllResources(v10);
          if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        else
        {
          gdc::ResourceStore::clearAllResources(v10);
        }
      }
      goto LABEL_54;
    }
    if (v5 == *((void **)this + 76)
      || (long long v18 = (id *)((char *)this + 608), objc_storeStrong((id *)this + 76, v5), !*((void *)this + 76)))
    {
LABEL_54:

      goto LABEL_55;
    }
    objc_storeStrong((id *)this + 70, *((id *)this + 76));
    uint64_t v19 = [*((id *)this + 76) availableTiles];
    unsigned int v20 = [*v18 availableTilesCount];
    uint64_t v21 = v20;
    uint64_t v22 = (char *)*((void *)this + 72);
    uint64_t v23 = (unsigned char *)*((void *)this + 71);
    unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v22 - v23) >> 3);
    unint64_t v25 = v20 - v24;
    if (v20 <= v24)
    {
      if (v20 < v24) {
        *((void *)this + 72) = &v23[24 * v20];
      }
    }
    else
    {
      uint64_t v26 = *((void *)this + 73);
      if (0xAAAAAAAAAAAAAAABLL * ((v26 - (uint64_t)v22) >> 3) >= v25)
      {
        bzero(*((void **)this + 72), 24 * ((24 * v25 - 24) / 0x18) + 24);
        *((void *)this + 72) = &v22[24 * ((24 * v25 - 24) / 0x18) + 24];
        goto LABEL_43;
      }
      unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v26 - (uint64_t)v23) >> 3);
      unint64_t v28 = 0x5555555555555556 * ((v26 - (uint64_t)v23) >> 3);
      if (v28 <= v20) {
        unint64_t v28 = v20;
      }
      if (v27 >= 0x555555555555555) {
        unint64_t v29 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v29 = v28;
      }
      if (v29 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v30 = (char *)operator new(24 * v29);
      uint64_t v31 = &v30[8 * ((v22 - v23) >> 3)];
      uint64_t v32 = &v30[24 * v29];
      size_t v33 = 24 * ((24 * v25 - 24) / 0x18) + 24;
      bzero(v31, v33);
      char v34 = &v31[v33];
      if (v22 != v23)
      {
        do
        {
          long long v35 = *(_OWORD *)(v22 - 24);
          *((void *)v31 - 1) = *((void *)v22 - 1);
          *(_OWORD *)(v31 - 24) = v35;
          v31 -= 24;
          v22 -= 24;
        }
        while (v22 != v23);
        uint64_t v22 = (char *)*((void *)this + 71);
      }
      *((void *)this + 71) = v31;
      *((void *)this + 72) = v34;
      *((void *)this + 73) = v32;
      if (v22) {
        operator delete(v22);
      }
    }
    if (!v21)
    {
LABEL_45:
      uint64_t v40 = (double *)MEMORY[0x1E4F63F08];
      unsigned int v41 = objc_msgSend(*v18, "minimumZoomLevelInRect:", *MEMORY[0x1E4F63F08], *(double *)(MEMORY[0x1E4F63F08] + 8), *(double *)(MEMORY[0x1E4F63F08] + 16), *(double *)(MEMORY[0x1E4F63F08] + 24));
      unint64_t v42 = v41 | (unint64_t)(objc_msgSend(*v18, "maximumZoomLevelInRect:", *v40, v40[1], v40[2], v40[3]) << 32);
      if (!*((unsigned char *)this + 592)) {
        *((unsigned char *)this + 592) = 1;
      }
      *(void *)((char *)this + 596) = v42;
      uint64_t v43 = *((void *)this + 2);
      for (uint64_t j = *((void *)this + 3); v43 != j; v43 += 24)
      {
        int8x8_t v45 = *(gdc::ResourceStore **)(v43 + 8);
        unint64_t v46 = *(std::__shared_weak_count **)(v43 + 16);
        if (v46)
        {
          atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
          gdc::ResourceStore::clearAllResources(v45);
          if (!atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        else
        {
          gdc::ResourceStore::clearAllResources(v45);
        }
      }
      goto LABEL_54;
    }
LABEL_43:
    uint64_t v36 = 0;
    uint64_t v37 = *((void *)this + 71);
    do
    {
      uint64_t v38 = *(void *)(v19 + v36);
      *(void *)&long long v39 = *(void *)(v19 + v36 + 12);
      *(void *)(v37 + v36) = *(unsigned int *)(v19 + v36 + 20) | ((unint64_t)*(unsigned int *)(v19 + v36 + 8) << 32);
      uint64_t v37 = *((void *)this + 71);
      *((void *)&v39 + 1) = v38;
      *(_OWORD *)(v37 + v36 + 8) = v39;
      v36 += 24;
    }
    while (24 * v21 != v36);
    goto LABEL_45;
  }
  uint64_t v12 = (void *)*((void *)this + 76);
  *((void *)this + 76) = 0;

  unint64_t v13 = (void *)*((void *)this + 70);
  *((void *)this + 70) = 0;

  *((void *)this + 72) = *((void *)this + 71);
  if (*((unsigned char *)this + 592)) {
    *((unsigned char *)this + 592) = 0;
  }
  uint64_t v15 = *((void *)this + 2);
  for (uint64_t k = *((void *)this + 3); v15 != k; v15 += 24)
  {
    int v16 = *(gdc::ResourceStore **)(v15 + 8);
    uint64_t v17 = *(std::__shared_weak_count **)(v15 + 16);
    if (v17)
    {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      gdc::ResourceStore::clearAllResources(v16);
      if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    else
    {
      gdc::ResourceStore::clearAllResources(v16);
    }
  }
LABEL_55:
}

void sub_1A1860384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t md::TiledGEOResourceFetcher::tileScale(md::TiledGEOResourceFetcher *this)
{
  if (*((float *)this + 2) <= 1.0) {
    return 1;
  }
  else {
    return 2;
  }
}

void *std::__function::__value_func<void ()(std::unordered_map<gdc::ResourceKey,gdc::Error,gdc::ResourceKeyHash,std::equal_to<gdc::ResourceKey>,std::allocator<std::pair<gdc::ResourceKey const,gdc::Error>>> const&)>::swap[abi:nn180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    id v3 = result;
    unint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

char *geo::linear_map<unsigned short,gdc::ResourceFetcher *,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,gdc::ResourceFetcher *>>,std::vector<std::pair<unsigned short,gdc::ResourceFetcher *>>>::insert(uint64_t a1, unsigned __int16 *a2)
{
  unint64_t v4 = *(char **)a1;
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t result = v4;
  if (v4 != v5)
  {
    uint64_t result = v4;
    while (*a2 != *(unsigned __int16 *)result)
    {
      result += 16;
      if (result == v5) {
        goto LABEL_7;
      }
    }
  }
  if (result == v5)
  {
LABEL_7:
    unint64_t v7 = *(void *)(a1 + 16);
    if ((unint64_t)v5 >= v7)
    {
      uint64_t v9 = (v5 - v4) >> 4;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 60) {
        abort();
      }
      uint64_t v11 = v7 - (void)v4;
      if (v11 >> 3 > v10) {
        unint64_t v10 = v11 >> 3;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12)
      {
        if (v12 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v13 = (char *)operator new(16 * v12);
      }
      else
      {
        unint64_t v13 = 0;
      }
      uint64_t v14 = &v13[16 * v9];
      *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
      uint64_t v8 = v14 + 16;
      if (v4 != v5)
      {
        do
        {
          *((_OWORD *)v14 - 1) = *((_OWORD *)v5 - 1);
          v14 -= 16;
          v5 -= 16;
        }
        while (v5 != v4);
        unint64_t v4 = *(char **)a1;
      }
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = &v13[16 * v12];
      if (v4) {
        operator delete(v4);
      }
    }
    else
    {
      *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
      uint64_t v8 = v5 + 16;
    }
    *(void *)(a1 + 8) = v8;
    return (char *)(v8 - 1);
  }
  return result;
}

uint64_t gdc::ResourceStore::setArrivedResourceNotification(void *a1, void *a2)
{
  v9[3] = *MEMORY[0x1E4F143B8];
  id v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      uint64_t v8 = v7;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v7);
    }
    else
    {
      uint64_t v8 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  if (v7 != a1)
  {
    unint64_t v4 = v8;
    uint64_t v5 = (void *)a1[3];
    if (v8 == v7)
    {
      if (v5 == a1)
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, v9);
        (*(void (**)(void *))(*v8 + 32))(v8);
        uint64_t v8 = 0;
        (*(void (**)(void, void *))(*(void *)a1[3] + 24))(a1[3], v7);
        (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        uint64_t v8 = v7;
        (*(void (**)(void *, void *))(v9[0] + 24))(v9, a1);
        (*(void (**)(void *))(v9[0] + 32))(v9);
      }
      else
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, a1);
        (*(void (**)(void *))(*v8 + 32))(v8);
        uint64_t v8 = (void *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v5 == a1)
    {
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v7);
      (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
      a1[3] = v8;
      uint64_t v8 = v7;
    }
    else
    {
      uint64_t v8 = (void *)a1[3];
      a1[3] = v4;
    }
  }
  uint64_t result = (uint64_t)v8;
  if (v8 == v7) {
    return (*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  }
  if (v8) {
    return (*(uint64_t (**)(void))(*v8 + 40))();
  }
  return result;
}

uint64_t std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_2,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::shared_ptr<gdc::Resource> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57A538;
  a2[1] = v2;
  return result;
}

uint64_t gdc::ResourceStore::setRetryResourceNotification(uint64_t a1, void *a2)
{
  v10[3] = *MEMORY[0x1E4F143B8];
  id v3 = (void *)(a1 + 64);
  unint64_t v4 = (void *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      uint64_t v9 = v8;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v8);
    }
    else
    {
      uint64_t v9 = (void *)(*(uint64_t (**)(void *))(*v4 + 16))(v4);
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (v3 != v8)
  {
    uint64_t v5 = v9;
    uint64_t v6 = *(void **)(a1 + 88);
    if (v9 == v8)
    {
      if (v6 == v3)
      {
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, v10);
        (*(void (**)(void *))(*v9 + 32))(v9);
        uint64_t v9 = 0;
        (*(void (**)(void, void *))(**(void **)(a1 + 88) + 24))(*(void *)(a1 + 88), v8);
        (*(void (**)(void))(**(void **)(a1 + 88) + 32))(*(void *)(a1 + 88));
        *(void *)(a1 + 88) = 0;
        uint64_t v9 = v8;
        (*(void (**)(void *, void *))(v10[0] + 24))(v10, v3);
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else
      {
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, v3);
        (*(void (**)(void *))(*v9 + 32))(v9);
        uint64_t v9 = *(void **)(a1 + 88);
      }
      *(void *)(a1 + 88) = v3;
    }
    else if (v6 == v3)
    {
      (*(void (**)(void *, void *))(*(void *)(a1 + 64) + 24))(v3, v8);
      (*(void (**)(void))(**(void **)(a1 + 88) + 32))(*(void *)(a1 + 88));
      *(void *)(a1 + 88) = v9;
      uint64_t v9 = v8;
    }
    else
    {
      uint64_t v9 = *(void **)(a1 + 88);
      *(void *)(a1 + 88) = v5;
    }
  }
  uint64_t result = (uint64_t)v9;
  if (v9 == v8) {
    return (*(uint64_t (**)(void *))(v8[0] + 32))(v8);
  }
  if (v9) {
    return (*(uint64_t (**)(void))(*v9 + 40))();
  }
  return result;
}

__n128 std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_1,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::unordered_set<gdc::ResourceKey,gdc::ResourceKeyHash,std::equal_to<std::unordered_set>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_1<std::unordered_set>> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57A4F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t gdc::ResourceStore::setNewResourceNotification(uint64_t a1, void *a2)
{
  v10[3] = *MEMORY[0x1E4F143B8];
  id v3 = (void *)(a1 + 32);
  unint64_t v4 = (void *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      uint64_t v9 = v8;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v8);
    }
    else
    {
      uint64_t v9 = (void *)(*(uint64_t (**)(void *))(*v4 + 16))(v4);
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (v3 != v8)
  {
    uint64_t v5 = v9;
    uint64_t v6 = *(void **)(a1 + 56);
    if (v9 == v8)
    {
      if (v6 == v3)
      {
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, v10);
        (*(void (**)(void *))(*v9 + 32))(v9);
        uint64_t v9 = 0;
        (*(void (**)(void, void *))(**(void **)(a1 + 56) + 24))(*(void *)(a1 + 56), v8);
        (*(void (**)(void))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56));
        *(void *)(a1 + 56) = 0;
        uint64_t v9 = v8;
        (*(void (**)(void *, void *))(v10[0] + 24))(v10, v3);
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else
      {
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, v3);
        (*(void (**)(void *))(*v9 + 32))(v9);
        uint64_t v9 = *(void **)(a1 + 56);
      }
      *(void *)(a1 + 56) = v3;
    }
    else if (v6 == v3)
    {
      (*(void (**)(void *, void *))(*(void *)(a1 + 32) + 24))(v3, v8);
      (*(void (**)(void))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56));
      *(void *)(a1 + 56) = v9;
      uint64_t v9 = v8;
    }
    else
    {
      uint64_t v9 = *(void **)(a1 + 56);
      *(void *)(a1 + 56) = v5;
    }
  }
  uint64_t result = (uint64_t)v9;
  if (v9 == v8) {
    return (*(uint64_t (**)(void *))(v8[0] + 32))(v8);
  }
  if (v9) {
    return (*(uint64_t (**)(void))(*v9 + 40))();
  }
  return result;
}

__n128 std::__function::__func<gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&>,void ()(std::vector<std::shared_ptr<gdc::Resource>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<gdc::Resource>> const&,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&><gdc::ResourceRequest,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<std::vector<std::shared_ptr<gdc::Resource>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<gdc::Resource>> const&>> const&,std::allocator<std::unique_ptr<gdc::ResourceFetcher> &&><gdc::ResourceRequest,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<std::vector<std::shared_ptr<gdc::Resource>,gdc::ResourceManager::addResourceFetcher(std::unique_ptr<gdc::ResourceFetcher> &&)::$_0<gdc::Resource>> const&>> const)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57A4A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t gdc::ResourceFetcher::ResourceFetcher(uint64_t a1, unsigned __int16 *a2, uint64_t a3, float a4)
{
  *(float *)(a1 + 8) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v5 = a1 + 64;
  *(void *)a1 = &unk_1EF555000;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  if (a3)
  {
    uint64_t v7 = 2 * a3;
    do
    {
      std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>(v5, *a2, *a2);
      ++a2;
      v7 -= 2;
    }
    while (v7);
  }
  *(void *)(a1 + 112) = 850045863;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 850045863;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  return a1;
}

void sub_1A1861314(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void **)(v1 + 80);
  if (v5)
  {
    do
    {
      uint64_t v6 = (void *)*v5;
      operator delete(v5);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  uint64_t v7 = *v3;
  void *v3 = 0;
  if (v7) {
    operator delete(v7);
  }
  geo::linear_map<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>,std::equal_to<std::bitset<2ul>>,std::allocator<std::pair<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>>>,std::vector<std::pair<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>>>>::~linear_map((void **)(v1 + 40));
  geo::linear_map<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>,std::equal_to<std::bitset<2ul>>,std::allocator<std::pair<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>>>,std::vector<std::pair<std::bitset<2ul>,std::shared_ptr<std::vector<std::string,geo::StdAllocator<std::string,grl::Allocator>>>>>>::~linear_map(v2);
  _Unwind_Resume(a1);
}

void md::PendingSceneLogic::updateSelectionContextMap(int a1, unsigned __int16 *a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  if (a2 != a3)
  {
    while (*a2 != a1)
    {
      a2 += 16;
      if (a2 == a3) {
        return;
      }
    }
  }
  if (a2 != a3)
  {
    uint64_t v8 = *(void *)(*((void *)a2 + 2) + 16);
    if (v8)
    {
      *(_OWORD *)int v16 = 0u;
      *(_OWORD *)std::string __p = 0u;
      int v18 = 1065353216;
      v15[0] = &unk_1EF558EE0;
      v15[1] = a6;
      *(void *)&long long v19 = a4;
      *((void *)&v19 + 1) = a5;
      *(void *)(v8 + 8) = a6;
      if ((void **)v8 == v15)
      {
        *(_OWORD *)(v8 + 56) = v19;
        v15[0] = &unk_1EF555180;
      }
      else
      {
        *(_DWORD *)(v8 + 48) = 1065353216;
        std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned short,void *> *>>((void *)(v8 + 16), 0);
        uint64_t v9 = __p[0];
        *(_OWORD *)(v8 + 56) = v19;
        v15[0] = &unk_1EF555180;
        if (v9)
        {
          do
          {
            unint64_t v10 = (void *)*v9;
            operator delete(v9);
            uint64_t v9 = v10;
          }
          while (v10);
        }
      }
      uint64_t v11 = v16[0];
      v16[0] = 0;
      if (v11) {
        operator delete(v11);
      }
      std::unordered_set<unsigned short>::unordered_set((uint64_t)v15, a7);
      gdc::SelectionContext::setLayerDataTypes(v8, (uint64_t *)v15);
      unint64_t v12 = v16[0];
      if (v16[0])
      {
        do
        {
          unint64_t v13 = (void *)*v12;
          operator delete(v12);
          unint64_t v12 = v13;
        }
        while (v13);
      }
      uint64_t v14 = v15[0];
      v15[0] = 0;
      if (v14) {
        operator delete(v14);
      }
    }
  }
}

void sub_1A18614B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  gdc::TileSetSelectionContext::~TileSetSelectionContext((gdc::TileSetSelectionContext *)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<unsigned short>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(uint64_t **)(a2 + 16); i; uint64_t i = (uint64_t *)*i)
    std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>(a1, *((_WORD *)i + 8), *((_WORD *)i + 8));
  return a1;
}

void sub_1A18615E8(_Unwind_Exception *a1)
{
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>(uint64_t a1, unsigned __int16 a2, __int16 a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            unint64_t v12 = v10[1];
            if (v12 == (uint64_t *)a2)
            {
              if (*((unsigned __int16 *)v10 + 8) == a2) {
                return;
              }
            }
            else if (((unint64_t)v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            unint64_t v10 = (uint64_t **)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = (unint64_t)v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int16 *)v10 + 8) == a2) {
              return;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  unint64_t v13 = operator new(0x18uLL);
  *unint64_t v13 = 0;
  v13[1] = v6;
  *((_WORD *)v13 + 8) = a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t prime = v18;
    }
    else {
      size_t prime = v17;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_34;
    }
    if (prime < v7)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < v7) {
LABEL_34:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *unint64_t v13 = *v24;
LABEL_58:
    void *v24 = v13;
    goto LABEL_59;
  }
  *unint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*v13)
  {
    unint64_t v25 = *(void *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7) {
        v25 %= v7;
      }
    }
    else
    {
      v25 &= v7 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
}

void sub_1A18618C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned short,void *> *>>(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[1];
  if (!v4) {
    goto LABEL_7;
  }
  for (uint64_t i = 0; i != v4; ++i)
    *(void *)(*a1 + 8 * i) = 0;
  unint64_t v6 = (_WORD *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      v6[8] = *((_WORD *)a2 + 8);
      unint64_t v7 = *(_WORD **)v6;
      std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__node_insert_multi((uint64_t)a1, (uint64_t)v6);
      a2 = (uint64_t *)*a2;
      unint64_t v6 = v7;
      if (!v7) {
        goto LABEL_7;
      }
    }
    do
    {
      unint64_t v10 = *(_WORD **)v6;
      operator delete(v6);
      unint64_t v6 = v10;
    }
    while (v10);
  }
  else
  {
LABEL_7:
    while (a2)
    {
      uint8x8_t v8 = operator new(0x18uLL);
      *(void *)uint8x8_t v8 = 0;
      uint64_t v9 = *((unsigned __int16 *)a2 + 8);
      v8[8] = v9;
      *((void *)v8 + 1) = v9;
      std::__hash_table<unsigned short,std::hash<unsigned short>,std::equal_to<unsigned short>,std::allocator<unsigned short>>::__node_insert_multi((uint64_t)a1, (uint64_t)v8);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_1A18619A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void gdc::SelectionContext::setLayerDataTypes(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 40))
  {
    uint64_t v4 = *(void **)(a1 + 32);
    if (v4)
    {
      do
      {
        int8x8_t v5 = (void *)*v4;
        operator delete(v4);
        uint64_t v4 = v5;
      }
      while (v5);
    }
    *(void *)(a1 + 32) = 0;
    uint64_t v6 = *(void *)(a1 + 24);
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
        *(void *)(*(void *)(a1 + 16) + 8 * i) = 0;
    }
    *(void *)(a1 + 40) = 0;
  }
  uint64_t v8 = *a2;
  *a2 = 0;
  uint64_t v9 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v8;
  if (v9) {
    operator delete(v9);
  }
  uint64_t v12 = a2[2];
  unint64_t v11 = a2 + 2;
  uint64_t v10 = v12;
  uint64_t v13 = *(v11 - 1);
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 24) = v13;
  *(v11 - 1) = 0;
  uint64_t v14 = v11[1];
  *(void *)(a1 + 40) = v14;
  *(_DWORD *)(a1 + 48) = *((_DWORD *)v11 + 4);
  if (v14)
  {
    unint64_t v15 = *(void *)(v10 + 8);
    unint64_t v16 = *(void *)(a1 + 24);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16) {
        v15 %= v16;
      }
    }
    else
    {
      v15 &= v16 - 1;
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v15) = a1 + 32;
    void *v11 = 0;
    v11[1] = 0;
  }
}

void md::PendingSceneLogic::extractFullyImplicatedData(uint64_t a1, uint64_t a2, unsigned __int8 **a3, unsigned __int8 **a4, uint64_t a5, void *a6)
{
  *(unsigned char *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  double v89 = (double *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  if (a6)
  {
    uint64_t v7 = a2;
    uint64_t v8 = a1;
    uint64_t v10 = *a3;
    uint64_t v9 = a3[1];
    double v91 = a3[2];
    double v11 = 0.0;
    while (1)
    {
LABEL_4:
      uint64_t v12 = v9;
      if (v10 == *a4) {
        return;
      }
      unint64_t v104 = v9;
      if (v10 == v9) {
        goto LABEL_154;
      }
      do
      {
        uint64_t v13 = *(int8x8_t **)(v7 + 216);
        int8x8_t v14 = v13[4];
        if (!*(void *)&v14) {
          goto LABEL_39;
        }
        unint64_t v15 = (uint64_t *)*((void *)v10 + 13);
        uint8x8_t v16 = (uint8x8_t)vcnt_s8(v14);
        v16.i16[0] = vaddlv_u8(v16);
        if (v16.u32[0] > 1uLL)
        {
          uint64_t v6 = (uint64_t *)*((void *)v10 + 13);
          if ((unint64_t)v15 >= *(void *)&v14) {
            uint64_t v6 = (uint64_t *)((unint64_t)v15 % *(void *)&v14);
          }
        }
        else
        {
          uint64_t v6 = (uint64_t *)((*(void *)&v14 - 1) & (unint64_t)v15);
        }
        unint64_t v17 = *(uint64_t ****)(*(void *)&v13[3] + 8 * (void)v6);
        if (!v17) {
          goto LABEL_39;
        }
        unint64_t v18 = *v17;
        if (!*v17) {
          goto LABEL_39;
        }
        if (v16.u32[0] < 2uLL)
        {
          uint64_t v19 = *(void *)&v14 - 1;
          while (1)
          {
            unint64_t v24 = v18[1];
            if (v24 == v15)
            {
              if (*((unsigned __int8 *)v18 + 16) == *v10
                && *((unsigned __int16 *)v18 + 12) == *((unsigned __int16 *)v10 + 4)
                && v18[12] == *((uint64_t **)v10 + 10))
              {
                unint64_t v25 = v18[4];
                size_t v26 = (char *)v18[5] - (char *)v25;
                unint64_t v27 = (const void *)*((void *)v10 + 2);
                if (v26 == *((void *)v10 + 3) - (void)v27 && !memcmp(v25, v27, v26)) {
                  goto LABEL_34;
                }
              }
            }
            else if ((uint64_t *)((unint64_t)v24 & v19) != v6)
            {
              goto LABEL_39;
            }
            unint64_t v18 = (uint64_t **)*v18;
            if (!v18) {
              goto LABEL_39;
            }
          }
        }
        while (1)
        {
          unint64_t v20 = v18[1];
          if (v20 == v15) {
            break;
          }
          if ((unint64_t)v20 >= *(void *)&v14) {
            unint64_t v20 = (uint64_t *)((unint64_t)v20 % *(void *)&v14);
          }
          if (v20 != v6) {
            goto LABEL_39;
          }
LABEL_16:
          unint64_t v18 = (uint64_t **)*v18;
          if (!v18) {
            goto LABEL_39;
          }
        }
        if (*((unsigned __int8 *)v18 + 16) != *v10) {
          goto LABEL_16;
        }
        if (*((unsigned __int16 *)v18 + 12) != *((unsigned __int16 *)v10 + 4)) {
          goto LABEL_16;
        }
        if (v18[12] != *((uint64_t **)v10 + 10)) {
          goto LABEL_16;
        }
        uint8x8_t v21 = v18[4];
        size_t v22 = (char *)v18[5] - (char *)v21;
        uint64_t v23 = (const void *)*((void *)v10 + 2);
        if (v22 != *((void *)v10 + 3) - (void)v23 || memcmp(v21, v23, v22)) {
          goto LABEL_16;
        }
LABEL_34:
        uint64_t v6 = v18[16];
        unint64_t v28 = (int8x8_t *)operator new(0x90uLL);
        *unint64_t v28 = 0;
        v28[1] = 0;
        v28[2].i8[0] = *((unsigned char *)v6 + 16);
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v28[3], (uint64_t)(v6 + 3));
        v28[14].i8[0] = 0;
        if (*((unsigned char *)v6 + 112))
        {
          v28[14].i32[1] = *((_DWORD *)v6 + 29);
          v28[14].i8[0] = 1;
        }
        v28[15] = (int8x8_t)v6[15];
        *(_OWORD *)v28[16].i8 = *((_OWORD *)v6 + 8);
        int8x8_t v29 = *v13;
        *(void *)(*(void *)&v29 + 8) = v28;
        *unint64_t v28 = v29;
        *uint64_t v13 = (int8x8_t)v28;
        v28[1] = (int8x8_t)v13;
        int8x8_t v30 = v13[2];
        v13[2] = (int8x8_t)(*(void *)&v30 + 1);
        uint64_t v31 = (uint64_t *)v13[8];
        if (v31 == v6)
        {
          uint64_t v32 = (int8x8_t *)v6[1];
          goto LABEL_145;
        }
        uint64_t v32 = v28;
        if (v31 == (uint64_t *)v13) {
LABEL_145:
        }
          v13[8] = (int8x8_t)v32;
        uint64_t v82 = *v6;
        *(void *)(v82 + 8) = v6[1];
        *(void *)v6[1] = v82;
        v13[2] = v30;
        if (*((unsigned char *)v6 + 112)) {
          *((unsigned char *)v6 + 112) = 0;
        }
        uint64_t v83 = (void *)v6[4];
        if (v83 != (void *)v6[6]) {
          free(v83);
        }
        operator delete(v6);
        v18[16] = (uint64_t *)v28;
        uint64_t v13 = *(int8x8_t **)(v7 + 216);
        if (v28 != v13)
        {
          double v84 = fmax((double)(*(void *)(v7 + 232) - a5 + *(void *)&v28[16]), 0.0);
          double v11 = fmax(v11, v84);
          *double v89 = v11;
          if (v84 <= 0.0)
          {
            ++*(_DWORD *)(v8 + 16);
            long long v85 = geo::linear_map<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>,std::vector<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>>::operator[](a6, *((_WORD *)v10 + 4));
            std::__hash_table<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey const&>((uint64_t)v85, v10, (uint64_t)v10);
          }
          else
          {
            ++*(_DWORD *)(v8 + 20);
          }
          goto LABEL_142;
        }
LABEL_39:
        ++*(_DWORD *)(v8 + 20);
        unsigned __int8 v105 = *v10;
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v106, (uint64_t)(v10 + 8));
        char v109 = 0;
        if (v10[96])
        {
          int v110 = *((_DWORD *)v10 + 25);
          char v109 = 1;
        }
        *(void *)&long long v111 = *((void *)v10 + 13);
        *((void *)&v111 + 1) = a5;
        v112[0] = v105;
        gdc::LayerDataKey::LayerDataKey((uint64_t)&v113, (uint64_t)&v106);
        char v118 = 0;
        if (v109)
        {
          int v119 = v110;
          char v118 = 1;
        }
        *(_OWORD *)uint64_t v120 = v111;
        *(void *)&v120[16] = 0;
        size_t v33 = v13 + 3;
        char v34 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>(&v13[3], v112);
        if (!v34)
        {
          unsigned int v41 = operator new(0x90uLL);
          void *v41 = 0;
          v41[1] = 0;
          *((unsigned char *)v41 + 16) = v112[0];
          gdc::LayerDataKey::LayerDataKey((uint64_t)(v41 + 3), (uint64_t)&v113);
          *((unsigned char *)v41 + 112) = 0;
          if (v118)
          {
            *((_DWORD *)v41 + 29) = v119;
            *((unsigned char *)v41 + 112) = 1;
          }
          v41[15] = *(void *)v120;
          *((_OWORD *)v41 + 8) = *(_OWORD *)&v120[8];
          int8x8_t v42 = *v13;
          *(void *)(*(void *)&v42 + 8) = v41;
          void *v41 = v42;
          *uint64_t v13 = (int8x8_t)v41;
          v41[1] = v13;
          ++*(void *)&v13[2];
          uint64_t v43 = (int8x8_t *)v13[8];
          *(void *)&v13[9] += *(void *)&v120[16];
          if (v43 == v13) {
            v13[8] = (int8x8_t)v41;
          }
          unint64_t v44 = *(void *)v120;
          unint64_t v45 = (unint64_t)v13[4];
          if (v45)
          {
            uint8x8_t v46 = (uint8x8_t)vcnt_s8((int8x8_t)v45);
            v46.i16[0] = vaddlv_u8(v46);
            if (v46.u32[0] > 1uLL)
            {
              uint64_t v6 = *(uint64_t **)v120;
              if (*(void *)v120 >= v45) {
                uint64_t v6 = (uint64_t *)(*(void *)v120 % v45);
              }
            }
            else
            {
              uint64_t v6 = (uint64_t *)((v45 - 1) & *(void *)v120);
            }
            uint64_t v53 = *(uint64_t ****)(*(void *)v33 + 8 * (void)v6);
            if (v53)
            {
              uint64_t v54 = *v53;
              if (*v53)
              {
                int v55 = v112[0];
                int v56 = v113;
                int8x8_t v57 = v117;
                unint64_t v58 = v114;
                size_t v59 = v115 - (void)v114;
                if (v46.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v64 = v54[1];
                    if (v64 == (uint64_t *)v44)
                    {
                      if (*((unsigned __int8 *)v54 + 16) == v55
                        && *((unsigned __int16 *)v54 + 12) == v56
                        && v54[12] == v57)
                      {
                        uint64_t v65 = v54[4];
                        if ((char *)v54[5] - (char *)v65 == v59)
                        {
                          float v100 = v58;
                          size_t v92 = v59;
                          unint64_t v94 = v57;
                          int v96 = v56;
                          int v98 = v55;
                          int v66 = memcmp(v65, v58, v59);
                          size_t v59 = v92;
                          int8x8_t v57 = v94;
                          unint64_t v58 = v100;
                          int v56 = v96;
                          int v55 = v98;
                          if (!v66) {
                            goto LABEL_133;
                          }
                        }
                      }
                    }
                    else if ((uint64_t *)((unint64_t)v64 & (v45 - 1)) != v6)
                    {
                      goto LABEL_91;
                    }
                    uint64_t v54 = (uint64_t **)*v54;
                    if (!v54) {
                      goto LABEL_91;
                    }
                  }
                }
                while (1)
                {
                  unint64_t v60 = (unint64_t)v54[1];
                  if (v60 == v44)
                  {
                    if (*((unsigned __int8 *)v54 + 16) == v55
                      && *((unsigned __int16 *)v54 + 12) == v56
                      && v54[12] == v57)
                    {
                      uint64_t v61 = v54[4];
                      if ((char *)v54[5] - (char *)v61 == v59)
                      {
                        long long v99 = v58;
                        size_t v62 = v59;
                        int v95 = v56;
                        int v97 = v55;
                        unint64_t v93 = v57;
                        int v63 = memcmp(v61, v58, v59);
                        size_t v59 = v62;
                        unint64_t v58 = v99;
                        int8x8_t v57 = v93;
                        int v56 = v95;
                        int v55 = v97;
                        if (!v63) {
                          goto LABEL_133;
                        }
                      }
                    }
                  }
                  else
                  {
                    if (v60 >= v45) {
                      v60 %= v45;
                    }
                    if ((uint64_t *)v60 != v6)
                    {
LABEL_91:
                      size_t v33 = v13 + 3;
                      break;
                    }
                  }
                  uint64_t v54 = (uint64_t **)*v54;
                  if (!v54) {
                    goto LABEL_91;
                  }
                }
              }
            }
          }
          double v67 = (int8x8_t *)operator new(0x88uLL);
          uint64_t v68 = v13 + 5;
          long long v121 = v67;
          uint64_t v122 = v13 + 5;
          int8x8_t *v67 = 0;
          v67[1] = (int8x8_t)v44;
          v67[2].i8[0] = v112[0];
          gdc::LayerDataKey::LayerDataKey((uint64_t)&v67[3], (uint64_t)&v113);
          v67[14].i8[0] = 0;
          if (v118)
          {
            v67[14].i32[1] = v119;
            v67[14].i8[0] = 1;
          }
          v67[15] = *(int8x8_t *)v120;
          v67[16] = (int8x8_t)v41;
          char v123 = 1;
          float v69 = (float)(unint64_t)(*(void *)&v13[6] + 1);
          float v70 = *(float *)v13[7].i32;
          if (!v45 || (float)(v70 * (float)v45) < v69)
          {
            BOOL v71 = v45 < 3 || (v45 & (v45 - 1)) != 0;
            unint64_t v72 = v71 | (2 * v45);
            unint64_t v73 = vcvtps_u32_f32(v69 / v70);
            if (v72 <= v73) {
              size_t prime = v73;
            }
            else {
              size_t prime = v72;
            }
            if (prime == 1)
            {
              size_t prime = 2;
            }
            else if ((prime & (prime - 1)) != 0)
            {
              size_t prime = std::__next_prime(prime);
            }
            int8x8_t v75 = v13[4];
            if (prime > *(void *)&v75) {
              goto LABEL_107;
            }
            if (prime < *(void *)&v75)
            {
              unint64_t v76 = vcvtps_u32_f32((float)(unint64_t)v13[6] / *(float *)v13[7].i32);
              if (*(void *)&v75 < 3uLL
                || (uint8x8_t v77 = (uint8x8_t)vcnt_s8(v75), v77.i16[0] = vaddlv_u8(v77), v77.u32[0] > 1uLL))
              {
                unint64_t v76 = std::__next_prime(v76);
              }
              else
              {
                uint64_t v78 = 1 << -(char)__clz(v76 - 1);
                if (v76 >= 2) {
                  unint64_t v76 = v78;
                }
              }
              if (prime <= v76) {
                size_t prime = v76;
              }
              if (prime < *(void *)&v75) {
LABEL_107:
              }
                std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v33, prime);
            }
            unint64_t v45 = (unint64_t)v13[4];
            if ((v45 & (v45 - 1)) != 0)
            {
              if (v44 >= v45) {
                uint64_t v6 = (uint64_t *)(v44 % v45);
              }
              else {
                uint64_t v6 = (uint64_t *)v44;
              }
            }
            else
            {
              uint64_t v6 = (uint64_t *)((v45 - 1) & v44);
            }
          }
          uint64_t v79 = *(int8x8_t **)(*(void *)v33 + 8 * (void)v6);
          uint64_t v80 = v121;
          if (v79)
          {
            int8x8_t *v121 = *v79;
            goto LABEL_131;
          }
          int8x8_t *v121 = *v68;
          int8x8_t *v68 = (int8x8_t)v80;
          *(void *)(*(void *)v33 + 8 * (void)v6) = v68;
          if (*v80)
          {
            unint64_t v81 = *(void *)(*(void *)v80 + 8);
            if ((v45 & (v45 - 1)) != 0)
            {
              if (v81 >= v45) {
                v81 %= v45;
              }
            }
            else
            {
              v81 &= v45 - 1;
            }
            uint64_t v79 = (int8x8_t *)(*(void *)v33 + 8 * v81);
LABEL_131:
            int8x8_t *v79 = (int8x8_t)v80;
          }
          ++*(void *)&v13[6];
          goto LABEL_133;
        }
        long long v35 = v34;
        uint64_t v6 = v34[16];
        uint64_t v36 = operator new(0x90uLL);
        *uint64_t v36 = 0;
        v36[1] = 0;
        *((unsigned char *)v36 + 16) = v112[0];
        gdc::LayerDataKey::LayerDataKey((uint64_t)(v36 + 3), (uint64_t)&v113);
        *((unsigned char *)v36 + 112) = 0;
        if (v118)
        {
          *((_DWORD *)v36 + 29) = v119;
          *((unsigned char *)v36 + 112) = 1;
        }
        v36[15] = *(void *)v120;
        *((_OWORD *)v36 + 8) = *(_OWORD *)&v120[8];
        int8x8_t v37 = *v13;
        *(void *)(*(void *)&v37 + 8) = v36;
        *uint64_t v36 = v37;
        *uint64_t v13 = (int8x8_t)v36;
        v36[1] = v13;
        int8x8_t v38 = v13[2];
        v13[2] = (int8x8_t)(*(void *)&v38 + 1);
        long long v39 = (uint64_t *)v13[8];
        if (v39 == v6)
        {
          uint64_t v40 = (void *)v6[1];
          goto LABEL_57;
        }
        uint64_t v40 = v36;
        if (v39 == (uint64_t *)v13) {
LABEL_57:
        }
          v13[8] = (int8x8_t)v40;
        unint64_t v47 = v6[17];
        int8x8_t v48 = v13[9];
        BOOL v49 = *(void *)&v48 >= v47;
        unint64_t v50 = *(void *)&v48 - v47;
        if (!v49) {
          unint64_t v50 = 0;
        }
        v13[9] = (int8x8_t)(v50 + *(void *)&v120[16]);
        uint64_t v51 = *v6;
        *(void *)(v51 + 8) = v6[1];
        *(void *)v6[1] = v51;
        v13[2] = v38;
        if (*((unsigned char *)v6 + 112)) {
          *((unsigned char *)v6 + 112) = 0;
        }
        long long v52 = (void *)v6[4];
        if (v52 != (void *)v6[6]) {
          free(v52);
        }
        operator delete(v6);
        v35[16] = v36;
LABEL_133:
        if (v118) {
          char v118 = 0;
        }
        uint64_t v8 = a1;
        uint64_t v7 = a2;
        if (v114 != v116) {
          free(v114);
        }
        if (v109) {
          char v109 = 0;
        }
        if (v107 != v108) {
          free(v107);
        }
        *(unsigned char *)a1 = 0;
        double v11 = fmax(*(double *)(a1 + 8), (double)*(uint64_t *)(a2 + 232));
        *(double *)(a1 + 8) = v11;
LABEL_142:
        uint64_t v12 = v104;
        v10 += 144;
      }
      while (v10 != v104);
LABEL_154:
      uint64_t v10 = v12;
      uint64_t v9 = v91;
      if (v91 != v12)
      {
        uint64_t v9 = v12 + 144;
        uint64_t v86 = v12;
        while (1)
        {
          v86 += 144;
          if (v9 == v91)
          {
            uint64_t v9 = v91;
            uint64_t v10 = v12;
            goto LABEL_4;
          }
          if (v9[112] != v12[112]) {
            break;
          }
          if (v9[113] == v12[113] && *((_DWORD *)v9 + 29) == *((_DWORD *)v12 + 29))
          {
            int v87 = *((_DWORD *)v9 + 30);
            v9 += 144;
            if (v87 == *((_DWORD *)v12 + 30)) {
              continue;
            }
          }
          uint64_t v10 = v12;
          uint64_t v9 = v86;
          goto LABEL_4;
        }
        uint64_t v10 = v12;
      }
    }
  }
}

void sub_1A18624E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  std::unique_ptr<std::__hash_node<gdc::LayerDataRequestKey,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<gdc::LayerDataRequestKey,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)(v51 - 128));
  if (a41 != a43) {
    free(a41);
  }
  if (a26 != a28) {
    free(a26);
  }
  _Unwind_Resume(a1);
}

unsigned __int16 *geo::linear_map<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>,std::equal_to<unsigned short>,std::allocator<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>,std::vector<std::pair<unsigned short,std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>>>>::operator[](void *a1, unsigned __int16 a2)
{
  uint64_t v4 = (char *)*a1;
  int8x8_t v5 = (char *)a1[1];
  uint64_t v6 = (char *)*a1;
  if ((char *)*a1 != v5)
  {
    uint64_t v6 = (char *)*a1;
    while (*(unsigned __int16 *)v6 != a2)
    {
      v6 += 48;
      if (v6 == v5) {
        goto LABEL_7;
      }
    }
  }
  if (v6 == v5)
  {
LABEL_7:
    __p[0] = 0;
    __p[1] = 0;
    int8x8_t v37 = 0;
    uint64_t v38 = 0;
    int v39 = 1065353216;
    uint64_t v6 = v4;
    if (v4 != v5)
    {
      while (*(unsigned __int16 *)v6 != a2)
      {
        v6 += 48;
        if (v6 == v5) {
          goto LABEL_12;
        }
      }
    }
    if (v6 != v5) {
      goto LABEL_39;
    }
LABEL_12:
    unint64_t v7 = a1[2];
    if ((unint64_t)v5 < v7)
    {
      *(_WORD *)int8x8_t v5 = a2;
      std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::unordered_set((uint64_t)(v5 + 8), (uint64_t)__p);
      a1[1] = v5 + 48;
      uint64_t v6 = v5;
LABEL_39:
      if (__p[0]) {
        operator delete(__p[0]);
      }
      return (unsigned __int16 *)(v6 + 8);
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 4);
    if (v8 + 1 > 0x555555555555555) {
      abort();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v4) >> 4);
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= v8 + 1) {
      uint64_t v10 = v8 + 1;
    }
    if (v9 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v10;
    }
    unint64_t v44 = a1 + 2;
    if (v11)
    {
      if (v11 > 0x555555555555555) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v12 = (char *)operator new(48 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v13 = &v12[48 * v8];
    uint64_t v40 = v12;
    unsigned int v41 = v13;
    int8x8_t v42 = v13;
    uint64_t v43 = &v12[48 * v11];
    *(_WORD *)uint64_t v13 = a2;
    std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::unordered_set((uint64_t)(v13 + 8), (uint64_t)__p);
    int8x8_t v14 = v41;
    unint64_t v15 = v42 + 48;
    uint8x8_t v16 = (char *)*a1;
    unint64_t v17 = (char *)a1[1];
    if (v17 == (char *)*a1)
    {
      size_t v26 = (char *)a1[1];
    }
    else
    {
      unint64_t v18 = 0;
      do
      {
        unint64_t v20 = &v14[v18 / 2];
        uint8x8_t v21 = &v17[v18];
        *(v20 - 24) = *(_WORD *)&v17[v18 - 48];
        uint64_t v22 = *(void *)&v17[v18 - 40];
        *((void *)v21 - 5) = 0;
        *((void *)v20 - 5) = v22;
        *((void *)v20 - 4) = *(void *)&v17[v18 - 32];
        *((void *)v21 - 4) = 0;
        uint64_t v23 = *(void *)&v17[v18 - 24];
        *(void *)&v14[v18 / 2 - 12] = v23;
        uint64_t v24 = *(void *)&v17[v18 - 16];
        *((void *)v20 - 2) = v24;
        *((_DWORD *)v20 - 2) = *(_DWORD *)&v17[v18 - 8];
        if (v24)
        {
          unint64_t v19 = *(void *)(v23 + 8);
          unint64_t v25 = *((void *)v20 - 4);
          if ((v25 & (v25 - 1)) != 0)
          {
            if (v19 >= v25) {
              v19 %= v25;
            }
          }
          else
          {
            v19 &= v25 - 1;
          }
          *(void *)(v22 + 8 * v19) = &v14[v18 / 2 - 12];
          *(void *)&v17[v18 - 24] = 0;
          *(void *)&v17[v18 - 16] = 0;
        }
        v18 -= 48;
      }
      while (&v17[v18] != v16);
      int8x8_t v14 = (_WORD *)((char *)v14 + v18);
      size_t v26 = (char *)*a1;
      unint64_t v17 = (char *)a1[1];
    }
    *a1 = v14;
    a1[1] = v15;
    unint64_t v27 = (char *)a1[2];
    a1[2] = v43;
    uint64_t v43 = v27;
    uint64_t v40 = v26;
    unsigned int v41 = v26;
    if (v17 == v26)
    {
      if (!v17) {
        goto LABEL_38;
      }
    }
    else
    {
      do
      {
        int8x8_t v42 = v17 - 48;
        int8x8_t v30 = (unsigned char *)*((void *)v17 - 3);
        if (v30)
        {
          do
          {
            if (v30[112]) {
              v30[112] = 0;
            }
            uint64_t v32 = *(unsigned char **)v30;
            size_t v33 = (void *)*((void *)v30 + 4);
            if (v33 != *((void **)v30 + 6)) {
              free(v33);
            }
            operator delete(v30);
            int8x8_t v30 = v32;
          }
          while (v32);
        }
        uint64_t v31 = (void *)*((void *)v17 - 5);
        *((void *)v17 - 5) = 0;
        if (v31) {
          operator delete(v31);
        }
        unint64_t v17 = v42;
      }
      while (v42 != v26);
      unint64_t v17 = v40;
      if (!v40) {
        goto LABEL_38;
      }
    }
    operator delete(v17);
LABEL_38:
    unint64_t v28 = v37;
    a1[1] = v15;
    uint64_t v6 = v15 - 48;
    if (v28)
    {
      do
      {
        if (v28[112]) {
          v28[112] = 0;
        }
        char v34 = *(unsigned char **)v28;
        long long v35 = (void *)*((void *)v28 + 4);
        if (v35 != *((void **)v28 + 6)) {
          free(v35);
        }
        operator delete(v28);
        unint64_t v28 = v34;
      }
      while (v34);
    }
    goto LABEL_39;
  }
  return (unsigned __int16 *)(v6 + 8);
}

void sub_1A18628DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

void std::__hash_table<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v6 = *((void *)a2 + 13);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *((void *)a2 + 13);
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        int v11 = *a2;
        int v12 = *((unsigned __int16 *)a2 + 4);
        uint64_t v13 = (uint64_t *)*((void *)a2 + 10);
        int8x8_t v14 = (const void *)*((void *)a2 + 2);
        size_t v15 = *((void *)a2 + 3) - (void)v14;
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            unint64_t v20 = v10[1];
            if (v20 == (uint64_t *)v6)
            {
              if (*((unsigned __int8 *)v10 + 16) == v11 && *((unsigned __int16 *)v10 + 12) == v12 && v10[12] == v13)
              {
                uint8x8_t v21 = v10[4];
                if ((char *)v10[5] - (char *)v21 == v15)
                {
                  uint64_t v40 = v14;
                  int8x8_t v42 = v13;
                  uint64_t v22 = v14;
                  size_t v23 = v15;
                  int v24 = memcmp(v21, v22, v15);
                  size_t v15 = v23;
                  int8x8_t v14 = v40;
                  uint64_t v13 = v42;
                  if (!v24) {
                    return;
                  }
                }
              }
            }
            else if (((unint64_t)v20 & (v7 - 1)) != v3)
            {
              goto LABEL_31;
            }
            uint64_t v10 = (uint64_t **)*v10;
            if (!v10) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v16 = (unint64_t)v10[1];
          if (v16 == v6)
          {
            if (*((unsigned __int8 *)v10 + 16) == v11 && *((unsigned __int16 *)v10 + 12) == v12 && v10[12] == v13)
            {
              unint64_t v17 = v10[4];
              if ((char *)v10[5] - (char *)v17 == v15)
              {
                size_t v18 = v15;
                unsigned int v41 = v13;
                int v19 = memcmp(v17, v14, v15);
                size_t v15 = v18;
                uint64_t v13 = v41;
                if (!v19) {
                  return;
                }
              }
            }
          }
          else
          {
            if (v16 >= v7) {
              v16 %= v7;
            }
            if (v16 != v3) {
              break;
            }
          }
          uint64_t v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_31:
  unint64_t v25 = (void *)(a1 + 16);
  size_t v26 = operator new(0x80uLL);
  *size_t v26 = 0;
  v26[1] = v6;
  *((unsigned char *)v26 + 16) = *(unsigned char *)a3;
  gdc::LayerDataKey::LayerDataKey((uint64_t)(v26 + 3), a3 + 8);
  *((unsigned char *)v26 + 112) = 0;
  if (*(unsigned char *)(a3 + 96))
  {
    *((_DWORD *)v26 + 29) = *(_DWORD *)(a3 + 100);
    *((unsigned char *)v26 + 112) = 1;
  }
  v26[15] = *(void *)(a3 + 104);
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v7 || (float)(v28 * (float)v7) < v27)
  {
    BOOL v29 = 1;
    if (v7 >= 3) {
      BOOL v29 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v30 = v29 | (2 * v7);
    unint64_t v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31) {
      size_t prime = v31;
    }
    else {
      size_t prime = v30;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v33 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v33) {
      goto LABEL_45;
    }
    if (prime < *(void *)&v33)
    {
      unint64_t v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v33 < 3uLL || (uint8x8_t v35 = (uint8x8_t)vcnt_s8(v33), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        unint64_t v34 = std::__next_prime(v34);
      }
      else
      {
        uint64_t v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2) {
          unint64_t v34 = v36;
        }
      }
      if (prime <= v34) {
        size_t prime = v34;
      }
      if (prime < *(void *)&v33) {
LABEL_45:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v37 = *(void *)a1;
  uint64_t v38 = *(void **)(*(void *)a1 + 8 * v3);
  if (v38)
  {
    *size_t v26 = *v38;
LABEL_69:
    void *v38 = v26;
    goto LABEL_70;
  }
  *size_t v26 = *v25;
  *unint64_t v25 = v26;
  *(void *)(v37 + 8 * v3) = v25;
  if (*v26)
  {
    unint64_t v39 = *(void *)(*v26 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v39 >= v7) {
        v39 %= v7;
      }
    }
    else
    {
      v39 &= v7 - 1;
    }
    uint64_t v38 = (void *)(*(void *)a1 + 8 * v39);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
}

void sub_1A1862CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<gdc::LayerDataRequestKey,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<gdc::LayerDataRequestKey,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (!a2)
  {
    size_t v15 = *(void **)a1;
    *(void *)a1 = 0;
    if (v15) {
      operator delete(v15);
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v4 = operator new(8 * a2);
  int8x8_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = 0;
  *(void *)(a1 + 8) = a2;
  do
    *(void *)(*(void *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void **)(a1 + 16);
  if (v7)
  {
    unint64_t v9 = v7[1];
    unint64_t v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      uint64_t v11 = v9 & v10;
      *(void *)(*(void *)a1 + 8 * v11) = v8;
      while (1)
      {
        int v12 = (void *)*v7;
        if (!*v7) {
          break;
        }
        uint64_t v13 = v12[1] & v10;
        if (v13 == v11)
        {
          unint64_t v7 = (void *)*v7;
        }
        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          void *v7 = *v12;
          uint64_t v14 = 8 * v13;
          void *v12 = **(void **)(*(void *)a1 + v14);
          **(void **)(*(void *)a1 + v14) = v12;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          unint64_t v7 = v12;
          uint64_t v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2) {
      v9 %= a2;
    }
    *(void *)(*(void *)a1 + 8 * v9) = v8;
    unint64_t v16 = (void *)*v7;
    if (*v7)
    {
      do
      {
        unint64_t v18 = v16[1];
        if (v18 >= a2) {
          v18 %= a2;
        }
        if (v18 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v18))
          {
            *(void *)(*(void *)a1 + 8 * v18) = v7;
            goto LABEL_26;
          }
          void *v7 = *v16;
          uint64_t v17 = 8 * v18;
          void *v16 = **(void **)(*(void *)a1 + v17);
          **(void **)(*(void *)a1 + v17) = v16;
          unint64_t v16 = v7;
        }
        unint64_t v18 = v9;
LABEL_26:
        unint64_t v7 = v16;
        unint64_t v16 = (void *)*v16;
        unint64_t v9 = v18;
      }
      while (v16);
    }
  }
}

uint64_t std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::__emplace_unique_key_args<gdc::LayerDataRequestKey,gdc::LayerDataRequestKey const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1A1862FAC(_Unwind_Exception *a1)
{
  std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::~unordered_set[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t md::RasterTileResourceFetcher::tileScale(md::RasterTileResourceFetcher *this)
{
  if (*((unsigned char *)this + 624)) {
    return *((unsigned int *)this + 155);
  }
  if (*((float *)this + 2) <= 1.0) {
    return 1;
  }
  return 2;
}

uint64_t md::GEOFlyoverTileResourceFetcher::tileScale(md::GEOFlyoverTileResourceFetcher *this)
{
  if (*((_DWORD *)this + 139) == 92) {
    return 1;
  }
  if (*((float *)this + 2) <= 1.0) {
    return 1;
  }
  return 2;
}

void *gms::PlanarMaterial<ggl::Texture2D>::minVisibility@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(char *__return_ptr, __n128))(*(void *)v6 + 264))((char *)&v10 + 2, a3);
    __n128 result = *(void **)(a1 + 32);
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    BYTE2(v10) = 0;
    __n128 result = *(void **)(a1 + 32);
    if (result)
    {
LABEL_3:
      __n128 result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 264))(&v10, v3);
      if (BYTE2(v10)) {
        goto LABEL_4;
      }
LABEL_10:
      *a2 = 0;
      if (!(_BYTE)v10) {
        return result;
      }
      char v9 = BYTE1(v10);
      goto LABEL_13;
    }
  }
  LOBYTE(v10) = 0;
  if (!BYTE2(v10)) {
    goto LABEL_10;
  }
LABEL_4:
  if (!(_BYTE)v10)
  {
    char v9 = BYTE3(v10);
LABEL_13:
    a2[1] = v9;
    *a2 = 1;
    return result;
  }
  char v8 = BYTE1(v10);
  if (BYTE1(v10) >= BYTE3(v10)) {
    char v8 = BYTE3(v10);
  }
  *a2 = 1;
  a2[1] = v8;
  return result;
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::visibility@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  float v3 = *(uint64_t (****)(void))(a1 + 112);
  if (v3) {
    return (**v3)(v3);
  }
  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 264))();
  }
  *a2 = 0;
  return result;
}

void __Block_byref_object_dispose__372(uint64_t a1)
{
}

BOOL md::MaterialRaster::updateStyleTextureIfNecessary(uint64_t a1, int8x8_t *a2, uint64_t a3, int a4, int a5, float a6)
{
  uint64_t i = a3;
  *(unsigned char *)(a1 + 122) = 0;
  uint64_t v249 = 0;
  size_t v250 = 0;
  std::string __p = 0;
  char v8 = *(char **)(a1 + 48);
  unint64_t v221 = *(char **)(a1 + 56);
  uint64_t v9 = v221 - v8;
  if (v221 == v8)
  {
    uint64_t v11 = 0;
    if (!*(unsigned char *)(a3 + 8)) {
      goto LABEL_5;
    }
  }
  else
  {
    if ((unint64_t)v9 >= 0x3333333333333331) {
      abort();
    }
    uint64_t v10 = v9 >> 3;
    uint64_t v11 = (char *)operator new(40 * (v9 >> 3));
    std::string __p = v11;
    uint64_t v249 = v11;
    size_t v250 = &v11[40 * v10];
    if (!*(unsigned char *)(i + 8)) {
      goto LABEL_5;
    }
  }
  *(unsigned char *)(i + 8) = 0;
LABEL_5:
  if (v221 == v8)
  {
    uint64_t v128 = (*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4;
    *(unsigned char *)(a1 + 123) = 1;
LABEL_233:
    uint64_t v132 = v128;
    if (v128) {
      goto LABEL_241;
    }
    goto LABEL_333;
  }
  uint64_t v211 = i;
  float v227 = a6;
  do
  {
    unint64_t v12 = *(void *)v8;
    unsigned int v266 = 0;
    uint64_t v265 = 0;
    float32x4_t v239 = (float32x4_t)v12;
    gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v263, a2, (uint64_t *)&v239, 0);
    uint64_t v13 = v263;
    if (!v263)
    {
      int v19 = operator new(0x10uLL);
      BOOL v225 = 0;
      int v20 = 0;
      uint64_t v13 = 0;
      uint8x8_t v21 = (char *)(v19 + 2);
      *int v19 = 0;
      v19[1] = 0;
      *(void *)&long long v22 = v19;
      *((void *)&v22 + 1) = v19 + 2;
      long long v236 = v22;
LABEL_78:
      int v47 = 0;
      goto LABEL_79;
    }
    (*(void (**)(float32x4_t *__return_ptr, unsigned __int8 *, float))(*(void *)v263 + 976))(&v239, v263, a6);
    v14.n128_u32[0] = v239.u32[2];
    if (v239.i8[0]) {
      float v15 = v239.f32[3];
    }
    else {
      float v15 = 1.0;
    }
    if (v239.i8[0]) {
      float v16 = v239.f32[2];
    }
    else {
      float v16 = 1.0;
    }
    if (v239.i8[0]) {
      float v17 = v239.f32[1];
    }
    else {
      float v17 = 1.0;
    }
    (*(void (**)(float32x4_t *__return_ptr, unsigned __int8 *, float, __n128))(*(void *)v13 + 928))(&v239, v13, a6, v14);
    if (v239.i8[0]) {
      float v18 = v239.f32[1];
    }
    else {
      float v18 = 1.0;
    }
    (*(void (**)(float32x4_t *__return_ptr, unsigned __int8 *, float))(*(void *)v13 + 264))(&v239, v13, a6);
    int v23 = v239.u8[0];
    __int32 v24 = v224;
    if (v239.i8[0]) {
      __int32 v24 = v239.i32[1];
    }
    __int32 v224 = v24;
    (*(void (**)(float32x4_t *__return_ptr, unsigned __int8 *, float))(*(void *)v13 + 352))(&v239, v13, a6);
    int v222 = v239.u8[0];
    int v25 = v226;
    if (v239.i8[0]) {
      int v25 = v239.u8[1];
    }
    int v223 = v13[8];
    BOOL v225 = v223 == 5;
    int v226 = v25;
    char v257 = 0;
    char v254 = 0;
    if (a4)
    {
      (*(void (**)(uint8_t *__return_ptr, unsigned __int8 *, float))(*(void *)v13 + 1096))(buf, v13, a6);
      int v26 = buf[0];
      if (buf[0])
      {
        *(uint64_t *)((char *)v239.i64 + 4) = v252;
        v239.f32[3] = v253;
        v239.i8[0] = 1;
      }
      (*(void (**)(uint8_t *__return_ptr, unsigned __int8 *, float))(*(void *)v13 + 1128))(buf, v13, a6);
      int v27 = buf[0];
      if (buf[0])
      {
        uint64_t v261 = v252;
        float v262 = v253;
        char v260 = 1;
      }
      (*(void (**)(uint8_t *__return_ptr, unsigned __int8 *, float))(*(void *)v13 + 1160))(buf, v13, a6);
      int v215 = buf[0];
      if (buf[0])
      {
        uint64_t v258 = v252;
        float v259 = v253;
        char v257 = 1;
      }
      (*(void (**)(uint8_t *__return_ptr, unsigned __int8 *, float))(*(void *)v13 + 1192))(buf, v13, a6);
      int v28 = buf[0];
      if (buf[0])
      {
        uint64_t v255 = v252;
        float v256 = v253;
        char v254 = 1;
      }
      if ((!v26
         || (*(uint64_t *)((char *)v239.i64 + 4) == v265 ? (BOOL v29 = v239.u32[3] == (unint64_t)v266) : (BOOL v29 = 0), v29))
        && (!v27 || (v261 == v265 ? (BOOL v30 = LODWORD(v262) == (unint64_t)v266) : (BOOL v30 = 0), v30))
        && (!v215 || (v258 == v265 ? (BOOL v31 = LODWORD(v259) == (unint64_t)v266) : (BOOL v31 = 0), v31)))
      {
        if (!buf[0]) {
          goto LABEL_73;
        }
        BOOL v32 = v255 != v265 || LODWORD(v256) != (unint64_t)v266;
      }
      else
      {
        BOOL v32 = 1;
      }
      if (v223 == 5 && v32)
      {
        if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
        }
        int8x8_t v33 = (id)GEOGetVectorKitVKDefaultLog_log;
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_1A1780000, v33, OS_LOG_TYPE_ERROR, "Color Ramp materials do not support climate tint... ignoring tint", buf, 2u);
        }

        goto LABEL_73;
      }
      if (v32)
      {
        unint64_t v34 = (char *)operator new(0x90uLL);
        uint8x8_t v35 = (float *)v34;
        float v36 = fmaxf(v17, fmaxf(v16, v15));
        float v37 = 0.0;
        if (v36 <= 0.0)
        {
          float v40 = 0.0;
        }
        else
        {
          float v38 = fminf(fminf(v15, v16), v17);
          float v39 = v36 - v38;
          float v40 = (float)(v36 - v38) / v36;
          if (v40 != 0.0)
          {
            float v41 = 1.0 / v39;
            float v42 = (float)(v36 - v16) * (float)(1.0 / v39);
            float v43 = (float)(v36 - v15) * (float)(1.0 / v39);
            if (v36 == v17)
            {
              if (v38 == v16) {
                float v37 = v43 + 5.0;
              }
              else {
                float v37 = 1.0 - v42;
              }
            }
            else
            {
              float v126 = (float)(v36 - v17) * v41;
              if (v36 == v16)
              {
                if (v38 == v15) {
                  float v37 = v126 + 1.0;
                }
                else {
                  float v37 = 3.0 - v43;
                }
              }
              else if (v38 == v17)
              {
                float v37 = v42 + 3.0;
              }
              else
              {
                float v37 = 5.0 - v126;
              }
            }
          }
        }
        uint64_t v66 = 0;
        BOOL v67 = v27 == 0;
        uint8x8_t v21 = v34 + 144;
        float v68 = v37 * 60.0;
        float v70 = *((float *)&v261 + 1);
        float v69 = v262;
        if (v67) {
          float v69 = 0.0;
        }
        float v71 = *(float *)&v261;
        if (v67)
        {
          float v70 = 0.0;
          float v71 = 0.0;
        }
        float v232 = v70 + v40;
        float v233 = v71 + v68;
        float v72 = v69 + v36;
        float v73 = v239.f32[3];
        float v74 = v239.f32[2];
        if (!v26) {
          float v73 = 0.0;
        }
        float v75 = v239.f32[1];
        if (!v26)
        {
          float v74 = 0.0;
          float v75 = 0.0;
        }
        float v234 = v68;
        float v235 = v40;
        float v230 = v75 + v68;
        float v231 = v72;
        float v237 = v36;
        float v228 = v73 + v36;
        float v229 = v74 + v40;
        if (v28) {
          float v76 = v256;
        }
        else {
          float v76 = 0.0;
        }
        float v77 = *((float *)&v255 + 1);
        if (!v28) {
          float v77 = 0.0;
        }
        float v218 = v77;
        float v219 = v76;
        if (v28) {
          float v78 = *(float *)&v255;
        }
        else {
          float v78 = 0.0;
        }
        float v79 = v259;
        BOOL v80 = v215 == 0;
        if (!v215) {
          float v79 = 0.0;
        }
        float v216 = v79;
        float v217 = v78;
        if (v80) {
          float v81 = 0.0;
        }
        else {
          float v81 = *((float *)&v258 + 1);
        }
        if (v80) {
          float v82 = 0.0;
        }
        else {
          float v82 = *(float *)&v258;
        }
        float v213 = v82;
        float v214 = v81;
        uint64_t v83 = (float *)(v34 + 24);
        while (1)
        {
          if (v66 == 2)
          {
            float v87 = v217;
            float v88 = v218;
            float v89 = v219;
          }
          else
          {
            float v87 = 0.0;
            float v88 = 0.0;
            float v89 = 0.0;
            if (!v66)
            {
              float v87 = v213;
              float v88 = v214;
              float v89 = v216;
            }
          }
          float v90 = fminf(fmaxf(v231 + v89, 0.0), 1.0);
          float v91 = v90 * fminf(fmaxf(v232 + v88, 0.0), 1.0);
          float v92 = fmodf((float)(v233 + v87) * 0.016667, 6.0);
          float v93 = v91 - (float)(fabsf(fmodf(v92, 2.0) + -1.0) * v91);
          float v94 = v90 - v91;
          if (v92 >= 0.0 && v92 < 1.0)
          {
            float v108 = v93 + v94;
            float v103 = v90;
            float v98 = v235;
            float v97 = v237;
          }
          else
          {
            BOOL v96 = v92 >= 1.0 && v92 < 2.0;
            float v98 = v235;
            float v97 = v237;
            if (v96)
            {
              float v103 = v93 + v94;
              float v108 = v90;
            }
            else if (v92 >= 2.0 && v92 < 3.0)
            {
              float v103 = v90 - v91;
              float v94 = v93 + v94;
              float v108 = v90;
            }
            else if (v92 >= 3.0 && v92 < 4.0)
            {
              float v108 = v93 + v94;
              float v103 = v90 - v91;
              float v94 = v90;
            }
            else
            {
              BOOL v101 = v92 >= 5.0;
              BOOL v102 = v92 < 6.0;
              if (v101 && v102) {
                float v103 = v90;
              }
              else {
                float v103 = v90 - v91;
              }
              float v104 = -0.0;
              if (v101 && v102) {
                float v104 = v93;
              }
              float v105 = v104 + v94;
              float v106 = v93 + v94;
              BOOL v107 = v92 >= 4.0 && v92 < 5.0;
              if (v107) {
                float v103 = v106;
              }
              float v108 = v90 - v91;
              if (v107) {
                float v94 = v90;
              }
              else {
                float v94 = v105;
              }
            }
          }
          *(v83 - 6) = v103;
          *(v83 - 5) = v108;
          *(v83 - 4) = v94;
          *(v83 - 3) = v18;
          float v109 = fminf(fmaxf(v97 + v89, 0.0), 1.0);
          float v110 = v109 * fminf(fmaxf(v98 + v88, 0.0), 1.0);
          float v111 = fmodf((float)(v234 + v87) * 0.016667, 6.0);
          float v112 = v110 - (float)(fabsf(fmodf(v111, 2.0) + -1.0) * v110);
          float v113 = v109 - v110;
          if (v111 >= 0.0 && v111 < 1.0)
          {
            float v116 = v112 + v113;
            float v115 = v109;
            float v109 = v109 - v110;
            a6 = v227;
          }
          else
          {
            a6 = v227;
            if (v111 < 1.0 || v111 >= 2.0)
            {
              if (v111 < 2.0 || v111 >= 3.0)
              {
                if (v111 < 3.0 || v111 >= 4.0)
                {
                  if (v111 < 4.0 || v111 >= 5.0)
                  {
                    BOOL v124 = v111 >= 5.0;
                    BOOL v125 = v111 < 6.0;
                    if (v124 && v125) {
                      float v115 = v109;
                    }
                    else {
                      float v115 = v113;
                    }
                    if (!v124 || !v125) {
                      float v112 = -0.0;
                    }
                    float v109 = v112 + v113;
                    float v116 = v113;
                  }
                  else
                  {
                    float v115 = v112 + v113;
                    float v116 = v113;
                  }
                }
                else
                {
                  float v116 = v112 + v113;
                  float v115 = v113;
                }
              }
              else
              {
                float v116 = v109;
                float v109 = v112 + v113;
                float v115 = v113;
              }
            }
            else
            {
              float v115 = v112 + v113;
              float v116 = v109;
              float v109 = v113;
            }
          }
          *(v83 - 2) = v115;
          *(v83 - 1) = v116;
          float *v83 = v109;
          v83[1] = v18;
          float v117 = v230 + v87;
          float v86 = fminf(fmaxf(v228 + v89, 0.0), 1.0);
          float v118 = v86 * fminf(fmaxf(v229 + v88, 0.0), 1.0);
          float v119 = fmodf(v117 * 0.016667, 6.0);
          float v120 = v118 - (float)(fabsf(fmodf(v119, 2.0) + -1.0) * v118);
          float v121 = v86 - v118;
          if (v119 >= 0.0 && v119 < 1.0)
          {
            float v84 = v120 + v121;
            float v85 = v86;
          }
          else
          {
            if (v119 < 1.0 || v119 >= 2.0)
            {
              if (v119 < 2.0 || v119 >= 3.0)
              {
                if (v119 < 3.0 || v119 >= 4.0)
                {
                  if (v119 < 4.0 || v119 >= 5.0)
                  {
                    BOOL v122 = v119 >= 5.0;
                    BOOL v123 = v119 < 6.0;
                    if (v122 && v123) {
                      float v85 = v86;
                    }
                    else {
                      float v85 = v86 - v118;
                    }
                    if (!v122 || !v123) {
                      float v120 = -0.0;
                    }
                    float v86 = v120 + v121;
                    float v84 = v121;
                  }
                  else
                  {
                    float v85 = v120 + v121;
                    float v84 = v86 - v118;
                  }
                }
                else
                {
                  float v84 = v120 + v121;
                  float v85 = v86 - v118;
                }
              }
              else
              {
                float v84 = v86;
                float v86 = v120 + v121;
                float v85 = v121;
              }
              goto LABEL_136;
            }
            float v85 = v120 + v121;
            float v84 = v86;
          }
          float v86 = v86 - v118;
LABEL_136:
          v83[2] = v85;
          v83[3] = v84;
          v83[4] = v86;
          v83[5] = v18;
          ++v66;
          v83 += 12;
          if (v66 == 3)
          {
            char v45 = 1;
            uint64_t i = v211;
            goto LABEL_74;
          }
        }
      }
    }
LABEL_73:
    uint8x8_t v35 = (float *)operator new(0x10uLL);
    char v45 = 0;
    uint8x8_t v21 = (char *)(v35 + 4);
    *uint8x8_t v35 = v17;
    v35[1] = v16;
    v35[2] = v15;
    void v35[3] = v18;
LABEL_74:
    *(unsigned char *)(a1 + 122) |= v45;
    if (v223 == 5 && !*(unsigned char *)(i + 8))
    {
      *(void *)uint64_t i = v12;
      *(unsigned char *)(i + 8) = 1;
    }
    *(void *)&long long v46 = v35;
    *((void *)&v46 + 1) = v21;
    long long v236 = v46;
    int v47 = v224;
    int v20 = v222;
    if (!v23) {
      goto LABEL_78;
    }
LABEL_79:
    if ((_BYTE)v226) {
      BOOL v48 = 1;
    }
    else {
      BOOL v48 = v20 == 0;
    }
    char v49 = v48;
    BOOL v50 = v13 != 0;
    uint64_t v51 = v249;
    if (v249 >= v250)
    {
      uint64_t v53 = (char *)__p;
      unint64_t v54 = 0xCCCCCCCCCCCCCCCDLL * ((v249 - (unsigned char *)__p) >> 3);
      unint64_t v55 = v54 + 1;
      if (v54 + 1 > 0x666666666666666) {
        abort();
      }
      if (0x999999999999999ALL * ((v250 - (unsigned char *)__p) >> 3) > v55) {
        unint64_t v55 = 0x999999999999999ALL * ((v250 - (unsigned char *)__p) >> 3);
      }
      if (0xCCCCCCCCCCCCCCCDLL * ((v250 - (unsigned char *)__p) >> 3) >= 0x333333333333333) {
        unint64_t v56 = 0x666666666666666;
      }
      else {
        unint64_t v56 = v55;
      }
      if (v56 > 0x666666666666666) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      int8x8_t v57 = (char *)operator new(40 * v56);
      unint64_t v58 = &v57[40 * v54];
      *(void *)unint64_t v58 = v12;
      *(_OWORD *)(v58 + 8) = v236;
      *((void *)v58 + 3) = v21;
      *((_DWORD *)v58 + 8) = v47;
      v58[36] = v49;
      v58[37] = v225;
      v58[38] = v50;
      if (v51 == v53)
      {
        std::string __p = v58;
        size_t v250 = &v57[40 * v56];
        uint64_t i = v211;
      }
      else
      {
        uint64_t v59 = 0;
        do
        {
          unint64_t v60 = &v58[v59];
          uint64_t v61 = &v51[v59];
          *((void *)v60 - 5) = *(void *)&v51[v59 - 40];
          *((void *)v60 - 3) = 0;
          *((void *)v60 - 2) = 0;
          *((_OWORD *)v60 - 2) = *(_OWORD *)&v51[v59 - 32];
          *((void *)v60 - 2) = *(void *)&v51[v59 - 16];
          *((void *)v61 - 4) = 0;
          *((void *)v61 - 3) = 0;
          *((void *)v61 - 2) = 0;
          int v62 = *(_DWORD *)&v51[v59 - 8];
          *(_DWORD *)(v60 - 5) = *(_DWORD *)&v51[v59 - 5];
          *((_DWORD *)v60 - 2) = v62;
          v59 -= 40;
        }
        while (&v51[v59] != v53);
        uint64_t v51 = (char *)__p;
        int v63 = v249;
        std::string __p = &v58[v59];
        size_t v250 = &v57[40 * v56];
        for (uint64_t i = v211; v63 != v51; v63 -= 40)
        {
          uint64_t v64 = (void *)*((void *)v63 - 4);
          if (v64)
          {
            *((void *)v63 - 3) = v64;
            operator delete(v64);
          }
        }
      }
      long long v52 = v58 + 40;
      if (v51) {
        operator delete(v51);
      }
    }
    else
    {
      *(void *)uint64_t v249 = v12;
      *(_OWORD *)(v51 + 8) = v236;
      *((void *)v51 + 3) = v21;
      *((_DWORD *)v51 + 8) = v47;
      v51[36] = v49;
      v51[37] = v225;
      long long v52 = v51 + 40;
      v51[38] = v50;
    }
    uint64_t v249 = v52;
    uint64_t v65 = v264;
    if (v264 && !atomic_fetch_add(&v264->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
    v8 += 8;
  }
  while (v8 != v221);
  uint64_t v11 = (char *)__p;
  long double v127 = v249;
  uint64_t v128 = (*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4;
  *(unsigned char *)(a1 + 123) = 1;
  if (v11 == v127) {
    goto LABEL_233;
  }
  unint64_t v129 = v127 - v11 - 40;
  if (v129 > 0x27)
  {
    unint64_t v133 = v129 / 0x28 + 1;
    double v134 = v11 + 78;
    char v135 = -1;
    char v136 = 1;
    uint64_t v137 = v133 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      char v138 = *(v134 - 40);
      char v139 = *v134;
      v134 += 80;
      v136 &= v138;
      v135 &= v139;
      v137 -= 2;
    }
    while (v137);
    char v130 = v135 & v136;
    if (v133 != (v133 & 0xFFFFFFFFFFFFFFELL))
    {
      double v131 = &v11[40 * (v133 & 0xFFFFFFFFFFFFFFELL)];
      goto LABEL_239;
    }
  }
  else
  {
    char v130 = 1;
    double v131 = v11;
    do
    {
LABEL_239:
      v130 &= v131[38];
      v131 += 40;
    }
    while (v131 != v127);
  }
  *(unsigned char *)(a1 + 123) = v130;
  uint64_t v132 = v128;
  if (v128)
  {
LABEL_241:
    uint64_t v140 = 0;
    if (a5) {
      float v141 = 0.054901;
    }
    else {
      float v141 = 0.094118;
    }
    if (a5) {
      float v142 = 0.098039;
    }
    else {
      float v142 = 0.66274;
    }
    if (a5) {
      float v143 = 0.21961;
    }
    else {
      float v143 = 0.94902;
    }
    do
    {
      uint64_t v147 = *(void *)(a1 + 72) + 16 * v140;
      double v148 = *(__int16 **)v147;
      unsigned int v150 = *(unsigned __int16 *)(v147 + 8);
      double v149 = (_WORD *)(v147 + 8);
      __double2 v151 = (unsigned __int16 *)(*(void *)v147 + 2 * *(unsigned __int16 *)(v147 + 8));
      v239.i64[0] = (uint64_t)&__p;
      unint64_t v152 = 126 - 2 * __clz(v150);
      if (v150) {
        uint64_t v153 = v152;
      }
      else {
        uint64_t v153 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,md::MaterialRaster::updateStyleTextureIfNecessary(gms::MaterialManager<ggl::Texture2D> &,float,std::optional<unsigned long long> &,BOOL,BOOL)::$_0 &,unsigned short *,false>(v148, v151, (uint64_t **)&v239, v153, 1);
      if (*(unsigned char *)(a1 + 122))
      {
        v239.i64[0] = __PAIR64__(LODWORD(v142), LODWORD(v141));
        v239.i64[1] = LODWORD(v143);
        v240.i64[0] = __PAIR64__(LODWORD(v142), LODWORD(v141));
        v240.i64[1] = LODWORD(v143);
        v241.i64[0] = __PAIR64__(LODWORD(v142), LODWORD(v141));
        v241.i64[1] = LODWORD(v143);
        v242.i64[0] = __PAIR64__(LODWORD(v142), LODWORD(v141));
        v242.i64[1] = LODWORD(v143);
        v243.i64[0] = __PAIR64__(LODWORD(v142), LODWORD(v141));
        v243.i64[1] = LODWORD(v143);
        v244.i64[0] = __PAIR64__(LODWORD(v142), LODWORD(v141));
        v244.i64[1] = LODWORD(v143);
        v245.i64[0] = __PAIR64__(LODWORD(v142), LODWORD(v141));
        v245.i64[1] = LODWORD(v143);
        v246.i64[0] = __PAIR64__(LODWORD(v142), LODWORD(v141));
        v246.i64[1] = LODWORD(v143);
        v247.i64[0] = __PAIR64__(LODWORD(v142), LODWORD(v141));
        v247.i64[1] = LODWORD(v143);
        uint64_t v154 = (unsigned __int16)*v149;
        if (*v149)
        {
          char v155 = 0;
          double v156 = *(unsigned __int16 **)v147;
          float32x4_t v158 = v239;
          float32x4_t v157 = v240;
          float32x4_t v160 = v241;
          float32x4_t v159 = v242;
          float32x4_t v162 = v243;
          float32x4_t v161 = v244;
          float32x4_t v164 = v245;
          float32x4_t v163 = v246;
          float32x4_t v165 = v247;
          v165.i32[3] = 0;
          do
          {
            unsigned int v167 = *v156++;
            unsigned int v166 = v167;
            if (*((unsigned char *)__p + 40 * v167 + 36))
            {
              uint64_t v168 = (char *)__p + 40 * v166;
              BOOL v169 = v168[37] != 0;
              uint64_t v171 = v168 + 8;
              float64x2_t v170 = (float32x4_t *)*((void *)v168 + 1);
              BOOL v172 = *((void *)v171 + 1) - (void)v170 > 0x10uLL;
              float32x4_t v173 = vmlaq_n_f32(vmulq_laneq_f32(*v170, *v170, 3), v158, 1.0 - COERCE_FLOAT(HIDWORD(*(unsigned long long *)v170)));
              float32x4_t v239 = v173;
              float32x4_t v174 = vmlaq_n_f32(vmulq_laneq_f32(v170[v172], v170[v172], 3), v157, 1.0 - COERCE_FLOAT(HIDWORD(*(_OWORD *)&v170[v172])));
              float32x4_t v240 = v174;
              float32x4_t v175 = vmlaq_n_f32(vmulq_laneq_f32(v170[2 * v172], v170[2 * v172], 3), v160, 1.0 - COERCE_FLOAT(HIDWORD(*(_OWORD *)&v170[2 * v172])));
              float32x4_t v241 = v175;
              uint64_t v176 = v172 | (2 * v172);
              float32x4_t v177 = vmlaq_n_f32(vmulq_laneq_f32(v170[v176], v170[v176], 3), v159, 1.0 - COERCE_FLOAT(HIDWORD(*(_OWORD *)&v170[v176])));
              float32x4_t v242 = v177;
              if (v172) {
                ++v176;
              }
              float32x4_t v178 = vmlaq_n_f32(vmulq_laneq_f32(v170[v176], v170[v176], 3), v162, 1.0 - COERCE_FLOAT(HIDWORD(*(_OWORD *)&v170[v176])));
              float32x4_t v243 = v178;
              if (v172) {
                ++v176;
              }
              float32x4_t v179 = vmlaq_n_f32(vmulq_laneq_f32(v170[v176], v170[v176], 3), v161, 1.0 - COERCE_FLOAT(HIDWORD(*(_OWORD *)&v170[v176])));
              float32x4_t v244 = v179;
              if (v172) {
                ++v176;
              }
              float32x4_t v180 = vmlaq_n_f32(vmulq_laneq_f32(v170[v176], v170[v176], 3), v164, 1.0 - COERCE_FLOAT(HIDWORD(*(_OWORD *)&v170[v176])));
              float32x4_t v245 = v180;
              if (v172) {
                ++v176;
              }
              float32x4_t v181 = vmlaq_n_f32(vmulq_laneq_f32(v170[v176], v170[v176], 3), v163, 1.0 - COERCE_FLOAT(HIDWORD(*(_OWORD *)&v170[v176])));
              float32x4_t v246 = v181;
              if (v172) {
                ++v176;
              }
              v155 |= v169;
              float32x4_t v158 = v173;
              float32x4_t v157 = v174;
              float32x4_t v160 = v175;
              float32x4_t v159 = v177;
              float32x4_t v162 = v178;
              float32x4_t v247 = vmlaq_n_f32(vmulq_laneq_f32(v170[v176], v170[v176], 3), v165, 1.0 - COERCE_FLOAT(HIDWORD(*(_OWORD *)&v170[v176])));
              float32x4_t v161 = v179;
              float32x4_t v164 = v180;
              float32x4_t v163 = v181;
              float32x4_t v165 = v247;
            }
            --v154;
          }
          while (v154);
          if (v155)
          {
            v239.i32[3] = 0;
            v240.i32[3] = 0;
            v241.i32[3] = 0;
            v242.i32[3] = 0;
            v243.i32[3] = 0;
            v244.i32[3] = 0;
            v245.i32[3] = 0;
            v246.i32[3] = 0;
            v247.i32[3] = 0;
          }
        }
        uint64_t v144 = *(void *)(a1 + 32);
        uint64_t v145 = *(void *)v144 + 144 * v140;
        if (v239.i64[0] != *(void *)v145 || v239.i64[1] != *(void *)(v145 + 8)) {
          goto LABEL_254;
        }
        BOOL v193 = v240.i64[0] == *(void *)(v145 + 16) && v240.i64[1] == *(void *)(v145 + 24);
        if (!v193
          || (v241.i64[0] == *(void *)(v145 + 32) ? (BOOL v194 = v241.i64[1] == *(void *)(v145 + 40)) : (BOOL v194 = 0),
              !v194
           || (v242.i64[0] == *(void *)(v145 + 48) ? (BOOL v195 = v242.i64[1] == *(void *)(v145 + 56)) : (BOOL v195 = 0),
               !v195
            || (v243.i64[0] == *(void *)(v145 + 64) ? (BOOL v196 = v243.i64[1] == *(void *)(v145 + 72)) : (BOOL v196 = 0),
                !v196
             || (v244.i64[0] == *(void *)(v145 + 80) ? (BOOL v197 = v244.i64[1] == *(void *)(v145 + 88)) : (BOOL v197 = 0),
                 !v197
              || (v245.i64[0] == *(void *)(v145 + 96) ? (BOOL v198 = v245.i64[1] == *(void *)(v145 + 104)) : (BOOL v198 = 0),
                  !v198
               || (v246.i64[0] == *(void *)(v145 + 112) ? (BOOL v199 = v246.i64[1] == *(void *)(v145 + 120)) : (BOOL v199 = 0),
                   !v199
                || (v247.i64[0] == *(void *)(v145 + 128)
                  ? (BOOL v200 = v247.i64[1] == *(void *)(v145 + 136))
                  : (BOOL v200 = 0),
                    !v200))))))))
        {
LABEL_254:
          *(unsigned char *)(v144 + 32) = 1;
          *(float32x4_t *)uint64_t v145 = v239;
          *(float32x4_t *)(v145 + 16) = v240;
          *(float32x4_t *)(v145 + 32) = v241;
          *(float32x4_t *)(v145 + 48) = v242;
          *(float32x4_t *)(v145 + 64) = v243;
          *(float32x4_t *)(v145 + 80) = v244;
          *(float32x4_t *)(v145 + 96) = v245;
          *(float32x4_t *)(v145 + 112) = v246;
          *(float32x4_t *)(v145 + 128) = v247;
        }
      }
      else
      {
        v239.i64[0] = __PAIR64__(LODWORD(v142), LODWORD(v141));
        v239.f32[2] = v143;
        uint64_t v182 = (unsigned __int16)*v149;
        if (*v149)
        {
          char v183 = 0;
          signed int v184 = *(unsigned __int16 **)v147;
          float v185 = v143;
          float v186 = v142;
          float v187 = v141;
          do
          {
            unsigned int v189 = *v184++;
            unsigned int v188 = v189;
            if (*((unsigned char *)__p + 40 * v189 + 36))
            {
              uint64_t v190 = (char *)__p + 40 * v188;
              v183 |= v190[37] != 0;
              uint64_t v191 = (float *)*((void *)v190 + 1);
              float v192 = v191[3];
              float v187 = (float)((float)(1.0 - v192) * v187) + (float)(*v191 * v192);
              float v186 = (float)((float)(1.0 - v192) * v186) + (float)(v191[1] * v192);
              float v185 = (float)((float)(1.0 - v192) * v185) + (float)(v191[2] * v192);
            }
            --v182;
          }
          while (v182);
          v239.i64[0] = __PAIR64__(LODWORD(v186), LODWORD(v187));
          v239.f32[2] = v185;
          if (v183) {
            float v201 = 0.0;
          }
          else {
            float v201 = 1.0;
          }
        }
        else
        {
          float v201 = 1.0;
          float v185 = v143;
          float v186 = v142;
          float v187 = v141;
        }
        v239.f32[3] = v201;
        uint64_t v202 = *(void *)(a1 + 16);
        uint64_t v203 = *(void *)v202 + 16 * v140;
        if (v239.i64[0] != *(void *)v203 || v239.i64[1] != *(void *)(v203 + 8))
        {
          *(unsigned char *)(v202 + 32) = 1;
          *(float *)uint64_t v203 = v187;
          *(float *)(v203 + 4) = v186;
          *(float *)(v203 + 8) = v185;
          *(float *)(v203 + 12) = v201;
        }
      }
      ++v140;
    }
    while (v140 != v132);
    uint64_t v11 = (char *)__p;
  }
LABEL_333:
  int v205 = *(unsigned __int8 *)(a1 + 122);
  if (v11)
  {
    char v206 = v249;
    uint64_t v207 = v11;
    if (v249 != v11)
    {
      do
      {
        long long v208 = (void *)*((void *)v206 - 4);
        if (v208)
        {
          *((void *)v206 - 3) = v208;
          operator delete(v208);
        }
        v206 -= 40;
      }
      while (v206 != v11);
      uint64_t v207 = __p;
    }
    uint64_t v249 = v11;
    operator delete(v207);
  }
  return v205 != 0;
}

void sub_1A1864658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,long long a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char *__p,char *a52)
{
  uint64_t v53 = __p;
  if (__p)
  {
    unint64_t v54 = a52;
    if (a52 != __p)
    {
      do
      {
        unint64_t v55 = (void *)*((void *)v54 - 4);
        if (v55)
        {
          *((void *)v54 - 3) = v55;
          operator delete(v55);
        }
        v54 -= 40;
      }
      while (v54 != __p);
      uint64_t v53 = __p;
    }
    operator delete(v53);
  }
  _Unwind_Resume(exception_object);
}

__int16 *std::__introsort<std::_ClassicAlgPolicy,md::MaterialRaster::updateStyleTextureIfNecessary(gms::MaterialManager<ggl::Texture2D> &,float,std::optional<unsigned long long> &,BOOL,BOOL)::$_0 &,unsigned short *,false>(__int16 *result, unsigned __int16 *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t v11 = (unsigned __int16 *)result;
  while (2)
  {
    unint64_t v12 = (__int16 *)(a2 - 1);
    uint64_t v13 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = v13;
          uint64_t v14 = (char *)a2 - (char *)v13;
          uint64_t v15 = a2 - v13;
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0:
              case 1:
                return result;
              case 2:
                __int16 v85 = *v13;
                if (*(_DWORD *)(**a3 + 40 * (unsigned __int16)*v12 + 32) >= *(_DWORD *)(**a3 + 40 * *v13 + 32)) {
                  return result;
                }
                *uint64_t v13 = *v12;
                goto LABEL_166;
              case 3:
                uint64_t v86 = **a3;
                unsigned __int16 v87 = v13[1];
                __int16 v85 = *v13;
                unsigned int v88 = *(_DWORD *)(v86 + 40 * v87 + 32);
                unsigned int v89 = *(_DWORD *)(v86 + 40 * *v13 + 32);
                unsigned __int16 v90 = *v12;
                unsigned int v91 = *(_DWORD *)(v86 + 40 * (unsigned __int16)*v12 + 32);
                if (v88 >= v89)
                {
                  if (v91 < v88)
                  {
                    v13[1] = v90;
                    __int16 *v12 = v87;
                    unsigned __int16 v144 = *v13;
                    if (*(_DWORD *)(v86 + 40 * v13[1] + 32) < *(_DWORD *)(v86 + 40 * *v13 + 32))
                    {
                      *uint64_t v13 = v13[1];
                      v13[1] = v144;
                    }
                  }
                }
                else
                {
                  if (v91 >= v88)
                  {
                    *uint64_t v13 = v87;
                    v13[1] = v85;
                    if (*(_DWORD *)(v86 + 40 * (unsigned __int16)*v12 + 32) >= v89) {
                      return result;
                    }
                    v13[1] = *v12;
                  }
                  else
                  {
                    *uint64_t v13 = v90;
                  }
LABEL_166:
                  __int16 *v12 = v85;
                }
                break;
              case 4:
                uint64_t v92 = **a3;
                return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MaterialRaster::updateStyleTextureIfNecessary(gms::MaterialManager<ggl::Texture2D> &,float,std::optional<unsigned long long> &,BOOL,BOOL)::$_0 &,unsigned short *>((__int16 *)v13, v13 + 1, v13 + 2, a2 - 1, v92);
              case 5:
                float v93 = v13 + 1;
                float v94 = v13 + 2;
                int v95 = (__int16 *)(v13 + 3);
                uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MaterialRaster::updateStyleTextureIfNecessary(gms::MaterialManager<ggl::Texture2D> &,float,std::optional<unsigned long long> &,BOOL,BOOL)::$_0 &,unsigned short *>((__int16 *)v13, v13 + 1, v13 + 2, v13 + 3, **a3);
                unsigned __int16 v96 = v13[3];
                uint64_t v97 = **a3;
                if (*(_DWORD *)(v97 + 40 * (unsigned __int16)*v12 + 32) < *(_DWORD *)(v97 + 40 * v96 + 32))
                {
                  *int v95 = *v12;
                  __int16 *v12 = v96;
                  unsigned __int16 v98 = *v95;
                  unsigned __int16 v99 = *v94;
                  unsigned int v100 = *(_DWORD *)(v97 + 40 * (unsigned __int16)*v95 + 32);
                  if (v100 < *(_DWORD *)(v97 + 40 * *v94 + 32))
                  {
                    *float v94 = v98;
                    *int v95 = v99;
                    unsigned __int16 v101 = *v93;
                    if (v100 < *(_DWORD *)(v97 + 40 * *v93 + 32))
                    {
                      v13[1] = v98;
                      v13[2] = v101;
                      __int16 v102 = *v13;
                      if (v100 < *(_DWORD *)(v97 + 40 * *v13 + 32))
                      {
                        *uint64_t v13 = v98;
                        v13[1] = v102;
                      }
                    }
                  }
                }
                return result;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v14 <= 47)
          {
            float v103 = *a3;
            if (a5)
            {
              if (v13 != a2)
              {
                float v104 = v13 + 1;
                if (v13 + 1 != a2)
                {
                  uint64_t v105 = *v103;
                  uint64_t v106 = 2;
                  BOOL v107 = v13;
                  do
                  {
                    unsigned int v109 = v107[1];
                    unsigned int v110 = *v107;
                    BOOL v107 = v104;
                    unsigned int v111 = *(_DWORD *)(v105 + 40 * v109 + 32);
                    if (v111 < *(_DWORD *)(v105 + 40 * v110 + 32))
                    {
                      uint64_t v112 = v106;
                      do
                      {
                        *(unsigned __int16 *)((char *)v13 + v112) = v110;
                        uint64_t v113 = v112 - 2;
                        if (v112 == 2)
                        {
                          float v108 = v13;
                          goto LABEL_114;
                        }
                        LOWORD(v110) = *(unsigned __int16 *)((char *)v13 + v112 - 4);
                        v112 -= 2;
                      }
                      while (v111 < *(_DWORD *)(v105 + 40 * (unsigned __int16)v110 + 32));
                      float v108 = (unsigned __int16 *)((char *)v13 + v113);
LABEL_114:
                      unsigned __int16 *v108 = v109;
                    }
                    float v104 = v107 + 1;
                    v106 += 2;
                  }
                  while (v107 + 1 != a2);
                }
              }
            }
            else if (v13 != a2)
            {
              uint64_t v145 = v13 + 1;
              if (v13 + 1 != a2)
              {
                uint64_t v146 = *v103;
                do
                {
                  unsigned int v147 = v11[1];
                  unsigned int v148 = *v11;
                  uint64_t v11 = v145;
                  unsigned int v149 = v148;
                  unsigned int v150 = *(_DWORD *)(v146 + 40 * v147 + 32);
                  if (v150 < *(_DWORD *)(v146 + 40 * v149 + 32))
                  {
                    __double2 v151 = v11;
                    do
                    {
                      *__double2 v151 = v149;
                      LOWORD(v149) = *(v151 - 2);
                      --v151;
                    }
                    while (v150 < *(_DWORD *)(v146 + 40 * (unsigned __int16)v149 + 32));
                    *__double2 v151 = v147;
                  }
                  uint64_t v145 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v13 != a2)
            {
              int64_t v114 = (unint64_t)(v15 - 2) >> 1;
              float v115 = *a3;
              int64_t v116 = v114;
              do
              {
                if (v114 >= v116)
                {
                  uint64_t v118 = (2 * v116) | 1;
                  float v119 = &v13[v118];
                  unsigned int v120 = *v119;
                  if (2 * v116 + 2 < v15)
                  {
                    uint64_t v121 = *v115;
                    if (*(_DWORD *)(*v115 + 40 * *v119 + 32) < *(_DWORD *)(*v115 + 40 * v119[1] + 32))
                    {
                      unsigned int v120 = v119[1];
                      ++v119;
                      uint64_t v118 = 2 * v116 + 2;
                    }
                  }
                  else
                  {
                    uint64_t v121 = *v115;
                  }
                  BOOL v122 = &v13[v116];
                  unsigned __int16 v123 = *v122;
                  uint64_t result = (__int16 *)*(unsigned int *)(v121 + 40 * *v122 + 32);
                  if (*(_DWORD *)(v121 + 40 * v120 + 32) >= result)
                  {
                    do
                    {
                      BOOL v124 = v119;
                      unsigned __int16 *v122 = v120;
                      if (v114 < v118) {
                        break;
                      }
                      uint64_t v125 = (2 * v118) | 1;
                      float v119 = &v13[v125];
                      uint64_t v126 = 2 * v118 + 2;
                      unsigned int v120 = *v119;
                      if (v126 < v15 && *(_DWORD *)(v121 + 40 * *v119 + 32) < *(_DWORD *)(v121 + 40 * v119[1] + 32))
                      {
                        unsigned int v120 = v119[1];
                        ++v119;
                        uint64_t v125 = v126;
                      }
                      BOOL v122 = v124;
                      uint64_t v118 = v125;
                    }
                    while (*(_DWORD *)(v121 + 40 * v120 + 32) >= result);
                    *BOOL v124 = v123;
                    float v115 = *a3;
                  }
                }
                BOOL v117 = v116-- <= 0;
              }
              while (!v117);
              uint64_t v127 = (unint64_t)v14 >> 1;
              do
              {
                uint64_t v128 = 0;
                __int16 v129 = *v13;
                char v130 = *a3;
                double v131 = v13;
                do
                {
                  uint64_t v132 = 2 * v128 + 2;
                  unint64_t v133 = (unsigned __int16 *)((char *)v131 + v132);
                  uint64_t v134 = (2 * v128) | 1;
                  unsigned __int16 v135 = *(unsigned __int16 *)((char *)v131 + v132);
                  if (v132 < v127)
                  {
                    uint64_t result = (__int16 *)(v133 + 1);
                    if (*(_DWORD *)(*v130 + 40 * *(unsigned __int16 *)((char *)v131 + v132) + 32) < *(_DWORD *)(*v130 + 40 * v133[1] + 32))
                    {
                      unsigned __int16 v135 = v133[1];
                      ++v133;
                      uint64_t v134 = v132;
                    }
                  }
                  unsigned __int16 *v131 = v135;
                  double v131 = v133;
                  uint64_t v128 = v134;
                }
                while (v134 <= (uint64_t)((unint64_t)(v127 - 2) >> 1));
                if (v133 == --a2)
                {
                  *unint64_t v133 = v129;
                }
                else
                {
                  *unint64_t v133 = *a2;
                  *a2 = v129;
                  uint64_t v136 = (char *)v133 - (char *)v13 + 2;
                  if (v136 >= 3)
                  {
                    unint64_t v137 = (((unint64_t)v136 >> 1) - 2) >> 1;
                    char v138 = &v13[v137];
                    unsigned __int16 v139 = *v138;
                    unsigned __int16 v140 = *v133;
                    uint64_t v141 = **a3;
                    unsigned int v142 = *(_DWORD *)(v141 + 40 * *v133 + 32);
                    if (*(_DWORD *)(v141 + 40 * *v138 + 32) < v142)
                    {
                      do
                      {
                        float v143 = v138;
                        *unint64_t v133 = v139;
                        if (!v137) {
                          break;
                        }
                        unint64_t v137 = (v137 - 1) >> 1;
                        char v138 = &v13[v137];
                        unsigned __int16 v139 = *v138;
                        uint64_t result = (__int16 *)*(unsigned int *)(v141 + 40 * *v138 + 32);
                        unint64_t v133 = v143;
                      }
                      while (result < v142);
                      unsigned __int16 *v143 = v140;
                    }
                  }
                }
                BOOL v117 = v127-- <= 2;
              }
              while (!v117);
            }
            return result;
          }
          unint64_t v16 = (unint64_t)v15 >> 1;
          float v17 = (__int16 *)&v13[(unint64_t)v15 >> 1];
          uint64_t v18 = **a3;
          __int16 v19 = *v12;
          unsigned int v20 = *(_DWORD *)(v18 + 40 * (unsigned __int16)*v12 + 32);
          if ((unint64_t)v14 >= 0x101)
          {
            __int16 v21 = *v17;
            __int16 v22 = *v13;
            unsigned int v23 = *(_DWORD *)(v18 + 40 * (unsigned __int16)*v17 + 32);
            unsigned int v24 = *(_DWORD *)(v18 + 40 * *v13 + 32);
            if (v23 >= v24)
            {
              if (v20 < v23)
              {
                *float v17 = v19;
                __int16 *v12 = v21;
                __int16 v29 = *v13;
                if (*(_DWORD *)(v18 + 40 * (unsigned __int16)*v17 + 32) < *(_DWORD *)(v18 + 40 * *v13 + 32))
                {
                  *uint64_t v13 = *v17;
                  *float v17 = v29;
                }
              }
            }
            else
            {
              if (v20 >= v23)
              {
                *uint64_t v13 = v21;
                *float v17 = v22;
                if (*(_DWORD *)(v18 + 40 * (unsigned __int16)*v12 + 32) >= v24) {
                  goto LABEL_23;
                }
                *float v17 = *v12;
              }
              else
              {
                *uint64_t v13 = v19;
              }
              __int16 *v12 = v22;
            }
LABEL_23:
            BOOL v31 = &v13[v16];
            unsigned int v34 = *(v31 - 1);
            BOOL v32 = v31 - 1;
            unsigned __int16 v33 = v34;
            unsigned __int16 v35 = v13[1];
            unsigned int v36 = *(_DWORD *)(v18 + 40 * v34 + 32);
            unsigned int v37 = *(_DWORD *)(v18 + 40 * v35 + 32);
            unsigned __int16 v38 = *(a2 - 2);
            unsigned int v39 = *(_DWORD *)(v18 + 40 * v38 + 32);
            if (v36 >= v37)
            {
              if (v39 < v36)
              {
                *BOOL v32 = v38;
                *(a2 - 2) = v33;
                unsigned __int16 v40 = v13[1];
                if (*(_DWORD *)(v18 + 40 * *v32 + 32) < *(_DWORD *)(v18 + 40 * v40 + 32))
                {
                  v13[1] = *v32;
                  *BOOL v32 = v40;
                }
              }
            }
            else
            {
              if (v39 >= v36)
              {
                v13[1] = v33;
                *BOOL v32 = v35;
                if (*(_DWORD *)(v18 + 40 * *(a2 - 2) + 32) >= v37) {
                  goto LABEL_35;
                }
                *BOOL v32 = *(a2 - 2);
              }
              else
              {
                v13[1] = v38;
              }
              *(a2 - 2) = v35;
            }
LABEL_35:
            float v41 = &v13[v16];
            unsigned int v44 = v41[1];
            float v42 = v41 + 1;
            unsigned __int16 v43 = v44;
            unsigned __int16 v45 = v13[2];
            unsigned int v46 = *(_DWORD *)(v18 + 40 * v44 + 32);
            unsigned int v47 = *(_DWORD *)(v18 + 40 * v45 + 32);
            unsigned __int16 v48 = *(a2 - 3);
            unsigned int v49 = *(_DWORD *)(v18 + 40 * v48 + 32);
            if (v46 >= v47)
            {
              if (v49 < v46)
              {
                unsigned __int16 *v42 = v48;
                *(a2 - 3) = v43;
                unsigned __int16 v50 = v13[2];
                if (*(_DWORD *)(v18 + 40 * *v42 + 32) < *(_DWORD *)(v18 + 40 * v50 + 32))
                {
                  v13[2] = *v42;
                  unsigned __int16 *v42 = v50;
                }
              }
            }
            else
            {
              if (v49 >= v46)
              {
                v13[2] = v43;
                unsigned __int16 *v42 = v45;
                if (*(_DWORD *)(v18 + 40 * *(a2 - 3) + 32) >= v47) {
                  goto LABEL_44;
                }
                unsigned __int16 *v42 = *(a2 - 3);
              }
              else
              {
                v13[2] = v48;
              }
              *(a2 - 3) = v45;
            }
LABEL_44:
            unsigned __int16 v51 = *v17;
            unsigned __int16 v52 = *v32;
            unsigned int v53 = *(_DWORD *)(v18 + 40 * (unsigned __int16)*v17 + 32);
            unsigned int v54 = *(_DWORD *)(v18 + 40 * *v32 + 32);
            unsigned __int16 v55 = *v42;
            unsigned int v56 = *(_DWORD *)(v18 + 40 * *v42 + 32);
            if (v53 >= v54)
            {
              if (v56 >= v53) {
                goto LABEL_51;
              }
              *float v17 = v55;
              unsigned __int16 *v42 = v51;
              float v42 = (unsigned __int16 *)v17;
              unsigned __int16 v51 = v52;
              if (v56 >= v54)
              {
                unsigned __int16 v51 = v55;
                goto LABEL_51;
              }
            }
            else if (v56 >= v53)
            {
              *BOOL v32 = v51;
              *float v17 = v52;
              BOOL v32 = (unsigned __int16 *)v17;
              unsigned __int16 v51 = v55;
              if (v56 >= v54)
              {
                unsigned __int16 v51 = v52;
LABEL_51:
                __int16 v57 = *v13;
                *uint64_t v13 = v51;
                *float v17 = v57;
                goto LABEL_52;
              }
            }
            *BOOL v32 = v55;
            unsigned __int16 *v42 = v52;
            goto LABEL_51;
          }
          __int16 v25 = *v13;
          __int16 v26 = *v17;
          unsigned int v27 = *(_DWORD *)(v18 + 40 * *v13 + 32);
          unsigned int v28 = *(_DWORD *)(v18 + 40 * (unsigned __int16)*v17 + 32);
          if (v27 >= v28)
          {
            if (v20 < v27)
            {
              *uint64_t v13 = v19;
              __int16 *v12 = v25;
              __int16 v30 = *v17;
              if (*(_DWORD *)(v18 + 40 * *v13 + 32) < *(_DWORD *)(v18 + 40 * (unsigned __int16)*v17 + 32))
              {
                *float v17 = *v13;
                *uint64_t v13 = v30;
              }
            }
          }
          else
          {
            if (v20 < v27)
            {
              *float v17 = v19;
LABEL_31:
              __int16 *v12 = v26;
              goto LABEL_52;
            }
            *float v17 = v25;
            *uint64_t v13 = v26;
            if (*(_DWORD *)(v18 + 40 * (unsigned __int16)*v12 + 32) < v28)
            {
              *uint64_t v13 = *v12;
              goto LABEL_31;
            }
          }
LABEL_52:
          --a4;
          __int16 v58 = *v13;
          if (a5) {
            break;
          }
          unsigned int v59 = *(_DWORD *)(v18 + 40 * *v13 + 32);
          if (*(_DWORD *)(v18 + 40 * *(v13 - 1) + 32) < v59) {
            break;
          }
          if (v59 < *(_DWORD *)(v18 + 40 * (unsigned __int16)*v12 + 32))
          {
            do
            {
              unsigned int v76 = v13[1];
              ++v13;
            }
            while (v59 >= *(_DWORD *)(v18 + 40 * v76 + 32));
          }
          else
          {
            float v77 = v13 + 1;
            do
            {
              uint64_t v13 = v77;
              if (v77 >= a2) {
                break;
              }
              ++v77;
            }
            while (v59 >= *(_DWORD *)(v18 + 40 * *v13 + 32));
          }
          float v78 = a2;
          if (v13 < a2)
          {
            float v78 = a2;
            do
              unsigned int v79 = *--v78;
            while (v59 < *(_DWORD *)(v18 + 40 * v79 + 32));
          }
          if (v13 < v78)
          {
            __int16 v80 = *v13;
            unsigned __int16 v81 = *v78;
            do
            {
              *uint64_t v13 = v81;
              *float v78 = v80;
              do
              {
                unsigned int v82 = v13[1];
                ++v13;
                __int16 v80 = v82;
              }
              while (v59 >= *(_DWORD *)(v18 + 40 * v82 + 32));
              do
              {
                unsigned int v83 = *--v78;
                unsigned __int16 v81 = v83;
              }
              while (v59 < *(_DWORD *)(v18 + 40 * v83 + 32));
            }
            while (v13 < v78);
          }
          float v84 = (__int16 *)(v13 - 1);
          BOOL v5 = v13 - 1 >= v11;
          BOOL v6 = v13 - 1 == v11;
          if (v13 - 1 != v11) {
            unsigned __int16 *v11 = *v84;
          }
          a5 = 0;
          *float v84 = v58;
        }
        uint64_t v60 = **a3;
        unsigned int v61 = *(_DWORD *)(v60 + 40 * *v13 + 32);
        int v62 = v13;
        do
        {
          int v63 = v62;
          unsigned int v65 = v62[1];
          ++v62;
          unsigned __int16 v64 = v65;
        }
        while (*(_DWORD *)(v60 + 40 * v65 + 32) < v61);
        uint64_t v66 = a2;
        if (v63 == v13)
        {
          uint64_t v66 = a2;
          do
          {
            if (v62 >= v66) {
              break;
            }
            unsigned int v68 = *--v66;
          }
          while (*(_DWORD *)(v60 + 40 * v68 + 32) >= v61);
        }
        else
        {
          do
            unsigned int v67 = *--v66;
          while (*(_DWORD *)(v60 + 40 * v67 + 32) >= v61);
        }
        if (v62 < v66)
        {
          unsigned __int16 v69 = *v66;
          unsigned __int16 v70 = v64;
          float v71 = v62;
          float v72 = v66;
          do
          {
            *float v71 = v69;
            *float v72 = v70;
            do
            {
              int v63 = v71;
              unsigned int v73 = v71[1];
              ++v71;
              unsigned __int16 v70 = v73;
            }
            while (*(_DWORD *)(v60 + 40 * v73 + 32) < v61);
            do
            {
              unsigned int v74 = *--v72;
              unsigned __int16 v69 = v74;
            }
            while (*(_DWORD *)(v60 + 40 * v74 + 32) >= v61);
          }
          while (v71 < v72);
        }
        if (v63 != v13) {
          *uint64_t v13 = *v63;
        }
        unsigned __int16 *v63 = v58;
        if (v62 >= v66) {
          break;
        }
LABEL_73:
        uint64_t result = (__int16 *)std::__introsort<std::_ClassicAlgPolicy,md::MaterialRaster::updateStyleTextureIfNecessary(gms::MaterialManager<ggl::Texture2D> &,float,std::optional<unsigned long long> &,BOOL,BOOL)::$_0 &,unsigned short *,false>(v11, v63, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v13 = v63 + 1;
      }
      BOOL v75 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MaterialRaster::updateStyleTextureIfNecessary(gms::MaterialManager<ggl::Texture2D> &,float,std::optional<unsigned long long> &,BOOL,BOOL)::$_0 &,unsigned short *>(v13, v63, a3);
      uint64_t v13 = v63 + 1;
      uint64_t result = (__int16 *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MaterialRaster::updateStyleTextureIfNecessary(gms::MaterialManager<ggl::Texture2D> &,float,std::optional<unsigned long long> &,BOOL,BOOL)::$_0 &,unsigned short *>(v63 + 1, a2, a3);
      if (result) {
        break;
      }
      if (!v75) {
        goto LABEL_73;
      }
    }
    a2 = v63;
    if (!v75) {
      continue;
    }
    return result;
  }
}

void gms::ZoomablePropertyStore<gm::Matrix<float,3,1>>::getProperty(void *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  *(unsigned char *)a2 = 0;
  unsigned int v4 = vcvtms_s32_f32(a3);
  if (v4 >= 0x17) {
    unsigned int v5 = 23;
  }
  else {
    unsigned int v5 = v4;
  }
  BOOL v6 = (void *)a1[5];
  unint64_t v7 = a1 + 6;
  char v8 = v6;
  if (v6 != a1 + 6)
  {
    unint64_t v9 = 0;
    uint64_t v10 = (void *)a1[5];
    do
    {
      uint64_t v11 = (void *)v10[1];
      if (v11)
      {
        do
        {
          unint64_t v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          unint64_t v12 = (void *)v10[2];
          BOOL v13 = *v12 == (void)v10;
          uint64_t v10 = v12;
        }
        while (!v13);
      }
      ++v9;
      uint64_t v10 = v12;
    }
    while (v12 != v7);
    char v8 = (void *)a1[5];
    do
    {
      unint64_t v14 = v9 >> 1;
      uint64_t v15 = v8;
      if (v9 != 1)
      {
        uint64_t v17 = v9 >> 1;
        uint64_t v18 = v8;
        do
        {
          unsigned int v20 = (void *)v18[1];
          if (v20)
          {
            do
            {
              uint64_t v15 = v20;
              unsigned int v20 = (void *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              uint64_t v15 = (void *)v18[2];
              BOOL v13 = *v15 == (void)v18;
              uint64_t v18 = v15;
            }
            while (!v13);
          }
          uint64_t v18 = v15;
          BOOL v19 = v17-- <= 1;
        }
        while (!v19);
      }
      if (v5 >= *((unsigned __int8 *)v15 + 29))
      {
        unint64_t v16 = (void *)v15[1];
        if (v16)
        {
          do
          {
            char v8 = v16;
            unint64_t v16 = (void *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            char v8 = (void *)v15[2];
            BOOL v13 = *v8 == (void)v15;
            uint64_t v15 = v8;
          }
          while (!v13);
        }
        unint64_t v14 = v9 + ~v14;
      }
      unint64_t v9 = v14;
    }
    while (v14);
  }
  if (v8 == v7 || (v5 >= *((unsigned __int8 *)v8 + 28) ? (BOOL v21 = v5 >= *((unsigned __int8 *)v8 + 29)) : (BOOL v21 = 1), v21)) {
    char v8 = a1 + 6;
  }
  unsigned __int8 v22 = v5 + 1;
  unsigned int v23 = (void *)a1[5];
  if (v6 != v7)
  {
    unint64_t v24 = 0;
    __int16 v25 = (void *)a1[5];
    do
    {
      __int16 v26 = (void *)v25[1];
      if (v26)
      {
        do
        {
          unsigned int v27 = v26;
          __int16 v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          unsigned int v27 = (void *)v25[2];
          BOOL v13 = *v27 == (void)v25;
          __int16 v25 = v27;
        }
        while (!v13);
      }
      ++v24;
      __int16 v25 = v27;
    }
    while (v27 != v7);
    unsigned int v23 = (void *)a1[5];
    do
    {
      unint64_t v28 = v24 >> 1;
      __int16 v29 = v23;
      if (v24 != 1)
      {
        uint64_t v31 = v24 >> 1;
        BOOL v32 = v23;
        do
        {
          unsigned __int16 v33 = (void *)v32[1];
          if (v33)
          {
            do
            {
              __int16 v29 = v33;
              unsigned __int16 v33 = (void *)*v33;
            }
            while (v33);
          }
          else
          {
            do
            {
              __int16 v29 = (void *)v32[2];
              BOOL v13 = *v29 == (void)v32;
              BOOL v32 = v29;
            }
            while (!v13);
          }
          BOOL v32 = v29;
          BOOL v19 = v31-- <= 1;
        }
        while (!v19);
      }
      if (*((unsigned __int8 *)v29 + 29) <= v22)
      {
        __int16 v30 = (void *)v29[1];
        if (v30)
        {
          do
          {
            unsigned int v23 = v30;
            __int16 v30 = (void *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            unsigned int v23 = (void *)v29[2];
            BOOL v13 = *v23 == (void)v29;
            __int16 v29 = v23;
          }
          while (!v13);
        }
        unint64_t v28 = v24 + ~v28;
      }
      unint64_t v24 = v28;
    }
    while (v28);
  }
  if (v23 == v7
    || *((unsigned __int8 *)v23 + 28) > v22
    || *((unsigned __int8 *)v23 + 29) <= v22)
  {
    unsigned int v23 = a1 + 6;
  }
  if (v8 != v7 && a1[7])
  {
    if (v23 == v7 || (v34 = a1[4]) == 0 || (float v35 = a3 - (float)v5, v35 > 1.0) || v35 < 0.0)
    {
      if (v6 != v7)
      {
        unint64_t v41 = 0;
        float v42 = v6;
        do
        {
          unsigned __int16 v43 = (void *)v42[1];
          if (v43)
          {
            do
            {
              unsigned int v44 = v43;
              unsigned __int16 v43 = (void *)*v43;
            }
            while (v43);
          }
          else
          {
            do
            {
              unsigned int v44 = (void *)v42[2];
              BOOL v13 = *v44 == (void)v42;
              float v42 = v44;
            }
            while (!v13);
          }
          ++v41;
          float v42 = v44;
        }
        while (v44 != v7);
        do
        {
          unint64_t v45 = v41 >> 1;
          unsigned int v46 = v6;
          if (v41 != 1)
          {
            uint64_t v48 = v41 >> 1;
            unsigned int v49 = v6;
            do
            {
              unsigned __int16 v50 = (void *)v49[1];
              if (v50)
              {
                do
                {
                  unsigned int v46 = v50;
                  unsigned __int16 v50 = (void *)*v50;
                }
                while (v50);
              }
              else
              {
                do
                {
                  unsigned int v46 = (void *)v49[2];
                  BOOL v13 = *v46 == (void)v49;
                  unsigned int v49 = v46;
                }
                while (!v13);
              }
              unsigned int v49 = v46;
              BOOL v19 = v48-- <= 1;
            }
            while (!v19);
          }
          if (v5 >= *((unsigned __int8 *)v46 + 29))
          {
            unsigned int v47 = (void *)v46[1];
            if (v47)
            {
              do
              {
                BOOL v6 = v47;
                unsigned int v47 = (void *)*v47;
              }
              while (v47);
            }
            else
            {
              do
              {
                BOOL v6 = (void *)v46[2];
                BOOL v13 = *v6 == (void)v46;
                unsigned int v46 = v6;
              }
              while (!v13);
            }
            unint64_t v45 = v41 + ~v45;
          }
          unint64_t v41 = v45;
        }
        while (v45);
      }
      if (v6 == v7
        || (v5 >= *((unsigned __int8 *)v6 + 28) ? (BOOL v51 = v5 >= *((unsigned __int8 *)v6 + 29)) : (BOOL v51 = 1), v51))
      {
        BOOL v6 = v7;
      }
      *(unsigned char *)a2 = 1;
      uint64_t v52 = v6[4];
      *(_DWORD *)(a2 + 12) = *((_DWORD *)v6 + 10);
      *(void *)(a2 + 4) = v52;
    }
    else
    {
      unsigned int v36 = v6;
      if (v6 != v7)
      {
        unint64_t v37 = 0;
        unsigned __int16 v38 = v6;
        do
        {
          unsigned int v39 = (void *)v38[1];
          if (v39)
          {
            do
            {
              unsigned __int16 v40 = v39;
              unsigned int v39 = (void *)*v39;
            }
            while (v39);
          }
          else
          {
            do
            {
              unsigned __int16 v40 = (void *)v38[2];
              BOOL v13 = *v40 == (void)v38;
              unsigned __int16 v38 = v40;
            }
            while (!v13);
          }
          ++v37;
          unsigned __int16 v38 = v40;
        }
        while (v40 != v7);
        unsigned int v36 = v6;
        do
        {
          unint64_t v53 = v37 >> 1;
          unsigned int v54 = v36;
          if (v37 != 1)
          {
            uint64_t v56 = v37 >> 1;
            __int16 v57 = v36;
            do
            {
              __int16 v58 = (void *)v57[1];
              if (v58)
              {
                do
                {
                  unsigned int v54 = v58;
                  __int16 v58 = (void *)*v58;
                }
                while (v58);
              }
              else
              {
                do
                {
                  unsigned int v54 = (void *)v57[2];
                  BOOL v13 = *v54 == (void)v57;
                  __int16 v57 = v54;
                }
                while (!v13);
              }
              __int16 v57 = v54;
              BOOL v19 = v56-- <= 1;
            }
            while (!v19);
          }
          if (v5 >= *((unsigned __int8 *)v54 + 29))
          {
            unsigned __int16 v55 = (void *)v54[1];
            if (v55)
            {
              do
              {
                unsigned int v36 = v55;
                unsigned __int16 v55 = (void *)*v55;
              }
              while (v55);
            }
            else
            {
              do
              {
                unsigned int v36 = (void *)v54[2];
                BOOL v13 = *v36 == (void)v54;
                unsigned int v54 = v36;
              }
              while (!v13);
            }
            unint64_t v53 = v37 + ~v53;
          }
          unint64_t v37 = v53;
        }
        while (v53);
      }
      if (v36 == v7
        || (v5 >= *((unsigned __int8 *)v36 + 28) ? (BOOL v59 = v5 >= *((unsigned __int8 *)v36 + 29)) : (BOOL v59 = 1), v59))
      {
        unsigned int v36 = v7;
      }
      uint64_t v75 = v36[4];
      int v76 = *((_DWORD *)v36 + 10);
      if (v6 != v7)
      {
        unint64_t v60 = 0;
        unsigned int v61 = v6;
        do
        {
          int v62 = (void *)v61[1];
          if (v62)
          {
            do
            {
              int v63 = v62;
              int v62 = (void *)*v62;
            }
            while (v62);
          }
          else
          {
            do
            {
              int v63 = (void *)v61[2];
              BOOL v13 = *v63 == (void)v61;
              unsigned int v61 = v63;
            }
            while (!v13);
          }
          ++v60;
          unsigned int v61 = v63;
        }
        while (v63 != v7);
        do
        {
          unint64_t v64 = v60 >> 1;
          unsigned int v65 = v6;
          if (v60 != 1)
          {
            uint64_t v67 = v60 >> 1;
            unsigned int v68 = v6;
            do
            {
              unsigned __int16 v69 = (void *)v68[1];
              if (v69)
              {
                do
                {
                  unsigned int v65 = v69;
                  unsigned __int16 v69 = (void *)*v69;
                }
                while (v69);
              }
              else
              {
                do
                {
                  unsigned int v65 = (void *)v68[2];
                  BOOL v13 = *v65 == (void)v68;
                  unsigned int v68 = v65;
                }
                while (!v13);
              }
              unsigned int v68 = v65;
              BOOL v19 = v67-- <= 1;
            }
            while (!v19);
          }
          if (*((unsigned __int8 *)v65 + 29) <= v22)
          {
            uint64_t v66 = (void *)v65[1];
            if (v66)
            {
              do
              {
                BOOL v6 = v66;
                uint64_t v66 = (void *)*v66;
              }
              while (v66);
            }
            else
            {
              do
              {
                BOOL v6 = (void *)v65[2];
                BOOL v13 = *v6 == (void)v65;
                unsigned int v65 = v6;
              }
              while (!v13);
            }
            unint64_t v64 = v60 + ~v64;
          }
          unint64_t v60 = v64;
        }
        while (v64);
      }
      if (v6 == v7
        || *((unsigned __int8 *)v6 + 28) > v22
        || *((unsigned __int8 *)v6 + 29) <= v22)
      {
        BOOL v6 = v7;
      }
      uint64_t v73 = v6[4];
      int v74 = *((_DWORD *)v6 + 10);
      float v77 = v35;
      float v70 = (*(float (**)(uint64_t, float *, uint64_t *, uint64_t *))(*(void *)v34 + 48))(v34, &v77, &v75, &v73);
      *(unsigned char *)a2 = 1;
      *(float *)(a2 + 4) = v70;
      *(_DWORD *)(a2 + 8) = v71;
      *(_DWORD *)(a2 + 12) = v72;
    }
  }
}

void gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(void *a1, int8x8_t *a2, uint64_t *a3, uint64_t a4)
{
  int8x8_t v8 = a2[48];
  uint64_t v9 = *a3;
  unint64_t v10 = a3[1];
  unint64_t v11 = ((v10 << 6)
       + (v10 >> 2)
       - 0x61C8864680B583EBLL
       + ((((unint64_t)*a3 >> 34) + *a3 + (HIDWORD(*a3) << 6) - 0x61C8864680B583EBLL) ^ HIDWORD(*a3))) ^ v10;
  unint64_t v12 = *(void *)(*(void *)&v8 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      uint64_t v4 = ((v10 << 6)
          + (v10 >> 2)
          - 0x61C8864680B583EBLL
          + ((((unint64_t)*a3 >> 34) + *a3 + (HIDWORD(*a3) << 6) - 0x61C8864680B583EBLL) ^ HIDWORD(*a3))) ^ v10;
      if (v11 >= v12) {
        uint64_t v4 = v11 % v12;
      }
    }
    else
    {
      uint64_t v4 = v11 & (v12 - 1);
    }
    unint64_t v14 = *(void ***)(**(void **)&v8 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v19 = *((void *)v15 + 1);
            if (v19 == v11)
            {
              if (*((void *)v15 + 2) == v9 && *((void *)v15 + 3) == v10) {
                goto LABEL_88;
              }
            }
            else if ((v19 & (v12 - 1)) != v4)
            {
              goto LABEL_28;
            }
            uint64_t v15 = *(unsigned __int8 **)v15;
            if (!v15) {
              goto LABEL_28;
            }
          }
        }
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          if (v17 == v11)
          {
            if (*((void *)v15 + 2) == v9 && *((void *)v15 + 3) == v10) {
              goto LABEL_88;
            }
          }
          else
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
            if (v17 != v4) {
              break;
            }
          }
          uint64_t v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_28:
  unsigned int v20 = (void *)(*(void *)&v8 + 16);
  uint64_t v15 = (unsigned __int8 *)operator new(0x38uLL);
  BOOL v117 = v15;
  uint64_t v118 = (std::__shared_weak_count *)(*(void *)&v8 + 16);
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = v11;
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  v15[32] = 0;
  v15[48] = 0;
  char v119 = 1;
  float v21 = (float)(unint64_t)(*(void *)(*(void *)&v8 + 24) + 1);
  float v22 = *(float *)(*(void *)&v8 + 32);
  if (!v12 || (float)(v22 * (float)v12) < v21)
  {
    BOOL v23 = 1;
    if (v12 >= 3) {
      BOOL v23 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v12);
    unint64_t v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25) {
      size_t prime = v25;
    }
    else {
      size_t prime = v24;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v12 = *(void *)(*(void *)&v8 + 8);
    }
    if (prime <= v12)
    {
      if (prime >= v12) {
        goto LABEL_65;
      }
      unint64_t v37 = vcvtps_u32_f32((float)*(unint64_t *)(*(void *)&v8 + 24) / *(float *)(*(void *)&v8 + 32));
      if (v12 < 3 || (uint8x8_t v38 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        unint64_t v37 = std::__next_prime(v37);
      }
      else
      {
        uint64_t v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2) {
          unint64_t v37 = v39;
        }
      }
      if (prime <= v37) {
        size_t prime = v37;
      }
      if (prime >= v12)
      {
        unint64_t v12 = *(void *)(*(void *)&v8 + 8);
LABEL_65:
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v11 >= v12) {
            uint64_t v4 = v11 % v12;
          }
          else {
            uint64_t v4 = v11;
          }
        }
        else
        {
          uint64_t v4 = (v12 - 1) & v11;
        }
        goto LABEL_78;
      }
      if (!prime)
      {
        unint64_t v60 = **(void ***)&v8;
        **(void **)&int8x8_t v8 = 0;
        if (v60) {
          operator delete(v60);
        }
        unint64_t v12 = 0;
        *(void *)(*(void *)&v8 + 8) = 0;
        goto LABEL_65;
      }
    }
    if (prime >> 61) {
      goto LABEL_332;
    }
    unsigned int v27 = operator new(8 * prime);
    unint64_t v28 = **(void ***)&v8;
    **(void **)&int8x8_t v8 = v27;
    if (v28) {
      operator delete(v28);
    }
    uint64_t v29 = 0;
    *(void *)(*(void *)&v8 + 8) = prime;
    do
      *(void *)(**(void **)&v8 + 8 * v29++) = 0;
    while (prime != v29);
    __int16 v30 = (void *)*v20;
    if (!*v20)
    {
LABEL_64:
      unint64_t v12 = prime;
      goto LABEL_65;
    }
    size_t v31 = v30[1];
    size_t v32 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v33 = v31 & v32;
      *(void *)(**(void **)&v8 + 8 * v33) = v20;
      for (uint64_t i = (void *)*v30; *v30; uint64_t i = (void *)*v30)
      {
        size_t v35 = i[1] & v32;
        if (v35 == v33)
        {
          __int16 v30 = i;
        }
        else if (*(void *)(**(void **)&v8 + 8 * v35))
        {
          *__int16 v30 = *i;
          uint64_t v36 = 8 * v35;
          void *i = **(void **)(**(void **)&v8 + v36);
          **(void **)(**(void **)&v8 + v36) = i;
        }
        else
        {
          *(void *)(**(void **)&v8 + 8 * v35) = v30;
          __int16 v30 = i;
          size_t v33 = v35;
        }
      }
      goto LABEL_64;
    }
    if (v31 >= prime) {
      v31 %= prime;
    }
    *(void *)(**(void **)&v8 + 8 * v31) = v20;
    unsigned __int16 v40 = (void *)*v30;
    if (!*v30) {
      goto LABEL_64;
    }
    while (1)
    {
      size_t v42 = v40[1];
      if (v42 >= prime) {
        v42 %= prime;
      }
      if (v42 != v31)
      {
        if (!*(void *)(**(void **)&v8 + 8 * v42))
        {
          *(void *)(**(void **)&v8 + 8 * v42) = v30;
          goto LABEL_69;
        }
        *__int16 v30 = *v40;
        uint64_t v41 = 8 * v42;
        *unsigned __int16 v40 = **(void **)(**(void **)&v8 + v41);
        **(void **)(**(void **)&v8 + v41) = v40;
        unsigned __int16 v40 = v30;
      }
      size_t v42 = v31;
LABEL_69:
      __int16 v30 = v40;
      unsigned __int16 v40 = (void *)*v40;
      size_t v31 = v42;
      if (!v40) {
        goto LABEL_64;
      }
    }
  }
LABEL_78:
  uint64_t v43 = **(void **)&v8;
  unsigned int v44 = *(void **)(**(void **)&v8 + 8 * v4);
  if (v44)
  {
    *(void *)uint64_t v15 = *v44;
  }
  else
  {
    *(void *)uint64_t v15 = *v20;
    *unsigned int v20 = v15;
    *(void *)(v43 + 8 * v4) = v20;
    if (!*(void *)v15) {
      goto LABEL_87;
    }
    unint64_t v45 = *(void *)(*(void *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v45 >= v12) {
        v45 %= v12;
      }
    }
    else
    {
      v45 &= v12 - 1;
    }
    unsigned int v44 = (void *)(**(void **)&v8 + 8 * v45);
  }
  *unsigned int v44 = v15;
LABEL_87:
  ++*(void *)(*(void *)&v8 + 24);
LABEL_88:
  if (v15[48]) {
    goto LABEL_328;
  }
  unsigned int v46 = (void *)a2[47];
  int8x8_t v47 = (int8x8_t)v46[1];
  if (!*(void *)&v47) {
    goto LABEL_129;
  }
  uint64_t v48 = *a3;
  unint64_t v49 = a3[1];
  unint64_t v50 = ((v49 << 6)
       - 0x61C8864680B583EBLL
       + (v49 >> 2)
       + ((*a3 - 0x61C8864680B583EBLL + ((unint64_t)*a3 >> 34) + (HIDWORD(*a3) << 6)) ^ HIDWORD(*a3))) ^ v49;
  uint8x8_t v51 = (uint8x8_t)vcnt_s8(v47);
  v51.i16[0] = vaddlv_u8(v51);
  if (v51.u32[0] > 1uLL)
  {
    uint64_t v52 = ((v49 << 6)
         - 0x61C8864680B583EBLL
         + (v49 >> 2)
         + ((*a3 - 0x61C8864680B583EBLL + ((unint64_t)*a3 >> 34) + (HIDWORD(*a3) << 6)) ^ HIDWORD(*a3))) ^ v49;
    if (v50 >= *(void *)&v47) {
      uint64_t v52 = v50 % *(void *)&v47;
    }
  }
  else
  {
    uint64_t v52 = v50 & (*(void *)&v47 - 1);
  }
  unint64_t v53 = *(uint64_t ***)(*v46 + 8 * v52);
  if (!v53) {
    goto LABEL_129;
  }
  unsigned int v54 = *v53;
  if (!v54) {
    goto LABEL_129;
  }
  if (v51.u32[0] < 2uLL)
  {
    uint64_t v55 = *(void *)&v47 - 1;
    while (1)
    {
      uint64_t v59 = v54[1];
      if (v59 == v50)
      {
        if (v54[2] == v48 && v54[3] == v49) {
          goto LABEL_125;
        }
      }
      else if ((v59 & v55) != v52)
      {
        goto LABEL_129;
      }
      unsigned int v54 = (uint64_t *)*v54;
      if (!v54) {
        goto LABEL_129;
      }
    }
  }
  while (1)
  {
    unint64_t v57 = v54[1];
    if (v57 == v50) {
      break;
    }
    if (v57 >= *(void *)&v47) {
      v57 %= *(void *)&v47;
    }
    if (v57 != v52) {
      goto LABEL_129;
    }
LABEL_102:
    unsigned int v54 = (uint64_t *)*v54;
    if (!v54) {
      goto LABEL_129;
    }
  }
  if (v54[2] != v48 || v54[3] != v49) {
    goto LABEL_102;
  }
LABEL_125:
  if (!*((unsigned char *)v54 + 48))
  {
LABEL_129:
    int v62 = geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::operator[]((uint64_t)&a2[13], a3);
    if (!v62[16])
    {
      unint64_t v63 = *a3;
      int8x8_t v64 = a2[11];
      unsigned int v65 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(*(void *)&v64 + 16));
      if (v65) {
        geo::read_write_lock::logFailure(v65, (uint64_t)"read lock", v66);
      }
      geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::intern_linear_map(&v121, (uint64_t *)(*(void *)&v64 + 216));
      uint64_t v67 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(*(void *)&v64 + 16));
      if (v67) {
        geo::read_write_lock::logFailure(v67, (uint64_t)"unlock", v68);
      }
      gms::MaterialManager<ggl::Texture2D>::rawMaterialForIDAndAttributes(&v117, a2, v63, a4, &v121);
      float v70 = v117;
      if (v62[16])
      {
        int v71 = v118;
        BOOL v117 = 0;
        uint64_t v118 = 0;
        int v72 = (std::__shared_weak_count *)*((void *)v62 + 1);
        *(void *)int v62 = v70;
        *((void *)v62 + 1) = v71;
        if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      else
      {
        *(void *)int v62 = v117;
        *((void *)v62 + 1) = v118;
        BOOL v117 = 0;
        uint64_t v118 = 0;
        v62[16] = 1;
      }
      uint64_t v73 = v118;
      if (v118 && !atomic_fetch_add(&v118->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
      if (!BYTE6(v122) && v121)
      {
        uint64_t v74 = gss::Allocator::instance(v69);
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v74 + 40))(v74, v121, WORD2(v122));
      }
      if (!v62[16])
      {
LABEL_331:
        std::__throw_bad_optional_access[abi:nn180100]();
LABEL_332:
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
    }
    uint64_t v75 = (std::__shared_weak_count *)*((void *)v62 + 1);
    uint64_t v115 = *(void *)v62;
    int64_t v116 = v75;
    if (v75) {
      atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v76 = geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::operator[]((uint64_t)&a2[25], a3);
    if (!v76[16])
    {
      unint64_t v77 = *a3;
      int8x8_t v78 = a2[11];
      uint64_t v120 = *(void *)&v78 + 16;
      unsigned int v79 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(*(void *)&v78 + 16));
      if (v79) {
        geo::read_write_lock::logFailure(v79, (uint64_t)"read lock", v80);
      }
      geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::intern_linear_map(&v121, (uint64_t *)(*(void *)&v78 + 232));
      unsigned __int16 v81 = (geo::read_write_lock *)pthread_rwlock_unlock((pthread_rwlock_t *)(*(void *)&v78 + 16));
      if (v81) {
        geo::read_write_lock::logFailure(v81, (uint64_t)"unlock", v82);
      }
      gms::MaterialManager<ggl::Texture2D>::rawMaterialForIDAndAttributes(&v117, a2, v77, a4, &v121);
      float v84 = v117;
      if (v76[16])
      {
        __int16 v85 = v118;
        BOOL v117 = 0;
        uint64_t v118 = 0;
        uint64_t v86 = (std::__shared_weak_count *)*((void *)v76 + 1);
        *(void *)int v76 = v84;
        *((void *)v76 + 1) = v85;
        if (v86 && !atomic_fetch_add(&v86->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      else
      {
        *(void *)int v76 = v117;
        *((void *)v76 + 1) = v118;
        BOOL v117 = 0;
        uint64_t v118 = 0;
        v76[16] = 1;
      }
      unsigned __int16 v87 = v118;
      if (v118 && !atomic_fetch_add(&v118->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
      if (!BYTE6(v122) && v121)
      {
        uint64_t v88 = gss::Allocator::instance(v83);
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v88 + 40))(v88, v121, WORD2(v122));
      }
      if (!v76[16])
      {
        std::__throw_bad_optional_access[abi:nn180100]();
        __break(1u);
        return;
      }
    }
    uint64_t v90 = *(void *)v76;
    unsigned int v89 = (std::__shared_weak_count *)*((void *)v76 + 1);
    int64_t v114 = v89;
    if (v89) {
      atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v91 = v116;
    uint64_t v112 = (unsigned __int8 *)v115;
    uint64_t v113 = v116;
    if (v116) {
      atomic_fetch_add_explicit(&v116->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v110 = v90;
    unsigned int v111 = v89;
    if (v89) {
      atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int8x8_t v92 = a2[11];
    if (v115)
    {
      if (v90) {
        goto LABEL_184;
      }
      if (v116) {
        atomic_fetch_add_explicit(&v116->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v110 = v115;
      unsigned int v111 = v116;
      if (!v89) {
        goto LABEL_184;
      }
      unsigned int v91 = v89;
      if (atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_184;
      }
    }
    else
    {
      if (!v90)
      {
        unsigned __int16 v98 = 0;
        uint64_t v97 = 0;
        goto LABEL_310;
      }
      if (v89) {
        atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v112 = (unsigned __int8 *)v90;
      uint64_t v113 = v89;
      if (!v116 || atomic_fetch_add(&v116->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_184:
        uint64_t v93 = *(void *)&v92 + 256;
        switch(v112[68])
        {
          case 2u:
            float v94 = v113;
            BOOL v117 = v112;
            uint64_t v118 = v113;
            if (v113) {
              atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v95 = v111;
            uint64_t v121 = v110;
            BOOL v122 = v111;
            if (v111) {
              atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            __int16 v102 = operator new(0x50uLL);
            uint64_t v97 = v102;
            v102[1] = 0;
            v102[2] = 0;
            *__int16 v102 = &unk_1EF58A040;
            unsigned __int16 v98 = v102 + 3;
            BOOL v117 = 0;
            uint64_t v118 = 0;
            uint64_t v121 = 0;
            BOOL v122 = 0;
            if (v113) {
              atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v111) {
              atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v102[3] = &unk_1EF566758;
            *((unsigned char *)v102 + 32) = 2;
            v102[5] = v112;
            v102[6] = v113;
            if (v113) {
              atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v102[7] = v110;
            v102[8] = v111;
            if (v111)
            {
              atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
              v102[9] = v93;
              if (!atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                std::__shared_weak_count::__release_weak(v111);
              }
            }
            else
            {
              v102[9] = v93;
            }
            if (v113 && !atomic_fetch_add(&v113->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
              std::__shared_weak_count::__release_weak(v113);
            }
            *unsigned __int16 v98 = &unk_1EF5630B0;
            if (v111) {
              goto LABEL_299;
            }
            break;
          case 3u:
            float v94 = v113;
            BOOL v117 = v112;
            uint64_t v118 = v113;
            if (v113) {
              atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v95 = v111;
            uint64_t v121 = v110;
            BOOL v122 = v111;
            if (v111) {
              atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            unsigned int v100 = operator new(0x50uLL);
            uint64_t v97 = v100;
            v100[1] = 0;
            v100[2] = 0;
            *unsigned int v100 = &unk_1EF58A0E8;
            unsigned __int16 v98 = v100 + 3;
            BOOL v117 = 0;
            uint64_t v118 = 0;
            uint64_t v121 = 0;
            BOOL v122 = 0;
            if (v113) {
              atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v111) {
              atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v100[3] = &unk_1EF566758;
            *((unsigned char *)v100 + 32) = 3;
            v100[5] = v112;
            v100[6] = v113;
            if (v113) {
              atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v100[7] = v110;
            v100[8] = v111;
            if (v111)
            {
              atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
              v100[9] = v93;
              if (!atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                std::__shared_weak_count::__release_weak(v111);
              }
            }
            else
            {
              v100[9] = v93;
            }
            if (v113 && !atomic_fetch_add(&v113->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
              std::__shared_weak_count::__release_weak(v113);
            }
            *unsigned __int16 v98 = &unk_1EF563E30;
            if (v111) {
              goto LABEL_299;
            }
            break;
          case 4u:
            float v94 = v113;
            BOOL v117 = v112;
            uint64_t v118 = v113;
            if (v113) {
              atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v95 = v111;
            uint64_t v121 = v110;
            BOOL v122 = v111;
            if (v111) {
              atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            unsigned __int16 v101 = operator new(0x50uLL);
            uint64_t v97 = v101;
            v101[1] = 0;
            v101[2] = 0;
            *unsigned __int16 v101 = &unk_1EF58A1C8;
            unsigned __int16 v98 = v101 + 3;
            BOOL v117 = 0;
            uint64_t v118 = 0;
            uint64_t v121 = 0;
            BOOL v122 = 0;
            if (v113) {
              atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v111) {
              atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v101[3] = &unk_1EF566758;
            *((unsigned char *)v101 + 32) = 4;
            v101[5] = v112;
            v101[6] = v113;
            if (v113) {
              atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v101[7] = v110;
            v101[8] = v111;
            if (v111)
            {
              atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
              v101[9] = v93;
              if (!atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                std::__shared_weak_count::__release_weak(v111);
              }
            }
            else
            {
              v101[9] = v93;
            }
            if (v113 && !atomic_fetch_add(&v113->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
              std::__shared_weak_count::__release_weak(v113);
            }
            *unsigned __int16 v98 = &unk_1EF564EE0;
            if (v111) {
              goto LABEL_299;
            }
            break;
          case 5u:
            float v94 = v113;
            BOOL v117 = v112;
            uint64_t v118 = v113;
            if (v113) {
              atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v95 = v111;
            uint64_t v121 = v110;
            BOOL v122 = v111;
            if (v111) {
              atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            unsigned __int16 v99 = operator new(0x50uLL);
            uint64_t v97 = v99;
            v99[1] = 0;
            v99[2] = 0;
            *unsigned __int16 v99 = &unk_1EF58A270;
            unsigned __int16 v98 = v99 + 3;
            BOOL v117 = 0;
            uint64_t v118 = 0;
            uint64_t v121 = 0;
            BOOL v122 = 0;
            if (v113) {
              atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v111) {
              atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v99[3] = &unk_1EF566758;
            *((unsigned char *)v99 + 32) = 5;
            void v99[5] = v112;
            v99[6] = v113;
            if (v113) {
              atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v99[7] = v110;
            v99[8] = v111;
            if (v111)
            {
              atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
              v99[9] = v93;
              if (!atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                std::__shared_weak_count::__release_weak(v111);
              }
            }
            else
            {
              v99[9] = v93;
            }
            if (v113 && !atomic_fetch_add(&v113->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
              std::__shared_weak_count::__release_weak(v113);
            }
            *unsigned __int16 v98 = &unk_1EF565F00;
            if (v111) {
              goto LABEL_299;
            }
            break;
          case 6u:
            float v94 = v113;
            BOOL v117 = v112;
            uint64_t v118 = v113;
            if (v113) {
              atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v95 = v111;
            uint64_t v121 = v110;
            BOOL v122 = v111;
            if (v111) {
              atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            float v103 = operator new(0x50uLL);
            uint64_t v97 = v103;
            v103[1] = 0;
            v103[2] = 0;
            *float v103 = &unk_1EF58A190;
            unsigned __int16 v98 = v103 + 3;
            BOOL v117 = 0;
            uint64_t v118 = 0;
            uint64_t v121 = 0;
            BOOL v122 = 0;
            if (v113) {
              atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v111) {
              atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v103[3] = &unk_1EF566758;
            *((unsigned char *)v103 + 32) = 6;
            v103[5] = v112;
            v103[6] = v113;
            if (v113) {
              atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v103[7] = v110;
            v103[8] = v111;
            if (v111)
            {
              atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
              v103[9] = v93;
              if (!atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                std::__shared_weak_count::__release_weak(v111);
              }
            }
            else
            {
              v103[9] = v93;
            }
            if (v113 && !atomic_fetch_add(&v113->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
              std::__shared_weak_count::__release_weak(v113);
            }
            *unsigned __int16 v98 = &unk_1EF5649F0;
            if (v111) {
              goto LABEL_299;
            }
            break;
          default:
            float v94 = v113;
            BOOL v117 = v112;
            uint64_t v118 = v113;
            if (v113) {
              atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v95 = v111;
            uint64_t v121 = v110;
            BOOL v122 = v111;
            if (v111) {
              atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            unsigned __int16 v96 = operator new(0x50uLL);
            uint64_t v97 = v96;
            v96[1] = 0;
            v96[2] = 0;
            *unsigned __int16 v96 = &unk_1EF58A0B0;
            unsigned __int16 v98 = v96 + 3;
            BOOL v117 = 0;
            uint64_t v118 = 0;
            uint64_t v121 = 0;
            BOOL v122 = 0;
            if (v113) {
              atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v111) {
              atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v96[3] = &unk_1EF566758;
            *((unsigned char *)v96 + 32) = 1;
            v96[5] = v112;
            v96[6] = v113;
            if (v113) {
              atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v96[7] = v110;
            v96[8] = v111;
            if (v111)
            {
              atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
              v96[9] = v93;
              if (!atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                std::__shared_weak_count::__release_weak(v111);
              }
            }
            else
            {
              v96[9] = v93;
            }
            if (v113 && !atomic_fetch_add(&v113->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
              std::__shared_weak_count::__release_weak(v113);
            }
            *unsigned __int16 v98 = &unk_1EF563908;
            if (v111)
            {
LABEL_299:
              if (!atomic_fetch_add(&v95->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                std::__shared_weak_count::__release_weak(v95);
              }
            }
            break;
        }
        if (v94 && !atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
        float v104 = v122;
        if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
          std::__shared_weak_count::__release_weak(v104);
        }
        uint64_t v105 = v118;
        if (v118 && !atomic_fetch_add(&v118->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
        }
LABEL_310:
        int v106 = v15[48];
        *((void *)v15 + 4) = v98;
        if (v106)
        {
          BOOL v107 = (std::__shared_weak_count *)*((void *)v15 + 5);
          *((void *)v15 + 5) = v97;
          if (v107 && !atomic_fetch_add(&v107->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
        else
        {
          *((void *)v15 + 5) = v97;
          v15[48] = 1;
        }
        if (v111 && !atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
          std::__shared_weak_count::__release_weak(v111);
        }
        if (v113 && !atomic_fetch_add(&v113->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
          std::__shared_weak_count::__release_weak(v113);
        }
        if (v114 && !atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
        if (v116 && !atomic_fetch_add(&v116->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
          std::__shared_weak_count::__release_weak(v116);
        }
        if (v15[48]) {
          goto LABEL_328;
        }
        goto LABEL_331;
      }
    }
    ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
    std::__shared_weak_count::__release_weak(v91);
    goto LABEL_184;
  }
  *((void *)v15 + 4) = v54[4];
  uint64_t v61 = v54[5];
  *((void *)v15 + 5) = v61;
  if (v61) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v61 + 8), 1uLL, memory_order_relaxed);
  }
  v15[48] = 1;
LABEL_328:
  *a1 = *((void *)v15 + 4);
  uint64_t v108 = *((void *)v15 + 5);
  a1[1] = v108;
  if (v108) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v108 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_1A1866F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va4, a3);
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v11 = va_arg(va3, void);
  uint64_t v13 = va_arg(va3, void);
  va_copy(va4, va3);
  uint64_t v14 = va_arg(va4, void);
  uint64_t v16 = va_arg(va4, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v3 - 96);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va4);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va2);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va3);
  _Unwind_Resume(a1);
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::albedoFactorRGB@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *(uint64_t (****)(void))(a1 + 232);
  if (v3) {
    return (**v3)(v3);
  }
  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 648))();
  }
  *a2 = 0;
  return result;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::alpha@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *(uint64_t (****)(void))(a1 + 224);
  if (v3) {
    return (**v3)(v3);
  }
  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 624))();
  }
  *a2 = 0;
  return result;
}

void *gms::BasicMaterial<ggl::Texture2D>::coldAdjustment@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4 = a3.f32[0];
  float v7 = **(float **)(a1 + 48);
  a3.i32[1] = 872415232;
  if ((v7 > 0.00000011921 || (uint64_t v8 = *(void *)(a1 + 16)) == 0) && (v7 < 1.0 || (uint64_t v8 = *(void *)(a1 + 32)) == 0))
  {
    float v14 = v7;
    uint64_t v11 = *(void *)(a1 + 16);
    if (v11)
    {
      (*(void (**)(char *__return_ptr, float32_t))(*(void *)v11 + 768))(v18, a3.f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v18[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 768))(v15, v4);
        if (v18[0])
        {
LABEL_11:
          if (v15[0])
          {
            *(unsigned char *)a2 = 1;
            a3.i64[0] = v19;
            a3.i32[2] = v20;
            a4.i64[0] = v16;
            a4.i32[2] = v17;
            float32x4_t v12 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v14);
            *(_DWORD *)(a2 + 12) = v12.i32[2];
            *(void *)(a2 + 4) = v12.i64[0];
            return result;
          }
          *(void *)(a2 + 4) = v19;
          unsigned __int32 v13 = v20;
LABEL_18:
          *(_DWORD *)(a2 + 12) = v13;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v15[0]) {
          return result;
        }
        *(void *)(a2 + 4) = v16;
        unsigned __int32 v13 = v17;
        goto LABEL_18;
      }
    }
    v15[0] = 0;
    if (v18[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  uint64_t v9 = *(uint64_t (**)(__n128))(*(void *)v8 + 768);
  return (void *)v9((__n128)a3);
}

void *gms::BasicMaterial<ggl::Texture2D>::wetAdjustment@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4 = a3.f32[0];
  float v7 = **(float **)(a1 + 48);
  a3.i32[1] = 872415232;
  if ((v7 > 0.00000011921 || (uint64_t v8 = *(void *)(a1 + 16)) == 0) && (v7 < 1.0 || (uint64_t v8 = *(void *)(a1 + 32)) == 0))
  {
    float v14 = v7;
    uint64_t v11 = *(void *)(a1 + 16);
    if (v11)
    {
      (*(void (**)(char *__return_ptr, float32_t))(*(void *)v11 + 792))(v18, a3.f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v18[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 792))(v15, v4);
        if (v18[0])
        {
LABEL_11:
          if (v15[0])
          {
            *(unsigned char *)a2 = 1;
            a3.i64[0] = v19;
            a3.i32[2] = v20;
            a4.i64[0] = v16;
            a4.i32[2] = v17;
            float32x4_t v12 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v14);
            *(_DWORD *)(a2 + 12) = v12.i32[2];
            *(void *)(a2 + 4) = v12.i64[0];
            return result;
          }
          *(void *)(a2 + 4) = v19;
          unsigned __int32 v13 = v20;
LABEL_18:
          *(_DWORD *)(a2 + 12) = v13;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v15[0]) {
          return result;
        }
        *(void *)(a2 + 4) = v16;
        unsigned __int32 v13 = v17;
        goto LABEL_18;
      }
    }
    v15[0] = 0;
    if (v18[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  uint64_t v9 = *(uint64_t (**)(__n128))(*(void *)v8 + 792);
  return (void *)v9((__n128)a3);
}

void *gms::BasicMaterial<ggl::Texture2D>::dryAdjustment@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4 = a3.f32[0];
  float v7 = **(float **)(a1 + 48);
  a3.i32[1] = 872415232;
  if ((v7 > 0.00000011921 || (uint64_t v8 = *(void *)(a1 + 16)) == 0) && (v7 < 1.0 || (uint64_t v8 = *(void *)(a1 + 32)) == 0))
  {
    float v14 = v7;
    uint64_t v11 = *(void *)(a1 + 16);
    if (v11)
    {
      (*(void (**)(char *__return_ptr, float32_t))(*(void *)v11 + 816))(v18, a3.f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v18[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 816))(v15, v4);
        if (v18[0])
        {
LABEL_11:
          if (v15[0])
          {
            *(unsigned char *)a2 = 1;
            a3.i64[0] = v19;
            a3.i32[2] = v20;
            a4.i64[0] = v16;
            a4.i32[2] = v17;
            float32x4_t v12 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v14);
            *(_DWORD *)(a2 + 12) = v12.i32[2];
            *(void *)(a2 + 4) = v12.i64[0];
            return result;
          }
          *(void *)(a2 + 4) = v19;
          unsigned __int32 v13 = v20;
LABEL_18:
          *(_DWORD *)(a2 + 12) = v13;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v15[0]) {
          return result;
        }
        *(void *)(a2 + 4) = v16;
        unsigned __int32 v13 = v17;
        goto LABEL_18;
      }
    }
    v15[0] = 0;
    if (v18[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  uint64_t v9 = *(uint64_t (**)(__n128))(*(void *)v8 + 816);
  return (void *)v9((__n128)a3);
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::wetAdjustment@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *(uint64_t (****)(void))(a1 + 272);
  if (v3) {
    return (**v3)(v3);
  }
  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 792))();
  }
  *a2 = 0;
  return result;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::dryAdjustment@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *(uint64_t (****)(void))(a1 + 280);
  if (v3) {
    return (**v3)(v3);
  }
  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 816))();
  }
  *a2 = 0;
  return result;
}

uint64_t gms::_BasicMaterial<ggl::Texture2D>::coldAdjustment@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *(uint64_t (****)(void))(a1 + 264);
  if (v3) {
    return (**v3)(v3);
  }
  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 768))();
  }
  *a2 = 0;
  return result;
}

void *gms::BasicMaterial<ggl::Texture2D>::hotAdjustment@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4 = a3.f32[0];
  float v7 = **(float **)(a1 + 48);
  a3.i32[1] = 872415232;
  if ((v7 > 0.00000011921 || (uint64_t v8 = *(void *)(a1 + 16)) == 0) && (v7 < 1.0 || (uint64_t v8 = *(void *)(a1 + 32)) == 0))
  {
    float v14 = v7;
    uint64_t v11 = *(void *)(a1 + 16);
    if (v11)
    {
      (*(void (**)(char *__return_ptr, float32_t))(*(void *)v11 + 744))(v18, a3.f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v18[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 744))(v15, v4);
        if (v18[0])
        {
LABEL_11:
          if (v15[0])
          {
            *(unsigned char *)a2 = 1;
            a3.i64[0] = v19;
            a3.i32[2] = v20;
            a4.i64[0] = v16;
            a4.i32[2] = v17;
            float32x4_t v12 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v14);
            *(_DWORD *)(a2 + 12) = v12.i32[2];
            *(void *)(a2 + 4) = v12.i64[0];
            return result;
          }
          *(void *)(a2 + 4) = v19;
          unsigned __int32 v13 = v20;
LABEL_18:
          *(_DWORD *)(a2 + 12) = v13;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v15[0]) {
          return result;
        }
        *(void *)(a2 + 4) = v16;
        unsigned __int32 v13 = v17;
        goto LABEL_18;
      }
    }
    v15[0] = 0;
    if (v18[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  uint64_t v9 = *(uint64_t (**)(__n128))(*(void *)v8 + 744);
  return (void *)v9((__n128)a3);
}

__int16 *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MaterialRaster::updateStyleTextureIfNecessary(gms::MaterialManager<ggl::Texture2D> &,float,std::optional<unsigned long long> &,BOOL,BOOL)::$_0 &,unsigned short *>(__int16 *result, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4, uint64_t a5)
{
  unsigned int v5 = *a2;
  unsigned __int16 v6 = *a2;
  unsigned int v7 = (unsigned __int16)*result;
  unsigned int v8 = *(_DWORD *)(a5 + 40 * *a2 + 32);
  unsigned int v9 = *(_DWORD *)(a5 + 40 * (unsigned __int16)*result + 32);
  unsigned __int16 v10 = *a3;
  unsigned int v11 = *(_DWORD *)(a5 + 40 * *a3 + 32);
  if (v8 < v9)
  {
    if (v11 < v8)
    {
      *uint64_t result = v10;
LABEL_9:
      *a3 = v7;
      unsigned int v5 = v7;
      unsigned __int16 v6 = v7;
      goto LABEL_12;
    }
    *uint64_t result = v6;
    *a2 = v7;
    unsigned int v5 = *a3;
    if (*(_DWORD *)(a5 + 40 * *a3 + 32) < v9)
    {
      *a2 = v5;
      goto LABEL_9;
    }
LABEL_11:
    unsigned __int16 v6 = v5;
    goto LABEL_12;
  }
  if (v11 >= v8)
  {
    unsigned int v5 = *a3;
    unsigned __int16 v6 = *a3;
    goto LABEL_12;
  }
  *a2 = v10;
  *a3 = v6;
  unsigned __int16 v12 = *result;
  if (*(_DWORD *)(a5 + 40 * *a2 + 32) < *(_DWORD *)(a5 + 40 * (unsigned __int16)*result + 32))
  {
    *uint64_t result = *a2;
    *a2 = v12;
    unsigned int v5 = *a3;
    goto LABEL_11;
  }
LABEL_12:
  if (*(_DWORD *)(a5 + 40 * *a4 + 32) < *(_DWORD *)(a5 + 40 * v5 + 32))
  {
    *a3 = *a4;
    *a4 = v6;
    unsigned __int16 v13 = *a2;
    if (*(_DWORD *)(a5 + 40 * *a3 + 32) < *(_DWORD *)(a5 + 40 * *a2 + 32))
    {
      *a2 = *a3;
      *a3 = v13;
      unsigned __int16 v14 = *result;
      if (*(_DWORD *)(a5 + 40 * *a2 + 32) < *(_DWORD *)(a5 + 40 * (unsigned __int16)*result + 32))
      {
        *uint64_t result = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

void gms::Material<ggl::Texture2D>::coldAdjustment(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::wetAdjustment(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::dryAdjustment(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void gms::Material<ggl::Texture2D>::hotAdjustment(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::alpha@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *(uint64_t (****)(void))(a1 + 160);
  if (v3) {
    return (**v3)(v3);
  }
  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 624))();
  }
  *a2 = 0;
  return result;
}

uint64_t gms::_PlanarMaterial<ggl::Texture2D>::albedoFactorRGB@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *(uint64_t (****)(void))(a1 + 168);
  if (v3) {
    return (**v3)(v3);
  }
  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 648))();
  }
  *a2 = 0;
  return result;
}

void *gms::PlanarMaterial<ggl::Texture2D>::alpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(uint64_t *__return_ptr, float))(*(void *)v10 + 624))(&v14, a3.n128_f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      LOBYTE(v14) = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 624))(&v13, v3);
        if ((_BYTE)v14)
        {
LABEL_11:
          if ((_BYTE)v13)
          {
            float v11 = *((float *)&v14 + 1) + (float)((float)(*((float *)&v13 + 1) - *((float *)&v14 + 1)) * v6);
            *(unsigned char *)a2 = 1;
            *(float *)(a2 + 4) = v11;
            return result;
          }
          int v12 = HIDWORD(v14);
LABEL_18:
          *(_DWORD *)(a2 + 4) = v12;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!(_BYTE)v13) {
          return result;
        }
        int v12 = HIDWORD(v13);
        goto LABEL_18;
      }
    }
    LOBYTE(v13) = 0;
    if ((_BYTE)v14) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  unsigned int v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 624);
  return (void *)v8(a3);
}

void *gms::PlanarMaterial<ggl::Texture2D>::albedoFactorRGB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>)
{
  float v4 = a3.f32[0];
  float v7 = **(float **)(a1 + 48);
  a3.i32[1] = 872415232;
  if ((v7 > 0.00000011921 || (uint64_t v8 = *(void *)(a1 + 16)) == 0) && (v7 < 1.0 || (uint64_t v8 = *(void *)(a1 + 32)) == 0))
  {
    float v14 = v7;
    uint64_t v11 = *(void *)(a1 + 16);
    if (v11)
    {
      (*(void (**)(char *__return_ptr, float32_t))(*(void *)v11 + 648))(v18, a3.f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      v18[0] = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(char *__return_ptr, float))(*result + 648))(v15, v4);
        if (v18[0])
        {
LABEL_11:
          if (v15[0])
          {
            *(unsigned char *)a2 = 1;
            a3.i64[0] = v19;
            a3.i32[2] = v20;
            a4.i64[0] = v16;
            a4.i32[2] = v17;
            float32x4_t v12 = vmlaq_n_f32(a3, vsubq_f32(a4, a3), v14);
            *(_DWORD *)(a2 + 12) = v12.i32[2];
            *(void *)(a2 + 4) = v12.i64[0];
            return result;
          }
          *(void *)(a2 + 4) = v19;
          unsigned __int32 v13 = v20;
LABEL_18:
          *(_DWORD *)(a2 + 12) = v13;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!v15[0]) {
          return result;
        }
        *(void *)(a2 + 4) = v16;
        unsigned __int32 v13 = v17;
        goto LABEL_18;
      }
    }
    v15[0] = 0;
    if (v18[0]) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  unsigned int v9 = *(uint64_t (**)(__n128))(*(void *)v8 + 648);
  return (void *)v9((__n128)a3);
}

char *geo::FrameCache<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::shared_ptr<gms::_Material<ggl::Texture2D>>,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyHash,gms::MaterialManager<ggl::Texture2D>::MaterialCacheKeyEqual>::operator[](uint64_t a1, uint64_t *a2)
{
  unsigned int v5 = *(uint64_t **)(a1 + 88);
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  unint64_t v8 = ((v7 << 6)
      + (v7 >> 2)
      - 0x61C8864680B583EBLL
      + ((((unint64_t)*a2 >> 34) + *a2 + (HIDWORD(*a2) << 6) - 0x61C8864680B583EBLL) ^ HIDWORD(*a2))) ^ v7;
  unint64_t v9 = v5[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      uint64_t v2 = ((v7 << 6)
          + (v7 >> 2)
          - 0x61C8864680B583EBLL
          + ((((unint64_t)*a2 >> 34) + *a2 + (HIDWORD(*a2) << 6) - 0x61C8864680B583EBLL) ^ HIDWORD(*a2))) ^ v7;
      if (v8 >= v9) {
        uint64_t v2 = v8 % v9;
      }
    }
    else
    {
      uint64_t v2 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*v5 + 8 * v2);
    if (v11)
    {
      float32x4_t v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v12[1];
            if (v16 == v8)
            {
              if (v12[2] == v6 && v12[3] == v7) {
                goto LABEL_88;
              }
            }
            else if ((v16 & (v9 - 1)) != v2)
            {
              goto LABEL_28;
            }
            float32x4_t v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_28;
            }
          }
        }
        do
        {
          unint64_t v14 = v12[1];
          if (v14 == v8)
          {
            if (v12[2] == v6 && v12[3] == v7) {
              goto LABEL_88;
            }
          }
          else
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
            if (v14 != v2) {
              break;
            }
          }
          float32x4_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_28:
  unsigned __int32 v17 = v5 + 2;
  float32x4_t v12 = operator new(0x38uLL);
  void *v12 = 0;
  v12[1] = v8;
  *((_OWORD *)v12 + 1) = *(_OWORD *)a2;
  *((unsigned char *)v12 + 32) = 0;
  *((unsigned char *)v12 + 48) = 0;
  float v18 = (float)(unint64_t)(v5[3] + 1);
  float v19 = *((float *)v5 + 8);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = v5[1];
    }
    if (prime <= v9)
    {
      if (prime >= v9) {
        goto LABEL_65;
      }
      unint64_t v34 = vcvtps_u32_f32((float)(unint64_t)v5[3] / *((float *)v5 + 8));
      if (v9 < 3 || (uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        unint64_t v34 = std::__next_prime(v34);
      }
      else
      {
        uint64_t v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2) {
          unint64_t v34 = v36;
        }
      }
      if (prime <= v34) {
        size_t prime = v34;
      }
      if (prime >= v9)
      {
        unint64_t v9 = v5[1];
LABEL_65:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            uint64_t v2 = v8 % v9;
          }
          else {
            uint64_t v2 = v8;
          }
        }
        else
        {
          uint64_t v2 = (v9 - 1) & v8;
        }
        goto LABEL_78;
      }
      if (!prime)
      {
        __int16 v58 = (void *)*v5;
        *unsigned int v5 = 0;
        if (v58) {
          operator delete(v58);
        }
        unint64_t v9 = 0;
        v5[1] = 0;
        goto LABEL_65;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v24 = operator new(8 * prime);
    unint64_t v25 = (void *)*v5;
    *unsigned int v5 = (uint64_t)v24;
    if (v25) {
      operator delete(v25);
    }
    uint64_t v26 = 0;
    v5[1] = prime;
    do
      *(void *)(*v5 + 8 * v26++) = 0;
    while (prime != v26);
    unsigned int v27 = (void *)*v17;
    if (!*v17)
    {
LABEL_64:
      unint64_t v9 = prime;
      goto LABEL_65;
    }
    size_t v28 = v27[1];
    size_t v29 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v30 = v28 & v29;
      *(void *)(*v5 + 8 * v30) = v17;
      for (uint64_t i = (void *)*v27; *v27; uint64_t i = (void *)*v27)
      {
        size_t v32 = i[1] & v29;
        if (v32 == v30)
        {
          unsigned int v27 = i;
        }
        else if (*(void *)(*v5 + 8 * v32))
        {
          void *v27 = *i;
          uint64_t v33 = 8 * v32;
          void *i = **(void **)(*v5 + v33);
          **(void **)(*v5 + v33) = i;
        }
        else
        {
          *(void *)(*v5 + 8 * v32) = v27;
          unsigned int v27 = i;
          size_t v30 = v32;
        }
      }
      goto LABEL_64;
    }
    if (v28 >= prime) {
      v28 %= prime;
    }
    *(void *)(*v5 + 8 * v28) = v17;
    unint64_t v37 = (void *)*v27;
    if (!*v27) {
      goto LABEL_64;
    }
    while (1)
    {
      size_t v39 = v37[1];
      if (v39 >= prime) {
        v39 %= prime;
      }
      if (v39 != v28)
      {
        if (!*(void *)(*v5 + 8 * v39))
        {
          *(void *)(*v5 + 8 * v39) = v27;
          goto LABEL_69;
        }
        void *v27 = *v37;
        uint64_t v38 = 8 * v39;
        void *v37 = **(void **)(*v5 + v38);
        **(void **)(*v5 + v38) = v37;
        unint64_t v37 = v27;
      }
      size_t v39 = v28;
LABEL_69:
      unsigned int v27 = v37;
      unint64_t v37 = (void *)*v37;
      size_t v28 = v39;
      if (!v37) {
        goto LABEL_64;
      }
    }
  }
LABEL_78:
  uint64_t v40 = *v5;
  uint64_t v41 = *(void **)(*v5 + 8 * v2);
  if (v41)
  {
    void *v12 = *v41;
LABEL_86:
    void *v41 = v12;
    goto LABEL_87;
  }
  void *v12 = *v17;
  *unsigned __int32 v17 = v12;
  *(void *)(v40 + 8 * v2) = v17;
  if (*v12)
  {
    unint64_t v42 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v42 >= v9) {
        v42 %= v9;
      }
    }
    else
    {
      v42 &= v9 - 1;
    }
    uint64_t v41 = (void *)(*v5 + 8 * v42);
    goto LABEL_86;
  }
LABEL_87:
  ++v5[3];
LABEL_88:
  uint64_t result = (char *)(v12 + 4);
  if (!*((unsigned char *)v12 + 48))
  {
    unsigned int v44 = *(void **)(a1 + 80);
    int8x8_t v45 = (int8x8_t)v44[1];
    if (v45)
    {
      uint64_t v46 = *a2;
      unint64_t v47 = a2[1];
      unint64_t v48 = ((v47 << 6)
           - 0x61C8864680B583EBLL
           + (v47 >> 2)
           + ((*a2 - 0x61C8864680B583EBLL + ((unint64_t)*a2 >> 34) + (HIDWORD(*a2) << 6)) ^ HIDWORD(*a2))) ^ v47;
      uint8x8_t v49 = (uint8x8_t)vcnt_s8(v45);
      v49.i16[0] = vaddlv_u8(v49);
      if (v49.u32[0] > 1uLL)
      {
        uint64_t v50 = ((v47 << 6)
             - 0x61C8864680B583EBLL
             + (v47 >> 2)
             + ((*a2 - 0x61C8864680B583EBLL + ((unint64_t)*a2 >> 34) + (HIDWORD(*a2) << 6)) ^ HIDWORD(*a2))) ^ v47;
        if (v48 >= *(void *)&v45) {
          uint64_t v50 = v48 % *(void *)&v45;
        }
      }
      else
      {
        uint64_t v50 = v48 & (*(void *)&v45 - 1);
      }
      uint8x8_t v51 = *(uint64_t ***)(*v44 + 8 * v50);
      if (v51)
      {
        uint64_t v52 = *v51;
        if (v52)
        {
          if (v49.u32[0] < 2uLL)
          {
            uint64_t v53 = *(void *)&v45 - 1;
            while (1)
            {
              uint64_t v57 = v52[1];
              if (v57 == v48)
              {
                if (v52[2] == v46 && v52[3] == v47) {
                  goto LABEL_126;
                }
              }
              else if ((v57 & v53) != v50)
              {
                return result;
              }
              uint64_t v52 = (uint64_t *)*v52;
              if (!v52) {
                return result;
              }
            }
          }
          do
          {
            unint64_t v55 = v52[1];
            if (v55 == v48)
            {
              if (v52[2] == v46 && v52[3] == v47)
              {
LABEL_126:
                if (*((unsigned char *)v52 + 48))
                {
                  v12[4] = v52[4];
                  uint64_t v59 = v52[5];
                  v12[5] = v59;
                  if (v59) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v59 + 8), 1uLL, memory_order_relaxed);
                  }
                  *((unsigned char *)v12 + 48) = 1;
                }
                return result;
              }
            }
            else
            {
              if (v55 >= *(void *)&v45) {
                v55 %= *(void *)&v45;
              }
              if (v55 != v50) {
                return result;
              }
            }
            uint64_t v52 = (uint64_t *)*v52;
          }
          while (v52);
        }
      }
    }
  }
  return result;
}

void sub_1A1868624(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::optional<std::shared_ptr<gms::_Material<ggl::Texture2D>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gms::MaterialManager<ggl::Texture2D>::MaterialCacheKey,std::optional<std::shared_ptr<gms::_Material<ggl::Texture2D>>>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void gms::MaterialManager<ggl::Texture2D>::rawMaterialForIDAndAttributes(void *a1, int8x8_t *a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  gms::MaterialManager<ggl::Texture2D>::getMaterialSheet(&v23, a2, a3);
  uint64_t v10 = v23;
  unint64_t v9 = v24;
  uint64_t v25 = v23;
  uint64_t v26 = v24;
  if (!v23)
  {
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_22;
  }
  if (!a4)
  {
    unsigned int v20 = (***(uint64_t (****)(void, uint64_t *))(v23 + 16))(*(void *)(v23 + 16), a5);
    if (v20 == -1)
    {
      uint64_t v22 = *(void *)(v10 + 80);
      *a1 = *(void *)(v10 + 72);
      a1[1] = v22;
      if (!v22) {
        goto LABEL_22;
      }
    }
    else
    {
      long long v21 = *(_OWORD *)(*(void *)(v10 + 40) + 16 * v20);
      *(_OWORD *)a1 = v21;
      uint64_t v22 = *((void *)&v21 + 1);
      if (!*((void *)&v21 + 1)) {
        goto LABEL_22;
      }
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
    goto LABEL_22;
  }
  geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::intern_linear_map(&v23, a5);
  int v11 = *(unsigned __int16 *)(a4 + 10);
  if (*(_WORD *)(a4 + 10))
  {
    float32x4_t v12 = 0;
    unsigned int v13 = 0;
    unsigned int v14 = *(unsigned __int16 *)(a4 + 10);
    do
    {
      if (v13 < v14)
      {
        float32x4_t v12 = (unsigned int *)(*(void *)a4 + 4 * v13);
        unsigned int v5 = (__int16 *)(*(void *)a4 + *(unsigned __int16 *)(a4 + 8) + 2 * v13);
      }
      __int16 v15 = *v5;
      *(_WORD *)geo::intern_linear_map<gss::StyleAttribute,unsigned short,geo::StdAllocator<unsigned char,gss::Allocator>,30ul>::operator[](&v23, *v12) = v15;
      unsigned int v14 = *(unsigned __int16 *)(a4 + 10);
      if (v13 + 1 < v14) {
        ++v13;
      }
      else {
        unsigned int v13 = *(unsigned __int16 *)(a4 + 10);
      }
    }
    while (v13 != v11);
  }
  uint64_t v16 = (gss::Allocator *)(***(uint64_t (****)(void, uint64_t *))(v10 + 16))(*(void *)(v10 + 16), &v23);
  if (v16 != -1)
  {
    long long v17 = *(_OWORD *)(*(void *)(v10 + 40) + 16 * v16);
    *(_OWORD *)a1 = v17;
    uint64_t v18 = *((void *)&v17 + 1);
    if (!*((void *)&v17 + 1)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v18 = *(void *)(v10 + 80);
  *a1 = *(void *)(v10 + 72);
  a1[1] = v18;
  if (v18) {
LABEL_13:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
LABEL_14:
  if (!BYTE6(v24) && v23)
  {
    uint64_t v19 = gss::Allocator::instance(v16);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v19 + 40))(v19, v23, WORD2(v24));
  }
  unint64_t v9 = v26;
LABEL_22:
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1A1868860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *gms::MaterialManager<ggl::Texture2D>::getMaterialSheet(void *result, int8x8_t *a2, unint64_t a3)
{
  int8x8_t v3 = a2[3];
  if (!*(void *)&v3) {
    goto LABEL_21;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = a3;
    if (*(void *)&v3 <= a3) {
      unint64_t v5 = a3 % *(void *)&v3;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v3 - 1) & a3;
  }
  int8x8_t v6 = a2[2];
  unint64_t v7 = *(void **)(*(void *)&v6 + 8 * v5);
  if (!v7 || (unint64_t v8 = (void *)*v7) == 0)
  {
LABEL_21:
    *uint64_t result = 0;
    result[1] = 0;
    return result;
  }
  uint64_t v9 = *(void *)&v3 - 1;
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v10 = v8[1];
      if (v10 == a3)
      {
        if (v8[2] == a3) {
          goto LABEL_22;
        }
      }
      else if ((v10 & v9) != v5)
      {
        goto LABEL_21;
      }
      unint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v8[1];
    if (v11 == a3) {
      break;
    }
    if (v11 >= *(void *)&v3) {
      v11 %= *(void *)&v3;
    }
    if (v11 != v5) {
      goto LABEL_21;
    }
LABEL_16:
    unint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_21;
    }
  }
  if (v8[2] != a3) {
    goto LABEL_16;
  }
LABEL_22:
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v12 = a3;
    if (*(void *)&v3 <= a3) {
      unint64_t v12 = a3 % *(void *)&v3;
    }
  }
  else
  {
    unint64_t v12 = v9 & a3;
  }
  unsigned int v13 = *(void **)(*(void *)&v6 + 8 * v12);
  if (!v13 || (unsigned int v14 = (void *)*v13) == 0) {
LABEL_44:
  }
    abort();
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v15 = v14[1];
      if (v15 == a3)
      {
        if (v14[2] == a3) {
          goto LABEL_34;
        }
      }
      else if ((v15 & v9) != v12)
      {
        goto LABEL_44;
      }
      unsigned int v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_44;
      }
    }
  }
  while (2)
  {
    unint64_t v17 = v14[1];
    if (v17 != a3)
    {
      if (v17 >= *(void *)&v3) {
        v17 %= *(void *)&v3;
      }
      if (v17 != v12) {
        goto LABEL_44;
      }
      goto LABEL_38;
    }
    if (v14[2] != a3)
    {
LABEL_38:
      unsigned int v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_44;
      }
      continue;
    }
    break;
  }
LABEL_34:
  uint64_t v16 = v14[4];
  *uint64_t result = v14[3];
  result[1] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void gms::Material<ggl::Texture2D>::albedoFactorRGB(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t gms::_PBRWithColorRampMaterial<ggl::Texture2D>::alpha@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  int8x8_t v3 = *(uint64_t (****)(void))(a1 + 200);
  if (v3) {
    return (**v3)(v3);
  }
  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 624))();
  }
  *a2 = 0;
  return result;
}

void *gms::PBRWithColorRampMaterial<ggl::Texture2D>::alpha@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  float v3 = a3.n128_f32[0];
  float v6 = **(float **)(a1 + 48);
  a3.n128_u32[1] = 872415232;
  if ((v6 > 0.00000011921 || (uint64_t v7 = *(void *)(a1 + 16)) == 0) && (v6 < 1.0 || (uint64_t v7 = *(void *)(a1 + 32)) == 0))
  {
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      (*(void (**)(uint64_t *__return_ptr, float))(*(void *)v10 + 624))(&v14, a3.n128_f32[0]);
      uint64_t result = *(void **)(a1 + 32);
      if (result) {
        goto LABEL_10;
      }
    }
    else
    {
      LOBYTE(v14) = 0;
      uint64_t result = *(void **)(a1 + 32);
      if (result)
      {
LABEL_10:
        uint64_t result = (*(void *(**)(uint64_t *__return_ptr, float))(*result + 624))(&v13, v3);
        if ((_BYTE)v14)
        {
LABEL_11:
          if ((_BYTE)v13)
          {
            float v11 = *((float *)&v14 + 1) + (float)((float)(*((float *)&v13 + 1) - *((float *)&v14 + 1)) * v6);
            *(unsigned char *)a2 = 1;
            *(float *)(a2 + 4) = v11;
            return result;
          }
          int v12 = HIDWORD(v14);
LABEL_18:
          *(_DWORD *)(a2 + 4) = v12;
          *(unsigned char *)a2 = 1;
          return result;
        }
LABEL_15:
        *(unsigned char *)a2 = 0;
        if (!(_BYTE)v13) {
          return result;
        }
        int v12 = HIDWORD(v13);
        goto LABEL_18;
      }
    }
    LOBYTE(v13) = 0;
    if ((_BYTE)v14) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  unint64_t v8 = *(uint64_t (**)(__n128))(*(void *)v7 + 624);
  return (void *)v8(a3);
}

uint64_t gms::LinearResolver::matchAttributes(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, unsigned __int16 *a5)
{
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6 == v7) {
    return 0xFFFFFFFFLL;
  }
  if (*(_WORD *)(a2 + 10))
  {
    unint64_t v8 = *(char **)a2;
    unint64_t v9 = *(unsigned __int16 *)(a2 + 10);
    uint64_t v10 = *(void *)a2 + 4 * v9;
    uint64_t v11 = *(void *)a2 + *(unsigned __int16 *)(a2 + 8);
    unsigned int v12 = *(unsigned __int8 *)(a2 + 15);
    if (*(unsigned char *)(a2 + 15))
    {
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0xFFFFFFFFLL;
      uint64_t v16 = *(void *)(a1 + 8);
      while (1)
      {
        uint64_t result = -1431655765 * ((unint64_t)(v16 - v7) >> 3);
        a2 &= 0xFFFFFFFFFFFFFF00;
        unsigned int v19 = *(unsigned __int16 *)(v16 + 10);
        if (!*(_WORD *)(v16 + 10)) {
          break;
        }
        LODWORD(v17) = 0;
        unsigned int v20 = 0;
        do
        {
          if (v20 < v19)
          {
            a2 = *(void *)v16 + 4 * v20;
            a3 = (unsigned __int16 *)(*(void *)v16 + *(unsigned __int16 *)(v16 + 8) + 2 * v20);
          }
          unsigned int v21 = *(_DWORD *)a2;
          uint64_t v22 = v8;
          unint64_t v23 = v9;
          if (v9 >= 0x1E)
          {
            do
            {
              unint64_t v26 = v23 >> 1;
              unsigned int v27 = &v22[4 * (v23 >> 1)];
              unsigned int v29 = *(_DWORD *)v27;
              size_t v28 = v27 + 4;
              v23 += ~(v23 >> 1);
              if (v29 < v21) {
                uint64_t v22 = v28;
              }
              else {
                unint64_t v23 = v26;
              }
            }
            while (v23);
            if (v22 == (char *)v10) {
              goto LABEL_5;
            }
            if (*(_DWORD *)v22 != v21) {
              goto LABEL_5;
            }
            unint64_t v30 = (unint64_t)(v22 - v8) >> 2;
            if (v9 == (unsigned __int16)v30) {
              goto LABEL_5;
            }
          }
          else
          {
            uint64_t v24 = 0;
            while (1)
            {
              unsigned int v25 = *(_DWORD *)&v8[4 * v24];
              if (v25 >= v21) {
                break;
              }
              if (v9 == ++v24) {
                goto LABEL_5;
              }
            }
            if (v25 == v21) {
              LOWORD(v30) = v24;
            }
            else {
              LOWORD(v30) = v9;
            }
            if (v9 == (unsigned __int16)v30) {
              goto LABEL_5;
            }
          }
          if (v9 > (unsigned __int16)v30) {
            unint64_t v5 = (unsigned __int16 *)(v11 + 2 * (unsigned __int16)v30);
          }
          if (*v5 != *a3) {
            goto LABEL_5;
          }
          uint64_t v17 = (v17 + 1);
          unsigned int v31 = v20 + 1;
          if (v20 + 1 < v19) {
            ++v20;
          }
          else {
            unsigned int v20 = *(unsigned __int16 *)(v16 + 10);
          }
        }
        while (v31 < v19);
        if (v17 <= v14) {
          goto LABEL_38;
        }
        unsigned int v13 = *(_DWORD *)(v16 + 16);
LABEL_6:
        v16 += 24;
        uint64_t v15 = result;
        uint64_t v14 = v17;
        if (v16 == v6) {
          return result;
        }
      }
      LOBYTE(v17) = 0;
LABEL_38:
      if (v17 == v14)
      {
        if (*(_DWORD *)(v16 + 16) <= v13)
        {
          uint64_t result = v15;
        }
        else
        {
          unsigned int v13 = *(_DWORD *)(v16 + 16);
          uint64_t result = result;
        }
        uint64_t v17 = v14;
      }
      else
      {
LABEL_5:
        uint64_t v17 = v14;
        uint64_t result = v15;
      }
      goto LABEL_6;
    }
    unsigned __int8 v34 = 0;
    uint64_t v35 = 0xFFFFFFFFLL;
    uint64_t v36 = *(void *)(a1 + 8);
    while (1)
    {
      uint64_t result = -1431655765 * ((unint64_t)(v36 - v7) >> 3);
      a4 &= 0xFFFFFFFFFFFFFF00;
      unsigned int v37 = *(unsigned __int16 *)(v36 + 10);
      if (*(_WORD *)(v36 + 10))
      {
        unsigned __int8 v38 = 0;
        unsigned int v39 = 0;
        while (1)
        {
          if (v39 < v37)
          {
            a4 = *(void *)v36 + 4 * v39;
            a5 = (unsigned __int16 *)(*(void *)v36 + *(unsigned __int16 *)(v36 + 8) + 2 * v39);
          }
          uint64_t v40 = 4 * v9;
          uint64_t v41 = v8;
          while (*(_DWORD *)v41 != *(_DWORD *)a4)
          {
            v41 += 4;
            v40 -= 4;
            if (!v40)
            {
              uint64_t v41 = (char *)v10;
              break;
            }
          }
          unint64_t v42 = v41 - v8;
          if (v9 == (unsigned __int16)(v42 >> 2)) {
            break;
          }
          unint64_t v43 = v42 >> 2;
          if (v9 > (unsigned __int16)v43) {
            a2 = v11 + 2 * (unsigned __int16)v43;
          }
          if (*(unsigned __int16 *)a2 != *a5) {
            break;
          }
          ++v38;
          unsigned int v44 = v39 + 1;
          if (v39 + 1 < v37) {
            ++v39;
          }
          else {
            unsigned int v39 = *(unsigned __int16 *)(v36 + 10);
          }
          if (v44 >= v37)
          {
            if (v38 <= v34) {
              goto LABEL_73;
            }
            unsigned int v12 = *(_DWORD *)(v36 + 16);
            unsigned __int8 v34 = v38;
            goto LABEL_53;
          }
        }
      }
      else
      {
        unsigned __int8 v38 = 0;
LABEL_73:
        if (v38 == v34)
        {
          if (*(_DWORD *)(v36 + 16) <= v12)
          {
            uint64_t result = v35;
          }
          else
          {
            unsigned int v12 = *(_DWORD *)(v36 + 16);
            uint64_t result = result;
          }
          goto LABEL_53;
        }
      }
      uint64_t result = v35;
LABEL_53:
      v36 += 24;
      uint64_t v35 = result;
      if (v36 == v6) {
        return result;
      }
    }
  }
  unint64_t v32 = 0;
  unsigned int v33 = 0;
  uint64_t result = 0xFFFFFFFFLL;
  do
  {
    if (!*(_WORD *)(v7 + v32 + 10))
    {
      if (*(_DWORD *)(v7 + v32 + 16) <= v33)
      {
        uint64_t result = result;
      }
      else
      {
        unsigned int v33 = *(_DWORD *)(v7 + v32 + 16);
        uint64_t result = -1431655765 * (v32 >> 3);
      }
    }
    v32 += 24;
  }
  while (v7 + v32 != v6);
  return result;
}

uint64_t md::MapTileData::MapTileData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  *(void *)a1 = &unk_1EF558F70;
  *(_DWORD *)(a1 + 8) = atomic_fetch_add(gdc::LayerData::nextId(void)::idGenerator, 1u) + 1;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)a2;
  gdc::LayerDataKey::LayerDataKey(a1 + 24, a2 + 8);
  *(unsigned char *)(a1 + 112) = 0;
  if (*(unsigned char *)(a2 + 96))
  {
    *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 100);
    *(unsigned char *)(a1 + 112) = 1;
  }
  *(void *)(a1 + 120) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 160) = 1;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  uint64_t v10 = *(_DWORD **)(a2 + 16);
  int v11 = v10[2];
  int v12 = v10[3];
  LODWORD(v10) = *v10;
  int v13 = *(_DWORD *)(*(void *)(a2 + 16) + 4);
  *(unsigned char *)(a1 + 168) = v12;
  *(unsigned char *)(a1 + 169) = v11;
  *(_DWORD *)(a1 + 172) = v13;
  *(_DWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = xmmword_1A28FC920;
  *(int64x2_t *)(a1 + 256) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 272) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(void *)(a1 + 288) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 600) = 0u;
  int v14 = 1 << v11;
  float v15 = ((double)(v14 + ~v13) + 0.5) / (double)v14;
  long double v16 = exp(v15 * 6.28318531 + -3.14159265);
  long double v17 = atan(v16) * 114.591559 + -90.0;
  long double v18 = cos(v17 * 0.034906585) * -559.82 + 111132.92;
  long double v19 = v18 + cos(v17 * 0.0698131701) * 1.175;
  long double v20 = v19 + cos(v17 * 0.104719755) * -0.0023;
  long double v21 = v17 * 0.00872664626;
  long double v22 = tan(v17 * 0.00872664626 + 0.78103484);
  long double v23 = log(v22);
  long double v24 = tan(v21 + 0.789761487);
  *(float *)&long double v23 = fabs((log(v24) - v23) * 0.159154943) / (v20 * (float)(1.0 / (float)v14));
  __powidf2();
  *(_DWORD *)(a1 + 616) = LODWORD(v23);
  *(float *)&double v25 = v25 * 0.0000000249532021;
  *(_DWORD *)(a1 + 620) = LODWORD(v23);
  *(_DWORD *)(a1 + 624) = LODWORD(v25);
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  gdc::Tiled::setZBoundsInMeters((unsigned __int8 *)(a1 + 168), (double *)&v36, (double *)&v37);
  *(void *)a1 = &unk_1EF530BB8;
  *(void *)(a1 + 632) = &unk_1EF530BF8;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(void *)(a1 + 672) = 0;
  unint64_t v26 = *(const void **)a3;
  int64_t v27 = *(void *)(a3 + 8) - *(void *)a3;
  if (v27)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v27 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      abort();
    }
    size_t v28 = (char *)operator new(v27);
    *(void *)(a1 + 656) = v28;
    *(void *)(a1 + 664) = v28;
    unsigned int v29 = &v28[8 * (v27 >> 3)];
    *(void *)(a1 + 672) = v29;
    memcpy(v28, v26, v27);
    *(void *)(a1 + 664) = v29;
  }
  *(void *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 688) = xmmword_1A28FC710;
  *(void *)(a1 + 704) = 0x80000000800000;
  *(unsigned char *)(a1 + 712) = a5;
  unint64_t v30 = +[VKDebugSettings sharedSettings];
  int v31 = [v30 preserveModelTile];

  if (!v31) {
    goto LABEL_19;
  }
  uint64_t v33 = *a4;
  uint64_t v32 = a4[1];
  if (v32) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 640) = v33;
  unsigned __int8 v34 = *(std::__shared_weak_count **)(a1 + 648);
  *(void *)(a1 + 648) = v32;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    if (*a4) {
LABEL_12:
    }
      operator new();
  }
  else
  {
LABEL_19:
    if (*a4) {
      goto LABEL_12;
    }
  }
  return a1;
}

void sub_1A18694D8(_Unwind_Exception *a1)
{
  float v3 = (void *)*((void *)v1 + 82);
  if (v3)
  {
    *((void *)v1 + 83) = v3;
    operator delete(v3);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)v1 + 640);
  gdc::LayerData::~LayerData(v1);
  _Unwind_Resume(a1);
}

void md::PointLabelFeature::addPointFeature(md::PointLabelFeature *this, GeoCodecsPointFeature *a2, const md::LabelFeatureCreationParams *a3)
{
  uint64_t v46 = 0;
  {
    operator new();
  }
  uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                      + 16))(mdm::Allocator::instance(void)::alloc, 152, 8);
  uint64_t v7 = v6;
  uint64_t v46 = v6;
  void *v6 = 1;
  v6[1] = 0;
  void v6[2] = 0;
  v6[3] = 0;
  if (a2)
  {
    v6[1] = a2;
    unint64_t v8 = (std::__shared_weak_count *)*((void *)a2 + 1);
    if (v8 && (unint64_t v8 = std::__shared_weak_count::lock(v8)) != 0) {
      uint64_t v9 = *(void *)a2;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = (std::__shared_weak_count *)v7[3];
    v7[2] = v9;
    void v7[3] = v8;
    if (v10)
    {
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  labelPointFromGeoPointFeature((uint64_t)(v7 + 4), (uint64_t)a2, (uint64_t)a3);
  uint64_t v11 = *((void *)a2 + 22);
  *((unsigned char *)v7 + 108) = 0;
  *((unsigned char *)v7 + 112) = 0;
  *((unsigned char *)v7 + 116) = 0;
  *((_DWORD *)v7 + 30) = 0;
  v7[11] = 0;
  v7[12] = 0;
  v7[10] = v11;
  *((unsigned char *)v7 + 104) = 0;
  *((unsigned char *)v7 + 136) = *((unsigned char *)a2 + 210);
  *((unsigned char *)v7 + 138) = -1;
  *(void *)((char *)v7 + 139) = 0;
  *((unsigned char *)v7 + 137) = *(unsigned char *)(geo::codec::VectorTile::key((geo::codec::VectorTile *)v7[2]) + 1) & 0x3F;
  if (*((unsigned char *)a2 + 210))
  {
    double v12 = *((double *)a3 + 8);
    double v13 = *((double *)a3 + 6);
    if (v12 >= v13 && (double v14 = *((double *)a3 + 9), v15 = *((double *)a3 + 7), v14 >= v15))
    {
      double v16 = v13 + (v12 - v13) * *((float *)a2 + 27);
      double v17 = v15 + (v14 - v15) * *((float *)a2 + 28);
    }
    else
    {
      memset_pattern16(__b, &unk_1A28FFCE0, 0x10uLL);
      double v16 = *(double *)__b;
      double v17 = *(double *)&__b[1];
    }
  }
  else
  {
    double v16 = 0.0;
    double v17 = 0.0;
  }
  *((double *)v7 + 11) = v16;
  *((double *)v7 + 12) = v17;
  if (*((unsigned char *)a2 + 213))
  {
    *((_DWORD *)v7 + 26) = *((_DWORD *)a2 + 25);
    *((unsigned char *)v7 + 108) = 1;
  }
  if (*((unsigned char *)a2 + 214))
  {
    float v18 = *((float *)a2 + 26) * 360.0;
    *((float *)v7 + 28) = v18;
    *((unsigned char *)v7 + 116) = 1;
    *((float *)v7 + 31) = md::LabelFeature::vectorFromAzimuth((md::LabelFeature *)(v7 + 4), v18, (const md::LabelPoint *)*((unsigned __int8 *)this + 392));
    *((_DWORD *)v7 + 32) = v19;
    *((_DWORD *)v7 + 33) = v20;
  }
  *((unsigned char *)v7 + 145) = *((unsigned char *)a2 + 207) != 0;
  *((unsigned char *)v7 + 146) = *((unsigned char *)a2 + 204) != 0;
  uint64_t v46 = v7;
  if (!*((unsigned char *)a3 + 89))
  {
    std::mutex::lock((std::mutex *)((char *)this + 248));
    unint64_t v22 = *((void *)this + 41);
    unint64_t v23 = *((void *)this + 42);
    if (v22 < v23)
    {
      if (v22)
      {
        char v24 = *((unsigned char *)a3 + 88);
        *(unsigned char *)unint64_t v22 = 0;
        double v25 = v46;
        uint64_t v46 = 0;
        *(void *)(v22 + 16) = 0;
        *(void *)(v22 + 24) = 0;
        *(void *)(v22 + 8) = v25;
        *(unsigned char *)(v22 + 32) = v24;
        *(void *)(v22 + 40) = 0;
      }
      uint64_t v26 = v22 + 48;
      goto LABEL_44;
    }
    uint64_t v27 = *((void *)this + 40);
    unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - v27) >> 4);
    unint64_t v29 = v28 + 1;
    if (v28 + 1 > 0x555555555555555) {
      abort();
    }
    unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - v27) >> 4);
    if (2 * v30 > v29) {
      unint64_t v29 = 2 * v30;
    }
    if (v30 >= 0x2AAAAAAAAAAAAAALL) {
      uint64_t v31 = 0x555555555555555;
    }
    else {
      uint64_t v31 = v29;
    }
    if (v31)
    {
      uint64_t v32 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 43) + 16))(*((void *)this + 43), 48 * v31, 8);
      uint64_t v33 = v32 + 48 * v28;
      uint64_t v34 = v32 + 48 * v31;
      if (v32)
      {
        char v35 = *((unsigned char *)a3 + 88);
        *(unsigned char *)uint64_t v33 = 0;
        unint64_t v36 = v32 + 48 * v28;
        *(void *)(v36 + 8) = 0;
        *(void *)(v36 + 8) = v46;
        uint64_t v46 = 0;
        *(void *)(v36 + 16) = 0;
        *(void *)(v36 + 24) = 0;
        *(unsigned char *)(v36 + 32) = v35;
        *(void *)(v36 + 40) = 0;
      }
    }
    else
    {
      uint64_t v34 = 0;
      uint64_t v33 = 48 * v28;
    }
    uint64_t v26 = v33 + 48;
    uint64_t v37 = *((void *)this + 40);
    uint64_t v38 = *((void *)this + 41);
    if (v38 == v37)
    {
      *((void *)this + 40) = v33;
      *((void *)this + 41) = v26;
      uint64_t v43 = *((void *)this + 42);
      *((void *)this + 42) = v34;
      if (!v38) {
        goto LABEL_44;
      }
    }
    else
    {
      uint64_t v39 = 0;
      do
      {
        uint64_t v40 = v33 + v39;
        uint64_t v41 = v38 + v39;
        *(unsigned char *)(v40 - 48) = *(unsigned char *)(v38 + v39 - 48);
        *(void *)(v40 - 40) = 0;
        *(_OWORD *)(v40 - 40) = *(_OWORD *)(v38 + v39 - 40);
        *(void *)(v41 - 40) = 0;
        *(void *)(v40 - 24) = *(void *)(v38 + v39 - 24);
        *(void *)(v41 - 32) = 0;
        *(void *)(v41 - 24) = 0;
        *(_OWORD *)(v40 - 16) = *(_OWORD *)(v38 + v39 - 16);
        v39 -= 48;
      }
      while (v38 + v39 != v37);
      uint64_t v38 = *((void *)this + 40);
      uint64_t v42 = *((void *)this + 41);
      *((void *)this + 40) = v33 + v39;
      *((void *)this + 41) = v26;
      uint64_t v43 = *((void *)this + 42);
      *((void *)this + 42) = v34;
      while (v42 != v38)
      {
        v42 -= 48;
        geo::StdAllocator<md::PointLabelFeature::WorkUnit,mdm::Allocator>::destroy(v42);
      }
      if (!v38)
      {
LABEL_44:
        *((void *)this + 41) = v26;
        atomic_store(1u, (unsigned __int8 *)this + 312);
        std::mutex::unlock((std::mutex *)((char *)this + 248));
        long double v21 = v46;
        if (!v46) {
          return;
        }
        goto LABEL_45;
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 43) + 40))(*((void *)this + 43), v38, v43 - v38);
    goto LABEL_44;
  }
  *((unsigned char *)this + 649) = *((unsigned char *)a3 + 88);
  (*(void (**)(md::PointLabelFeature *, void **))(*(void *)this + 760))(this, &v46);
  long double v21 = v46;
  if (!v46) {
    return;
  }
LABEL_45:
  if ((*v21)-- == 1)
  {
    int8x8_t v45 = (std::__shared_weak_count *)v21[3];
    if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
    {
        operator new();
    }
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v46, 152);
  }
}

void sub_1A1869B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex::unlock(v10);
  geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>::~fast_shared_ptr(&a10);
  _Unwind_Resume(a1);
}

void sub_1A1869B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  md::components::Material::~Material(v11);
  if ((*v10)-- == 1)
  {
    double v15 = (std::__shared_weak_count *)v10[3];
    if (v15)
    {
      if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    uint64_t v16 = mdm::Allocator::instance(v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 40))(v16, a10, 152);
  }
  _Unwind_Resume(a1);
}

uint64_t md::LabelLineStore::addRoad(md::LabelLineStore *this, const md::LabelLineStore::WorkUnit *a2)
{
  float v3 = (uint64_t (***)(void, void, void))*((void *)a2 + 16);
  if (v3)
  {
    int v16 = (**v3)(v3, *((void *)a2 + 5), *((unsigned __int8 *)a2 + 224));
    int v4 = (*(uint64_t (**)(void, void))(**((void **)a2 + 16) + 8))(*((void *)a2 + 16), *((void *)a2 + 5));
  }
  else
  {
    int v4 = 0;
    int v16 = 0;
  }
  unint64_t v5 = (void *)*((void *)a2 + 5);
  uint64_t result = geo::codec::VectorTile::key(*((geo::codec::VectorTile **)a2 + 6));
  uint64_t v7 = (unsigned int *)*((void *)a2 + 9);
  unint64_t v8 = (unsigned int *)*((void *)a2 + 10);
  if (v7 != v8)
  {
    int v9 = *(unsigned char *)(result + 1) & 0x3F;
    char v10 = *((unsigned char *)a2 + 216);
    uint64_t v11 = (char *)a2 + 184;
    double v12 = (char *)a2 + 144;
    do
    {
      unint64_t v13 = *v7;
      unint64_t v19 = 0;
      uint64_t result = (uint64_t)geo::codec::multiSectionFeaturePoints(v5, v13, &v19);
      if (v19 >= 2)
      {
        uint64_t v14 = result;
        uint64_t v18 = 0;
        uint64_t v15 = geo::codec::multiSectionFeatureElevations((uint64_t)v5, v13, &v18);
        uint64_t result = md::LabelLineStore::addSegment<GeoCodecsRoadFeature>((uint64_t)this, (uint64_t)v5, v13, v9, v10, (uint64_t)v11, (uint64_t)v12, v14, v15, v19, v16, v4, 0);
      }
      ++v7;
    }
    while (v7 != v8);
  }
  return result;
}

uint64_t md::LabelLineStore::addSegment<GeoCodecsRoadFeature>(uint64_t a1, uint64_t a2, int a3, int a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, int a11, int a12, uint64_t a13)
{
  if (a10 < 2) {
    return 0;
  }
  uint64_t v41 = 0;
  v26[0] = *(_WORD *)(a1 + 121);
  int v27 = a3;
  LOBYTE(v28) = a5;
  HIBYTE(v28) = a4;
  uint64_t v29 = a6;
  uint64_t v30 = a7;
  uint64_t v31 = a8;
  uint64_t v32 = a9;
  uint64_t v33 = 0;
  int v34 = 0;
  int v35 = a10;
  uint64_t v36 = 0;
  int v37 = a11;
  int v38 = a12;
  uint64_t v39 = a13;
  char v40 = *(unsigned char *)(a1 + 290);
  switch(a10)
  {
    case 2uLL:
      {
        operator new();
      }
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 152, 8);
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = a2;
      *(void *)(v13 + 24) = 0;
      *(unsigned char *)(v13 + 32) = 0;
      *(unsigned char *)(v13 + 33) = v40;
      *(_WORD *)(v13 + 34) = v28;
      *(unsigned char *)(v13 + 36) = *(unsigned char *)(a2 + 151);
      *(unsigned char *)(v13 + 37) = v39 != 0;
      *(unsigned char *)(v13 + 38) = v37;
      *(_DWORD *)(v13 + 40) = v38;
      *(_WORD *)(v13 + 44) = v27;
      *(_WORD *)(v13 + 46) = v35;
      *(void *)uint64_t v13 = &unk_1EF53F898;
      *(_OWORD *)(v13 + 48) = 0u;
      *(_OWORD *)(v13 + 64) = 0u;
      *(void *)(v13 + 80) = 0;
      *(_DWORD *)(v13 + 88) = 2139095039;
      *(_WORD *)(v13 + 92) = 0;
      *(unsigned char *)(v13 + 94) = 0;
      *(_OWORD *)(v13 + 96) = 0u;
      *(_OWORD *)(v13 + 112) = 0u;
      *(void *)(v13 + 128) = 0;
      *(_DWORD *)(v13 + 136) = 2139095039;
      *(_WORD *)(v13 + 140) = 0;
      *(unsigned char *)(v13 + 142) = 0;
      *(void *)(v13 + 144) = 0x7F7F00007F7FLL;
      md::LabelLineSegment::createLists((unsigned __int16 *)v13, a2, (uint64_t)v26);
      break;
    case 3uLL:
      {
        operator new();
      }
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 208, 8);
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = a2;
      *(void *)(v13 + 24) = 0;
      *(unsigned char *)(v13 + 32) = 0;
      *(unsigned char *)(v13 + 33) = v40;
      *(_WORD *)(v13 + 34) = v28;
      *(unsigned char *)(v13 + 36) = *(unsigned char *)(a2 + 151);
      *(unsigned char *)(v13 + 37) = v39 != 0;
      *(unsigned char *)(v13 + 38) = v37;
      *(_DWORD *)(v13 + 40) = v38;
      *(_WORD *)(v13 + 44) = v27;
      *(_WORD *)(v13 + 46) = v35;
      *(void *)uint64_t v13 = &unk_1EF53F8F0;
      *(_OWORD *)(v13 + 48) = 0u;
      *(_OWORD *)(v13 + 64) = 0u;
      *(void *)(v13 + 80) = 0;
      *(_DWORD *)(v13 + 88) = 2139095039;
      *(_WORD *)(v13 + 92) = 0;
      *(unsigned char *)(v13 + 94) = 0;
      *(_OWORD *)(v13 + 96) = 0u;
      *(_OWORD *)(v13 + 112) = 0u;
      *(void *)(v13 + 128) = 0;
      *(_DWORD *)(v13 + 136) = 2139095039;
      *(_WORD *)(v13 + 140) = 0;
      *(unsigned char *)(v13 + 142) = 0;
      *(void *)(v13 + 176) = 0;
      *(_OWORD *)(v13 + 144) = 0u;
      *(_OWORD *)(v13 + 160) = 0u;
      *(_DWORD *)(v13 + 184) = 2139095039;
      *(_WORD *)(v13 + 188) = 0;
      *(unsigned char *)(v13 + 190) = 0;
      *(void *)(v13 + 192) = 0x7F7F00007F7FLL;
      *(_DWORD *)(v13 + 200) = 32639;
      md::LabelLineSegment::createLists((unsigned __int16 *)v13, a2, (uint64_t)v26);
      break;
    case 4uLL:
      {
        operator new();
      }
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 256, 8);
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = a2;
      *(void *)(v13 + 24) = 0;
      *(unsigned char *)(v13 + 32) = 0;
      *(unsigned char *)(v13 + 33) = v40;
      *(_WORD *)(v13 + 34) = v28;
      *(unsigned char *)(v13 + 36) = *(unsigned char *)(a2 + 151);
      *(unsigned char *)(v13 + 37) = v39 != 0;
      *(unsigned char *)(v13 + 38) = v37;
      *(_DWORD *)(v13 + 40) = v38;
      *(_WORD *)(v13 + 44) = v27;
      *(_WORD *)(v13 + 46) = v35;
      *(void *)uint64_t v13 = &unk_1EF53F948;
      *(_OWORD *)(v13 + 48) = 0u;
      *(_OWORD *)(v13 + 64) = 0u;
      *(void *)(v13 + 80) = 0;
      *(_DWORD *)(v13 + 88) = 2139095039;
      *(_WORD *)(v13 + 92) = 0;
      *(unsigned char *)(v13 + 94) = 0;
      *(_OWORD *)(v13 + 96) = 0u;
      *(_OWORD *)(v13 + 112) = 0u;
      *(void *)(v13 + 128) = 0;
      *(_DWORD *)(v13 + 136) = 2139095039;
      *(_WORD *)(v13 + 140) = 0;
      *(unsigned char *)(v13 + 142) = 0;
      *(void *)(v13 + 176) = 0;
      *(_OWORD *)(v13 + 144) = 0u;
      *(_OWORD *)(v13 + 160) = 0u;
      *(_DWORD *)(v13 + 184) = 2139095039;
      *(_WORD *)(v13 + 188) = 0;
      *(unsigned char *)(v13 + 190) = 0;
      *(void *)(v13 + 224) = 0;
      *(_OWORD *)(v13 + 192) = 0u;
      *(_OWORD *)(v13 + 208) = 0u;
      *(_DWORD *)(v13 + 232) = 2139095039;
      *(_WORD *)(v13 + 236) = 0;
      *(unsigned char *)(v13 + 238) = 0;
      *(_OWORD *)(v13 + 240) = xmmword_1A28FE520;
      md::LabelLineSegment::createLists((unsigned __int16 *)v13, a2, (uint64_t)v26);
      break;
    case 5uLL:
      {
        operator new();
      }
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 312, 8);
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = a2;
      *(void *)(v13 + 24) = 0;
      *(unsigned char *)(v13 + 32) = 0;
      *(unsigned char *)(v13 + 33) = v40;
      *(_WORD *)(v13 + 34) = v28;
      *(unsigned char *)(v13 + 36) = *(unsigned char *)(a2 + 151);
      *(unsigned char *)(v13 + 37) = v39 != 0;
      *(unsigned char *)(v13 + 38) = v37;
      *(_DWORD *)(v13 + 40) = v38;
      *(_WORD *)(v13 + 44) = v27;
      *(_WORD *)(v13 + 46) = v35;
      *(void *)uint64_t v13 = &unk_1EF53F9A0;
      *(_OWORD *)(v13 + 48) = 0u;
      *(_OWORD *)(v13 + 64) = 0u;
      *(void *)(v13 + 80) = 0;
      *(_DWORD *)(v13 + 88) = 2139095039;
      *(_WORD *)(v13 + 92) = 0;
      *(unsigned char *)(v13 + 94) = 0;
      *(_OWORD *)(v13 + 96) = 0u;
      *(_OWORD *)(v13 + 112) = 0u;
      *(void *)(v13 + 128) = 0;
      *(_DWORD *)(v13 + 136) = 2139095039;
      *(_WORD *)(v13 + 140) = 0;
      *(unsigned char *)(v13 + 142) = 0;
      *(void *)(v13 + 176) = 0;
      *(_OWORD *)(v13 + 144) = 0u;
      *(_OWORD *)(v13 + 160) = 0u;
      *(_DWORD *)(v13 + 184) = 2139095039;
      *(_WORD *)(v13 + 188) = 0;
      *(unsigned char *)(v13 + 190) = 0;
      *(void *)(v13 + 224) = 0;
      *(_OWORD *)(v13 + 192) = 0u;
      *(_OWORD *)(v13 + 208) = 0u;
      *(_DWORD *)(v13 + 232) = 2139095039;
      *(_WORD *)(v13 + 236) = 0;
      *(unsigned char *)(v13 + 238) = 0;
      *(void *)(v13 + 272) = 0;
      *(_OWORD *)(v13 + 240) = 0u;
      *(_OWORD *)(v13 + 256) = 0u;
      *(_DWORD *)(v13 + 280) = 2139095039;
      *(_WORD *)(v13 + 284) = 0;
      *(unsigned char *)(v13 + 286) = 0;
      *(_OWORD *)(v13 + 288) = xmmword_1A28FE520;
      *(_DWORD *)(v13 + 304) = 32639;
      md::LabelLineSegment::createLists((unsigned __int16 *)v13, a2, (uint64_t)v26);
      break;
    default:
      {
        operator new();
      }
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 112, 8);
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = a2;
      *(void *)(v13 + 24) = 0;
      *(unsigned char *)(v13 + 32) = 0;
      *(unsigned char *)(v13 + 33) = v40;
      *(_WORD *)(v13 + 34) = v28;
      *(unsigned char *)(v13 + 36) = *(unsigned char *)(a2 + 151);
      *(unsigned char *)(v13 + 37) = v39 != 0;
      *(unsigned char *)(v13 + 38) = v37;
      *(_DWORD *)(v13 + 40) = v38;
      *(_WORD *)(v13 + 44) = v27;
      *(_WORD *)(v13 + 46) = v35;
      *(void *)uint64_t v13 = &unk_1EF53D950;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(void *)(v13 + 64) = 0;
      {
        operator new();
      }
      uint64_t v18 = mdm::Allocator::instance(void)::alloc;
      *(void *)(v13 + 80) = 0;
      *(void *)(v13 + 72) = v18;
      *(void *)(v13 + 88) = 0;
      *(void *)(v13 + 96) = 0;
      {
        operator new();
      }
      *(void *)(v13 + 104) = mdm::Allocator::instance(void)::alloc;
      md::LabelLineSegment::createLists((unsigned __int16 *)v13, a2, (uint64_t)v26);
      break;
  }
  uint64_t v41 = v13;
  char v44 = a4;
  char v43 = a5;
  uint64_t v20 = *(void *)(a1 + 128);
  unint64_t v19 = *(void *)(a1 + 136);
  if (v20 == v19)
  {
LABEL_19:
    uint64_t v42 = a1;
    if (v19 >= *(void *)(a1 + 144))
    {
      uint64_t v21 = std::vector<md::LabelLineZSet,geo::StdAllocator<md::LabelLineZSet,mdm::Allocator>>::__emplace_back_slow_path<md::LabelLineStore *,unsigned char const&,unsigned char const&,md::LabelLineSource const&>((uint64_t *)(a1 + 128), &v42, &v44, &v43, (char *)(a1 + 120));
    }
    else
    {
      if (v19) {
        unint64_t v19 = md::LabelLineZSet::LabelLineZSet(v19, a1, a4, a5, *(unsigned char *)(a1 + 120));
      }
      uint64_t v21 = v19 + 112;
      *(void *)(a1 + 136) = v21;
    }
    *(void *)(a1 + 136) = v21;
    uint64_t v20 = v21 - 112;
  }
  else
  {
    while (*(unsigned __int8 *)(v20 + 1) != a4)
    {
      v20 += 112;
      if (v20 == v19) {
        goto LABEL_19;
      }
    }
  }
  unint64_t v22 = *(uint64_t **)(v20 + 24);
  if ((unint64_t)v22 >= *(void *)(v20 + 32))
  {
    char v24 = std::vector<std::unique_ptr<md::LabelLineSegment>,geo::StdAllocator<std::unique_ptr<md::LabelLineSegment>,mdm::Allocator>>::__emplace_back_slow_path<std::unique_ptr<md::LabelLineSegment>>(v20 + 16, &v41);
    uint64_t v23 = v41;
  }
  else
  {
    uint64_t v23 = v13;
    if (v22)
    {
      uint64_t v23 = 0;
      uint64_t v41 = 0;
      uint64_t *v22 = v13;
    }
    char v24 = v22 + 1;
  }
  *(void *)(v20 + 24) = v24;
  atomic_store(0, (unsigned __int8 *)(a1 + 248));
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  return v13;
}

void sub_1A186A718(mdm::Allocator *a1)
{
  uint64_t v2 = (_Unwind_Exception *)a1;
  *uint64_t v1 = &unk_1EF536348;
  uint64_t v3 = v1[3];
  v1[3] = 0;
  if (v3)
  {
    int v4 = *(std::__shared_weak_count **)(v3 + 8);
    if (v4)
    {
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    a1 = (mdm::Allocator *)MEMORY[0x1A6239270](v3, 0x1020C40457A241BLL);
  }
  uint64_t v5 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v5 + 40))(v5, v1, 208);
  _Unwind_Resume(v2);
}

void sub_1A186A950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a22) {
    (*(void (**)(uint64_t))(*(void *)a22 + 8))(a22);
  }
  _Unwind_Resume(exception_object);
}

void md::LabelLineSegment::createLists(unsigned __int16 *a1, uint64_t a2, uint64_t a3)
{
  if (a1[23] < 2u) {
    return;
  }
  md::LabelLineSegment::createPointList((uint64_t)a1, a3);
  int v76 = (unsigned char *)(*(uint64_t (**)(unsigned __int16 *))(*(void *)a1 + 64))(a1);
  unint64_t v6 = a1[23];
  uint64_t v7 = v84;
  __int16 v80 = v84;
  unsigned __int16 v81 = (__int16 *)v84;
  unsigned int v82 = v84;
  uint64_t v83 = 10;
  if (v6 >= 0xB)
  {
    if (v6 <= 0x10) {
      uint64_t v8 = 16;
    }
    else {
      uint64_t v8 = v6;
    }
    int v9 = (char *)malloc_type_malloc(2 * v8, 0x1000040BDFB0063uLL);
    uint64_t v7 = v9;
    char v10 = (__int16 *)v80;
    uint64_t v11 = v81;
    if (v80 == v81) {
      goto LABEL_15;
    }
    unint64_t v12 = (char *)v81 - (unsigned char *)v80 - 2;
    if (v12 < 0x1E)
    {
      uint64_t v13 = v9;
    }
    else
    {
      uint64_t v13 = v9;
      if ((unint64_t)(v9 - (unsigned char *)v80) >= 0x20)
      {
        uint64_t v14 = (v12 >> 1) + 1;
        unint64_t v15 = 2 * (v14 & 0xFFFFFFFFFFFFFFF0);
        uint64_t v13 = &v9[v15];
        int v16 = (long long *)((char *)v80 + 16);
        double v17 = v9 + 16;
        unint64_t v18 = v14 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          long long v19 = *v16;
          *(v17 - 1) = *(v16 - 1);
          *double v17 = v19;
          v16 += 2;
          v17 += 2;
          v18 -= 16;
        }
        while (v18);
        if (v14 == (v14 & 0xFFFFFFFFFFFFFFF0)) {
          goto LABEL_15;
        }
        char v10 = (__int16 *)((char *)v10 + v15);
      }
    }
    do
    {
      __int16 v20 = *v10++;
      *(_WORD *)uint64_t v13 = v20;
      v13 += 2;
    }
    while (v10 != v11);
LABEL_15:
    __int16 v80 = v9;
    uint64_t v83 = v8;
  }
  if (v6)
  {
    memset_pattern16(v7, &unk_1A28FFC90, 2 * v6);
    uint64_t v21 = (__int16 *)&v7[2 * v6];
    uint64_t v7 = v80;
  }
  else
  {
    uint64_t v21 = (__int16 *)v7;
  }
  unsigned __int16 v81 = v21;
  char v22 = *(unsigned char *)(a2 + 151);
  int v23 = *(_DWORD *)(a3 + 4);
  unsigned int v24 = *(_DWORD *)(a3 + 56);
  int v74 = a1[23];
  double v25 = *(std::__shared_weak_count **)(a2 + 8);
  if (v25)
  {
    uint64_t v26 = std::__shared_weak_count::lock(v25);
    if (v26)
    {
      int v27 = *(geo::codec::VectorTile **)a2;
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v26 = 0;
  }
  int v27 = 0;
LABEL_24:
  if (!geo::codec::VectorTile::lineCrossingsCount(v27))
  {
    uint64_t v75 = geo::codec::VectorTile::pointsOnRoad(v27);
    uint64_t v77 = geo::codec::VectorTile::junctions(v27);
    uint64_t v33 = geo::codec::VectorTile::lines(v27);
    uint64_t v34 = geo::codec::VectorTile::sortedPointsOnRoad(v27);
    uint64_t v35 = *(unsigned __int16 *)(a2 + 144);
    if (*(_WORD *)(a2 + 144))
    {
      uint64_t v36 = 0;
      uint64_t v37 = v34 + 8 * *(unsigned int *)(a2 + 132);
      do
      {
        int v38 = *(unsigned int **)(v37 + 8 * v36);
        if (v38[2] == v23)
        {
          unsigned int v39 = v38[3];
          int v40 = v39 - v24;
          if (v39 >= v24 && v39 < v24 + v74)
          {
            uint64_t v42 = (unsigned int *)(v77 + 32 * *v38);
            uint64_t v43 = *v42;
            if (v43)
            {
              char v44 = (unsigned int *)(v75 + 16 * v42[1]);
              float v45 = 0.0;
              int v46 = 0x7FFFFFFF;
              do
              {
                if (v44 != v38)
                {
                  unsigned int v49 = v44[1];
                  uint64_t v50 = *(unsigned __int8 *)(v33 + 168 * v49 + 151);
                  if (v50 < 7 || *(unsigned char *)(v33 + 168 * v49 + 73))
                  {
                    unsigned int v47 = *(unsigned __int16 *)(v33 + 168 * v49 + 148);
                    if (v47)
                    {
                      float v48 = (float)v47 * 0.01;
                    }
                    else if (v50 > 8)
                    {
                      float v48 = 14.8;
                    }
                    else
                    {
                      float v48 = flt_1A2962128[v50];
                    }
                    if (v46 >= (int)v50) {
                      int v46 = v50;
                    }
                    float v45 = fmaxf(v45, v48);
                  }
                }
                v44 += 4;
                --v43;
              }
              while (v43);
              if (v46 != 0x7FFFFFFF)
              {
                uint8x8_t v51 = &v7[2 * v40];
                *uint8x8_t v51 = v46;
                v51[1] = (int)(float)(v45 * 5.0);
              }
            }
          }
        }
        ++v36;
      }
      while (v36 != v35);
    }
  }
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  uint64_t v28 = *(void *)(a3 + 32);
  uint64_t v29 = *(unsigned int *)(a3 + 56);
  unint64_t v30 = a1[23];
  uint64_t v31 = (double *)v79;
  int8x8_t v78 = (double *)v79;
  if (v30 >= 0xB)
  {
    if (v30 <= 0x10) {
      uint64_t v32 = 16;
    }
    else {
      uint64_t v32 = a1[23];
    }
    uint64_t v31 = (double *)malloc_type_malloc(8 * v32, 0x100004000313F17uLL);
    int8x8_t v78 = v31;
  }
  if (v30) {
    bzero(v31, 8 * v30);
  }
  md::LabelLineSegment::computeRadiusOfCurvature((float *)(v28 + 8 * v29), a1[23], *(double **)(a3 + 16), (uint64_t)v31);
  int v52 = *(unsigned __int8 *)(a3 + 1);
  double v53 = 26.0;
  if (v52 == 2) {
    double v53 = 15.0;
  }
  if (v52 == 3) {
    double v53 = 0.0;
  }
  uint64_t v54 = a1[23];
  if (a1[23])
  {
    unint64_t v55 = (char *)v80;
    char v56 = fabsf(*(float *)(a3 + 64)) <= 0.00000011921 ? *(unsigned char *)v80 : 127;
    float v57 = *(float *)(a3 + 68);
    char v58 = *((unsigned char *)v80 + 1);
    *int v76 = v22;
    v76[1] = v56;
    v76[3] = v58;
    unsigned int v59 = (v53 * 0.001953125);
    unsigned int v60 = 31 - __clz(v59);
    char v61 = v59 ? v60 : 0;
    v76[2] = v61;
    if (v54 != 1)
    {
      uint64_t v62 = v54 - 1;
      float v63 = fabsf(v57);
      int8x8_t v64 = &v55[2 * v62];
      unsigned int v65 = v78 + 1;
      uint64_t v66 = v55 + 3;
      uint64_t v67 = v76 + 7;
      do
      {
        if (v62 == 1)
        {
          double v69 = 1.0;
          if (v63 <= 0.00000011921) {
            char v68 = *v64;
          }
          else {
            char v68 = 127;
          }
        }
        else
        {
          char v68 = *(v66 - 1);
          double v69 = *v65;
        }
        char v70 = *v66;
        v66 += 2;
        *(v67 - 3) = v22;
        *(v67 - 2) = v68;
        unsigned char *v67 = v70;
        unsigned int v71 = (v53 / (v69 * 512.0));
        unsigned int v72 = 31 - __clz(v71);
        if (v71) {
          char v73 = v72;
        }
        else {
          char v73 = 0;
        }
        *(v67 - 1) = v73;
        ++v65;
        v67 += 4;
        --v62;
      }
      while (v62);
    }
  }
  if (v78 != (double *)v79) {
    free(v78);
  }
  if (v80 != v82) {
    free(v80);
  }
}

{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  char *v18;
  char *v19;
  float v20;
  float v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  double *v27;
  _WORD *v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  double *v33;
  char *v34;
  unsigned char *v35;
  char v36;
  double v37;
  unsigned int v38;
  char v39;
  double v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;

  char v44 = *MEMORY[0x1E4F143B8];
  if (a1[23] >= 2u)
  {
    md::LabelLineSegment::createPointList((uint64_t)a1, a3);
    unint64_t v6 = (*(uint64_t (**)(unsigned __int16 *))(*(void *)a1 + 64))(a1);
    uint64_t v7 = v6;
    uint64_t v8 = a1[23];
    if (v8 > 0x2000)
    {
      unint64_t v12 = (char *)malloc_type_malloc(a1[23], 0x100004077774924uLL);
      if (!v12) {
        return;
      }
      char v10 = v12;
      uint64_t v11 = a1[23];
    }
    else
    {
      MEMORY[0x1F4188790](v6);
      char v10 = (char *)&v41 - v9;
      bzero((char *)&v41 - v9, v8);
      uint64_t v11 = v8;
    }
    uint64_t v13 = (char *)memset(v10, 127, v11);
    uint64_t v14 = a1[23];
    if (!a2)
    {
LABEL_26:
      int v23 = *(void *)(a3 + 32);
      unsigned int v24 = *(unsigned int *)(a3 + 56);
      double v25 = 8 * v14;
      if (v14 > 0x400)
      {
        int v27 = (double *)malloc_type_malloc(8 * v14, 0x100004000313F17uLL);
        if (!v27)
        {
LABEL_33:
          free(v27);
LABEL_34:
          if (v8 > 0x2000) {
            free(v10);
          }
          return;
        }
        double v25 = 8 * a1[23];
      }
      else
      {
        MEMORY[0x1F4188790](v13);
        int v27 = (double *)((char *)&v41 - v26);
        bzero((char *)&v41 - v26, 8 * v14);
      }
      bzero(v27, v25);
      uint64_t v29 = a1[23];
      uint64_t v28 = a1 + 23;
      md::LabelLineSegment::computeRadiusOfCurvature((float *)(v23 + 8 * v24), v29, *(double **)(a3 + 16), (uint64_t)v27);
      unint64_t v30 = (unsigned __int16)*v28;
      if (*v28)
      {
        uint64_t v31 = *v10;
        *(unsigned char *)uint64_t v7 = *v10;
        *(unsigned char *)(v7 + 1) = v31;
        *(_WORD *)(v7 + 2) = 0;
        if (v30 != 1)
        {
          uint64_t v32 = v30 - 1;
          uint64_t v33 = v27 + 1;
          uint64_t v34 = v10 + 1;
          uint64_t v35 = (unsigned char *)(v7 + 7);
          do
          {
            int v40 = 1.0;
            if (v32 != 1) {
              int v40 = *v33;
            }
            uint64_t v36 = *v34++;
            *(v35 - 3) = v36;
            *(v35 - 2) = v36;
            *uint64_t v35 = 0;
            uint64_t v37 = 0.05078125 / v40;
            int v38 = 31 - __clz(v37);
            if (v37) {
              unsigned int v39 = v38;
            }
            else {
              unsigned int v39 = 0;
            }
            *(v35 - 1) = v39;
            ++v33;
            v35 += 4;
            --v32;
          }
          while (v32);
        }
      }
      if (v14 < 0x401) {
        goto LABEL_34;
      }
      goto LABEL_33;
    }
    unint64_t v15 = *(unsigned int *)(a3 + 4);
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    int v16 = *(std::__shared_weak_count **)(a2 + 8);
    if (v16)
    {
      int v16 = std::__shared_weak_count::lock(v16);
      double v17 = v16;
      uint64_t v43 = v16;
      if (v16)
      {
        int v16 = *(std::__shared_weak_count **)a2;
        uint64_t v42 = *(std::__shared_weak_count **)a2;
      }
    }
    else
    {
      double v17 = 0;
    }
    uint64_t v13 = (char *)geo::codec::VectorTile::transitLinkSections((geo::codec::VectorTile *)v16);
    unint64_t v18 = v13;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    if (!v18) {
      goto LABEL_25;
    }
    long long v19 = &v18[8 * *(unsigned int *)(a2 + 16)];
    if (v15)
    {
      if (*(_DWORD *)(a2 + 20) - 1 != v15) {
        goto LABEL_25;
      }
      __int16 v20 = *(float *)&v19[8 * v15 + 4];
    }
    else
    {
      uint64_t v21 = *(float *)&v19[8 * v15];
      if (*(_DWORD *)(a2 + 20) != 1)
      {
        char v22 = v10;
        if (v21 == 0.0) {
          goto LABEL_24;
        }
        goto LABEL_25;
      }
      __int16 v20 = *(float *)&v19[8 * v15 + 4];
      if (v21 == 0.0) {
        *char v10 = 1;
      }
    }
    if (v20 == 1.0)
    {
      char v22 = &v10[(v14 - 1)];
LABEL_24:
      uint64_t *v22 = 1;
    }
LABEL_25:
    uint64_t v14 = a1[23];
    goto LABEL_26;
  }
}

void sub_1A186AF7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,void *a29)
{
  if (a27 != a29) {
    free(a27);
  }
  _Unwind_Resume(a1);
}

uint64_t geo::codec::VectorTile::lineCrossingsCount(geo::codec::VectorTile *this)
{
  return *((void *)this + 92);
}

void md::LabelLineSegment::computeRadiusOfCurvature(float *a1, unsigned int a2, double *a3, uint64_t a4)
{
  v43[1] = *MEMORY[0x1E4F143B8];
  if (a2 >= 3)
  {
    double v7 = a3[2];
    double v8 = *a3;
    uint64_t v9 = a2;
    size_t v10 = 8 * (a2 + 2);
    if (a2 > 0x1FF0)
    {
      unint64_t v12 = (float *)malloc_type_malloc(v10, 0x100004000313F17uLL);
    }
    else
    {
      MEMORY[0x1F4188790](a1);
      unint64_t v12 = (float *)((char *)v43 - ((v11 + 15) & 0xFFFFFFFF0));
      bzero(v12, v11);
    }
    uint64_t v13 = 0;
    float v14 = a1[2] - *a1;
    float v15 = a1[3] - a1[1];
    float v16 = 1.0 / sqrtf((float)(v14 * v14) + (float)(v15 * v15));
    float v17 = v16 * v14;
    float v18 = v16 * v15;
    float *v12 = v17;
    v12[1] = v18;
    void v12[2] = v17;
    void v12[3] = v18;
    unint64_t v19 = a2 - 1;
    unint64_t v20 = v19 - 1;
    float v21 = v17;
    float v22 = v18;
    do
    {
      float32x2_t v29 = vsub_f32(*(float32x2_t *)&a1[v13 + 4], *(float32x2_t *)&a1[v13 + 2]);
      float v30 = vaddv_f32(vmul_f32(v29, v29));
      if (v30 > 0.00000011921)
      {
        float v31 = sqrtf(v30);
        float v21 = v29.f32[0] / v31;
        float v22 = v29.f32[1] / v31;
      }
      float v23 = v21 + (float)((float)(v17 - v21) * 0.5);
      float v24 = v22 + (float)((float)(v18 - v22) * 0.5);
      float v25 = 1.0 / sqrtf((float)(v23 * v23) + (float)(v24 * v24));
      uint64_t v26 = &v12[v13];
      v26[4] = v25 * v23;
      v26[5] = v25 * v24;
      BOOL v27 = (float)((float)(v21 * v17) + (float)(v22 * v18)) < 0.7071;
      double v28 = 0.00000011920929;
      if (!v27) {
        double v28 = 0.0;
      }
      *(double *)(a4 + 8 + v13 * 4) = v28;
      v13 += 2;
      float v18 = v22;
      float v17 = v21;
      --v20;
    }
    while (v20);
    unint64_t v32 = 0;
    uint64_t v33 = &v12[2 * v9];
    *uint64_t v33 = v21;
    v33[1] = v22;
    uint64_t v34 = &v12[2 * a2 + 2];
    *uint64_t v34 = v21;
    v34[1] = v22;
    float v35 = 1.0;
    float v36 = 0.0;
    uint64_t v37 = 2;
    while (1)
    {
      if (v32 >= v19)
      {
        float32x2_t v40 = *(float32x2_t *)&v12[v37 + 2];
        float32x2_t v41 = vsub_f32(v40, *(float32x2_t *)&v12[v37]);
        v40.i32[0] = 1.0;
      }
      else
      {
        float32x2_t v39 = vsub_f32(*(float32x2_t *)&a1[v37], *(float32x2_t *)&a1[v37 - 2]);
        float32x2_t v40 = vmul_f32(v39, v39);
        v40.f32[0] = sqrtf(vaddv_f32(v40));
        float32x2_t v41 = vsub_f32(*(float32x2_t *)&v12[v37 + 2], *(float32x2_t *)&v12[v37]);
        if (v40.f32[0] <= 0.00000011921) {
          goto LABEL_20;
        }
      }
      float32x2_t v41 = vdiv_f32(v41, (float32x2_t)vdup_lane_s32((int32x2_t)v40, 0));
LABEL_20:
      float v42 = sqrtf(vaddv_f32(vmul_f32(v41, v41)));
      if (*(double *)(a4 + 8 * v32) == 0.0)
      {
        if (v40.f32[0] >= v35) {
          float v36 = v42;
        }
        if (v36 > 0.00000011921) {
          double v38 = (v7 - v8) / v36;
        }
        else {
          double v38 = 1.79769313e308;
        }
        *(double *)(a4 + 8 * v32) = v38;
      }
      ++v32;
      v37 += 2;
      float v36 = v42;
      float v35 = v40.f32[0];
      if (v9 == v32)
      {
        if (a2 >= 0x1FF1) {
          free(v12);
        }
        return;
      }
    }
  }
}

void md::LabelLineSegment::createPointList(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int16 *)(a1 + 46) < 2u) {
    return;
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  unint64_t v5 = *(unsigned __int16 *)(a1 + 46);
  if (v5 <= 0xA)
  {
    BOOL v6 = *(void *)(a1 + 24) != 0;
    uint64_t v7 = *(void *)(a2 + 48);
    if (v7)
    {
LABEL_4:
      BOOL v127 = v6;
      if (*(_WORD *)(a1 + 46))
      {
        unsigned int v8 = *(_DWORD *)(a2 + 56);
        uint64_t v9 = (double *)(v7 + 24 * v8);
        double v10 = *v9;
        if (*(unsigned char *)(a1 + 33))
        {
          double v11 = v9[1] * 0.0174532925;
          __double2 v12 = __sincos_stret(v10 * 0.0174532925);
          double v13 = 6378137.0 / sqrt(v12.__sinval * v12.__sinval * -0.00669437999 + 1.0);
          __double2 v14 = __sincos_stret(v11);
          *(double *)uint64_t v4 = v13 * v12.__cosval * v14.__cosval;
          *(double *)(v4 + 8) = v13 * v12.__cosval * v14.__sinval;
          *(double *)(v4 + 16) = v12.__sinval * 0.99330562 * v13;
          *(unsigned char *)(v4 + 44) = 1;
        }
        else
        {
          float64_t v136 = v9[1];
          long double v65 = tan(v10 * 0.00872664626 + 0.785398163);
          long double v66 = log(v65);
          v67.f64[0] = v136;
          v67.f64[1] = v66;
          __asm { FMOV            V1.2D, #0.5 }
          *(float64x2_t *)(v4 + 24) = vmlaq_f64(_Q1, (float64x2_t)xmmword_1A28FCBE0, v67);
          *(_WORD *)(v4 + 45) = 257;
        }
        double v73 = *(double *)(v7 + 24 * v8 + 16);
        float v74 = v73;
        _ZF = v73 == 1.79769313e308;
        float v75 = 3.4028e38;
        if (!_ZF) {
          float v75 = v74;
        }
        *(float *)(v4 + 40) = v75;
        uint64_t v76 = md::LabelPoint::mercatorPoint((md::LabelPoint *)v4);
        double v77 = *(double *)(v76 + 8);
        double v27 = fmin(*(double *)v76, 1.79769313e308);
        double v26 = fmax(*(double *)v76, -1.79769313e308);
        double v23 = fmin(v77, 1.79769313e308);
        double v24 = fmax(v77, -1.79769313e308);
        if (*(unsigned __int16 *)(a1 + 46) >= 2u)
        {
          uint64_t v78 = v4 + 48;
          unsigned int v79 = (double *)(v7 + 24 * v8 + 24);
          __asm { FMOV            V0.2D, #0.5 }
          float64x2_t v129 = _Q0;
          unint64_t v81 = 1;
          do
          {
            if (*(unsigned char *)(a1 + 33))
            {
              double v92 = v79[1] * 0.0174532925;
              __double2 v93 = __sincos_stret(*v79 * 0.0174532925);
              double v94 = 6378137.0 / sqrt(v93.__sinval * v93.__sinval * -0.00669437999 + 1.0);
              __double2 v95 = __sincos_stret(v92);
              *(double *)uint64_t v78 = v94 * v93.__cosval * v95.__cosval;
              *(double *)(v78 + 8) = v94 * v93.__cosval * v95.__sinval;
              *(double *)(v78 + 16) = v93.__sinval * 0.99330562 * v94;
              *(unsigned char *)(v78 + 44) = 1;
            }
            else
            {
              float64_t v137 = v79[1];
              long double v82 = tan(*v79 * 0.00872664626 + 0.785398163);
              long double v83 = log(v82);
              v84.f64[0] = v137;
              v84.f64[1] = v83;
              *(float64x2_t *)(v78 + 24) = vmlaq_f64(v129, (float64x2_t)xmmword_1A28FCBE0, v84);
              *(_WORD *)(v78 + 45) = 257;
            }
            double v85 = v79[2];
            float v86 = v85;
            _ZF = v85 == 1.79769313e308;
            float v87 = 3.4028e38;
            if (!_ZF) {
              float v87 = v86;
            }
            *(float *)(v78 + 40) = v87;
            uint64_t v88 = md::LabelPoint::mercatorPoint((md::LabelPoint *)v78);
            double v89 = *(double *)(v88 + 8);
            double v27 = fmin(*(double *)v88, v27);
            double v26 = fmax(v26, *(double *)v88);
            double v23 = fmin(v89, v23);
            double v24 = fmax(v24, v89);
            uint64_t v90 = (float64x2_t *)md::LabelPoint::mercatorPoint((md::LabelPoint *)(v78 - 48));
            float64x2_t v91 = vsubq_f64(*v90, *(float64x2_t *)md::LabelPoint::mercatorPoint((md::LabelPoint *)v78));
            *(double *)(a1 + 8) = sqrt(vaddvq_f64(vmulq_f64(v91, v91))) + *(double *)(a1 + 8);
            ++v81;
            v78 += 48;
            v79 += 3;
          }
          while (v81 < *(unsigned __int16 *)(a1 + 46));
        }
        goto LABEL_77;
      }
LABEL_36:
      double v26 = -1.79769313e308;
      double v27 = 1.79769313e308;
      double v23 = 1.79769313e308;
      double v24 = -1.79769313e308;
      goto LABEL_77;
    }
  }
  else
  {
    BOOL v6 = 1;
    uint64_t v7 = *(void *)(a2 + 48);
    if (v7) {
      goto LABEL_4;
    }
  }
  float v15 = *(unsigned __int8 **)(a2 + 24);
  if (!v15 || (int v16 = *v15, v16 == 255))
  {
    BOOL v127 = v6;
    if (!*(_WORD *)(a1 + 46)) {
      goto LABEL_36;
    }
    uint64_t v56 = *(void *)(a2 + 32);
    float v57 = *(float **)(a2 + 40);
    uint64_t v58 = *(unsigned int *)(a2 + 56);
    unsigned int v59 = (float *)(v56 + 8 * v58);
    float v60 = *v59;
    float v61 = v59[1];
    float v62 = *(float *)(a2 + 64);
    if (fabsf(v62) <= 0.00000011921)
    {
      if (v5 != 1) {
        goto LABEL_52;
      }
      float v62 = *(float *)(a2 + 68);
      if (fabsf(v62) <= 0.00000011921) {
        goto LABEL_52;
      }
      float v64 = (float)(*(v59 - 2) - v60) * v62;
      float v63 = v59 - 1;
    }
    else
    {
      float v63 = v59 + 3;
      float v64 = (float)(v59[2] - v60) * v62;
    }
    float v60 = v64 + v60;
    float v61 = v61 + (float)((float)(*v63 - v61) * v62);
LABEL_52:
    unsigned __int16 v96 = *(double **)(a2 + 16);
    double v97 = v96[2];
    if (v97 >= *v96 && (double v98 = v96[3], v99 = v96[1], v98 >= v99))
    {
      double v100 = *v96 + (v97 - *v96) * v60;
      double v101 = v99 + (v98 - v99) * v61;
    }
    else
    {
      memset_pattern16(&__b, &unk_1A28FFCE0, 0x10uLL);
      double v100 = __b;
      double v101 = v142;
    }
    *(double *)(v4 + 24) = v100;
    *(double *)(v4 + 32) = v101;
    *(_WORD *)(v4 + 45) = 257;
    if (v57)
    {
      __int16 v102 = &md::kNoLabelElevation;
      if (*v57 != 3.4028e38) {
        __int16 v102 = (int *)v57;
      }
    }
    else
    {
      __int16 v102 = &md::kNoLabelElevation;
    }
    *(_DWORD *)(v4 + 40) = *v102;
    double v27 = fmin(v100, 1.79769313e308);
    double v26 = fmax(v100, -1.79769313e308);
    double v23 = fmin(v101, 1.79769313e308);
    double v24 = fmax(v101, -1.79769313e308);
    if (v5 >= 2)
    {
      float v103 = (float32x2_t *)(v56 + 8 * v58 + 8);
      float v104 = v57 + 1;
      unint64_t v105 = 1;
      do
      {
        float32x2_t v110 = *v103;
        if (v105 == v5 - 1)
        {
          float v111 = *(float *)(a2 + 68);
          if (fabsf(v111) > 0.00000011921) {
            float32x2_t v110 = vmla_n_f32(v110, vsub_f32(v103[-1], v110), v111);
          }
        }
        uint64_t v112 = *(double **)(a2 + 16);
        double v113 = v112[2];
        if (v113 >= *v112 && (double v114 = v112[3], v115 = v112[1], v114 >= v115))
        {
          double v118 = v110.f32[1];
          double v116 = *v112 + (v113 - *v112) * v110.f32[0];
          double v117 = v115 + (v114 - v115) * v118;
        }
        else
        {
          memset_pattern16(&__b, &unk_1A28FFCE0, 0x10uLL);
          double v116 = __b;
          double v117 = v142;
        }
        *(double *)(v4 + 72) = v116;
        *(double *)(v4 + 80) = v117;
        *(_WORD *)(v4 + 93) = 257;
        if (v57)
        {
          if (*v104 == 3.4028e38) {
            int v106 = &md::kNoLabelElevation;
          }
          else {
            int v106 = (int *)v104;
          }
        }
        else
        {
          int v106 = &md::kNoLabelElevation;
        }
        *(_DWORD *)(v4 + 88) = *v106;
        double v27 = fmin(v116, v27);
        double v26 = fmax(v26, v116);
        double v23 = fmin(v117, v23);
        double v24 = fmax(v24, v117);
        md::LabelPoint::vectorToPoint((md::LabelPoint *)v4, (const md::LabelPoint *)(v4 + 48), *(unsigned __int8 *)(a1 + 33));
        *(double *)(a1 + 8) = sqrt(v107 * v107 + v108 * v108 + v109 * v109) + *(double *)(a1 + 8);
        ++v105;
        unint64_t v5 = *(unsigned __int16 *)(a1 + 46);
        ++v103;
        ++v104;
        v4 += 48;
      }
      while (v105 < v5);
    }
LABEL_77:
    if (!v127) {
      return;
    }
    goto LABEL_78;
  }
  int32x2_t v138 = vrev64_s32(*(int32x2_t *)(v15 + 4));
  int v17 = v15[1];
  char v139 = v17;
  char v140 = v16;
  if (v5)
  {
    float v18 = *(float **)(a2 + 40);
    unint64_t v19 = (float *)(*(void *)(a2 + 32) + 8 * *(unsigned int *)(a2 + 56));
    double v131 = v19 + 3;
    float v130 = *(float *)(a2 + 64);
    float v133 = fabsf(v130);
    float v121 = *(float *)(a2 + 68);
    float v122 = fabsf(v121);
    uint64_t v20 = 0;
    uint64_t v21 = 48 * v5;
    double v123 = sqrt(ldexp(2.0943951, -2 * v17) * 4.0538689e13);
    float v22 = *(double **)(a2 + 16);
    double v23 = 1.79769313e308;
    double v24 = -1.79769313e308;
    uint64_t v132 = v19;
    float v25 = v18;
    double v26 = -1.79769313e308;
    double v27 = 1.79769313e308;
    while (1)
    {
      float v37 = *v19;
      float v38 = v19[1];
      if (!v20 && v133 > 0.00000011921) {
        break;
      }
      if (v21 - 48 == v20 && v122 > 0.00000011921)
      {
        float v39 = v121;
        float v40 = (float)(*(v19 - 2) - v37) * v121;
        float32x2_t v41 = v19 - 1;
        goto LABEL_21;
      }
LABEL_22:
      double v42 = v37;
      double v43 = v38;
      uint64_t v44 = v4 + v20;
      double v36 = geo::S2CellCoordinates::xyzFromTileLocalST<double>((uint64_t)&v138, v37, v38) * 6378137.0;
      *(double *)uint64_t v44 = v36;
      *(double *)(v44 + 8) = v45 * 6378137.0;
      double v47 = v46 * 6356752.31;
      *(double *)(v44 + 16) = v47;
      *(unsigned char *)(v44 + 44) = 1;
      double v134 = v47;
      double v135 = v45 * 6378137.0;
      if (!v18 || *v25 == 3.4028e38) {
        double v48 = 3.40282347e38;
      }
      else {
        double v48 = v123 * *v25;
      }
      float v49 = v48;
      *(float *)(v44 + 40) = v49;
      double v50 = v22[2];
      if (v50 >= *v22 && (double v51 = v22[3], v52 = v22[1], v51 >= v52))
      {
        double v54 = *v22 + (v50 - *v22) * v42;
        double v53 = v52 + (v51 - v52) * v43;
        if (v20)
        {
LABEL_31:
          uint64_t v55 = v4 + v20;
          if (*(unsigned char *)(v4 + v20 - 4))
          {
            double v33 = *(double *)(v55 - 48);
            double v34 = *(double *)(v55 - 40);
            double v35 = *(double *)(v55 - 32);
          }
          else
          {
            double v128 = v36;
            __double x = *(double *)(v55 - 24) * 6.28318531;
            long double v28 = exp(*(double *)(v55 - 16) * 6.28318531 + -3.14159265);
            double v126 = atan(v28) * 2.0 + -1.57079633;
            long double v29 = fmod(__x, 6.28318531);
            double __xa = fmod(v29 + 6.28318531, 6.28318531) + -3.14159265;
            __double2 v30 = __sincos_stret(v126);
            double v31 = 6378137.0 / sqrt(v30.__sinval * v30.__sinval * -0.00669437999 + 1.0);
            __double2 v32 = __sincos_stret(__xa);
            double v33 = v31 * v30.__cosval * v32.__cosval;
            double v34 = v31 * v30.__cosval * v32.__sinval;
            *(double *)(v55 - 48) = v33;
            *(double *)(v55 - 40) = v34;
            double v35 = v30.__sinval * 0.99330562 * v31;
            double v36 = v128;
            *(double *)(v55 - 32) = v35;
            *(unsigned char *)(v55 - 4) = 1;
          }
          *(double *)(a1 + 8) = sqrt((v33 - v36) * (v33 - v36) + (v34 - v135) * (v34 - v135) + (v35 - v134)
                                                                                             * (v35 - v134))
                              + *(double *)(a1 + 8);
        }
      }
      else
      {
        memset_pattern16(&__b, &unk_1A28FFCE0, 0x10uLL);
        double v54 = __b;
        double v53 = v142;
        if (v20) {
          goto LABEL_31;
        }
      }
      double v27 = fmin(v54, v27);
      double v26 = fmax(v26, v54);
      double v23 = fmin(v53, v23);
      double v24 = fmax(v24, v53);
      v20 += 48;
      ++v25;
      v19 += 2;
      if (v21 == v20) {
        goto LABEL_78;
      }
    }
    float v39 = v130;
    float v40 = (float)(v132[2] - v37) * v130;
    float32x2_t v41 = v131;
LABEL_21:
    float v37 = v40 + v37;
    float v38 = v38 + (float)((float)(*v41 - v38) * v39);
    goto LABEL_22;
  }
  double v26 = -1.79769313e308;
  double v27 = 1.79769313e308;
  double v23 = 1.79769313e308;
  double v24 = -1.79769313e308;
LABEL_78:
  uint64_t v119 = *(void *)(a1 + 24);
  if (!v119) {
    operator new();
  }
  int v120 = *(unsigned __int8 *)(v119 + 48);
  *(double *)(v119 + 16) = v27;
  *(double *)(v119 + 24) = v23;
  *(double *)(v119 + 32) = v26;
  *(double *)(v119 + 40) = v24;
  if (!v120) {
    *(unsigned char *)(v119 + 48) = 1;
  }
}

uint64_t geo::codec::VectorTile::key(geo::codec::VectorTile *this)
{
  return (uint64_t)this + 4;
}

uint64_t md::FixedLabelLineSegment<2ul>::points(uint64_t a1)
{
  return a1 + 48;
}

{
  return a1 + 48;
}

uint64_t md::FixedLabelLineSegment<2ul>::vertexInfos(uint64_t a1)
{
  return a1 + 144;
}

void *std::vector<std::unique_ptr<md::LabelLineSegment>,geo::StdAllocator<std::unique_ptr<md::LabelLineSegment>,mdm::Allocator>>::__emplace_back_slow_path<std::unique_ptr<md::LabelLineSegment>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61) {
    abort();
  }
  uint64_t v5 = *(void *)(a1 + 16) - *(void *)a1;
  if (v5 >> 2 > v3) {
    unint64_t v3 = v5 >> 2;
  }
  BOOL v19 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF8;
  uint64_t v6 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v19) {
    uint64_t v6 = v3;
  }
  if (v6)
  {
    uint64_t v8 = 8 * v6;
    uint64_t v9 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), 8 * v6, 8);
    double v10 = (void *)(v9 + 8 * v2);
    uint64_t v6 = v9 + v8;
    if (v9)
    {
      uint64_t v11 = *a2;
      *a2 = 0;
      *double v10 = v11;
    }
  }
  else
  {
    double v10 = (void *)(8 * v2);
  }
  __double2 v12 = v10 + 1;
  double v13 = *(char **)a1;
  __double2 v14 = *(char **)(a1 + 8);
  if (v14 == *(char **)a1)
  {
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v12;
    uint64_t v29 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v6;
    goto LABEL_28;
  }
  unint64_t v15 = (unint64_t)&v14[-*(void *)a1 - 8];
  if (v15 > 0x57
    && ((unint64_t v16 = (v13 - v14 + 7) & 0xFFFFFFFFFFFFFFF8,
         unint64_t v17 = (unint64_t)&v14[v16],
         float v18 = (char *)v10 + v16,
         v17 < (unint64_t)v10)
      ? (BOOL v19 = v18 >= v14)
      : (BOOL v19 = 1),
        v19))
  {
    uint64_t v20 = (v15 >> 3) + 1;
    uint64_t v21 = &v14[-8 * (v20 & 0x3FFFFFFFFFFFFFFCLL)];
    float v22 = v10 - 2;
    double v23 = v14 - 32;
    uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *(_OWORD *)v23;
      long long v25 = *((_OWORD *)v23 + 1);
      *(_OWORD *)double v23 = 0uLL;
      *((_OWORD *)v23 + 1) = 0uLL;
      v23 -= 32;
      *(v22 - 1) = v26;
      _OWORD *v22 = v25;
      v22 -= 2;
      v24 -= 4;
    }
    while (v24);
    v10 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
    if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v21 = *(char **)(a1 + 8);
  }
  do
  {
    uint64_t v27 = *((void *)v21 - 1);
    v21 -= 8;
    *(void *)uint64_t v21 = 0;
    *--double v10 = v27;
  }
  while (v21 != v13);
LABEL_23:
  __double2 v14 = *(char **)a1;
  long double v28 = *(char **)(a1 + 8);
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v12;
  uint64_t v29 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v6;
  while (v28 != v14)
  {
    uint64_t v31 = *((void *)v28 - 1);
    v28 -= 8;
    uint64_t v30 = v31;
    *(void *)long double v28 = 0;
    if (v31) {
      (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
    }
  }
LABEL_28:
  if (v14) {
    (*(void (**)(void, char *, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v14, v29 - (void)v14);
  }
  return v12;
}

uint64_t md::FixedLabelLineSegment<3ul>::points(uint64_t a1)
{
  return a1 + 48;
}

{
  return a1 + 48;
}

uint64_t md::FixedLabelLineSegment<3ul>::vertexInfos(uint64_t a1)
{
  return a1 + 192;
}

uint64_t non-virtual thunk to'md::UniLineLabelFeature::styleIndexForFeature(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 - 440;
  md::UniLineLabelFeature::mergeAdditionalAttributes(&v6, *(void *)(a1 + 32), *(const FeatureStyleAttributes **)(a2 + 24), *(void *)(a2 + 32));
  uint64_t v3 = md::LineLabelFeature::styleIndexForAttributes(v2, (uint64_t *)&v6);
  uint64_t v4 = v7;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v3;
}

void sub_1A186BFFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::LineLabelFeature::styleIndexForAttributes(uint64_t a1, uint64_t *a2)
{
  if (*a2)
  {
    uint64_t v4 = *(void *)(a1 + 280);
    if (v4 != *(void *)(a1 + 272))
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      uint64_t v4 = *(void *)(a1 + 272);
      do
      {
        if (!geo::codec::featureStyleAttributesCompare((uint64_t *)(v4 + v5), a2)) {
          return v6;
        }
        ++v6;
        uint64_t v4 = *(void *)(a1 + 272);
        unint64_t v7 = *(void *)(a1 + 280);
        unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - v4) >> 4);
        v5 += 80;
      }
      while (v6 < v8);
      if (v8 <= 0x64) {
        goto LABEL_9;
      }
      return 0xFFFFFFFFLL;
    }
    unint64_t v8 = 0;
    unint64_t v7 = *(void *)(a1 + 280);
LABEL_9:
    unint64_t v9 = *(void *)(a1 + 288);
    if (v7 < v9)
    {
      if (v7)
      {
        uint64_t v10 = a2[1];
        *(void *)unint64_t v7 = *a2;
        *(void *)(v7 + 8) = v10;
        if (v10) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
        }
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
      }
      uint64_t v11 = v7 + 80;
      goto LABEL_34;
    }
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - v4) >> 4);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x333333333333333) {
      abort();
    }
    unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - v4) >> 4);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x199999999999999) {
      uint64_t v15 = 0x333333333333333;
    }
    else {
      uint64_t v15 = v13;
    }
    if (v15)
    {
      uint64_t v16 = 80 * v15;
      uint64_t v17 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 296) + 16))(*(void *)(a1 + 296), 80 * v15, 8);
      uint64_t v18 = v17 + 80 * v12;
      uint64_t v15 = v17 + v16;
      if (v17)
      {
        uint64_t v19 = a2[1];
        *(void *)uint64_t v18 = *a2;
        *(void *)(v18 + 8) = v19;
        if (v19) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v20 = (_OWORD *)(v17 + 80 * v12);
        v20[3] = 0u;
        v20[4] = 0u;
        v20[1] = 0u;
        void v20[2] = 0u;
      }
    }
    else
    {
      uint64_t v18 = 80 * v12;
    }
    uint64_t v11 = v18 + 80;
    uint64_t v21 = *(void *)(a1 + 272);
    uint64_t v22 = *(void *)(a1 + 280);
    if (v22 == v21)
    {
      *(void *)(a1 + 272) = v18;
      *(void *)(a1 + 280) = v11;
      uint64_t v25 = *(void *)(a1 + 288);
      *(void *)(a1 + 288) = v15;
      if (!v22) {
        goto LABEL_34;
      }
    }
    else
    {
      do
      {
        long long v23 = *(_OWORD *)(v22 - 80);
        v22 -= 80;
        *(_OWORD *)(v18 - 80) = v23;
        v18 -= 80;
        *(void *)uint64_t v22 = 0;
        *(void *)(v22 + 8) = 0;
        *(_OWORD *)(v18 + 16) = *(_OWORD *)(v22 + 16);
        *(void *)(v22 + 16) = 0;
        *(void *)(v22 + 24) = 0;
        *(_OWORD *)(v18 + 32) = *(_OWORD *)(v22 + 32);
        *(void *)(v22 + 32) = 0;
        *(void *)(v22 + 40) = 0;
        *(_OWORD *)(v18 + 48) = *(_OWORD *)(v22 + 48);
        *(void *)(v22 + 48) = 0;
        *(void *)(v22 + 56) = 0;
        *(_OWORD *)(v18 + 64) = *(_OWORD *)(v22 + 64);
        *(void *)(v22 + 64) = 0;
        *(void *)(v22 + 72) = 0;
      }
      while (v22 != v21);
      uint64_t v22 = *(void *)(a1 + 272);
      uint64_t v24 = *(void *)(a1 + 280);
      *(void *)(a1 + 272) = v18;
      *(void *)(a1 + 280) = v11;
      uint64_t v25 = *(void *)(a1 + 288);
      *(void *)(a1 + 288) = v15;
      while (v24 != v22)
        md::SharedDeviceResources::~SharedDeviceResources((md::SharedDeviceResources *)(v24 - 80));
      if (!v22) {
        goto LABEL_34;
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 296) + 40))(*(void *)(a1 + 296), v22, v25 - v22);
LABEL_34:
    *(void *)(a1 + 280) = v11;
    return v8;
  }
  return 0xFFFFFFFFLL;
}

uint64_t geo::codec::featureStyleAttributesCompare(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (*a1 == *a2) {
    return 0;
  }
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  if (!v3) {
    return 1;
  }
  uint64_t v4 = *(unsigned __int8 *)(v2 + 33);
  unsigned int v5 = *(unsigned __int8 *)(v3 + 33);
  BOOL v6 = v4 >= v5;
  if (v4 != v5) {
    goto LABEL_15;
  }
  if (*(unsigned char *)(v2 + 33))
  {
    uint64_t result = memcmp(*(const void **)v2, *(const void **)v3, 8 * v4);
    if (result) {
      return result;
    }
  }
  uint64_t v8 = *(unsigned __int8 *)(v2 + 32);
  unsigned int v9 = *(unsigned __int8 *)(v3 + 32);
  BOOL v6 = v8 >= v9;
  if (v8 != v9)
  {
LABEL_15:
    if (v6) {
      return 1;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  if (!*(unsigned char *)(v2 + 32)) {
    return 0;
  }
  uint64_t v10 = *(const void **)(v2 + 24);
  uint64_t v11 = *(const void **)(v3 + 24);
  return memcmp(v10, v11, 12 * v8);
}

void md::UniLineLabelFeature::mergeAdditionalAttributes(const FeatureStyleAttributes **a1, uint64_t a2, const FeatureStyleAttributes *a3, uint64_t a4)
{
  if (a2)
  {
    BOOL v6 = operator new(8uLL);
    *(void *)BOOL v6 = 0x100010002;
    unint64_t v7 = (char *)operator new(0x40uLL);
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = 0;
    *(void *)unint64_t v7 = &unk_1EF57F680;
    FeatureStyleAttributes::FeatureStyleAttributes((FeatureStyleAttributes *)(v7 + 24), a3);
    uint64_t v8 = v7[57];
    uint64_t v9 = *((void *)v7 + 3);
    if (v7[57])
    {
      int v10 = *v6;
      if (v8 >= 0x20)
      {
        uint64_t v11 = 0;
        uint64_t v15 = (int *)*((void *)v7 + 3);
        while (1)
        {
          int v16 = *v15;
          v15 += 2;
          if (v16 == v10) {
            break;
          }
          if (v8 == ++v11) {
            goto LABEL_16;
          }
        }
      }
      else
      {
        uint64_t v11 = 0;
        unint64_t v12 = (int *)*((void *)v7 + 3);
        while (1)
        {
          int v13 = *v12;
          v12 += 2;
          if (v13 == v10) {
            break;
          }
          if (v8 == ++v11) {
            goto LABEL_7;
          }
        }
      }
      *(_DWORD *)(v9 + 8 * v11 + 4) = v6[1];
    }
    else
    {
LABEL_7:
      *(void *)(v9 + 8 * v8) = *(void *)v6;
      unsigned __int8 v14 = v7[57] + 1;
      v7[57] = v14;
      qsort(*((void **)v7 + 3), v14, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
    }
LABEL_16:
    *a1 = (const FeatureStyleAttributes *)(v7 + 24);
    a1[1] = (const FeatureStyleAttributes *)v7;
    operator delete(v6);
  }
  else
  {
    *a1 = a3;
    a1[1] = (const FeatureStyleAttributes *)a4;
    if (a4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a4 + 8), 1uLL, memory_order_relaxed);
    }
  }
}

void sub_1A186C548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'md::UniLineLabelFeature::textIndexForFeature(uint64_t a1, uint64_t *a2, int a3)
{
  return md::UniLineLabelFeature::textIndexForFeature(a1 - 440, a2, a3);
}

uint64_t geo::codec::VectorTile::lines(geo::codec::VectorTile *this)
{
  return *((void *)this + 4);
}

uint64_t md::LabelLineSegmentImpl::points(md::LabelLineSegmentImpl *this)
{
  uint64_t v3 = (void *)((char *)this + 48);
  uint64_t result = *((void *)this + 6);
  unint64_t v4 = *((unsigned __int16 *)v3 - 1);
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3[1] - result) >> 4);
  if (v4 <= v5)
  {
    if (v4 < v5) {
      *((void *)this + 7) = result + 48 * *((unsigned __int16 *)v3 - 1);
    }
  }
  else
  {
    std::vector<md::LabelPoint,geo::StdAllocator<md::LabelPoint,mdm::Allocator>>::__append((uint64_t)v3, v4 - v5);
    return *v3;
  }
  return result;
}

{
  return *((void *)this + 6);
}

uint64_t std::vector<md::LabelPoint,geo::StdAllocator<md::LabelPoint,mdm::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  uint64_t v5 = *(void *)(result + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 4) >= a2)
  {
    if (a2)
    {
      uint64_t v10 = v4 + 48 * a2;
      uint64_t v11 = 48 * a2;
      do
      {
        if (v4)
        {
          *(_OWORD *)(v4 + 16) = 0uLL;
          *(_OWORD *)(v4 + 32) = 0uLL;
          *(_OWORD *)uint64_t v4 = 0uLL;
          *(_DWORD *)(v4 + 40) = 2139095039;
        }
        v4 += 48;
        v11 -= 48;
      }
      while (v11);
      uint64_t v4 = v10;
    }
    *(void *)(result + 8) = v4;
  }
  else
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *(void *)result) >> 4);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x555555555555555) {
      abort();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *(void *)result) >> 4);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x2AAAAAAAAAAAAAALL) {
      uint64_t v9 = 0x555555555555555;
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9) {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 48 * v9, 8);
    }
    else {
      uint64_t result = 0;
    }
    unint64_t v12 = result + 48 * v6;
    uint64_t v13 = 48 * a2;
    unint64_t v14 = v12 + 48 * a2;
    unint64_t v15 = v12;
    do
    {
      if (v15)
      {
        *(_OWORD *)(v15 + 16) = 0uLL;
        *(_OWORD *)(v15 + 32) = 0uLL;
        *(_OWORD *)unint64_t v15 = 0uLL;
        *(_DWORD *)(v15 + 40) = 2139095039;
      }
      v15 += 48;
      v13 -= 48;
    }
    while (v13);
    uint64_t v17 = *(void *)v3;
    uint64_t v16 = *(void *)(v3 + 8);
    if (v16 != *(void *)v3)
    {
      do
      {
        long long v18 = *(_OWORD *)(v16 - 48);
        *(void *)(v12 - 32) = *(void *)(v16 - 32);
        *(_OWORD *)(v12 - 48) = v18;
        *(_OWORD *)(v12 - 24) = *(_OWORD *)(v16 - 24);
        int v19 = *(_DWORD *)(v16 - 8);
        *(_DWORD *)(v12 - 5) = *(_DWORD *)(v16 - 5);
        *(_DWORD *)(v12 - 8) = v19;
        v12 -= 48;
        v16 -= 48;
      }
      while (v16 != v17);
      uint64_t v16 = *(void *)v3;
    }
    *(void *)uint64_t v3 = v12;
    *(void *)(v3 + 8) = v14;
    *(void *)(v3 + 16) = result + 48 * v9;
    if (v16)
    {
      uint64_t v20 = *(uint64_t (**)(void))(**(void **)(v3 + 24) + 40);
      return v20();
    }
  }
  return result;
}

uint64_t md::LabelLineSegmentImpl::vertexInfos(md::LabelLineSegmentImpl *this)
{
  unint64_t v2 = *((unsigned __int16 *)this + 23);
  uint64_t v5 = (char *)this + 80;
  uint64_t result = *((void *)this + 10);
  uint64_t v4 = (_DWORD *)*((void *)v5 + 1);
  unint64_t v6 = (char *)v4 - result;
  unint64_t v7 = ((uint64_t)v4 - result) >> 2;
  unint64_t v8 = v2 - v7;
  if (v2 <= v7)
  {
    if (v2 < v7) {
      *((void *)this + 11) = result + 4 * v2;
    }
  }
  else
  {
    uint64_t v9 = *((void *)this + 12);
    if (v8 <= (v9 - (uint64_t)v4) >> 2)
    {
      uint64_t v17 = &v4[v8];
      uint64_t v18 = 4 * v2 - 4 * v7;
      do
      {
        if (v4) {
          *uint64_t v4 = 32639;
        }
        ++v4;
        v18 -= 4;
      }
      while (v18);
      *((void *)this + 11) = v17;
    }
    else
    {
      unint64_t v10 = (v9 - result) >> 1;
      if (v10 <= v2) {
        unint64_t v10 = v2;
      }
      if ((unint64_t)(v9 - result) >= 0x7FFFFFFFFFFFFFFCLL) {
        uint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v11 = v10;
      }
      uint64_t v12 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 13) + 16))(*((void *)this + 13), 4 * v11, 1);
      uint64_t v13 = (_DWORD *)(v12 + 4 * v7);
      uint64_t v14 = v12 + 4 * v2;
      uint64_t v15 = 4 * v2 - 4 * v7;
      uint64_t v16 = v13;
      do
      {
        if (v16) {
          _DWORD *v16 = 32639;
        }
        ++v16;
        v15 -= 4;
      }
      while (v15);
      uint64_t v19 = v12 + 4 * v11;
      uint64_t v21 = *((void *)this + 10);
      uint64_t v20 = *((void *)this + 11);
      if (v20 != v21)
      {
        unint64_t v22 = v20 - v21 - 4;
        if (v22 < 0x2C) {
          goto LABEL_32;
        }
        if ((unint64_t)(v20 - (void)&v6[v12]) < 0x20) {
          goto LABEL_32;
        }
        uint64_t v23 = (v22 >> 2) + 1;
        uint64_t v24 = (_OWORD *)(v12 + 4 * v7 - 16);
        uint64_t v25 = (long long *)(v20 - 16);
        uint64_t v26 = v23 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v27 = *v25;
          *(v24 - 1) = *(v25 - 1);
          _OWORD *v24 = v27;
          v24 -= 2;
          v25 -= 2;
          v26 -= 8;
        }
        while (v26);
        v13 -= v23 & 0x7FFFFFFFFFFFFFF8;
        v20 -= 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
        if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_32:
          do
          {
            int v28 = *(_DWORD *)(v20 - 4);
            v20 -= 4;
            *--uint64_t v13 = v28;
          }
          while (v20 != v21);
        }
        uint64_t v20 = *((void *)this + 10);
      }
      *((void *)this + 10) = v13;
      *((void *)this + 11) = v14;
      uint64_t v29 = *((void *)this + 12);
      *((void *)this + 12) = v19;
      if (v20) {
        (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 13) + 40))(*((void *)this + 13), v20, v29 - v20);
      }
    }
    return *((void *)this + 10);
  }
  return result;
}

uint64_t md::FixedLabelLineSegment<4ul>::points(uint64_t a1)
{
  return a1 + 48;
}

{
  return a1 + 48;
}

uint64_t md::FixedLabelLineSegment<4ul>::vertexInfos(uint64_t a1)
{
  return a1 + 240;
}

uint64_t std::vector<md::LabelLineZSet,geo::StdAllocator<md::LabelLineZSet,mdm::Allocator>>::__emplace_back_slow_path<md::LabelLineStore *,unsigned char const&,unsigned char const&,md::LabelLineSource const&>(uint64_t *a1, uint64_t *a2, char *a3, char *a4, char *a5)
{
  uint64_t v5 = 0x249249249249249;
  uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) > 0x249249249249249) {
    abort();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4) > v7) {
    unint64_t v7 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 4)) < 0x124924924924924) {
    uint64_t v5 = v7;
  }
  if (v5)
  {
    uint64_t v13 = 112 * v5;
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], 112 * v5, 8);
    uint64_t v15 = v14 + 112 * v6;
    uint64_t v16 = v14 + v13;
    if (v14) {
      uint64_t v15 = md::LabelLineZSet::LabelLineZSet(v15, *a2, *a3, *a4, *a5);
    }
  }
  else
  {
    uint64_t v15 = 16 * ((a1[1] - *a1) >> 4);
    uint64_t v16 = 0;
  }
  uint64_t v17 = v15 + 112;
  uint64_t v18 = *a1;
  uint64_t v19 = a1[1];
  if (v19 == *a1)
  {
    *a1 = v15;
    a1[1] = v17;
    uint64_t v26 = a1[2];
    a1[2] = v16;
    if (!v19) {
      return v17;
    }
    goto LABEL_16;
  }
  uint64_t v20 = 0;
  do
  {
    uint64_t v21 = v15 + v20;
    uint64_t v22 = v19 + v20;
    long long v23 = *(_OWORD *)(v19 + v20 - 112);
    *(void *)(v21 - 88) = 0;
    *(void *)(v21 - 80) = 0;
    *(void *)(v21 - 96) = 0;
    *(_OWORD *)(v21 - 112) = v23;
    *(void *)(v21 - 72) = *(void *)(v19 + v20 - 72);
    *(_OWORD *)(v21 - 96) = *(_OWORD *)(v19 + v20 - 96);
    *(void *)(v21 - 80) = *(void *)(v19 + v20 - 80);
    *(void *)(v22 - 96) = 0;
    *(void *)(v22 - 88) = 0;
    *(void *)(v22 - 80) = 0;
    *(void *)(v21 - 64) = 0;
    *(void *)(v21 - 56) = 0;
    *(void *)(v21 - 48) = 0;
    *(void *)(v21 - 40) = *(void *)(v19 + v20 - 40);
    *(_OWORD *)(v21 - 64) = *(_OWORD *)(v19 + v20 - 64);
    *(void *)(v21 - 48) = *(void *)(v19 + v20 - 48);
    *(void *)(v22 - 64) = 0;
    *(void *)(v22 - 56) = 0;
    *(void *)(v22 - 48) = 0;
    *(void *)(v21 - 32) = 0;
    *(void *)(v21 - 24) = 0;
    *(void *)(v21 - 16) = 0;
    *(void *)(v21 - 8) = *(void *)(v19 + v20 - 8);
    *(_OWORD *)(v21 - 32) = *(_OWORD *)(v19 + v20 - 32);
    *(void *)(v21 - 16) = *(void *)(v19 + v20 - 16);
    *(void *)(v22 - 32) = 0;
    *(void *)(v22 - 24) = 0;
    *(void *)(v22 - 16) = 0;
    v20 -= 112;
  }
  while (v19 + v20 != v18);
  uint64_t v24 = v15 + v20;
  uint64_t v19 = *a1;
  uint64_t v25 = a1[1];
  *a1 = v24;
  a1[1] = v17;
  uint64_t v26 = a1[2];
  a1[2] = v16;
  while (v25 != v19)
    md::LabelLineZSet::~LabelLineZSet((md::LabelLineZSet *)(v25 - 112));
  if (v19) {
LABEL_16:
  }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v19, v26 - v19);
  return v17;
}

uint64_t md::LabelLineZSet::LabelLineZSet(uint64_t result, uint64_t a2, char a3, char a4, char a5)
{
  *(unsigned char *)uint64_t result = a4;
  *(unsigned char *)(result + 1) = a3;
  *(unsigned char *)(result + 2) = a5;
  *(unsigned char *)(result + 3) = *(unsigned char *)(a2 + 122);
  *(unsigned char *)(result + 4) = *(unsigned char *)(a2 + 290);
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  uint64_t v5 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    uint64_t v12 = result;
    uint64_t v5 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    int v7 = v6;
    uint64_t result = v12;
    if (v7) {
      operator new();
    }
  }
  *(void *)(result + 40) = *((void *)v5 + 91);
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = 0;
  {
    uint64_t v13 = result;
    uint64_t v5 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    int v9 = v8;
    uint64_t result = v13;
    if (v9) {
      operator new();
    }
  }
  *(void *)(result + 72) = *((void *)v5 + 91);
  *(void *)(result + 80) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 96) = 0;
  {
    uint64_t v14 = result;
    uint64_t v5 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    int v11 = v10;
    uint64_t result = v14;
    if (v11) {
      operator new();
    }
  }
  *(void *)(result + 104) = *((void *)v5 + 91);
  return result;
}

uint64_t geo::codec::VectorTile::junctions(geo::codec::VectorTile *this)
{
  return *((void *)this + 86);
}

uint64_t geo::codec::VectorTile::sortedPointsOnRoad(geo::codec::VectorTile *this)
{
  return *((void *)this + 91);
}

uint64_t geo::codec::VectorTile::pointsOnRoad(geo::codec::VectorTile *this)
{
  return *((void *)this + 89);
}

void md::SharedDeviceResources::~SharedDeviceResources(md::SharedDeviceResources *this)
{
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 7);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 7);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 3);
    if (!v5) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 3);
    if (!v5) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_13:
  int v6 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t md::FixedLabelLineSegment<5ul>::points(uint64_t a1)
{
  return a1 + 48;
}

{
  return a1 + 48;
}

uint64_t md::FixedLabelLineSegment<5ul>::vertexInfos(uint64_t a1)
{
  return a1 + 288;
}

uint64_t geo::codec::VectorTile::debugByteCount(geo::codec::VectorTile *this)
{
  return *((void *)this + 237);
}

void geo::codec::VectorTile::debugInfoPerChapterAndChapterDetails(geo::codec::VectorTile *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 486);
  unint64_t prime = *((void *)this + 240);
  if (prime == 1)
  {
    unint64_t prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a2, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    unint64_t prime = std::__next_prime(*((void *)this + 240));
    int8x8_t v5 = *(int8x8_t *)(a2 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 24) / *(float *)(a2 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      unint64_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  int v10 = (void *)*((void *)this + 241);
  if (v10)
  {
    int v11 = (void *)(a2 + 16);
    unint64_t v12 = *(void *)(a2 + 8);
    while (1)
    {
      unint64_t v13 = v10[2];
      unint64_t v14 = 0x9DDFEA08EB382D69 * (((8 * v13) + 8) ^ HIDWORD(v13));
      unint64_t v15 = 0x9DDFEA08EB382D69 * (HIDWORD(v13) ^ (v14 >> 47) ^ v14);
      unint64_t v16 = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
      if (v12)
      {
        uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] > 1uLL)
        {
          unint64_t prime = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
          if (v16 >= v12) {
            unint64_t prime = v16 % v12;
          }
        }
        else
        {
          unint64_t prime = v16 & (v12 - 1);
        }
        uint64_t v18 = *(void **)(*(void *)a2 + 8 * prime);
        if (v18)
        {
          uint64_t v19 = (void *)*v18;
          if (v19)
          {
            if (v17.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v21 = v19[1];
                if (v21 == v16)
                {
                  if (v19[2] == v13) {
                    goto LABEL_79;
                  }
                }
                else if ((v21 & (v12 - 1)) != prime)
                {
                  goto LABEL_40;
                }
                uint64_t v19 = (void *)*v19;
                if (!v19) {
                  goto LABEL_40;
                }
              }
            }
            do
            {
              unint64_t v20 = v19[1];
              if (v20 == v16)
              {
                if (v19[2] == v13) {
                  goto LABEL_79;
                }
              }
              else
              {
                if (v20 >= v12) {
                  v20 %= v12;
                }
                if (v20 != prime) {
                  break;
                }
              }
              uint64_t v19 = (void *)*v19;
            }
            while (v19);
          }
        }
      }
LABEL_40:
      uint64_t v22 = operator new(0x28uLL);
      void *v22 = 0;
      v22[1] = v16;
      long long v23 = *((_OWORD *)v10 + 1);
      v22[4] = v10[4];
      *((_OWORD *)v22 + 1) = v23;
      float v24 = (float)(unint64_t)(*(void *)(a2 + 24) + 1);
      float v25 = *(float *)(a2 + 32);
      if (v12 && (float)(v25 * (float)v12) >= v24) {
        goto LABEL_68;
      }
      BOOL v26 = (v12 & (v12 - 1)) != 0;
      if (v12 < 3) {
        BOOL v26 = 1;
      }
      unint64_t v27 = v26 | (2 * v12);
      unint64_t v28 = vcvtps_u32_f32(v24 / v25);
      if (v27 <= v28) {
        size_t v29 = v28;
      }
      else {
        size_t v29 = v27;
      }
      if (v29 == 1)
      {
        size_t v29 = 2;
      }
      else if ((v29 & (v29 - 1)) != 0)
      {
        size_t v29 = std::__next_prime(v29);
        unint64_t v12 = *(void *)(a2 + 8);
      }
      if (v29 > v12) {
        goto LABEL_52;
      }
      if (v29 < v12)
      {
        unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 24) / *(float *)(a2 + 32));
        if (v12 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
        {
          unint64_t v30 = std::__next_prime(v30);
        }
        else
        {
          uint64_t v32 = 1 << -(char)__clz(v30 - 1);
          if (v30 >= 2) {
            unint64_t v30 = v32;
          }
        }
        if (v29 <= v30) {
          size_t v29 = v30;
        }
        if (v29 < v12) {
LABEL_52:
        }
          std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a2, v29);
      }
      unint64_t v12 = *(void *)(a2 + 8);
      unint64_t v33 = v12 - 1;
      if ((v12 & (v12 - 1)) == 0)
      {
        unint64_t prime = v33 & v16;
        uint64_t v34 = *(void *)a2;
        double v35 = *(void **)(*(void *)a2 + 8 * (v33 & v16));
        if (v35) {
          goto LABEL_69;
        }
        goto LABEL_71;
      }
      if (v16 < v12) {
        break;
      }
      unint64_t prime = v16 % v12;
      uint64_t v34 = *(void *)a2;
      double v35 = *(void **)(*(void *)a2 + 8 * (v16 % v12));
      if (v35)
      {
LABEL_69:
        void *v22 = *v35;
        goto LABEL_77;
      }
LABEL_71:
      void *v22 = *v11;
      void *v11 = v22;
      *(void *)(v34 + 8 * prime) = v11;
      if (!*v22) {
        goto LABEL_78;
      }
      unint64_t v36 = *(void *)(*v22 + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v36 >= v12) {
          v36 %= v12;
        }
      }
      else
      {
        v36 &= v12 - 1;
      }
      double v35 = (void *)(*(void *)a2 + 8 * v36);
LABEL_77:
      *double v35 = v22;
LABEL_78:
      ++*(void *)(a2 + 24);
LABEL_79:
      int v10 = (void *)*v10;
      if (!v10) {
        return;
      }
    }
    unint64_t prime = v16;
LABEL_68:
    uint64_t v34 = *(void *)a2;
    double v35 = *(void **)(*(void *)a2 + 8 * prime);
    if (v35) {
      goto LABEL_69;
    }
    goto LABEL_71;
  }
}

void sub_1A186D53C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 16);
  if (v3)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  int8x8_t v5 = *(void **)v1;
  *(void *)uint64_t v1 = 0;
  if (v5) {
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'md::PhysicalLabelFeature::styleIndexForFeature(uint64_t a1, uint64_t a2)
{
  return md::PhysicalLabelFeature::styleIndexForFeature((uint64_t *)(a1 - 440), a2);
}

uint64_t non-virtual thunk to'md::PhysicalLabelFeature::textIndexForFeature(uint64_t a1, uint64_t *a2, int a3)
{
  return md::PhysicalLabelFeature::textIndexForFeature((uint64_t *)(a1 - 440), a2, a3);
}

uint64_t md::PhysicalLabelFeature::styleIndexForFeature(uint64_t *a1, uint64_t a2)
{
  if ((*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1))
  {
    return md::LineLabelFeature::styleIndexForAttributes((uint64_t)a1, a1 + 52);
  }
  else
  {
    int8x8_t v5 = operator new(8uLL);
    *(void *)int8x8_t v5 = 65570;
    BOOL v6 = *(const FeatureStyleAttributes **)(a2 + 24);
    unint64_t v7 = (char *)operator new(0x40uLL);
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = 0;
    *(void *)unint64_t v7 = &unk_1EF57F680;
    FeatureStyleAttributes::FeatureStyleAttributes((FeatureStyleAttributes *)(v7 + 24), v6);
    uint64_t v22 = v7 + 24;
    long long v23 = (std::__shared_weak_count *)v7;
    uint64_t v8 = v7[57];
    uint64_t v9 = *((void *)v7 + 3);
    if (v7[57])
    {
      int v10 = *v5;
      if (v8 >= 0x20)
      {
        uint64_t v11 = 0;
        unint64_t v15 = (int *)*((void *)v7 + 3);
        while (1)
        {
          int v16 = *v15;
          v15 += 2;
          if (v16 == v10) {
            break;
          }
          if (v8 == ++v11) {
            goto LABEL_16;
          }
        }
      }
      else
      {
        uint64_t v11 = 0;
        unint64_t v12 = (int *)*((void *)v7 + 3);
        while (1)
        {
          int v13 = *v12;
          v12 += 2;
          if (v13 == v10) {
            break;
          }
          if (v8 == ++v11) {
            goto LABEL_10;
          }
        }
      }
      *(_DWORD *)(v9 + 8 * v11 + 4) = v5[1];
    }
    else
    {
LABEL_10:
      *(void *)(v9 + 8 * v8) = *(void *)v5;
      unsigned __int8 v14 = v7[57] + 1;
      v7[57] = v14;
      qsort(*((void **)v7 + 3), v14, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
    }
LABEL_16:
    unint64_t v20 = v7 + 24;
    uint64_t v21 = (std::__shared_weak_count *)v7;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 1, 1uLL, memory_order_relaxed);
    uint64_t v17 = md::LineLabelFeature::styleIndexForAttributes((uint64_t)a1, (uint64_t *)&v20);
    uint64_t v18 = v21;
    if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    uint64_t v19 = v23;
    if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    operator delete(v5);
    return v17;
  }
}

void sub_1A186D7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t md::CompositeLabelPart::clearAnimationIDs(uint64_t this)
{
  *(unsigned char *)(this + 563) = -1;
  uint64_t v1 = *(uint64_t **)(this + 576);
  for (uint64_t i = *(uint64_t **)(this + 584); v1 != i; this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 184))(v3))
    uint64_t v3 = *v1++;
  return this;
}

uint64_t md::LabelPart::clearAnimationIDs(uint64_t this)
{
  *(unsigned char *)(this + 563) = -1;
  return this;
}

void __Block_byref_object_dispose__8665(uint64_t a1)
{
}

uint64_t __copy_helper_block_8_40c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 64);
  if (result)
  {
    if (result == a2 + 40)
    {
      *(void *)(a1 + 64) = a1 + 40;
      uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a2 + 64) + 24);
      return v4();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      *(void *)(a1 + 64) = result;
    }
  }
  else
  {
    *(void *)(a1 + 64) = 0;
  }
  return result;
}

void md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::clearScene(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 52) == 1)
  {
    long long v10 = *(_OWORD *)(a1 + 272);
    (*(void (**)(uint64_t, long long *))(*(void *)a1 + 120))(a1, &v10);
  }
  if (*(void *)(a1 + 112))
  {
    unint64_t v2 = *(unsigned char **)(a1 + 104);
    if (v2)
    {
      do
      {
        if (v2[112]) {
          v2[112] = 0;
        }
        uint64_t v8 = *(unsigned char **)v2;
        uint64_t v9 = (void *)*((void *)v2 + 4);
        if (v9 != *((void **)v2 + 6)) {
          free(v9);
        }
        operator delete(v2);
        unint64_t v2 = v8;
      }
      while (v8);
    }
    *(void *)(a1 + 104) = 0;
    uint64_t v3 = *(void *)(a1 + 96);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*(void *)(a1 + 88) + 8 * i) = 0;
    }
    *(void *)(a1 + 112) = 0;
  }
  *(void *)(a1 + 280) = *(void *)(a1 + 272);
  geo::Pool<md::DaVinciGroundRenderable>::disposeElements(a1 + 224);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 136));
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 160));
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = 0;
  int8x8_t v5 = (void *)(a1 + 184);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  unint64_t v7 = *(void **)(a1 + 208);
  BOOL v6 = (void *)(a1 + 208);
  *(v6 - 4) = v5;
  *int8x8_t v5 = 0;
  *(v6 - 2) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(v7);
  *(v6 - 1) = v6;
  void *v6 = 0;
  v6[1] = 0;
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::OverlayTileData>>::clearScene(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 52) == 1)
  {
    long long v10 = *(_OWORD *)(a1 + 272);
    (*(void (**)(uint64_t, long long *))(*(void *)a1 + 120))(a1, &v10);
  }
  if (*(void *)(a1 + 112))
  {
    unint64_t v2 = *(unsigned char **)(a1 + 104);
    if (v2)
    {
      do
      {
        if (v2[112]) {
          v2[112] = 0;
        }
        uint64_t v8 = *(unsigned char **)v2;
        uint64_t v9 = (void *)*((void *)v2 + 4);
        if (v9 != *((void **)v2 + 6)) {
          free(v9);
        }
        operator delete(v2);
        unint64_t v2 = v8;
      }
      while (v8);
    }
    *(void *)(a1 + 104) = 0;
    uint64_t v3 = *(void *)(a1 + 96);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*(void *)(a1 + 88) + 8 * i) = 0;
    }
    *(void *)(a1 + 112) = 0;
  }
  *(void *)(a1 + 280) = *(void *)(a1 + 272);
  geo::Pool<md::MapTileDataRenderable<md::OverlayTileData>>::disposeElements(a1 + 224);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 136));
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 160));
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = 0;
  int8x8_t v5 = (void *)(a1 + 184);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  unint64_t v7 = *(void **)(a1 + 208);
  BOOL v6 = (void *)(a1 + 208);
  *(v6 - 4) = v5;
  *int8x8_t v5 = 0;
  *(v6 - 2) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(v7);
  *(v6 - 1) = v6;
  void *v6 = 0;
  v6[1] = 0;
}

void geo::Pool<md::MapTileDataRenderable<md::OverlayTileData>>::disposeElements(uint64_t a1)
{
  size_t v29 = 0;
  uint64_t v30 = 0;
  unint64_t v28 = &v29;
  unint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = &v29;
      int8x8_t v5 = &v29;
      if (v29)
      {
        BOOL v6 = v29;
        while (1)
        {
          while (1)
          {
            int8x8_t v5 = (uint64_t **)v6;
            unint64_t v7 = v6[4];
            if ((unint64_t)v2 >= v7) {
              break;
            }
            BOOL v6 = *v5;
            uint64_t v4 = v5;
            if (!*v5) {
              goto LABEL_12;
            }
          }
          if (v7 >= (unint64_t)v2) {
            break;
          }
          BOOL v6 = v5[1];
          if (!v6)
          {
            uint64_t v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        uint64_t v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *uint64_t v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *uint64_t v4 = v8;
        if (*v28)
        {
          unint64_t v28 = (uint64_t **)*v28;
          uint64_t v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        uint64_t v3 = ++v30;
        unint64_t v2 = *(void **)(a1 + 40);
      }
      unint64_t v2 = (void *)*v2;
      *(void *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  unint64_t v9 = *(void *)(a1 + 24);
  long long v10 = *(void **)a1;
  uint64_t v11 = (void *)(a1 + 8);
  BOOL v12 = v3 == *(void *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11) {
      goto LABEL_47;
    }
    goto LABEL_49;
  }
  uint64_t v14 = 1;
  do
  {
    if (v14)
    {
      unint64_t v15 = 0;
      uint64_t v16 = v10[4];
      do
      {
        uint64_t v17 = (void (***)(void))(v16 + 400 * v15);
        uint64_t v18 = v29;
        if (!v29) {
          goto LABEL_28;
        }
        uint64_t v19 = &v29;
        do
        {
          unint64_t v20 = v18;
          uint64_t v21 = v19;
          unint64_t v22 = v18[4];
          long long v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            long long v23 = (uint64_t **)v20;
            uint64_t v19 = (uint64_t **)v20;
          }
          uint64_t v18 = *v23;
        }
        while (v18);
        if (v19 == &v29) {
          goto LABEL_28;
        }
        if (v22 < (unint64_t)v17) {
          unint64_t v20 = (uint64_t *)v21;
        }
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          unint64_t v9 = *(void *)(a1 + 24);
        }
        ++v15;
        uint64_t v14 = v9;
      }
      while (v15 < v9);
    }
    float v24 = (void *)v10[1];
    if (v24)
    {
      do
      {
        float v25 = v24;
        float v24 = (void *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        float v25 = (void *)v10[2];
        BOOL v12 = *v25 == (void)v10;
        long long v10 = v25;
      }
      while (!v12);
    }
    long long v10 = v25;
  }
  while (v25 != v11);
  long long v10 = *(void **)a1;
  if (*(void **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      BOOL v26 = (void *)v10[1];
      if (v26)
      {
        do
        {
          unint64_t v27 = v26;
          BOOL v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          unint64_t v27 = (void *)v10[2];
          BOOL v12 = *v27 == (void)v10;
          long long v10 = v27;
        }
        while (!v12);
      }
      long long v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v11;
  *(void *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_1A186DE78(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::clearScene(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 52) == 1)
  {
    long long v10 = *(_OWORD *)(a1 + 272);
    (*(void (**)(uint64_t, long long *))(*(void *)a1 + 120))(a1, &v10);
  }
  if (*(void *)(a1 + 112))
  {
    unint64_t v2 = *(unsigned char **)(a1 + 104);
    if (v2)
    {
      do
      {
        if (v2[112]) {
          v2[112] = 0;
        }
        uint64_t v8 = *(unsigned char **)v2;
        unint64_t v9 = (void *)*((void *)v2 + 4);
        if (v9 != *((void **)v2 + 6)) {
          free(v9);
        }
        operator delete(v2);
        unint64_t v2 = v8;
      }
      while (v8);
    }
    *(void *)(a1 + 104) = 0;
    uint64_t v3 = *(void *)(a1 + 96);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*(void *)(a1 + 88) + 8 * i) = 0;
    }
    *(void *)(a1 + 112) = 0;
  }
  *(void *)(a1 + 280) = *(void *)(a1 + 272);
  geo::Pool<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::disposeElements(a1 + 224);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 136));
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 160));
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = 0;
  int8x8_t v5 = (void *)(a1 + 184);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  unint64_t v7 = *(void **)(a1 + 208);
  BOOL v6 = (void *)(a1 + 208);
  *(v6 - 4) = v5;
  *int8x8_t v5 = 0;
  *(v6 - 2) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(v7);
  *(v6 - 1) = v6;
  void *v6 = 0;
  v6[1] = 0;
}

void md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::PolygonTileData>>::clearScene(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 52) == 1)
  {
    long long v10 = *(_OWORD *)(a1 + 272);
    (*(void (**)(uint64_t, long long *))(*(void *)a1 + 120))(a1, &v10);
  }
  if (*(void *)(a1 + 112))
  {
    unint64_t v2 = *(unsigned char **)(a1 + 104);
    if (v2)
    {
      do
      {
        if (v2[112]) {
          v2[112] = 0;
        }
        uint64_t v8 = *(unsigned char **)v2;
        unint64_t v9 = (void *)*((void *)v2 + 4);
        if (v9 != *((void **)v2 + 6)) {
          free(v9);
        }
        operator delete(v2);
        unint64_t v2 = v8;
      }
      while (v8);
    }
    *(void *)(a1 + 104) = 0;
    uint64_t v3 = *(void *)(a1 + 96);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*(void *)(a1 + 88) + 8 * i) = 0;
    }
    *(void *)(a1 + 112) = 0;
  }
  *(void *)(a1 + 280) = *(void *)(a1 + 272);
  geo::Pool<md::MapTileDataRenderable<md::PolygonTileData>>::disposeElements(a1 + 224);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 136));
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 160));
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = 0;
  int8x8_t v5 = (void *)(a1 + 184);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  unint64_t v7 = *(void **)(a1 + 208);
  BOOL v6 = (void *)(a1 + 208);
  *(v6 - 4) = v5;
  *int8x8_t v5 = 0;
  *(v6 - 2) = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(v7);
  *(v6 - 1) = v6;
  void *v6 = 0;
  v6[1] = 0;
}

void **md::CartographicTiledRenderLayer<md::MapTileDataRenderable<md::VenueTileData>>::_updateLayerDataInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 128);
  long long v5 = *(_OWORD *)(a1 + 128);
  unint64_t v7 = (void *)(a1 + 160);
  uint64_t v6 = *(void *)(a1 + 160);
  *(void *)(a1 + 136) = v6;
  uint64_t v8 = a1 + 136;
  *(void *)(a1 + 128) = *(void *)(a1 + 152);
  *(_OWORD *)(a1 + 152) = v5;
  uint64_t v9 = *(void *)(a1 + 144);
  uint64_t v10 = *(void *)(a1 + 168);
  *(void *)(a1 + 144) = v10;
  *(void *)(a1 + 168) = v9;
  uint64_t v11 = (uint64_t *)(v6 + 16);
  if (!v10) {
    uint64_t v11 = (uint64_t *)(a1 + 128);
  }
  uint64_t *v11 = v8;
  BOOL v12 = (void *)(*v7 + 16);
  if (!v9) {
    BOOL v12 = (void *)(a1 + 152);
  }
  uint64_t v31 = a1 + 160;
  void *v12 = v7;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)v8);
  *uint64_t v4 = v8;
  *(void *)uint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  int v13 = *(unsigned __int16 **)(v8 + 184);
  for (uint64_t i = *(unsigned __int16 **)(v8 + 192); v13 != i; ++v13)
  {
    int v16 = *v13;
    uint64_t v17 = *a2;
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
    }
    uint64_t v18 = *(unsigned __int16 **)(v17 + 48);
    uint64_t v19 = *(unsigned __int16 **)(v17 + 56);
    if (v18 == v19) {
      goto LABEL_7;
    }
    unint64_t v20 = *(unsigned __int16 **)(v17 + 48);
    while (*v20 != v16)
    {
      v20 += 16;
      if (v20 == v19) {
        goto LABEL_7;
      }
    }
    if (v20 == v19)
    {
LABEL_7:
      unint64_t v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v18 != v16)
      {
        v18 += 16;
        if (v18 == v19)
        {
          uint64_t v18 = *(unsigned __int16 **)(v17 + 56);
          break;
        }
      }
      unint64_t v15 = (uint64_t *)(v18 + 4);
    }
    std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v4, (void *)*v15, v15 + 1);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  *(void *)(a1 + 176) = a1 + 184;
  uint64_t v21 = (void *)(a1 + 176);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = 0;
  unint64_t v22 = (void *)(a1 + 208);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 208));
  *(void *)(a1 + 200) = a1 + 208;
  long long v23 = (void *)(a1 + 200);
  void *v22 = 0;
  void v23[2] = 0;
  uint64_t v24 = *(v23 - 9);
  uint64_t v25 = *(v23 - 6);
  uint64_t v26 = *v21;
  uint64_t v37 = v8;
  uint64_t v38 = v24;
  uint64_t v35 = v31;
  uint64_t v36 = v25;
  unint64_t v33 = v21;
  uint64_t v34 = v26;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v32, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v33);
  uint64_t v27 = *(v23 - 6);
  uint64_t v28 = *(v23 - 9);
  uint64_t v29 = *v23;
  uint64_t v37 = v31;
  uint64_t v38 = v27;
  uint64_t v35 = v8;
  uint64_t v36 = v28;
  unint64_t v33 = v23;
  uint64_t v34 = v29;
  return std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v32, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v33);
}

void **md::PairedTiledRenderLayer<md::ElevatedPolygonRenderable>::_updateLayerDataInfo(uint64_t a1, uint64_t *a2)
{
  md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::_updateLayerDataInfo((uint64_t *)a1, a2);
  uint64_t v4 = (uint64_t *)(a1 + 352);
  long long v5 = (void *)(a1 + 376);
  uint64_t v6 = a1 + 360;
  long long v7 = *(_OWORD *)(a1 + 352);
  uint64_t v8 = *(void *)(a1 + 384);
  uint64_t v9 = *(void *)(a1 + 392);
  *(void *)(a1 + 352) = *(void *)(a1 + 376);
  *(void *)(a1 + 360) = v8;
  *(_OWORD *)(a1 + 376) = v7;
  uint64_t v10 = *(void *)(a1 + 368);
  *(void *)(a1 + 368) = v9;
  *(void *)(a1 + 392) = v10;
  uint64_t v11 = (void *)(v8 + 16);
  if (!v9) {
    uint64_t v11 = (void *)(a1 + 352);
  }
  void *v11 = v6;
  if (v10) {
    long long v5 = (void *)(*(void *)(a1 + 384) + 16);
  }
  *long long v5 = a1 + 384;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 360));
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 352) = v6;
  int v12 = *(unsigned __int16 *)(a1 + 450);
  uint64_t v13 = *a2;
  {
    qword_1EB3176C0 = 0;
    qword_1EB3176B8 = 0;
    md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
    __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
  }
  uint64_t v14 = *(unsigned __int16 **)(v13 + 48);
  unint64_t v15 = *(unsigned __int16 **)(v13 + 56);
  int v16 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v14 != v15)
  {
    uint64_t v17 = *(unsigned __int16 **)(v13 + 48);
    while (*v17 != v12)
    {
      v17 += 16;
      if (v17 == v15) {
        goto LABEL_17;
      }
    }
    if (v17 == v15)
    {
      int v16 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v14 != v12)
      {
        v14 += 16;
        if (v14 == v15)
        {
          uint64_t v14 = *(unsigned __int16 **)(v13 + 56);
          break;
        }
      }
      int v16 = (uint64_t *)(v14 + 4);
    }
  }
LABEL_17:
  std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v4, (void *)*v16, v16 + 1);
  return md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::LayerDataInfo::update(v4);
}

uint64_t md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::updateVisibleMapData(unint64_t *a1, uint64_t a2)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void **)(a2 + 8);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_24;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v5 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v7 = 0x99BED48DEFBBD82BLL % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_24;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_24;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0x99BED48DEFBBD82BLL)
      {
        if (v9[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_22;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_24;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0x99BED48DEFBBD82BLL) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_24;
    }
  }
  if (v9[2] != 0x99BED48DEFBBD82BLL) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) != 0x99BED48DEFBBD82BLL)
  {
LABEL_24:
    uint64_t v14 = 0;
    goto LABEL_25;
  }
  uint64_t v14 = *(void *)(v13 + 32);
LABEL_25:
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 144))(a1, v14);
  if ((*(uint64_t (**)(unint64_t *))(*a1 + 200))(a1)) {
    goto LABEL_153;
  }
  unint64_t v15 = *(void **)(a2 + 8);
  int8x8_t v16 = (int8x8_t)v15[1];
  if (!*(void *)&v16) {
    goto LABEL_153;
  }
  uint8x8_t v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    unint64_t v18 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v16 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v18 = 0x99BED48DEFBBD82BLL % *(void *)&v16;
    }
  }
  else
  {
    unint64_t v18 = (*(void *)&v16 - 1) & 0x99BED48DEFBBD82BLL;
  }
  uint64_t v19 = *(void **)(*v15 + 8 * v18);
  if (!v19) {
    goto LABEL_153;
  }
  unint64_t v20 = (void *)*v19;
  if (!v20) {
    goto LABEL_153;
  }
  if (v17.u32[0] < 2uLL)
  {
    uint64_t v21 = *(void *)&v16 - 1;
    while (1)
    {
      uint64_t v23 = v20[1];
      if (v23 == 0x99BED48DEFBBD82BLL)
      {
        if (v20[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_47;
        }
      }
      else if ((v23 & v21) != v18)
      {
        goto LABEL_153;
      }
      unint64_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_153;
      }
    }
  }
  while (2)
  {
    unint64_t v22 = v20[1];
    if (v22 != 0x99BED48DEFBBD82BLL)
    {
      if (v22 >= *(void *)&v16) {
        v22 %= *(void *)&v16;
      }
      if (v22 != v18) {
        goto LABEL_153;
      }
      goto LABEL_36;
    }
    if (v20[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_36:
      unint64_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_153;
      }
      continue;
    }
    break;
  }
LABEL_47:
  uint64_t v24 = v20[5];
  if (*(void *)(v24 + 8) != 0x99BED48DEFBBD82BLL) {
    goto LABEL_153;
  }
  uint64_t v25 = *(void *)(v24 + 32);
  if (!v25) {
    goto LABEL_153;
  }
  (*(void (**)(unint64_t *, uint64_t))(*a1 + 160))(a1, v25);
  uint64_t v26 = (unint64_t *)a1[22];
  if (v26 == a1 + 23) {
    goto LABEL_126;
  }
  while (2)
  {
    int8x8_t v27 = (int8x8_t)a1[12];
    if (!*(void *)&v27) {
      goto LABEL_120;
    }
    unint64_t v28 = v26[4];
    unint64_t v29 = *(void *)(v28 + 120);
    uint8x8_t v30 = (uint8x8_t)vcnt_s8(v27);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      unint64_t v31 = *(void *)(v28 + 120);
      if (v29 >= *(void *)&v27) {
        unint64_t v31 = v29 % *(void *)&v27;
      }
    }
    else
    {
      unint64_t v31 = (*(void *)&v27 - 1) & v29;
    }
    uint64_t v32 = *(void ***)(a1[11] + 8 * v31);
    if (!v32) {
      goto LABEL_120;
    }
    unint64_t v33 = (unint64_t *)*v32;
    if (!*v32) {
      goto LABEL_120;
    }
    if (v30.u32[0] < 2uLL)
    {
      uint64_t v34 = *(void *)&v27 - 1;
      while (1)
      {
        unint64_t v39 = v33[1];
        if (v39 == v29)
        {
          if (*((unsigned __int8 *)v33 + 16) == *(unsigned __int8 *)(v28 + 16)
            && *((unsigned __int16 *)v33 + 12) == *(unsigned __int16 *)(v28 + 24)
            && v33[12] == *(void *)(v28 + 96))
          {
            float v40 = (const void *)v33[4];
            size_t v41 = v33[5] - (void)v40;
            double v42 = *(const void **)(v28 + 32);
            if (v41 == *(void *)(v28 + 40) - (void)v42 && !memcmp(v40, v42, v41)) {
              goto LABEL_80;
            }
          }
        }
        else if ((v39 & v34) != v31)
        {
          goto LABEL_120;
        }
        unint64_t v33 = (unint64_t *)*v33;
        if (!v33) {
          goto LABEL_120;
        }
      }
    }
    while (2)
    {
      unint64_t v35 = v33[1];
      if (v35 != v29)
      {
        if (v35 >= *(void *)&v27) {
          v35 %= *(void *)&v27;
        }
        if (v35 != v31) {
          goto LABEL_120;
        }
        goto LABEL_62;
      }
      if (*((unsigned __int8 *)v33 + 16) != *(unsigned __int8 *)(v28 + 16)
        || *((unsigned __int16 *)v33 + 12) != *(unsigned __int16 *)(v28 + 24)
        || v33[12] != *(void *)(v28 + 96)
        || (uint64_t v36 = (const void *)v33[4],
            size_t v37 = v33[5] - (void)v36,
            uint64_t v38 = *(const void **)(v28 + 32),
            v37 != *(void *)(v28 + 40) - (void)v38)
        || memcmp(v36, v38, v37))
      {
LABEL_62:
        unint64_t v33 = (unint64_t *)*v33;
        if (!v33) {
          goto LABEL_120;
        }
        continue;
      }
      break;
    }
LABEL_80:
    uint64_t v44 = (char *)a1[34];
    double v43 = (char *)a1[35];
    if (v44 != v43)
    {
      while (*(void *)v44 != v33[16])
      {
        v44 += 8;
        if (v44 == v43)
        {
          uint64_t v44 = (char *)a1[35];
          break;
        }
      }
    }
    int64_t v45 = v43 - (v44 + 8);
    if (v43 != v44 + 8) {
      memmove(v44, v44 + 8, v43 - (v44 + 8));
    }
    a1[35] = (unint64_t)&v44[v45];
    double v46 = (void (***)(unint64_t))v33[16];
    if (v46 && a1[30])
    {
      (**v46)(v33[16]);
      void *v46 = (void (**)(unint64_t))a1[33];
      a1[33] = (unint64_t)v46;
    }
    int8x8_t v47 = (int8x8_t)a1[12];
    unint64_t v48 = v33[1];
    uint8x8_t v49 = (uint8x8_t)vcnt_s8(v47);
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.u32[0] > 1uLL)
    {
      if (v48 >= *(void *)&v47) {
        v48 %= *(void *)&v47;
      }
    }
    else
    {
      v48 &= *(void *)&v47 - 1;
    }
    unint64_t v50 = a1[11];
    double v51 = *(unint64_t **)(v50 + 8 * v48);
    do
    {
      double v52 = v51;
      double v51 = (unint64_t *)*v51;
    }
    while (v51 != v33);
    if (v52 == a1 + 13) {
      goto LABEL_106;
    }
    unint64_t v53 = v52[1];
    if (v49.u32[0] > 1uLL)
    {
      if (v53 >= *(void *)&v47) {
        v53 %= *(void *)&v47;
      }
    }
    else
    {
      v53 &= *(void *)&v47 - 1;
    }
    if (v53 != v48)
    {
LABEL_106:
      if (!*v33) {
        goto LABEL_107;
      }
      unint64_t v54 = *(void *)(*v33 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v54 >= *(void *)&v47) {
          v54 %= *(void *)&v47;
        }
      }
      else
      {
        v54 &= *(void *)&v47 - 1;
      }
      if (v54 != v48) {
LABEL_107:
      }
        *(void *)(v50 + 8 * v48) = 0;
    }
    unint64_t v55 = *v33;
    if (*v33)
    {
      unint64_t v56 = *(void *)(v55 + 8);
      if (v49.u32[0] > 1uLL)
      {
        if (v56 >= *(void *)&v47) {
          v56 %= *(void *)&v47;
        }
      }
      else
      {
        v56 &= *(void *)&v47 - 1;
      }
      if (v56 != v48)
      {
        *(void *)(a1[11] + 8 * v56) = v52;
        unint64_t v55 = *v33;
      }
    }
    unint64_t *v52 = v55;
    *unint64_t v33 = 0;
    --a1[14];
    if (*((unsigned char *)v33 + 112)) {
      *((unsigned char *)v33 + 112) = 0;
    }
    float v57 = (void *)v33[4];
    if (v57 != (void *)v33[6]) {
      free(v57);
    }
    operator delete(v33);
LABEL_120:
    uint64_t v58 = (unint64_t *)v26[1];
    if (v58)
    {
      do
      {
        unsigned int v59 = v58;
        uint64_t v58 = (unint64_t *)*v58;
      }
      while (v58);
    }
    else
    {
      do
      {
        unsigned int v59 = (unint64_t *)v26[2];
        BOOL v60 = *v59 == (void)v26;
        uint64_t v26 = v59;
      }
      while (!v60);
    }
    uint64_t v26 = v59;
    if (v59 != a1 + 23) {
      continue;
    }
    break;
  }
LABEL_126:
  (*(void (**)(void **__return_ptr, unint64_t *, uint64_t))(*a1 + 168))(__p, a1, a2);
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 34, a1[35], (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
  if (*((_DWORD *)a1 + 86) == 2)
  {
    float v61 = (void *)a1[34];
    for (uint64_t i = (void *)a1[35]; v61 != i; ++v61)
      (*(void (**)(unint64_t *, uint64_t, void))(*a1 + 184))(a1, v25, *v61);
  }
  float v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
  float v64 = (char *)a1[35];
  float64x2_t v84 = v63;
  double v85 = v64;
  if (*((_DWORD *)a1 + 13) == 1)
  {
    long long v83 = *(_OWORD *)__p;
    long double v65 = (char *)a1[34];
LABEL_131:
    while (v65 != v63)
    {
      if (((*(uint64_t (**)(unint64_t *, uint64_t, void))(*a1 + 136))(a1, a2, *(void *)v65) & 1) == 0)
      {
        long double v66 = v63 - 8;
        while (v66 != v65)
        {
          float v63 = v66;
          int v67 = (*(uint64_t (**)(unint64_t *, uint64_t, void))(*a1 + 136))(a1, a2, *(void *)v66);
          long double v66 = v63 - 8;
          if (v67)
          {
            uint64_t v68 = *(void *)v65;
            *(void *)long double v65 = *(void *)v63;
            v65 += 8;
            *(void *)float v63 = v68;
            goto LABEL_131;
          }
        }
        float v63 = v65;
        break;
      }
      v65 += 8;
    }
    v82[0] = a1[34];
    v82[1] = v63;
    (*(void (**)(unint64_t *, char **))(*a1 + 120))(a1, &v84);
    (*(void (**)(unint64_t *, uint64_t, long long *))(*a1 + 112))(a1, a2, &v83);
    (*(void (**)(unint64_t *, uint64_t, void *))(*a1 + 128))(a1, a2, v82);
    float v63 = (char *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 176))(a1, v25);
    float v64 = (char *)a1[35];
    float64x2_t v84 = v63;
    double v85 = v64;
  }
  std::vector<md::RoadPosition *>::__insert_with_size[abi:nn180100]<std::__wrap_iter<md::RoadPosition **>,std::__wrap_iter<md::RoadPosition **>>(a1 + 37, a1[38], v63, v64, (v64 - v63) >> 3);
  double v69 = v84;
  if (v84 != v85)
  {
    char v70 = (unsigned char *)a1[35];
    int64_t v71 = v70 - v85;
    if (v70 != v85) {
      memmove(v84, v85, v70 - v85);
    }
    a1[35] = (unint64_t)&v69[v71];
  }
  double v73 = (void *)a1[37];
  unsigned int v72 = (void *)a1[38];
  if (v72 != v73)
  {
    do
    {
      float v74 = (void (***)(void))*v73;
      if (*v73 && a1[30])
      {
        (**v74)(*v73);
        void *v74 = (void (**)(void))a1[33];
        a1[33] = (unint64_t)v74;
      }
      ++v73;
    }
    while (v73 != v72);
    unsigned int v72 = (void *)a1[37];
  }
  a1[38] = (unint64_t)v72;
  (*(void (**)(unint64_t *))(*a1 + 192))(a1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_153:
  float v75 = (uint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 96))(a1, a2);
  uint64_t v76 = (unint64_t *)a1[10];
  if (v76)
  {
    uint64_t v77 = *v75;
    uint64_t v78 = v75[1];
    if (v76 == a1 + 7)
    {
      uint64_t v88 = v87;
      (*(void (**)(unint64_t *, void *))(*v76 + 24))(v76, v87);
    }
    else
    {
      uint64_t v88 = (void *)(*(uint64_t (**)(unint64_t *))(*v76 + 16))(v76);
    }
    unint64_t v79 = 126 - 2 * __clz((v78 - v77) >> 3);
    if (v78 == v77) {
      unint64_t v80 = 0;
    }
    else {
      unint64_t v80 = v79;
    }
    ((void (*)(uint64_t, uint64_t, void *, unint64_t, uint64_t))std::__introsort<std::_ClassicAlgPolicy,std::function<BOOL ()(md::ElevatedPolygonRenderable *,md::ElevatedPolygonRenderable *)> &,md::ElevatedPolygonRenderable **,false>)(v77, v78, v87, v80, 1);
    if (v88 == v87)
    {
      (*(void (**)(void *))(v87[0] + 32))(v87);
    }
    else if (v88)
    {
      (*(void (**)(void))(*v88 + 40))();
    }
  }
  return (*(uint64_t (**)(unint64_t *, uint64_t *, uint64_t))(*a1 + 152))(a1, v75, a2);
}

void sub_1A186F04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void **md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::LayerDataInfo::update(uint64_t *a1)
{
  unint64_t v2 = a1 + 7;
  std::__tree<gdc::LayerDataWithWorld>::destroy((void *)a1[7]);
  a1[6] = (uint64_t)v2;
  a1[8] = 0;
  *unint64_t v2 = 0;
  std::__tree<gdc::LayerDataWithWorld>::destroy((void *)a1[10]);
  a1[9] = (uint64_t)(a1 + 10);
  a1[11] = 0;
  a1[10] = 0;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[6];
  uint64_t v14 = *a1;
  uint64_t v12 = v3;
  uint64_t v13 = a1 + 1;
  uint64_t v10 = v4;
  unint64_t v11 = a1 + 4;
  uint64_t v9 = a1 + 6;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v8, (uint64_t)&v14, &v13, (uint64_t)&v12, &v11, &v9);
  uint64_t v5 = *a1;
  uint64_t v6 = a1[9];
  uint64_t v14 = a1[3];
  uint64_t v12 = v5;
  uint64_t v13 = a1 + 4;
  uint64_t v10 = v6;
  unint64_t v11 = a1 + 1;
  uint64_t v9 = a1 + 9;
  return std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v8, (uint64_t)&v14, &v13, (uint64_t)&v12, &v11, &v9);
}

void **md::CartographicTiledRenderLayer<md::DaVinciGroundRenderable>::_updateLayerDataInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 128);
  long long v5 = *(_OWORD *)(a1 + 128);
  unint64_t v7 = (void *)(a1 + 160);
  uint64_t v6 = *(void *)(a1 + 160);
  *(void *)(a1 + 136) = v6;
  uint64_t v8 = a1 + 136;
  *(void *)(a1 + 128) = *(void *)(a1 + 152);
  *(_OWORD *)(a1 + 152) = v5;
  uint64_t v9 = *(void *)(a1 + 144);
  uint64_t v10 = *(void *)(a1 + 168);
  *(void *)(a1 + 144) = v10;
  *(void *)(a1 + 168) = v9;
  unint64_t v11 = (uint64_t *)(v6 + 16);
  if (!v10) {
    unint64_t v11 = (uint64_t *)(a1 + 128);
  }
  uint64_t *v11 = v8;
  uint64_t v12 = (void *)(*v7 + 16);
  if (!v9) {
    uint64_t v12 = (void *)(a1 + 152);
  }
  uint64_t v31 = a1 + 160;
  void *v12 = v7;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)v8);
  *uint64_t v4 = v8;
  *(void *)uint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  uint64_t v13 = *(unsigned __int16 **)(v8 + 184);
  for (uint64_t i = *(unsigned __int16 **)(v8 + 192); v13 != i; ++v13)
  {
    int v16 = *v13;
    uint64_t v17 = *a2;
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
    }
    unint64_t v18 = *(unsigned __int16 **)(v17 + 48);
    uint64_t v19 = *(unsigned __int16 **)(v17 + 56);
    if (v18 == v19) {
      goto LABEL_7;
    }
    unint64_t v20 = *(unsigned __int16 **)(v17 + 48);
    while (*v20 != v16)
    {
      v20 += 16;
      if (v20 == v19) {
        goto LABEL_7;
      }
    }
    if (v20 == v19)
    {
LABEL_7:
      unint64_t v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v18 != v16)
      {
        v18 += 16;
        if (v18 == v19)
        {
          unint64_t v18 = *(unsigned __int16 **)(v17 + 56);
          break;
        }
      }
      unint64_t v15 = (uint64_t *)(v18 + 4);
    }
    std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v4, (void *)*v15, v15 + 1);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  *(void *)(a1 + 176) = a1 + 184;
  uint64_t v21 = (void *)(a1 + 176);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = 0;
  unint64_t v22 = (void *)(a1 + 208);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 208));
  *(void *)(a1 + 200) = a1 + 208;
  uint64_t v23 = (void *)(a1 + 200);
  void *v22 = 0;
  void v23[2] = 0;
  uint64_t v24 = *(v23 - 9);
  uint64_t v25 = *(v23 - 6);
  uint64_t v26 = *v21;
  uint64_t v37 = v8;
  uint64_t v38 = v24;
  uint64_t v35 = v31;
  uint64_t v36 = v25;
  unint64_t v33 = v21;
  uint64_t v34 = v26;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v32, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v33);
  uint64_t v27 = *(v23 - 6);
  uint64_t v28 = *(v23 - 9);
  uint64_t v29 = *v23;
  uint64_t v37 = v31;
  uint64_t v38 = v27;
  uint64_t v35 = v8;
  uint64_t v36 = v28;
  unint64_t v33 = v23;
  uint64_t v34 = v29;
  return std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v32, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v33);
}

void **md::CartographicTiledRenderLayer<md::DaVinciRoadTileDataRenderable>::_updateLayerDataInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 128);
  long long v5 = *(_OWORD *)(a1 + 128);
  unint64_t v7 = (void *)(a1 + 160);
  uint64_t v6 = *(void *)(a1 + 160);
  *(void *)(a1 + 136) = v6;
  uint64_t v8 = a1 + 136;
  *(void *)(a1 + 128) = *(void *)(a1 + 152);
  *(_OWORD *)(a1 + 152) = v5;
  uint64_t v9 = *(void *)(a1 + 144);
  uint64_t v10 = *(void *)(a1 + 168);
  *(void *)(a1 + 144) = v10;
  *(void *)(a1 + 168) = v9;
  unint64_t v11 = (uint64_t *)(v6 + 16);
  if (!v10) {
    unint64_t v11 = (uint64_t *)(a1 + 128);
  }
  uint64_t *v11 = v8;
  uint64_t v12 = (void *)(*v7 + 16);
  if (!v9) {
    uint64_t v12 = (void *)(a1 + 152);
  }
  uint64_t v31 = a1 + 160;
  void *v12 = v7;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)v8);
  *uint64_t v4 = v8;
  *(void *)uint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  uint64_t v13 = *(unsigned __int16 **)(v8 + 184);
  for (uint64_t i = *(unsigned __int16 **)(v8 + 192); v13 != i; ++v13)
  {
    int v16 = *v13;
    uint64_t v17 = *a2;
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
    }
    unint64_t v18 = *(unsigned __int16 **)(v17 + 48);
    uint64_t v19 = *(unsigned __int16 **)(v17 + 56);
    if (v18 == v19) {
      goto LABEL_7;
    }
    unint64_t v20 = *(unsigned __int16 **)(v17 + 48);
    while (*v20 != v16)
    {
      v20 += 16;
      if (v20 == v19) {
        goto LABEL_7;
      }
    }
    if (v20 == v19)
    {
LABEL_7:
      unint64_t v15 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v18 != v16)
      {
        v18 += 16;
        if (v18 == v19)
        {
          unint64_t v18 = *(unsigned __int16 **)(v17 + 56);
          break;
        }
      }
      unint64_t v15 = (uint64_t *)(v18 + 4);
    }
    std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v4, (void *)*v15, v15 + 1);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 184));
  *(void *)(a1 + 176) = a1 + 184;
  uint64_t v21 = (void *)(a1 + 176);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = 0;
  unint64_t v22 = (void *)(a1 + 208);
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(a1 + 208));
  *(void *)(a1 + 200) = a1 + 208;
  uint64_t v23 = (void *)(a1 + 200);
  void *v22 = 0;
  void v23[2] = 0;
  uint64_t v24 = *(v23 - 9);
  uint64_t v25 = *(v23 - 6);
  uint64_t v26 = *v21;
  uint64_t v37 = v8;
  uint64_t v38 = v24;
  uint64_t v35 = v31;
  uint64_t v36 = v25;
  unint64_t v33 = v21;
  uint64_t v34 = v26;
  std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v32, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v33);
  uint64_t v27 = *(v23 - 6);
  uint64_t v28 = *(v23 - 9);
  uint64_t v29 = *v23;
  uint64_t v37 = v31;
  uint64_t v38 = v27;
  uint64_t v35 = v8;
  uint64_t v36 = v28;
  unint64_t v33 = v23;
  uint64_t v34 = v29;
  return std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(v32, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v33);
}

void **std::__set_difference[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long> &,std::insert_iterator<std::set<gdc::LayerDataWithWorld>> &>(void **result, uint64_t a2, void *a3, uint64_t a4, void *a5, void **a6)
{
  unint64_t v7 = result;
  uint64_t v8 = *(void **)a2;
  uint64_t v9 = (void *)*a3;
  if (*(void *)a2 == *a3)
  {
LABEL_44:
    long long v32 = *(_OWORD *)a6;
    uint64_t v9 = v8;
    goto LABEL_46;
  }
  for (uint64_t i = *(void **)a4; *(void *)a4 != *a5; uint64_t i = *(void **)a4)
  {
    unint64_t v15 = v8[4];
    int v16 = *((unsigned __int8 *)v8 + 48);
    int v17 = (char)v16;
    int v18 = *((unsigned __int8 *)i + 48);
    unint64_t v19 = i[4];
    if (v16 == v18 ? v15 < v19 : (char)v16 < (char)v18)
    {
      uint64_t result = std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100](a6, (uint64_t)(v8 + 4));
      uint64_t v21 = *(void **)a2;
      unint64_t v22 = *(void **)(*(void *)a2 + 8);
      if (v22)
      {
        do
        {
          uint64_t v23 = v22;
          unint64_t v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          uint64_t v23 = (void *)v21[2];
          BOOL v24 = *v23 == (void)v21;
          uint64_t v21 = v23;
        }
        while (!v24);
      }
      *(void *)a2 = v23;
    }
    else
    {
      BOOL v25 = v19 < v15;
      if (v17 != (char)v18) {
        BOOL v25 = (char)v18 < v17;
      }
      if (v25)
      {
        uint64_t v26 = (void *)i[1];
        if (v26)
        {
          do
          {
            uint64_t v27 = v26;
            uint64_t v26 = (void *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            uint64_t v27 = (void *)i[2];
            BOOL v24 = *v27 == (void)i;
            uint64_t i = v27;
          }
          while (!v24);
        }
      }
      else
      {
        uint64_t v28 = (void *)v8[1];
        if (v28)
        {
          do
          {
            uint64_t v29 = v28;
            uint64_t v28 = (void *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            uint64_t v29 = (void *)v8[2];
            BOOL v24 = *v29 == (void)v8;
            uint64_t v8 = v29;
          }
          while (!v24);
        }
        *(void *)a2 = v29;
        uint8x8_t v30 = *(void **)a4;
        uint64_t v31 = *(void **)(*(void *)a4 + 8);
        if (v31)
        {
          do
          {
            uint64_t v27 = v31;
            uint64_t v31 = (void *)*v31;
          }
          while (v31);
        }
        else
        {
          do
          {
            uint64_t v27 = (void *)v30[2];
            BOOL v24 = *v27 == (void)v30;
            uint8x8_t v30 = v27;
          }
          while (!v24);
        }
      }
      *(void *)a4 = v27;
    }
    uint64_t v8 = *(void **)a2;
    uint64_t v9 = (void *)*a3;
    if (*(void *)a2 == *a3) {
      goto LABEL_44;
    }
  }
  long long v32 = *(_OWORD *)a6;
  long long v35 = *(_OWORD *)a6;
  if (v8 != v9)
  {
    do
    {
      uint64_t result = std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100]((void **)&v35, (uint64_t)(v8 + 4));
      unint64_t v33 = (void *)v8[1];
      if (v33)
      {
        do
        {
          uint64_t v34 = v33;
          unint64_t v33 = (void *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          uint64_t v34 = (void *)v8[2];
          BOOL v24 = *v34 == (void)v8;
          uint64_t v8 = v34;
        }
        while (!v24);
      }
      uint64_t v8 = v34;
    }
    while (v34 != v9);
    long long v32 = v35;
  }
LABEL_46:
  void *v7 = v9;
  *(_OWORD *)(v7 + 1) = v32;
  return result;
}

uint64_t *std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    v19[7] = v3;
    v19[8] = v4;
    uint64_t v6 = a2;
    unint64_t v7 = result;
    uint64_t v8 = result + 1;
    do
    {
      uint64_t result = std::__tree<gdc::LayerDataWithWorld>::__find_equal<gdc::LayerDataWithWorld>(v7, v8, v19, &v18, v6[4], *((unsigned char *)v6 + 48));
      if (*result)
      {
        uint64_t v9 = (void *)v6[1];
        if (v9) {
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v10 = result;
        unint64_t v11 = (uint64_t *)operator new(0x38uLL);
        uint64_t v12 = v11;
        v11[4] = v6[4];
        uint64_t v13 = v6[5];
        v11[5] = v13;
        if (v13) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
        }
        *((unsigned char *)v11 + 48) = *((unsigned char *)v6 + 48);
        uint64_t v14 = v19[0];
        uint64_t *v11 = 0;
        v11[1] = 0;
        v11[2] = (uint64_t)v14;
        *uint64_t v10 = (uint64_t)v11;
        unint64_t v15 = *(void **)*v7;
        if (v15)
        {
          uint64_t *v7 = (uint64_t)v15;
          uint64_t v12 = (uint64_t *)*v10;
        }
        uint64_t result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], v12);
        ++v7[2];
        uint64_t v9 = (void *)v6[1];
        if (v9)
        {
          do
          {
LABEL_12:
            int v16 = v9;
            uint64_t v9 = (void *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        int v16 = (void *)v6[2];
        BOOL v17 = *v16 == (void)v6;
        uint64_t v6 = v16;
      }
      while (!v17);
LABEL_3:
      uint64_t v6 = v16;
    }
    while (v16 != a3);
  }
  return result;
}

uint64_t *std::__tree<gdc::LayerDataWithWorld>::__find_equal<gdc::LayerDataWithWorld>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unint64_t a5, unsigned __int8 a6)
{
  uint64_t v6 = a1 + 1;
  if (a1 + 1 == a2) {
    goto LABEL_5;
  }
  int v7 = *((unsigned __int8 *)a2 + 48);
  BOOL v8 = *((char *)a2 + 48) > (char)a6;
  unint64_t v9 = a2[4];
  if (v7 == a6) {
    BOOL v8 = v9 > a5;
  }
  if (v8)
  {
LABEL_5:
    uint64_t v10 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v12 = a2;
LABEL_25:
      if (v10)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v10)
    {
      unint64_t v11 = (uint64_t *)*a2;
      do
      {
        uint64_t v12 = v11;
        unint64_t v11 = (uint64_t *)v11[1];
      }
      while (v11);
    }
    else
    {
      int v18 = a2;
      do
      {
        uint64_t v12 = (uint64_t *)v18[2];
        BOOL v19 = *v12 == (void)v18;
        int v18 = v12;
      }
      while (v19);
    }
    int v20 = *((char *)v12 + 48);
    if (a6 == v20) {
      BOOL v21 = v12[4] < a5;
    }
    else {
      BOOL v21 = v20 < (char)a6;
    }
    if (v21) {
      goto LABEL_25;
    }
    uint64_t v23 = *v6;
    if (*v6)
    {
      do
      {
        while (1)
        {
          BOOL v24 = (uint64_t *)v23;
          int v25 = *(char *)(v23 + 48);
          int v26 = *(unsigned __int8 *)(v23 + 48);
          BOOL v27 = v25 > (char)a6;
          unint64_t v28 = v24[4];
          if (v26 == a6) {
            BOOL v27 = v28 > a5;
          }
          if (!v27) {
            break;
          }
          uint64_t v23 = *v24;
          uint64_t v6 = v24;
          if (!*v24) {
            goto LABEL_62;
          }
        }
        BOOL v29 = v28 < a5;
        if (v26 == a6) {
          BOOL v30 = v29;
        }
        else {
          BOOL v30 = (char)v26 < (char)a6;
        }
        if (!v30) {
          break;
        }
        uint64_t v6 = v24 + 1;
        uint64_t v23 = v24[1];
      }
      while (v23);
      goto LABEL_62;
    }
LABEL_28:
    BOOL v24 = a1 + 1;
LABEL_62:
    *a3 = v24;
    return v6;
  }
  BOOL v13 = v9 < a5;
  if (v7 == a6) {
    BOOL v14 = v13;
  }
  else {
    BOOL v14 = (char)v7 < (char)a6;
  }
  if (!v14)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  uint64_t v15 = a2[1];
  if (v15)
  {
    int v16 = (uint64_t *)a2[1];
    do
    {
      BOOL v17 = v16;
      int v16 = (uint64_t *)*v16;
    }
    while (v16);
  }
  else
  {
    uint64_t v31 = a2;
    do
    {
      BOOL v17 = (uint64_t *)v31[2];
      BOOL v19 = *v17 == (void)v31;
      uint64_t v31 = v17;
    }
    while (!v19);
  }
  if (v17 != v6)
  {
    int v32 = *((char *)v17 + 48);
    if (!(a6 == v32 ? v17[4] > a5 : v32 > (char)a6))
    {
      uint64_t v34 = *v6;
      if (*v6)
      {
        do
        {
          while (1)
          {
            BOOL v24 = (uint64_t *)v34;
            int v35 = *(char *)(v34 + 48);
            int v36 = *(unsigned __int8 *)(v34 + 48);
            BOOL v37 = v35 > (char)a6;
            unint64_t v38 = v24[4];
            if (v36 == a6) {
              BOOL v37 = v38 > a5;
            }
            if (!v37) {
              break;
            }
            uint64_t v34 = *v24;
            uint64_t v6 = v24;
            if (!*v24) {
              goto LABEL_62;
            }
          }
          BOOL v39 = v38 < a5;
          if (v36 == a6) {
            BOOL v40 = v39;
          }
          else {
            BOOL v40 = (char)v36 < (char)a6;
          }
          if (!v40) {
            break;
          }
          uint64_t v6 = v24 + 1;
          uint64_t v34 = v24[1];
        }
        while (v34);
        goto LABEL_62;
      }
      goto LABEL_28;
    }
  }
  if (v15)
  {
    *a3 = v17;
    return v17;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
}

uint64_t md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::useNewRenderableCollector()
{
  return 0;
}

void md::ClientDrapedPolygonRenderLayer::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  long long v5 = *(void **)(a3 + 8);
  unint64_t v6 = v5[1];
  if ((v6 & (v6 - 1)) != 0)
  {
    unint64_t v8 = 0x8BD499FBD96FBB9ELL;
    if (v6 <= 0x8BD499FBD96FBB9ELL) {
      unint64_t v8 = 0x8BD499FBD96FBB9ELL % v6;
    }
    int v7 = *(void **)(*v5 + 8 * v8);
    do
    {
      do
        int v7 = (void *)*v7;
      while (v7[1] != 0x8BD499FBD96FBB9ELL);
    }
    while (v7[2] != 0x8BD499FBD96FBB9ELL);
  }
  else
  {
    int v7 = *(void **)(*v5 + 8 * ((v6 - 1) & 0x8BD499FBD96FBB9ELL));
    do
    {
      do
        int v7 = (void *)*v7;
      while (v7[1] != 0x8BD499FBD96FBB9ELL);
    }
    while (v7[2] != 0x8BD499FBD96FBB9ELL);
  }
  unint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 != v10)
  {
    uint64_t v11 = *(void *)(v7[5] + 32);
    float v12 = *(float *)(v11 + 16);
    float v13 = *(float *)(v11 + 20);
    do
    {
      uint64_t v14 = *v9++;
      a1 = md::BaseMapTileDataRenderable::adjustZScale(v14, v12, v13);
    }
    while (v9 != v10);
  }
  md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::updateWithContext(a1, a2, a3);
}

uint64_t md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::determineZRangeMapData(uint64_t result, void *a2)
{
  *(_WORD *)(result + 48) = 255;
  if (a2)
  {
    unint64_t v2 = *(unsigned __int16 **)(result + 320);
    uint64_t v3 = *(unsigned __int16 **)(result + 328);
    if (v2 == v3) {
      goto LABEL_33;
    }
    do
    {
      int v4 = *v2;
      uint64_t v5 = *a2;
      {
        BOOL v21 = a2;
        uint64_t v22 = result;
        int v20 = v2;
        uint64_t v23 = v3;
        int v24 = v4;
        uint64_t v25 = v5;
        uint64_t v5 = v25;
        int v4 = v24;
        unint64_t v2 = v20;
        a2 = v21;
        int v19 = v18;
        uint64_t result = v22;
        uint64_t v3 = v23;
        if (v19)
        {
          qword_1EB3176C0 = 0;
          qword_1EB3176B8 = 0;
          md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
          __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
          uint64_t v5 = v25;
          int v4 = v24;
          uint64_t result = v22;
          uint64_t v3 = v23;
          unint64_t v2 = v20;
          a2 = v21;
        }
      }
      unint64_t v6 = *(unsigned __int16 **)(v5 + 48);
      int v7 = *(unsigned __int16 **)(v5 + 56);
      if (v6 == v7) {
        goto LABEL_16;
      }
      unint64_t v8 = v6;
      while (*v8 != v4)
      {
        v8 += 16;
        if (v8 == v7) {
          goto LABEL_16;
        }
      }
      if (v8 == v7)
      {
LABEL_16:
        unint64_t v9 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
      }
      else
      {
        while (*v6 != v4)
        {
          v6 += 16;
          if (v6 == v7)
          {
            unint64_t v6 = v7;
            break;
          }
        }
        unint64_t v9 = (uint64_t *)(v6 + 4);
      }
      float v12 = (uint64_t *)*v9;
      uint64_t v10 = v9 + 1;
      uint64_t v11 = v12;
      if (v12 != v10)
      {
        unsigned __int8 v13 = *(unsigned char *)(result + 48);
        unsigned __int8 v14 = *(unsigned char *)(result + 49);
        do
        {
          if (v13 >= *(unsigned __int8 *)(*(void *)(v11[4] + 32) + 8)) {
            unsigned __int8 v13 = *(unsigned char *)(*(void *)(v11[4] + 32) + 8);
          }
          *(unsigned char *)(result + 48) = v13;
          if (v14 <= *(unsigned __int8 *)(*(void *)(v11[4] + 32) + 8)) {
            unsigned __int8 v14 = *(unsigned char *)(*(void *)(v11[4] + 32) + 8);
          }
          *(unsigned char *)(result + 49) = v14;
          uint64_t v15 = (uint64_t *)v11[1];
          if (v15)
          {
            do
            {
              int v16 = v15;
              uint64_t v15 = (uint64_t *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              int v16 = (uint64_t *)v11[2];
              BOOL v17 = *v16 == (void)v11;
              uint64_t v11 = v16;
            }
            while (!v17);
          }
          uint64_t v11 = v16;
        }
        while (v16 != v10);
      }
      ++v2;
    }
    while (v2 != v3);
    if (*(unsigned __int8 *)(result + 49) < *(unsigned __int8 *)(result + 48)) {
LABEL_33:
    }
      *(_WORD *)(result + 48) = 0;
  }
  return result;
}

void **md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::_updateLayerDataInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a1 + 16;
  long long v4 = *((_OWORD *)a1 + 8);
  uint64_t v5 = a1 + 20;
  uint64_t v6 = a1[20];
  a1[17] = v6;
  uint64_t v7 = (uint64_t)(a1 + 17);
  a1[16] = a1[19];
  *(_OWORD *)(a1 + 19) = v4;
  uint64_t v8 = a1[18];
  uint64_t v9 = a1[21];
  a1[18] = v9;
  a1[21] = v8;
  uint64_t v10 = (uint64_t *)(v6 + 16);
  if (!v9) {
    uint64_t v10 = a1 + 16;
  }
  *uint64_t v10 = v7;
  uint64_t v11 = (void *)(*v5 + 16);
  if (!v8) {
    uint64_t v11 = a1 + 19;
  }
  void *v11 = v5;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)v7);
  uint64_t *v3 = v7;
  *(void *)uint64_t v7 = 0;
  *(void *)(v7 + 8) = 0;
  float v12 = *(unsigned __int16 **)(v7 + 184);
  for (uint64_t i = *(unsigned __int16 **)(v7 + 192); v12 != i; ++v12)
  {
    int v15 = *v12;
    uint64_t v16 = *a2;
    {
      int v23 = v15;
      uint64_t v22 = v16;
      uint64_t v16 = v22;
      int v15 = v23;
      if (v20)
      {
        qword_1EB3176C0 = 0;
        qword_1EB3176B8 = 0;
        md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
        __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
        uint64_t v16 = v22;
        int v15 = v23;
      }
    }
    BOOL v17 = *(unsigned __int16 **)(v16 + 48);
    int v18 = *(unsigned __int16 **)(v16 + 56);
    if (v17 == v18) {
      goto LABEL_7;
    }
    int v19 = v17;
    while (*v19 != v15)
    {
      v19 += 16;
      if (v19 == v18) {
        goto LABEL_7;
      }
    }
    if (v19 == v18)
    {
LABEL_7:
      unsigned __int8 v14 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v17 != v15)
      {
        v17 += 16;
        if (v17 == v18)
        {
          BOOL v17 = v18;
          break;
        }
      }
      unsigned __int8 v14 = (uint64_t *)(v17 + 4);
    }
    std::set<gdc::LayerDataWithWorld>::insert[abi:nn180100]<std::__tree_const_iterator<gdc::LayerDataWithWorld,std::__tree_node<gdc::LayerDataWithWorld,void *> *,long>>(v3, (void *)*v14, v14 + 1);
  }
  return md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::LayerDataInfo::update(v3);
}

void md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::updateWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a3 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_24;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x1AF456233693CD46;
    if (*(void *)&v4 <= 0x1AF456233693CD46uLL) {
      uint64_t v6 = 0x1AF456233693CD46uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_24;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_24;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46) {
          goto LABEL_22;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x1AF456233693CD46) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_24;
    }
  }
  if (v8[2] != 0x1AF456233693CD46) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x1AF456233693CD46)
  {
    unsigned __int8 v13 = *(double **)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  unsigned __int8 v13 = 0;
LABEL_25:
  unsigned __int8 v14 = *a2;
  int v15 = a2[1];
  if (*a2 != v15)
  {
    do
    {
      uint64_t v16 = *v14++;
      float v17 = v13[471] * v13[173] / (v13[171] * (*(double *)(v16 + 72) - *(double *)(v16 + 56)));
      *(float *)(v16 + 368) = v17;
      gm::operator*<double,4,4,4>(v28[0].f64, v13 + 101, (double *)(v16 + 88));
      float32x2_t v18 = vcvt_f32_f64(v28[1]);
      float32x2_t v19 = vcvt_f32_f64(v28[2]);
      float32x2_t v20 = vcvt_f32_f64(v28[3]);
      float32x2_t v21 = vcvt_f32_f64(v28[4]);
      float32x2_t v22 = vcvt_f32_f64(v28[5]);
      float32x2_t v23 = vcvt_f32_f64(v28[6]);
      float32x2_t v24 = vcvt_f32_f64(v28[7]);
      uint64_t v25 = *(void **)(v16 + 216);
      unint64_t v26 = v25[1];
      BOOL v27 = (float32x2_t *)v25[9];
      float32x2_t *v27 = vcvt_f32_f64(v28[0]);
      v27[1] = v18;
      v27[2] = v19;
      double v27[3] = v20;
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      v27[8].i32[0] = *(_DWORD *)(v16 + 368);
      if (v25[8] > v26) {
        unint64_t v26 = v25[8];
      }
      v25[7] = 0;
      v25[8] = v26;
    }
    while (v14 != v15);
  }
}

uint64_t md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::renderablesInView(uint64_t a1)
{
  return a1 + 272;
}

void md::PairedTiledRenderLayer<md::ElevatedPolygonRenderable>::_determineEnteringRenderables(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *(uint64_t **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4)
  {
    uint64_t v7 = 0;
    goto LABEL_48;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x3070CB6B3C7F21D3;
    if (*(void *)&v4 <= 0x3070CB6B3C7F21D3uLL) {
      uint64_t v6 = 0x3070CB6B3C7F21D3uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x3070CB6B3C7F21D3;
  }
  uint64_t v8 = *v3;
  uint64_t v9 = *(void **)(v8 + 8 * v6);
  if (!v9) {
    goto LABEL_25;
  }
  unint64_t v10 = (void *)*v9;
  if (!v10) {
    goto LABEL_25;
  }
  if (v5.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v12 = v10[1];
      if (v12 == 0x3070CB6B3C7F21D3)
      {
        if (v10[2] == 0x3070CB6B3C7F21D3) {
          goto LABEL_23;
        }
      }
      else if ((v12 & (*(void *)&v4 - 1)) != v6)
      {
        goto LABEL_25;
      }
      unint64_t v10 = (void *)*v10;
      if (!v10) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v10[1];
    if (v11 == 0x3070CB6B3C7F21D3) {
      break;
    }
    if (v11 >= *(void *)&v4) {
      v11 %= *(void *)&v4;
    }
    if (v11 != v6) {
      goto LABEL_25;
    }
LABEL_12:
    unint64_t v10 = (void *)*v10;
    if (!v10) {
      goto LABEL_25;
    }
  }
  if (v10[2] != 0x3070CB6B3C7F21D3) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v13 = v10[5];
  if (*(void *)(v13 + 8) == 0x3070CB6B3C7F21D3)
  {
    uint64_t v7 = *(void *)(v13 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v7 = 0;
LABEL_26:
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v14 = 0x99BED48DEFBBD82BLL;
    if (*(void *)&v4 <= 0x99BED48DEFBBD82BLL) {
      unint64_t v14 = 0x99BED48DEFBBD82BLL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v14 = (*(void *)&v4 - 1) & 0x99BED48DEFBBD82BLL;
  }
  int v15 = *(void **)(v8 + 8 * v14);
  if (!v15) {
    goto LABEL_48;
  }
  uint64_t v16 = (void *)*v15;
  if (!v16) {
    goto LABEL_48;
  }
  if (v5.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v18 = v16[1];
      if (v18 == 0x99BED48DEFBBD82BLL)
      {
        if (v16[2] == 0x99BED48DEFBBD82BLL) {
          goto LABEL_46;
        }
      }
      else if ((v18 & (*(void *)&v4 - 1)) != v14)
      {
        goto LABEL_48;
      }
      uint64_t v16 = (void *)*v16;
      if (!v16) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v17 = v16[1];
    if (v17 != 0x99BED48DEFBBD82BLL)
    {
      if (v17 >= *(void *)&v4) {
        v17 %= *(void *)&v4;
      }
      if (v17 != v14) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }
    if (v16[2] != 0x99BED48DEFBBD82BLL)
    {
LABEL_35:
      uint64_t v16 = (void *)*v16;
      if (!v16) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v19 = v16[5];
  if (*(void *)(v19 + 8) == 0x99BED48DEFBBD82BLL)
  {
    BOOL v60 = *(uint64_t **)(v19 + 32);
    goto LABEL_49;
  }
LABEL_48:
  BOOL v60 = 0;
LABEL_49:
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v67[0] = a1;
  v67[1] = (uint64_t)a3;
  v67[2] = a2;
  v67[3] = v7;
  if (v7)
  {
    float32x2_t v20 = *(uint64_t ***)(a1 + 176);
    float32x2_t v21 = (uint64_t ***)(a1 + 184);
    if (v20 != (uint64_t **)(a1 + 184))
    {
      do
      {
        float32x2_t v22 = (std::__shared_weak_count *)v20[5];
        long double v65 = v20[4];
        long double v66 = v22;
        if (v22) {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        float32x2_t v23 = (uint64_t *)__p;
        float32x2_t v24 = v64;
        if (__p == v64)
        {
          if (!__p) {
            goto LABEL_70;
          }
        }
        else
        {
          do
          {
            uint64_t v61 = *v23;
            BOOL v27 = (std::__shared_weak_count *)v23[1];
            float v62 = v27;
            if (v27) {
              atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            md::PairedTiledRenderLayer<md::ElevatedPolygonRenderable>::_determineEnteringRenderables(md::LayoutContext const&)::{lambda(std::shared_ptr<md::ElevatedStrokeTileData> const&,unsigned char,std::shared_ptr<md::DaVinciGroundTileData> const&)#1}::operator()(v67, (uint64_t *)&v65, *((unsigned char *)v20 + 48), &v61);
            if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
            v23 += 2;
          }
          while (v23 != v24);
          float32x2_t v23 = (uint64_t *)__p;
          if (!__p)
          {
LABEL_70:
            BOOL v29 = v66;
            if (!v66) {
              goto LABEL_75;
            }
            goto LABEL_74;
          }
        }
        uint64_t v25 = v64;
        unint64_t v26 = v23;
        if (v64 != v23)
        {
          do
          {
            unint64_t v28 = (std::__shared_weak_count *)*(v25 - 1);
            if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
            v25 -= 2;
          }
          while (v25 != v23);
          unint64_t v26 = __p;
        }
        float v64 = v23;
        operator delete(v26);
        BOOL v29 = v66;
        if (!v66)
        {
LABEL_75:
          BOOL v30 = (uint64_t **)v20[1];
          if (!v30) {
            goto LABEL_79;
          }
          goto LABEL_76;
        }
LABEL_74:
        if (atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_75;
        }
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
        BOOL v30 = (uint64_t **)v20[1];
        if (!v30)
        {
          do
          {
LABEL_79:
            uint64_t v31 = (uint64_t ***)v20[2];
            BOOL v32 = *v31 == v20;
            float32x2_t v20 = (uint64_t **)v31;
          }
          while (!v32);
          goto LABEL_52;
        }
        do
        {
LABEL_76:
          uint64_t v31 = (uint64_t ***)v30;
          BOOL v30 = (uint64_t **)*v30;
        }
        while (v30);
LABEL_52:
        float32x2_t v20 = (uint64_t **)v31;
      }
      while (v31 != v21);
    }
    unint64_t v33 = *(void **)(a1 + 400);
    if (v33 != (void *)(a1 + 408))
    {
LABEL_85:
      uint64_t v34 = (std::__shared_weak_count *)v33[5];
      long double v65 = (uint64_t *)v33[4];
      long double v66 = v34;
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v35 = (uint64_t *)__p;
      int v36 = v64;
      if (__p == v64)
      {
        if (!__p) {
          goto LABEL_126;
        }
LABEL_89:
        BOOL v37 = v64;
        unint64_t v38 = v35;
        if (v64 != v35)
        {
          do
          {
            unint64_t v55 = (std::__shared_weak_count *)*(v37 - 1);
            if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
            v37 -= 2;
          }
          while (v37 != v35);
          unint64_t v38 = __p;
        }
        float v64 = v35;
        operator delete(v38);
        unint64_t v56 = v66;
        if (v66) {
          goto LABEL_130;
        }
LABEL_131:
        float v57 = (void *)v33[1];
        if (!v57) {
          goto LABEL_135;
        }
        do
        {
LABEL_132:
          uint64_t v58 = v57;
          float v57 = (void *)*v57;
        }
        while (v57);
        goto LABEL_84;
      }
LABEL_92:
      unint64_t v40 = *v35;
      BOOL v39 = (std::__shared_weak_count *)v35[1];
      uint64_t v61 = *v35;
      float v62 = v39;
      if (!v39)
      {
        uint64_t v44 = 0;
        int v43 = *((unsigned __int8 *)v33 + 48);
        char v42 = 1;
        int64_t v45 = *v21;
        if (*v21) {
          goto LABEL_102;
        }
LABEL_98:
        char v46 = 1;
        if ((v42 & 1) == 0) {
          goto LABEL_111;
        }
        goto LABEL_113;
      }
      p_shared_owners = &v39->__shared_owners_;
      char v42 = 1;
      atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
      int v43 = *((unsigned __int8 *)v33 + 48);
      unint64_t v40 = *v35;
      uint64_t v44 = (std::__shared_weak_count *)v35[1];
      if (v44)
      {
        char v42 = 0;
        atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int64_t v45 = *v21;
      if (!*v21) {
        goto LABEL_98;
      }
      while (1)
      {
LABEL_102:
        int v47 = *((unsigned __int8 *)v45 + 48);
        int v48 = (char)v47;
        unint64_t v49 = (unint64_t)v45[4];
        if (v43 == v47) {
          BOOL v50 = v40 < v49;
        }
        else {
          BOOL v50 = (char)v47 > (char)v43;
        }
        if (!v50)
        {
          BOOL v51 = v49 < v40;
          if (v43 == v48) {
            BOOL v52 = v51;
          }
          else {
            BOOL v52 = v48 < (char)v43;
          }
          if (!v52)
          {
            char v46 = 0;
            if (v42) {
              goto LABEL_113;
            }
LABEL_111:
            unint64_t v53 = &v44->__shared_owners_;
            if (!atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
              if (!atomic_fetch_add(v53, 0xFFFFFFFFFFFFFFFFLL)) {
                goto LABEL_119;
              }
LABEL_113:
              if ((v46 & 1) == 0) {
                goto LABEL_115;
              }
LABEL_114:
              md::PairedTiledRenderLayer<md::ElevatedPolygonRenderable>::_determineEnteringRenderables(md::LayoutContext const&)::{lambda(std::shared_ptr<md::ElevatedStrokeTileData> const&,unsigned char,std::shared_ptr<md::DaVinciGroundTileData> const&)#1}::operator()(v67, &v61, v43, &v65);
              goto LABEL_115;
            }
            if (atomic_fetch_add(v53, 0xFFFFFFFFFFFFFFFFLL)) {
              goto LABEL_113;
            }
LABEL_119:
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
            if (v46) {
              goto LABEL_114;
            }
LABEL_115:
            unint64_t v54 = v62;
            if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
            v35 += 2;
            if (v35 != v36) {
              goto LABEL_92;
            }
            int v35 = (uint64_t *)__p;
            if (__p) {
              goto LABEL_89;
            }
LABEL_126:
            unint64_t v56 = v66;
            if (!v66) {
              goto LABEL_131;
            }
LABEL_130:
            if (atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
              goto LABEL_131;
            }
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
            float v57 = (void *)v33[1];
            if (v57) {
              goto LABEL_132;
            }
            do
            {
LABEL_135:
              uint64_t v58 = (void *)v33[2];
              BOOL v32 = *v58 == (void)v33;
              unint64_t v33 = v58;
            }
            while (!v32);
LABEL_84:
            unint64_t v33 = v58;
            if (v58 == (void *)(a1 + 408)) {
              return;
            }
            goto LABEL_85;
          }
          ++v45;
        }
        int64_t v45 = (uint64_t **)*v45;
        if (!v45) {
          goto LABEL_98;
        }
      }
    }
  }
}

void sub_1A1870A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  uint64_t v12 = *(void **)a3;
  if (*(void *)a3)
  {
    *(void *)(a3 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t *md::PairedTiledRenderLayer<md::ElevatedPolygonRenderable>::_determineExitingRenderables(uint64_t a1, uint64_t *a2)
{
  int v2 = *(unsigned __int16 *)(a1 + 450);
  uint64_t v3 = *a2;
  {
    uint64_t v15 = a1;
    a1 = v15;
    if (v14)
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
      a1 = v15;
    }
  }
  int8x8_t v4 = *(unsigned __int16 **)(v3 + 48);
  uint8x8_t v5 = *(unsigned __int16 **)(v3 + 56);
  uint64_t v6 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v4 != v5)
  {
    uint64_t v7 = *(unsigned __int16 **)(v3 + 48);
    while (*v7 != v2)
    {
      v7 += 16;
      if (v7 == v5) {
        goto LABEL_13;
      }
    }
    if (v7 == v5)
    {
      uint64_t v6 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v4 != v2)
      {
        v4 += 16;
        if (v4 == v5)
        {
          int8x8_t v4 = *(unsigned __int16 **)(v3 + 56);
          break;
        }
      }
      uint64_t v6 = (uint64_t *)(v4 + 4);
    }
  }
LABEL_13:
  uint64_t v9 = *(uint64_t **)(a1 + 272);
  uint64_t v8 = *(uint64_t **)(a1 + 280);
  v16[0] = a1;
  v16[1] = (uint64_t)v6;
  if (v9 != v8)
  {
    while (md::PairedTiledRenderLayer<md::ElevatedPolygonRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::ElevatedPolygonRenderable*)#1}::operator()(v16, *v9))
    {
      ++v9;
LABEL_16:
      if (v9 == v8) {
        return v8;
      }
    }
    unint64_t v10 = v8 - 1;
    while (v10 != v9)
    {
      uint64_t v8 = v10;
      uint64_t v11 = *v10--;
      if (md::PairedTiledRenderLayer<md::ElevatedPolygonRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::ElevatedPolygonRenderable*)#1}::operator()(v16, v11))
      {
        uint64_t v12 = *v9;
        *v9++ = *v8;
        *uint64_t v8 = v12;
        goto LABEL_16;
      }
    }
  }
  return v9;
}

BOOL md::PairedTiledRenderLayer<md::ElevatedPolygonRenderable>::_determineExitingRenderables(md::SceneContext const*)::{lambda(md::ElevatedPolygonRenderable*)#1}::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = *(void *)(a2 + 384);
  int8x8_t v4 = *(std::__shared_weak_count **)(a2 + 392);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v5 = *(void *)(a2 + 400);
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 408);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v7 = *(unsigned __int8 *)(a2 + 48);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(uint64_t ***)(v2 + 136);
  if (!v8)
  {
LABEL_8:
    BOOL v9 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((void *)(v2 + 88), (unsigned __int8 *)(v3 + 16)) != 0;
    goto LABEL_9;
  }
  while (1)
  {
    int v11 = *((unsigned __int8 *)v8 + 48);
    BOOL v12 = *((char *)v8 + 48) > (char)v7;
    unint64_t v13 = (unint64_t)v8[4];
    if (v7 == v11) {
      BOOL v12 = v3 < v13;
    }
    if (v12) {
      goto LABEL_19;
    }
    BOOL v14 = v13 < v3;
    int v15 = v7 == v11 ? v14 : (char)v11 < (char)v7;
    if (v15 != 1) {
      break;
    }
    ++v8;
LABEL_19:
    uint64_t v8 = (uint64_t **)*v8;
    if (!v8) {
      goto LABEL_8;
    }
  }
  uint64_t v16 = a1[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  for (uint64_t i = *(uint64_t ***)(v16 + 8); i; uint64_t i = (uint64_t **)*i)
  {
    int v18 = *((unsigned __int8 *)i + 48);
    BOOL v19 = *((char *)i + 48) > (char)v7;
    unint64_t v20 = (unint64_t)i[4];
    if (v7 == v18) {
      BOOL v19 = v5 < v20;
    }
    if (!v19)
    {
      BOOL v21 = v20 < v5;
      if (v7 == v18) {
        BOOL v22 = v21;
      }
      else {
        BOOL v22 = (char)v18 < (char)v7;
      }
      if (!v22)
      {
        BOOL v9 = 1;
        if (v6) {
          goto LABEL_43;
        }
        goto LABEL_9;
      }
      ++i;
    }
  }
  BOOL v9 = std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::find<gdc::LayerDataRequestKey>((void *)(v2 + 88), (unsigned __int8 *)(v3 + 16)) != 0;
  if (v6)
  {
LABEL_43:
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_9:
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v9;
}

void md::SceneStateManager::updateTileSets(md::SceneStateManager *this)
{
  if (*((void *)this + 4))
  {
    uint64_t v2 = (void *)*((void *)this + 3);
    if (v2)
    {
      do
      {
        BOOL v29 = (void *)*v2;
        BOOL v30 = (void *)v2[16];
        if (v30 != (void *)v2[18]) {
          free(v30);
        }
        if (*((unsigned char *)v2 + 112)) {
          *((unsigned char *)v2 + 112) = 0;
        }
        uint64_t v31 = (void *)v2[4];
        if (v31 != (void *)v2[6]) {
          free(v31);
        }
        operator delete(v2);
        uint64_t v2 = v29;
      }
      while (v29);
    }
    *((void *)this + 3) = 0;
    uint64_t v3 = *((void *)this + 2);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*((void *)this + 1) + 8 * i) = 0;
    }
    *((void *)this + 4) = 0;
  }
  std::__hash_table<std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,std::__unordered_map_hasher<gdc::LayerDataWithWorld,std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,gdc::LayerDataWithWorldHash,std::equal_to<gdc::LayerDataWithWorld>,true>,std::__unordered_map_equal<gdc::LayerDataWithWorld,std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,std::equal_to<gdc::LayerDataWithWorld>,gdc::LayerDataWithWorldHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>>>::clear((void *)this + 9);
  for (uint64_t j = (void *)*((void *)this + 46); j; uint64_t j = (void *)*j)
  {
    if (j[6])
    {
      BOOL v32 = (void *)j[5];
      if (v32)
      {
        do
        {
          unint64_t v33 = (void *)*v32;
          operator delete(v32);
          BOOL v32 = v33;
        }
        while (v33);
      }
      j[5] = 0;
      uint64_t v34 = j[4];
      if (v34)
      {
        for (uint64_t k = 0; k != v34; ++k)
          *(void *)(j[3] + 8 * k) = 0;
      }
      j[6] = 0;
    }
  }
  for (unint64_t m = (void *)*((void *)this + 51); m; unint64_t m = (void *)*m)
  {
    if (m[6])
    {
      int v36 = (void *)m[5];
      if (v36)
      {
        do
        {
          BOOL v37 = (void *)*v36;
          operator delete(v36);
          int v36 = v37;
        }
        while (v37);
      }
      m[5] = 0;
      uint64_t v38 = m[4];
      if (v38)
      {
        for (uint64_t n = 0; n != v38; ++n)
          *(void *)(m[3] + 8 * n) = 0;
      }
      m[6] = 0;
    }
  }
  uint64_t v7 = *((void *)this + 6);
  uint64_t v8 = *((void *)this + 7);
  if (v7 != v8)
  {
    uint64_t v9 = v7 + 16;
    do
    {
      std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)v9);
      *(void *)(v9 - 8) = v9;
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      uint64_t v10 = v9 + 16;
      v9 += 32;
    }
    while (v10 != v8);
  }
  uint64_t v11 = *((void *)this + 14);
  uint64_t v12 = *((void *)this + 15);
  if (v11 != v12)
  {
    while (*(_WORD *)v11)
    {
      v11 += 112;
      if (v11 == v12)
      {
        uint64_t v11 = *((void *)this + 15);
        break;
      }
    }
  }
  md::SceneStateManager::updateSceneTileSet(this, (BOOL *)(v11 + 8), 0);
  uint64_t v13 = *((void *)this + 14);
  uint64_t v14 = *((void *)this + 15);
  if (v13 != v14)
  {
    while (*(_WORD *)v13 != 1)
    {
      v13 += 112;
      if (v13 == v14)
      {
        uint64_t v13 = *((void *)this + 15);
        break;
      }
    }
  }
  md::SceneStateManager::updateSceneTileSet(this, (BOOL *)(v13 + 8), 1u);
  uint64_t v15 = *((void *)this + 14);
  uint64_t v16 = *((void *)this + 15);
  if (v15 != v16)
  {
    while (*(_WORD *)v15 != 2)
    {
      v15 += 112;
      if (v15 == v16)
      {
        uint64_t v15 = *((void *)this + 15);
        break;
      }
    }
  }
  md::SceneStateManager::updateSceneTileSet(this, (BOOL *)(v15 + 8), 2u);
  uint64_t v17 = *((void *)this + 14);
  uint64_t v18 = *((void *)this + 15);
  if (v17 != v18)
  {
    while (*(_WORD *)v17 != 3)
    {
      v17 += 112;
      if (v17 == v18)
      {
        uint64_t v17 = *((void *)this + 15);
        break;
      }
    }
  }
  md::SceneStateManager::updateSceneTileSet(this, (BOOL *)(v17 + 8), 3u);
  uint64_t v19 = *((void *)this + 14);
  uint64_t v20 = *((void *)this + 15);
  if (v19 != v20)
  {
    while (*(_WORD *)v19 != 4)
    {
      v19 += 112;
      if (v19 == v20)
      {
        uint64_t v19 = *((void *)this + 15);
        break;
      }
    }
  }
  md::SceneStateManager::updateSceneTileSet(this, (BOOL *)(v19 + 8), 4u);
  uint64_t v21 = *((void *)this + 14);
  uint64_t v22 = *((void *)this + 15);
  if (v21 != v22)
  {
    while (*(_WORD *)v21 != 5)
    {
      v21 += 112;
      if (v21 == v22)
      {
        uint64_t v21 = *((void *)this + 15);
        break;
      }
    }
  }
  md::SceneStateManager::updateSceneTileSet(this, (BOOL *)(v21 + 8), 5u);
  uint64_t v23 = *((void *)this + 14);
  uint64_t v24 = *((void *)this + 15);
  if (v23 != v24)
  {
    while (*(_WORD *)v23 != 6)
    {
      v23 += 112;
      if (v23 == v24)
      {
        uint64_t v23 = *((void *)this + 15);
        break;
      }
    }
  }
  md::SceneStateManager::updateSceneTileSet(this, (BOOL *)(v23 + 8), 6u);
  uint64_t v25 = *((void *)this + 14);
  uint64_t v26 = *((void *)this + 15);
  if (v25 != v26)
  {
    while (*(_WORD *)v25 != 7)
    {
      v25 += 112;
      if (v25 == v26)
      {
        uint64_t v25 = *((void *)this + 15);
        break;
      }
    }
  }
  md::SceneStateManager::updateSceneTileSet(this, (BOOL *)(v25 + 8), 7u);
  uint64_t v27 = *((void *)this + 14);
  uint64_t v28 = *((void *)this + 15);
  if (v27 != v28)
  {
    while (*(_WORD *)v27 != 8)
    {
      v27 += 112;
      if (v27 == v28)
      {
        uint64_t v27 = *((void *)this + 15);
        break;
      }
    }
  }
  md::SceneStateManager::updateSceneTileSet(this, (BOOL *)(v27 + 8), 8u);
}

void std::__tree<gdc::LayerDataWithWorld>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<gdc::LayerDataWithWorld>::destroy(*a1);
    std::__tree<gdc::LayerDataWithWorld>::destroy(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[5];
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete(a1);
  }
}

void std::__hash_table<std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,std::__unordered_map_hasher<gdc::LayerDataWithWorld,std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,gdc::LayerDataWithWorldHash,std::equal_to<gdc::LayerDataWithWorld>,true>,std::__unordered_map_equal<gdc::LayerDataWithWorld,std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>,std::equal_to<gdc::LayerDataWithWorld>,gdc::LayerDataWithWorldHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataWithWorld,std::shared_ptr<gdc::SubtileClipMask>>>>::clear(void *a1)
{
  if (a1[3])
  {
    uint64_t v2 = (void *)a1[2];
    while (v2)
    {
      uint64_t v3 = v2;
      uint64_t v2 = (void *)*v2;
      int8x8_t v4 = (std::__shared_weak_count *)v3[6];
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
        unint64_t v5 = (std::__shared_weak_count *)v3[3];
        if (v5)
        {
LABEL_8:
          if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
      }
      else
      {
        unint64_t v5 = (std::__shared_weak_count *)v3[3];
        if (v5) {
          goto LABEL_8;
        }
      }
      operator delete(v3);
    }
    a1[2] = 0;
    uint64_t v6 = a1[1];
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
        *(void *)(*a1 + 8 * i) = 0;
    }
    a1[3] = 0;
  }
}

void std::__shared_ptr_emplace<gdc::SubtileClipMask>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1) {
    operator delete(v1);
  }
}

void geo::Pool<md::MapTileDataRenderable<md::PolygonTileData>>::disposeElements(uint64_t a1)
{
  BOOL v29 = 0;
  uint64_t v30 = 0;
  uint64_t v28 = &v29;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      int8x8_t v4 = &v29;
      unint64_t v5 = &v29;
      if (v29)
      {
        uint64_t v6 = v29;
        while (1)
        {
          while (1)
          {
            unint64_t v5 = (uint64_t **)v6;
            unint64_t v7 = v6[4];
            if ((unint64_t)v2 >= v7) {
              break;
            }
            uint64_t v6 = *v5;
            int8x8_t v4 = v5;
            if (!*v5) {
              goto LABEL_12;
            }
          }
          if (v7 >= (unint64_t)v2) {
            break;
          }
          uint64_t v6 = v5[1];
          if (!v6)
          {
            int8x8_t v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        uint64_t v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *uint64_t v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *int8x8_t v4 = v8;
        if (*v28)
        {
          uint64_t v28 = (uint64_t **)*v28;
          uint64_t v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        uint64_t v3 = ++v30;
        uint64_t v2 = *(void **)(a1 + 40);
      }
      uint64_t v2 = (void *)*v2;
      *(void *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  unint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void **)a1;
  uint64_t v11 = (void *)(a1 + 8);
  BOOL v12 = v3 == *(void *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11) {
      goto LABEL_47;
    }
    goto LABEL_49;
  }
  uint64_t v14 = 1;
  do
  {
    if (v14)
    {
      unint64_t v15 = 0;
      uint64_t v16 = v10[4];
      do
      {
        uint64_t v17 = (void (***)(void))(v16 + 400 * v15);
        uint64_t v18 = v29;
        if (!v29) {
          goto LABEL_28;
        }
        uint64_t v19 = &v29;
        do
        {
          uint64_t v20 = v18;
          uint64_t v21 = v19;
          unint64_t v22 = v18[4];
          uint64_t v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            uint64_t v23 = (uint64_t **)v20;
            uint64_t v19 = (uint64_t **)v20;
          }
          uint64_t v18 = *v23;
        }
        while (v18);
        if (v19 == &v29) {
          goto LABEL_28;
        }
        if (v22 < (unint64_t)v17) {
          uint64_t v20 = (uint64_t *)v21;
        }
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          unint64_t v9 = *(void *)(a1 + 24);
        }
        ++v15;
        uint64_t v14 = v9;
      }
      while (v15 < v9);
    }
    uint64_t v24 = (void *)v10[1];
    if (v24)
    {
      do
      {
        uint64_t v25 = v24;
        uint64_t v24 = (void *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        uint64_t v25 = (void *)v10[2];
        BOOL v12 = *v25 == (void)v10;
        uint64_t v10 = v25;
      }
      while (!v12);
    }
    uint64_t v10 = v25;
  }
  while (v25 != v11);
  uint64_t v10 = *(void **)a1;
  if (*(void **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      uint64_t v26 = (void *)v10[1];
      if (v26)
      {
        do
        {
          uint64_t v27 = v26;
          uint64_t v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          uint64_t v27 = (void *)v10[2];
          BOOL v12 = *v27 == (void)v10;
          uint64_t v10 = v27;
        }
        while (!v12);
      }
      uint64_t v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v11;
  *(void *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_1A18716BC(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

void **std::insert_iterator<SceneComponents::LayerDataExitingView<(md::MapDataType)33>>::operator=[abi:nn180100](void **a1, uint64_t a2)
{
  int8x8_t v4 = (uint64_t **)*a1;
  unint64_t v5 = std::__tree<gdc::LayerDataWithWorld>::__find_equal<gdc::LayerDataWithWorld>(*a1, a1[1], &v18, &v17, *(void *)a2, *(unsigned char *)(a2 + 16));
  uint64_t v6 = (void *)*v5;
  if (!*v5)
  {
    unint64_t v7 = v5;
    uint64_t v8 = operator new(0x38uLL);
    uint64_t v6 = v8;
    uint64_t v9 = *(void *)(a2 + 8);
    v8[4] = *(void *)a2;
    v8[5] = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    *((unsigned char *)v8 + 48) = *(unsigned char *)(a2 + 16);
    uint64_t v10 = v18;
    *uint64_t v8 = 0;
    v8[1] = 0;
    v8[2] = v10;
    uint64_t *v7 = (uint64_t)v8;
    uint64_t v11 = (uint64_t *)**v4;
    BOOL v12 = v8;
    if (v11)
    {
      *int8x8_t v4 = v11;
      BOOL v12 = (uint64_t *)*v7;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v4[1], v12);
    uint64_t v4[2] = (uint64_t *)((char *)v4[2] + 1);
  }
  a1[1] = v6;
  uint64_t v13 = (void *)v6[1];
  if (v13)
  {
    do
    {
      uint64_t v14 = v13;
      uint64_t v13 = (void *)*v13;
    }
    while (v13);
  }
  else
  {
    do
    {
      uint64_t v14 = (void *)v6[2];
      BOOL v15 = *v14 == (void)v6;
      uint64_t v6 = v14;
    }
    while (!v15);
  }
  a1[1] = v14;
  return a1;
}

void geo::Pool<md::MapTileDataRenderable<md::DaVinciTrafficTileData>>::disposeElements(uint64_t a1)
{
  BOOL v29 = 0;
  uint64_t v30 = 0;
  uint64_t v28 = &v29;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      int8x8_t v4 = &v29;
      unint64_t v5 = &v29;
      if (v29)
      {
        uint64_t v6 = v29;
        while (1)
        {
          while (1)
          {
            unint64_t v5 = (uint64_t **)v6;
            unint64_t v7 = v6[4];
            if ((unint64_t)v2 >= v7) {
              break;
            }
            uint64_t v6 = *v5;
            int8x8_t v4 = v5;
            if (!*v5) {
              goto LABEL_12;
            }
          }
          if (v7 >= (unint64_t)v2) {
            break;
          }
          uint64_t v6 = v5[1];
          if (!v6)
          {
            int8x8_t v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        uint64_t v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *uint64_t v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *int8x8_t v4 = v8;
        if (*v28)
        {
          uint64_t v28 = (uint64_t **)*v28;
          uint64_t v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        uint64_t v3 = ++v30;
        uint64_t v2 = *(void **)(a1 + 40);
      }
      uint64_t v2 = (void *)*v2;
      *(void *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  unint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void **)a1;
  uint64_t v11 = (void *)(a1 + 8);
  BOOL v12 = v3 == *(void *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11) {
      goto LABEL_47;
    }
    goto LABEL_49;
  }
  uint64_t v14 = 1;
  do
  {
    if (v14)
    {
      unint64_t v15 = 0;
      uint64_t v16 = v10[4];
      do
      {
        uint64_t v17 = (void (***)(void))(v16 + 400 * v15);
        uint64_t v18 = v29;
        if (!v29) {
          goto LABEL_28;
        }
        uint64_t v19 = &v29;
        do
        {
          uint64_t v20 = v18;
          uint64_t v21 = v19;
          unint64_t v22 = v18[4];
          uint64_t v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            uint64_t v23 = (uint64_t **)v20;
            uint64_t v19 = (uint64_t **)v20;
          }
          uint64_t v18 = *v23;
        }
        while (v18);
        if (v19 == &v29) {
          goto LABEL_28;
        }
        if (v22 < (unint64_t)v17) {
          uint64_t v20 = (uint64_t *)v21;
        }
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          unint64_t v9 = *(void *)(a1 + 24);
        }
        ++v15;
        uint64_t v14 = v9;
      }
      while (v15 < v9);
    }
    uint64_t v24 = (void *)v10[1];
    if (v24)
    {
      do
      {
        uint64_t v25 = v24;
        uint64_t v24 = (void *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        uint64_t v25 = (void *)v10[2];
        BOOL v12 = *v25 == (void)v10;
        uint64_t v10 = v25;
      }
      while (!v12);
    }
    uint64_t v10 = v25;
  }
  while (v25 != v11);
  uint64_t v10 = *(void **)a1;
  if (*(void **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      uint64_t v26 = (void *)v10[1];
      if (v26)
      {
        do
        {
          uint64_t v27 = v26;
          uint64_t v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          uint64_t v27 = (void *)v10[2];
          BOOL v12 = *v27 == (void)v10;
          uint64_t v10 = v27;
        }
        while (!v12);
      }
      uint64_t v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v11;
  *(void *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_1A1871A54(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

void geo::Pool<md::DaVinciGroundRenderable>::disposeElements(uint64_t a1)
{
  BOOL v29 = 0;
  uint64_t v30 = 0;
  uint64_t v28 = &v29;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      int8x8_t v4 = &v29;
      unint64_t v5 = &v29;
      if (v29)
      {
        uint64_t v6 = v29;
        while (1)
        {
          while (1)
          {
            unint64_t v5 = (uint64_t **)v6;
            unint64_t v7 = v6[4];
            if ((unint64_t)v2 >= v7) {
              break;
            }
            uint64_t v6 = *v5;
            int8x8_t v4 = v5;
            if (!*v5) {
              goto LABEL_12;
            }
          }
          if (v7 >= (unint64_t)v2) {
            break;
          }
          uint64_t v6 = v5[1];
          if (!v6)
          {
            int8x8_t v4 = v5 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        uint64_t v8 = (uint64_t *)operator new(0x28uLL);
        v8[4] = (uint64_t)v2;
        *uint64_t v8 = 0;
        v8[1] = 0;
        v8[2] = (uint64_t)v5;
        *int8x8_t v4 = v8;
        if (*v28)
        {
          uint64_t v28 = (uint64_t **)*v28;
          uint64_t v8 = *v4;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v29, v8);
        uint64_t v3 = ++v30;
        uint64_t v2 = *(void **)(a1 + 40);
      }
      uint64_t v2 = (void *)*v2;
      *(void *)(a1 + 40) = v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  unint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void **)a1;
  uint64_t v11 = (void *)(a1 + 8);
  BOOL v12 = v3 == *(void *)(a1 + 16) * v9 || v10 == v11;
  if (v12 || v9 == 0)
  {
    if (v10 == v11) {
      goto LABEL_47;
    }
    goto LABEL_49;
  }
  uint64_t v14 = 1;
  do
  {
    if (v14)
    {
      unint64_t v15 = 0;
      uint64_t v16 = v10[4];
      do
      {
        uint64_t v17 = (void (***)(void))(v16 + 816 * v15);
        uint64_t v18 = v29;
        if (!v29) {
          goto LABEL_28;
        }
        uint64_t v19 = &v29;
        do
        {
          uint64_t v20 = v18;
          uint64_t v21 = v19;
          unint64_t v22 = v18[4];
          uint64_t v23 = (uint64_t **)(v18 + 1);
          if (v22 >= (unint64_t)v17)
          {
            uint64_t v23 = (uint64_t **)v20;
            uint64_t v19 = (uint64_t **)v20;
          }
          uint64_t v18 = *v23;
        }
        while (v18);
        if (v19 == &v29) {
          goto LABEL_28;
        }
        if (v22 < (unint64_t)v17) {
          uint64_t v20 = (uint64_t *)v21;
        }
        if ((unint64_t)v17 < v20[4])
        {
LABEL_28:
          (**v17)(v17);
          unint64_t v9 = *(void *)(a1 + 24);
        }
        ++v15;
        uint64_t v14 = v9;
      }
      while (v15 < v9);
    }
    uint64_t v24 = (void *)v10[1];
    if (v24)
    {
      do
      {
        uint64_t v25 = v24;
        uint64_t v24 = (void *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        uint64_t v25 = (void *)v10[2];
        BOOL v12 = *v25 == (void)v10;
        uint64_t v10 = v25;
      }
      while (!v12);
    }
    uint64_t v10 = v25;
  }
  while (v25 != v11);
  uint64_t v10 = *(void **)a1;
  if (*(void **)a1 != v11)
  {
    do
    {
LABEL_49:
      free((void *)v10[4]);
      uint64_t v26 = (void *)v10[1];
      if (v26)
      {
        do
        {
          uint64_t v27 = v26;
          uint64_t v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          uint64_t v27 = (void *)v10[2];
          BOOL v12 = *v27 == (void)v10;
          uint64_t v10 = v27;
        }
        while (!v12);
      }
      uint64_t v10 = v27;
    }
    while (v27 != v11);
  }
LABEL_47:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v11;
  *(void *)(a1 + 40) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v29);
}

void sub_1A1871CE8(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v1);
  _Unwind_Resume(a1);
}

void anonymous namespace'::_evaluateOverlappingDataOfType(char **a1, uint64_t *a2, uint64_t *a3, int a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v5 = *a3;
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  int v47 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v7 = *(unsigned __int8 *)(v5 + 169);
  int v8 = *(_DWORD *)(v5 + 172);
  int v44 = *(_DWORD *)(v5 + 176);
  int v45 = *(unsigned __int8 *)(v5 + 168);
  int v9 = *((unsigned __int8 *)a3 + 16);
  uint64_t v10 = *a2;
  {
    int v41 = a4;
    a4 = v41;
    if (v42)
    {
      qword_1EB3176C0 = 0;
      qword_1EB3176B8 = 0;
      md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet = (uint64_t)&qword_1EB3176B8;
      __cxa_atexit((void (*)(void *))std::set<gdc::LayerDataWithWorld>::~set[abi:nn180100], &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet, &dword_1A1780000);
      a4 = v41;
    }
  }
  uint64_t v11 = *(unsigned __int16 **)(v10 + 48);
  BOOL v12 = *(unsigned __int16 **)(v10 + 56);
  uint64_t v13 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
  if (v11 == v12)
  {
    int v15 = v44;
  }
  else
  {
    uint64_t v14 = *(unsigned __int16 **)(v10 + 48);
    int v15 = v44;
    while (*v14 != a4)
    {
      v14 += 16;
      if (v14 == v12) {
        goto LABEL_16;
      }
    }
    if (v14 == v12)
    {
      uint64_t v13 = &md::SceneStateManager::layerDataInView(unsigned short)const::kEmptySet;
    }
    else
    {
      while (*v11 != a4)
      {
        v11 += 16;
        if (v11 == v12)
        {
          uint64_t v11 = v12;
          break;
        }
      }
      uint64_t v13 = (uint64_t *)(v11 + 4);
    }
  }
LABEL_16:
  uint64_t v18 = *v13;
  uint64_t v16 = v13 + 1;
  uint64_t v17 = (void *)v18;
  if ((uint64_t *)v18 != v16)
  {
    int v43 = v8;
    int v19 = v45;
    while (1)
    {
      if (*((char *)v17 + 48) != v9)
      {
LABEL_65:
        uint64_t v38 = (uint64_t *)v17[1];
        if (!v38) {
          goto LABEL_69;
        }
        goto LABEL_66;
      }
      uint64_t v20 = v17[4];
      uint64_t v21 = (std::__shared_weak_count *)v17[5];
      *(void *)&long long v46 = v20;
      *((void *)&v46 + 1) = v21;
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v19 == *(unsigned __int8 *)(v20 + 168)) {
        break;
      }
LABEL_63:
      if (!v21 || atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_65;
      }
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      uint64_t v38 = (uint64_t *)v17[1];
      if (!v38)
      {
        do
        {
LABEL_69:
          BOOL v39 = (uint64_t *)v17[2];
          BOOL v40 = *v39 == (void)v17;
          uint64_t v17 = v39;
        }
        while (!v40);
        goto LABEL_18;
      }
      do
      {
LABEL_66:
        BOOL v39 = v38;
        uint64_t v38 = (uint64_t *)*v38;
      }
      while (v38);
LABEL_18:
      uint64_t v17 = v39;
      if (v39 == v16)
      {
        uint64_t v6 = v47;
        goto LABEL_73;
      }
    }
    unsigned int v22 = *(unsigned __int8 *)(v20 + 169);
    char v23 = v7 - v22;
    if (v7 >= v22)
    {
      if (v7 == v22 && v8 == *(_DWORD *)(v20 + 172) && v15 == *(_DWORD *)(v20 + 176)) {
        goto LABEL_37;
      }
    }
    else if (v8 == *(int *)(v20 + 172) >> (v22 - v7) && v15 == *(int *)(v20 + 176) >> (v22 - v7))
    {
LABEL_37:
      uint64_t v25 = a1[1];
      unint64_t v24 = (unint64_t)a1[2];
      if ((unint64_t)v25 >= v24)
      {
        uint64_t v27 = *a1;
        uint64_t v28 = (v25 - *a1) >> 4;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 60) {
          abort();
        }
        uint64_t v30 = v24 - (void)v27;
        if (v30 >> 3 > v29) {
          unint64_t v29 = v30 >> 3;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v29;
        }
        if (v31 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        BOOL v32 = (char *)operator new(16 * v31);
        unint64_t v33 = &v32[16 * v28];
        *(_OWORD *)unint64_t v33 = v46;
        if (*((void *)&v46 + 1))
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v46 + 1) + 8), 1uLL, memory_order_relaxed);
          uint64_t v27 = *a1;
          uint64_t v25 = a1[1];
        }
        uint64_t v34 = &v32[16 * v31];
        uint64_t v26 = v33 + 16;
        if (v25 == v27)
        {
          *a1 = v33;
          a1[1] = v26;
          a1[2] = v34;
        }
        else
        {
          int v35 = v25;
          do
          {
            long long v36 = *((_OWORD *)v35 - 1);
            v35 -= 16;
            *((_OWORD *)v33 - 1) = v36;
            v33 -= 16;
            *(void *)int v35 = 0;
            *((void *)v35 + 1) = 0;
          }
          while (v35 != v27);
          *a1 = v33;
          a1[1] = v26;
          a1[2] = v34;
          do
          {
            BOOL v37 = (std::__shared_weak_count *)*((void *)v25 - 1);
            if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
            v25 -= 16;
          }
          while (v25 != v27);
        }
        if (v27) {
          operator delete(v27);
        }
        int v15 = v44;
        int v19 = v45;
      }
      else
      {
        *(void *)uint64_t v25 = v20;
        *((void *)v25 + 1) = v21;
        if (v21) {
          atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v26 = v25 + 16;
        int v19 = v45;
      }
      a1[1] = v26;
      uint64_t v21 = (std::__shared_weak_count *)*((void *)&v46 + 1);
      int v8 = v43;
      goto LABEL_63;
    }
    if (v22 >= v7)
    {
      if (v22 != v7 || *(_DWORD *)(v20 + 172) != v8 || *(_DWORD *)(v20 + 176) != v15) {
        goto LABEL_63;
      }
    }
    else if (*(_DWORD *)(v20 + 172) != v8 >> v23 || *(_DWORD *)(v20 + 176) != v15 >> v23)
    {
      goto LABEL_63;
    }
    goto LABEL_37;
  }
LABEL_73:
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1A18721A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  md::DynamicTrafficTileList::~DynamicTrafficTileList(v3);
  _Unwind_Resume(a1);
}

void md::PairedTiledRenderLayer<md::ElevatedPolygonRenderable>::_determineEnteringRenderables(md::LayoutContext const&)::{lambda(std::shared_ptr<md::ElevatedStrokeTileData> const&,unsigned char,std::shared_ptr<md::DaVinciGroundTileData> const&)#1}::operator()(uint64_t *a1, uint64_t *a2, char a3, void *a4)
{
  uint64_t v8 = *a1;
  int v9 = (void *)*a4;
  *(_WORD *)BOOL v37 = *(_WORD *)(*a4 + 168);
  uint64_t v38 = *(void *)((char *)v9 + 172);
  double v10 = *((double *)v9 + 75);
  double v11 = *((double *)v9 + 76);
  int v12 = *(unsigned __int8 *)(md::LayoutContext::frameState((md::LayoutContext *)a1[2]) + 128);
  md::GeometryContext::transformConstantData((double *)&v35, (uint64_t *)a1[3], v37, v12, v10, v11);
  uint64_t v13 = *(void **)(v8 + 264);
  if (!v13)
  {
    geo::Pool<md::ElevatedPolygonRenderable>::allocateSlab((uint64_t **)(v8 + 224));
    uint64_t v13 = *(void **)(v8 + 264);
  }
  *(void *)(v8 + 264) = *v13;
  md::PairedMapTileDataRenderable<md::ElevatedStrokeTileData,md::DaVinciGroundTileData>::PairedMapTileDataRenderable((uint64_t)v13, a2, a3, (v12 - 1) < 3u, &v35, a4);
  *uint64_t v13 = &unk_1EF513AE0;
  uint64_t v14 = a1[1];
  uint64_t v16 = *(void **)(v14 + 8);
  unint64_t v15 = *(void *)(v14 + 16);
  if ((unint64_t)v16 >= v15)
  {
    uint64_t v18 = *(unsigned char **)v14;
    uint64_t v19 = (uint64_t)v16 - *(void *)v14;
    uint64_t v20 = v19 >> 3;
    unint64_t v21 = (v19 >> 3) + 1;
    if (v21 >> 61) {
      abort();
    }
    uint64_t v22 = v15 - (void)v18;
    if (v22 >> 2 > v21) {
      unint64_t v21 = v22 >> 2;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23)
    {
      if (v23 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v24 = operator new(8 * v23);
    }
    else
    {
      unint64_t v24 = 0;
    }
    uint64_t v25 = &v24[8 * v20];
    uint64_t v26 = &v24[8 * v23];
    *uint64_t v25 = v13;
    uint64_t v17 = v25 + 1;
    if (v16 == (void *)v18)
    {
      uint64_t v18 = v16;
    }
    else
    {
      unint64_t v27 = (char *)v16 - v18 - 8;
      if (v27 < 0x58) {
        goto LABEL_34;
      }
      if ((unint64_t)((char *)v16 - &v24[v19]) < 0x20) {
        goto LABEL_34;
      }
      uint64_t v28 = (v27 >> 3) + 1;
      unint64_t v29 = &v24[8 * v20 - 16];
      uint64_t v30 = (long long *)(v16 - 2);
      uint64_t v31 = v28 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v32 = *v30;
        *(v29 - 1) = *(v30 - 1);
        *unint64_t v29 = v32;
        v29 -= 2;
        v30 -= 2;
        v31 -= 4;
      }
      while (v31);
      v25 -= v28 & 0x3FFFFFFFFFFFFFFCLL;
      v16 -= v28 & 0x3FFFFFFFFFFFFFFCLL;
      if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          uint64_t v33 = *--v16;
          *--uint64_t v25 = v33;
        }
        while (v16 != (void *)v18);
        uint64_t v18 = *(unsigned char **)v14;
      }
    }
    *(void *)uint64_t v14 = v25;
    *(void *)(v14 + 8) = v17;
    *(void *)(v14 + 16) = v26;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    void *v16 = v13;
    uint64_t v17 = v16 + 1;
  }
  *(void *)(v14 + 8) = v17;
  uint64_t v34 = v36;
  if (v36)
  {
    if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_1A1872448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *geo::Pool<md::ElevatedPolygonRenderable>::allocateSlab(uint64_t **a1)
{
  uint64_t result = (char *)malloc_type_malloc((size_t)a1[4], 0x160B39uLL);
  uint64_t v3 = result;
  uint64_t v5 = a1 + 1;
  int8x8_t v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v4;
        unint64_t v7 = v4[4];
        if ((unint64_t)result >= v7) {
          break;
        }
        int8x8_t v4 = *v6;
        uint64_t v5 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      if (v7 >= (unint64_t)result) {
        break;
      }
      int8x8_t v4 = v6[1];
      if (!v4)
      {
        uint64_t v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v6 = a1 + 1;
LABEL_8:
    uint64_t v8 = (uint64_t *)operator new(0x28uLL);
    v8[4] = (uint64_t)v3;
    *uint64_t v8 = 0;
    v8[1] = 0;
    v8[2] = (uint64_t)v6;
    *uint64_t v5 = v8;
    int v9 = (uint64_t *)**a1;
    if (v9)
    {
      *a1 = v9;
      double v10 = *v5;
    }
    else
    {
      double v10 = v8;
    }
    uint64_t result = (char *)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  double v11 = a1[5];
  uint64_t v12 = 464 * (void)a1[3] - 464;
  if ((v12 & 0x8000000000000000) == 0)
  {
    uint64_t v13 = &v3[v12];
    do
    {
      *(void *)uint64_t v13 = v11;
      uint64_t v14 = v13 - 464;
      double v11 = (uint64_t *)v13;
      uint64_t v13 = v14;
    }
    while (v14 >= v3);
    double v11 = (uint64_t *)(v14 + 464);
  }
  a1[5] = v11;
  return result;
}

uint64_t md::AnimatedCrossFadeLabelPart::AnimatedCrossFadeLabelPart(uint64_t a1, md::LabelManager *a2, md::Label *a3, int a4, md::LabelPart *a5, md::LabelPart *a6, char a7)
{
  uint64_t v13 = md::CrossFadeLabelPart::CrossFadeLabelPart((md::CrossFadeLabelPart *)a1, a5, a6, a7);
  *(void *)uint64_t v13 = &unk_1EF547510;
  uint64_t v14 = (void *)((char *)v13 + 640);
  md::LabelAnimator::LabelAnimator((uint64_t)v13 + 640, a2, a3);
  *(unsigned char *)(a1 + 736) = a4;
  *(_WORD *)(a1 + 737) = 1;
  (*(void (**)(uint64_t, md::Label *))(*(void *)a1 + 16))(a1, a3);
  (*(void (**)(md::LabelPart *))(*(void *)a5 + 184))(a5);
  (*(void (**)(md::LabelPart *))(*(void *)a6 + 184))(a6);
  md::LabelPartContent::LabelPartContent((md::LabelPartContent *)buf, a5);
  md::LabelPartContent::LabelPartContent((md::LabelPartContent *)&v54, a6);
  switch(a4)
  {
    case 1:
    case 2:
      md::LabelAnimator::setupIconMorphAnimation(v14, buf[0], v62, v54, (uint64_t)v56, 0x13E4CCCCDLL);
      *(_DWORD *)(a1 + 656) = 1045220557;
      goto LABEL_67;
    case 3:
      if (!*(unsigned char *)(*(void *)(a1 + 648) + 1245))
      {
        int v33 = 1;
        goto LABEL_37;
      }
      if (!*(unsigned char *)(*(void *)(*v14 + 432) + 12)) {
        goto LABEL_49;
      }
      md::LabelAnimator::setupBalloonAnimation((uint64_t)v14, 1, (uint64_t)buf, (uint64_t)&v54);
      goto LABEL_50;
    case 4:
      if (*(unsigned char *)(*(void *)(a1 + 648) + 1245))
      {
        if (*(unsigned char *)(*(void *)(*v14 + 432) + 12)) {
          md::LabelAnimator::setupBalloonAnimation((uint64_t)v14, 0, (uint64_t)buf, (uint64_t)&v54);
        }
        else {
LABEL_49:
        }
          md::LabelAnimator::setupIconMorphAnimation(v14, buf[0], v62, v54, (uint64_t)v56, 0x13E4CCCCDLL);
LABEL_50:
        *(_DWORD *)(a1 + 656) = 1056964608;
      }
      else
      {
        int v33 = 0;
LABEL_37:
        md::LabelAnimator::setupMKBalloonPickAnimations((uint64_t)v14, v33, (uint64_t)buf, (uint64_t)&v54);
      }
      goto LABEL_67;
    case 5:
      if (*(_DWORD *)buf)
      {
        md::LabelAnimator::setupIconMorphAnimation(v14, buf[0], v62, v54, (uint64_t)v56, 0x13E4CCCCDLL);
        md::LabelAnimator::setupTextMorphAnimation(v14, v64, v57, 0, 0, 0x13E4CCCCDLL);
      }
      else if (v55)
      {
        LODWORD(v66) = 0;
        uint64_t v34 = *(float32x2_t **)(*(void *)(a1 + 640) + 368);
        float32x2_t v35 = *(float32x2_t *)(*(void *)(a1 + 648) + 664);
        float32x2_t v36 = *v34;
        float32x2_t v37 = v34[1];
        float v38 = v34[2].f32[0];
        BOOL v39 = md::LabelAnimator::resolveParams(v14, 1, 1u, 1, 0);
        float v40 = fmaxf(vaddv_f32(vmul_f32(v37, vsub_f32(v35, v36))) * v38, 0.0);
        if (v40 <= 1.0) {
          float v41 = v40 * 0.8;
        }
        else {
          float v41 = 0.8;
        }
        md::LabelAnimator::createFadeAnimation((uint64_t)v14, v55, v41, 1, (uint64_t)v39, (float *)&v66);
LABEL_43:
        *(unsigned char *)(a1 + 729) = 1;
      }
LABEL_67:
      if (*(unsigned char *)(a1 + 728)) {
        goto LABEL_76;
      }
      if (!*(unsigned char *)(a1 + 730)) {
        goto LABEL_71;
      }
      if (*(unsigned char *)(*(void *)(*(void *)(a1 + 648) + 1192) + 52) == 2)
      {
        *(unsigned char *)(a1 + 730) = 0;
LABEL_71:
        long long v46 = *(md::LabelAnimationTrack ***)(a1 + 696);
        int v47 = *(md::LabelAnimationTrack ***)(a1 + 704);
        if (v46 == v47) {
          goto LABEL_75;
        }
        char v48 = 0;
        do
        {
          v15.n128_u32[0] = *(_DWORD *)(a1 + 660);
          md::LabelAnimationTrack::runAnimation(*v46, v15);
          unint64_t v49 = *v46++;
          v48 |= *((unsigned char *)v49 + 40) == 0;
        }
        while (v46 != v47);
        if ((v48 & 1) == 0) {
LABEL_75:
        }
          *(unsigned char *)(a1 + 728) = 1;
      }
LABEL_76:
      if (*(unsigned __int8 *)(a1 + 736) - 3 <= 1)
      {
        *(unsigned char *)(a1 + 738) = 1;
        if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
          dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
        }
        BOOL v50 = (id)GEOGetVectorKitPerformanceLog_log;
        BOOL v51 = v50;
        os_signpost_id_t v52 = *(unsigned __int8 *)(a1 + 736);
        if (*(unsigned char *)(a1 + 736) && os_signpost_enabled(v50))
        {
          *(_WORD *)std::string buf = 0;
          _os_signpost_emit_with_name_impl(&dword_1A1780000, v51, OS_SIGNPOST_INTERVAL_BEGIN, v52, "LabelsPickAnimation", "", buf, 2u);
        }
      }
      return a1;
    case 6:
      if (*(_DWORD *)buf)
      {
        md::LabelAnimator::setupIconMorphAnimation(v14, buf[0], v62, v54, (uint64_t)v56, 0);
        md::LabelAnimator::setupTextMorphAnimation(v14, v64, v57, 0, 0, 0);
        int v16 = (*(_DWORD *)buf >> 2) & 7;
        int v17 = (v54 >> 2) & 7;
        if (v16 == 2 && v17 == 3)
        {
          LODWORD(v66) = 0;
          uint64_t v18 = md::LabelAnimator::resolveParams(v14, 0, 6u, 1, 2);
          md::LabelAnimator::createIconRowScaleAnimation((uint64_t)v14, v65, 0, (uint64_t)v18);
          uint64_t v19 = md::LabelAnimator::resolveParams(v14, 1, 6u, 1, 2);
          md::LabelAnimator::createIconRowScaleAnimation((uint64_t)v14, v58, 1, (uint64_t)v19);
        }
        else if (v16 == 3 && v17 == 2)
        {
          LODWORD(v66) = 0;
          int v44 = md::LabelAnimator::resolveParams(v14, 0, 7u, 0, 2);
          md::LabelAnimator::createIconRowScaleAnimation((uint64_t)v14, v65, 0, (uint64_t)v44);
          int v45 = md::LabelAnimator::resolveParams(v14, 1, 7u, 0, 2);
          md::LabelAnimator::createIconRowScaleAnimation((uint64_t)v14, v58, 1, (uint64_t)v45);
        }
        else if (v16 == 3 && v17 == 4)
        {
          LODWORD(v66) = 0;
          md::LabelAnimator::resolveParams(v14, 0, 8u, 1, 2);
          md::LabelAnimator::createIconRowShiftAnimation((uint64_t)v14, v65, 0);
          md::LabelAnimator::resolveParams(v14, 1, 9u, 1, 2);
          md::LabelAnimator::createImageListFeatherAnimation((uint64_t)v14, v58, 1);
        }
        else if (v16 == 4 && v17 == 3)
        {
          LODWORD(v66) = 0;
          md::LabelAnimator::resolveParams(v14, 0, 9u, 0, 2);
          md::LabelAnimator::createImageListFeatherAnimation((uint64_t)v14, v65, 0);
          md::LabelAnimator::resolveParams(v14, 1, 8u, 0, 2);
          md::LabelAnimator::createIconRowShiftAnimation((uint64_t)v14, v58, 1);
        }
      }
      else
      {
        LODWORD(v66) = 0;
        int v42 = md::LabelAnimator::resolveParams(v14, 1, 1u, 1, 0);
        if (v56)
        {
          md::LabelAnimator::createFadeAnimation((uint64_t)v14, (uint64_t)v56, 0.0, 1, (uint64_t)v42, (float *)&v66);
          float v43 = *((float *)v42 + 3);
        }
        else
        {
          float v43 = 0.0;
        }
        if (v57)
        {
          md::LabelAnimator::createFadeAnimation((uint64_t)v14, v57, v43, 1, (uint64_t)v42, (float *)&v66);
          float v43 = *((float *)v42 + 3) + v43;
        }
        if (v58)
        {
          md::LabelAnimator::createFadeAnimation((uint64_t)v14, v58, v43, 1, (uint64_t)v42, (float *)&v66);
          if (v59) {
            md::LabelAnimator::createFadeAnimation((uint64_t)v14, v59, v43, 1, (uint64_t)v42, (float *)&v66);
          }
        }
      }
      goto LABEL_67;
    case 7:
      if (!v54 && v61)
      {
        LODWORD(v66) = 0;
        uint64_t v20 = md::LabelAnimator::resolveParams(v14, 0, 2u, 1, 0);
        md::LabelAnimator::createFadeAnimation((uint64_t)v14, v61, 0.0, 0, (uint64_t)v20, (float *)&v66);
        *(unsigned char *)(a1 + 729) = 1;
      }
      if (*(_DWORD *)buf || !v55) {
        goto LABEL_67;
      }
      LODWORD(v66) = 0;
      unint64_t v21 = md::LabelAnimator::resolveParams(v14, 1, 2u, 1, 0);
      md::LabelAnimator::createFadeAnimation((uint64_t)v14, v55, 0.0, 1, (uint64_t)v21, (float *)&v66);
      goto LABEL_43;
    case 8:
      LODWORD(v66) = 0;
      uint8_t v22 = buf[0];
      if ((buf[0] & 2) != 0)
      {
        uint64_t v23 = v63;
        uint64_t v24 = v64;
        uint64_t v25 = md::LabelAnimator::resolveParams(v14, 0, 0xFu, 1, 1);
        if (v23) {
          uint64_t v26 = v23;
        }
        else {
          uint64_t v26 = v24;
        }
        md::LabelAnimator::createFadeAnimation((uint64_t)v14, v26, 0.0, 0, (uint64_t)v25, (float *)&v66);
        uint8_t v22 = buf[0];
      }
      if (v22)
      {
        float v67 = 0.0;
        unint64_t v27 = md::LabelAnimator::resolveParams(v14, 0, 0x10u, 1, 0);
        md::LabelAnimator::createFadeAnimation((uint64_t)v14, v62, *(float *)&v66, 0, (uint64_t)v27, &v67);
      }
      goto LABEL_67;
    case 9:
      if (v56 && v57 && (*(unsigned int (**)(void))(*v56 + 224))() == 8)
      {
        uint64_t v28 = *(void *)(v56[72] + 8);
        uint64_t v29 = *(void *)(a1 + 672);
        uint64_t v30 = *(void *)(a1 + 664);
        if (v29 - v30 == -144)
        {
          while (v29 != v30)
          {
            long long v32 = *(void **)(v29 - 144);
            v29 -= 144;
            uint64_t v31 = v32;
            if (v32 != *(void **)(v29 + 16)) {
              free(v31);
            }
          }
          *(void *)(a1 + 672) = v30;
        }
        else
        {
          std::vector<md::LabelAnimation,geo::StdAllocator<md::LabelAnimation,mdm::Allocator>>::__append((uint64_t *)(a1 + 664));
          uint64_t v30 = *(void *)(a1 + 672);
        }
        *(unsigned char *)(v28 + 563) = 57 * ((v30 - *(void *)(a1 + 664)) >> 4) - 1;
        operator new();
      }
      *(unsigned char *)(a1 + 730) = 1;
      goto LABEL_67;
    default:
      goto LABEL_67;
  }
}

void sub_1A187390C(_Unwind_Exception *a1)
{
  md::LabelAnimator::~LabelAnimator(v2);
  md::CompositeLabelPart::~CompositeLabelPart(v1);
  _Unwind_Resume(a1);
}

md::CrossFadeLabelPart *md::CrossFadeLabelPart::CrossFadeLabelPart(md::CrossFadeLabelPart *this, md::LabelPart *a2, md::LabelPart *a3, char a4)
{
  *((_DWORD *)this + 2) = 1065353216;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = this;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 8) = 0;
  *(_OWORD *)((char *)this + 72) = xmmword_1A28FC750;
  *((void *)this + 11) = 1065353216;
  *((_DWORD *)this + 24) = 1065353216;
  *(_OWORD *)((char *)this + 100) = 0u;
  *((_DWORD *)this + 29) = 0;
  *(_OWORD *)((char *)this + 120) = xmmword_1A28FC750;
  *(_OWORD *)((char *)this + 136) = xmmword_1A28FC750;
  *(_OWORD *)((char *)this + 152) = xmmword_1A28FC750;
  *(_OWORD *)((char *)this + 168) = xmmword_1A28FCDA0;
  *((unsigned char *)this + 224) = 0;
  *((unsigned char *)this + 200) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 257) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 280) = xmmword_1A28FCE90;
  *(_OWORD *)((char *)this + 296) = xmmword_1A28FCEA0;
  *(_OWORD *)((char *)this + 312) = xmmword_1A28FC750;
  *((void *)this + 41) = 1065353216;
  *((_DWORD *)this + 84) = 1065353216;
  *((_DWORD *)this + 89) = 0;
  *(_OWORD *)((char *)this + 340) = 0u;
  *(_OWORD *)((char *)this + 360) = xmmword_1A28FC750;
  *(_OWORD *)((char *)this + 376) = xmmword_1A28FC750;
  *(_OWORD *)((char *)this + 392) = xmmword_1A28FC750;
  *(_OWORD *)((char *)this + 408) = xmmword_1A28FCDA0;
  *((unsigned char *)this + 464) = 0;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((unsigned char *)this + 440) = 0;
  *(_OWORD *)((char *)this + 497) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 520) = xmmword_1A28FCE90;
  *((_DWORD *)this + 134) = 1065353216;
  *(_OWORD *)((char *)this + 540) = 0u;
  *((_WORD *)this + 278) = 512;
  *((unsigned char *)this + 562) = 0;
  *(_DWORD *)((char *)this + 558) = 0;
  *(_WORD *)((char *)this + 563) = -1;
  *(_DWORD *)((char *)this + 565) = 0;
  *(void *)this = &unk_1EF538820;
  *((_OWORD *)this + 36) = 0u;
  *((void *)this + 74) = 0;
  uint64_t v6 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    double v10 = a2;
    char v9 = a4;
    uint64_t v6 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    a4 = v9;
    a2 = v10;
    if (v8) {
      operator new();
    }
  }
  *((void *)this + 75) = *((void *)v6 + 91);
  *((unsigned char *)this + 608) = 0;
  *((unsigned char *)this + 616) = 0;
  *(_WORD *)((char *)this + 629) = 0;
  *(void *)this = &unk_1EF538BB8;
  *((_DWORD *)this + 158) = 0;
  *((_WORD *)this + 318) = 8224;
  *((unsigned char *)this + 628) = a4;
  md::CompositeLabelPart::addLabelPart((uint64_t)this, a2);
  md::CompositeLabelPart::addLabelPart((uint64_t)this, a3);
  return this;
}

void sub_1A1873B54(_Unwind_Exception *a1)
{
  md::CompositeLabelPart::~CompositeLabelPart(v1);
  _Unwind_Resume(a1);
}

uint64_t md::PointLabelFeature::newRootPart(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v194 = *MEMORY[0x1E4F143B8];
  if (!a4) {
    return 0;
  }
  uint64_t v6 = a1[58];
  if (!v6) {
    return 0;
  }
  unsigned int v11 = *(_DWORD *)(a3 + 48);
  uint64_t v12 = a1 + 58;
  do
  {
    unsigned int v13 = *(_DWORD *)(v6 + 32);
    BOOL v14 = v13 >= v11;
    if (v13 >= v11) {
      __n128 v15 = (uint64_t *)v6;
    }
    else {
      __n128 v15 = (uint64_t *)(v6 + 8);
    }
    if (v14) {
      uint64_t v12 = (uint64_t *)v6;
    }
    uint64_t v6 = *v15;
  }
  while (*v15);
  if (v12 == a1 + 58 || v11 < *((_DWORD *)v12 + 8)) {
    return 0;
  }
  int v17 = v12 + 5;
  int v16 = (void *)v12[5];
  uint64_t v18 = v17[1] - (void)v16;
  if ((unint64_t)v18 < 9)
  {
    uint64_t v23 = 1;
  }
  else
  {
    unint64_t v19 = v18 >> 3;
    if (*v16) {
      uint64_t v20 = *v16 + 8;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = *(void *)(v20 + 72);
    uint64_t v22 = 2;
    if (v19 > 2) {
      uint64_t v22 = v19;
    }
    uint64_t v23 = 1;
    while (1)
    {
      uint64_t v24 = v16[v23];
      uint64_t v25 = v24 ? v24 + 8 : 0;
      if (*(void *)(v25 + 72) != v21 || *(unsigned __int8 *)(v25 + 129) > (int)*(float *)(a3 + 392)) {
        break;
      }
      if (v22 == ++v23)
      {
        uint64_t v23 = v22;
        break;
      }
    }
  }
  uint64_t v26 = (unsigned __int8 *)v16[v23 - 1];
  if (!v26) {
    return 0;
  }
  char v180 = 0;
  __int16 v184 = 0;
  char v185 = 0;
  __int16 v186 = 0;
  __int16 v187 = 0;
  char v188 = 0;
  unsigned int v189 = 0;
  uint64_t v190 = 0;
  uint64_t v191 = 0;
  BOOL v193 = 0;
  LOBYTE(__p[0]) = 0;
  float32x4_t v181 = 0;
  uint64_t v182 = 0;
  char v183 = 0;
  v177[0] = a2;
  v177[1] = a3;
  v177[2] = a4;
  v177[3] = (uint64_t)(a1 + 82);
  (*(void (**)(void **__return_ptr, uint64_t *))(*a1 + 672))(v174, a1);
  if (v180 == v176)
  {
    if (!v180) {
      goto LABEL_44;
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)v174;
    uint64_t v179 = v175;
    v174[1] = 0;
    uint64_t v175 = 0;
    v174[0] = 0;
  }
  else if (v180)
  {
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    char v180 = 0;
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v174;
    uint64_t v179 = v175;
    v174[1] = 0;
    uint64_t v175 = 0;
    v174[0] = 0;
    char v180 = 1;
  }
  if (v176 && v174[0])
  {
    v174[1] = v174[0];
    operator delete(v174[0]);
  }
LABEL_44:
  float32x4_t v181 = v26 + 8;
  if (*(float *)(a3 + 780) >= *(float *)(a3 + 204)) {
    char v30 = *(unsigned char *)(a4 + 250);
  }
  else {
    char v30 = *(unsigned char *)(a4 + 250) | 2;
  }
  if (v180)
  {
    uint64_t v31 = *(void *)(a4 + 296);
    if (!v31)
    {
      long long v32 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a4, 0);
      uint64_t v31 = *v32;
      *(void *)(a4 + 296) = *v32;
    }
    uint64_t v33 = *(unsigned __int8 *)(v31 + 97);
    if (v33)
    {
      if (!v180)
      {
        uint64_t result = std::__throw_bad_optional_access[abi:nn180100]();
        __break(1u);
        return result;
      }
      unint64_t v34 = v33 - 1;
      if (v34 < ((char *)__p[1] - (char *)__p[0]) >> 2) {
        __p[1] = (char *)__p[0] + 4 * v34;
      }
    }
  }
  if (v30)
  {
    uint64_t v37 = *(void *)(a4 + 296);
    if (!v37)
    {
      float v38 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a4, 0);
      uint64_t v37 = *v38;
      *(void *)(a4 + 296) = *v38;
    }
    BOOL v36 = *(unsigned char *)(v37 + 88) == 9;
    if ((*(unsigned char *)(a3 + 1270)
       || (unsigned __int8 v39 = atomic_load((unsigned __int8 *)(a3 + 1240)), (v39 & 1) == 0)
       || !*(unsigned char *)(a3 + 1245))
      && (uint64_t v35 = md::PointLabelFeature::newLayoutIconPart((md::PointLabelFeature *)v177, v27)) != 0
      || (uint64_t v35 = (*(uint64_t (**)(uint64_t *, uint64_t *))(*a1 + 656))(a1, v177)) != 0)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 176))(v35, 1);
      if (!*(unsigned char *)(a3 + 1245))
      {
        unsigned __int8 v40 = atomic_load((unsigned __int8 *)(a3 + 1240));
        if ((v40 & 1) != 0 && !*(unsigned char *)(a3 + 1245) && *(unsigned char *)(a3 + 822) != 1) {
          *(unsigned char *)(v35 + 567) = 1;
        }
      }
      if (*((unsigned char *)a1 + 652))
      {
        *(unsigned char *)(v35 + 567) = *(unsigned char *)(a2 + 3665) ^ 1;
        *(unsigned char *)(v35 + 568) = 1;
      }
    }
  }
  else
  {
    uint64_t v35 = 0;
    BOOL v36 = 0;
  }
  char v170 = v36;
  uint64_t v41 = 0;
  if ((v30 & 2) != 0)
  {
    switch(*(unsigned char *)(a4 + 144))
    {
      case 0:
      case 2:
        float v43 = (uint64_t (**)(uint64_t *, uint64_t *))(*a1 + 688);
        goto LABEL_86;
      case 5:
        uint64_t v46 = *(void *)(a4 + 312);
        if (!v46)
        {
          int v47 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(a4);
          uint64_t v46 = *v47;
          *(void *)(a4 + 312) = *v47;
        }
        int v48 = *(unsigned __int8 *)(v46 + 46);
        if (!*(unsigned char *)(v46 + 46))
        {
          if (*(unsigned char *)(v46 + 47) == 8) {
            int v48 = 6;
          }
          else {
            int v48 = 2;
          }
        }
        uint64_t AnnotationPart = md::PointLabelFeature::createAnnotationPart(a1, v177, 1, v48);
        goto LABEL_84;
      case 6:
        uint64_t AnnotationPart = md::PointLabelFeature::createGraphicAnnotationPart(a1, v177, 1, 1);
LABEL_84:
        uint64_t v41 = AnnotationPart;
        goto LABEL_71;
      case 9:
        float v43 = (uint64_t (**)(uint64_t *, uint64_t *))(*a1 + 696);
LABEL_86:
        unsigned int v44 = (*v43)(a1, v177);
        int v45 = 0;
        goto LABEL_87;
      case 0xA:
      case 0xB:
        unsigned int v44 = (*(uint64_t (**)(uint64_t *, uint64_t *))(*a1 + 712))(a1, v177);
        int v45 = 1;
LABEL_87:
        uint64_t v50 = md::PointLabelFeature::newTextPart(a1, v177, v44, v45);
        if (!v50)
        {
          uint64_t v41 = 0;
          goto LABEL_71;
        }
        if ((v30 & 8) != 0)
        {
          uint64_t v52 = *(void *)(a4 + 312);
          if (!v52)
          {
            unint64_t v53 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(a4);
            uint64_t v52 = *v53;
            *(void *)(a4 + 312) = *v53;
          }
          int v51 = *(unsigned __int8 *)(v52 + 46);
          if (!*(unsigned char *)(v52 + 46))
          {
            if (*(unsigned char *)(v52 + 47) == 8) {
              int v51 = 6;
            }
            else {
              int v51 = 2;
            }
          }
        }
        else if ((v30 & 0x10) != 0)
        {
          int v51 = 3;
        }
        else if ((v30 & 4) != 0)
        {
          int v51 = 4;
        }
        else
        {
          int v51 = 1;
        }
        uint64_t v171 = v35;
        uint64_t v54 = md::PointLabelFeature::createAnnotationPart(a1, v177, 1, v51);
        uint64_t v55 = (md::LabelPart *)v50;
        uint64_t v56 = *(void *)(a4 + 312);
        if (!v56)
        {
          uint64_t v57 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(a4);
          uint64_t v56 = *v57;
          *(void *)(a4 + 312) = *v57;
        }
        uint64_t v58 = v54;
        unsigned int v167 = v55;
        int v59 = *(unsigned __int8 *)(v56 + 51);
        uint64_t v60 = md::PointLabelFeature::createAnnotationPart(a1, v177, 2, v59);
        BOOL v61 = v59 == 6 || v51 == 6;
        char v62 = v170;
        if (v61) {
          char v62 = 1;
        }
        char v170 = v62;
        uint64_t v35 = v171;
        if (v58 | v60)
        {
          uint64_t v63 = (md::LabelPart *)v58;
          uint64_t v64 = (md::LabelPart *)v60;
          uint64_t v65 = mdm::Allocator::instance((mdm::Allocator *)v60);
          uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v65 + 16))(v65, 696, 8);
          uint64_t v66 = md::StackLabelPart::StackLabelPart(v41, 0, 0, 0, 0);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v66 + 176))(v66, 6);
          md::CompositeLabelPart::addLabelPart(v41, v167);
          if (v63) {
            md::CompositeLabelPart::addLabelPart(v41, v63);
          }
          if (v64) {
            md::CompositeLabelPart::addLabelPart(v41, v64);
          }
        }
        else
        {
          uint64_t v41 = (uint64_t)v167;
        }
        BOOL v42 = v171 != 0;
        break;
      default:
        goto LABEL_71;
    }
  }
  else
  {
LABEL_71:
    BOOL v42 = v35 != 0;
    if (!(v35 | v41))
    {
      uint64_t v28 = 0;
      goto LABEL_216;
    }
  }
  int v67 = *(unsigned __int8 *)(a3 + 256);
  uint64_t v68 = v26 + 139;
  if (v67 == 2) {
    uint64_t v68 = v26 + 140;
  }
  if (v67 == 3) {
    double v69 = v26 + 141;
  }
  else {
    double v69 = v68;
  }
  uint64_t v168 = *v69;
  uint64_t v165 = a1[72];
  uint64_t v70 = v165 + 32 * v168;
  if (!v42 || *(unsigned char *)(a4 + 242) || (float32x2_t v110 = *(_WORD **)v70, *(void *)v70 == *(void *)(v70 + 8)))
  {
    *(_DWORD *)float32x4_t v173 = 150994944;
    v173[4] = 0;
  }
  else
  {
    *(_WORD *)float32x4_t v173 = *v110;
    v173[2] = 0;
    *(_WORD *)&v173[3] = *(_WORD *)((char *)v110 + 3);
  }
  float32x4_t v161 = (unsigned __int8 **)(v165 + 32 * v168);
  int64_t v71 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    int64_t v71 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v156) {
      operator new();
    }
  }
  uint64_t v72 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)v71 + 91) + 16))(*((void *)v71 + 91), 968, 8);
  uint64_t v28 = v72;
  uint64_t v73 = v72 + 716;
  int v74 = *a5;
  float v75 = (_OWORD *)(v72 + 280);
  uint64_t v76 = (unsigned __int8 *)(a3 + 317);
  unsigned __int8 v77 = v26[138];
  int v163 = v74;
  *(_DWORD *)(v72 + 8) = 1065353216;
  if (v74) {
    uint64_t v76 = v173;
  }
  float32x4_t v162 = v76;
  *(void *)(v72 + 16) = 0;
  *(void *)(v72 + 24) = v72;
  long long v78 = 0uLL;
  *(_OWORD *)(v72 + 32) = 0u;
  *(_OWORD *)(v72 + 48) = 0u;
  long long v79 = xmmword_1A28FC750;
  *(_OWORD *)(v72 + 72) = xmmword_1A28FC750;
  *(void *)(v72 + 64) = 0;
  unint64_t v80 = 1065353216;
  *(void *)(v72 + 88) = 1065353216;
  *(_DWORD *)(v72 + 96) = 1065353216;
  *(_OWORD *)(v72 + 100) = 0u;
  *(_DWORD *)(v72 + 116) = 0;
  *(_OWORD *)(v72 + 120) = xmmword_1A28FC750;
  *(_OWORD *)(v72 + 136) = xmmword_1A28FC750;
  *(_OWORD *)(v72 + 152) = xmmword_1A28FC750;
  *(_OWORD *)(v72 + 168) = xmmword_1A28FCDA0;
  *(unsigned char *)(v72 + 224) = 0;
  *(unsigned char *)(v72 + 200) = 0;
  *(_OWORD *)(v72 + 184) = 0u;
  *(_OWORD *)(v72 + 257) = 0u;
  *(_OWORD *)(v72 + 248) = 0u;
  *(_OWORD *)(v72 + 232) = 0u;
  *float v75 = xmmword_1A28FCE90;
  *(_OWORD *)(v72 + 296) = xmmword_1A28FCEA0;
  *(_OWORD *)(v72 + 312) = xmmword_1A28FC750;
  *(void *)(v72 + 328) = 1065353216;
  *(_DWORD *)(v72 + 336) = 1065353216;
  *(_DWORD *)(v72 + 356) = 0;
  *(_OWORD *)(v72 + 340) = 0u;
  *(_OWORD *)(v72 + 360) = xmmword_1A28FC750;
  *(_OWORD *)(v72 + 376) = xmmword_1A28FC750;
  *(_OWORD *)(v72 + 392) = xmmword_1A28FC750;
  *(_OWORD *)(v72 + 408) = xmmword_1A28FCDA0;
  *(unsigned char *)(v72 + 464) = 0;
  *(_OWORD *)(v72 + 424) = 0u;
  *(unsigned char *)(v72 + 440) = 0;
  *(_OWORD *)(v72 + 497) = 0u;
  *(_OWORD *)(v72 + 472) = 0u;
  *(_OWORD *)(v72 + 488) = 0u;
  *(_OWORD *)(v72 + 520) = xmmword_1A28FCE90;
  *(_DWORD *)(v72 + 536) = 1065353216;
  *(_OWORD *)(v72 + 540) = 0u;
  *(_WORD *)(v72 + 556) = 512;
  *(unsigned char *)(v72 + 562) = 0;
  *(_DWORD *)(v72 + 558) = 0;
  *(_WORD *)(v72 + 563) = -1;
  *(_DWORD *)(v72 + 565) = 0;
  *(void *)uint64_t v72 = &unk_1EF538820;
  *(_OWORD *)(v72 + 576) = 0u;
  *(void *)(v72 + 592) = 0;
  {
    long long v79 = xmmword_1A28FC750;
    long long v78 = 0uLL;
    if (v157) {
      operator new();
    }
  }
  unint64_t v81 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  *(void *)(v28 + 600) = mdm::Allocator::instance(void)::alloc;
  *(unsigned char *)(v28 + 608) = 0;
  *(unsigned char *)(v28 + 616) = 0;
  *(_WORD *)(v28 + 628) = 1;
  *(unsigned char *)(v28 + 630) = 0;
  *(void *)uint64_t v28 = &unk_1EF540EB8;
  *(_OWORD *)(v28 + 632) = v78;
  *(_OWORD *)(v28 + 648) = v78;
  v75[24] = v79;
  *(unsigned char *)(v28 + 680) = 0;
  *(_OWORD *)(v28 + 684) = v78;
  *(_OWORD *)(v28 + 700) = v78;
  *(_OWORD *)uint64_t v73 = v79;
  *(unsigned char *)(v28 + 732) = 0;
  *(void *)(v28 + 736) = 0;
  *(void *)(v28 + 752) = 0;
  *(void *)(v28 + 744) = 0;
  {
    unint64_t v81 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v158) {
      operator new();
    }
  }
  *(void *)(v28 + 760) = *((void *)v81 + 91);
  *(void *)(v28 + 776) = 0;
  *(void *)(v28 + 768) = 0;
  *(_DWORD *)(v28 + 784) = 255;
  *(_DWORD *)(v28 + 792) = 0;
  *(void *)(v28 + 800) = 0;
  *(void *)(v28 + 816) = 0;
  *(void *)(v28 + 808) = 0;
  {
    unint64_t v81 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v159) {
      operator new();
    }
  }
  BOOL v172 = (unint64_t *)(v28 + 800);
  *(void *)(v28 + 824) = *((void *)v81 + 91);
  *(_DWORD *)(v28 + 832) = 150994944;
  *(_DWORD *)(v28 + 836) = 0;
  *(_WORD *)(v28 + 840) = 9;
  __int16 v82 = *(unsigned __int8 *)(a4 + 244);
  unsigned __int8 v83 = *(unsigned char *)(a4 + 248);
  *(unsigned char *)(v28 + 842) = *(unsigned char *)(a4 + 251);
  *(_WORD *)(v28 + 843) = v83;
  *(_WORD *)(v73 + 129) = v82;
  *(_WORD *)(v28 + 847) = 9;
  *(_WORD *)(v28 + 850) = 0x8000;
  *(unsigned char *)(v28 + 852) = 0x80;
  uint64_t v84 = *(void *)(a4 + 272);
  if (!v84)
  {
    double v85 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(a4);
    uint64_t v84 = *v85;
    *(void *)(a4 + 272) = *v85;
  }
  *(unsigned char *)(v28 + 853) = *(unsigned char *)(v84 + 64);
  *(_WORD *)(v28 + 854) = 0;
  *(unsigned char *)(v28 + 856) = 0;
  int v86 = *(unsigned __int8 *)(a4 + 253);
  *(unsigned char *)(v28 + 857) = v86;
  *(_WORD *)(v28 + 858) = v86;
  float v87 = *(float *)(a4 + 164);
  *(unsigned char *)(v28 + 860) = v87 > 0.0;
  *(void *)(v28 + 864) = 1065353216;
  *(_OWORD *)(v28 + 888) = 0u;
  *(_OWORD *)(v28 + 904) = 0u;
  *(unsigned char *)(v28 + 920) = 0;
  *(unsigned char *)(v28 + 921) = 1;
  char v88 = *(unsigned char *)(a4 + 250);
  *(unsigned char *)(v28 + 922) = v88;
  *(unsigned char *)(v28 + 923) = *(unsigned char *)(a4 + 144);
  *(unsigned char *)(v28 + 924) = *(unsigned char *)(v84 + 70);
  uint64_t v89 = (unsigned char *)(v28 + 925);
  *(_WORD *)(v28 + 941) = 0;
  *(_OWORD *)(v28 + 925) = 0u;
  *(unsigned char *)(v28 + 943) = v77;
  *(unsigned char *)(v28 + 944) = v168;
  *(_WORD *)(v28 + 945) = 512;
  *(_DWORD *)(v28 + 948) = 1065353216;
  *(void *)(v28 + 952) = 0x100000001000001;
  *(unsigned char *)(v28 + 960) = *(unsigned char *)(a3 + 1265);
  if (v86 == 5)
  {
    if (!*(unsigned char *)(a3 + 164))
    {
      char v90 = 4;
LABEL_138:
      *(unsigned char *)(v28 + 858) = v90;
    }
  }
  else if (v87 > 0.0 && !v86)
  {
    char v90 = 1;
    goto LABEL_138;
  }
  if (*(unsigned char *)(a3 + 1260) && *(unsigned char *)(a2 + 3152)) {
    *(unsigned char *)(v28 + 954) = 1;
  }
  float32x4_t v164 = *(unsigned __int8 **)(a2 + 432);
  if (v35)
  {
    md::CompositeLabelPart::addLabelPart(v28, (md::LabelPart *)v35);
    *uint64_t v89 = 1;
  }
  else if (v88)
  {
    md::LabelIconStyleMonitor::initialize(v28 + 736, a4);
  }
  if (v41)
  {
    md::CompositeLabelPart::addLabelPart(v28, (md::LabelPart *)v41);
    *(unsigned char *)(v28 + 930) = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 672))(v41);
    *(unsigned char *)(v28 + 926) = 1;
    *(unsigned char *)(v28 + 955) = *(unsigned char *)(a2 + 3624);
    char v91 = *(unsigned char *)(v28 + 922);
    *(unsigned char *)(v28 + 927) = (v91 & 0x1C) != 0;
    *(unsigned char *)(v28 + 928) = (v91 & 4) != 0;
    *(unsigned char *)(v28 + 942) = 1;
    uint64_t v92 = *(void *)(a4 + 312);
    if (!v92)
    {
      __double2 v93 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(a4);
      uint64_t v92 = *v93;
      *(void *)(a4 + 312) = *v93;
    }
    *(void *)(v73 + 217) = *(void *)(v92 + 46);
    uint64_t v94 = *(void *)(a4 + 296);
    if (!v94)
    {
      __double2 v95 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a4, 0);
      uint64_t v94 = *v95;
      *(void *)(a4 + 296) = *v95;
    }
    *(unsigned char *)(v28 + 941) = *(unsigned char *)(v94 + 93);
    uint64_t v96 = *(void *)(*(void *)(a3 + 8) + 504);
    if (v96)
    {
      int v97 = *(unsigned __int8 *)(v96 + 88);
      *(unsigned char *)(v28 + 945) = v97;
      if (v97) {
        *(unsigned char *)(v28 + 946) = v97;
      }
    }
    else
    {
      *(unsigned char *)(v28 + 945) = 0;
    }
  }
  int v98 = *(unsigned __int8 *)(v28 + 858);
  *(unsigned char *)(v28 + 565) = *(unsigned char *)(v28 + 858) != 0;
  if (v98) {
    operator new();
  }
  if (!v35 || *(unsigned char *)(a4 + 242) || *(unsigned char *)(v28 + 842) == 5)
  {
    *(unsigned char *)(v28 + 921) = 1;
    *(unsigned char *)(v28 + 958) = 1;
    if (!v41) {
      goto LABEL_215;
    }
  }
  else
  {
    char v116 = *(unsigned char *)(v165 + 32 * v168 + 24);
    double v117 = *v161;
    double v118 = v161[1];
    if (v116) {
      char v116 = 0xCCCCCCCCCCCCCCCDLL * (v118 - v117) < 2;
    }
    *(unsigned char *)(v28 + 921) = v116;
    *(unsigned char *)(v28 + 958) = v117 == v118;
    if (!v41) {
      goto LABEL_215;
    }
    if (v117 != v118)
    {
      unsigned __int8 v99 = *v117;
      unsigned __int8 v100 = v117[1];
      __int16 v101 = *(_WORD *)(v117 + 3);
      goto LABEL_162;
    }
  }
  unsigned __int8 v99 = 0;
  unsigned __int8 v100 = 0;
  __int16 v101 = 9;
LABEL_162:
  *(_WORD *)((char *)v174 + 3) = v101;
  LOBYTE(v174[0]) = v99;
  *(_WORD *)((char *)v174 + 1) = v100;
  float32x4_t v160 = (_DWORD *)(v28 + 837);
  md::CaptionedIconLabelPart::populatePlacement(v28, v28 + 837, (unsigned __int8 *)v174, 1);
  float v103 = (_DWORD *)(v28 + 832);
  int v104 = *(unsigned __int16 *)(a4 + 246);
  *(unsigned char *)(v28 + 856) = (v104 & 0xAA | *(unsigned __int8 *)(v165 + 32 * v168 + 25)) != 0;
  if (!*(unsigned char *)(v28 + 958) || v104)
  {
    md::CaptionedIconLabelPart::populatePlacement(v28, v28 + 832, v162, v163 != 0);
  }
  else
  {
    *float v103 = *v160;
    *(unsigned char *)(v28 + 836) = *(unsigned char *)(v28 + 841);
  }
  int v105 = *(unsigned __int8 *)(v28 + 832);
  BOOL v107 = v105 == 3 || v105 == 100;
  *(unsigned char *)(v28 + 855) = v107;
  *(unsigned char *)(v28 + 920) = (v105 & 0xFE) == 2;
  if (v105 != 5)
  {
    if ((v105 & 0xFE) == 2)
    {
      int v109 = v164[472] + *(unsigned __int8 *)(v28 + 836);
      if (!*(unsigned char *)(v28 + 856))
      {
        unsigned int v108 = ((v109 + 32) >> 5) & 6;
        goto LABEL_182;
      }
    }
    else
    {
      unsigned int v108 = *(unsigned __int8 *)(v28 + 835);
      if (v108 != 10) {
        goto LABEL_182;
      }
      LOBYTE(v109) = *(unsigned char *)(v28 + 836);
    }
    LOBYTE(v108) = (v109 + 16) >> 5;
    goto LABEL_182;
  }
  LOBYTE(v108) = md::CaptionedIconLabelPart::evaluateFeatureNormalTextPosition((md::CaptionedIconLabelPart *)a3, (md::Label *)v164, v102);
LABEL_182:
  *(unsigned char *)(v28 + 847) = v108;
  (*(void (**)(uint64_t))(*(void *)v41 + 368))(v41);
  int v112 = *(unsigned __int8 *)(v28 + 833);
  uint64_t v113 = *(unsigned __int8 *)(v28 + 847);
  double v114 = (char *)&diagonalDownLabelAnchors;
  switch(*(unsigned char *)(v28 + 833))
  {
    case 1:
      goto LABEL_187;
    case 4:
      double v114 = (char *)&diagonalUpLabelAnchors;
      goto LABEL_184;
    case 8:
LABEL_184:
      double v115 = &v114[2 * v113];
      if (!*v115 || !v115[1]) {
        goto LABEL_186;
      }
      goto LABEL_193;
    case 0x10:
      if (v113 == 6) {
        int v112 = 8;
      }
      else {
        int v112 = 1;
      }
      if (v113 == 2) {
        int v112 = 4;
      }
LABEL_193:
      *(unsigned char *)(v28 + 848) = v112;
      if ((v112 & 0xC) != 0)
      {
        if (v112 == 4)
        {
          unint64_t v80 = 0x3F12D5E73F51B3F2;
        }
        else if (v112 == 8)
        {
          unint64_t v80 = 0xBF12D5E73F51B3F2;
        }
        *(void *)(v28 + 864) = v80;
        (*(void (**)(uint64_t))(*(void *)v41 + 376))(v41);
      }
      break;
    default:
LABEL_186:
      LOBYTE(v112) = 1;
LABEL_187:
      *(unsigned char *)(v28 + 848) = v112;
      break;
  }
  if (!*(unsigned char *)(v28 + 955)) {
    goto LABEL_215;
  }
  if (*(unsigned char *)(v28 + 921))
  {
    md::CaptionedIconLabelPart::initAlternatePlacements(v28);
    goto LABEL_207;
  }
  *(void *)(v28 + 808) = *(void *)(v28 + 800);
  float v122 = *v161;
  double v123 = v161[1];
  if (*v161 == v123) {
    goto LABEL_207;
  }
  v111.n128_u64[0] = 0xC0000600000000;
  __n128 v166 = v111;
  do
  {
    int v124 = *v122;
    if (!*v122)
    {
      if (*(unsigned __int8 *)(v28 + 842) <= 1u) {
        int v124 = 1;
      }
      else {
        int v124 = *(unsigned __int8 *)(v28 + 842);
      }
    }
    if (v122[3] != 9)
    {
      unsigned int v125 = *(unsigned __int16 *)(v122 + 3);
LABEL_241:
      unsigned int v126 = v125 >> 8;
      goto LABEL_242;
    }
    if (*(unsigned char *)(v73 + 129) != 9)
    {
      unsigned int v125 = *(unsigned __int16 *)(v73 + 129);
      goto LABEL_241;
    }
    if (*v89) {
      LOWORD(v125) = 6;
    }
    else {
      LOWORD(v125) = 8;
    }
    if (*v89) {
      LOWORD(v126) = -64;
    }
    else {
      LOWORD(v126) = 0;
    }
LABEL_242:
    if (v124 == 1 && *(unsigned char *)(v28 + 930) != 0 && (v126 & 0x1F) == 0)
    {
      if (v125 <= 9u && (gss::LabelPositionToMask(v125) & 0x83) != 0) {
        LOWORD(v125) = mirroredHorizontalPositions[v125];
      }
      LOWORD(v126) = 32 * v125;
      if ((v125 & 0xF8) != 0) {
        LOWORD(v126) = 0;
      }
    }
    v129.i32[0] = 0;
    v129.i64[1] = 0;
    v129.i16[2] = v125;
    v129.i16[3] = v126;
    if (v125 != 8) {
      goto LABEL_258;
    }
    if (*v89)
    {
      __n128 v111 = v166;
      v129.i32[1] = v166.n128_i32[1];
      LOBYTE(v125) = 6;
      LOBYTE(v126) = -64;
LABEL_258:
      int v130 = v122[1];
      if (v122[1]) {
        goto LABEL_262;
      }
      goto LABEL_259;
    }
    LOBYTE(v125) = 8;
    int v124 = 1;
    int v130 = v122[1];
    if (v122[1]) {
      goto LABEL_262;
    }
LABEL_259:
    if (*(unsigned __int8 *)(v28 + 843) <= 1u) {
      int v130 = 1;
    }
    else {
      int v130 = *(unsigned __int8 *)(v28 + 843);
    }
LABEL_262:
    if (v124 != *(unsigned __int8 *)v103
      || v130 != *(unsigned __int8 *)(v28 + 833)
      || *(unsigned __int8 *)(v28 + 835) != v125
      || v125 == 10 && *(unsigned __int8 *)(v28 + 836) != v126)
    {
      unint64_t v131 = *(void *)(v28 + 808);
      unint64_t v132 = *(void *)(v28 + 816);
      if (v131 >= v132)
      {
        unint64_t v135 = 0xCCCCCCCCCCCCCCCDLL * (v131 - *v172);
        unint64_t v136 = v135 + 1;
        if (v135 + 1 >= 0x3333333333333334) {
          abort();
        }
        unint64_t v137 = 0xCCCCCCCCCCCCCCCDLL * (v132 - *v172);
        if (2 * v137 > v136) {
          unint64_t v136 = 2 * v137;
        }
        if (v137 >= 0x1999999999999999) {
          unint64_t v136 = 0x3333333333333333;
        }
        if (v136)
        {
          *(int16x8_t *)BOOL v169 = v129;
          uint64_t v138 = 5 * v136;
          uint64_t v139 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v28 + 824) + 16))(*(void *)(v28 + 824), 5 * v136, 1);
          uint64_t v140 = v139 + 5 * v135;
          unint64_t v136 = v139 + v138;
          __n128 v111 = *(__n128 *)v169;
          if (v139)
          {
            *(unsigned char *)uint64_t v140 = v124;
            *(unsigned char *)(v140 + 1) = v130;
            *(unsigned char *)(v140 + 2) = 0;
            v111.n128_u64[0] = (unint64_t)vmovn_s16(*(int16x8_t *)v169);
            *(_WORD *)(v140 + 3) = v111.n128_u16[1];
          }
        }
        else
        {
          uint64_t v140 = 5 * v135;
        }
        uint64_t v134 = v73;
        unint64_t v141 = *(void *)(v73 + 92);
        unint64_t v142 = *v172;
        uint64_t v143 = v140;
        if (v141 != *v172)
        {
          do
          {
            __int16 v144 = *(_WORD *)(v141 - 5);
            v141 -= 5;
            *(_WORD *)(v143 - 5) = v144;
            v143 -= 5;
            *(unsigned char *)(v143 + 2) = 0;
            *(_WORD *)(v143 + 3) = *(_WORD *)(v141 + 3);
          }
          while (v141 != v142);
          unint64_t v141 = *v172;
        }
        uint64_t v133 = v140 + 5;
        *(void *)(v28 + 800) = v143;
        *(void *)(v28 + 808) = v140 + 5;
        uint64_t v145 = *(void *)(v28 + 816);
        *(void *)(v28 + 816) = v136;
        if (v141) {
          (*(void (**)(void, unint64_t, unint64_t, __n128))(**(void **)(v28 + 824) + 40))(*(void *)(v28 + 824), v141, v145 - v141, v111);
        }
      }
      else
      {
        if (v131)
        {
          *(unsigned char *)unint64_t v131 = v124;
          *(unsigned char *)(v131 + 1) = v130;
          *(unsigned char *)(v131 + 2) = 0;
          v111.n128_u64[0] = (unint64_t)vmovn_s16(v129);
          *(_WORD *)(v131 + 3) = v111.n128_u16[1];
        }
        uint64_t v133 = v131 + 5;
        uint64_t v134 = v73;
      }
      *(void *)(v134 + 92) = v133;
    }
    v122 += 5;
  }
  while (v122 != v123);
  unint64_t v146 = *v172;
  int64x2_t v147 = *(int64x2_t *)(v73 + 92);
  int64x2_t v148 = vsubq_s64(v147, vdupq_n_s64(*v172));
  unint64_t v149 = 0xCCCCCCCCCCCCCCCDLL * v148.i64[0];
  if (0xCCCCCCCCCCCCCCCDLL * v148.i64[1] > 0xCCCCCCCCCCCCCCCDLL * v148.i64[0])
  {
    if (v147.i64[0] == v146)
    {
      unint64_t v152 = v148.i64[0];
      uint64_t v153 = v148.i64[0];
    }
    else
    {
      uint64_t v150 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v28 + 824) + 16))(*(void *)(v28 + 824), v148.i64[0], 1);
      unint64_t v146 = *(void *)(v28 + 808);
      uint64_t v151 = *(void *)(v28 + 800);
      unint64_t v152 = v150 + 5 * v149;
      uint64_t v153 = v152;
      if (v146 != v151)
      {
        do
        {
          __int16 v154 = *(_WORD *)(v146 - 5);
          v146 -= 5;
          *(_WORD *)(v153 - 5) = v154;
          v153 -= 5;
          *(unsigned char *)(v153 + 2) = 0;
          *(_WORD *)(v153 + 3) = *(_WORD *)(v146 + 3);
        }
        while (v146 != v151);
        unint64_t v146 = *v172;
      }
    }
    *(void *)(v28 + 800) = v153;
    *(void *)(v28 + 808) = v152;
    uint64_t v155 = *(void *)(v28 + 816);
    *(void *)(v28 + 816) = v152;
    if (v146) {
      (*(void (**)(void, unint64_t, unint64_t))(**(void **)(v28 + 824) + 40))(*(void *)(v28 + 824), v146, v155 - v146);
    }
  }
LABEL_207:
  uint64_t v119 = *(unsigned __int8 **)(v28 + 800);
  BOOL v121 = v119 != *(unsigned __int8 **)(v28 + 808)
      && *(unsigned __int8 *)v160 == *v119
      && *(unsigned __int8 *)(v28 + 838) == v119[1]
      && (int v120 = *(unsigned __int8 *)(v28 + 840), v120 == v119[3])
      && (v120 != 10 || *(unsigned __int8 *)(v28 + 841) == v119[4]);
  *(unsigned char *)(v28 + 956) = v121;
LABEL_215:
  *(unsigned char *)(v28 + 561) = v170;
LABEL_216:
  if (v193 == v192)
  {
    (*(void (**)(void *))(v192[0] + 32))(v192);
  }
  else if (v193)
  {
    (*(void (**)(void *))(*v193 + 40))(v193);
  }
  if (SHIBYTE(v191) < 0) {
    operator delete(v189);
  }
  if (v180)
  {
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  return v28;
}

void sub_1A1875298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t md::CompositeLabelPart::addLabelPart(uint64_t this, md::LabelPart *a2)
{
  uint64_t v3 = this;
  int8x8_t v4 = *(void **)(this + 584);
  unint64_t v5 = *(void *)(this + 592);
  if ((unint64_t)v4 < v5)
  {
    if (v4) {
      *int8x8_t v4 = a2;
    }
    uint64_t v6 = v4 + 1;
    goto LABEL_27;
  }
  uint64_t v7 = *(void *)(this + 576);
  uint64_t v8 = ((uint64_t)v4 - v7) >> 3;
  unint64_t v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) >> 61) {
    abort();
  }
  uint64_t v10 = v5 - v7;
  if (v10 >> 2 > v9) {
    unint64_t v9 = v10 >> 2;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  if (v9)
  {
    uint64_t v11 = 8 * v9;
    this = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(this + 600) + 16))(*(void *)(this + 600), 8 * v9, 8);
    uint64_t v12 = (void *)(this + 8 * v8);
    unint64_t v9 = this + v11;
    if (this) {
      void *v12 = a2;
    }
  }
  else
  {
    uint64_t v12 = (void *)(8 * v8);
  }
  uint64_t v6 = v12 + 1;
  uint64_t v13 = *(void *)(v3 + 584);
  uint64_t v14 = *(void *)(v3 + 576);
  if (v13 != v14)
  {
    unint64_t v15 = v13 - v14 - 8;
    if (v15 < 0x38)
    {
      uint64_t v17 = *(void *)(v3 + 584);
    }
    else if ((unint64_t)(v13 - (void)v12) < 0x20)
    {
      uint64_t v17 = *(void *)(v3 + 584);
    }
    else
    {
      uint64_t v16 = (v15 >> 3) + 1;
      uint64_t v17 = v13 - 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v18 = v12 - 2;
      unint64_t v19 = (long long *)(v13 - 16);
      uint64_t v20 = v16 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v21 = *v19;
        *(v18 - 1) = *(v19 - 1);
        _OWORD *v18 = v21;
        v18 -= 2;
        v19 -= 2;
        v20 -= 4;
      }
      while (v20);
      v12 -= v16 & 0x3FFFFFFFFFFFFFFCLL;
      if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_24;
      }
    }
    do
    {
      uint64_t v22 = *(void *)(v17 - 8);
      v17 -= 8;
      *--uint64_t v12 = v22;
    }
    while (v17 != v14);
LABEL_24:
    uint64_t v13 = *(void *)(v3 + 576);
  }
  *(void *)(v3 + 576) = v12;
  *(void *)(v3 + 584) = v6;
  uint64_t v23 = *(void *)(v3 + 592);
  *(void *)(v3 + 592) = v9;
  if (v13) {
    this = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 600) + 40))(*(void *)(v3 + 600), v13, v23 - v13);
  }
LABEL_27:
  *(void *)(v3 + 584) = v6;
  *(unsigned char *)(v3 + 629) = 1;
  return this;
}

uint64_t md::PointLabelFeature::createAnnotationPart(uint64_t *a1, uint64_t *a2, int a3, int a4)
{
  switch(a4)
  {
    case 2:
    case 6:
      uint64_t v7 = a2[2];
      uint64_t v8 = *(void *)(v7 + 312);
      if (a3 == 1)
      {
        if (!v8)
        {
          unint64_t v9 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(a2[2]);
          uint64_t v8 = *v9;
          *(void *)(v7 + 312) = *v9;
        }
        uint64_t v10 = (unsigned __int8 *)(v8 + 47);
      }
      else
      {
        if (!v8)
        {
          uint64_t v22 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(a2[2]);
          uint64_t v8 = *v22;
          *(void *)(v7 + 312) = *v22;
        }
        uint64_t v10 = (unsigned __int8 *)(v8 + 52);
      }
      unsigned int v23 = (*(uint64_t (**)(uint64_t *, uint64_t *, void))(*a1 + 712))(a1, a2, *v10);
      uint64_t v24 = md::PointLabelFeature::newTextPart(a1, a2, v23, 1);
      uint64_t v13 = (unsigned char *)v24;
      if (v24) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 176))(v24, 11);
      }
      return (uint64_t)v13;
    case 3:
      return md::PointLabelFeature::createGraphicAnnotationPart(a1, a2, a3, 1);
    case 4:
      uint64_t v12 = *(uint64_t (**)(void))(*a1 + 736);
      return v12();
    case 5:
      {
        operator new();
      }
      uint64_t v13 = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                          + 16))(mdm::Allocator::instance(void)::alloc, 696, 8);
      uint64_t v14 = md::StackLabelPart::StackLabelPart((uint64_t)v13, 1, 0, 0, 0);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 176))(v14, 9);
      v13[630] = 1;
      Graphicuint64_t AnnotationPart = md::PointLabelFeature::createGraphicAnnotationPart(a1, a2, a3, 1);
      uint64_t v16 = (md::LabelPart *)GraphicAnnotationPart;
      BOOL v17 = GraphicAnnotationPart != 0;
      if (GraphicAnnotationPart)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)GraphicAnnotationPart + 176))(GraphicAnnotationPart, 10);
        md::CompositeLabelPart::addLabelPart((uint64_t)v13, v16);
      }
      uint64_t v18 = md::PointLabelFeature::createGraphicAnnotationPart(a1, a2, a3, 1);
      unint64_t v19 = (md::LabelPart *)v18;
      if (v18)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 176))(v18, 10);
        md::CompositeLabelPart::addLabelPart((uint64_t)v13, v19);
        BOOL v17 = 1;
      }
      uint64_t v20 = md::PointLabelFeature::createGraphicAnnotationPart(a1, a2, a3, 1);
      long long v21 = (md::LabelPart *)v20;
      if (v20)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 176))(v20, 10);
        md::CompositeLabelPart::addLabelPart((uint64_t)v13, v21);
      }
      else if (!v17)
      {
        (*(void (**)(unsigned char *))(*(void *)v13 + 8))(v13);
        return 0;
      }
      return (uint64_t)v13;
    default:
      return 0;
  }
}

void sub_1A18759C4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t md::CaptionedIconLabelPart::populatePlacement(uint64_t result, uint64_t a2, unsigned __int8 *a3, int a4)
{
  uint64_t v6 = result;
  unsigned int v7 = *a3;
  if (!*a3)
  {
    unsigned int v7 = *(unsigned __int8 *)(result + 842);
    if (v7 <= 1) {
      unsigned int v7 = 1;
    }
  }
  *(unsigned char *)a2 = v7;
  if (a3[3] == 9)
  {
    if (*(unsigned char *)(result + 845) == 9)
    {
      int v8 = 0;
      if (*(unsigned char *)(result + 925)) {
        LOWORD(v9) = 6;
      }
      else {
        LOWORD(v9) = 8;
      }
      if (*(unsigned char *)(result + 925)) {
        LOWORD(v10) = -64;
      }
      else {
        LOWORD(v10) = 0;
      }
    }
    else
    {
      int v8 = 0;
      unsigned int v9 = *(unsigned __int16 *)(result + 845);
      unsigned int v10 = v9 >> 8;
    }
  }
  else
  {
    unsigned int v9 = *(unsigned __int16 *)(a3 + 3);
    unsigned int v10 = v9 >> 8;
    int v8 = a4 ^ 1;
  }
  if (v7 == 1 && v8 == 0 && *(unsigned char *)(result + 930) != 0 && (v10 & 0x1F) == 0)
  {
    uint64_t result = v9;
    if (v9 <= 9u)
    {
      uint64_t result = gss::LabelPositionToMask(v9);
      if ((result & 0x83) != 0) {
        LOWORD(v9) = mirroredHorizontalPositions[v9];
      }
    }
    if ((v9 & 0xF8) != 0) {
      LOWORD(v10) = 0;
    }
    else {
      LOWORD(v10) = 32 * v9;
    }
  }
  *(_WORD *)(a2 + 3) = v9 | (unsigned __int16)((_WORD)v10 << 8);
  if (v9 != 8)
  {
LABEL_34:
    char v14 = a3[1];
    if (v14) {
      goto LABEL_38;
    }
    goto LABEL_35;
  }
  if (*(unsigned char *)(v6 + 925))
  {
    *(_WORD *)(a2 + 3) = -16378;
    goto LABEL_34;
  }
  *(unsigned char *)a2 = 1;
  char v14 = a3[1];
  if (v14) {
    goto LABEL_38;
  }
LABEL_35:
  char v14 = *(unsigned char *)(v6 + 843);
  if (!v14) {
    char v14 = 1;
  }
LABEL_38:
  *(unsigned char *)(a2 + 1) = v14;
  return result;
}

uint64_t md::CaptionedIconLabelPart::initAlternatePlacements(uint64_t this)
{
  *(void *)(this + 808) = *(void *)(this + 800);
  if (!*(unsigned char *)(this + 921)) {
    return this;
  }
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 832) != 1) {
    return this;
  }
  uint64_t v2 = *(unsigned __int8 *)(this + 840);
  if (v2 == 10) {
    return this;
  }
  int v3 = gss::LabelPositionToMask(*(unsigned __int8 *)(this + 840));
  int v4 = v3;
  int v5 = *(unsigned __int16 *)(v1 + 850);
  if (v5 == 0x8000)
  {
    int v5 = 170;
    if ((v3 & 0xAA) == 0)
    {
      if (*(unsigned char *)(v1 + 925) || *(unsigned char *)(v1 + 920)) {
        int v5 = 255;
      }
      else {
        int v5 = 0;
      }
    }
  }
  int v6 = *(unsigned __int8 *)(v1 + 837);
  if (v6 == 2) {
    int v7 = v5;
  }
  else {
    int v7 = v5;
  }
  if (*(unsigned __int8 *)(v1 + 832) != v6)
  {
    int v8 = *(unsigned __int8 *)(v1 + 838);
    goto LABEL_19;
  }
  int v8 = *(unsigned __int8 *)(v1 + 838);
  if (*(unsigned __int8 *)(v1 + 833) != v8) {
    goto LABEL_19;
  }
  int v9 = *(unsigned __int8 *)(v1 + 835);
  if (v9 != *(unsigned __int8 *)(v1 + 840))
  {
    int v8 = *(unsigned __int8 *)(v1 + 833);
    goto LABEL_19;
  }
  if (v9 != 10)
  {
    int v8 = *(unsigned __int8 *)(v1 + 833);
    goto LABEL_45;
  }
  int v8 = *(unsigned __int8 *)(v1 + 833);
  if (*(unsigned __int8 *)(v1 + 836) != *(unsigned __int8 *)(v1 + 841))
  {
LABEL_19:
    unsigned int v10 = (char *)&diagonalDownLabelAnchors;
    switch(v8)
    {
      case 1:
      case 16:
        goto LABEL_25;
      case 4:
        unsigned int v10 = (char *)&diagonalUpLabelAnchors;
        goto LABEL_21;
      case 8:
LABEL_21:
        uint64_t v11 = &v10[2 * v2];
        int v12 = *v11;
        int v13 = v11[1];
        if (v12) {
          BOOL v14 = v13 == 0;
        }
        else {
          BOOL v14 = 1;
        }
        if (v14) {
          break;
        }
LABEL_25:
        unint64_t v15 = *(void *)(v1 + 808);
        unint64_t v16 = *(void *)(v1 + 816);
        if (v15 >= v16)
        {
          uint64_t v18 = *(void *)(v1 + 800);
          unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * (v15 - v18);
          unint64_t v20 = v19 + 1;
          if (v19 + 1 >= 0x3333333333333334) {
LABEL_97:
          }
            abort();
          unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * (v16 - v18);
          if (2 * v21 > v20) {
            unint64_t v20 = 2 * v21;
          }
          BOOL v22 = v21 >= 0x1999999999999999;
          uint64_t v23 = 0x3333333333333333;
          if (!v22) {
            uint64_t v23 = v20;
          }
          if (v23)
          {
            uint64_t v24 = 5 * v23;
            uint64_t v25 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 824) + 16))(*(void *)(v1 + 824), 5 * v23, 1);
            uint64_t v26 = v25 + 5 * v19;
            uint64_t v23 = v25 + v24;
            if (v25)
            {
              *(unsigned char *)uint64_t v26 = *(unsigned char *)(v1 + 837);
              *(unsigned char *)(v26 + 1) = *(unsigned char *)(v1 + 838);
              *(unsigned char *)(v26 + 2) = 0;
              *(_WORD *)(v26 + 3) = *(_WORD *)(v1 + 840);
            }
          }
          else
          {
            uint64_t v26 = 5 * v19;
          }
          uint64_t v17 = v26 + 5;
          uint64_t v27 = *(void *)(v1 + 808);
          uint64_t v28 = *(void *)(v1 + 800);
          if (v27 != v28)
          {
            do
            {
              __int16 v29 = *(_WORD *)(v27 - 5);
              v27 -= 5;
              *(_WORD *)(v26 - 5) = v29;
              v26 -= 5;
              *(unsigned char *)(v26 + 2) = 0;
              *(_WORD *)(v26 + 3) = *(_WORD *)(v27 + 3);
            }
            while (v27 != v28);
            uint64_t v27 = *(void *)(v1 + 800);
          }
          *(void *)(v1 + 800) = v26;
          *(void *)(v1 + 808) = v17;
          uint64_t v30 = *(void *)(v1 + 816);
          *(void *)(v1 + 816) = v23;
          if (v27) {
            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 824) + 40))(*(void *)(v1 + 824), v27, v30 - v27);
          }
        }
        else
        {
          if (v15)
          {
            *(unsigned char *)unint64_t v15 = v6;
            *(unsigned char *)(v15 + 1) = v8;
            *(unsigned char *)(v15 + 2) = 0;
            *(_WORD *)(v15 + 3) = *(_WORD *)(v1 + 840);
          }
          uint64_t v17 = v15 + 5;
        }
        *(void *)(v1 + 808) = v17;
        int v8 = *(unsigned __int8 *)(v1 + 838);
        break;
      default:
        break;
    }
  }
LABEL_45:
  uint64_t v31 = 0;
  long long v32 = (int64x2_t *)(v1 + 808);
  uint64_t v33 = (unsigned __int8 *)&horizontalPositionsInPreferredOrder;
  int v34 = v7 & ~v4;
  if (v8 == 4) {
    uint64_t v33 = (unsigned __int8 *)&diagonalUpPositionsInPreferredOrder;
  }
  if (v8 == 8) {
    uint64_t v35 = (unsigned __int8 *)&diagonalDownPositionsInPreferredOrder;
  }
  else {
    uint64_t v35 = v33;
  }
  do
  {
    uint64_t v37 = v35[v31];
    if (*(unsigned char *)(v1 + 930)) {
      BOOL v38 = v37 > 9;
    }
    else {
      BOOL v38 = 1;
    }
    if (!v38) {
      LODWORD(v37) = mirroredHorizontalPositions[v37];
    }
    this = gss::LabelPositionToMask(v37);
    if ((v34 & this) != 0 && v37 != *(unsigned __int8 *)(v1 + 847))
    {
      char v39 = *(unsigned char *)(v1 + 838);
      unsigned __int8 v40 = (char *)&diagonalDownLabelAnchors;
      switch(v39)
      {
        case 1:
        case 16:
          goto LABEL_66;
        case 4:
          unsigned __int8 v40 = (char *)&diagonalUpLabelAnchors;
          goto LABEL_62;
        case 8:
LABEL_62:
          uint64_t v41 = &v40[2 * v37];
          int v42 = *v41;
          int v43 = v41[1];
          if (v42) {
            BOOL v44 = v43 == 0;
          }
          else {
            BOOL v44 = 1;
          }
          if (v44) {
            break;
          }
LABEL_66:
          unint64_t v45 = *(void *)(v1 + 808);
          unint64_t v46 = *(void *)(v1 + 816);
          if (v45 >= v46)
          {
            uint64_t v47 = *(void *)(v1 + 800);
            unint64_t v48 = 0xCCCCCCCCCCCCCCCDLL * (v45 - v47);
            unint64_t v49 = v48 + 1;
            if (v48 + 1 >= 0x3333333333333334) {
              goto LABEL_97;
            }
            if (0x999999999999999ALL * (v46 - v47) > v49) {
              unint64_t v49 = 0x999999999999999ALL * (v46 - v47);
            }
            if (0xCCCCCCCCCCCCCCCDLL * (v46 - v47) >= 0x1999999999999999) {
              unint64_t v49 = 0x3333333333333333;
            }
            if (v49)
            {
              uint64_t v50 = 5 * v49;
              this = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v1 + 824) + 16))(*(void *)(v1 + 824), 5 * v49, 1);
              uint64_t v51 = this + 5 * v48;
              unint64_t v49 = this + v50;
              if (this)
              {
                unsigned __int8 v52 = *(unsigned char *)(v1 + 838);
                *(unsigned char *)uint64_t v51 = *(unsigned char *)(v1 + 837);
                *(_WORD *)(v51 + 1) = v52;
                *(_WORD *)(v51 + 3) = v37;
              }
            }
            else
            {
              uint64_t v51 = v45 - v47;
            }
            uint64_t v53 = *(void *)(v1 + 808);
            uint64_t v54 = *(void *)(v1 + 800);
            uint64_t v55 = v51;
            if (v53 != v54)
            {
              do
              {
                __int16 v56 = *(_WORD *)(v53 - 5);
                v53 -= 5;
                *(_WORD *)(v55 - 5) = v56;
                v55 -= 5;
                *(unsigned char *)(v55 + 2) = 0;
                *(_WORD *)(v55 + 3) = *(_WORD *)(v53 + 3);
              }
              while (v53 != v54);
              uint64_t v53 = *(void *)(v1 + 800);
            }
            uint64_t v36 = v51 + 5;
            *(void *)(v1 + 800) = v55;
            *(void *)(v1 + 808) = v51 + 5;
            uint64_t v57 = *(void *)(v1 + 816);
            *(void *)(v1 + 816) = v49;
            if (v53) {
              this = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 824) + 40))(*(void *)(v1 + 824), v53, v57 - v53);
            }
          }
          else
          {
            if (v45)
            {
              *(unsigned char *)unint64_t v45 = *(unsigned char *)(v1 + 837);
              *(unsigned char *)(v45 + 1) = v39;
              *(unsigned char *)(v45 + 2) = 0;
              *(_WORD *)(v45 + 3) = v37;
            }
            uint64_t v36 = v45 + 5;
          }
          v32->i64[0] = v36;
          break;
        default:
          break;
      }
    }
    ++v31;
  }
  while (v31 != 9);
  unint64_t v58 = *(void *)(v1 + 800);
  int64x2_t v59 = vsubq_s64(*v32, vdupq_n_s64(v58));
  unint64_t v60 = 0xCCCCCCCCCCCCCCCDLL * v59.i64[0];
  if (0xCCCCCCCCCCCCCCCDLL * v59.i64[1] > 0xCCCCCCCCCCCCCCCDLL * v59.i64[0])
  {
    if (v32->i64[0] == v58)
    {
      uint64_t v62 = v59.i64[0];
      uint64_t v63 = v59.i64[0];
    }
    else
    {
      this = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 824) + 16))(*(void *)(v1 + 824), v59.i64[0], 1);
      unint64_t v58 = *(void *)(v1 + 808);
      uint64_t v61 = *(void *)(v1 + 800);
      uint64_t v62 = this + 5 * v60;
      uint64_t v63 = v62;
      if (v58 != v61)
      {
        do
        {
          __int16 v64 = *(_WORD *)(v58 - 5);
          v58 -= 5;
          *(_WORD *)(v63 - 5) = v64;
          v63 -= 5;
          *(unsigned char *)(v63 + 2) = 0;
          *(_WORD *)(v63 + 3) = *(_WORD *)(v58 + 3);
        }
        while (v58 != v61);
        unint64_t v58 = *(void *)(v1 + 800);
      }
    }
    *(void *)(v1 + 800) = v63;
    *(void *)(v1 + 808) = v62;
    *(void *)(v1 + 816) = v62;
    if (v58)
    {
      uint64_t v65 = *(uint64_t (**)(void))(**(void **)(v1 + 824) + 40);
      return v65();
    }
  }
  return this;
}

uint64_t gss::LabelPositionToMask(int a1)
{
  return word_1A2A7038A[a1];
}

uint64_t md::ImageLabelPart::setContentType(uint64_t result, int a2)
{
  *(unsigned char *)(result + 562) = a2;
  *(unsigned char *)(result + 632) = (a2 - 1) < 4;
  return result;
}

uint64_t md::TextLabelPart::isTextRTL(md::TextLabelPart *this)
{
  return *(unsigned __int8 *)(*(void *)(*((void *)this + 72) + 16) + 122);
}

uint64_t md::PointLabelFeature::mainTextIndex(md::PointLabelFeature *this, const md::PartCreationContext *a2)
{
  if (!(*(uint64_t (**)(md::PointLabelFeature *))(*(void *)this + 64))(this)
    || *(unsigned char *)(*((void *)this + 63) + 236) != 1)
  {
    return *(unsigned __int8 *)(*((void *)a2 + 8) + 130);
  }
  uint64_t v4 = *(void *)a2;
  return md::PointLabelFeature::externalFeatureTextIndex(this, 1, v4);
}

uint64_t md::PointLabelFeature::newLayoutIconPart(md::PointLabelFeature *this, const md::PartCreationContext *a2)
{
  uint64_t v3 = *((void *)this + 2);
  uint64_t v4 = *(void *)(v3 + 272);
  if (v4)
  {
    int v5 = *(char *)(v4 + 263);
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    int v13 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*((void *)this + 2));
    uint64_t v4 = *v13;
    *(void *)(v3 + 272) = *v13;
    int v5 = *(char *)(v4 + 263);
    if ((v5 & 0x80000000) == 0)
    {
LABEL_3:
      if ((_BYTE)v5) {
        goto LABEL_4;
      }
      return 0;
    }
  }
  if (!*(void *)(v4 + 248)) {
    return 0;
  }
LABEL_4:
  uint64_t v7 = *((void *)this + 1);
  int v6 = (md::LabelStyle *)*((void *)this + 2);
  uint64_t v8 = *(void *)this;
  uint64_t v9 = *((void *)v6 + 34);
  if (!v9)
  {
    unsigned int v10 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*((void *)this + 2));
    uint64_t v9 = *v10;
    *((void *)v6 + 34) = *v10;
  }
  md::LabelStyle::namedIcon(&v15, v6, v8, v7, (void **)(v9 + 240), 1);
  if (!v15)
  {
    uint64_t v11 = 0;
    int v12 = v16;
    if (!v16) {
      return v11;
    }
    goto LABEL_14;
  }
  {
    operator new();
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 840, 8);
  md::PointIconLabelPart::PointIconLabelPart(v11, &v15, *(void *)this, *((void *)this + 1), *((md::LabelStyle **)this + 2), 0);
  int v12 = v16;
  if (v16)
  {
LABEL_14:
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v11;
}

void sub_1A187641C(mdm::Allocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11 + 40))(v11, v9, 840);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

void md::PointLabelFeature::additionalIconAttributeValues(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

md::LabelPartContent *md::LabelPartContent::LabelPartContent(md::LabelPartContent *this, md::LabelPart *a2)
{
  *(_DWORD *)this = 0;
  *((void *)this + 1) = a2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 6) = 0;
  if (*((unsigned char *)a2 + 562))
  {
    {
      operator new();
    }
    uint64_t v4 = mdm::Allocator::instance(void)::alloc;
    uint64_t v11 = mdm::Allocator::instance(void)::alloc;
    int v5 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                         + 16))(mdm::Allocator::instance(void)::alloc, 8, 8);
    int v6 = v5;
    uint64_t v8 = v5;
    unsigned int v10 = v5 + 1;
    if (v5) {
      *int v5 = (uint64_t)a2;
    }
    uint64_t v9 = v5 + 1;
    md::LabelPartContent::parsePartContent((uint64_t)this, &v8);
    if (v6) {
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v4 + 40))(v4, v6, 8);
    }
  }
  else
  {
    (*(void (**)(uint64_t **__return_ptr, md::LabelPart *))(*(void *)a2 + 200))(&v8, a2);
    md::LabelPartContent::parsePartContent((uint64_t)this, &v8);
    if (v8)
    {
      uint64_t v9 = v8;
      (*(void (**)(uint64_t, uint64_t *, int64_t))(*(void *)v11 + 40))(v11, v8, (char *)v10 - (char *)v8);
    }
  }
  return this;
}

void sub_1A187662C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a12 + 40))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::LabelPartContent::parsePartContent(uint64_t result, uint64_t **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t result = *v2;
      switch(*(unsigned char *)(*v2 + 562))
      {
        case 1:
          *(void *)(v4 + 16) = result;
          int v6 = *(_DWORD *)v4 | 1;
          goto LABEL_5;
        case 5:
          *(void *)(v4 + 32) = result;
          int v6 = *(_DWORD *)v4 | 2;
          goto LABEL_5;
        case 6:
          *(void *)(v4 + 24) = result;
          (*(void (**)(void *__return_ptr))(*(void *)result + 200))(v8);
          uint64_t result = md::LabelPartContent::parsePartContent(v4, v8);
          if (v8[0])
          {
            v8[1] = v8[0];
            uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v9 + 40))(v9, v8[0], v8[2] - v8[0]);
          }
          break;
        case 7:
        case 8:
        case 9:
        case 0xB:
          uint64_t v7 = (*(unsigned char *)(*v2 + 562) - 7);
          if (*(void *)(v4 + 40))
          {
            *(void *)(v4 + 48) = result;
            int v5 = dword_1A2900634[v7];
          }
          else
          {
            *(void *)(v4 + 40) = result;
            int v5 = dword_1A2900620[v7];
          }
          int v6 = *(_DWORD *)v4 | v5;
LABEL_5:
          *(_DWORD *)uint64_t v4 = v6;
          break;
        default:
          break;
      }
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1A18767FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a9) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a12 + 40))(a12, a9, a11 - a9);
  }
  _Unwind_Resume(exception_object);
}

void md::LabelPart::children(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    uint64_t v4 = a1;
    uint64_t v2 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    a1 = v4;
    if (v3) {
      operator new();
    }
  }
  a1[3] = *((void *)v2 + 91);
}

uint64_t md::CompositeLabelPart::children@<X0>(md::CompositeLabelPart *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = *((void *)this + 75);
  a2[2] = 0;
  a2[3] = result;
  uint64_t v4 = (char *)*((void *)this + 72);
  int v5 = (char *)*((void *)this + 73);
  uint64_t v6 = v5 - v4;
  if (v5 != v4)
  {
    if (v6 < 0) {
      abort();
    }
    uint64_t v8 = v6 >> 3;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    *a2 = result;
    a2[2] = result + 8 * v8;
    do
    {
      if (result) {
        *(void *)uint64_t result = *(void *)v4;
      }
      v4 += 8;
      result += 8;
    }
    while (v4 != v5);
    a2[1] = result;
  }
  return result;
}

uint64_t md::LabelAnimator::LabelAnimator(uint64_t this, md::LabelManager *a2, md::Label *a3)
{
  *(void *)this = a2;
  *(void *)(this + 8) = a3;
  *(_OWORD *)(this + 16) = 0u;
  *(_OWORD *)(this + 32) = 0u;
  int v3 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    uint64_t v8 = this;
    int v3 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    int v5 = v4;
    this = v8;
    if (v5) {
      operator new();
    }
  }
  *(void *)(this + 48) = *((void *)v3 + 91);
  *(void *)(this + 56) = 0;
  *(void *)(this + 64) = 0;
  *(void *)(this + 72) = 0;
  {
    uint64_t v9 = this;
    int v3 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    int v7 = v6;
    this = v9;
    if (v7) {
      operator new();
    }
  }
  *(void *)(this + 80) = *((void *)v3 + 91);
  *(_WORD *)(this + 88) = 0;
  *(unsigned char *)(this + 90) = 0;
  return this;
}

long long *md::LabelAnimator::resolveParams(void *a1, int a2, unsigned int a3, int a4, int a5)
{
  int v5 = (char *)&animationParams + 140 * a3;
  int v6 = (long long *)(v5 + 4);
  int v7 = (long long *)(v5 + 72);
  if (a2 == 1) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v7;
  }
  if (*(unsigned char *)(*a1 + 3656))
  {
    int v13 = +[VKDebugSettings sharedSettings];
    if ([v13 tuneForwardLabelAnimation] == a4
      && a5 == [v13 labelAnimationTuningElement])
    {
      long long v14 = v8[3];
      xmmword_1E9593690 = v8[2];
      *(_OWORD *)&dword_1E95936A0 = v14;
      dword_1E95936B0 = *((_DWORD *)v8 + 16);
      long long v15 = v8[1];
      debugAnimationParams = *v8;
      *(_OWORD *)&dword_1E9593680 = v15;
      +[VKDebugSettings sharedSettings];
      if (a2 == 1) {
        unint64_t v16 = {;
      }
        uint64_t v17 = [v16 showLabelAnimationParams];
      }
      else {
        unint64_t v16 = {;
      }
        uint64_t v17 = [v16 hideLabelAnimationParams];
      }
      uint64_t v18 = v17;

      unsigned __int8 v19 = atomic_load((unsigned __int8 *)(a1[1] + 1242));
      uint64_t v20 = BYTE4(debugAnimationParams);
      if (v19)
      {
        uint64_t v25 = *((void *)&debugAnimationParams + 1);
        *(_DWORD *)(v18 + 8) = dword_1E9593680;
        *(void *)uint64_t v18 = v25;
        uint64_t v26 = byte_1E9593684;
        uint64_t v27 = qword_1E9593688;
        *(_DWORD *)(v18 + 32) = xmmword_1E9593690;
        *(void *)(v18 + 16) = v20;
        *(void *)(v18 + 24) = v27;
        uint64_t v28 = BYTE4(xmmword_1E9593690);
        int v29 = dword_1E95936A0;
        uint64_t v30 = *((void *)&xmmword_1E9593690 + 1);
        *(void *)(v18 + 40) = v26;
        *(void *)(v18 + 48) = v30;
        *(_DWORD *)(v18 + 56) = v29;
        *(void *)(v18 + 88) = byte_1E95936A4;
        uint64_t v31 = qword_1E95936A8;
        *(_DWORD *)(v18 + 80) = dword_1E95936B0;
        *(void *)(v18 + 64) = v28;
        *(void *)(v18 + 72) = v31;
      }
      else
      {
        if (BYTE4(debugAnimationParams))
        {
          if (*(void *)(v18 + 16)) {
            BYTE4(debugAnimationParams) = *(void *)(v18 + 16);
          }
          uint64_t v21 = *(void *)v18;
          dword_1E9593680 = *(_DWORD *)(v18 + 8);
          *((void *)&debugAnimationParams + 1) = v21;
        }
        if (byte_1E9593684)
        {
          if (*(void *)(v18 + 40)) {
            byte_1E9593684 = *(void *)(v18 + 40);
          }
          uint64_t v22 = *(void *)(v18 + 24);
          LODWORD(xmmword_1E9593690) = *(_DWORD *)(v18 + 32);
          qword_1E9593688 = v22;
        }
        if (BYTE4(xmmword_1E9593690))
        {
          if (*(void *)(v18 + 64)) {
            BYTE4(xmmword_1E9593690) = *(void *)(v18 + 64);
          }
          int v23 = *(_DWORD *)(v18 + 56);
          *((void *)&xmmword_1E9593690 + 1) = *(void *)(v18 + 48);
          dword_1E95936A0 = v23;
        }
        if (byte_1E95936A4)
        {
          if (*(void *)(v18 + 88)) {
            byte_1E95936A4 = *(void *)(v18 + 88);
          }
          uint64_t v24 = *(void *)(v18 + 72);
          dword_1E95936B0 = *(_DWORD *)(v18 + 80);
          qword_1E95936A8 = v24;
        }
      }
      uint64_t v8 = &debugAnimationParams;
    }
  }
  return v8;
}

void sub_1A1876D14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageWrapper<md::ShadowMeshDescriptor>::~ComponentStorageWrapper(uint64_t a1)
{
  gdc::ComponentStorageSignals::~ComponentStorageSignals((gdc::ComponentStorageSignals *)(a1 + 104));
  geo::sparse_map<gdc::Entity,md::ShadowMeshDescriptor>::~sparse_map((void *)(a1 + 32));
  JUMPOUT(0x1A6239270);
}

void *geo::sparse_map<gdc::Entity,md::ShadowMeshDescriptor>::~sparse_map(void *a1)
{
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    int v3 = (void *)a1[7];
    int v4 = (void *)a1[6];
    if (v3 != v2)
    {
      int v5 = v3 - 4;
      int v6 = v3 - 4;
      do
      {
        uint64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        int v7 = v6 - 1;
        v6 -= 5;
        v5 -= 5;
      }
      while (v7 != v2);
      int v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  uint64_t v9 = (void *)a1[3];
  if (v9)
  {
    a1[4] = v9;
    operator delete(v9);
  }
  unsigned int v10 = (void *)*a1;
  if (*a1)
  {
    uint64_t v11 = (void *)a1[1];
    int v12 = (void *)*a1;
    if (v11 != v10)
    {
      do
      {
        uint64_t v14 = *--v11;
        uint64_t v13 = v14;
        void *v11 = 0;
        if (v14) {
          MEMORY[0x1A6239270](v13, 0x1000C40104B78CFLL);
        }
      }
      while (v11 != v10);
      int v12 = (void *)*a1;
    }
    a1[1] = v10;
    operator delete(v12);
  }
  return a1;
}

void md::DebugDrawLogic::runBeforeLayout(uint64_t a1, int a2, int a3, md::DebugDrawContext *this)
{
  int v4 = (uint64_t *)this;
  md::DebugDrawContext::clearDebugDrawContext(this);
  uint64_t v6 = *(void *)(a1 + 120);
  int v7 = *(int8x8_t ***)(v6 + 384);
  int32x2_t v399 = *(int8x8_t ***)(v6 + 392);
  if (v7 != v399)
  {
    uint64_t v408 = (unint64_t *)(v4 + 15);
    int32x2_t v406 = v4;
    while (1)
    {
      uint64_t v401 = *v7;
      uint64_t v402 = *v7 + 15;
      int8x8_t v8 = (*v7)[16];
      if (!*(void *)&v8) {
        goto LABEL_24;
      }
      uint8x8_t v9 = (uint8x8_t)vcnt_s8(v8);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        uint64_t v10 = 0x70F7E7915EFF4E13;
        if (*(void *)&v8 <= 0x70F7E7915EFF4E13uLL) {
          uint64_t v10 = 0x70F7E7915EFF4E13uLL % *(void *)&v8;
        }
      }
      else
      {
        uint64_t v10 = (*(void *)&v8 - 1) & 0x70F7E7915EFF4E13;
      }
      uint64_t v11 = *(void **)(*(void *)v402 + 8 * v10);
      if (!v11 || (int v12 = (void *)*v11) == 0) {
LABEL_24:
      }
        operator new();
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v13 = *(void *)&v8 - 1;
        while (1)
        {
          uint64_t v15 = v12[1];
          if (v15 == 0x70F7E7915EFF4E13)
          {
            if (v12[2] == 0x70F7E7915EFF4E13) {
              goto LABEL_381;
            }
          }
          else if ((v15 & v13) != v10)
          {
            goto LABEL_24;
          }
          int v12 = (void *)*v12;
          if (!v12) {
            goto LABEL_24;
          }
        }
      }
      while (1)
      {
        unint64_t v14 = v12[1];
        if (v14 == 0x70F7E7915EFF4E13) {
          break;
        }
        if (v14 >= *(void *)&v8) {
          v14 %= *(void *)&v8;
        }
        if (v14 != v10) {
          goto LABEL_24;
        }
LABEL_14:
        int v12 = (void *)*v12;
        if (!v12) {
          goto LABEL_24;
        }
      }
      if (v12[2] != 0x70F7E7915EFF4E13) {
        goto LABEL_14;
      }
LABEL_381:
      float v262 = (void *)v12[3];
      uint64_t v16 = v262[7];
      uint64_t v17 = v262[8];
      if (v16 != v17)
      {
        uint64_t v18 = v262[10];
        do
        {
          unsigned __int8 v19 = *(void **)v18;
          uint64_t v20 = *(void **)(v18 + 8);
          if (*(void **)v18 != v20)
          {
            do
            {
              uint64_t v22 = v19[58];
              for (uint64_t i = v19[59]; v22 != i; v22 += 72)
                md::DebugDrawContext::addTileLocalDebugShape((uint64_t)v4, (unint64_t)v19, v22, (int *)(v22 + 56));
              uint64_t v23 = v19[61];
              for (uint64_t j = v19[62]; v23 != j; v23 += 40)
                md::DebugDrawContext::addTileLocalLines(v4, (unint64_t)v19, *(long long **)v23, *(long long **)(v23 + 8), (int *)(v23 + 24));
              v19 += 64;
            }
            while (v19 != v20);
          }
          v18 += 24;
          v16 += 8;
        }
        while (v16 != v17);
      }
      int8x8_t v25 = v401[16];
      unsigned __int8 v400 = v7;
      if (!*(void *)&v25) {
        goto LABEL_55;
      }
      uint8x8_t v26 = (uint8x8_t)vcnt_s8(v25);
      v26.i16[0] = vaddlv_u8(v26);
      if (v26.u32[0] > 1uLL)
      {
        unint64_t v27 = 0xDFC23109856CD9E1;
        if (*(void *)&v25 <= 0xDFC23109856CD9E1) {
          unint64_t v27 = 0xDFC23109856CD9E1 % *(void *)&v25;
        }
      }
      else
      {
        unint64_t v27 = (*(void *)&v25 - 1) & 0xDFC23109856CD9E1;
      }
      uint64_t v28 = *(void **)(*(void *)v402 + 8 * v27);
      if (!v28 || (int v29 = (void *)*v28) == 0) {
LABEL_55:
      }
        operator new();
      if (v26.u32[0] < 2uLL)
      {
        uint64_t v30 = *(void *)&v25 - 1;
        while (1)
        {
          uint64_t v32 = v29[1];
          if (v32 == 0xDFC23109856CD9E1)
          {
            if (v29[2] == 0xDFC23109856CD9E1) {
              goto LABEL_382;
            }
          }
          else if ((v32 & v30) != v27)
          {
            goto LABEL_55;
          }
          int v29 = (void *)*v29;
          if (!v29) {
            goto LABEL_55;
          }
        }
      }
      while (2)
      {
        unint64_t v31 = v29[1];
        if (v31 != 0xDFC23109856CD9E1)
        {
          if (v31 >= *(void *)&v25) {
            v31 %= *(void *)&v25;
          }
          if (v31 != v27) {
            goto LABEL_55;
          }
          goto LABEL_45;
        }
        if (v29[2] != 0xDFC23109856CD9E1)
        {
LABEL_45:
          int v29 = (void *)*v29;
          if (!v29) {
            goto LABEL_55;
          }
          continue;
        }
        break;
      }
LABEL_382:
      long long v263 = (void *)v29[3];
      uint64_t v33 = v263[7];
      uint64_t v403 = v263[8];
      if (v33 != v403)
      {
        int v34 = (uint64_t *)v263[10];
        do
        {
          uint64_t v405 = v33;
          uint64_t v36 = *v34;
          uint64_t v35 = v34[1];
          if (*v34 != v35)
          {
            do
            {
              md::DebugDrawContext::addWorldDebugShape(v4, v36, (int *)(v36 + 112));
              v36 += 128;
            }
            while (v36 != v35);
          }
          uint64_t v38 = v34[3];
          uint64_t v37 = v34[4];
          unint64_t v404 = v34;
          uint64_t v410 = v37;
          while (v38 != v37)
          {
            uint64_t v41 = v4[13];
            unint64_t v42 = v4[14];
            uint64_t v43 = v41;
            if (v41 != v42)
            {
              int v44 = *(_DWORD *)(v38 + 24);
              int v45 = *(unsigned __int8 *)(v38 + 36);
              if (*(unsigned char *)(v38 + 32))
              {
                uint64_t v43 = v4[13];
                while (v44 != *(_DWORD *)v43
                     || v45 != *(unsigned __int8 *)(v43 + 12)
                     || !*(unsigned char *)(v43 + 8)
                     || *(float *)(v38 + 28) != *(float *)(v43 + 4))
                {
                  v43 += 40;
                  if (v43 == v42) {
                    goto LABEL_81;
                  }
                }
              }
              else
              {
                uint64_t v43 = v4[13];
                while (v44 != *(_DWORD *)v43 || v45 != *(unsigned __int8 *)(v43 + 12) || *(unsigned char *)(v43 + 8))
                {
                  v43 += 40;
                  if (v43 == v42) {
                    goto LABEL_81;
                  }
                }
              }
            }
            if (v43 == v42)
            {
              int v44 = *(_DWORD *)(v38 + 24);
LABEL_81:
              uint64_t v411 = *(void *)(v38 + 28);
              char v412 = *(unsigned char *)(v38 + 36);
              if (v41 == v42)
              {
                uint64_t v43 = v4[13];
              }
              else if (BYTE4(v411))
              {
                uint64_t v43 = v4[13];
                while (v44 != *(_DWORD *)v43
                     || v412 != *(unsigned char *)(v43 + 12)
                     || !*(unsigned char *)(v43 + 8)
                     || *(float *)&v411 != *(float *)(v43 + 4))
                {
                  v43 += 40;
                  if (v43 == v42) {
                    goto LABEL_92;
                  }
                }
              }
              else
              {
                uint64_t v43 = v4[13];
                while (v44 != *(_DWORD *)v43 || v412 != *(unsigned char *)(v43 + 12) || *(unsigned char *)(v43 + 8))
                {
                  v43 += 40;
                  if (v43 == v42) {
                    goto LABEL_92;
                  }
                }
              }
              if (v43 == v42)
              {
LABEL_92:
                if (v42 >= *v408)
                {
                  unint64_t v46 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v42 - v41) >> 3);
                  if (v46 + 1 > 0x666666666666666) {
                    abort();
                  }
                  unint64_t v47 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v408 - v41) >> 3);
                  uint64_t v48 = 2 * v47;
                  if (2 * v47 <= v46 + 1) {
                    uint64_t v48 = v46 + 1;
                  }
                  if (v47 >= 0x333333333333333) {
                    unint64_t v49 = 0x666666666666666;
                  }
                  else {
                    unint64_t v49 = v48;
                  }
                  if (v49)
                  {
                    if (v49 > 0x666666666666666) {
                      goto LABEL_536;
                    }
                    uint64_t v50 = (char *)operator new(40 * v49);
                  }
                  else
                  {
                    uint64_t v50 = 0;
                  }
                  __int32 v413 = &v50[40 * v46];
                  unint64_t v415 = &v50[40 * v49];
                  *(_DWORD *)__int32 v413 = v44;
                  *(void *)(v413 + 4) = v411;
                  v413[12] = v412;
                  *((void *)v413 + 3) = 0;
                  *((void *)v413 + 4) = 0;
                  *((void *)v413 + 2) = 0;
                  std::vector<std::vector<gm::LineSegment<float,3>>>::__init_with_size[abi:nn180100]<std::vector<gm::LineSegment<float,3>>*,std::vector<gm::LineSegment<float,3>>*>((void *)v413 + 2, 0, 0, 0);
                  uint64_t v51 = (uint64_t)(v413 + 40);
                  unsigned __int8 v52 = (char *)v4[13];
                  uint64_t v53 = (char *)v4[14];
                  if (v53 == v52)
                  {
                    v4[13] = (uint64_t)v413;
                    v4[14] = v51;
                    v4[15] = (uint64_t)v415;
                  }
                  else
                  {
                    uint64_t v54 = 0;
                    do
                    {
                      uint64_t v55 = &v413[v54];
                      __int16 v56 = &v53[v54];
                      *((_DWORD *)v55 - 10) = *(_DWORD *)&v53[v54 - 40];
                      uint64_t v57 = *(void *)&v53[v54 - 36];
                      *(v55 - 28) = v53[v54 - 28];
                      *(void *)(v55 - 36) = v57;
                      *((void *)v55 - 2) = 0;
                      *((void *)v55 - 1) = 0;
                      *((void *)v55 - 3) = 0;
                      *(_OWORD *)(v55 - 24) = *(_OWORD *)&v53[v54 - 24];
                      *((void *)v55 - 1) = *(void *)&v53[v54 - 8];
                      *((void *)v56 - 3) = 0;
                      *((void *)v56 - 2) = 0;
                      *((void *)v56 - 1) = 0;
                      v54 -= 40;
                    }
                    while (&v53[v54] != v52);
                    uint64_t v53 = (char *)v4[13];
                    unint64_t v58 = (char *)v4[14];
                    v4[13] = (uint64_t)&v413[v54];
                    v4[14] = v51;
                    v4[15] = (uint64_t)v415;
                    while (v58 != v53)
                    {
                      uint64_t v60 = *((void *)v58 - 3);
                      if (v60)
                      {
                        uint64_t v61 = *((void *)v58 - 2);
                        int64x2_t v59 = (void *)*((void *)v58 - 3);
                        if (v61 != v60)
                        {
                          uint64_t v62 = *((void *)v58 - 2);
                          do
                          {
                            __int16 v64 = *(void **)(v62 - 24);
                            v62 -= 24;
                            uint64_t v63 = v64;
                            if (v64)
                            {
                              *(void *)(v61 - 16) = v63;
                              operator delete(v63);
                            }
                            uint64_t v61 = v62;
                          }
                          while (v62 != v60);
                          int64x2_t v59 = (void *)*((void *)v58 - 3);
                        }
                        *((void *)v58 - 2) = v60;
                        operator delete(v59);
                      }
                      v58 -= 40;
                    }
                  }
                  if (v53) {
                    operator delete(v53);
                  }
                  v4[14] = v51;
                  uint64_t v43 = (uint64_t)v413;
                }
                else
                {
                  *(_DWORD *)unint64_t v42 = v44;
                  *(unsigned char *)(v42 + 12) = v412;
                  *(void *)(v42 + 4) = v411;
                  *(void *)(v42 + 24) = 0;
                  *(void *)(v42 + 32) = 0;
                  *(void *)(v42 + 16) = 0;
                  std::vector<std::vector<gm::LineSegment<float,3>>>::__init_with_size[abi:nn180100]<std::vector<gm::LineSegment<float,3>>*,std::vector<gm::LineSegment<float,3>>*>((void *)(v42 + 16), 0, 0, 0);
                  v4[14] = v42 + 40;
                  uint64_t v43 = v42;
                }
              }
            }
            unint64_t v65 = *(void *)(v43 + 32);
            uint64_t v66 = *(void **)(v43 + 24);
            if ((unint64_t)v66 >= v65)
            {
              uint64_t v72 = *(void **)(v43 + 16);
              unint64_t v73 = 0xAAAAAAAAAAAAAAABLL * (v66 - v72) + 1;
              if (v73 > 0xAAAAAAAAAAAAAAALL) {
                abort();
              }
              unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - (void)v72) >> 3);
              if (2 * v74 > v73) {
                unint64_t v73 = 2 * v74;
              }
              if (v74 >= 0x555555555555555) {
                unint64_t v75 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v75 = v73;
              }
              if (v75)
              {
                if (v75 > 0xAAAAAAAAAAAAAAALL) {
LABEL_536:
                }
                  std::__throw_bad_array_new_length[abi:nn180100]();
                uint64_t v76 = (char *)operator new(24 * v75);
              }
              else
              {
                uint64_t v76 = 0;
              }
              unsigned __int8 v77 = &v76[8 * (v66 - v72)];
              long long v78 = &v76[24 * v75];
              *((void *)&v414 + 1) = v78;
              *((void *)v77 + 1) = 0;
              long long v79 = v77 + 8;
              *((void *)v77 + 2) = 0;
              *(void *)unsigned __int8 v77 = 0;
              unint64_t v81 = *(const void **)v38;
              unint64_t v80 = *(const void **)(v38 + 8);
              uint64_t v409 = v38;
              int64_t v82 = (int64_t)v80 - *(void *)v38;
              if (v80 != v81)
              {
                unint64_t v407 = &v76[24 * v75];
                if (0xAAAAAAAAAAAAAAABLL * (v82 >> 3) > 0xAAAAAAAAAAAAAAALL) {
                  abort();
                }
                unsigned __int8 v83 = (char *)operator new(v82);
                *(void *)unsigned __int8 v77 = v83;
                void *v79 = v83;
                *((void *)v77 + 2) = &v83[8 * (v82 >> 3)];
                size_t v84 = 24 * ((v82 - 24) / 0x18uLL) + 24;
                memcpy(v83, v81, v84);
                void *v79 = &v83[v84];
                int v4 = v406;
                long long v78 = v407;
              }
              char v39 = v77 + 24;
              *(void *)&long long v414 = v77 + 24;
              if (v66 == v72)
              {
                *(void *)(v43 + 16) = v77;
                *(void *)(v43 + 24) = v39;
                *(void *)(v43 + 32) = v78;
                uint64_t v40 = v409;
                goto LABEL_153;
              }
              do
              {
                double v85 = v77;
                *((void *)v77 - 2) = 0;
                *((void *)v77 - 1) = 0;
                long long v86 = *(_OWORD *)(v66 - 3);
                v66 -= 3;
                *(_OWORD *)(v77 - 24) = v86;
                v77 -= 24;
                *((void *)v85 - 1) = v66[2];
                void *v66 = 0;
                v66[1] = 0;
                v66[2] = 0;
              }
              while (v66 != v72);
              uint64_t v66 = *(void **)(v43 + 16);
              float v87 = *(void **)(v43 + 24);
              *(void *)(v43 + 16) = v77;
              *(_OWORD *)(v43 + 24) = v414;
              char v39 = (void *)v414;
              uint64_t v40 = v409;
              if (v87 != v66)
              {
                char v88 = v87;
                do
                {
                  char v90 = (void *)*(v88 - 3);
                  v88 -= 3;
                  uint64_t v89 = v90;
                  if (v90)
                  {
                    *(v87 - 2) = v89;
                    operator delete(v89);
                  }
                  float v87 = v88;
                }
                while (v88 != v66);
LABEL_153:
                if (!v66) {
                  goto LABEL_63;
                }
LABEL_154:
                operator delete(v66);
                goto LABEL_63;
              }
              if (v66) {
                goto LABEL_154;
              }
            }
            else
            {
              void *v66 = 0;
              v66[1] = 0;
              v66[2] = 0;
              int v67 = *(const void **)v38;
              uint64_t v68 = v38;
              int64_t v69 = *(void *)(v38 + 8) - *(void *)v38;
              if (v69)
              {
                if (0xAAAAAAAAAAAAAAABLL * (v69 >> 3) > 0xAAAAAAAAAAAAAAALL) {
                  abort();
                }
                uint64_t v70 = (char *)operator new(v69);
                void *v66 = v70;
                v66[1] = v70;
                v66[2] = &v70[8 * (v69 >> 3)];
                size_t v71 = 24 * ((v69 - 24) / 0x18uLL) + 24;
                memcpy(v70, v67, v71);
                v66[1] = &v70[v71];
              }
              char v39 = v66 + 3;
              *(void *)(v43 + 24) = v66 + 3;
              uint64_t v40 = v68;
            }
LABEL_63:
            *(void *)(v43 + 24) = v39;
            uint64_t v38 = v40 + 40;
            uint64_t v37 = v410;
          }
          int v34 = v404 + 6;
          uint64_t v33 = v405 + 8;
        }
        while (v405 + 8 != v403);
      }
      char v91 = (void *)gdc::Registry::storage<gdc::Tiled>(v401);
      uint64_t v92 = 0;
      unint64_t v93 = 0xCBF29CE484222325;
      do
        unint64_t v93 = 0x100000001B3 * (v93 ^ aStdStringViewG_769[v92++ + 38]);
      while (v92 != 109);
      int8x8_t v94 = v401[16];
      if (!*(void *)&v94) {
        goto LABEL_179;
      }
      uint8x8_t v95 = (uint8x8_t)vcnt_s8(v94);
      v95.i16[0] = vaddlv_u8(v95);
      if (v95.u32[0] > 1uLL)
      {
        unint64_t v96 = v93;
        if (*(void *)&v94 <= v93) {
          unint64_t v96 = v93 % *(void *)&v94;
        }
      }
      else
      {
        unint64_t v96 = (*(void *)&v94 - 1) & v93;
      }
      int v97 = *(void **)(*(void *)v402 + 8 * v96);
      if (!v97 || (int v98 = (void *)*v97) == 0) {
LABEL_179:
      }
        operator new();
      if (v95.u32[0] < 2uLL)
      {
        uint64_t v99 = *(void *)&v94 - 1;
        while (1)
        {
          uint64_t v101 = v98[1];
          if (v101 == v93)
          {
            if (v98[2] == v93) {
              goto LABEL_383;
            }
          }
          else if ((v101 & v99) != v96)
          {
            goto LABEL_179;
          }
          int v98 = (void *)*v98;
          if (!v98) {
            goto LABEL_179;
          }
        }
      }
      while (1)
      {
        unint64_t v100 = v98[1];
        if (v100 == v93) {
          break;
        }
        if (v100 >= *(void *)&v94) {
          v100 %= *(void *)&v94;
        }
        if (v100 != v96) {
          goto LABEL_179;
        }
LABEL_169:
        int v98 = (void *)*v98;
        if (!v98) {
          goto LABEL_179;
        }
      }
      if (v98[2] != v93) {
        goto LABEL_169;
      }
LABEL_383:
      int v264 = (void *)v98[3];
      uint64_t v102 = gdc::Registry::storage<debugComponents::DisplayOptions>(v401);
      float v103 = (void *)v102;
      uint64_t v104 = v102 + 32;
      int v105 = (unint64_t *)v91[7];
      int v106 = (uint64_t *)v91[8];
      if (v264[8] - v264[7] >= (unint64_t)((char *)v106 - (char *)v105)) {
        BOOL v107 = v91 + 4;
      }
      else {
        BOOL v107 = v264 + 4;
      }
      if (*(void *)(v102 + 64) - *(void *)(v102 + 56) >= v107[4] - v107[3]) {
        unsigned int v108 = v107;
      }
      else {
        unsigned int v108 = (void *)(v102 + 32);
      }
      if (v91 + 4 == v108 && v105 != (unint64_t *)v106)
      {
        unint64_t v113 = v91[10];
        do
        {
          unint64_t v197 = *((unsigned int *)v105 + 1);
          unint64_t v198 = v197 >> 7;
          uint64_t v199 = v264[4];
          unint64_t v200 = (v264[5] - v199) >> 3;
          if (v197 >> 7 >= v200) {
            goto LABEL_309;
          }
          uint64_t v201 = *(void *)(v199 + 8 * v198);
          if (!v201) {
            goto LABEL_309;
          }
          unint64_t v202 = *(unsigned __int16 *)(v201 + 2 * (v197 & 0x7F));
          uint64_t v204 = v264[7];
          uint64_t v203 = v264[8];
          unint64_t v205 = (v203 - v204) >> 3;
          if (v205 <= v202) {
            goto LABEL_309;
          }
          uint64_t v206 = v204 + 8 * v202;
          if (v206 == v203 || *(_DWORD *)(v206 + 4) != v197) {
            goto LABEL_309;
          }
          uint64_t v208 = v103[4];
          unint64_t v209 = (v103[5] - v208) >> 3;
          if (v198 >= v209) {
            goto LABEL_309;
          }
          uint64_t v210 = *(void *)(v208 + 8 * v198);
          if (!v210) {
            goto LABEL_309;
          }
          unint64_t v211 = *(unsigned __int16 *)(v210 + 2 * (v197 & 0x7F));
          uint64_t v213 = v103[7];
          uint64_t v212 = v103[8];
          unint64_t v214 = (v212 - v213) >> 3;
          if (v214 <= v211) {
            goto LABEL_309;
          }
          uint64_t v215 = v213 + 8 * v211;
          if (v215 == v212 || *(_DWORD *)(v215 + 4) != v197) {
            goto LABEL_309;
          }
          unint64_t v217 = *v105;
          unint64_t v218 = HIDWORD(*v105);
          unint64_t v219 = *v105 >> 39;
          if (v219 < v200
            && (uint64_t v220 = *(void *)(v199 + 8 * v219)) != 0
            && (unint64_t v221 = *(unsigned __int16 *)(v220 + 2 * (HIDWORD(v217) & 0x7F)), v205 > v221)
            && ((uint64_t v222 = v204 + 8 * v221, v222 != v203) ? (v223 = *(_DWORD *)(v222 + 4) == v218) : (v223 = 0),
                v223))
          {
            uint64_t v224 = v264[10] + 56 * v221;
            if (v219 >= v209) {
              goto LABEL_307;
            }
          }
          else
          {
            uint64_t v224 = v264[11];
            if (v219 >= v209) {
              goto LABEL_307;
            }
          }
          uint64_t v225 = *(void *)(v208 + 8 * v219);
          if (v225)
          {
            unint64_t v226 = *(unsigned __int16 *)(v225 + 2 * (HIDWORD(v217) & 0x7F));
            if (v214 > v226)
            {
              uint64_t v227 = v213 + 8 * v226;
              if (v227 != v212 && *(_DWORD *)(v227 + 4) == v218)
              {
                BOOL v196 = (int *)(v103[10] + 16 * v226);
                goto LABEL_308;
              }
            }
          }
LABEL_307:
          BOOL v196 = (int *)v103[11];
LABEL_308:
          md::DebugDrawContext::addTileLocalDebugShape((uint64_t)v406, v113, v224, v196);
LABEL_309:
          v113 += 464;
          ++v105;
        }
        while (v105 != (unint64_t *)v106);
      }
      if (v264 + 4 == v108)
      {
        double v114 = (unint64_t *)v264[7];
        double v115 = (uint64_t *)v264[8];
        if (v114 != (unint64_t *)v115)
        {
          uint64_t v116 = v264[10];
          do
          {
            unint64_t v268 = *((unsigned int *)v114 + 1);
            unint64_t v269 = v268 >> 7;
            uint64_t v270 = v91[4];
            unint64_t v271 = (v91[5] - v270) >> 3;
            if (v268 >> 7 >= v271) {
              goto LABEL_388;
            }
            uint64_t v272 = *(void *)(v270 + 8 * v269);
            if (!v272) {
              goto LABEL_388;
            }
            unint64_t v273 = *(unsigned __int16 *)(v272 + 2 * (v268 & 0x7F));
            uint64_t v275 = v91[7];
            uint64_t v274 = v91[8];
            unint64_t v276 = (v274 - v275) >> 3;
            if (v276 <= v273) {
              goto LABEL_388;
            }
            uint64_t v277 = v275 + 8 * v273;
            if (v277 == v274 || *(_DWORD *)(v277 + 4) != v268) {
              goto LABEL_388;
            }
            uint64_t v279 = v103[4];
            unint64_t v280 = (v103[5] - v279) >> 3;
            if (v269 >= v280) {
              goto LABEL_388;
            }
            uint64_t v281 = *(void *)(v279 + 8 * v269);
            if (!v281) {
              goto LABEL_388;
            }
            unint64_t v282 = *(unsigned __int16 *)(v281 + 2 * (v268 & 0x7F));
            uint64_t v284 = v103[7];
            uint64_t v283 = v103[8];
            unint64_t v285 = (v283 - v284) >> 3;
            if (v285 <= v282) {
              goto LABEL_388;
            }
            uint64_t v286 = v284 + 8 * v282;
            if (v286 == v283 || *(_DWORD *)(v286 + 4) != v268) {
              goto LABEL_388;
            }
            unint64_t v288 = *v114;
            unint64_t v289 = HIDWORD(*v114);
            unint64_t v290 = *v114 >> 39;
            if (v290 < v271
              && (uint64_t v291 = *(void *)(v270 + 8 * v290)) != 0
              && (unint64_t v292 = *(unsigned __int16 *)(v291 + 2 * (HIDWORD(v288) & 0x7F)), v276 > v292)
              && ((uint64_t v293 = v275 + 8 * v292, v293 != v274) ? (v294 = *(_DWORD *)(v293 + 4) == v289) : (v294 = 0),
                  v294))
            {
              unint64_t v295 = v91[10] + 464 * v292;
              if (v290 >= v280) {
                goto LABEL_386;
              }
            }
            else
            {
              unint64_t v295 = v91[11];
              if (v290 >= v280) {
                goto LABEL_386;
              }
            }
            uint64_t v296 = *(void *)(v279 + 8 * v290);
            if (v296)
            {
              unint64_t v297 = *(unsigned __int16 *)(v296 + 2 * (HIDWORD(v288) & 0x7F));
              if (v285 > v297)
              {
                uint64_t v298 = v284 + 8 * v297;
                if (v298 != v283 && *(_DWORD *)(v298 + 4) == v289)
                {
                  unint64_t v267 = (int *)(v103[10] + 16 * v297);
                  goto LABEL_387;
                }
              }
            }
LABEL_386:
            unint64_t v267 = (int *)v103[11];
LABEL_387:
            md::DebugDrawContext::addTileLocalDebugShape((uint64_t)v406, v295, v116, v267);
LABEL_388:
            v116 += 56;
            ++v114;
          }
          while (v114 != (unint64_t *)v115);
        }
      }
      if ((void *)v104 == v108)
      {
        double v117 = (unint64_t *)v103[7];
        double v118 = (uint64_t *)v103[8];
        if (v117 != (unint64_t *)v118)
        {
          uint64_t v119 = (int *)v103[10];
          do
          {
            unint64_t v301 = *((unsigned int *)v117 + 1);
            unint64_t v302 = v301 >> 7;
            uint64_t v303 = v91[4];
            unint64_t v304 = (v91[5] - v303) >> 3;
            if (v301 >> 7 >= v304) {
              goto LABEL_425;
            }
            uint64_t v305 = *(void *)(v303 + 8 * v302);
            if (!v305) {
              goto LABEL_425;
            }
            unint64_t v306 = *(unsigned __int16 *)(v305 + 2 * (v301 & 0x7F));
            uint64_t v308 = v91[7];
            uint64_t v307 = v91[8];
            unint64_t v309 = (v307 - v308) >> 3;
            if (v309 <= v306) {
              goto LABEL_425;
            }
            uint64_t v310 = v308 + 8 * v306;
            if (v310 == v307 || *(_DWORD *)(v310 + 4) != v301) {
              goto LABEL_425;
            }
            uint64_t v312 = v264[4];
            unint64_t v313 = (v264[5] - v312) >> 3;
            if (v302 >= v313) {
              goto LABEL_425;
            }
            uint64_t v314 = *(void *)(v312 + 8 * v302);
            if (!v314) {
              goto LABEL_425;
            }
            unint64_t v315 = *(unsigned __int16 *)(v314 + 2 * (v301 & 0x7F));
            uint64_t v317 = v264[7];
            uint64_t v316 = v264[8];
            unint64_t v318 = (v316 - v317) >> 3;
            if (v318 <= v315) {
              goto LABEL_425;
            }
            uint64_t v319 = v317 + 8 * v315;
            if (v319 == v316 || *(_DWORD *)(v319 + 4) != v301) {
              goto LABEL_425;
            }
            unint64_t v321 = *v117;
            unint64_t v322 = HIDWORD(*v117);
            unint64_t v323 = *v117 >> 39;
            if (v323 < v304
              && (uint64_t v324 = *(void *)(v303 + 8 * v323)) != 0
              && (unint64_t v325 = *(unsigned __int16 *)(v324 + 2 * (HIDWORD(v321) & 0x7F)), v309 > v325)
              && ((v326 = v308 + 8 * v325, v326 != v307) ? (BOOL v327 = *(_DWORD *)(v326 + 4) == v322) : (BOOL v327 = 0),
                  v327))
            {
              unint64_t v328 = v91[10] + 464 * v325;
              if (v323 >= v313) {
                goto LABEL_423;
              }
            }
            else
            {
              unint64_t v328 = v91[11];
              if (v323 >= v313) {
                goto LABEL_423;
              }
            }
            uint64_t v329 = *(void *)(v312 + 8 * v323);
            if (v329)
            {
              unint64_t v330 = *(unsigned __int16 *)(v329 + 2 * (HIDWORD(v321) & 0x7F));
              if (v318 > v330)
              {
                uint64_t v331 = v317 + 8 * v330;
                if (v331 != v316 && *(_DWORD *)(v331 + 4) == v322)
                {
                  uint64_t v300 = v264[10] + 56 * v330;
                  goto LABEL_424;
                }
              }
            }
LABEL_423:
            uint64_t v300 = v264[11];
LABEL_424:
            md::DebugDrawContext::addTileLocalDebugShape((uint64_t)v406, v328, v300, v119);
LABEL_425:
            v119 += 4;
            ++v117;
          }
          while (v117 != (unint64_t *)v118);
        }
      }
      int8x8_t v110 = v401[16];
      if (!*(void *)&v110) {
        goto LABEL_217;
      }
      uint8x8_t v111 = (uint8x8_t)vcnt_s8(v110);
      v111.i16[0] = vaddlv_u8(v111);
      if (v111.u32[0] > 1uLL)
      {
        unint64_t v112 = 0x81C954A6A37E98E1;
        if (*(void *)&v110 <= 0x81C954A6A37E98E1) {
          unint64_t v112 = 0x81C954A6A37E98E1 % *(void *)&v110;
        }
      }
      else
      {
        unint64_t v112 = (*(void *)&v110 - 1) & 0x81C954A6A37E98E1;
      }
      int v120 = *(void **)(*(void *)v402 + 8 * v112);
      if (!v120 || (BOOL v121 = (void *)*v120) == 0) {
LABEL_217:
      }
        operator new();
      if (v111.u32[0] < 2uLL)
      {
        uint64_t v122 = *(void *)&v110 - 1;
        while (1)
        {
          uint64_t v124 = v121[1];
          if (v124 == 0x81C954A6A37E98E1)
          {
            if (v121[2] == 0x81C954A6A37E98E1) {
              goto LABEL_384;
            }
          }
          else if ((v124 & v122) != v112)
          {
            goto LABEL_217;
          }
          BOOL v121 = (void *)*v121;
          if (!v121) {
            goto LABEL_217;
          }
        }
      }
      while (1)
      {
        unint64_t v123 = v121[1];
        if (v123 == 0x81C954A6A37E98E1) {
          break;
        }
        if (v123 >= *(void *)&v110) {
          v123 %= *(void *)&v110;
        }
        if (v123 != v112) {
          goto LABEL_217;
        }
LABEL_207:
        BOOL v121 = (void *)*v121;
        if (!v121) {
          goto LABEL_217;
        }
      }
      if (v121[2] != 0x81C954A6A37E98E1) {
        goto LABEL_207;
      }
LABEL_384:
      uint64_t v265 = (void *)v121[3];
      uint64_t v125 = gdc::Registry::storage<debugComponents::DisplayOptions>(v401);
      unsigned int v126 = (void *)v125;
      uint64_t v127 = v125 + 32;
      int16x8_t v129 = (unint64_t *)v265[7];
      double v128 = (uint64_t *)v265[8];
      if (*(void *)(v125 + 64) - *(void *)(v125 + 56) >= (unint64_t)((char *)v128 - (char *)v129)) {
        int v130 = v265 + 4;
      }
      else {
        int v130 = (void *)(v125 + 32);
      }
      if (v265 + 4 == v130 && v129 != (unint64_t *)v128)
      {
        uint64_t v136 = v265[10];
        do
        {
          unint64_t v138 = *((unsigned int *)v129 + 1);
          uint64_t v139 = v126[4];
          unint64_t v140 = (v126[5] - v139) >> 3;
          if (v138 >> 7 < v140)
          {
            uint64_t v141 = *(void *)(v139 + 8 * (v138 >> 7));
            if (v141)
            {
              unint64_t v142 = *(unsigned __int16 *)(v141 + 2 * (v138 & 0x7F));
              uint64_t v144 = v126[7];
              uint64_t v143 = v126[8];
              unint64_t v145 = (v143 - v144) >> 3;
              if (v145 > v142)
              {
                uint64_t v146 = v144 + 8 * v142;
                if (v146 != v143 && *(_DWORD *)(v146 + 4) == v138)
                {
                  unint64_t v148 = *v129;
                  unint64_t v149 = *v129 >> 39;
                  if (v149 < v140
                    && (uint64_t v150 = *(void *)(v139 + 8 * v149)) != 0
                    && (unint64_t v151 = *(unsigned __int16 *)(v150 + 2 * (HIDWORD(v148) & 0x7F)), v145 > v151)
                    && ((unint64_t v152 = HIDWORD(v148), v153 = v144 + 8 * v151, v153 != v143)
                      ? (BOOL v154 = *(_DWORD *)(v153 + 4) == v152)
                      : (BOOL v154 = 0),
                        v154))
                  {
                    unint64_t v137 = (int *)(v126[10] + 16 * v151);
                  }
                  else
                  {
                    unint64_t v137 = (int *)v126[11];
                  }
                  md::DebugDrawContext::addWorldDebugShape(v406, v136, v137);
                }
              }
            }
          }
          v136 += 112;
          ++v129;
        }
        while (v129 != (unint64_t *)v128);
      }
      if ((void *)v127 == v130)
      {
        uint64_t v155 = (unint64_t *)v126[7];
        int v156 = (uint64_t *)v126[8];
        if (v155 != (unint64_t *)v156)
        {
          int v157 = (int *)v126[10];
          do
          {
            unint64_t v159 = *((unsigned int *)v155 + 1);
            uint64_t v160 = v265[4];
            unint64_t v161 = (v265[5] - v160) >> 3;
            if (v159 >> 7 < v161)
            {
              uint64_t v162 = *(void *)(v160 + 8 * (v159 >> 7));
              if (v162)
              {
                unint64_t v163 = *(unsigned __int16 *)(v162 + 2 * (v159 & 0x7F));
                uint64_t v165 = v265[7];
                uint64_t v164 = v265[8];
                unint64_t v166 = (v164 - v165) >> 3;
                if (v166 > v163)
                {
                  uint64_t v167 = v165 + 8 * v163;
                  if (v167 != v164 && *(_DWORD *)(v167 + 4) == v159)
                  {
                    unint64_t v169 = *v155;
                    unint64_t v170 = *v155 >> 39;
                    if (v170 < v161
                      && (uint64_t v171 = *(void *)(v160 + 8 * v170)) != 0
                      && (unint64_t v172 = *(unsigned __int16 *)(v171 + 2 * (HIDWORD(v169) & 0x7F)), v166 > v172)
                      && ((unint64_t v173 = HIDWORD(v169), v174 = v165 + 8 * v172, v174 != v164)
                        ? (BOOL v175 = *(_DWORD *)(v174 + 4) == v173)
                        : (BOOL v175 = 0),
                          v175))
                    {
                      uint64_t v158 = v265[10] + 112 * v172;
                    }
                    else
                    {
                      uint64_t v158 = v265[11];
                    }
                    md::DebugDrawContext::addWorldDebugShape(v406, v158, v157);
                  }
                }
              }
            }
            v157 += 4;
            ++v155;
          }
          while (v155 != (unint64_t *)v156);
        }
      }
      unint64_t v132 = (void *)gdc::Registry::storage<gdc::Tiled>(v401);
      int8x8_t v133 = v401[16];
      if (!*(void *)&v133) {
        goto LABEL_289;
      }
      uint8x8_t v134 = (uint8x8_t)vcnt_s8(v133);
      v134.i16[0] = vaddlv_u8(v134);
      if (v134.u32[0] > 1uLL)
      {
        unint64_t v135 = 0x8A75A62DDED2878DLL;
        if (*(void *)&v133 <= 0x8A75A62DDED2878DLL) {
          unint64_t v135 = 0x8A75A62DDED2878DLL % *(void *)&v133;
        }
      }
      else
      {
        unint64_t v135 = (*(void *)&v133 - 1) & 0x8A75A62DDED2878DLL;
      }
      char v176 = *(void **)(*(void *)v402 + 8 * v135);
      if (!v176 || (float32x4_t v177 = (void *)*v176) == 0) {
LABEL_289:
      }
        operator new();
      if (v134.u32[0] < 2uLL)
      {
        uint64_t v178 = *(void *)&v133 - 1;
        while (1)
        {
          uint64_t v180 = v177[1];
          if (v180 == 0x8A75A62DDED2878DLL)
          {
            if (v177[2] == 0x8A75A62DDED2878DLL) {
              goto LABEL_385;
            }
          }
          else if ((v180 & v178) != v135)
          {
            goto LABEL_289;
          }
          float32x4_t v177 = (void *)*v177;
          if (!v177) {
            goto LABEL_289;
          }
        }
      }
      while (2)
      {
        unint64_t v179 = v177[1];
        if (v179 != 0x8A75A62DDED2878DLL)
        {
          if (v179 >= *(void *)&v133) {
            v179 %= *(void *)&v133;
          }
          if (v179 != v135) {
            goto LABEL_289;
          }
          goto LABEL_279;
        }
        if (v177[2] != 0x8A75A62DDED2878DLL)
        {
LABEL_279:
          float32x4_t v177 = (void *)*v177;
          if (!v177) {
            goto LABEL_289;
          }
          continue;
        }
        break;
      }
LABEL_385:
      unsigned int v266 = (void *)v177[3];
      uint64_t v181 = gdc::Registry::storage<debugComponents::DisplayOptions>(v401);
      uint64_t v182 = (void *)v181;
      uint64_t v183 = v181 + 32;
      __int16 v184 = (unint64_t *)v132[7];
      char v185 = (uint64_t *)v132[8];
      if (v266[8] - v266[7] >= (unint64_t)((char *)v185 - (char *)v184)) {
        __int16 v186 = v132 + 4;
      }
      else {
        __int16 v186 = v266 + 4;
      }
      if (*(void *)(v181 + 64) - *(void *)(v181 + 56) >= v186[4] - v186[3]) {
        __int16 v187 = v186;
      }
      else {
        __int16 v187 = (void *)(v181 + 32);
      }
      if (v132 + 4 == v187 && v184 != (unint64_t *)v185)
      {
        unint64_t v192 = v132[10];
        do
        {
          unint64_t v230 = *((unsigned int *)v184 + 1);
          unint64_t v231 = v230 >> 7;
          uint64_t v232 = v266[4];
          unint64_t v233 = (v266[5] - v232) >> 3;
          if (v230 >> 7 >= v233) {
            goto LABEL_346;
          }
          uint64_t v234 = *(void *)(v232 + 8 * v231);
          if (!v234) {
            goto LABEL_346;
          }
          unint64_t v235 = *(unsigned __int16 *)(v234 + 2 * (v230 & 0x7F));
          uint64_t v237 = v266[7];
          uint64_t v236 = v266[8];
          unint64_t v238 = (v236 - v237) >> 3;
          if (v238 <= v235) {
            goto LABEL_346;
          }
          uint64_t v239 = v237 + 8 * v235;
          if (v239 == v236 || *(_DWORD *)(v239 + 4) != v230) {
            goto LABEL_346;
          }
          uint64_t v241 = v182[4];
          unint64_t v242 = (v182[5] - v241) >> 3;
          if (v231 >= v242) {
            goto LABEL_346;
          }
          uint64_t v243 = *(void *)(v241 + 8 * v231);
          if (!v243) {
            goto LABEL_346;
          }
          unint64_t v244 = *(unsigned __int16 *)(v243 + 2 * (v230 & 0x7F));
          uint64_t v246 = v182[7];
          uint64_t v245 = v182[8];
          unint64_t v247 = (v245 - v246) >> 3;
          if (v247 <= v244) {
            goto LABEL_346;
          }
          uint64_t v248 = v246 + 8 * v244;
          if (v248 == v245 || *(_DWORD *)(v248 + 4) != v230) {
            goto LABEL_346;
          }
          unint64_t v250 = *v184;
          unint64_t v251 = HIDWORD(*v184);
          unint64_t v252 = *v184 >> 39;
          if (v252 < v233
            && (uint64_t v253 = *(void *)(v232 + 8 * v252)) != 0
            && (unint64_t v254 = *(unsigned __int16 *)(v253 + 2 * (HIDWORD(v250) & 0x7F)), v238 > v254)
            && ((v255 = v237 + 8 * v254, v255 != v236) ? (BOOL v256 = *(_DWORD *)(v255 + 4) == v251) : (BOOL v256 = 0),
                v256))
          {
            char v257 = (long long **)(v266[10] + 24 * v254);
            if (v252 >= v242) {
              goto LABEL_344;
            }
          }
          else
          {
            char v257 = (long long **)v266[11];
            if (v252 >= v242) {
              goto LABEL_344;
            }
          }
          uint64_t v258 = *(void *)(v241 + 8 * v252);
          if (v258)
          {
            unint64_t v259 = *(unsigned __int16 *)(v258 + 2 * (HIDWORD(v250) & 0x7F));
            if (v247 > v259)
            {
              uint64_t v260 = v246 + 8 * v259;
              if (v260 != v245 && *(_DWORD *)(v260 + 4) == v251)
              {
                float v229 = (int *)(v182[10] + 16 * v259);
                goto LABEL_345;
              }
            }
          }
LABEL_344:
          float v229 = (int *)v182[11];
LABEL_345:
          md::DebugDrawContext::addTileLocalLines(v406, v192, *v257, v257[1], v229);
LABEL_346:
          v192 += 464;
          ++v184;
        }
        while (v184 != (unint64_t *)v185);
      }
      if (v266 + 4 == v187)
      {
        BOOL v193 = (unint64_t *)v266[7];
        uint64_t v194 = (uint64_t *)v266[8];
        if (v193 != (unint64_t *)v194)
        {
          BOOL v195 = (long long **)(v266[10] + 8);
          do
          {
            unint64_t v367 = *((unsigned int *)v193 + 1);
            unint64_t v368 = v367 >> 7;
            uint64_t v369 = v132[4];
            unint64_t v370 = (v132[5] - v369) >> 3;
            if (v367 >> 7 >= v370) {
              goto LABEL_499;
            }
            uint64_t v371 = *(void *)(v369 + 8 * v368);
            if (!v371) {
              goto LABEL_499;
            }
            unint64_t v372 = *(unsigned __int16 *)(v371 + 2 * (v367 & 0x7F));
            uint64_t v374 = v132[7];
            uint64_t v373 = v132[8];
            unint64_t v375 = (v373 - v374) >> 3;
            if (v375 <= v372) {
              goto LABEL_499;
            }
            uint64_t v376 = v374 + 8 * v372;
            if (v376 == v373 || *(_DWORD *)(v376 + 4) != v367) {
              goto LABEL_499;
            }
            uint64_t v378 = v182[4];
            unint64_t v379 = (v182[5] - v378) >> 3;
            if (v368 >= v379) {
              goto LABEL_499;
            }
            uint64_t v380 = *(void *)(v378 + 8 * v368);
            if (!v380) {
              goto LABEL_499;
            }
            unint64_t v381 = *(unsigned __int16 *)(v380 + 2 * (v367 & 0x7F));
            uint64_t v383 = v182[7];
            uint64_t v382 = v182[8];
            unint64_t v384 = (v382 - v383) >> 3;
            if (v384 <= v381) {
              goto LABEL_499;
            }
            uint64_t v385 = v383 + 8 * v381;
            if (v385 == v382 || *(_DWORD *)(v385 + 4) != v367) {
              goto LABEL_499;
            }
            unint64_t v387 = *v193;
            unint64_t v388 = HIDWORD(*v193);
            unint64_t v389 = *v193 >> 39;
            if (v389 < v370
              && (uint64_t v390 = *(void *)(v369 + 8 * v389)) != 0
              && (unint64_t v391 = *(unsigned __int16 *)(v390 + 2 * (HIDWORD(v387) & 0x7F)), v375 > v391)
              && ((v392 = v374 + 8 * v391, v392 != v373) ? (BOOL v393 = *(_DWORD *)(v392 + 4) == v388) : (BOOL v393 = 0),
                  v393))
            {
              unint64_t v394 = v132[10] + 464 * v391;
              if (v389 >= v379) {
                goto LABEL_497;
              }
            }
            else
            {
              unint64_t v394 = v132[11];
              if (v389 >= v379) {
                goto LABEL_497;
              }
            }
            uint64_t v395 = *(void *)(v378 + 8 * v389);
            if (v395)
            {
              unint64_t v396 = *(unsigned __int16 *)(v395 + 2 * (HIDWORD(v387) & 0x7F));
              if (v384 > v396)
              {
                uint64_t v397 = v383 + 8 * v396;
                if (v397 != v382 && *(_DWORD *)(v397 + 4) == v388)
                {
                  double v366 = (int *)(v182[10] + 16 * v396);
                  goto LABEL_498;
                }
              }
            }
LABEL_497:
            double v366 = (int *)v182[11];
LABEL_498:
            md::DebugDrawContext::addTileLocalLines(v406, v394, *(v195 - 1), *v195, v366);
LABEL_499:
            ++v193;
            v195 += 3;
          }
          while (v193 != (unint64_t *)v194);
        }
      }
      int v4 = v406;
      if ((void *)v183 == v187)
      {
        unsigned int v189 = (unint64_t *)v182[7];
        uint64_t v190 = (uint64_t *)v182[8];
        if (v189 != (unint64_t *)v190) {
          break;
        }
      }
LABEL_3:
      int v7 = v400 + 1;
      if (v400 + 1 == v399) {
        return;
      }
    }
    uint64_t v191 = (int *)v182[10];
    while (1)
    {
      unint64_t v334 = *((unsigned int *)v189 + 1);
      unint64_t v335 = v334 >> 7;
      uint64_t v336 = v132[4];
      unint64_t v337 = (v132[5] - v336) >> 3;
      if (v334 >> 7 >= v337) {
        goto LABEL_462;
      }
      uint64_t v338 = *(void *)(v336 + 8 * v335);
      if (!v338) {
        goto LABEL_462;
      }
      unint64_t v339 = *(unsigned __int16 *)(v338 + 2 * (v334 & 0x7F));
      uint64_t v341 = v132[7];
      uint64_t v340 = v132[8];
      unint64_t v342 = (v340 - v341) >> 3;
      if (v342 <= v339) {
        goto LABEL_462;
      }
      uint64_t v343 = v341 + 8 * v339;
      if (v343 == v340 || *(_DWORD *)(v343 + 4) != v334) {
        goto LABEL_462;
      }
      uint64_t v345 = v266[4];
      unint64_t v346 = (v266[5] - v345) >> 3;
      if (v335 >= v346) {
        goto LABEL_462;
      }
      uint64_t v347 = *(void *)(v345 + 8 * v335);
      if (!v347) {
        goto LABEL_462;
      }
      unint64_t v348 = *(unsigned __int16 *)(v347 + 2 * (v334 & 0x7F));
      uint64_t v350 = v266[7];
      uint64_t v349 = v266[8];
      unint64_t v351 = (v349 - v350) >> 3;
      if (v351 <= v348) {
        goto LABEL_462;
      }
      uint64_t v352 = v350 + 8 * v348;
      if (v352 == v349 || *(_DWORD *)(v352 + 4) != v334) {
        goto LABEL_462;
      }
      unint64_t v354 = *v189;
      unint64_t v355 = HIDWORD(*v189);
      unint64_t v356 = *v189 >> 39;
      if (v356 < v337
        && (uint64_t v357 = *(void *)(v336 + 8 * v356)) != 0
        && (unint64_t v358 = *(unsigned __int16 *)(v357 + 2 * (HIDWORD(v354) & 0x7F)), v342 > v358)
        && ((uint64_t v359 = v341 + 8 * v358, v359 != v340) ? (v360 = *(_DWORD *)(v359 + 4) == v355) : (v360 = 0), v360))
      {
        unint64_t v361 = v132[10] + 464 * v358;
        if (v356 >= v346) {
          goto LABEL_460;
        }
      }
      else
      {
        unint64_t v361 = v132[11];
        if (v356 >= v346) {
          goto LABEL_460;
        }
      }
      uint64_t v362 = *(void *)(v345 + 8 * v356);
      if (v362)
      {
        unint64_t v363 = *(unsigned __int16 *)(v362 + 2 * (HIDWORD(v354) & 0x7F));
        if (v351 > v363)
        {
          uint64_t v364 = v350 + 8 * v363;
          if (v364 != v349 && *(_DWORD *)(v364 + 4) == v355)
          {
            int8x8_t v333 = (long long **)(v266[10] + 24 * v363);
            goto LABEL_461;
          }
        }
      }
LABEL_460:
      int8x8_t v333 = (long long **)v266[11];
LABEL_461:
      md::DebugDrawContext::addTileLocalLines(v406, v361, *v333, v333[1], v191);
LABEL_462:
      v191 += 4;
      if (++v189 == (unint64_t *)v190) {
        goto LABEL_3;
      }
    }
  }
}

void sub_1A1878D14(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1A1878D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_1A1878DB4(_Unwind_Exception *a1)
{
  *(void *)(v2 + 24) = v1;
  _Unwind_Resume(a1);
}

void sub_1A1878DBC(_Unwind_Exception *a1)
{
  *(void *)(v2 + 24) = v1;
  _Unwind_Resume(a1);
}

void sub_1A1878DC4(_Unwind_Exception *a1)
{
  std::__split_buffer<arComponents::CustomBoxCreateDesc>::~__split_buffer(v1 - 128);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<debugComponents::DisplayOptions>(int8x8_t *a1)
{
  uint64_t v10 = 0x6FDCAC4BC08520E8;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x6FDCAC4BC08520E8;
    if (*(void *)&v1 <= 0x6FDCAC4BC08520E8uLL) {
      uint64_t v3 = 0x6FDCAC4BC08520E8uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x6FDCAC4BC08520E8;
  }
  int v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (int v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x6FDCAC4BC08520E8)
      {
        if (v5[2] == 0x6FDCAC4BC08520E8) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      int v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x6FDCAC4BC08520E8) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    int v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x6FDCAC4BC08520E8) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1879018(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::Registry::storage<gdc::Tiled>(int8x8_t *a1)
{
  unint64_t v10 = 0xE81DE923CB05AA7DLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xE81DE923CB05AA7DLL;
    if (*(void *)&v1 <= 0xE81DE923CB05AA7DLL) {
      unint64_t v3 = 0xE81DE923CB05AA7DLL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xE81DE923CB05AA7DLL;
  }
  int v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (int v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xE81DE923CB05AA7DLL)
      {
        if (v5[2] == 0xE81DE923CB05AA7DLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      int v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xE81DE923CB05AA7DLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    int v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xE81DE923CB05AA7DLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A1879288(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void gdc::ComponentStorageSignals::~ComponentStorageSignals(gdc::ComponentStorageSignals *this)
{
  if (*((void *)this + 4))
  {
    uint8x8_t v2 = (void *)*((void *)this + 3);
    while (v2)
    {
      uint64_t v23 = v2;
      uint8x8_t v2 = (void *)*v2;
      uint64_t v24 = (void *)v23[6];
      if (v24 == v23 + 3)
      {
        (*(void (**)(void *))(v23[3] + 32))(v23 + 3);
      }
      else if (v24)
      {
        (*(void (**)(void *))(*v24 + 40))(v24);
      }
      operator delete(v23);
    }
    *((void *)this + 3) = 0;
    uint64_t v3 = *((void *)this + 2);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*((void *)this + 1) + 8 * i) = 0;
    }
    *((void *)this + 4) = 0;
  }
  if (*((void *)this + 10))
  {
    int v5 = (void *)*((void *)this + 9);
    while (v5)
    {
      int8x8_t v25 = v5;
      int v5 = (void *)*v5;
      uint8x8_t v26 = (void *)v25[6];
      if (v26 == v25 + 3)
      {
        (*(void (**)(void *))(v25[3] + 32))(v25 + 3);
      }
      else if (v26)
      {
        (*(void (**)(void *))(*v26 + 40))(v26);
      }
      operator delete(v25);
    }
    *((void *)this + 9) = 0;
    uint64_t v6 = *((void *)this + 8);
    if (v6)
    {
      for (uint64_t j = 0; j != v6; ++j)
        *(void *)(*((void *)this + 7) + 8 * j) = 0;
    }
    *((void *)this + 10) = 0;
  }
  if (*((void *)this + 16))
  {
    uint64_t v8 = (void *)*((void *)this + 15);
    while (v8)
    {
      unint64_t v27 = v8;
      uint64_t v8 = (void *)*v8;
      uint64_t v28 = (void *)v27[6];
      if (v28 == v27 + 3)
      {
        (*(void (**)(void *))(v27[3] + 32))(v27 + 3);
      }
      else if (v28)
      {
        (*(void (**)(void *))(*v28 + 40))(v28);
      }
      operator delete(v27);
    }
    *((void *)this + 15) = 0;
    uint64_t v9 = *((void *)this + 14);
    if (v9)
    {
      for (uint64_t k = 0; k != v9; ++k)
        *(void *)(*((void *)this + 13) + 8 * k) = 0;
    }
    *((void *)this + 16) = 0;
  }
  uint64_t v11 = (void *)*((void *)this + 15);
  while (v11)
  {
    uint64_t v17 = v11;
    uint64_t v11 = (void *)*v11;
    uint64_t v18 = (void *)v17[6];
    if (v18 == v17 + 3)
    {
      (*(void (**)(void *))(v17[3] + 32))(v17 + 3);
    }
    else if (v18)
    {
      (*(void (**)(void *))(*v18 + 40))(v18);
    }
    operator delete(v17);
  }
  int v12 = (void *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v12) {
    operator delete(v12);
  }
  uint64_t v13 = (void *)*((void *)this + 9);
  while (v13)
  {
    unsigned __int8 v19 = v13;
    uint64_t v13 = (void *)*v13;
    uint64_t v20 = (void *)v19[6];
    if (v20 == v19 + 3)
    {
      (*(void (**)(void *))(v19[3] + 32))(v19 + 3);
    }
    else if (v20)
    {
      (*(void (**)(void *))(*v20 + 40))(v20);
    }
    operator delete(v19);
  }
  unint64_t v14 = (void *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v14) {
    operator delete(v14);
  }
  uint64_t v15 = (void *)*((void *)this + 3);
  while (v15)
  {
    uint64_t v21 = v15;
    uint64_t v15 = (void *)*v15;
    uint64_t v22 = (void *)v21[6];
    if (v22 == v21 + 3)
    {
      (*(void (**)(void *))(v21[3] + 32))(v21 + 3);
    }
    else if (v22)
    {
      (*(void (**)(void *))(*v22 + 40))(v22);
    }
    operator delete(v21);
  }
  uint64_t v16 = (void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v16) {
    operator delete(v16);
  }
}

uint64_t gdc::Registry::_registerStorageDataSignals(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  v15[0] = &unk_1EF52E010;
  v15[1] = a1;
  uint64_t v16 = v15;
  gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>>::connect(a4, v15);
  if (v16 == v15)
  {
    (*(void (**)(void *))(v15[0] + 32))(v15);
  }
  else if (v16)
  {
    (*(void (**)(void))(*v16 + 40))();
  }
  uint64_t v8 = operator new(0x30uLL);
  *uint64_t v8 = &unk_1EF52DF80;
  v8[1] = a2;
  *((_OWORD *)v8 + 1) = *(_OWORD *)a3;
  v8[4] = *(void *)(a3 + 16);
  v8[5] = a1;
  unint64_t v14 = v8;
  gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>>::connect(a4 + 48, v13);
  if (v14 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void))(*v14 + 40))();
  }
  uint64_t v9 = operator new(0x30uLL);
  *uint64_t v9 = &unk_1EF52DFC8;
  v9[1] = a2;
  *((_OWORD *)v9 + 1) = *(_OWORD *)a3;
  void v9[4] = *(void *)(a3 + 16);
  v9[5] = a1;
  int v12 = v9;
  gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>>::connect(a4 + 96, v11);
  uint64_t result = (uint64_t)v12;
  if (v12 == v11) {
    return (*(uint64_t (**)(void *))(v11[0] + 32))(v11);
  }
  if (v12) {
    return (*(uint64_t (**)(void))(*v12 + 40))();
  }
  return result;
}

void sub_1A1879914(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::~function(va);
  _Unwind_Resume(a1);
}

uint64_t gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>>::connect(uint64_t a1, void *a2)
{
  v48[3] = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *(void *)a1 + 1;
  *(void *)a1 = v5;
  unint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v2 = v5;
      if (v5 >= v6) {
        unint64_t v2 = v5 % v6;
      }
    }
    else
    {
      unint64_t v2 = (v6 - 1) & v5;
    }
    uint64_t v8 = *(void ***)(*(void *)(a1 + 8) + 8 * v2);
    if (v8)
    {
      uint64_t v9 = *v8;
      if (*v8)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v11 = v9[1];
            if (v11 == v5)
            {
              if (v9[2] == v5) {
                goto LABEL_82;
              }
            }
            else if ((v11 & (v6 - 1)) != v2)
            {
              goto LABEL_22;
            }
            uint64_t v9 = (void *)*v9;
            if (!v9) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v10 = v9[1];
          if (v10 == v5)
          {
            if (v9[2] == v5) {
              goto LABEL_82;
            }
          }
          else
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
            if (v10 != v2) {
              break;
            }
          }
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
    }
  }
LABEL_22:
  int v12 = (void *)(a1 + 24);
  uint64_t v9 = operator new(0x38uLL);
  *uint64_t v9 = 0;
  v9[1] = v5;
  void v9[2] = v5;
  v9[6] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 32) + 1);
  float v14 = *(float *)(a1 + 40);
  if (!v6 || (float)(v14 * (float)v6) < v13)
  {
    BOOL v15 = 1;
    if (v6 >= 3) {
      BOOL v15 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v6);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v6 = *(void *)(a1 + 16);
    }
    if (prime <= v6)
    {
      if (prime >= v6) {
        goto LABEL_59;
      }
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 32) / *(float *)(a1 + 40));
      if (v6 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime >= v6)
      {
        unint64_t v6 = *(void *)(a1 + 16);
LABEL_59:
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v5 >= v6) {
            unint64_t v2 = v5 % v6;
          }
          else {
            unint64_t v2 = v5;
          }
        }
        else
        {
          unint64_t v2 = (v6 - 1) & v5;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        int v45 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = 0;
        if (v45) {
          operator delete(v45);
        }
        unint64_t v6 = 0;
        *(void *)(a1 + 16) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unsigned __int8 v19 = operator new(8 * prime);
    uint64_t v20 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = v19;
    if (v20) {
      operator delete(v20);
    }
    uint64_t v21 = 0;
    *(void *)(a1 + 16) = prime;
    do
      *(void *)(*(void *)(a1 + 8) + 8 * v21++) = 0;
    while (prime != v21);
    uint64_t v22 = (void *)*v12;
    if (!*v12)
    {
LABEL_58:
      unint64_t v6 = prime;
      goto LABEL_59;
    }
    size_t v23 = v22[1];
    size_t v24 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v25 = v23 & v24;
      *(void *)(*(void *)(a1 + 8) + 8 * v25) = v12;
      for (uint64_t i = (void *)*v22; *v22; uint64_t i = (void *)*v22)
      {
        size_t v27 = i[1] & v24;
        if (v27 == v25)
        {
          uint64_t v22 = i;
        }
        else
        {
          uint64_t v28 = *(void *)(a1 + 8);
          if (*(void *)(v28 + 8 * v27))
          {
            void *v22 = *i;
            uint64_t v29 = 8 * v27;
            void *i = **(void **)(*(void *)(a1 + 8) + v29);
            **(void **)(*(void *)(a1 + 8) + v29) = i;
          }
          else
          {
            *(void *)(v28 + 8 * v27) = v22;
            uint64_t v22 = i;
            size_t v25 = v27;
          }
        }
      }
      goto LABEL_58;
    }
    if (v23 >= prime) {
      v23 %= prime;
    }
    *(void *)(*(void *)(a1 + 8) + 8 * v23) = v12;
    uint64_t v33 = (void *)*v22;
    if (!*v22) {
      goto LABEL_58;
    }
    while (1)
    {
      size_t v35 = v33[1];
      if (v35 >= prime) {
        v35 %= prime;
      }
      if (v35 != v23)
      {
        uint64_t v36 = *(void *)(a1 + 8);
        if (!*(void *)(v36 + 8 * v35))
        {
          *(void *)(v36 + 8 * v35) = v22;
          goto LABEL_63;
        }
        void *v22 = *v33;
        uint64_t v34 = 8 * v35;
        *uint64_t v33 = **(void **)(*(void *)(a1 + 8) + v34);
        **(void **)(*(void *)(a1 + 8) + v34) = v33;
        uint64_t v33 = v22;
      }
      size_t v35 = v23;
LABEL_63:
      uint64_t v22 = v33;
      uint64_t v33 = (void *)*v33;
      size_t v23 = v35;
      if (!v33) {
        goto LABEL_58;
      }
    }
  }
LABEL_72:
  uint64_t v37 = *(void *)(a1 + 8);
  uint64_t v38 = *(void **)(v37 + 8 * v2);
  if (v38)
  {
    *uint64_t v9 = *v38;
LABEL_80:
    void *v38 = v9;
    goto LABEL_81;
  }
  *uint64_t v9 = *v12;
  void *v12 = v9;
  *(void *)(v37 + 8 * v2) = v12;
  if (*v9)
  {
    unint64_t v39 = *(void *)(*v9 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v39 >= v6) {
        v39 %= v6;
      }
    }
    else
    {
      v39 &= v6 - 1;
    }
    uint64_t v38 = (void *)(*(void *)(a1 + 8) + 8 * v39);
    goto LABEL_80;
  }
LABEL_81:
  ++*(void *)(a1 + 32);
LABEL_82:
  uint64_t v40 = (void *)a2[3];
  if (v40)
  {
    if (v40 == a2)
    {
      unint64_t v47 = v46;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v46);
    }
    else
    {
      unint64_t v47 = (void *)(*(uint64_t (**)(void *))(*v40 + 16))(v40);
    }
  }
  else
  {
    unint64_t v47 = 0;
  }
  uint64_t v41 = v9 + 3;
  if (v9 + 3 != v46)
  {
    unint64_t v42 = v47;
    uint64_t v43 = (void *)v9[6];
    if (v47 == v46)
    {
      if (v43 == v41)
      {
        (*(void (**)(void *, void *))(v46[0] + 24))(v46, v48);
        (*(void (**)(void *))(*v47 + 32))(v47);
        unint64_t v47 = 0;
        (*(void (**)(void, void *))(*(void *)v9[6] + 24))(v9[6], v46);
        (*(void (**)(void))(*(void *)v9[6] + 32))(v9[6]);
        v9[6] = 0;
        unint64_t v47 = v46;
        (*(void (**)(void *, void *))(v48[0] + 24))(v48, v9 + 3);
        (*(void (**)(void *))(v48[0] + 32))(v48);
      }
      else
      {
        (*(void (**)(void *, void *))(v46[0] + 24))(v46, v9 + 3);
        (*(void (**)(void *))(*v47 + 32))(v47);
        unint64_t v47 = (void *)v9[6];
      }
      v9[6] = v41;
    }
    else if (v43 == v41)
    {
      (*(void (**)(void *, void *))(v9[3] + 24))(v9 + 3, v46);
      (*(void (**)(void))(*(void *)v9[6] + 32))(v9[6]);
      v9[6] = v47;
      unint64_t v47 = v46;
    }
    else
    {
      unint64_t v47 = (void *)v9[6];
      v9[6] = v42;
    }
  }
  if (v47 == v46)
  {
    (*(void (**)(void *))(v46[0] + 32))(v46);
  }
  else if (v47)
  {
    (*(void (**)(void))(*v47 + 40))();
  }
  return *(void *)a1;
}

void sub_1A187A0CC(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)v1[6];
  if (v3 == v1 + 3)
  {
    (*(void (**)(void *))(v1[3] + 32))(v1 + 3);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF52E010;
  a2[1] = v2;
  return result;
}

__n128 std::__function::__func<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#2},std::allocator<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#2}>,void ()(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EF52DF80;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#3},std::allocator<gdc::Registry::_registerStorageDataSignals(unsigned long,gdc::TypeInfo,gdc::ComponentStorageSignals *)::{lambda(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)#3}>,void ()(gdc::Registry*,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EF52DFC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void md::DebugDrawContext::clearDebugDrawContext(md::DebugDrawContext *this)
{
  if (*((void *)this + 8))
  {
    uint64_t v2 = (void *)*((void *)this + 7);
    if (v2)
    {
      do
      {
        int v4 = (void *)*v2;
        uint64_t v5 = v2[3];
        if (v5)
        {
          uint64_t v6 = v2[4];
          uint64_t v3 = (void *)v2[3];
          if (v6 != v5)
          {
            do
            {
              uint64_t v8 = *(void *)(v6 - 24);
              if (v8)
              {
                uint64_t v9 = *(void *)(v6 - 16);
                uint8x8_t v7 = *(void **)(v6 - 24);
                if (v9 != v8)
                {
                  do
                  {
                    uint64_t v10 = v9 - 56;
                    uint64_t v11 = *(unsigned int *)(v9 - 4);
                    if (v11 != -1) {
                      ((void (*)(char *, uint64_t))off_1EF58F880[v11])(&v38, v9 - 56);
                    }
                    *(_DWORD *)(v9 - 4) = -1;
                    v9 -= 56;
                  }
                  while (v10 != v8);
                  uint8x8_t v7 = *(void **)(v6 - 24);
                }
                *(void *)(v6 - 16) = v8;
                operator delete(v7);
              }
              v6 -= 40;
            }
            while (v6 != v5);
            uint64_t v3 = (void *)v2[3];
          }
          _DWORD v2[4] = v5;
          operator delete(v3);
        }
        operator delete(v2);
        uint64_t v2 = v4;
      }
      while (v4);
    }
    *((void *)this + 7) = 0;
    uint64_t v12 = *((void *)this + 6);
    if (v12)
    {
      for (uint64_t i = 0; i != v12; ++i)
        *(void *)(*((void *)this + 5) + 8 * i) = 0;
    }
    *((void *)this + 8) = 0;
  }
  if (*((void *)this + 3))
  {
    float v14 = (void *)*((void *)this + 2);
    if (v14)
    {
      do
      {
        size_t v25 = (void *)*v14;
        uint64_t v26 = v14[3];
        if (v26)
        {
          uint64_t v27 = v14[4];
          size_t v24 = (void *)v14[3];
          if (v27 != v26)
          {
            do
            {
              uint64_t v28 = *(void **)(v27 - 24);
              if (v28)
              {
                *(void *)(v27 - 16) = v28;
                operator delete(v28);
              }
              v27 -= 40;
            }
            while (v27 != v26);
            size_t v24 = (void *)v14[3];
          }
          char v14[4] = v26;
          operator delete(v24);
        }
        operator delete(v14);
        float v14 = v25;
      }
      while (v25);
    }
    *((void *)this + 2) = 0;
    uint64_t v15 = *((void *)this + 1);
    if (v15)
    {
      for (uint64_t j = 0; j != v15; ++j)
        *(void *)(*(void *)this + 8 * j) = 0;
    }
    *((void *)this + 3) = 0;
  }
  uint64_t v17 = *((void *)this + 10);
  for (uint64_t k = *((void *)this + 11); k != v17; k -= 40)
  {
    uint64_t v20 = *(void *)(k - 24);
    if (v20)
    {
      uint64_t v21 = *(void *)(k - 16);
      unsigned __int8 v19 = *(void **)(k - 24);
      if (v21 != v20)
      {
        do
        {
          uint64_t v22 = v21 - 112;
          uint64_t v23 = *(unsigned int *)(v21 - 8);
          if (v23 != -1) {
            ((void (*)(char *, uint64_t))off_1EF58F838[v23])(&v37, v21 - 112);
          }
          *(_DWORD *)(v21 - 8) = -1;
          v21 -= 112;
        }
        while (v22 != v20);
        unsigned __int8 v19 = *(void **)(k - 24);
      }
      *(void *)(k - 16) = v20;
      operator delete(v19);
    }
  }
  *((void *)this + 11) = v17;
  uint64_t v29 = *((void *)this + 13);
  for (uint64_t m = *((void *)this + 14); m != v29; m -= 40)
  {
    uint64_t v32 = *(void *)(m - 24);
    if (v32)
    {
      uint64_t v33 = *(void *)(m - 16);
      uint8x8_t v31 = *(void **)(m - 24);
      if (v33 != v32)
      {
        uint64_t v34 = *(void *)(m - 16);
        do
        {
          uint64_t v36 = *(void **)(v34 - 24);
          v34 -= 24;
          size_t v35 = v36;
          if (v36)
          {
            *(void *)(v33 - 16) = v35;
            operator delete(v35);
          }
          uint64_t v33 = v34;
        }
        while (v34 != v32);
        uint8x8_t v31 = *(void **)(m - 24);
      }
      *(void *)(m - 16) = v32;
      operator delete(v31);
    }
  }
  *((void *)this + 14) = v29;
}

uint64_t std::__function::__func<gdc::EnteringCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<gdc::EnteringCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF521428;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<gdc::EnteringCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2},std::allocator<gdc::EnteringCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5213E0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<gdc::EnteringCollector<md::components::MeshInstance>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<gdc::EnteringCollector<md::components::MeshInstance>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF521398;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<gdc::EnteringCollector<md::components::MeshInstance>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2},std::allocator<gdc::EnteringCollector<md::components::MeshInstance>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF521350;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<gdc::UpdateCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<gdc::UpdateCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF521308;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<gdc::UpdateCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2},std::allocator<gdc::UpdateCollector<md::components::Material>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5212C0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<gdc::UpdateCollector<md::components::Visibility>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1},std::allocator<gdc::UpdateCollector<md::components::Visibility>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#1}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF521278;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<gdc::UpdateCollector<md::components::Visibility>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2},std::allocator<gdc::UpdateCollector<md::components::Visibility>::observe(gdc::Registry *)::{lambda(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)#2}>,void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF521230;
  a2[1] = v2;
  return result;
}

void gdc::EnteringCollector<md::components::Material>::observe(int8x8_t **a1, int8x8_t *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1[7] != a2) {
    ((void (*)(int8x8_t **))(*a1)[3])(a1);
  }
  a1[7] = a2;
  uint64_t v4 = gdc::Registry::storage<md::components::Material>(a2);
  float v13 = (void (**)(void **))&unk_1EF521428;
  float v14 = a1;
  uint64_t v15 = (void **)&v13;
  uint64_t v5 = gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>>::connect(v4 + 152, &v13);
  if (v15 == (void **)&v13)
  {
    v13[4]((void **)&v13);
  }
  else if (v15)
  {
    (*((void (**)(void))*v15 + 5))();
  }
  if (v5 != -1)
  {
    uint64_t v6 = a1 + 12;
    {
      uint64_t v6 = a1 + 12;
      if (v10)
      {
        uint64_t v11 = gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::Counter::nextId(void)::counter++;
        gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::getId<md::components::Material>(void)::localId = v11;
        uint64_t v6 = a1 + 12;
      }
    }
    v6[gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::getId<md::components::Material>(void)::localId] = (int8x8_t *)v5;
  }
  uint64_t v7 = gdc::Registry::storage<md::components::Material>(a1[7]);
  float v13 = (void (**)(void **))&unk_1EF5213E0;
  float v14 = a1;
  uint64_t v15 = (void **)&v13;
  uint64_t v8 = gdc::Signal<gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>>::connect(v7 + 200, &v13);
  if (v15 == (void **)&v13)
  {
    v13[4]((void **)&v13);
    if (v8 == -1) {
      return;
    }
    goto LABEL_16;
  }
  if (v15) {
    (*((void (**)(void))*v15 + 5))();
  }
  if (v8 != -1)
  {
LABEL_16:
    uint64_t v9 = a1 + 14;
    {
      {
        uint64_t v12 = gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::Counter::nextId(void)::counter++;
        gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::getId<md::components::Material>(void)::localId = v12;
      }
    }
    v9[gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::getId<md::components::Material>(void)::localId] = (int8x8_t *)v8;
  }
}

void sub_1A187A8B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13 != v13)
  {
    if (a13) {
      (*(void (**)(void))(*(void *)a13 + 40))();
    }
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t *))(a10 + 32))(&a10);
  _Unwind_Resume(exception_object);
}

void gdc::RegistrySignalCollector<md::components::Material>::unobserve(uint64_t a1)
{
  if (*(void *)(a1 + 56))
  {
    {
      uint64_t v8 = gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::Counter::nextId(void)::counter++;
      gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::getId<md::components::Material>(void)::localId = v8;
    }
    unint64_t v2 = *(void *)(a1
                   + 96
                   + 8
                   * gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::getId<md::components::Material>(void)::localId);
    if (v2 != -1)
    {
      uint64_t v3 = gdc::Registry::storage<md::components::Material>(*(int8x8_t **)(a1 + 56));
      std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>>>::__erase_unique<unsigned long>((uint64_t *)(v3 + 160), v2);
    }
    {
      uint64_t v9 = gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::Counter::nextId(void)::counter++;
      gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::getId<md::components::Material>(void)::localId = v9;
    }
    unint64_t v4 = *(void *)(a1
                   + 104
                   + 8
                   * gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::getId<md::components::Material>(void)::localId);
    if (v4 != -1)
    {
      uint64_t v5 = gdc::Registry::storage<md::components::Material>(*(int8x8_t **)(a1 + 56));
      std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>>>::__erase_unique<unsigned long>((uint64_t *)(v5 + 112), v4);
    }
    {
      uint64_t v10 = gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::Counter::nextId(void)::counter++;
      gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::getId<md::components::Material>(void)::localId = v10;
    }
    unint64_t v6 = *(void *)(a1
                   + 112
                   + 8
                   * gdc::FamilyInfo<gdc::RegistrySignalCollector<md::components::Material>,unsigned long long>::getId<md::components::Material>(void)::localId);
    if (v6 != -1)
    {
      uint64_t v7 = gdc::Registry::storage<md::components::Material>(*(int8x8_t **)(a1 + 56));
      std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>>>::__erase_unique<unsigned long>((uint64_t *)(v7 + 208), v6);
    }
  }
  *(void *)(a1 + 40) = *(void *)(a1 + 32);
  *(void *)(a1 + 56) = 0;
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(gdc::Registry *,std::span<gdc::Entity,18446744073709551615ul>)>>>>::__erase_unique<unsigned long>(uint64_t *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (v2)
  {
    uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (*(void *)&v2 <= a2) {
        unint64_t v4 = a2 % *(void *)&v2;
      }
    }
    else
    {
      unint64_t v4 = (*(void *)&v2 - 1) & a2;
    }
    uint64_t v5 = *a1;
    unint64_t v6 = *(uint64_t ***)(*a1 + 8 * v4);
    if (v6)
    {
      uint64_t v7 = *v6;
      if (*v6)
      {
        uint64_t v8 = *(void *)&v2 - 1;
        if (v3.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v9 = v7[1];
            if (v9 == a2)
            {
              if (v7[2] == a2) {
                goto LABEL_22;
              }
            }
            else if ((v9 & v8) != v4)
            {
              return;
            }
            uint64_t v7 = (uint64_t *)*v7;
            if (!v7) {
              return;
            }
          }
        }
        do
        {
          unint64_t v10 = v7[1];
          if (v10 == a2)
          {
            if (v7[2] == a2)
            {
LABEL_22:
              if (v3.u32[0] > 1uLL)
              {
                if (*(void *)&v2 <= a2) {
                  a2 %= *(void *)&v2;
                }
              }
              else
              {
                a2 &= v8;
              }
              uint64_t v11 = *(uint64_t **)(v5 + 8 * a2);
              do
              {
                uint64_t v12 = v11;
                uint64_t v11 = (uint64_t *)*v11;
              }
              while (v11 != v7);
              if (v12 == a1 + 2) {
                goto LABEL_39;
              }
              unint64_t v13 = v12[1];
              if (v3.u32[0] > 1uLL)
              {
                if (v13 >= *(void *)&v2) {
                  v13 %= *(void *)&v2;
                }
              }
              else
              {
                v13 &= v8;
              }
              if (v13 != a2)
              {
LABEL_39:
                if (!*v7) {
                  goto LABEL_40;
                }
                unint64_t v14 = *(void *)(*v7 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v14 >= *(void *)&v2) {
                    v14 %= *(void *)&v2;
                  }
                }
                else
                {
                  v14 &= v8;
                }
                if (v14 != a2) {
LABEL_40:
                }
                  *(void *)(v5 + 8 * a2) = 0;
              }
              uint64_t v15 = *v7;
              if (*v7)
              {
                unint64_t v16 = *(void *)(v15 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v16 >= *(void *)&v2) {
                    v16 %= *(void *)&v2;
                  }
                }
                else
                {
                  v16 &= v8;
                }
                if (v16 != a2)
                {
                  *(void *)(*a1 + 8 * v16) = v12;
                  uint64_t v15 = *v7;
                }
              }
              uint64_t *v12 = v15;
              uint64_t *v7 = 0;
              --a1[3];
              uint64_t v17 = (uint64_t *)v7[6];
              if (v17 == v7 + 3)
              {
                (*(void (**)(uint64_t *))(v7[3] + 32))(v7 + 3);
              }
              else if (v17)
              {
                (*(void (**)(uint64_t *))(*v17 + 40))(v17);
              }
              operator delete(v7);
              return;
            }
          }
          else
          {
            if (v10 >= *(void *)&v2) {
              v10 %= *(void *)&v2;
            }
            if (v10 != v4) {
              return;
            }
          }
          uint64_t v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
    }
  }
}

unsigned char *std::__function::__func<ecs2::ForwardToExecute<md::ita::ReserveStencilRangeTask>,std::allocator<ecs2::ForwardToExecute<md::ita::ReserveStencilRangeTask>>,void ()(ecs2::Runtime &)>::operator()(uint64_t a1, uint64_t ***a2)
{
  *(void *)(a1 + 8) = a2;
  uint8x8_t v3 = **a2;
  if (v3 != (*a2)[1] && *v3 != 0xD369A4D92C8FFE6CLL)
  {
    unint64_t v4 = v3 + 5;
    do
    {
      uint64_t v5 = *v4;
      v4 += 5;
    }
    while (v5 != 0xD369A4D92C8FFE6CLL);
    uint8x8_t v3 = v4 - 5;
  }
  uint64_t v6 = v3[3];
  uint64_t v7 = (std::__shared_weak_count *)v3[4];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
  uint64_t v9 = ***(uint64_t ****)(a1 + 8);
  uint64_t v41 = a1;
  if (v9 != *(uint64_t **)(**(void **)(a1 + 8) + 8) && *v9 != 0x22D45F5AAD4BF408)
  {
    unint64_t v10 = v9 + 5;
    do
    {
      uint64_t v11 = *v10;
      v10 += 5;
    }
    while (v11 != 0x22D45F5AAD4BF408);
    uint64_t v9 = v10 - 5;
  }
  uint64_t v12 = (uint64_t (***)(void))v9[3];
  unint64_t v13 = (std::__shared_weak_count *)v9[4];
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  uint64_t v14 = (**v12)(v12);
  uint64_t v15 = (unsigned __int8 *)v8[8];
  v8[9] = v15;
  unint64_t v16 = (uint64_t *)v8[5];
  unint64_t v42 = (uint64_t *)v8[6];
  uint64_t v43 = v14;
  if (v16 != v42)
  {
    while (1)
    {
      if (*v16)
      {
        (*(void (**)(unsigned __int8 **__return_ptr))(*(void *)*v16 + 32))(&v44);
        uint64_t v18 = v44;
        unsigned __int8 v19 = v45;
        if (v44 == v45)
        {
          if (!v44) {
            goto LABEL_19;
          }
        }
        else
        {
          do
          {
            uint64_t v20 = *v16;
            uint64_t v22 = (unsigned __int8 *)v8[8];
            unint64_t v21 = v8[9];
            uint64_t v23 = v22;
            if (v22 != (unsigned __int8 *)v21)
            {
              uint64_t v23 = (unsigned __int8 *)v8[8];
              while (*v18 != *v23 || v18[1] != v23[1])
              {
                v23 += 16;
                if (v23 == (unsigned __int8 *)v21) {
                  goto LABEL_33;
                }
              }
            }
            if (v23 == (unsigned __int8 *)v21)
            {
LABEL_33:
              unsigned int v25 = *(unsigned __int16 *)v18;
              uint64_t v23 = (unsigned __int8 *)v8[8];
              if (v22 != (unsigned __int8 *)v21)
              {
                uint64_t v23 = (unsigned __int8 *)v8[8];
                while (*v23 != v25 || v23[1] != v25 >> 8)
                {
                  v23 += 16;
                  if (v23 == (unsigned __int8 *)v21) {
                    goto LABEL_42;
                  }
                }
              }
              if (v23 == (unsigned __int8 *)v21)
              {
LABEL_42:
                unint64_t v27 = v8[10];
                if (v21 >= v27)
                {
                  uint64_t v29 = (uint64_t)(v21 - (void)v22) >> 4;
                  unint64_t v30 = v29 + 1;
                  if ((unint64_t)(v29 + 1) >> 60) {
                    abort();
                  }
                  uint64_t v31 = v27 - (void)v22;
                  if (v31 >> 3 > v30) {
                    unint64_t v30 = v31 >> 3;
                  }
                  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v32 = v30;
                  }
                  if (v32)
                  {
                    if (v32 >> 60) {
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    }
                    uint64_t v33 = (char *)operator new(16 * v32);
                  }
                  else
                  {
                    uint64_t v33 = 0;
                  }
                  uint64_t v34 = &v33[16 * v29];
                  *(_WORD *)uint64_t v34 = v25;
                  *((void *)v34 + 1) = 0;
                  size_t v35 = v34;
                  if (v22 != (unsigned __int8 *)v21)
                  {
                    do
                    {
                      *((_OWORD *)v35 - 1) = *(_OWORD *)(v21 - 16);
                      v35 -= 16;
                      v21 -= 16;
                    }
                    while ((unsigned __int8 *)v21 != v22);
                    uint64_t v22 = (unsigned __int8 *)v8[8];
                  }
                  uint64_t v28 = v34 + 16;
                  v8[8] = v35;
                  v8[9] = v34 + 16;
                  v8[10] = &v33[16 * v32];
                  if (v22) {
                    operator delete(v22);
                  }
                }
                else
                {
                  *(_WORD *)unint64_t v21 = v25;
                  *(void *)(v21 + 8) = 0;
                  uint64_t v28 = (char *)(v21 + 16);
                }
                v8[9] = v28;
                uint64_t v23 = (unsigned __int8 *)(v28 - 16);
              }
            }
            *((void *)v23 + 1) = v20;
            v18 += 2;
          }
          while (v18 != v19);
          uint64_t v18 = v44;
          if (!v44) {
            goto LABEL_19;
          }
        }
        int v45 = v18;
        operator delete(v18);
      }
LABEL_19:
      if (++v16 == v42)
      {
        unint64_t v17 = v8[8];
        uint64_t v15 = (unsigned __int8 *)v8[9];
        goto LABEL_63;
      }
    }
  }
  unint64_t v17 = (unint64_t)v15;
LABEL_63:
  unint64_t v36 = 126 - 2 * __clz((uint64_t)&v15[-v17] >> 4);
  if (v15 == (unsigned __int8 *)v17) {
    uint64_t v37 = 0;
  }
  else {
    uint64_t v37 = v36;
  }
  __n128 result = (unsigned char *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *,false>(v17, v15, v37, 1);
  uint64_t v40 = v8[8];
  uint64_t v39 = v8[9];
  while (v40 != v39)
  {
    __n128 result = *(unsigned char **)(v40 + 8);
    if (result)
    {
      if (result[32]) {
        __n128 result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)result + 24))(result, v43, v40);
      }
    }
    v40 += 16;
  }
  *(void *)(v41 + 8) = 0;
  return result;
}

void sub_1A187B18C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::DaVinciGroundRenderLayer::reserveStencilRange(uint64_t result, uint64_t a2, unsigned __int8 *a3)
{
  if (*a3 == *(unsigned __int8 *)(result + 3389) && a3[1] == *(unsigned __int8 *)(result + 3390))
  {
    uint8x8_t v3 = *(unsigned __int8 **)(a2 + 24);
    int v4 = *v3;
    unsigned int v5 = v3[1];
    if (v4 + 9 <= v5) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = v3 + 4;
    }
    *(void *)(result + 3176) = v6;
    if (v4 + 9 > v5)
    {
      v3[1] = v3[2];
      int v4 = 1;
    }
    unsigned __int8 *v3 = v4 + 9;
    *(_DWORD *)(result + 3188) = v4;
    *(_DWORD *)(result + 3192) = v4 + 1;
  }
  return result;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *,false>(unint64_t result, unsigned __int8 *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (unsigned __int8 *)result;
LABEL_2:
  unint64_t v10 = a2 - 16;
  uint64_t k = v9;
  while (1)
  {
    uint64_t v9 = k;
    uint64_t v12 = a2 - k;
    unint64_t v13 = (a2 - k) >> 4;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unsigned int v78 = *v10;
          unsigned int v79 = *k;
          if (v78 < v79
            || v78 == v79 && (unsigned int v78 = *(a2 - 15), v79 = k[1], v78 < v79)
            || v79 >= v78 && *((void *)a2 - 1) < *((void *)k + 1))
          {
            __int16 v80 = *(_WORD *)k;
            *(_WORD *)uint64_t k = *((_WORD *)a2 - 8);
            *((_WORD *)a2 - 8) = v80;
            uint64_t v81 = *((void *)k + 1);
            *((void *)k + 1) = *((void *)a2 - 1);
            *((void *)a2 - 1) = v81;
          }
          break;
        case 3uLL:
          __n128 result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(k, k + 16, a2 - 16);
          break;
        case 4uLL:
          __n128 result = (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(k, k + 16, k + 32, a2 - 16);
          break;
        case 5uLL:
          __n128 result = (unint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(k, k + 16, k + 32, k + 48, a2 - 16);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 383) {
      break;
    }
    if (!a3)
    {
      if (k == a2) {
        return result;
      }
      int64_t v98 = (v13 - 2) >> 1;
      int64_t v99 = v98;
      while (1)
      {
        int64_t v101 = v99;
        if (v98 >= v99) {
          break;
        }
LABEL_173:
        int64_t v99 = v101 - 1;
        if (!v101)
        {
          uint64_t v133 = (unint64_t)v12 >> 4;
          while (1)
          {
            uint64_t v134 = 0;
            __int16 v135 = *(_WORD *)k;
            uint64_t v136 = *((void *)k + 1);
            unint64_t v137 = k;
            do
            {
              unint64_t v138 = v137;
              uint64_t v139 = v134 + 1;
              v137 += 16 * v134 + 16;
              uint64_t v140 = 2 * v134;
              uint64_t v134 = (2 * v134) | 1;
              uint64_t v141 = v140 + 2;
              if (v141 >= v133) {
                goto LABEL_239;
              }
              __n128 result = v137[16];
              unsigned int v142 = *v137;
              if (v142 < result) {
                goto LABEL_238;
              }
              if (v142 != result)
              {
                if (result < v142) {
                  goto LABEL_239;
                }
LABEL_247:
                __n128 result = *((void *)v137 + 3);
                if (*(void *)&v138[16 * v139 + 8] < result)
                {
LABEL_238:
                  v137 += 16;
                  uint64_t v134 = v141;
                  goto LABEL_239;
                }
                goto LABEL_239;
              }
              __n128 result = v137[1];
              unsigned int v143 = v137[17];
              if (result < v143) {
                goto LABEL_238;
              }
              if (v143 >= result) {
                goto LABEL_247;
              }
LABEL_239:
              *(_WORD *)unint64_t v138 = *(_WORD *)v137;
              *((void *)v138 + 1) = *((void *)v137 + 1);
            }
            while (v134 <= (uint64_t)((unint64_t)(v133 - 2) >> 1));
            if (v137 == a2 - 16)
            {
              *(_WORD *)unint64_t v137 = v135;
              *((void *)v137 + 1) = v136;
              goto LABEL_236;
            }
            *(_WORD *)unint64_t v137 = *((_WORD *)a2 - 8);
            *((void *)v137 + 1) = *((void *)a2 - 1);
            *((_WORD *)a2 - 8) = v135;
            *((void *)a2 - 1) = v136;
            uint64_t v144 = v137 - k + 16;
            if (v144 >= 17)
            {
              if ((unint64_t v145 = (v144 >> 4) - 2,
                    unint64_t v146 = v145 >> 1,
                    int64x2_t v147 = &k[16 * (v145 >> 1)],
                    unsigned int v148 = *v147,
                    unsigned int v149 = *v137,
                    v148 < v149)
                || v148 == v149 && (v148 = v147[1], unsigned int v149 = v137[1], v148 < v149)
                || v149 >= v148 && *(void *)&k[16 * v146 + 8] < *((void *)v137 + 1))
              {
                unsigned int v150 = *(unsigned __int16 *)v137;
                unint64_t v151 = *((void *)v137 + 1);
                *(_WORD *)unint64_t v137 = *(_WORD *)v147;
                *((void *)v137 + 1) = *((void *)v147 + 1);
                if (v145 < 2) {
                  goto LABEL_266;
                }
                unsigned int v152 = v150 >> 8;
                while (2)
                {
                  uint64_t v153 = v147;
                  unint64_t v154 = v146 - 1;
                  unint64_t v146 = (v146 - 1) >> 1;
                  int64x2_t v147 = &k[16 * v146];
                  __n128 result = *v147;
                  if (result >= v150)
                  {
                    if (result != v150)
                    {
                      if (result > v150) {
                        goto LABEL_265;
                      }
                      goto LABEL_259;
                    }
                    __n128 result = v147[1];
                    if (result >= v152)
                    {
                      if (result > v152)
                      {
LABEL_265:
                        int64x2_t v147 = v153;
LABEL_266:
                        *(_WORD *)int64x2_t v147 = v150;
                        *((void *)v147 + 1) = v151;
                        break;
                      }
LABEL_259:
                      __n128 result = *(void *)&k[16 * v146 + 8];
                      if (result >= v151) {
                        goto LABEL_265;
                      }
                    }
                  }
                  *(_WORD *)uint64_t v153 = *(_WORD *)v147;
                  __n128 result = *((void *)v147 + 1);
                  *((void *)v153 + 1) = result;
                  if (v154 <= 1) {
                    goto LABEL_266;
                  }
                  continue;
                }
              }
            }
LABEL_236:
            a2 -= 16;
            BOOL v31 = v133-- <= 2;
            if (v31) {
              return result;
            }
          }
        }
      }
      uint64_t v102 = (2 * v99) | 1;
      unint64_t v100 = &k[16 * v102];
      if (2 * v101 + 2 >= (uint64_t)v13)
      {
LABEL_184:
        BOOL v107 = &k[16 * v101];
        unsigned int v108 = *v100;
        unsigned int v109 = *v107;
        if (v108 >= v109)
        {
          if (v108 != v109 || (v108 = v100[1], unsigned int v109 = v107[1], v108 >= v109))
          {
            if (v109 < v108 || *((void *)v100 + 1) >= *(void *)&k[16 * v101 + 8])
            {
              unsigned int v110 = *(unsigned __int16 *)v107;
              unint64_t v111 = *((void *)v107 + 1);
              *(_WORD *)BOOL v107 = *(_WORD *)v100;
              *((void *)v107 + 1) = *((void *)v100 + 1);
              if (v98 >= v102)
              {
                unsigned int v112 = v110 >> 8;
                do
                {
                  __n128 result = (unint64_t)v100;
                  uint64_t v113 = 2 * v102;
                  uint64_t v102 = (2 * v102) | 1;
                  unint64_t v100 = &k[16 * v102];
                  uint64_t v114 = v113 + 2;
                  if (v114 >= (uint64_t)v13) {
                    goto LABEL_195;
                  }
                  unsigned int v115 = v100[16];
                  unsigned int v116 = *v100;
                  if (v116 < v115)
                  {
LABEL_194:
                    v100 += 16;
                    uint64_t v102 = v114;
                    goto LABEL_195;
                  }
                  if (v116 == v115)
                  {
                    unsigned int v119 = v100[1];
                    unsigned int v120 = v100[17];
                    if (v119 < v120) {
                      goto LABEL_194;
                    }
                    if (v120 < v119) {
                      goto LABEL_195;
                    }
                  }
                  else if (v115 < v116)
                  {
                    goto LABEL_195;
                  }
                  if (*(void *)&k[16 * v102 + 8] < *((void *)v100 + 3)) {
                    goto LABEL_194;
                  }
LABEL_195:
                  unsigned int v117 = *v100;
                  if (v117 < v110) {
                    goto LABEL_171;
                  }
                  if (v117 == v110)
                  {
                    unsigned int v118 = v100[1];
                    if (v118 < v112) {
                      goto LABEL_171;
                    }
                    if (v118 > v112) {
                      goto LABEL_191;
                    }
                  }
                  else if (v117 > v110)
                  {
                    goto LABEL_191;
                  }
                  if (*((void *)v100 + 1) < v111)
                  {
LABEL_171:
                    unint64_t v100 = (unsigned __int8 *)result;
                    break;
                  }
LABEL_191:
                  *(_WORD *)__n128 result = *(_WORD *)v100;
                  *(void *)(result + 8) = *((void *)v100 + 1);
                }
                while (v98 >= v102);
              }
              *(_WORD *)unint64_t v100 = v110;
              *((void *)v100 + 1) = v111;
            }
          }
        }
        goto LABEL_173;
      }
      unsigned int v103 = v100[16];
      unsigned int v104 = *v100;
      if (v104 >= v103)
      {
        if (v104 != v103)
        {
          if (v103 < v104) {
            goto LABEL_184;
          }
LABEL_182:
          if (*(void *)&k[16 * v102 + 8] >= *((void *)v100 + 3)) {
            goto LABEL_184;
          }
          goto LABEL_183;
        }
        unsigned int v105 = v100[1];
        unsigned int v106 = v100[17];
        if (v105 >= v106)
        {
          if (v106 < v105) {
            goto LABEL_184;
          }
          goto LABEL_182;
        }
      }
LABEL_183:
      v100 += 16;
      uint64_t v102 = 2 * v101 + 2;
      goto LABEL_184;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = &k[16 * (v13 >> 1)];
    if ((unint64_t)v12 >= 0x801)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(v9, &v9[16 * (v13 >> 1)], a2 - 16);
      unint64_t v16 = (unsigned __int16 *)&v9[16 * v14];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(v9 + 16, (unsigned __int8 *)v16 - 16, a2 - 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(v9 + 32, &v9[16 * v14 + 16], a2 - 48);
      __n128 result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>((unsigned __int8 *)v16 - 16, v15, &v9[16 * v14 + 16]);
      __int16 v17 = *(_WORD *)v9;
      *(_WORD *)uint64_t v9 = *(_WORD *)v15;
      *(_WORD *)uint64_t v15 = v17;
      uint64_t v18 = *((void *)v9 + 1);
      *((void *)v9 + 1) = *((void *)v16 + 1);
      *((void *)v16 + 1) = v18;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_12;
      }
LABEL_17:
      unsigned int v21 = *(unsigned __int16 *)v9;
      unsigned int v22 = *(_WORD *)v9;
      unsigned int v23 = v21 >> 8;
      unint64_t v24 = *((void *)v9 + 1);
      for (uint64_t i = v9 + 16; ; i += 16)
      {
        unsigned int v26 = *i;
        if (v26 < v22) {
          continue;
        }
        if (v26 == v22)
        {
          unsigned int v27 = i[1];
          if (v27 < v23) {
            continue;
          }
          if (v27 > v23) {
            break;
          }
        }
        else if (v26 > v22)
        {
          break;
        }
        if (*((void *)i + 1) >= v24) {
          break;
        }
      }
      if (i - 16 == v9)
      {
        uint64_t j = a2;
        if (i < a2)
        {
          unsigned int v33 = *v10;
          uint64_t j = a2 - 16;
          if (v33 >= v22)
          {
            uint64_t j = a2 - 16;
            do
            {
              BOOL v47 = v33 > v22;
              if (v33 == v22)
              {
                unsigned int v48 = j[1];
                BOOL v47 = v48 > v23;
                if (v48 < v23) {
                  break;
                }
              }
              if (v47)
              {
                if (i >= j) {
                  break;
                }
              }
              else if (*((void *)j + 1) < v24 || i >= j)
              {
                break;
              }
              unsigned int v46 = *(j - 16);
              j -= 16;
              unsigned int v33 = v46;
            }
            while (v46 >= v22);
          }
        }
      }
      else
      {
        unsigned int v28 = *v10;
        for (uint64_t j = a2 - 16; v28 >= v22; j -= 16)
        {
          BOOL v31 = v28 > v22;
          if (v28 == v22)
          {
            unsigned int v32 = j[1];
            BOOL v31 = v32 > v23;
            if (v32 < v23) {
              break;
            }
          }
          if (!v31 && *((void *)j + 1) < v24) {
            break;
          }
          unsigned int v30 = *(j - 16);
          unsigned int v28 = v30;
        }
      }
      uint64_t k = i;
      if (i < j)
      {
        uint64_t k = i;
        unint64_t v34 = (unint64_t)j;
        do
        {
          __int16 v35 = *(_WORD *)k;
          *(_WORD *)uint64_t k = *(_WORD *)v34;
          *(_WORD *)unint64_t v34 = v35;
          uint64_t v36 = *((void *)k + 1);
          *((void *)k + 1) = *(void *)(v34 + 8);
          *(void *)(v34 + 8) = v36;
          do
          {
            while (1)
            {
              do
              {
                unsigned int v38 = k[16];
                k += 16;
                unsigned int v37 = v38;
                BOOL v39 = v38 == v22;
              }
              while (v38 < v22);
              if (!v39) {
                break;
              }
              unsigned int v40 = k[1];
              if (v40 >= v23)
              {
                if (v40 > v23) {
                  goto LABEL_49;
                }
                goto LABEL_48;
              }
            }
            if (v37 > v22) {
              goto LABEL_49;
            }
LABEL_48:
            ;
          }
          while (*((void *)k + 1) < v24);
          do
          {
LABEL_49:
            unsigned int v42 = *(unsigned __int8 *)(v34 - 16);
            v34 -= 16;
            unsigned int v41 = v42;
            if (v42 < v22) {
              break;
            }
            BOOL v43 = v41 > v22;
            if (v41 == v22)
            {
              unsigned int v44 = *(unsigned __int8 *)(v34 + 1);
              BOOL v43 = v44 > v23;
              if (v44 < v23) {
                break;
              }
            }
          }
          while (v43 || *(void *)(v34 + 8) >= v24);
        }
        while ((unint64_t)k < v34);
      }
      if (k - 16 != v9)
      {
        *(_WORD *)uint64_t v9 = *((_WORD *)k - 8);
        *((void *)v9 + 1) = *((void *)k - 1);
      }
      *((_WORD *)k - 8) = v21;
      *((void *)k - 1) = v24;
      if (i < j)
      {
LABEL_60:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *,false>(v9, k - 16, a3, a4 & 1);
        a4 = 0;
      }
      else
      {
        BOOL v45 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(v9, k - 16);
        __n128 result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(k, a2);
        if (result)
        {
          a2 = k - 16;
          if (v45) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v45) {
          goto LABEL_60;
        }
      }
    }
    else
    {
      __n128 result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(&v9[16 * (v13 >> 1)], v9, a2 - 16);
      --a3;
      if (a4) {
        goto LABEL_17;
      }
LABEL_12:
      unsigned int v19 = *(v9 - 16);
      unsigned int v20 = *v9;
      if (v19 < v20) {
        goto LABEL_17;
      }
      if (v19 == v20)
      {
        unsigned int v19 = *(v9 - 15);
        unsigned int v20 = v9[1];
        if (v19 < v20) {
          goto LABEL_17;
        }
      }
      if (v20 >= v19 && *((void *)v9 - 1) < *((void *)v9 + 1)) {
        goto LABEL_17;
      }
      unsigned int v50 = *(unsigned __int16 *)v9;
      unsigned int v51 = *(_WORD *)v9;
      unsigned int v52 = v50 >> 8;
      unint64_t v53 = *((void *)v9 + 1);
      unsigned int v54 = *v10;
      if (v54 > v51) {
        goto LABEL_74;
      }
      if (v54 == v51)
      {
        unsigned int v59 = *(a2 - 15);
        BOOL v60 = v59 >= v52;
        if (v59 > v52) {
          goto LABEL_74;
        }
      }
      else
      {
        BOOL v60 = v54 >= v51;
      }
      if (v60 && v53 < *((void *)a2 - 1))
      {
LABEL_74:
        uint64_t k = v9;
        do
        {
          unsigned int v56 = k[16];
          k += 16;
          unsigned int v55 = v56;
          if (v56 > v51) {
            break;
          }
          BOOL v57 = v55 >= v51;
          if (v55 == v51)
          {
            unsigned int v58 = k[1];
            BOOL v57 = v58 >= v52;
            if (v58 > v52) {
              break;
            }
          }
        }
        while (!v57 || v53 >= *((void *)k + 1));
        goto LABEL_98;
      }
      for (uint64_t k = v9 + 16; k < a2; k += 16)
      {
        unsigned int v61 = *k;
        if (v61 > v51) {
          break;
        }
        if (v61 == v51)
        {
          unsigned int v62 = k[1];
          BOOL v63 = v62 >= v52;
          if (v62 > v52) {
            break;
          }
        }
        else
        {
          BOOL v63 = v61 >= v51;
        }
        if (v63 && v53 < *((void *)k + 1)) {
          break;
        }
      }
LABEL_98:
      uint64_t m = a2;
      if (k < a2)
      {
        for (uint64_t m = a2 - 16; ; m -= 16)
        {
          if (v54 <= v51)
          {
            if (v54 != v51) {
              break;
            }
            unsigned int v66 = m[1];
            if (v66 <= v52 && (v66 < v52 || v53 >= *((void *)m + 1))) {
              break;
            }
          }
          unsigned int v65 = *(m - 16);
          unsigned int v54 = v65;
        }
      }
LABEL_123:
      if (k < m)
      {
        __int16 v67 = *(_WORD *)k;
        *(_WORD *)uint64_t k = *(_WORD *)m;
        *(_WORD *)uint64_t m = v67;
        unsigned int v69 = k[16];
        k += 16;
        unsigned int v68 = v69;
        uint64_t v70 = *((void *)k - 1);
        *((void *)k - 1) = *((void *)m + 1);
        *((void *)m + 1) = v70;
        while (v68 <= v51)
        {
          BOOL v72 = v68 >= v51;
          if (v68 == v51)
          {
            unsigned int v73 = k[1];
            BOOL v72 = v73 >= v52;
            if (v73 > v52) {
              break;
            }
          }
          if (v72 && v53 < *((void *)k + 1)) {
            break;
          }
          unsigned int v71 = k[16];
          k += 16;
          unsigned int v68 = v71;
        }
        while (1)
        {
          do
          {
LABEL_115:
            unsigned int v75 = *(m - 16);
            m -= 16;
            unsigned int v74 = v75;
            BOOL v76 = v75 == v51;
          }
          while (v75 > v51);
          if (v76)
          {
            unsigned int v77 = m[1];
            if (v77 > v52) {
              goto LABEL_115;
            }
            if (v77 < v52) {
              goto LABEL_123;
            }
          }
          else if (v74 < v51)
          {
            goto LABEL_123;
          }
          if (v53 >= *((void *)m + 1)) {
            goto LABEL_123;
          }
        }
      }
      BOOL v4 = k - 16 >= v9;
      BOOL v5 = k - 16 == v9;
      if (k - 16 != v9)
      {
        *(_WORD *)uint64_t v9 = *((_WORD *)k - 8);
        *((void *)v9 + 1) = *((void *)k - 1);
      }
      a4 = 0;
      *((_WORD *)k - 8) = v50;
      *((void *)k - 1) = v53;
    }
  }
  int64_t v82 = k + 16;
  BOOL v84 = k == a2 || v82 == a2;
  if ((a4 & 1) == 0)
  {
    if (v84) {
      return result;
    }
LABEL_219:
    BOOL v121 = v9;
    uint64_t v9 = v82;
    unsigned int v122 = v121[16];
    unsigned int v123 = *v121;
    if (v122 >= v123)
    {
      if (v122 != v123 || (v122 = v121[17], unsigned int v123 = v121[1], v122 >= v123))
      {
        if (v123 < v122 || *((void *)v121 + 3) >= *((void *)v121 + 1)) {
          goto LABEL_218;
        }
      }
    }
    unsigned int v124 = *(unsigned __int16 *)v82;
    unsigned int v125 = *(_WORD *)v82;
    unsigned int v126 = v124 >> 8;
    unint64_t v127 = *((void *)v121 + 3);
    while (1)
    {
      do
      {
        double v128 = v121;
        *((_WORD *)v121 + 8) = *(_WORD *)v121;
        *((void *)v121 + 3) = *((void *)v121 + 1);
        unsigned int v130 = *(v121 - 16);
        v121 -= 16;
        unsigned int v129 = v130;
        BOOL v131 = v130 == v125;
      }
      while (v130 > v125);
      if (!v131) {
        break;
      }
      unsigned int v132 = *(v128 - 15);
      if (v132 <= v126)
      {
        if (v132 < v126) {
          goto LABEL_217;
        }
LABEL_232:
        if (v127 >= *((void *)v128 - 1))
        {
LABEL_217:
          *(_WORD *)double v128 = v124;
          *((void *)v128 + 1) = v127;
LABEL_218:
          int64_t v82 = v9 + 16;
          if (v9 + 16 == a2) {
            return result;
          }
          goto LABEL_219;
        }
      }
    }
    if (v129 < v125) {
      goto LABEL_217;
    }
    goto LABEL_232;
  }
  if (v84) {
    return result;
  }
  uint64_t v85 = 0;
  long long v86 = k;
  while (2)
  {
    char v88 = v86;
    long long v86 = v82;
    unsigned int v89 = v88[16];
    unsigned int v90 = *v88;
    if (v89 >= v90)
    {
      if (v89 != v90 || (unsigned int v89 = v88[17], v90 = v88[1], v89 >= v90))
      {
        if (v90 < v89 || *((void *)v88 + 3) >= *((void *)v88 + 1)) {
          goto LABEL_152;
        }
      }
    }
    unsigned int v91 = *((unsigned __int16 *)v88 + 8);
    unint64_t v92 = *((void *)v88 + 3);
    *((_WORD *)v88 + 8) = *(_WORD *)v88;
    *((void *)v86 + 1) = *((void *)v88 + 1);
    float v87 = k;
    if (v88 == k) {
      goto LABEL_151;
    }
    unsigned int v93 = v91 >> 8;
    uint64_t v94 = v85;
    while (2)
    {
      uint8x8_t v95 = &k[v94];
      unsigned int v96 = k[v94 - 16];
      if (v96 > v91) {
        goto LABEL_162;
      }
      if (v96 == v91)
      {
        unsigned int v97 = k[v94 - 15];
        if (v97 <= v93)
        {
          if (v97 < v93)
          {
LABEL_167:
            float v87 = v88;
            goto LABEL_151;
          }
LABEL_161:
          if (v92 >= *(void *)&k[v94 - 8]) {
            goto LABEL_167;
          }
        }
LABEL_162:
        v88 -= 16;
        *(_WORD *)uint8x8_t v95 = *((_WORD *)v95 - 8);
        *((void *)v95 + 1) = *((void *)v95 - 1);
        v94 -= 16;
        if (!v94)
        {
          float v87 = k;
          goto LABEL_151;
        }
        continue;
      }
      break;
    }
    if (v96 >= v91) {
      goto LABEL_161;
    }
    float v87 = &k[v94];
LABEL_151:
    *(_WORD *)float v87 = v91;
    *((void *)v87 + 1) = v92;
LABEL_152:
    int64_t v82 = v86 + 16;
    v85 += 16;
    if (v86 + 16 != a2) {
      continue;
    }
    return result;
  }
}

unsigned __int8 *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned int v3 = *a2;
  unsigned int v4 = *result;
  if (v3 < v4) {
    goto LABEL_8;
  }
  if (v3 != v4)
  {
    if (v4 < v3) {
      goto LABEL_14;
    }
LABEL_7:
    if (*((void *)a2 + 1) >= *((void *)result + 1)) {
      goto LABEL_14;
    }
LABEL_8:
    unsigned int v7 = *a3;
    if (v7 < v3)
    {
LABEL_9:
      __int16 v8 = *(_WORD *)result;
      *(_WORD *)__n128 result = *(_WORD *)a3;
      result += 8;
      *(_WORD *)a3 = v8;
      uint64_t v9 = a3 + 8;
LABEL_21:
      unint64_t v14 = v9;
      goto LABEL_22;
    }
    if (v7 == v3)
    {
      unsigned int v10 = a3[1];
      unsigned int v11 = a2[1];
      if (v10 < v11) {
        goto LABEL_9;
      }
      if (v11 < v10)
      {
LABEL_19:
        unsigned int v19 = *(unsigned __int16 *)result;
        *(_WORD *)__n128 result = *(_WORD *)a2;
        *(_WORD *)a2 = v19;
        unint64_t v20 = *((void *)result + 1);
        *((void *)result + 1) = *((void *)a2 + 1);
        *((void *)a2 + 1) = v20;
        unsigned int v21 = *a3;
        if (v21 < v19)
        {
LABEL_20:
          __int16 v22 = *(_WORD *)a2;
          *(_WORD *)a2 = *(_WORD *)a3;
          *(_WORD *)a3 = v22;
          uint64_t v9 = a3 + 8;
          __n128 result = a2 + 8;
          goto LABEL_21;
        }
        if (v21 == v19)
        {
          unsigned int v26 = v19 >> 8;
          unsigned int v27 = a3[1];
          BOOL v28 = v27 > v26;
          if (v27 < v26) {
            goto LABEL_20;
          }
        }
        else
        {
          BOOL v28 = v21 > v19;
        }
        if (v28 || *((void *)a3 + 1) >= v20) {
          return result;
        }
        goto LABEL_20;
      }
    }
    else if (v3 < v7)
    {
      goto LABEL_19;
    }
    if (*((void *)a3 + 1) < *((void *)a2 + 1)) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
  unsigned int v5 = a2[1];
  unsigned int v6 = result[1];
  if (v5 < v6) {
    goto LABEL_8;
  }
  if (v6 >= v5) {
    goto LABEL_7;
  }
LABEL_14:
  unsigned int v12 = *a3;
  if (v12 < v3) {
    goto LABEL_15;
  }
  if (v12 == v3)
  {
    unsigned int v24 = a3[1];
    unsigned int v25 = a2[1];
    if (v24 < v25) {
      goto LABEL_15;
    }
    if (v25 < v24) {
      return result;
    }
  }
  else if (v3 < v12)
  {
    return result;
  }
  if (*((void *)a3 + 1) >= *((void *)a2 + 1)) {
    return result;
  }
LABEL_15:
  __int16 v13 = *(_WORD *)a2;
  *(_WORD *)a2 = *(_WORD *)a3;
  *(_WORD *)a3 = v13;
  unint64_t v14 = a2 + 8;
  uint64_t v15 = *((void *)a2 + 1);
  *((void *)a2 + 1) = *((void *)a3 + 1);
  *((void *)a3 + 1) = v15;
  unsigned int v16 = *a2;
  unsigned int v17 = *result;
  if (v16 < v17
    || v16 == v17 && (v16 = a2[1], unsigned int v17 = result[1], v16 < v17)
    || v17 >= v16 && *(void *)v14 < *((void *)result + 1))
  {
    __int16 v18 = *(_WORD *)result;
    *(_WORD *)__n128 result = *(_WORD *)a2;
    result += 8;
    *(_WORD *)a2 = v18;
LABEL_22:
    uint64_t v23 = *(void *)result;
    *(void *)__n128 result = *(void *)v14;
    *(void *)unint64_t v14 = v23;
  }
  return result;
}

uint64_t md::RouteRenderLayer::reserveStencilRange(uint64_t result, uint64_t a2, unsigned __int8 *a3)
{
  if (*a3 == *(unsigned __int8 *)(result + 102) && a3[1] == *(unsigned __int8 *)(result + 103))
  {
    uint64_t v3 = *(void *)(result + 64);
    unsigned int v4 = *(void ***)(v3 + 24);
    for (uint64_t i = *(void ***)(v3 + 32); v4 != i; v4 += 2)
    {
      char v6 = 2 * *((unsigned char *)*v4 + 16) + 4;
      unsigned int v7 = *(unsigned __int8 **)(a2 + 24);
      unsigned int v8 = *v7 + (v6 & 0xFE);
      unsigned int v9 = v7[1];
      BOOL v10 = v8 > v9;
      if (v8 <= v9) {
        unsigned int v11 = 0;
      }
      else {
        unsigned int v11 = v7 + 4;
      }
      *(void *)(*(void *)(result + 56) + 16) = v11;
      if (v10)
      {
        unsigned __int8 *v7 = 1;
        LOBYTE(v9) = v7[2];
      }
      unsigned __int8 v12 = v9 - v6;
      v7[1] = v9 - v6;
      __int16 v13 = *v4;
      uint64_t v14 = (uint64_t)(*v4 + 1);
      uint64_t v15 = (void *)**v4;
      if (v15 != (void *)v14)
      {
        unsigned __int8 v16 = 0;
        do
        {
          uint64_t v17 = v15[4];
          if (*(unsigned char *)(v17 + 621))
          {
            int v18 = v12 + 2 + 2 * (*((_DWORD *)v13 + 4) & 0x7F);
          }
          else
          {
            if (*(unsigned char *)(v17 + 620)) {
              int v19 = 2 * (*((_DWORD *)v13 + 4) & 0x7F);
            }
            else {
              int v19 = 2 * (v16 & 0x7F);
            }
            int v18 = v19 + v12;
          }
          *(_DWORD *)(v17 + 512) = v18;
          *(_DWORD *)(v17 + 616) = v16;
          unint64_t v20 = (void *)v15[1];
          if (v20)
          {
            do
            {
              unsigned int v21 = v20;
              unint64_t v20 = (void *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              unsigned int v21 = (void *)v15[2];
              BOOL v22 = *v21 == (void)v15;
              uint64_t v15 = v21;
            }
            while (!v22);
          }
          ++v16;
          uint64_t v15 = v21;
        }
        while (v21 != (void *)v14);
      }
    }
  }
  return result;
}

uint64_t md::ClientDrapedPolygonRenderLayer::reserveStencilRange(uint64_t result, uint64_t a2)
{
  int8x8_t v2 = *(unsigned __int8 **)(a2 + 24);
  int v3 = *v2;
  if (v3 + 8 > v2[1])
  {
    v2[1] = v2[2];
    LOBYTE(v3) = 1;
  }
  *int8x8_t v2 = v3 + 8;
  *(unsigned char *)(result + 496) = v3;
  return result;
}

uint64_t md::VenueRenderLayer::reserveStencilRange(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 393)) {
    unsigned __int8 v2 = *(unsigned char *)(result + 49) - *(unsigned char *)(result + 48) + 2;
  }
  else {
    unsigned __int8 v2 = 2;
  }
  int v3 = *(unsigned __int8 **)(a2 + 24);
  int v4 = *v3;
  uint64_t v5 = *(void *)(result + 376);
  if (v4 + v2 > v3[1])
  {
    *(unsigned char *)(v5 + 3704) = v3[32];
    *(_DWORD *)(v5 + 3708) = *((_DWORD *)v3 + 9);
    v3[1] = v3[2];
    LOBYTE(v4) = 1;
  }
  unsigned __int8 *v3 = v4 + v2;
  *(unsigned char *)(v5 + 3672) = v4;
  *(unsigned char *)(v5 + 3673) = v4 + 1;
  return result;
}

unsigned __int8 *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  __n128 result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<md::CommandBufferLocation,md::RenderLayer *> *>(a1, a2, a3);
  unsigned int v9 = *a4;
  unsigned int v10 = *a3;
  if (v9 < v10
    || v9 == v10 && (unsigned int v9 = a4[1], v10 = a3[1], v9 < v10)
    || v10 >= v9 && *((void *)a4 + 1) < *((void *)a3 + 1))
  {
    __int16 v11 = *(_WORD *)a3;
    *(_WORD *)a3 = *(_WORD *)a4;
    *(_WORD *)a4 = v11;
    uint64_t v12 = *((void *)a3 + 1);
    *((void *)a3 + 1) = *((void *)a4 + 1);
    *((void *)a4 + 1) = v12;
    unsigned int v13 = *a3;
    unsigned int v14 = *a2;
    if (v13 < v14) {
      goto LABEL_7;
    }
    if (v13 == v14)
    {
      unsigned int v13 = a3[1];
      unsigned int v14 = a2[1];
      if (v13 < v14) {
        goto LABEL_7;
      }
    }
    if (v14 >= v13 && *((void *)a3 + 1) < *((void *)a2 + 1))
    {
LABEL_7:
      __int16 v15 = *(_WORD *)a2;
      *(_WORD *)a2 = *(_WORD *)a3;
      *(_WORD *)a3 = v15;
      uint64_t v16 = *((void *)a2 + 1);
      *((void *)a2 + 1) = *((void *)a3 + 1);
      *((void *)a3 + 1) = v16;
      unsigned int v17 = *a2;
      unsigned int v18 = *a1;
      if (v17 < v18
        || v17 == v18 && (unsigned int v17 = a2[1], v18 = a1[1], v17 < v18)
        || v18 >= v17 && *((void *)a2 + 1) < *((void *)a1 + 1))
      {
        __int16 v19 = *(_WORD *)a1;
        *(_WORD *)a1 = *(_WORD *)a2;
        *(_WORD *)a2 = v19;
        uint64_t v20 = *((void *)a1 + 1);
        *((void *)a1 + 1) = *((void *)a2 + 1);
        *((void *)a2 + 1) = v20;
      }
    }
  }
  return result;
}

void md::ShieldLabelIcon::renderIcon(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v8 = [VKImage alloc];
  grl::IconImage::image(*(grl::IconImage **)(a1 + 152), &v15);
  CFTypeRef v9 = cf;
  double v10 = *(float *)(*(void *)(a1 + 32) + 56);
  __int16 v11 = (std::__shared_weak_count *)a4[1];
  uint64_t v13 = *a4;
  unsigned int v14 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = [(VKImage *)v8 initWithCGImage:v9 scale:&v13 resourceStore:v10];
  unsigned int v17 = &unk_1EF559EB8;
  unsigned int v18 = v12;
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  __int16 v15 = &unk_1EF559118;
  if (cf) {
    CFRelease(cf);
  }
  md::LabelIcon::setImage(a1, (uint64_t)&v17, a2, a3);
  unsigned int v17 = &unk_1EF559EB8;
}

void sub_1A187C654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1A187C66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, CFTypeRef cf)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  if (!cf) {
    _Unwind_Resume(exception_object);
  }
  CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t md::ShieldIconLabelPart::ShieldIconLabelPart(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  md::IconLabelPart::IconLabelPart(a1, a2);
  void *v7 = &unk_1EF53C2E0;
  uint64_t v8 = a4[1];
  v7[96] = *a4;
  v7[97] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(a3 + 296);
  if (!v9)
  {
    double v10 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a3, 0);
    uint64_t v9 = *v10;
    *(void *)(a3 + 296) = *v10;
  }
  *(unsigned char *)(a1 + 784) = *(unsigned char *)(v9 + 91);
  *(void *)(a1 + 788) = *(void *)(v9 + 56);
  *(unsigned char *)(a1 + 557) = 1;
  *(unsigned char *)(a1 + 656) = 1;
  return a1;
}

void sub_1A187C764(_Unwind_Exception *a1)
{
  int v3 = (std::__shared_weak_count *)*((void *)v1 + 97);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  md::IconLabelPart::~IconLabelPart(v1);
  _Unwind_Resume(a1);
}

void grl::IconImage::image(grl::IconImage *this@<X0>, void *a2@<X8>)
{
  int v4 = (std::mutex *)((char *)this + 208);
  std::mutex::lock((std::mutex *)((char *)this + 208));
  uint64_t v5 = *((void *)this + 1);
  if ((!v5 || ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 40))(v5) & 1) == 0) && *(void *)this)
  {
    grl::IconRenderer::renderImage(*(grl::IconRenderer **)this, &v11);
    long long v6 = v11;
    long long v11 = 0uLL;
    unsigned int v7 = (std::__shared_weak_count *)*((void *)this + 2);
    *(_OWORD *)((char *)this + 8) = v6;
    if (v7)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      if (*((void *)&v11 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
      }
    }
    std::unique_ptr<grl::IconRenderer>::reset[abi:nn180100]((grl::IconRenderer **)this, 0);
  }
  uint64_t v8 = *((void *)this + 1);
  if (v8 && ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 40))(v8) & 1) != 0)
  {
    uint64_t v9 = *(const void **)(*((void *)this + 1) + 16);
    *a2 = &unk_1EF559118;
    if (v9) {
      CFRetain(v9);
    }
  }
  else
  {
    if (GEOGetGeoResourceLibRendererLog::onceToken != -1) {
      dispatch_once(&GEOGetGeoResourceLibRendererLog::onceToken, &__block_literal_global_13_0);
    }
    double v10 = GEOGetGeoResourceLibRendererLog::log;
    if (os_log_type_enabled((os_log_t)GEOGetGeoResourceLibRendererLog::log, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v11) = 0;
      _os_log_impl(&dword_1A1780000, v10, OS_LOG_TYPE_ERROR, "grl::IconImage failed to generate the final icon image.", (uint8_t *)&v11, 2u);
    }
    uint64_t v9 = 0;
    *a2 = &unk_1EF559118;
  }
  a2[1] = v9;
  std::mutex::unlock(v4);
}

void md::PointLabelFeature::iconPackColor(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a3 + 85)) {
    goto LABEL_2;
  }
  *(unsigned char *)(a3 + 85) = 1;
  uint64_t v10 = *(void *)(a3 + 8);
  uint64_t v9 = *(md::LabelStyle **)(a3 + 16);
  uint64_t v11 = *(void *)a3;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t *, uint64_t))(*a2 + 720))(a2, a3);
  uint64_t v13 = *(void *)(a3 + 16);
  if (!*(void *)(v13 + 296)) {
    *(void *)(v13 + 296) = *(void *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*(void *)(a3 + 16), 0);
  }
  (*(void (**)(unsigned char *__return_ptr, uint64_t *))(*a2 + 680))(v55, a2);
  LOBYTE(v52) = 0;
  char v54 = 0;
  md::PointLabelFeature::customImageData(&__p, a2);
  md::LabelStyle::pointIconImageKey((md::LabelImageKey **)&v56, v9, v11, v10, a2 + 82, v12, (uint64_t)v55, 0, (uint64_t)&v52, 0, 255, 0, (md::CustomImageData *)&__p);
  long long v57 = v56;
  long long v56 = 0uLL;
  if (v60 == &v59)
  {
    (*(void (**)(uint64_t *))(*v60 + 32))(v60);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
  if (v60) {
    (*(void (**)(void))(*v60 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_23:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_12:
  md::LabelImageLoader::loadIconImage((grl::Allocator *)&v52, *(void *)(*(void *)a3 + 264), (uint64_t *)&v57);
  uint64_t v16 = v52;
  if (!v52) {
    goto LABEL_60;
  }
  if (v52[168])
  {
    LOBYTE(v14) = v52[169];
    float v17 = (float)LODWORD(v14);
    LOBYTE(v15) = v52[170];
    float v18 = (float)v15;
    LOBYTE(v15) = v52[171];
    float v19 = (float)v15;
    int v20 = v52[172];
    if ((float)(v17 * 0.0039216) >= 0.04045) {
      float v21 = powf((float)(v17 * 0.0037171) + 0.052133, 2.4);
    }
    else {
      float v21 = v17 * 0.00030353;
    }
    if ((float)(v18 * 0.0039216) >= 0.04045) {
      float v25 = powf((float)(v18 * 0.0037171) + 0.052133, 2.4);
    }
    else {
      float v25 = v18 * 0.00030353;
    }
    if ((float)(v19 * 0.0039216) >= 0.04045) {
      float v26 = powf((float)(v19 * 0.0037171) + 0.052133, 2.4);
    }
    else {
      float v26 = v19 * 0.00030353;
    }
    unsigned int v15 = 1132396544;
    int v27 = (int)(float)(v21 * 255.0);
    float v14 = v26 * 255.0;
    int v28 = (int)(float)(v25 * 255.0);
    int v29 = (int)v14;
    if (!*(unsigned char *)(a3 + 90))
    {
      *(_DWORD *)(a3 + 86) = (v20 << 24) | (v29 << 16) | (v28 << 8) | v27;
      *(unsigned char *)(a3 + 90) = 1;
      if (!v16[178]) {
        goto LABEL_48;
      }
      goto LABEL_34;
    }
    *(unsigned char *)(a3 + 86) = v27;
    *(unsigned char *)(a3 + 87) = v28;
    *(unsigned char *)(a3 + 88) = v29;
    *(unsigned char *)(a3 + 89) = v20;
  }
  if (!v16[178]) {
    goto LABEL_48;
  }
LABEL_34:
  LOBYTE(v14) = v16[179];
  float v30 = (float)LODWORD(v14);
  LOBYTE(v15) = v16[180];
  float v31 = (float)v15;
  LOBYTE(v15) = v16[181];
  float v32 = (float)v15;
  int v33 = v16[182];
  if ((float)(v30 * 0.0039216) >= 0.04045) {
    float v34 = powf((float)(v30 * 0.0037171) + 0.052133, 2.4);
  }
  else {
    float v34 = v30 * 0.00030353;
  }
  if ((float)(v31 * 0.0039216) >= 0.04045) {
    float v35 = powf((float)(v31 * 0.0037171) + 0.052133, 2.4);
  }
  else {
    float v35 = v31 * 0.00030353;
  }
  if ((float)(v32 * 0.0039216) >= 0.04045) {
    float v36 = powf((float)(v32 * 0.0037171) + 0.052133, 2.4);
  }
  else {
    float v36 = v32 * 0.00030353;
  }
  unsigned int v15 = 1132396544;
  int v37 = (int)(float)(v34 * 255.0);
  float v14 = v36 * 255.0;
  int v38 = (int)(float)(v35 * 255.0);
  int v39 = (int)v14;
  if (*(unsigned char *)(a3 + 95))
  {
    *(unsigned char *)(a3 + 91) = v37;
    *(unsigned char *)(a3 + 92) = v38;
    *(unsigned char *)(a3 + 93) = v39;
    *(unsigned char *)(a3 + 94) = v33;
  }
  else
  {
    *(_DWORD *)(a3 + 91) = (v33 << 24) | (v39 << 16) | (v38 << 8) | v37;
    *(unsigned char *)(a3 + 95) = 1;
  }
LABEL_48:
  if (!v16[173]) {
    goto LABEL_60;
  }
  LOBYTE(v14) = v16[174];
  float v40 = (float)LODWORD(v14);
  LOBYTE(v15) = v16[175];
  float v41 = (float)v15;
  LOBYTE(v15) = v16[176];
  float v42 = (float)v15;
  int v43 = v16[177];
  if ((float)(v40 * 0.0039216) >= 0.04045) {
    float v44 = powf((float)(v40 * 0.0037171) + 0.052133, 2.4);
  }
  else {
    float v44 = v40 * 0.00030353;
  }
  if ((float)(v41 * 0.0039216) >= 0.04045) {
    float v45 = powf((float)(v41 * 0.0037171) + 0.052133, 2.4);
  }
  else {
    float v45 = v41 * 0.00030353;
  }
  if ((float)(v42 * 0.0039216) >= 0.04045) {
    float v46 = powf((float)(v42 * 0.0037171) + 0.052133, 2.4);
  }
  else {
    float v46 = v42 * 0.00030353;
  }
  int v47 = (int)(float)(v44 * 255.0);
  int v48 = (int)(float)(v45 * 255.0);
  int v49 = (int)(float)(v46 * 255.0);
  if (*(unsigned char *)(a3 + 100))
  {
    *(unsigned char *)(a3 + 96) = v47;
    *(unsigned char *)(a3 + 97) = v48;
    *(unsigned char *)(a3 + 98) = v49;
    *(unsigned char *)(a3 + 99) = v43;
LABEL_60:
    unsigned int v50 = v53;
    if (v53) {
      goto LABEL_61;
    }
    goto LABEL_63;
  }
  *(_DWORD *)(a3 + 96) = (v43 << 24) | (v49 << 16) | (v48 << 8) | v47;
  *(unsigned char *)(a3 + 100) = 1;
  unsigned int v50 = v53;
  if (v53)
  {
LABEL_61:
    if (!atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
LABEL_63:
  unsigned int v51 = (std::__shared_weak_count *)*((void *)&v57 + 1);
  if (*((void *)&v57 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v57 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
  }
LABEL_2:
  if (a4 != 6)
  {
    if (a4 == 5 && *(unsigned char *)(a3 + 90))
    {
      int v7 = *(_DWORD *)(a3 + 86);
      goto LABEL_18;
    }
LABEL_20:
    char v24 = 0;
    *(unsigned char *)a1 = 0;
    goto LABEL_21;
  }
  if (!*(unsigned char *)(a3 + 95)) {
    goto LABEL_20;
  }
  int v7 = *(_DWORD *)(a3 + 91);
LABEL_18:
  int v22 = *(unsigned __int8 *)(a3 + 100);
  int v23 = *(_DWORD *)(a3 + 96);
  *(_DWORD *)a1 = v7;
  char v24 = 1;
  *(_WORD *)(a1 + 4) = 1;
  *(unsigned char *)(a1 + 9) = 0;
  if (v22)
  {
    *(_DWORD *)(a1 + 5) = v23;
    *(unsigned char *)(a1 + 9) = 1;
  }
LABEL_21:
  *(unsigned char *)(a1 + 10) = v24;
}

void sub_1A187D164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A187D178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  md::CustomImageData::~CustomImageData((md::CustomImageData *)va);
  _Unwind_Resume(a1);
}

grl::IconRenderer *std::unique_ptr<grl::IconRenderer>::reset[abi:nn180100](grl::IconRenderer **a1, grl::IconRenderer *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    grl::IconRenderer::~IconRenderer(result);
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void grl::IconRenderer::~IconRenderer(grl::IconRenderer *this)
{
  std::__list_imp<std::shared_ptr<esl::QuartzImage>>::clear((uint64_t *)this + 45);
  std::__tree<std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,grl::Allocator>>::destroy((uint64_t)this + 320, *((void *)this + 41));
  if (*((unsigned char *)this + 356)) {
    *((unsigned char *)this + 356) = 0;
  }
  if (*((unsigned char *)this + 288))
  {
    if (*((char *)this + 319) < 0) {
      operator delete(*((void **)this + 37));
    }
    *((unsigned char *)this + 288) = 0;
  }
  unsigned __int8 v2 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((unsigned char *)this + 244)) {
    *((unsigned char *)this + 244) = 0;
  }
  if (*((unsigned char *)this + 232)) {
    *((unsigned char *)this + 232) = 0;
  }
  std::__tree<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerMetrics>>,grl::Allocator>>::destroy((uint64_t)this + 192, *((void *)this + 25));
  if (*((unsigned char *)this + 228)) {
    *((unsigned char *)this + 228) = 0;
  }
  if (*((unsigned char *)this + 72)) {
    *((unsigned char *)this + 72) = 0;
  }
  std::__tree<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerRenderer>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerRenderer>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerRenderer>>,grl::Allocator>>::destroy((uint64_t)this + 32, *((void *)this + 5));
  if (*((unsigned char *)this + 68)) {
    *((unsigned char *)this + 68) = 0;
  }
}

uint64_t std::__tree<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerRenderer>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerRenderer>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerRenderer>>,grl::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    std::__tree<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerRenderer>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerRenderer>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerRenderer>>,grl::Allocator>>::destroy(result, *(void *)a2);
    std::__tree<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerRenderer>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerRenderer>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::unique_ptr<grl::LayerRenderer>>,grl::Allocator>>::destroy(v3, *(void *)(a2 + 8));
    uint64_t v4 = *(void *)(a2 + 40);
    *(void *)(a2 + 40) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    if (*(unsigned char *)(a2 + 36)) {
      *(unsigned char *)(a2 + 36) = 0;
    }
    uint64_t v5 = *(uint64_t (**)(void))(**(void **)(v3 + 16) + 40);
    return v5();
  }
  return result;
}

uint64_t std::__tree<std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,grl::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    std::__tree<std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,grl::Allocator>>::destroy(result, *(void *)a2);
    std::__tree<std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,std::__map_value_compare<grl::IconLayerMapKey,std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,grl::IconLayerMapKey,false>,geo::StdAllocator<std::__value_type<grl::IconLayerMapKey,std::shared_ptr<esl::QuartzImage>>,grl::Allocator>>::destroy(v3, *(void *)(a2 + 8));
    uint64_t v4 = *(std::__shared_weak_count **)(a2 + 48);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    if (*(unsigned char *)(a2 + 36)) {
      *(unsigned char *)(a2 + 36) = 0;
    }
    uint64_t v5 = *(uint64_t (**)(void))(**(void **)(v3 + 16) + 40);
    return v5();
  }
  return result;
}

void std::__list_imp<std::shared_ptr<esl::QuartzImage>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        long long v6 = (std::__shared_weak_count *)v3[3];
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void grl::ImageLayerRenderer::~ImageLayerRenderer(grl::ImageLayerRenderer *this)
{
  grl::ImageLayerRenderer::~ImageLayerRenderer(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;

  *(void *)this = &unk_1EF567160;
  std::__function::__value_func<std::shared_ptr<esl::QuartzImage> ()(void)>::~__value_func[abi:nn180100]((void *)this + 35);
  if (*((unsigned char *)this + 168))
  {
    (**((void (***)(char *))this + 22))((char *)this + 176);
    *((unsigned char *)this + 168) = 0;
  }
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 5) + 40))(*((void *)this + 5), v2, *((void *)this + 4) - v2);
  }
}

md::BalloonLabelPart *md::PointLabelFeature::newIconPart(md::PointLabelFeature *this, const md::PartCreationContext *a2)
{
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  if ((*(uint64_t (**)(md::PointLabelFeature *))(*(void *)this + 64))(this)
    && *(void *)(*((void *)this + 63) + 352) != *(void *)(*((void *)this + 63) + 360))
  {
    {
      operator new();
    }
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 680, 8);
    uint64_t v5 = (md::BalloonLabelPart *)v4;
    uint64_t v6 = *(void *)a2;
    *(_DWORD *)(v4 + 8) = 1065353216;
    *(_OWORD *)(v4 + 72) = xmmword_1A28FC750;
    int v7 = (int8x16_t *)(v4 + 72);
    *(void *)(v4 + 16) = 0;
    *(void *)(v4 + 24) = v4;
    *(void *)(v4 + 64) = 0;
    long long v8 = 0uLL;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(void *)(v4 + 88) = 1065353216;
    *(_DWORD *)(v4 + 96) = 1065353216;
    *(_DWORD *)(v4 + 116) = 0;
    *(void *)(v4 + 100) = 0;
    *(void *)(v4 + 108) = 0;
    *(_OWORD *)(v4 + 120) = xmmword_1A28FC750;
    *(_OWORD *)(v4 + 136) = xmmword_1A28FC750;
    *(_OWORD *)(v4 + 152) = xmmword_1A28FC750;
    *(_OWORD *)(v4 + 168) = xmmword_1A28FCDA0;
    *(unsigned char *)(v4 + 224) = 0;
    *(unsigned char *)(v4 + 200) = 0;
    *(void *)(v4 + 184) = 0;
    *(void *)(v4 + 192) = 0;
    *(_OWORD *)(v4 + 257) = 0u;
    *(_OWORD *)(v4 + 248) = 0u;
    *(_OWORD *)(v4 + 232) = 0u;
    *(_OWORD *)(v4 + 280) = xmmword_1A28FCE90;
    *(_OWORD *)(v4 + 296) = xmmword_1A28FCEA0;
    *(_OWORD *)(v4 + 360) = xmmword_1A28FC750;
    *(_OWORD *)(v4 + 376) = xmmword_1A28FC750;
    *(_OWORD *)(v4 + 392) = xmmword_1A28FC750;
    *(_OWORD *)(v4 + 408) = xmmword_1A28FCDA0;
    *(_OWORD *)(v4 + 520) = xmmword_1A28FCE90;
    *(_OWORD *)(v4 + 312) = xmmword_1A28FC750;
    uint64_t v9 = v4 + 312;
    *(void *)(v4 + 328) = 1065353216;
    *(_DWORD *)(v4 + 336) = 1065353216;
    *(_DWORD *)(v4 + 356) = 0;
    *(void *)(v4 + 340) = 0;
    *(void *)(v4 + 348) = 0;
    *(unsigned char *)(v4 + 464) = 0;
    *(void *)(v4 + 424) = 0;
    *(void *)(v4 + 432) = 0;
    *(unsigned char *)(v4 + 440) = 0;
    *(_OWORD *)(v4 + 497) = 0u;
    *(_OWORD *)(v4 + 472) = 0u;
    *(_OWORD *)(v4 + 488) = 0u;
    *(_DWORD *)(v4 + 536) = 1065353216;
    *(void *)(v4 + 540) = 0;
    *(void *)(v4 + 548) = 0;
    *(_WORD *)(v4 + 556) = 512;
    *(unsigned char *)(v4 + 562) = 0;
    *(_DWORD *)(v4 + 558) = 0;
    *(_WORD *)(v4 + 563) = -1;
    *(_DWORD *)(v4 + 565) = 0;
    __asm { FMOV            V1.4S, #1.0 }
    *(_OWORD *)(v4 + 572) = _Q1;
    *(_DWORD *)(v4 + 588) = 1065353216;
    *(_WORD *)(v4 + 592) = 256;
    *(unsigned char *)(v4 + 594) = 0;
    *(_OWORD *)(v4 + 596) = _Q1;
    *(_DWORD *)(v4 + 612) = 1065353216;
    *(_WORD *)(v4 + 616) = 256;
    *(unsigned char *)(v4 + 618) = 0;
    *(void *)(v4 + 620) = 0;
    *(_DWORD *)(v4 + 628) = 257;
    *(_WORD *)(v4 + 632) = 1;
    *(void *)uint64_t v4 = &unk_1EF53F168;
    *(void *)(v4 + 640) = *((void *)this + 63);
    uint64_t v15 = *((void *)this + 64);
    *(void *)(v4 + 648) = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)(v4 + 656) = 0uLL;
    uint64_t v16 = *(float32x2_t **)(*((void *)this + 63) + 352);
    float v17 = *(float *)(v6 + 176);
    float32x2_t v18 = vmul_n_f32(*v16, v17);
    float32x2_t v118 = v18;
    float32x2_t v119 = vmul_n_f32(v16[1], -v17);
    int v19 = v16[2].u8[0];
    *(unsigned char *)(v4 + 672) = v19;
    if (v19)
    {
      float v20 = v18.f32[1];
      *(float *)&long long v8 = fmaxf(v18.f32[0], v18.f32[1]) * 0.5;
      int32x2_t v116 = (int32x2_t)v8;
      *(_DWORD *)(v4 + 656) = v8;
      md::CollisionObject::resetWithCircles((void **)(v4 + 72), 1u);
      uint64_t v21 = *((void *)v5 + 30);
      unsigned int v22 = *((_DWORD *)v5 + 62);
      *((_DWORD *)v5 + 62) = v22 + 1;
      uint64_t v23 = v21 + 12 * v22;
      *(float32x2_t *)v24.f32 = vmla_f32(v119, (float32x2_t)0x3F0000003F000000, v118);
      v24.i64[1] = v24.i64[0];
      float32x4_t v114 = v24;
      uint64_t v120 = v24.i64[0];
      *(void *)uint64_t v23 = v24.i64[0];
      *(_DWORD *)(v23 + 8) = v116.i32[0];
      if (*(float *)v116.i32 != 0.0)
      {
        float32x4_t v25 = (float32x4_t)vdupq_lane_s32(v116, 0);
        v26.i64[0] = vsubq_f32(v114, v25).u64[0];
        v26.i64[1] = vaddq_f32(v114, v25).i64[1];
        v27.i64[0] = v26.i64[0];
        v27.i64[1] = v7->i64[1];
        v28.i64[0] = v7->i64[0];
        v28.i64[1] = v26.i64[1];
        int8x16_t *v7 = vbslq_s8((int8x16_t)vcgtq_f32(v28, v27), v26, *v7);
      }
      md::CollisionObject::resetWithCircles((void **)v9, 1u);
      uint64_t v29 = *((void *)v5 + 60);
      unsigned int v30 = *((_DWORD *)v5 + 122);
      *((_DWORD *)v5 + 122) = v30 + 1;
      uint64_t v31 = v29 + 12 * v30;
      *(void *)uint64_t v31 = v120;
      *(_DWORD *)(v31 + 8) = v116.i32[0];
      if (*(float *)v116.i32 != 0.0)
      {
        float32x4_t v32 = (float32x4_t)vdupq_lane_s32(v116, 0);
        v33.i64[0] = vsubq_f32(v114, v32).u64[0];
        v33.i64[1] = vaddq_f32(v114, v32).i64[1];
        v34.i64[0] = v33.i64[0];
        v34.i64[1] = *(void *)(v9 + 8);
        v35.i64[0] = *(void *)v9;
        v35.i64[1] = v33.i64[1];
        *(int8x16_t *)uint64_t v9 = vbslq_s8((int8x16_t)vcgtq_f32(v35, v34), v33, *(int8x16_t *)v9);
      }
      float v36 = v118.f32[0];
    }
    else
    {
      *(float32x2_t *)(v4 + 660) = vmul_n_f32(v18, v17 * 0.5);
      md::CollisionObject::resetWithRects((void **)(v4 + 72), 1u);
      uint64_t v45 = *((void *)v5 + 29);
      uint64_t v46 = *((unsigned int *)v5 + 62);
      *((_DWORD *)v5 + 62) = v46 + 1;
      *(float32x2_t *)v47.i8 = v119;
      v47.u64[1] = (unint64_t)vadd_f32(v118, v119);
      *(int8x16_t *)(v45 + 16 * v46) = v47;
      int8x16_t v48 = *(int8x16_t *)((char *)v5 + 72);
      *(float32x2_t *)v49.f32 = v119;
      v49.i64[1] = vextq_s8(v48, v48, 8uLL).u64[0];
      v50.i64[0] = *((void *)v5 + 9);
      int8x16_t v115 = v47;
      float32x2_t v117 = (float32x2_t)v47.u64[1];
      v50.i64[1] = v47.i64[1];
      *(int8x16_t *)((char *)v5 + 72) = vbslq_s8((int8x16_t)vcgtq_f32(v50, v49), v47, v48);
      md::CollisionObject::resetWithRects((void **)v9, 1u);
      uint64_t v51 = *((void *)v5 + 59);
      uint64_t v52 = *((unsigned int *)v5 + 122);
      *((_DWORD *)v5 + 122) = v52 + 1;
      *(int8x16_t *)(v51 + 16 * v52) = v115;
      float32x2_t v53 = vmaxnm_f32(*(float32x2_t *)((char *)v5 + 320), v117);
      *((float32x2_t *)v5 + 39) = vminnm_f32(v119, *(float32x2_t *)((char *)v5 + 312));
      *((float32x2_t *)v5 + 40) = v53;
      float v20 = v118.f32[1];
      float v36 = v118.f32[0];
    }
    *((float *)v5 + 167) = 0.5 - (float)(fminf(v20, v36) * 0.5);
    return v5;
  }
  uint64_t v37 = *((void *)a2 + 2);
  uint64_t v38 = *(void *)(v37 + 296);
  if (v38)
  {
    if (!*(_DWORD *)(v38 + 68)) {
      goto LABEL_17;
    }
  }
  else
  {
    int v39 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*((void *)a2 + 2), 0);
    uint64_t v40 = *v39;
    *(void *)(v37 + 296) = *v39;
    if (!*(_DWORD *)(v40 + 68)) {
      goto LABEL_17;
    }
  }
  uint64_t v5 = (md::BalloonLabelPart *)(*(uint64_t (**)(md::PointLabelFeature *, const md::PartCreationContext *))(*(void *)this + 664))(this, a2);
  if (v5) {
    return v5;
  }
LABEL_17:
  float v41 = (unsigned __int8 *)*((void *)a2 + 1);
  if (!v41[1245]) {
    goto LABEL_48;
  }
  if (!v41[1270])
  {
    unsigned __int8 v54 = atomic_load(v41 + 1240);
    if ((v54 & 1) == 0 || !v41[1245]) {
      goto LABEL_48;
    }
LABEL_27:
    *((void *)a2 + 9) = (*(uint64_t (**)(md::PointLabelFeature *, const md::PartCreationContext *))(*(void *)this + 720))(this, a2);
    uint64_t v55 = *((void *)a2 + 2);
    if (!*(void *)(v55 + 296)) {
      *(void *)(v55 + 296) = *(void *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*((void *)a2 + 2), 0);
    }
    (*(void (**)(std::string *__return_ptr, md::PointLabelFeature *))(*(void *)this + 680))(&v134, this);
    if (*((unsigned __int8 *)a2 + 84) == v134.__r_.__value_.__s.__data_[4])
    {
      if (*((unsigned char *)a2 + 84)) {
        *((_DWORD *)a2 + 20) = v134.__r_.__value_.__l.__data_;
      }
    }
    else if (*((unsigned char *)a2 + 84))
    {
      *((unsigned char *)a2 + 84) = 0;
    }
    else
    {
      *((_DWORD *)a2 + 20) = v134.__r_.__value_.__l.__data_;
      *((unsigned char *)a2 + 84) = 1;
    }
    md::PointLabelFeature::customImageData(&v134, this);
    long long v57 = (void **)((char *)a2 + 104);
    if (*((char *)a2 + 127) < 0) {
      operator delete(*v57);
    }
    *(_OWORD *)long long v57 = *(_OWORD *)&v134.__r_.__value_.__l.__data_;
    *((void *)a2 + 15) = *((void *)&v134.__r_.__value_.__l + 2);
    *((unsigned char *)&v134.__r_.__value_.__s + 23) = 0;
    v134.__r_.__value_.__s.__data_[0] = 0;
    unsigned int v58 = (char *)a2 + 128;
    uint64_t v59 = (const md::PartCreationContext *)*((void *)a2 + 19);
    *((void *)a2 + 19) = 0;
    if (v59 == (const md::PartCreationContext *)((char *)a2 + 128))
    {
      (*(void (**)(char *))(*(void *)v58 + 32))((char *)a2 + 128);
      BOOL v60 = v137;
      if (v137)
      {
LABEL_41:
        if (v60 == &v135)
        {
          *((void *)a2 + 19) = v58;
          (*(void (**)(uint64_t *, char *))(v135 + 24))(&v135, (char *)a2 + 128);
          if (v137 == &v135)
          {
            (*(void (**)(uint64_t *))(v135 + 32))(&v135);
          }
          else if (v137)
          {
            (*(void (**)(uint64_t *))(*v137 + 40))(v137);
          }
        }
        else
        {
          *((void *)a2 + 19) = v60;
          unint64_t v137 = 0;
        }
LABEL_45:
        if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v134.__r_.__value_.__l.__data_);
        }
        uint64_t v5 = md::PointLabelFeatureBase::newBalloonWithDotPart(a2, v56);
        if (v5) {
          return v5;
        }
        goto LABEL_48;
      }
    }
    else
    {
      if (v59) {
        (*(void (**)(const md::PartCreationContext *))(*(void *)v59 + 40))(v59);
      }
      BOOL v60 = v137;
      if (v137) {
        goto LABEL_41;
      }
    }
    *((void *)a2 + 19) = 0;
    goto LABEL_45;
  }
  uint64_t v42 = *((void *)a2 + 2);
  uint64_t v43 = *(void *)(v42 + 296);
  if (!v43)
  {
    float v44 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*((void *)a2 + 2), 0);
    uint64_t v43 = *v44;
    *(void *)(v42 + 296) = *v44;
  }
  if (*(unsigned char *)(v43 + 88) == 10) {
    goto LABEL_27;
  }
LABEL_48:
  uint64_t v61 = *((void *)a2 + 2);
  uint64_t v62 = *(void *)(v61 + 296);
  if (!v62)
  {
    BOOL v63 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*((void *)a2 + 2), 0);
    uint64_t v62 = *v63;
    *(void *)(v61 + 296) = *v63;
  }
  if (*(unsigned char *)(v62 + 88) != 11) {
    goto LABEL_73;
  }
  *((void *)a2 + 9) = (*(uint64_t (**)(md::PointLabelFeature *, const md::PartCreationContext *))(*(void *)this + 720))(this, a2);
  uint64_t v64 = *((void *)a2 + 2);
  if (!*(void *)(v64 + 296)) {
    *(void *)(v64 + 296) = *(void *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*((void *)a2 + 2), 0);
  }
  (*(void (**)(std::string *__return_ptr, md::PointLabelFeature *))(*(void *)this + 680))(&v134, this);
  if (*((unsigned __int8 *)a2 + 84) == v134.__r_.__value_.__s.__data_[4])
  {
    if (*((unsigned char *)a2 + 84)) {
      *((_DWORD *)a2 + 20) = v134.__r_.__value_.__l.__data_;
    }
  }
  else if (*((unsigned char *)a2 + 84))
  {
    *((unsigned char *)a2 + 84) = 0;
  }
  else
  {
    *((_DWORD *)a2 + 20) = v134.__r_.__value_.__l.__data_;
    *((unsigned char *)a2 + 84) = 1;
  }
  *(void *)&long long v123 = a2;
  md::PointLabelFeatureBase::newRingIconPart(md::PartCreationContext const&)::$_0::operator()((uint64_t *)&v134, (uint64_t **)&v123, 1);
  md::PointLabelFeatureBase::newRingIconPart(md::PartCreationContext const&)::$_0::operator()((uint64_t *)&v124, (uint64_t **)&v123, 4);
  uint64_t v5 = 0;
  if (v134.__r_.__value_.__r.__words[0] && v124)
  {
    {
      operator new();
    }
    uint64_t v5 = (md::BalloonLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                      + 16))(mdm::Allocator::instance(void)::alloc, 688, 8);
    uint64_t v65 = *((void *)a2 + 2);
    *((_DWORD *)v5 + 2) = 1065353216;
    *((void *)v5 + 2) = 0;
    *((void *)v5 + 3) = v5;
    *((_OWORD *)v5 + 2) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    *(_OWORD *)((char *)v5 + 72) = xmmword_1A28FC750;
    *((void *)v5 + 8) = 0;
    *((void *)v5 + 11) = 1065353216;
    *((_DWORD *)v5 + 24) = 1065353216;
    *(_OWORD *)((char *)v5 + 100) = 0u;
    *((_DWORD *)v5 + 29) = 0;
    *(_OWORD *)((char *)v5 + 120) = xmmword_1A28FC750;
    *(_OWORD *)((char *)v5 + 136) = xmmword_1A28FC750;
    *(_OWORD *)((char *)v5 + 152) = xmmword_1A28FC750;
    *(_OWORD *)((char *)v5 + 168) = xmmword_1A28FCDA0;
    *((unsigned char *)v5 + 224) = 0;
    *(_OWORD *)((char *)v5 + 184) = 0u;
    *((unsigned char *)v5 + 200) = 0;
    *(_OWORD *)((char *)v5 + 257) = 0u;
    *(_OWORD *)((char *)v5 + 248) = 0u;
    *(_OWORD *)((char *)v5 + 232) = 0u;
    *(_OWORD *)((char *)v5 + 280) = xmmword_1A28FCE90;
    *(_OWORD *)((char *)v5 + 296) = xmmword_1A28FCEA0;
    *(_OWORD *)((char *)v5 + 312) = xmmword_1A28FC750;
    *((void *)v5 + 41) = 1065353216;
    *((_DWORD *)v5 + 84) = 1065353216;
    *((_DWORD *)v5 + 89) = 0;
    *(_OWORD *)((char *)v5 + 340) = 0u;
    *(_OWORD *)((char *)v5 + 360) = xmmword_1A28FC750;
    *(_OWORD *)((char *)v5 + 376) = xmmword_1A28FC750;
    *(_OWORD *)((char *)v5 + 392) = xmmword_1A28FC750;
    *(_OWORD *)((char *)v5 + 408) = xmmword_1A28FCDA0;
    *((unsigned char *)v5 + 464) = 0;
    *(_OWORD *)((char *)v5 + 424) = 0u;
    *((unsigned char *)v5 + 440) = 0;
    *(_OWORD *)((char *)v5 + 497) = 0u;
    *(_OWORD *)((char *)v5 + 472) = 0u;
    *(_OWORD *)((char *)v5 + 488) = 0u;
    *(_OWORD *)((char *)v5 + 520) = xmmword_1A28FCE90;
    *((_DWORD *)v5 + 134) = 1065353216;
    *(_OWORD *)((char *)v5 + 540) = 0u;
    *((_WORD *)v5 + 278) = 512;
    *((unsigned char *)v5 + 562) = 0;
    *(_DWORD *)((char *)v5 + 558) = 0;
    *(_WORD *)((char *)v5 + 563) = -1;
    *(_DWORD *)((char *)v5 + 565) = 0;
    *(void *)uint64_t v5 = &unk_1EF538820;
    *((_OWORD *)v5 + 36) = 0u;
    *((void *)v5 + 74) = 0;
    {
      operator new();
    }
    *((void *)v5 + 75) = mdm::Allocator::instance(void)::alloc;
    *((unsigned char *)v5 + 608) = 0;
    *((unsigned char *)v5 + 616) = 0;
    *((_WORD *)v5 + 314) = 1;
    *((unsigned char *)v5 + 630) = 0;
    *(void *)uint64_t v5 = &unk_1EF537878;
    md::LabelIconStyleMonitor::LabelIconStyleMonitor((uint64_t)v5 + 632, v65);
    {
      operator new();
    }
    unsigned int v66 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
    v67.n128_f64[0] = md::IconLabelPart::IconLabelPart((uint64_t)v66, &v134);
    {
      operator new();
    }
    unsigned int v68 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                        + 16))(mdm::Allocator::instance(void)::alloc, 784, 8, v67);
    md::IconLabelPart::IconLabelPart((uint64_t)v68, &v124);
    *(void *)uint64_t v69 = &unk_1EF53BC50;
    *(_OWORD *)(v69 + 768) = 0u;
    *(unsigned char *)(v69 + 660) = 9;
    md::CompositeLabelPart::addLabelPart((uint64_t)v5, v66);
    md::CompositeLabelPart::addLabelPart((uint64_t)v5, v68);
    (*(void (**)(md::LabelPart *, uint64_t))(*(void *)v66 + 176))(v66, 1);
    (*(void (**)(md::LabelPart *, uint64_t))(*(void *)v68 + 176))(v68, 1);
    *((unsigned char *)v66 + 659) = 1;
    *((void *)v5 + 3) = v68;
  }
  uint64_t v70 = v125;
  if (v125 && !atomic_fetch_add(&v125->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
    std::__shared_weak_count::__release_weak(v70);
  }
  std::string::size_type size = (std::__shared_weak_count *)v134.__r_.__value_.__l.__size_;
  if (v134.__r_.__value_.__l.__size_
    && !atomic_fetch_add((atomic_ullong *volatile)(v134.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
  }
  if (!v5)
  {
LABEL_73:
    unsigned int v124 = 0;
    unsigned int v125 = 0;
    unint64_t v126 = 0;
    {
      operator new();
    }
    uint64_t v127 = mdm::Allocator::instance(void)::alloc;
    uint64_t v72 = *((void *)a2 + 2);
    uint64_t v73 = *(void *)(v72 + 272);
    if (!v73)
    {
      unsigned int v74 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*((void *)a2 + 2));
      uint64_t v73 = *v74;
      *(void *)(v72 + 272) = *v74;
    }
    if (*(unsigned char *)(v73 + 69) == 6)
    {
      unsigned int v75 = (void *)*((void *)a2 + 8);
      unsigned __int8 v76 = atomic_load((unsigned __int8 *)(*(void *)a2 + 3392));
      md::PointLabelFeatureElement::getSummaryIconInfos((uint64_t)&v134, v75, 2, v76 & 1);
      if (v134.__r_.__value_.__s.__data_[0])
      {
        unsigned int v77 = (int *)v134.__r_.__value_.__l.__size_;
        if (v134.__r_.__value_.__l.__size_ == v134.__r_.__value_.__r.__words[2])
        {
LABEL_103:
          if (!v77) {
            goto LABEL_113;
          }
          for (uint64_t i = (int *)v134.__r_.__value_.__r.__words[2]; ; i -= 14)
          {
            if (i == v77)
            {
              v134.__r_.__value_.__r.__words[2] = (std::string::size_type)v77;
              (*(void (**)(uint64_t, int *, uint64_t))(*(void *)v136 + 40))(v136, v77, v135 - (void)v77);
              goto LABEL_113;
            }
            if (*((char *)i - 1) < 0)
            {
              operator delete(*((void **)i - 3));
              if ((*((char *)i - 25) & 0x80000000) == 0) {
                continue;
              }
            }
            else if ((*((char *)i - 25) & 0x80000000) == 0)
            {
              continue;
            }
            operator delete(*((void **)i - 6));
          }
        }
        unsigned int v79 = (std::__shared_count *)*((void *)a2 + 1);
        unsigned int v78 = (md::LabelStyle *)*((void *)a2 + 2);
        uint64_t v80 = *(void *)a2;
        int v81 = *(_DWORD *)v134.__r_.__value_.__l.__size_;
        int v82 = *(_DWORD *)(v134.__r_.__value_.__l.__size_ + 4);
        uint64_t v83 = *((void *)v78 + 37);
        if (!v83)
        {
          BOOL v84 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*((void *)a2 + 2), 0);
          uint64_t v83 = *v84;
          *((void *)v78 + 37) = *v84;
        }
        BYTE5(v121) = 0;
        char v122 = 0;
        md::PointLabelFeature::customImageData(&__p, this);
        md::LabelStyle::createIcon((uint64_t *)&v123, v78, v80, v79, (uint64_t *)this + 82, 0, v81, v82, 0, v83, (char *)&v121 + 5, (const md::CustomImageData *)&__p);
        if (v133 == v132)
        {
          (*(void (**)(void *))(v132[0] + 32))(v132);
        }
        else if (v133)
        {
          (*(void (**)(void))(*v133 + 40))();
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if ((void)v123)
        {
          uint64_t v85 = v125;
          if ((unint64_t)v125 >= v126)
          {
            p_shared_weak_owners = (std::__shared_weak_count *)std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>((uint64_t)&v124, &v123);
          }
          else
          {
            if (v125)
            {
              v125->__vftable = (std::__shared_weak_count_vtbl *)v123;
              uint64_t v86 = *((void *)&v123 + 1);
              v85->__shared_owners_ = *((void *)&v123 + 1);
              if (v86) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v86 + 8), 1uLL, memory_order_relaxed);
              }
            }
            p_shared_weak_owners = (std::__shared_weak_count *)&v85->__shared_weak_owners_;
          }
          unsigned int v125 = p_shared_weak_owners;
          md::PointLabelFeature::appendAlternateIcons((uint64_t *)this, (uint64_t *)a2, v77, (uint64_t)&v124);
        }
        char v88 = (std::__shared_weak_count *)*((void *)&v123 + 1);
        if (*((void *)&v123 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v123 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
        if (v134.__r_.__value_.__s.__data_[0])
        {
          unsigned int v77 = (int *)v134.__r_.__value_.__l.__size_;
          goto LABEL_103;
        }
      }
    }
LABEL_113:
    unsigned int v91 = v124;
    unsigned int v90 = v125;
    if (v124 == v125)
    {
      uint64_t v93 = *((void *)a2 + 1);
      unint64_t v92 = (md::LabelStyle *)*((void *)a2 + 2);
      uint64_t v94 = *(void *)a2;
      uint8x8_t v95 = (char *)(*(uint64_t (**)(md::PointLabelFeature *, const md::PartCreationContext *))(*(void *)this + 720))(this, a2);
      uint64_t v96 = *((void *)a2 + 2);
      if (!*(void *)(v96 + 296)) {
        *(void *)(v96 + 296) = *(void *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*((void *)a2 + 2), 0);
      }
      (*(void (**)(uint64_t *__return_ptr, md::PointLabelFeature *))(*(void *)this + 680))(&v121, this);
      md::PointLabelFeature::customImageData(&v128, this);
      md::LabelStyle::pointIcon((uint64_t *)&v134, v92, v94, v93, (uint64_t *)this + 82, v95, (int *)&v121, 0, (uint64_t)a2 + 32, 0, 255, 0, (uint64_t)&v128);
      if (v130 == v129)
      {
        (*(void (**)(void *))(v129[0] + 32))(v129);
      }
      else if (v130)
      {
        (*(void (**)(void))(*v130 + 40))();
      }
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v128.__r_.__value_.__l.__data_);
      }
      if (v134.__r_.__value_.__r.__words[0])
      {
        if ((unint64_t)v91 >= v126)
        {
          int64_t v98 = (std::__shared_weak_count *)std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>((uint64_t)&v124, (long long *)&v134);
        }
        else
        {
          if (v91)
          {
            v91->__vftable = (std::__shared_weak_count_vtbl *)v134.__r_.__value_.__r.__words[0];
            std::string::size_type v97 = v134.__r_.__value_.__l.__size_;
            v91->__shared_owners_ = v134.__r_.__value_.__l.__size_;
            if (v97) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v97 + 8), 1uLL, memory_order_relaxed);
            }
          }
          int64_t v98 = (std::__shared_weak_count *)&v91->__shared_weak_owners_;
        }
        unsigned int v125 = v98;
        md::PointLabelFeature::appendAlternateIcons((uint64_t *)this, (uint64_t *)a2, 0, (uint64_t)&v124);
      }
      int64_t v99 = (std::__shared_weak_count *)v134.__r_.__value_.__l.__size_;
      if (v134.__r_.__value_.__l.__size_
        && !atomic_fetch_add((atomic_ullong *volatile)(v134.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
      unsigned int v91 = v124;
      unsigned int v90 = v125;
    }
    unint64_t v100 = (char *)v90 - (char *)v91;
    if (v100 == 16)
    {
      {
        operator new();
      }
      uint64_t v5 = (md::BalloonLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                        + 16))(mdm::Allocator::instance(void)::alloc, 840, 8);
      unsigned int v91 = v124;
      md::PointIconLabelPart::PointIconLabelPart((uint64_t)v5, v124, *(void *)a2, *((void *)a2 + 1), *((md::LabelStyle **)a2 + 2), 0);
    }
    else if (v100 < 0x11)
    {
      uint64_t v5 = 0;
    }
    else
    {
      {
        operator new();
      }
      uint64_t v5 = (md::BalloonLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                        + 16))(mdm::Allocator::instance(void)::alloc, 944, 8);
      uint64_t v101 = *(void *)a2;
      uint64_t v102 = *((void *)a2 + 1);
      unsigned int v103 = (md::LabelStyle *)*((void *)a2 + 2);
      unsigned int v104 = (char *)v124;
      md::PointIconLabelPart::PointIconLabelPart((uint64_t)v5, v124, v101, v102, v103, 0);
      *(void *)uint64_t v5 = &unk_1EF5417D0;
      *((void *)v5 + 105) = 0;
      *((void *)v5 + 107) = 0;
      *((void *)v5 + 106) = 0;
      uint64_t v105 = v127;
      unsigned int v106 = (char *)v125;
      *((void *)v5 + 108) = v127;
      uint64_t v107 = v106 - v104;
      if (v106 != v104)
      {
        if (v107 < 0) {
          abort();
        }
        unsigned int v108 = (void *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(void *)v105 + 16))(v105, v106 - v104, 8);
        *((void *)v5 + 105) = v108;
        *((void *)v5 + 106) = v108;
        *((void *)v5 + 107) = &v108[2 * (v107 >> 4)];
        do
        {
          if (v108)
          {
            void *v108 = *(void *)v104;
            uint64_t v109 = *((void *)v104 + 1);
            v108[1] = v109;
            if (v109) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v109 + 8), 1uLL, memory_order_relaxed);
            }
          }
          v104 += 16;
          v108 += 2;
        }
        while (v104 != v106);
        *((void *)v5 + 106) = v108;
      }
      *((void *)v5 + 111) = 0;
      *(_OWORD *)((char *)v5 + 872) = 0u;
      {
        operator new();
      }
      *((void *)v5 + 112) = mdm::Allocator::instance(void)::alloc;
      *((_DWORD *)v5 + 228) = 1065353216;
      *((void *)v5 + 113) = 0;
      *((unsigned char *)v5 + 916) = 0;
      *((_DWORD *)v5 + 232) = 1065353216;
      *((void *)v5 + 115) = 0;
      *((unsigned char *)v5 + 932) = 0;
      *((_WORD *)v5 + 468) = 0;
      *((unsigned char *)v5 + 938) = 0;
      unsigned int v91 = v124;
    }
    if (v91)
    {
      unsigned int v110 = v125;
      unint64_t v111 = &v91->__vftable;
      if (v125 != v91)
      {
        do
        {
          shared_weak_owners = (std::__shared_weak_count *)v110[-1].__shared_weak_owners_;
          if (shared_weak_owners && !atomic_fetch_add(&shared_weak_owners->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, void *))shared_weak_owners->__on_zero_shared)(shared_weak_owners, v111);
            std::__shared_weak_count::__release_weak(shared_weak_owners);
          }
          unsigned int v110 = (std::__shared_weak_count *)((char *)v110 - 16);
        }
        while (v110 != v91);
        unint64_t v111 = &v124->__vftable;
      }
      unsigned int v125 = v91;
      (*(void (**)(uint64_t, void *, unint64_t))(*(void *)v127 + 40))(v127, v111, v126 - (void)v111);
    }
  }
  return v5;
}

void sub_1A187EC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a24);
  geo::optional<std::vector<md::PointLabelSummaryIconInfo,geo::StdAllocator<md::PointLabelSummaryIconInfo,mdm::Allocator>>>::~optional(v26 - 168);
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](&a26);
  _Unwind_Resume(a1);
}

void sub_1A187EE5C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 648);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(void *)uint64_t v1 = v2;
  free(*(void **)(v1 + 472));
  free(*(void **)(v1 + 480));
  free(*(void **)(v1 + 496));
  free(*(void **)(v1 + 232));
  free(*(void **)(v1 + 240));
  free(*(void **)(v1 + 256));
  uint64_t v6 = mdm::Allocator::instance(v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 40))(v6, v1, 680);
  _Unwind_Resume(a1);
}

void md::PointLabelFeature::iconColor(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  if ((*(unsigned char *)(a1 + 89) & 0xFD) != 0)
  {
    *a2 = 0;
    a2[4] = 0;
  }
  else
  {
    *(_DWORD *)a2 = *(_DWORD *)(a1 + 72);
    a2[4] = 1;
  }
}

char *md::PointLabelFeature::iconText(md::PointLabelFeature *this, const md::PartCreationContext *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(void *)(v4 + 296);
  if (v5)
  {
    int v6 = *(unsigned __int8 *)(v5 + 90);
  }
  else
  {
    int v7 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*((void *)a2 + 2), 0);
    uint64_t v8 = *v7;
    *(void *)(v4 + 296) = *v7;
    uint64_t v9 = *((void *)a2 + 2);
    uint64_t v5 = *(void *)(v9 + 296);
    int v6 = *(unsigned __int8 *)(v8 + 90);
    if (!v5)
    {
      uint64_t v10 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*((void *)a2 + 2), 0);
      uint64_t v5 = *v10;
      *(void *)(v9 + 296) = *v10;
    }
  }
  if (*(unsigned char *)(v5 + 88) == 9)
  {
    if (v6 == 7) {
      goto LABEL_9;
    }
    if (v6 != 2)
    {
      if (!v6)
      {
LABEL_9:
        id v11 = *(id *)(*(void *)a2 + 3472);
        uint64_t v12 = v11;
        if (v11
          && (id v19 = 0,
              [v11 getTextForKey:&unk_1EF5BB430 text:&v19 locale:0],
              (id v13 = v19) != 0))
        {
          id v14 = v13;
          uint64_t v15 = (char *)[v14 UTF8String];
        }
        else
        {
          id v14 = 0;
          uint64_t v15 = 0;
        }

        return v15;
      }
LABEL_16:
      unsigned int v16 = 255;
      goto LABEL_18;
    }
  }
  else if (v6 != 2)
  {
    if (v6 == 7 && (*(uint64_t (**)(md::PointLabelFeature *))(*(void *)this + 64))(this))
    {
      unsigned int v16 = md::PointLabelFeature::externalFeatureTextIndex(this, 3, *(void *)a2);
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  unsigned int v16 = *(unsigned __int8 *)(*((void *)a2 + 8) + 130);
LABEL_18:
  uint64_t v17 = *((void *)this + 68);
  if (v16 >= (unint64_t)((*((void *)this + 69) - v17) >> 6)) {
    return 0;
  }
  uint64_t v15 = (char *)(v17 + ((unint64_t)v16 << 6));
  if (v15[23] < 0) {
    return *(char **)v15;
  }
  return v15;
}

void sub_1A187F0E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t md::PointLabelFeature::customImageData(std::string *this, void *a2)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a2 + 64))(a2);
  if (!result)
  {
    this[2].__r_.__value_.__r.__words[0] = 0;
    *(_OWORD *)&this->__r_.__value_.__r.__words[2] = 0u;
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = 0u;
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0u;
    return result;
  }
  uint64_t v5 = a2[63];
  if (*(char *)(v5 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)(v5 + 120), *(void *)(v5 + 128));
    uint64_t result = *(void *)(v5 + 168);
    if (!result)
    {
LABEL_9:
      this[2].__r_.__value_.__r.__words[0] = result;
      return result;
    }
  }
  else
  {
    long long v6 = *(_OWORD *)(v5 + 120);
    this->__r_.__value_.__r.__words[2] = *(void *)(v5 + 136);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
    uint64_t result = *(void *)(v5 + 168);
    if (!result) {
      goto LABEL_9;
    }
  }
  if (result != v5 + 144)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    goto LABEL_9;
  }
  this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)&this[1];
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
}

void sub_1A187F1FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::PointLabelFeature::externalFeature(md::PointLabelFeature *this)
{
  return *((void *)this + 63);
}

_OWORD *std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(uint64_t a1, long long *a2)
{
  uint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60) {
    abort();
  }
  uint64_t v5 = *(void *)(a1 + 16) - *(void *)a1;
  if (v5 >> 3 > v3) {
    unint64_t v3 = v5 >> 3;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  uint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6) {
    uint64_t v7 = v3;
  }
  if (v7)
  {
    uint64_t v9 = 16 * v7;
    uint64_t v10 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), 16 * v7, 8);
    id v11 = (long long *)(v10 + 16 * v2);
    uint64_t v7 = v10 + v9;
    if (v10)
    {
      long long v12 = *a2;
      long long *v11 = *a2;
      if (*((void *)&v12 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 1uLL, memory_order_relaxed);
      }
    }
  }
  else
  {
    id v11 = (long long *)(16 * v2);
  }
  id v13 = v11 + 1;
  id v14 = *(void **)a1;
  uint64_t v15 = *(void **)(a1 + 8);
  if (v15 == *(void **)a1)
  {
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v13;
    uint64_t v18 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v7;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 1);
      v15 -= 2;
      *--id v11 = v16;
      *uint64_t v15 = 0;
      v15[1] = 0;
    }
    while (v15 != v14);
    uint64_t v15 = *(void **)a1;
    uint64_t v17 = *(void **)(a1 + 8);
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v13;
    uint64_t v18 = *(void *)(a1 + 16);
    for (*(void *)(a1 + 16) = v7; v17 != v15; v17 -= 2)
    {
      id v19 = (std::__shared_weak_count *)*(v17 - 1);
      if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  if (v15) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v15, v18 - (void)v15);
  }
  return v13;
}

void grl::ShapeLayerRenderer::~ShapeLayerRenderer(grl::ShapeLayerRenderer *this)
{
  grl::ShapeLayerRenderer::~ShapeLayerRenderer(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;

  *(void *)this = &unk_1EF567198;
  if (*((unsigned char *)this + 152))
  {
    (**((void (***)(char *))this + 20))((char *)this + 160);
    *((unsigned char *)this + 152) = 0;
  }
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 5) + 40))(*((void *)this + 5), v2, *((void *)this + 4) - v2);
  }
}

uint64_t md::PointIconLabelPart::PointIconLabelPart(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, md::LabelStyle *a5, int a6)
{
  md::IconLabelPart::IconLabelPart(a1, a2);
  void *v11 = &unk_1EF539EE0;
  md::LabelIconStyleMonitor::LabelIconStyleMonitor((uint64_t)(v11 + 96), (uint64_t)a5);
  *(_DWORD *)(a1 + 824) = a6;
  *(void *)(a1 + 832) = 0;
  uint64_t v12 = *((void *)a5 + 34);
  if (!v12)
  {
    id v13 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>((uint64_t)a5);
    uint64_t v12 = *v13;
    *((void *)a5 + 34) = *v13;
  }
  md::LabelStyle::namedIcon(&v19, a5, a3, a4, (void **)(v12 + 176), 1);
  if (v19)
  {
    {
      operator new();
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
    v15.n128_f64[0] = md::IconLabelPart::IconLabelPart(v14, &v19);
    uint64_t v16 = *(void *)(a1 + 832);
    *(void *)(a1 + 832) = v14;
    if (v16) {
      (*(void (**)(uint64_t, double))(*(void *)v16 + 8))(v16, v15.n128_f64[0]);
    }
    (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v14 + 808))(v14, 0xFFFFFFFFLL, v15);
  }
  uint64_t v17 = v20;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  return a1;
}

void sub_1A187F6D8(_Unwind_Exception *a1)
{
  md::IconLabelPart::~IconLabelPart(v1);
  _Unwind_Resume(a1);
}

double md::IconLabelPart::IconLabelPart(uint64_t a1, void *a2)
{
  *(_DWORD *)(a1 + 8) = 1065353216;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = xmmword_1A28FC750;
  *(void *)(a1 + 88) = 1065353216;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(void *)(a1 + 108) = 0;
  *(void *)(a1 + 100) = 0;
  *(_DWORD *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 120) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 136) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 152) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 168) = xmmword_1A28FCDA0;
  *(unsigned char *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 257) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 280) = xmmword_1A28FCE90;
  *(_OWORD *)(a1 + 296) = xmmword_1A28FCEA0;
  *(_OWORD *)(a1 + 312) = xmmword_1A28FC750;
  *(void *)(a1 + 328) = 1065353216;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_DWORD *)(a1 + 356) = 0;
  *(void *)(a1 + 340) = 0;
  *(void *)(a1 + 348) = 0;
  *(_OWORD *)(a1 + 360) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 376) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 392) = xmmword_1A28FC750;
  *(_OWORD *)(a1 + 408) = xmmword_1A28FCDA0;
  *(unsigned char *)(a1 + 464) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(unsigned char *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 497) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 520) = xmmword_1A28FCE90;
  *(_DWORD *)(a1 + 536) = 1065353216;
  *(void *)(a1 + 540) = 0;
  *(void *)(a1 + 548) = 0;
  *(_WORD *)(a1 + 556) = 512;
  *(unsigned char *)(a1 + 562) = 0;
  *(_DWORD *)(a1 + 558) = 0;
  *(_WORD *)(a1 + 563) = -1;
  *(_DWORD *)(a1 + 565) = 0;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(a1 + 572) = _Q1;
  *(_DWORD *)(a1 + 588) = 1065353216;
  *(_WORD *)(a1 + 592) = 256;
  *(unsigned char *)(a1 + 594) = 0;
  *(_OWORD *)(a1 + 596) = _Q1;
  *(_DWORD *)(a1 + 612) = 1065353216;
  *(_WORD *)(a1 + 616) = 256;
  *(unsigned char *)(a1 + 618) = 0;
  *(void *)(a1 + 620) = 0;
  *(_DWORD *)(a1 + 628) = 257;
  *(_WORD *)(a1 + 632) = 1;
  *(void *)a1 = &unk_1EF531FD8;
  uint64_t v7 = a2[1];
  *(void *)(a1 + 640) = *a2;
  *(void *)(a1 + 648) = v7;
  if (v7)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    char v8 = *(unsigned char *)(a1 + 557);
  }
  else
  {
    char v8 = 2;
  }
  *(_DWORD *)(a1 + 662) = 16842752;
  *(unsigned char *)(a1 + 666) = 0;
  *(void *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 680) = 0;
  *(_WORD *)(a1 + 684) = 258;
  *(void *)(a1 + 686) = 0;
  *(_WORD *)(a1 + 694) = 0;
  *(_OWORD *)(a1 + 728) = 0uLL;
  *(_DWORD *)(a1 + 744) = 1065353216;
  *(_WORD *)(a1 + 764) = 0;
  *(unsigned char *)(a1 + 756) = 0;
  *(void *)(a1 + 748) = 0;
  double result = 5.77662215e-275;
  *(_DWORD *)(a1 + 657) = 117440512;
  *(_WORD *)(a1 + 688) = 1;
  *(unsigned char *)(a1 + 656) = v8;
  return result;
}

uint64_t md::LabelIconStyleMonitor::LabelIconStyleMonitor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  {
    uint64_t v6 = a2;
    a2 = v6;
    if (v5) {
      operator new();
    }
  }
  uint64_t v3 = mdm::Allocator::instance(void)::alloc;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = v3;
  *(_DWORD *)(a1 + 48) = 255;
  md::LabelIconStyleMonitor::initialize(a1, a2);
  return a1;
}

void sub_1A187F9E0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    (*(void (**)(void, void, uint64_t))(**(void **)(v1 + 24) + 40))(*(void *)(v1 + 24), *(void *)v1, *(void *)(v1 + 16) & 0x7FFFFFFFFFFFFFFFLL);
  }
  _Unwind_Resume(exception_object);
}

double md::LabelIconStyleMonitor::initialize(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 51) = 1;
  if (!a2)
  {
    *(unsigned char *)(a1 + 51) = 0;
    return result;
  }
  uint64_t v4 = *(void *)(a2 + 272);
  if (!v4)
  {
    int v5 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(a2);
    uint64_t v4 = *v5;
    *(void *)(a2 + 272) = *v5;
  }
  *(unsigned char *)(a1 + 50) = *(unsigned char *)(v4 + 69);
  if (*(char *)(v4 + 263) < 0) {
    uint64_t v6 = *(void *)(v4 + 248);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v4 + 263);
  }
  uint64_t v7 = 80;
  if (v6)
  {
    uint64_t v7 = 240;
    char v8 = (_OWORD *)(v4 + 240);
  }
  else
  {
    char v8 = (_OWORD *)(v4 + 80);
  }
  if (v8 == (_OWORD *)a1)
  {
LABEL_23:
    uint64_t v11 = *(void *)(a2 + 296);
    if (!v11) {
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  char v9 = *((unsigned char *)v8 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v12 = *(void **)(v4 + v7);
    if (v9 >= 0) {
      id v13 = v8;
    }
    else {
      id v13 = v12;
    }
    if (v9 >= 0) {
      size_t v14 = *((unsigned __int8 *)v8 + 23);
    }
    else {
      size_t v14 = *((void *)v8 + 1);
    }
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>((void **)a1, v13, v14);
    goto LABEL_23;
  }
  if ((*((unsigned char *)v8 + 23) & 0x80) != 0)
  {
    std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((void **)a1, *(void **)(v4 + v7), *((void *)v8 + 1));
    uint64_t v11 = *(void *)(a2 + 296);
    if (v11) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  long long v10 = *v8;
  *(void *)(a1 + 16) = *((void *)v8 + 2);
  *(_OWORD *)a1 = v10;
  uint64_t v11 = *(void *)(a2 + 296);
  if (!v11)
  {
LABEL_24:
    __n128 v15 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a2, 0);
    uint64_t v11 = *v15;
    *(void *)(a2 + 296) = *v15;
  }
LABEL_25:
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(v11 + 88);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(v11 + 92);
  double result = *(double *)(v11 + 64);
  *(double *)(a1 + 32) = result;
  *(void *)(a1 + 40) = *(void *)(v11 + 56);
  return result;
}

void md::PointLabelFeature::appendAlternateIcons(uint64_t *a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2[2];
  uint64_t v42 = *(unsigned __int8 *)(v4 + 126);
  if (*(unsigned char *)(v4 + 126))
  {
    unint64_t v6 = 0;
    uint64_t v40 = a1 + 82;
    while (1)
    {
      if (v6 >= *(unsigned __int8 *)(v4 + 126))
      {
        uint64_t v7 = 0;
        if (!MEMORY[0]) {
          return;
        }
      }
      else
      {
        if (!*(unsigned char *)(v4 + 457)) {
          md::LabelStyle::prepareAlternateStyles((md::LabelStyle *)v4);
        }
        uint64_t v7 = v4 + 16 * v6 + 360;
        if (!*(unsigned char *)v7) {
          return;
        }
      }
      uint64_t v8 = *(void *)(v7 + 8);
      switch(*(unsigned char *)(v7 + 2))
      {
        case 3:
          uint64_t v9 = *(void *)(v4 + 272);
          if (!v9)
          {
            long long v10 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(v4);
            uint64_t v9 = *v10;
            *(void *)(v4 + 272) = *v10;
          }
          uint64_t v11 = v9 + 80;
          int v12 = *(char *)(v9 + 103);
          if ((v12 & 0x80000000) == 0) {
            goto LABEL_18;
          }
          goto LABEL_27;
        case 4:
          uint64_t v13 = *(void *)(v4 + 272);
          if (!v13)
          {
            size_t v14 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(v4);
            uint64_t v13 = *v14;
            *(void *)(v4 + 272) = *v14;
          }
          uint64_t v11 = v13 + 112;
          int v12 = *(char *)(v13 + 135);
          if ((v12 & 0x80000000) == 0) {
            goto LABEL_18;
          }
          goto LABEL_27;
        case 5:
          __n128 v15 = a3;
          if (a3)
          {
            int v16 = a3[1];
LABEL_22:
            int v17 = *v15;
            if (!*v15) {
              goto LABEL_3;
            }
            uint64_t v11 = 0;
            goto LABEL_29;
          }
          uint64_t v28 = *(void *)(v4 + 296);
          if (!v28)
          {
            uint64_t v29 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v4, 0);
            uint64_t v28 = *v29;
            *(void *)(v4 + 296) = *v29;
          }
          uint64_t v30 = *v40;
          if (!*v40) {
            goto LABEL_3;
          }
          unint64_t v31 = *(unsigned __int8 *)(v30 + 33);
          if (!*(unsigned char *)(v30 + 33)) {
            goto LABEL_3;
          }
          int v32 = *(_DWORD *)(v28 + 64);
          uint64_t v33 = *(void *)v30;
          if (*(_DWORD *)v33 == v32)
          {
            LOWORD(v16) = *(_WORD *)(v33 + 4);
            __n128 v15 = (int *)(v28 + 64);
            goto LABEL_22;
          }
          unint64_t v34 = 0;
          float32x4_t v35 = (int *)(v33 + 8);
          do
          {
            if (v31 - 1 == v34) {
              goto LABEL_3;
            }
            int v36 = *v35;
            v35 += 2;
            ++v34;
          }
          while (v36 != v32);
          if (v34 < v31)
          {
            LOWORD(v16) = *(_WORD *)(v33 + 8 * v34 + 4);
            if (!v28)
            {
              uint64_t v37 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v4, 0);
              uint64_t v28 = *v37;
              *(void *)(v4 + 296) = *v37;
            }
            __n128 v15 = (int *)(v28 + 64);
            goto LABEL_22;
          }
LABEL_3:
          if (++v6 == v42) {
            return;
          }
          break;
        case 7:
          uint64_t v18 = *(void *)(v4 + 272);
          if (!v18)
          {
            uint64_t v19 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(v4);
            uint64_t v18 = *v19;
            *(void *)(v4 + 272) = *v19;
          }
          uint64_t v11 = v18 + 144;
          int v12 = *(char *)(v18 + 167);
          if (v12 < 0)
          {
LABEL_27:
            if (!*(void *)(v11 + 8)) {
              goto LABEL_3;
            }
          }
          else
          {
LABEL_18:
            if (!(_BYTE)v12) {
              goto LABEL_3;
            }
          }
          LOWORD(v16) = 0;
          int v17 = 0;
LABEL_29:
          float v20 = (std::__shared_count *)a2[1];
          uint64_t v21 = (md::LabelStyle *)a2[2];
          uint64_t v22 = *a2;
          if (!*((void *)v21 + 37)) {
            *((void *)v21 + 37) = *(void *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a2[2], 0);
          }
          (*(void (**)(char *__return_ptr, uint64_t *))(*a1 + 680))(v43, a1);
          md::PointLabelFeature::customImageData(&__p, a1);
          md::LabelStyle::createIcon((uint64_t *)&v44, v21, v22, v20, v40, (void **)v11, v17, v16, 0, v8, v43, (const md::CustomImageData *)&__p);
          if (v47 == v46)
          {
            (*(void (**)(void *))(v46[0] + 32))(v46);
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_35;
            }
          }
          else
          {
            if (v47) {
              (*(void (**)(void))(*v47 + 40))();
            }
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_35:
              uint64_t v23 = v44;
              if (!(void)v44) {
                goto LABEL_36;
              }
              goto LABEL_40;
            }
          }
          operator delete(__p.__r_.__value_.__l.__data_);
          uint64_t v23 = v44;
          if (!(void)v44)
          {
LABEL_36:
            float32x4_t v24 = (std::__shared_weak_count *)*((void *)&v44 + 1);
            if (!*((void *)&v44 + 1)) {
              goto LABEL_3;
            }
LABEL_47:
            if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
            goto LABEL_3;
          }
LABEL_40:
          float32x4_t v25 = *(void **)(a4 + 8);
          if ((unint64_t)v25 >= *(void *)(a4 + 16))
          {
            float32x4_t v27 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(a4, &v44);
          }
          else
          {
            if (v25)
            {
              *float32x4_t v25 = v23;
              uint64_t v26 = *((void *)&v44 + 1);
              v25[1] = *((void *)&v44 + 1);
              if (v26) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
              }
            }
            float32x4_t v27 = v25 + 2;
          }
          *(void *)(a4 + 8) = v27;
          float32x4_t v24 = (std::__shared_weak_count *)*((void *)&v44 + 1);
          if (*((void *)&v44 + 1)) {
            goto LABEL_47;
          }
          goto LABEL_3;
        default:
          goto LABEL_3;
      }
    }
  }
}

void sub_1A187FF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A187FFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  md::CustomImageData::~CustomImageData((md::CustomImageData *)va);
  _Unwind_Resume(a1);
}

void md::LabelStyle::namedIcon(uint64_t *a1, md::LabelStyle *a2, uint64_t a3, uint64_t a4, void **a5, int a6)
{
  uint64_t v7 = (void *)*((unsigned __int8 *)a5 + 23);
  if ((char)v7 < 0) {
    uint64_t v7 = a5[1];
  }
  if (!v7)
  {
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  uint64_t v11 = (char *)operator new(0x148uLL);
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(void *)uint64_t v11 = &unk_1EF57FB50;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *((void *)v11 + 7) = 0;
  {
    operator new();
  }
  uint64_t v12 = mdm::Allocator::instance(void)::alloc;
  *((void *)v11 + 9) = 0;
  *((void *)v11 + 10) = 0;
  *((void *)v11 + 8) = v12;
  *((_WORD *)v11 + 44) = 0;
  *((void *)v11 + 12) = v11 + 128;
  *((void *)v11 + 13) = v11 + 128;
  *((void *)v11 + 14) = v11 + 128;
  *((void *)v11 + 15) = 2;
  v11[136] = 0;
  *(_DWORD *)(v11 + 137) = 16843008;
  v11[141] = 0;
  *((void *)v11 + 19) = 0;
  *((void *)v11 + 20) = 0;
  *((void *)v11 + 18) = 0;
  {
    operator new();
  }
  *((void *)v11 + 21) = mdm::Allocator::instance(void)::alloc;
  *((void *)v11 + 22) = 0;
  *(void *)(v11 + 181) = 0;
  v11[192] = 4;
  *(void *)(v11 + 196) = 0;
  v11[204] = 0;
  *(void *)(v11 + 212) = 0xFFFF3F800000;
  *((_WORD *)v11 + 110) = 0;
  *((_DWORD *)v11 + 56) = 1065353216;
  *((void *)v11 + 40) = 0;
  *((_OWORD *)v11 + 15) = 0u;
  *((_OWORD *)v11 + 16) = 0u;
  *((_OWORD *)v11 + 17) = 0u;
  *((void *)v11 + 36) = 0;
  v32[2] = (md::LabelImageKey *)(v11 + 24);
  uint64_t v33 = (std::__shared_weak_count *)v11;
  v11[136] = 4;
  *((float *)v11 + 20) = md::LabelStyle::iconContentScale(a2);
  int v14 = *(unsigned __int8 *)(a3 + 3360);
  uint64_t v15 = *((void *)a2 + 37);
  if (!v15)
  {
    uint64_t v13 = (grl *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>((uint64_t)a2, 0);
    uint64_t v15 = *(void *)v13;
    *((void *)a2 + 37) = *(void *)v13;
  }
  unsigned int v16 = *(unsigned __int8 *)(v15 + 92) - 1;
  if (v16 > 8) {
    int v17 = 0;
  }
  else {
    int v17 = dword_1A29003B0[v16];
  }
  uint64_t v18 = (grl *)grl::SizeGroupMin(v13);
  int v19 = (int)v18;
  int v20 = grl::SizeGroupMax(v18);
  int v21 = v17 + v14;
  if (v17 + v14 >= v20) {
    int v21 = v20;
  }
  if (v21 <= v19) {
    LOBYTE(v21) = v19;
  }
  v11[192] = v21;
  uint64_t v22 = *((void *)a2 + 37);
  if (!v22)
  {
    uint64_t v23 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>((uint64_t)a2, 0);
    uint64_t v22 = *v23;
    *((void *)a2 + 37) = *v23;
  }
  v11[220] = *(unsigned char *)(v22 + 96);
  *(void *)(v11 + 196) = *(void *)(v22 + 56);
  if (a6) {
    *(_OWORD *)(v11 + 24) = *(_OWORD *)(a4 + 112);
  }
  float32x4_t v24 = (void **)(v11 + 40);
  if (v11 + 40 != (char *)a5)
  {
    char v25 = *((unsigned char *)a5 + 23);
    if (v11[63] < 0)
    {
      if (v25 >= 0) {
        uint64_t v26 = a5;
      }
      else {
        uint64_t v26 = *a5;
      }
      if (v25 >= 0) {
        size_t v27 = *((unsigned __int8 *)a5 + 23);
      }
      else {
        size_t v27 = (size_t)a5[1];
      }
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>(v24, v26, v27);
    }
    else if ((*((unsigned char *)a5 + 23) & 0x80) != 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((void **)v24, *a5, (size_t)a5[1]);
    }
    else
    {
      *(_OWORD *)float32x4_t v24 = *(_OWORD *)a5;
      *((void *)v11 + 7) = a5[2];
    }
  }
  uint64_t v28 = *(void *)(a3 + 264);
  v32[0] = (md::LabelImageKey *)(v11 + 24);
  v32[1] = (md::LabelImageKey *)v11;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 1, 1uLL, memory_order_relaxed);
  md::LabelImageLoader::loadImage(a1, v28, v32);
  if (atomic_fetch_add((atomic_ullong *volatile)v11 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v29 = v33;
    if (!v33) {
      return;
    }
  }
  else
  {
    (*(void (**)(char *))(*(void *)v11 + 16))(v11);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v11);
    uint64_t v29 = v33;
    if (!v33) {
      return;
    }
  }
  if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
}

void sub_1A18803BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void md::LabelStyle::prepareAlternateStyles(md::LabelStyle *this)
{
  if (*((unsigned char *)this + 126))
  {
    unint64_t v2 = 0;
    __asm
    {
      FMOV            V0.4S, #1.0
      FMOV            V10.2S, #1.0
    }
    do
    {
      uint64_t v9 = (char *)this + 16 * v2;
      uint64_t v11 = v9 + 32;
      uint64_t v10 = *((void *)v9 + 4);
      if (v10) {
        goto LABEL_7;
      }
      int v21 = *(void **)this;
      uint64_t v68 = 0;
      uint64_t v69 = 0;
      uint64_t v22 = v21[33];
      uint64_t v70 = 0;
      uint64_t v71 = v22;
      uint64_t v23 = v21[30];
      uint64_t v24 = v21[31];
      uint64_t v25 = v24 - v23;
      if (v24 == v23)
      {
        uint64_t v28 = 0;
        unint64_t v31 = 0;
        uint64_t v30 = 0;
        if (v2) {
          unsigned __int16 v32 = 2;
        }
        else {
          unsigned __int16 v32 = 1;
        }
      }
      else
      {
        if (v25 < 0) {
          abort();
        }
        uint64_t v26 = v25 >> 3;
        uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 16))(v22);
        uint64_t v28 = v27;
        uint64_t v29 = 0;
        uint64_t v30 = v27 + 8 * v26;
        uint64_t v68 = v27;
        uint64_t v70 = v30;
        do
        {
          if (v27 + v29) {
            *(void *)(v27 + v29) = *(void *)(v23 + v29);
          }
          v29 += 8;
        }
        while (v23 + v29 != v24);
        unint64_t v31 = (char *)(v27 + v29);
        uint64_t v69 = (void *)(v27 + v29);
        if (v2) {
          unsigned __int16 v32 = 2;
        }
        else {
          unsigned __int16 v32 = 1;
        }
        if (v26 > v29 >> 3)
        {
          if (v27) {
            *(void *)unint64_t v31 = ((unint64_t)v32 << 32) | 0x10057;
          }
          uint64_t v33 = v31 + 8;
          goto LABEL_64;
        }
      }
      uint64_t v39 = (uint64_t)&v31[-v28] >> 3;
      unint64_t v40 = v39 + 1;
      if ((unint64_t)(v39 + 1) >> 61) {
        abort();
      }
      if ((v30 - v28) >> 2 > v40) {
        unint64_t v40 = (v30 - v28) >> 2;
      }
      if ((unint64_t)(v30 - v28) >= 0x7FFFFFFFFFFFFFF8) {
        uint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v41 = v40;
      }
      if (v41)
      {
        __n128 v67 = v9 + 32;
        unsigned __int16 v42 = v32;
        uint64_t v43 = v30;
        uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v22 + 16))(v22, 8 * v41, 4);
        uint64_t v45 = (unint64_t *)(v44 + 8 * v39);
        uint64_t v46 = v44 + 8 * v41;
        if (v44) {
          *uint64_t v45 = ((unint64_t)v42 << 32) | 0x10057;
        }
        uint64_t v30 = v43;
        uint64_t v9 = (char *)this + 16 * v2;
        uint64_t v11 = v67;
        int8x16_t v47 = &v31[-v28];
        if (v31 == (char *)v28)
        {
LABEL_58:
          uint64_t v55 = (uint64_t)v45;
          goto LABEL_62;
        }
      }
      else
      {
        uint64_t v46 = 0;
        uint64_t v45 = (unint64_t *)(8 * v39);
        int8x16_t v47 = &v31[-v28];
        if (v31 == (char *)v28) {
          goto LABEL_58;
        }
      }
      unint64_t v48 = (unint64_t)(v47 - 8);
      if (v48 < 0x38 || (unint64_t)(v31 - (char *)v45) < 0x20)
      {
        float32x4_t v50 = v31;
        uint64_t v55 = (uint64_t)v45;
      }
      else
      {
        uint64_t v49 = (v48 >> 3) + 1;
        float32x4_t v50 = &v31[-8 * (v49 & 0x3FFFFFFFFFFFFFFCLL)];
        uint64_t v51 = v45 - 2;
        uint64_t v52 = v31 - 16;
        uint64_t v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v54 = *(_OWORD *)v52;
          *((_OWORD *)v51 - 1) = *((_OWORD *)v52 - 1);
          *(_OWORD *)uint64_t v51 = v54;
          v51 -= 4;
          v52 -= 32;
          v53 -= 4;
        }
        while (v53);
        uint64_t v55 = (uint64_t)&v45[-(v49 & 0x3FFFFFFFFFFFFFFCLL)];
        if (v49 == (v49 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_62;
        }
      }
      do
      {
        uint64_t v56 = *((void *)v50 - 1);
        v50 -= 8;
        *(void *)(v55 - 8) = v56;
        v55 -= 8;
      }
      while (v50 != (char *)v28);
      uint64_t v28 = v68;
      uint64_t v30 = v70;
LABEL_62:
      uint64_t v33 = v45 + 1;
      uint64_t v68 = v55;
      uint64_t v69 = v45 + 1;
      uint64_t v70 = v46;
      if (v28) {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v71 + 40))(v71, v28, v30 - v28);
      }
LABEL_64:
      uint64_t v69 = v33;
      long long v57 = *(void **)this;
      unsigned int v58 = *(std::__shared_weak_count **)(*(void *)this + 16);
      if (!v58) {
        goto LABEL_84;
      }
      uint64_t v59 = std::__shared_weak_count::lock(v58);
      unsigned int v79 = v59;
      if (!v59) {
        goto LABEL_84;
      }
      uint64_t v60 = v57[1];
      uint64_t v78 = v60;
      if (!v60)
      {
        unsigned int v66 = v59;
        if (!atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v66);
        }
LABEL_84:
        if (v68) {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v71 + 40))(v71, v68, v70 - v68);
        }
        goto LABEL_5;
      }
      gss::FeatureAttributeSet::FeatureAttributeSet((gss::FeatureAttributeSet *)&v73, (uint64_t)&v68);
      gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v77, v60, (gss::FeatureAttributeSet *)&v73, (gss::QueryOverrides *)(*(void *)this + 272));
      long long v61 = v77;
      long long v77 = 0uLL;
      uint64_t v62 = (std::__shared_weak_count *)*((void *)this + 2 * v2 + 5);
      *(_OWORD *)uint64_t v11 = v61;
      if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
      BOOL v63 = (std::__shared_weak_count *)*((void *)&v77 + 1);
      if (*((void *)&v77 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v77 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
      if (v73)
      {
        unsigned int v74 = (std::__shared_weak_count *)v73;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v76 + 40))(v76, v73, v75 - v73);
      }
      uint64_t v64 = *(void *)v11;
      uint64_t v65 = v79;
      if (v79 && !atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
      if (v68) {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v71 + 40))(v71, v68, v70 - v68);
      }
      if (v64)
      {
        uint64_t v10 = *(void *)v11;
LABEL_7:
        uint64_t v12 = (std::__shared_weak_count *)*((void *)v9 + 5);
        uint64_t v73 = v10;
        unsigned int v74 = v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        gss::QueryableLocker<gss::PropertyID>::QueryableLocker(&v68, v10, (uint64_t)v12);
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
          if (v72)
          {
LABEL_12:
            uint64_t v13 = *((void *)this + 2);
            float v14 = *((float *)this + 26);
            float v15 = *((float *)this + 22);
            unsigned int v16 = *((unsigned __int8 *)this + 93);
            *((unsigned char *)this + 16 * v2 + 360) = 1;
            if ((int)v14 >= 0x17) {
              unsigned int v17 = 23;
            }
            else {
              unsigned int v17 = (int)v14;
            }
            uint64_t v18 = *(void *)(v68 + 24);
            unsigned int v19 = *(unsigned __int8 *)(v18 + 12);
            if (v19 == 2)
            {
              LOBYTE(v73) = 1;
              LOBYTE(v78) = 1;
              int v20 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v18, 0x7Bu, v17, 0, &v73);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v18, 0x7Bu, v17, 1u, &v78);
            }
            else
            {
              int v20 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(v68 + 24), 0x7Bu, v17, v19, 0);
            }
            *((unsigned char *)this + 16 * v2 + 361) = v20;
            uint64_t v34 = *(void *)(v68 + 24);
            unsigned int v35 = *(unsigned __int8 *)(v34 + 12);
            if (v35 == 2)
            {
              LOBYTE(v73) = 1;
              LOBYTE(v78) = 1;
              int v36 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v34, 0x17Au, v17, 0, &v73);
              gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v34, 0x17Au, v17, 1u, &v78);
            }
            else
            {
              int v36 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(v68 + 24), 0x17Au, v17, v35, 0);
            }
            uint64_t v37 = (char *)this + 16 * v2;
            v37[362] = v36;
            uint64_t v38 = *((void *)v37 + 46);
            if (!v38) {
              operator new();
            }
            md::LabelIconStyleGroup::update(v38, (uint64_t)&v68, v13, v16, v14, v15);
          }
        }
        else if (v72)
        {
          goto LABEL_12;
        }
        gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v68);
      }
LABEL_5:
      ++v2;
    }
    while (v2 < *((unsigned __int8 *)this + 126));
  }
  *((unsigned char *)this + 457) = 1;
}

void sub_1A1880BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  if (a10) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a13 + 40))(a13, a10, a12 - a10);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  if (a5)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a8 + 40))(a8, a5, a7 - a5);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

NSObject *___ZN3geo9TaskQueue14queueAsyncTaskENSt3__110shared_ptrINS_4TaskEEEPU28objcproto17OS_dispatch_group8NSObject_block_invoke(uint64_t a1)
{
  unint64_t v2 = *(NSObject **)(a1 + 32);
  if (v2 && !*(unsigned char *)(a1 + 64)) {
    dispatch_semaphore_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
  }
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 48) + 32));
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 24);
    if (!v4)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      return md::RenderLayer::unlock(v7, v8, v9);
    }
    (*(void (**)(uint64_t))(*(void *)v4 + 48))(v4);
    atomic_store(1u, (unsigned __int8 *)(*(void *)(a1 + 48) + 33));
  }
  int v5 = *(NSObject **)(a1 + 40);
  if (v5 && *(unsigned char *)(a1 + 64)) {
    dispatch_group_leave(v5);
  }
  double result = *(NSObject **)(a1 + 32);
  if (result)
  {
    return dispatch_semaphore_signal(result);
  }
  return result;
}

void md::RenderLayer::unlock(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 32))(__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void *md::RenderLayer::activeCommandBuffers@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = (unsigned char *)result[1];
  unsigned __int8 v3 = (unsigned char *)result[2];
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      abort();
    }
    uint64_t v6 = (char *)operator new(v3 - v4);
    *a2 = v6;
    uint64_t v7 = &v6[2 * (v5 >> 1)];
    a2[2] = v7;
    double result = memcpy(v6, v4, v5);
    a2[1] = v7;
  }
  return result;
}

void std::__function::__func<md::CartographicRenderLayer::frame(md::LayoutContext const&)::$_0,std::allocator<md::CartographicRenderLayer::frame(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(void *a1)
{
  unint64_t v2 = (unsigned char *)a1[1];
  md::RenderLayer::clearCommandBuffers((uint64_t)v2, a1[3]);
  if (v2[32])
  {
    unsigned __int8 v3 = *(void **)(a1[2] + 8);
    unint64_t v4 = v3[1];
    if ((v4 & (v4 - 1)) != 0)
    {
      unint64_t v6 = 0xE42D19AFCA302E68;
      if (v4 <= 0xE42D19AFCA302E68) {
        unint64_t v6 = 0xE42D19AFCA302E68 % v4;
      }
      int64_t v5 = *(void **)(*v3 + 8 * v6);
      do
      {
        do
          int64_t v5 = (void *)*v5;
        while (v5[1] != 0xE42D19AFCA302E68);
      }
      while (v5[2] != 0xE42D19AFCA302E68);
    }
    else
    {
      int64_t v5 = *(void **)(*v3 + 8 * ((v4 - 1) & 0xE42D19AFCA302E68));
      do
      {
        do
          int64_t v5 = (void *)*v5;
        while (v5[1] != 0xE42D19AFCA302E68);
      }
      while (v5[2] != 0xE42D19AFCA302E68);
    }
    uint64_t v7 = *(void *)(v5[5] + 32);
    if (*(void *)v7 && *(unsigned char *)(v7 + 82)) {
      (*(void (**)(unsigned char *))(*(void *)v2 + 16))(v2);
    }
    else {
      (*(void (**)(unsigned char *))(*(void *)v2 + 80))(v2);
    }
  }
  md::RenderLayer::unlock((uint64_t)v2);
}

void md::RenderLayer::clearCommandBuffers(uint64_t a1, uint64_t a2)
{
  (*(void (**)(unsigned __int8 **__return_ptr))(*(void *)a1 + 32))(&v29);
  unsigned __int8 v3 = v29;
  unint64_t v4 = v30;
  if (v29 == v30)
  {
    if (!v29) {
      return;
    }
    goto LABEL_3;
  }
  do
  {
    int64_t v5 = *(void **)(a2 + 8);
    uint64_t v6 = v5[3];
    uint64_t v7 = v5[4];
    uint64_t v8 = v7 - v6;
    if (v7 != v6)
    {
      uint64_t v9 = 0;
      unint64_t v10 = v8 >> 3;
      while (1)
      {
        uint64_t v11 = *(unsigned __int8 **)(v6 + 8 * v9);
        if (*v11 == *v3)
        {
          unint64_t v12 = *((void *)v11 + 1);
          uint64_t v13 = v5[15];
          if (v12 < (v5[16] - v13) >> 3) {
            break;
          }
        }
        if (++v9 >= v10) {
          goto LABEL_6;
        }
      }
      uint64_t v14 = *(void *)(v13 + 8 * v12);
      if (v14)
      {
        float v15 = *(void **)(*(void *)(v14 + 24) + 8 * v3[1]);
        char v15[4] = 0;
        uint64_t v16 = v15[9];
        if (v15[10] != v16) {
          v15[10] = v16;
        }
        v15[14] = v15[13];
        v15[6] = v15[5];
        uint64_t v18 = (void *)v15[25];
        unsigned int v17 = (void *)v15[26];
        if (v17 != v18)
        {
          unsigned int v19 = v17 - 4;
          int v20 = v17 - 4;
          do
          {
            uint64_t v22 = (void *)v20[3];
            if (v20 == v22)
            {
              (*(void (**)(void *))(*v20 + 32))(v20);
              if (!*((unsigned char *)v20 - 28)) {
                goto LABEL_23;
              }
            }
            else
            {
              if (v22) {
                (*(void (**)(void *))(*v22 + 40))(v22);
              }
              if (!*((unsigned char *)v20 - 28)) {
                goto LABEL_23;
              }
            }
            *((unsigned char *)v20 - 28) = 0;
LABEL_23:
            if (*((unsigned char *)v20 - 32)) {
              *((unsigned char *)v20 - 32) = 0;
            }
            int v21 = v20 - 6;
            v20 -= 10;
            v19 -= 10;
          }
          while (v21 != v18);
        }
        v15[26] = v18;
        uint64_t v24 = (void *)v15[29];
        uint64_t v23 = (void *)v15[30];
        if (v23 != v24)
        {
          uint64_t v25 = v23 - 4;
          uint64_t v26 = v23 - 4;
          do
          {
            uint64_t v28 = (void *)v26[3];
            if (v26 == v28)
            {
              (*(void (**)(void *))(*v26 + 32))(v26);
            }
            else if (v28)
            {
              (*(void (**)(void *))(*v28 + 40))(v28);
            }
            uint64_t v27 = v26 - 4;
            v26 -= 8;
            v25 -= 8;
          }
          while (v27 != v24);
        }
        v15[30] = v24;
      }
    }
LABEL_6:
    v3 += 2;
  }
  while (v3 != v4);
  unsigned __int8 v3 = v29;
  if (!v29) {
    return;
  }
LABEL_3:
  uint64_t v30 = v3;
  operator delete(v3);
}

_WORD *std::__function::__func<md::ClearRenderLayer::constSelector(md::CommandBufferLocation const&)::{lambda(md::LayoutContext const&)#1},std::allocator<md::ClearRenderLayer::constSelector(md::CommandBufferLocation const&)::{lambda(md::LayoutContext const&)#1}>,std::vector<md::CommandBufferLocation> ()(md::LayoutContext const&)>::operator()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __int16 v3 = *(_WORD *)(a1 + 8);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  unint64_t v4 = operator new(2uLL);
  *a2 = v4;
  *unint64_t v4 = v3;
  double result = v4 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

uint64_t md::ClearRenderLayer::activeCommandBuffers(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 104);
  if (v1)
  {
    unint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
    return v2();
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    return md::ClearRenderLayer::layout(v4, v5);
  }
}

void md::ClearRenderLayer::layout(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 112))
  {
    if (*(unsigned char *)(a1 + 56))
    {
      uint64_t v7 = *(_DWORD **)(a1 + 48);
      v7[1] = *(_DWORD *)(a1 + 60);
      v7[2] = *(_DWORD *)(a1 + 64);
      void v7[3] = *(_DWORD *)(a1 + 68);
      int v8 = *(_DWORD *)(a1 + 72);
LABEL_70:
      v7[4] = v8;
      (*(void (**)(unsigned __int8 **__return_ptr, uint64_t))(*(void *)a1 + 32))(&v58, a1);
      uint64_t v26 = v58;
      uint64_t v44 = v59;
      if (v58 == v59) {
        goto LABEL_81;
      }
      uint64_t v45 = *(void *)(a1 + 40);
      uint64_t v46 = v58;
      while (1)
      {
        int8x16_t v47 = *(void **)(*(void *)(v45 + 24) + 8);
        uint64_t v48 = v47[3];
        uint64_t v49 = v47[4];
        uint64_t v50 = v49 - v48;
        if (v49 != v48)
        {
          uint64_t v51 = 0;
          unint64_t v52 = v50 >> 3;
          while (1)
          {
            uint64_t v53 = *(unsigned __int8 **)(v48 + 8 * v51);
            if (*v53 == *v46)
            {
              unint64_t v54 = *((void *)v53 + 1);
              uint64_t v55 = v47[15];
              if (v54 < (v47[16] - v55) >> 3) {
                break;
              }
            }
            if (++v51 >= v52) {
              goto LABEL_72;
            }
          }
          uint64_t v56 = *(void *)(v55 + 8 * v54);
          if (v56)
          {
            uint64_t v57 = *(void *)(*(void *)(v56 + 24) + 8 * v46[1]);
            if (v57) {
              *(void *)(v57 + 32) = *(void *)(a1 + 48);
            }
          }
        }
LABEL_72:
        v46 += 2;
        if (v46 == v44) {
          goto LABEL_81;
        }
      }
    }
    uint64_t v14 = *(void **)(a2 + 8);
    int8x8_t v15 = (int8x8_t)v14[1];
    if (v15)
    {
      uint8x8_t v16 = (uint8x8_t)vcnt_s8(v15);
      v16.i16[0] = vaddlv_u8(v16);
      if (v16.u32[0] > 1uLL)
      {
        uint64_t v17 = 0x336A901A15BB7353;
        if (*(void *)&v15 <= 0x336A901A15BB7353uLL) {
          uint64_t v17 = 0x336A901A15BB7353uLL % *(void *)&v15;
        }
      }
      else
      {
        uint64_t v17 = (*(void *)&v15 - 1) & 0x336A901A15BB7353;
      }
      uint64_t v18 = *(void **)(*v14 + 8 * v17);
      if (v18)
      {
        unsigned int v19 = (void *)*v18;
        if (v19)
        {
          if (v16.u32[0] < 2uLL)
          {
            uint64_t v20 = *(void *)&v15 - 1;
            while (1)
            {
              uint64_t v22 = v19[1];
              if (v22 == 0x336A901A15BB7353)
              {
                if (v19[2] == 0x336A901A15BB7353) {
                  goto LABEL_65;
                }
              }
              else if ((v22 & v20) != v17)
              {
                goto LABEL_68;
              }
              unsigned int v19 = (void *)*v19;
              if (!v19) {
                goto LABEL_68;
              }
            }
          }
          do
          {
            unint64_t v21 = v19[1];
            if (v21 == 0x336A901A15BB7353)
            {
              if (v19[2] == 0x336A901A15BB7353)
              {
LABEL_65:
                uint64_t v41 = v19[5];
                if (*(void *)(v41 + 8) == 0x336A901A15BB7353)
                {
                  unsigned __int16 v42 = *(_DWORD **)(v41 + 32);
                  if (v42)
                  {
                    uint64_t v7 = *(_DWORD **)(a1 + 48);
                    v7[1] = *v42;
                    v7[2] = v42[1];
                    void v7[3] = v42[2];
                    int v8 = v42[3];
                    goto LABEL_70;
                  }
                }
                break;
              }
            }
            else
            {
              if (v21 >= *(void *)&v15) {
                v21 %= *(void *)&v15;
              }
              if (v21 != v17) {
                break;
              }
            }
            unsigned int v19 = (void *)*v19;
          }
          while (v19);
        }
      }
    }
LABEL_68:
    {
      md::GridLogic::_defaultDrivingBackgroundColor(void)::_defaultDrivingBackgroundLinearColor = xmmword_1A28FF7E0;
    }
    int v8 = HIDWORD(md::GridLogic::_defaultDrivingBackgroundColor(void)::_defaultDrivingBackgroundLinearColor);
    int v43 = DWORD2(md::GridLogic::_defaultDrivingBackgroundColor(void)::_defaultDrivingBackgroundLinearColor);
    uint64_t v7 = *(_DWORD **)(a1 + 48);
    *(void *)(v7 + 1) = md::GridLogic::_defaultDrivingBackgroundColor(void)::_defaultDrivingBackgroundLinearColor;
    void v7[3] = v43;
    goto LABEL_70;
  }
  __int16 v3 = *(void **)(a2 + 8);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_48;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x8BD499FBD96FBB9ELL;
    if (*(void *)&v4 <= 0x8BD499FBD96FBB9ELL) {
      unint64_t v6 = 0x8BD499FBD96FBB9ELL % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  uint64_t v9 = *(void **)(*v3 + 8 * v6);
  if (!v9) {
    goto LABEL_48;
  }
  unint64_t v10 = (void *)*v9;
  if (!v10) {
    goto LABEL_48;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v11 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v13 = v10[1];
      if (v13 == 0x8BD499FBD96FBB9ELL)
      {
        if (v10[2] == 0x8BD499FBD96FBB9ELL) {
          goto LABEL_46;
        }
      }
      else if ((v13 & v11) != v6)
      {
        goto LABEL_48;
      }
      unint64_t v10 = (void *)*v10;
      if (!v10) {
        goto LABEL_48;
      }
    }
  }
  while (1)
  {
    unint64_t v12 = v10[1];
    if (v12 == 0x8BD499FBD96FBB9ELL) {
      break;
    }
    if (v12 >= *(void *)&v4) {
      v12 %= *(void *)&v4;
    }
    if (v12 != v6) {
      goto LABEL_48;
    }
LABEL_14:
    unint64_t v10 = (void *)*v10;
    if (!v10) {
      goto LABEL_48;
    }
  }
  if (v10[2] != 0x8BD499FBD96FBB9ELL) {
    goto LABEL_14;
  }
LABEL_46:
  uint64_t v23 = v10[5];
  if (*(void *)(v23 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    uint64_t v24 = *(void *)(v23 + 32);
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v24 = 0;
LABEL_49:
  BOOL v25 = *(float *)(v24 + 16) <= 0.01 && *(unsigned char *)v24 && *(unsigned char *)(v24 + 3);
  *(unsigned char *)(*(void *)(a1 + 48) + 20) = v25;
  (*(void (**)(unsigned __int8 **__return_ptr, uint64_t))(*(void *)a1 + 32))(&v58, a1);
  uint64_t v26 = v58;
  uint64_t v27 = v59;
  if (v58 != v59)
  {
    uint64_t v28 = *(void *)(a1 + 40);
    uint64_t v29 = v58;
    do
    {
      uint64_t v30 = *(void **)(*(void *)(v28 + 24) + 8);
      uint64_t v31 = v30[3];
      uint64_t v32 = v30[4];
      uint64_t v33 = v32 - v31;
      if (v32 != v31)
      {
        uint64_t v34 = 0;
        unint64_t v35 = v33 >> 3;
        while (1)
        {
          int v36 = *(unsigned __int8 **)(v31 + 8 * v34);
          if (*v36 == *v29)
          {
            unint64_t v37 = *((void *)v36 + 1);
            uint64_t v38 = v30[15];
            if (v37 < (v30[16] - v38) >> 3) {
              break;
            }
          }
          if (++v34 >= v35) {
            goto LABEL_56;
          }
        }
        uint64_t v39 = *(void *)(v38 + 8 * v37);
        if (v39)
        {
          uint64_t v40 = *(void *)(*(void *)(v39 + 24) + 8 * v29[1]);
          if (v40) {
            *(void *)(v40 + 32) = *(void *)(a1 + 48);
          }
        }
      }
LABEL_56:
      v29 += 2;
    }
    while (v29 != v27);
  }
LABEL_81:
  if (v26)
  {
    uint64_t v59 = v26;
    operator delete(v26);
  }
}

void md::ClientDrapedPolygonRenderLayer::layout(void (****this)(uint64_t), const md::LayoutContext *a2)
{
  int8x8_t v4 = (void *)*((void *)a2 + 1);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_30;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = 0xC97B9E962ADF4AD4;
    if (*(void *)&v5 <= 0xC97B9E962ADF4AD4) {
      unint64_t v7 = 0xC97B9E962ADF4AD4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & 0xC97B9E962ADF4AD4;
  }
  int v8 = *(void **)(*v4 + 8 * v7);
  if (!v8 || (uint64_t v9 = (void *)*v8) == 0)
  {
LABEL_30:
    md::ElevatedPolygonRenderResources::resetPools(this[60]);
    uint64_t v17 = this[60];
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v17[99]);
    v17[98] = (void (**)(uint64_t))(v17 + 99);
    v17[100] = 0;
    v17[99] = 0;
    uint64_t v18 = (void *)*((void *)a2 + 1);
    int8x8_t v19 = (int8x8_t)v18[1];
    if (!*(void *)&v19) {
      goto LABEL_53;
    }
    uint8x8_t v20 = (uint8x8_t)vcnt_s8(v19);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] > 1uLL)
    {
      uint64_t v21 = 0x1B9039CBDAB12E5CLL;
      if (*(void *)&v19 <= 0x1B9039CBDAB12E5CuLL) {
        uint64_t v21 = 0x1B9039CBDAB12E5CuLL % *(void *)&v19;
      }
    }
    else
    {
      uint64_t v21 = (*(void *)&v19 - 1) & 0x1B9039CBDAB12E5CLL;
    }
    uint64_t v22 = *(void **)(*v18 + 8 * v21);
    if (!v22) {
      goto LABEL_53;
    }
    uint64_t v23 = (void *)*v22;
    if (!v23) {
      goto LABEL_53;
    }
    if (v20.u32[0] < 2uLL)
    {
      uint64_t v24 = *(void *)&v19 - 1;
      while (1)
      {
        uint64_t v26 = v23[1];
        if (v26 == 0x1B9039CBDAB12E5CLL)
        {
          if (v23[2] == 0x1B9039CBDAB12E5CLL) {
            goto LABEL_51;
          }
        }
        else if ((v26 & v24) != v21)
        {
          goto LABEL_53;
        }
        uint64_t v23 = (void *)*v23;
        if (!v23) {
          goto LABEL_53;
        }
      }
    }
    while (1)
    {
      unint64_t v25 = v23[1];
      if (v25 == 0x1B9039CBDAB12E5CLL)
      {
        if (v23[2] == 0x1B9039CBDAB12E5CLL)
        {
LABEL_51:
          uint64_t v27 = v23[5];
          if (*(void *)(v27 + 8) == 0x1B9039CBDAB12E5CLL)
          {
            uint64_t v28 = *(void *)(v27 + 32);
LABEL_54:
            uint64_t v29 = this[34];
            uint64_t v30 = this[35];
            while (v29 != v30)
            {
              uint64_t v31 = *v29;
              if (*((unsigned char *)*v29 + 456))
              {
                md::ClientDrapedPolygonRenderLayer::_layoutDrapedTileOverlay((uint64_t)this, a2, (uint64_t *)v28, *v29, 0);
                if (*(unsigned char *)(v28 + 8)) {
                  md::ClientDrapedPolygonRenderLayer::_layoutDrapedTileOverlay((uint64_t)this, a2, (uint64_t *)v28, v31, 1);
                }
              }
              ++v29;
            }
            return;
          }
LABEL_53:
          uint64_t v28 = 0;
          goto LABEL_54;
        }
      }
      else
      {
        if (v25 >= *(void *)&v19) {
          v25 %= *(void *)&v19;
        }
        if (v25 != v21) {
          goto LABEL_53;
        }
      }
      uint64_t v23 = (void *)*v23;
      if (!v23) {
        goto LABEL_53;
      }
    }
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0xC97B9E962ADF4AD4)
      {
        if (v9[2] == 0xC97B9E962ADF4AD4) {
          goto LABEL_22;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_30;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_30;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0xC97B9E962ADF4AD4) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_30;
    }
LABEL_11:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_30;
    }
  }
  if (v9[2] != 0xC97B9E962ADF4AD4) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) != 0xC97B9E962ADF4AD4) {
    goto LABEL_30;
  }
  uint64_t v14 = *(uint64_t **)(v13 + 32);
  if (!v14) {
    goto LABEL_30;
  }
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  if (v15 != v16)
  {
    while (*(unsigned char *)v15 != 11)
    {
      v15 += 16;
      if (v15 == v16) {
        return;
      }
    }
  }
  if (v15 != v16 && *(void *)(v15 + 8)) {
    goto LABEL_30;
  }
}

void md::ClientDrapedPolygonRenderLayer::_layoutDrapedTileOverlay(uint64_t a1, const md::LayoutContext *a2, uint64_t *a3, void *a4, int a5)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a4[50];
  int v9 = *(unsigned __int8 *)(v8 + 169);
  uint64_t v10 = *(void *)(v8 + 172);
  unsigned __int8 v11 = *(unsigned char *)(v8 + 168);
  uint64_t v12 = a4[48];
  uint64_t v13 = *(unsigned __int8 *)(v12 + 169);
  uint64_t v14 = *(void *)(v12 + 172);
  uint64_t v15 = *(unsigned __int8 *)(v12 + 168);
  uint64_t v16 = *(unsigned __int16 *)(v12 + 24);
  uint64_t v17 = *(unsigned int *)(v12 + 8);
  if (a5)
  {
    uint64_t v18 = *a3;
    int v19 = *((unsigned __int8 *)a3 + 8);
  }
  else
  {
    int v19 = 0;
    uint64_t v18 = 0;
  }
  int v20 = *(_DWORD *)(v8 + 8);
  char v72 = *(unsigned char *)(v12 + 168);
  char v73 = v13;
  uint64_t v74 = v14;
  __int16 v75 = v16;
  int v76 = v17;
  uint64_t v77 = v18;
  char v78 = v19;
  v79[0] = v11;
  v79[1] = v9;
  uint64_t v80 = v10;
  int v81 = v20;
  uint64_t v66 = v14;
  uint64_t v21 = std::__hash_table<std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>,std::__unordered_map_hasher<md::FoundationKey,std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>,md::FoundationKeyHash,std::equal_to<md::FoundationKey>,true>,std::__unordered_map_equal<md::FoundationKey,std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>,std::equal_to<md::FoundationKey>,md::FoundationKeyHash,true>,std::allocator<std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>>>::find<md::FoundationKey>((void *)a3[2], v79);
  if (v21)
  {
    unint64_t v22 = (v13
         + ((v15 - 0x61C8864680B583EBLL) << 6)
         + ((unint64_t)(v15 - 0x61C8864680B583EBLL) >> 2)
         - 0x61C8864680B583EBLL) ^ (v15 - 0x61C8864680B583EBLL);
    unint64_t v23 = ((v22 << 6) + (int)v66 + (v22 >> 2) - 0x61C8864680B583EBLL) ^ v22;
    unint64_t v24 = ((v23 << 6) + SHIDWORD(v66) + (v23 >> 2) - 0x61C8864680B583EBLL) ^ v23;
    unint64_t v25 = (v16 + (v24 << 6) + (v24 >> 2) - 0x61C8864680B583EBLL) ^ v24;
    unint64_t v26 = (v17 + (v25 << 6) + (v25 >> 2) - 0x61C8864680B583EBLL) ^ v25;
    unint64_t v27 = ((v26 << 6) - 0x61C8864680B583EBLL + (v26 >> 2) + v18) ^ v26;
    if (!v19) {
      unint64_t v27 = v26;
    }
    int8x8_t v28 = (int8x8_t)v21[7];
    if (v28)
    {
      uint8x8_t v29 = (uint8x8_t)vcnt_s8(v28);
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.u32[0] > 1uLL)
      {
        unint64_t v30 = v27;
        if (v27 >= *(void *)&v28) {
          unint64_t v30 = v27 % *(void *)&v28;
        }
      }
      else
      {
        unint64_t v30 = (*(void *)&v28 - 1) & v27;
      }
      uint64_t v31 = *(uint64_t ***)(v21[6] + 8 * v30);
      if (v31)
      {
        uint64_t v32 = *v31;
        if (v32)
        {
          if (v29.u32[0] <= 1uLL)
          {
            uint64_t v33 = *(void *)&v28 - 1;
            if (!v19)
            {
              while (1)
              {
                uint64_t v35 = v32[1];
                if (v27 == v35)
                {
                  if (*((unsigned __int8 *)v32 + 16) == v15
                    && *((unsigned __int8 *)v32 + 17) == v13
                    && *(uint64_t *)((char *)v32 + 20) == v66
                    && *((unsigned __int16 *)v32 + 20) == v16
                    && *((_DWORD *)v32 + 11) == v17
                    && !*((unsigned char *)v32 + 56))
                  {
                    goto LABEL_37;
                  }
                }
                else if ((v35 & v33) != v30)
                {
                  return;
                }
                uint64_t v32 = (uint64_t *)*v32;
                if (!v32) {
                  return;
                }
              }
            }
            while (1)
            {
              uint64_t v34 = v32[1];
              if (v27 == v34)
              {
                if (*((unsigned __int8 *)v32 + 16) == v15
                  && *((unsigned __int8 *)v32 + 17) == v13
                  && *(uint64_t *)((char *)v32 + 20) == v66
                  && *((unsigned __int16 *)v32 + 20) == v16
                  && *((_DWORD *)v32 + 11) == v17
                  && *((unsigned char *)v32 + 56)
                  && v32[6] == v18)
                {
                  goto LABEL_37;
                }
              }
              else if ((v34 & v33) != v30)
              {
                return;
              }
              uint64_t v32 = (uint64_t *)*v32;
              if (!v32) {
                return;
              }
            }
          }
          if (!v19)
          {
            while (1)
            {
              unint64_t v48 = v32[1];
              if (v27 == v48)
              {
                if (*((unsigned __int8 *)v32 + 16) == v15
                  && *((unsigned __int8 *)v32 + 17) == v13
                  && *(uint64_t *)((char *)v32 + 20) == v66
                  && *((unsigned __int16 *)v32 + 20) == v16
                  && *((_DWORD *)v32 + 11) == v17
                  && !*((unsigned char *)v32 + 56))
                {
                  goto LABEL_37;
                }
              }
              else
              {
                if (v48 >= *(void *)&v28) {
                  v48 %= *(void *)&v28;
                }
                if (v48 != v30) {
                  return;
                }
              }
              uint64_t v32 = (uint64_t *)*v32;
              if (!v32) {
                return;
              }
            }
          }
          do
          {
            unint64_t v47 = v32[1];
            if (v27 == v47)
            {
              if (*((unsigned __int8 *)v32 + 16) == v15
                && *((unsigned __int8 *)v32 + 17) == v13
                && *(uint64_t *)((char *)v32 + 20) == v66
                && *((unsigned __int16 *)v32 + 20) == v16
                && *((_DWORD *)v32 + 11) == v17
                && *((unsigned char *)v32 + 56)
                && v32[6] == v18)
              {
LABEL_37:
                int v36 = atomic_load((unsigned __int8 *)v32[8]);
                if (v36 == 2)
                {
                  uint64_t v37 = v32[8];
                  uint64_t v38 = (uint64_t)a2;
                  md::ElevatedPolygonContext::ElevatedPolygonContext((md::ElevatedPolygonContext *)v70, a2, *(unsigned char *)(a1 + 496), *(const md::StandardPassList **)(*(void *)(a1 + 40) + 24), *(float *)v29.i32);
                  uint64_t v39 = a4[50];
                  unsigned int v40 = *(unsigned __int8 *)(v39 + 169);
                  unsigned int v41 = *(unsigned __int8 *)(a4[1] + 169);
                  if (v40 <= v41) {
                    int v42 = *(unsigned __int8 *)(a4[1] + 169);
                  }
                  else {
                    int v42 = *(unsigned __int8 *)(v39 + 169);
                  }
                  if (v9 == v42)
                  {
                    float v43 = -1.0;
                    float v44 = 0.0;
                    float v45 = 1.0;
                    float v46 = 1.0;
                  }
                  else
                  {
                    if (v40 < v41) {
                      uint64_t v39 = a4[1];
                    }
                    int v49 = 1 << (v42 - v9);
                    float v46 = (float)v49--;
                    float v44 = -(float)(*(_DWORD *)(v39 + 176) & v49);
                    float v45 = v46 - (float)(*(_DWORD *)(v39 + 172) & v49);
                    float v43 = -v46;
                  }
                  *(float *)uint64_t v69 = v46;
                  *(float *)&v69[1] = v43;
                  *(float *)&v69[2] = v44;
                  *(float *)&v69[3] = v45;
                  if (*(_DWORD *)(v37 + 56))
                  {
                    unint64_t v50 = 0;
                    do
                    {
                      unsigned int v51 = *(_DWORD *)(*(void *)(v37 + 88) + 4 * v50);
                      uint64_t v52 = *(void *)(a4[48] + 752);
                      if (a5)
                      {
                        md::ElevatedStrokeGroup::selectedStyleQuery(&v67, (uint64_t *)(v52 + 160 * v51));
                      }
                      else
                      {
                        uint64_t v53 = v52 + 160 * v51;
                        __n128 v67 = *(uint64_t **)(v53 + 104);
                        unint64_t v54 = *(std::__shared_weak_count **)(v53 + 112);
                        uint64_t v68 = v54;
                        if (v54) {
                          atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                      }
                      if (*(_DWORD *)(v37 + 60))
                      {
                        unint64_t v55 = 0;
                        do
                        {
                          unsigned int v56 = v50 + *(_DWORD *)(v37 + 56) * v55;
                          uint64_t v57 = *(void *)(v37 + 112);
                          uint64_t v58 = v57 + 80 * v56;
                          LOBYTE(v84[0]) = 0;
                          char v85 = 0;
                          if (*(unsigned char *)(v58 + 24))
                          {
                            v84[0] = *(void *)v58;
                            uint64_t v59 = *(void *)(v58 + 8);
                            v84[1] = v59;
                            if (v59) {
                              atomic_fetch_add_explicit((atomic_ullong *volatile)(v59 + 8), 1uLL, memory_order_relaxed);
                            }
                            v84[2] = *(void *)(v58 + 16);
                            char v85 = 1;
                          }
                          LOBYTE(v86) = 0;
                          char v89 = 0;
                          if (*(unsigned char *)(v58 + 56))
                          {
                            uint64_t v86 = *(void *)(v58 + 32);
                            uint64_t v60 = *(void *)(v58 + 40);
                            uint64_t v87 = v60;
                            if (v60) {
                              atomic_fetch_add_explicit((atomic_ullong *volatile)(v60 + 8), 1uLL, memory_order_relaxed);
                            }
                            uint64_t v88 = *(void *)(v58 + 48);
                            char v89 = 1;
                          }
                          uint64_t v61 = v57 + 80 * v56;
                          uint64_t v90 = *(void *)(v61 + 64);
                          uint64_t v62 = *(void *)(v61 + 72);
                          uint64_t v91 = v62;
                          if (v62) {
                            atomic_fetch_add_explicit((atomic_ullong *volatile)(v62 + 8), 1uLL, memory_order_relaxed);
                          }
                          int v92 = 1;
                          float v63 = 0.001;
                          if ((*(void *)(*(void *)(v37 + 64) + ((v55 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v55)) {
                            float v63 = 0.0;
                          }
                          float v71 = v63;
                          md::layoutElevatedPolygonMeshes<md::ElevatedPolygonRenderable>(v38, (uint64_t)a4, v70, a1 + 456, *(uint64_t **)(a1 + 480), (uint64_t)v83, (uint64_t *)&v67, v69);
                          if (v92 != -1) {
                            ((void (*)(char *, void *))off_1EF591010[v92])(&v82, v84);
                          }
                          ++v55;
                        }
                        while (v55 < *(unsigned int *)(v37 + 60));
                      }
                      uint64_t v64 = v68;
                      if (v68)
                      {
                        if (!atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                          std::__shared_weak_count::__release_weak(v64);
                        }
                      }
                      ++v50;
                      uint64_t v38 = (uint64_t)a2;
                    }
                    while (v50 < *(unsigned int *)(v37 + 56));
                  }
                }
                return;
              }
            }
            else
            {
              if (v47 >= *(void *)&v28) {
                v47 %= *(void *)&v28;
              }
              if (v47 != v30) {
                return;
              }
            }
            uint64_t v32 = (uint64_t *)*v32;
          }
          while (v32);
        }
      }
    }
  }
}

void sub_1A18820E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47)
{
  if (a47 != -1) {
    ((void (*)(char *, uint64_t))off_1EF591010[a47])(&a35, a11);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>,std::__unordered_map_hasher<md::FoundationKey,std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>,md::FoundationKeyHash,std::equal_to<md::FoundationKey>,true>,std::__unordered_map_equal<md::FoundationKey,std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>,std::equal_to<md::FoundationKey>,md::FoundationKeyHash,true>,std::allocator<std::__hash_value_type<md::FoundationKey,md::DrapingTaskEntry>>>::find<md::FoundationKey>(void *a1, unsigned __int8 *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = (v4
      + ((v3 - 0x61C8864680B583EBLL) << 6)
      + ((unint64_t)(v3 - 0x61C8864680B583EBLL) >> 2)
      - 0x61C8864680B583EBLL) ^ (v3 - 0x61C8864680B583EBLL);
  uint64_t v6 = *((int *)a2 + 1);
  uint64_t v7 = *((int *)a2 + 2);
  unint64_t v8 = (v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583EBLL) ^ v5;
  unint64_t v9 = (v7 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  uint64_t v10 = *((unsigned int *)a2 + 6);
  unint64_t v11 = (v10 + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583EBLL) ^ v9;
  uint8x8_t v12 = (uint8x8_t)vcnt_s8(v2);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    uint64_t v13 = (v10 + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583EBLL) ^ v9;
    if (v11 >= *(void *)&v2) {
      uint64_t v13 = v11 % *(void *)&v2;
    }
  }
  else
  {
    uint64_t v13 = v11 & (*(void *)&v2 - 1);
  }
  uint64_t v14 = *(uint64_t ***)(*a1 + 8 * v13);
  if (!v14) {
    return 0;
  }
  double result = *v14;
  if (*v14)
  {
    if (v12.u32[0] < 2uLL)
    {
      uint64_t v16 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v18 = result[1];
        if (v18 == v11)
        {
          if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
            && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6)
            && *((_DWORD *)result + 10) == v10)
          {
            return result;
          }
        }
        else if ((v18 & v16) != v13)
        {
          return 0;
        }
        double result = (uint64_t *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v17 = result[1];
      if (v17 == v11)
      {
        if (__PAIR64__(*((unsigned __int8 *)result + 17), *((unsigned __int8 *)result + 16)) == __PAIR64__(v4, v3)
          && *(uint64_t *)((char *)result + 20) == __PAIR64__(v7, v6)
          && *((_DWORD *)result + 10) == v10)
        {
          return result;
        }
      }
      else
      {
        if (v17 >= *(void *)&v2) {
          v17 %= *(void *)&v2;
        }
        if (v17 != v13) {
          return 0;
        }
      }
      double result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

void (***md::ElevatedPolygonRenderResources::resetPools(void (***this)(uint64_t)))(uint64_t)
{
  uint64_t v1 = this;
  int8x8_t v2 = *this;
  uint64_t v3 = (*this)[4];
  uint64_t v4 = (*this)[5];
  if (v3 == v4) {
    goto LABEL_33;
  }
  unint64_t v5 = (char *)v2[1];
  do
  {
    uint64_t v6 = *(void (***)(uint64_t))v3;
    unint64_t v7 = (unint64_t)v2[2];
    if ((unint64_t)v5 < v7)
    {
      if (v5) {
        *(void *)unint64_t v5 = v6;
      }
      v5 += 8;
      goto LABEL_4;
    }
    uint64_t v8 = (v5 - (char *)*v2) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
LABEL_138:
    }
      abort();
    uint64_t v9 = v7 - (void)*v2;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v11 = v10;
    }
    if (v11)
    {
      uint64_t v12 = v11;
      this = (void (***)(uint64_t))(*(uint64_t (**)(void (*)(uint64_t), uint64_t, uint64_t))(*(void *)v2[3] + 16))(v2[3], 8 * v11, 8);
      uint64_t v13 = &this[v8];
      uint64_t v11 = (uint64_t)&this[v12];
      if (this) {
        *uint64_t v13 = v6;
      }
    }
    else
    {
      uint64_t v13 = (void (***)(uint64_t))(8 * v8);
    }
    uint64_t v15 = *v2;
    uint64_t v14 = v2[1];
    uint64_t v16 = (char *)v14 - (char *)*v2;
    if (v14 == *v2)
    {
      uint64_t v18 = v13;
      goto LABEL_29;
    }
    unint64_t v17 = v16 - 8;
    if ((unint64_t)(v16 - 8) < 0x38)
    {
      uint64_t v18 = v13;
    }
    else
    {
      uint64_t v18 = v13;
      if ((unint64_t)((char *)v14 - (char *)v13) >= 0x20)
      {
        uint64_t v19 = (v17 >> 3) + 1;
        int v20 = v13 - 2;
        uint64_t v21 = (long long *)((char *)v14 - 16);
        uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v23 = *v21;
          *((_OWORD *)v20 - 1) = *(v21 - 1);
          *(_OWORD *)int v20 = v23;
          v20 -= 4;
          v21 -= 2;
          v22 -= 4;
        }
        while (v22);
        uint64_t v18 = &v13[-(v19 & 0x3FFFFFFFFFFFFFFCLL)];
        uint64_t v14 = (void (*)(uint64_t))((char *)v14 - 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL));
        if (v19 == (v19 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_28;
        }
      }
    }
    do
    {
      unint64_t v24 = (void (**)(uint64_t))*((void *)v14 - 1);
      uint64_t v14 = (void (*)(uint64_t))((char *)v14 - 8);
      *--uint64_t v18 = v24;
    }
    while (v14 != v15);
LABEL_28:
    uint64_t v14 = *v2;
LABEL_29:
    unint64_t v5 = (char *)(v13 + 1);
    *int8x8_t v2 = (void (*)(uint64_t))v18;
    v2[1] = (void (*)(uint64_t))(v13 + 1);
    unint64_t v25 = v2[2];
    v2[2] = (void (*)(uint64_t))v11;
    if (v14) {
      this = (void (***)(uint64_t))(*(uint64_t (**)(void (*)(uint64_t), void (*)(uint64_t), int64_t))(*(void *)v2[3] + 40))(v2[3], v14, (char *)v25 - (char *)v14);
    }
LABEL_4:
    v2[1] = (void (*)(uint64_t))v5;
    uint64_t v3 = (void (*)(uint64_t))((char *)v3 + 8);
  }
  while (v3 != v4);
  unint64_t v26 = v2[4];
  if (v26 != v2[5]) {
    v2[5] = v26;
  }
LABEL_33:
  unint64_t v27 = (uint64_t *)v1[1];
  int8x8_t v28 = (void (***)(uint64_t))v27[4];
  uint8x8_t v29 = (void (***)(uint64_t))v27[5];
  if (v28 == v29) {
    goto LABEL_65;
  }
  unint64_t v30 = (void (***)(uint64_t))v27[1];
  while (2)
  {
    uint64_t v31 = *v28;
    unint64_t v32 = v27[2];
    if ((unint64_t)v30 < v32)
    {
      if (v30) {
        *unint64_t v30 = v31;
      }
      ++v30;
      goto LABEL_36;
    }
    uint64_t v33 = ((uint64_t)v30 - *v27) >> 3;
    if ((unint64_t)(v33 + 1) >> 61) {
      goto LABEL_138;
    }
    uint64_t v34 = v32 - *v27;
    uint64_t v35 = v34 >> 2;
    if (v34 >> 2 <= (unint64_t)(v33 + 1)) {
      uint64_t v35 = v33 + 1;
    }
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v36 = v35;
    }
    if (v36)
    {
      uint64_t v37 = v36;
      this = (void (***)(uint64_t))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v27[3]
                                                                                                  + 16))(v27[3], 8 * v36, 8);
      uint64_t v38 = &this[v33];
      uint64_t v36 = (uint64_t)&this[v37];
      if (this) {
        void *v38 = v31;
      }
    }
    else
    {
      uint64_t v38 = (void (***)(uint64_t))(8 * v33);
    }
    uint64_t v40 = *v27;
    uint64_t v39 = v27[1];
    uint64_t v41 = v39 - *v27;
    if (v39 == *v27)
    {
      float v43 = v38;
      goto LABEL_61;
    }
    unint64_t v42 = v41 - 8;
    if ((unint64_t)(v41 - 8) < 0x38)
    {
      float v43 = v38;
      do
      {
LABEL_59:
        int v49 = *(void (***)(uint64_t))(v39 - 8);
        v39 -= 8;
        *--float v43 = v49;
      }
      while (v39 != v40);
      goto LABEL_60;
    }
    float v43 = v38;
    if ((unint64_t)(v39 - (void)v38) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v44 = (v42 >> 3) + 1;
    float v45 = v38 - 2;
    float v46 = (long long *)(v39 - 16);
    uint64_t v47 = v44 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v48 = *v46;
      *((_OWORD *)v45 - 1) = *(v46 - 1);
      *(_OWORD *)float v45 = v48;
      v45 -= 4;
      v46 -= 2;
      v47 -= 4;
    }
    while (v47);
    float v43 = &v38[-(v44 & 0x3FFFFFFFFFFFFFFCLL)];
    v39 -= 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
    if (v44 != (v44 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_59;
    }
LABEL_60:
    uint64_t v39 = *v27;
LABEL_61:
    unint64_t v30 = v38 + 1;
    uint64_t *v27 = (uint64_t)v43;
    v27[1] = (uint64_t)(v38 + 1);
    uint64_t v50 = v27[2];
    v27[2] = v36;
    if (v39) {
      this = (void (***)(uint64_t))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v27[3]
    }
                                                                                                  + 40))(v27[3], v39, v50 - v39);
LABEL_36:
    v27[1] = (uint64_t)v30;
    if (++v28 != v29) {
      continue;
    }
    break;
  }
  uint64_t v51 = v27[4];
  if (v51 != v27[5]) {
    v27[5] = v51;
  }
LABEL_65:
  uint64_t v52 = (uint64_t *)v1[2];
  uint64_t v53 = (void (***)(uint64_t))v52[4];
  unint64_t v54 = (void (***)(uint64_t))v52[5];
  if (v53 == v54) {
    goto LABEL_97;
  }
  unint64_t v55 = (void (***)(uint64_t))v52[1];
  while (2)
  {
    unsigned int v56 = *v53;
    unint64_t v57 = v52[2];
    if ((unint64_t)v55 < v57)
    {
      if (v55) {
        *unint64_t v55 = v56;
      }
      ++v55;
      goto LABEL_68;
    }
    uint64_t v58 = ((uint64_t)v55 - *v52) >> 3;
    if ((unint64_t)(v58 + 1) >> 61) {
      goto LABEL_138;
    }
    uint64_t v59 = v57 - *v52;
    uint64_t v60 = v59 >> 2;
    if (v59 >> 2 <= (unint64_t)(v58 + 1)) {
      uint64_t v60 = v58 + 1;
    }
    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v61 = v60;
    }
    if (v61)
    {
      uint64_t v62 = v61;
      this = (void (***)(uint64_t))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v52[3]
                                                                                                  + 16))(v52[3], 8 * v61, 8);
      float v63 = &this[v58];
      uint64_t v61 = (uint64_t)&this[v62];
      if (this) {
        std::__shared_weak_count *v63 = v56;
      }
    }
    else
    {
      float v63 = (void (***)(uint64_t))(8 * v58);
    }
    uint64_t v65 = *v52;
    uint64_t v64 = v52[1];
    uint64_t v66 = v64 - *v52;
    if (v64 == *v52)
    {
      uint64_t v68 = v63;
      goto LABEL_93;
    }
    unint64_t v67 = v66 - 8;
    if ((unint64_t)(v66 - 8) < 0x38)
    {
      uint64_t v68 = v63;
      do
      {
LABEL_91:
        uint64_t v74 = *(void (***)(uint64_t))(v64 - 8);
        v64 -= 8;
        *--uint64_t v68 = v74;
      }
      while (v64 != v65);
      goto LABEL_92;
    }
    uint64_t v68 = v63;
    if ((unint64_t)(v64 - (void)v63) < 0x20) {
      goto LABEL_91;
    }
    uint64_t v69 = (v67 >> 3) + 1;
    uint64_t v70 = v63 - 2;
    float v71 = (long long *)(v64 - 16);
    uint64_t v72 = v69 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v73 = *v71;
      *((_OWORD *)v70 - 1) = *(v71 - 1);
      *(_OWORD *)uint64_t v70 = v73;
      v70 -= 4;
      v71 -= 2;
      v72 -= 4;
    }
    while (v72);
    uint64_t v68 = &v63[-(v69 & 0x3FFFFFFFFFFFFFFCLL)];
    v64 -= 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
    if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_91;
    }
LABEL_92:
    uint64_t v64 = *v52;
LABEL_93:
    unint64_t v55 = v63 + 1;
    uint64_t *v52 = (uint64_t)v68;
    v52[1] = (uint64_t)(v63 + 1);
    uint64_t v75 = v52[2];
    unsigned char v52[2] = v61;
    if (v64) {
      this = (void (***)(uint64_t))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v52[3]
    }
                                                                                                  + 40))(v52[3], v64, v75 - v64);
LABEL_68:
    v52[1] = (uint64_t)v55;
    if (++v53 != v54) {
      continue;
    }
    break;
  }
  uint64_t v76 = v52[4];
  if (v76 != v52[5]) {
    v52[5] = v76;
  }
LABEL_97:
  uint64_t v77 = (uint64_t *)v1[3];
  char v78 = (void (***)(uint64_t))v77[4];
  unsigned int v79 = (void (***)(uint64_t))v77[5];
  if (v78 == v79) {
    goto LABEL_129;
  }
  uint64_t v80 = (void (***)(uint64_t))v77[1];
  while (2)
  {
    int v81 = *v78;
    unint64_t v82 = v77[2];
    if ((unint64_t)v80 < v82)
    {
      if (v80) {
        *uint64_t v80 = v81;
      }
      ++v80;
      goto LABEL_100;
    }
    uint64_t v83 = ((uint64_t)v80 - *v77) >> 3;
    if ((unint64_t)(v83 + 1) >> 61) {
      goto LABEL_138;
    }
    uint64_t v84 = v82 - *v77;
    uint64_t v85 = v84 >> 2;
    if (v84 >> 2 <= (unint64_t)(v83 + 1)) {
      uint64_t v85 = v83 + 1;
    }
    if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v86 = v85;
    }
    if (v86)
    {
      uint64_t v87 = v86;
      this = (void (***)(uint64_t))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v77[3]
                                                                                                  + 16))(v77[3], 8 * v86, 8);
      uint64_t v88 = &this[v83];
      uint64_t v86 = (uint64_t)&this[v87];
      if (this) {
        std::__shared_weak_count *v88 = v81;
      }
    }
    else
    {
      uint64_t v88 = (void (***)(uint64_t))(8 * v83);
    }
    uint64_t v90 = *v77;
    uint64_t v89 = v77[1];
    uint64_t v91 = v89 - *v77;
    if (v89 == *v77)
    {
      uint64_t v93 = v88;
      goto LABEL_125;
    }
    unint64_t v92 = v91 - 8;
    if ((unint64_t)(v91 - 8) < 0x38)
    {
      uint64_t v93 = v88;
      do
      {
LABEL_123:
        int64_t v99 = *(void (***)(uint64_t))(v89 - 8);
        v89 -= 8;
        *--uint64_t v93 = v99;
      }
      while (v89 != v90);
      goto LABEL_124;
    }
    uint64_t v93 = v88;
    if ((unint64_t)(v89 - (void)v88) < 0x20) {
      goto LABEL_123;
    }
    uint64_t v94 = (v92 >> 3) + 1;
    uint8x8_t v95 = v88 - 2;
    uint64_t v96 = (long long *)(v89 - 16);
    uint64_t v97 = v94 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v98 = *v96;
      *((_OWORD *)v95 - 1) = *(v96 - 1);
      *(_OWORD *)uint8x8_t v95 = v98;
      v95 -= 4;
      v96 -= 2;
      v97 -= 4;
    }
    while (v97);
    uint64_t v93 = &v88[-(v94 & 0x3FFFFFFFFFFFFFFCLL)];
    v89 -= 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
    if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_123;
    }
LABEL_124:
    uint64_t v89 = *v77;
LABEL_125:
    uint64_t v80 = v88 + 1;
    *uint64_t v77 = (uint64_t)v93;
    v77[1] = (uint64_t)(v88 + 1);
    uint64_t v100 = v77[2];
    v77[2] = v86;
    if (v89) {
      this = (void (***)(uint64_t))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v77[3]
    }
                                                                                                  + 40))(v77[3], v89, v100 - v89);
LABEL_100:
    v77[1] = (uint64_t)v80;
    if (++v78 != v79) {
      continue;
    }
    break;
  }
  uint64_t v101 = v77[4];
  if (v101 != v77[5]) {
    v77[5] = v101;
  }
LABEL_129:
  uint64_t v102 = v1[91];
  if (v102)
  {
    do
    {
      if (v102[1])
      {
        unint64_t v104 = 0;
        uint64_t v105 = v102 + 2;
        this = (void (***)(uint64_t))(v102 + 2);
        unsigned int v106 = (void (***)(uint64_t))(v102 + 2);
        do
        {
          uint64_t v107 = *v106;
          v106 += 15;
          (*v107)((uint64_t)this);
          ++v104;
          v105 += 15;
          this = v106;
        }
        while (v104 < (unint64_t)v102[1]);
      }
      v102[1] = 0;
      uint64_t v102 = (void (**)(uint64_t))*v102;
    }
    while (v102);
    unsigned int v103 = v1[91];
  }
  else
  {
    unsigned int v103 = 0;
  }
  v1[92] = v103;
  return this;
}

md::ElevatedPolygonContext *md::ElevatedPolygonContext::ElevatedPolygonContext(md::ElevatedPolygonContext *this, const md::LayoutContext *a2, char a3, const md::StandardPassList *a4, float a5)
{
  *(_DWORD *)this = 0x1000000;
  *((void *)this + 1) = a4;
  *((unsigned char *)this + 24) = 0;
  uint64_t v8 = (char *)this + 24;
  *((unsigned char *)this + 32) = 0;
  uint64_t v9 = +[VKDebugSettings sharedSettings];
  if ([v9 daVinciWireframeEnabled]) {
    char v10 = 1;
  }
  else {
    char v10 = [v9 daVinciTintBandFillWireframeEnabled];
  }
  *(unsigned char *)this = v10;
  if ([v9 daVinciWireframeEnabled]) {
    char v11 = 1;
  }
  else {
    char v11 = [v9 daVinciTintBandStrokeWireframeEnabled];
  }
  *((unsigned char *)this + 1) = v11;
  *((unsigned char *)this + 2) = [v9 daVinciTintBandStrokeDistanceDebugEnabled];
  *((unsigned char *)this + 3) = [v9 enableTileClipping];
  *((unsigned char *)this + 4) = a3;
  *((_DWORD *)this + 4) = 0;
  uint64_t v12 = (void *)*((void *)a2 + 1);
  int8x8_t v13 = (int8x8_t)v12[1];
  if (!*(void *)&v13) {
    goto LABEL_31;
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8(v13);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    uint64_t v15 = 0x401D4CCE847AB1D1;
    if (*(void *)&v13 <= 0x401D4CCE847AB1D1uLL) {
      uint64_t v15 = 0x401D4CCE847AB1D1uLL % *(void *)&v13;
    }
  }
  else
  {
    uint64_t v15 = (*(void *)&v13 - 1) & 0x401D4CCE847AB1D1;
  }
  uint64_t v16 = *(void **)(*v12 + 8 * v15);
  if (!v16) {
    goto LABEL_31;
  }
  unint64_t v17 = (void *)*v16;
  if (!v17) {
    goto LABEL_31;
  }
  if (v14.u32[0] < 2uLL)
  {
    uint64_t v18 = *(void *)&v13 - 1;
    while (1)
    {
      uint64_t v20 = v17[1];
      if (v20 == 0x401D4CCE847AB1D1)
      {
        if (v17[2] == 0x401D4CCE847AB1D1) {
          goto LABEL_28;
        }
      }
      else if ((v20 & v18) != v15)
      {
        goto LABEL_31;
      }
      unint64_t v17 = (void *)*v17;
      if (!v17) {
        goto LABEL_31;
      }
    }
  }
  while (1)
  {
    unint64_t v19 = v17[1];
    if (v19 == 0x401D4CCE847AB1D1) {
      break;
    }
    if (v19 >= *(void *)&v13) {
      v19 %= *(void *)&v13;
    }
    if (v19 != v15) {
      goto LABEL_31;
    }
LABEL_17:
    unint64_t v17 = (void *)*v17;
    if (!v17) {
      goto LABEL_31;
    }
  }
  if (v17[2] != 0x401D4CCE847AB1D1) {
    goto LABEL_17;
  }
LABEL_28:
  uint64_t v21 = v17[5];
  if (*(void *)(v21 + 8) != 0x401D4CCE847AB1D1 || (uint64_t v22 = *(void *)(v21 + 32)) == 0)
  {
LABEL_31:
    *((unsigned char *)this + 24) = 0;
    *((unsigned char *)this + 32) = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v22 + 8);
  v8[8] = *(unsigned char *)(v22 + 16);
  *(void *)uint64_t v8 = v23;
LABEL_32:

  return this;
}

void sub_1A1882C6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *md::PostchainRenderLayer::layout(md::PostchainRenderLayer *this, const md::LayoutContext *a2)
{
  uint64_t v264 = *MEMORY[0x1E4F143B8];
  v260[0] = &unk_1EF5751F8;
  v260[1] = a2;
  uint64_t v261 = v260;
  v258[0] = &unk_1EF575240;
  v258[1] = a2;
  unint64_t v259 = v258;
  long long v263 = v262;
  v262[0] = &unk_1EF575240;
  v262[1] = a2;
  std::__function::__func<md::PostchainRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::PostchainRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v260);
  if (v259 == v258)
  {
    (*(void (**)(void *))(v258[0] + 32))(v258);
  }
  else if (v259)
  {
    (*(void (**)(void))(*v259 + 40))();
  }
  if (v261 == v260)
  {
    (*(void (**)(void *))(v260[0] + 32))(v260);
  }
  else if (v261)
  {
    (*(void (**)(void))(*v261 + 40))();
  }
  uint64_t v4 = (void *)*((void *)a2 + 1);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_32;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    uint64_t v7 = 0x1AF456233693CD46;
    if (*(void *)&v5 <= 0x1AF456233693CD46uLL) {
      uint64_t v7 = 0x1AF456233693CD46uLL % *(void *)&v5;
    }
  }
  else
  {
    uint64_t v7 = (*(void *)&v5 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_32;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_32;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0x1AF456233693CD46)
      {
        if (v9[2] == 0x1AF456233693CD46) {
          goto LABEL_30;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_32;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_32;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0x1AF456233693CD46) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_32;
    }
LABEL_19:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_32;
    }
  }
  if (v9[2] != 0x1AF456233693CD46) {
    goto LABEL_19;
  }
LABEL_30:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v14 = *(void *)(v13 + 32);
    goto LABEL_33;
  }
LABEL_32:
  uint64_t v14 = 0;
LABEL_33:
  uint64_t v15 = *(void **)(*((void *)this + 5) + 24);
  uint64_t v16 = +[VKDebugSettings sharedSettings];
  uint64_t v249 = v14;
  int v17 = [v16 enableDOF];

  uint64_t v18 = (float64x2_t *)(v249 + 968);
  if (!v17) {
    goto LABEL_127;
  }
  unint64_t v19 = *(void **)(*(void *)(*((void *)this + 5) + 24) + 8);
  uint64_t v20 = v19[3];
  uint64_t v21 = v19[4];
  if (v21 == v20)
  {
    uint64_t v245 = 0;
    uint64_t v247 = 0;
    uint64_t v243 = 0;
    uint64_t v27 = 0;
LABEL_67:
    uint64_t v248 = 0;
LABEL_68:
    uint64_t v246 = 0;
LABEL_69:
    uint64_t v244 = 0;
    goto LABEL_70;
  }
  uint64_t v22 = 0;
  while (1)
  {
    uint64_t v23 = *(unsigned __int8 **)(v20 + 8 * v22);
    if (*v23 == *((unsigned __int8 *)this + 48))
    {
      unint64_t v24 = *((void *)v23 + 1);
      uint64_t v25 = v19[15];
      if (v24 < (v19[16] - v25) >> 3) {
        break;
      }
    }
    if (++v22 >= (unint64_t)((v21 - v20) >> 3)) {
      goto LABEL_42;
    }
  }
  uint64_t v26 = *(void *)(v25 + 8 * v24);
  if (!v26)
  {
LABEL_42:
    uint64_t v27 = 0;
    uint64_t v28 = v21 - v20;
    if (v21 != v20) {
      goto LABEL_43;
    }
LABEL_41:
    uint64_t v245 = 0;
    uint64_t v247 = 0;
    uint64_t v243 = 0;
    goto LABEL_67;
  }
  uint64_t v27 = *(void *)(*(void *)(v26 + 24) + 8 * *((unsigned __int8 *)this + 49));
  uint64_t v28 = v21 - v20;
  if (v21 == v20) {
    goto LABEL_41;
  }
LABEL_43:
  uint64_t v29 = 0;
  unint64_t v30 = v28 >> 3;
  while (1)
  {
    uint64_t v31 = *(unsigned __int8 **)(v20 + 8 * v29);
    if (*v31 == *((unsigned __int8 *)this + 60))
    {
      unint64_t v32 = *((void *)v31 + 1);
      uint64_t v33 = v19[15];
      if (v32 < (v19[16] - v33) >> 3) {
        break;
      }
    }
    if (++v29 >= v30) {
      goto LABEL_50;
    }
  }
  uint64_t v34 = *(void *)(v33 + 8 * v32);
  if (v34)
  {
    uint64_t v35 = *(void *)(*(void *)(v34 + 24) + 8 * *((unsigned __int8 *)this + 61));
    goto LABEL_51;
  }
LABEL_50:
  uint64_t v35 = 0;
LABEL_51:
  uint64_t v243 = v35;
  if (v21 == v20)
  {
    uint64_t v245 = 0;
    uint64_t v247 = 0;
    goto LABEL_67;
  }
  uint64_t v36 = 0;
  while (1)
  {
    uint64_t v37 = *(unsigned __int8 **)(v20 + 8 * v36);
    if (*v37 == *((unsigned __int8 *)this + 50))
    {
      unint64_t v38 = *((void *)v37 + 1);
      uint64_t v39 = v19[15];
      if (v38 < (v19[16] - v39) >> 3) {
        break;
      }
    }
    if (++v36 >= (unint64_t)((v21 - v20) >> 3)) {
      goto LABEL_58;
    }
  }
  uint64_t v40 = *(void *)(v39 + 8 * v38);
  if (v40)
  {
    uint64_t v41 = *(void *)(*(void *)(v40 + 24) + 8 * *((unsigned __int8 *)this + 51));
    goto LABEL_59;
  }
LABEL_58:
  uint64_t v41 = 0;
LABEL_59:
  uint64_t v248 = v41;
  if (v21 == v20)
  {
    uint64_t v245 = 0;
    uint64_t v247 = 0;
    goto LABEL_68;
  }
  uint64_t v42 = 0;
  while (1)
  {
    float v43 = *(unsigned __int8 **)(v20 + 8 * v42);
    if (*v43 == *((unsigned __int8 *)this + 52))
    {
      unint64_t v44 = *((void *)v43 + 1);
      uint64_t v45 = v19[15];
      if (v44 < (v19[16] - v45) >> 3) {
        break;
      }
    }
    if (++v42 >= (unint64_t)((v21 - v20) >> 3)) {
      goto LABEL_154;
    }
  }
  uint64_t v46 = *(void *)(v45 + 8 * v44);
  if (v46)
  {
    uint64_t v47 = *(void *)(*(void *)(v46 + 24) + 8 * *((unsigned __int8 *)this + 53));
    goto LABEL_155;
  }
LABEL_154:
  uint64_t v47 = 0;
LABEL_155:
  uint64_t v247 = v47;
  if (v21 == v20)
  {
    uint64_t v245 = 0;
    goto LABEL_68;
  }
  uint64_t v119 = 0;
  while (1)
  {
    uint64_t v120 = *(unsigned __int8 **)(v20 + 8 * v119);
    if (*v120 == *((unsigned __int8 *)this + 54))
    {
      unint64_t v121 = *((void *)v120 + 1);
      uint64_t v122 = v19[15];
      if (v121 < (v19[16] - v122) >> 3) {
        break;
      }
    }
    if (++v119 >= (unint64_t)((v21 - v20) >> 3)) {
      goto LABEL_164;
    }
  }
  uint64_t v123 = *(void *)(v122 + 8 * v121);
  if (v123)
  {
    uint64_t v246 = *(void *)(*(void *)(v123 + 24) + 8 * *((unsigned __int8 *)this + 55));
    uint64_t v124 = v21 - v20;
    if (v21 == v20)
    {
LABEL_162:
      uint64_t v244 = 0;
      uint64_t v245 = 0;
      goto LABEL_70;
    }
  }
  else
  {
LABEL_164:
    uint64_t v246 = 0;
    uint64_t v124 = v21 - v20;
    if (v21 == v20) {
      goto LABEL_162;
    }
  }
  uint64_t v125 = 0;
  unint64_t v126 = v124 >> 3;
  while (1)
  {
    uint64_t v127 = *(unsigned __int8 **)(v20 + 8 * v125);
    if (*v127 == *((unsigned __int8 *)this + 56))
    {
      unint64_t v128 = *((void *)v127 + 1);
      uint64_t v129 = v19[15];
      if (v128 < (v19[16] - v129) >> 3) {
        break;
      }
    }
    if (++v125 >= v126) {
      goto LABEL_173;
    }
  }
  uint64_t v130 = *(void *)(v129 + 8 * v128);
  if (v130)
  {
    uint64_t v245 = *(void *)(*(void *)(v130 + 24) + 8 * *((unsigned __int8 *)this + 57));
    uint64_t v131 = v21 - v20;
    if (v21 == v20) {
      goto LABEL_69;
    }
    goto LABEL_174;
  }
LABEL_173:
  uint64_t v245 = 0;
  uint64_t v131 = v21 - v20;
  if (v21 == v20) {
    goto LABEL_69;
  }
LABEL_174:
  uint64_t v132 = 0;
  unint64_t v133 = v131 >> 3;
  while (1)
  {
    std::string v134 = *(unsigned __int8 **)(v20 + 8 * v132);
    if (*v134 == *((unsigned __int8 *)this + 58))
    {
      unint64_t v135 = *((void *)v134 + 1);
      uint64_t v136 = v19[15];
      if (v135 < (v19[16] - v136) >> 3) {
        break;
      }
    }
    if (++v132 >= v133) {
      goto LABEL_69;
    }
  }
  uint64_t v137 = *(void *)(v136 + 8 * v135);
  if (!v137) {
    goto LABEL_69;
  }
  uint64_t v244 = *(void *)(*(void *)(v137 + 24) + 8 * *((unsigned __int8 *)this + 59));
LABEL_70:
  double v48 = *(double *)(v249 + 32);
  float64x2_t v49 = *v18;
  uint64_t v50 = (void *)*((void *)this + 9);
  long long v253 = 0uLL;
  unint64_t v51 = v50[1];
  *(void *)&long long v52 = 0;
  *((void *)&v52 + 1) = v50;
  uint64_t v53 = (float32x2_t *)v50[9];
  long long v253 = v52;
  uint64_t v254 = 0;
  unint64_t v255 = v51;
  char v257 = v53;
  __int16 v256 = 1;
  *uint64_t v53 = vcvt_f32_f64(v49);
  *(float *)&double v48 = v48;
  v53[1].i32[0] = LODWORD(v48);
  unint64_t v54 = +[VKDebugSettings sharedSettings];
  [v54 dofStrength];
  v53[1].f32[1] = v55 * 6.0;

  unsigned int v56 = +[VKDebugSettings sharedSettings];
  [v56 dofStrength];
  if (v57 <= 0.1)
  {
    v53[2].i32[0] = 1065353216;
  }
  else
  {
    uint64_t v58 = +[VKDebugSettings sharedSettings];
    [v58 dofStrength];
    float32_t v60 = 0.1 / v59;
    v53[2].f32[0] = v60;
  }
  if (v51)
  {
    unint64_t v61 = v50[8];
    if (v61 <= v51) {
      unint64_t v61 = v51;
    }
    v50[7] = 0;
    v50[8] = v61;
  }
  uint64_t v62 = v15[27];
  if (v62)
  {
    unint64_t v63 = *(void *)(v62 + 32);
    uint64_t v64 = *(void *)(v15[1] + 96);
    uint64_t v18 = (float64x2_t *)(v249 + 968);
    if (v63 >= (*(void *)(v15[1] + 104) - v64) >> 3) {
      uint64_t v62 = 0;
    }
    else {
      uint64_t v62 = *(void *)(*(void *)(v64 + 8 * v63) + 16);
    }
  }
  else
  {
    uint64_t v18 = (float64x2_t *)(v249 + 968);
  }
  **(void **)(*((void *)this + 32) + 96) = v62;
  uint64_t v65 = v15[13];
  if (v65)
  {
    unint64_t v66 = *(void *)(v65 + 32);
    uint64_t v67 = *(void *)(v15[1] + 96);
    if (v66 >= (*(void *)(v15[1] + 104) - v67) >> 3) {
      uint64_t v65 = 0;
    }
    else {
      uint64_t v65 = *(void *)(*(void *)(v67 + 8 * v66) + 16);
    }
  }
  *(void *)(*(void *)(*((void *)this + 32) + 96) + 8) = v65;
  ggl::CommandBuffer::pushRenderItem(v27, *((void *)this + 34));
  uint64_t v68 = v15[30];
  if (v68)
  {
    unint64_t v69 = *(void *)(v68 + 32);
    uint64_t v70 = *(void *)(v15[1] + 96);
    if (v69 >= (*(void *)(v15[1] + 104) - v70) >> 3) {
      uint64_t v68 = 0;
    }
    else {
      uint64_t v68 = *(void *)(*(void *)(v70 + 8 * v69) + 16);
    }
  }
  **(void **)(*((void *)this + 39) + 96) = v68;
  ggl::CommandBuffer::pushRenderItem(v248, *((void *)this + 41));
  uint64_t v71 = v15[30];
  if (v71)
  {
    unint64_t v72 = *(void *)(v71 + 32);
    uint64_t v73 = *(void *)(v15[1] + 96);
    if (v72 >= (*(void *)(v15[1] + 104) - v73) >> 3) {
      uint64_t v71 = 0;
    }
    else {
      uint64_t v71 = *(void *)(*(void *)(v73 + 8 * v72) + 16);
    }
  }
  **(void **)(*((void *)this + 48) + 96) = v71;
  uint64_t v74 = v15[29];
  if (v74)
  {
    unint64_t v75 = *(void *)(v74 + 32);
    uint64_t v76 = *(void *)(v15[1] + 96);
    if (v75 >= (*(void *)(v15[1] + 104) - v76) >> 3) {
      uint64_t v74 = 0;
    }
    else {
      uint64_t v74 = *(void *)(*(void *)(v76 + 8 * v75) + 16);
    }
  }
  *(void *)(*(void *)(*((void *)this + 48) + 96) + 8) = v74;
  ggl::CommandBuffer::pushRenderItem(v247, *((void *)this + 52));
  uint64_t v77 = v15[31];
  if (v77)
  {
    unint64_t v78 = *(void *)(v77 + 32);
    uint64_t v79 = *(void *)(v15[1] + 96);
    if (v78 >= (*(void *)(v15[1] + 104) - v79) >> 3) {
      uint64_t v77 = 0;
    }
    else {
      uint64_t v77 = *(void *)(*(void *)(v79 + 8 * v78) + 16);
    }
  }
  **(void **)(*((void *)this + 50) + 96) = v77;
  ggl::CommandBuffer::pushRenderItem(v246, *((void *)this + 53));
  uint64_t v80 = v15[32];
  if (v80)
  {
    unint64_t v81 = *(void *)(v80 + 32);
    uint64_t v82 = *(void *)(v15[1] + 96);
    if (v81 >= (*(void *)(v15[1] + 104) - v82) >> 3) {
      uint64_t v80 = 0;
    }
    else {
      uint64_t v80 = *(void *)(*(void *)(v82 + 8 * v81) + 16);
    }
  }
  **(void **)(*((void *)this + 60) + 96) = v80;
  ggl::CommandBuffer::pushRenderItem(v245, *((void *)this + 64));
  uint64_t v83 = v15[33];
  if (v83)
  {
    unint64_t v84 = *(void *)(v83 + 32);
    uint64_t v85 = *(void *)(v15[1] + 96);
    if (v84 >= (*(void *)(v15[1] + 104) - v85) >> 3) {
      uint64_t v83 = 0;
    }
    else {
      uint64_t v83 = *(void *)(*(void *)(v85 + 8 * v84) + 16);
    }
  }
  **(void **)(*((void *)this + 62) + 96) = v83;
  ggl::CommandBuffer::pushRenderItem(v244, *((void *)this + 65));
  uint64_t v86 = v15[27];
  if (v86)
  {
    unint64_t v87 = *(void *)(v86 + 32);
    uint64_t v88 = *(void *)(v15[1] + 96);
    if (v87 >= (*(void *)(v15[1] + 104) - v88) >> 3) {
      uint64_t v86 = 0;
    }
    else {
      uint64_t v86 = *(void *)(*(void *)(v88 + 8 * v87) + 16);
    }
  }
  **(void **)(*((void *)this + 23) + 96) = v86;
  uint64_t v89 = v15[13];
  if (v89)
  {
    unint64_t v90 = *(void *)(v89 + 32);
    uint64_t v91 = *(void *)(v15[1] + 96);
    if (v90 >= (*(void *)(v15[1] + 104) - v91) >> 3) {
      uint64_t v89 = 0;
    }
    else {
      uint64_t v89 = *(void *)(*(void *)(v91 + 8 * v90) + 16);
    }
  }
  *(void *)(*(void *)(*((void *)this + 23) + 96) + 8) = v89;
  uint64_t v92 = v15[34];
  if (v92)
  {
    unint64_t v93 = *(void *)(v92 + 32);
    uint64_t v94 = *(void *)(v15[1] + 96);
    if (v93 >= (*(void *)(v15[1] + 104) - v94) >> 3) {
      uint64_t v92 = 0;
    }
    else {
      uint64_t v92 = *(void *)(*(void *)(v94 + 8 * v93) + 16);
    }
  }
  *(void *)(*(void *)(*((void *)this + 23) + 96) + 16) = v92;
  uint64_t v95 = v15[35];
  if (v95)
  {
    unint64_t v96 = *(void *)(v95 + 32);
    uint64_t v97 = *(void *)(v15[1] + 96);
    if (v96 >= (*(void *)(v15[1] + 104) - v97) >> 3) {
      uint64_t v95 = 0;
    }
    else {
      uint64_t v95 = *(void *)(*(void *)(v97 + 8 * v96) + 16);
    }
  }
  *(void *)(*(void *)(*((void *)this + 23) + 96) + 24) = v95;
  ggl::CommandBuffer::pushRenderItem(v243, *((void *)this + 27));
LABEL_127:
  long long v98 = (void *)*((void *)a2 + 1);
  int8x8_t v99 = (int8x8_t)v98[1];
  if (!*(void *)&v99) {
    goto LABEL_235;
  }
  uint8x8_t v100 = (uint8x8_t)vcnt_s8(v99);
  v100.i16[0] = vaddlv_u8(v100);
  if (v100.u32[0] > 1uLL)
  {
    uint64_t v101 = 0x41E8D6E445F4145;
    if (*(void *)&v99 <= 0x41E8D6E445F4145uLL) {
      uint64_t v101 = 0x41E8D6E445F4145uLL % *(void *)&v99;
    }
  }
  else
  {
    uint64_t v101 = (*(void *)&v99 - 1) & 0x41E8D6E445F4145;
  }
  uint64_t v102 = *(void **)(*v98 + 8 * v101);
  if (!v102) {
    goto LABEL_235;
  }
  unsigned int v103 = (void *)*v102;
  if (!v103) {
    goto LABEL_235;
  }
  if (v100.u32[0] < 2uLL)
  {
    uint64_t v104 = *(void *)&v99 - 1;
    while (1)
    {
      uint64_t v106 = v103[1];
      if (v106 == 0x41E8D6E445F4145)
      {
        if (v103[2] == 0x41E8D6E445F4145) {
          goto LABEL_148;
        }
      }
      else if ((v106 & v104) != v101)
      {
        goto LABEL_235;
      }
      unsigned int v103 = (void *)*v103;
      if (!v103) {
        goto LABEL_235;
      }
    }
  }
  while (2)
  {
    unint64_t v105 = v103[1];
    if (v105 != 0x41E8D6E445F4145)
    {
      if (v105 >= *(void *)&v99) {
        v105 %= *(void *)&v99;
      }
      if (v105 != v101) {
        goto LABEL_235;
      }
      goto LABEL_137;
    }
    if (v103[2] != 0x41E8D6E445F4145)
    {
LABEL_137:
      unsigned int v103 = (void *)*v103;
      if (!v103) {
        goto LABEL_235;
      }
      continue;
    }
    break;
  }
LABEL_148:
  uint64_t v107 = v103[5];
  if (*(void *)(v107 + 8) == 0x41E8D6E445F4145)
  {
    uint64_t v108 = *(void *)(v107 + 32);
    if (v108)
    {
      if (*(unsigned char *)(v108 + 227))
      {
        uint64_t v109 = +[VKDebugSettings sharedSettings];
        unsigned int v110 = v18;
        unsigned int v111 = [v109 daVinciSSAOHighSampleCountEnabled];

        unsigned int v112 = +[VKDebugSettings sharedSettings];
        unsigned int v113 = [v112 daVinciSSAODepthAwareBlurEnabled];

        float32x4_t v114 = +[VKDebugSettings sharedSettings];
        int v115 = [v114 daVinciSSAODepthAwareUpsampleEnabled];

        uint64_t v116 = v15[21];
        if (v116)
        {
          unint64_t v117 = *(void *)(v116 + 32);
          uint64_t v118 = *(void *)(v15[1] + 96);
          if (v117 >= (*(void *)(v15[1] + 104) - v118) >> 3) {
            uint64_t v116 = 0;
          }
          else {
            uint64_t v116 = *(void *)(*(void *)(v118 + 8 * v117) + 16);
          }
        }
        **(void **)(*((void *)this + 82) + 96) = v116;
        uint64_t v138 = md::PassList::commandBufferForId(*(void **)(*(void *)(*((void *)this + 5) + 24) + 8), *((unsigned char *)this + 64), *((unsigned char *)this + 65));
        ggl::CommandBuffer::pushRenderItem(v138, *((void *)this + 84));
        uint64_t v139 = +[VKDebugSettings sharedSettings];
        int v140 = [v139 daVinciSSAOEnableBlur];

        if (v140)
        {
          uint64_t v141 = v113;
          uint64_t v142 = v15[15];
          if (v142
            && (unint64_t v143 = *(void *)(v142 + 32),
                uint64_t v144 = *(void *)(v15[1] + 96),
                v143 < (*(void *)(v15[1] + 104) - v144) >> 3))
          {
            uint64_t v145 = *(void *)(*(void *)(v144 + 8 * v143) + 16);
          }
          else
          {
            uint64_t v145 = 0;
          }
          unsigned int v148 = (char *)this + 16 * v113 + 728;
          **(void **)(*(void *)v148 + 96) = v145;
          uint64_t v149 = v15[18];
          if (v149)
          {
            unint64_t v150 = *(void *)(v149 + 32);
            uint64_t v151 = *(void *)(v15[1] + 96);
            if (v150 >= (*(void *)(v15[1] + 104) - v151) >> 3) {
              uint64_t v149 = 0;
            }
            else {
              uint64_t v149 = *(void *)(*(void *)(v151 + 8 * v150) + 16);
            }
          }
          *(void *)(*(void *)(*(void *)v148 + 96) + 8) = v149;
          uint64_t v152 = *((void *)this + 13);
          unint64_t v252 = 0;
          *(void *)&long long v253 = 0;
          uint64_t v250 = 0;
          uint64_t v251 = 0;
          unint64_t v153 = *(void *)(v152 + 8);
          *((void *)&v253 + 1) = v152;
          uint64_t v254 = 0;
          unint64_t v255 = v153;
          __int16 v256 = 1;
          if (v153) {
            unint64_t v154 = *(float32x2_t **)(v152 + 72);
          }
          else {
            unint64_t v154 = 0;
          }
          char v257 = v154;
          ggl::BufferMemory::operator=(&v250, (uint64_t)&v253);
          ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v253);
          uint64_t v155 = v252;
          v252->f32[0] = 1.0
                       / (float)*(unsigned int *)(*(void *)(*(void *)(*(void *)(v15[1] + 96)
                                                                        + 8 * *(void *)(v15[15] + 32))
                                                            + 16)
                                                + 80);
          v155->i32[1] = 0;
          int v156 = +[VKDebugSettings sharedSettings];
          __int32 v157 = [v156 daVinciSSAOBlurSize];
          v252[1].i32[0] = v157;

          uint64_t v158 = +[VKDebugSettings sharedSettings];
          [v158 daVinciSSAOBlurriness];
          v252[1].i32[1] = v159;

          uint64_t v160 = +[VKDebugSettings sharedSettings];
          [v160 daVinciSSAODepthBlurriness];
          v252[2].i32[0] = v161;

          ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v250);
          uint64_t v162 = md::PassList::commandBufferForId(*(void **)(*(void *)(*((void *)this + 5) + 24) + 8), *((unsigned char *)this + 66), *((unsigned char *)this + 67));
          ggl::CommandBuffer::pushRenderItem(v162, *((void *)this + v141 + 99));
          uint64_t v163 = v15[16];
          if (v163
            && (unint64_t v164 = *(void *)(v163 + 32),
                uint64_t v165 = *(void *)(v15[1] + 96),
                v164 < (*(void *)(v15[1] + 104) - v165) >> 3))
          {
            uint64_t v166 = *(void *)(*(void *)(v165 + 8 * v164) + 16);
          }
          else
          {
            uint64_t v166 = 0;
          }
          uint64_t v167 = (char *)this + 16 * v141 + 760;
          **(void **)(*(void *)v167 + 96) = v166;
          uint64_t v168 = v15[18];
          if (v168)
          {
            unint64_t v169 = *(void *)(v168 + 32);
            uint64_t v170 = *(void *)(v15[1] + 96);
            if (v169 >= (*(void *)(v15[1] + 104) - v170) >> 3) {
              uint64_t v168 = 0;
            }
            else {
              uint64_t v168 = *(void *)(*(void *)(v170 + 8 * v169) + 16);
            }
          }
          *(void *)(*(void *)(*(void *)v167 + 96) + 8) = v168;
          uint64_t v171 = *((void *)this + 15);
          unint64_t v252 = 0;
          *(void *)&long long v253 = 0;
          uint64_t v250 = 0;
          uint64_t v251 = 0;
          unint64_t v172 = *(void *)(v171 + 8);
          *((void *)&v253 + 1) = v171;
          uint64_t v254 = 0;
          unint64_t v255 = v172;
          __int16 v256 = 1;
          if (v172) {
            unint64_t v173 = *(float32x2_t **)(v171 + 72);
          }
          else {
            unint64_t v173 = 0;
          }
          char v257 = v173;
          ggl::BufferMemory::operator=(&v250, (uint64_t)&v253);
          ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v253);
          float32_t v174 = 1.0
               / (float)*(unsigned int *)(*(void *)(*(void *)(*(void *)(v15[1] + 96)
                                                                + 8 * *(void *)(v15[15] + 32))
                                                    + 16)
                                        + 84);
          BOOL v175 = v252;
          v252->i32[0] = 0;
          v175->f32[1] = v174;
          char v176 = +[VKDebugSettings sharedSettings];
          __int32 v177 = [v176 daVinciSSAOBlurSize];
          v252[1].i32[0] = v177;

          uint64_t v178 = +[VKDebugSettings sharedSettings];
          [v178 daVinciSSAOBlurriness];
          v252[1].i32[1] = v179;

          uint64_t v180 = +[VKDebugSettings sharedSettings];
          [v180 daVinciSSAODepthBlurriness];
          v252[2].i32[0] = v181;

          ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v250);
          uint64_t v182 = md::PassList::commandBufferForId(*(void **)(*(void *)(*((void *)this + 5) + 24) + 8), *((unsigned char *)this + 68), *((unsigned char *)this + 69));
          ggl::CommandBuffer::pushRenderItem(v182, *((void *)this + v141 + 101));
          uint64_t v146 = v249;
          if (v115)
          {
            uint64_t v147 = v15[17];
            if (v147) {
              goto LABEL_209;
            }
            goto LABEL_212;
          }
        }
        else
        {
          uint64_t v146 = v249;
          if (v115)
          {
            uint64_t v147 = v15[15];
            if (v147)
            {
LABEL_209:
              unint64_t v183 = *(void *)(v147 + 32);
              uint64_t v184 = *(void *)(v15[1] + 96);
              if (v183 >= (*(void *)(v15[1] + 104) - v184) >> 3) {
                uint64_t v147 = 0;
              }
              else {
                uint64_t v147 = *(void *)(*(void *)(v184 + 8 * v183) + 16);
              }
            }
LABEL_212:
            *(void *)(*(void *)(*((void *)this + 107) + 96) + 16) = v147;
          }
        }
        uint64_t v185 = *((void *)this + 11);
        unint64_t v252 = 0;
        *(void *)&long long v253 = 0;
        uint64_t v250 = 0;
        uint64_t v251 = 0;
        unint64_t v186 = *(void *)(v185 + 8);
        *((void *)&v253 + 1) = v185;
        uint64_t v254 = 0;
        unint64_t v255 = v186;
        __int16 v256 = 1;
        if (v186) {
          __int16 v187 = *(float32x2_t **)(v185 + 72);
        }
        else {
          __int16 v187 = 0;
        }
        char v257 = v187;
        ggl::BufferMemory::operator=(&v250, (uint64_t)&v253);
        ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v253);
        uint64_t v188 = v15[36];
        uint64_t v189 = *(void *)(*(void *)(*(void *)(v15[1] + 96) + 8 * *(void *)(v15[15] + 32)) + 16);
        float v190 = (float)(*(_DWORD *)(v189 + 84) / *(_DWORD *)(v188 + 84));
        uint64_t v191 = v252;
        v252[3].f32[0] = (float)(*(_DWORD *)(v189 + 80) / *(_DWORD *)(v188 + 80));
        v191[3].f32[1] = v190;
        double v192 = *(double *)(v146 + 1248);
        double v193 = *(double *)(v146 + 1256);
        double v194 = *(double *)(v146 + 1264);
        float v195 = *(double *)(v146 + 3272)
             + *(double *)(v146 + 3176) * v192
             + *(double *)(v146 + 3208) * v193
             + *(double *)(v146 + 3240) * v194;
        float v196 = *(double *)(v146 + 1008) + *(double *)(v146 + 1040);
        float v197 = -v196;
        float64x2_t v198 = *(float64x2_t *)(v146 + 3192);
        float64x2_t v199 = vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(v146 + 3256), *(float64x2_t *)(v146 + 3160), v192), v198, v193);
        float64x2_t v200 = *(float64x2_t *)(v146 + 3224);
        float32x2_t v201 = vcvt_f32_f64(vmlaq_n_f64(v199, v200, v194));
        *uint64_t v191 = vdiv_f32(v201, vsub_f32(vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(v146 + 3256), *(float64x2_t *)(v146 + 3160), *(double *)(v146 + 1296)), v198, v110[21].f64[0]), v200, *(double *)(v146 + 1312))), v201));
        v191[1].f32[0] = v195 / (float)-v196;
        double v202 = 1.0;
        if (!*(unsigned char *)(v146 + 3776))
        {
          double v203 = *(double *)(v146 + 8);
          long double v204 = cos(v203 + v203) * -559.82 + 111132.92;
          long double v205 = v204 + cos(v203 * 4.0) * 1.175;
          long double v206 = v205 + cos(v203 * 6.0) * -0.0023;
          double v207 = v203 * 0.5;
          long double v208 = tan(v203 * 0.5 + 0.78103484);
          double v209 = log(v208);
          long double v210 = tan(v207 + 0.789761487);
          double v202 = fabs((log(v210) - v209) * 0.159154943) / v206;
        }
        float v211 = v202;
        v191[4].f32[0] = v211 / v197;
        v191[5].i32[0] = 1017370378;
        uint64_t v212 = +[VKDebugSettings sharedSettings];
        [v212 daVinciSSAODepthThreshold];
        v252[6].i32[0] = v213;

        unint64_t v214 = v252;
        __asm { FMOV            V1.2S, #1.0 }
        v252[2] = vdiv_f32(_D1, vcvt_f32_u32(*(uint32x2_t *)(*(void *)(*(void *)(*(void *)(v15[1] + 96)+ 8 * *(void *)(v15[15] + 32))+ 16)+ 80)));
        v214[6].i32[1] = *(_DWORD *)(v108 + 220);
        v214[5].i32[1] = *(_DWORD *)(v108 + 204);
        v214[4].f32[1] = *(float *)(v108 + 208) * 20.0;
        uint64_t v220 = +[VKDebugSettings sharedSettings];
        [v220 ssaoFalloffScale];
        v252[7].i32[0] = v221;

        uint64_t v222 = +[VKDebugSettings sharedSettings];
        [v222 ssaoMaxDistance];
        v252[7].i32[1] = v223;

        ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v250);
        uint64_t v224 = v111;
        uint64_t v225 = v15[18];
        if (v225)
        {
          unint64_t v226 = *(void *)(v225 + 32);
          uint64_t v227 = *(void *)(v15[1] + 96);
          if (v226 >= (*(void *)(v15[1] + 104) - v227) >> 3) {
            uint64_t v225 = 0;
          }
          else {
            uint64_t v225 = *(void *)(*(void *)(v227 + 8 * v226) + 16);
          }
        }
        float v228 = (char *)this + 16 * v111;
        **(void **)(*((void *)v228 + 72) + 96) = v225;
        *(void *)(*(void *)(*((void *)v228 + 72) + 96) + 8) = v15[36];
        uint64_t v229 = *((void *)this + 17);
        unint64_t v252 = 0;
        *(void *)&long long v253 = 0;
        uint64_t v250 = 0;
        uint64_t v251 = 0;
        unint64_t v230 = *(void *)(v229 + 8);
        *((void *)&v253 + 1) = v229;
        uint64_t v254 = 0;
        unint64_t v255 = v230;
        __int16 v256 = 1;
        if (v230) {
          unint64_t v231 = *(float32x2_t **)(v229 + 72);
        }
        else {
          unint64_t v231 = 0;
        }
        char v257 = v231;
        ggl::BufferMemory::operator=(&v250, (uint64_t)&v253);
        ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v253);
        uint64_t v232 = +[VKDebugSettings sharedSettings];
        [v232 daVinciSSAOUpsampleDepthThreshold];
        v252->i32[0] = v233;

        ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v250);
        uint64_t v234 = md::PassList::commandBufferForId(*(void **)(*(void *)(*((void *)this + 5) + 24) + 8), *((unsigned char *)this + 62), *((unsigned char *)this + 63));
        ggl::CommandBuffer::pushRenderItem(v234, *((void *)this + v224 + 76));
        if (v115)
        {
          uint64_t v235 = v15[18];
          if (v235)
          {
            unint64_t v236 = *(void *)(v235 + 32);
            uint64_t v237 = *(void *)(v15[1] + 96);
            if (v236 >= (*(void *)(v15[1] + 104) - v237) >> 3) {
              uint64_t v235 = 0;
            }
            else {
              uint64_t v235 = *(void *)(*(void *)(v237 + 8 * v236) + 16);
            }
          }
          *(void *)(*(void *)(*((void *)this + 107) + 96) + 8) = v235;
          uint64_t v238 = v15[21];
          if (v238)
          {
            unint64_t v239 = *(void *)(v238 + 32);
            uint64_t v240 = *(void *)(v15[1] + 96);
            if (v239 >= (*(void *)(v15[1] + 104) - v240) >> 3) {
              uint64_t v238 = 0;
            }
            else {
              uint64_t v238 = *(void *)(*(void *)(v240 + 8 * v239) + 16);
            }
          }
          **(void **)(*((void *)this + 107) + 96) = v238;
          uint64_t v241 = md::PassList::commandBufferForId(*(void **)(*(void *)(*((void *)this + 5) + 24) + 8), *((unsigned char *)this + 70), *((unsigned char *)this + 71));
          ggl::CommandBuffer::pushRenderItem(v241, *((void *)this + 109));
        }
      }
    }
  }
LABEL_235:
  if (!v263)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v263 + 48))(v263);
  double result = v263;
  if (v263 == v262) {
    return (void *)(*(uint64_t (**)(void *))(v262[0] + 32))(v262);
  }
  if (v263) {
    return (void *)(*(uint64_t (**)(void))(*v263 + 40))();
  }
  return result;
}

void sub_1A18841A8(_Unwind_Exception *a1)
{
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v1 - 160));
  _Unwind_Resume(a1);
}

void std::__function::__func<md::PostchainRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::PostchainRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  int8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int8x8_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CartographicPostchainLayout", "", v5, 2u);
  }
}

void std::__function::__func<md::PostchainRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::PostchainRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  int8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int8x8_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "CartographicPostchainLayout", "", v5, 2u);
  }
}

uint64_t std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0,std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0>,void ()(void)>::operator()(void *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  v24[0] = &unk_1EF57E5B0;
  uint64_t v25 = v24;
  v22[0] = &unk_1EF57E520;
  uint64_t v23 = v22;
  uint64_t v27 = v26;
  v26[0] = &unk_1EF57E520;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  int8x8_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v2))
  {
    *(_WORD *)std::string buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsRenderIcon", "", buf, 2u);
  }

  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
  }
  else if (v23)
  {
    (*(void (**)(void))(*v23 + 40))();
  }
  if (v25 == v24)
  {
    (*(void (**)(void *))(v24[0] + 32))(v24);
  }
  else if (v25)
  {
    (*(void (**)(void))(*v25 + 40))();
  }
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[3];
  int8x8_t v5 = (std::__shared_weak_count *)a1[5];
  uint64_t v18 = a1[4];
  unint64_t v19 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 16))(v3, 1, v4, &v18);
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v7 = a1[6];
  uint64_t v6 = a1[7];
  uint64_t v8 = *(void *)(*(void *)(v7 + 152) + 136);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = a1[1];
  uint64_t v9 = a1[2];
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = a1[8];
  uint64_t v11 = a1[9];
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = 0;
  uint64_t v13 = (uint8_t *)operator new(0x38uLL);
  *(void *)uint64_t v13 = &unk_1EF57E568;
  *((void *)v13 + 1) = v7;
  *((void *)v13 + 2) = v6;
  *((void *)v13 + 3) = v10;
  *((void *)v13 + 4) = v9;
  *((void *)v13 + 5) = v12;
  *((void *)v13 + 6) = v11;
  uint64_t v21 = v13;
  geo::TaskQueue::async(&v16, v8, buf);
  uint64_t v14 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (v21 == buf)
  {
    (*(void (**)(uint8_t *))(*(void *)buf + 32))(buf);
  }
  else if (v21)
  {
    (*(void (**)(void))(*(void *)v21 + 40))();
  }
  if (!v27)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    JUMPOUT(0x1A1884B0CLL);
  }
  (*(void (**)(void *))(*v27 + 48))(v27);
  uint64_t result = (uint64_t)v27;
  if (v27 == v26) {
    return (*(uint64_t (**)(void *))(v26[0] + 32))(v26);
  }
  if (v27) {
    return (*(uint64_t (**)(void *))(*v27 + 40))(v27);
  }
  return result;
}

void sub_1A1884B34(_Unwind_Exception *exception_object)
{
}

void sub_1A1884B40()
{
}

void std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::destroy[abi:nn180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__alloc_func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::destroy[abi:nn180100](void *a1)
{
  int8x8_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#2}>,void ()(void)>::operator()()
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "LabelsRenderIcon", "", v1, 2u);
  }
}

void std::__function::__func<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelImageLoader::enqueueIconForRendering(std::shared_ptr<md::LabelIcon> const&)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::operator()(void *a1)
{
  int8x8_t v2 = (std::recursive_mutex *)(a1[1] + 24);
  std::recursive_mutex::lock(v2);
  uint64_t v3 = a1[3];
  if (*(void *)(v3 + 16))
  {
    atomic_store(1u, (unsigned __int8 *)(v3 + 143));
    atomic_store(1u, (unsigned __int8 *)(v3 + 144));
  }
  atomic_store(1u, (unsigned __int8 *)(v3 + 142));
  uint64_t v4 = (std::mutex *)a1[5];
  std::mutex::lock(v4);
  uint64_t sig = v4[1].__m_.__sig;
  if (sig)
  {
    uint64_t v6 = (unsigned int *)(sig + 140);
    atomic_fetch_add((atomic_uint *volatile)(sig + 140), 0xFFFFFFFF);
    uint64_t v7 = (atomic_uint *)(sig + 136);
    atomic_fetch_add(v7, 1u);
    LODWORD(v6) = atomic_load(v6);
    if (!v6 || (unsigned int v8 = atomic_load((unsigned int *)v7), v8 >= 0x14))
    {
      atomic_store(0, (unsigned int *)v7);
      uint64_t v9 = a1[1];
      *(unsigned char *)(v9 + 3045) = 1;
      *(unsigned char *)(v9 + 3047) = 1;
      unsigned __int8 v10 = atomic_load((unsigned __int8 *)(v9 + 3058));
      if (v10)
      {
        uint64_t v11 = *(void *)(v9 + 136);
        if (v11)
        {
          uint64_t v12 = *(void *)(v11 + 56);
          if (v12)
          {
            uint64_t v14 = v9;
            char v13 = 9;
            (*(void (**)(uint64_t, uint64_t *, char *))(*(void *)v12 + 48))(v12, &v14, &v13);
          }
        }
      }
    }
  }
  std::mutex::unlock(v4);
  std::recursive_mutex::unlock(v2);
}

void sub_1A1884EF4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v2);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelTextDataLoader::finishBatch(void)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::operator()(uint64_t a1)
{
  int8x8_t v2 = (std::recursive_mutex *)(*(void *)(a1 + 8) + 24);
  std::recursive_mutex::lock(v2);
  uint64_t v3 = *(std::mutex **)(a1 + 24);
  std::mutex::lock(v3);
  uint64_t sig = v3[1].__m_.__sig;
  if (sig)
  {
    atomic_fetch_add((atomic_uint *volatile)(sig + 56), 0xFFFFFFFF);
    uint64_t v5 = *(void *)(a1 + 8);
    *(unsigned char *)(v5 + 3045) = 1;
    *(unsigned char *)(v5 + 3047) = 1;
    unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v5 + 3058));
    if (v6)
    {
      uint64_t v7 = *(void *)(v5 + 136);
      if (v7)
      {
        uint64_t v8 = *(void *)(v7 + 56);
        if (v8)
        {
          uint64_t v10 = v5;
          char v9 = 9;
          (*(void (**)(uint64_t, uint64_t *, char *))(*(void *)v8 + 48))(v8, &v10, &v9);
        }
      }
    }
  }
  std::mutex::unlock(v3);
  std::recursive_mutex::unlock(v2);
}

void sub_1A1884FF8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v2);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0,std::allocator<md::DrapingLogic::_drapeKeyPair(md::FoundationKey const&,md::OverlayKey const&,std::shared_ptr<md::DaVinciGroundTileData> const&,std::shared_ptr<md::ElevatedStrokeTileData> const&,md::OverlaysContext const&,md::CameraContext const&,md::LayoutContext const&,gdc::Registry *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v201 = *MEMORY[0x1E4F143B8];
  int8x8_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 40);
      if (!v5 || (int v6 = atomic_load((unsigned __int8 *)v5), v6 == 3))
      {
LABEL_236:
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      uint64_t v7 = *(std::__shared_weak_count **)(v5 + 32);
      if (v7 && (uint64_t v8 = std::__shared_weak_count::lock(v7)) != 0)
      {
        uint64_t v136 = v8;
        uint64_t v9 = *(void *)(v5 + 24);
        uint64_t v10 = *(std::__shared_weak_count **)(v5 + 48);
        if (!v10) {
          goto LABEL_233;
        }
      }
      else
      {
        uint64_t v136 = 0;
        uint64_t v9 = 0;
        uint64_t v10 = *(std::__shared_weak_count **)(v5 + 48);
        if (!v10) {
          goto LABEL_233;
        }
      }
      uint64_t v11 = std::__shared_weak_count::lock(v10);
      if (v11)
      {
        if (v9 && *(void *)(v5 + 40))
        {
          std::string v134 = v11;
          unint64_t v135 = v4;
          atomic_store(1u, (unsigned __int8 *)v5);
          uint64_t v12 = +[VKSharedResourcesManager sharedResources];
          (*(void (**)(void *__return_ptr))(*(void *)[v12 gglDevice] + 24))(v156);

          char v13 = *(std::__shared_weak_count **)(a1 + 32);
          if (v13) {
            uint64_t v14 = std::__shared_weak_count::lock(v13);
          }
          else {
            uint64_t v14 = 0;
          }
          uint64_t v15 = *(void *)(v5 + 112);
          uint64_t v16 = *(void *)(v5 + 120);
          unint64_t v17 = 0xFCFCFCFCFCFCFCFDLL
              * ((uint64_t)(*(void *)(a1 + 120) - *(void *)(a1 + 112)) >> 3)
              * ((uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 4);
          unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - v15) >> 4);
          if (v17 <= v18)
          {
            if (v17 >= v18)
            {
              uint64_t v19 = *(void *)(v5 + 120);
            }
            else
            {
              uint64_t v19 = v15
                  + 0xF0F0F0F0F0F0F10
                  * ((uint64_t)(*(void *)(a1 + 120) - *(void *)(a1 + 112)) >> 3)
                  * ((uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 4);
              while (v16 != v19)
              {
                v16 -= 80;
                std::__destroy_at[abi:nn180100]<md::ClientDrapedMeshes,0>(v16);
              }
              *(void *)(v5 + 120) = v19;
            }
          }
          else
          {
            std::vector<md::ClientDrapedMeshes>::__append((char **)(v5 + 112), v17 - v18);
            uint64_t v19 = *(void *)(v5 + 120);
          }
          if (v19 == *(void *)(v5 + 112))
          {
            atomic_store(2u, (unsigned __int8 *)v5);
          }
          else
          {
            unint64_t v133 = v14;
            uint64_t v20 = *(void *)(a1 + 136);
            if (*(void *)(a1 + 144) != v20)
            {
              uint64_t v21 = 0;
              unsigned int v138 = 0;
              uint64_t v137 = v5;
              while (1)
              {
                uint64_t v22 = (std::__shared_weak_count *)(v20 + 80 * v21);
                uint64_t v23 = *(void **)v22->__vftable[1].__get_deleter;
                uint64_t v25 = v23[5];
                uint64_t v24 = v23[6];
                unint64_t v26 = v23[1];
                uint64_t v27 = (std::__shared_weak_count *)operator new(0xF8uLL);
                v27->__shared_weak_owners_ = 0;
                v27->__shared_owners_ = 0;
                v27->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585298;
                uint64_t v28 = (v24 - v25) / v26;
                ggl::BufferData::BufferData((uint64_t)&v27[1], 16, 0, 0, 1, v28);
                v27[9].__shared_weak_owners_ = (uint64_t)"TempFoundation Verts";
                v27[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::Draping::foundationVboReflection;
                v27[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55CF48;
                v27[9].__shared_owners_ = (uint64_t)&unk_1EF55CF68;
                uint64_t v180 = &v27[1];
                __int32 v181 = v27;
                uint64_t v165 = v22;
                uint64_t v166 = v27 + 1;
                *(void *)uint64_t v167 = v27;
                atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
                *(void *)&v167[8] = v28;
                *(void *)&v167[16] = &v178;
                p_long long buf = 0;
                uint64_t v29 = operator new(0x30uLL);
                *uint64_t v29 = &unk_1EF56DCF8;
                v29[1] = v22;
                v29[2] = v27 + 1;
                v29[3] = v27;
                uint64_t v166 = 0;
                *(void *)uint64_t v167 = 0;
                *((_OWORD *)v29 + 2) = *(_OWORD *)&v167[8];
                p_long long buf = (long long *)v29;
                long long v172 = 0uLL;
                (*(void (**)(void, long long *, long long *))(*(void *)v156[0] + 16))(v156[0], &buf, &v172);
                unint64_t v30 = (std::__shared_weak_count *)*((void *)&v172 + 1);
                if (*((void *)&v172 + 1)
                  && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v172 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                  std::__shared_weak_count::__release_weak(v30);
                }
                if (p_buf == &buf) {
                  break;
                }
                if (p_buf) {
                  (*(void (**)(void))(*(void *)p_buf + 40))();
                }
                uint64_t v31 = *(std::__shared_weak_count **)v167;
                if (*(void *)v167) {
                  goto LABEL_36;
                }
LABEL_38:
                unint64_t v32 = v180;
                uint64_t v33 = v181;
                if (v181) {
                  atomic_fetch_add_explicit(&v181->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                uint64_t v34 = v22->__vftable;
                on_zero_shared = v22->__vftable[2].__on_zero_shared;
                get_deleter = (std::__shared_weak_count *)v34[2].__get_deleter;
                if (get_deleter) {
                  atomic_fetch_add_explicit(&get_deleter->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                {
                  {
                    ggl::MeshTyped<ggl::Draping::FoundationVbo>::attributesReflection(void)::r = (uint64_t)&ggl::Draping::foundationVboReflection;
                  }
                  ggl::MeshTyped<ggl::Draping::FoundationVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::Draping::FoundationVbo>::attributesReflection(void)::r;
                  *(void *)algn_1E95919D8 = 1;
                }
                *((void *)&buf + 1) = "TempFoundationMesh";
                uint64_t v187 = 0;
                uint64_t v188 = 0;
                p_long long buf = 0;
                LODWORD(v189) = 0;
                *(void *)&long long buf = &unk_1EF5606B0;
                uint64_t v185 = &unk_1EF5606D0;
                float v190 = &ggl::MeshTyped<ggl::Draping::FoundationVbo>::typedReflection(void)::r;
                memset(v191, 0, sizeof(v191));
                {
                  operator new();
                }
                uint64_t v37 = &qword_1EB32C000;
                double v193 = 0;
                double v194 = 0;
                uint64_t v192 = ggl::Allocator::instance(void)::alloc;
                v196[0] = 0;
                {
                  uint64_t v37 = &qword_1EB32C000;
                  if (v122) {
                    operator new();
                  }
                }
                uint64_t v38 = v37[287];
                uint64_t v197 = 0;
                v196[1] = v38;
                float v195 = v196;
                *(void *)&long long buf = &unk_1EF562BA0;
                uint64_t v185 = &unk_1EF562BC0;
                *(void *)&long long v172 = v32;
                *((void *)&v172 + 1) = v33;
                if (v33) {
                  atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>((uint64_t)v191, (uint64_t *)&v172, (uint64_t *)&v173, 1uLL);
                uint64_t v39 = (std::__shared_weak_count *)*((void *)&v172 + 1);
                if (*((void *)&v172 + 1)
                  && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v172 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                  std::__shared_weak_count::__release_weak(v39);
                }
                if (get_deleter) {
                  atomic_fetch_add_explicit(&get_deleter->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                uint64_t v40 = v194;
                double v193 = on_zero_shared;
                double v194 = get_deleter;
                if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                  std::__shared_weak_count::__release_weak(v40);
                }
                *(void *)&long long buf = &unk_1EF561488;
                uint64_t v185 = &unk_1EF5614A8;
                if (get_deleter && !atomic_fetch_add(&get_deleter->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))get_deleter->__on_zero_shared)(get_deleter);
                  std::__shared_weak_count::__release_weak(get_deleter);
                }
                if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                  std::__shared_weak_count::__release_weak(v33);
                }
                uint64_t v41 = v20 + 80 * v21;
                uint64_t v42 = *(uint64_t **)(v41 + 64);
                uint64_t v43 = v42[2];
                long long v140 = *(_OWORD *)(v41 + 16);
                long long v141 = v178;
                ggl::Mesh::Mesh((uint64_t)v150, (uint64_t)&buf);
                v150[0] = &unk_1EF561488;
                v150[2] = &unk_1EF5614A8;
                long long v151 = v140;
                uint64_t v152 = *v42;
                unint64_t v44 = (std::__shared_weak_count *)v42[1];
                unint64_t v153 = v44;
                if (v44) {
                  atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                uint64_t v154 = v43;
                long long v155 = v141;
                ggl::Mesh::~Mesh((ggl::Mesh *)&buf);
                uint64_t v45 = v181;
                if (v181 && !atomic_fetch_add(&v181->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                  std::__shared_weak_count::__release_weak(v45);
                }
                uint64_t v46 = *(void *)(a1 + 112);
                if (*(void *)(a1 + 120) != v46)
                {
                  unint64_t v47 = 0;
                  unsigned int v48 = 1;
                  while (2)
                  {
                    uint64_t v49 = v46 + 136 * v47;
                    uint64_t v50 = *(uint64_t **)(v49 + 8);
                    if (*(unsigned char *)(v49 + 128)) {
                      BOOL v51 = v50 == 0;
                    }
                    else {
                      BOOL v51 = 1;
                    }
                    if (!v51)
                    {
                      __int16 v148 = *(_WORD *)(a1 + 56);
                      uint64_t v149 = *(void *)(a1 + 60);
                      __int16 v146 = *(_WORD *)(a1 + 80);
                      uint64_t v147 = *(void *)(a1 + 84);
                      std::chrono::steady_clock::now();
                      long long v52 = **(void ***)(*v50 + 64);
                      uint64_t v54 = v52[5];
                      uint64_t v53 = v52[6];
                      unint64_t v55 = v52[1];
                      unsigned int v56 = (std::__shared_weak_count *)operator new(0xF8uLL);
                      v56->__shared_weak_owners_ = 0;
                      v56->__shared_owners_ = 0;
                      v56->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5851B8;
                      uint64_t v57 = (v53 - v54) / v55;
                      ggl::BufferData::BufferData((uint64_t)&v56[1], 16, 0, 0, 6, v57);
                      v56[9].__shared_weak_owners_ = (uint64_t)"Temp Overlay Verts";
                      v56[10].__vftable = (std::__shared_weak_count_vtbl *)&ggl::DaVinci::texturedCompressedDrapingVboReflection;
                      v56[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55CE48;
                      v56[9].__shared_owners_ = (uint64_t)&unk_1EF55CE68;
                      *(void *)&long long v178 = v56 + 1;
                      *((void *)&v178 + 1) = v56;
                      uint64_t v180 = v50;
                      __int32 v181 = v56 + 1;
                      uint64_t v182 = v56;
                      atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
                      uint64_t v183 = v57;
                      p_long long buf = 0;
                      uint64_t v58 = (long long *)operator new(0x28uLL);
                      *(void *)uint64_t v58 = &unk_1EF56DD40;
                      *((void *)v58 + 1) = v50;
                      *((void *)v58 + 2) = v56 + 1;
                      *((void *)v58 + 3) = v56;
                      __int32 v181 = 0;
                      uint64_t v182 = 0;
                      *((void *)v58 + 4) = v57;
                      p_long long buf = v58;
                      uint64_t v158 = 0;
                      __int32 v157 = 0;
                      (*(void (**)(void, long long *, char **))(*(void *)v156[0] + 16))(v156[0], &buf, &v157);
                      float v59 = v158;
                      if (v158 && !atomic_fetch_add(&v158->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                        std::__shared_weak_count::__release_weak(v59);
                      }
                      if (p_buf == &buf)
                      {
                        (*(void (**)(long long *))(buf + 32))(&buf);
                        float32_t v60 = v182;
                        if (!v182) {
                          goto LABEL_84;
                        }
                      }
                      else
                      {
                        if (p_buf) {
                          (*(void (**)(void))(*(void *)p_buf + 40))();
                        }
                        float32_t v60 = v182;
                        if (!v182)
                        {
LABEL_84:
                          uint64_t v61 = *v50;
                          uint64_t v62 = (std::__shared_weak_count *)operator new(0xA8uLL);
                          v62->__shared_owners_ = 0;
                          p_shared_owners = &v62->__shared_owners_;
                          v62->__shared_weak_owners_ = 0;
                          v62->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589710;
                          long long v64 = v178;
                          if (*((void *)&v178 + 1)) {
                            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v178 + 1) + 8), 1uLL, memory_order_relaxed);
                          }
                          uint64_t v65 = *(std::__shared_weak_count **)(v61 + 104);
                          uint64_t v139 = *(std::__shared_weak_count_vtbl **)(v61 + 96);
                          if (v65) {
                            atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
                          }
                          {
                            {
                              ggl::MeshTyped<ggl::DaVinci::TexturedCompressedDrapingVbo>::attributesReflection(void)::r = (uint64_t)&ggl::DaVinci::texturedCompressedDrapingVboReflection;
                            }
                            ggl::MeshTyped<ggl::DaVinci::TexturedCompressedDrapingVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::TexturedCompressedDrapingVbo>::attributesReflection(void)::r;
                            unk_1E95904F0 = 1;
                          }
                          v62[3].__shared_weak_owners_ = 0;
                          v62[2].__shared_owners_ = 0;
                          v62[2].__shared_weak_owners_ = 0;
                          LODWORD(v62[3].__vftable) = 0;
                          v62[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5606B0;
                          v62[1].__shared_owners_ = (uint64_t)"TempOverlayMesh";
                          v62[1].__shared_weak_owners_ = (uint64_t)&unk_1EF5606D0;
                          v62[2].__vftable = 0;
                          v62[3].__shared_owners_ = (uint64_t)&ggl::MeshTyped<ggl::DaVinci::TexturedCompressedDrapingVbo>::typedReflection(void)::r;
                          v62[4].__vftable = 0;
                          v62[4].__shared_owners_ = 0;
                          {
                            operator new();
                          }
                          unint64_t v66 = &qword_1EB32C000;
                          uint64_t v67 = ggl::Allocator::instance(void)::alloc;
                          v62[6].__vftable = 0;
                          v62[5].__vftable = 0;
                          v62[5].__shared_owners_ = 0;
                          v62[4].__shared_weak_owners_ = v67;
                          {
                            unint64_t v66 = &qword_1EB32C000;
                            if (v120) {
                              operator new();
                            }
                          }
                          v62[6].__shared_owners_ = v66[287];
                          v62[6].__shared_weak_owners_ = 0;
                          v62[5].__shared_weak_owners_ = (uint64_t)&v62[6];
                          v62[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF562AA0;
                          v62[1].__shared_weak_owners_ = (uint64_t)&unk_1EF562AC0;
                          long long buf = v64;
                          if (*((void *)&v64 + 1)) {
                            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v64 + 1) + 8), 1uLL, memory_order_relaxed);
                          }
                          std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::__assign_with_size[abi:nn180100]<std::shared_ptr<ggl::VertexData> const*,std::shared_ptr<ggl::VertexData> const*>((uint64_t)&v62[3].__shared_weak_owners_, (uint64_t *)&buf, (uint64_t *)&v185, 1uLL);
                          uint64_t v68 = (std::__shared_weak_count *)*((void *)&buf + 1);
                          if (*((void *)&buf + 1)
                            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                            std::__shared_weak_count::__release_weak(v68);
                            if (v65) {
LABEL_96:
                            }
                              atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
                          }
                          else if (v65)
                          {
                            goto LABEL_96;
                          }
                          shared_owners = (std::__shared_weak_count *)v62[5].__shared_owners_;
                          v62[5].__vftable = v139;
                          v62[5].__shared_owners_ = (uint64_t)v65;
                          if (shared_owners
                            && !atomic_fetch_add(&shared_owners->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
                            std::__shared_weak_count::__release_weak(shared_owners);
                          }
                          v62[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF561228;
                          v62[1].__shared_weak_owners_ = (uint64_t)&unk_1EF561248;
                          if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                            std::__shared_weak_count::__release_weak(v65);
                            if (*((void *)&v64 + 1)) {
                              goto LABEL_103;
                            }
                          }
                          else if (*((void *)&v64 + 1))
                          {
LABEL_103:
                            if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v64 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                            {
                              (*(void (**)(void))(**((void **)&v64 + 1) + 16))(*((void *)&v64 + 1));
                              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v64 + 1));
                            }
                          }
                          *(_OWORD *)uint64_t v167 = *((_OWORD *)v50 + 1);
                          atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
                          char v70 = *((unsigned char *)v50 + 32);
                          __int16 v71 = *((_WORD *)v50 + 30);
                          uint64_t v165 = v62 + 1;
                          uint64_t v166 = v62;
                          atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
                          v167[16] = v70;
                          uint64_t v72 = *(uint64_t *)((char *)v50 + 52);
                          *(_OWORD *)&v167[20] = *(_OWORD *)((char *)v50 + 36);
                          uint64_t v168 = v72;
                          __int16 v169 = v71;
                          uint64_t v170 = 0;
                          uint64_t v171 = 0;
                          if (atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
                              goto LABEL_110;
                            }
LABEL_113:
                            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                            std::__shared_weak_count::__release_weak(v62);
                            uint64_t v73 = (std::__shared_weak_count *)*((void *)&v178 + 1);
                            if (*((void *)&v178 + 1)) {
                              goto LABEL_114;
                            }
                          }
                          else
                          {
                            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                            std::__shared_weak_count::__release_weak(v62);
                            if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
                              goto LABEL_113;
                            }
LABEL_110:
                            uint64_t v73 = (std::__shared_weak_count *)*((void *)&v178 + 1);
                            if (*((void *)&v178 + 1))
                            {
LABEL_114:
                              if (!atomic_fetch_add(&v73->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                              {
                                ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                                std::__shared_weak_count::__release_weak(v73);
                              }
                            }
                          }
                          uint64_t v74 = v165;
                          shared_weak_owners = (void *)v165[2].__shared_weak_owners_;
                          uint64_t v76 = *shared_weak_owners;
                          uint64_t v77 = (std::__shared_weak_count *)shared_weak_owners[1];
                          uint64_t v79 = *(void *)(*shared_weak_owners + 40);
                          uint64_t v78 = *(void *)(*shared_weak_owners + 48);
                          unint64_t v80 = *(void *)(*shared_weak_owners + 8);
                          uint64_t v163 = *shared_weak_owners;
                          unint64_t v164 = v77;
                          if (v77) {
                            atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
                          }
                          uint64_t v179 = 0;
                          char v81 = HIBYTE(v148) - HIBYTE(v146);
                          if (HIBYTE(v148) < HIBYTE(v146))
                          {
                            char v82 = HIBYTE(v146) - HIBYTE(v148);
                            char v159 = HIBYTE(v146) - HIBYTE(v148);
                            __powidf2();
                            __int16 v160 = (int)v83;
                            __int16 v161 = WORD2(v147) - (HIDWORD(v149) << v82);
                            __int16 v162 = v147 - ((_WORD)v149 << v82);
                            *(void *)&long long buf = &unk_1EF56B9F8;
                            unint64_t v84 = convertHighToLowZTileSpace;
                            goto LABEL_122;
                          }
                          if (HIBYTE(v148) > HIBYTE(v146))
                          {
                            char v159 = HIBYTE(v148) - HIBYTE(v146);
                            __powidf2();
                            __int16 v160 = (int)v85;
                            __int16 v161 = WORD2(v149) - (HIDWORD(v147) << v81);
                            __int16 v162 = v149 - ((_WORD)v147 << v81);
                            *(void *)&long long buf = &unk_1EF56B9F8;
                            unint64_t v84 = convertLowToHighZTileSpace;
LABEL_122:
                            *((void *)&buf + 1) = v84;
                            p_long long buf = &buf;
                            std::__function::__value_func<gm::Matrix<float,2,1> ()(ZDiffParams,gm::Matrix<float,2,1>,float)>::swap[abi:nn180100](&buf, &v178);
                            if (p_buf == &buf)
                            {
                              (*(void (**)(long long *))(buf + 32))(&buf);
                            }
                            else if (p_buf)
                            {
                              (*(void (**)(void))(*(void *)p_buf + 40))();
                            }
                            *(void *)&long long v172 = &v148;
                            *((void *)&v172 + 1) = &v146;
                            *(void *)&long long v173 = &v178;
                            *((void *)&v173 + 1) = &v159;
                            uint64_t v174 = v76;
                            BOOL v175 = v77;
                            if (v77) {
                              atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
                            }
                            unint64_t v176 = (v78 - v79) / v80;
                            int v177 = 1199570688;
                            p_long long buf = 0;
                            uint64_t v86 = (char *)operator new(0x48uLL);
                            *(void *)uint64_t v86 = &unk_1EF56DBD8;
                            *(_OWORD *)(v86 + 8) = v172;
                            *(_OWORD *)(v86 + 24) = v173;
                            *((void *)v86 + 5) = v76;
                            *((void *)v86 + 6) = v77;
                            if (v77) {
                              atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
                            }
                            *((void *)v86 + 7) = v176;
                            *((_DWORD *)v86 + 16) = v177;
                            p_long long buf = (long long *)v86;
                            __int32 v181 = 0;
                            uint64_t v180 = 0;
                            (*(void (**)(void, long long *, void **))(*(void *)v156[0] + 16))(v156[0], &buf, &v180);
                            unint64_t v87 = v181;
                            if (v181 && !atomic_fetch_add(&v181->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                              std::__shared_weak_count::__release_weak(v87);
                            }
                            if (p_buf == &buf)
                            {
                              (*(void (**)(long long *))(buf + 32))(&buf);
                              uint64_t v88 = v175;
                              if (!v175) {
                                goto LABEL_141;
                              }
                            }
                            else
                            {
                              if (p_buf) {
                                (*(void (**)(void))(*(void *)p_buf + 40))();
                              }
                              uint64_t v88 = v175;
                              if (!v175)
                              {
LABEL_141:
                                uint64_t v74 = v165;
                                goto LABEL_142;
                              }
                            }
                            if (!atomic_fetch_add(&v88->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                              std::__shared_weak_count::__release_weak(v88);
                            }
                            goto LABEL_141;
                          }
LABEL_142:
                          v156[1] = v154;
                          uint64_t v89 = v74[4].__vftable;
                          uint64_t v91 = v89[1].~__shared_weak_count;
                          unint64_t v90 = v89[1].~__shared_weak_count_0;
                          unint64_t v92 = (unint64_t)v89->~__shared_weak_count_0;
                          unint64_t v93 = *(void **)v74[2].__shared_weak_owners_;
                          uint64_t v95 = v93[5];
                          uint64_t v94 = v93[6];
                          unint64_t v96 = v93[1];
                          uint64_t v97 = (char *)operator new(0x98uLL);
                          std::__shared_ptr_emplace<gdc::DCEL>::__shared_ptr_emplace[abi:nn180100]<unsigned int,std::allocator<gdc::DCEL>,0>((uint64_t)v97, (v94 - v95) / v96);
                          unint64_t v98 = ((char *)v90 - (char *)v91) / v92;
                          __int32 v157 = v97 + 24;
                          uint64_t v158 = (std::__shared_weak_count *)v97;
                          gdc::DCEL::reserveFaces((gdc::DCEL *)(v97 + 24), v98 / 3);
                          int8x8_t v99 = (long long *)operator new(0x30uLL);
                          *(void *)int8x8_t v99 = &unk_1EF572FA8;
                          *((void *)v99 + 1) = &v157;
                          *((void *)v99 + 2) = v74 + 4;
                          *((void *)v99 + 3) = 0;
                          *((void *)v99 + 4) = v98;
                          *((void *)v99 + 5) = v98;
                          p_long long buf = v99;
                          __int32 v181 = 0;
                          uint64_t v180 = 0;
                          (*(void (**)(void, long long *, void **))(*(void *)v156[0] + 16))(v156[0], &buf, &v180);
                          uint8x8_t v100 = v181;
                          if (v181 && !atomic_fetch_add(&v181->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                            std::__shared_weak_count::__release_weak(v100);
                          }
                          if (p_buf == &buf)
                          {
                            (*(void (**)(long long *))(buf + 32))(&buf);
                          }
                          else if (p_buf)
                          {
                            (*(void (**)(void))(*(void *)p_buf + 40))();
                          }
                          if (((*((void *)v157 + 4) - *((void *)v157 + 3)) >> 2) != (v98 / 3))
                          {
                            if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                              dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                            }
                            uint64_t v101 = (id)GEOGetVectorKitVKDefaultLog_log;
                            if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
                            {
                              uint64_t v102 = (*((void *)v157 + 4) - *((void *)v157 + 3)) >> 2;
                              LODWORD(buf) = 67109376;
                              DWORD1(buf) = v102;
                              WORD4(buf) = 1024;
                              *(_DWORD *)((char *)&buf + 10) = v98 / 3;
                              _os_log_impl(&dword_1A1780000, v101, OS_LOG_TYPE_ERROR, "face count does not match (%d to %d)", (uint8_t *)&buf, 0xEu);
                            }
                          }
                          long long buf = 0uLL;
                          uint64_t v200 = 0;
                          uint64_t v189 = 0;
                          float v190 = 0;
                          uint64_t v188 = 0;
                          double v193 = 0;
                          double v194 = 0;
                          uint64_t v192 = 0;
                          uint64_t v198 = 0;
                          uint64_t v199 = 0;
                          uint64_t v197 = 0;
                          operator new();
                        }
                      }
                      if (!atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                        std::__shared_weak_count::__release_weak(v60);
                      }
                      goto LABEL_84;
                    }
                    unsigned int v103 = *(void **)(v49 + 24);
                    if (!v103) {
                      goto LABEL_68;
                    }
                    uint64_t v104 = *(void *)(v137 + 112) + 80 * (v48 + v138 * *(_DWORD *)(v137 + 56) - 1);
                    if (*(unsigned char *)(v49 + 112))
                    {
                      float v105 = *(float *)(a1 + 104);
                      float v106 = v105 * *(float *)(v49 + 104);
                      float v107 = *(float *)(v49 + 108) * v105;
                      *(_WORD *)uint64_t v144 = *(_WORD *)(a1 + 56);
                      uint64_t v145 = *(void *)(a1 + 60);
                      *(_WORD *)uint64_t v142 = *(_WORD *)(a1 + 80);
                      uint64_t v143 = *(void *)(a1 + 84);
                      md::DrapingLogic::drapeStrokeMesh(&buf, v156, (uint64_t)v150, v144, v103, v142, v106, v107);
                      if (*(unsigned __int8 *)(v104 + 24) == p_buf)
                      {
                        if (!*(unsigned char *)(v104 + 24)) {
                          goto LABEL_175;
                        }
                        long long v108 = buf;
                        long long buf = 0uLL;
                        uint64_t v109 = *(std::__shared_weak_count **)(v104 + 8);
                        *(_OWORD *)uint64_t v104 = v108;
                        if (v109 && !atomic_fetch_add(&v109->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                          std::__shared_weak_count::__release_weak(v109);
                        }
                        *(void *)(v104 + 16) = v185;
                        if (!(_BYTE)p_buf) {
                          goto LABEL_175;
                        }
LABEL_172:
                        unsigned int v111 = (std::__shared_weak_count *)*((void *)&buf + 1);
                        if (*((void *)&buf + 1)
                          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                          std::__shared_weak_count::__release_weak(v111);
                        }
                      }
                      else
                      {
                        if (*(unsigned char *)(v104 + 24))
                        {
                          unsigned int v110 = *(std::__shared_weak_count **)(v104 + 8);
                          if (v110 && !atomic_fetch_add(&v110->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                            std::__shared_weak_count::__release_weak(v110);
                          }
                          *(unsigned char *)(v104 + 24) = 0;
                          if (!(_BYTE)p_buf) {
                            goto LABEL_175;
                          }
                          goto LABEL_172;
                        }
                        *(_OWORD *)uint64_t v104 = buf;
                        long long buf = 0uLL;
                        *(void *)(v104 + 16) = v185;
                        *(unsigned char *)(v104 + 24) = 1;
                        if ((_BYTE)p_buf) {
                          goto LABEL_172;
                        }
                      }
                    }
LABEL_175:
                    if (*(unsigned char *)(v49 + 124))
                    {
                      float v112 = *(float *)(a1 + 104);
                      float v113 = v112 * *(float *)(v49 + 116);
                      float v114 = *(float *)(v49 + 120) * v112;
                      *(_WORD *)uint64_t v144 = *(_WORD *)(a1 + 56);
                      uint64_t v145 = *(void *)(a1 + 60);
                      int v115 = *(void **)(v49 + 24);
                      *(_WORD *)uint64_t v142 = *(_WORD *)(a1 + 80);
                      uint64_t v143 = *(void *)(a1 + 84);
                      md::DrapingLogic::drapeStrokeMesh(&buf, v156, (uint64_t)v150, v144, v115, v142, v113, v114);
                      if (*(unsigned __int8 *)(v104 + 56) == p_buf)
                      {
                        if (!*(unsigned char *)(v104 + 56)) {
                          goto LABEL_68;
                        }
                        long long v116 = buf;
                        long long buf = 0uLL;
                        unint64_t v117 = *(std::__shared_weak_count **)(v104 + 40);
                        *(_OWORD *)(v104 + 32) = v116;
                        if (v117 && !atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                          std::__shared_weak_count::__release_weak(v117);
                        }
                        *(void *)(v104 + 48) = v185;
                        if (!(_BYTE)p_buf) {
                          goto LABEL_68;
                        }
                        goto LABEL_190;
                      }
                      if (*(unsigned char *)(v104 + 56))
                      {
                        uint64_t v118 = *(std::__shared_weak_count **)(v104 + 40);
                        if (v118 && !atomic_fetch_add(&v118->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                          std::__shared_weak_count::__release_weak(v118);
                        }
                        *(unsigned char *)(v104 + 56) = 0;
                        if (!(_BYTE)p_buf) {
                          goto LABEL_68;
                        }
LABEL_190:
                        uint64_t v119 = (std::__shared_weak_count *)*((void *)&buf + 1);
                        if (*((void *)&buf + 1)
                          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                          std::__shared_weak_count::__release_weak(v119);
                        }
                        goto LABEL_68;
                      }
                      *(_OWORD *)(v104 + 32) = buf;
                      long long buf = 0uLL;
                      *(void *)(v104 + 48) = v185;
                      *(unsigned char *)(v104 + 56) = 1;
                      if ((_BYTE)p_buf) {
                        goto LABEL_190;
                      }
                    }
LABEL_68:
                    unint64_t v47 = v48;
                    uint64_t v46 = *(void *)(a1 + 112);
                    ++v48;
                    if (0xF0F0F0F0F0F0F0F1 * ((*(void *)(a1 + 120) - v46) >> 3) <= v47) {
                      break;
                    }
                    continue;
                  }
                }
                unint64_t v121 = v153;
                if (v153 && !atomic_fetch_add(&v153->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                  std::__shared_weak_count::__release_weak(v121);
                }
                ggl::Mesh::~Mesh((ggl::Mesh *)v150);
                uint64_t v20 = *(void *)(a1 + 136);
                uint64_t v21 = ++v138;
                uint64_t v5 = v137;
                if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 144) - v20) >> 4) <= v138) {
                  goto LABEL_214;
                }
              }
              (*(void (**)(long long *))(buf + 32))(&buf);
              uint64_t v31 = *(std::__shared_weak_count **)v167;
              if (!*(void *)v167) {
                goto LABEL_38;
              }
LABEL_36:
              if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                std::__shared_weak_count::__release_weak(v31);
              }
              goto LABEL_38;
            }
LABEL_214:
            atomic_store(2u, (unsigned __int8 *)v5);
            uint64_t v123 = *(std::__shared_weak_count **)(a1 + 16);
            uint64_t v14 = v133;
            if (v123)
            {
              uint64_t v124 = std::__shared_weak_count::lock(v123);
              if (v124)
              {
                uint64_t v125 = v124;
                unint64_t v126 = *(uint64_t **)(a1 + 8);
                if (v126)
                {
                  uint64_t v127 = *v126;
                  if (*v126)
                  {
                    LOBYTE(buf) = 10;
                    md::MapEngine::setNeedsTick(v127, &buf);
                  }
                }
                if (!atomic_fetch_add(&v125->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                  std::__shared_weak_count::__release_weak(v125);
                }
              }
            }
          }
          if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
          uint64_t v4 = v135;
          if (v156[0])
          {
            uint64_t v128 = (*(uint64_t (**)(void))(*(void *)v156[0] + 24))(v156[0]);
            uint64_t v129 = v156[0];
            v156[0] = 0;
            *(void *)&long long buf = v129;
            (*(void (**)(uint64_t, long long *))(*(void *)v128 + 48))(v128, &buf);
            uint64_t v130 = buf;
            *(void *)&long long buf = 0;
            if (v130) {
              (*(void (**)(uint64_t))(*(void *)v130 + 8))(v130);
            }
            uint64_t v131 = v156[0];
            v156[0] = 0;
            if (v131) {
              (*(void (**)(uint64_t))(*(void *)v131 + 8))(v131);
            }
          }
          uint64_t v11 = v134;
        }
        if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          uint64_t v132 = v11;
          ((void (*)(void))v11->__on_zero_shared)();
          std::__shared_weak_count::__release_weak(v132);
        }
      }
LABEL_233:
      if (v136 && !atomic_fetch_add(&v136->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
        std::__shared_weak_count::__release_weak(v136);
      }
      goto LABEL_236;
    }
  }
}

void sub_1A1887D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ggl::BufferMemory *a10, ggl::BufferMemory *a11, uint64_t a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14, std::__shared_weak_count *a15)
{
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  ggl::Loader::~Loader((ggl::Loader *)&STACK[0x290]);
  if (!atomic_fetch_add(&a13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
    std::__shared_weak_count::__release_weak(a13);
  }
  if (a15 && !atomic_fetch_add(&a15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
    std::__shared_weak_count::__release_weak(a15);
  }
  if (!atomic_fetch_add(&a14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
    std::__shared_weak_count::__release_weak(a14);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#3},std::allocator<md::LabelGlyphImageLoader::startQueuedLoads(void)::$_0::operator() const(void)::{lambda(void)#3}>,void ()(void)>::operator()(uint64_t a1)
{
  int8x8_t v2 = (std::recursive_mutex *)(*(void *)(a1 + 8) + 24);
  std::recursive_mutex::lock(v2);
  uint64_t v3 = *(std::mutex **)(a1 + 24);
  std::mutex::lock(v3);
  uint64_t sig = v3[1].__m_.__sig;
  if (sig)
  {
    atomic_fetch_add((atomic_uint *volatile)(sig + 64), 0xFFFFFFFF);
    uint64_t v5 = *(void *)(a1 + 8);
    *(unsigned char *)(v5 + 3045) = 1;
    *(unsigned char *)(v5 + 3047) = 1;
    unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v5 + 3058));
    if (v6)
    {
      uint64_t v7 = *(void *)(v5 + 136);
      if (v7)
      {
        uint64_t v8 = *(void *)(v7 + 56);
        if (v8)
        {
          uint64_t v10 = v5;
          char v9 = 9;
          (*(void (**)(uint64_t, uint64_t *, char *))(*(void *)v8 + 48))(v8, &v10, &v9);
        }
      }
    }
  }
  std::mutex::unlock(v3);
  std::recursive_mutex::unlock(v2);
}

void sub_1A18881D4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v2);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t md::PhysicalLabelFeature::newRootPart(md::LabelFeature *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  uint64_t v5 = *((void *)a1 + 29);
  if (!v5) {
    goto LABEL_12;
  }
  unsigned int v11 = *(_DWORD *)(a3 + 48);
  uint64_t v12 = (void *)((char *)a1 + 232);
  do
  {
    unsigned int v13 = *(_DWORD *)(v5 + 32);
    BOOL v14 = v13 >= v11;
    if (v13 >= v11) {
      uint64_t v15 = (uint64_t *)v5;
    }
    else {
      uint64_t v15 = (uint64_t *)(v5 + 8);
    }
    if (v14) {
      uint64_t v12 = (void *)v5;
    }
    uint64_t v5 = *v15;
  }
  while (*v15);
  if (v12 == (void *)((char *)a1 + 232) || v11 < *((_DWORD *)v12 + 8))
  {
LABEL_12:
    uint64_t v16 = 0;
    uint64_t v62 = 0;
    unint64_t v63 = 0;
    return v16;
  }
  uint64_t v19 = v12[5];
  unint64_t v18 = (std::__shared_weak_count *)v12[6];
  uint64_t v62 = v19;
  unint64_t v63 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v19 || *(float *)(a4 + 236) == 0.0 || *((void *)a1 + 48) == *((void *)a1 + 49))
  {
    uint64_t v16 = 0;
    if (!v18) {
      return v16;
    }
    goto LABEL_86;
  }
  unsigned int v20 = *(unsigned __int8 *)(a3 + 404);
  if (!(*(uint64_t (**)(uint64_t))(*(void *)v19 + 200))(v19)
    || ((uint64_t v21 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v19 + 200))(v19),
         uint64_t v23 = v21,
         !*(void *)v21)
     || *((_DWORD *)v21 + 10) != *(_DWORD *)(*(void *)v21 + 252)
     || (uint64_t v24 = (uint64_t *)*((void *)v21 + 3)) == 0
     || *((__int16 *)v21 + 17) < 0)
    && ((md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)v21, v21[164], v22),
         !*(void *)v23)
     || *((_DWORD *)v23 + 10) != *(_DWORD *)(*(void *)v23 + 252)
     || (uint64_t v24 = (uint64_t *)*((void *)v23 + 3)) == 0)
    || *((__int16 *)v23 + 17) < 0
    || (uint64_t v25 = *v24) == 0
    || (unsigned __int8 v26 = *(unsigned char *)(v25 + 38), v26 == 0xFF))
  {
    unsigned __int8 v26 = 0;
  }
  uint64_t v27 = *(void *)(a4 + 280);
  if (v27)
  {
    if (vabds_f32(*(float *)(v27 + 8), *(float *)(a4 + 104)) >= 0.01)
    {
      md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>((unsigned __int8 *)a4, v27, 0);
      uint64_t v27 = *(void *)(a4 + 280);
    }
  }
  else
  {
    uint64_t v27 = md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(a4, 0);
    *(void *)(a4 + 280) = v27;
  }
  uint64_t v28 = *(void *)v27;
  unint64_t v29 = (*(uint64_t (**)(md::LabelFeature *))(*(void *)a1 + 488))(a1);
  unint64_t v30 = (unsigned __int8 *)*((void *)a1 + 20);
  uint64_t v31 = (unsigned __int8 *)*((void *)a1 + 21);
  if (v29 > 0x6DB6DB6DB6DB6DB7 * ((v31 - v30) >> 3))
  {
    md::LabelFeature::updateTextVector(a1);
    unint64_t v30 = (unsigned __int8 *)*((void *)a1 + 20);
    uint64_t v31 = (unsigned __int8 *)*((void *)a1 + 21);
  }
  md::TextDataStore::textDataForZoom(&v60, v30, v31, v26, v28 + 72);
  uint64_t v32 = v60;
  if (v60)
  {
    uint64_t v33 = (std::__shared_weak_count *)operator new(0xB0uLL);
    v33->__shared_owners_ = 0;
    v33->__shared_weak_owners_ = 0;
    v33->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582A90;
    uint64_t v34 = (mdm::Allocator *)md::LabelText::LabelText((uint64_t)&v33[1], v32, (uint64_t)v61, v20);
    uint64_t v58 = v34;
    float v59 = v33;
    uint64_t v35 = *((void *)a1 + 24);
    if (v20 >= 0x17) {
      uint64_t v36 = 23;
    }
    else {
      uint64_t v36 = v20;
    }
    int v37 = atomic_load((unsigned __int8 *)(v35 + 224 + v36));
    if (v37 == 254)
    {
      if (*(unsigned char *)(v35 + 289)) {
        unsigned int v38 = 24;
      }
      else {
        unsigned int v38 = 5;
      }
      uint64_t v39 = *(unsigned __int8 **)(v35 + 128);
      uint64_t v40 = *(unsigned __int8 **)(v35 + 136);
      int64_t v41 = v40 - v39;
      if (v40 == v39)
      {
        unsigned int v44 = -1;
      }
      else
      {
        uint64_t v42 = 0;
        unint64_t v43 = v41 / 112;
        if (v43 <= 1) {
          unint64_t v43 = 1;
        }
        unsigned int v44 = -1;
        float v45 = 1000.0;
        while (1)
        {
          int v46 = *v39;
          v39 += 112;
          int v47 = v36 - v46;
          if (v36 == v46) {
            break;
          }
          if (v47 >= 0) {
            unsigned int v48 = v47;
          }
          else {
            unsigned int v48 = -v47;
          }
          if (v48 <= v38)
          {
            float v49 = (float)v47;
            if (v47 < 0) {
              float v49 = (float)v47 * -0.8;
            }
            if (v49 < v45) {
              unsigned int v44 = v42;
            }
            float v45 = fminf(v49, v45);
          }
          if (v43 == ++v42) {
            goto LABEL_66;
          }
        }
        unsigned int v44 = v42;
      }
LABEL_66:
      atomic_store(v44, (unsigned __int8 *)(v35 + 224 + v36));
    }
    else
    {
      unsigned int v44 = (char)v37;
    }
    if ((v44 & 0x80000000) != 0 || ((uint64_t v50 = *(void *)(v35 + 128), v58) ? (v51 = v50 == 0) : (v51 = 1), v51))
    {
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v52 = mdm::Allocator::instance(v34);
      uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v52 + 16))(v52, 1488, 8);
      int v53 = (*(uint64_t (**)(md::LabelFeature *))(*(void *)a1 + 264))(a1);
      md::CurvedTextLabelPart::CurvedTextLabelPart(v16, v53, &v58, a2, a3, a4, &v62, (uint64_t)&v57, 0.0, a5, 0);
      *(_WORD *)(v16 + 870) = 257;
      double v54 = *(double *)(v50 + 112 * v44 + 8);
      if (*(unsigned char *)(*((void *)a1 + 24) + 290)) {
        double v54 = v54 * 0.0000000249532021;
      }
      if (!*(unsigned char *)(v16 + 1416)) {
        *(unsigned char *)(v16 + 1416) = 1;
      }
      *(double *)(v16 + 1424) = v54;
    }
    unint64_t v55 = v59;
    if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  unsigned int v56 = v61;
  if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
  unint64_t v18 = v63;
  if (v63)
  {
LABEL_86:
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v16;
}

void sub_1A18887B8(mdm::Allocator *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v5 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v3, 1488);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va2);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

void *md::StandardLabeler::layoutLabelsForStaging(md::StandardLabeler *this)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  __int16 v32 = 257;
  char v33 = 1;
  int8x8_t v2 = (md::Label **)*((void *)this + 9);
  for (uint64_t i = (md::Label **)*((void *)this + 10); v2 != i; v2 += 2)
    md::Label::layoutForStaging(*v2, *((void *)this + 3), *((md::LabelPool **)this + 6), &v32);
  v38[0] = &unk_1EF5717C0;
  uint64_t v39 = v38;
  v36[0] = &unk_1EF571808;
  int v37 = v36;
  int64_t v41 = v40;
  v40[0] = &unk_1EF571808;
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v4 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v4))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsCollision", "", buf, 2u);
  }

  if (v37 == v36)
  {
    (*(void (**)(void *))(v36[0] + 32))(v36);
  }
  else if (v37)
  {
    (*(void (**)(void))(*v37 + 40))();
  }
  if (v39 == v38)
  {
    (*(void (**)(void *))(v38[0] + 32))(v38);
  }
  else if (v39)
  {
    (*(void (**)(void))(*v39 + 40))();
  }
  (*(void (**)(md::StandardLabeler *))(*(void *)this + 448))(this);
  uint64_t v5 = (float32x2_t **)*((void *)this + 17);
  for (uint64_t j = (float32x2_t **)*((void *)this + 18); v5 != j; ++v5)
    md::LabelCollider::addCollidableItem(*((char **)this + 7), *v5);
  *((_DWORD *)this + 95) = (*(uint64_t (**)(md::StandardLabeler *))(*(void *)this + 440))(this);
  *((void *)this + 48) = 0;
  uint64_t v7 = *((void *)this + 3);
  if (*(unsigned char *)(v7 + 3610)) {
    md::LabelPool::prepareDedupingGroupsForCollision(*((void **)this + 6), (LabelManager *)v7);
  }
  uint64_t v8 = (md::Label **)*((void *)this + 9);
  uint64_t v9 = (md::Label **)*((void *)this + 10);
  if (v8 != v9)
  {
    if (*(unsigned char *)(*((void *)this + 3) + 3610))
    {
      while (1)
      {
        uint64_t v10 = *v8;
        if (!*((unsigned char *)*v8 + 1290)) {
          goto LABEL_23;
        }
        if (*((unsigned char *)v10 + 1247)) {
          md::Label::updateReserveSpaceCollisionItem(*v8);
        }
        uint64_t v11 = *((void *)v10 + 42);
        if (v11) {
          break;
        }
LABEL_35:
        uint64_t v17 = *((void *)this + 7);
        uint64_t v18 = *((void *)*v8 + 41);
        unint64_t v19 = *(void *)(v17 + 136);
        unint64_t v20 = *(void *)(v17 + 144);
        unint64_t v21 = (2 * v19) | 1;
        if (v19 >= v20 && v20 < v21)
        {
          if (v21 <= 0x7D0) {
            int v23 = 2000;
          }
          else {
            int v23 = (2 * v19) | 1;
          }
          uint64_t v24 = (1 << -__clz(v23 - 1));
          uint64_t v25 = malloc_type_realloc(*(void **)(v17 + 152), 8 * v24, 0x2004093837F09uLL);
          if (!v25) {
            goto LABEL_23;
          }
          *(void *)(v17 + 144) = v24;
          *(void *)(v17 + 152) = v25;
          unint64_t v19 = *(void *)(v17 + 136);
        }
        *(void *)(*(void *)(v17 + 152) + 8 * v19) = v18;
        *(void *)(v17 + 136) = v19 + 1;
LABEL_23:
        v8 += 2;
        if (v8 == v9)
        {
          uint64_t v29 = *((void *)this + 7);
          unint64_t v30 = *(void *)(v29 + 136);
          if (v30)
          {
            std::__introsort<std::_ClassicAlgPolicy,md::LabelCollider::collideItems(void)::$_0 &,md::LabelCollisionItemBase **,false>(*(void *)(v29 + 152), (uint64_t *)(*(void *)(v29 + 152) + 8 * v30), 126 - 2 * __clz(v30), 1);
            md::LabelCollider::collideItems(v29, *(md::LabelCollisionItemBase ***)(v29 + 152), *(void *)(v29 + 136));
            LODWORD(v30) = *(_DWORD *)(*((void *)this + 7) + 136);
          }
          *((_DWORD *)this + 96) = v30;
          goto LABEL_52;
        }
      }
      uint64_t v12 = *((void *)this + 7);
      unint64_t v13 = *(void *)(v12 + 136);
      unint64_t v14 = *(void *)(v12 + 144);
      unint64_t v15 = (2 * v13) | 1;
      if (v13 >= v14 && v14 < v15)
      {
        if (v15 <= 0x7D0) {
          int v26 = 2000;
        }
        else {
          int v26 = (2 * v13) | 1;
        }
        uint64_t v27 = (1 << -__clz(v26 - 1));
        uint64_t v28 = malloc_type_realloc(*(void **)(v12 + 152), 8 * v27, 0x2004093837F09uLL);
        if (!v28) {
          goto LABEL_34;
        }
        *(void *)(v12 + 144) = v27;
        *(void *)(v12 + 152) = v28;
        unint64_t v13 = *(void *)(v12 + 136);
      }
      *(void *)(*(void *)(v12 + 152) + 8 * v13) = v11;
      *(void *)(v12 + 136) = v13 + 1;
LABEL_34:
      ++*((_DWORD *)this + 97);
      goto LABEL_35;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v35 = 0;
    do
    {
      if (*((unsigned char *)*v8 + 1290)) {
        md::Label::setCollisionResult((uint64_t)*v8, (uint64_t)buf);
      }
      v8 += 2;
    }
    while (v8 != v9);
  }
LABEL_52:
  if (!v41)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v41 + 48))(v41);
  uint64_t result = v41;
  if (v41 == v40) {
    return (void *)(*(uint64_t (**)(void *))(v40[0] + 32))(v40);
  }
  if (v41) {
    return (void *)(*(uint64_t (**)(void))(*v41 + 40))();
  }
  return result;
}

void sub_1A1888D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)va);
  _Unwind_Resume(a1);
}

uint64_t md::Label::updateReserveSpaceCollisionItem(md::Label *this)
{
  *((unsigned char *)this + 1247) = 0;
  uint64_t v2 = *((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = *((void *)this + 43);
  *((void *)this + 43) = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((unsigned char *)this + 1248) = 0;
  *((unsigned char *)this + 1277) = 1;
  char v4 = 0;
  if (*((_DWORD *)this + 181) != *((_DWORD *)this + 180))
  {
    uint64_t result = *((void *)this + 36);
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, char *))(*(void *)result + 504))(result, &v4);
      if (result)
      {
        if (!v4) {
          operator new();
        }
        *((unsigned char *)this + 1248) = 1;
      }
    }
  }
  return result;
}

void std::__function::__func<md::StandardLabeler::collideLabels(void)::$_1,std::allocator<md::StandardLabeler::collideLabels(void)::$_1>,void ()(void)>::operator()()
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "LabelsCollision", "", v1, 2u);
  }
}

void *md::LabelPool::prepareDedupingGroupsForCollision(void *this, LabelManager *a2)
{
  uint64_t v3 = this;
  for (uint64_t i = (uint64_t **)this[35]; i; uint64_t i = (uint64_t **)*i)
    this = (void *)(*(uint64_t (**)(uint64_t *, LabelManager *))(*i[6] + 16))(i[6], a2);
  for (uint64_t j = (uint64_t **)v3[49]; j; uint64_t j = (uint64_t **)*j)
    this = (void *)(*(uint64_t (**)(uint64_t *, LabelManager *))(*j[3] + 16))(j[3], a2);
  for (uint64_t k = (uint64_t **)v3[56]; k; uint64_t k = (uint64_t **)*k)
    this = (void *)(*(uint64_t (**)(uint64_t *, LabelManager *))(*k[3] + 16))(k[3], a2);
  for (uint64_t m = (uint64_t **)v3[42]; m; uint64_t m = (uint64_t **)*m)
    this = (void *)(*(uint64_t (**)(uint64_t *, LabelManager *))(*m[2] + 16))(m[2], a2);
  return this;
}

uint64_t md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelSpacingDedupingGroup *this, md::LabelManager *a2)
{
  *((void *)this + 6) = *((void *)this + 5);
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 24) = 0;
  uint64_t v3 = *((void *)a2 + 54);
  if (*(float *)(v3 + 424) > 0.0)
  {
    char v4 = (std::__shared_weak_count *)*((void *)this + 11);
    if (v4)
    {
      uint64_t v6 = std::__shared_weak_count::lock(v4);
      if (v6)
      {
        uint64_t v7 = v6;
        uint64_t v8 = *((void *)this + 10);
        if (v8)
        {
          float v9 = (*(float (**)(uint64_t, void, uint64_t))(*(void *)v8 + 312))(v8, *(unsigned __int8 *)(v3 + 28), v3);
          *((float *)this + 24) = (float)(*((float *)a2 + 44) * v9) * (float)(*((float *)a2 + 44) * v9);
        }
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }
  uint64_t v11 = (uint64_t *)*((void *)this + 1);
  uint64_t v10 = (uint64_t *)*((void *)this + 2);
  if (v11 != v10)
  {
    while (((*(uint64_t (**)(void))(*(void *)*v11 + 16))() & 1) != 0)
    {
      ++v11;
LABEL_11:
      if (v11 == v10) {
        goto LABEL_18;
      }
    }
    uint64_t v12 = v10 - 1;
    while (v12 != v11)
    {
      uint64_t v10 = v12;
      uint64_t v13 = *v12--;
      if ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 16))(v13))
      {
        uint64_t v14 = *v11;
        *v11++ = *v10;
        *uint64_t v10 = v14;
        goto LABEL_11;
      }
    }
  }
  uint64_t v10 = v11;
LABEL_18:
  uint64_t v15 = *((void *)this + 1);
  unint64_t v16 = 126 - 2 * __clz(((uint64_t)v10 - v15) >> 3);
  if (v10 == (uint64_t *)v15) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = v16;
  }
  uint64_t result = std::__introsort<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **,false>(*((void *)this + 1), v10, v17, 1);
  unint64_t v20 = (unint64_t *)*((void *)this + 1);
  unint64_t v19 = (unint64_t *)*((void *)this + 2);
  if (v20 != v19)
  {
    unint64_t v21 = (char *)v19 - (char *)v20 - 8;
    if (v21 > 7)
    {
      uint64_t v24 = 0;
      uint64_t v25 = (v21 >> 3) + 1;
      uint64_t v22 = v25 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        int v26 = &v20[v24];
        unint64_t v28 = *v26;
        unint64_t v27 = v26[1];
        *(_DWORD *)(v28 + 32) = v24;
        *(_DWORD *)(v27 + 32) = v24 + 1;
        *(_WORD *)(v28 + 36) = v24;
        *(_WORD *)(v27 + 36) = v24 + 1;
        v24 += 2;
      }
      while (v22 != v24);
      if (v25 == v22) {
        goto LABEL_29;
      }
      int v23 = &v20[v25 & 0x3FFFFFFFFFFFFFFELL];
    }
    else
    {
      LODWORD(v22) = 0;
      int v23 = (unint64_t *)*((void *)this + 1);
    }
    do
    {
      uint64_t v29 = *v23++;
      *(_DWORD *)(v29 + 32) = v22;
      *(_WORD *)(v29 + 36) = v22;
      LODWORD(v22) = v22 + 1;
    }
    while (v23 != v19);
LABEL_29:
    if ((uint64_t)v10 - v15 >= 8)
    {
      if (v10 == (uint64_t *)v15)
      {
        unint64_t v20 = (unint64_t *)v15;
      }
      else
      {
        unint64_t v30 = (unint64_t *)(v15 + 8);
        unint64_t v20 = (unint64_t *)v15;
        if ((uint64_t *)(v15 + 8) != v10)
        {
          uint64_t v31 = (unint64_t *)(v15 + 8);
          do
          {
            unint64_t v32 = *v31++;
            uint64_t result = md::Label::collisionPriorityCmp(v32, 0, *v20, 0, 0);
            if (result) {
              unint64_t v20 = v30;
            }
            unint64_t v30 = v31;
          }
          while (v31 != (unint64_t *)v10);
        }
      }
    }
    *((void *)this + 9) = *v20;
  }
  return result;
}

void sub_1A1889534(_Unwind_Exception *exception_object)
{
  if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::Label::isCollidable(md::Label *this)
{
  return *((unsigned __int8 *)this + 1290);
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  float v9 = (uint64_t *)result;
LABEL_2:
  uint64_t v10 = a2 - 1;
  uint64_t m = v9;
  while (1)
  {
    float v9 = m;
    uint64_t v12 = (char *)a2 - (char *)m;
    unint64_t v13 = a2 - m;
    if (v5 || !v4) {
      break;
    }
    if (v12 <= 191)
    {
      char v57 = m + 1;
      BOOL v59 = m == a2 || v57 == a2;
      if (a4)
      {
        if (v59) {
          return result;
        }
        uint64_t v60 = 0;
        uint64_t v61 = m;
        while (2)
        {
          unint64_t v63 = v61;
          uint64_t v61 = v57;
          uint64_t v65 = *v63;
          uint64_t v64 = v63[1];
          unsigned __int8 v66 = *(unsigned char *)(v64 + 820);
          if ((v66 == 2) != (*(unsigned char *)(*v63 + 820) == 2))
          {
            if (v66 == 2)
            {
              v63[1] = v65;
              uint64_t v62 = m;
              if (v63 == m) {
                goto LABEL_140;
              }
LABEL_149:
              uint64_t v70 = v60;
              while (1)
              {
                uint64_t v71 = *(uint64_t *)((char *)m + v70 - 8);
                if (*(unsigned char *)(v71 + 820) == 2 && *(float *)(v64 + 668) >= *(float *)(v71 + 668)) {
                  break;
                }
                *(uint64_t *)((char *)m + v70) = v71;
                v70 -= 8;
                if (!v70) {
                  goto LABEL_139;
                }
              }
              uint64_t v62 = (uint64_t *)((char *)m + v70);
              goto LABEL_140;
            }
          }
          else
          {
            float v67 = *(float *)(v64 + 668);
            if (v67 < *(float *)(v65 + 668))
            {
              v63[1] = v65;
              uint64_t v62 = m;
              if (v63 == m) {
                goto LABEL_140;
              }
              int v68 = v66;
              uint64_t v69 = v60;
              if (v68 == 2) {
                goto LABEL_149;
              }
              while (1)
              {
                uint64_t v62 = (uint64_t *)((char *)m + v69);
                uint64_t v72 = *(uint64_t *)((char *)m + v69 - 8);
                if (*(unsigned char *)(v72 + 820) == 2) {
                  break;
                }
                if (v67 >= *(float *)(v72 + 668))
                {
                  uint64_t v62 = v63;
                  break;
                }
                --v63;
                uint64_t *v62 = v72;
                v69 -= 8;
                if (!v69)
                {
LABEL_139:
                  uint64_t v62 = m;
                  break;
                }
              }
LABEL_140:
              uint64_t *v62 = v64;
            }
          }
          char v57 = v61 + 1;
          v60 += 8;
          if (v61 + 1 == a2) {
            return result;
          }
          continue;
        }
      }
      if (v59) {
        return result;
      }
      while (2)
      {
        uint64_t v113 = *v57;
        uint64_t v114 = *v9;
        int v115 = *(unsigned __int8 *)(*v57 + 820);
        if ((v115 == 2) != (*(unsigned char *)(*v9 + 820) == 2))
        {
          if (v115 == 2) {
            goto LABEL_230;
          }
        }
        else
        {
          float v116 = *(float *)(v113 + 668);
          if (v116 < *(float *)(v114 + 668))
          {
            if (*(unsigned char *)(*v57 + 820) == 2)
            {
LABEL_230:
              unint64_t v117 = v9;
              do
              {
                do
                {
                  uint64_t i = v117;
                  uint64_t v119 = *--v117;
                  v117[2] = v114;
                  uint64_t v114 = v119;
                }
                while (*(unsigned char *)(v119 + 820) != 2);
              }
              while (*(float *)(v113 + 668) < *(float *)(v114 + 668));
            }
            else
            {
              *char v57 = v114;
              uint64_t v120 = *(v9 - 1);
              for (uint64_t i = v9; *(unsigned char *)(v120 + 820) != 2; --i)
              {
                if (v116 >= *(float *)(v120 + 668)) {
                  break;
                }
                uint64_t *i = v120;
                uint64_t v120 = *(i - 2);
              }
            }
            uint64_t *i = v113;
          }
        }
        ++v57;
        ++v9;
        if (v57 == a2) {
          return result;
        }
        continue;
      }
    }
    if (!a3)
    {
      if (m == a2) {
        return result;
      }
      int64_t v73 = (v13 - 2) >> 1;
      int64_t v74 = v73;
      while (2)
      {
        int64_t v76 = v74;
        if (v73 < v74) {
          goto LABEL_163;
        }
        uint64_t v77 = (2 * v74) | 1;
        uint64_t v78 = &m[v77];
        if (2 * v76 + 2 >= (uint64_t)v13) {
          goto LABEL_171;
        }
        uint64_t v79 = v78[1];
        int v80 = *(unsigned __int8 *)(*v78 + 820);
        if ((v80 == 2) != (*(unsigned char *)(v79 + 820) == 2))
        {
          if (v80 != 2)
          {
LABEL_171:
            uint64_t v81 = *v78;
            uint64_t v82 = m[v76];
            int v83 = *(unsigned __int8 *)(*v78 + 820);
            int v84 = *(unsigned __int8 *)(v82 + 820);
            uint64_t result = (v83 == 2) ^ (v84 == 2);
            if ((v83 == 2) != (v84 == 2))
            {
              if (v83 != 2)
              {
LABEL_175:
                m[v76] = v81;
                if (v73 < v77)
                {
LABEL_161:
                  unint64_t v75 = v78;
LABEL_162:
                  *unint64_t v75 = v82;
                  goto LABEL_163;
                }
                while (2)
                {
                  uint64_t v85 = 2 * v77;
                  uint64_t v77 = (2 * v77) | 1;
                  unint64_t v75 = &m[v77];
                  uint64_t v86 = v85 + 2;
                  if (v86 < (uint64_t)v13)
                  {
                    uint64_t v87 = v75[1];
                    int v88 = *(unsigned __int8 *)(*v75 + 820);
                    if ((v88 == 2) != (*(unsigned char *)(v87 + 820) == 2))
                    {
                      if (v88 != 2) {
                        goto LABEL_185;
                      }
LABEL_184:
                      ++v75;
                      uint64_t v77 = v86;
                    }
                    else if (*(float *)(*v75 + 668) < *(float *)(v87 + 668))
                    {
                      goto LABEL_184;
                    }
                  }
LABEL_185:
                  uint64_t v89 = *v75;
                  uint64_t result = (v84 == 2) ^ (*(unsigned char *)(*v75 + 820) == 2);
                  if ((v84 == 2) != (*(unsigned char *)(*v75 + 820) == 2))
                  {
                    if (*(unsigned char *)(*v75 + 820) == 2) {
                      goto LABEL_161;
                    }
                  }
                  else if (*(float *)(v89 + 668) < *(float *)(v82 + 668))
                  {
                    goto LABEL_161;
                  }
                  *uint64_t v78 = v89;
                  uint64_t v78 = v75;
                  if (v73 < v77) {
                    goto LABEL_162;
                  }
                  continue;
                }
              }
            }
            else if (*(float *)(v81 + 668) >= *(float *)(v82 + 668))
            {
              goto LABEL_175;
            }
LABEL_163:
            int64_t v74 = v76 - 1;
            if (v76) {
              continue;
            }
            uint64_t v90 = (unint64_t)v12 >> 3;
            while (2)
            {
              uint64_t v93 = 0;
              uint64_t v94 = *m;
              uint64_t v91 = m;
LABEL_195:
              uint64_t v95 = v91;
              v91 += v93 + 1;
              uint64_t v96 = 2 * v93;
              uint64_t v93 = (2 * v93) | 1;
              uint64_t v97 = v96 + 2;
              if (v97 < v90)
              {
                uint64_t v98 = v91[1];
                uint64_t result = *(unsigned __int8 *)(*v91 + 820);
                if ((result == 2) != (*(unsigned char *)(v98 + 820) == 2))
                {
                  if (result != 2) {
                    goto LABEL_194;
                  }
                }
                else if (*(float *)(*v91 + 668) >= *(float *)(v98 + 668))
                {
                  goto LABEL_194;
                }
                ++v91;
                uint64_t v93 = v97;
              }
LABEL_194:
              *uint64_t v95 = *v91;
              if (v93 > (uint64_t)((unint64_t)(v90 - 2) >> 1))
              {
                if (v91 == --a2) {
                  goto LABEL_190;
                }
                *uint64_t v91 = *a2;
                *a2 = v94;
                uint64_t v99 = (char *)v91 - (char *)m + 8;
                if (v99 >= 9)
                {
                  unint64_t v100 = ((unint64_t)v99 >> 3) - 2;
                  unint64_t v101 = v100 >> 1;
                  uint64_t v102 = &m[v100 >> 1];
                  uint64_t v103 = *v102;
                  uint64_t v94 = *v91;
                  int v104 = *(unsigned __int8 *)(*v102 + 820);
                  int v105 = *(unsigned __int8 *)(*v91 + 820);
                  uint64_t result = v105 == 2;
                  if ((v104 == 2) != (v105 == 2))
                  {
                    if (v104 == 2)
                    {
LABEL_207:
                      *uint64_t v91 = v103;
                      if (v100 >= 2)
                      {
                        while (1)
                        {
                          unint64_t v106 = v101 - 1;
                          unint64_t v101 = (v101 - 1) >> 1;
                          uint64_t v91 = &m[v101];
                          uint64_t v107 = *v91;
                          if ((v105 == 2) != (*(unsigned char *)(*v91 + 820) == 2))
                          {
                            if (*(unsigned char *)(*v91 + 820) != 2) {
                              break;
                            }
                          }
                          else if (*(float *)(v107 + 668) >= *(float *)(v94 + 668))
                          {
                            break;
                          }
                          *uint64_t v102 = v107;
                          uint64_t v102 = &m[v101];
                          if (v106 <= 1) {
                            goto LABEL_190;
                          }
                        }
                      }
                      uint64_t v91 = v102;
LABEL_190:
                      *uint64_t v91 = v94;
                    }
                  }
                  else if (*(float *)(v103 + 668) < *(float *)(v94 + 668))
                  {
                    goto LABEL_207;
                  }
                }
                if (v90-- <= 2) {
                  return result;
                }
                continue;
              }
              goto LABEL_195;
            }
          }
        }
        else if (*(float *)(*v78 + 668) >= *(float *)(v79 + 668))
        {
          goto LABEL_171;
        }
        break;
      }
      ++v78;
      uint64_t v77 = 2 * v76 + 2;
      goto LABEL_171;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = &m[v13 >> 1];
    if ((unint64_t)v12 >= 0x401)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(v9, &v9[v13 >> 1], a2 - 1);
      unint64_t v16 = &v9[v14];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(v9 + 1, v16 - 1, a2 - 2);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(v9 + 2, &v9[v14 + 1], a2 - 3);
      uint64_t result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(v16 - 1, v15, &v9[v14 + 1]);
      uint64_t v17 = *v9;
      *float v9 = *v16;
      uint64_t *v16 = v17;
    }
    else
    {
      uint64_t result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(&v9[v13 >> 1], v9, a2 - 1);
    }
    --a3;
    uint64_t v18 = *v9;
    if (a4)
    {
      char v19 = *(unsigned char *)(v18 + 820);
LABEL_19:
      for (uint64_t j = v9 + 1; ; ++j)
      {
        uint64_t v26 = *j;
        if ((v19 == 2) == (*(unsigned char *)(*j + 820) == 2)) {
          break;
        }
        if (*(unsigned char *)(*j + 820) != 2) {
          goto LABEL_24;
        }
LABEL_21:
        ;
      }
      if (*(float *)(v26 + 668) < *(float *)(v18 + 668)) {
        goto LABEL_21;
      }
LABEL_24:
      unint64_t v27 = j - 1;
      uint64_t k = a2 - 1;
      if (j - 1 != v9)
      {
        while (1)
        {
          if ((v19 == 2) != (*(unsigned char *)(*k + 820) == 2))
          {
            if (*(unsigned char *)(*k + 820) == 2) {
              goto LABEL_31;
            }
          }
          else if (*(float *)(*k + 668) < *(float *)(v18 + 668))
          {
            goto LABEL_31;
          }
          --k;
        }
      }
      uint64_t k = a2;
      if (j < a2)
      {
        for (uint64_t k = a2 - 1; ; --k)
        {
          int v34 = *(unsigned __int8 *)(*k + 820);
          if ((v19 == 2) != (v34 == 2))
          {
            if (j >= k || v34 == 2) {
              break;
            }
          }
          else if (j >= k || *(float *)(*k + 668) < *(float *)(v18 + 668))
          {
            break;
          }
        }
      }
LABEL_31:
      if (j < k)
      {
        uint64_t v29 = *k;
        unint64_t v30 = (unint64_t)j;
        uint64_t v31 = k;
        do
        {
          *(void *)unint64_t v30 = v29;
          v30 += 8;
          *uint64_t v31 = v26;
          while (1)
          {
            uint64_t v26 = *(void *)v30;
            if ((v19 == 2) == (*(unsigned char *)(*(void *)v30 + 820) == 2)) {
              break;
            }
            if (*(unsigned char *)(*(void *)v30 + 820) != 2) {
              goto LABEL_39;
            }
LABEL_36:
            v30 += 8;
          }
          if (*(float *)(v26 + 668) < *(float *)(v18 + 668)) {
            goto LABEL_36;
          }
LABEL_39:
          unint64_t v27 = (uint64_t *)(v30 - 8);
          do
          {
            while (1)
            {
              uint64_t v32 = *--v31;
              uint64_t v29 = v32;
              BOOL v33 = *(unsigned char *)(v32 + 820) == 2;
              if ((v19 == 2) != v33) {
                break;
              }
              if (*(float *)(v29 + 668) < *(float *)(v18 + 668)) {
                goto LABEL_33;
              }
            }
          }
          while (!v33);
LABEL_33:
          ;
        }
        while (v30 < (unint64_t)v31);
      }
      if (v27 != v9) {
        *float v9 = *v27;
      }
      uint64_t *v27 = v18;
      if (j < k)
      {
LABEL_58:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **,false>(v9, v27, a3, a4 & 1);
        a4 = 0;
        uint64_t m = v27 + 1;
      }
      else
      {
        BOOL v35 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(v9, v27);
        uint64_t m = v27 + 1;
        uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(v27 + 1, a2);
        if (result)
        {
          a2 = v27;
          if (v35) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v35) {
          goto LABEL_58;
        }
      }
    }
    else
    {
      uint64_t v20 = *(v9 - 1);
      int v21 = *(unsigned __int8 *)(v20 + 820);
      char v19 = *(unsigned char *)(v18 + 820);
      if ((v21 == 2) != (v19 == 2))
      {
        if (v21 == 2) {
          goto LABEL_19;
        }
      }
      else if (*(float *)(v20 + 668) < *(float *)(v18 + 668))
      {
        goto LABEL_19;
      }
      uint64_t v22 = *v10;
      int v23 = *(unsigned __int8 *)(*v10 + 820);
      if ((*(unsigned char *)(v18 + 820) == 2) != (v23 == 2))
      {
        if (*(unsigned char *)(v18 + 820) != 2)
        {
          uint64_t m = v9 + 1;
          uint64_t v24 = a2;
          if (v9 + 1 >= a2) {
            goto LABEL_94;
          }
          do
          {
LABEL_72:
            if (*(unsigned char *)(*m + 820) != 2 && *(float *)(v18 + 668) < *(float *)(*m + 668)) {
              break;
            }
            ++m;
          }
          while (m < a2);
          goto LABEL_81;
        }
      }
      else
      {
        float v36 = *(float *)(v18 + 668);
        if (v36 >= *(float *)(v22 + 668))
        {
          uint64_t m = v9 + 1;
          if (v9 + 1 >= a2) {
            goto LABEL_81;
          }
          if (*(unsigned char *)(v18 + 820) == 2)
          {
            do
            {
              if (*(unsigned char *)(*m + 820) != 2) {
                break;
              }
              if (v36 < *(float *)(*m + 668)) {
                break;
              }
              ++m;
            }
            while (m < a2);
            goto LABEL_81;
          }
          goto LABEL_72;
        }
        if (*(unsigned char *)(v18 + 820) != 2)
        {
          for (uint64_t m = v9 + 1; *(unsigned char *)(*m + 820) == 2 || v36 >= *(float *)(*m + 668); ++m)
            ;
          goto LABEL_81;
        }
      }
      uint64_t m = v9 + 1;
      uint64_t v37 = v9[1];
      if (*(unsigned char *)(v37 + 820) != 2)
      {
        uint64_t v24 = a2;
        if (m >= a2) {
          goto LABEL_94;
        }
LABEL_83:
        uint64_t v24 = a2 - 1;
        while (v23 != 2 || *(float *)(v18 + 668) < *(float *)(v22 + 668))
        {
          uint64_t v39 = *--v24;
          uint64_t v22 = v39;
          int v23 = *(unsigned __int8 *)(v39 + 820);
        }
        goto LABEL_94;
      }
      do
      {
        if (*(float *)(v18 + 668) < *(float *)(v37 + 668)) {
          break;
        }
        uint64_t v38 = m[1];
        ++m;
        uint64_t v37 = v38;
      }
      while (*(unsigned char *)(v38 + 820) == 2);
LABEL_81:
      if (m >= a2)
      {
        uint64_t v24 = a2;
        goto LABEL_94;
      }
      if (*(unsigned char *)(v18 + 820) == 2) {
        goto LABEL_83;
      }
      if (v23 == 2)
      {
        uint64_t v24 = a2 - 1;
      }
      else
      {
        uint64_t v24 = a2 - 1;
        do
        {
          if (*(float *)(v18 + 668) >= *(float *)(v22 + 668)) {
            break;
          }
          uint64_t v40 = *--v24;
          uint64_t v22 = v40;
        }
        while (*(unsigned char *)(v40 + 820) != 2);
      }
LABEL_94:
      if (m < v24)
      {
        uint64_t v41 = *m;
        uint64_t v42 = *v24;
        do
        {
          *uint64_t m = v42;
          uint64_t *v24 = v41;
          if (v19 == 2)
          {
            uint64_t v43 = m[1];
            ++m;
            uint64_t v41 = v43;
            if (*(unsigned char *)(v43 + 820) != 2) {
              goto LABEL_106;
            }
            float v44 = *(float *)(v18 + 668);
            do
            {
              if (v44 < *(float *)(v41 + 668)) {
                break;
              }
              uint64_t v45 = m[1];
              ++m;
              uint64_t v41 = v45;
            }
            while (*(unsigned char *)(v45 + 820) == 2);
          }
          else
          {
            do
            {
              do
              {
                uint64_t v46 = m[1];
                ++m;
                uint64_t v41 = v46;
              }
              while (*(unsigned char *)(v46 + 820) == 2);
              float v44 = *(float *)(v18 + 668);
            }
            while (v44 >= *(float *)(v41 + 668));
          }
          if (v19 == 2)
          {
            do
            {
              do
              {
LABEL_106:
                uint64_t v47 = *--v24;
                uint64_t v42 = v47;
              }
              while (*(unsigned char *)(v47 + 820) != 2);
            }
            while (*(float *)(v18 + 668) < *(float *)(v42 + 668));
            continue;
          }
          do
          {
            uint64_t v48 = *--v24;
            uint64_t v42 = v48;
          }
          while (*(unsigned char *)(v48 + 820) != 2 && v44 < *(float *)(v42 + 668));
        }
        while (m < v24);
      }
      float v49 = m - 1;
      BOOL v4 = m - 1 >= v9;
      BOOL v5 = m - 1 == v9;
      if (m - 1 != v9) {
        *float v9 = *v49;
      }
      a4 = 0;
      *float v49 = v18;
    }
  }
  switch(v13)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v50 = *v10;
      uint64_t v51 = *m;
      int v52 = *(unsigned __int8 *)(*v10 + 820);
      if ((v52 == 2) != (*(unsigned char *)(*m + 820) == 2))
      {
        if (v52 != 2) {
          return result;
        }
      }
      else if (*(float *)(v50 + 668) >= *(float *)(v51 + 668))
      {
        return result;
      }
      *uint64_t m = v50;
      *uint64_t v10 = v51;
      return result;
    case 3uLL:
      return (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(m, m + 1, a2 - 1);
    case 4uLL:
      int v53 = m + 2;
      uint64_t result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(m, m + 1, m + 2);
      uint64_t v54 = *v10;
      uint64_t v55 = m[2];
      int v56 = *(unsigned __int8 *)(*v10 + 820);
      if ((v56 == 2) != (*(unsigned char *)(v55 + 820) == 2))
      {
        if (v56 != 2) {
          return result;
        }
      }
      else if (*(float *)(v54 + 668) >= *(float *)(v55 + 668))
      {
        return result;
      }
      *int v53 = v54;
      *uint64_t v10 = v55;
      uint64_t v108 = *v53;
      uint64_t v109 = m[1];
      int v110 = *(unsigned __int8 *)(*v53 + 820);
      if ((v110 == 2) != (*(unsigned char *)(v109 + 820) == 2))
      {
        if (v110 != 2) {
          return result;
        }
        m[1] = v108;
        m[2] = v109;
        uint64_t v111 = *m;
        if (*(unsigned char *)(*m + 820) != 2) {
          goto LABEL_243;
        }
        float v112 = *(float *)(v108 + 668);
      }
      else
      {
        float v112 = *(float *)(v108 + 668);
        if (v112 >= *(float *)(v109 + 668)) {
          return result;
        }
        m[1] = v108;
        m[2] = v109;
        uint64_t v111 = *m;
        if ((v110 == 2) != (*(unsigned char *)(*m + 820) == 2))
        {
          if (v110 != 2) {
            return result;
          }
          goto LABEL_243;
        }
      }
      if (v112 >= *(float *)(v111 + 668)) {
        return result;
      }
LABEL_243:
      *uint64_t m = v108;
      m[1] = v111;
      break;
    case 5uLL:
      return (unint64_t)std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelSpacingDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **,0>(m, m + 1, m + 2, m + 3, a2 - 1);
    default:
      JUMPOUT(0);
  }
  return result;
}

double md::LineLabelFeature::minLabelSpacing(md::LineLabelFeature *this, int a2, const md::LabelLayoutContext *a3)
{
  uint64_t v3 = md::LineLabelFeature::roadMetricsForZ(this, a2, a3);
  if (!v3) {
    return 0.0;
  }
  LODWORD(result) = *(_DWORD *)(v3 + 72);
  return result;
}

BOOL md::LineLabelFeature::hasIdentifier(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = *(void *)(a1 + 232);
  uint64_t v2 = a1 + 232;
  uint64_t v3 = v4;
  if (!v4) {
    return 0;
  }
  unsigned int v5 = *a2;
  uint64_t v6 = v2;
  do
  {
    unsigned int v7 = *(_DWORD *)(v3 + 32);
    BOOL v8 = v7 >= v5;
    if (v7 >= v5) {
      float v9 = (uint64_t *)v3;
    }
    else {
      float v9 = (uint64_t *)(v3 + 8);
    }
    if (v8) {
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v9;
  }
  while (*v9);
  if (v6 == v2 || v5 < *(_DWORD *)(v6 + 32)) {
    return 0;
  }
  uint64_t v10 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(v6 + 40) + 200))(*(void *)(v6 + 40));
  uint64_t v12 = v10;
  if (*(void *)v10
    && *((_DWORD *)v10 + 10) == *(_DWORD *)(*(void *)v10 + 252)
    && *((void *)v10 + 3)
    && (*((__int16 *)v10 + 17) & 0x80000000) == 0)
  {
    return 1;
  }
  md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)v10, v10[164], v11);
  return *(void *)v12
      && *((_DWORD *)v12 + 10) == *(_DWORD *)(*(void *)v12 + 252)
      && *((void *)v12 + 3)
      && *((__int16 *)v12 + 17) >= 0;
}

void md::LineLabelFeature::updatePositions(md::LineLabelFeature *this, md::LabelManager *a2, int a3, md::LabelMapTile *a4)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 10))
  {
    float v9 = (_DWORD *)((char *)this + 192);
    BOOL v8 = (unsigned __int8 *)*((void *)this + 24);
    unsigned __int8 v10 = atomic_load(v8 + 80);
    if (v10) {
      md::LabelLineStore::consumeWorkUnits((md::LabelLineStore *)v8);
    }
    uint64_t v11 = *((void *)a2 + 54);
    uint64_t v12 = (*(uint64_t (**)(md::LineLabelFeature *, void))(*(void *)this + 472))(this, 0);
    if (v12)
    {
      if (*(char *)(v12 + 23) < 0) {
        uint64_t v13 = *(void *)(v12 + 8);
      }
      else {
        uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
      }
      BOOL v14 = v13 != 0;
    }
    else
    {
      BOOL v14 = 0;
    }
    if (*(float *)(v11 + 424) > 0.0 && a4 && *(unsigned char *)(v11 + 27))
    {
      long long v42 = xmmword_1A28FCDD0;
      long long v43 = xmmword_1A28FCDD0;
      long long v44 = xmmword_1A28FCDD0;
      v45[0] = xmmword_1A28FCDD0;
      uint64_t v15 = (void *)*((void *)this + 24);
      uint64_t v16 = v15[33];
      uint64_t v18 = v15[34];
      uint64_t v19 = v15[35];
      uint64_t v35 = v15[32];
      uint64_t v17 = v35;
      uint64_t v36 = v16;
      double v37 = (*(double (**)(md::LabelMapTile *, uint64_t *))(*(void *)a4 + 16))(a4, &v35);
      uint64_t v38 = v20;
      uint64_t v39 = v21;
      v40[0] = 0;
      char v41 = 0;
      md::LabelLayoutContext::evaluateWorldPoint(v11, (uint64_t)&v37, (uint64_t)v40, 1u, 0, (uint64_t)&v42, 1.0);
      uint64_t v35 = v17;
      uint64_t v36 = v19;
      double v37 = (*(double (**)(md::LabelMapTile *, uint64_t *))(*(void *)a4 + 16))(a4, &v35);
      uint64_t v38 = v22;
      uint64_t v39 = v23;
      v40[0] = 0;
      char v41 = 0;
      md::LabelLayoutContext::evaluateWorldPoint(v11, (uint64_t)&v37, (uint64_t)v40, 1u, 0, (uint64_t)&v43, 1.0);
      uint64_t v35 = v18;
      uint64_t v36 = v19;
      double v37 = (*(double (**)(md::LabelMapTile *, uint64_t *))(*(void *)a4 + 16))(a4, &v35);
      uint64_t v38 = v24;
      uint64_t v39 = v25;
      v40[0] = 0;
      char v41 = 0;
      md::LabelLayoutContext::evaluateWorldPoint(v11, (uint64_t)&v37, (uint64_t)v40, 1u, 0, (uint64_t)&v44, 1.0);
      uint64_t v35 = v18;
      uint64_t v36 = v16;
      double v37 = (*(double (**)(md::LabelMapTile *, uint64_t *))(*(void *)a4 + 16))(a4, &v35);
      uint64_t v38 = v26;
      uint64_t v39 = v27;
      v40[0] = 0;
      char v41 = 0;
      md::LabelLayoutContext::evaluateWorldPoint(v11, (uint64_t)&v37, (uint64_t)v40, 1u, 0, (uint64_t)v45, 1.0);
      float v28 = fmaxf(fmaxf(fmaxf(*(float *)&v42, *(float *)&v43), *(float *)&v44), *(float *)v45);
      int v29 = (int)fminf(*(float *)v45, fminf(*(float *)&v44, fminf(*(float *)&v43, *(float *)&v42)));
      int v30 = *((unsigned __int8 *)this + 136);
      if (v29 <= v30) {
        int v29 = *((unsigned __int8 *)this + 136);
      }
      if (v29 >= a3) {
        unsigned __int8 v31 = a3;
      }
      else {
        unsigned __int8 v31 = v29;
      }
      int v32 = (int)v28;
      if ((int)v28 <= v30) {
        int v32 = *((unsigned __int8 *)this + 136);
      }
      if (v32 < a3) {
        LOBYTE(a3) = v32;
      }
      while (v31 <= a3)
      {
        uint64_t v33 = md::LineLabelFeature::roadMetricsForZ(this, v31, (const md::LabelLayoutContext *)v11);
        if (v33)
        {
          md::LineLabelPlacer::updatePlacements(v9, v31, v33, (uint64_t)a2, *((unsigned __int8 *)this + 433), v14);
          *((unsigned char *)this + 433) = 0;
        }
        ++v31;
      }
    }
    else
    {
      uint64_t v34 = md::LineLabelFeature::roadMetricsForZ(this, a3, (const md::LabelLayoutContext *)v11);
      if (v34)
      {
        md::LineLabelPlacer::updatePlacements(v9, a3, v34, (uint64_t)a2, *((unsigned __int8 *)this + 433), v14);
        *((unsigned char *)this + 433) = 0;
      }
    }
  }
}

uint64_t md::LineLabelFeature::publicName(md::LineLabelFeature *this, unint64_t a2)
{
  uint64_t v2 = *((void *)this + 48);
  uint64_t v3 = *((void *)this + 49) - v2;
  uint64_t v4 = v2 + (a2 << 6);
  if (a2 >= v3 >> 6) {
    return 0;
  }
  else {
    return v4;
  }
}

uint64_t md::LineLabelFeature::roadMetricsForZ(md::LineLabelFeature *this, int a2, const md::LabelLayoutContext *a3)
{
  uint64_t v6 = (md::LabelStyle **)(*(uint64_t (**)(md::LineLabelFeature *, void, void, void, void))(*(void *)this + 552))(this, 0, 0, 0, 0);
  unsigned int v7 = *v6;
  if (!*v6) {
    return 0;
  }
  uint64_t v8 = *((void *)this + 41);
  if (!v8) {
    goto LABEL_13;
  }
  float v9 = (unsigned __int8 *)this + 328;
  do
  {
    unsigned int v10 = *(unsigned __int8 *)(v8 + 32);
    BOOL v11 = v10 >= a2;
    if (v10 >= a2) {
      uint64_t v12 = (uint64_t *)v8;
    }
    else {
      uint64_t v12 = (uint64_t *)(v8 + 8);
    }
    if (v11) {
      float v9 = (unsigned __int8 *)v8;
    }
    uint64_t v8 = *v12;
  }
  while (*v12);
  if (v9 == (unsigned __int8 *)((char *)this + 328) || v9[32] > a2)
  {
LABEL_13:
    float v13 = *((float *)a3 + 10);
    md::LabelStyle::setZoom(*v6, (float)a2);
    uint64_t v14 = *((void *)v7 + 33);
    if (!v14)
    {
      uint64_t v15 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>((uint64_t)v7);
      uint64_t v14 = *v15;
      *((void *)v7 + 33) = *v15;
    }
    double v16 = *((double *)v7 + 16);
    double v17 = ldexp(1.0, a2);
    float v48 = v13;
    if ((*(uint64_t (**)(md::LineLabelFeature *, void))(*(void *)this + 472))(this, 0))
    {
      uint64_t v18 = (*(uint64_t (**)(md::LineLabelFeature *, void))(*(void *)this + 472))(this, 0);
      if (*(char *)(v18 + 23) < 0) {
        unint64_t v19 = *(void *)(v18 + 8);
      }
      else {
        unint64_t v19 = *(unsigned __int8 *)(v18 + 23);
      }
      float v22 = (double)v19 * 0.5;
      double v21 = v22;
    }
    else
    {
      double v21 = 0.0;
    }
    double v23 = 0.00130208333 / v17;
    double v24 = v21 / v16;
    float v25 = 0.0;
    float v53 = 0.0;
    double v50 = v16;
    unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 45) - *((void *)this + 44)) >> 4);
    if (*((void *)this + 45) != *((void *)this + 44)) {
      float v25 = *(float *)(v14 + 36) * (float)(v26 - 1);
    }
    double v27 = v23 * (float)(v25 + (float)((float)v26 * 15.0));
    double v51 = 3.0 / v16;
    double v52 = v23 * 15.0;
    int v49 = *(_DWORD *)(v14 + 44);
    double v28 = fmax(v24 * 0.5, 3.0 / v16 * 0.5);
    double v29 = 1.0;
    double v30 = 1.0;
    double v31 = 1.0;
    double v32 = 1.0;
    if ((*(unsigned int (**)(md::LineLabelFeature *))(*(void *)this + 656))(this))
    {
      float v33 = *(float *)(v14 + 24);
      if (v33 <= 0.0) {
        float v33 = 300.0;
      }
      float v34 = fmaxf((float)((float)(*((float *)a3 + 267) + *((float *)a3 + 266)) * 0.375) / v48, 10.0);
      double v32 = v23 * fminf(fmaxf(v33, 10.0), v34);
      float v53 = fminf(fmaxf(*(float *)(v14 + 32), 10.0), v34);
      double v30 = v23 * v53;
      double v31 = v23 * fminf(fmaxf(*(float *)(v14 + 28), 10.0), v34);
      double v29 = v23 * 15.0;
    }
    double v35 = fmax(v28, v27);
    int v36 = *(_DWORD *)(v14 + 8);
    unint64_t v37 = ((unint64_t)*(unsigned __int8 *)(v14 + 56) << 40) | ((unint64_t)(int)*(float *)(v14 + 16) << 48) | ((unint64_t)(int)*(float *)(v14 + 20) << 56);
    if ((*(uint64_t (**)(md::LineLabelFeature *))(*(void *)this + 336))(this))
    {
      unint64_t v38 = v37 | *(unsigned __int8 *)(v14 + 60);
      double v39 = v50;
      if (*((unsigned char *)a3 + 14)) {
LABEL_30:
      }
        v38 |= (unint64_t)*(unsigned __int8 *)(v14 + 59) << 8;
    }
    else
    {
      double v39 = v50;
      if (!*(unsigned char *)(v14 + 56))
      {
        unint64_t v40 = 0;
        goto LABEL_36;
      }
      unint64_t v38 = v37 | *(unsigned __int8 *)(v14 + 60);
      if (*((unsigned char *)a3 + 14)) {
        goto LABEL_30;
      }
    }
    unint64_t v37 = v38 & 0xFFFFFF000000FFFFLL | ((unint64_t)*(unsigned __int8 *)(v14 + 58) << 16);
    unint64_t v40 = (unint64_t)*(unsigned __int8 *)(v14 + 57) << 24;
LABEL_36:
    double v41 = 1.5 / v39;
    double v42 = fmax(v35, v52);
    int v43 = (*(uint64_t (**)(md::LineLabelFeature *))(*(void *)this + 648))(this);
    uint64_t v44 = 0x100000000;
    if (!v43) {
      uint64_t v44 = 0;
    }
    unint64_t v45 = v37 | v40 | v44;
    if (*((unsigned char *)this + 143)) {
      unint64_t v46 = v45 & 0xFFFFFFFFFFFFFF00 | 1;
    }
    else {
      unint64_t v46 = v45;
    }
    if (*(unsigned char *)(*((void *)this + 24) + 290))
    {
      double v24 = v24 * 40075017.0;
      double v27 = v27 * 40075017.0;
      double v29 = v29 * 40075017.0;
      double v41 = v41 * 40075017.0;
      double v32 = v32 * 40075017.0;
      double v30 = v30 * 40075017.0;
      double v31 = v31 * 40075017.0;
      double v42 = v42 * 40075017.0;
    }
    char v54 = a2;
    uint64_t v55 = &v54;
    uint64_t v47 = std::__tree<std::__value_type<unsigned char,md::RoadMetricsEntry>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,md::RoadMetricsEntry>,std::less<unsigned char>,true>,geo::StdAllocator<std::__value_type<unsigned char,md::RoadMetricsEntry>,mdm::Allocator>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char &&>,std::tuple<>>((uint64_t **)this + 40, a2, &v55);
    *(double *)(v47 + 40) = v32;
    *(double *)(v47 + 48) = v31;
    *(double *)(v47 + 56) = v30;
    *(double *)(v47 + 64) = v24;
    *(double *)(v47 + 72) = v51;
    *(double *)(v47 + 80) = v27;
    *(double *)(v47 + 88) = v29;
    *(double *)(v47 + 96) = v42;
    *(double *)(v47 + 104) = v41;
    *(float *)(v47 + 112) = v53;
    *(_DWORD *)(v47 + 116) = v49;
    *(_DWORD *)(v47 + 120) = v36;
    *(void *)(v47 + 124) = v46;
  }
  char v54 = a2;
  uint64_t v55 = &v54;
  return std::__tree<std::__value_type<unsigned char,md::RoadMetricsEntry>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,md::RoadMetricsEntry>,std::less<unsigned char>,true>,geo::StdAllocator<std::__value_type<unsigned char,md::RoadMetricsEntry>,mdm::Allocator>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char &&>,std::tuple<>>((uint64_t **)this + 40, a2, &v55)+ 40;
}

const FeatureStyleAttributes **md::LineLabelFeature::style(uint64_t a1, unsigned int a2, int a3, int a4, uint64_t a5)
{
  if (!a2) {
    return (const FeatureStyleAttributes **)(a1 + 80);
  }
  uint64_t v6 = *(void *)(a1 + 232);
  if (!v6) {
    goto LABEL_13;
  }
  uint64_t v10 = a1 + 232;
  do
  {
    unsigned int v11 = *(_DWORD *)(v6 + 32);
    BOOL v12 = v11 >= a2;
    if (v11 >= a2) {
      float v13 = (uint64_t *)v6;
    }
    else {
      float v13 = (uint64_t *)(v6 + 8);
    }
    if (v12) {
      uint64_t v10 = v6;
    }
    uint64_t v6 = *v13;
  }
  while (*v13);
  if (v10 == a1 + 232 || *(_DWORD *)(v10 + 32) > a2)
  {
LABEL_13:
    uint64_t v14 = 0;
    goto LABEL_14;
  }
  double v17 = *(unsigned __int8 **)(v10 + 40);
  uint64_t v14 = *(std::__shared_weak_count **)(v10 + 48);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v17) {
    goto LABEL_14;
  }
  uint64_t v18 = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)v17 + 200))(v17);
  uint64_t v20 = v18;
  if (!v18) {
    goto LABEL_34;
  }
  if (*(void *)v18)
  {
    if (*((_DWORD *)v18 + 10) == *(_DWORD *)(*(void *)v18 + 252))
    {
      double v21 = (uint64_t *)*((void *)v18 + 3);
      if (v21)
      {
        if ((*((__int16 *)v18 + 17) & 0x80000000) == 0) {
          goto LABEL_32;
        }
      }
    }
  }
  md::LabelLineResolvedPosition::moveOntoPathForZoom((md::LabelLineResolvedPosition *)v18, v18[164], v19);
  double v21 = *(uint64_t **)v20;
  if (!*(void *)v20) {
    goto LABEL_35;
  }
  if (*((_DWORD *)v20 + 10) != *((_DWORD *)v21 + 63)) {
    goto LABEL_34;
  }
  double v21 = (uint64_t *)*((void *)v20 + 3);
  if (!v21) {
    goto LABEL_35;
  }
  if ((*((__int16 *)v20 + 17) & 0x80000000) == 0)
  {
LABEL_32:
    double v21 = (uint64_t *)*v21;
    if (v21) {
      LODWORD(v21) = *((_DWORD *)v21 + 10);
    }
    else {
      LODWORD(v21) = -1;
    }
  }
  else
  {
LABEL_34:
    LODWORD(v21) = 0;
  }
LABEL_35:
  uint64_t v22 = *(void *)(a1 + 272);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 280) - v22) >> 4) > v21)
  {
    unsigned int v23 = v17[9];
    double v24 = (const FeatureStyleAttributes **)(v22 + 80 * v21);
    if (a4)
    {
      if (*(_DWORD *)(a1 + 304) != v21)
      {
        *(_DWORD *)(a1 + 304) = v21;
        operator new();
      }
      double v24 = *(const FeatureStyleAttributes ***)(a1 + 312);
    }
    if (a3 || v23 > 8)
    {
      float v25 = 0;
      uint64_t v26 = 0;
    }
    else if (((1 << v23) & 0x1E7) != 0)
    {
      uint64_t v26 = 0;
      float v25 = v24 + 2;
    }
    else
    {
      float v25 = v24 + 6;
      if (v23 == 3)
      {
        uint64_t v26 = 1;
      }
      else
      {
        float v25 = v24 + 8;
        uint64_t v26 = 12;
      }
    }
    if (v25) {
      uint64_t v15 = v25;
    }
    else {
      uint64_t v15 = v24 + 2;
    }
    if (a5 && !*v15)
    {
      md::LineLabelFeature::resolvedStyleAttributes(&v36, *v24, a4, v26);
      uint64_t v33 = v36;
      float v34 = v37;
      if (v37) {
        atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      double v27 = (void *)(*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 480))(a1, 0);
      md::LabelManager::styleForFeatureAttributes((uint64_t *)&v35, *(void *)(a5 + 336), &v33, v27);
      long long v28 = v35;
      long long v35 = 0uLL;
      double v29 = (std::__shared_weak_count *)v15[1];
      *(_OWORD *)uint64_t v15 = v28;
      if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
      double v30 = (std::__shared_weak_count *)*((void *)&v35 + 1);
      if (*((void *)&v35 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
      double v31 = v34;
      if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
      double v32 = v37;
      if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v15 = (const FeatureStyleAttributes **)(a1 + 80);
LABEL_15:
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  return v15;
}

void sub_1A188B138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t std::__tree<std::__value_type<unsigned char,md::RoadMetricsEntry>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,md::RoadMetricsEntry>,std::less<unsigned char>,true>,geo::StdAllocator<std::__value_type<unsigned char,md::RoadMetricsEntry>,mdm::Allocator>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char &&>,std::tuple<>>(uint64_t **a1, unsigned __int8 a2, unsigned char **a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = (uint64_t)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = v5;
        unsigned int v8 = *(unsigned __int8 *)(v5 + 32);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *(void *)v7;
        uint64_t v6 = (uint64_t **)v7;
        if (!*(void *)v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = *(void *)(v7 + 8);
      if (!v5)
      {
        uint64_t v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t)(a1 + 1);
LABEL_9:
    uint64_t v9 = v7;
    uint64_t v7 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 136, 8);
    *(unsigned char *)(v7 + 32) = **a3;
    *(void *)(v7 + 128) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v7 + 40) = _Q0;
    *(_OWORD *)(v7 + 56) = _Q0;
    *(_OWORD *)(v7 + 72) = _Q0;
    *(_OWORD *)(v7 + 88) = _Q0;
    *(void *)(v7 + 104) = 0xBFF0000000000000;
    __asm { FMOV            V0.2S, #-1.0 }
    *(void *)(v7 + 112) = _Q0;
    *(_DWORD *)(v7 + 120) = -1;
    *(void *)(v7 + 124) = 0;
    *(void *)uint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = v9;
    std::__shared_weak_count *v6 = (uint64_t *)v7;
    uint64_t v15 = (uint64_t *)**a1;
    double v16 = (uint64_t *)v7;
    if (v15)
    {
      *a1 = v15;
      double v16 = *v6;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v16);
    a1[3] = (uint64_t *)((char *)a1[3] + 1);
  }
  return v7;
}

uint64_t md::PolylineLabelPlacement::labelPosition(md::PolylineLabelPlacement *this)
{
  return (uint64_t)this + 48;
}

void md::LineLabelPlacer::updatePlacements(_DWORD *a1, uint64_t __e, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v12 = *(void *)a1;
  int v13 = *(_DWORD *)(*(void *)a1 + 252);
  int v14 = a1[4];
  if (*(unsigned char *)(*(void *)a1 + 288)) {
    goto LABEL_2;
  }
  if (__e >= 0x17) {
    uint64_t v20 = 23;
  }
  else {
    uint64_t v20 = __e;
  }
  unsigned int v21 = atomic_load((unsigned __int8 *)(v12 + 224 + v20));
  if (v21 == 254)
  {
    if (*(unsigned char *)(v12 + 289)) {
      unsigned int v22 = 24;
    }
    else {
      unsigned int v22 = 5;
    }
    unsigned int v23 = *(unsigned __int8 **)(v12 + 128);
    uint64_t v24 = *(void *)(v12 + 136) - (void)v23;
    if (v24)
    {
      uint64_t v25 = 0;
      unint64_t v26 = v24 / 112;
      if (v26 <= 1) {
        uint64_t v27 = 1;
      }
      else {
        uint64_t v27 = v26;
      }
      unsigned int v21 = -1;
      float v28 = 1000.0;
      while (1)
      {
        int v29 = *v23;
        v23 += 112;
        int v30 = v20 - v29;
        if (v20 == v29) {
          break;
        }
        if (v30 >= 0) {
          unsigned int v31 = v30;
        }
        else {
          unsigned int v31 = -v30;
        }
        if (v31 <= v22)
        {
          float v32 = (float)v30;
          if (v30 < 0) {
            float v32 = (float)v30 * -0.8;
          }
          if (v32 < v28) {
            unsigned int v21 = v25;
          }
          float v28 = fminf(v32, v28);
        }
        if (v27 == ++v25) {
          goto LABEL_44;
        }
      }
      unsigned int v21 = v25;
    }
    else
    {
      unsigned int v21 = -1;
    }
LABEL_44:
    atomic_store(v21, (unsigned __int8 *)(v12 + 224 + v20));
    if ((v21 & 0x80000000) != 0) {
      goto LABEL_2;
    }
  }
  else
  {
    unsigned int v21 = (char)v21;
    if ((char)v21 < 0) {
      goto LABEL_2;
    }
  }
  uint64_t v35 = *(void *)(v12 + 128);
  if (v35)
  {
    double v36 = *(double *)(v35 + 112 * v21 + 8);
    BOOL v15 = v36 > 12.0 / ldexpf(1.0, __e);
    goto LABEL_3;
  }
LABEL_2:
  BOOL v15 = 0;
LABEL_3:
  uint64_t v16 = a1[5];
  uint64_t v17 = 1 << __e;
  if (v13 != v14) {
    goto LABEL_34;
  }
  uint64_t v18 = a1[17];
  if ((v17 & v18) != 0) {
    int v19 = a5;
  }
  else {
    int v19 = 1;
  }
  if (((v19 | v15) & 1) == 0 && (v17 & v16) == 0) {
    return;
  }
  if (a5) {
LABEL_34:
  }
    LODWORD(v18) = 0;
  int v33 = v16 & ~v17;
  int v34 = v16 | v17;
  if (!v15) {
    int v34 = v33;
  }
  a1[4] = *(_DWORD *)(*(void *)a1 + 252);
  a1[5] = v34;
  a1[17] = v18 | v17;
  md::LineLabelPlacer::doUpdatePositions((uint64_t)a1, __e, a3, a4, v15, a6);
}

BOOL md::LineLabelFeature::isOnMeshRoad(md::LineLabelFeature *this)
{
  int v1 = *((unsigned __int8 *)this + 147);
  return v1 == 2 || v1 == 5;
}

uint64_t md::UniLineLabelFeature::hasAnnotatedShieldText(md::UniLineLabelFeature *this)
{
  if (*((unsigned char *)this + 449) == 1) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(md::UniLineLabelFeature *, void))(*(void *)this + 472))(this, 0);
  if (result)
  {
    if (*(char *)(result + 23) < 0) {
      uint64_t v2 = *(void *)(result + 8);
    }
    else {
      uint64_t v2 = *(unsigned __int8 *)(result + 23);
    }
    return v2 != 0;
  }
  return result;
}

uint64_t md::LineLabelFeature::enableMultipleLabelsPerLine(md::LineLabelFeature *this)
{
  return 1;
}

void md::NamedLabelDedupingGroup::prepareForCollision(float32x2_t *this, md::LabelManager *a2, double a3, double a4, double a5, double a6, double a7, __n128 a8)
{
  unsigned int v8 = a2;
  this[6] = this[5];
  this[9] = 0;
  uint64_t v10 = (float32x2_t *)v58;
  char v54 = v58;
  uint64_t v55 = (float32x2_t *)v58;
  int v56 = (float32x2_t *)v58;
  unint64_t v57 = 5;
  unsigned int v11 = (float32x2_t *)this[1];
  uint64_t v12 = (float32x2_t *)this[2];
  if (v11 != v12)
  {
    while (1)
    {
      float32x2_t v14 = *v11;
      if (!(*(unsigned int (**)(float32x2_t))(**(void **)v11 + 16))(*v11)) {
        goto LABEL_5;
      }
      BOOL v15 = (float32x2_t *)v54;
      int v13 = v55;
      uint64_t v16 = ((char *)v55 - (unsigned char *)v54) >> 3;
      if (v57 < v16 + 1) {
        break;
      }
LABEL_4:
      *int v13 = v14;
      ++v55;
LABEL_5:
      if (++v11 == v12)
      {
        uint64_t v10 = (float32x2_t *)v54;
        int v33 = v55;
        unsigned int v8 = a2;
        goto LABEL_26;
      }
    }
    uint64_t v17 = v56;
    unint64_t v18 = (1 << -(char)__clz(v57 + 1));
    if (v57 >= 0xFFFFFFFFFFFFFFFELL) {
      unint64_t v18 = 1;
    }
    if (v18 <= v16 + 1) {
      uint64_t v19 = v16 + 1;
    }
    else {
      uint64_t v19 = v18;
    }
    uint64_t v20 = malloc_type_malloc(8 * v19, 0x2004093837F09uLL);
    unsigned int v21 = (char *)v20;
    unsigned int v22 = (float32x2_t *)v54;
    unsigned int v23 = v55;
    if (v54 != v55)
    {
      unint64_t v24 = (char *)v55 - (unsigned char *)v54 - 8;
      if (v24 < 0x18)
      {
        uint64_t v25 = v20;
      }
      else
      {
        uint64_t v25 = v20;
        if ((unint64_t)((char *)v20 - (unsigned char *)v54) >= 0x20)
        {
          uint64_t v26 = (v24 >> 3) + 1;
          uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v25 = (void *)((char *)v20 + v27);
          float v28 = (long long *)((char *)v54 + 16);
          int v29 = v20 + 1;
          uint64_t v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v31 = *v28;
            *(v29 - 1) = *(v28 - 1);
            *int v29 = v31;
            v28 += 2;
            v29 += 2;
            v30 -= 4;
          }
          while (v30);
          if (v26 == (v26 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_22;
          }
          unsigned int v22 = (float32x2_t *)((char *)v22 + v27);
        }
      }
      do
      {
        uint64_t v32 = (uint64_t)*v22++;
        *v25++ = v32;
      }
      while (v22 != v23);
    }
LABEL_22:
    if (v15 != v17) {
      free(v54);
    }
    int v13 = (float32x2_t *)&v21[8 * v16];
    char v54 = v21;
    uint64_t v55 = v13;
    unint64_t v57 = v19;
    goto LABEL_4;
  }
  int v33 = (float32x2_t *)v58;
LABEL_26:
  uint64_t v34 = (char *)v33 - (char *)v10;
  if ((char *)v33 - (char *)v10 == 8) {
    goto LABEL_27;
  }
  if ((unint64_t)v34 >= 9)
  {
    uint64_t v35 = *((void *)v8 + 54);
    long long v52 = *(_OWORD *)(v35 + 1120);
    float32x2_t v36 = *(float32x2_t *)(v35 + 1072);
    float32x2_t v37 = vsub_f32(*(float32x2_t *)(v35 + 1080), v36);
    double v38 = COERCE_DOUBLE(vmla_f32(v36, (float32x2_t)0x3F0000003F000000, v37));
    double v53 = v38;
    unint64_t v39 = 126 - 2 * __clz(v34 >> 3);
    if (v33 == v10) {
      uint64_t v40 = 0;
    }
    else {
      uint64_t v40 = v39;
    }
    std::__introsort<std::_ClassicAlgPolicy,md::NamedLabelDedupingGroup::prepareForCollision(md::LabelManager *)::$_0 &,md::Label **,false>(v10, v33, (float32x2_t *)&v52, v40, 1, *(double *)&v37, v38, 0.0000305175853, a6, a7, a8);
    uint64_t v10 = (float32x2_t *)v54;
    double v41 = v55;
    if (v54 == v55) {
      goto LABEL_27;
    }
    unint64_t v42 = (char *)v55 - (unsigned char *)v54 - 8;
    if (v42 > 7)
    {
      uint64_t v45 = 0;
      uint64_t v46 = (v42 >> 3) + 1;
      uint64_t v43 = v46 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v44 = (float32x2_t *)((char *)v54 + 8 * (v46 & 0x3FFFFFFFFFFFFFFELL));
      do
      {
        uint64_t v47 = &v10[v45];
        float32x2_t v49 = *v47;
        float32x2_t v48 = v47[1];
        *(_DWORD *)(*(void *)&v49 + 32) = v45;
        *(_DWORD *)(*(void *)&v48 + 32) = v45 + 1;
        v45 += 2;
      }
      while (v43 != v45);
      if (v46 == v43) {
        goto LABEL_27;
      }
    }
    else
    {
      LODWORD(v43) = 0;
      uint64_t v44 = (float32x2_t *)v54;
    }
    do
    {
      uint64_t v50 = (uint64_t)*v44++;
      *(_DWORD *)(v50 + 32) = v43;
      LODWORD(v43) = v43 + 1;
    }
    while (v44 != v41);
LABEL_27:
    this[9] = *v10;
  }
  if (v10 != v56) {
    free(v10);
  }
}

void sub_1A188B83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  if (a14 != a16) {
    free(a14);
  }
  _Unwind_Resume(exception_object);
}

void md::LineLabelFeature::resolvedStyleAttributes(void *a1, const FeatureStyleAttributes *a2, int a3, uint64_t a4)
{
  unsigned int v8 = (char *)operator new(0x40uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)unsigned int v8 = &unk_1EF57F680;
  FeatureStyleAttributes::FeatureStyleAttributes((FeatureStyleAttributes *)(v8 + 24), a2);
  *a1 = v9;
  a1[1] = v8;
  if (!a3)
  {
LABEL_11:
    if (!a4) {
      return;
    }
    goto LABEL_12;
  }
  uint64_t v10 = v8[57];
  uint64_t v11 = *((void *)v8 + 3);
  if (!v8[57])
  {
LABEL_7:
    *(void *)(v11 + 8 * v10) = 0x100010025;
    unsigned __int8 v15 = v8[57] + 1;
    v8[57] = v15;
    qsort(*((void **)v8 + 3), v15, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
    goto LABEL_11;
  }
  if (v10 >= 0x20)
  {
    uint64_t v12 = 0;
    uint64_t v16 = (int *)*((void *)v8 + 3);
    while (1)
    {
      int v17 = *v16;
      v16 += 2;
      if (v17 == 65573) {
        break;
      }
      if (v10 == ++v12) {
        goto LABEL_11;
      }
    }
  }
  else
  {
    uint64_t v12 = 0;
    int v13 = (int *)*((void *)v8 + 3);
    while (1)
    {
      int v14 = *v13;
      v13 += 2;
      if (v14 == 65573) {
        break;
      }
      if (v10 == ++v12) {
        goto LABEL_7;
      }
    }
  }
  *(_DWORD *)(v11 + 8 * v12 + 4) = 1;
  if (a4)
  {
LABEL_12:
    uint64_t v18 = v8[57];
    uint64_t v19 = *((void *)v8 + 3);
    if (v8[57])
    {
      if (v18 >= 0x20)
      {
        uint64_t v20 = 0;
        unint64_t v24 = (int *)*((void *)v8 + 3);
        while (1)
        {
          int v25 = *v24;
          v24 += 2;
          if (v25 == 65612) {
            break;
          }
          if (v18 == ++v20) {
            return;
          }
        }
      }
      else
      {
        uint64_t v20 = 0;
        unsigned int v21 = (int *)*((void *)v8 + 3);
        while (1)
        {
          int v22 = *v21;
          v21 += 2;
          if (v22 == 65612) {
            break;
          }
          if (v18 == ++v20) {
            goto LABEL_17;
          }
        }
      }
      *(_DWORD *)(v19 + 8 * v20 + 4) = a4;
    }
    else
    {
LABEL_17:
      *(void *)(v19 + 8 * v18) = (a4 << 32) | 0x1004C;
      unsigned __int8 v23 = v8[57] + 1;
      v8[57] = v23;
      qsort(*((void **)v8 + 3), v23, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
    }
  }
}

void sub_1A188BA58(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

void sub_1A188BA70(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void md::LabelManager::styleForFeatureAttributes(uint64_t *a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v7 = *(void *)(a2 + 128);
  if (!v7 || (unsigned __int8 v8 = atomic_load((unsigned __int8 *)(v7 + 3659)), (v8 & 1) == 0))
  {
    md::createFeatureAttributeSet((gss::Allocator *)&v30, a3);
    md::LabelStyleCache::styleQueryForFeatureAttributes((uint64_t)&v35, (uint64_t *)(a2 + 184), &v30, a4);
    if (v30)
    {
      uint64_t v31 = v30;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v33 + 40))(v33, v30, v32 - v30);
    }
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = v35;
    uint64_t v10 = v36;
    if (v36) {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    gss::QueryableLocker<gss::PropertyID>::QueryableLocker(&v30, v9, (uint64_t)v10);
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    int v11 = v34;
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v30);
    if (v11)
    {
      uint64_t v12 = a2 + 208;
      md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::find((uint64_t)&v30, a2 + 208, &v35);
      if ((_BYTE)v32)
      {
        uint64_t v14 = v30;
        uint64_t v13 = v31;
        if (v31) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
        }
        unsigned __int8 v15 = (std::__shared_weak_count *)a1[1];
        *a1 = v14;
        a1[1] = v13;
        if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        if (*a1) {
          goto LABEL_41;
        }
        unsigned __int8 v23 = operator new(0x1E8uLL);
        unint64_t v24 = v23;
        v23[1] = 0;
        void v23[2] = 0;
        *unsigned __int8 v23 = &unk_1EF57F7D0;
        int v25 = v23 + 3;
        uint64_t v26 = v36;
        v37[0] = v35;
        v37[1] = v36;
        if (v36) {
          atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        md::LabelStyle::LabelStyle((uint64_t)(v23 + 3), v37, (void *)(a2 + 136), *(unsigned char *)(a2 + 156), *(unsigned char *)(a2 + 158), *(void *)(a2 + 161), *(unsigned char *)(a2 + 160), *(float *)(a2 + 152));
        if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
        uint64_t v27 = (std::__shared_weak_count *)a1[1];
        *a1 = (uint64_t)v25;
        a1[1] = (uint64_t)v24;
        if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
        md::LabelCachingStore<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,std::shared_ptr<md::LabelStyle>,std::weak_ptr<md::LabelStyle>,md::LabelPtrHash<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>,md::LabelPtrEqual<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>>::insert(v12, &v35, a1);
      }
      if (!(_BYTE)v32
        || (float v28 = (std::__shared_weak_count *)v31) == 0
        || atomic_fetch_add((atomic_ullong *volatile)(v31 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_41:
        int v29 = v36;
        if (v36)
        {
          if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        return;
      }
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      int v22 = v28;
    }
    else
    {
      uint64_t v17 = *(void *)(a2 + 128);
      if (!v17) {
        goto LABEL_41;
      }
      unsigned __int8 v18 = atomic_load((unsigned __int8 *)(v17 + 3658));
      if ((v18 & 1) == 0) {
        goto LABEL_41;
      }
      uint64_t v20 = *(void *)(a2 + 432);
      uint64_t v19 = *(void *)(a2 + 440);
      if (v19) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
      }
      unsigned int v21 = (atomic_ullong *)a1[1];
      *a1 = v20;
      a1[1] = v19;
      if (!v21 || atomic_fetch_add(v21 + 1, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_41;
      }
      (*(void (**)(atomic_ullong *))(*v21 + 16))(v21);
      int v22 = (std::__shared_weak_count *)v21;
    }
    std::__shared_weak_count::__release_weak(v22);
    goto LABEL_41;
  }
  uint64_t v16 = *(void *)(a2 + 440);
  *a1 = *(void *)(a2 + 432);
  a1[1] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_1A188BE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if ((_BYTE)a12 && a11 && !atomic_fetch_add(&a11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
    std::__shared_weak_count::__release_weak(a11);
  }
  unsigned __int8 v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  if (a16)
  {
    if (!atomic_fetch_add(&a16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

char *md::MapStandardLabeler::addAdditionalItemsToCollider(char *this)
{
  uint64_t v1 = (float32x2_t *)*((void *)this + 55);
  if (v1) {
    return md::LabelCollider::addCollidableItem(*((char **)this + 7), v1);
  }
  return this;
}

uint64_t md::MapStandardLabeler::addLinesToCollider(md::MapStandardLabeler *this)
{
  if (!*(unsigned char *)(*((void *)this + 3) + 3621)) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 6);
  int v3 = *(_DWORD *)(*((void *)this + 7) + 8);
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  if (v4 == v5)
  {
    int v6 = *(_DWORD *)(*((void *)this + 7) + 8);
  }
  else
  {
    do
    {
      uint64_t v7 = *(void **)v4;
      if (!*(unsigned char *)(*(void *)v4 + 122))
      {
        unsigned __int8 v8 = (md::LabelMapTileCollisionInfo *)v7[55];
        if (v8)
        {
          md::LabelMapTileCollisionInfo::addItemsToCollider(v8, *((md::LabelManager **)this + 3), *((md::LabelCollider **)this + 7));
          uint64_t v7 = *(void **)v4;
        }
        uint64_t v9 = (md::LabelMapTileCollisionInfo *)v7[57];
        if (v9)
        {
          md::LabelMapTileCollisionInfo::addItemsToCollider(v9, *((md::LabelManager **)this + 3), *((md::LabelCollider **)this + 7));
          uint64_t v7 = *(void **)v4;
        }
        uint64_t v10 = (md::LabelMapTileCollisionInfo *)v7[59];
        if (v10) {
          md::LabelMapTileCollisionInfo::addItemsToCollider(v10, *((md::LabelManager **)this + 3), *((md::LabelCollider **)this + 7));
        }
      }
      v4 += 16;
    }
    while (v4 != v5);
    int v6 = *(_DWORD *)(*((void *)this + 7) + 8);
  }
  return (v6 - v3);
}

uint64_t md::PhysicalLabelFeature::enableMultipleLabelsPerLine(md::PhysicalLabelFeature *this)
{
  return 0;
}

uint64_t md::LineLabelFeature::hasAnnotatedShieldText(md::LineLabelFeature *this)
{
  return 0;
}

char *md::LabelCollider::addCollidableItem(char *result, float32x2_t *a2)
{
  int v3 = result;
  v4.i32[0] = a2[1].i32[0];
  if (a2[3].f32[0] == 1.0)
  {
    v4.i32[1] = a2[1].i32[1];
  }
  else
  {
    v5.f32[0] = -a2[3].f32[1];
    v5.i32[1] = a2[3].i32[0];
    float32x2_t v4 = vadd_f32(vabs_f32(vmul_n_f32(v5, a2[1].f32[1])), vabs_f32(vmul_n_f32(a2[3], v4.f32[0])));
  }
  float v6 = *((float *)result + 8);
  float32x2_t v7 = a2[2];
  float32x2_t v8 = vadd_f32(v7, v4);
  float32x2_t v9 = *(float32x2_t *)(result + 36);
  float32x2_t v10 = vmul_n_f32(vsub_f32(v7, vadd_f32(v4, v9)), v6);
  int32x2_t v11 = vcvt_s32_f32(vmul_n_f32(vsub_f32(v8, v9), v6));
  int32x2_t v12 = vmax_s32(vcvt_s32_f32(v10), 0);
  int32x2_t v13 = vmin_s32(vadd_s32(*(int32x2_t *)(result + 44), (int32x2_t)-1), v11);
  int32x2_t v14 = vcgt_s32(v12, v13);
  if ((vorr_s8((int8x8_t)v14, (int8x8_t)vdup_lane_s32(v14, 1)).u8[0] & 1) == 0)
  {
    a2[5].i32[0] = 0;
    __int32 v15 = v12.i32[1];
    __int32 v27 = v13.i32[1];
    uint64_t v16 = *((void *)result + 7) + 24 * (v12.i32[0] + *((_DWORD *)result + 11) * v12.i32[1]);
    __int32 v17 = v13.i32[0] - v12.i32[0] + 1;
    while (1)
    {
      uint64_t v19 = (void **)(v16 + 16);
      __int32 v20 = v17;
      do
      {
        unint64_t v21 = (unint64_t)*(v19 - 2);
        unint64_t v22 = (unint64_t)*(v19 - 1);
        unint64_t v23 = (2 * v21) | 1;
        if (v21 < v22 || v22 >= v23) {
          goto LABEL_13;
        }
        if (v23 <= 0x14) {
          int v25 = 20;
        }
        else {
          int v25 = (2 * v21) | 1;
        }
        unint64_t v26 = (1 << -__clz(v25 - 1));
        uint64_t result = (char *)malloc_type_realloc(*v19, 8 * v26, 0x2004093837F09uLL);
        if (result)
        {
          *(v19 - 1) = (void *)v26;
          *uint64_t v19 = result;
          unint64_t v21 = (unint64_t)*(v19 - 2);
LABEL_13:
          *((void *)*v19 + v21) = a2;
          *(v19 - 2) = (void *)(v21 + 1);
        }
        v19 += 3;
        --v20;
      }
      while (v20);
      v16 += 24 * *((int *)v3 + 11);
      if (v15++ == v27)
      {
        ++*((_DWORD *)v3 + 2);
        return result;
      }
    }
  }
  return result;
}

uint64_t md::LabelText::LabelText(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)uint64_t result = &unk_1EF554458;
  *(_DWORD *)(result + 8) = 0;
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = a3;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  float32x2_t v4 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    uint64_t v17 = result;
    char v15 = a4;
    float32x2_t v4 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    a4 = v15;
    int v11 = v10;
    uint64_t result = v17;
    if (v11) {
      operator new();
    }
  }
  *(void *)(result + 56) = *((void *)v4 + 91);
  __asm { FMOV            V0.2S, #-1.0 }
  *(void *)(result + 64) = _D0;
  *(_DWORD *)(result + 72) = 0;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(void *)(result + 112) = 0;
  {
    uint64_t v18 = result;
    char v16 = a4;
    uint64_t v14 = _D0;
    _D0 = v14;
    float32x2_t v4 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    a4 = v16;
    int v13 = v12;
    uint64_t result = v18;
    if (v13) {
      operator new();
    }
  }
  *(void *)(result + 120) = *((void *)v4 + 91);
  *(void *)(result + 128) = _D0;
  *(_DWORD *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = 0;
  *(_DWORD *)(result + 8) |= 1 << a4;
  return result;
}

void __destroy_helper_block_ea8_32c63_ZTSNSt3__18weak_ptrIN2md14CallbackHolderINS1_10StyleLogicEEEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void md::LabelCustomFeatureProvider::addAnnotationsToFeatureMap(md::LabelCustomFeatureProvider *this, NSArray *a2, int a3)
{
  uint64_t v143 = *MEMORY[0x1E4F143B8];
  float32x2_t v4 = a2;
  uint64_t v132 = 0;
  unint64_t v133 = 0;
  unint64_t v134 = 0;
  {
    operator new();
  }
  uint64_t v135 = mdm::Allocator::instance(void)::alloc;
  long long v128 = 0u;
  long long v129 = 0u;
  long long v130 = 0u;
  long long v131 = 0u;
  obuint64_t j = v4;
  uint64_t v5 = [(NSArray *)obj countByEnumeratingWithState:&v128 objects:v142 count:16];
  if (v5)
  {
    uint64_t v123 = *(void *)v129;
    float v6 = (char *)this + 208;
    int64x2_t v116 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    int64x2_t v117 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    __asm { FMOV            V0.2D, #0.5 }
    float64x2_t v114 = _Q0;
    float64x2_t v115 = (float64x2_t)xmmword_1A28FCBE0;
    do
    {
      uint64_t v124 = v5;
      for (uint64_t i = 0; i != v124; ++i)
      {
        if (*(void *)v129 != v123) {
          objc_enumerationMutation(obj);
        }
        id v12 = *(id *)(*((void *)&v128 + 1) + 8 * i);
        int v13 = v12;
        uint64_t v14 = *(uint64_t **)v6;
        if (*(void *)v6)
        {
          char v15 = (char *)this + 208;
          do
          {
            unint64_t v16 = v14[4];
            _CF = v16 >= (unint64_t)v12;
            if (v16 >= (unint64_t)v12) {
              uint64_t v18 = (uint64_t **)v14;
            }
            else {
              uint64_t v18 = (uint64_t **)(v14 + 1);
            }
            if (_CF) {
              char v15 = (char *)v14;
            }
            uint64_t v14 = *v18;
          }
          while (*v18);
          if (v15 != v6 && (unint64_t)v12 >= *((void *)v15 + 4))
          {
            unint64_t v26 = v15 + 40;
            ++*((_DWORD *)v15 + 14);
            if ((a3 & 1) == 0)
            {
              *(unsigned char *)(*(void *)v26 + 144) = 1;
              goto LABEL_142;
            }
LABEL_141:
            ++v26[5];
            goto LABEL_142;
          }
        }
        long long v127 = 0uLL;
        uint64_t v19 = objc_msgSend(v12, "feature", *(_OWORD *)&v114, *(_OWORD *)&v115);
        __int32 v20 = v19;
        if (!v19 || !*(void *)[v19 feature]) {
          goto LABEL_123;
        }
        id v21 = *((id *)this + 6);
        [v20 setDataSource:v21];

        uint64_t v22 = *(void *)[v20 feature];
        uint64_t v23 = *((void *)this + 19);
        unint64_t v24 = (std::__shared_weak_count *)*((void *)this + 20);
        if (v24)
        {
          atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v25 = *(std::__shared_weak_count **)(v22 + 104);
        *(void *)(v22 + 96) = v23;
        *(void *)(v22 + 104) = v24;
        if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
          if (!v24) {
            goto LABEL_30;
          }
        }
        else if (!v24)
        {
          goto LABEL_30;
        }
        if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
LABEL_30:
        if (![v20 isPointFeature])
        {
          if (![v20 isLineFeature])
          {
            unint64_t v26 = 0;
            int v69 = 1;
            goto LABEL_137;
          }
          float32x2_t v49 = (uint64_t *)[v20 feature];
          uint64_t v51 = *v49;
          uint64_t v50 = (std::__shared_weak_count *)v49[1];
          uint64_t v138 = *v49;
          uint64_t v139 = v50;
          if (v50) {
            atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v52 = (char *)operator new(0x248uLL);
          *((void *)v52 + 1) = 0;
          *((void *)v52 + 2) = 0;
          *(void *)long long v52 = &unk_1EF580FE0;
          id v53 = v13;
          md::LineLabelFeature::LineLabelFeature((uint64_t)(v52 + 24), 3, 6);
          *((void *)v52 + 3) = &unk_1EF53E8C8;
          *((void *)v52 + 58) = &unk_1EF53EB80;
          *((void *)v52 + 59) = *(void *)(v51 + 16);
          uint64_t v54 = 76;
          if (!*(unsigned char *)(v51 + 112)) {
            uint64_t v54 = 72;
          }
          *((_DWORD *)v52 + 120) = *(_DWORD *)(v51 + v54);
          *((_DWORD *)v52 + 121) = *(_DWORD *)(v51 + 80);
          *((void *)v52 + 61) = v51;
          *((void *)v52 + 62) = v50;
          if (v50) {
            atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *((void *)v52 + 67) = 0;
          *(_OWORD *)(v52 + 504) = 0u;
          *(_OWORD *)(v52 + 520) = 0u;
          *((_DWORD *)v52 + 136) = 2139095039;
          *((_WORD *)v52 + 274) = 0;
          v52[550] = 0;
          id v55 = v53;
          *((void *)v52 + 69) = &unk_1EF55A018;
          *((void *)v52 + 70) = v55;
          v52[576] = v55 != 0;
          unsigned __int8 v56 = atomic_load((unsigned __int8 *)v52 + 576);
          v52[167] = v56 & 1;
          uint64_t v58 = *(void *)(v138 + 32);
          uint64_t v57 = *(void *)(v138 + 40);
          if (v57) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v57 + 8), 1uLL, memory_order_relaxed);
          }
          BOOL v59 = (std::__shared_weak_count *)*((void *)v52 + 56);
          *((void *)v52 + 55) = v58;
          *((void *)v52 + 56) = v57;
          if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
          uint64_t v60 = v138;
          GEOLocationCoordinate3DLerp();
          double v64 = v63;
          if (fabs(v61) <= 85.0511169)
          {
            float64_t v118 = v62;
            long double v81 = tan(v61 * 0.00872664626 + 0.785398163);
            long double v82 = log(v81);
            v83.f64[0] = v118;
            v83.f64[1] = v82;
            *((float64x2_t *)v52 + 33) = vmlaq_f64(v114, v115, v83);
            *(_WORD *)(v52 + 549) = 257;
          }
          else
          {
            double v65 = v62 * 0.0174532925;
            __double2 v66 = __sincos_stret(v61 * 0.0174532925);
            double v67 = 6378137.0 / sqrt(v66.__sinval * v66.__sinval * -0.00669437999 + 1.0);
            __double2 v68 = __sincos_stret(v65);
            *((double *)v52 + 63) = v67 * v66.__cosval * v68.__cosval;
            *((double *)v52 + 64) = v67 * v66.__cosval * v68.__sinval;
            *((double *)v52 + 65) = v66.__sinval * 0.99330562 * v67;
            v52[548] = 1;
          }
          if (v64 != 1.79769313e308)
          {
            float v84 = v64;
            *((float *)v52 + 136) = v84;
          }
          uint64_t v85 = *((void *)v52 + 27);
          *(unsigned char *)(v85 + 122) = 3;
          *(unsigned char *)(v85 + 290) = *(unsigned char *)(v60 + 177) ^ 1;
          {
            operator new();
          }
          uint64_t v86 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                     + 16))(mdm::Allocator::instance(void)::alloc, 248, 8);
          uint64_t v87 = v86;
          uint64_t v119 = v55;
          uint64_t v89 = v138;
          int v88 = v139;
          if (v139) {
            atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *(_DWORD *)uint64_t v86 = 7;
          *(_OWORD *)(v86 + 8) = 0u;
          *(_OWORD *)(v86 + 24) = 0u;
          *(_OWORD *)(v86 + 40) = 0u;
          *(_OWORD *)(v86 + 56) = 0u;
          *(_OWORD *)(v86 + 72) = 0u;
          *(void *)(v86 + 88) = 0;
          {
            operator new();
          }
          *(void *)(v87 + 96) = mdm::Allocator::instance(void)::alloc;
          *(void *)(v87 + 104) = 0;
          *(void *)(v87 + 112) = v89;
          *(void *)(v87 + 120) = v88;
          if (v88) {
            atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *(void *)(v87 + 128) = v52 + 464;
          *(void *)(v87 + 136) = 0;
          *(_WORD *)(v87 + 144) = 255;
          *(_DWORD *)(v87 + 148) = 0;
          *(_DWORD *)(v87 + 152) = 0;
          *(void *)(v87 + 168) = 0;
          *(void *)(v87 + 176) = 0;
          *(int64x2_t *)(v87 + 184) = v117;
          *(int64x2_t *)(v87 + 200) = v116;
          *(unsigned char *)(v87 + 216) = 0;
          *(_DWORD *)(v87 + 220) = 0;
          *(_WORD *)(v87 + 224) = 256;
          *(unsigned char *)(v87 + 226) = 0;
          *(void *)(v87 + 232) = 0;
          *(void *)(v87 + 240) = 0;
          uint64_t v136 = (md::LabelLineStore::WorkUnit *)v87;
          if (v88 && !atomic_fetch_add(&v88->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
          std::mutex::lock((std::mutex *)(v85 + 16));
          uint64_t v90 = *(md::LabelLineStore::WorkUnit ***)(v85 + 96);
          if ((unint64_t)v90 >= *(void *)(v85 + 104))
          {
            unint64_t v92 = std::vector<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,geo::StdAllocator<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>,mdm::Allocator>>::__emplace_back_slow_path<std::unique_ptr<md::LabelLineStore::WorkUnit,mdm::TypeDeleter<md::LabelLineStore::WorkUnit>>>(v85 + 88, (uint64_t *)&v136);
          }
          else
          {
            if (v90)
            {
              uint64_t v91 = v136;
              uint64_t v136 = 0;
              std::__shared_weak_count *v90 = v91;
            }
            unint64_t v92 = v90 + 1;
          }
          *(void *)(v85 + 96) = v92;
          atomic_store(1u, (unsigned __int8 *)(v85 + 80));
          std::mutex::unlock((std::mutex *)(v85 + 16));
          uint64_t v93 = v136;
          uint64_t v136 = 0;
          if (v93)
          {
            md::LabelLineStore::WorkUnit::~WorkUnit(v93);
            {
              operator new();
            }
            (*(void (**)(uint64_t, md::LabelLineStore::WorkUnit *, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                     + 40))(mdm::Allocator::instance(void)::alloc, v93, 248);
          }
          uint64_t v94 = (unsigned __int8 *)*((void *)v52 + 27);
          unsigned __int8 v95 = atomic_load(v94 + 80);
          if (v95) {
            md::LabelLineStore::consumeWorkUnits((md::LabelLineStore *)v94);
          }
          (*(void (**)(char *, void, uint64_t))(*((void *)v52 + 3) + 32))(v52 + 24, 0, 1);

          uint64_t v96 = (std::__shared_weak_count *)*((void *)&v127 + 1);
          *(void *)&long long v127 = v52 + 24;
          *((void *)&v127 + 1) = v52;
          if (v96 && !atomic_fetch_add(&v96->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
          int v80 = v139;
          if (!v139) {
            goto LABEL_115;
          }
LABEL_113:
          if (!atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
          goto LABEL_115;
        }
        uint64_t v27 = [v20 feature];
        float v28 = *(std::__shared_weak_count **)(v27 + 8);
        uint64_t v125 = *(md::LabelExternalPointFeature **)v27;
        unint64_t v126 = v28;
        if (v28) {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v29 = (char *)operator new(0x2B8uLL);
        *((void *)v29 + 1) = 0;
        *((void *)v29 + 2) = 0;
        *(void *)int v29 = &unk_1EF580480;
        uint64_t v30 = *((void *)this + 1);
        id v120 = v13;
        uint64_t v31 = md::PointLabelFeature::PointLabelFeature((md::PointLabelFeatureBase *)(v29 + 24), (uint64_t *)&v125, 0, v30);
        uint64_t v141 = geo::codec::Allocator::instance(v31);
        uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v141 + 16))(v141, 48, 4);
        uint64_t v138 = v32;
        uint64_t v140 = v32 + 48;
        if (v32) {
          *(void *)uint64_t v32 = 0x100010024;
        }
        *(_OWORD *)(v32 + 8) = xmmword_1A28FF400;
        *(_OWORD *)(v32 + 24) = xmmword_1A28FF410;
        *(void *)(v32 + 40) = 65581;
        uint64_t v139 = (std::__shared_weak_count *)(v32 + 48);
        uint64_t v33 = (std::__shared_weak_count *)operator new(0x40uLL);
        v33->__shared_owners_ = 0;
        v33->__shared_weak_owners_ = 0;
        v33->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57F680;
        unsigned __int8 v34 = (void **)&v33[1].__vftable;
        FeatureStyleAttributes::FeatureStyleAttributes((uint64_t)&v33[1], &v138);
        uint64_t v136 = (md::LabelLineStore::WorkUnit *)&v33[1];
        uint64_t v137 = v33;
        uint64_t v35 = (uint64_t *)*((void *)v29 + 85);
        uint64_t v36 = *((unsigned __int8 *)v35 + 33);
        if (*((unsigned char *)v35 + 33))
        {
          uint64_t v37 = 0;
          char v38 = 0;
          uint64_t v39 = *v35;
          unsigned __int8 v40 = BYTE1(v33[2].__shared_owners_);
          while (1)
          {
            size_t v41 = v40;
            unint64_t v42 = *v34;
            if (v40) {
              break;
            }
LABEL_37:
            v42[v41] = *(void *)(v39 + 8 * v37);
            unsigned __int8 v40 = BYTE1(v33[2].__shared_owners_) + 1;
            BYTE1(v33[2].__shared_owners_) = v40;
            ++v37;
            char v38 = 1;
            if (v37 == v36)
            {
              unint64_t v42 = *v34;
              size_t v41 = v40;
LABEL_69:
              qsort(v42, v41, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
              goto LABEL_70;
            }
          }
          if (v40 > 0x1Fu)
          {
            do
            {
              uint64_t v46 = 0;
              uint64_t v47 = (int *)v42;
              while (1)
              {
                int v48 = *v47;
                v47 += 2;
                if (v48 == *(_DWORD *)(v39 + 8 * v37)) {
                  break;
                }
                if (v41 == ++v46) {
                  goto LABEL_48;
                }
              }
              HIDWORD(v42[v46]) = *(_DWORD *)(v39 + 8 * v37 + 4);
LABEL_48:
              ++v37;
            }
            while (v37 != v36);
          }
          else
          {
            do
            {
              uint64_t v43 = 0;
              uint64_t v44 = (int *)v42;
              while (1)
              {
                int v45 = *v44;
                v44 += 2;
                if (v45 == *(_DWORD *)(v39 + 8 * v37)) {
                  break;
                }
                if (v41 == ++v43) {
                  goto LABEL_37;
                }
              }
              HIDWORD(v42[v43]) = *(_DWORD *)(v39 + 8 * v37++ + 4);
            }
            while (v37 != v36);
          }
          if (v38) {
            goto LABEL_69;
          }
        }
LABEL_70:
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
        *((void *)v29 + 85) = v34;
        uint64_t v70 = (std::__shared_weak_count *)*((void *)v29 + 86);
        *((void *)v29 + 86) = v33;
        if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
        uint64_t v71 = v125;
        v29[417] = md::LabelExternalPointFeature::isLeafCluster(v125);
        v29[418] = md::LabelExternalPointFeature::isLeafClusterChild(v71);
        v29[264] = 1;
        v29[265] = *(void *)(v30 + 184) != 0;
        id v72 = v120;
        int64_t v73 = v72;
        if (v72) {
          id v74 = v72;
        }
        unint64_t v75 = (void *)*((void *)v29 + 69);
        *((void *)v29 + 69) = v73;

        atomic_store(v73 != 0, (unsigned __int8 *)v29 + 419);
        unsigned __int8 v76 = atomic_load((unsigned __int8 *)v29 + 419);
        v29[167] = v76 & 1;
        uint64_t v77 = v137;
        if (v137 && !atomic_fetch_add(&v137->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
          uint64_t v78 = v138;
          if (!v138) {
            goto LABEL_79;
          }
LABEL_78:
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v141 + 40))(v141, v78, v140 - v78);
          goto LABEL_79;
        }
        uint64_t v78 = v138;
        if (v138) {
          goto LABEL_78;
        }
LABEL_79:

        uint64_t v79 = (std::__shared_weak_count *)*((void *)&v127 + 1);
        *(void *)&long long v127 = v29 + 24;
        *((void *)&v127 + 1) = v29;
        if (v79 && !atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
          int v80 = v126;
          if (v126) {
            goto LABEL_113;
          }
        }
        else
        {
          int v80 = v126;
          if (v126) {
            goto LABEL_113;
          }
        }
LABEL_115:
        uint64_t v97 = v127;
        *(void *)(v97 + 72) = atomic_fetch_add((atomic_ullong *volatile)(*(void *)(*((void *)this + 1) + 288) + 680), 1uLL)+ 1;
        uint64_t v98 = v133;
        if ((unint64_t)v133 >= v134)
        {
          unint64_t v100 = (uint64_t *)std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>((uint64_t)&v132, &v127);
        }
        else
        {
          if (v133)
          {
            *unint64_t v133 = v127;
            uint64_t v99 = *((void *)&v127 + 1);
            v98[1] = *((void *)&v127 + 1);
            if (v99) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v99 + 8), 1uLL, memory_order_relaxed);
            }
          }
          unint64_t v100 = v98 + 2;
        }
        unint64_t v133 = v100;
        if ((a3 & 1) == 0) {
          *(unsigned char *)(v127 + 144) = 1;
        }
LABEL_123:
        unint64_t v101 = *(uint64_t **)v6;
        uint64_t v102 = (uint64_t *)((char *)this + 208);
        uint64_t v103 = (uint64_t *)((char *)this + 208);
        if (*(void *)v6)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v103 = v101;
              unint64_t v104 = v101[4];
              if ((unint64_t)v13 >= v104) {
                break;
              }
              unint64_t v101 = (uint64_t *)*v103;
              uint64_t v102 = v103;
              if (!*v103) {
                goto LABEL_130;
              }
            }
            if (v104 >= (unint64_t)v13) {
              break;
            }
            unint64_t v101 = (uint64_t *)v103[1];
            if (!v101)
            {
              uint64_t v102 = v103 + 1;
              goto LABEL_130;
            }
          }
          uint64_t v105 = (uint64_t)v103;
        }
        else
        {
LABEL_130:
          uint64_t v105 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 27) + 16))(*((void *)this + 27), 64, 8);
          id v106 = v13;
          long long v107 = v127;
          *(void *)(v105 + 32) = v106;
          *(_OWORD *)(v105 + 40) = v107;
          if (*((void *)&v107 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v107 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          *(void *)(v105 + 56) = 1;
          *(void *)uint64_t v105 = 0;
          *(void *)(v105 + 8) = 0;
          *(void *)(v105 + 16) = v103;
          *uint64_t v102 = v105;
          uint64_t v108 = **((void **)this + 25);
          uint64_t v109 = (uint64_t *)v105;
          if (v108)
          {
            *((void *)this + 25) = v108;
            uint64_t v109 = (uint64_t *)*v102;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 26), v109);
          ++*((void *)this + 28);
        }
        int v69 = 0;
        unint64_t v26 = (_DWORD *)(v105 + 40);
LABEL_137:

        int v110 = (std::__shared_weak_count *)*((void *)&v127 + 1);
        if (*((void *)&v127 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v127 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
        if (((v69 | a3 ^ 1) & 1) == 0) {
          goto LABEL_141;
        }
LABEL_142:
      }
      uint64_t v5 = [(NSArray *)obj countByEnumeratingWithState:&v128 objects:v142 count:16];
    }
    while (v5);
  }

  uint64_t v111 = v132;
  float v112 = v133;
  if (v132 != v133 && (a3 & 1) == 0) {
    md::LabelFeatureStyler::styleExternalFeatures(*(unsigned int **)(*((void *)this + 1) + 296), &v132);
  }
  if (v111)
  {
    if (v111 != v112)
    {
      do
      {
        uint64_t v113 = (std::__shared_weak_count *)*(v112 - 1);
        if (v113 && !atomic_fetch_add(&v113->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
          std::__shared_weak_count::__release_weak(v113);
        }
        v112 -= 2;
      }
      while (v112 != v111);
      uint64_t v111 = v132;
    }
    (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(void *)v135 + 40))(v135, v111, v134 - (void)v111);
  }
}

void sub_1A188D5B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,md::PointLabelFeature *a30,md::LineLabelFeature *a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  _Unwind_Resume(a1);
}

uint64_t md::LabelExternalPointFeature::isLeafClusterChild(md::LabelExternalPointFeature *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (!v2 || v2->__shared_owners_ == -1) {
    return 0;
  }
  int v3 = std::__shared_weak_count::lock(v2);
  uint64_t v4 = *((void *)this + 37);
  if (!v3) {
    uint64_t v4 = 0;
  }
  if (v4 && (uint64_t v5 = *((void *)this + 36)) != 0)
  {
    uint64_t v6 = ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) >> 1) & 1;
    if (!v3) {
      return v6;
    }
  }
  else
  {
    uint64_t v6 = 0;
    if (!v3) {
      return v6;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v6;
}

void sub_1A188D8A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::Allocator::instance(geo::codec::Allocator *this)
{
  {
    operator new();
  }
  return geo::codec::Allocator::instance(void)::alloc;
}

void sub_1A188D95C(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40DA10AB66);
  _Unwind_Resume(a1);
}

void sub_1A188D98C(_Unwind_Exception *a1)
{
}

md::PointLabelFeatureBase *md::PointLabelFeature::PointLabelFeature(md::PointLabelFeatureBase *this, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = this;
  float32x2_t v7 = *(const md::LabelPoint **)(*a2 + 192);
  if (*(const md::LabelPoint **)(*a2 + 200) == v7)
  {
    {
      float32x2_t v7 = (const md::LabelPoint *)&md::LabelPoint::NullPoint(void)::kNullLabelPoint;
    }
    else
    {
      float32x2_t v7 = (const md::LabelPoint *)&md::LabelPoint::NullPoint(void)::kNullLabelPoint;
      {
        qword_1EB317748 = 0;
        md::LabelPoint::NullPoint(void)::kNullLabelPoint = 0u;
        *(_OWORD *)&qword_1EB317738 = 0u;
        dword_1EB317750 = 2139095039;
        word_1EB317754 = 256;
        byte_1EB317756 = 1;
      }
      uint64_t v6 = this;
      uint64_t v5 = a2;
    }
  }
  md::PointLabelFeatureBase::PointLabelFeatureBase((uint64_t)v6, v7);
  *(void *)uint64_t v6 = &unk_1EF537458;
  *((void *)v6 + 31) = 850045863;
  *((void *)v6 + 41) = 0;
  *((void *)v6 + 42) = 0;
  *((void *)v6 + 40) = 0;
  *((_OWORD *)v6 + 16) = 0u;
  *((_OWORD *)v6 + 17) = 0u;
  *((_OWORD *)v6 + 18) = 0u;
  *(_OWORD *)((char *)v6 + 297) = 0u;
  {
    operator new();
  }
  uint64_t v8 = mdm::Allocator::instance(void)::alloc;
  *((void *)v6 + 44) = 0;
  *((void *)v6 + 45) = 0;
  *((void *)v6 + 43) = v8;
  uint64_t v9 = *v5;
  *((_DWORD *)v6 + 92) = *(_DWORD *)(*v5 + 80);
  *((void *)v6 + 47) = *(void *)(v9 + 184);
  *((void *)v6 + 48) = 0;
  *((unsigned char *)v6 + 392) = *(unsigned char *)(*(void *)(a4 + 232) + 17) ^ 1;
  *((unsigned char *)v6 + 400) = 0;
  *((unsigned char *)v6 + 404) = 0;
  *((unsigned char *)v6 + 408) = 0;
  *((_WORD *)v6 + 206) = 0;
  *((_DWORD *)v6 + 104) = 0;
  int v10 = (uint64_t *)((char *)v6 + 464);
  *((void *)v6 + 58) = 0;
  *(_DWORD *)((char *)v6 + 393) = 0;
  *((void *)v6 + 54) = 0;
  *((void *)v6 + 55) = 0;
  *((void *)v6 + 53) = 0;
  *((unsigned char *)v6 + 448) = 0;
  {
    operator new();
  }
  *((void *)v6 + 59) = mdm::Allocator::instance(void)::alloc;
  *((void *)v6 + 60) = 0;
  *((void *)v6 + 57) = v10;
  *((_DWORD *)v6 + 122) = 1;
  uint64_t v11 = *v5;
  *((void *)v6 + 62) = *(void *)(*v5 + 16);
  *((void *)v6 + 63) = v11;
  uint64_t v12 = v5[1];
  *((void *)v6 + 64) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v6 + 65) = &unk_1EF55A018;
  *((void *)v6 + 66) = 0;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  {
    operator new();
  }
  *((void *)v6 + 71) = mdm::Allocator::instance(void)::alloc;
  *((void *)v6 + 72) = 0;
  *((void *)v6 + 74) = 0;
  *((void *)v6 + 73) = 0;
  {
    operator new();
  }
  *((void *)v6 + 75) = mdm::Allocator::instance(void)::alloc;
  uint64_t v13 = *v5;
  long long v14 = *(_OWORD *)(*v5 + 248);
  *((_OWORD *)v6 + 38) = v14;
  *((_OWORD *)v6 + 39) = *(_OWORD *)(v13 + 264);
  *((_WORD *)v6 + 320) = *(_WORD *)(v13 + 280);
  *((unsigned char *)v6 + 642) = 0;
  *((_WORD *)v6 + 323) = *(unsigned __int8 *)(v13 + 282);
  if (*(unsigned char *)(v13 + 237)) {
    BOOL v15 = 0;
  }
  else {
    BOOL v15 = (void)v14 == 0;
  }
  char v16 = !v15;
  *((unsigned char *)v6 + 648) = v16;
  *((unsigned char *)v6 + 649) = 1;
  uint64_t v17 = (uint64_t *)((char *)v6 + 656);
  *(_DWORD *)((char *)v6 + 650) = 0;
  *((_WORD *)v6 + 327) = 0;
  uint64_t v18 = *v5;
  uint64_t v19 = *(void *)(*v5 + 32);
  *((void *)v6 + 82) = v19;
  uint64_t v20 = *(void *)(v18 + 40);
  *((void *)v6 + 83) = v20;
  if (v20)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
    uint64_t v18 = *v5;
    uint64_t v19 = *v17;
  }
  int v156 = (void **)((char *)v6 + 456);
  uint64_t v21 = 76;
  if (!*(unsigned char *)(v18 + 112)) {
    uint64_t v21 = 72;
  }
  uint64_t v22 = (const float *)(v18 + v21);
  float32x4_t v23 = vld1q_dup_f32(v22);
  *((float32x4_t *)v6 + 22) = v23;
  if (!v19)
  {
    _ZNSt3__115allocate_sharedB8nn180100I22FeatureStyleAttributesNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v170);
    long long v24 = v170;
    long long v170 = 0uLL;
    int v25 = (std::__shared_weak_count *)*((void *)v6 + 83);
    *((_OWORD *)v6 + 41) = v24;
    if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    unint64_t v26 = (std::__shared_weak_count *)*((void *)&v170 + 1);
    if (*((void *)&v170 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v170 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      uint64_t v19 = *v17;
      if (!*v17) {
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v19 = *v17;
      if (!*v17)
      {
LABEL_39:
        BOOL v32 = 0;
        *((unsigned char *)v6 + 240) = 0;
        goto LABEL_40;
      }
    }
  }
  unint64_t v27 = *(unsigned __int8 *)(v19 + 33);
  if (!*(unsigned char *)(v19 + 33)) {
    goto LABEL_39;
  }
  float v28 = *(_DWORD **)v19;
  if (**(_DWORD **)v19 != 65572)
  {
    unint64_t v29 = 0;
    uint64_t v30 = v28 + 2;
    while (v27 - 1 != v29)
    {
      int v31 = *v30;
      v30 += 2;
      ++v29;
      if (v31 == 65572)
      {
        if (v29 < v27) {
          goto LABEL_30;
        }
        goto LABEL_39;
      }
    }
    goto LABEL_39;
  }
  unint64_t v29 = 0;
LABEL_30:
  BOOL v15 = LOWORD(v28[2 * v29 + 1]) == 1;
  *((unsigned char *)v6 + 240) = v15;
  BOOL v32 = v15 && *(void *)(a4 + 184) != 0;
LABEL_40:
  *((unsigned char *)v6 + 241) = v32;
  uint64_t v33 = *v5;
  uint64_t v179 = 0;
  uint64_t v180 = 0;
  long long v178 = 0;
  uint64_t v34 = *(void *)(v33 + 200) - *(void *)(v33 + 192);
  if (v34)
  {
    std::vector<unsigned long>::__append((uint64_t)&v178, 0xAAAAAAAAAAAAAAABLL * (v34 >> 4));
    uint64_t v35 = (unint64_t *)v178;
    uint64_t v36 = (unint64_t *)v179;
    if (v178 != v179)
    {
      unint64_t v37 = (char *)v179 - (char *)v178 - 8;
      if (v37 >= 0x18)
      {
        uint64_t v40 = (v37 >> 3) + 1;
        uint64_t v38 = v40 & 0x3FFFFFFFFFFFFFFCLL;
        int64x2_t v41 = (int64x2_t)xmmword_1A28FC760;
        unint64_t v42 = v178 + 1;
        int64x2_t v43 = vdupq_n_s64(2uLL);
        int64x2_t v44 = vdupq_n_s64(4uLL);
        uint64_t v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v42[-1] = v41;
          int64x2_t *v42 = vaddq_s64(v41, v43);
          int64x2_t v41 = vaddq_s64(v41, v44);
          v42 += 2;
          v45 -= 4;
        }
        while (v45);
        if (v40 == v38) {
          goto LABEL_49;
        }
        uint64_t v39 = (uint64_t *)&v35[v40 & 0x3FFFFFFFFFFFFFFCLL];
      }
      else
      {
        uint64_t v38 = 0;
        uint64_t v39 = (uint64_t *)v178;
      }
      do
        *v39++ = v38++;
      while (v39 != (uint64_t *)v36);
LABEL_49:
      uint64_t v154 = v36;
      long long v155 = (uint64_t *)((char *)v6 + 464);
      while (1)
      {
        unint64_t v46 = *v35;
        unsigned int v159 = *((_DWORD *)v6 + 122);
        *((_DWORD *)v6 + 122) = v159 + 1;
        long long v170 = 0uLL;
        unint64_t v171 = 0;
        {
          operator new();
        }
        uint64_t v172 = mdm::Allocator::instance(void)::alloc;
        uint64_t v47 = *(void *)(*v5 + 192);
        if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(*v5 + 200) - v47) >> 4) <= v46)
        {
          int v48 = &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
          {
            {
              qword_1EB317748 = 0;
              md::LabelPoint::NullPoint(void)::kNullLabelPoint = 0u;
              *(_OWORD *)&qword_1EB317738 = 0u;
              dword_1EB317750 = 2139095039;
              word_1EB317754 = 256;
              byte_1EB317756 = 1;
            }
            int v48 = &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
            uint64_t v6 = this;
            uint64_t v5 = a2;
            uint64_t v36 = v154;
            int v10 = v155;
          }
        }
        else
        {
          int v48 = (long long *)(v47 + 48 * v46);
        }
        long long v49 = *v48;
        uint64_t v174 = *((void *)v48 + 2);
        long long v173 = v49;
        __n128 v51 = *(__n128 *)((char *)v48 + 24);
        __n128 v175 = v51;
        float v50 = *((float *)v48 + 10);
        *(float *)((char *)v176 + 3) = *(float *)((char *)v48 + 43);
        v176[0] = v50;
        BYTE1(v177) = 0;
        HIBYTE(v177) = 0;
        v51.n128_f32[0] = v50;
        BYTE2(v177) = v50 != 3.4028e38;
        uint64_t v165 = (void *)*v5;
        if (*(void *)(*v5 + 48) == *(void *)(*v5 + 56)) {
          goto LABEL_206;
        }
        {
          operator new();
        }
        uint64_t v161 = mdm::Allocator::instance(void)::alloc;
        {
          operator new();
        }
        __int32 v157 = v35;
        uint64_t v160 = mdm::Allocator::instance(void)::alloc;
        id v53 = (unsigned __int8 *)v165[6];
        long long v52 = (unsigned __int8 *)v165[7];
        if (v53 != v52)
        {
          unint64_t v54 = 0;
          id v55 = 0;
          unint64_t v166 = 0;
          __int16 v169 = 0;
          unsigned __int8 v56 = 0;
          unint64_t v162 = 0;
          char v57 = 0;
          while (1)
          {
            if (v53[1]) {
              goto LABEL_62;
            }
            if ((unint64_t)v56 >= v162) {
              break;
            }
            if (v56) {
              char *v56 = v57;
            }
            ++v56;
LABEL_86:
            if ((unint64_t)v55 >= v166)
            {
              unint64_t v71 = (unint64_t)&v55[-v54];
              uint64_t v72 = (uint64_t)&v55[-v54 + 1];
              if (v72 < 0) {
                abort();
              }
              unint64_t v73 = v54;
              unint64_t v74 = v166 - v54;
              if (2 * v74 > v72) {
                uint64_t v72 = 2 * v74;
              }
              if (v74 >= 0x3FFFFFFFFFFFFFFFLL) {
                uint64_t v75 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v75 = v72;
              }
              if (v75)
              {
                unsigned __int8 v76 = v55;
                uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)v161 + 16))(v161, v75, 1, v51);
                uint64_t v78 = (unsigned char *)(v77 + v71);
                unint64_t v166 = v77 + v75;
                if (v77) {
                  *uint64_t v78 = *v53;
                }
                id v55 = v76;
              }
              else
              {
                unint64_t v166 = 0;
                uint64_t v78 = (unsigned char *)v71;
              }
              uint64_t v79 = v78;
              unint64_t v80 = v73;
              if (v55 == (unsigned __int8 *)v73) {
                goto LABEL_104;
              }
              if (v71 < 0x30
                || &v78[v73 - (void)v55] > v78 - 1
                || v73 > (unint64_t)(v55 - 1)
                || (unint64_t)(v55 - v78) < 0x20)
              {
                long double v81 = v55;
                uint64_t v79 = v78;
                unint64_t v80 = v73;
              }
              else
              {
                long double v81 = &v55[-(v71 & 0xFFFFFFFFFFFFFFE0)];
                uint64_t v87 = (__n128 *)(v78 - 16);
                int v88 = (__n128 *)(v55 - 16);
                unint64_t v89 = v71 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  __n128 v51 = *v88;
                  v87[-1] = v88[-1];
                  *uint64_t v87 = v51;
                  v87 -= 2;
                  v88 -= 2;
                  v89 -= 32;
                }
                while (v89);
                uint64_t v79 = &v78[-(v71 & 0xFFFFFFFFFFFFFFE0)];
                unint64_t v80 = v73;
                if (v71 == (v71 & 0xFFFFFFFFFFFFFFE0)) {
                  goto LABEL_104;
                }
              }
              do
              {
                char v82 = *--v81;
                *--uint64_t v79 = v82;
              }
              while (v81 != (unsigned __int8 *)v80);
LABEL_104:
              id v55 = v78 + 1;
              if (v80)
              {
                float64x2_t v83 = v78 + 1;
                (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v161 + 40))(v161, v80, v74);
                id v55 = v83;
              }
              unint64_t v54 = (unint64_t)v79;
              goto LABEL_62;
            }
            if (v55) {
              *id v55 = *v53;
            }
            ++v55;
LABEL_62:
            ++v57;
            v53 += 104;
            if (v53 == v52)
            {
              uint64_t v90 = v165;
              id v53 = (unsigned __int8 *)v165[6];
              goto LABEL_123;
            }
          }
          unint64_t v58 = v54;
          unint64_t v59 = v56 - v169;
          uint64_t v60 = v56 - v169 + 1;
          if (v60 < 0) {
            abort();
          }
          unint64_t v61 = v162 - (void)v169;
          if (2 * (v162 - (unint64_t)v169) > v60) {
            uint64_t v60 = 2 * (v162 - (void)v169);
          }
          if (v61 >= 0x3FFFFFFFFFFFFFFFLL) {
            uint64_t v62 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v62 = v60;
          }
          if (v62)
          {
            double v63 = v55;
            uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)v160 + 16))(v160, v62, 1, v51);
            double v65 = (char *)(v64 + v59);
            unint64_t v162 = v64 + v62;
            if (v64) {
              char *v65 = v57;
            }
            id v55 = v63;
          }
          else
          {
            unint64_t v162 = 0;
            double v65 = (char *)(v56 - v169);
          }
          __double2 v66 = v65;
          double v67 = v169;
          if (v56 != v169)
          {
            if (v59 < 0x30 || &v65[v169 - v56] > v65 - 1 || v169 > v56 - 1 || (unint64_t)(v56 - v65) < 0x20)
            {
              __double2 v68 = v56;
              __double2 v66 = v65;
              double v67 = v169;
            }
            else
            {
              __double2 v68 = &v56[-(v59 & 0xFFFFFFFFFFFFFFE0)];
              float v84 = (__n128 *)(v65 - 16);
              uint64_t v85 = (__n128 *)(v56 - 16);
              unint64_t v86 = v59 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                __n128 v51 = *v85;
                v84[-1] = v85[-1];
                *float v84 = v51;
                v84 -= 2;
                v85 -= 2;
                v86 -= 32;
              }
              while (v86);
              __double2 v66 = &v65[-(v59 & 0xFFFFFFFFFFFFFFE0)];
              double v67 = v169;
              if (v59 == (v59 & 0xFFFFFFFFFFFFFFE0)) {
                goto LABEL_83;
              }
            }
            do
            {
              char v69 = *--v68;
              *--__double2 v66 = v69;
            }
            while (v68 != v67);
          }
LABEL_83:
          unsigned __int8 v56 = v65 + 1;
          if (v67)
          {
            uint64_t v70 = v55;
            (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v160 + 40))(v160, v67, v61);
            id v55 = v70;
          }
          __int16 v169 = v66;
          unint64_t v54 = v58;
          goto LABEL_86;
        }
        unint64_t v162 = 0;
        unsigned __int8 v56 = 0;
        __int16 v169 = 0;
        unint64_t v166 = 0;
        id v55 = 0;
        unint64_t v54 = 0;
        uint64_t v90 = v165;
LABEL_123:
        uint64_t v91 = v55;
        uint64_t v92 = v90[47];
        uint64_t v93 = v90[48];
        if (v92 != v93)
        {
          unsigned int v94 = *v53;
          do
          {
            unsigned int v95 = *(unsigned __int8 *)(v92 + 26);
            if (v95 >= v94)
            {
              uint64_t v96 = v91;
              if ((unint64_t)v91 >= v166)
              {
                unint64_t v97 = (unint64_t)&v91[-v54];
                uint64_t v98 = (uint64_t)&v91[-v54 + 1];
                if (v98 < 0) {
                  abort();
                }
                unint64_t v99 = v54;
                unint64_t v100 = v166 - v54;
                if (2 * v100 > v98) {
                  uint64_t v98 = 2 * v100;
                }
                if (v100 >= 0x3FFFFFFFFFFFFFFFLL) {
                  uint64_t v101 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v101 = v98;
                }
                if (v101)
                {
                  uint64_t v102 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)v161 + 16))(v161, v101, 1, v51);
                  uint64_t v103 = (unsigned char *)(v102 + v97);
                  unint64_t v166 = v102 + v101;
                  if (v102) {
                    *uint64_t v103 = *(unsigned char *)(v92 + 26);
                  }
                  uint64_t v96 = v91;
                }
                else
                {
                  unint64_t v166 = 0;
                  uint64_t v103 = (unsigned char *)v97;
                }
                unint64_t v104 = v103;
                unint64_t v105 = v99;
                if (v96 == (unsigned __int8 *)v99) {
                  goto LABEL_146;
                }
                if (v97 < 0x30
                  || &v103[v99 - (void)v96] > v103 - 1
                  || v99 > (unint64_t)(v96 - 1)
                  || (unint64_t)(v96 - v103) < 0x20)
                {
                  id v106 = v96;
                  unint64_t v104 = v103;
                  unint64_t v105 = v99;
                }
                else
                {
                  id v106 = &v96[-(v97 & 0xFFFFFFFFFFFFFFE0)];
                  uint64_t v108 = (__n128 *)(v103 - 16);
                  uint64_t v109 = (__n128 *)(v96 - 16);
                  unint64_t v110 = v97 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    __n128 v51 = *v109;
                    v108[-1] = v109[-1];
                    __n128 *v108 = v51;
                    v108 -= 2;
                    v109 -= 2;
                    v110 -= 32;
                  }
                  while (v110);
                  unint64_t v104 = &v103[-(v97 & 0xFFFFFFFFFFFFFFE0)];
                  unint64_t v105 = v99;
                  if (v97 == (v97 & 0xFFFFFFFFFFFFFFE0)) {
                    goto LABEL_146;
                  }
                }
                do
                {
                  char v107 = *--v106;
                  *--unint64_t v104 = v107;
                }
                while (v106 != (unsigned __int8 *)v105);
LABEL_146:
                uint64_t v91 = v103 + 1;
                if (v105) {
                  (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v161 + 40))(v161, v105, v100);
                }
                unint64_t v54 = (unint64_t)v104;
                goto LABEL_126;
              }
              if (v91) {
                *uint64_t v91 = v95;
              }
              ++v91;
            }
LABEL_126:
            v92 += 32;
          }
          while (v92 != v93);
        }
        std::__sort<std::__less<unsigned char,unsigned char> &,unsigned char *>();
        uint64_t v158 = (unsigned __int8 *)v54;
        if ((unsigned __int8 *)v54 != v91)
        {
          uint64_t v111 = (unsigned __int8 *)(v54 + 1);
          while (v111 != v91)
          {
            int v112 = *(v111 - 1);
            int v113 = *v111++;
            if (v112 == v113)
            {
              float64x2_t v114 = v111 - 2;
              float64x2_t v115 = v114 + 2;
              if (v114 + 2 != v91)
              {
                int v116 = *v114;
                do
                {
                  int v117 = v116;
                  int v116 = *v115;
                  if (v117 != v116) {
                    *++float64x2_t v114 = v116;
                  }
                  ++v115;
                }
                while (v115 != v91);
              }
              float64_t v118 = v114 + 1;
              int64_t v119 = v91 - (v114 + 1);
              if (v119)
              {
                int64_t v120 = v91 - &v118[v119];
                if (v91 != &v118[v119]) {
                  memmove(v118, &v118[v119], v91 - &v118[v119]);
                }
                uint64_t v91 = &v118[v120];
              }
              break;
            }
          }
        }
        unint64_t v121 = v169;
        if (v169 == v56)
        {
          char v123 = 0;
          if (v158 != v91)
          {
LABEL_177:
            unsigned __int8 v124 = 0;
            unsigned __int8 v125 = 0;
            unint64_t v126 = v56 - v169;
            long long v127 = v158;
            do
            {
              unsigned int v128 = *v127;
              unint64_t v129 = v124 + 1;
              uint64_t v130 = v165[47];
              for (i = (v165[48] - v130) >> 5; v129 < i; unint64_t v129 = ++v124 + 1)
              {
                if (*(unsigned __int8 *)(v130 + 32 * v129 + 26) > v128) {
                  break;
                }
              }
              for (unint64_t j = v125 + 1; j < v126; unint64_t j = v125 + 1)
              {
                if (*(unsigned __int8 *)(v165[6] + 104 * v169[j]) > v128) {
                  break;
                }
                char v123 = v169[++v125];
              }
              v181[0] = 0;
              if ((atomic_load_explicit(v122, memory_order_acquire) & 1) == 0 && __cxa_guard_acquire((__guard *)v122)) {
                operator new();
              }
              unint64_t v133 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                     + 16))(mdm::Allocator::instance(void)::alloc, 152, 8);
              uint64_t v167 = v127;
              v181[0] = v133;
              *unint64_t v133 = 1;
              unint64_t v134 = md::PointLabelFeatureElement::PointLabelFeatureElement((uint64_t)(v133 + 1), (uint64_t)this, a2, v128, v123, v124);
              v181[0] = v133;
              unint64_t v121 = v169;
              md::PointLabelFeatureElement::updateText(v134, this, a3);
              md::PointLabelFeatureElement::updateLabelPlacements((md::PointLabelFeatureElement *)(v133 + 1), this);
              uint64_t v135 = *((void *)&v170 + 1);
              if (*((void *)&v170 + 1) >= v171)
              {
                uint64_t v136 = std::vector<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,geo::StdAllocator<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,mdm::Allocator>>::__push_back_slow_path<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&>((uint64_t)&v170, v181);
              }
              else
              {
                if (*((void *)&v170 + 1))
                {
                  **((void **)&v170 + 1) = v133;
                  ++*v133;
                }
                uint64_t v136 = (void *)(v135 + 8);
              }
              *((void *)&v170 + 1) = v136;
              BOOL v15 = (*v133)-- == 1;
              if (v15)
              {
                uint64_t v137 = v122;
                uint64_t v138 = (std::__shared_weak_count *)v133[3];
                if (v138 && !atomic_fetch_add(&v138->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                  std::__shared_weak_count::__release_weak(v138);
                }
                int v122 = v137;
                if ((atomic_load_explicit(v137, memory_order_acquire) & 1) == 0 && __cxa_guard_acquire((__guard *)v137)) {
                  operator new();
                }
                (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                    + 40))(mdm::Allocator::instance(void)::alloc, v181[0], 152);
              }
              long long v127 = v167 + 1;
            }
            while (v167 + 1 != v91);
          }
        }
        else
        {
          char v123 = *v169;
          if (v158 != v91) {
            goto LABEL_177;
          }
        }
        if (v121) {
          (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v160 + 40))(v160, v121, v162 - (void)v121);
        }
        uint64_t v6 = this;
        uint64_t v5 = a2;
        uint64_t v36 = v154;
        int v10 = v155;
        uint64_t v35 = v157;
        if (v158) {
          (*(void (**)(uint64_t, unsigned __int8 *, unint64_t))(*(void *)v161 + 40))(v161, v158, v166 - (void)v158);
        }
LABEL_206:
        if ((void)v170 == *((void *)&v170 + 1))
        {
          uint64_t v139 = 76;
          if (!*(unsigned char *)(*v5 + 112)) {
            uint64_t v139 = 72;
          }
          float v140 = *(float *)(*v5 + v139);
          v181[0] = 0;
          {
            operator new();
          }
          uint64_t v141 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 152, 8);
          v181[0] = v141;
          *uint64_t v141 = 1;
          unint64_t v142 = md::PointLabelFeatureElement::PointLabelFeatureElement((uint64_t)(v141 + 1), (uint64_t)v6, v5, (int)v140, 0, 0);
          v181[0] = v141;
          md::PointLabelFeatureElement::updateText(v142, v6, a3);
          md::PointLabelFeatureElement::updateLabelPlacements((md::PointLabelFeatureElement *)(v141 + 1), v6);
          uint64_t v143 = *((void *)&v170 + 1);
          if (*((void *)&v170 + 1) >= v171)
          {
            uint64_t v144 = std::vector<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,geo::StdAllocator<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,mdm::Allocator>>::__push_back_slow_path<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&>((uint64_t)&v170, v181);
          }
          else
          {
            if (*((void *)&v170 + 1))
            {
              **((void **)&v170 + 1) = v141;
              ++*v141;
            }
            uint64_t v144 = (void *)(v143 + 8);
          }
          *((void *)&v170 + 1) = v144;
          BOOL v15 = (*v141)-- == 1;
          if (v15)
          {
            uint64_t v145 = (std::__shared_weak_count *)v141[3];
            if (v145 && !atomic_fetch_add(&v145->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
              std::__shared_weak_count::__release_weak(v145);
            }
            {
              operator new();
            }
            (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v181[0], 152);
          }
        }
        uint64_t v146 = *v10;
        uint64_t v147 = v10;
        __int16 v148 = v10;
        if (*v10)
        {
          while (1)
          {
            while (1)
            {
              __int16 v148 = (uint64_t *)v146;
              unsigned int v149 = *(_DWORD *)(v146 + 32);
              if (v159 >= v149) {
                break;
              }
              uint64_t v146 = *v148;
              uint64_t v147 = v148;
              if (!*v148) {
                goto LABEL_229;
              }
            }
            if (v149 >= v159) {
              break;
            }
            uint64_t v146 = v148[1];
            if (!v146)
            {
              uint64_t v147 = v148 + 1;
              goto LABEL_229;
            }
          }
        }
        else
        {
LABEL_229:
          uint64_t v150 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)v6 + 59) + 16))(*((void *)v6 + 59), 128, 8);
          *(_DWORD *)(v150 + 32) = v159;
          *(_OWORD *)(v150 + 40) = v170;
          uint64_t v151 = v172;
          *(void *)(v150 + 56) = v171;
          *(void *)(v150 + 64) = v151;
          long long v170 = 0uLL;
          unint64_t v171 = 0;
          *(void *)(v150 + 88) = v174;
          *(_OWORD *)(v150 + 72) = v173;
          *(__n128 *)(v150 + 96) = v175;
          *(float *)&uint64_t v151 = v176[0];
          *(float *)(v150 + 115) = *(float *)((char *)v176 + 3);
          *(_DWORD *)(v150 + 112) = v151;
          *(_DWORD *)(v150 + 120) = v177;
          *(void *)uint64_t v150 = 0;
          *(void *)(v150 + 8) = 0;
          *(void *)(v150 + 16) = v148;
          uint64_t *v147 = v150;
          uint64_t v152 = (void *)**v156;
          if (v152)
          {
            void *v156 = v152;
            uint64_t v150 = *v147;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v6 + 58), (uint64_t *)v150);
          ++*((void *)v6 + 60);
        }
        v181[0] = (uint64_t *)&v170;
        std::vector<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,geo::StdAllocator<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,mdm::Allocator>>::__destroy_vector::operator()[abi:nn180100](v181);
        if (++v35 == v36)
        {
          uint64_t v35 = (unint64_t *)v178;
          break;
        }
      }
    }
    if (v35) {
      operator delete(v35);
    }
  }
  return v6;
}

void sub_1A188EFCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a10);
  if (*(unsigned char *)(v33 + 642)) {
    *(unsigned char *)(v33 + 642) = 0;
  }
  std::vector<md::LabelFeaturePlacementInfo,geo::StdAllocator<md::LabelFeaturePlacementInfo,mdm::Allocator>>::~vector[abi:nn180100]((uint64_t *)(v33 + 576));
  std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::~vector[abi:nn180100]((uint64_t *)(v33 + 544));
  *(void *)(v33 + 520) = a11;

  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v33 + 504);
  std::__tree<std::__value_type<md::LabelIdentifier,md::PointPosition>,std::__map_value_compare<md::LabelIdentifier,std::__value_type<md::LabelIdentifier,md::PointPosition>,std::less<md::LabelIdentifier>,true>,geo::StdAllocator<std::__value_type<md::LabelIdentifier,md::PointPosition>,mdm::Allocator>>::destroy(a15, *(void **)(v33 + 464));
  std::vector<md::PointLabelFeature::WorkUnit,geo::StdAllocator<md::PointLabelFeature::WorkUnit,mdm::Allocator>>::~vector[abi:nn180100]((uint64_t *)(v33 + 320));
  std::mutex::~mutex(a12);
  md::LabelFeature::~LabelFeature((md::LabelFeature *)v33);
  _Unwind_Resume(a1);
}

void *std::vector<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,geo::StdAllocator<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,mdm::Allocator>>::__push_back_slow_path<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&>(uint64_t a1, void **a2)
{
  uint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61) {
    abort();
  }
  uint64_t v5 = *(void *)(a1 + 16) - *(void *)a1;
  if (v5 >> 2 > v3) {
    unint64_t v3 = v5 >> 2;
  }
  BOOL v21 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF8;
  uint64_t v6 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v21) {
    uint64_t v6 = v3;
  }
  if (v6)
  {
    uint64_t v8 = 8 * v6;
    uint64_t v9 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), 8 * v6, 8);
    int v10 = (void *)(v9 + 8 * v2);
    uint64_t v6 = v9 + v8;
    if (v9)
    {
      *int v10 = 0;
      uint64_t v11 = *a2;
      *int v10 = *a2;
      if (v11) {
        ++*v11;
      }
    }
  }
  else
  {
    int v10 = (void *)(8 * v2);
  }
  uint64_t v12 = v10 + 1;
  uint64_t v13 = *(void **)a1;
  unint64_t v14 = *(void *)(a1 + 8);
  if (v14 == *(void *)a1)
  {
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v12;
    uint64_t v17 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v6;
    goto LABEL_37;
  }
  unint64_t v15 = v14 - *(void *)a1 - 8;
  if (v15 < 0x48)
  {
    char v16 = *(void **)(a1 + 8);
    goto LABEL_23;
  }
  unint64_t v18 = ((unint64_t)v13 - v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = (char *)v10 + v18;
  unint64_t v20 = v14 + v18;
  BOOL v21 = (unint64_t)v19 >= v14 || v20 >= (unint64_t)v10;
  if (!v21)
  {
    char v16 = *(void **)(a1 + 8);
    do
    {
LABEL_23:
      *--int v10 = 0;
      uint64_t v27 = *--v16;
      *int v10 = v27;
      void *v16 = 0;
    }
    while (v16 != v13);
    goto LABEL_24;
  }
  uint64_t v22 = (v15 >> 3) + 1;
  char v16 = (void *)(v14 - 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL));
  float32x4_t v23 = v10 - 4;
  long long v24 = (_OWORD *)(v14 - 32);
  uint64_t v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    *float32x4_t v23 = 0uLL;
    v23[1] = 0uLL;
    long long v26 = v24[1];
    *float32x4_t v23 = *v24;
    v23[1] = v26;
    v23 -= 2;
    _OWORD *v24 = 0uLL;
    v24[1] = 0uLL;
    v24 -= 2;
    v25 -= 4;
  }
  while (v25);
  v10 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
  if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_23;
  }
LABEL_24:
  unint64_t v14 = *(void *)a1;
  uint64_t v28 = *(void *)(a1 + 8);
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v12;
  uint64_t v17 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v6;
  if (v28 != v14)
  {
    uint64_t v29 = v28;
    do
    {
      int v31 = *(void **)(v29 - 8);
      v29 -= 8;
      uint64_t v30 = v31;
      if (v31)
      {
        if ((*v30)-- == 1)
        {
          uint64_t v33 = (std::__shared_weak_count *)v30[3];
          if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
          {
            operator new();
          }
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *(void *)(v28 - 8), 152);
          *(void *)(v28 - 8) = 0;
        }
      }
      uint64_t v28 = v29;
    }
    while (v29 != v14);
  }
LABEL_37:
  if (v14) {
    (*(void (**)(void, unint64_t, unint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v14, v17 - v14);
  }
  return v12;
}

void md::PointLabelFeatureElement::updateLabelPlacements(md::PointLabelFeatureElement *this, const md::PointLabelFeature *a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = this;
  if (*((unsigned char *)this + 136))
  {
    unint64_t v4 = *((unsigned __int8 *)this + 135);
    uint64_t v5 = (*(uint64_t (**)(const md::PointLabelFeature *))(*(void *)a2 + 72))(a2);
    if (v4 >= (uint64_t)(*(void *)(v5 + 384) - *(void *)(v5 + 376)) >> 5)
    {
      *(_OWORD *)std::string __p = 0u;
      long long v62 = 0u;
      BYTE8(v62) = 1;
      uint64_t v6 = __p;
    }
    else
    {
      uint64_t v6 = (void **)(*(void *)((*(uint64_t (**)(const md::PointLabelFeature *))(*(void *)v2 + 72))(v2)
                               + 376)
                   + 32 * *((unsigned __int8 *)v3 + 135));
    }
    *((unsigned char *)v3 + 131) = md::PointLabelFeature::indexForPlacementInfo(v2, (uint64_t)v6);
    goto LABEL_70;
  }
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v62 = 0;
  WORD4(v62) = 1;
  BYTE10(v62) = 0;
  uint64_t v7 = *(void *)this;
  unsigned __int8 v56 = 0;
  char v57 = 0;
  uint64_t v8 = *(std::__shared_weak_count **)(v7 + 8);
  if (v8)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v8);
    uint64_t v9 = v8;
    char v57 = v8;
    if (v8)
    {
      uint64_t v8 = *(std::__shared_weak_count **)v7;
      unsigned __int8 v56 = *(std::__shared_weak_count **)v7;
    }
    if (!*(unsigned char *)(v7 + 205)) {
      goto LABEL_65;
    }
    goto LABEL_12;
  }
  uint64_t v9 = 0;
  if (*(unsigned char *)(v7 + 205))
  {
LABEL_12:
    uint64_t v10 = geo::codec::VectorTile::labelTextPlacements((geo::codec::VectorTile *)v8);
    BYTE8(v62) = *(unsigned char *)(v7 + 209) ^ 1;
    uint64_t v11 = *(unsigned __int8 *)(v7 + 205);
    if (*(unsigned char *)(v7 + 205))
    {
      uint64_t v12 = v10;
      uint64_t v13 = 5 * v11;
      unint64_t v14 = (char *)operator new(5 * v11);
      unint64_t v15 = v14;
      __p[0] = v14;
      __p[1] = v14;
      *(void *)&long long v62 = &v14[v13];
      unsigned int v16 = *(unsigned __int8 *)(v7 + 205);
      if (*(unsigned char *)(v7 + 205))
      {
        __n128 v51 = v3;
        long long v52 = v9;
        id v53 = v2;
        int v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = (unsigned __int8 *)(v12 + 16 * *(unsigned int *)(v7 + 184));
        unint64_t v20 = v14;
        uint64_t v55 = v7;
        BOOL v21 = &v14[v13];
        do
        {
          if (!v19[5])
          {
            uint64_t v23 = v19[2];
            if (v23 == 10)
            {
              int v24 = v19[4];
              unsigned int v25 = (v24 + 16) >> 5;
              if ((v24 & 0x1F) != 0) {
                LOWORD(v25) = 10;
              }
              __int16 v26 = v25 | ((_WORD)v24 << 8);
            }
            else
            {
              if (v23 > 9)
              {
                __int16 v30 = 0;
                __int16 v27 = 9;
              }
              else
              {
                __int16 v27 = geoPositionToLabelPosition(unsigned char)::positions[v23];
                if (v19[2]) {
                  BOOL v28 = v23 == 9;
                }
                else {
                  BOOL v28 = 1;
                }
                char v29 = !v28;
                if (v29) {
                  __int16 v30 = 32 * v27;
                }
                else {
                  __int16 v30 = 0;
                }
              }
              __int16 v26 = v27 | (v30 << 8);
            }
            uint64_t v31 = *v19;
            if (v31 > 2)
            {
              char v33 = 0;
            }
            else
            {
              if (v19[3]) {
                char v32 = 3;
              }
              else {
                char v32 = 2;
              }
              if (v31 == 2) {
                char v33 = v32;
              }
              else {
                char v33 = geoPlacementModeToLabelPositionMode(unsigned char,BOOL)::positionModes[v31];
              }
              if ((v33 & 0xFE) == 2) {
                int v17 = 1;
              }
            }
            if (v19[1] - 1 >= 5) {
              char v34 = 0;
            }
            else {
              char v34 = 1 << (v19[1] - 1);
            }
            if (v20 < v21)
            {
              *unint64_t v20 = v33;
              v20[1] = v34;
              void v20[2] = 0;
              *(_WORD *)(v20 + 3) = v26;
              v20 += 5;
              uint64_t v22 = v55;
            }
            else
            {
              unint64_t v35 = 0xCCCCCCCCCCCCCCCDLL * (v20 - v15) + 1;
              if (v35 >= 0x3333333333333334)
              {
                BYTE9(v62) = v17;
                *(void *)&long long v62 = v21;
                __p[0] = v15;
                abort();
              }
              int v54 = v17;
              if (0x999999999999999ALL * (v21 - v15) > v35) {
                unint64_t v35 = 0x999999999999999ALL * (v21 - v15);
              }
              if (0xCCCCCCCCCCCCCCCDLL * (v21 - v15) >= 0x1999999999999999) {
                unint64_t v35 = 0x3333333333333333;
              }
              if (v35 >= 0x3333333333333334) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              uint64_t v36 = 5 * v35;
              unint64_t v37 = (char *)operator new(5 * v35);
              uint64_t v38 = &v37[v20 - v15];
              char *v38 = v33;
              v38[1] = v34;
              v38[2] = 0;
              *(_WORD *)(v38 + 3) = v26;
              uint64_t v39 = v38;
              if (v20 == v15)
              {
                uint64_t v22 = v55;
              }
              else
              {
                uint64_t v22 = v55;
                do
                {
                  __int16 v40 = *(_WORD *)(v20 - 5);
                  v20 -= 5;
                  *(_WORD *)(v39 - 5) = v40;
                  v39 -= 5;
                  v39[2] = 0;
                  *(_WORD *)(v39 + 3) = *(_WORD *)(v20 + 3);
                }
                while (v20 != v15);
              }
              BOOL v21 = &v37[v36];
              unint64_t v20 = v38 + 5;
              if (v15) {
                operator delete(v15);
              }
              unint64_t v15 = v39;
              int v17 = v54;
            }
            unsigned int v16 = *(unsigned __int8 *)(v22 + 205);
          }
          ++v18;
          v19 += 16;
        }
        while (v18 < v16);
        BYTE9(v62) = v17;
        __p[1] = v20;
        *(void *)&long long v62 = v21;
        __p[0] = v15;
        uint64_t v9 = v52;
        uint64_t v2 = v53;
        unint64_t v3 = v51;
      }
    }
  }
LABEL_65:
  *((unsigned char *)v3 + 131) = md::PointLabelFeature::indexForPlacementInfo(v2, (uint64_t)__p);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
LABEL_70:
  if (*((unsigned char *)v3 + 108))
  {
    float v41 = *((float *)v3 + 26);
    WORD4(v62) = 1;
    BYTE10(v62) = 0;
    unint64_t v42 = (char *)operator new(5uLL);
    int64x2_t v43 = v42;
    float v44 = v41 * 0.0027778;
    __int16 v45 = vcvts_n_s32_f32((float)(0.75 - v44) - floorf(0.75 - v44), 8uLL);
    __int16 v46 = (v45 + 16) >> 5;
    if ((v45 & 0x1F) != 0) {
      __int16 v46 = 10;
    }
    *(_WORD *)unint64_t v42 = 259;
    v42[2] = 0;
    *(_WORD *)(v42 + 3) = v46 | (v45 << 8);
    __p[1] = v42 + 5;
    *(void *)&long long v62 = v42 + 5;
    __p[0] = v42;
    *((unsigned char *)v3 + 132) = md::PointLabelFeature::indexForPlacementInfo(v2, (uint64_t)__p);
    __int16 v59 = 1;
    char v60 = 0;
    uint64_t v47 = (char *)operator new(5uLL);
    int v48 = v47;
    __int16 v49 = vcvts_n_s32_f32((float)(0.25 - v44) - floorf(0.25 - v44), 8uLL);
    __int16 v50 = (v49 + 16) >> 5;
    if ((v49 & 0x1F) != 0) {
      __int16 v50 = 10;
    }
    *(_WORD *)uint64_t v47 = 259;
    v47[2] = 0;
    *(_WORD *)(v47 + 3) = v50 | (v49 << 8);
    char v57 = (std::__shared_weak_count *)(v47 + 5);
    unint64_t v58 = v47 + 5;
    unsigned __int8 v56 = (std::__shared_weak_count *)v47;
    *((unsigned char *)v3 + 133) = md::PointLabelFeature::indexForPlacementInfo(v2, (uint64_t)&v56);
    operator delete(v48);
    operator delete(v43);
  }
}

void sub_1A188F9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a15);
  if (v20)
  {
    a20 = v20;
    operator delete(v20);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t md::PointLabelFeature::indexForPlacementInfo(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[72];
  unint64_t v5 = a1[73];
  if (v4 == v5)
  {
    LOBYTE(v8) = 0;
    goto LABEL_23;
  }
  int v6 = *(unsigned __int8 *)(a2 + 24);
  uint64_t v7 = *(unsigned __int8 **)(a2 + 8);
  unsigned int v8 = 0;
  uint64_t v9 = &v7[-*(void *)a2];
  if (v7 != *(unsigned __int8 **)a2)
  {
    uint64_t v11 = a1[72];
    do
    {
      if (v6 == *(unsigned __int8 *)(v11 + 24) && v9 == (unsigned __int8 *)(*(void *)(v11 + 8) - *(void *)v11))
      {
        uint64_t v12 = (unsigned __int8 *)(*(void *)v11 + 4);
        for (unint64_t i = (unsigned __int8 *)(*(void *)a2 + 4); ; i += 5)
        {
          unint64_t v14 = i - 4;
          if (*(i - 4) != *(v12 - 4)) {
            break;
          }
          if (*(i - 3) != *(v12 - 3)) {
            break;
          }
          int v15 = *(i - 1);
          if (v15 != *(v12 - 1) || v15 == 10 && *i != *v12) {
            break;
          }
          v12 += 5;
          if (v14 + 5 == v7) {
            return v8;
          }
        }
      }
      ++v8;
      v11 += 32;
    }
    while (v11 != v5);
LABEL_21:
    if (v8 > 0xFF)
    {
      LOBYTE(v8) = 0;
      return v8;
    }
LABEL_23:
    unint64_t v16 = a1[74];
    if (v5 < v16)
    {
      if (v5)
      {
        *(void *)unint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        *(void *)(v5 + 16) = 0;
        int v17 = *(_WORD **)a2;
        unsigned int v18 = *(_WORD **)(a2 + 8);
        size_t v19 = (size_t)v18 - *(void *)a2;
        if (v18 != *(_WORD **)a2)
        {
          unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * v19;
          if (0xCCCCCCCCCCCCCCCDLL * v19 >= 0x3333333333333334) {
            abort();
          }
          BOOL v21 = (char *)operator new(v19);
          *(void *)unint64_t v5 = v21;
          *(void *)(v5 + 8) = v21;
          *(void *)(v5 + 16) = &v21[5 * v20];
          do
          {
            *(_WORD *)BOOL v21 = *v17;
            void v21[2] = 0;
            *(_WORD *)(v21 + 3) = *(_WORD *)((char *)v17 + 3);
            v21 += 5;
            int v17 = (_WORD *)((char *)v17 + 5);
          }
          while (v17 != v18);
          *(void *)(v5 + 8) = v21;
        }
        __int16 v22 = *(_WORD *)(a2 + 24);
        *(unsigned char *)(v5 + 26) = *(unsigned char *)(a2 + 26);
        *(_WORD *)(v5 + 24) = v22;
      }
      uint64_t v23 = v5 + 32;
      a1[73] = v23;
      goto LABEL_57;
    }
    uint64_t v24 = (uint64_t)(v5 - v4) >> 5;
    if ((unint64_t)(v24 + 1) >> 59) {
      abort();
    }
    unsigned int v25 = a1 + 75;
    uint64_t v26 = v16 - v4;
    uint64_t v27 = v26 >> 4;
    if (v26 >> 4 <= (unint64_t)(v24 + 1)) {
      uint64_t v27 = v24 + 1;
    }
    BOOL v28 = (unint64_t)v26 >= 0x7FFFFFFFFFFFFFE0;
    uint64_t v29 = 0x7FFFFFFFFFFFFFFLL;
    if (!v28) {
      uint64_t v29 = v27;
    }
    if (v29)
    {
      uint64_t v30 = 32 * v29;
      uint64_t v31 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v25 + 16))(*v25, 32 * v29, 8);
      uint64_t v32 = v31 + 32 * v24;
      uint64_t v33 = v31 + v30;
      if (v31)
      {
        uint64_t v34 = v31;
        *(void *)uint64_t v32 = 0;
        *(void *)(v32 + 8) = 0;
        *(void *)(v32 + 16) = 0;
        unint64_t v35 = *(_WORD **)a2;
        uint64_t v36 = *(_WORD **)(a2 + 8);
        size_t v37 = (size_t)v36 - *(void *)a2;
        if (v36 != *(_WORD **)a2)
        {
          unint64_t v38 = 0xCCCCCCCCCCCCCCCDLL * v37;
          if (0xCCCCCCCCCCCCCCCDLL * v37 >= 0x3333333333333334) {
            abort();
          }
          uint64_t v39 = (char *)operator new(v37);
          *(void *)uint64_t v32 = v39;
          *(void *)(v32 + 8) = v39;
          *(void *)(v32 + 16) = &v39[5 * v38];
          do
          {
            *(_WORD *)uint64_t v39 = *v35;
            v39[2] = 0;
            *(_WORD *)(v39 + 3) = *(_WORD *)((char *)v35 + 3);
            v39 += 5;
            unint64_t v35 = (_WORD *)((char *)v35 + 5);
          }
          while (v35 != v36);
          *(void *)(v32 + 8) = v39;
          unsigned int v25 = a1 + 75;
        }
        __int16 v40 = *(_WORD *)(a2 + 24);
        uint64_t v41 = v34 + 32 * v24;
        *(unsigned char *)(v41 + 26) = *(unsigned char *)(a2 + 26);
        *(_WORD *)(v41 + 24) = v40;
      }
    }
    else
    {
      uint64_t v33 = 0;
      uint64_t v32 = 32 * v24;
    }
    uint64_t v23 = v32 + 32;
    uint64_t v42 = a1[73];
    uint64_t v43 = a1[72];
    if (v42 == v43)
    {
      uint64_t v46 = a1[73];
    }
    else
    {
      do
      {
        *(void *)(v32 - 32) = 0;
        *(void *)(v32 - 24) = 0;
        v32 -= 32;
        *(void *)(v32 + 16) = 0;
        long long v44 = *(_OWORD *)(v42 - 32);
        v42 -= 32;
        *(_OWORD *)uint64_t v32 = v44;
        *(void *)(v32 + 16) = *(void *)(v42 + 16);
        *(void *)uint64_t v42 = 0;
        *(void *)(v42 + 8) = 0;
        *(void *)(v42 + 16) = 0;
        __int16 v45 = *(_WORD *)(v42 + 24);
        *(unsigned char *)(v32 + 26) = *(unsigned char *)(v42 + 26);
        *(_WORD *)(v32 + 24) = v45;
      }
      while (v42 != v43);
      uint64_t v46 = a1[72];
      uint64_t v42 = a1[73];
    }
    a1[72] = v32;
    a1[73] = v23;
    uint64_t v47 = a1[74];
    a1[74] = v33;
    if (v42 == v46)
    {
      uint64_t v46 = v42;
      if (!v42) {
        goto LABEL_57;
      }
    }
    else
    {
      uint64_t v48 = v42;
      do
      {
        __int16 v50 = *(void **)(v48 - 32);
        v48 -= 32;
        __int16 v49 = v50;
        if (v50)
        {
          *(void *)(v42 - 24) = v49;
          operator delete(v49);
        }
        uint64_t v42 = v48;
      }
      while (v48 != v46);
      if (!v46) {
        goto LABEL_57;
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v25 + 40))(*v25, v46, v47 - v46);
LABEL_57:
    a1[73] = v23;
    return v8;
  }
  uint64_t v10 = a1[72];
  while (v6 != *(unsigned __int8 *)(v10 + 24) || v9 != (unsigned __int8 *)(*(void *)(v10 + 8) - *(void *)v10))
  {
    ++v8;
    v10 += 32;
    if (v10 == v5) {
      goto LABEL_21;
    }
  }
  return v8;
}

void sub_1A188FE58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<md::LabelFeaturePlacementInfo,geo::StdAllocator<md::LabelFeaturePlacementInfo,mdm::Allocator> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A188FE6C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 584) = v2;
  _Unwind_Resume(a1);
}

uint64_t md::PointLabelFeatureBase::PointLabelFeatureBase(uint64_t this, const md::LabelPoint *a2)
{
  *(void *)this = &unk_1EF5313F8;
  *(void *)(this + 8) = 850045863;
  long long v2 = 0uLL;
  *(_OWORD *)(this + 16) = 0u;
  *(_OWORD *)(this + 32) = 0u;
  *(_OWORD *)(this + 48) = 0u;
  *(_OWORD *)(this + 64) = 0u;
  *(_OWORD *)(this + 80) = 0u;
  *(_OWORD *)(this + 96) = 0u;
  *(void *)(this + 112) = 0;
  unint64_t v3 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    uint64_t v10 = a2;
    uint64_t v12 = this;
    long long v2 = 0uLL;
    unint64_t v3 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    int v7 = v6;
    a2 = v10;
    this = v12;
    if (v7) {
      operator new();
    }
  }
  *(void *)(this + 120) = *((void *)v3 + 91);
  *(void *)(this + 128) = 0x100000000;
  *(void *)(this + 136) = 0;
  *(_DWORD *)(this + 144) = 0;
  *(_OWORD *)(this + 152) = v2;
  *(_OWORD *)(this + 168) = v2;
  {
    uint64_t v11 = a2;
    uint64_t v13 = this;
    unint64_t v3 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    int v9 = v8;
    a2 = v11;
    this = v13;
    if (v9) {
      operator new();
    }
  }
  *(void *)(this + 184) = *((void *)v3 + 91);
  *(void *)this = &unk_1EF53FEB8;
  long long v4 = *(_OWORD *)a2;
  *(void *)(this + 208) = *((void *)a2 + 2);
  *(_OWORD *)(this + 192) = v4;
  *(_OWORD *)(this + 216) = *(_OWORD *)((char *)a2 + 24);
  int v5 = *(_DWORD *)((char *)a2 + 43);
  *(_DWORD *)(this + 232) = *((_DWORD *)a2 + 10);
  *(_DWORD *)(this + 235) = v5;
  *(_WORD *)(this + 240) = 0;
  *(unsigned char *)(this + 242) = *((float *)a2 + 10) != 3.4028e38;
  *(_WORD *)(this + 243) = -256;
  return this;
}

void std::vector<unsigned long>::__append(uint64_t a1, unint64_t a2)
{
  int v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      int v6 = &v5[8 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    int v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      abort();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v13 = operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    unint64_t v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    unint64_t v16 = &v13[8 * v12];
    bzero(v14, v15);
    int v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      int v6 = &v5[-8 * (v19 & 0x3FFFFFFFFFFFFFFCLL)];
      unint64_t v20 = &v13[8 * v9 - 16];
      BOOL v21 = v5 - 16;
      uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *unint64_t v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      v14 -= 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          uint64_t v24 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v24;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

uint64_t md::LabelExternalPointFeature::isLeafCluster(md::LabelExternalPointFeature *this)
{
  long long v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (!v2 || v2->__shared_owners_ == -1) {
    return 0;
  }
  unint64_t v3 = std::__shared_weak_count::lock(v2);
  uint64_t v4 = *((void *)this + 37);
  if (!v3) {
    uint64_t v4 = 0;
  }
  if (v4 && (uint64_t v5 = *((void *)this + 36)) != 0)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 40))(v5);
    if (!v3) {
      return v6;
    }
  }
  else
  {
    uint64_t v6 = 0;
    if (!v3) {
      return v6;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v6;
}

void sub_1A1890318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::PointLabelFeatureElement::PointLabelFeatureElement(uint64_t a1, uint64_t a2, uint64_t *a3, char a4, char a5, char a6)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  int v7 = (md::LabelFeature *)(a1 + 24);
  uint64_t v8 = *(long long **)(*a3 + 192);
  if (*(long long **)(*a3 + 200) == v8)
  {
    {
      uint64_t v8 = &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
    }
    else
    {
      char v22 = a6;
      char v23 = a4;
      char v21 = a5;
      uint64_t v19 = v7;
      unint64_t v20 = a3;
      uint64_t v18 = a2;
      uint64_t v8 = &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
      if (v17)
      {
        qword_1EB317748 = 0;
        md::LabelPoint::NullPoint(void)::kNullLabelPoint = 0u;
        *(_OWORD *)&qword_1EB317738 = 0u;
        dword_1EB317750 = 2139095039;
        word_1EB317754 = 256;
        byte_1EB317756 = 1;
        uint64_t v8 = &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
      }
      a2 = v18;
      int v7 = v19;
      a3 = v20;
      a5 = v21;
      a6 = v22;
      a4 = v23;
    }
  }
  long long v9 = *v8;
  *((void *)v7 + 2) = *((void *)v8 + 2);
  *(_OWORD *)int v7 = v9;
  *(_OWORD *)(a1 + 48) = *(long long *)((char *)v8 + 24);
  int v10 = *((_DWORD *)v8 + 10);
  *(_DWORD *)(a1 + 67) = *(_DWORD *)((char *)v8 + 43);
  *(_DWORD *)(a1 + 64) = v10;
  *(unsigned char *)(a1 + 100) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 129) = a4;
  *(_DWORD *)(a1 + 130) = 255;
  *(unsigned char *)(a1 + 134) = a5;
  *(unsigned char *)(a1 + 135) = a6;
  *(_WORD *)(a1 + 136) = 1;
  *(unsigned char *)(a1 + 138) = 0;
  uint64_t v11 = *a3;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(*a3 + 232);
  int v12 = *(_DWORD *)(v11 + 216);
  *(unsigned char *)(a1 + 100) = *(unsigned char *)(v11 + 220);
  *(_DWORD *)(a1 + 96) = v12;
  int v13 = *(_DWORD *)(*a3 + 224);
  LOBYTE(v11) = *(unsigned char *)(*a3 + 228);
  *(unsigned char *)(a1 + 108) = v11;
  *(_DWORD *)(a1 + 104) = v13;
  if ((_BYTE)v11)
  {
    *(float *)(a1 + 116) = md::LabelFeature::vectorFromAzimuth(v7, *(float *)(a1 + 104), (const md::LabelPoint *)*(unsigned __int8 *)(a2 + 392));
    *(_DWORD *)(a1 + 120) = v14;
    *(_DWORD *)(a1 + 124) = v15;
  }
  return a1;
}

uint64_t FeatureStyleAttributes::FeatureStyleAttributes(uint64_t a1, uint64_t *a2)
{
  *(_DWORD *)(a1 + 31) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v6 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
  *(void *)a1 = v6;
  if (v6)
  {
    unint64_t v7 = (v4 - v5) >> 3;
    if (v7 >= 0x20) {
      unint64_t v7 = 32;
    }
    if (v7)
    {
      uint64_t v8 = 0;
      do
      {
        *(void *)(*(void *)a1 + v8) = *(void *)(*a2 + v8);
        v8 += 8;
      }
      while (8 * v7 != v8);
      uint64_t v6 = *(void **)a1;
    }
    *(unsigned char *)(a1 + 33) = v7;
  }
  else
  {
    LOBYTE(v7) = *(unsigned char *)(a1 + 33);
  }
  qsort(v6, v7, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
  return a1;
}

void sub_1A1890578(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t geo::codec::VectorTile::labelTextPlacements(geo::codec::VectorTile *this)
{
  return *((void *)this + 83);
}

uint64_t md::CompositeLabeler::areAllMapTilesReady(md::CompositeLabeler *this)
{
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = *((void *)this + 2);
  if (v1 == v2) {
    return 1;
  }
  uint64_t v3 = v1 + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v3 - 8) + 96))(*(void *)(v3 - 8));
    if (result) {
      BOOL v5 = v3 == v2;
    }
    else {
      BOOL v5 = 1;
    }
    v3 += 8;
  }
  while (!v5);
  return result;
}

uint64_t md::Labeler::areAllMapTilesReady(md::Labeler *this)
{
  return 1;
}

BOOL md::StandardLabeler::areAllMapTilesReady(md::StandardLabeler *this)
{
  uint64_t v1 = *((void *)this + 6);
  return *(unsigned char *)(v1 + 759) && *(unsigned char *)(v1 + 760) != 0;
}

void md::PointLabelFeature::~PointLabelFeature(md::PointLabelFeature *this)
{
  *(void *)this = &unk_1EF537458;
  if (md::DebugStreamingPOIFeatureID) {
    BOOL v2 = md::DebugStreamingPOIFeatureID == *((void *)this + 62);
  }
  else {
    BOOL v2 = 0;
  }
  if (v2)
  {
    if (GEOGetVectorKitStreamingPOILog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitStreamingPOILog_onceToken, &__block_literal_global_61);
    }
    uint64_t v3 = (id)GEOGetVectorKitStreamingPOILog_log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl(&dword_1A1780000, v3, OS_LOG_TYPE_DEBUG, "PointLabelFeature::~PointLabelFeature", v18, 2u);
    }
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 83);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (*((unsigned char *)this + 642)) {
    *((unsigned char *)this + 642) = 0;
  }
  uint64_t v5 = *((void *)this + 72);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 73);
    uint64_t v7 = *((void *)this + 72);
    if (v6 != v5)
    {
      uint64_t v8 = *((void *)this + 73);
      do
      {
        int v10 = *(void **)(v8 - 32);
        v8 -= 32;
        long long v9 = v10;
        if (v10)
        {
          *(void *)(v6 - 24) = v9;
          operator delete(v9);
        }
        uint64_t v6 = v8;
      }
      while (v8 != v5);
      uint64_t v7 = *((void *)this + 72);
    }
    *((void *)this + 73) = v5;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 75) + 40))(*((void *)this + 75), v7, *((void *)this + 74) - v7);
  }
  uint64_t v11 = *((void *)this + 68);
  if (v11)
  {
    uint64_t v12 = *((void *)this + 69);
    uint64_t v13 = *((void *)this + 68);
    if (v12 == v11)
    {
LABEL_34:
      *((void *)this + 69) = v11;
      (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 71) + 40))(*((void *)this + 71), v13, *((void *)this + 70) - v13);
      goto LABEL_35;
    }
    while (1)
    {
      if (*(char *)(v12 - 9) < 0)
      {
        (*(void (**)(void, void, uint64_t))(**(void **)(v12 - 8) + 40))(*(void *)(v12 - 8), *(void *)(v12 - 32), *(void *)(v12 - 16) & 0x7FFFFFFFFFFFFFFFLL);
        if (*(char *)(v12 - 41) < 0) {
LABEL_32:
        }
          (*(void (**)(void, void, uint64_t))(**(void **)(v12 - 40) + 40))(*(void *)(v12 - 40), *(void *)(v12 - 64), *(void *)(v12 - 48) & 0x7FFFFFFFFFFFFFFFLL);
      }
      else if (*(char *)(v12 - 41) < 0)
      {
        goto LABEL_32;
      }
      v12 -= 64;
      if (v12 == v11)
      {
        uint64_t v13 = *((void *)this + 68);
        goto LABEL_34;
      }
    }
  }
LABEL_35:
  *((void *)this + 65) = &unk_1EF55A018;

  int v14 = (std::__shared_weak_count *)*((void *)this + 64);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__tree<std::__value_type<md::LabelIdentifier,md::PointPosition>,std::__map_value_compare<md::LabelIdentifier,std::__value_type<md::LabelIdentifier,md::PointPosition>,std::less<md::LabelIdentifier>,true>,geo::StdAllocator<std::__value_type<md::LabelIdentifier,md::PointPosition>,mdm::Allocator>>::destroy((uint64_t)this + 456, *((void **)this + 58));
  uint64_t v15 = *((void *)this + 40);
  if (v15)
  {
    uint64_t v16 = *((void *)this + 41);
    uint64_t v17 = *((void *)this + 40);
    if (v16 != v15)
    {
      do
      {
        v16 -= 48;
        geo::StdAllocator<md::PointLabelFeature::WorkUnit,mdm::Allocator>::destroy(v16);
      }
      while (v16 != v15);
      uint64_t v17 = *((void *)this + 40);
    }
    *((void *)this + 41) = v15;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 43) + 40))(*((void *)this + 43), v17, *((void *)this + 42) - v17);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 248));
  md::LabelFeature::~LabelFeature(this);
}

{
  uint64_t vars8;

  md::PointLabelFeature::~PointLabelFeature(this);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__tree<std::__value_type<md::LabelIdentifier,md::PointPosition>,std::__map_value_compare<md::LabelIdentifier,std::__value_type<md::LabelIdentifier,md::PointPosition>,std::less<md::LabelIdentifier>,true>,geo::StdAllocator<std::__value_type<md::LabelIdentifier,md::PointPosition>,mdm::Allocator>>::destroy(uint64_t result, void *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    std::__tree<std::__value_type<md::LabelIdentifier,md::PointPosition>,std::__map_value_compare<md::LabelIdentifier,std::__value_type<md::LabelIdentifier,md::PointPosition>,std::less<md::LabelIdentifier>,true>,geo::StdAllocator<std::__value_type<md::LabelIdentifier,md::PointPosition>,mdm::Allocator>>::destroy(result, *a2);
    std::__tree<std::__value_type<md::LabelIdentifier,md::PointPosition>,std::__map_value_compare<md::LabelIdentifier,std::__value_type<md::LabelIdentifier,md::PointPosition>,std::less<md::LabelIdentifier>,true>,geo::StdAllocator<std::__value_type<md::LabelIdentifier,md::PointPosition>,mdm::Allocator>>::destroy(v3, a2[1]);
    uint64_t v5 = a2 + 5;
    std::vector<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,geo::StdAllocator<geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>,mdm::Allocator>>::__destroy_vector::operator()[abi:nn180100](&v5);
    uint64_t v4 = *(uint64_t (**)(void))(**(void **)(v3 + 16) + 40);
    return v4();
  }
  return result;
}

void md::LabelExternalFeature::~LabelExternalFeature(md::LabelExternalFeature *this)
{
  *(void *)this = &unk_1EF53D880;
  BOOL v2 = (char *)this + 144;
  uint64_t v3 = (char *)*((void *)this + 21);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    if ((*((char *)this + 143) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_8:
    operator delete(*((void **)this + 15));
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 13);
    if (!v4) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v3) {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  if (*((char *)this + 143) < 0) {
    goto LABEL_8;
  }
LABEL_5:
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 13);
  if (!v4)
  {
LABEL_10:
    uint64_t v5 = (void **)*((void *)this + 6);
    if (!v5) {
      goto LABEL_25;
    }
LABEL_11:
    uint64_t v6 = (void **)*((void *)this + 7);
    uint64_t v7 = v5;
    if (v6 == v5)
    {
LABEL_24:
      *((void *)this + 7) = v5;
      operator delete(v7);
      goto LABEL_25;
    }
    while (1)
    {
      if (*((char *)v6 - 1) < 0)
      {
        operator delete(*(v6 - 3));
        if ((*((char *)v6 - 25) & 0x80000000) == 0)
        {
LABEL_16:
          if ((*((char *)v6 - 49) & 0x80000000) == 0) {
            goto LABEL_17;
          }
          goto LABEL_21;
        }
      }
      else if ((*((char *)v6 - 25) & 0x80000000) == 0)
      {
        goto LABEL_16;
      }
      operator delete(*(v6 - 6));
      if ((*((char *)v6 - 49) & 0x80000000) == 0)
      {
LABEL_17:
        if (*((char *)v6 - 73) < 0) {
          goto LABEL_22;
        }
        goto LABEL_13;
      }
LABEL_21:
      operator delete(*(v6 - 9));
      if (*((char *)v6 - 73) < 0) {
LABEL_22:
      }
        operator delete(*(v6 - 12));
LABEL_13:
      v6 -= 13;
      if (v6 == v5)
      {
        uint64_t v7 = (void **)*((void *)this + 6);
        goto LABEL_24;
      }
    }
  }
LABEL_9:
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  uint64_t v5 = (void **)*((void *)this + 6);
  if (v5) {
    goto LABEL_11;
  }
LABEL_25:
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

{
  uint64_t vars8;

  md::LabelExternalFeature::~LabelExternalFeature(this);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<md::LabelExternalPointFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void md::LabelExternalPointFeature::~LabelExternalPointFeature(md::LabelExternalPointFeature *this)
{
  *(void *)this = &unk_1EF546788;
  uint64_t v2 = *((void *)this + 53);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 54);
    uint64_t v4 = (void *)*((void *)this + 53);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 53);
    }
    *((void *)this + 54) = v2;
    operator delete(v4);
  }
  uint64_t v6 = (void *)*((void *)this + 50);
  if (v6)
  {
    *((void *)this + 51) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *((void *)this + 47);
  if (v7)
  {
    uint64_t v8 = *((void *)this + 48);
    long long v9 = (void *)*((void *)this + 47);
    if (v8 != v7)
    {
      uint64_t v10 = *((void *)this + 48);
      do
      {
        uint64_t v12 = *(void **)(v10 - 32);
        v10 -= 32;
        uint64_t v11 = v12;
        if (v12)
        {
          *(void *)(v8 - 24) = v11;
          operator delete(v11);
        }
        uint64_t v8 = v10;
      }
      while (v10 != v7);
      long long v9 = (void *)*((void *)this + 47);
    }
    *((void *)this + 48) = v7;
    operator delete(v9);
  }
  uint64_t v13 = (void *)*((void *)this + 44);
  if (v13)
  {
    *((void *)this + 45) = v13;
    operator delete(v13);
  }
  *((void *)this + 41) = &unk_1EF559B98;

  int v14 = (std::__shared_weak_count *)*((void *)this + 40);
  if (!v14 || atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 38);
    if (!v15) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v15) {
LABEL_25:
  }
    std::__shared_weak_count::__release_weak(v15);
LABEL_26:

  uint64_t v16 = (void *)*((void *)this + 24);
  if (v16)
  {
    *((void *)this + 25) = v16;
    operator delete(v16);
  }
  md::LabelExternalFeature::~LabelExternalFeature(this);
}

{
  uint64_t vars8;

  md::LabelExternalPointFeature::~LabelExternalPointFeature(this);
  JUMPOUT(0x1A6239270);
}

gss::Allocator *gss::CartoStyle<gss::ScenePropertyID>::initConditionalStyleList(gss::Allocator *result, uint64_t a2)
{
  if (*((unsigned char *)result + 120)) {
    return result;
  }
  uint64_t v3 = result;
  unint64_t v105 = 0;
  uint64_t v106 = gss::Allocator::instance(result);
  uint64_t v107 = 0;
  unint64_t v104 = &v105;
  uint64_t v4 = *((unsigned __int16 *)v3 + 16);
  if (!*((_WORD *)v3 + 16)) {
    return (gss::Allocator *)std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v104, v105);
  }
  int v5 = 0;
  uint64_t v98 = v3;
  uint64_t v6 = (unsigned int *)*((void *)v3 + 3);
  uint64_t v7 = &v6[v4];
  uint64_t v101 = a2;
  do
  {
    uint64_t v8 = (void *)(*(void *)(a2 + 64) + 16 * *v6);
    inited = (void *)gss::CartoStyle<gss::ScenePropertyID>::initConditionalStyleList(*v8, a2);
    uint64_t v10 = *(unsigned __int16 *)(*v8 + 64);
    if (*(_WORD *)(*v8 + 64))
    {
      uint64_t v11 = *(void *)(*v8 + 56);
      uint64_t v12 = v11 + 16 * v10;
      do
      {
        unsigned int v13 = *(_DWORD *)(*(void *)v11 + 152);
        int v14 = v105;
        uint64_t v15 = &v105;
        uint64_t v16 = &v105;
        if (v105)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v16 = (void **)v14;
              unsigned int v17 = *((_DWORD *)v14 + 7);
              if (v13 >= v17) {
                break;
              }
              int v14 = *v16;
              uint64_t v15 = v16;
              if (!*v16) {
                goto LABEL_18;
              }
            }
            if (v17 >= v13) {
              break;
            }
            int v14 = v16[1];
            if (!v14)
            {
              uint64_t v15 = v16 + 1;
              goto LABEL_18;
            }
          }
          inited = v16;
        }
        else
        {
LABEL_18:
          inited = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v106 + 16))(v106, 40, 8);
          *((_DWORD *)inited + 7) = v13;
          *((_DWORD *)inited + 8) = 0;
          void *inited = 0;
          inited[1] = 0;
          inited[2] = v16;
          *uint64_t v15 = inited;
          uint64_t v18 = inited;
          if (*v104)
          {
            unint64_t v104 = (void *)*v104;
            uint64_t v18 = (void *)*v15;
          }
          uint64_t v19 = v105;
          BOOL v60 = v18 == v105;
          *((unsigned char *)v18 + 24) = v18 == v105;
          if (!v60)
          {
            do
            {
              uint64_t v20 = v18[2];
              if (*(unsigned char *)(v20 + 24)) {
                break;
              }
              char v21 = *(void **)(v20 + 16);
              uint64_t v22 = *v21;
              if (*v21 == v20)
              {
                uint64_t v25 = v21[1];
                if (!v25 || (v26 = *(unsigned __int8 *)(v25 + 24), char v23 = (unsigned char *)(v25 + 24), v26))
                {
                  if (*(void **)v20 == v18)
                  {
                    uint64_t v27 = (uint64_t *)v18[2];
                  }
                  else
                  {
                    uint64_t v27 = *(uint64_t **)(v20 + 8);
                    uint64_t v28 = *v27;
                    *(void *)(v20 + 8) = *v27;
                    if (v28)
                    {
                      *(void *)(v28 + 16) = v20;
                      char v21 = *(void **)(v20 + 16);
                    }
                    v27[2] = (uint64_t)v21;
                    *(void *)(*(void *)(v20 + 16) + 8 * (**(void **)(v20 + 16) != v20)) = v27;
                    uint64_t *v27 = v20;
                    *(void *)(v20 + 16) = v27;
                    char v21 = (void *)v27[2];
                    uint64_t v20 = *v21;
                  }
                  *((unsigned char *)v27 + 24) = 1;
                  *((unsigned char *)v21 + 24) = 0;
                  uint64_t v31 = *(void *)(v20 + 8);
                  void *v21 = v31;
                  if (v31) {
                    *(void *)(v31 + 16) = v21;
                  }
                  *(void *)(v20 + 16) = v21[2];
                  *(void *)(v21[2] + 8 * (*(void *)v21[2] != (void)v21)) = v20;
                  *(void *)(v20 + 8) = v21;
                  goto LABEL_8;
                }
              }
              else if (!v22 || (v24 = *(unsigned __int8 *)(v22 + 24), char v23 = (unsigned char *)(v22 + 24), v24))
              {
                if (*(void **)v20 == v18)
                {
                  uint64_t v29 = v18[1];
                  *(void *)uint64_t v20 = v29;
                  if (v29)
                  {
                    *(void *)(v29 + 16) = v20;
                    char v21 = *(void **)(v20 + 16);
                  }
                  void v18[2] = v21;
                  *(void *)(*(void *)(v20 + 16) + 8 * (**(void **)(v20 + 16) != v20)) = v18;
                  v18[1] = v20;
                  *(void *)(v20 + 16) = v18;
                  char v21 = (void *)v18[2];
                }
                else
                {
                  uint64_t v18 = (void *)v18[2];
                }
                *((unsigned char *)v18 + 24) = 1;
                *((unsigned char *)v21 + 24) = 0;
                uint64_t v20 = v21[1];
                uint64_t v30 = *(void **)v20;
                v21[1] = *(void *)v20;
                if (v30) {
                  v30[2] = v21;
                }
                *(void *)(v20 + 16) = v21[2];
                *(void *)(v21[2] + 8 * (*(void *)v21[2] != (void)v21)) = v20;
                *(void *)uint64_t v20 = v21;
LABEL_8:
                void v21[2] = v20;
                break;
              }
              *(unsigned char *)(v20 + 24) = 1;
              uint64_t v18 = v21;
              *((unsigned char *)v21 + 24) = v21 == v19;
              *char v23 = 1;
            }
            while (v21 != v19);
          }
          ++v107;
        }
        *((_DWORD *)inited + 8) = v5++;
        v11 += 16;
      }
      while (v11 != v12);
    }
    ++v6;
    a2 = v101;
  }
  while (v6 != v7);
  uint64_t v32 = v98;
  if (!v107 || !v101) {
    return (gss::Allocator *)std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v104, v105);
  }
  unsigned int v33 = v107 + *((unsigned __int16 *)v98 + 32);
  memset(v103, 0, 13);
  if (HIWORD(v33) || !v33)
  {
    unsigned __int16 v35 = 0;
    uint64_t v36 = *((unsigned __int16 *)v98 + 16);
    if (!*((_WORD *)v98 + 16)) {
      goto LABEL_127;
    }
  }
  else
  {
    uint64_t v34 = gss::Allocator::instance((gss::Allocator *)inited);
    inited = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v34 + 16))(v34, 16 * v33, 8);
    WORD1(v103[1]) = v33;
    v103[0] = inited;
    unsigned __int16 v35 = v33;
    uint64_t v36 = *((unsigned __int16 *)v98 + 16);
    if (!*((_WORD *)v98 + 16)) {
      goto LABEL_127;
    }
  }
  int v37 = 0;
  unint64_t v38 = (unsigned int *)*((void *)v98 + 3);
  unint64_t v99 = &v38[v36];
  do
  {
    uint64_t v39 = *(void *)(*(void *)(a2 + 64) + 16 * *v38);
    if (*(_WORD *)(v39 + 64))
    {
      __int16 v40 = *(long long **)(v39 + 56);
      uint64_t v102 = &v40[*(unsigned __int16 *)(v39 + 64)];
      unint64_t v100 = v38;
      do
      {
        unsigned int v41 = *(_DWORD *)(*(void *)v40 + 152);
        uint64_t v42 = v105;
        uint64_t v43 = &v105;
        long long v44 = &v105;
        if (v105)
        {
          while (1)
          {
            while (1)
            {
              long long v44 = (void **)v42;
              unsigned int v45 = *((_DWORD *)v42 + 7);
              if (v41 >= v45) {
                break;
              }
              uint64_t v42 = *v44;
              uint64_t v43 = v44;
              if (!*v44) {
                goto LABEL_68;
              }
            }
            if (v45 >= v41) {
              break;
            }
            uint64_t v42 = v44[1];
            if (!v42)
            {
              uint64_t v43 = v44 + 1;
              goto LABEL_68;
            }
          }
          if (*((_DWORD *)v44 + 8) != v37) {
            goto LABEL_60;
          }
        }
        else
        {
LABEL_68:
          inited = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v106 + 16))(v106, 40, 8);
          *((_DWORD *)inited + 7) = v41;
          *((_DWORD *)inited + 8) = 0;
          void *inited = 0;
          inited[1] = 0;
          inited[2] = v44;
          *uint64_t v43 = inited;
          if (*v104)
          {
            unint64_t v104 = (void *)*v104;
            inited = (void *)*v43;
          }
          uint64_t v46 = v105;
          BOOL v60 = inited == v105;
          *((unsigned char *)inited + 24) = inited == v105;
          if (!v60)
          {
            do
            {
              uint64_t v47 = inited[2];
              if (*(unsigned char *)(v47 + 24)) {
                break;
              }
              uint64_t v48 = *(void **)(v47 + 16);
              uint64_t v49 = *v48;
              if (*v48 == v47)
              {
                uint64_t v52 = v48[1];
                if (!v52 || (v53 = *(unsigned __int8 *)(v52 + 24), __int16 v50 = (unsigned char *)(v52 + 24), v53))
                {
                  if (*(void **)v47 == inited)
                  {
                    int v54 = (uint64_t *)inited[2];
                  }
                  else
                  {
                    int v54 = *(uint64_t **)(v47 + 8);
                    uint64_t v55 = *v54;
                    *(void *)(v47 + 8) = *v54;
                    if (v55)
                    {
                      *(void *)(v55 + 16) = v47;
                      uint64_t v48 = *(void **)(v47 + 16);
                    }
                    v54[2] = (uint64_t)v48;
                    *(void *)(*(void *)(v47 + 16) + 8 * (**(void **)(v47 + 16) != v47)) = v54;
                    *int v54 = v47;
                    *(void *)(v47 + 16) = v54;
                    uint64_t v48 = (void *)v54[2];
                    uint64_t v47 = *v48;
                  }
                  *((unsigned char *)v54 + 24) = 1;
                  *((unsigned char *)v48 + 24) = 0;
                  uint64_t v58 = *(void *)(v47 + 8);
                  void *v48 = v58;
                  if (v58) {
                    *(void *)(v58 + 16) = v48;
                  }
                  *(void *)(v47 + 16) = v48[2];
                  *(void *)(v48[2] + 8 * (*(void *)v48[2] != (void)v48)) = v47;
                  *(void *)(v47 + 8) = v48;
                  goto LABEL_99;
                }
              }
              else if (!v49 || (v51 = *(unsigned __int8 *)(v49 + 24), __int16 v50 = (unsigned char *)(v49 + 24), v51))
              {
                if (*(void **)v47 == inited)
                {
                  uint64_t v56 = inited[1];
                  *(void *)uint64_t v47 = v56;
                  if (v56)
                  {
                    *(void *)(v56 + 16) = v47;
                    uint64_t v48 = *(void **)(v47 + 16);
                  }
                  inited[2] = v48;
                  *(void *)(*(void *)(v47 + 16) + 8 * (**(void **)(v47 + 16) != v47)) = inited;
                  inited[1] = v47;
                  *(void *)(v47 + 16) = inited;
                  uint64_t v48 = (void *)inited[2];
                }
                else
                {
                  inited = (void *)inited[2];
                }
                *((unsigned char *)inited + 24) = 1;
                *((unsigned char *)v48 + 24) = 0;
                uint64_t v47 = v48[1];
                char v57 = *(void **)v47;
                v48[1] = *(void *)v47;
                if (v57) {
                  v57[2] = v48;
                }
                *(void *)(v47 + 16) = v48[2];
                *(void *)(v48[2] + 8 * (*(void *)v48[2] != (void)v48)) = v47;
                *(void *)uint64_t v47 = v48;
LABEL_99:
                v48[2] = v47;
                break;
              }
              *(unsigned char *)(v47 + 24) = 1;
              inited = v48;
              *((unsigned char *)v48 + 24) = v48 == v46;
              unsigned char *v50 = 1;
            }
            while (v48 != v46);
          }
          ++v107;
          if (v37) {
            goto LABEL_60;
          }
        }
        uint64_t v59 = LOWORD(v103[1]);
        BOOL v60 = LOWORD(v103[1]) != 0xFFFFLL && BYTE4(v103[1]) == 0;
        if (v60 && LOWORD(v103[1]) >= WORD1(v103[1]))
        {
          uint64_t v63 = LOWORD(v103[1]) + 1;
          uint64_t v64 = gss::Allocator::instance((gss::Allocator *)inited);
          inited = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v64 + 16))(v64, 16 * v63, 8);
          long long v62 = inited;
          uint64_t v65 = v103[0];
          uint64_t v59 = LOWORD(v103[1]);
          if (v103[0])
          {
            if (LOWORD(v103[1]))
            {
              int v66 = LOWORD(v103[1]);
              double v67 = inited;
              do
              {
                *v67++ = *(_OWORD *)v65;
                *(void *)uint64_t v65 = 0;
                *(void *)(v65 + 8) = 0;
                v65 += 16;
                --v66;
              }
              while ((_WORD)v66);
            }
            if (!BYTE4(v103[1]) && v103[0])
            {
              if (LOWORD(v103[1]))
              {
                uint64_t v68 = 16 * LOWORD(v103[1]);
                char v69 = (std::__shared_weak_count **)(v103[0] + 8);
                do
                {
                  uint64_t v70 = *v69;
                  if (*v69 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                    std::__shared_weak_count::__release_weak(v70);
                  }
                  v69 += 2;
                  v68 -= 16;
                }
                while (v68);
              }
              uint64_t v71 = gss::Allocator::instance((gss::Allocator *)inited);
              inited = (void *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v71 + 40))(v71, v103[0], 16 * WORD1(v103[1]));
              a2 = v101;
              unint64_t v38 = v100;
            }
            BYTE4(v103[1]) = 0;
            LODWORD(v103[1]) = (unsigned __int16)v59;
          }
          WORD1(v103[1]) = v63;
          v103[0] = v62;
        }
        else
        {
          long long v62 = (void *)v103[0];
        }
        long long v72 = *v40;
        *(_OWORD *)&v62[2 * v59] = *v40;
        if (*((void *)&v72 + 1))
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v72 + 1) + 8), 1uLL, memory_order_relaxed);
          LOWORD(v59) = v103[1];
        }
        LOWORD(v103[1]) = v59 + 1;
LABEL_60:
        ++v37;
        ++v40;
      }
      while (v40 != v102);
    }
    ++v38;
  }
  while (v38 != v99);
  unsigned __int16 v35 = WORD1(v103[1]);
  uint64_t v32 = v98;
LABEL_127:
  unint64_t v73 = (void *)*((void *)v32 + 7);
  unint64_t v74 = *((unsigned __int16 *)v32 + 32);
  unint64_t v75 = v35;
  uint64_t v76 = LOWORD(v103[1]);
  if (v75 - LOWORD(v103[1]) < v74)
  {
    unint64_t v77 = v74 + LOWORD(v103[1]);
    BOOL v78 = v77 > v75 && (v74 + LOWORD(v103[1])) >> 16 == 0;
    if (v78 && BYTE4(v103[1]) == 0)
    {
      uint64_t v80 = gss::Allocator::instance((gss::Allocator *)inited);
      inited = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v80 + 16))(v80, 16 * v77, 8);
      long double v81 = inited;
      if (v103[0]) {
        inited = (void *)geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::moveContent((uint64_t)v103, inited);
      }
      WORD1(v103[1]) = v77;
      v103[0] = v81;
      uint64_t v76 = LOWORD(v103[1]);
    }
  }
  if (v74)
  {
    char v82 = &v73[2 * v74];
    float64x2_t v83 = (void *)(v103[0] + 16 * v76);
    do
    {
      void *v83 = *v73;
      uint64_t v84 = v73[1];
      v83[1] = v84;
      if (v84) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v84 + 8), 1uLL, memory_order_relaxed);
      }
      v73 += 2;
      v83 += 2;
    }
    while (v73 != v82);
    LOWORD(v76) = v103[1];
  }
  unsigned __int16 v85 = v76 + v74;
  LOWORD(v103[1]) = v85;
  if (!BYTE4(v103[1]) && WORD1(v103[1]) != v85)
  {
    uint64_t v86 = gss::Allocator::instance((gss::Allocator *)inited);
    inited = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v86 + 16))(v86, 16 * v85, 8);
    uint64_t v87 = inited;
    if (v103[0]) {
      inited = (void *)geo::intern_vector<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,geo::StdAllocator<std::shared_ptr<gss::ConditionalStyle<gss::PropertyID>>,gss::Allocator>>::moveContent((uint64_t)v103, inited);
    }
    WORD1(v103[1]) = v85;
    v103[0] = v87;
  }
  if ((void *)((char *)v32 + 56) == v103)
  {
    int v92 = BYTE4(v103[1]);
    *((unsigned char *)v32 + 120) = 1;
    if (!v92 && v103[0])
    {
      if (LOWORD(v103[1]))
      {
        uint64_t v93 = 16 * LOWORD(v103[1]);
        unsigned int v94 = (std::__shared_weak_count **)(v103[0] + 8);
        do
        {
          unsigned int v95 = *v94;
          if (*v94 && !atomic_fetch_add(&v95->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
          v94 += 2;
          v93 -= 16;
        }
        while (v93);
      }
      uint64_t v97 = gss::Allocator::instance((gss::Allocator *)inited);
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)v97 + 40))(v97, v103[0], 16 * WORD1(v103[1]));
    }
  }
  else
  {
    if (!*((unsigned char *)v32 + 68))
    {
      uint64_t v88 = *((void *)v32 + 7);
      if (v88)
      {
        if (*((_WORD *)v32 + 32))
        {
          uint64_t v89 = 16 * *((unsigned __int16 *)v32 + 32);
          uint64_t v90 = (std::__shared_weak_count **)(v88 + 8);
          do
          {
            uint64_t v91 = *v90;
            if (*v90)
            {
              if (!atomic_fetch_add(&v91->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                std::__shared_weak_count::__release_weak(v91);
              }
            }
            v90 += 2;
            v89 -= 16;
          }
          while (v89);
        }
        uint64_t v96 = gss::Allocator::instance((gss::Allocator *)inited);
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)v96 + 40))(v96, *((void *)v32 + 7), 16 * *((unsigned __int16 *)v32 + 33));
      }
    }
    *((void *)v32 + 7) = v103[0];
    *((_DWORD *)v32 + 16) = v103[1];
    *((unsigned char *)v32 + 68) = BYTE4(v103[1]);
    *((unsigned char *)v32 + 120) = 1;
  }
  return (gss::Allocator *)std::__tree<std::__value_type<unsigned int,gss::PropertySize>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,gss::PropertySize>,std::less<unsigned int>,true>,geo::StdAllocator<std::__value_type<unsigned int,gss::PropertySize>,gss::Allocator>>::destroy((uint64_t)&v104, v105);
}

void sub_1A1891B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *a18)
{
}

void sub_1A1891C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<md::MapEngine::buildFrameRequest(std::optional<unsigned int>,std::function<void ()(void)>)::$_0,std::allocator<md::MapEngine::buildFrameRequest(std::optional<unsigned int>,std::function<void ()(void)>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = (id *)(*(void *)(a1 + 8) + 848);
  id WeakRetained = objc_loadWeakRetained(v1);

  if (WeakRetained)
  {
    id v3 = objc_loadWeakRetained(v1);
    [v3 didPresent];
  }
}

void sub_1A1891CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void md::PolylinePixelHiker::validate(md::PolylinePixelHiker *this)
{
  *((_WORD *)this + 4) = 256;
  *((unsigned char *)this + 10) = 0;
  uint64_t v2 = *((void *)this + 68);
  if (!v2) {
    goto LABEL_30;
  }
  if (*((_DWORD *)this + 146) != *(_DWORD *)(v2 + 252)) {
    goto LABEL_30;
  }
  uint64_t v3 = *((void *)this + 71);
  if (!v3) {
    goto LABEL_30;
  }
  if ((*((__int16 *)this + 289) & 0x8000000000000000) != 0) {
    goto LABEL_30;
  }
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)v3 + 24))();
  *((void *)this + 74) = *(void *)v4;
  *((void *)this + 75) = *(void *)(v4 + 8);
  *((void *)this + 76) = *(void *)(v4 + 16);
  *((void *)this + 77) = *(void *)(v4 + 24);
  *((void *)this + 78) = *(void *)(v4 + 32);
  int v5 = *(_DWORD *)(v4 + 40);
  *(_DWORD *)((char *)this + 635) = *(_DWORD *)(v4 + 43);
  *((_DWORD *)this + 158) = v5;
  uint64_t v6 = *((void *)this + 68);
  if (!v6) {
    goto LABEL_30;
  }
  if (*((_DWORD *)this + 146) != *(_DWORD *)(v6 + 252)) {
    goto LABEL_30;
  }
  uint64_t v7 = *((void *)this + 71);
  if (!v7 || *((__int16 *)this + 289) < 0) {
    goto LABEL_30;
  }
  unint64_t v8 = *((unsigned __int16 *)this + 289);
  unint64_t v9 = (*(uint64_t (**)(void))(**(void **)v7 + 16))();
  *((unsigned char *)this + 9) = v9 > v8;
  if (v9 <= v8) {
    return;
  }
  int v10 = md::RoadHiker::pixelForPoint((uint64_t)this, (md::PolylinePixelHiker *)((char *)this + 592), (float32x2_t *)this + 86, (float *)this + 178);
  *((unsigned char *)this + 9) = v10;
  if (!v10) {
    return;
  }
  uint64_t v11 = md::LabelLinePosition::pointAtOffset((md::PolylinePixelHiker *)((char *)this + 544), 1);
  if (!v11)
  {
LABEL_30:
    *((unsigned char *)this + 9) = 0;
    return;
  }
  uint64_t v12 = (md::LabelPoint *)v11;
  *((void *)this + 80) = *(void *)v11;
  *((void *)this + 81) = *(void *)(v11 + 8);
  *((void *)this + 82) = *(void *)(v11 + 16);
  *((void *)this + 83) = *(void *)(v11 + 24);
  *((void *)this + 84) = *(void *)(v11 + 32);
  int v13 = *(_DWORD *)(v11 + 40);
  *(_DWORD *)((char *)this + 683) = *(_DWORD *)(v11 + 43);
  *((_DWORD *)this + 170) = v13;
  int v14 = md::RoadHiker::pixelForPoint((uint64_t)this, (md::PolylinePixelHiker *)((char *)this + 640), (float32x2_t *)((char *)this + 700), (float *)this + 179);
  *((unsigned char *)this + 9) = v14;
  if (v14)
  {
    float v15 = *((float *)this + 178) - *((float *)this + 179);
    float v16 = *((float *)this + 175) - *((float *)this + 172);
    float v17 = *((float *)this + 176) - *((float *)this + 173);
    float v18 = (float)((float)(v16 * v16) + (float)(v17 * v17))
        + (float)((float)(*((float *)this + 177) - *((float *)this + 174))
                * (float)(*((float *)this + 177) - *((float *)this + 174)));
    float v19 = sqrtf(v18);
    float v20 = 1.0 / sqrtf(v18 + (float)(v15 * v15));
    *((float *)this + 10) = v20 * v15;
    *((float *)this + 11) = v20 * v19;
    md::LabelPoint::lerped((md::LabelPoint *)v45, (md::PolylinePixelHiker *)((char *)this + 592), *((float *)this + 145), (uint64_t)this + 640);
    if (md::RoadHiker::pixelForPoint((uint64_t)this, (md::LabelPoint *)v45, (float32x2_t *)this + 2, (float *)this + 12))
    {
      char v21 = (float32x2_t *)((char *)this + 692);
      if (*((float *)this + 190) != 0.0)
      {
        uint64_t v22 = (md::LabelPoint *)md::LabelLinePosition::pointAtOffset((md::PolylinePixelHiker *)((char *)this + 544), -1);
        if (v22) {
          md::RoadHiker::pixelForPoint((uint64_t)this, v22, &v44, 0);
        }
        *((float *)this + 180) = md::PolylinePixelHiker::computeBisector(this, (uint64_t)&v44, v22 != 0, (uint64_t *)this + 86, (uint64_t *)((char *)this + 700), 1, (md::PolylinePixelHiker *)((char *)this + 592));
        *((_DWORD *)this + 181) = v23;
        *((_DWORD *)this + 182) = v24;
        uint64_t v25 = md::LabelLinePosition::pointAtOffset((md::PolylinePixelHiker *)((char *)this + 544), 2);
        if (v25) {
          md::RoadHiker::pixelForPoint((uint64_t)this, v12, &v43, 0);
        }
        *((float *)this + 183) = md::PolylinePixelHiker::computeBisector(this, (uint64_t)this + 688, 1, (uint64_t *)((char *)this + 700), (uint64_t *)&v43, v25 != 0, (md::PolylinePixelHiker *)((char *)this + 640));
        *((_DWORD *)this + 184) = v26;
        *((_DWORD *)this + 185) = v27;
      }
      float v28 = *((float *)this + 175);
      float v29 = *((float *)this + 172);
      float v30 = v28 - v29;
      float32x2_t v31 = *(float32x2_t *)((char *)this + 704);
      float32x2_t v32 = *v21;
      float32x2_t v33 = vsub_f32(v31, *v21);
      int32x2_t v34 = (int32x2_t)vmul_f32(v33, v33);
      *(float *)v34.i32 = sqrtf((float)(*(float *)v34.i32 + (float)(v30 * v30)) + *(float *)&v34.i32[1]);
      *((unsigned char *)this + 9) = *(float *)v34.i32 > 0.001;
      if (*(float *)v34.i32 > 0.001)
      {
        *((float *)this + 7) = v30 / *(float *)v34.i32;
        *((float32x2_t *)this + 4) = vdiv_f32(v33, (float32x2_t)vdup_lane_s32(v34, 0));
        float v35 = fabsf(v30);
        float v36 = fabsf(v33.f32[0]);
        BOOL v37 = v35 <= v36;
        uint64_t v38 = 20;
        if (v35 <= v36)
        {
          float v39 = v32.f32[0];
        }
        else
        {
          uint64_t v38 = 16;
          float v39 = v29;
        }
        if (v37) {
          float v30 = v33.f32[0];
        }
        float v40 = (float)(*(float *)((char *)this + v38) - v39) / v30;
        *((float *)this + 191) = v40;
        float v41 = *((float *)this + 190);
        if (v41 != 0.0)
        {
          *((float *)this + 4) = (float)(v29 + (float)(*((float *)this + 180) * v41))
                               + (float)(v40
                                       * (float)((float)(v28 - (float)(v29 + (float)(*((float *)this + 180) * v41)))
                                               + (float)(*((float *)this + 183) * v41)));
          float32x2_t v42 = vmla_n_f32(v32, *(float32x2_t *)((char *)this + 724), v41);
          *(float32x2_t *)((char *)this + 20) = vmla_n_f32(v42, vadd_f32(vmla_n_f32(vneg_f32(v42), *(float32x2_t *)((char *)this + 736), v41), v31), v40);
        }
        *((_DWORD *)this + 192) = 0;
      }
    }
  }
}

uint64_t md::LabelLinePosition::offsetDistance(md::LabelLinePosition *this, double *a2, double a3)
{
  int v6 = *(unsigned __int8 *)(*(void *)this + 290);
  if (a2)
  {
    *(int64x2_t *)a2 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    *((int64x2_t *)a2 + 1) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  }
  uint64_t v77 = 0;
  long long v75 = 0u;
  long long v76 = 0u;
  *(_DWORD *)BOOL v78 = 2139095039;
  *(_WORD *)&v78[4] = 0;
  v78[6] = 0;
  int LabelPoint = md::LabelLinePosition::getLabelPoint(this, (md::LabelPoint *)&v75);
  uint64_t result = 0;
  if (!LabelPoint) {
    return result;
  }
  if (a2)
  {
    unint64_t v9 = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)&v75);
    double v10 = a2[1];
    *a2 = fmin(*v9, *a2);
    double v11 = a2[3];
    a2[2] = fmax(a2[2], *v9);
    a2[1] = fmin(v9[1], v10);
    a2[3] = fmax(v11, v9[1]);
  }
  if (a3 >= 0.0)
  {
    float v16 = (char *)this + 16;
    LODWORD(v70[0]) = -1;
    if (md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this, 1, (uint64_t)v70)) {
      goto LABEL_17;
    }
    return 0;
  }
  if (*((float *)this + 9) != 0.0)
  {
    if (md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this, 1, (uint64_t)this + 32))
    {
      unint64_t v12 = *((__int16 *)this + 16);
      uint64_t v13 = *(void *)(*((void *)this + 2) + 8);
      uint64_t v14 = *(void *)(*((void *)this + 2) + 16) - v13;
      uint64_t v15 = v13 + 16 * v12;
      if (v12 >= v14 >> 4) {
        uint64_t v15 = 0;
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    *((void *)this + 3) = v15;
  }
  float v16 = (char *)this + 16;
  LODWORD(v70[0]) = -1;
  if (!md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this, -1, (uint64_t)v70)) {
    return 0;
  }
LABEL_17:
  uint64_t v17 = *(void *)(*(void *)(*(void *)v16 + 8) + 16 * SLOWORD(v70[0]));
  uint64_t v18 = (*(uint64_t (**)(uint64_t, void))(*(void *)v17 + 24))(v17, SWORD1(v70[0]));
  if (!v18) {
    return 0;
  }
  double v19 = fabs(a3);
  float v20 = (__int16 *)((char *)this + 32);
  md::LabelPoint::vectorToPoint((md::LabelPoint *)&v75, (const md::LabelPoint *)v18, v6 != 0);
  double v24 = sqrt(v21.n128_f64[0] * v21.n128_f64[0] + v22 * v22 + v23 * v23);
  if (v24 + 1.0e-10 >= v19)
  {
    BOOL v29 = v6 != 0;
    v21.n128_f64[0] = v24 + 1.0e-10;
    float v30 = (const md::LabelPoint *)(*(uint64_t (**)(void, void, __n128))(***((void ***)this + 3) + 24))(**((void **)this + 3), *((__int16 *)this + 17), v21);
    md::LabelPoint::vectorToPoint((md::LabelPoint *)&v75, v30, v29);
    double v19 = sqrt(v31 * v31 + v32 * v32 + v33 * v33) + v19;
    md::LabelPoint::vectorToPoint(v30, (const md::LabelPoint *)v18, v29);
    double v24 = sqrt(v34 * v34 + v35 * v35 + v36 * v36);
  }
  else
  {
    if (a2)
    {
      uint64_t v25 = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)v18);
      double v26 = a2[1];
      *a2 = fmin(*v25, *a2);
      double v27 = a2[3];
      a2[2] = fmax(a2[2], *v25);
      a2[1] = fmin(v25[1], v26);
      a2[3] = fmax(v27, v25[1]);
    }
    int v28 = a3 >= 0.0 ? 1 : -1;
    if (md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this, v28, (uint64_t)this + 32))
    {
      unint64_t v43 = *v20;
      uint64_t v44 = *(void *)(*(void *)v16 + 8);
      uint64_t v45 = *(void *)(*(void *)v16 + 16) - v44;
      uint64_t v46 = v44 + 16 * v43;
      if (v43 >= v45 >> 4) {
        uint64_t v46 = 0;
      }
    }
    else
    {
      uint64_t v46 = 0;
    }
    while (1)
    {
      *((void *)this + 3) = v46;
      uint64_t v50 = *(void *)(v18 + 8);
      *(void *)&long long v75 = *(void *)v18;
      *((void *)&v75 + 1) = v50;
      uint64_t v51 = *(void *)(v18 + 24);
      *(void *)&long long v76 = *(void *)(v18 + 16);
      *((void *)&v76 + 1) = v51;
      uint64_t v77 = *(void *)(v18 + 32);
      int v52 = *(_DWORD *)(v18 + 43);
      *(_DWORD *)BOOL v78 = *(_DWORD *)(v18 + 40);
      double v19 = v19 - v24;
      *(_DWORD *)&v78[3] = v52;
      if (a3 >= 0.0)
      {
        LODWORD(v70[0]) = -1;
        if (!md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this, 1, (uint64_t)v70)) {
          return 0;
        }
      }
      else
      {
        LODWORD(v70[0]) = -1;
        if (!md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this, -1, (uint64_t)v70)) {
          return 0;
        }
      }
      uint64_t v53 = *(void *)(*(void *)(*(void *)v16 + 8) + 16 * SLOWORD(v70[0]));
      uint64_t v18 = (*(uint64_t (**)(uint64_t, void))(*(void *)v53 + 24))(v53, SWORD1(v70[0]));
      if (!v18) {
        return 0;
      }
      md::LabelPoint::vectorToPoint((md::LabelPoint *)&v75, (const md::LabelPoint *)v18, v6 != 0);
      double v24 = sqrt(v54 * v54 + v55 * v55 + v56 * v56);
      if (v24 + 1.0e-10 >= v19) {
        break;
      }
      if (a2)
      {
        char v57 = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)v18);
        double v58 = a2[1];
        *a2 = fmin(*v57, *a2);
        double v59 = a2[3];
        a2[2] = fmax(a2[2], *v57);
        a2[1] = fmin(v57[1], v58);
        a2[3] = fmax(v59, v57[1]);
      }
      if (a3 >= 0.0) {
        int v60 = 1;
      }
      else {
        int v60 = -1;
      }
      if (md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this, v60, (uint64_t)this + 32))
      {
        unint64_t v47 = *v20;
        uint64_t v48 = *(void *)(*(void *)v16 + 8);
        uint64_t v49 = *(void *)(*(void *)v16 + 16) - v48;
        uint64_t v46 = v48 + 16 * v47;
        if (v47 >= v49 >> 4) {
          uint64_t v46 = 0;
        }
      }
      else
      {
        uint64_t v46 = 0;
      }
    }
  }
  if (v24 == 0.0) {
    return 0;
  }
  if (v24 <= v19 + -1.0e-10)
  {
    if (a3 >= 0.0) {
      int v61 = 1;
    }
    else {
      int v61 = -1;
    }
    if (md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this, v61, (uint64_t)this + 32))
    {
      unint64_t v62 = *v20;
      uint64_t v63 = *(void *)(*(void *)v16 + 8);
      uint64_t v64 = *(void *)(*(void *)v16 + 16) - v63;
      uint64_t v65 = v63 + 16 * v62;
      if (v62 >= v64 >> 4) {
        uint64_t v65 = 0;
      }
    }
    else
    {
      uint64_t v65 = 0;
    }
    *((void *)this + 3) = v65;
    double v38 = 0.0;
  }
  else
  {
    BOOL v37 = a3 < 0.0;
    double v38 = v19 / v24;
    if (v37 && v38 != 0.0)
    {
      if (md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this, -1, (uint64_t)this + 32))
      {
        unint64_t v39 = *v20;
        uint64_t v40 = *(void *)(*(void *)v16 + 8);
        uint64_t v41 = *(void *)(*(void *)v16 + 16) - v40;
        uint64_t v42 = v40 + 16 * v39;
        if (v39 >= v41 >> 4) {
          uint64_t v42 = 0;
        }
      }
      else
      {
        uint64_t v42 = 0;
      }
      *((void *)this + 3) = v42;
      double v38 = 1.0 - v38;
    }
  }
  float v66 = v38;
  *((float *)this + 9) = v66;
  if (a2)
  {
    uint64_t v71 = 0;
    memset(v70, 0, sizeof(v70));
    int v72 = 2139095039;
    __int16 v73 = 0;
    char v74 = 0;
    if (md::LabelLinePosition::getLabelPoint(this, (md::LabelPoint *)v70))
    {
      double v67 = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)v70);
      double v68 = a2[1];
      *a2 = fmin(*v67, *a2);
      double v69 = a2[3];
      a2[2] = fmax(a2[2], *v67);
      a2[1] = fmin(v67[1], v68);
      a2[3] = fmax(v69, v67[1]);
    }
  }
  return 1;
}

uint64_t md::LabelLineResolvedPosition::positionAtDistance(md::LabelLineResolvedPosition *this, md::LabelLineResolvedPosition *a2, double a3)
{
  uint64_t v6 = *(void *)this;
  if (*(void *)this
    && (int v7 = *((_DWORD *)this + 10), v7 == *(_DWORD *)(v6 + 252))
    && *((void *)this + 3)
    && (*((__int16 *)this + 17) & 0x80000000) == 0
    || (md::LabelLineResolvedPosition::moveOntoPathForZoom(this, *((unsigned __int8 *)this + 164), a3),
        (uint64_t v6 = *(void *)this) != 0)
    && (int v7 = *((_DWORD *)this + 10), v7 == *(_DWORD *)(v6 + 252))
    && *((void *)this + 3)
    && (*((__int16 *)this + 17) & 0x80000000) == 0)
  {
    unint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
    uint64_t v33 = v6;
    double v34 = v8;
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      int v7 = *((_DWORD *)this + 10);
    }
    long long v35 = *((_OWORD *)this + 1);
    uint64_t v36 = *((void *)this + 4);
    int v37 = v7;
    int v9 = md::LabelLinePosition::offsetDistance((md::LabelLinePosition *)&v33, 0, a3);
    char v10 = v9;
    if (v9)
    {
      md::LabelLineResolvedPosition::LabelLineResolvedPosition((md::LabelLineResolvedPosition *)&v18, (const md::LabelLinePosition *)&v33);
      uint64_t v12 = v18;
      double v11 = v19;
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = (std::__shared_weak_count *)*((void *)a2 + 1);
      *(void *)a2 = v12;
      *((void *)a2 + 1) = v11;
      if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      *((_OWORD *)a2 + 1) = v20[0];
      *(_OWORD *)((char *)a2 + 28) = *(_OWORD *)((char *)v20 + 12);
      *((_DWORD *)a2 + 12) = v21;
      *(_OWORD *)((char *)a2 + 56) = v22;
      *(_OWORD *)((char *)a2 + 72) = v23;
      *((void *)a2 + 11) = v24;
      *((_DWORD *)a2 + 24) = v25[0];
      *(_DWORD *)((char *)a2 + 99) = *(_DWORD *)((char *)v25 + 3);
      *(_OWORD *)((char *)a2 + 104) = v26;
      *(_OWORD *)((char *)a2 + 120) = v27;
      *((void *)a2 + 17) = v28;
      *((_DWORD *)a2 + 36) = v29[0];
      *(_DWORD *)((char *)a2 + 147) = *(_DWORD *)((char *)v29 + 3);
      int v14 = v31;
      *((void *)a2 + 19) = v30;
      *((_DWORD *)a2 + 40) = v14;
      *((_DWORD *)a2 + 41) = v32;
      uint64_t v15 = v19;
      if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    float v16 = v34;
    if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      if (v10) {
        return 1;
      }
    }
    else if (v10)
    {
      return 1;
    }
  }
  return 0;
}

void sub_1A1892988(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 - 112);
  _Unwind_Resume(a1);
}

void md::LineLabelPlacer::populateBlocks(uint64_t *a1, int __e, void *a3, uint64_t *a4, __n128 **a5)
{
  unsigned __int8 v8 = __e;
  double v10 = 0.00999999978 / ldexp(1.0, __e);
  double v11 = (std::__shared_weak_count *)a1[1];
  __int32 v157 = a1;
  if (*(unsigned char *)(*a1 + 290)) {
    double v12 = v10 * 40075017.0;
  }
  else {
    double v12 = v10;
  }
  uint64_t v169 = *a1;
  long long v170 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  md::LabelLine::attributes((unint64_t *)&v185, a3, &v169, v8);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v14 = a3[13];
  uint64_t v15 = a3[1];
  uint64_t v16 = a3[2];
  if (v16 == v15) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = (unsigned char *)a3[1];
  }
  if (v17[8])
  {
    unint64_t v18 = 0;
  }
  else
  {
    unint64_t v18 = ((*(unsigned int (**)(void))(**(void **)v17 + 16))() << 16) - 0x10000;
    uint64_t v15 = a3[1];
    uint64_t v16 = a3[2];
  }
  uint64_t v19 = v16 - v15;
  unsigned __int16 v20 = ((unint64_t)v19 >> 4) - 1;
  int v21 = (unsigned char *)(v15 + 16 * (__int16)v20);
  if ((__int16)v20 >= (unint64_t)(v19 >> 4)) {
    int v21 = 0;
  }
  if (v21[8]) {
    unint64_t v22 = ((*(unsigned int (**)(void))(**(void **)v21 + 16))() << 16) - 0x10000;
  }
  else {
    unint64_t v22 = 0;
  }
  unint64_t v23 = v18 >> 16;
  unint64_t v24 = v22 >> 16;
  uint64_t v25 = v186;
  uint64_t v158 = a3;
  if ((unint64_t)v186 >= v187)
  {
    unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v186 - v185) >> 4);
    unint64_t v28 = v27 + 1;
    if (v27 + 1 > 0x555555555555555) {
      abort();
    }
    if (0x5555555555555556 * ((uint64_t)(v187 - (void)v185) >> 4) > v28) {
      unint64_t v28 = 0x5555555555555556 * ((uint64_t)(v187 - (void)v185) >> 4);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v187 - (void)v185) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
      uint64_t v29 = 0x555555555555555;
    }
    else {
      uint64_t v29 = v28;
    }
    if (v29)
    {
      uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v188 + 16))(v188, 48 * v29, 8);
      uint64_t v31 = v30 + 48 * v27;
      uint64_t v32 = v30 + 48 * v29;
      if (v30)
      {
        *(_WORD *)uint64_t v31 = 257;
        *(unsigned char *)(v31 + 2) = 1;
        *(void *)(v31 + 8) = 0;
        *(void *)(v31 + 16) = v14;
        *(void *)(v31 + 24) = (v23 << 16);
        *(void *)(v31 + 32) = v20 | ((unsigned __int16)v24 << 16);
        *(unsigned char *)(v31 + 40) = 0;
      }
    }
    else
    {
      uint64_t v32 = 0;
      uint64_t v31 = 16 * ((v186 - v185) >> 4);
    }
    long long v26 = (char *)(v31 + 48);
    unint64_t v34 = (unint64_t)v185;
    uint64_t v33 = (__n128 *)v186;
    if (v186 != v185)
    {
      do
      {
        __n128 v13 = v33[-3];
        __n128 v35 = v33[-1];
        *(__n128 *)(v31 - 32) = v33[-2];
        *(__n128 *)(v31 - 16) = v35;
        *(__n128 *)(v31 - 48) = v13;
        v31 -= 48;
        v33 -= 3;
      }
      while (v33 != (__n128 *)v34);
      uint64_t v33 = (__n128 *)v34;
    }
    uint64_t v185 = (char *)v31;
    unint64_t v186 = v26;
    unint64_t v36 = v187;
    unint64_t v187 = v32;
    if (v33) {
      (*(void (**)(uint64_t, __n128 *, unint64_t))(*(void *)v188 + 40))(v188, v33, v36 - (void)v33);
    }
  }
  else
  {
    if (v186)
    {
      *(_WORD *)unint64_t v186 = 257;
      _DWORD v25[2] = 1;
      *((void *)v25 + 1) = 0;
      *((void *)v25 + 2) = v14;
      *((void *)v25 + 3) = (v23 << 16);
      *((void *)v25 + 4) = v20 | ((unsigned __int16)v24 << 16);
      v25[40] = 0;
    }
    long long v26 = v25 + 48;
  }
  unint64_t v186 = v26;
  {
    operator new();
  }
  uint64_t v162 = mdm::Allocator::instance(void)::alloc;
  long long v155 = a5;
  int v156 = a4;
  if (v186 == v185)
  {
    unint64_t v40 = 0;
    unint64_t v43 = 0;
    unint64_t v39 = 0;
  }
  else
  {
    unint64_t v37 = 0x5555555555555556 * ((v186 - v185) >> 4);
    if (v37 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc);
    unint64_t v39 = (double *)v38;
    unint64_t v40 = v38 + 24 * v37;
    unint64_t v41 = (unint64_t)v185;
    uint64_t v42 = v186;
    if (v185 == v186)
    {
      unint64_t v43 = v38;
    }
    else
    {
      unint64_t v43 = v38;
      do
      {
        uint64_t v44 = *(void *)(v41 + 8);
        if (v43 >= v40)
        {
          unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - (void)v39) >> 3) + 1;
          if (v46 > 0xAAAAAAAAAAAAAAALL) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          unint64_t v47 = v40 - (void)v39;
          if (0x5555555555555556 * ((uint64_t)(v40 - (void)v39) >> 3) > v46) {
            unint64_t v46 = 0x5555555555555556 * ((uint64_t)(v40 - (void)v39) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - (void)v39) >> 3) >= 0x555555555555555) {
            unint64_t v40 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v40 = v46;
          }
          if (v40)
          {
            uint64_t v48 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v162 + 16))(v162, 24 * v40, 8);
            uint64_t v49 = v48 + 8 * ((uint64_t)(v43 - (void)v39) >> 3);
            unint64_t v40 = v48 + 24 * v40;
            if (v48)
            {
              *(void *)uint64_t v49 = v41;
              *(void *)(v49 + 8) = v44;
              *(unsigned char *)(v49 + 16) = 1;
            }
          }
          else
          {
            uint64_t v49 = 8 * ((uint64_t)(v43 - (void)v39) >> 3);
          }
          uint64_t v50 = (double *)v49;
          if ((double *)v43 != v39)
          {
            uint64_t v51 = v49;
            do
            {
              uint64_t v50 = (double *)(v51 - 24);
              __n128 v13 = *(__n128 *)(v43 - 24);
              *(void *)(v51 - 8) = *(void *)(v43 - 8);
              *(__n128 *)(v51 - 24) = v13;
              v43 -= 24;
              v51 -= 24;
            }
            while ((double *)v43 != v39);
          }
          unint64_t v45 = v49 + 24;
          if (v39) {
            (*(void (**)(uint64_t, double *, unint64_t))(*(void *)v162 + 40))(v162, v39, v47);
          }
          unint64_t v39 = v50;
        }
        else
        {
          if (v43)
          {
            *(void *)unint64_t v43 = v41;
            *(void *)(v43 + 8) = v44;
            *(unsigned char *)(v43 + 16) = 1;
          }
          unint64_t v45 = v43 + 24;
        }
        uint64_t v52 = *(void *)(v41 + 16);
        if (v45 < v40)
        {
          *(void *)unint64_t v45 = v41;
          *(void *)(v45 + 8) = v52;
          *(unsigned char *)(v45 + 16) = 0;
          *(_DWORD *)(v45 + 17) = v169;
          *(_DWORD *)(v45 + 20) = *(_DWORD *)((char *)&v169 + 3);
          unint64_t v43 = v45 + 24;
        }
        else
        {
          unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - (void)v39) >> 3) + 1;
          if (v53 > 0xAAAAAAAAAAAAAAALL) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          unint64_t v54 = v40 - (void)v39;
          if (0x5555555555555556 * ((uint64_t)(v40 - (void)v39) >> 3) > v53) {
            unint64_t v53 = 0x5555555555555556 * ((uint64_t)(v40 - (void)v39) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - (void)v39) >> 3) >= 0x555555555555555) {
            unint64_t v40 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v40 = v53;
          }
          if (v40)
          {
            uint64_t v55 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v162 + 16))(v162, 24 * v40, 8);
            uint64_t v56 = v55 + 8 * ((uint64_t)(v45 - (void)v39) >> 3);
            unint64_t v40 = v55 + 24 * v40;
            if (v55)
            {
              *(void *)uint64_t v56 = v41;
              *(void *)(v56 + 8) = v52;
              *(unsigned char *)(v56 + 16) = 0;
              *(_DWORD *)(v56 + 17) = v169;
              *(_DWORD *)(v56 + 20) = *(_DWORD *)((char *)&v169 + 3);
            }
          }
          else
          {
            uint64_t v56 = 8 * ((uint64_t)(v45 - (void)v39) >> 3);
          }
          unint64_t v43 = v56 + 24;
          if ((double *)v45 == v39) {
            goto LABEL_80;
          }
          do
          {
            __n128 v13 = *(__n128 *)(v45 - 24);
            *(void *)(v56 - 8) = *(void *)(v45 - 8);
            *(__n128 *)(v56 - 24) = v13;
            v56 -= 24;
            v45 -= 24;
          }
          while ((double *)v45 != v39);
          if (v39) {
LABEL_80:
          }
            (*(void (**)(uint64_t, double *, unint64_t))(*(void *)v162 + 40))(v162, v39, v54);
          unint64_t v39 = (double *)v56;
        }
        v41 += 48;
      }
      while ((char *)v41 != v42);
    }
  }
  unint64_t v57 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - (void)v39) >> 3));
  if ((double *)v43 == v39) {
    uint64_t v58 = 0;
  }
  else {
    uint64_t v58 = v57;
  }
  __n128 v59 = std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *,false>(v39, v43, v58, 1, v13);
  unint64_t v161 = v40;
  if ((double *)v43 != v39)
  {
    int v60 = 0;
    BOOL v61 = 0;
    int v62 = 0;
    uint64_t v63 = 0;
    char v64 = 1;
    uint64_t v65 = v39;
    double v67 = v156;
    float v66 = v157;
    double v68 = v158;
    while (1)
    {
      int v69 = **(unsigned __int8 **)v65;
      int v70 = *((unsigned __int8 *)v65 + 16);
      if (v69 == 1)
      {
        BOOL v61 = v70 != 0;
        int v71 = (v70 | v60) == 0;
        if (!v63) {
          goto LABEL_90;
        }
      }
      else
      {
        if (!*((unsigned char *)v65 + 16))
        {
          --v60;
          goto LABEL_90;
        }
        if (v61) {
          v64 |= v69 != 4;
        }
        int v71 = v61 & (v60++ == 0);
        if (!v63) {
          goto LABEL_90;
        }
      }
      if (v71)
      {
        v62 += v64 & 1;
        v59.n128_f64[0] = v65[1] - v63[1];
        if (v59.n128_f64[0] >= v12)
        {
          uint64_t v72 = *(void *)v63;
          BOOL v159 = v61;
          if (*((unsigned char *)v63 + 16))
          {
            __int16 v73 = (uint64_t *)(v72 + 24);
          }
          else
          {
            int v74 = *(unsigned __int8 *)(v72 + 2);
            long long v75 = (uint64_t *)(v72 + 32);
            __int16 v73 = (uint64_t *)(v72 + 24);
            if (v74) {
              __int16 v73 = v75;
            }
          }
          uint64_t v76 = *v66;
          uint64_t v77 = (std::__shared_weak_count *)v66[1];
          if (v77)
          {
            atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v163 = v76;
            unint64_t v164 = v77;
            atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          else
          {
            uint64_t v163 = *v66;
            unint64_t v164 = 0;
          }
          uint64_t v78 = *v73;
          uint64_t v167 = v78;
          int v168 = *(_DWORD *)(v76 + 252);
          uint64_t v79 = v68[1];
          if ((v68[2] - v79) >> 4 <= (unint64_t)(__int16)v78) {
            uint64_t v80 = 0;
          }
          else {
            uint64_t v80 = v79 + 16 * (__int16)v78;
          }
          uint64_t v165 = v68;
          uint64_t v166 = v80;
          md::LabelLineResolvedPosition::LabelLineResolvedPosition((md::LabelLineResolvedPosition *)&v169, (const md::LabelLinePosition *)&v163);
          if (v77 && !atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
            goto LABEL_114;
          }
          if (v77)
          {
LABEL_114:
            if (!atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
              std::__shared_weak_count::__release_weak(v77);
            }
          }
          if (*(unsigned char *)v68 == 3) {
            float v81 = 10.0;
          }
          else {
            float v81 = 0.0;
          }
          unint64_t v82 = v67[1];
          unint64_t v83 = v67[2];
          int v160 = v62;
          if (v82 < v83)
          {
            if (v82)
            {
              v59.n128_f64[0] = v63[1];
              uint64_t v84 = (unsigned __int8 *)*((void *)v65 + 1);
              *(_DWORD *)unint64_t v82 = 0;
              *(void *)(v82 + 8) = v169;
              unsigned __int16 v85 = v170;
              *(void *)(v82 + 16) = v170;
              if (v85) {
                atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              *(_OWORD *)(v82 + 24) = v171;
              *(void *)(v82 + 40) = v172;
              *(_DWORD *)(v82 + 48) = v173;
              *(_DWORD *)(v82 + 56) = 0;
              uint64_t v86 = v175;
              *(_OWORD *)(v82 + 64) = v174;
              *(void *)(v82 + 80) = v86;
              *(_OWORD *)(v82 + 88) = v176;
              *(_DWORD *)(v82 + 107) = *(_DWORD *)((char *)v177 + 3);
              *(_DWORD *)(v82 + 104) = v177[0];
              uint64_t v87 = v179;
              *(_OWORD *)(v82 + 112) = v178;
              *(void *)(v82 + 128) = v87;
              *(_OWORD *)(v82 + 136) = v180;
              LODWORD(v87) = v181[0];
              *(_DWORD *)(v82 + 155) = *(_DWORD *)((char *)v181 + 3);
              *(_DWORD *)(v82 + 152) = v87;
              uint64_t v88 = v182;
              *(_DWORD *)(v82 + 168) = v183;
              *(void *)(v82 + 160) = v88;
              *(_DWORD *)(v82 + 172) = v184;
              *(void *)(v82 + 176) = v59.n128_u64[0];
              *(void *)(v82 + 184) = v84;
              *(void *)(v82 + 192) = 0;
              *(void *)(v82 + 200) = 0;
              *(float *)(v82 + 208) = v81;
              *(_WORD *)(v82 + 212) = 0;
            }
            uint64_t v89 = v82 + 216;
            v67[1] = v82 + 216;
            goto LABEL_146;
          }
          unint64_t v90 = 0x84BDA12F684BDA13 * ((uint64_t)(v82 - *v67) >> 3);
          unint64_t v91 = v90 + 1;
          if (v90 + 1 > 0x12F684BDA12F684) {
            abort();
          }
          unint64_t v92 = 0x84BDA12F684BDA13 * ((uint64_t)(v83 - *v67) >> 3);
          if (2 * v92 > v91) {
            unint64_t v91 = 2 * v92;
          }
          if (v92 >= 0x97B425ED097B42) {
            uint64_t v93 = 0x12F684BDA12F684;
          }
          else {
            uint64_t v93 = v91;
          }
          if (v93)
          {
            uint64_t v94 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v67[3] + 16))(v67[3], 216 * v93, 8);
            uint64_t v95 = v94 + 216 * v90;
            uint64_t v96 = v94 + 216 * v93;
            if (v94)
            {
              v59.n128_f64[0] = v63[1];
              uint64_t v97 = (unsigned __int8 *)*((void *)v65 + 1);
              *(_DWORD *)uint64_t v95 = 0;
              unint64_t v98 = v94 + 216 * v90;
              *(void *)(v98 + 8) = v169;
              unint64_t v99 = v98 + 8;
              unint64_t v100 = v170;
              *(void *)(v99 + 8) = v170;
              if (v100) {
                atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              *(_OWORD *)(v99 + 16) = v171;
              *(void *)(v99 + 32) = v172;
              *(_DWORD *)(v99 + 40) = v173;
              unint64_t v101 = v94 + 216 * v90;
              *(_DWORD *)(v101 + 56) = 0;
              long long v102 = v174;
              *(void *)(v101 + 80) = v175;
              *(_OWORD *)(v101 + 64) = v102;
              *(_OWORD *)(v101 + 88) = v176;
              int v103 = v177[0];
              *(_DWORD *)(v101 + 107) = *(_DWORD *)((char *)v177 + 3);
              *(_DWORD *)(v101 + 104) = v103;
              long long v104 = v178;
              *(void *)(v101 + 128) = v179;
              *(_OWORD *)(v101 + 112) = v104;
              *(_OWORD *)(v101 + 136) = v180;
              int v105 = v181[0];
              *(_DWORD *)(v101 + 155) = *(_DWORD *)((char *)v181 + 3);
              *(_DWORD *)(v101 + 152) = v105;
              uint64_t v106 = v182;
              *(_DWORD *)(v101 + 168) = v183;
              *(void *)(v101 + 160) = v106;
              *(_DWORD *)(v101 + 172) = v184;
              *(void *)(v101 + 176) = v59.n128_u64[0];
              *(void *)(v101 + 184) = v97;
              *(void *)(v101 + 192) = 0;
              *(void *)(v101 + 200) = 0;
              *(float *)(v101 + 208) = v81;
              *(_WORD *)(v101 + 212) = 0;
            }
          }
          else
          {
            uint64_t v95 = 216 * v90;
            uint64_t v96 = 0;
          }
          uint64_t v89 = v95 + 216;
          uint64_t v107 = (int *)*v67;
          uint64_t v108 = (int *)v67[1];
          if (v108 == (int *)*v67)
          {
            uint64_t *v67 = v95;
            v67[1] = v89;
            uint64_t v120 = v67[2];
            v67[2] = v96;
            if (!v108) {
              goto LABEL_146;
            }
          }
          else
          {
            uint64_t v109 = 0;
            do
            {
              uint64_t v116 = v95 + v109 * 4;
              int v117 = &v108[v109];
              *(_DWORD *)(v116 - 216) = v108[v109 - 54];
              *(void *)(v116 - 208) = *(void *)&v108[v109 - 52];
              uint64_t v118 = *(void *)&v108[v109 - 50];
              *(void *)(v116 - 200) = v118;
              if (v118) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v118 + 8), 1uLL, memory_order_relaxed);
              }
              *(_OWORD *)(v116 - 192) = *((_OWORD *)v117 - 12);
              *(void *)(v116 - 176) = *((void *)v117 - 22);
              *(_DWORD *)(v116 - 168) = *(v117 - 42);
              *(_DWORD *)(v116 - 160) = 0;
              long long v110 = *(_OWORD *)(v117 - 38);
              *(void *)(v116 - 136) = *((void *)v117 - 17);
              *(_OWORD *)(v116 - 152) = v110;
              *(_OWORD *)(v116 - 128) = *((_OWORD *)v117 - 8);
              int v111 = *(v117 - 28);
              *(_DWORD *)(v116 - 109) = *(int *)((char *)v117 - 109);
              *(_DWORD *)(v116 - 112) = v111;
              long long v112 = *(_OWORD *)(v117 - 26);
              *(void *)(v116 - 88) = *((void *)v117 - 11);
              *(_OWORD *)(v116 - 104) = v112;
              *(_OWORD *)(v116 - 80) = *((_OWORD *)v117 - 5);
              int v113 = *(v117 - 16);
              *(_DWORD *)(v116 - 61) = *(int *)((char *)v117 - 61);
              *(_DWORD *)(v116 - 64) = v113;
              uint64_t v114 = *((void *)v117 - 7);
              *(_DWORD *)(v116 - 48) = *(v117 - 12);
              *(void *)(v116 - 56) = v114;
              *(_DWORD *)(v116 - 44) = *(v117 - 11);
              __n128 v59 = *(__n128 *)(v117 - 10);
              long long v115 = *(_OWORD *)(v117 - 6);
              *(void *)(v116 - 10) = *(void *)((char *)v117 - 10);
              *(_OWORD *)(v116 - 24) = v115;
              *(__n128 *)(v116 - 40) = v59;
              v109 -= 54;
            }
            while (&v108[v109] != v107);
            int64_t v119 = (int *)*v67;
            uint64_t v108 = (int *)v67[1];
            uint64_t *v67 = v95 + v109 * 4;
            v67[1] = v89;
            uint64_t v120 = v67[2];
            v67[2] = v96;
            if (v108 == v119)
            {
              float v66 = v157;
              if (v108) {
                goto LABEL_145;
              }
LABEL_146:
              v67[1] = v89;
              unsigned __int8 v121 = *(unsigned char *)(*(void *)v65 + 40);
              *(unsigned char *)(v89 - 4) = *(unsigned char *)(*(void *)v63 + 40);
              *(unsigned char *)(v89 - 3) = v121;
              *(_DWORD *)(v89 - 216) = v160 - 1;
              int v122 = v170;
              if (v170 && !atomic_fetch_add(&v170->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                std::__shared_weak_count::__release_weak(v122);
              }
              char v64 = 0;
              double v68 = v158;
              int v62 = v160;
              BOOL v61 = v159;
              goto LABEL_90;
            }
            do
            {
              char v123 = (std::__shared_weak_count *)*((void *)v108 - 25);
              if (v123 && !atomic_fetch_add(&v123->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                std::__shared_weak_count::__release_weak(v123);
              }
              v108 -= 54;
            }
            while (v108 != v119);
            uint64_t v108 = v119;
            double v67 = v156;
            float v66 = v157;
            if (!v108) {
              goto LABEL_146;
            }
          }
LABEL_145:
          (*(void (**)(uint64_t, int *, uint64_t))(*(void *)v67[3] + 40))(v67[3], v108, v120 - (void)v108);
          goto LABEL_146;
        }
        char v64 = 0;
      }
LABEL_90:
      uint64_t v63 = v65;
      v65 += 3;
      if (v65 == (double *)v43) {
        goto LABEL_159;
      }
    }
  }
  int v62 = 0;
  double v67 = v156;
LABEL_159:
  uint64_t v124 = *v67;
  unsigned __int8 v125 = (int *)v67[1];
  if ((int *)*v67 != v125)
  {
    long long v127 = *v155;
    unint64_t v126 = v155[1];
    unint64_t v128 = v126 - *v155;
    unint64_t v129 = v62 - v128;
    if (v62 <= v128)
    {
      if (v62 < v128) {
        v155[1] = &v127[v62];
      }
    }
    else
    {
      uint64_t v130 = v155[2];
      if (v129 <= v130 - v126)
      {
        uint64_t v138 = &v126[v129];
        uint64_t v139 = 16 * v62 - 16 * v128;
        do
        {
          if (v126)
          {
            v126->n128_u64[0] = 0;
            v126->n128_u64[1] = 0;
          }
          ++v126;
          v139 -= 16;
        }
        while (v139);
        v155[1] = v138;
      }
      else
      {
        if (v62 < 0) {
          abort();
        }
        uint64_t v131 = (char *)v130 - (char *)v127;
        uint64_t v132 = v131 >> 3;
        if (v131 >> 3 <= (unint64_t)v62) {
          uint64_t v132 = v62;
        }
        if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFF0) {
          uint64_t v133 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v133 = v132;
        }
        uint64_t v134 = (*(uint64_t (**)(__n128 *, uint64_t, uint64_t, __n128))(v155[3]->n128_u64[0] + 16))(v155[3], 16 * v133, 8, v59);
        uint64_t v135 = (__n128 *)(v134 + 16 * v128);
        uint64_t v136 = 16 * v62 - 16 * v128;
        uint64_t v137 = v135;
        do
        {
          if (v137)
          {
            v137->n128_u64[0] = 0;
            v137->n128_u64[1] = 0;
          }
          ++v137;
          v136 -= 16;
        }
        while (v136);
        uint64_t v141 = *v155;
        float v140 = v155[1];
        if (v140 != *v155)
        {
          do
          {
            __n128 v59 = v140[-1];
            v135[-1] = v59;
            --v135;
            --v140;
          }
          while (v140 != v141);
          float v140 = *v155;
        }
        uint64_t *v155 = v135;
        v155[1] = (__n128 *)(v134 + 16 * v62);
        unint64_t v142 = v155[2];
        v155[2] = (__n128 *)(v134 + 16 * v133);
        if (v140) {
          (*(void (**)(__n128 *, __n128 *, int64_t))(v155[3]->n128_u64[0] + 40))(v155[3], v140, (char *)v142 - (char *)v140);
        }
      }
      uint64_t v124 = *v67;
      unsigned __int8 v125 = (int *)v67[1];
    }
    if ((int *)v124 != v125)
    {
      uint64_t v143 = 0;
      uint64_t v144 = 0;
      uint64_t v145 = *v155;
      int v146 = -1;
      uint64_t v147 = (int *)v124;
      do
      {
        __int16 v148 = v147;
        int v149 = *v147;
        if (v149 != v146)
        {
          if (v144)
          {
            unint64_t v150 = *((void *)v144 + 22);
            uint64_t v151 = &v145[v146];
            v151->n128_u64[0] = v150;
            v151->n128_u64[1] = *((void *)v143 + 23);
          }
          uint64_t v144 = v148;
          int v146 = v149;
        }
        uint64_t v147 = v148 + 54;
        uint64_t v143 = v148;
      }
      while (v148 + 54 != v125);
      if (v144)
      {
        uint64_t v152 = &(*v155)[v146];
        v152->n128_u64[0] = *((void *)v144 + 22);
        v152->n128_u64[1] = *((void *)v148 + 23);
      }
      double v153 = *(double *)(v124 + 176);
      uint64_t v154 = v124;
      do
      {
        if (*(unsigned char *)(v154 + 212)) {
          double v153 = *(double *)(v154 + 176);
        }
        *(double *)(v154 + 192) = *(double *)(v154 + 176) - v153;
        if (*(unsigned char *)(v154 + 213)) {
          double v153 = *(double *)(v154 + 184);
        }
        v154 += 216;
      }
      while ((int *)v154 != v125);
      v59.n128_u64[0] = *((void *)v125 - 4);
      do
      {
        if (*((unsigned char *)v125 - 3)) {
          v59.n128_u64[0] = *((void *)v125 - 4);
        }
        *((double *)v125 - 2) = v59.n128_f64[0] - *((double *)v125 - 4);
        if (*((unsigned char *)v125 - 4)) {
          v59.n128_u64[0] = *((void *)v125 - 5);
        }
        v125 -= 54;
      }
      while (v125 != (int *)v124);
    }
  }
  if (v39) {
    (*(void (**)(uint64_t, double *, unint64_t, __n128))(*(void *)v162 + 40))(v162, v39, v161 - (void)v39, v59);
  }
  if (v185)
  {
    unint64_t v186 = v185;
    (*(void (**)(uint64_t, char *, unint64_t, __n128))(*(void *)v188 + 40))(v188, v185, v187 - (void)v185, v59);
  }
}

void sub_1A1893B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (v33)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a24 + 40))(a24, v33, a23 - v33);
    uint64_t v36 = *(void *)(v34 - 152);
    if (!v36) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v36 = *(void *)(v34 - 152);
    if (!v36) {
      goto LABEL_3;
    }
  }
  *(void *)(v34 - 144) = v36;
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v34 - 128) + 40))(*(void *)(v34 - 128), v36, *(void *)(v34 - 136) - v36);
  _Unwind_Resume(exception_object);
}

md::LabelLineResolvedPosition *md::LabelLineResolvedPosition::LabelLineResolvedPosition(md::LabelLineResolvedPosition *this, const md::LabelLinePosition *a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  *(void *)this = *(void *)a2;
  *((void *)this + 1) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    uint64_t v3 = *(void *)this;
  }
  long long v5 = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 1) = v5;
  uint64_t v6 = *((void *)a2 + 4);
  *((void *)this + 4) = v6;
  int v7 = *((_DWORD *)a2 + 10);
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 10) = v7;
  *((_DWORD *)this + 12) = 0;
  *((_DWORD *)this + 24) = 2139095039;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((void *)this + 11) = 0;
  *((_WORD *)this + 50) = 0;
  *((unsigned char *)this + 102) = 0;
  *((_DWORD *)this + 36) = 2139095039;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((void *)this + 17) = 0;
  *((_WORD *)this + 74) = 0;
  *((unsigned char *)this + 150) = 0;
  *((_DWORD *)this + 40) = 0;
  *((void *)this + 19) = 0;
  if (v3 && v7 == *(_DWORD *)(v3 + 252))
  {
    if (*((void *)&v5 + 1) && (v6 & 0x80000000) == 0)
    {
      *((unsigned char *)this + 164) = *(unsigned char *)(**((void **)&v5 + 1) + 34);
      *(_WORD *)((char *)this + 165) = 0;
      unsigned __int8 v8 = (char *)this + 166;
      *((unsigned char *)this + 167) = 0;
      goto LABEL_13;
    }
    *((_DWORD *)this + 41) = 0;
    unsigned __int8 v8 = (char *)this + 166;
  }
  else
  {
    unsigned __int8 v8 = (char *)this + 166;
    *((_DWORD *)this + 41) = 0;
  }
  md::LabelLineResolvedPosition::moveOntoPathForZoom(this, 0, *(double *)&v5);
  if (!*(void *)this
    || *((_DWORD *)this + 10) != *(_DWORD *)(*(void *)this + 252)
    || !*((void *)this + 3)
    || *((__int16 *)this + 17) < 0)
  {
LABEL_29:
    *unsigned __int8 v8 = 0;
    return this;
  }
LABEL_13:
  *((unsigned char *)this + 166) = md::LabelLinePosition::getLabelPoint(this, (md::LabelLineResolvedPosition *)((char *)this + 104));
  if (!*(void *)this
    || *((_DWORD *)this + 10) != *(_DWORD *)(*(void *)this + 252)
    || !*((void *)this + 3)
    || *((__int16 *)this + 17) < 0)
  {
    md::LabelLineResolvedPosition::moveOntoPathForZoom(this, *((unsigned __int8 *)this + 164), v9);
  }
  LODWORD(v9) = *((_DWORD *)this + 9);
  if (*(float *)&v9 >= 0.0)
  {
    if (!*(void *)this
      || *((_DWORD *)this + 10) != *(_DWORD *)(*(void *)this + 252)
      || !*((void *)this + 3)
      || *((__int16 *)this + 17) < 0)
    {
      md::LabelLineResolvedPosition::moveOntoPathForZoom(this, *((unsigned __int8 *)this + 164), v9);
      LODWORD(v9) = *((_DWORD *)this + 9);
    }
    BOOL v10 = *(float *)&v9 > 1.0;
  }
  else
  {
    BOOL v10 = 1;
  }
  *((unsigned char *)this + 167) = v10;
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)this + 104);
  *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)this + 120);
  *((void *)this + 11) = *((void *)this + 17);
  *((_DWORD *)this + 24) = *((_DWORD *)this + 36);
  *(_DWORD *)((char *)this + 99) = *(_DWORD *)((char *)this + 147);
  double v11 = (md::LabelPoint *)(*(uint64_t (**)(void, void))(***((void ***)this + 3) + 24))(**((void **)this + 3), *((__int16 *)this + 17));
  int v19 = -1;
  if (!md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this, 1, (uint64_t)&v19)) {
    goto LABEL_29;
  }
  uint64_t v12 = *(void *)(*(void *)(*((void *)this + 2) + 8) + 16 * (__int16)v19);
  __n128 v13 = (const md::LabelPoint *)(*(uint64_t (**)(uint64_t, void))(*(void *)v12 + 24))(v12, SHIWORD(v19));
  md::LabelPoint::vectorToPoint(v11, v13, *(unsigned __int8 *)(*(void *)this + 290));
  double v17 = 1.0 / sqrt(v14 * v14 + v15 * v15 + v16 * v16);
  *(float *)&double v14 = v17 * v14;
  *(float *)&double v15 = v17 * v15;
  *(float *)&double v16 = v17 * v16;
  *((_DWORD *)this + 38) = LODWORD(v14);
  *((_DWORD *)this + 39) = LODWORD(v15);
  *((_DWORD *)this + 40) = LODWORD(v16);
  return this;
}

void sub_1A1893EE4(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t md::LabelLinePosition::getLabelPoint(md::LabelLinePosition *this, md::LabelPoint *a2)
{
  if (*(void *)this)
  {
    if (*((_DWORD *)this + 10) == *(_DWORD *)(*(void *)this + 252))
    {
      uint64_t v3 = *((void *)this + 3);
      if (v3)
      {
        int v4 = *((__int16 *)this + 17);
        if ((v4 & 0x80000000) == 0
          && (*(uint64_t (**)(void))(**(void **)v3 + 16))() > (unint64_t)(unsigned __int16)v4)
        {
          uint64_t v6 = (*(uint64_t (**)(void, void))(***((void ***)this + 3) + 24))(**((void **)this + 3), *((__int16 *)this + 17));
          int v7 = (const md::LabelPoint *)v6;
          if (*((float *)this + 9) == 0.0)
          {
            *(void *)a2 = *(void *)v6;
            *((void *)a2 + 1) = *(void *)(v6 + 8);
            *((void *)a2 + 2) = *(void *)(v6 + 16);
            *((void *)a2 + 3) = *(void *)(v6 + 24);
            *((void *)a2 + 4) = *(void *)(v6 + 32);
            int v12 = *(_DWORD *)(v6 + 40);
            *(_DWORD *)((char *)a2 + 43) = *(_DWORD *)(v6 + 43);
            *((_DWORD *)a2 + 10) = v12;
            return 1;
          }
          LODWORD(v13[0]) = -1;
          if (md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)this, 1, (uint64_t)v13))
          {
            uint64_t v8 = *(void *)(*(void *)(*((void *)this + 2) + 8) + 16 * SLOWORD(v13[0]));
            uint64_t v9 = (*(uint64_t (**)(uint64_t, void))(*(void *)v8 + 24))(v8, SWORD1(v13[0]));
            md::LabelPoint::lerped((md::LabelPoint *)v13, v7, *((float *)this + 9), v9);
            long long v10 = v13[1];
            *(_OWORD *)a2 = v13[0];
            *((_OWORD *)a2 + 1) = v10;
            *((void *)a2 + 4) = v14;
            *((_DWORD *)a2 + 10) = v15[0];
            *(_DWORD *)((char *)a2 + 43) = *(_DWORD *)((char *)v15 + 3);
            return 1;
          }
        }
      }
    }
  }
  return 0;
}

__n128 std::__introsort<std::_ClassicAlgPolicy,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::$_0 &,md::LineLabelPlacer::populateBlocks(int,md::LabelLine *,std::vector<md::LabelLineBlock,geo::StdAllocator<md::LabelLineBlock,mdm::Allocator>> &,std::vector<md::LabelLineBlockGroup,geo::StdAllocator<md::LabelLineBlockGroup,mdm::Allocator>> &)::AttributeInfo *,false>(double *a1, unint64_t a2, uint64_t a3, char a4, __n128 result)
{
void md::LabelLine::attributes(unint64_t *a1, void *a2, void *a3, unsigned int a4)
{
  int v7 = *(unsigned __int8 *)(*a3 + 290);
  *a1 = 0;
  a1[1] = 0;
  unint64_t v8 = a2[12];
  a1[2] = 0;
  a1[3] = v8;
  uint64_t v9 = (long long *)a2[9];
  long long v10 = (long long *)a2[10];
  if (v10 == v9)
  {
    unint64_t v11 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v10 - v9) > 0x555555555555555) {
      abort();
    }
    unint64_t v11 = (*(uint64_t (**)(unint64_t))(*(void *)v8 + 16))(v8);
    *a1 = v11;
    a1[1] = v11;
    a1[2] = v11 + 16 * (v10 - v9);
    do
    {
      if (v11)
      {
        long long v12 = *v9;
        long long v13 = v9[2];
        *(_OWORD *)(v11 + 16) = v9[1];
        *(_OWORD *)(v11 + 32) = v13;
        *(_OWORD *)unint64_t v11 = v12;
      }
      v9 += 3;
      v11 += 48;
    }
    while (v9 != v10);
    a1[1] = v11;
  }
  unint64_t v14 = 0;
  uint64_t v66 = 0;
  long long v64 = 0u;
  long long v65 = 0u;
  *(_DWORD *)double v67 = 2139095039;
  *(_WORD *)&uint64_t v67[4] = 0;
  v67[6] = 0;
  if (a2[2] == a2[1]) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = (unsigned char *)a2[1];
  }
  if (!v15[8]) {
    unint64_t v14 = ((*(unsigned int (**)(void))(**(void **)v15 + 16))() << 16) - 0x10000;
  }
  uint64_t v17 = *a3;
  uint64_t v16 = (std::__shared_weak_count *)a3[1];
  uint64_t v58 = v17;
  double v59 = v16;
  uint64_t v18 = v17;
  if (v16)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v18 = *a3;
  }
  int v19 = *(_DWORD *)(v18 + 252);
  int v63 = v19;
  if (a2[2] == a2[1]) {
    __n128 v20 = 0;
  }
  else {
    __n128 v20 = (void *)a2[1];
  }
  int v60 = a2;
  BOOL v61 = v20;
  unint64_t v62 = v14;
  if (v17
    && v19 == *(_DWORD *)(v17 + 252)
    && v20
    && !(v14 >> 31)
    && (*(uint64_t (**)(void))(*(void *)*v20 + 16))() > v14 >> 16)
  {
    uint64_t v21 = (*(uint64_t (**)(void, uint64_t))(*(void *)*v20 + 24))(*v20, (uint64_t)(int)v14 >> 16);
    long long v22 = *(_OWORD *)(v21 + 16);
    long long v64 = *(_OWORD *)v21;
    long long v65 = v22;
    uint64_t v66 = *(void *)(v21 + 32);
    int v23 = *(_DWORD *)(v21 + 43);
    *(_DWORD *)double v67 = *(_DWORD *)(v21 + 40);
    *(_DWORD *)&v67[3] = v23;
  }
  double v24 = 0.0;
  while (v17)
  {
    int v28 = v63;
    if (v63 != *(_DWORD *)(v17 + 252) || v20 == 0) {
      break;
    }
    if (SWORD1(v62) < 0) {
      break;
    }
    unint64_t v30 = WORD1(v62);
    if ((*(uint64_t (**)(void))(*(void *)*v20 + 16))() <= v30) {
      break;
    }
    uint64_t v31 = (__int16)v30;
    uint64_t v32 = (const md::LabelPoint *)(*(uint64_t (**)(void, void))(*(void *)*v20 + 24))(*v20, (__int16)v30);
    md::LabelPoint::vectorToPoint((md::LabelPoint *)&v64, v32, v7 != 0);
    double v24 = sqrt(v33 * v33 + v34 * v34 + v35 * v35) + v24;
    if (v28 == *(_DWORD *)(v17 + 252)
      && (*(uint64_t (**)(void))(*(void *)*v20 + 16))() > v30
      && *(unsigned __int8 *)((*(uint64_t (**)(void, void))(*(void *)*v20 + 32))(*v20, (__int16)v30)
                            + 2) > a4)
    {
      int v36 = v62;
      int v37 = HIDWORD(v62);
      unint64_t v38 = a1[2];
      if (v11 >= v38)
      {
        unint64_t v40 = *a1;
        unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *a1) >> 4);
        unint64_t v42 = v41 + 1;
        if (v41 + 1 > 0x555555555555555) {
          abort();
        }
        if (0x5555555555555556 * ((uint64_t)(v38 - v40) >> 4) > v42) {
          unint64_t v42 = 0x5555555555555556 * ((uint64_t)(v38 - v40) >> 4);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - v40) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
          uint64_t v43 = 0x555555555555555;
        }
        else {
          uint64_t v43 = v42;
        }
        if (v43)
        {
          uint64_t v44 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], 48 * v43, 8);
          uint64_t v45 = v44 + 48 * v41;
          uint64_t v46 = v44 + 48 * v43;
          if (v44)
          {
            *(_WORD *)uint64_t v45 = 260;
            *(unsigned char *)(v45 + 2) = 0;
            *(double *)(v45 + 8) = v24;
            *(double *)(v45 + 16) = v24;
            *(_DWORD *)(v45 + 24) = v36;
            *(_DWORD *)(v45 + 28) = v37;
            *(void *)(v45 + 32) = 0xFFFFFFFFLL;
            *(unsigned char *)(v45 + 40) = 1;
          }
        }
        else
        {
          uint64_t v46 = 0;
          uint64_t v45 = 16 * ((uint64_t)(v11 - *a1) >> 4);
        }
        uint64_t v47 = v45;
        if (v11 != v40)
        {
          do
          {
            long long v48 = *(_OWORD *)(v11 - 48);
            long long v49 = *(_OWORD *)(v11 - 16);
            *(_OWORD *)(v47 - 32) = *(_OWORD *)(v11 - 32);
            *(_OWORD *)(v47 - 16) = v49;
            *(_OWORD *)(v47 - 48) = v48;
            v47 -= 48;
            v11 -= 48;
          }
          while (v11 != v40);
          unint64_t v11 = v40;
        }
        unint64_t v39 = v45 + 48;
        *a1 = v47;
        a1[1] = v45 + 48;
        a1[2] = v46;
        if (v11) {
          (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)a1[3] + 40))(a1[3], v11, v38 - v11);
        }
      }
      else
      {
        if (v11)
        {
          *(_WORD *)unint64_t v11 = 260;
          *(unsigned char *)(v11 + 2) = 0;
          *(unsigned char *)(v11 + 7) = v57;
          *(_DWORD *)(v11 + 3) = v56;
          *(double *)(v11 + 8) = v24;
          *(double *)(v11 + 16) = v24;
          *(_DWORD *)(v11 + 24) = v36;
          *(_DWORD *)(v11 + 28) = v37;
          *(void *)(v11 + 32) = 0xFFFFFFFFLL;
          *(unsigned char *)(v11 + 40) = 1;
          *(_DWORD *)(v11 + 44) = *(_DWORD *)&v55[3];
          *(_DWORD *)(v11 + 41) = *(_DWORD *)v55;
        }
        unint64_t v39 = v11 + 48;
      }
      a1[1] = v39;
      __n128 v20 = v61;
      unint64_t v11 = v39;
      uint64_t v31 = SWORD1(v62);
    }
    uint64_t v50 = (*(uint64_t (**)(void, uint64_t))(*(void *)*v20 + 24))(*v20, v31);
    long long v51 = *(_OWORD *)(v50 + 16);
    long long v64 = *(_OWORD *)v50;
    long long v65 = v51;
    uint64_t v66 = *(void *)(v50 + 32);
    int v52 = *(_DWORD *)(v50 + 43);
    *(_DWORD *)double v67 = *(_DWORD *)(v50 + 40);
    *(_DWORD *)&v67[3] = v52;
    if (md::LabelLinePosition::getPointCoordinateAtOffset((uint64_t)&v58, 1, (uint64_t)&v62))
    {
      uint64_t v25 = v60[1];
      uint64_t v26 = v60[2] - v25;
      int v27 = (void *)(v25 + 16 * (__int16)v62);
      if ((__int16)v62 >= (unint64_t)(v26 >> 4)) {
        __n128 v20 = 0;
      }
      else {
        __n128 v20 = v27;
      }
    }
    else
    {
      __n128 v20 = 0;
    }
    BOOL v61 = v20;
    uint64_t v17 = v58;
  }
  long long v53 = v59;
  if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
  }
}

void sub_1A1895530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  gss::FeatureAttributeSet::~FeatureAttributeSet(v3);
  _Unwind_Resume(a1);
}

uint64_t md::FixedLabelLineSegment<4ul>::vertexInfo(uint64_t a1, uint64_t a2)
{
  return a1 + 4 * a2 + 240;
}

{
  return a1 + 4 * a2 + 240;
}

uint64_t md::FixedLabelLineSegment<5ul>::vertexInfo(uint64_t a1, uint64_t a2)
{
  return a1 + 4 * a2 + 288;
}

{
  return a1 + 4 * a2 + 288;
}

void md::LabelPoint::lerped(md::LabelPoint *this, const md::LabelPoint *a2, double a3, uint64_t a4)
{
  float v8 = *((float *)a2 + 10);
  float v9 = 3.4028e38;
  if (v8 != 3.4028e38)
  {
    float v10 = *(float *)(a4 + 40);
    float v11 = v8 + (float)(v10 - v8) * a3;
    if (v10 == 3.4028e38) {
      float v9 = 3.4028e38;
    }
    else {
      float v9 = v11;
    }
  }
  *((void *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (*((unsigned char *)a2 + 45)) {
    BOOL v12 = *(unsigned char *)(a4 + 45) == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12)
  {
    if (*(unsigned char *)(a4 + 44))
    {
      double v14 = *(double *)a4;
      double v13 = *(double *)(a4 + 8);
      double v15 = *(double *)(a4 + 16);
    }
    else
    {
      long double v19 = *(double *)(a4 + 24) * 6.28318531;
      double v30 = a3;
      long double v20 = exp(*(double *)(a4 + 32) * 6.28318531 + -3.14159265);
      double v21 = atan(v20) * 2.0 + -1.57079633;
      long double v22 = fmod(v19, 6.28318531);
      double v23 = fmod(v22 + 6.28318531, 6.28318531) + -3.14159265;
      __double2 v24 = __sincos_stret(v21);
      double v25 = 6378137.0 / sqrt(v24.__sinval * v24.__sinval * -0.00669437999 + 1.0);
      __double2 v26 = __sincos_stret(v23);
      a3 = v30;
      double v14 = v25 * v24.__cosval * v26.__cosval;
      double v13 = v25 * v24.__cosval * v26.__sinval;
      double v15 = v24.__sinval * 0.99330562 * v25;
      *(double *)a4 = v14;
      *(double *)(a4 + 8) = v13;
      *(double *)(a4 + 16) = v15;
      *(unsigned char *)(a4 + 44) = 1;
    }
    char v18 = 0;
    double v27 = *((double *)a2 + 1) + (v13 - *((double *)a2 + 1)) * a3;
    double v28 = *((double *)a2 + 2) + (v15 - *((double *)a2 + 2)) * a3;
    *(double *)this = *(double *)a2 + (v14 - *(double *)a2) * a3;
    *((double *)this + 1) = v27;
    *((double *)this + 2) = v28;
    *((void *)this + 3) = 0;
    *((void *)this + 4) = 0;
    char v17 = 1;
  }
  else
  {
    double v29 = a3;
    uint64_t v16 = (float64x2_t *)md::LabelPoint::mercatorPoint((md::LabelPoint *)a4);
    char v17 = 0;
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
    *(void *)this = 0;
    *(float64x2_t *)((char *)this + 24) = vmlaq_n_f64(*(float64x2_t *)((char *)a2 + 24), vsubq_f64(*v16, *(float64x2_t *)((char *)a2 + 24)), v29);
    char v18 = 1;
  }
  *((float *)this + 10) = v9;
  *((unsigned char *)this + 44) = v17;
  *((unsigned char *)this + 45) = v18;
  *((unsigned char *)this + 46) = 1;
}

uint64_t md::RoadHiker::pixelForPoint(uint64_t a1, md::LabelPoint *this, float32x2_t *a3, float *a4)
{
  float v8 = *((float *)this + 10);
  if (v8 == 3.4028e38) {
    float v8 = 0.0;
  }
  float v9 = v8 * *(float *)(a1 + 52);
  double v10 = v9;
  if (!*(unsigned char *)(a1 + 13))
  {
    if (*(unsigned char *)(a1 + 65))
    {
      if (*((unsigned char *)this + 44))
      {
        double v14 = *(double *)this;
        double v15 = *((double *)this + 1);
        double v16 = *((double *)this + 2);
        if (v9 == 0.0) {
          goto LABEL_25;
        }
        goto LABEL_24;
      }
      long double v26 = *((double *)this + 3) * 6.28318531;
      long double v27 = exp(*((double *)this + 4) * 6.28318531 + -3.14159265);
      double v28 = atan(v27) * 2.0 + -1.57079633;
      long double v29 = fmod(v26, 6.28318531);
      double v30 = fmod(v29 + 6.28318531, 6.28318531) + -3.14159265;
      __double2 v31 = __sincos_stret(v28);
      double v32 = 6378137.0 / sqrt(v31.__sinval * v31.__sinval * -0.00669437999 + 1.0);
      __double2 v33 = __sincos_stret(v30);
      double v14 = v32 * v31.__cosval * v33.__cosval;
      double v15 = v32 * v31.__cosval * v33.__sinval;
      double v16 = v31.__sinval * 0.99330562 * v32;
      *(double *)this = v14;
      *((double *)this + 1) = v15;
      *((double *)this + 2) = v16;
      *((unsigned char *)this + 44) = 1;
      if (v9 != 0.0)
      {
LABEL_24:
        double v53 = v16;
        double v48 = v15;
        double v14 = v14 + md::LabelPoint::geocentricNormal(this) * v10;
        double v15 = v48 + v34 * v10;
        double v16 = v53 + v35 * v10;
      }
    }
    else
    {
      double v52 = *(double *)(a1 + 56) * v10;
      double v50 = *(double *)md::LabelPoint::mercatorPoint(this);
      uint64_t v25 = md::LabelPoint::mercatorPoint(this);
      double v14 = v50;
      double v16 = v52;
      double v15 = *(double *)(v25 + 8);
      double v10 = v52;
    }
LABEL_25:
    double v36 = *(double *)(a1 + 152);
    double v37 = *(double *)(a1 + 184);
    if (a4)
    {
      float v38 = v37 + v36 * v10;
      *a4 = v38;
    }
    double v23 = 1.0
        / (*(double *)(a1 + 192) + *(double *)(a1 + 96) * v14 + *(double *)(a1 + 128) * v15 + *(double *)(a1 + 160)
                                                                                            * v16);
    float v22 = v23 * (v37 + *(double *)(a1 + 88) * v14 + *(double *)(a1 + 120) * v15 + v36 * v16);
    float64x2_t v20 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(a1 + 168), *(float64x2_t *)(a1 + 72), v14), *(float64x2_t *)(a1 + 104), v15), *(float64x2_t *)(a1 + 136), v16);
    goto LABEL_28;
  }
  float v11 = (float64x2_t *)(a1 + 72);
  if (*(unsigned char *)(a1 + 65))
  {
    if (!*(unsigned char *)(a1 + 64))
    {
      if (*((unsigned char *)this + 44))
      {
        double v12 = *((double *)this + 1);
        double v51 = *(double *)this;
        double v13 = *((double *)this + 2);
        if (v9 == 0.0) {
          goto LABEL_15;
        }
      }
      else
      {
        long double v39 = *((double *)this + 3) * 6.28318531;
        long double v40 = exp(*((double *)this + 4) * 6.28318531 + -3.14159265);
        double v41 = atan(v40) * 2.0 + -1.57079633;
        long double v42 = fmod(v39, 6.28318531);
        double v43 = fmod(v42 + 6.28318531, 6.28318531) + -3.14159265;
        __double2 v44 = __sincos_stret(v41);
        double v45 = 6378137.0 / sqrt(v44.__sinval * v44.__sinval * -0.00669437999 + 1.0);
        __double2 v46 = __sincos_stret(v43);
        double v12 = v45 * v44.__cosval * v46.__sinval;
        double v13 = v44.__sinval * 0.99330562 * v45;
        double v51 = v45 * v44.__cosval * v46.__cosval;
        *(double *)this = v51;
        *((double *)this + 1) = v12;
        *((double *)this + 2) = v13;
        *((unsigned char *)this + 44) = 1;
        if (v9 == 0.0) {
          goto LABEL_15;
        }
      }
      double v47 = v13;
      double v49 = v12;
      double v51 = v51 + md::LabelPoint::geocentricNormal(this) * v10;
      double v12 = v49 + v17 * v10;
      double v13 = v47 + v18 * v10;
      goto LABEL_15;
    }
    double v51 = *(double *)md::LabelPoint::mercatorPoint(this);
    double v12 = *(double *)(md::LabelPoint::mercatorPoint(this) + 8);
    float v11 = (float64x2_t *)(a1 + 200);
    double v13 = 0.0;
  }
  else
  {
    double v51 = *(double *)md::LabelPoint::mercatorPoint(this);
    double v12 = *(double *)(md::LabelPoint::mercatorPoint(this) + 8);
    double v13 = *(double *)(a1 + 56) * v10;
  }
LABEL_15:
  if (a4)
  {
    float v19 = v11[7].f64[0] + v11[5].f64[0] * v10;
    *a4 = v19;
  }
  float64x2_t v20 = vmlaq_n_f64(vmlaq_n_f64(v11[6], *v11, v51), v11[2], v12);
  double v21 = v11[7].f64[1] + v11[1].f64[1] * v51 + v11[3].f64[1] * v12;
  if (v13 != 0.0)
  {
    float64x2_t v20 = vmlaq_n_f64(v20, v11[4], v13);
    double v21 = v21 + v11[5].f64[1] * v13;
  }
  if (v21 <= 2.22044605e-16) {
    return 0;
  }
  float v22 = 0.0;
  double v23 = 1.0 / v21;
LABEL_28:
  *a3 = vcvt_f32_f64(vmulq_n_f64(v20, v23));
  a3[1].f32[0] = v22;
  return 1;
}

uint64_t ___ZN3geo9TaskQueue11barrierSyncENSt3__18functionIFvvEEE_block_invoke_2_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
    return v2();
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    return md::DaVinciHikingRenderLayer::layout(v4, v5);
  }
}

void *md::DaVinciHikingRenderLayer::layout(md::DaVinciHikingRenderLayer *this, const md::LayoutContext *a2)
{
  uint64_t v173 = *MEMORY[0x1E4F143B8];
  v169[0] = &unk_1EF576B48;
  v169[1] = a2;
  v167[0] = &unk_1EF576B90;
  v167[1] = a2;
  int v168 = v167;
  uint64_t v172 = v171;
  long long v170 = v169;
  v171[0] = &unk_1EF576B90;
  v171[1] = a2;
  std::__function::__func<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v169);
  if (v168 == v167)
  {
    (*(void (**)(void *))(v167[0] + 32))(v167);
  }
  else if (v168)
  {
    (*(void (**)(void *))(*v168 + 40))(v168);
  }
  if (v170 == v169)
  {
    (*(void (**)(void *))(v169[0] + 32))(v169);
  }
  else if (v170)
  {
    (*(void (**)(void *))(*v170 + 40))(v170);
  }
  uint64_t v3 = (uint64_t *)*((void *)a2 + 1);
  int8x8_t v4 = (int8x8_t)v3[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0x92F3DC114CADB853 % *(void *)&v4;
    if (*(void *)&v4 > 0x92F3DC114CADB853) {
      unint64_t v6 = 0x92F3DC114CADB853;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & 0x92F3DC114CADB853;
  }
  uint64_t v7 = *v3;
  float v8 = *(void **)(v7 + 8 * v6);
  if (!v8) {
    goto LABEL_31;
  }
  float v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_31;
  }
  if (v5.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v11 = v9[1];
      if (v11 == 0x92F3DC114CADB853)
      {
        if (v9[2] == 0x92F3DC114CADB853) {
          goto LABEL_29;
        }
      }
      else if ((v11 & (*(void *)&v4 - 1)) != v6)
      {
        goto LABEL_31;
      }
      float v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_31;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v9[1];
    if (v10 == 0x92F3DC114CADB853) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_31;
    }
LABEL_18:
    float v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_31;
    }
  }
  if (v9[2] != 0x92F3DC114CADB853) {
    goto LABEL_18;
  }
LABEL_29:
  uint64_t v12 = v9[5];
  if (*(void *)(v12 + 8) == 0x92F3DC114CADB853)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_32;
  }
LABEL_31:
  uint64_t v13 = 0;
LABEL_32:
  if (v5.u32[0] >= 2uLL)
  {
    unint64_t v15 = 0xC97B9E962ADF4AD4;
    if (*(void *)&v4 <= 0xC97B9E962ADF4AD4) {
      unint64_t v15 = 0xC97B9E962ADF4AD4 % *(void *)&v4;
    }
    double v14 = *(void **)(v7 + 8 * v15);
    do
    {
      do
        double v14 = (void *)*v14;
      while (v14[1] != 0xC97B9E962ADF4AD4);
    }
    while (v14[2] != 0xC97B9E962ADF4AD4);
  }
  else
  {
    double v14 = *(void **)(v7 + 8 * ((*(void *)&v4 - 1) & 0xC97B9E962ADF4AD4));
    do
    {
      do
        double v14 = (void *)*v14;
      while (v14[1] != 0xC97B9E962ADF4AD4);
    }
    while (v14[2] != 0xC97B9E962ADF4AD4);
  }
  double v16 = *(uint64_t **)(v14[5] + 32);
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  if (v17 != v18)
  {
    while (*(unsigned char *)v17 != 34)
    {
      v17 += 16;
      if (v17 == v18) {
        goto LABEL_48;
      }
    }
  }
  if (v17 == v18) {
LABEL_48:
  }
    uint64_t v131 = 0;
  else {
    uint64_t v131 = *(void *)(v17 + 8);
  }
  uint64_t v19 = *(void *)(*((void *)this + 5) + 24);
  float64x2_t v20 = (unsigned __int8 *)*((void *)this + 51);
  double v21 = *(void **)(v19 + 8);
  uint64_t v22 = v21[3];
  uint64_t v23 = v21[4];
  if (v23 == v22)
  {
    double v35 = 0;
    uint64_t v163 = 0;
    uint64_t v164 = 0;
    if (*((void *)this + 52) - (void)v20 > 2uLL) {
      goto LABEL_68;
    }
  }
  else
  {
    uint64_t v24 = 0;
    while (1)
    {
      uint64_t v25 = *(unsigned __int8 **)(v22 + 8 * v24);
      if (*v25 == *v20)
      {
        unint64_t v26 = *((void *)v25 + 1);
        uint64_t v27 = v21[15];
        if (v26 < (v21[16] - v27) >> 3) {
          break;
        }
      }
      if (++v24 >= (unint64_t)((v23 - v22) >> 3))
      {
        uint64_t v28 = 0;
        goto LABEL_57;
      }
    }
    uint64_t v28 = *(void *)(v27 + 8 * v26);
    if (v28) {
      uint64_t v28 = *(void *)(*(void *)(v28 + 24) + 8 * v20[1]);
    }
LABEL_57:
    uint64_t v163 = 0;
    uint64_t v164 = v28;
    if (*((void *)this + 52) - (void)v20 > 2uLL)
    {
      uint64_t v29 = v23 - v22;
      if (v23 == v22)
      {
LABEL_67:
        double v35 = 0;
      }
      else
      {
        uint64_t v30 = 0;
        unint64_t v31 = v29 >> 3;
        while (1)
        {
          double v32 = *(unsigned __int8 **)(v22 + 8 * v30);
          if (*v32 == v20[2])
          {
            unint64_t v33 = *((void *)v32 + 1);
            uint64_t v34 = v21[15];
            if (v33 < (v21[16] - v34) >> 3) {
              break;
            }
          }
          if (++v30 >= v31) {
            goto LABEL_67;
          }
        }
        double v35 = *(void **)(v34 + 8 * v33);
        if (v35) {
          double v35 = *(void **)(v35[3] + 8 * v20[3]);
        }
      }
LABEL_68:
      uint64_t v163 = v35;
      uint64_t v36 = v35[9];
      if (v35[10] != v36) {
        v35[10] = v36;
      }
    }
  }
  double v37 = +[VKDebugSettings sharedSettings];
  [v37 trailJunctionElevationOffset];
  md::CartographicTiledVectorRenderLayer<md::DaVinciRoadTileDataRenderable>::updateZScaleAndOffset((uint64_t **)this + 34, a2, v38);

  long double v39 = (uint64_t *)*((void *)a2 + 1);
  int8x8_t v40 = (int8x8_t)v39[1];
  uint8x8_t v41 = (uint8x8_t)vcnt_s8(v40);
  v41.i16[0] = vaddlv_u8(v41);
  if (v41.u32[0] > 1uLL)
  {
    unint64_t v42 = 0x8BD499FBD96FBB9ELL % *(void *)&v40;
    if (*(void *)&v40 > 0x8BD499FBD96FBB9ELL) {
      unint64_t v42 = 0x8BD499FBD96FBB9ELL;
    }
  }
  else
  {
    unint64_t v42 = (*(void *)&v40 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  uint64_t v43 = *v39;
  __double2 v44 = *(void **)(v43 + 8 * v42);
  if (!v44) {
    goto LABEL_92;
  }
  double v45 = (void *)*v44;
  if (!v45) {
    goto LABEL_92;
  }
  if (v41.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v47 = v45[1];
      if (v47 == 0x8BD499FBD96FBB9ELL)
      {
        if (v45[2] == 0x8BD499FBD96FBB9ELL) {
          goto LABEL_90;
        }
      }
      else if ((v47 & (*(void *)&v40 - 1)) != v42)
      {
        goto LABEL_92;
      }
      double v45 = (void *)*v45;
      if (!v45) {
        goto LABEL_92;
      }
    }
  }
  while (2)
  {
    unint64_t v46 = v45[1];
    if (v46 != 0x8BD499FBD96FBB9ELL)
    {
      if (v46 >= *(void *)&v40) {
        v46 %= *(void *)&v40;
      }
      if (v46 != v42) {
        goto LABEL_92;
      }
      goto LABEL_79;
    }
    if (v45[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_79:
      double v45 = (void *)*v45;
      if (!v45) {
        goto LABEL_92;
      }
      continue;
    }
    break;
  }
LABEL_90:
  uint64_t v48 = v45[5];
  if (*(void *)(v48 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    uint64_t v49 = *(void *)(v48 + 32);
    goto LABEL_93;
  }
LABEL_92:
  uint64_t v49 = 0;
LABEL_93:
  if (v41.u32[0] >= 2uLL)
  {
    unint64_t v51 = 0x1AF456233693CD46;
    if (*(void *)&v40 <= 0x1AF456233693CD46uLL) {
      unint64_t v51 = 0x1AF456233693CD46uLL % *(void *)&v40;
    }
    double v50 = *(void **)(v43 + 8 * v51);
    do
    {
      do
        double v50 = (void *)*v50;
      while (v50[1] != 0x1AF456233693CD46);
    }
    while (v50[2] != 0x1AF456233693CD46);
  }
  else
  {
    double v50 = *(void **)(v43 + 8 * ((*(void *)&v40 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        double v50 = (void *)*v50;
      while (v50[1] != 0x1AF456233693CD46);
    }
    while (v50[2] != 0x1AF456233693CD46);
  }
  uint64_t v52 = *(void *)(v50[5] + 32);
  unsigned int v53 = *(unsigned __int8 *)(v52 + 3776) - 1;
  char v130 = v53 < 3;
  if (*((unsigned char *)this + 34) != 38)
  {
    float v54 = *(float *)(v52 + 3076);
    float v55 = *(float *)(v52 + 3080);
    int v56 = +[VKDebugSettings sharedSettings];
    [v56 daVinciGlobeSplinedMaxZoom];
    char v58 = fmaxf(v55 + v54, 1.0) > (float)(v57 + 1.0);

    char v130 = (v53 < 3) & ~v58;
  }
  double v59 = +[VKDebugSettings sharedSettings];
  int v132 = [v59 enableTileClipping];

  BOOL v129 = *(float *)(v49 + 16) <= 0.01 && *(unsigned char *)(v49 + 3) != 0;
  int v60 = +[VKDebugSettings sharedSettings];
  char v61 = [v60 daVinciEnableRibbonAntialiasing];

  md::RibbonLayoutContext::RibbonLayoutContext((md::RibbonLayoutContext *)v149, a2);
  char v159 = 0;
  int v160 = 1065353216;
  __int16 v161 = 0;
  uint64_t v162 = 0;
  v149[56] = 0;
  char v156 = 1;
  char v158 = v61;
  BOOL v157 = v129;
  unint64_t v62 = +[VKDebugSettings sharedSettings];
  [v62 ribbonCrispness];
  int v150 = v63;

  char v154 = v130;
  uint64_t v64 = *((void *)this + 47);
  int v151 = *(_DWORD *)(*(void *)(v64 + 120) + 8);
  uint64_t v162 = v64;
  float v65 = 1.0;
  if (*((unsigned char *)this + 34) == 37) {
    float v65 = *(float *)(v13 + 4);
  }
  int v160 = LODWORD(v65);
  LOBYTE(v161) = 1;
  uint64_t v66 = (void *)*((void *)a2 + 1);
  int8x8_t v67 = (int8x8_t)v66[1];
  if (!*(void *)&v67) {
    goto LABEL_134;
  }
  uint8x8_t v68 = (uint8x8_t)vcnt_s8(v67);
  v68.i16[0] = vaddlv_u8(v68);
  if (v68.u32[0] > 1uLL)
  {
    unint64_t v69 = 0xDFC317497CF9A4BFLL;
    if (*(void *)&v67 <= 0xDFC317497CF9A4BFLL) {
      unint64_t v69 = 0xDFC317497CF9A4BFLL % *(void *)&v67;
    }
  }
  else
  {
    unint64_t v69 = (*(void *)&v67 - 1) & 0xDFC317497CF9A4BFLL;
  }
  uint64_t v70 = *(void **)(*v66 + 8 * v69);
  if (!v70) {
    goto LABEL_134;
  }
  uint64_t v71 = (void *)*v70;
  if (!v71) {
    goto LABEL_134;
  }
  if (v68.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v73 = v71[1];
      if (v73 == 0xDFC317497CF9A4BFLL)
      {
        if (v71[2] == 0xDFC317497CF9A4BFLL) {
          goto LABEL_131;
        }
      }
      else if ((v73 & (*(void *)&v67 - 1)) != v69)
      {
        goto LABEL_134;
      }
      uint64_t v71 = (void *)*v71;
      if (!v71) {
        goto LABEL_134;
      }
    }
  }
  while (1)
  {
    unint64_t v72 = v71[1];
    if (v72 == 0xDFC317497CF9A4BFLL) {
      break;
    }
    if (v72 >= *(void *)&v67) {
      v72 %= *(void *)&v67;
    }
    if (v72 != v69) {
      goto LABEL_134;
    }
LABEL_120:
    uint64_t v71 = (void *)*v71;
    if (!v71) {
      goto LABEL_134;
    }
  }
  if (v71[2] != 0xDFC317497CF9A4BFLL) {
    goto LABEL_120;
  }
LABEL_131:
  uint64_t v74 = v71[5];
  if (*(void *)(v74 + 8) != 0xDFC317497CF9A4BFLL)
  {
LABEL_134:
    LOBYTE(v75) = 0;
    goto LABEL_135;
  }
  uint64_t v75 = *(void *)(v74 + 32);
  if (v75) {
    LOBYTE(v75) = *(unsigned char *)(v75 + 64) != 0;
  }
LABEL_135:
  char v152 = v75;
  uint64_t v76 = *(void *)(v19 + 160);
  if (v76)
  {
    unint64_t v77 = *(void *)(v76 + 32);
    uint64_t v78 = *(void *)(*(void *)(v19 + 8) + 96);
    if (v77 < (*(void *)(*(void *)(v19 + 8) + 104) - v78) >> 3)
    {
      uint64_t v76 = *(void *)(*(void *)(v78 + 8 * v77) + 16);
      goto LABEL_138;
    }
    uint64_t v76 = 0;
    uint64_t v153 = 0;
    if (!*(void *)&v67) {
      goto LABEL_171;
    }
  }
  else
  {
LABEL_138:
    uint64_t v153 = v76;
    if (!*(void *)&v67) {
      goto LABEL_171;
    }
  }
  uint8x8_t v79 = (uint8x8_t)vcnt_s8(v67);
  v79.i16[0] = vaddlv_u8(v79);
  if (v79.u32[0] > 1uLL)
  {
    unint64_t v80 = 0xA60DDA5A69582425;
    if (*(void *)&v67 <= 0xA60DDA5A69582425) {
      unint64_t v80 = 0xA60DDA5A69582425 % *(void *)&v67;
    }
  }
  else
  {
    unint64_t v80 = (*(void *)&v67 - 1) & 0xA60DDA5A69582425;
  }
  uint64_t v81 = *(void **)(*v66 + 8 * v80);
  if (v81)
  {
    double v82 = (void *)*v81;
    if (v82)
    {
      if (v79.u32[0] < 2uLL)
      {
        uint64_t v83 = *(void *)&v67 - 1;
        while (1)
        {
          uint64_t v85 = v82[1];
          if (v85 == 0xA60DDA5A69582425)
          {
            if (v82[2] == 0xA60DDA5A69582425) {
              goto LABEL_161;
            }
          }
          else if ((v85 & v83) != v80)
          {
            goto LABEL_171;
          }
          double v82 = (void *)*v82;
          if (!v82) {
            goto LABEL_171;
          }
        }
      }
      do
      {
        unint64_t v84 = v82[1];
        if (v84 == 0xA60DDA5A69582425)
        {
          if (v82[2] == 0xA60DDA5A69582425)
          {
LABEL_161:
            uint64_t v86 = v82[5];
            if (*(void *)(v86 + 8) == 0xA60DDA5A69582425)
            {
              int v87 = *(id **)(v86 + 32);
              if (v87 && v76 == 0)
              {
                id v89 = *v87;
                [v89 textureManager];
                uint64_t v153 = *v134;
                if (v135 && !atomic_fetch_add(&v135->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                  std::__shared_weak_count::__release_weak(v135);
                }
              }
            }
            break;
          }
        }
        else
        {
          if (v84 >= *(void *)&v67) {
            v84 %= *(void *)&v67;
          }
          if (v84 != v80) {
            break;
          }
        }
        double v82 = (void *)*v82;
      }
      while (v82);
    }
  }
LABEL_171:
  uint64_t v90 = (uint64_t *)*((void *)this + 50);
  uint64_t v91 = *v90;
  uint64_t v92 = v90[1];
  if (*v90 != v92)
  {
    do
    {
      md::RoadStyle::layout(*(void *)(v91 + 32), (uint64_t)v149);
      v91 += 48;
    }
    while (v91 != v92);
  }
  double v93 = (uint64_t **)*((void *)this + 34);
  double v94 = (uint64_t **)*((void *)this + 35);
  if (v93 != v94)
  {
    char v95 = 0;
    while (1)
    {
      uint64_t v96 = *v93;
      if (v132) {
        uint64_t v97 = v96[31];
      }
      else {
        uint64_t v97 = 0;
      }
      uint64_t v98 = v96[48];
      uint64_t v99 = *(void *)(v98 + 736);
      uint64_t v100 = *(void *)(v98 + 720);
      if (v99 | v100)
      {
        md::DaVinciCenterLineRoadsTileData::updateViewAndTransformConstantData(v98, v96[27], v96[29]);
        uint64_t v155 = v97;
        if (v99)
        {
          uint64_t v101 = *(void *)(v99 + 200);
          uint64_t v102 = *((void *)this + 47);
          if (v101) {
            BOOL v103 = v101 == v102;
          }
          else {
            BOOL v103 = 0;
          }
          if (!v103) {
            md::RoadLayer::setSharedResources((void *)v99, v102);
          }
          md::RoadLayer::layout(v99, (uint64_t)v149);
          md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::collectRenderItemsForPasses(*(void **)(v99 + 8), *(void **)(v99 + 16), v164, v104);
        }
        if (v100)
        {
          md::RibbonLayoutContext::RibbonLayoutContext((md::RibbonLayoutContext *)&v134, a2);
          char v144 = 1;
          BOOL v145 = v129;
          char v146 = v130;
          uint64_t v143 = v97;
          int v147 = v160;
          char v148 = v161;
          uint64_t v105 = *(void *)(v100 + 192);
          uint64_t v106 = *((void *)this + 46);
          if (v105) {
            BOOL v107 = v105 == v106;
          }
          else {
            BOOL v107 = 0;
          }
          if (!v107) {
            *(void *)(v100 + 192) = v106;
          }
          md::PatternedLayer::layout(v100, (uint64_t)&v134);
          md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::collectRenderItemsForPasses(*(void **)(v100 + 8), *(void **)(v100 + 16), v164, v108);
        }
      }
      else
      {
        uint64_t v155 = v97;
      }
      if (v96[50]) {
        BOOL v109 = v131 == 0;
      }
      else {
        BOOL v109 = 1;
      }
      if (v109) {
        goto LABEL_176;
      }
      md::JunctionLayoutContext::JunctionLayoutContext((md::JunctionLayoutContext *)&v134, a2);
      uint64_t v112 = v96[29];
      uint64_t v111 = v96[30];
      if (v111) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v111 + 8), 1uLL, memory_order_relaxed);
      }
      int v113 = v142;
      uint64_t v141 = v112;
      unint64_t v142 = (std::__shared_weak_count *)v111;
      if (v113)
      {
        if (!atomic_fetch_add(&v113->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      uint64_t v115 = v96[27];
      uint64_t v114 = v96[28];
      if (v114) {
        goto LABEL_205;
      }
LABEL_206:
      long long v116 = v140;
      uint64_t v139 = v115;
      float v140 = (std::__shared_weak_count *)v114;
      if (v116 && !atomic_fetch_add(&v116->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
      char v138 = v154;
      BOOL v137 = v157;
      unint64_t v117 = (md::TrailJunctionsResource *)v96[50];
      uint64_t v118 = *((void *)v117 + 14);
      uint64_t v119 = *((void *)this + 54);
      if (v118) {
        BOOL v120 = v118 == v119;
      }
      else {
        BOOL v120 = 0;
      }
      if (!v120) {
        *((void *)v117 + 14) = v119;
      }
      md::TrailJunctionsResource::updateWithContext(v117, (const md::JunctionLayoutContext *)&v134, v110);
      v165[0] = &unk_1EF576BD8;
      v165[1] = &v164;
      v165[2] = &v163;
      uint64_t v166 = v165;
      md::TrailJunctionsResource::collectRenderItems((uint64_t)v117, (uint64_t)v165);
      if (v166 == v165)
      {
        (*(void (**)(void *))(v165[0] + 32))(v165);
        unsigned __int8 v121 = v142;
        if (!v142) {
          goto LABEL_221;
        }
      }
      else
      {
        if (v166) {
          (*(void (**)(void))(*v166 + 40))();
        }
        unsigned __int8 v121 = v142;
        if (!v142)
        {
LABEL_221:
          double v122 = v140;
          if (v140) {
            goto LABEL_222;
          }
          goto LABEL_227;
        }
      }
      if (atomic_fetch_add(&v121->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_221;
      }
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
      double v122 = v140;
      if (v140)
      {
LABEL_222:
        if (!atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
      }
LABEL_227:
      unint64_t v123 = v136;
      if (v136 && !atomic_fetch_add(&v136->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
      char v95 = 1;
LABEL_176:
      if (++v93 == v94) {
        goto LABEL_231;
      }
    }
    ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
    std::__shared_weak_count::__release_weak(v113);
    uint64_t v115 = v96[27];
    uint64_t v114 = v96[28];
    if (!v114) {
      goto LABEL_206;
    }
LABEL_205:
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v114 + 8), 1uLL, memory_order_relaxed);
    goto LABEL_206;
  }
  char v95 = 0;
LABEL_231:
  unint64_t v124 = *(void *)(v164 + 72);
  double v125 = *(uint64_t **)(v164 + 80);
  unint64_t v126 = 126 - 2 * __clz((uint64_t)((uint64_t)v125 - v124) >> 3);
  if (v125 == (uint64_t *)v124) {
    uint64_t v127 = 0;
  }
  else {
    uint64_t v127 = v126;
  }
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v124, v125, v127, 1);
  if ((v95 & 1) != 0 && v163) {
    ggl::CommandBuffer::stableSortRenderItems((__n128 *)v163[9], (char *)v163[10]);
  }
  if (!v172)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v172 + 48))(v172);
  uint64_t result = v172;
  if (v172 == v171) {
    return (void *)(*(uint64_t (**)(void *))(v171[0] + 32))(v171);
  }
  if (v172) {
    return (void *)(*(uint64_t (**)(void))(*v172 + 40))();
  }
  return result;
}

void sub_1A1896B34(_Unwind_Exception *a1)
{
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v2 - 144));
  _Unwind_Resume(a1);
}

void *md::DaVinciCenterLineRoadsRenderLayer::layout(md::DaVinciCenterLineRoadsRenderLayer *this, const md::LayoutContext *a2)
{
  uint64_t v151 = *MEMORY[0x1E4F143B8];
  v147[0] = &unk_1EF578768;
  v147[1] = a2;
  v145[0] = &unk_1EF5787B0;
  v145[1] = a2;
  char v146 = v145;
  int v150 = v149;
  char v148 = v147;
  v149[0] = &unk_1EF5787B0;
  v149[1] = a2;
  std::__function::__func<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v147);
  if (v146 == v145)
  {
    (*(void (**)(void *))(v145[0] + 32))(v145);
  }
  else if (v146)
  {
    (*(void (**)(void *))(*v146 + 40))(v146);
  }
  if (v148 == v147)
  {
    (*(void (**)(void *))(v147[0] + 32))(v147);
  }
  else if (v148)
  {
    (*(void (**)(void *))(*v148 + 40))(v148);
  }
  uint64_t v3 = *(void *)(*((void *)this + 5) + 24);
  int8x8_t v4 = (unsigned __int8 *)*((void *)this + 51);
  uint8x8_t v5 = *(void **)(v3 + 8);
  uint64_t v6 = v5[3];
  uint64_t v7 = v5[4];
  if (v7 == v6) {
    goto LABEL_16;
  }
  uint64_t v8 = 0;
  while (1)
  {
    float v9 = *(unsigned __int8 **)(v6 + 8 * v8);
    if (*v9 == *v4)
    {
      unint64_t v10 = *((void *)v9 + 1);
      uint64_t v11 = v5[15];
      if (v10 < (v5[16] - v11) >> 3) {
        break;
      }
    }
    if (++v8 >= (unint64_t)((v7 - v6) >> 3)) {
      goto LABEL_16;
    }
  }
  uint64_t v12 = *(void *)(v11 + 8 * v10);
  if (!v12) {
LABEL_16:
  }
    uint64_t v130 = 0;
  else {
    uint64_t v130 = *(void *)(*(void *)(v12 + 24) + 8 * v4[1]);
  }
  if ((*((unsigned char *)this + 34) & 0xFE) != 0x22) {
    goto LABEL_26;
  }
  unint64_t v13 = *((void *)this + 52) - (void)v4;
  if (v13 < 5) {
    goto LABEL_27;
  }
  if (v7 == v6)
  {
LABEL_26:
    uint64_t v134 = 0;
    goto LABEL_36;
  }
  uint64_t v14 = 0;
  while (1)
  {
    unint64_t v15 = *(unsigned __int8 **)(v6 + 8 * v14);
    if (*v15 == v4[4])
    {
      unint64_t v16 = *((void *)v15 + 1);
      uint64_t v17 = v5[15];
      if (v16 < (v5[16] - v17) >> 3) {
        break;
      }
    }
    if (++v14 >= (unint64_t)((v7 - v6) >> 3)) {
      goto LABEL_27;
    }
  }
  uint64_t v18 = *(void *)(v17 + 8 * v16);
  if (v18)
  {
    uint64_t v19 = *(void *)(*(void *)(v18 + 24) + 8 * v4[5]);
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v19 = 0;
LABEL_28:
  uint64_t v134 = v19;
  if (v13 >= 3)
  {
    uint64_t v20 = v7 - v6;
    if (v7 != v6)
    {
      uint64_t v21 = 0;
      unint64_t v22 = v20 >> 3;
      while (1)
      {
        uint64_t v23 = *(unsigned __int8 **)(v6 + 8 * v21);
        if (*v23 == v4[2])
        {
          unint64_t v24 = *((void *)v23 + 1);
          uint64_t v25 = v5[15];
          if (v24 < (v5[16] - v25) >> 3) {
            break;
          }
        }
        if (++v21 >= v22) {
          goto LABEL_36;
        }
      }
      uint64_t v26 = *(void *)(v25 + 8 * v24);
      if (v26)
      {
        uint64_t v132 = *(void *)(*(void *)(v26 + 24) + 8 * v4[3]);
        goto LABEL_37;
      }
    }
  }
LABEL_36:
  uint64_t v132 = 0;
LABEL_37:
  uint64_t v27 = +[VKDebugSettings sharedSettings];
  char v135 = [v27 daVinciShowCenterLineRoads];

  uint64_t v28 = (uint64_t *)*((void *)a2 + 1);
  int8x8_t v29 = (int8x8_t)v28[1];
  uint8x8_t v30 = (uint8x8_t)vcnt_s8(v29);
  v30.i16[0] = vaddlv_u8(v30);
  if (v30.u32[0] > 1uLL)
  {
    unint64_t v31 = 0x8BD499FBD96FBB9ELL % *(void *)&v29;
    if (*(void *)&v29 > 0x8BD499FBD96FBB9ELL) {
      unint64_t v31 = 0x8BD499FBD96FBB9ELL;
    }
  }
  else
  {
    unint64_t v31 = (*(void *)&v29 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  uint64_t v32 = *v28;
  unint64_t v33 = *(void **)(v32 + 8 * v31);
  if (!v33) {
    goto LABEL_59;
  }
  uint64_t v34 = (void *)*v33;
  if (!v34) {
    goto LABEL_59;
  }
  if (v30.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v36 = v34[1];
      if (v36 == 0x8BD499FBD96FBB9ELL)
      {
        if (v34[2] == 0x8BD499FBD96FBB9ELL) {
          goto LABEL_57;
        }
      }
      else if ((v36 & (*(void *)&v29 - 1)) != v31)
      {
        goto LABEL_59;
      }
      uint64_t v34 = (void *)*v34;
      if (!v34) {
        goto LABEL_59;
      }
    }
  }
  while (1)
  {
    unint64_t v35 = v34[1];
    if (v35 == 0x8BD499FBD96FBB9ELL) {
      break;
    }
    if (v35 >= *(void *)&v29) {
      v35 %= *(void *)&v29;
    }
    if (v35 != v31) {
      goto LABEL_59;
    }
LABEL_46:
    uint64_t v34 = (void *)*v34;
    if (!v34) {
      goto LABEL_59;
    }
  }
  if (v34[2] != 0x8BD499FBD96FBB9ELL) {
    goto LABEL_46;
  }
LABEL_57:
  uint64_t v37 = v34[5];
  if (*(void *)(v37 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    uint64_t v38 = *(void *)(v37 + 32);
    goto LABEL_60;
  }
LABEL_59:
  uint64_t v38 = 0;
LABEL_60:
  if (v30.u32[0] >= 2uLL)
  {
    unint64_t v40 = 0x1AF456233693CD46;
    if (*(void *)&v29 <= 0x1AF456233693CD46uLL) {
      unint64_t v40 = 0x1AF456233693CD46uLL % *(void *)&v29;
    }
    long double v39 = *(void **)(v32 + 8 * v40);
    do
    {
      do
        long double v39 = (void *)*v39;
      while (v39[1] != 0x1AF456233693CD46);
    }
    while (v39[2] != 0x1AF456233693CD46);
  }
  else
  {
    long double v39 = *(void **)(v32 + 8 * ((*(void *)&v29 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        long double v39 = (void *)*v39;
      while (v39[1] != 0x1AF456233693CD46);
    }
    while (v39[2] != 0x1AF456233693CD46);
  }
  uint64_t v41 = *(void *)(v39[5] + 32);
  int v42 = *(unsigned __int8 *)(v41 + 3776);
  float v43 = *(float *)(v41 + 3076);
  float v44 = *(float *)(v41 + 3080);
  double v45 = +[VKDebugSettings sharedSettings];
  [v45 daVinciGlobeSplinedMaxZoom];
  BOOL v46 = (v42 - 1) < 3;
  BOOL v48 = fmaxf(v44 + v43, 1.0) <= (float)(v47 + 1.0);

  uint64_t v49 = +[VKDebugSettings sharedSettings];
  int v133 = [v49 enableTileClipping];

  BOOL v129 = *(float *)(v38 + 16) <= 0.01 && *(unsigned char *)(v38 + 3) != 0;
  double v50 = +[VKDebugSettings sharedSettings];
  unsigned __int8 v51 = [v50 daVinciEnableRibbonAntialiasing];

  md::RibbonLayoutContext::RibbonLayoutContext((md::RibbonLayoutContext *)v139, a2);
  LODWORD(v144) = 1065353216;
  WORD2(v144) = 0;
  *((void *)&v144 + 1) = 0;
  BYTE8(v140) = 0;
  BYTE9(v143) = 1;
  *(_WORD *)((char *)&v143 + 11) = v51;
  BYTE10(v143) = v129;
  uint64_t v52 = +[VKDebugSettings sharedSettings];
  [v52 ribbonCrispness];
  DWORD1(v141) = v53;

  BOOL v128 = v48 && v46;
  BYTE8(v142) = v48 && v46;
  uint64_t v54 = *((void *)this + 47);
  DWORD2(v141) = *(_DWORD *)(*(void *)(v54 + 120) + 8);
  *((void *)&v144 + 1) = v54;
  float v55 = (void *)*((void *)a2 + 1);
  int8x8_t v56 = (int8x8_t)v55[1];
  if (!*(void *)&v56) {
    goto LABEL_97;
  }
  uint8x8_t v57 = (uint8x8_t)vcnt_s8(v56);
  v57.i16[0] = vaddlv_u8(v57);
  if (v57.u32[0] > 1uLL)
  {
    unint64_t v58 = 0xDFC317497CF9A4BFLL;
    if (*(void *)&v56 <= 0xDFC317497CF9A4BFLL) {
      unint64_t v58 = 0xDFC317497CF9A4BFLL % *(void *)&v56;
    }
  }
  else
  {
    unint64_t v58 = (*(void *)&v56 - 1) & 0xDFC317497CF9A4BFLL;
  }
  double v59 = *(void **)(*v55 + 8 * v58);
  if (!v59) {
    goto LABEL_97;
  }
  int v60 = (void *)*v59;
  if (!v60) {
    goto LABEL_97;
  }
  if (v57.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v62 = v60[1];
      if (v62 == 0xDFC317497CF9A4BFLL)
      {
        if (v60[2] == 0xDFC317497CF9A4BFLL) {
          goto LABEL_94;
        }
      }
      else if ((v62 & (*(void *)&v56 - 1)) != v58)
      {
        goto LABEL_97;
      }
      int v60 = (void *)*v60;
      if (!v60) {
        goto LABEL_97;
      }
    }
  }
  while (1)
  {
    unint64_t v61 = v60[1];
    if (v61 == 0xDFC317497CF9A4BFLL) {
      break;
    }
    if (v61 >= *(void *)&v56) {
      v61 %= *(void *)&v56;
    }
    if (v61 != v58) {
      goto LABEL_97;
    }
LABEL_83:
    int v60 = (void *)*v60;
    if (!v60) {
      goto LABEL_97;
    }
  }
  if (v60[2] != 0xDFC317497CF9A4BFLL) {
    goto LABEL_83;
  }
LABEL_94:
  uint64_t v63 = v60[5];
  if (*(void *)(v63 + 8) != 0xDFC317497CF9A4BFLL)
  {
LABEL_97:
    LOBYTE(v64) = 0;
    goto LABEL_98;
  }
  uint64_t v64 = *(void *)(v63 + 32);
  if (v64) {
    LOBYTE(v64) = *(unsigned char *)(v64 + 64) != 0;
  }
LABEL_98:
  BYTE12(v141) = v64;
  uint64_t v65 = *(void *)(v3 + 160);
  if (v65)
  {
    unint64_t v66 = *(void *)(v65 + 32);
    uint64_t v67 = *(void *)(*(void *)(v3 + 8) + 96);
    if (v66 < (*(void *)(*(void *)(v3 + 8) + 104) - v67) >> 3)
    {
      uint64_t v65 = *(void *)(*(void *)(v67 + 8 * v66) + 16);
      goto LABEL_101;
    }
    uint64_t v65 = 0;
    *(void *)&long long v142 = 0;
    if (!*(void *)&v56) {
      goto LABEL_134;
    }
  }
  else
  {
LABEL_101:
    *(void *)&long long v142 = v65;
    if (!*(void *)&v56) {
      goto LABEL_134;
    }
  }
  uint8x8_t v68 = (uint8x8_t)vcnt_s8(v56);
  v68.i16[0] = vaddlv_u8(v68);
  if (v68.u32[0] > 1uLL)
  {
    unint64_t v69 = 0xA60DDA5A69582425;
    if (*(void *)&v56 <= 0xA60DDA5A69582425) {
      unint64_t v69 = 0xA60DDA5A69582425 % *(void *)&v56;
    }
  }
  else
  {
    unint64_t v69 = (*(void *)&v56 - 1) & 0xA60DDA5A69582425;
  }
  uint64_t v70 = *(void **)(*v55 + 8 * v69);
  if (v70)
  {
    uint64_t v71 = (void *)*v70;
    if (v71)
    {
      if (v68.u32[0] < 2uLL)
      {
        uint64_t v72 = *(void *)&v56 - 1;
        while (1)
        {
          uint64_t v74 = v71[1];
          if (v74 == 0xA60DDA5A69582425)
          {
            if (v71[2] == 0xA60DDA5A69582425) {
              goto LABEL_124;
            }
          }
          else if ((v74 & v72) != v69)
          {
            goto LABEL_134;
          }
          uint64_t v71 = (void *)*v71;
          if (!v71) {
            goto LABEL_134;
          }
        }
      }
      do
      {
        unint64_t v73 = v71[1];
        if (v73 == 0xA60DDA5A69582425)
        {
          if (v71[2] == 0xA60DDA5A69582425)
          {
LABEL_124:
            uint64_t v75 = v71[5];
            if (*(void *)(v75 + 8) == 0xA60DDA5A69582425)
            {
              uint64_t v76 = *(id **)(v75 + 32);
              if (v76 && v65 == 0)
              {
                id v78 = *v76;
                [v78 textureManager];
                *(void *)&long long v142 = **(void **)&v136[0];
                if (*((void *)&v136[0] + 1)
                  && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v136[0] + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                {
                  (*(void (**)(void))(**((void **)&v136[0] + 1) + 16))(*((void *)&v136[0] + 1));
                  std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v136[0] + 1));
                }
              }
            }
            break;
          }
        }
        else
        {
          if (v73 >= *(void *)&v56) {
            v73 %= *(void *)&v56;
          }
          if (v73 != v69) {
            break;
          }
        }
        uint64_t v71 = (void *)*v71;
      }
      while (v71);
    }
  }
LABEL_134:
  uint8x8_t v79 = (uint64_t *)*((void *)this + 50);
  uint64_t v80 = *v79;
  uint64_t v81 = v79[1];
  if (*v79 != v81)
  {
    do
    {
      md::RoadStyle::layout(*(void *)(v80 + 32), (uint64_t)v139);
      v80 += 48;
    }
    while (v80 != v81);
  }
  uint64_t v83 = (uint64_t **)*((void *)this + 34);
  for (unint64_t i = (uint64_t **)*((void *)this + 35); v83 != i; ++v83)
  {
    unint64_t v84 = *v83;
    uint64_t v85 = (*v83)[48];
    char v86 = v135;
    if (!*(unsigned char *)(v85 + 856)) {
      char v86 = 1;
    }
    if ((v86 & 1) != 0 || *((unsigned char *)this + 34) == 16)
    {
      if (v133) {
        uint64_t v87 = v84[31];
      }
      else {
        uint64_t v87 = 0;
      }
      uint64_t v88 = *(void *)(v85 + 736);
      uint64_t v89 = *(void *)(v85 + 744);
      uint64_t v90 = *(void *)(v85 + 816);
      uint64_t v91 = *(void *)(v85 + 720);
      uint64_t v92 = *(void *)(v85 + 728);
      if (v88) {
        BOOL v93 = 0;
      }
      else {
        BOOL v93 = v89 == 0;
      }
      if (v93 && v90 == 0 && v91 == 0 && v92 == 0)
      {
        *(void *)&long long v143 = v87;
        BYTE8(v143) = *((unsigned char *)this + 34) == 35;
      }
      else
      {
        md::DaVinciCenterLineRoadsTileData::updateViewAndTransformConstantData(v85, v84[27], v84[29]);
        *(void *)&long long v143 = v87;
        BYTE8(v143) = *((unsigned char *)this + 34) == 35;
        if (v88)
        {
          uint64_t v97 = *(void *)(v88 + 200);
          uint64_t v98 = *((void *)this + 47);
          if (v97) {
            BOOL v99 = v97 == v98;
          }
          else {
            BOOL v99 = 0;
          }
          if (!v99) {
            md::RoadLayer::setSharedResources((void *)v88, v98);
          }
          md::RoadLayer::layout(v88, (uint64_t)v139);
          md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::collectRenderItemsForPasses(*(void **)(v88 + 8), *(void **)(v88 + 16), v130, v100);
        }
        if (v89) {
          BOOL v101 = v134 == 0;
        }
        else {
          BOOL v101 = 1;
        }
        if (!v101)
        {
          uint64_t v102 = *(void *)(v89 + 200);
          uint64_t v103 = *((void *)this + 47);
          if (v102) {
            BOOL v104 = v102 == v103;
          }
          else {
            BOOL v104 = 0;
          }
          if (!v104) {
            md::RoadLayer::setSharedResources((void *)v89, v103);
          }
          md::RoadLayer::layout(v89, (uint64_t)v139);
          md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::collectRenderItemsForPasses(*(void **)(v89 + 8), *(void **)(v89 + 16), v134, v105);
        }
        if (v90) {
          BOOL v106 = v132 == 0;
        }
        else {
          BOOL v106 = 1;
        }
        if (!v106)
        {
          v136[4] = v141;
          v136[5] = v142;
          long long v137 = v143;
          long long v138 = v144;
          v136[0] = v139[0];
          v136[1] = v139[1];
          v136[2] = v139[2];
          v136[3] = v140;
          uint64_t v107 = *(void *)(v90 + 200);
          uint64_t v108 = *((void *)this + 48);
          if (v107) {
            BOOL v109 = v107 == v108;
          }
          else {
            BOOL v109 = 0;
          }
          BYTE9(v137) = 0;
          if (!v109) {
            md::RoadLayer::setSharedResources((void *)v90, v108);
          }
          md::RoadLayer::layout(v90, (uint64_t)v136);
          md::Ribbons::RibbonLayer<md::Ribbons::RoadRibbonDescriptor>::collectRenderItemsForPasses(*(void **)(v90 + 8), *(void **)(v90 + 16), v132, v110);
        }
      }
      if (v91 | v92)
      {
        md::RibbonLayoutContext::RibbonLayoutContext((md::RibbonLayoutContext *)v136, a2);
        HIDWORD(v137) = 1065353216;
        LOBYTE(v138) = 0;
        BYTE9(v137) = 1;
        BYTE10(v137) = v129;
        BYTE11(v137) = v128;
        *(void *)&long long v137 = v87;
        BYTE8(v137) = *((unsigned char *)this + 34) == 35;
        if (v91)
        {
          uint64_t v111 = *(void *)(v91 + 192);
          uint64_t v112 = *((void *)this + 46);
          if (v111) {
            BOOL v113 = v111 == v112;
          }
          else {
            BOOL v113 = 0;
          }
          if (!v113) {
            *(void *)(v91 + 192) = v112;
          }
          md::PatternedLayer::layout(v91, (uint64_t)v136);
          md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::collectRenderItemsForPasses(*(void **)(v91 + 8), *(void **)(v91 + 16), v130, v114);
        }
        if (v92)
        {
          uint64_t v115 = *(void *)(v92 + 192);
          uint64_t v116 = *((void *)this + 46);
          if (v115) {
            BOOL v117 = v115 == v116;
          }
          else {
            BOOL v117 = 0;
          }
          if (!v117) {
            *(void *)(v92 + 192) = v116;
          }
          md::PatternedLayer::layout(v92, (uint64_t)v136);
          md::Ribbons::RibbonLayer<md::Ribbons::PatternedRibbonDescriptor>::collectRenderItemsForPasses(*(void **)(v92 + 8), *(void **)(v92 + 16), v134, v118);
        }
      }
    }
  }
  unint64_t v119 = *(void *)(v130 + 72);
  BOOL v120 = *(uint64_t **)(v130 + 80);
  unint64_t v121 = 126 - 2 * __clz((uint64_t)((uint64_t)v120 - v119) >> 3);
  if (v120 == (uint64_t *)v119) {
    uint64_t v122 = 0;
  }
  else {
    uint64_t v122 = v121;
  }
  std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v119, v120, v122, 1);
  if (v134)
  {
    unint64_t v123 = *(void *)(v134 + 72);
    unint64_t v124 = *(uint64_t **)(v134 + 80);
    unint64_t v125 = 126 - 2 * __clz((uint64_t)((uint64_t)v124 - v123) >> 3);
    if (v124 == (uint64_t *)v123) {
      uint64_t v126 = 0;
    }
    else {
      uint64_t v126 = v125;
    }
    std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v123, v124, v126, 1);
  }
  if (!v150)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v150 + 48))(v150);
  uint64_t result = v150;
  if (v150 == v149) {
    return (void *)(*(uint64_t (**)(void *))(v149[0] + 32))(v149);
  }
  if (v150) {
    return (void *)(*(uint64_t (**)(void))(*v150 + 40))();
  }
  return result;
}

void sub_1A1897920(_Unwind_Exception *a1)
{
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v2 - 152));
  _Unwind_Resume(a1);
}

void md::DaVinciGroundRenderLayer::createMeshLayoutContext(md::DaVinciGroundRenderLayer *this, const md::LayoutContext *a2, md::LayoutContext *a3)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (uint64_t *)*((void *)a3 + 1);
  int8x8_t v7 = (int8x8_t)v6[1];
  if (!*(void *)&v7)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    goto LABEL_94;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    uint64_t v9 = 0x41E8D6E445F4145;
    if (*(void *)&v7 <= 0x41E8D6E445F4145uLL) {
      uint64_t v9 = 0x41E8D6E445F4145uLL % *(void *)&v7;
    }
  }
  else
  {
    uint64_t v9 = (*(void *)&v7 - 1) & 0x41E8D6E445F4145;
  }
  uint64_t v13 = *v6;
  uint64_t v14 = *(void **)(v13 + 8 * v9);
  if (!v14) {
    goto LABEL_25;
  }
  unint64_t v15 = (void *)*v14;
  if (!v15) {
    goto LABEL_25;
  }
  if (v8.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v17 = v15[1];
      if (v17 == 0x41E8D6E445F4145)
      {
        if (v15[2] == 0x41E8D6E445F4145) {
          goto LABEL_23;
        }
      }
      else if ((v17 & (*(void *)&v7 - 1)) != v9)
      {
        goto LABEL_25;
      }
      unint64_t v15 = (void *)*v15;
      if (!v15) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v16 = v15[1];
    if (v16 == 0x41E8D6E445F4145) {
      break;
    }
    if (v16 >= *(void *)&v7) {
      v16 %= *(void *)&v7;
    }
    if (v16 != v9) {
      goto LABEL_25;
    }
LABEL_12:
    unint64_t v15 = (void *)*v15;
    if (!v15) {
      goto LABEL_25;
    }
  }
  if (v15[2] != 0x41E8D6E445F4145) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v18 = v15[5];
  if (*(void *)(v18 + 8) == 0x41E8D6E445F4145)
  {
    uint64_t v11 = *(void *)(v18 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v11 = 0;
LABEL_26:
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v19 = 0x8BD499FBD96FBB9ELL;
    if (*(void *)&v7 <= 0x8BD499FBD96FBB9ELL) {
      unint64_t v19 = 0x8BD499FBD96FBB9ELL % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v19 = (*(void *)&v7 - 1) & 0x8BD499FBD96FBB9ELL;
  }
  uint64_t v20 = *(void **)(v13 + 8 * v19);
  if (!v20) {
    goto LABEL_48;
  }
  uint64_t v21 = (void *)*v20;
  if (!v21) {
    goto LABEL_48;
  }
  if (v8.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v23 = v21[1];
      if (v23 == 0x8BD499FBD96FBB9ELL)
      {
        if (v21[2] == 0x8BD499FBD96FBB9ELL) {
          goto LABEL_46;
        }
      }
      else if ((v23 & (*(void *)&v7 - 1)) != v19)
      {
        goto LABEL_48;
      }
      uint64_t v21 = (void *)*v21;
      if (!v21) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v22 = v21[1];
    if (v22 != 0x8BD499FBD96FBB9ELL)
    {
      if (v22 >= *(void *)&v7) {
        v22 %= *(void *)&v7;
      }
      if (v22 != v19) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }
    if (v21[2] != 0x8BD499FBD96FBB9ELL)
    {
LABEL_35:
      uint64_t v21 = (void *)*v21;
      if (!v21) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v24 = v21[5];
  if (*(void *)(v24 + 8) == 0x8BD499FBD96FBB9ELL)
  {
    uint64_t v12 = *(void *)(v24 + 32);
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v12 = 0;
LABEL_49:
  if (v8.u32[0] > 1uLL)
  {
    uint64_t v25 = 0x1AF456233693CD46;
    if (*(void *)&v7 <= 0x1AF456233693CD46uLL) {
      uint64_t v25 = 0x1AF456233693CD46uLL % *(void *)&v7;
    }
  }
  else
  {
    uint64_t v25 = (*(void *)&v7 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v26 = *(void **)(v13 + 8 * v25);
  if (!v26) {
    goto LABEL_71;
  }
  uint64_t v27 = (void *)*v26;
  if (!v27) {
    goto LABEL_71;
  }
  if (v8.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v29 = v27[1];
      if (v29 == 0x1AF456233693CD46)
      {
        if (v27[2] == 0x1AF456233693CD46) {
          goto LABEL_69;
        }
      }
      else if ((v29 & (*(void *)&v7 - 1)) != v25)
      {
        goto LABEL_71;
      }
      uint64_t v27 = (void *)*v27;
      if (!v27) {
        goto LABEL_71;
      }
    }
  }
  while (2)
  {
    unint64_t v28 = v27[1];
    if (v28 != 0x1AF456233693CD46)
    {
      if (v28 >= *(void *)&v7) {
        v28 %= *(void *)&v7;
      }
      if (v28 != v25) {
        goto LABEL_71;
      }
      goto LABEL_58;
    }
    if (v27[2] != 0x1AF456233693CD46)
    {
LABEL_58:
      uint64_t v27 = (void *)*v27;
      if (!v27) {
        goto LABEL_71;
      }
      continue;
    }
    break;
  }
LABEL_69:
  uint64_t v30 = v27[5];
  if (*(void *)(v30 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v10 = *(void *)(v30 + 32);
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v10 = 0;
LABEL_72:
  if (v8.u32[0] > 1uLL)
  {
    uint64_t v31 = 0x7C7EC6C7C111B0D0;
    if (*(void *)&v7 <= 0x7C7EC6C7C111B0D0uLL) {
      uint64_t v31 = 0x7C7EC6C7C111B0D0uLL % *(void *)&v7;
    }
  }
  else
  {
    uint64_t v31 = (*(void *)&v7 - 1) & 0x7C7EC6C7C111B0D0;
  }
  uint64_t v32 = *(void **)(v13 + 8 * v31);
  if (!v32) {
    goto LABEL_94;
  }
  unint64_t v33 = (void *)*v32;
  if (!v33) {
    goto LABEL_94;
  }
  if (v8.u32[0] < 2uLL)
  {
    uint64_t v34 = *(void *)&v7 - 1;
    while (1)
    {
      uint64_t v36 = v33[1];
      if (v36 == 0x7C7EC6C7C111B0D0)
      {
        if (v33[2] == 0x7C7EC6C7C111B0D0) {
          goto LABEL_92;
        }
      }
      else if ((v36 & v34) != v31)
      {
        goto LABEL_94;
      }
      unint64_t v33 = (void *)*v33;
      if (!v33) {
        goto LABEL_94;
      }
    }
  }
  while (1)
  {
    unint64_t v35 = v33[1];
    if (v35 == 0x7C7EC6C7C111B0D0) {
      break;
    }
    if (v35 >= *(void *)&v7) {
      v35 %= *(void *)&v7;
    }
    if (v35 != v31) {
      goto LABEL_94;
    }
LABEL_81:
    unint64_t v33 = (void *)*v33;
    if (!v33) {
      goto LABEL_94;
    }
  }
  if (v33[2] != 0x7C7EC6C7C111B0D0) {
    goto LABEL_81;
  }
LABEL_92:
  uint64_t v37 = v33[5];
  if (*(void *)(v37 + 8) != 0x7C7EC6C7C111B0D0)
  {
LABEL_94:
    uint64_t v38 = 0;
    goto LABEL_95;
  }
  uint64_t v38 = *(long long **)(v37 + 32);
LABEL_95:
  float v39 = *(double *)(v11 + 80);
  __float2 v40 = __sincosf_stret(v39);
  uint64_t v42 = *(void *)(v11 + 128);
  uint64_t v41 = *(void *)(v11 + 136);
  uint64_t v43 = *(void *)(v11 + 144);
  uint64_t v102 = *(void *)(v11 + 152);
  id v44 = *(id *)(*((void *)a2 + 5) + 104);
  [v44 contentScale];
  double v46 = v45;

  float v47 = +[VKDebugSettings sharedSettings];
  char v48 = [v47 daVinciWireframeEnabled];
  char v49 = [v47 daVinciRenderLineGeometry];
  int v103 = *(unsigned __int8 *)(v11 + 227);
  if (*(unsigned char *)(v11 + 227) && [v47 daVinciSSAOOcclusionOnly]) {
    char v101 = [v47 daVinciAdvancedLightingEnabled];
  }
  else {
    char v101 = 0;
  }
  if ([v47 daVinciEnablePBR]) {
    char v100 = [v47 daVinciAdvancedLightingEnabled];
  }
  else {
    char v100 = 0;
  }
  if ([v47 daVinciGlobeLighting]) {
    int v105 = [v47 daVinciAdvancedLightingEnabled];
  }
  else {
    int v105 = 0;
  }
  if ([v47 daVinciLightingDebugAlbedoOnly]) {
    char v99 = [v47 daVinciAdvancedLightingEnabled];
  }
  else {
    char v99 = 0;
  }
  if ([v47 daVinciLightingDebugLightsOnly]) {
    char v98 = [v47 daVinciAdvancedLightingEnabled];
  }
  else {
    char v98 = 0;
  }
  if ([v47 daVinciLightingDebugShowOverexposure]) {
    char v97 = [v47 daVinciAdvancedLightingEnabled];
  }
  else {
    char v97 = 0;
  }
  if ([v47 daVinciLightingDebugShowNormals]) {
    char v96 = [v47 daVinciAdvancedLightingEnabled];
  }
  else {
    char v96 = 0;
  }
  char v95 = v48;
  char v94 = [v47 daVinciRenderingDebugShowUVs];
  float v50 = *(float *)(v10 + 3076);
  float v51 = *(float *)(v10 + 3080);
  uint64_t v52 = +[VKDebugSettings sharedSettings];
  [v52 daVinciGlobeSplinedMaxZoom];
  BOOL v104 = fmaxf(v51 + v50, 1.0) <= v53 && *(unsigned __int8 *)(v10 + 3776) - 1 < 3;

  float v93 = *(float *)(v10 + 3080);
  int v54 = *(_DWORD *)(v11 + 192);
  float v90 = *(float *)(v10 + 3076);
  if ([v47 daVinciAdvancedLightingEnabled]) {
    BOOL v55 = *(unsigned char *)(v11 + 225) != 0;
  }
  else {
    BOOL v55 = 0;
  }
  uint64_t v56 = *(void *)(v11 + 196);
  char v91 = *(unsigned char *)(v11 + 226);
  BOOL v92 = v55;
  if (*(unsigned char *)(v11 + 224))
  {
    char v57 = [v47 enableDOF];
    if (v103) {
      char v58 = 1;
    }
    else {
      char v58 = v57;
    }
    char v88 = v58;
  }
  else
  {
    char v88 = 0;
  }
  double v89 = *(double *)(v10 + 3040);
  int v59 = [v47 drawDaVinciHUD];
  char v87 = v49;
  if (v59)
  {
    long long v115 = 0u;
    long long v114 = 0u;
    long long v113 = 0u;
    long long v111 = 0u;
    long long v112 = 0u;
    long long v110 = 0u;
  }
  uint64_t v86 = v12;
  int v85 = *(_DWORD *)(v12 + 8);
  uint64_t v60 = *(void *)(*((void *)a2 + 391) + 32);
  int v61 = [v47 lightingEnableAmbient];
  float v62 = v46;
  if (*(unsigned char *)(v11 + 96)) {
    int v63 = v61;
  }
  else {
    int v63 = 0;
  }
  if (v63 == 1)
  {
    uint64_t v64 = *((void *)a2 + 391);
    uint64_t v65 = (std::__shared_weak_count *)*((void *)a2 + 257);
    uint64_t v106 = *((void *)a2 + 256);
    uint64_t v107 = v65;
    if (v65) {
      atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v66 = a2;
    md::TextureManager::cubeTexture(&v108, v64, v11 + 104, &v106, v62);
    uint64_t v67 = v107;
    if (v107 && !atomic_fetch_add(&v107->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
      uint8x8_t v68 = v108;
      if (v108)
      {
LABEL_140:
        uint64_t v69 = md::LayoutContext::frameState(a3);
        md::SharedResource::addFrameRef(v68, *(void *)(v69 + 624));
        uint64_t v60 = *((void *)v68 + 4);
      }
    }
    else
    {
      uint8x8_t v68 = v108;
      if (v108) {
        goto LABEL_140;
      }
    }
    uint64_t v70 = v109;
    if (v109 && !atomic_fetch_add(&v109->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
    a2 = v66;
  }
  uint64_t v83 = v56;
  int v84 = v54;
  if ((v104 & v105) == 1)
  {
    uint64_t v42 = *(void *)(v11 + 160);
    uint64_t v41 = *(void *)(v11 + 168);
    uint64_t v43 = *(void *)(v11 + 176);
    uint64_t v102 = *(void *)(v11 + 184);
  }
  long long v81 = *v38;
  long long v82 = v38[1];
  double v71 = *(double *)(v10 + 496);
  double v72 = *(double *)(v10 + 504);
  objc_msgSend(v47, "daVinciHorizonGlowSharpness", *(void *)(v10 + 512));
  int v80 = v73;
  [v47 daVinciHorizonGlowStrength];
  *((unsigned char *)this + 176) = 0;
  *((void *)this + 35) = 0;
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_WORD *)this + 8) = 0;
  *(void *)((char *)this + 68) = 0;
  *(_OWORD *)((char *)this + 52) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  *((unsigned char *)this + 288) = 1;
  *((float *)this + 5) = fmaxf(v93 + v90, 1.0);
  *((float *)this + 6) = v62;
  *(unsigned char *)this = v103;
  *((unsigned char *)this + 8) = v101;
  *((_DWORD *)this + 7) = LODWORD(v40.__cosval);
  *((_DWORD *)this + 8) = LODWORD(v40.__sinval);
  *((void *)this + 10) = v42;
  *((void *)this + 11) = v41;
  *((void *)this + 12) = v43;
  *((void *)this + 13) = v102;
  *((void *)this + 14) = *(void *)(v11 + 160);
  *((void *)this + 15) = *(void *)(v11 + 168);
  *((void *)this + 16) = *(void *)(v11 + 176);
  *((void *)this + 17) = *(void *)(v11 + 184);
  *(int32x2_t *)((char *)this + 36) = vrev64_s32(*(int32x2_t *)(v86 + 12));
  *((unsigned char *)this + 1) = v95;
  if (v59)
  {
    *((unsigned char *)this + 176) = 1;
    *(_OWORD *)((char *)this + 216) = v112;
    *(_OWORD *)((char *)this + 232) = v113;
    *(_OWORD *)((char *)this + 248) = v114;
    *(_OWORD *)((char *)this + 264) = v115;
    *(_OWORD *)((char *)this + 184) = v110;
    *(_OWORD *)((char *)this + 200) = v111;
  }
  *((void *)this + 35) = v60;
  *((unsigned char *)this + 2) = v100;
  *((unsigned char *)this + 3) = v87;
  *((unsigned char *)this + 4) = v105;
  float v75 = 6356752.31 / sqrt(v71 * v71 + v72 * v72 + v79 * v79);
  *((unsigned char *)this + 5) = v104;
  *((unsigned char *)this + 6) = v92;
  *((unsigned char *)this + 7) = v91;
  float v76 = v89;
  *((_DWORD *)this + 11) = v85;
  *((_DWORD *)this + 12) = v84;
  *((_OWORD *)this + 9) = v82;
  *((_OWORD *)this + 10) = v81;
  *((float *)this + 13) = v75;
  *((_DWORD *)this + 14) = v80;
  *((_DWORD *)this + 15) = v74;
  *((unsigned char *)this + 10) = v99;
  *((unsigned char *)this + 11) = v98;
  float v77 = 0.0;
  if (v76 >= 1.0)
  {
    char v78 = 0;
  }
  else
  {
    float v77 = 1.0 - v76;
    char v78 = 1;
  }
  *((unsigned char *)this + 12) = v97;
  *((unsigned char *)this + 13) = v96;
  *((unsigned char *)this + 14) = v94;
  *((unsigned char *)this + 9) = v101 | v99 | v98 | v97 | v96 | v94;
  *((void *)this + 8) = v83;
  *((unsigned char *)this + 16) = v78;
  *((float *)this + 18) = v77;
  *((unsigned char *)this + 17) = v88;
  *((unsigned char *)this + 288) = *((unsigned char *)a2 + 3560);
}

void sub_1A1898504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a30);

  _Unwind_Resume(a1);
}

void md::SharedResource::addFrameRef(md::SharedResource *this, uint64_t a2)
{
  uint64_t v3 = (std::__shared_mutex_base *)*((void *)this + 2);
  if (!v3) {
    return;
  }
  unint64_t v5 = *(void *)this;
  int8x8_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (!v4 || (int8x8_t v7 = std::__shared_weak_count::lock(v4), (v59 = v7) == 0))
  {
    std::__throw_bad_weak_ptr[abi:nn180100]();
    goto LABEL_126;
  }
  uint8x8_t v8 = v7;
  if (!a2)
  {
LABEL_111:
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    return;
  }
  md::SharedResourcesManager::getReferencesForFrameStamp((md::SharedResourcesManager *)&v60, v3, a2, 1);
  if (!v61) {
    goto LABEL_108;
  }
  uint64_t v9 = &v3[1].__gate2_.__cv_.__opaque[16];
  uint64_t v10 = v60;
  uint64_t v11 = (std::__shared_mutex_base *)((char *)v3 + 208 * v60 + 304);
  std::__shared_mutex_base::lock_shared(v11);
  uint64_t v12 = (int8x8_t *)&v9[208 * v10];
  uint64_t v13 = v12 + 21;
  unint64_t v14 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
  unint64_t v15 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ (v14 >> 47) ^ v14);
  unint64_t v16 = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
  int8x8_t v17 = v12[22];
  if (!*(void *)&v17) {
    goto LABEL_26;
  }
  uint8x8_t v18 = (uint8x8_t)vcnt_s8(v17);
  v18.i16[0] = vaddlv_u8(v18);
  if (v18.u32[0] > 1uLL)
  {
    unint64_t v19 = v16;
    if (v16 >= *(void *)&v17) {
      unint64_t v19 = v16 % *(void *)&v17;
    }
  }
  else
  {
    unint64_t v19 = v16 & (*(void *)&v17 - 1);
  }
  uint64_t v20 = *(void **)(*(void *)v13 + 8 * v19);
  if (!v20 || (uint64_t v21 = (void *)*v20) == 0)
  {
LABEL_26:
    std::__shared_mutex_base::unlock_shared(v11);
    std::__shared_mutex_base::lock(v11);
    unint64_t v25 = (unint64_t)v13[1];
    if (v25)
    {
      uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
      v26.i16[0] = vaddlv_u8(v26);
      if (v26.u32[0] > 1uLL)
      {
        unint64_t v2 = v16;
        if (v16 >= v25) {
          unint64_t v2 = v16 % v25;
        }
      }
      else
      {
        unint64_t v2 = v16 & (v25 - 1);
      }
      uint64_t v27 = *(void **)(*(void *)v13 + 8 * v2);
      if (v27)
      {
        unint64_t v28 = (void *)*v27;
        if (v28)
        {
          if (v26.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v30 = v28[1];
              if (v30 == v16)
              {
                if (v28[2] == v5) {
                  goto LABEL_107;
                }
              }
              else if ((v30 & (v25 - 1)) != v2)
              {
                goto LABEL_47;
              }
              unint64_t v28 = (void *)*v28;
              if (!v28) {
                goto LABEL_47;
              }
            }
          }
          do
          {
            unint64_t v29 = v28[1];
            if (v29 == v16)
            {
              if (v28[2] == v5) {
                goto LABEL_107;
              }
            }
            else
            {
              if (v29 >= v25) {
                v29 %= v25;
              }
              if (v29 != v2) {
                break;
              }
            }
            unint64_t v28 = (void *)*v28;
          }
          while (v28);
        }
      }
    }
LABEL_47:
    uint64_t v31 = operator new(0x20uLL);
    uint64_t v32 = v13 + 2;
    uint64_t v64 = v31;
    uint64_t v65 = v13 + 2;
    *uint64_t v31 = 0;
    v31[1] = v16;
    v31[2] = v5;
    v31[3] = v8;
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    char v66 = 1;
    float v33 = (float)(unint64_t)(*(void *)&v13[3] + 1);
    float v34 = *(float *)v13[4].i32;
    if (v25 && (float)(v34 * (float)v25) >= v33)
    {
LABEL_97:
      int8x8_t v55 = *v13;
      uint64_t v56 = *(void **)(*(void *)v13 + 8 * v2);
      if (v56)
      {
        *uint64_t v31 = *v56;
      }
      else
      {
        *uint64_t v31 = *v32;
        *uint64_t v32 = (int8x8_t)v31;
        *(void *)(*(void *)&v55 + 8 * v2) = v32;
        if (!*v31) {
          goto LABEL_106;
        }
        unint64_t v57 = *(void *)(*v31 + 8);
        if ((v25 & (v25 - 1)) != 0)
        {
          if (v57 >= v25) {
            v57 %= v25;
          }
        }
        else
        {
          v57 &= v25 - 1;
        }
        uint64_t v56 = (void *)(*(void *)v13 + 8 * v57);
      }
      void *v56 = v31;
LABEL_106:
      ++*(void *)&v13[3];
      atomic_fetch_add((atomic_uint *volatile)(v5 + 24), 1u);
LABEL_107:
      std::__shared_mutex_base::unlock(v11);
LABEL_108:
      if (!v63) {
        goto LABEL_110;
      }
      goto LABEL_109;
    }
    BOOL v35 = 1;
    if (v25 >= 3) {
      BOOL v35 = (v25 & (v25 - 1)) != 0;
    }
    unint64_t v36 = v35 | (2 * v25);
    unint64_t v37 = vcvtps_u32_f32(v33 / v34);
    if (v36 <= v37) {
      size_t prime = v37;
    }
    else {
      size_t prime = v36;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v25 = (unint64_t)v13[1];
    if (prime <= v25)
    {
      if (prime >= v25) {
        goto LABEL_84;
      }
      unint64_t v49 = vcvtps_u32_f32((float)(unint64_t)v13[3] / *(float *)v13[4].i32);
      if (v25 < 3 || (uint8x8_t v50 = (uint8x8_t)vcnt_s8((int8x8_t)v25), v50.i16[0] = vaddlv_u8(v50), v50.u32[0] > 1uLL))
      {
        unint64_t v49 = std::__next_prime(v49);
      }
      else
      {
        uint64_t v51 = 1 << -(char)__clz(v49 - 1);
        if (v49 >= 2) {
          unint64_t v49 = v51;
        }
      }
      if (prime <= v49) {
        size_t prime = v49;
      }
      if (prime >= v25)
      {
        unint64_t v25 = (unint64_t)v13[1];
LABEL_84:
        if ((v25 & (v25 - 1)) != 0)
        {
          if (v16 >= v25) {
            unint64_t v2 = v16 % v25;
          }
          else {
            unint64_t v2 = v16;
          }
        }
        else
        {
          unint64_t v2 = (v25 - 1) & v16;
        }
        goto LABEL_97;
      }
      if (!prime)
      {
        char v58 = (void *)*v13;
        *uint64_t v13 = 0;
        if (v58) {
          operator delete(v58);
        }
        unint64_t v25 = 0;
        v13[1] = 0;
        goto LABEL_84;
      }
    }
    if (!(prime >> 61))
    {
      float v39 = operator new(8 * prime);
      __float2 v40 = (void *)*v13;
      *uint64_t v13 = (int8x8_t)v39;
      if (v40) {
        operator delete(v40);
      }
      uint64_t v41 = 0;
      v13[1] = (int8x8_t)prime;
      do
        *(void *)(*(void *)v13 + 8 * v41++) = 0;
      while (prime != v41);
      uint64_t v42 = (void *)*v32;
      if (!*(void *)v32) {
        goto LABEL_83;
      }
      size_t v43 = v42[1];
      size_t v44 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        size_t v45 = v43 & v44;
        *(void *)(*(void *)v13 + 8 * v45) = v32;
        for (unint64_t i = (void *)*v42; *v42; unint64_t i = (void *)*v42)
        {
          size_t v47 = i[1] & v44;
          if (v47 == v45)
          {
            uint64_t v42 = i;
          }
          else if (*(void *)(*(void *)v13 + 8 * v47))
          {
            void *v42 = *i;
            uint64_t v48 = 8 * v47;
            void *i = **(void **)(*(void *)v13 + v48);
            **(void **)(*(void *)v13 + v48) = i;
          }
          else
          {
            *(void *)(*(void *)v13 + 8 * v47) = v42;
            uint64_t v42 = i;
            size_t v45 = v47;
          }
        }
LABEL_83:
        unint64_t v25 = prime;
        goto LABEL_84;
      }
      if (v43 >= prime) {
        v43 %= prime;
      }
      *(void *)(*(void *)v13 + 8 * v43) = v32;
      uint64_t v52 = (void *)*v42;
      if (!*v42) {
        goto LABEL_83;
      }
      while (1)
      {
        size_t v54 = v52[1];
        if (v54 >= prime) {
          v54 %= prime;
        }
        if (v54 != v43)
        {
          if (!*(void *)(*(void *)v13 + 8 * v54))
          {
            *(void *)(*(void *)v13 + 8 * v54) = v42;
            goto LABEL_88;
          }
          void *v42 = *v52;
          uint64_t v53 = 8 * v54;
          void *v52 = **(void **)(*(void *)v13 + v53);
          **(void **)(*(void *)v13 + v53) = v52;
          uint64_t v52 = v42;
        }
        size_t v54 = v43;
LABEL_88:
        uint64_t v42 = v52;
        uint64_t v52 = (void *)*v52;
        size_t v43 = v54;
        if (!v52) {
          goto LABEL_83;
        }
      }
    }
LABEL_126:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  if (v18.u32[0] < 2uLL)
  {
    uint64_t v22 = *(void *)&v17 - 1;
    while (1)
    {
      uint64_t v24 = v21[1];
      if (v16 == v24)
      {
        if (v21[2] == v5) {
          goto LABEL_114;
        }
      }
      else if ((v24 & v22) != v19)
      {
        goto LABEL_26;
      }
      uint64_t v21 = (void *)*v21;
      if (!v21) {
        goto LABEL_26;
      }
    }
  }
  while (1)
  {
    unint64_t v23 = v21[1];
    if (v16 == v23) {
      break;
    }
    if (v23 >= *(void *)&v17) {
      v23 %= *(void *)&v17;
    }
    if (v23 != v19) {
      goto LABEL_26;
    }
LABEL_16:
    uint64_t v21 = (void *)*v21;
    if (!v21) {
      goto LABEL_26;
    }
  }
  if (v21[2] != v5) {
    goto LABEL_16;
  }
LABEL_114:
  std::__shared_mutex_base::unlock_shared(v11);
  if (v63) {
LABEL_109:
  }
    std::__shared_mutex_base::unlock_shared(v62);
LABEL_110:
  uint8x8_t v8 = v59;
  if (v59) {
    goto LABEL_111;
  }
}

void sub_1A1898C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_mutex_base *a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  std::unique_ptr<std::__hash_node<std::shared_ptr<md::InjectedAsset>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<md::InjectedAsset>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)&a17);
  std::__shared_mutex_base::unlock(v19);
  if (a15) {
    std::__shared_mutex_base::unlock_shared(a14);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void md::SharedResourcesManager::getReferencesForFrameStamp(md::SharedResourcesManager *this, std::__shared_mutex_base *a2, uint64_t a3, int a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  std::__shared_mutex_base::lock_shared(a2);
  if (*(void *)a2[1].__mut_.__m_.__opaque == a3)
  {
    opaque = a2[1].__mut_.__m_.__opaque;
LABEL_24:
    *(void *)this = (opaque - a2[1].__mut_.__m_.__opaque) >> 3;
LABEL_25:
    *((unsigned char *)this + 8) = 1;
    *((void *)this + 2) = a2;
    *((unsigned char *)this + 24) = 1;
    return;
  }
  opaque = &a2[1].__mut_.__m_.__opaque[8];
  if (*(void *)&a2[1].__mut_.__m_.__opaque[8] == a3) {
    goto LABEL_24;
  }
  opaque = &a2[1].__mut_.__m_.__opaque[16];
  if (*(void *)&a2[1].__mut_.__m_.__opaque[16] == a3) {
    goto LABEL_24;
  }
  opaque = &a2[1].__mut_.__m_.__opaque[24];
  if (*(void *)&a2[1].__mut_.__m_.__opaque[24] == a3) {
    goto LABEL_24;
  }
  opaque = &a2[1].__mut_.__m_.__opaque[32];
  if (*(void *)&a2[1].__mut_.__m_.__opaque[32] == a3) {
    goto LABEL_24;
  }
  opaque = &a2[1].__mut_.__m_.__opaque[40];
  if (*(void *)&a2[1].__mut_.__m_.__opaque[40] == a3) {
    goto LABEL_24;
  }
  opaque = &a2[1].__mut_.__m_.__opaque[48];
  if (*(void *)&a2[1].__mut_.__m_.__opaque[48] == a3) {
    goto LABEL_24;
  }
  opaque = (char *)&a2[1].__gate1_;
  if (a2[1].__gate1_.__cv_.__sig == a3) {
    goto LABEL_24;
  }
  opaque = a2[1].__gate1_.__cv_.__opaque;
  if (*(void *)a2[1].__gate1_.__cv_.__opaque == a3) {
    goto LABEL_24;
  }
  opaque = &a2[1].__gate1_.__cv_.__opaque[8];
  if (*(void *)&a2[1].__gate1_.__cv_.__opaque[8] == a3) {
    goto LABEL_24;
  }
  if (*(void *)&a2[1].__gate1_.__cv_.__opaque[16] == a3)
  {
    opaque = &a2[1].__gate1_.__cv_.__opaque[16];
    goto LABEL_24;
  }
  if (*(void *)&a2[1].__gate1_.__cv_.__opaque[24] == a3)
  {
    opaque = &a2[1].__gate1_.__cv_.__opaque[24];
    goto LABEL_24;
  }
  if (*(void *)&a2[1].__gate1_.__cv_.__opaque[32] == a3)
  {
    opaque = &a2[1].__gate1_.__cv_.__opaque[32];
    goto LABEL_24;
  }
  if (a2[1].__gate2_.__cv_.__sig == a3)
  {
    opaque = (char *)&a2[1].__gate2_;
    goto LABEL_24;
  }
  if (*(void *)a2[1].__gate2_.__cv_.__opaque == a3)
  {
    opaque = a2[1].__gate2_.__cv_.__opaque;
    goto LABEL_24;
  }
  if (*(void *)&a2[1].__gate2_.__cv_.__opaque[8] == a3)
  {
    opaque = &a2[1].__gate2_.__cv_.__opaque[8];
    goto LABEL_24;
  }
  if (a4)
  {
    std::__shared_mutex_base::unlock_shared(a2);
    std::__shared_mutex_base::lock(a2);
    uint64_t sig = a2[1].__mut_.__m_.__sig;
    a2[1].__mut_.__m_.__uint64_t sig = ((_BYTE)sig + 1) & 0xF;
    *(void *)&a2[1].__mut_.__m_.__opaque[8 * sig] = a3;
    uint64_t v10 = (std::__shared_mutex_base *)((char *)a2 + 208 * sig + 304);
    std::__shared_mutex_base::lock_shared(v10);
    uint64_t v11 = *(void *)&v10[1].__mut_.__m_.__opaque[16];
    std::__shared_mutex_base::unlock_shared(v10);
    if (v11)
    {
      if (GEOGetVectorKitSharedResourcesLog(void)::onceToken != -1) {
        dispatch_once(&GEOGetVectorKitSharedResourcesLog(void)::onceToken, &__block_literal_global_40591);
      }
      uint64_t v12 = GEOGetVectorKitSharedResourcesLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitSharedResourcesLog(void)::log, OS_LOG_TYPE_ERROR))
      {
        int v13 = 136315650;
        unint64_t v14 = "wasEmpty";
        __int16 v15 = 2080;
        unint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/SharedResourcesManager.mm";
        __int16 v17 = 1024;
        int v18 = 117;
        _os_log_impl(&dword_1A1780000, v12, OS_LOG_TYPE_ERROR, "We may not be tracking resources correctly: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&v13, 0x1Cu);
      }
    }
    md::SharedResourcesManager::FrameReferences::clear(v10);
    std::__shared_mutex_base::unlock(a2);
    std::__shared_mutex_base::lock_shared(a2);
    *(void *)this = sig;
    goto LABEL_25;
  }
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 8) = 0;
  *((void *)this + 2) = 0;
  *((unsigned char *)this + 24) = 0;
  std::__shared_mutex_base::unlock_shared(a2);
}

void sub_1A1898F84(_Unwind_Exception *a1)
{
  std::__shared_mutex_base::unlock(v1);
  _Unwind_Resume(a1);
}

void md::DaVinciGroundRenderLayer::layoutRibbons(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v87 = a5;
  uint64_t v88 = a4;
  char v86 = a6;
  uint64_t v10 = *(void **)(a2 + 8);
  int8x8_t v11 = (int8x8_t)v10[1];
  if (!*(void *)&v11) {
    goto LABEL_24;
  }
  uint8x8_t v12 = (uint8x8_t)vcnt_s8(v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    unint64_t v13 = 0xDFC317497CF9A4BFLL;
    if (*(void *)&v11 <= 0xDFC317497CF9A4BFLL) {
      unint64_t v13 = 0xDFC317497CF9A4BFLL % *(void *)&v11;
    }
  }
  else
  {
    unint64_t v13 = (*(void *)&v11 - 1) & 0xDFC317497CF9A4BFLL;
  }
  unint64_t v14 = *(void **)(*v10 + 8 * v13);
  if (!v14) {
    goto LABEL_24;
  }
  __int16 v15 = (void *)*v14;
  if (!v15) {
    goto LABEL_24;
  }
  if (v12.u32[0] < 2uLL)
  {
    uint64_t v16 = *(void *)&v11 - 1;
    while (1)
    {
      uint64_t v18 = v15[1];
      if (v18 == 0xDFC317497CF9A4BFLL)
      {
        if (v15[2] == 0xDFC317497CF9A4BFLL) {
          goto LABEL_22;
        }
      }
      else if ((v18 & v16) != v13)
      {
        goto LABEL_24;
      }
      __int16 v15 = (void *)*v15;
      if (!v15) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v17 = v15[1];
    if (v17 == 0xDFC317497CF9A4BFLL) {
      break;
    }
    if (v17 >= *(void *)&v11) {
      v17 %= *(void *)&v11;
    }
    if (v17 != v13) {
      goto LABEL_24;
    }
LABEL_11:
    __int16 v15 = (void *)*v15;
    if (!v15) {
      goto LABEL_24;
    }
  }
  if (v15[2] != 0xDFC317497CF9A4BFLL) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v19 = v15[5];
  if (*(void *)(v19 + 8) == 0xDFC317497CF9A4BFLL)
  {
    uint64_t v20 = *(void *)(v19 + 32);
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v20 = 0;
LABEL_25:
  uint64_t v21 = +[VKDebugSettings sharedSettings];
  char v22 = [v21 daVinciWireframeEnabled];

  char v85 = v22;
  unint64_t v23 = *(uint64_t **)(a1 + 3128);
  uint64_t v25 = *v23;
  uint64_t v24 = (std::__shared_weak_count *)v23[1];
  uint64_t v83 = v25;
  int v84 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v26 = *(void *)(a4 + 384);
  uint64_t v82 = v26;
  [*(id *)(*(void *)(a1 + 40) + 104) contentScale];
  *(float *)&double v27 = v27;
  int v81 = LODWORD(v27);
  unint64_t v28 = *(uint64_t **)(a2 + 8);
  int8x8_t v29 = (int8x8_t)v28[1];
  if (!*(void *)&v29) {
    goto LABEL_50;
  }
  uint8x8_t v30 = (uint8x8_t)vcnt_s8(v29);
  v30.i16[0] = vaddlv_u8(v30);
  if (v30.u32[0] > 1uLL)
  {
    unint64_t v31 = 0xD2404CDD1F9A6950;
    if (*(void *)&v29 <= 0xD2404CDD1F9A6950) {
      unint64_t v31 = 0xD2404CDD1F9A6950 % *(void *)&v29;
    }
  }
  else
  {
    unint64_t v31 = (*(void *)&v29 - 1) & 0xD2404CDD1F9A6950;
  }
  uint64_t v32 = *(void **)(*v28 + 8 * v31);
  if (!v32) {
    goto LABEL_50;
  }
  float v33 = (void *)*v32;
  if (!v33) {
    goto LABEL_50;
  }
  if (v30.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v35 = v33[1];
      if (v35 == 0xD2404CDD1F9A6950)
      {
        if (v33[2] == 0xD2404CDD1F9A6950) {
          goto LABEL_48;
        }
      }
      else if ((v35 & (*(void *)&v29 - 1)) != v31)
      {
        goto LABEL_50;
      }
      float v33 = (void *)*v33;
      if (!v33) {
        goto LABEL_50;
      }
    }
  }
  while (2)
  {
    unint64_t v34 = v33[1];
    if (v34 != 0xD2404CDD1F9A6950)
    {
      if (v34 >= *(void *)&v29) {
        v34 %= *(void *)&v29;
      }
      if (v34 != v31) {
        goto LABEL_50;
      }
      goto LABEL_37;
    }
    if (v33[2] != 0xD2404CDD1F9A6950)
    {
LABEL_37:
      float v33 = (void *)*v33;
      if (!v33) {
        goto LABEL_50;
      }
      continue;
    }
    break;
  }
LABEL_48:
  uint64_t v36 = v33[5];
  if (*(void *)(v36 + 8) == 0xD2404CDD1F9A6950)
  {
    uint64_t v37 = *(void *)(v36 + 32);
    goto LABEL_51;
  }
LABEL_50:
  uint64_t v37 = 0;
LABEL_51:
  int v80 = 1045220557;
  __asm { FMOV            V0.4S, #1.0 }
  long long v79 = _Q0;
  if (v20) {
    BOOL v43 = *(unsigned char *)(v20 + 64) != 0;
  }
  else {
    BOOL v43 = 0;
  }
  BOOL v78 = v43;
  char v77 = 0;
  char v76 = 0;
  uint64_t v44 = *(void *)(*(void *)(a1 + 40) + 24);
  if (!*(void *)&v29)
  {
    uint64_t v75 = 0;
    goto LABEL_104;
  }
  uint8x8_t v45 = (uint8x8_t)vcnt_s8(v29);
  v45.i16[0] = vaddlv_u8(v45);
  if (v45.u32[0] > 1uLL)
  {
    uint64_t v46 = 0x1AF456233693CD46;
    if (*(void *)&v29 <= 0x1AF456233693CD46uLL) {
      uint64_t v46 = 0x1AF456233693CD46uLL % *(void *)&v29;
    }
  }
  else
  {
    uint64_t v46 = (*(void *)&v29 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v47 = *v28;
  uint64_t v48 = *(void **)(v47 + 8 * v46);
  if (!v48 || (unint64_t v49 = (void *)*v48) == 0)
  {
    uint64_t v75 = 0;
    goto LABEL_81;
  }
  if (v45.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v51 = v49[1];
      if (v51 == 0x1AF456233693CD46)
      {
        if (v49[2] == 0x1AF456233693CD46) {
          goto LABEL_77;
        }
      }
      else if ((v51 & (*(void *)&v29 - 1)) != v46)
      {
        goto LABEL_79;
      }
      unint64_t v49 = (void *)*v49;
      if (!v49) {
        goto LABEL_79;
      }
    }
  }
  while (2)
  {
    unint64_t v50 = v49[1];
    if (v50 != 0x1AF456233693CD46)
    {
      if (v50 >= *(void *)&v29) {
        v50 %= *(void *)&v29;
      }
      if (v50 != v46) {
        goto LABEL_79;
      }
      goto LABEL_65;
    }
    if (v49[2] != 0x1AF456233693CD46)
    {
LABEL_65:
      unint64_t v49 = (void *)*v49;
      if (!v49) {
        goto LABEL_79;
      }
      continue;
    }
    break;
  }
LABEL_77:
  uint64_t v52 = v49[5];
  if (*(void *)(v52 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v53 = *(void *)(v52 + 32);
    goto LABEL_80;
  }
LABEL_79:
  uint64_t v53 = 0;
LABEL_80:
  uint64_t v75 = v53;
LABEL_81:
  if (v45.u32[0] > 1uLL)
  {
    uint64_t v54 = 0x41E8D6E445F4145;
    if (*(void *)&v29 <= 0x41E8D6E445F4145uLL) {
      uint64_t v54 = 0x41E8D6E445F4145uLL % *(void *)&v29;
    }
  }
  else
  {
    uint64_t v54 = (*(void *)&v29 - 1) & 0x41E8D6E445F4145;
  }
  int8x8_t v55 = *(void **)(v47 + 8 * v54);
  if (!v55) {
    goto LABEL_103;
  }
  uint64_t v56 = (void *)*v55;
  if (!v56) {
    goto LABEL_103;
  }
  if (v45.u32[0] < 2uLL)
  {
    uint64_t v57 = *(void *)&v29 - 1;
    while (1)
    {
      uint64_t v59 = v56[1];
      if (v59 == 0x41E8D6E445F4145)
      {
        if (v56[2] == 0x41E8D6E445F4145) {
          goto LABEL_101;
        }
      }
      else if ((v59 & v57) != v54)
      {
        goto LABEL_103;
      }
      uint64_t v56 = (void *)*v56;
      if (!v56) {
        goto LABEL_103;
      }
    }
  }
  while (2)
  {
    unint64_t v58 = v56[1];
    if (v58 != 0x41E8D6E445F4145)
    {
      if (v58 >= *(void *)&v29) {
        v58 %= *(void *)&v29;
      }
      if (v58 != v54) {
        goto LABEL_103;
      }
      goto LABEL_90;
    }
    if (v56[2] != 0x41E8D6E445F4145)
    {
LABEL_90:
      uint64_t v56 = (void *)*v56;
      if (!v56) {
        goto LABEL_103;
      }
      continue;
    }
    break;
  }
LABEL_101:
  uint64_t v60 = (int8x8_t *)v56[5];
  if (*(void *)&v60[1] == 0x41E8D6E445F4145)
  {
    int8x8_t v29 = v60[4];
    goto LABEL_104;
  }
LABEL_103:
  int8x8_t v29 = 0;
LABEL_104:
  int8x8_t v74 = v29;
  uint64_t v73 = a1 + 528;
  v72[0] = a3;
  v72[1] = (uint64_t)&v79;
  v72[2] = (uint64_t)&v80;
  v72[3] = (uint64_t)&v83;
  v72[4] = (uint64_t)&v77;
  v72[5] = a1;
  v72[6] = (uint64_t)&v81;
  v72[7] = a2;
  v72[8] = v37;
  v72[9] = a1 + 3144;
  v72[10] = (uint64_t)&v76;
  v72[11] = v44;
  v72[12] = (uint64_t)&v78;
  v72[13] = (uint64_t)&v86;
  v72[14] = (uint64_t)&v88;
  v72[15] = (uint64_t)&v74;
  v72[16] = (uint64_t)&v82;
  v72[17] = (uint64_t)&v73;
  v72[18] = (uint64_t)&v75;
  v72[19] = (uint64_t)&v85;
  v72[20] = (uint64_t)&v87;
  uint64_t v61 = *(void *)(v26 + 1072);
  if (*(void *)(v26 + 1080) != v61)
  {
    unint64_t v62 = 0;
    do
    {
      uint64_t v63 = v61 + 56 * v62;
      uint64_t v64 = *(uint64_t **)(v63 + 32);
      uint64_t v65 = *(uint64_t **)(v63 + 40);
      while (v64 != v65)
      {
        uint64_t v66 = v64[2];
        uint64_t v67 = (std::__shared_weak_count *)v64[3];
        if (v67) {
          atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        md::DaVinciGroundRenderLayer::layoutRibbons(md::LayoutContext const&,md::DaVinciGroundRenderLayer::MeshLayoutContext const&,md::DaVinciGroundRenderable *,ggl::CommandBuffer *,BOOL)::$_0::operator()(v72, v64, 0, v66, v67);
        if (v67)
        {
          if (!atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        v64 += 4;
      }
      uint64_t v68 = v61 + 56 * v62;
      uint64_t v69 = *(void *)(v68 + 8);
      for (uint64_t i = *(void *)(v68 + 16); v69 != i; v69 += 24)
        md::DaVinciGroundRenderLayer::layoutRibbons(md::LayoutContext const&,md::DaVinciGroundRenderLayer::MeshLayoutContext const&,md::DaVinciGroundRenderable *,ggl::CommandBuffer *,BOOL)::$_0::operator()(v72, (uint64_t *)v69, *(void *)(v69 + 16), 0, 0);
      ++v62;
      uint64_t v61 = *(void *)(v82 + 1072);
    }
    while (v62 < 0x6DB6DB6DB6DB6DB7 * ((*(void *)(v82 + 1080) - v61) >> 3));
  }
  double v71 = v84;
  if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
    std::__shared_weak_count::__release_weak(v71);
  }
}

void sub_1A18996B4(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 - 120);
  _Unwind_Resume(a1);
}

md::RibbonLayoutContext *md::RibbonLayoutContext::RibbonLayoutContext(md::RibbonLayoutContext *this, const md::LayoutContext *a2)
{
  *(void *)this = a2;
  *((unsigned char *)this + 76) = 0;
  *((void *)this + 10) = 0;
  *((unsigned char *)this + 88) = 0;
  *((void *)this + 12) = 0;
  *((unsigned char *)this + 104) = 0;
  uint64_t v3 = (void *)*((void *)a2 + 1);
  int8x8_t v4 = (int8x8_t)v3[1];
  if (!*(void *)&v4) {
    goto LABEL_24;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x1AF456233693CD46;
    if (*(void *)&v4 <= 0x1AF456233693CD46uLL) {
      uint64_t v6 = 0x1AF456233693CD46uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x1AF456233693CD46;
  }
  int8x8_t v7 = *(void **)(*v3 + 8 * v6);
  if (!v7) {
    goto LABEL_24;
  }
  uint8x8_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_24;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v11 = v8[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v8[2] == 0x1AF456233693CD46) {
          goto LABEL_22;
        }
      }
      else if ((v11 & v9) != v6)
      {
        goto LABEL_24;
      }
      uint8x8_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v8[1];
    if (v10 == 0x1AF456233693CD46) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_24;
    }
LABEL_11:
    uint8x8_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_24;
    }
  }
  if (v8[2] != 0x1AF456233693CD46) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v12 = v8[5];
  if (*(void *)(v12 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v13 = 0;
LABEL_25:
  id v14 = *(id *)a2;
  [v14 sizeInPixels];
  *((void *)this + 3) = v15;
  *((void *)this + 4) = v16;
  [v14 size];
  *((void *)this + 5) = v17;
  *((void *)this + 6) = v18;
  *(float *)&uint64_t v17 = fmaxf(*(float *)(v13 + 3080) + *(float *)(v13 + 3076), 1.0);
  *((_DWORD *)this + 2) = v17;
  int v19 = vcvtms_s32_f32(*(float *)&v17);
  int v20 = v19 & ~(v19 >> 31);
  if (v20 >= 23) {
    char v21 = 23;
  }
  else {
    char v21 = v20;
  }
  *((unsigned char *)this + 12) = v21;
  if (v20 >= 22) {
    LOBYTE(v20) = 22;
  }
  *((unsigned char *)this + 13) = v20 + 1;
  [v14 contentScale];
  *(float *)&double v22 = v22;
  v23.i8[0] = *((unsigned char *)this + 12);
  *((float *)this + 4) = *((float *)this + 2) - (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v23)).i32[0];
  *((_DWORD *)this + 5) = LODWORD(v22);
  *(float *)&double v22 = 0.9 / *(float *)&v22;
  float v24 = *(double *)(v13 + 40);
  *((_DWORD *)this + 15) = LODWORD(v22);
  *((float *)this + 16) = fminf(v24 * 1.2732, 1.0);
  *((_WORD *)this + 28) = 0;

  return this;
}

void sub_1A1899914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  unint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint8x8_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "DaVinciCenterlineRoadsLayout", "", v5, 2u);
  }
}

void std::__function::__func<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciCenterLineRoadsRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  unint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint8x8_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "DaVinciCenterlineRoadsLayout", "", v5, 2u);
  }
}

double md::DaVinciCenterLineRoadsTileData::updateViewAndTransformConstantData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  if ((*(unsigned char *)(a2 + 16) & 2) == 0
    && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
  {
    char v21 = &v19;
    int v20 = &v21;
    std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v20, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
  }
  int8x8_t v7 = *(_DWORD **)(a2 + 72);
  if (!v6) {
    int8x8_t v7 = 0;
  }
  uint8x8_t v8 = *(void **)(a1 + 824);
  unint64_t v9 = v8[1];
  unint64_t v10 = (_DWORD *)v8[9];
  *unint64_t v10 = *v7;
  v10[1] = v7[1];
  void v10[2] = v7[2];
  v10[3] = v7[3];
  void v10[4] = v7[4];
  v10[5] = v7[5];
  v10[6] = v7[6];
  v10[7] = v7[7];
  v10[8] = v7[8];
  v10[9] = v7[9];
  v10[10] = v7[10];
  v10[11] = v7[11];
  v10[12] = v7[12];
  v10[13] = v7[13];
  v10[14] = v7[14];
  v10[15] = v7[15];
  v10[16] = v7[16];
  unint64_t v11 = v8[8];
  if (v11 <= v9) {
    unint64_t v11 = v9;
  }
  v8[7] = 0;
  v8[8] = v11;
  uint64_t v12 = *(void *)(a3 + 8);
  if ((*(unsigned char *)(a3 + 16) & 2) == 0
    && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
  {
    char v21 = &v19;
    int v20 = &v21;
    std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v20, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
  }
  if (v12) {
    uint64_t v13 = *(__n128 **)(a3 + 72);
  }
  else {
    uint64_t v13 = 0;
  }
  id v14 = *(void **)(a1 + 840);
  unint64_t v15 = v14[1];
  if (v15)
  {
    *(void *)&double result = ggl::Tile::Transform::operator=((__n128 *)v14[9], v13).n128_u64[0];
    if (v17)
    {
      unint64_t v18 = v14[8];
      if (v18 <= v15) {
        unint64_t v18 = v15;
      }
      v14[7] = 0;
      unsigned char v14[8] = v18;
    }
  }
  else
  {
    *(void *)&double result = ggl::Tile::Transform::operator=(0, v13).n128_u64[0];
  }
  return result;
}

__n128 ggl::Tile::Transform::operator=(__n128 *a1, __n128 *a2)
{
  a1->n128_u32[0] = a2->n128_u32[0];
  a1->n128_u32[1] = a2->n128_u32[1];
  a1->n128_u32[2] = a2->n128_u32[2];
  a1->n128_u32[3] = a2->n128_u32[3];
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  a1[1].n128_u32[1] = a2[1].n128_u32[1];
  a1[1].n128_u32[2] = a2[1].n128_u32[2];
  a1[2].n128_u32[0] = a2[2].n128_u32[0];
  a1[2].n128_u32[1] = a2[2].n128_u32[1];
  a1[2].n128_u32[2] = a2[2].n128_u32[2];
  a1[2].n128_u32[3] = a2[2].n128_u32[3];
  a1[3].n128_u32[0] = a2[3].n128_u32[0];
  a1[3].n128_u32[1] = a2[3].n128_u32[1];
  a1[3].n128_u32[2] = a2[3].n128_u32[2];
  a1[3].n128_u32[3] = a2[3].n128_u32[3];
  a1[4].n128_u32[0] = a2[4].n128_u32[0];
  a1[4].n128_u32[1] = a2[4].n128_u32[1];
  a1[4].n128_u32[2] = a2[4].n128_u32[2];
  a1[4].n128_u32[3] = a2[4].n128_u32[3];
  a1[5].n128_u32[0] = a2[5].n128_u32[0];
  a1[5].n128_u32[1] = a2[5].n128_u32[1];
  a1[5].n128_u32[2] = a2[5].n128_u32[2];
  a1[5].n128_u32[3] = a2[5].n128_u32[3];
  a1[6].n128_u32[0] = a2[6].n128_u32[0];
  a1[6].n128_u32[1] = a2[6].n128_u32[1];
  a1[6].n128_u32[2] = a2[6].n128_u32[2];
  a1[6].n128_u32[3] = a2[6].n128_u32[3];
  a1[7].n128_u32[0] = a2[7].n128_u32[0];
  a1[7].n128_u32[1] = a2[7].n128_u32[1];
  a1[7].n128_u32[2] = a2[7].n128_u32[2];
  a1[7].n128_u32[3] = a2[7].n128_u32[3];
  a1[8].n128_u32[0] = a2[8].n128_u32[0];
  a1[8].n128_u32[1] = a2[8].n128_u32[1];
  a1[8].n128_u32[2] = a2[8].n128_u32[2];
  a1[8].n128_u32[3] = a2[8].n128_u32[3];
  a1[9].n128_u32[0] = a2[9].n128_u32[0];
  a1[9].n128_u32[1] = a2[9].n128_u32[1];
  a1[9].n128_u32[2] = a2[9].n128_u32[2];
  a1[9].n128_u32[3] = a2[9].n128_u32[3];
  a1[10].n128_u32[0] = a2[10].n128_u32[0];
  a1[10].n128_u32[1] = a2[10].n128_u32[1];
  a1[10].n128_u32[2] = a2[10].n128_u32[2];
  a1[10].n128_u32[3] = a2[10].n128_u32[3];
  a1[11].n128_u32[0] = a2[11].n128_u32[0];
  a1[11].n128_u32[1] = a2[11].n128_u32[1];
  a1[11].n128_u32[2] = a2[11].n128_u32[2];
  a1[11].n128_u32[3] = a2[11].n128_u32[3];
  a1[12].n128_u32[0] = a2[12].n128_u32[0];
  a1[12].n128_u32[1] = a2[12].n128_u32[1];
  a1[12].n128_u32[2] = a2[12].n128_u32[2];
  a1[12].n128_u32[3] = a2[12].n128_u32[3];
  a1[13].n128_u32[0] = a2[13].n128_u32[0];
  a1[13].n128_u32[1] = a2[13].n128_u32[1];
  a1[13].n128_u32[2] = a2[13].n128_u32[2];
  a1[13].n128_u32[3] = a2[13].n128_u32[3];
  a1[14].n128_u32[0] = a2[14].n128_u32[0];
  a1[14].n128_u32[1] = a2[14].n128_u32[1];
  a1[14].n128_u32[2] = a2[14].n128_u32[2];
  a1[14].n128_u32[3] = a2[14].n128_u32[3];
  a1[15].n128_u32[0] = a2[15].n128_u32[0];
  a1[15].n128_u32[1] = a2[15].n128_u32[1];
  a1[15].n128_u32[2] = a2[15].n128_u32[2];
  a1[15].n128_u32[3] = a2[15].n128_u32[3];
  a1[16].n128_u32[0] = a2[16].n128_u32[0];
  a1[16].n128_u32[1] = a2[16].n128_u32[1];
  a1[16].n128_u32[2] = a2[16].n128_u32[2];
  a1[16].n128_u32[3] = a2[16].n128_u32[3];
  a1[17].n128_u32[0] = a2[17].n128_u32[0];
  a1[17].n128_u32[1] = a2[17].n128_u32[1];
  a1[17].n128_u32[2] = a2[17].n128_u32[2];
  a1[17].n128_u32[3] = a2[17].n128_u32[3];
  a1[18].n128_u32[0] = a2[18].n128_u32[0];
  a1[18].n128_u32[1] = a2[18].n128_u32[1];
  a1[18].n128_u32[2] = a2[18].n128_u32[2];
  a1[18].n128_u32[3] = a2[18].n128_u32[3];
  a1[19].n128_u32[0] = a2[19].n128_u32[0];
  a1[19].n128_u32[1] = a2[19].n128_u32[1];
  a1[19].n128_u32[2] = a2[19].n128_u32[2];
  a1[20].n128_u32[0] = a2[20].n128_u32[0];
  a1[20].n128_u32[1] = a2[20].n128_u32[1];
  a1[20].n128_u32[2] = a2[20].n128_u32[2];
  __n128 result = a2[21];
  a1[21] = result;
  return result;
}

void std::__function::__func<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  unint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint8x8_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "DaVinciCenterlineRoadsLayout", "", v5, 2u);
  }
}

void std::__function::__func<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::DaVinciHikingRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  unint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint8x8_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "DaVinciCenterlineRoadsLayout", "", v5, 2u);
  }
}

void md::RoadLayer::setSharedResources(void *a1, uint64_t a2)
{
  a1[25] = a2;
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  while (v2 != v3)
  {
    os_signpost_id_t v4 = *(void **)v2;
    uint8x8_t v5 = *(void **)(*(void *)(*(void *)v2 + 8) + 200);
    **(void **)(*(void *)(*(void *)v2 + 1112) + 96) = *(void *)(v5[15] + 16);
    **(void **)(v4[138] + 96) = *(void *)(v5[15] + 16);
    **(void **)(v4[136] + 96) = *(void *)(v5[15] + 16);
    uint64_t v6 = (void *)v4[137];
    uint64_t v8 = v5[3];
    int8x8_t v7 = (std::__shared_weak_count *)v5[4];
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v8 && **(void **)(v8 + 40) == v6[1])
    {
      uint64_t v10 = v6[2];
      if (v10 && v10 != v8) {
        ggl::PipelineSetup::resetData((uint64_t)v6);
      }
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v9 = (std::__shared_weak_count *)v6[3];
      void v6[2] = v8;
      v6[3] = v7;
      if (!v9) {
        goto LABEL_17;
      }
    }
    else
    {
      unint64_t v9 = (std::__shared_weak_count *)v6[3];
      void v6[2] = 0;
      v6[3] = 0;
      if (!v9) {
        goto LABEL_17;
      }
    }
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (!v7) {
        goto LABEL_21;
      }
      goto LABEL_18;
    }
LABEL_17:
    if (!v7) {
      goto LABEL_21;
    }
LABEL_18:
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
LABEL_21:
    **(void **)(v4[137] + 96) = *(void *)(v5[16] + 16);
    unint64_t v11 = (void *)v4[140];
    uint64_t v13 = v5[7];
    uint64_t v12 = (std::__shared_weak_count *)v5[8];
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v13 && **(void **)(v13 + 40) == v11[1])
    {
      uint64_t v15 = v11[2];
      if (v15 && v15 != v13) {
        ggl::PipelineSetup::resetData((uint64_t)v11);
      }
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      id v14 = (std::__shared_weak_count *)v11[3];
      v11[2] = v13;
      void v11[3] = v12;
      if (!v14) {
        goto LABEL_34;
      }
    }
    else
    {
      id v14 = (std::__shared_weak_count *)v11[3];
      v11[2] = 0;
      void v11[3] = 0;
      if (!v14) {
        goto LABEL_34;
      }
    }
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      if (!v12) {
        goto LABEL_38;
      }
      goto LABEL_35;
    }
LABEL_34:
    if (!v12) {
      goto LABEL_38;
    }
LABEL_35:
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
LABEL_38:
    **(void **)(v4[140] + 96) = *(void *)(v5[15] + 16);
    uint64_t v16 = (void *)v4[141];
    uint64_t v18 = v5[5];
    uint64_t v17 = (std::__shared_weak_count *)v5[6];
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v18 && **(void **)(v18 + 40) == v16[1])
    {
      uint64_t v20 = v16[2];
      if (v20 && v20 != v18) {
        ggl::PipelineSetup::resetData((uint64_t)v16);
      }
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v19 = (std::__shared_weak_count *)v16[3];
      uint64_t v16[2] = v18;
      void v16[3] = v17;
      if (!v19) {
        goto LABEL_51;
      }
    }
    else
    {
      char v19 = (std::__shared_weak_count *)v16[3];
      uint64_t v16[2] = 0;
      void v16[3] = 0;
      if (!v19) {
        goto LABEL_51;
      }
    }
    if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      if (!v17) {
        goto LABEL_55;
      }
      goto LABEL_52;
    }
LABEL_51:
    if (!v17) {
      goto LABEL_55;
    }
LABEL_52:
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
LABEL_55:
    *(void *)(*(void *)(v4[141] + 96) + 8) = *(void *)(v5[16] + 16);
    *(void *)(*(void *)(v4[141] + 96) + 16) = *(void *)(v5[15] + 16);
    char v21 = (void *)v4[142];
    uint64_t v23 = v5[1];
    double v22 = (std::__shared_weak_count *)v5[2];
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v23 && **(void **)(v23 + 40) == v21[1])
    {
      uint64_t v25 = v21[2];
      if (v25 && v25 != v23) {
        ggl::PipelineSetup::resetData((uint64_t)v21);
      }
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      float v24 = (std::__shared_weak_count *)v21[3];
      void v21[2] = v23;
      void v21[3] = v22;
      if (!v24)
      {
LABEL_68:
        if (v22) {
          goto LABEL_69;
        }
        goto LABEL_3;
      }
    }
    else
    {
      float v24 = (std::__shared_weak_count *)v21[3];
      void v21[2] = 0;
      void v21[3] = 0;
      if (!v24) {
        goto LABEL_68;
      }
    }
    if (atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_68;
    }
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if (v22)
    {
LABEL_69:
      if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
LABEL_3:
    v2 += 8;
  }
}

uint64_t gss::StyleMatchingTree<gss::CartoStyle<gss::ScenePropertyID>>::construct(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v304 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *((unsigned __int8 *)a2 + 24);
  char v11 = v10 + 5;
  unint64_t v12 = a2[1];
  uint64_t v13 = a2[2];
  unint64_t v14 = v13 + ((unint64_t)(v10 + 5) >> 3);
  unsigned int v15 = (v10 + 5) & 7;
  unint64_t v16 = v13 + 1;
  if (v14 < v13 + 1)
  {
    if (*((unsigned char *)a2 + 24)) {
      unint64_t v17 = v13 + 1;
    }
    else {
      unint64_t v17 = a2[2];
    }
    if (v12 < v17) {
      goto LABEL_14;
    }
    if (*((unsigned char *)a2 + 24))
    {
      if (v12 >= v16)
      {
        unsigned int v18 = (((1 << (8 - v10)) - 1) & *(unsigned __int8 *)(*a2 + v13)) << v10;
        goto LABEL_25;
      }
      goto LABEL_13;
    }
    if (v12 >= v16)
    {
      LOBYTE(v18) = *(unsigned char *)(*a2 + v13);
      goto LABEL_25;
    }
LABEL_13:
    a2[2] = v14;
    *((unsigned char *)a2 + 24) = v15;
LABEL_14:
    uint64_t v20 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      __int16 v300 = 1024;
      int v301 = 164;
      __int16 v302 = 2082;
      uint64_t v303 = "Could not read number of bits used for end chain counts.";
      _os_log_impl(&dword_1A1780000, v20, OS_LOG_TYPE_ERROR, "Read/write lock %s resulted in non-zero value %d", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    char v21 = (void *)std::ostream::operator<<();
    double v22 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)" STYL Parse Error Here: ", 24);
    uint64_t v23 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)"Could not read number of bits used for end chain counts.", 56);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)"\n", 1);
    return 0;
  }
  if (v10 <= 3) {
    unint64_t v19 = v13 + 1;
  }
  else {
    unint64_t v19 = v13 + 2;
  }
  if (v12 < v19) {
    goto LABEL_13;
  }
  uint64_t v24 = *a2;
  if (*((unsigned char *)a2 + 24))
  {
    int v25 = *(unsigned __int8 *)(v24 + v13);
    if (v16 >= v12) {
      int v26 = 0;
    }
    else {
      int v26 = *(unsigned __int8 *)(v24 + v16);
    }
    unsigned int v18 = ((v26 & (0xFFFF << (8 - v10))) >> (8 - v10)) | ((((1 << (8 - v10)) + 255) & v25) << v10);
    a2[2] = v16;
  }
  else
  {
    LOBYTE(v18) = *(unsigned char *)(v24 + v13);
  }
LABEL_25:
  a2[2] = v14;
  *((unsigned char *)a2 + 24) = v15;
  *(unsigned char *)(a3 + 95) = (v18 >> 3) + 1;
  char v27 = v11 & 7;
  unsigned int v28 = (v11 & 7) + 5;
  uint64_t v29 = v28 >> 3;
  unint64_t v30 = v14 + v29;
  unsigned int v31 = v28 & 7;
  unint64_t v32 = v14 + 1;
  if (v14 + v29 < v14 + 1)
  {
    if (v15) {
      unint64_t v33 = v14 + 1;
    }
    else {
      unint64_t v33 = v14;
    }
    if (v12 < v33) {
      goto LABEL_38;
    }
    if (v15)
    {
      if (v12 >= v32)
      {
        uint64_t v34 = *a2;
        unsigned int v35 = (((1 << (8 - v15)) - 1) & *(unsigned __int8 *)(*a2 + v14)) << v27;
        goto LABEL_48;
      }
      goto LABEL_37;
    }
    uint64_t v34 = *a2;
    a2[2] = v14;
    if (v12 >= v32) {
      goto LABEL_45;
    }
LABEL_37:
    a2[2] = v30;
    *((unsigned char *)a2 + 24) = v31;
LABEL_38:
    uint64_t v37 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      __int16 v300 = 1024;
      int v301 = 166;
      __int16 v302 = 2082;
      uint64_t v303 = "Could not read number of bits used for end chain lengths.";
      _os_log_impl(&dword_1A1780000, v37, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    uint64_t v38 = (void *)std::ostream::operator<<();
    float v39 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v38, (uint64_t)" STYL Parse Error Here: ", 24);
    __float2 v40 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)"Could not read number of bits used for end chain lengths.", 57);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v40, (uint64_t)"\n", 1);
    return 0;
  }
  if (v15 <= 3) {
    unint64_t v36 = v14 + 1;
  }
  else {
    unint64_t v36 = v14 + 2;
  }
  if (v12 < v36) {
    goto LABEL_37;
  }
  uint64_t v34 = *a2;
  if (!v15)
  {
LABEL_45:
    LOBYTE(v35) = *(unsigned char *)(v34 + v14);
    goto LABEL_48;
  }
  char v41 = 8 - v15;
  int v42 = *(unsigned __int8 *)(v34 + v14);
  if (v32 >= v12) {
    int v43 = 0;
  }
  else {
    int v43 = *(unsigned __int8 *)(v34 + v32);
  }
  unsigned int v35 = ((v43 & (0xFFFF << v41)) >> v41) | ((((1 << v41) + 255) & v42) << v27);
  a2[2] = v32;
LABEL_48:
  a2[2] = v30;
  *((unsigned char *)a2 + 24) = v31;
  char v44 = v28 & 7;
  unsigned int v45 = (v28 & 7) + 5;
  unint64_t v46 = v30 + (v45 >> 3);
  unsigned int v47 = v45 & 7;
  unint64_t v48 = v30 + 1;
  if (v46 < v30 + 1)
  {
    if (v31) {
      unint64_t v49 = v30 + 1;
    }
    else {
      unint64_t v49 = v30;
    }
    if (v12 < v49) {
      goto LABEL_61;
    }
    if (v31)
    {
      if (v12 >= v48)
      {
        unsigned int v50 = (((1 << (8 - v31)) - 1) & *(unsigned __int8 *)(v34 + v30)) << v44;
        goto LABEL_71;
      }
      goto LABEL_60;
    }
    a2[2] = v30;
    if (v12 >= v48) {
      goto LABEL_68;
    }
LABEL_60:
    a2[2] = v46;
    *((unsigned char *)a2 + 24) = v47;
LABEL_61:
    uint64_t v52 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      __int16 v300 = 1024;
      int v301 = 168;
      __int16 v302 = 2082;
      uint64_t v303 = "Could not read number of bits used for attribute value counts.";
      _os_log_impl(&dword_1A1780000, v52, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    uint64_t v53 = (void *)std::ostream::operator<<();
    uint64_t v54 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v53, (uint64_t)" STYL Parse Error Here: ", 24);
    int8x8_t v55 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)"Could not read number of bits used for attribute value counts.", 62);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v55, (uint64_t)"\n", 1);
    return 0;
  }
  if (v31 <= 3) {
    unint64_t v51 = v30 + 1;
  }
  else {
    unint64_t v51 = v30 + 2;
  }
  if (v12 < v51) {
    goto LABEL_60;
  }
  if (!v31)
  {
LABEL_68:
    LOBYTE(v50) = *(unsigned char *)(v34 + v30);
    goto LABEL_71;
  }
  char v56 = 8 - v31;
  int v57 = *(unsigned __int8 *)(v34 + v30);
  if (v48 >= v12) {
    int v58 = 0;
  }
  else {
    int v58 = *(unsigned __int8 *)(v34 + v48);
  }
  unsigned int v50 = ((v58 & (0xFFFF << v56)) >> v56) | ((((1 << v56) + 255) & v57) << v44);
  a2[2] = v48;
LABEL_71:
  a2[2] = v46;
  *((unsigned char *)a2 + 24) = v47;
  char v59 = v45 & 7;
  unsigned int v60 = (v45 & 7) + 5;
  unint64_t v61 = v46 + (v60 >> 3);
  unsigned int v62 = v60 & 7;
  unint64_t v63 = v46 + 1;
  if (v61 < v46 + 1)
  {
    if (v47) {
      unint64_t v64 = v46 + 1;
    }
    else {
      unint64_t v64 = v46;
    }
    if (v12 < v64) {
      goto LABEL_84;
    }
    if (v47)
    {
      if (v12 >= v63)
      {
        LODWORD(v34) = (((1 << (8 - v47)) - 1) & *(unsigned __int8 *)(v34 + v46)) << v59;
        goto LABEL_94;
      }
      goto LABEL_83;
    }
    a2[2] = v46;
    if (v12 >= v63) {
      goto LABEL_91;
    }
LABEL_83:
    a2[2] = v61;
    *((unsigned char *)a2 + 24) = v62;
LABEL_84:
    uint64_t v66 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      __int16 v300 = 1024;
      int v301 = 170;
      __int16 v302 = 2082;
      uint64_t v303 = "Could not read number of bits used for node indices.";
      _os_log_impl(&dword_1A1780000, v66, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    uint64_t v67 = (void *)std::ostream::operator<<();
    uint64_t v68 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v67, (uint64_t)" STYL Parse Error Here: ", 24);
    uint64_t v69 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v68, (uint64_t)"Could not read number of bits used for node indices.", 52);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v69, (uint64_t)"\n", 1);
    return 0;
  }
  if (v47 <= 3) {
    unint64_t v65 = v46 + 1;
  }
  else {
    unint64_t v65 = v46 + 2;
  }
  if (v12 < v65) {
    goto LABEL_83;
  }
  if (!v47)
  {
LABEL_91:
    LOBYTE(v34) = *(unsigned char *)(v34 + v46);
    goto LABEL_94;
  }
  char v70 = 8 - v47;
  int v71 = *(unsigned __int8 *)(v34 + v46);
  if (v63 >= v12) {
    int v72 = 0;
  }
  else {
    int v72 = *(unsigned __int8 *)(v34 + v63);
  }
  LODWORD(v34) = ((v72 & (0xFFFF << v70)) >> v70) | ((((1 << v70) + 255) & v71) << v59);
  a2[2] = v63;
LABEL_94:
  a2[2] = v61;
  *((unsigned char *)a2 + 24) = v62;
  *(unsigned char *)(a3 + 96) = (v34 >> 3) + 1;
  char v73 = v60 & 7;
  unsigned int v74 = (v60 & 7) + 5;
  unint64_t v75 = v61 + (v74 >> 3);
  unsigned int v76 = v74 & 7;
  unint64_t v77 = v61 + 1;
  if (v75 < v61 + 1)
  {
    if (v62) {
      unint64_t v78 = v61 + 1;
    }
    else {
      unint64_t v78 = v61;
    }
    if (v12 < v78) {
      goto LABEL_107;
    }
    if (v62)
    {
      if (v12 >= v77)
      {
        LODWORD(v61) = (((1 << (8 - v62)) - 1) & *(unsigned __int8 *)(*a2 + v61)) << v73;
        goto LABEL_118;
      }
      goto LABEL_106;
    }
    uint64_t v88 = *a2;
    a2[2] = v61;
    if (v12 >= v77)
    {
      LOBYTE(v61) = *(unsigned char *)(v88 + v61);
      goto LABEL_118;
    }
LABEL_106:
    a2[2] = v75;
    *((unsigned char *)a2 + 24) = v76;
LABEL_107:
    int v80 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      __int16 v300 = 1024;
      int v301 = 172;
      __int16 v302 = 2082;
      uint64_t v303 = "Could not read number of bits used for node child counts.";
      _os_log_impl(&dword_1A1780000, v80, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    int v81 = (void *)std::ostream::operator<<();
    uint64_t v82 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v81, (uint64_t)" STYL Parse Error Here: ", 24);
    uint64_t v83 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v82, (uint64_t)"Could not read number of bits used for node child counts.", 57);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v83, (uint64_t)"\n", 1);
    return 0;
  }
  if (v62 <= 3) {
    unint64_t v79 = v61 + 1;
  }
  else {
    unint64_t v79 = v61 + 2;
  }
  if (v12 < v79) {
    goto LABEL_106;
  }
  uint64_t v84 = *a2;
  if (v62)
  {
    char v85 = 8 - v62;
    int v86 = *(unsigned __int8 *)(v84 + v61);
    if (v77 >= v12) {
      int v87 = 0;
    }
    else {
      int v87 = *(unsigned __int8 *)(v84 + v77);
    }
    LODWORD(v61) = ((v87 & (0xFFFF << v85)) >> v85) | ((((1 << v85) + 255) & v86) << v73);
    a2[2] = v77;
  }
  else
  {
    LOBYTE(v61) = *(unsigned char *)(v84 + v61);
  }
LABEL_118:
  a2[2] = v75;
  *((unsigned char *)a2 + 24) = v76;
  *(unsigned char *)(a3 + 97) = (v61 >> 3) + 1;
  char v89 = v74 & 7;
  unint64_t v90 = v75 + (((v74 & 7) + 5) >> 3);
  char v91 = ((v74 & 7) + 5) & 7;
  unint64_t v92 = v75 + 1;
  if (v90 >= v75 + 1)
  {
    if (v76 <= 3) {
      unint64_t v95 = v75 + 1;
    }
    else {
      unint64_t v95 = v75 + 2;
    }
    if (v12 >= v95)
    {
      uint64_t v101 = *a2;
      if (v76)
      {
        char v102 = 8 - v76;
        int v103 = *(unsigned __int8 *)(v101 + v75);
        if (v92 >= v12) {
          int v104 = 0;
        }
        else {
          int v104 = *(unsigned __int8 *)(v101 + v92);
        }
        unsigned int v94 = ((v104 & (0xFFFF << v102)) >> v102) | ((((1 << v102) + 255) & v103) << v89);
        a2[2] = v92;
      }
      else
      {
        LOBYTE(v94) = *(unsigned char *)(v101 + v75);
      }
      goto LABEL_143;
    }
    goto LABEL_130;
  }
  if (v76) {
    unint64_t v93 = v75 + 1;
  }
  else {
    unint64_t v93 = v75;
  }
  if (v12 < v93) {
    goto LABEL_131;
  }
  if (!v76)
  {
    uint64_t v105 = *a2;
    a2[2] = v75;
    if (v12 >= v92)
    {
      LOBYTE(v94) = *(unsigned char *)(v105 + v75);
      goto LABEL_143;
    }
    goto LABEL_130;
  }
  if (v12 < v92)
  {
LABEL_130:
    a2[2] = v90;
    *((unsigned char *)a2 + 24) = v91;
LABEL_131:
    char v96 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      __int16 v300 = 1024;
      int v301 = 174;
      __int16 v302 = 2082;
      uint64_t v303 = "Could not read number of bits used for chunk sizes.";
      _os_log_impl(&dword_1A1780000, v96, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    char v97 = (void *)std::ostream::operator<<();
    char v98 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v97, (uint64_t)" STYL Parse Error Here: ", 24);
    char v99 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v98, (uint64_t)"Could not read number of bits used for chunk sizes.", 51);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v99, (uint64_t)"\n", 1);
    return 0;
  }
  unsigned int v94 = (((1 << (8 - v76)) - 1) & *(unsigned __int8 *)(*a2 + v75)) << v89;
LABEL_143:
  a2[2] = v90;
  *((unsigned char *)a2 + 24) = v91;
  unsigned int v106 = (v94 >> 3) + 1;
  geo::ibitstream::readUIntBits(v296, a2, v106);
  if (!v296[0])
  {
    uint64_t v173 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v173, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      __int16 v300 = 1024;
      int v301 = 178;
      __int16 v302 = 2082;
      uint64_t v303 = "Could not read end chain chunk.";
      _os_log_impl(&dword_1A1780000, v173, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    long long v174 = (void *)std::ostream::operator<<();
    uint64_t v175 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v174, (uint64_t)" STYL Parse Error Here: ", 24);
    long long v176 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v175, (uint64_t)"Could not read end chain chunk.", 31);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v176, (uint64_t)"\n", 1);
    return 0;
  }
  if (*((unsigned char *)a2 + 24))
  {
    *((unsigned char *)a2 + 24) = 0;
    ++a2[2];
  }
  geo::ibitstream::readUIntBits(v296, a2, *(unsigned __int8 *)(a3 + 95));
  if (!v296[0])
  {
    int v177 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v177, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      __int16 v300 = 1024;
      int v301 = 182;
      __int16 v302 = 2082;
      uint64_t v303 = "Could not read number of end chains.";
      _os_log_impl(&dword_1A1780000, v177, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    long long v178 = (void *)std::ostream::operator<<();
    uint64_t v179 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v178, (uint64_t)" STYL Parse Error Here: ", 24);
    long long v180 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v179, (uint64_t)"Could not read number of end chains.", 36);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v180, (uint64_t)"\n", 1);
    return 0;
  }
  uint64_t v107 = v297;
  uint64_t v108 = (uint64_t *)(a1 + 24);
  geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>>::resize(a1 + 24, v297);
  unsigned int v287 = v106;
  uint64_t v286 = v107;
  if (v107)
  {
    uint64_t v291 = 0;
    unsigned int v109 = (v35 >> 3) + 1;
    unsigned int v289 = (v50 >> 3) + 1;
    unsigned int v283 = v109;
    do
    {
      uint64_t v110 = *v108;
      geo::ibitstream::readUIntBits(v296, a2, v109);
      if (!v296[0])
      {
        uint64_t v201 = GEOGetGeoCSSStyleSheetLog();
        if (os_log_type_enabled(v201, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315650;
          unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
          __int16 v300 = 1024;
          int v301 = 187;
          __int16 v302 = 2082;
          uint64_t v303 = "Could not read end chain length.";
          _os_log_impl(&dword_1A1780000, v201, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }

        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
        double v202 = (void *)std::ostream::operator<<();
        double v203 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v202, (uint64_t)" STYL Parse Error Here: ", 24);
        long double v204 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v203, (uint64_t)"Could not read end chain length.", 32);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v204, (uint64_t)"\n", 1);
        return 0;
      }
      long long v111 = (gss::Allocator *)(v110 + 16 * v291);
      uint64_t v112 = v297;
      uint64_t v293 = v111;
      geo::intern_vector<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,geo::StdAllocator<std::pair<unsigned int,geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>>,gss::Allocator>>::resize(v111, v297);
      uint64_t v288 = v112;
      if (v112)
      {
        uint64_t v113 = 0;
        do
        {
          uint64_t v114 = *(void *)v293;
          long long v115 = (unsigned int *)(*(void *)v293 + 24 * v113);
          if (!gss::decodeAttributeEncoding(a2, v115, *(unsigned char *)(a3 + 13), *(unsigned char *)(a3 + 14), a5))
          {
            double v193 = GEOGetGeoCSSStyleSheetLog();
            if (os_log_type_enabled(v193, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 136315650;
              unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
              __int16 v300 = 1024;
              int v301 = 191;
              __int16 v302 = 2082;
              uint64_t v303 = "Could not decode attributes.";
              _os_log_impl(&dword_1A1780000, v193, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
            }

            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
            double v194 = (void *)std::ostream::operator<<();
            float v195 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v194, (uint64_t)" STYL Parse Error Here: ", 24);
            float v196 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v195, (uint64_t)"Could not decode attributes.", 28);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v196, (uint64_t)"\n", 1);
            return 0;
          }
          geo::ibitstream::readUIntBits(v296, a2, v289);
          if (!v296[0])
          {
            uint64_t v197 = GEOGetGeoCSSStyleSheetLog();
            if (os_log_type_enabled(v197, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 136315650;
              unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
              __int16 v300 = 1024;
              int v301 = 193;
              __int16 v302 = 2082;
              uint64_t v303 = "Could not read number of values.";
              _os_log_impl(&dword_1A1780000, v197, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
            }

            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
            uint64_t v198 = (void *)std::ostream::operator<<();
            uint64_t v199 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v198, (uint64_t)" STYL Parse Error Here: ", 24);
            uint64_t v200 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v199, (uint64_t)"Could not read number of values.", 32);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v200, (uint64_t)"\n", 1);
            return 0;
          }
          uint64_t v116 = v297;
          BOOL v117 = (gss::Allocator *)(v114 + 24 * v113 + 8);
          geo::intern_vector<unsigned int,geo::StdAllocator<unsigned int,gss::Allocator>>::resize(v117, v297);
          if (v116)
          {
            for (uint64_t i = 0; i != v116; ++i)
            {
              unint64_t v119 = *(uint64_t **)(a3 + 24);
              if (!v119) {
LABEL_344:
              }
                abort();
              unsigned int v120 = *v115;
              while (1)
              {
                while (1)
                {
                  unsigned int v121 = *((_DWORD *)v119 + 7);
                  if (v120 >= v121) {
                    break;
                  }
                  unint64_t v119 = (uint64_t *)*v119;
                  if (!v119) {
                    goto LABEL_344;
                  }
                }
                if (v121 >= v120) {
                  break;
                }
                unint64_t v119 = (uint64_t *)v119[1];
                if (!v119) {
                  goto LABEL_344;
                }
              }
              geo::ibitstream::readUIntBits(v296, a2, *((unsigned __int8 *)v119 + 32));
              if (!v296[0])
              {
                __int32 v181 = GEOGetGeoCSSStyleSheetLog();
                if (os_log_type_enabled(v181, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)long long buf = 136315650;
                  unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
                  __int16 v300 = 1024;
                  int v301 = 196;
                  __int16 v302 = 2082;
                  uint64_t v303 = "Could not read attribute value.";
                  _os_log_impl(&dword_1A1780000, v181, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
                }

                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
                uint64_t v182 = (void *)std::ostream::operator<<();
                int v183 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v182, (uint64_t)" STYL Parse Error Here: ", 24);
                int v184 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v183, (uint64_t)"Could not read attribute value.", 31);
                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v184, (uint64_t)"\n", 1);
                return 0;
              }
              *(_DWORD *)(*(void *)v117 + 4 * i) = v297;
            }
          }
          ++v113;
        }
        while (v113 != v288);
      }
      uint64_t v108 = (uint64_t *)(a1 + 24);
      ++v291;
      unsigned int v106 = v287;
      unsigned int v109 = v283;
    }
    while (v291 != v286);
  }
  if (*((unsigned char *)a2 + 24))
  {
    *((unsigned char *)a2 + 24) = 0;
    ++a2[2];
  }
  geo::ibitstream::readUIntBits(v296, a2, *(unsigned __int8 *)(a3 + 96));
  if (!v296[0])
  {
    uint64_t v185 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v185, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      __int16 v300 = 1024;
      int v301 = 206;
      __int16 v302 = 2082;
      uint64_t v303 = "Could not read number of style matching graph nodes.";
      _os_log_impl(&dword_1A1780000, v185, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    unint64_t v186 = (void *)std::ostream::operator<<();
    unint64_t v187 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v186, (uint64_t)" STYL Parse Error Here: ", 24);
    uint64_t v188 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v187, (uint64_t)"Could not read number of style matching graph nodes.", 52);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v188, (uint64_t)"\n", 1);
    return 0;
  }
  uint64_t v122 = (uint64_t *)(a1 + 8);
  geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>,gss::Allocator>>::resize(a1 + 8, v297);
  geo::ibitstream::readUIntBits(v296, a2, *(unsigned __int8 *)(a3 + 96));
  if (!v296[0])
  {
    uint64_t v189 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v189, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      __int16 v300 = 1024;
      int v301 = 208;
      __int16 v302 = 2082;
      uint64_t v303 = "Could not read number of chunks.";
      _os_log_impl(&dword_1A1780000, v189, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    float v190 = (void *)std::ostream::operator<<();
    uint64_t v191 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v190, (uint64_t)" STYL Parse Error Here: ", 24);
    uint64_t v192 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v191, (uint64_t)"Could not read number of chunks.", 32);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v192, (uint64_t)"\n", 1);
    return 0;
  }
  uint64_t v285 = a4;
  unsigned int v123 = v297;
  if (*((unsigned char *)a2 + 24))
  {
    *((unsigned char *)a2 + 24) = 0;
    ++a2[2];
  }
  if (!v123)
  {
LABEL_260:
    *(void *)a1 = *(void *)(a1 + 8);
    return 1;
  }
  int v124 = 0;
  unsigned int v125 = 0;
  unsigned int v281 = v123;
  while (1)
  {
    geo::ibitstream::readUIntBits(v296, a2, v106);
    if (!v296[0])
    {
      __int32 v221 = GEOGetGeoCSSStyleSheetLog();
      if (os_log_type_enabled(v221, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315650;
        unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        __int16 v300 = 1024;
        int v301 = 214;
        __int16 v302 = 2082;
        uint64_t v303 = "Could not read chunk length.";
        _os_log_impl(&dword_1A1780000, v221, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      uint64_t v222 = (void *)std::ostream::operator<<();
      __int32 v223 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v222, (uint64_t)" STYL Parse Error Here: ", 24);
      uint64_t v224 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v223, (uint64_t)"Could not read chunk length.", 28);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v224, (uint64_t)"\n", 1);
      return 0;
    }
    geo::ibitstream::readUIntBits(v296, a2, *(unsigned __int8 *)(a3 + 96));
    if (!v296[0])
    {
      uint64_t v225 = GEOGetGeoCSSStyleSheetLog();
      if (os_log_type_enabled(v225, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315650;
        unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        __int16 v300 = 1024;
        int v301 = 215;
        __int16 v302 = 2082;
        uint64_t v303 = "Could not read number of nodes in the chunk.";
        _os_log_impl(&dword_1A1780000, v225, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      unint64_t v226 = (void *)std::ostream::operator<<();
      uint64_t v227 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)" STYL Parse Error Here: ", 24);
      float v228 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v227, (uint64_t)"Could not read number of nodes in the chunk.", 44);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v228, (uint64_t)"\n", 1);
      return 0;
    }
    int v282 = v124;
    if (v297) {
      break;
    }
LABEL_257:
    if (*((unsigned char *)a2 + 24))
    {
      *((unsigned char *)a2 + 24) = 0;
      ++a2[2];
    }
    int v124 = v282 + 1;
    unsigned int v106 = v287;
    uint64_t v122 = (uint64_t *)(a1 + 8);
    if (v282 + 1 == v281) {
      goto LABEL_260;
    }
  }
  unsigned int v284 = v125 + v297;
  while (1)
  {
    uint64_t v126 = *v122;
    uint64_t v127 = *((unsigned __int8 *)a2 + 24);
    unint64_t v129 = a2[1];
    uint64_t v128 = a2[2];
    unint64_t v130 = v128 + ((unint64_t)(v127 + 1) >> 3);
    char v131 = (v127 + 1) & 7;
    unint64_t v132 = v128 + 1;
    if (v130 >= v128 + 1)
    {
      if (v127 <= 7) {
        unint64_t v135 = v128 + 1;
      }
      else {
        unint64_t v135 = v128 + 2;
      }
      if (v129 < v135)
      {
LABEL_294:
        a2[2] = v130;
        *((unsigned char *)a2 + 24) = v131;
LABEL_295:
        unint64_t v217 = GEOGetGeoCSSStyleSheetLog();
        if (os_log_type_enabled(v217, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315650;
          unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
          __int16 v300 = 1024;
          int v301 = 259;
          __int16 v302 = 2082;
          uint64_t v303 = "Could not read indication of node being terminal.";
          _os_log_impl(&dword_1A1780000, v217, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
        }

        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
        unint64_t v218 = (void *)std::ostream::operator<<();
        unint64_t v219 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v218, (uint64_t)" STYL Parse Error Here: ", 24);
        uint64_t v220 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v219, (uint64_t)"Could not read indication of node being terminal.", 49);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v220, (uint64_t)"\n", 1);
        goto LABEL_341;
      }
      uint64_t v136 = *a2;
      if (*((unsigned char *)a2 + 24))
      {
        int v137 = v132 >= v129 ? 0 : *(unsigned __int8 *)(v136 + v132);
        unsigned int v134 = ((v137 & (0xFFFF << (8 - v127))) >> (8 - v127)) | ((((1 << (8 - v127)) + 255) & *(unsigned __int8 *)(v136 + v128)) << v127);
        a2[2] = v132;
      }
      else
      {
        LOBYTE(v134) = *(unsigned char *)(v136 + v128);
      }
    }
    else
    {
      if (*((unsigned char *)a2 + 24)) {
        unint64_t v133 = v128 + 1;
      }
      else {
        unint64_t v133 = a2[2];
      }
      if (v129 < v133) {
        goto LABEL_295;
      }
      if (*((unsigned char *)a2 + 24))
      {
        if (v129 < v132) {
          goto LABEL_294;
        }
        unsigned int v134 = (((1 << (8 - v127)) - 1) & *(unsigned __int8 *)(*a2 + v128)) << v127;
      }
      else
      {
        if (v129 < v132) {
          goto LABEL_294;
        }
        LOBYTE(v134) = *(unsigned char *)(*a2 + v128);
      }
    }
    unsigned int v138 = v125;
    uint64_t v139 = (unsigned int *)(v126 + 24 * v125);
    a2[2] = v130;
    *((unsigned char *)a2 + 24) = v131;
    if ((v134 & 0x80) == 0) {
      break;
    }
    geo::ibitstream::readUIntBits(v296, a2, *(unsigned __int8 *)(a3 + 94));
    if (!v296[0])
    {
      uint64_t v249 = GEOGetGeoCSSStyleSheetLog();
      if (os_log_type_enabled(v249, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315650;
        unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        __int16 v300 = 1024;
        int v301 = 263;
        __int16 v302 = 2082;
        uint64_t v303 = "Could not read style index.";
        _os_log_impl(&dword_1A1780000, v249, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      uint64_t v250 = (void *)std::ostream::operator<<();
      uint64_t v251 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v250, (uint64_t)" STYL Parse Error Here: ", 24);
      unint64_t v252 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v251, (uint64_t)"Could not read style index.", 27);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v252, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    unsigned int v149 = v297;
    geo::ibitstream::readUIntBits(v296, a2, *(unsigned __int8 *)(a3 + 95));
    if (!v296[0])
    {
      long long v253 = GEOGetGeoCSSStyleSheetLog();
      if (os_log_type_enabled(v253, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315650;
        unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        __int16 v300 = 1024;
        int v301 = 264;
        __int16 v302 = 2082;
        uint64_t v303 = "Could not end chain index.";
        _os_log_impl(&dword_1A1780000, v253, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      uint64_t v254 = (void *)std::ostream::operator<<();
      unint64_t v255 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v254, (uint64_t)" STYL Parse Error Here: ", 24);
      __int16 v256 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v255, (uint64_t)"Could not end chain index.", 26);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v256, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    if (v149 >= 0xFFFF)
    {
      char v257 = GEOGetGeoCSSStyleSheetLog();
      if (os_log_type_enabled(v257, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315650;
        unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        __int16 v300 = 1024;
        int v301 = 266;
        __int16 v302 = 2082;
        uint64_t v303 = "StyleIndex outside uint16 range";
        _os_log_impl(&dword_1A1780000, v257, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      uint64_t v258 = (void *)std::ostream::operator<<();
      unint64_t v259 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v258, (uint64_t)" STYL Parse Error Here: ", 24);
      uint64_t v260 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v259, (uint64_t)"StyleIndex outside uint16 range", 31);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v260, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    if (v149 >= *(unsigned __int16 *)(v285 + 8))
    {
      uint64_t v261 = GEOGetGeoCSSStyleSheetLog();
      if (os_log_type_enabled(v261, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315650;
        unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        __int16 v300 = 1024;
        int v301 = 267;
        __int16 v302 = 2082;
        uint64_t v303 = "StyleIndex outside styles range";
        _os_log_impl(&dword_1A1780000, v261, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      float v262 = (void *)std::ostream::operator<<();
      long long v263 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v262, (uint64_t)" STYL Parse Error Here: ", 24);
      uint64_t v264 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v263, (uint64_t)"StyleIndex outside styles range", 31);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v264, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    __int16 v150 = v297;
    if (v297 >= 0xFFFF)
    {
      uint64_t v265 = GEOGetGeoCSSStyleSheetLog();
      if (os_log_type_enabled(v265, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315650;
        unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        __int16 v300 = 1024;
        int v301 = 268;
        __int16 v302 = 2082;
        uint64_t v303 = "EndChainIndex outside uint16 range";
        _os_log_impl(&dword_1A1780000, v265, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      unsigned int v266 = (void *)std::ostream::operator<<();
      unint64_t v267 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v266, (uint64_t)" STYL Parse Error Here: ", 24);
      unint64_t v268 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v267, (uint64_t)"EndChainIndex outside uint16 range", 34);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v268, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    *uint64_t v139 = 0x7FFFFFFF;
    uint64_t v151 = v126 + 24 * v138;
    *(_WORD *)(v151 + 4) = v149;
    *(_WORD *)(v151 + 6) = v150;
LABEL_255:
    unsigned int v125 = v138 + 1;
    uint64_t v122 = (uint64_t *)(a1 + 8);
    if (v138 + 1 == v284)
    {
      unsigned int v125 = v284;
      goto LABEL_257;
    }
  }
  unsigned int v290 = v138;
  *(_DWORD *)(v126 + 24 * v138 + 4) = 0;
  unsigned int v295 = 0;
  if (!gss::decodeAttributeEncoding(a2, &v295, *(unsigned char *)(a3 + 13), *(unsigned char *)(a3 + 14), a5))
  {
    uint64_t v229 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v229, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      __int16 v300 = 1024;
      int v301 = 280;
      __int16 v302 = 2082;
      uint64_t v303 = "Could not decode attribute.";
      _os_log_impl(&dword_1A1780000, v229, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    unint64_t v230 = (void *)std::ostream::operator<<();
    unint64_t v231 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v230, (uint64_t)" STYL Parse Error Here: ", 24);
    uint64_t v232 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v231, (uint64_t)"Could not decode attribute.", 27);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v232, (uint64_t)"\n", 1);
    goto LABEL_341;
  }
  unsigned int v140 = v295;
  if (v295 == 0x7FFFFFFF)
  {
    __int32 v233 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v233, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      __int16 v300 = 1024;
      int v301 = 281;
      __int16 v302 = 2082;
      uint64_t v303 = "attribute is using sentinel value";
      _os_log_impl(&dword_1A1780000, v233, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    uint64_t v234 = (void *)std::ostream::operator<<();
    uint64_t v235 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v234, (uint64_t)" STYL Parse Error Here: ", 24);
    unint64_t v236 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v235, (uint64_t)"attribute is using sentinel value", 33);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v236, (uint64_t)"\n", 1);
    goto LABEL_341;
  }
  *uint64_t v139 = v295;
  uint64_t v141 = *((unsigned __int8 *)a2 + 24);
  unint64_t v143 = a2[1];
  uint64_t v142 = a2[2];
  unint64_t v144 = v142 + ((unint64_t)(v141 + 1) >> 3);
  char v145 = (v141 + 1) & 7;
  unint64_t v146 = v142 + 1;
  if (v144 >= v142 + 1)
  {
    if (v141 <= 7) {
      unint64_t v152 = v142 + 1;
    }
    else {
      unint64_t v152 = v142 + 2;
    }
    if (v143 < v152)
    {
LABEL_310:
      a2[2] = v144;
      *((unsigned char *)a2 + 24) = v145;
LABEL_311:
      uint64_t v237 = GEOGetGeoCSSStyleSheetLog();
      if (os_log_type_enabled(v237, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315650;
        unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        __int16 v300 = 1024;
        int v301 = 283;
        __int16 v302 = 2082;
        uint64_t v303 = "Could not read indication of undefined node existing.";
        _os_log_impl(&dword_1A1780000, v237, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      uint64_t v238 = (void *)std::ostream::operator<<();
      unint64_t v239 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v238, (uint64_t)" STYL Parse Error Here: ", 24);
      uint64_t v240 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v239, (uint64_t)"Could not read indication of undefined node existing.", 53);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v240, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    uint64_t v153 = *a2;
    if (*((unsigned char *)a2 + 24))
    {
      if (v146 >= v143) {
        int v154 = 0;
      }
      else {
        int v154 = *(unsigned __int8 *)(v153 + v146);
      }
      unsigned int v148 = ((v154 & (0xFFFF << (8 - v141))) >> (8 - v141)) | ((((1 << (8 - v141)) + 255) & *(unsigned __int8 *)(v153 + v142)) << v141);
      a2[2] = v146;
    }
    else
    {
      LOBYTE(v148) = *(unsigned char *)(v153 + v142);
    }
  }
  else
  {
    if (*((unsigned char *)a2 + 24)) {
      unint64_t v147 = v142 + 1;
    }
    else {
      unint64_t v147 = a2[2];
    }
    if (v143 < v147) {
      goto LABEL_311;
    }
    if (*((unsigned char *)a2 + 24))
    {
      if (v143 < v146) {
        goto LABEL_310;
      }
      unsigned int v148 = (((1 << (8 - v141)) - 1) & *(unsigned __int8 *)(*a2 + v142)) << v141;
    }
    else
    {
      if (v143 < v146) {
        goto LABEL_310;
      }
      LOBYTE(v148) = *(unsigned char *)(*a2 + v142);
    }
  }
  a2[2] = v144;
  *((unsigned char *)a2 + 24) = v145;
  if ((v148 & 0x80) != 0)
  {
    geo::ibitstream::readUIntBits(v296, a2, *(unsigned __int8 *)(a3 + 96));
    if (!v296[0])
    {
      unint64_t v269 = GEOGetGeoCSSStyleSheetLog();
      if (os_log_type_enabled(v269, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315650;
        unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        __int16 v300 = 1024;
        int v301 = 288;
        __int16 v302 = 2082;
        uint64_t v303 = "Could not read undefined node index.";
        _os_log_impl(&dword_1A1780000, v269, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      uint64_t v270 = (void *)std::ostream::operator<<();
      unint64_t v271 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v270, (uint64_t)" STYL Parse Error Here: ", 24);
      uint64_t v272 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v271, (uint64_t)"Could not read undefined node index.", 36);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v272, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    unsigned int v155 = v297;
    if (v297 >= *(unsigned __int16 *)(a1 + 16))
    {
      unint64_t v273 = GEOGetGeoCSSStyleSheetLog();
      if (os_log_type_enabled(v273, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315650;
        unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        __int16 v300 = 1024;
        int v301 = 289;
        __int16 v302 = 2082;
        uint64_t v303 = "Undefined node index out of bounds";
        _os_log_impl(&dword_1A1780000, v273, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      uint64_t v274 = (void *)std::ostream::operator<<();
      uint64_t v275 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v274, (uint64_t)" STYL Parse Error Here: ", 24);
      unint64_t v276 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v275, (uint64_t)"Undefined node index out of bounds", 34);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v276, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    char v156 = (_WORD *)(v126 + 24 * v290);
    unsigned int v157 = (unsigned __int16)v156[8];
    v156 += 8;
    geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>>::reserve((uint64_t)(v156 - 4), v157 + 1);
    *(_DWORD *)(*((void *)v156 - 1) + 4 * (unsigned __int16)(*v156)++) = (v155 << 16) | 0xFFFF;
    uint64_t v292 = 1;
  }
  else
  {
    uint64_t v292 = 0;
  }
  geo::ibitstream::readUIntBits(v296, a2, *(unsigned __int8 *)(a3 + 97));
  if (!v296[0])
  {
    uint64_t v241 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v241, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      __int16 v300 = 1024;
      int v301 = 293;
      __int16 v302 = 2082;
      uint64_t v303 = "Could not read number of children.";
      _os_log_impl(&dword_1A1780000, v241, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    unint64_t v242 = (void *)std::ostream::operator<<();
    uint64_t v243 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v242, (uint64_t)" STYL Parse Error Here: ", 24);
    uint64_t v244 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v243, (uint64_t)"Could not read number of children.", 34);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v244, (uint64_t)"\n", 1);
    goto LABEL_341;
  }
  uint64_t v158 = v126 + 24 * v290;
  unsigned int v160 = *(unsigned __int16 *)(v158 + 16);
  char v159 = (unsigned __int16 *)(v158 + 16);
  uint64_t v294 = v297;
  unint64_t v161 = v160 + (unint64_t)v297;
  if (v161 >= 0xFFFF)
  {
    uint64_t v245 = GEOGetGeoCSSStyleSheetLog();
    if (os_log_type_enabled(v245, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
      __int16 v300 = 1024;
      int v301 = 296;
      __int16 v302 = 2082;
      uint64_t v303 = "SubTree nodes larger than uint16!";
      _os_log_impl(&dword_1A1780000, v245, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
    }

    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
    uint64_t v246 = (void *)std::ostream::operator<<();
    uint64_t v247 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v246, (uint64_t)" STYL Parse Error Here: ", 24);
    uint64_t v248 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v247, (uint64_t)"SubTree nodes larger than uint16!", 33);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v248, (uint64_t)"\n", 1);
    goto LABEL_341;
  }
  uint64_t v162 = (uint64_t *)(v159 - 4);
  geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::PropertyID>>::SubTreeNode,gss::Allocator>>::resize((gss::Allocator *)(v159 - 4), v161);
  geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,gss::Allocator>>::intern<geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,gss::Allocator>>((uint64_t)(v159 - 4), a1 + 40);
  if (!v294)
  {
    uint64_t v164 = *v162;
LABEL_254:
    std::sort[abi:nn180100]<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode *,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::construct(geo::ibitstream &,gss::DecodingContext const&,geo::intern_vector<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<std::shared_ptr<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> const&,geo::intern_vector<gss::MatchingGraphEndChain,geo::StdAllocator<gss::MatchingGraphEndChain,gss::Allocator>> &,geo::intern_vector<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>,gss::Allocator>> &,std::ostringstream &,geo::intern_allocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,geo::StdAllocator<gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode,gss::Allocator>> &)::{lambda(gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&,gss::StyleMatchingTreeNode<gss::CartoStyle<gss::ScenePropertyID>>::SubTreeNode const&)#1}>(v164, (int32x2_t *)(v164 + 4 * *v159));
    unsigned int v138 = v290;
    goto LABEL_255;
  }
  uint64_t v163 = 0;
  while (1)
  {
    uint64_t v166 = *(uint64_t **)(a3 + 24);
    if (!v166) {
LABEL_345:
    }
      abort();
    while (1)
    {
      while (1)
      {
        unsigned int v167 = *((_DWORD *)v166 + 7);
        if (v140 >= v167) {
          break;
        }
        uint64_t v166 = (uint64_t *)*v166;
        if (!v166) {
          goto LABEL_345;
        }
      }
      if (v167 >= v140) {
        break;
      }
      uint64_t v166 = (uint64_t *)v166[1];
      if (!v166) {
        goto LABEL_345;
      }
    }
    geo::ibitstream::readUIntBits(v296, a2, *((unsigned __int8 *)v166 + 32));
    if (!v296[0]) {
      break;
    }
    LODWORD(v168) = v297;
    geo::ibitstream::readUIntBits(v296, a2, *(unsigned __int8 *)(a3 + 96));
    if (!v296[0])
    {
      double v209 = GEOGetGeoCSSStyleSheetLog();
      if (os_log_type_enabled(v209, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315650;
        unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        __int16 v300 = 1024;
        int v301 = 305;
        __int16 v302 = 2082;
        uint64_t v303 = "Could not read referenced node index.";
        _os_log_impl(&dword_1A1780000, v209, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      long double v210 = (void *)std::ostream::operator<<();
      float v211 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v210, (uint64_t)" STYL Parse Error Here: ", 24);
      uint64_t v212 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v211, (uint64_t)"Could not read referenced node index.", 37);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v212, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    __int16 v169 = v297;
    if (v297 >= *(unsigned __int16 *)(a1 + 16))
    {
      __int32 v213 = GEOGetGeoCSSStyleSheetLog();
      if (os_log_type_enabled(v213, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315650;
        unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        __int16 v300 = 1024;
        int v301 = 306;
        __int16 v302 = 2082;
        uint64_t v303 = "Referenced node index out of bounds";
        _os_log_impl(&dword_1A1780000, v213, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      unint64_t v214 = (void *)std::ostream::operator<<();
      uint64_t v215 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v214, (uint64_t)" STYL Parse Error Here: ", 24);
      float v216 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v215, (uint64_t)"Referenced node index out of bounds", 35);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v216, (uint64_t)"\n", 1);
      goto LABEL_341;
    }
    if (v168 >= 0xFFFF)
    {
      int v168 = GEOGetGeoCSSStyleSheetLog();
      if (os_log_type_enabled(v168, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315650;
        unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
        __int16 v300 = 1024;
        int v301 = 308;
        __int16 v302 = 2082;
        uint64_t v303 = "AttributeValue nodes larger than uint16!";
        _os_log_impl(&dword_1A1780000, v168, OS_LOG_TYPE_DEBUG, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
      }

      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
      long long v170 = (void *)std::ostream::operator<<();
      long long v171 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v170, (uint64_t)" STYL Parse Warning: ", 21);
      uint64_t v172 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v171, (uint64_t)"AttributeValue nodes larger than uint16!", 40);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v172, (uint64_t)"\n", 1);
      LOWORD(v168) = -1;
    }
    uint64_t v164 = *v162;
    uint64_t v165 = (_WORD *)(*v162 + 4 * (v163 + v292));
    *uint64_t v165 = (_WORD)v168;
    v165[1] = v169;
    if (++v163 == v294) {
      goto LABEL_254;
    }
  }
  long double v205 = GEOGetGeoCSSStyleSheetLog();
  if (os_log_type_enabled(v205, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 136315650;
    unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
    __int16 v300 = 1024;
    int v301 = 304;
    __int16 v302 = 2082;
    uint64_t v303 = "Could not read attribute value.";
    _os_log_impl(&dword_1A1780000, v205, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
  }

  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
  long double v206 = (void *)std::ostream::operator<<();
  double v207 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v206, (uint64_t)" STYL Parse Error Here: ", 24);
  long double v208 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v207, (uint64_t)"Could not read attribute value.", 31);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v208, (uint64_t)"\n", 1);
LABEL_341:
  uint64_t v277 = GEOGetGeoCSSStyleSheetLog();
  if (os_log_type_enabled(v277, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 136315650;
    unint64_t v299 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp";
    __int16 v300 = 1024;
    int v301 = 218;
    __int16 v302 = 2082;
    uint64_t v303 = "Could not construct node.";
    _os_log_impl(&dword_1A1780000, v277, OS_LOG_TYPE_ERROR, "%s:%d STYL Parse Error Here: %{public}s", buf, 0x1Cu);
  }

  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VectorKit/geo/GeoCSS/GeoCSS/StyleMatchingTree.hpp", 87);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a5, (uint64_t)":", 1);
  int v278 = (void *)std::ostream::operator<<();
  uint64_t v279 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v278, (uint64_t)" STYL Parse Error Here: ", 24);
  unint64_t v280 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v279, (uint64_t)"Could not construct node.", 25);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v280, (uint64_t)"\n", 1);
  return 0;
}