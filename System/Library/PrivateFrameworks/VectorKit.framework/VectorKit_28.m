void sub_1A263C480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a31);
  std::vector<std::vector<unsigned long>>::~vector[abi:nn180100](&a36);
  std::unordered_map<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::CoastlineGroup *>::~unordered_map[abi:nn180100]((uint64_t)&a39);
  std::priority_queue<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge,std::vector<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge,std::allocator<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>>,std::less<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>>::~priority_queue(&a45);
  _Unwind_Resume(a1);
}

void std::priority_queue<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge,std::vector<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge,std::allocator<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>>,std::less<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>>::push(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  if (v4 >= v5)
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - *a1) >> 3);
    unint64_t v9 = v8 + 1;
    if (v8 + 1 > 0x666666666666666) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0x666666666666666) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      v12 = (char *)operator new(40 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[40 * v8];
    v14 = &v12[40 * v11];
    *(_OWORD *)v13 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *((_WORD *)v13 + 8) = *(_WORD *)(a2 + 16);
    *((void *)v13 + 3) = *(void *)(a2 + 24);
    v13[32] = *(unsigned char *)(a2 + 32);
    uint64_t v7 = (uint64_t)(v13 + 40);
    v15 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 == (char *)*a1)
    {
      *a1 = (uint64_t)v13;
      a1[1] = v7;
      a1[2] = (uint64_t)v14;
    }
    else
    {
      uint64_t v17 = 0;
      do
      {
        v18 = &v13[v17];
        v19 = &v16[v17];
        *(_OWORD *)(v18 - 40) = *(_OWORD *)&v16[v17 - 40];
        *((void *)v19 - 5) = 0;
        *((void *)v19 - 4) = 0;
        *((_WORD *)v18 - 12) = *(_WORD *)&v16[v17 - 24];
        uint64_t v20 = *(void *)&v16[v17 - 16];
        *(v18 - 8) = v16[v17 - 8];
        *((void *)v18 - 2) = v20;
        v17 -= 40;
      }
      while (&v16[v17] != v15);
      v16 = (char *)*a1;
      v21 = (char *)a1[1];
      *a1 = (uint64_t)&v13[v17];
      a1[1] = v7;
      for (a1[2] = (uint64_t)v14; v21 != v16; v21 -= 40)
      {
        v22 = (std::__shared_weak_count *)*((void *)v21 - 4);
        if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(_WORD *)(v4 + 16) = *(_WORD *)(a2 + 16);
    uint64_t v6 = *(void *)(a2 + 24);
    *(unsigned char *)(v4 + 32) = *(unsigned char *)(a2 + 32);
    *(void *)(v4 + 24) = v6;
    uint64_t v7 = v4 + 40;
  }
  a1[1] = v7;
  uint64_t v23 = *a1;
  uint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
  std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,std::less<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge> &,std::__wrap_iter<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge*>>(v23, v7, v24);
}

void std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,std::less<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge> &,std::__wrap_iter<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 >= 2)
  {
    uint64_t v21 = v3;
    uint64_t v22 = v4;
    unint64_t v7 = (unint64_t)(a3 - 2) >> 1;
    uint64_t v8 = a1 + 40 * v7;
    uint64_t v9 = a2 - 40;
    if (std::less<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>::operator()[abi:nn180100](v8, a2 - 40))
    {
      long long v17 = *(_OWORD *)(a2 - 40);
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      __int16 v18 = *(_WORD *)(a2 - 24);
      uint64_t v19 = *(void *)(a2 - 16);
      char v20 = *(unsigned char *)(a2 - 8);
      do
      {
        uint64_t v10 = v8;
        long long v11 = *(_OWORD *)v8;
        *(void *)uint64_t v8 = 0;
        *(void *)(v8 + 8) = 0;
        v12 = *(std::__shared_weak_count **)(v9 + 8);
        *(_OWORD *)uint64_t v9 = v11;
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        *(_WORD *)(v9 + 16) = *(_WORD *)(v10 + 16);
        uint64_t v13 = *(void *)(v10 + 24);
        *(unsigned char *)(v9 + 32) = *(unsigned char *)(v10 + 32);
        *(void *)(v9 + 24) = v13;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = a1 + 40 * v7;
        uint64_t v9 = v10;
      }
      while (std::less<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>::operator()[abi:nn180100](v8, (uint64_t)&v17));
      long long v14 = v17;
      long long v17 = 0uLL;
      v15 = *(std::__shared_weak_count **)(v10 + 8);
      *(_OWORD *)uint64_t v10 = v14;
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
      *(_WORD *)(v10 + 16) = v18;
      *(void *)(v10 + 24) = v19;
      *(unsigned char *)(v10 + 32) = v20;
      v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
      if (*((void *)&v17 + 1))
      {
        if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
  }
}

uint64_t std::unordered_set<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>,md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonPairHash,std::equal_to<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>>,std::allocator<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>>>::erase[abi:nn180100](void *a1, uint64_t *__p)
{
  int8x8_t v3 = (int8x8_t)a1[1];
  uint64_t v5 = *__p;
  unint64_t v4 = __p[1];
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v3);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  unint64_t v7 = *(uint64_t **)(*a1 + 8 * v4);
  do
  {
    uint64_t v8 = v7;
    unint64_t v7 = (uint64_t *)*v7;
  }
  while (v7 != __p);
  if (v8 == a1 + 2) {
    goto LABEL_34;
  }
  unint64_t v9 = v8[1];
  if (v6.u32[0] > 1uLL)
  {
    if (v9 >= *(void *)&v3) {
      v9 %= *(void *)&v3;
    }
  }
  else
  {
    v9 &= *(void *)&v3 - 1;
  }
  uint64_t v10 = *__p;
  if (v9 != v4)
  {
LABEL_34:
    if (v5)
    {
      unint64_t v11 = *(void *)(v5 + 8);
      if (v6.u32[0] > 1uLL)
      {
        unint64_t v12 = *(void *)(v5 + 8);
        if (v11 >= *(void *)&v3) {
          unint64_t v12 = v11 % *(void *)&v3;
        }
      }
      else
      {
        unint64_t v12 = v11 & (*(void *)&v3 - 1);
      }
      uint64_t v10 = *__p;
      if (v12 == v4) {
        goto LABEL_22;
      }
    }
    *(void *)(*a1 + 8 * v4) = 0;
    uint64_t v10 = *__p;
  }
  if (!v10) {
    goto LABEL_28;
  }
  unint64_t v11 = *(void *)(v10 + 8);
LABEL_22:
  if (v6.u32[0] > 1uLL)
  {
    if (v11 >= *(void *)&v3) {
      v11 %= *(void *)&v3;
    }
  }
  else
  {
    v11 &= *(void *)&v3 - 1;
  }
  if (v11 != v4)
  {
    *(void *)(*a1 + 8 * v11) = v8;
    uint64_t v10 = *__p;
  }
LABEL_28:
  *uint64_t v8 = v10;
  *__p = 0;
  --a1[3];
  uint64_t v13 = (std::__shared_weak_count *)__p[3];
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  operator delete(__p);
  return v5;
}

void **std::priority_queue<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge,std::vector<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge,std::allocator<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>>,std::less<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>>::~priority_queue(void **a1)
{
  v2 = (char *)*a1;
  if (*a1)
  {
    int8x8_t v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (std::__shared_weak_count *)*((void *)v3 - 4);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t geo::MartinezPolygonUnion<double>::~MartinezPolygonUnion(uint64_t a1)
{
  while (*(void *)a1 != *(void *)(a1 + 8))
    std::priority_queue<geo::MartinezPolygonUnion<double>::HorizontalIndex,std::vector<geo::MartinezPolygonUnion<double>::HorizontalIndex,std::allocator<geo::MartinezPolygonUnion<double>::HorizontalIndex>>,std::greater<geo::MartinezPolygonUnion<double>::HorizontalIndex>>::pop(a1);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 40));
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  v2 = *(void **)(a1 + 56);
  int8x8_t v3 = *(void **)(a1 + 64);
  if (v2 == v3)
  {
    *(void *)(a1 + 64) = v2;
    if (!v2) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  do
  {
    if (*v2) {
      MEMORY[0x1A6239270](*v2, 0x1020C406C923FA7);
    }
    ++v2;
  }
  while (v2 != v3);
  v2 = *(void **)(a1 + 56);
  *(void *)(a1 + 64) = v2;
  if (v2) {
LABEL_5:
  }
    operator delete(v2);
LABEL_6:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 40));
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::priority_queue<geo::MartinezPolygonUnion<double>::HorizontalIndex,std::vector<geo::MartinezPolygonUnion<double>::HorizontalIndex,std::allocator<geo::MartinezPolygonUnion<double>::HorizontalIndex>>,std::greater<geo::MartinezPolygonUnion<double>::HorizontalIndex>>::pop(uint64_t result)
{
  uint64_t v1 = result;
  int8x8_t v3 = *(char **)result;
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v4 = v2 - *(void *)result;
  if (v4 >= 9)
  {
    uint64_t v5 = 0;
    uint64_t v6 = v4 >> 3;
    uint64_t v19 = *(void *)v3;
    int64_t v7 = (unint64_t)((v4 >> 3) - 2) >> 1;
    uint64_t v8 = *(uint64_t **)result;
    do
    {
      unint64_t v9 = &v8[v5 + 1];
      uint64_t v10 = (2 * v5) | 1;
      uint64_t v11 = 2 * v5 + 2;
      if (v11 < v6)
      {
        result = geo::MartinezPolygonUnion<double>::HorizontalIndex::operator<(*v9, v8[v5 + 2]);
        if (!result)
        {
          ++v9;
          uint64_t v10 = v11;
        }
      }
      *uint64_t v8 = *v9;
      uint64_t v8 = v9;
      uint64_t v5 = v10;
    }
    while (v10 <= v7);
    unint64_t v12 = (uint64_t *)(v2 - 8);
    if (v9 == (uint64_t *)(v2 - 8))
    {
      *unint64_t v9 = v19;
    }
    else
    {
      *unint64_t v9 = *v12;
      uint64_t *v12 = v19;
      uint64_t v13 = (char *)v9 - v3 + 8;
      if (v13 >= 9)
      {
        unint64_t v14 = (((unint64_t)v13 >> 3) - 2) >> 1;
        v15 = (uint64_t *)&v3[8 * v14];
        uint64_t v16 = *v15;
        uint64_t v17 = *v9;
        result = geo::MartinezPolygonUnion<double>::HorizontalIndex::operator<(*v15, *v9);
        if ((result & 1) == 0)
        {
          do
          {
            __int16 v18 = v15;
            *unint64_t v9 = v16;
            if (!v14) {
              break;
            }
            unint64_t v14 = (v14 - 1) >> 1;
            v15 = (uint64_t *)&v3[8 * v14];
            uint64_t v16 = *v15;
            result = geo::MartinezPolygonUnion<double>::HorizontalIndex::operator<(*v15, v17);
            unint64_t v9 = v18;
          }
          while (!result);
          uint64_t *v18 = v17;
        }
      }
    }
  }
  *(void *)(v1 + 8) -= 8;
  return result;
}

BOOL geo::MartinezPolygonUnion<double>::HorizontalIndex::operator<(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 8);
  double v4 = *(double *)(a1 + 16);
  double v3 = *(double *)(a1 + 24);
  double v5 = v4 + *(double *)a1;
  double v6 = v3 + v2;
  double v8 = *(double *)a2;
  double v7 = *(double *)(a2 + 8);
  double v9 = *(double *)(a2 + 16);
  double v10 = v9 + *(double *)a2;
  double v11 = *(double *)(a2 + 24) + v7;
  unsigned int v12 = *(unsigned __int8 *)(a1 + 36);
  unsigned int v13 = *(unsigned __int8 *)(a2 + 36);
  if (v12 == 1) {
    double v14 = *(double *)a1;
  }
  else {
    double v14 = v4 + *(double *)a1;
  }
  if (v13 == 1) {
    double v15 = *(double *)a2;
  }
  else {
    double v15 = v9 + *(double *)a2;
  }
  if (vabdd_f64(v14, v15) < 1.0e-12)
  {
    double v16 = v12 == 1 ? *(double *)(a1 + 8) : v3 + v2;
    double v17 = v13 == 1 ? *(double *)(a2 + 8) : *(double *)(a2 + 24) + v7;
    if (vabdd_f64(v16, v17) < 1.0e-12)
    {
      if (v12 < v13) {
        return 1;
      }
      if (v12 > v13) {
        return 0;
      }
      if (vabdd_f64(*(double *)a1, v8) >= 1.0e-12 || vabdd_f64(v2, v7) >= 1.0e-12)
      {
        if (vabdd_f64(v5, v10) >= 1.0e-12 || vabdd_f64(v6, v11) >= 1.0e-12)
        {
LABEL_40:
          unsigned int v23 = *(_DWORD *)(a1 + 32);
          unsigned int v24 = *(_DWORD *)(a2 + 32);
          if (v23 >= v24)
          {
            if (v23 <= v24) {
              return *(void *)(a2 + 40) == 0;
            }
            return 0;
          }
          return 1;
        }
        double v18 = (v6 - v7) * v4 + (v8 - v5) * v3;
      }
      else
      {
        double v18 = (v6 - v11) * v4 + (v10 - v5) * v3;
      }
      double v21 = fabs(v18);
      if (v18 > 0.0) {
        int v22 = 1;
      }
      else {
        int v22 = 2;
      }
      if (v21 <= 1.0e-12) {
        int v22 = 0;
      }
      if (v22 == 1) {
        return 0;
      }
      if (v22 == 2) {
        return 1;
      }
      goto LABEL_40;
    }
  }
  if (v14 < v15) {
    return 1;
  }
  if (v14 > v15) {
    return 0;
  }
  if (v12 == 1) {
    double v6 = *(double *)(a1 + 8);
  }
  if (v13 == 1) {
    double v20 = *(double *)(a2 + 8);
  }
  else {
    double v20 = *(double *)(a2 + 24) + v7;
  }
  return v6 < v20;
}

void geo::MartinezPolygonUnion<double>::addPolygonPoints(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2 != *a2)
  {
    unint64_t v4 = 0;
    unint64_t v5 = (v2 - v3) >> 4;
    do
    {
      double v6 = (double *)(v3 + 16 * v4);
      if (v4 == v5 - 1) {
        unint64_t v7 = 0;
      }
      else {
        unint64_t v7 = v4 + 1;
      }
      double v8 = (double *)(v3 + 16 * v7);
      if (vabdd_f64(*v6, *v8) >= 1.0e-12 || vabdd_f64(v6[1], v8[1]) >= 1.0e-12) {
        operator new();
      }
      ++v4;
      unint64_t v5 = (v2 - v3) >> 4;
    }
    while (v4 < v5);
  }
}

uint64_t std::__tree<geo::MartinezPolygonUnion<double>::VerticalIndex,std::less<geo::MartinezPolygonUnion<double>::VerticalIndex>,std::allocator<geo::MartinezPolygonUnion<double>::VerticalIndex>>::__emplace_unique_key_args<geo::MartinezPolygonUnion<double>::VerticalIndex,geo::MartinezPolygonUnion<double>::VerticalIndex>(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  double v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        double v8 = (uint64_t **)v5;
        double v9 = v5 + 4;
        if (!geo::MartinezPolygonUnion<double>::VerticalIndex::operator<(a2, v5 + 4)) {
          break;
        }
        unint64_t v5 = *v8;
        double v6 = v8;
        if (!*v8) {
          goto LABEL_9;
        }
      }
      uint64_t result = geo::MartinezPolygonUnion<double>::VerticalIndex::operator<(v9, a2);
      if (!result) {
        break;
      }
      double v6 = v8 + 1;
      unint64_t v5 = v8[1];
      if (!v5) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    double v8 = a1 + 1;
LABEL_9:
    double v11 = (uint64_t *)operator new(0x28uLL);
    v11[4] = a3;
    *double v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v8;
    *double v6 = v11;
    unsigned int v12 = (uint64_t *)**a1;
    if (v12)
    {
      *a1 = v12;
      unsigned int v13 = *v6;
    }
    else
    {
      unsigned int v13 = v11;
    }
    uint64_t result = (uint64_t)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return result;
}

uint64_t geo::MartinezPolygonUnion<double>::VerticalIndex::operator<(uint64_t *a1, uint64_t *a2)
{
  int v3 = 0;
  uint64_t v4 = *a1;
  while (1)
  {
    unint64_t v5 = a1;
    uint64_t v6 = *a2;
    if (!geo::MartinezPolygonUnion<double>::HorizontalIndex::operator<(*a2, v4)) {
      break;
    }
    v3 ^= 1u;
    uint64_t v4 = v6;
    a1 = a2;
    a2 = v5;
  }
  double v8 = *(double *)(v4 + 16);
  double v7 = *(double *)(v4 + 24);
  double v9 = *(double *)v6 - (v8 + *(double *)v4);
  double v10 = *(double *)(v6 + 8) - (v7 + *(double *)(v4 + 8));
  double v11 = -(v10 * v8 - v9 * v7);
  double v12 = fabs(v11);
  if (v11 > 0.0) {
    int v13 = 1;
  }
  else {
    int v13 = 2;
  }
  if (v12 <= 1.0e-12) {
    int v13 = 0;
  }
  if (v13 == 1) {
    goto LABEL_19;
  }
  if (v13 != 2)
  {
    double v14 = -(v8 * (v10 + *(double *)(v6 + 24)) - v7 * (v9 + *(double *)(v6 + 16)));
    double v15 = fabs(v14);
    if (v14 > 0.0) {
      int v16 = 1;
    }
    else {
      int v16 = 2;
    }
    if (v15 <= 1.0e-12) {
      int v16 = 0;
    }
    if (v16 != 1)
    {
      if (v16 != 2)
      {
        BOOL v17 = *(_DWORD *)(v4 + 32) < *(_DWORD *)(v6 + 32);
        return (v3 ^ v17) & 1;
      }
      goto LABEL_18;
    }
LABEL_19:
    BOOL v17 = 0;
    return (v3 ^ v17) & 1;
  }
LABEL_18:
  BOOL v17 = 1;
  return (v3 ^ v17) & 1;
}

uint64_t geo::MartinezPolygonUnion<double>::possibleIntersects(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 && a3 && *(_DWORD *)(a2 + 32) != *(_DWORD *)(a3 + 32))
  {
    uint64_t v5 = result;
    double v6 = *(double *)(a2 + 8);
    double v7 = *(double *)(a2 + 16);
    double v8 = *(double *)(a2 + 24);
    double v9 = v7 + *(double *)a2;
    double v10 = v8 + v6;
    double v11 = *(double *)a3;
    double v12 = *(double *)(a3 + 8);
    double v14 = *(double *)(a3 + 16);
    double v13 = *(double *)(a3 + 24);
    double v15 = v14 + *(double *)a3;
    double v16 = v13 + v12;
    if (vabdd_f64(*(double *)a2, *(double *)a3) < 1.0e-12
      && vabdd_f64(v6, v12) < 1.0e-12
      && vabdd_f64(v9, v15) < 1.0e-12
      && vabdd_f64(v10, v16) < 1.0e-12)
    {
      *(unsigned char *)(a3 + 50) = 1;
      *(unsigned char *)(a2 + 50) = 1;
      *(unsigned char *)(a2 + 51) = 0;
      *(unsigned char *)(a3 + 51) = 1;
      BOOL v17 = *(unsigned __int8 *)(a2 + 49) == *(unsigned __int8 *)(a3 + 49);
      *(unsigned char *)(a3 + 52) = v17;
      *(unsigned char *)(a2 + 52) = v17;
      return result;
    }
    double v18 = v10 - v12;
    if (fabs(v18 * v7 + (v11 - v9) * v8) <= 1.0e-12 && fabs((v10 - v16) * v7 + (v15 - v9) * v8) <= 1.0e-12)
    {
      geo::MartinezPolygonUnion<double>::subdivide(result, a2, (float64x2_t *)a3);
      float64x2_t v26 = vaddq_f64(*(float64x2_t *)(a3 + 16), *(float64x2_t *)a3);
      geo::MartinezPolygonUnion<double>::subdivide(v5, a2, &v26);
      geo::MartinezPolygonUnion<double>::subdivide(v5, a3, (float64x2_t *)a2);
      float64x2_t v26 = vaddq_f64(*(float64x2_t *)(a2 + 16), *(float64x2_t *)a2);
      return geo::MartinezPolygonUnion<double>::subdivide(v5, a3, &v26);
    }
    double v19 = -(v14 * v8 - v13 * v7);
    if (v19 != 0.0)
    {
      double v20 = 1.0 / v19;
      double v21 = v9 - v11;
      double v22 = v20 * -(v18 * v14 - v13 * v21);
      v26.f64[0] = v9 - v22 * v7;
      v26.f64[1] = v10 - v22 * v8;
      if (v22 >= 0.0 && v22 <= 1.0)
      {
        double v24 = v20 * -(v21 * v8 - v18 * v7);
        if (v24 >= 0.0 && v24 <= 1.0)
        {
          geo::MartinezPolygonUnion<double>::subdivide(result, a2, &v26);
          return geo::MartinezPolygonUnion<double>::subdivide(v5, a3, &v26);
        }
      }
    }
  }
  return result;
}

BOOL geo::MartinezPolygonUnion<double>::Chain::add(uint64_t a1, double *a2, int a3)
{
  if (*(unsigned char *)(a1 + 24)) {
    return 0;
  }
  uint64_t v5 = *(double **)a1;
  double v6 = *(double **)(a1 + 8);
  if (*(double **)a1 == v6) {
    return 0;
  }
  double v8 = *v5;
  double v9 = *a2;
  if (vabdd_f64(*v5, *a2) >= 1.0e-12 || vabdd_f64(v5[1], a2[1]) >= 1.0e-12)
  {
    if (vabdd_f64(v8, v9 + a2[2]) >= 1.0e-12 || vabdd_f64(v5[1], a2[3] + a2[1]) >= 1.0e-12)
    {
      int v11 = 0;
      int v10 = -1;
    }
    else
    {
      int v11 = 0;
      int v10 = 0;
    }
  }
  else
  {
    int v10 = 0;
    int v11 = 1;
  }
  double v12 = *(v6 - 4);
  double v13 = *(v6 - 3);
  double v14 = *(v6 - 2) + v12;
  double v15 = *(v6 - 1) + v13;
  if (vabdd_f64(v14, v9) < 1.0e-12 && vabdd_f64(v15, a2[1]) < 1.0e-12)
  {
    double v16 = a2[2];
    int v10 = 1;
LABEL_21:
    double v20 = a2[3];
    long long v40 = *(_OWORD *)a2;
    goto LABEL_22;
  }
  double v16 = a2[2];
  double v17 = v9 + v16;
  if (vabdd_f64(v14, v9 + v16) >= 1.0e-12 || (double v18 = a2[3], v19 = v18 + a2[1], vabdd_f64(v15, v19) >= 1.0e-12))
  {
    if (!v11) {
      goto LABEL_21;
    }
    double v18 = a2[3];
    double v19 = v18 + a2[1];
  }
  else
  {
    int v10 = 1;
  }
  double v16 = -v16;
  double v20 = -v18;
  *(double *)&long long v40 = v17;
  *((double *)&v40 + 1) = v19;
LABEL_22:
  *(double *)&long long v41 = v16;
  *((double *)&v41 + 1) = v20;
  if (v10 == 1)
  {
    double v24 = v20 + *((double *)&v40 + 1) - v13;
    if (fabs(v24 * v16 + (v12 - (v16 + *(double *)&v40)) * v20) <= 1.0e-12)
    {
      *(v6 - 2) = v16 + *(double *)&v40 - v12;
      *(v6 - 1) = v24;
    }
    else
    {
      unint64_t v25 = *(void *)(a1 + 16);
      if ((unint64_t)v6 >= v25)
      {
        uint64_t v28 = ((char *)v6 - (char *)v5) >> 5;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 59) {
          abort();
        }
        uint64_t v30 = v25 - (void)v5;
        if (v30 >> 4 > v29) {
          unint64_t v29 = v30 >> 4;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v31 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v29;
        }
        if (v31)
        {
          if (v31 >> 59) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          v32 = (char *)operator new(32 * v31);
        }
        else
        {
          v32 = 0;
        }
        long long v33 = v41;
        v34 = &v32[32 * v28];
        *(_OWORD *)v34 = v40;
        *((_OWORD *)v34 + 1) = v33;
        v35 = v34;
        do
        {
          long long v36 = *((_OWORD *)v6 - 1);
          *((_OWORD *)v35 - 2) = *((_OWORD *)v6 - 2);
          *((_OWORD *)v35 - 1) = v36;
          v35 -= 32;
          v6 -= 4;
        }
        while (v6 != v5);
        v37 = &v32[32 * v31];
        v38 = *(double **)a1;
        double v6 = (double *)(v34 + 32);
        *(void *)a1 = v35;
        *(void *)(a1 + 8) = v34 + 32;
        *(void *)(a1 + 16) = v37;
        if (v38) {
          operator delete(v38);
        }
      }
      else
      {
        long long v26 = v41;
        *(_OWORD *)double v6 = v40;
        *((_OWORD *)v6 + 1) = v26;
        v6 += 4;
      }
      *(void *)(a1 + 8) = v6;
    }
  }
  else if (!v10)
  {
    double v21 = *((double *)&v40 + 1);
    double v22 = v5[2] + v8;
    double v23 = v5[3] + v5[1];
    if (fabs((*((double *)&v40 + 1) + v20 - v23) * v16 + (v22 - (*(double *)&v40 + v16)) * v20) <= 1.0e-12)
    {
      double v27 = v22 - *(double *)&v40;
      *(_OWORD *)uint64_t v5 = v40;
      v5[2] = v27;
      v5[3] = v23 - v21;
    }
    else
    {
      std::vector<gm::LineSegment<double,2>>::insert((void **)a1, v5, &v40);
      double v6 = *(double **)(a1 + 8);
    }
  }
  if (vabdd_f64(**(double **)a1, *(v6 - 4) + *(v6 - 2)) < 1.0e-12
    && vabdd_f64(*(double *)(*(void *)a1 + 8), *(v6 - 1) + *(v6 - 3)) < 1.0e-12)
  {
    *(unsigned char *)(a1 + 24) = 1;
  }
  BOOL result = v10 != -1;
  if (v10 != -1)
  {
    int v39 = *(_DWORD *)(a1 + 28);
    if (v39 != 2 && v39 != a3) {
      *(_DWORD *)(a1 + 28) = 2;
    }
  }
  return result;
}

void std::__tree<geo::MartinezPolygonUnion<double>::VerticalIndex,std::less<geo::MartinezPolygonUnion<double>::VerticalIndex>,std::allocator<geo::MartinezPolygonUnion<double>::VerticalIndex>>::__erase_unique<geo::MartinezPolygonUnion<double>::VerticalIndex>(uint64_t **a1, uint64_t *a2)
{
  int v3 = (uint64_t *)(a1 + 1);
  uint64_t v2 = a1[1];
  if (v2)
  {
    double v6 = (uint64_t *)(a1 + 1);
    double v7 = a1[1];
    do
    {
      int v8 = geo::MartinezPolygonUnion<double>::VerticalIndex::operator<(v7 + 4, a2);
      double v9 = (uint64_t **)(v7 + 1);
      if (!v8)
      {
        double v9 = (uint64_t **)v7;
        double v6 = v7;
      }
      double v7 = *v9;
    }
    while (*v9);
    if (v6 != v3 && (geo::MartinezPolygonUnion<double>::VerticalIndex::operator<(a2, v6 + 4) & 1) == 0)
    {
      int v10 = (uint64_t *)v6[1];
      if (v10)
      {
        do
        {
          int v11 = v10;
          int v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        double v12 = v6;
        do
        {
          int v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          double v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v6) {
        *a1 = v11;
      }
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v2, v6);
      operator delete(v6);
    }
  }
}

char *std::vector<std::vector<gm::Matrix<double,2,1>>>::emplace<>(char **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v3 = (unint64_t)a1[1];
  uint64_t v5 = a2 - (void)*a1;
  uint64_t v6 = v5 / 24;
  double v7 = &(*a1)[24 * (v5 / 24)];
  unint64_t v8 = (unint64_t)a1[2];
  if (v3 < v8)
  {
    if (v7 == (char *)v3)
    {
      *(void *)double v7 = 0;
      *((void *)v7 + 1) = 0;
      *((void *)v7 + 2) = 0;
      a1[1] = v7 + 24;
    }
    else
    {
      double v9 = v7 + 24;
      unint64_t v10 = v3 - 24;
      if (v3 < 0x18)
      {
        double v12 = a1[1];
      }
      else
      {
        unint64_t v11 = v3 - 24;
        double v12 = a1[1];
        do
        {
          *(void *)double v12 = 0;
          *((void *)v12 + 1) = 0;
          *((void *)v12 + 2) = 0;
          *(_OWORD *)double v12 = *(_OWORD *)v11;
          *((void *)v12 + 2) = *(void *)(v11 + 16);
          *(void *)unint64_t v11 = 0;
          *(void *)(v11 + 8) = 0;
          *(void *)(v11 + 16) = 0;
          v12 += 24;
          v11 += 24;
        }
        while (v11 < v3);
      }
      a1[1] = v12;
      if ((void *)v3 != v9)
      {
        uint64_t v19 = 8 * ((uint64_t)(v3 - (void)v9) >> 3);
        do
        {
          double v21 = *(void **)v10;
          if (*(void *)v10)
          {
            *(void *)(v10 + 8) = v21;
            operator delete(v21);
            *(void *)unint64_t v10 = 0;
            *(void *)(v10 + 8) = 0;
            *(void *)(v10 + 16) = 0;
          }
          uint64_t v20 = (uint64_t)&v7[v19 - 24];
          *(_OWORD *)unint64_t v10 = *(_OWORD *)v20;
          *(void *)(v10 + 16) = *(void *)&v7[v19 - 8];
          *(void *)uint64_t v20 = 0;
          *(void *)(v20 + 8) = 0;
          *(void *)(v20 + 16) = 0;
          v10 -= 24;
          v19 -= 24;
        }
        while (v19);
      }
      double v22 = *(void **)v7;
      if (*(void *)v7)
      {
        *(void *)&v4[24 * v6 + 8] = v22;
        operator delete(v22);
        *(void *)double v7 = 0;
        *((void *)v7 + 1) = 0;
        *((void *)v7 + 2) = 0;
      }
      *(void *)double v7 = 0;
      *((void *)v7 + 1) = 0;
      *((void *)v7 + 2) = 0;
    }
    return v7;
  }
  unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - (void)v4) >> 3) + 1;
  if (v13 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v4) >> 3);
  if (2 * v14 > v13) {
    unint64_t v13 = 2 * v14;
  }
  if (v14 >= 0x555555555555555) {
    unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v15 = v13;
  }
  if (v15)
  {
    if (v15 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_57;
    }
    double v16 = (char *)operator new(24 * v15);
  }
  else
  {
    double v16 = 0;
  }
  double v17 = &v16[24 * v6];
  long long v36 = &v16[24 * v15];
  if (v6 == v15)
  {
    if (v5 >= 24)
    {
      uint64_t v18 = v6 + 2;
      if (v6 >= -1) {
        uint64_t v18 = v6 + 1;
      }
      v17 -= 24 * (v18 >> 1);
      goto LABEL_38;
    }
    if ((unint64_t)(v5 + 23) < 0x2F) {
      unint64_t v23 = 1;
    }
    else {
      unint64_t v23 = 2 * v6;
    }
    if (v23 <= 0xAAAAAAAAAAAAAAALL)
    {
      double v24 = (char *)operator new(24 * v23);
      double v17 = &v24[24 * (v23 >> 2)];
      long long v36 = &v24[24 * v23];
      if (v16) {
        operator delete(v16);
      }
      goto LABEL_38;
    }
LABEL_57:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
LABEL_38:
  *(void *)double v17 = 0;
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 2) = 0;
  unint64_t v25 = v17 + 24;
  long long v26 = *a1;
  if (*a1 == v7)
  {
    uint64_t v28 = v17;
  }
  else
  {
    double v27 = v7;
    uint64_t v28 = v17;
    do
    {
      *((void *)v28 - 3) = 0;
      *((void *)v28 - 2) = 0;
      v28 -= 24;
      *((void *)v28 + 2) = 0;
      long long v29 = *(_OWORD *)(v27 - 24);
      v27 -= 24;
      *(_OWORD *)uint64_t v28 = v29;
      *((void *)v28 + 2) = *((void *)v27 + 2);
      *(void *)double v27 = 0;
      *((void *)v27 + 1) = 0;
      *((void *)v27 + 2) = 0;
    }
    while (v27 != v26);
    unint64_t v25 = v17 + 24;
  }
  uint64_t v30 = a1[1];
  if (v30 != v7)
  {
    do
    {
      *(void *)unint64_t v25 = 0;
      *((void *)v25 + 1) = 0;
      *((void *)v25 + 2) = 0;
      *(_OWORD *)unint64_t v25 = *(_OWORD *)v7;
      *((void *)v25 + 2) = *((void *)v7 + 2);
      *(void *)double v7 = 0;
      *((void *)v7 + 1) = 0;
      *((void *)v7 + 2) = 0;
      v25 += 24;
      v7 += 24;
    }
    while (v7 != v30);
    double v7 = a1[1];
  }
  unint64_t v31 = *a1;
  *a1 = v28;
  a1[1] = v25;
  a1[2] = v36;
  if (v7 != v31)
  {
    v32 = v7;
    do
    {
      v34 = (void *)*((void *)v32 - 3);
      v32 -= 24;
      long long v33 = v34;
      if (v34)
      {
        *((void *)v7 - 2) = v33;
        operator delete(v33);
      }
      double v7 = v32;
    }
    while (v32 != v31);
    double v7 = v31;
  }
  if (v7) {
    operator delete(v7);
  }
  return v17;
}

void sub_1A263E1AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<arComponents::CustomBoxCreateDesc>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::vector<std::vector<gm::Matrix<double,2,1>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  unint64_t v3 = *(void ***)(a1 + 16);
  if (v3 != v2)
  {
    uint64_t v4 = *(void ***)(a1 + 16);
    do
    {
      double v7 = (char *)*(v4 - 3);
      v4 -= 3;
      uint64_t v6 = v7;
      *(void *)(a1 + 16) = v4;
      if (v7)
      {
        unint64_t v8 = (char *)*(v3 - 2);
        uint64_t v5 = v6;
        if (v8 != v6)
        {
          double v9 = (char *)*(v3 - 2);
          do
          {
            unint64_t v11 = (void *)*((void *)v9 - 3);
            v9 -= 24;
            unint64_t v10 = v11;
            if (v11)
            {
              *((void *)v8 - 2) = v10;
              operator delete(v10);
            }
            unint64_t v8 = v9;
          }
          while (v9 != v6);
          uint64_t v5 = *v4;
        }
        *(v3 - 2) = v6;
        operator delete(v5);
        uint64_t v4 = *(void ***)(a1 + 16);
      }
      unint64_t v3 = v4;
    }
    while (v4 != v2);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<gm::LineSegment<double,2>>::insert(void **a1, unsigned char *a2, _OWORD *a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (unsigned char *)*a1;
  unint64_t v8 = (unint64_t)*a1 + (v7 & 0xFFFFFFFFFFFFFFE0);
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 < v9)
  {
    if (v8 == v5)
    {
      long long v33 = a3[1];
      *(_OWORD *)unint64_t v8 = *a3;
      *(_OWORD *)(v8 + 16) = v33;
      a1[1] = (void *)(v8 + 32);
      return;
    }
    unint64_t v10 = v8 + 32;
    unint64_t v11 = (void *)(v5 - 32);
    double v12 = a1[1];
    if (v5 >= 0x20)
    {
      unint64_t v13 = (long long *)(v5 - 32);
      double v12 = a1[1];
      do
      {
        long long v14 = *v13;
        long long v15 = v13[1];
        v13 += 2;
        _OWORD *v12 = v14;
        v12[1] = v15;
        v12 += 2;
      }
      while ((unint64_t)v13 < v5);
    }
    a1[1] = v12;
    if (v5 == v10) {
      goto LABEL_16;
    }
    unint64_t v16 = v5 - v10;
    unint64_t v17 = v5 - v10 - 32;
    if (v17 >= 0xE0
      && (v5 - (v16 & 0xFFFFFFFFFFFFFFE0) >= (unint64_t)v11
       || (unint64_t)&v6[v16 + (v7 & 0xFFFFFFFFFFFFFFE0) - (v16 & 0xFFFFFFFFFFFFFFE0)] >= v5))
    {
      uint64_t v18 = (v17 >> 5) + 1;
      unint64_t v19 = v5 - 32 * (v18 & 0xFFFFFFFFFFFFFFELL);
      uint64_t v20 = (const double *)(v5 - 96);
      double v21 = (double *)(v5 - 64);
      uint64_t v22 = v18 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        float64x2x4_t v49 = vld4q_f64(v20);
        vst4q_f64(v21, v49);
        v21 -= 8;
        v20 -= 8;
        v22 -= 2;
      }
      while (v22);
      if (v18 == (v18 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_16:
        BOOL v26 = v8 <= (unint64_t)a3 && v12 > a3;
        double v27 = &a3[2 * v26];
        *(void *)unint64_t v8 = *v27;
        *(void *)(v8 + 8) = v27[1];
        *(void *)(v8 + 16) = v27[2];
        *(void *)(v8 + 24) = v27[3];
        return;
      }
      v11 -= 4 * (v18 & 0xFFFFFFFFFFFFFFELL);
      unint64_t v5 = v19;
    }
    unint64_t v23 = (void *)(v5 - 16);
    do
    {
      uint64_t v24 = *(v11 - 4);
      v11 -= 4;
      *(v23 - 2) = v24;
      *(v23 - 1) = v11[1];
      *unint64_t v23 = v11[2];
      v23[1] = v11[3];
      v23 -= 4;
    }
    while (v11 != (void *)v8);
    goto LABEL_16;
  }
  unint64_t v28 = ((uint64_t)(v5 - (void)v6) >> 5) + 1;
  if (v28 >> 59) {
    abort();
  }
  uint64_t v30 = v9 - (void)v6;
  if (v30 >> 4 > v28) {
    unint64_t v28 = v30 >> 4;
  }
  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v31 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v31 = v28;
  }
  if (v31)
  {
    if (v31 >> 59) {
      goto LABEL_59;
    }
    v32 = (char *)operator new(32 * v31);
  }
  else
  {
    v32 = 0;
  }
  uint64_t v34 = v7 >> 5;
  v35 = &v32[32 * (v7 >> 5)];
  long long v36 = &v32[32 * v31];
  if (v7 >> 5 == v31)
  {
    if (v7 >= 1)
    {
      if (v34 >= -1) {
        unint64_t v37 = v34 + 1;
      }
      else {
        unint64_t v37 = v34 + 2;
      }
      v35 -= 32 * (v37 >> 1);
      goto LABEL_46;
    }
    if (v6 == a2) {
      unint64_t v38 = 1;
    }
    else {
      unint64_t v38 = v7 >> 4;
    }
    if (!(v38 >> 59))
    {
      v35 = (char *)operator new(32 * v38);
      long long v36 = &v35[32 * v38];
      if (v32)
      {
        operator delete(v32);
        uint64_t v6 = *a1;
      }
      goto LABEL_46;
    }
LABEL_59:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
LABEL_46:
  long long v39 = a3[1];
  *(_OWORD *)v35 = *a3;
  *((_OWORD *)v35 + 1) = v39;
  long long v40 = v35 + 32;
  if (v6 == (unsigned char *)v8)
  {
    v42 = v35;
  }
  else
  {
    unint64_t v41 = v8;
    do
    {
      v42 = v35 - 32;
      long long v43 = *(_OWORD *)(v41 - 16);
      *((_OWORD *)v35 - 2) = *(_OWORD *)(v41 - 32);
      *((_OWORD *)v35 - 1) = v43;
      v41 -= 32;
      v35 -= 32;
    }
    while ((unsigned char *)v41 != v6);
  }
  for (i = a1[1]; (void *)v8 != i; v40 += 2)
  {
    long long v45 = *(_OWORD *)v8;
    long long v46 = *(_OWORD *)(v8 + 16);
    v8 += 32;
    *long long v40 = v45;
    v40[1] = v46;
  }
  v47 = *a1;
  *a1 = v42;
  a1[1] = v40;
  a1[2] = v36;
  if (v47)
  {
    operator delete(v47);
  }
}

void sub_1A263E570(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t geo::MartinezPolygonUnion<double>::subdivide(uint64_t result, uint64_t a2, float64x2_t *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  float64x2_t v6 = *(float64x2_t *)a2;
  float64x2_t v5 = *(float64x2_t *)(a2 + 16);
  float64x2_t v7 = *a3;
  float64x2_t v8 = vsubq_f64(*(float64x2_t *)a2, *a3);
  if (fabs(v8.f64[0]) >= 1.0e-12 || fabs(v8.f64[1]) >= 1.0e-12)
  {
    float64x2_t v9 = vaddq_f64(v5, v6);
    int32x2_t v10 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3D719799812DEA11uLL), vabdq_f64(v9, v7)));
    if ((v10.i32[0] & v10.i32[1] & 1) == 0)
    {
      float64x2_t v11 = vsubq_f64(v7, v6);
      float64x2_t v12 = vmulq_f64(vsubq_f64(v9, v7), (float64x2_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL));
      if (fabs(vsubq_f64(v12, (float64x2_t)vdupq_laneq_s64((int64x2_t)v12, 1)).f64[0]) <= 1.0e-12)
      {
        float64x2_t v13 = vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v11, (int8x16_t)v5, 8uLL), (float64x2_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL));
        v11.f64[1] = *(float64_t *)(a2 + 24);
        float64x2_t v14 = vmlaq_f64(v13, v5, v11);
        double v15 = vdivq_f64(v14, (float64x2_t)vdupq_laneq_s64((int64x2_t)v14, 1)).f64[0];
        if (v15 >= 0.0 && v15 <= 1.0)
        {
          v17[0] = a2;
          std::__tree<geo::MartinezPolygonUnion<double>::VerticalIndex,std::less<geo::MartinezPolygonUnion<double>::VerticalIndex>,std::allocator<geo::MartinezPolygonUnion<double>::VerticalIndex>>::__erase_unique<geo::MartinezPolygonUnion<double>::VerticalIndex>((uint64_t **)(result + 32), v17);
          *(float64x2_t *)(a2 + 16) = vsubq_f64(*a3, *(float64x2_t *)a2);
          *(void *)(*(void *)(a2 + 40) + 40) = 0;
          operator new();
        }
      }
    }
  }
  return result;
}

void std::priority_queue<geo::MartinezPolygonUnion<double>::HorizontalIndex,std::vector<geo::MartinezPolygonUnion<double>::HorizontalIndex,std::allocator<geo::MartinezPolygonUnion<double>::HorizontalIndex>>,std::greater<geo::MartinezPolygonUnion<double>::HorizontalIndex>>::push(uint64_t a1, uint64_t a2)
{
  float64x2_t v5 = *(void **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  float64x2_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    float64x2_t v8 = *(unsigned char **)a1;
    uint64_t v9 = (uint64_t)v5 - *(void *)a1;
    uint64_t v10 = v9 >> 3;
    unint64_t v11 = (v9 >> 3) + 1;
    if (v11 >> 61) {
      abort();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      float64x2_t v14 = operator new(8 * v13);
    }
    else
    {
      float64x2_t v14 = 0;
    }
    double v15 = &v14[8 * v10];
    unint64_t v16 = &v14[8 * v13];
    void *v15 = a2;
    float64x2_t v7 = v15 + 1;
    if (v5 == (void *)v8)
    {
      float64x2_t v8 = v5;
    }
    else
    {
      unint64_t v17 = (char *)v5 - v8 - 8;
      if (v17 < 0x58) {
        goto LABEL_34;
      }
      if ((unint64_t)((char *)v5 - v14 - v9) < 0x20) {
        goto LABEL_34;
      }
      uint64_t v18 = (v17 >> 3) + 1;
      float64x2_t v6 = &v5[-(v18 & 0x3FFFFFFFFFFFFFFCLL)];
      unint64_t v19 = &v14[8 * v10 - 16];
      uint64_t v20 = (long long *)(v5 - 2);
      uint64_t v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        _OWORD *v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      v15 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          uint64_t v23 = *--v6;
          *--double v15 = v23;
        }
        while (v6 != (void *)v8);
        float64x2_t v8 = *(unsigned char **)a1;
      }
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v16;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *float64x2_t v5 = a2;
    float64x2_t v7 = v5 + 1;
  }
  *(void *)(a1 + 8) = v7;
  uint64_t v24 = *(unsigned char **)a1;
  uint64_t v25 = (uint64_t)v7 - *(void *)a1;
  if (v25 >= 9)
  {
    unint64_t v26 = (((unint64_t)v25 >> 3) - 2) >> 1;
    double v27 = (uint64_t *)&v24[8 * v26];
    uint64_t v30 = *(v7 - 1);
    long long v29 = v7 - 1;
    uint64_t v28 = v30;
    uint64_t v31 = *v27;
    if (!geo::MartinezPolygonUnion<double>::HorizontalIndex::operator<(*v27, v30))
    {
      do
      {
        v32 = v27;
        *long long v29 = v31;
        if (!v26) {
          break;
        }
        unint64_t v26 = (v26 - 1) >> 1;
        double v27 = (uint64_t *)&v24[8 * v26];
        uint64_t v31 = *v27;
        long long v29 = v32;
      }
      while (!geo::MartinezPolygonUnion<double>::HorizontalIndex::operator<(*v27, v28));
      uint64_t *v32 = v28;
    }
  }
}

BOOL std::less<md::MaskingOverlayMeshProcessor::_unionPolygons(std::list<std::pair<std::shared_ptr<geo::Polygon2<double>>,gm::Range<signed char>>> &)::PolygonEdge>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 24);
  double v3 = *(double *)(a2 + 24);
  if (vabdd_f64(v2, v3) > 1.0e-12) {
    return v2 > v3;
  }
  unsigned int v5 = *(unsigned __int8 *)(a1 + 32);
  unsigned int v6 = *(unsigned __int8 *)(a2 + 32);
  if (v5 != v6) {
    return v5 < v6;
  }
  float64x2_t v7 = **(char ***)a1;
  float64x2_t v8 = *(char **)(*(void *)a1 + 8);
  if (v7 == v8)
  {
    double v12 = 1.79769313e308;
    double v13 = -1.79769313e308;
    double v10 = 1.79769313e308;
    double v11 = -1.79769313e308;
    goto LABEL_14;
  }
  unint64_t v9 = v8 - v7 - 16;
  if (v9 < 0x30)
  {
    double v10 = 1.79769313e308;
    double v11 = -1.79769313e308;
    double v12 = 1.79769313e308;
    double v13 = -1.79769313e308;
    goto LABEL_13;
  }
  uint64_t v14 = (v9 >> 4) + 1;
  float64x2_t v15 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  float64x2_t v16 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  unint64_t v17 = (const double *)(v7 + 32);
  uint64_t v18 = v14 & 0x1FFFFFFFFFFFFFFCLL;
  float64x2_t v19 = v16;
  float64x2_t v20 = v15;
  float64x2_t v21 = v15;
  float64x2_t v22 = v15;
  float64x2_t v23 = v16;
  float64x2_t v24 = v16;
  do
  {
    uint64_t v25 = v17 - 4;
    float64x2x2_t v51 = vld2q_f64(v25);
    float64x2x2_t v52 = vld2q_f64(v17);
    float64x2_t v15 = vminnmq_f64(v51.val[0], v15);
    float64x2_t v20 = vminnmq_f64(v52.val[0], v20);
    float64x2_t v23 = vmaxnmq_f64(v23, v51.val[0]);
    float64x2_t v24 = vmaxnmq_f64(v24, v52.val[0]);
    float64x2_t v21 = vminnmq_f64(v51.val[1], v21);
    float64x2_t v22 = vminnmq_f64(v52.val[1], v22);
    float64x2_t v16 = vmaxnmq_f64(v16, v51.val[1]);
    float64x2_t v19 = vmaxnmq_f64(v19, v52.val[1]);
    v17 += 8;
    v18 -= 4;
  }
  while (v18);
  double v13 = vmaxnmvq_f64(vmaxnmq_f64(v23, v24));
  double v12 = vminnmvq_f64(vminnmq_f64(v21, v22));
  double v10 = vminnmvq_f64(vminnmq_f64(v15, v20));
  double v11 = vmaxnmvq_f64(vmaxnmq_f64(v16, v19));
  if (v14 != (v14 & 0x1FFFFFFFFFFFFFFCLL))
  {
    v7 += 16 * (v14 & 0x1FFFFFFFFFFFFFFCLL);
    do
    {
LABEL_13:
      double v26 = *(double *)v7;
      double v27 = *((double *)v7 + 1);
      v7 += 16;
      double v10 = fmin(v26, v10);
      double v13 = fmax(v13, v26);
      double v12 = fmin(v27, v12);
      double v11 = fmax(v11, v27);
    }
    while (v7 != v8);
  }
LABEL_14:
  uint64_t v28 = **(char ***)a2;
  long long v29 = *(char **)(*(void *)a2 + 8);
  if (v28 == v29)
  {
    double v33 = 1.79769313e308;
    double v34 = -1.79769313e308;
    double v31 = 1.79769313e308;
    double v32 = -1.79769313e308;
    goto LABEL_23;
  }
  unint64_t v30 = v29 - v28 - 16;
  if (v30 < 0x30)
  {
    double v31 = 1.79769313e308;
    double v32 = -1.79769313e308;
    double v33 = 1.79769313e308;
    double v34 = -1.79769313e308;
    goto LABEL_22;
  }
  uint64_t v35 = (v30 >> 4) + 1;
  float64x2_t v36 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  float64x2_t v37 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  unint64_t v38 = (const double *)(v28 + 32);
  uint64_t v39 = v35 & 0x1FFFFFFFFFFFFFFCLL;
  float64x2_t v40 = v37;
  float64x2_t v41 = v36;
  float64x2_t v42 = v36;
  float64x2_t v43 = v36;
  float64x2_t v44 = v37;
  float64x2_t v45 = v37;
  do
  {
    long long v46 = v38 - 4;
    float64x2x2_t v53 = vld2q_f64(v46);
    float64x2x2_t v54 = vld2q_f64(v38);
    float64x2_t v36 = vminnmq_f64(v53.val[0], v36);
    float64x2_t v41 = vminnmq_f64(v54.val[0], v41);
    float64x2_t v44 = vmaxnmq_f64(v44, v53.val[0]);
    float64x2_t v45 = vmaxnmq_f64(v45, v54.val[0]);
    float64x2_t v42 = vminnmq_f64(v53.val[1], v42);
    float64x2_t v43 = vminnmq_f64(v54.val[1], v43);
    float64x2_t v37 = vmaxnmq_f64(v37, v53.val[1]);
    float64x2_t v40 = vmaxnmq_f64(v40, v54.val[1]);
    v38 += 8;
    v39 -= 4;
  }
  while (v39);
  double v34 = vmaxnmvq_f64(vmaxnmq_f64(v44, v45));
  double v33 = vminnmvq_f64(vminnmq_f64(v42, v43));
  double v31 = vminnmvq_f64(vminnmq_f64(v36, v41));
  double v32 = vmaxnmvq_f64(vmaxnmq_f64(v37, v40));
  if (v35 != (v35 & 0x1FFFFFFFFFFFFFFCLL))
  {
    v28 += 16 * (v35 & 0x1FFFFFFFFFFFFFFCLL);
    do
    {
LABEL_22:
      double v47 = *(double *)v28;
      double v48 = *((double *)v28 + 1);
      v28 += 16;
      double v31 = fmin(v47, v31);
      double v34 = fmax(v34, v47);
      double v33 = fmin(v48, v33);
      double v32 = fmax(v32, v48);
    }
    while (v28 != v29);
  }
LABEL_23:
  if (*(unsigned char *)(a1 + 32)) {
    double v49 = v13;
  }
  else {
    double v49 = v10;
  }
  if (*(unsigned char *)(a1 + 32)) {
    double v50 = v34;
  }
  else {
    double v50 = v31;
  }
  if (vabdd_f64(v49, v50) <= 1.0e-12) {
    return (v11 - v12) * (v13 - v10) > (v32 - v33) * (v34 - v31);
  }
  else {
    return v49 > v50;
  }
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::HeightRequestId,karo::AsyncRequestManagerNoArgs>::waitOnRequest(uint64_t a1, uint64_t a2, unsigned int a3)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  unsigned int v6 = *(void **)(a1 + 72);
  if (!v6) {
    goto LABEL_8;
  }
  float64x2_t v7 = (void *)(a1 + 72);
  do
  {
    BOOL v8 = altitude::HeightRequestId::operator<((uint64_t)(v6 + 4), a2);
    unint64_t v9 = v6 + 1;
    if (!v8)
    {
      unint64_t v9 = v6;
      float64x2_t v7 = v6;
    }
    unsigned int v6 = (void *)*v9;
  }
  while (*v9);
  if (v7 == (void *)(a1 + 72) || altitude::HeightRequestId::operator<(a2, (uint64_t)(v7 + 4)))
  {
LABEL_8:
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    return 0;
  }
  else
  {
    uint64_t v13 = v7[8];
    double v12 = (std::__shared_weak_count *)v7[9];
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
    if (v13)
    {
      karo::Job::waitToFinish((karo::Job *)v13, a3);
      pthread_mutex_lock(*(pthread_mutex_t **)(v13 + 152));
      uint64_t v10 = *(_DWORD *)(v13 + 160) & 1;
      pthread_mutex_unlock(*(pthread_mutex_t **)(v13 + 152));
      if (!v12) {
        return v10;
      }
    }
    else
    {
      uint64_t v10 = 0;
      if (!v12) {
        return v10;
      }
    }
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v10;
}

BOOL altitude::HeightRequestId::operator<(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 < *(_DWORD *)a2) {
    return 1;
  }
  if (*(_DWORD *)a1 > *(_DWORD *)a2) {
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(a1 + 4);
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  if (v3 < v4) {
    return 1;
  }
  if (v3 > v4) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a2 + 8);
  if (v5 < v6) {
    return 1;
  }
  if (v5 <= v6)
  {
    unsigned int v7 = *(_DWORD *)(a1 + 12);
    unsigned int v8 = *(_DWORD *)(a2 + 12);
    BOOL v9 = v7 >= v8;
    uint64_t v10 = v7 < v8;
    if (!v9) {
      return v10;
    }
  }
  unsigned int v11 = *(_DWORD *)(a2 + 8);
  unsigned int v12 = *(_DWORD *)(a1 + 8);
  if (v11 < v12) {
    return 0;
  }
  if (v11 <= v12 && *(_DWORD *)(a2 + 12) < *(_DWORD *)(a1 + 12)) {
    return 0;
  }
  uint64_t v10 = *(unsigned __int8 *)(a2 + 24);
  if (!*(unsigned char *)(a1 + 24) && *(unsigned char *)(a2 + 24)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 24) && !*(unsigned char *)(a2 + 24)) {
    return v10;
  }
  uint64_t v10 = *(unsigned __int8 *)(a2 + 25);
  if (!*(unsigned char *)(a1 + 25) && *(unsigned char *)(a2 + 25)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 25) && !*(unsigned char *)(a2 + 25)) {
    return v10;
  }
  uint64_t v10 = *(unsigned __int8 *)(a2 + 26);
  if (!*(unsigned char *)(a1 + 26) && *(unsigned char *)(a2 + 26)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 26) && !*(unsigned char *)(a2 + 26)) {
    return v10;
  }
  float v13 = *(float *)(a1 + 28);
  float v14 = *(float *)(a2 + 28);
  if (v13 < v14) {
    return 1;
  }
  if (v13 <= v14) {
    return *(void *)(a1 + 16) < *(void *)(a2 + 16);
  }
  return 0;
}

void altitude::HeightRequestManager::request(void *a1@<X0>, int *a2@<X1>, void *a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1[12])
  {
    unsigned int v5 = *(void (**)(void))(*a1 + 80);
    v5();
  }
  else
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    unsigned int v6 = GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
    {
      int v8 = a2[1];
      int v7 = a2[2];
      int v9 = *a2;
      v10[0] = 67109632;
      v10[1] = v8;
      __int16 v11 = 1024;
      int v12 = v7;
      __int16 v13 = 1024;
      int v14 = v9;
      _os_log_impl(&dword_1A1780000, v6, OS_LOG_TYPE_ERROR, "Missing input slot! Unable to fetch request %u %u %u", (uint8_t *)v10, 0x14u);
    }
    a3[1] = 0;
    a3[2] = 0;
    *a3 = off_1EF5677B0;
  }
}

void karo::AsyncRequestManagerTemplate<altitude::HeightRequestId,karo::AsyncRequestManagerNoArgs>::getRequest(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  int v8 = (uint64_t **)(a1 + 72);
  int v9 = *(void **)(a1 + 72);
  if (!v9) {
    goto LABEL_8;
  }
  uint64_t v10 = (uint64_t **)(a1 + 72);
  do
  {
    BOOL v11 = altitude::HeightRequestId::operator<((uint64_t)(v9 + 4), (uint64_t)a2);
    int v12 = v9 + 1;
    if (!v11)
    {
      int v12 = v9;
      uint64_t v10 = (uint64_t **)v9;
    }
    int v9 = (void *)*v12;
  }
  while (*v12);
  if (v10 == v8 || altitude::HeightRequestId::operator<((uint64_t)a2, (uint64_t)(v10 + 4)))
  {
LABEL_8:
    (*(void (**)(uint64_t **__return_ptr, uint64_t, _OWORD *, uint64_t))(*(void *)a1 + 64))(&v28, a1, a2, a3);
    __int16 v13 = v28;
    int v14 = v29;
    *a4 = v28;
    a4[1] = (uint64_t *)v14;
    uint64_t v15 = *(char **)(a1 + 72);
    float64x2_t v16 = (char *)v8;
    if (v15)
    {
      while (1)
      {
        while (1)
        {
          float64x2_t v16 = v15;
          uint64_t v17 = (uint64_t)(v15 + 32);
          if (!altitude::HeightRequestId::operator<((uint64_t)a2, (uint64_t)(v15 + 32))) {
            break;
          }
          uint64_t v15 = *(char **)v16;
          int v8 = (uint64_t **)v16;
          if (!*(void *)v16) {
            goto LABEL_15;
          }
        }
        if (!altitude::HeightRequestId::operator<(v17, (uint64_t)a2)) {
          break;
        }
        uint64_t v15 = (char *)*((void *)v16 + 1);
        if (!v15)
        {
          int v8 = (uint64_t **)(v16 + 8);
          goto LABEL_15;
        }
      }
    }
    else
    {
LABEL_15:
      uint64_t v18 = v16;
      float64x2_t v16 = (char *)operator new(0x50uLL);
      long long v19 = a2[1];
      *((_OWORD *)v16 + 2) = *a2;
      *((_OWORD *)v16 + 3) = v19;
      *((void *)v16 + 8) = 0;
      *((void *)v16 + 9) = 0;
      *(void *)float64x2_t v16 = 0;
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 2) = v18;
      *int v8 = (uint64_t *)v16;
      uint64_t v20 = **(void **)(a1 + 64);
      float64x2_t v21 = (uint64_t *)v16;
      if (v20)
      {
        *(void *)(a1 + 64) = v20;
        float64x2_t v21 = *v8;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 72), v21);
      ++*(void *)(a1 + 80);
      __int16 v13 = *a4;
      int v14 = (std::__shared_weak_count *)a4[1];
    }
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float64x2_t v22 = (std::__shared_weak_count *)*((void *)v16 + 9);
    *((void *)v16 + 8) = v13;
    *((void *)v16 + 9) = v14;
    if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      unint64_t v23 = *(void *)(a1 + 48);
      if (!v23) {
        return;
      }
    }
    else
    {
      unint64_t v23 = *(void *)(a1 + 48);
      if (!v23) {
        return;
      }
    }
    float64x2_t v24 = *a4;
    uint64_t v25 = (std::__shared_weak_count *)a4[1];
    uint64_t v28 = v24;
    long long v29 = v25;
    if (v25)
    {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      karo::JobManager::queueJob(v23, &v28);
      if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    else
    {
      karo::JobManager::queueJob(v23, &v28);
    }
  }
  else
  {
    double v27 = v10[8];
    double v26 = v10[9];
    if (v26) {
      atomic_fetch_add_explicit(v26 + 1, 1uLL, memory_order_relaxed);
    }
    *a4 = v27;
    a4[1] = v26;
  }
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::HeightRequestId,karo::AsyncRequestManagerNoArgs>::requestT@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a3) {
    a3 = *(_DWORD *)(a1 + 88) + 1;
  }
  (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(&v22, a1, a2, a7);
  float64x2_t v16 = v22;
  unsigned int v17 = atomic_load(v22 + 4);
  if (v17 != a4) {
    (*(void (**)(unsigned int *, uint64_t))(*(void *)v22 + 24))(v22, a4);
  }
  v16[45] = a3;
  v16[46] = a5;
  *((unsigned char *)v16 + 176) = a6;
  uint64_t v18 = v22;
  long long v19 = v23;
  *a8 = off_1EF5677B0;
  a8[1] = v18;
  a8[2] = v19;
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v18 = (unsigned int *)a8[1];
  }
  if (v18) {
    atomic_fetch_add((atomic_uint *volatile)v18 + 32, 1u);
  }
  uint64_t v20 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::HeightRequestId,karo::AsyncRequestManagerNoArgs>::requestT(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  if (!a4) {
    a4 = *(_DWORD *)(a1 + 88) + 1;
  }
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      uint64_t v10 = v8 + 32;
      (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(&v22, a1, v8, v8 + 32);
      BOOL v11 = v22;
      int v12 = *(_DWORD *)(v8 + 36);
      unsigned int v13 = *(_DWORD *)(v8 + 40);
      char v14 = *(unsigned char *)(v8 + 44);
      unsigned int v15 = atomic_load(v22 + 4);
      if (v15 != v12) {
        (*(void (**)(unsigned int *))(*(void *)v22 + 24))(v22);
      }
      v11[45] = a4;
      v11[46] = v13;
      *((unsigned char *)v11 + 176) = v14;
      float64x2_t v16 = *(void **)(a3 + 8);
      if ((unint64_t)v16 >= *(void *)(a3 + 16))
      {
        long long v19 = std::vector<karo::AsyncRequestManager::RequestHandle>::__emplace_back_slow_path<std::shared_ptr<karo::AsyncRequestManager::Request> &>((void **)a3, (uint64_t)v22, (uint64_t)v23);
      }
      else
      {
        void *v16 = off_1EF5677B0;
        unsigned int v17 = v22;
        v16[1] = v22;
        uint64_t v18 = (uint64_t)v23;
        v16[2] = v23;
        if (v18)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
          unsigned int v17 = (unsigned int *)v16[1];
        }
        if (v17) {
          atomic_fetch_add((atomic_uint *volatile)v17 + 32, 1u);
        }
        long long v19 = v16 + 3;
      }
      *(void *)(a3 + 8) = v19;
      uint64_t v20 = v23;
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      uint64_t v8 = v10 + 16;
    }
    while (v10 + 16 != v9);
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void altitude::HeightRequestManager::createRequest(uint64_t a1, unsigned int *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)a2 + 2);
  uint64_t v3 = v2 + 40;
  int v4 = *(char *)(v2 + 135);
  BOOL v5 = v4 < 0;
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(v2 + 135);
  }
  else {
    uint64_t v6 = *(void *)(v2 + 120);
  }
  uint64_t v7 = v2 + 112;
  if (v5) {
    uint64_t v7 = *(void *)(v2 + 112);
  }
  if (v6 == 5 && (*(_DWORD *)v7 == 1819308129 ? (BOOL v8 = *(unsigned char *)(v7 + 4) == 101) : (BOOL v8 = 0), v8))
  {
    snprintf(__str, 0x400uLL, "%s&z=%d&x=%d&y=%d&h=%d");
  }
  else
  {
    int v9 = *(char *)(v2 + 63);
    uint64_t v10 = *(void *)(v2 + 40);
    if (v9 < 0) {
      uint64_t v3 = v10;
    }
    snprintf(__str, 0x400uLL, "%s%i/%i/map_%i_%i_%i_%i%s", v3, *a2);
  }
  size_t v11 = strlen(__str);
  if (v11 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v12 = v11;
  if (v11 >= 0x17)
  {
    uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v14 = v11 | 7;
    }
    uint64_t v15 = v14 + 1;
    unsigned int v13 = operator new(v14 + 1);
    __dst[1] = v12;
    unint64_t v17 = v15 | 0x8000000000000000;
    __dst[0] = v13;
  }
  else
  {
    HIBYTE(v17) = v11;
    unsigned int v13 = __dst;
    if (!v11)
    {
LABEL_22:
      *((unsigned char *)v13 + v12) = 0;
      operator new();
    }
  }
  memcpy(v13, __str, v12);
  goto LABEL_22;
}

uint64_t std::__shared_ptr_pointer<altitude::HeightRequest *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::HeightRequest>,std::allocator<altitude::HeightRequest>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<altitude::HeightRequest *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::HeightRequest>,std::allocator<altitude::HeightRequest>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void karo::AsyncRequestManagerTemplate<altitude::HeightRequestId,karo::AsyncRequestManagerNoArgs>::createAndQueueRequest(void *a1@<X0>, uint64_t *a2@<X8>)
{
  (*(void (**)(void *))(*a1 + 64))(a1);
  unint64_t v4 = a1[6];
  if (v4)
  {
    uint64_t v5 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)a2[1];
    v7[0] = v5;
    v7[1] = v6;
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      karo::JobManager::queueJob(v4, v7);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      karo::JobManager::queueJob(v4, v7);
    }
  }
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::HeightRequestId,karo::AsyncRequestManagerNoArgs>::clearRequest(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  unint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    uint64_t v5 = (void *)(a1 + 72);
    do
    {
      BOOL v6 = altitude::HeightRequestId::operator<((uint64_t)(v4 + 4), a2);
      uint64_t v7 = v4 + 1;
      if (!v6)
      {
        uint64_t v7 = v4;
        uint64_t v5 = v4;
      }
      unint64_t v4 = (void *)*v7;
    }
    while (*v7);
    if (v5 != (void *)(a1 + 72) && !altitude::HeightRequestId::operator<(a2, (uint64_t)(v5 + 4)))
    {
      (*(void (**)(void))(*(void *)v5[8] + 16))(v5[8]);
      BOOL v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          int v9 = v8;
          BOOL v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        uint64_t v10 = v5;
        do
        {
          int v9 = (void *)v10[2];
          BOOL v11 = *v9 == (void)v10;
          uint64_t v10 = v9;
        }
        while (!v11);
      }
      if (*(void **)(a1 + 64) == v5) {
        *(void *)(a1 + 64) = v9;
      }
      size_t v12 = *(uint64_t **)(a1 + 72);
      --*(void *)(a1 + 80);
      std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v12, v5);
      unsigned int v13 = (std::__shared_weak_count *)v5[9];
      if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      operator delete(v5);
    }
  }
  uint64_t v14 = *(pthread_mutex_t **)(a1 + 40);
  return pthread_mutex_unlock(v14);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::HeightRequestId,karo::AsyncRequestManagerNoArgs>::removeFromRequests(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  unint64_t v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    uint64_t v5 = *(uint64_t **)(a1 + 64);
    while (1)
    {
      BOOL v6 = (uint64_t *)v5[1];
      if (v5[8] == a2) {
        break;
      }
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          BOOL v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (uint64_t *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
      if (v7 == (uint64_t *)(a1 + 72)) {
        goto LABEL_23;
      }
    }
    if (v6)
    {
      do
      {
        int v9 = v6;
        BOOL v6 = (uint64_t *)*v6;
      }
      while (v6);
    }
    else
    {
      uint64_t v10 = v5;
      do
      {
        int v9 = (uint64_t *)v10[2];
        BOOL v8 = *v9 == (void)v10;
        uint64_t v10 = v9;
      }
      while (!v8);
    }
    if (v4 == v5) {
      *(void *)(a1 + 64) = v9;
    }
    BOOL v11 = *(uint64_t **)(a1 + 72);
    --*(void *)(a1 + 80);
    std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v11, v5);
    size_t v12 = (std::__shared_weak_count *)v5[9];
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    operator delete(v5);
  }
LABEL_23:
  unsigned int v13 = *(pthread_mutex_t **)(a1 + 40);
  return pthread_mutex_unlock(v13);
}

uint64_t karo::AsyncRequestManagerTemplate<altitude::HeightRequestId,karo::AsyncRequestManagerNoArgs>::pruneRequests(uint64_t a1, int a2)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  unint64_t v4 = *(uint64_t **)(a1 + 64);
  if (v4 != (uint64_t *)(a1 + 72))
  {
    do
    {
      uint64_t v5 = (uint64_t *)v4[1];
      BOOL v6 = v4;
      if (v5)
      {
        do
        {
          uint64_t v7 = v5;
          uint64_t v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v7 = (uint64_t *)v6[2];
          BOOL v8 = *v7 == (void)v6;
          BOOL v6 = v7;
        }
        while (!v8);
      }
      uint64_t v9 = v4[8];
      if (atomic_load((unsigned int *)(v9 + 128))) {
        *(_DWORD *)(v9 + 180) = a2;
      }
      pthread_mutex_lock(*(pthread_mutex_t **)(v9 + 152));
      int v11 = *(_DWORD *)(v9 + 160);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 152));
      if ((v11 & 1) != 0 && *(unsigned char *)(v9 + 176) && *(_DWORD *)(v9 + 180) != a2
        || (a2 - *(_DWORD *)(v9 + 180)) > *(_DWORD *)(v9 + 184))
      {
        (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
        size_t v12 = (uint64_t *)v4[1];
        unsigned int v13 = v4;
        if (v12)
        {
          do
          {
            uint64_t v14 = v12;
            size_t v12 = (uint64_t *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            uint64_t v14 = (uint64_t *)v13[2];
            BOOL v8 = *v14 == (void)v13;
            unsigned int v13 = v14;
          }
          while (!v8);
        }
        if (*(uint64_t **)(a1 + 64) == v4) {
          *(void *)(a1 + 64) = v14;
        }
        uint64_t v15 = *(uint64_t **)(a1 + 72);
        --*(void *)(a1 + 80);
        std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v15, v4);
        float64x2_t v16 = (std::__shared_weak_count *)v4[9];
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        operator delete(v4);
      }
      unint64_t v4 = v7;
    }
    while (v7 != (uint64_t *)(a1 + 72));
  }
  *(_DWORD *)(a1 + 88) = a2;
  unint64_t v17 = *(pthread_mutex_t **)(a1 + 40);
  return pthread_mutex_unlock(v17);
}

void altitude::HeightRequestManager::~HeightRequestManager(altitude::HeightRequestManager *this)
{
  *(void *)this = &unk_1EF56A3A8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF5678B0;
  while (*((void *)this + 10))
    (*(void (**)(altitude::HeightRequestManager *, uint64_t))(*(void *)this + 48))(this, *((void *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((void **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF56A3A8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF5678B0;
  while (*((void *)this + 10))
    (*(void (**)(altitude::HeightRequestManager *, uint64_t))(*(void *)this + 48))(this, *((void *)this + 8) + 32);
  std::__tree<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::TileKey,std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::TileKey>,true>,std::allocator<std::__value_type<altitude::TileKey,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((void **)this + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(this);
}

uint64_t altitude::HeightRequestManager::getResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, void))(*(void *)a1 + 96))(&v34, a1, a2, 0);
  uint64_t v13 = v34;
  size_t v12 = v35;
  if (v35) {
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 40))(v13);
  if (v14)
  {
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v13 + 48))(&v32, v13);
    long long v15 = v32;
    long long v32 = 0uLL;
    float64x2_t v16 = *(std::__shared_weak_count **)(a3 + 8);
    *(_OWORD *)a3 = v15;
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    unint64_t v17 = (std::__shared_weak_count *)*((void *)&v32 + 1);
    if (*((void *)&v32 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v32 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v13 + 56))(&v32, v13);
    long long v18 = v32;
    long long v32 = 0uLL;
    uint64_t v19 = *(std::__shared_weak_count **)(a4 + 8);
    *(_OWORD *)a4 = v18;
    if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    uint64_t v20 = (std::__shared_weak_count *)*((void *)&v32 + 1);
    if (*((void *)&v32 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v32 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    uint64_t v33 = 0;
    long long v32 = (unint64_t)&v32 + 8;
    std::set<altitude::TileKey>::insert[abi:nn180100]<std::__tree_const_iterator<altitude::TileKey,std::__tree_node<altitude::TileKey,void *> *,long>>((uint64_t *)&v32, *(void **)(v13 + 432), (void *)(v13 + 440));
    uint64_t v21 = a5 + 8;
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a5 + 8));
    float64x2_t v22 = (void *)*((void *)&v32 + 1);
    *(void *)a5 = v32;
    *(void *)(a5 + 8) = v22;
    uint64_t v23 = v33;
    *(void *)(a5 + 16) = v33;
    if (v23)
    {
      v22[2] = v21;
      *(void *)&long long v32 = (char *)&v32 + 8;
      *((void *)&v32 + 1) = 0;
      uint64_t v33 = 0;
      float64x2_t v22 = 0;
    }
    else
    {
      *(void *)a5 = v21;
    }
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v22);
    uint64_t v24 = *(void *)(v13 + 288);
    *(void *)&long long v25 = *(void *)(v13 + 280);
    *((void *)&v25 + 1) = v24;
    if (v24) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
    }
    double v26 = *(std::__shared_weak_count **)(a6 + 8);
    *(_OWORD *)a6 = v25;
    if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    uint64_t v27 = *(void *)(a1 + 128);
    if (v27)
    {
      double v28 = *(double *)(v13 + 424);
      double v29 = (v28 - *(double *)(v13 + 416)) * 1000.0;
      gdc::Statistics::addSampleValue(v27, "HeightLoadJobTotalTime (ms)", 0x4F1B74F10000001BuLL, (v28 - *(double *)(v13 + 408)) * 1000.0);
      gdc::Statistics::addSampleValue(*(void *)(a1 + 128), "HeightLoadJobMainTime (ms)", 0x6A12CB110000001AuLL, v29);
    }
  }
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  unint64_t v30 = v35;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
  return v14;
}

uint64_t altitude::HeightRequestManager::maxHeightMeshLevelForTileKey(uint64_t a1, unsigned int *a2)
{
  v9[2] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = [MEMORY[0x1E4F64918] modernManager];
  v9[0] = altitude::TileKey::getGEOTileKey(a2, a1);
  v9[1] = v5;
  BOOL v6 = [v4 activeTileGroup];
  uint64_t v7 = [v6 activeTileSetForKey:v9];

  GEOMapRectForGEOTileKey();
  LODWORD(v6) = objc_msgSend(v7, "maximumZoomLevelInRect:");

  return (v6 - 1);
}

void sub_1A2640A68(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void md::Logic<md::ARFeatureInjectionLogic,md::ARFeatureInjectionContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    size_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void md::ARFeatureInjectionLogic::runBeforeLayout(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t, void, void))(*(void *)v6 + 16))(v6, a2, a3[1], *a3)) {
      goto LABEL_8;
    }
    char v7 = [[VKARWalkingFeatureSet alloc] initWithFeatures:*(void *)(*(void *)(a1 + 120) + 16)];
    BOOL v8 = *(void **)(a1 + 144);
    *(void *)(a1 + 144) = v7;
  }
  else
  {
    id v9 = *(id *)(a1 + 168);
    BOOL v8 = v9;
    if (v9) {
      id v10 = v9;
    }
    int v11 = *(void **)(a1 + 144);
    *(void *)(a1 + 144) = v8;
  }
LABEL_8:
  md::LabelSettings::setARWalkingFeatures(*(md::LabelSettings **)(a1 + 128), *(VKARWalkingFeatureSet **)(a1 + 144), 0);
  size_t v12 = *(void **)(a1 + 144);
  *(unsigned char *)(a4 + 8) = *(void *)a4 != (void)v12;
  objc_storeStrong((id *)a4, v12);
}

uint64_t md::Logic<md::ARFeatureInjectionLogic,md::ARFeatureInjectionContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

void md::Logic<md::ARFeatureInjectionLogic,md::ARFeatureInjectionContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>>::allocateContext(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
}

uint64_t md::Logic<md::ARFeatureInjectionLogic,md::ARFeatureInjectionContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0xB6CE4C2C57DB41DFLL && (uint64_t v4 = *(void *)(a3 + 32)) != 0)
  {
    uint64_t v6 = result;
    md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext,md::SettingsContext>(v7, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

void *md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext,md::SettingsContext>(void *result, uint64_t a2, unint64_t a3)
{
  if (!a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    goto LABEL_71;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v4 = 0x37F8C546A65FE3EELL;
    if (a3 <= 0x37F8C546A65FE3EELL) {
      uint64_t v4 = 0x37F8C546A65FE3EELL % a3;
    }
  }
  else
  {
    uint64_t v4 = (a3 - 1) & 0x37F8C546A65FE3EELL;
  }
  char v7 = *(void **)(a2 + 8 * v4);
  if (!v7) {
    goto LABEL_25;
  }
  BOOL v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_25;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v10 = v8[1];
      if (v10 == 0x37F8C546A65FE3EELL)
      {
        if (v8[2] == 0x37F8C546A65FE3EELL) {
          goto LABEL_23;
        }
      }
      else if ((v10 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      BOOL v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v8[1];
    if (v9 == 0x37F8C546A65FE3EELL) {
      break;
    }
    if (v9 >= a3) {
      v9 %= a3;
    }
    if (v9 != v4) {
      goto LABEL_25;
    }
LABEL_12:
    BOOL v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_25;
    }
  }
  if (v8[2] != 0x37F8C546A65FE3EELL) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v11 = v8[5];
  if (*(void *)(v11 + 8) == 0x37F8C546A65FE3EELL)
  {
    uint64_t v6 = *(void *)(v11 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v6 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v12 = 0x1B8B241A8D896A1DLL;
    if (a3 <= 0x1B8B241A8D896A1DLL) {
      uint64_t v12 = 0x1B8B241A8D896A1DLL % a3;
    }
  }
  else
  {
    uint64_t v12 = (a3 - 1) & 0x1B8B241A8D896A1DLL;
  }
  uint64_t v13 = *(void **)(a2 + 8 * v12);
  if (!v13) {
    goto LABEL_48;
  }
  uint64_t v14 = (void *)*v13;
  if (!v14) {
    goto LABEL_48;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v16 = v14[1];
      if (v16 == 0x1B8B241A8D896A1DLL)
      {
        if (v14[2] == 0x1B8B241A8D896A1DLL) {
          goto LABEL_46;
        }
      }
      else if ((v16 & (a3 - 1)) != v12)
      {
        goto LABEL_48;
      }
      uint64_t v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v15 = v14[1];
    if (v15 != 0x1B8B241A8D896A1DLL)
    {
      if (v15 >= a3) {
        v15 %= a3;
      }
      if (v15 != v12) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }
    if (v14[2] != 0x1B8B241A8D896A1DLL)
    {
LABEL_35:
      uint64_t v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v17 = v14[5];
  if (*(void *)(v17 + 8) == 0x1B8B241A8D896A1DLL)
  {
    uint64_t v5 = *(void *)(v17 + 32);
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v5 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v18 = 0xC97B9E962ADF4AD4;
    if (a3 <= 0xC97B9E962ADF4AD4) {
      unint64_t v18 = 0xC97B9E962ADF4AD4 % a3;
    }
  }
  else
  {
    unint64_t v18 = (a3 - 1) & 0xC97B9E962ADF4AD4;
  }
  uint64_t v19 = *(void **)(a2 + 8 * v18);
  if (!v19) {
    goto LABEL_71;
  }
  uint64_t v20 = (void *)*v19;
  if (!v20) {
    goto LABEL_71;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v22 = v20[1];
      if (v22 == 0xC97B9E962ADF4AD4)
      {
        if (v20[2] == 0xC97B9E962ADF4AD4) {
          goto LABEL_69;
        }
      }
      else if ((v22 & (a3 - 1)) != v18)
      {
        goto LABEL_71;
      }
      uint64_t v20 = (void *)*v20;
      if (!v20) {
        goto LABEL_71;
      }
    }
  }
  while (1)
  {
    unint64_t v21 = v20[1];
    if (v21 == 0xC97B9E962ADF4AD4) {
      break;
    }
    if (v21 >= a3) {
      v21 %= a3;
    }
    if (v21 != v18) {
      goto LABEL_71;
    }
LABEL_58:
    uint64_t v20 = (void *)*v20;
    if (!v20) {
      goto LABEL_71;
    }
  }
  if (v20[2] != 0xC97B9E962ADF4AD4) {
    goto LABEL_58;
  }
LABEL_69:
  uint64_t v23 = v20[5];
  if (*(void *)(v23 + 8) != 0xC97B9E962ADF4AD4)
  {
LABEL_71:
    uint64_t v24 = 0;
    goto LABEL_72;
  }
  uint64_t v24 = *(void *)(v23 + 32);
LABEL_72:
  *uint64_t result = v6;
  result[1] = v5;
  result[2] = v24;
  return result;
}

uint64_t md::Logic<md::ARFeatureInjectionLogic,md::ARFeatureInjectionContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xB6CE4C2C57DB41DFLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext,md::SettingsContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARFeatureInjectionLogic,md::ARFeatureInjectionContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xB6CE4C2C57DB41DFLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext,md::SettingsContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARFeatureInjectionLogic,md::ARFeatureInjectionContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xB6CE4C2C57DB41DFLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext,md::SettingsContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARFeatureInjectionLogic,md::ARFeatureInjectionContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xB6CE4C2C57DB41DFLL)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::NavigationContext,md::SettingsContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

void md::Logic<md::ARFeatureInjectionLogic,md::ARFeatureInjectionContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::NavigationContext,md::SettingsContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A2641380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  MEMORY[0x1A6239270](v9, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t gdc::ObjectHolder<md::ARFeatureInjectionContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::ARFeatureInjectionContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555A78;
  uint64_t v1 = (id *)a1[4];
  if (v1)
  {

    MEMORY[0x1A6239270](v1, 0x1080C40C20BADFCLL);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::ARFeatureInjectionContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555A78;
  uint64_t v2 = (id *)a1[4];
  if (v2)
  {

    MEMORY[0x1A6239270](v2, 0x1080C40C20BADFCLL);
  }
  return a1;
}

void md::ARFeatureInjectionLogic::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x19uLL);
  strcpy(v4, "ARFeatureInjectionLogic");
  std::string::__init_copy_ctor_external((std::string *)a2, v4, 0x17uLL);
  *(unsigned char *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 47) = 0u;
  *(_OWORD *)(a2 + 63) = 0u;
  *(_OWORD *)(a2 + 79) = 0u;
  *(unsigned char *)(a2 + 95) = 0;
  operator delete(v4);
  if (*(void *)(a1 + 120))
  {
    v19[23] = 10;
    strcpy(v19, "DebugScene");
    int v18 = 0;
    memset(&v17[4], 0, 24);
    v17[0] = 1;
    gdc::DebugTreeNode::addProperty(a2, (uint64_t)v19, (uint64_t)v17);
  }
  uint64_t v5 = [*(id *)(a1 + 168) description];
  uint64_t v6 = v5;
  if (v5)
  {
    v19[23] = 16;
    strcpy(v19, "ExternalFeatures");
    char v7 = (const std::string::value_type *)[v5 UTF8String];
    memset(&__p, 0, sizeof(__p));
    int v16 = 4;
    if (v7)
    {
      std::string::__assign_external(&__p, v7);
    }
    else
    {
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&__p, "<null>");
    }
    gdc::DebugTreeNode::addProperty(a2, (uint64_t)v19, (uint64_t)v14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  id v8 = *(id *)(*(void *)(*(void *)(a1 + 128) + 40) + 144);
  uint64_t v9 = [v8 description];

  if (v9)
  {
    v19[23] = 21;
    strcpy(v19, "LabelSettingsFeatures");
    uint64_t v10 = (const std::string::value_type *)[v9 UTF8String];
    memset(&v12, 0, sizeof(v12));
    int v13 = 4;
    if (v10)
    {
      std::string::__assign_external(&v12, v10);
    }
    else
    {
      *((unsigned char *)&v12.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&v12, "<null>");
    }
    gdc::DebugTreeNode::addProperty(a2, (uint64_t)v19, (uint64_t)&v11);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1A264170C(_Unwind_Exception *a1)
{
  gdc::DebugTreeNode::~DebugTreeNode(v1);
  _Unwind_Resume(a1);
}

void md::ARFeatureInjectionLogic::didBecomeInactive(md::ARFeatureInjectionLogic *this)
{
  *((void *)this + 15) = 0;
  md::LabelSettings::setARWalkingFeatures(*((md::LabelSettings **)this + 16), *((VKARWalkingFeatureSet **)this + 21), 0);
  uint64_t v2 = (void *)*((void *)this + 21);
  if (v2)
  {
    *((void *)this + 21) = 0;
  }
  uint64_t v3 = (void *)*((void *)this + 18);
  if (v3)
  {
    *((void *)this + 18) = 0;
  }
}

void md::ARFeatureInjectionLogic::~ARFeatureInjectionLogic(md::ARFeatureInjectionLogic *this)
{
  *(void *)this = &unk_1EF542888;
  *((void *)this + 20) = &unk_1EF5599B8;

  *((void *)this + 17) = &unk_1EF5599B8;
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
  JUMPOUT(0x1A6239270);
}

{
  *(void *)this = &unk_1EF542888;
  *((void *)this + 20) = &unk_1EF5599B8;

  *((void *)this + 17) = &unk_1EF5599B8;
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

void md::ARFeatureInjectionLogic::setARDebugScene(md::ARDebugScene **this, md::ARDebugScene *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (this[15] == a2) {
    return;
  }
  this[15] = a2;
  if (a2)
  {
    uint64_t v3 = [[VKARWalkingFeatureSet alloc] initWithFeatures:*((void *)this[15] + 2)];
    uint64_t v4 = this[18];
    this[18] = (md::ARDebugScene *)v3;
LABEL_6:

    goto LABEL_7;
  }
  uint64_t v4 = this[18];
  if (v4)
  {
    this[18] = 0;
    goto LABEL_6;
  }
LABEL_7:
  if (GEOGetVectorKitARFeatureInjectionLogicLog(void)::onceToken != -1) {
    dispatch_once(&GEOGetVectorKitARFeatureInjectionLogicLog(void)::onceToken, &__block_literal_global_40653);
  }
  uint64_t v5 = GEOGetVectorKitARFeatureInjectionLogicLog(void)::log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitARFeatureInjectionLogicLog(void)::log, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = this[15];
    int v7 = 134217984;
    id v8 = v6;
    _os_log_impl(&dword_1A1780000, v5, OS_LOG_TYPE_INFO, "ARDebugSceneDidChange:%p", (uint8_t *)&v7, 0xCu);
  }
}

void ___ZL41GEOGetVectorKitARFeatureInjectionLogicLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "ARFeatureInjectionLogic");
  uint64_t v1 = (void *)GEOGetVectorKitARFeatureInjectionLogicLog(void)::log;
  GEOGetVectorKitARFeatureInjectionLogicLog(void)::log = (uint64_t)v0;
}

void md::Logic<md::MapZoomLevelStyleLogic,md::MapZoomLevelStyleLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    std::string v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void ___ZN2md22MapZoomLevelStyleLogic27beginMapZoomLevelTransitionENSt3__110shared_ptrIN3gss17StylesheetManagerINS3_10PropertyIDEEEEENS3_12MapZoomLevelE_block_invoke(uint64_t a1, float a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  float v4 = COERCE_FLOAT(atomic_load((unsigned int *)(v3 + 256)));
  if (v4 == a2) {
    goto LABEL_15;
  }
  *(float *)(v3 + 256) = a2;
  float v5 = COERCE_FLOAT(atomic_load((unsigned int *)(v3 + 256)));
  if (v5 <= 0.0)
  {
    unint64_t v6 = *(unsigned __int16 *)(v3 + 242);
    if (v6 == *(unsigned __int16 *)(v3 + 226))
    {
      if (!*(_WORD *)(v3 + 242)) {
        goto LABEL_13;
      }
      char v7 = *(_DWORD **)(v3 + 232);
      id v8 = *(_DWORD **)(v3 + 216);
      if (*v7 == *v8)
      {
        uint64_t v9 = *(unsigned __int16 *)(v3 + 224);
        uint64_t v10 = *(unsigned __int16 *)(v3 + 240);
        if (*(unsigned __int16 *)((char *)v7 + v10) == *(unsigned __int16 *)((char *)v8 + v9))
        {
          unint64_t v11 = 0;
          std::string v12 = v7 + 1;
          uint64_t v13 = v8 + 1;
          uint64_t v14 = (uint64_t)v7 + v10 + 2;
          uint64_t v15 = (uint64_t)v8 + v9 + 2;
          while (v6 - 1 != v11)
          {
            uint64_t v16 = v11++;
            if (v12[v16] != v13[v16]) {
              goto LABEL_19;
            }
            if (*(unsigned __int16 *)(v14 + 2 * v16) != *(unsigned __int16 *)(v15 + 2 * v16))
            {
              unint64_t v11 = v16 + 1;
              goto LABEL_19;
            }
          }
          unint64_t v11 = *(unsigned __int16 *)(v3 + 242);
LABEL_19:
          LOBYTE(v6) = v11 < v6;
          goto LABEL_13;
        }
      }
    }
  }
  LOBYTE(v6) = 1;
LABEL_13:
  atomic_store(v6, (unsigned __int8 *)(v3 + 254));
  int v17 = *(unsigned __int8 *)(v3 + 253);
  unsigned __int8 v18 = atomic_load((unsigned __int8 *)(v3 + 254));
  if (v17 != (v18 & 1))
  {
    unsigned __int8 v19 = atomic_load((unsigned __int8 *)(v3 + 254));
    *(unsigned char *)(v3 + 253) = v19 & 1;
    atomic_fetch_add((atomic_uint *volatile)(v3 + 248), 1u);
  }
LABEL_15:
  uint64_t v20 = **(void **)(v2 + 160);
  if (v20)
  {
    char v21 = 6;
    md::MapEngine::setNeedsTick(v20, &v21);
  }
}

void ___ZN2md22MapZoomLevelStyleLogic27beginMapZoomLevelTransitionENSt3__110shared_ptrIN3gss17StylesheetManagerINS3_10PropertyIDEEEEENS3_12MapZoomLevelE_block_invoke_1(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  gss::StylesheetManager<gss::PropertyID>::finishBlend(*(void *)(a1 + 40));
  gss::ClientStyleState<gss::PropertyID>::setClientStyleAttribute(*(void *)(a1 + 56), 0x10036u, *(unsigned __int8 *)(a1 + 72));
  uint64_t v3 = **(void **)(v2 + 160);
  if (v3)
  {
    char v5 = 6;
    md::MapEngine::setNeedsTick(v3, &v5);
  }
  float v4 = *(void **)(v2 + 128);
  if (v4)
  {
    *(void *)(v2 + 128) = 0;
  }
}

void __destroy_helper_block_ea8_40c70_ZTSNSt3__110shared_ptrIN3gss17StylesheetManagerINS1_10PropertyIDEEEEE56c69_ZTSNSt3__110shared_ptrIN3gss16ClientStyleStateINS1_10PropertyIDEEEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3) {
      return;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *__copy_helper_block_ea8_40c70_ZTSNSt3__110shared_ptrIN3gss17StylesheetManagerINS1_10PropertyIDEEEEE56c69_ZTSNSt3__110shared_ptrIN3gss16ClientStyleStateINS1_10PropertyIDEEEEE(void *result, void *a2)
{
  uint64_t v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[8];
  result[7] = a2[7];
  result[8] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_40c69_ZTSNSt3__110shared_ptrIN3gss16ClientStyleStateINS1_10PropertyIDEEEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t __copy_helper_block_ea8_40c69_ZTSNSt3__110shared_ptrIN3gss16ClientStyleStateINS1_10PropertyIDEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN2md22MapZoomLevelStyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_29MapZoomLevelStyleLogicContextEE3__0NS_9allocatorISK_EEFvNS2_17StyleManagerEventEEE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF575A20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN2md22MapZoomLevelStyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_29MapZoomLevelStyleLogicContextEE3__0NS_9allocatorISK_EEFvNS2_17StyleManagerEventEEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF575A20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md22MapZoomLevelStyleLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_13CameraContextENS2_17StyleLogicContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_29MapZoomLevelStyleLogicContextEE3__0NS_9allocatorISK_EEFvNS2_17StyleManagerEventEEED0Ev()
{
}

uint64_t md::Logic<md::MapZoomLevelStyleLogic,md::MapZoomLevelStyleLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::MapZoomLevelStyleLogic,md::MapZoomLevelStyleLogicContext,md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0xF0AA2DB42EB710AFLL && (uint64_t v4 = *(void *)(a3 + 32)) != 0)
  {
    uint64_t v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::CameraContext,md::StyleLogicContext>,gdc::TypeList<>>::buildRequiredTuple<md::CameraContext,md::StyleLogicContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t gdc::ObjectHolder<md::MapZoomLevelStyleLogicContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::MapZoomLevelStyleLogicContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555CA8;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0xC400A2AC0F1);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::MapZoomLevelStyleLogicContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555CA8;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0xC400A2AC0F1);
  }
  return a1;
}

void md::MapZoomLevelStyleLogic::~MapZoomLevelStyleLogic(md::MapZoomLevelStyleLogic *this)
{
  md::MapZoomLevelStyleLogic::~MapZoomLevelStyleLogic(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;

  *(void *)this = &unk_1EF541718;
  uint64_t v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    [v2 stop];
    uint64_t v3 = (void *)*((void *)this + 16);
    if (v3)
    {
      *((void *)this + 16) = 0;

      uint64_t v3 = (void *)*((void *)this + 16);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  *((void *)this + 15) = &unk_1EF5596D8;

  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

void sub_1A2642214(_Unwind_Exception *a1)
{
  *(void *)(v1 + 120) = &unk_1EF5596D8;

  md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::~Logic(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'ggl::VenueWall::MeshMesh::~MeshMesh(ggl::VenueWall::MeshMesh *this)
{
  ggl::Mesh::~Mesh((ggl::VenueWall::MeshMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::VenueWall::MeshMesh *)((char *)this - 16));
}

void ggl::VenueWall::MeshMesh::~MeshMesh(ggl::VenueWall::MeshMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::VenueWall::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::VenueWall::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::VenueWall::EndCapMesh::~EndCapMesh(ggl::VenueWall::EndCapMesh *this)
{
  ggl::Mesh::~Mesh((ggl::VenueWall::EndCapMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::VenueWall::EndCapMesh *)((char *)this - 16));
}

void ggl::VenueWall::EndCapMesh::~EndCapMesh(ggl::VenueWall::EndCapMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::VenueWall::EndCapVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::VenueWall::EndCapVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

void ggl::VenueWall::MeshPipelineState::~MeshPipelineState(ggl::VenueWall::MeshPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::VenueWall::MeshPipelineSetup::textureIsEnabled(ggl::VenueWall::MeshPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::VenueWall::MeshPipelineSetup::constantDataIsEnabled(ggl::VenueWall::MeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 4;
}

void ggl::VenueWall::MeshPipelineSetup::~MeshPipelineSetup(ggl::VenueWall::MeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::VenueWall::WallTopMeshPipelineState::~WallTopMeshPipelineState(ggl::VenueWall::WallTopMeshPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::VenueWall::WallTopMeshPipelineSetup::textureIsEnabled(ggl::VenueWall::WallTopMeshPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::VenueWall::WallTopMeshPipelineSetup::constantDataIsEnabled(ggl::VenueWall::WallTopMeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::VenueWall::WallTopMeshPipelineSetup::~WallTopMeshPipelineSetup(ggl::VenueWall::WallTopMeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::VenueWall::WallEndCapMeshPipelineState::~WallEndCapMeshPipelineState(ggl::VenueWall::WallEndCapMeshPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::VenueWall::WallEndCapMeshPipelineSetup::textureIsEnabled(ggl::VenueWall::WallEndCapMeshPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::VenueWall::WallEndCapMeshPipelineSetup::constantDataIsEnabled(ggl::VenueWall::WallEndCapMeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 4;
}

void ggl::VenueWall::WallEndCapMeshPipelineSetup::~WallEndCapMeshPipelineSetup(ggl::VenueWall::WallEndCapMeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

Class initARGeoTrackingConfiguration(void)
{
  if (LoadARKit(void)::loadPredicate != -1) {
    dispatch_once(&LoadARKit(void)::loadPredicate, &__block_literal_global_40893);
  }
  Class result = objc_getClass("ARGeoTrackingConfiguration");
  classARGeoTrackingConfiguration = (uint64_t)result;
  getARGeoTrackingConfigurationClass = (uint64_t (*)(void))ARGeoTrackingConfigurationFunction;
  return result;
}

id ARGeoTrackingConfigurationFunction(void)
{
  return (id)classARGeoTrackingConfiguration;
}

void ___ZL9LoadARKitv_block_invoke_40897()
{
  LoadARKit(void)::frameworkLibrary = (uint64_t)dlopen("/System/Library/Frameworks/ARKit.framework/ARKit", 2);
  if (!LoadARKit(void)::frameworkLibrary) {
    NSLog((NSString *)@"### Failed to Soft Linked: /System/Library/Frameworks/ARKit.framework/ARKit");
  }
}

void sub_1A2642F88(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

Class initARSession()
{
  if (LoadARKit(void)::loadPredicate != -1) {
    dispatch_once(&LoadARKit(void)::loadPredicate, &__block_literal_global_40893);
  }
  Class result = objc_getClass("ARSession");
  classARSession = (uint64_t)result;
  getARSessionClass = (uint64_t (*)())ARSessionFunction;
  return result;
}

id ARSessionFunction()
{
  return (id)classARSession;
}

Class initARWorldTrackingConfiguration(void)
{
  if (LoadARKit(void)::loadPredicate != -1) {
    dispatch_once(&LoadARKit(void)::loadPredicate, &__block_literal_global_40893);
  }
  Class result = objc_getClass("ARWorldTrackingConfiguration");
  classARWorldTrackingConfiguration = (uint64_t)result;
  getARWorldTrackingConfigurationClass = (uint64_t (*)(void))ARWorldTrackingConfigurationFunction;
  return result;
}

id ARWorldTrackingConfigurationFunction(void)
{
  return (id)classARWorldTrackingConfiguration;
}

void sub_1A26431A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_4,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_4>,void ()(md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &)>::operator()(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5)
{
  *a5 = (*a3 >> 4) | 0x300;
}

void std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_4,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_4>,void ()(md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51F580;
}

void *std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_4,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_4>,void ()(md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &)>::__clone()
{
  Class result = operator new(0x10uLL);
  *Class result = &unk_1EF51F580;
  return result;
}

void std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_4,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_4>,void ()(md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &)>::~__func()
{
}

void std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_3,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_3>,void ()(md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &)>::operator()(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5)
{
  *a5 = (*a3 >> 4) | 0x300;
}

void std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_3,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_3>,void ()(md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51F538;
}

void *std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_3,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_3>,void ()(md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &)>::__clone()
{
  Class result = operator new(0x10uLL);
  *Class result = &unk_1EF51F538;
  return result;
}

void std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_3,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_3>,void ()(md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &)>::~__func()
{
}

void *std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_2,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_2>,void ()(md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &)>::operator()(void *result, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5, void *a6, uint64_t *a7)
{
  uint64_t v9 = *(void **)result[1];
  unint64_t v10 = *a4;
  unint64_t v11 = *a4;
  uint64_t v12 = v9[89];
  if (v11 < (v9[90] - v12) >> 3
    && ((uint64_t v13 = *(void *)(v12 + 8 * v11)) != 0 ? (v14 = HIDWORD(v10) == HIDWORD(v13)) : (v14 = 0), v14))
  {
    uint64_t v16 = v9[92] + 8 * v13;
    uint64_t v15 = v9[93];
  }
  else
  {
    uint64_t v15 = v9[93];
    uint64_t v16 = v15;
  }
  uint64_t v17 = *a5;
  if (v16 == v15) {
    unsigned __int8 v18 = 0;
  }
  else {
    unsigned __int8 v18 = (unsigned int *)v16;
  }
  if (v18)
  {
    Class result = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>((uint64_t)(v9 + 81), v10, a4);
    ++result[3];
  }
  if (*((unsigned char *)v18 + 4))
  {
    uint64_t v19 = 0xFFFFFFFE00;
    if (v17) {
      uint64_t v19 = 0;
    }
    unint64_t v20 = (*a6 >> 4);
  }
  else
  {
    uint64_t v21 = 256;
    if (!v17) {
      uint64_t v21 = 512;
    }
    unint64_t v20 = v21 + ((unint64_t)*v18 << 9);
    uint64_t v19 = (*a6 >> 4);
  }
  *a7 = v20 | v19;
  return result;
}

uint64_t std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_2,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_2>,void ()(md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF51F4F0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_2,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_2>,void ()(md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &)>::__clone(uint64_t a1)
{
  Class result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *Class result = &unk_1EF51F4F0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_2,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_2>,void ()(md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &)>::~__func()
{
}

void std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_1,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_1>,void ()(md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7)
{
  *a7 = (((unint64_t)(*a5 == 0) << 8) | (*a4 << 9) | (*a6 >> 4)) + 256;
}

void std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_1,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_1>,void ()(md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51F4A8;
}

void *std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_1,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_1>,void ()(md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &)>::__clone()
{
  Class result = operator new(0x10uLL);
  *Class result = &unk_1EF51F4A8;
  return result;
}

void std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_1,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_1>,void ()(md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &)>::~__func()
{
}

void std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_0,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_0>,void ()(md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *a4 = 0x100000000;
}

void std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_0,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_0>,void ()(md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51F460;
}

void *std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_0,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_0>,void ()(md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &)>::__clone()
{
  Class result = operator new(0x10uLL);
  *Class result = &unk_1EF51F460;
  return result;
}

void std::__function::__func<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_0,std::allocator<md::ita::AssignRenderOrder::operator()(ecs2::Query<md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::CustomZIndex const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::IsMaterial const&,md::ls::RenderItemID const&,md::ls::SharedMaterialZIndexHandle const&,md::ls::IsOpaque const*,md::ls::RenderableHash const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassShadow const&,md::ls::RenderOrderToUse &>,ecs2::Query<md::ls::RenderItemID const&,md::ls::RenderableHash const&,md::ls::IntendedStandardPassSceneDepth const&,md::ls::RenderOrderToUse &>)::$_0>,void ()(md::ls::IsDecal const&,md::ls::RenderItemID const&,md::ls::RenderOrderToUse &)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ItemsPrepared>(gdc::Entity,md::ls::ItemsPrepared &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::ItemsPrepared>(a2);
  uint64_t v22 = v2;
  uint64_t v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if (v5)
  {
    unint64_t v10 = (unsigned char *)v3[11];
    unint64_t v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      uint64_t v12 = (char *)v3[10];
      uint64_t v13 = v10 - v12;
      uint64_t v14 = v10 - v12 + 1;
      if (v14 < 0) {
        goto LABEL_28;
      }
      unint64_t v15 = v9 - (void)v12;
      if (2 * v15 > v14) {
        uint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16) {
        uint64_t v17 = (char *)operator new(v16);
      }
      else {
        uint64_t v17 = 0;
      }
      unsigned __int8 v18 = &v17[v16];
      uint64_t v11 = (uint64_t)&v17[v13 + 1];
      uint64_t v19 = (char *)(v12 - v10);
      if (v12 == v10) {
        uint64_t v19 = 0;
      }
      v3[10] = &v17[v13 + (void)v19];
      v3[11] = v11;
      v3[12] = v18;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    uint64_t v6 = v3[31];
  }
  else
  {
    uint64_t v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      uint64_t v7 = (void *)v3[16];
      if (v7)
      {
        while (1)
        {
          uint64_t v24 = &v22;
          uint64_t v25 = 1;
          uint64_t v23 = v6;
          uint64_t v8 = v7[6];
          if (!v8) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v8 + 48))(v8, &v23, &v24);
          uint64_t v7 = (void *)*v7;
          if (!v7) {
            return;
          }
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  unint64_t v20 = (void *)v3[22];
  if (v20)
  {
    while (1)
    {
      uint64_t v24 = &v22;
      uint64_t v25 = 1;
      uint64_t v23 = v6;
      uint64_t v21 = v20[6];
      if (!v21) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v21 + 48))(v21, &v23, &v24);
      unint64_t v20 = (void *)*v20;
      if (!v20) {
        return;
      }
    }
    goto LABEL_27;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ItemsPrepared>(gdc::Entity,md::ls::ItemsPrepared &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF521F20;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ItemsPrepared>(gdc::Entity,md::ls::ItemsPrepared &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  Class result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *Class result = &unk_1EF521F20;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ItemsPrepared>(gdc::Entity,md::ls::ItemsPrepared &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2md16ServerDrapedMeshENS8_18ClientDrapedMeshesEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 72);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (!*(unsigned char *)(a2 + 56)) {
      goto LABEL_8;
    }
  }
  else if (!*(unsigned char *)(a2 + 56))
  {
    goto LABEL_8;
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 40);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_8:
  if (*(unsigned char *)(a2 + 24))
  {
    char v5 = *(std::__shared_weak_count **)(a2 + 8);
    if (v5)
    {
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void md::ClientDrapedPolygonRenderLayer::~ClientDrapedPolygonRenderLayer(md::ClientDrapedPolygonRenderLayer *this)
{
  md::ClientDrapedPolygonRenderLayer::~ClientDrapedPolygonRenderLayer(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF54C0B8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 61);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 58));
  *(void *)this = &unk_1EF541FB0;
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((void **)this + 54));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((void **)this + 51));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((void **)this + 48));
  std::__tree<gdc::LayerDataWithWorld>::destroy(*((void **)this + 45));
  md::CartographicTiledRenderLayer<md::ElevatedPolygonRenderable>::~CartographicTiledRenderLayer((uint64_t)this);
}

uint64_t std::__shared_ptr_emplace<md::ElevatedPolygonRenderResources>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(a1 + 816));
  uint64_t v2 = *(void *)(a1 + 776);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 784);
    uint64_t v4 = *(void *)(a1 + 776);
    if (v3 != v2)
    {
      do
      {
        char v5 = *(void (****)(void, uint64_t))(v3 - 8);
        *(void *)(v3 - 8) = 0;
        if (v5)
        {
          (**v5)(v5, v4);
          {
            operator new();
          }
          (*(void (**)(uint64_t, void (***)(void, uint64_t), uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                           + 40))(mdm::Allocator::instance(void)::alloc, v5, 216);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *(void *)(a1 + 776);
    }
    *(void *)(a1 + 784) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 800) + 40))(*(void *)(a1 + 800), v4, *(void *)(a1 + 792) - v4);
  }
  uint64_t v6 = *(void **)(a1 + 752);
  do
  {
    if (v6[1])
    {
      unint64_t v7 = 0;
      uint64_t v8 = v6 + 2;
      unint64_t v9 = v6 + 2;
      unint64_t v10 = (void (***)(void))(v6 + 2);
      do
      {
        uint64_t v11 = (void (**)(void *))*v10;
        v10 += 15;
        (*v11)(v9);
        ++v7;
        v8 += 15;
        unint64_t v9 = v10;
      }
      while (v7 < v6[1]);
    }
    v6[1] = 0;
    uint64_t v6 = (void *)*v6;
  }
  while (v6);
  uint64_t v12 = *(void ***)(a1 + 752);
  *(void *)(a1 + 760) = v12;
  uint64_t v13 = *v12;
  char *v12 = 0;
  if (v13)
  {
    do
    {
      uint64_t v14 = (void *)*v13;
      free(v13);
      uint64_t v13 = v14;
    }
    while (v14);
    uint64_t v12 = *(void ***)(a1 + 752);
  }
  free(v12);
  *(void *)(a1 + 536) = &unk_1EF55D4B8;
  uint64_t v15 = *(void *)(a1 + 544);
  if (v15)
  {
    (*(void (**)(uint64_t, void))(*(void *)v15 + 16))(v15, *(void *)(a1 + 560));
    *(void *)(a1 + 560) = 3735927469;
  }
  size_t v16 = *(std::__shared_weak_count **)(a1 + 552);
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(void **)(a1 + 520));
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 424);
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(void **)(a1 + 400));
  unsigned __int8 v18 = *(std::__shared_weak_count **)(a1 + 304);
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(void **)(a1 + 280));
  uint64_t v19 = *(std::__shared_weak_count **)(a1 + 184);
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*(void **)(a1 + 160));
  unint64_t v20 = *(std::__shared_weak_count **)(a1 + 64);
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  uint64_t v21 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v21)
  {
    uint64_t v22 = ggl::FragmentedPool<ggl::DaVinci::ElevatedFillColorWithDistancePipelineSetup>::~FragmentedPool(v21);
    MEMORY[0x1A6239270](v22, 0x10A0C40D234DDC7);
  }
  uint64_t v23 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v23)
  {
    uint64_t v24 = ggl::FragmentedPool<ggl::DaVinci::ElevatedFillColorPipelineSetup>::~FragmentedPool(v23);
    MEMORY[0x1A6239270](v24, 0x10A0C40D234DDC7);
  }
  uint64_t v25 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v25)
  {
    uint64_t v26 = ggl::FragmentedPool<ggl::DaVinci::ElevatedStrokeColorWithDistancePipelineSetup>::~FragmentedPool(v25);
    MEMORY[0x1A6239270](v26, 0x10A0C40D234DDC7);
  }
  uint64_t result = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (result)
  {
    ggl::FragmentedPool<ggl::DaVinci::ElevatedStrokeColorPipelineSetup>::~FragmentedPool(result);
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_emplace<md::ElevatedPolygonRenderResources>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582588;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::ElevatedPolygonRenderResources>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582588;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::RegionalResourceSetFetcher::~RegionalResourceSetFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A6239270);
}

uint64_t md::RegionalAttributionsResourceFetcher::tileKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int **)(a3 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = GEOResourceFilterScaleForScale();
  uint64_t v7 = *MEMORY[0x1E4F641C0];
  return MEMORY[0x1F411C370](v4, v7, v6, v5);
}

void md::RegionalAttributionsResourceFetcher::tileSize(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 1;
  *(_DWORD *)(a1 + 4) = 512;
}

void md::RegionalAttributionsResourceFetcher::resourceTileForTile(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void md::RegionalAttributionsResourceFetcher::~RegionalAttributionsResourceFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<md::RegionalResourceSetDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::RegionalResourceSetDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581FA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::RegionalResourceSetDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581FA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<md::RegionalAttributionsDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::RegionalAttributionsDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5821D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::RegionalAttributionsDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5821D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::SandboxRealisticSatelliteMapEngineMode::~SandboxRealisticSatelliteMapEngineMode(md::SandboxRealisticSatelliteMapEngineMode *this)
{
  *(void *)this = &unk_1EF5463F0;
  if (*((unsigned char *)this + 548)) {
    *((unsigned char *)this + 548) = 0;
  }
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A6239270);
}

{
  *(void *)this = &unk_1EF5463F0;
  if (*((unsigned char *)this + 548)) {
    *((unsigned char *)this + 548) = 0;
  }
  md::MapEngineMode::~MapEngineMode(this);
}

void ggl::StenciledAlphaClear::ClearPipelineState::~ClearPipelineState(ggl::StenciledAlphaClear::ClearPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::StenciledAlphaClear::ClearPipelineState::ClearPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, char a5)
{
  {
    v84 = a4;
    v86 = a2;
    uint64_t v87 = a3;
    a2 = v86;
    a3 = v87;
    a4 = v84;
    if (v85)
    {
      {
        if (v85)
        {
          {
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2Reflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r;
            unk_1EB32B400 = 1;
          }
          ggl::StenciledAlphaClear::ClearPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r;
          *(void *)algn_1E95933E8 = &ggl::StenciledAlphaClear::pipelineDataClearPipelineDeviceStructs(void)::ref;
          qword_1E95933F0 = 0;
          unk_1E95933F8 = &ggl::StenciledAlphaClear::pipelineDataClearPipelineConstantStructs(void)::ref;
          qword_1E9593400 = 0;
          unk_1E9593408 = 0;
        }
      }
      ggl::StenciledAlphaClear::ClearPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::StenciledAlphaClear::ClearPipelineSetup::typedReflection(void)::ref;
      ggl::StenciledAlphaClearShader::typedReflection(v85);
      qword_1E9593390 = (uint64_t)&ggl::StenciledAlphaClearShader::typedReflection(void)::ref;
      {
        ggl::StenciledAlphaClear::pipelineStateClearPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E9593430 = 0;
        qword_1E9593438 = (uint64_t)"";
        dword_1E9593440 = 0;
        qword_1E9593448 = (uint64_t)&ggl::StenciledAlphaClear::pipelineStateClearPipelineAttributeBinding_0(void)::attr;
        unk_1E9593450 = 1;
      }
      qword_1E9593398 = (uint64_t)&ggl::StenciledAlphaClear::pipelineStateClearPipelineAttributeStructBinding(void)::attr;
      unk_1E95933A0 = 1;
      qword_1E95933A8 = 0;
      unk_1E95933B0 = 0;
      qword_1E95933B8 = (uint64_t)&ggl::StenciledAlphaClear::pipelineStateClearPipelineDeviceStructBinding(void)::ref;
      unk_1E95933C0 = 0;
      qword_1E95933C8 = (uint64_t)&ggl::StenciledAlphaClear::pipelineStateClearPipelineConstantStructBinding(void)::ref;
      unk_1E95933D0 = 0;
      a4 = v84;
      a2 = v86;
      a3 = v87;
    }
  }
  uint64_t v7 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)v90 = *(_OWORD *)a3;
  *(_OWORD *)&v90[12] = *(_OWORD *)(a3 + 12);
  long long v9 = *(_OWORD *)(a3 + 28);
  char v10 = *(unsigned char *)(a3 + 44);
  long long v88 = *a4;
  long long v89 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::StenciledAlphaClear::ClearPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v88;
  *(_OWORD *)(a1 + 272) = v89;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v90;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v90[12];
  *(_OWORD *)(a1 + 92) = v9;
  *(unsigned char *)(a1 + 108) = v10;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(unsigned char *)(a1 + 304) = a5;
  int8x16_t v11 = *(int8x16_t *)(a1 + 320);
  int8x16_t v12 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v13 = vmovl_high_s8(v12);
  int32x4_t v14 = vmovl_s16(*(int16x4_t *)v13.i8);
  v15.i64[0] = v14.u32[0];
  v15.i64[1] = v14.u32[1];
  int8x16_t v16 = v15;
  int16x8_t v17 = vmovl_s8(*(int8x8_t *)v12.i8);
  int32x4_t v18 = vmovl_s16(*(int16x4_t *)v17.i8);
  *(void *)a1 = &unk_1EF55F560;
  v15.i64[0] = v18.u32[0];
  v15.i64[1] = v18.u32[1];
  int8x16_t v19 = v15;
  int32x4_t v20 = vmovl_high_s16(v13);
  v15.i64[0] = v20.u32[0];
  v15.i64[1] = v20.u32[1];
  int8x16_t v21 = v15;
  int32x4_t v22 = vmovl_high_s16(v17);
  v15.i64[0] = v22.u32[0];
  v15.i64[1] = v22.u32[1];
  int8x16_t v23 = v15;
  v15.i64[0] = v14.u32[2];
  v15.i64[1] = v14.u32[3];
  int8x16_t v24 = v15;
  v15.i64[0] = v18.u32[2];
  v15.i64[1] = v18.u32[3];
  int8x16_t v25 = v15;
  v15.i64[0] = v20.u32[2];
  v15.i64[1] = v20.u32[3];
  int8x16_t v26 = v15;
  v15.i64[0] = v22.u32[2];
  v15.i64[1] = v22.u32[3];
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v15);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v26);
  int8x16_t v29 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v25);
  int8x16_t v30 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v21);
  int8x16_t v31 = vceqzq_s8(v11);
  int16x8_t v32 = vmovl_high_s8(v31);
  int32x4_t v33 = vmovl_s16(*(int16x4_t *)v32.i8);
  v15.i64[0] = v33.u32[0];
  v15.i64[1] = v33.u32[1];
  int8x16_t v34 = v15;
  int16x8_t v35 = vmovl_s8(*(int8x8_t *)v31.i8);
  int32x4_t v36 = vmovl_s16(*(int16x4_t *)v35.i8);
  v15.i64[0] = v36.u32[0];
  v15.i64[1] = v36.u32[1];
  int8x16_t v37 = v15;
  int32x4_t v38 = vmovl_high_s16(v32);
  v15.i64[0] = v38.u32[0];
  v15.i64[1] = v38.u32[1];
  int8x16_t v39 = v15;
  int32x4_t v40 = vmovl_high_s16(v35);
  v15.i64[0] = v40.u32[0];
  v15.i64[1] = v40.u32[1];
  int8x16_t v41 = v15;
  v15.i64[0] = v33.u32[2];
  v15.i64[1] = v33.u32[3];
  int8x16_t v42 = v15;
  v15.i64[0] = v36.u32[2];
  v15.i64[1] = v36.u32[3];
  int8x16_t v43 = v15;
  v15.i64[0] = v38.u32[2];
  v15.i64[1] = v38.u32[3];
  int8x16_t v44 = v15;
  v15.i64[0] = v40.u32[2];
  v15.i64[1] = v40.u32[3];
  int8x16_t v45 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v44);
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v34), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v16));
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v37), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v19));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v39), v30);
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v41), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v23));
  int8x16_t v50 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v42), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v24));
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v43), v29);
  int8x16_t v52 = vorrq_s8(v45, v28);
  int8x16_t v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v15), v27);
  int8x16_t v54 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v55 = vmovl_s8(*(int8x8_t *)v54.i8);
  int32x4_t v56 = vmovl_high_s16(v55);
  v15.i64[0] = v56.i32[2];
  v15.i64[1] = v56.i32[3];
  int8x16_t v57 = v15;
  int16x8_t v58 = vmovl_high_s8(v54);
  int32x4_t v59 = vmovl_high_s16(v58);
  v15.i64[0] = v59.i32[2];
  v15.i64[1] = v59.i32[3];
  int8x16_t v60 = v15;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v55.i8);
  v15.i64[0] = v61.i32[2];
  v15.i64[1] = v61.i32[3];
  int8x16_t v62 = v15;
  int32x4_t v63 = vmovl_s16(*(int16x4_t *)v58.i8);
  v15.i64[0] = v63.i32[2];
  v15.i64[1] = v63.i32[3];
  int8x16_t v64 = v15;
  v15.i64[0] = v56.i32[0];
  v15.i64[1] = v56.i32[1];
  int8x16_t v65 = v15;
  v15.i64[0] = v59.i32[0];
  v15.i64[1] = v59.i32[1];
  int8x16_t v66 = v15;
  v15.i64[0] = v61.i32[0];
  v15.i64[1] = v61.i32[1];
  int8x16_t v67 = v15;
  v15.i64[0] = v63.i32[0];
  v15.i64[1] = v63.i32[1];
  int8x16_t v68 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v15);
  int8x16_t v69 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v70 = vmovl_high_s8(v69);
  int32x4_t v71 = vmovl_s16(*(int16x4_t *)v70.i8);
  v15.i64[0] = v71.i32[0];
  v15.i64[1] = v71.i32[1];
  int8x16_t v72 = v15;
  int16x8_t v73 = vmovl_s8(*(int8x8_t *)v69.i8);
  int32x4_t v74 = vmovl_s16(*(int16x4_t *)v73.i8);
  v15.i64[0] = v74.i32[0];
  v15.i64[1] = v74.i32[1];
  int8x16_t v75 = v15;
  int32x4_t v76 = vmovl_high_s16(v70);
  v15.i64[0] = v76.i32[0];
  v15.i64[1] = v76.i32[1];
  int8x16_t v77 = v15;
  int32x4_t v78 = vmovl_high_s16(v73);
  v15.i64[0] = v78.i32[0];
  v15.i64[1] = v78.i32[1];
  int8x16_t v79 = v15;
  v15.i64[0] = v71.i32[2];
  v15.i64[1] = v71.i32[3];
  int8x16_t v80 = v15;
  v15.i64[0] = v74.i32[2];
  v15.i64[1] = v74.i32[3];
  int8x16_t v81 = v15;
  v15.i64[0] = v76.i32[2];
  v15.i64[1] = v76.i32[3];
  int8x16_t v82 = v15;
  v15.i64[0] = v78.i32[2];
  v15.i64[1] = v78.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v67)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v72), v68), v46)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v65)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v77), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v66)),
                                               v48))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v81), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v62)), v51), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v80), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v64)), v50)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v15), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v57)), v53), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v82),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v60)),
                                               v52)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

uint64_t ggl::StenciledAlphaClear::ClearPipelineSetup::textureIsEnabled(ggl::StenciledAlphaClear::ClearPipelineSetup *this)
{
  return 0;
}

uint64_t ggl::StenciledAlphaClear::ClearPipelineSetup::constantDataIsEnabled(ggl::StenciledAlphaClear::ClearPipelineSetup *this)
{
  return 0;
}

void ggl::StenciledAlphaClear::ClearPipelineSetup::~ClearPipelineSetup(ggl::StenciledAlphaClear::ClearPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

uint64_t md::MuninPointLabelFeature::labelFeatureType(md::MuninPointLabelFeature *this)
{
  return 17;
}

float md::MuninPointLabelFeature::maxZoomRank(md::MuninPointLabelFeature *this)
{
  return 252.0;
}

double md::MuninPointLabelFeature::minZoomRank(md::MuninPointLabelFeature *this)
{
  return 0.0;
}

void md::MuninPointLabelFeature::~MuninPointLabelFeature(md::MuninPointLabelFeature *this)
{
  md::PointLabelFeature::~PointLabelFeature(this);
  JUMPOUT(0x1A6239270);
}

void md::mun::MuninPointLabelLayerDataSource::createLayerData(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 + 16);
  int v9 = *(unsigned __int8 *)(v8 + 8);
  int v10 = *(_DWORD *)v8;
  int v11 = *(_DWORD *)(v8 + 4);
  uint64_t v12 = *a3;
  uint64_t v13 = a3[1];
  if (*a3 != v13)
  {
    while (*(_WORD *)v12 != 26)
    {
      v12 += 48;
      if (v12 == v13) {
        goto LABEL_12;
      }
    }
  }
  if (v12 == v13 || *(void *)(v12 + 32) != 1)
  {
LABEL_12:
    uint64_t v15 = 0;
LABEL_13:
    uint64_t v57 = v15;
    int16x8_t v58 = 0;
    if (v15) {
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  uint64_t v14 = *(void *)(v12 + 24);
  uint64_t v15 = *(void *)(v14 + 112);
  int8x16_t v16 = *(std::__shared_weak_count **)(v14 + 120);
  if (!v16) {
    goto LABEL_13;
  }
  atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v57 = v15;
  int16x8_t v58 = v16;
  atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v15 = v57;
    if (!v57) {
      goto LABEL_10;
    }
LABEL_14:
    uint64_t v55 = 0;
    int32x4_t v56 = 0;
    int32x4_t v18 = *(std::__shared_weak_count **)(a1 + 656);
    if (v18)
    {
      int8x16_t v19 = std::__shared_weak_count::lock(v18);
      int32x4_t v56 = v19;
      if (v19)
      {
        uint64_t v55 = *(void *)(a1 + 648);
        if (v55)
        {
          int v48 = v10;
          int8x16_t v21 = *(geo::codec::VectorTile **)(v15 + 144);
          int32x4_t v20 = (geo::codec::VectorTile **)(v15 + 144);
          char v22 = *(unsigned char *)(geo::codec::VectorTile::key(v21) + 1);
          uint64_t v23 = geo::codec::VectorTile::key(*v20);
          int v24 = *(unsigned __int8 *)(v23 + 10);
          int v25 = *(unsigned __int16 *)(v23 + 8);
          uint64_t v26 = *(void *)v23;
          uint64_t v27 = geo::codec::VectorTile::key(*v20);
          unint64_t v28 = *(unsigned __int16 *)(v27 + 8) | ((unint64_t)*(unsigned __int8 *)(v27 + 10) << 16);
          uint64_t v29 = *(void *)v27;
          v53[0] = -1;
          v53[1] = v22 & 0x3F;
          *((void *)&v30 + 1) = (v25 | (v24 << 16)) & 0xFFFFFF;
          *(void *)&long long v30 = v26;
          int32x2_t v31 = (int32x2_t)(v30 >> 40);
          *((void *)&v30 + 1) = v28;
          *(void *)&long long v30 = v29;
          uint64_t v54 = *(void *)&vzip1_s32(v31, (int32x2_t)(v30 >> 14)) & 0x3FFFFFF03FFFFFFLL;
          int16x8_t v32 = (char *)operator new(0x170uLL);
          *(_OWORD *)(v32 + 8) = 0u;
          *(void *)int16x8_t v32 = &unk_1EF582AC8;
          long long v59 = 0u;
          md::LabelTile::LabelTile((unsigned __int8 *)v32 + 24, (uint64_t)v53, (uint64_t)v20, 8u, &v55, 0, (float **)&v59, 0);
          uint64_t v51 = v33;
          int8x16_t v52 = (std::__shared_weak_count *)v32;
          int8x16_t v34 = (char *)operator new(0x70uLL);
          double v35 = 1.0 / (double)(1 << v9);
          double v36 = v35 * (double)((1 << v9) + ~v11);
          *((void *)v34 + 1) = 0;
          *((void *)v34 + 2) = 0;
          *(void *)int8x16_t v34 = &unk_1EF57F9C8;
          double v37 = v35 * (double)v48;
          *(_OWORD *)(v34 + 40) = 0u;
          *(_OWORD *)(v34 + 56) = 0u;
          *(_OWORD *)(v34 + 24) = 0u;
          *((_DWORD *)v34 + 18) = v9;
          *((double *)v34 + 10) = v37;
          *((double *)v34 + 11) = v36;
          *((double *)v34 + 12) = v37 + v35;
          *((double *)v34 + 13) = v36 + v35;
          int8x16_t v49 = (md::ResourceInfo *)(v34 + 24);
          int8x16_t v50 = (std::__shared_weak_count *)v34;
          uint64_t v38 = *a3;
          uint64_t v39 = a3[1];
          if (*a3 != v39)
          {
            while (*(_WORD *)v38 != 18)
            {
              v38 += 48;
              if (v38 == v39) {
                goto LABEL_33;
              }
            }
          }
          if (v38 != v39)
          {
            for (i = *(void **)(v38 + 24); i; i = (void *)*i)
            {
              uint64_t v41 = i[14];
              int8x16_t v42 = (std::__shared_weak_count *)i[15];
              *(void *)&long long v59 = v41;
              *((void *)&v59 + 1) = v42;
              if (v42) {
                atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              int8x16_t v43 = (NSArray *)*(id *)(v41 + 144);
              md::ResourceInfo::setResourceNames(v49, v43);

              if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                std::__shared_weak_count::__release_weak(v42);
              }
            }
          }
LABEL_33:
          long long v59 = 0uLL;
          uint64_t v60 = 0;
          int8x16_t v44 = operator new(0x308uLL);
          v44[1] = 0;
          v44[2] = 0;
          *int8x16_t v44 = &unk_1EF580D40;
          *(void *)&long long v45 = md::MuninLabelLayerData::MuninLabelLayerData(v44 + 3, a2, &v51, &v49, (uint64_t)&v59);
          *((void *)&v45 + 1) = v44;
          *(_OWORD *)a4 = v45;
          int8x16_t v46 = v50;
          if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
          int8x16_t v47 = v52;
          if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
          int8x16_t v19 = v56;
          if (v56)
          {
LABEL_40:
            if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
              int16x8_t v17 = v58;
              if (!v58) {
                return;
              }
              goto LABEL_42;
            }
          }
LABEL_41:
          int16x8_t v17 = v58;
          if (!v58) {
            return;
          }
          goto LABEL_42;
        }
      }
    }
    else
    {
      int8x16_t v19 = 0;
    }
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    if (v19) {
      goto LABEL_40;
    }
    goto LABEL_41;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  uint64_t v15 = v57;
  if (v57) {
    goto LABEL_14;
  }
LABEL_10:
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  int16x8_t v17 = v58;
  if (!v58) {
    return;
  }
LABEL_42:
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_1A264507C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  std::__shared_weak_count::~__shared_weak_count(v22);
  operator delete(v24);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a11);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a13);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a18);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void md::mun::MuninPointLabelLayerDataSource::constructRequests(uint64_t a1, char **a2, char **a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = a2;
    do
    {
      uint64_t v4 = *v3;
      char v65 = **v3;
      gdc::LayerDataKey::LayerDataKey((uint64_t)&v66, (uint64_t)(v4 + 8));
      char v69 = 0;
      if (v4[96])
      {
        int v70 = *((_DWORD *)v4 + 25);
        char v69 = 1;
      }
      uint64_t v71 = *((void *)v4 + 13);
      uint64_t v5 = *((void *)*v3 + 2);
      unsigned int v6 = *(unsigned __int8 *)(v5 + 8);
      int v8 = *(_DWORD *)v5;
      int v7 = *(_DWORD *)(v5 + 4);
      int v9 = *v67;
      int v10 = v67[1];
      int v11 = v67[2];
      int v12 = v67[3];
      uint64_t v40 = *((void *)*v3 + 14);
      v55[0] = 0;
      __int16 v56 = 26;
      int v57 = 2147483646;
      int16x8_t v58 = v62;
      long long v59 = v62;
      uint64_t v60 = v62;
      uint64_t v61 = 32;
      unint64_t v63 = 0;
      int v43 = v9;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v58, v62, (char *)&v43, (char *)&v44);
      int v43 = v10;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v58, v59, (char *)&v43, (char *)&v44);
      int v43 = v11;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v58, v59, (char *)&v43, (char *)&v44);
      int v43 = v12;
      geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v58, v59, (char *)&v43, (char *)&v44);
      uint64_t v13 = (unsigned __int8 *)v58;
      unint64_t v14 = v59 - (unsigned char *)v58;
      if (v59 == v58)
      {
        unint64_t v15 = 0;
      }
      else
      {
        unint64_t v15 = 0;
        if (v14 <= 1) {
          unint64_t v14 = 1;
        }
        do
        {
          unsigned int v16 = *v13++;
          v15 ^= (v15 << 6) - 0x61C8864680B583EBLL + (v15 >> 2) + v16;
          --v14;
        }
        while (v14);
      }
      unint64_t v63 = v15;
      uint64_t v64 = v40;
      gdc::LayerDataRequest::request(*v3, (uint64_t)v55, 0);
      int16x8_t v17 = [MEMORY[0x1E4F64918] modernManager];
      int32x4_t v18 = [v17 activeTileGroup];

      unint64_t v19 = 0;
      int v20 = v7 >> v6;
      int v21 = v8 >> v6;
      if (!v6)
      {
        int v20 = v7;
        int v21 = v8;
      }
      BOOL v22 = (v21 | v20) == 0;
      uint64_t v41 = v18;
      int8x16_t v42 = v3;
      BOOL v39 = v22;
      while (v19 < [v18 regionalResourcesCount])
      {
        uint64_t v23 = [v18 regionalResourceAtIndex:v19];
        if (v23)
        {
          for (unint64_t i = 0; i < [v23 regionsCount]; ++i)
          {
            uint64_t v52 = 0;
            uint64_t v53 = 0;
            uint64_t v54 = 0;
            [v23 regionAtIndex:i];
            if (HIDWORD(v54) <= v6 && v53 >= v6)
            {
              unsigned int v26 = v7;
              unsigned int v27 = v8;
              if (v6)
              {
                if (v6 >= (v6 - BYTE4(v54))) {
                  char v28 = v6 - BYTE4(v54);
                }
                else {
                  char v28 = v6;
                }
                unsigned int v26 = v7 >> v28;
                unsigned int v27 = v8 >> v28;
              }
              if (v27 >= HIDWORD(v53) && v27 <= v52 && v26 >= v54 && v26 <= HIDWORD(v52)) {
                goto LABEL_44;
              }
            }
          }
        }
        else if ([0 regionsCount])
        {
          uint64_t v52 = 0;
          uint64_t v53 = 0;
          uint64_t v54 = 0;
          if (v6 || !v22)
          {
            for (unint64_t j = 1; j < [0 regionsCount]; ++j)
            {
              uint64_t v52 = 0;
              uint64_t v53 = 0;
              uint64_t v54 = 0;
              if (!v6 && v22) {
                goto LABEL_44;
              }
            }
          }
          else
          {
LABEL_44:
            long long v30 = v3;
            uint64_t v31 = *(void *)(a1 + 584);
            uint64_t v32 = *((void *)*v30 + 14);
            LOBYTE(v43) = 0;
            HIWORD(v43) = 18;
            int v44 = -1073741827;
            long long v45 = v49;
            int8x16_t v46 = v49;
            int8x16_t v47 = v49;
            uint64_t v48 = 32;
            unint64_t v50 = 0;
            int v72 = v19;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v45, v49, (char *)&v72, v73);
            int v72 = v31;
            geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v45, v46, (char *)&v72, v73);
            uint64_t v33 = (unsigned __int8 *)v45;
            unint64_t v34 = v46 - (unsigned char *)v45;
            if (v46 == v45)
            {
              unint64_t v35 = 0;
            }
            else
            {
              unint64_t v35 = 0;
              if (v34 <= 1) {
                unint64_t v34 = 1;
              }
              do
              {
                unsigned int v36 = *v33++;
                v35 ^= (v35 << 6) - 0x61C8864680B583EBLL + (v35 >> 2) + v36;
                --v34;
              }
              while (v34);
            }
            unint64_t v50 = v35;
            uint64_t v51 = v32;
            uint64_t v3 = v42;
            gdc::LayerDataRequest::request(*v42, (uint64_t)&v43, 0);
            int32x4_t v18 = v41;
            BOOL v22 = v39;
            if (v45 != v47) {
              free(v45);
            }
          }
        }

        ++v19;
      }

      if (v58 != v60) {
        free(v58);
      }
      if (v69) {
        char v69 = 0;
      }
      if (v67 != v68) {
        free(v67);
      }
      v3 += 2;
    }
    while (v3 != a3);
  }
}

void sub_1A264558C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,void *a40)
{
  if (a38 != a40) {
    free(a38);
  }
  if (*(unsigned char *)(v41 - 112)) {
    *(unsigned char *)(v41 - 112) = 0;
  }
  int v43 = *(void **)(v41 - 192);
  if (v43 != *(void **)(v41 - 176)) {
    free(v43);
  }
  _Unwind_Resume(a1);
}

void md::mun::MuninPointLabelLayerDataSource::didDeactivate(md::mun::MuninPointLabelLayerDataSource *this)
{
  uint64_t v1 = (_OWORD *)((char *)this + 648);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 82);
  *uint64_t v1 = 0u;
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void md::mun::MuninPointLabelLayerDataSource::didActivate(md::mun::MuninPointLabelLayerDataSource *this)
{
  uint64_t v2 = *((void *)this + 80);
  if (v2)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v2 + 48))(&v7);
    uint64_t v3 = v7;
    uint64_t v4 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    *((void *)this + 81) = v3;
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 82);
    *((void *)this + 82) = v4;
    if (v5)
    {
      std::__shared_weak_count::__release_weak(v5);
      uint64_t v4 = v8;
    }
    if (v4)
    {
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    md::mun::MuninPointLabelLayerDataSource::~MuninPointLabelLayerDataSource(v6);
  }
}

void md::mun::MuninPointLabelLayerDataSource::~MuninPointLabelLayerDataSource(md::mun::MuninPointLabelLayerDataSource *this)
{
  *(void *)this = &unk_1EF550820;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 82);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (md::mun::MuninPointLabelLayerDataSource *)*((void *)this + 80);
  if (v3 == (md::mun::MuninPointLabelLayerDataSource *)((char *)this + 616))
  {
    (*(void (**)(char *))(*((void *)this + 77) + 32))((char *)this + 616);
  }
  else if (v3)
  {
    (*(void (**)(md::mun::MuninPointLabelLayerDataSource *))(*(void *)v3 + 40))(v3);
  }
  *((void *)this + 74) = &unk_1EF559798;

  gdc::LayerDataSource::~LayerDataSource(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  md::mun::MuninPointLabelLayerDataSource *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF550820;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 82);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (md::mun::MuninPointLabelLayerDataSource *)*((void *)this + 80);
  if (v3 == (md::mun::MuninPointLabelLayerDataSource *)((char *)this + 616))
  {
    (*(void (**)(char *))(*((void *)this + 77) + 32))((char *)this + 616);
  }
  else if (v3)
  {
    (*(void (**)(md::mun::MuninPointLabelLayerDataSource *))(*(void *)v3 + 40))(v3);
  }
  *((void *)this + 74) = &unk_1EF559798;

  gdc::LayerDataSource::~LayerDataSource(this);
}

void md::ARUpDirectionUpdatesLogic::runBeforeLayout(uint64_t a1)
{
  uint64_t v2 = gdc::Registry::storage<arComponents::UpRelativeTranslationToApply>(*(int8x8_t **)(a1 + 120));
  uint64_t v3 = *(unint64_t **)(v2 + 56);
  for (unint64_t i = *(unint64_t **)(v2 + 64); v3 != i; ++v3)
  {
    unint64_t v5 = *v3;
    unsigned int v6 = (void *)gdc::Registry::storage<arComponents::UpDirection>(*(int8x8_t **)(a1 + 120));
    uint64_t v7 = v6[4];
    if (v5 >> 39 < (v6[5] - v7) >> 3)
    {
      uint64_t v8 = *(void *)(v7 + 8 * (v5 >> 39));
      if (v8)
      {
        unint64_t v9 = *(unsigned __int16 *)(v8 + 2 * (HIDWORD(v5) & 0x7F));
        uint64_t v11 = v6[7];
        uint64_t v10 = v6[8];
        if (v9 < (v10 - v11) >> 3)
        {
          uint64_t v12 = v11 + 8 * v9;
          if (v12 != v10 && *(_DWORD *)(v12 + 4) == HIDWORD(v5)) {
            continue;
          }
        }
      }
    }
    unint64_t v14 = (void *)gdc::Registry::storage<arComponents::UpDirection>(*(int8x8_t **)(a1 + 120));
    unint64_t v35 = v5;
    unint64_t v15 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v14 + 4, (uint64_t)&v35);
    if (v16)
    {
      BOOL v22 = (_DWORD *)v14[11];
      unint64_t v21 = v14[12];
      if ((unint64_t)v22 >= v21)
      {
        int v24 = (_DWORD *)v14[10];
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (v22 - v24) + 1;
        if (v25 > 0x1555555555555555) {
          goto LABEL_41;
        }
        unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (void)v24) >> 2);
        if (2 * v26 > v25) {
          unint64_t v25 = 2 * v26;
        }
        if (v26 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v27 = 0x1555555555555555;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27)
        {
          if (v27 > 0x1555555555555555) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          char v28 = (char *)operator new(12 * v27);
        }
        else
        {
          char v28 = 0;
        }
        uint64_t v29 = &v28[4 * (v22 - v24)];
        *((_DWORD *)v29 + 2) = 1065353216;
        *(void *)uint64_t v29 = 0;
        long long v30 = v29;
        if (v22 != v24)
        {
          do
          {
            uint64_t v31 = *(void *)(v22 - 3);
            v22 -= 3;
            int v32 = v22[2];
            *(void *)(v30 - 12) = v31;
            v30 -= 12;
            *((_DWORD *)v30 + 2) = v32;
          }
          while (v22 != v24);
          BOOL v22 = (_DWORD *)v14[10];
        }
        uint64_t v23 = v29 + 12;
        v14[10] = v30;
        v14[11] = v29 + 12;
        v14[12] = &v28[12 * v27];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        v22[2] = 1065353216;
        *(void *)BOOL v22 = 0;
        uint64_t v23 = v22 + 3;
      }
      v14[11] = v23;
      uint64_t v18 = v14[31];
    }
    else
    {
      uint64_t v17 = v14[10] + 12 * (((uint64_t)v15 - v14[7]) >> 3);
      *(void *)uint64_t v17 = 0;
      *(_DWORD *)(v17 + 8) = 1065353216;
      uint64_t v18 = v14[31];
      if (v17 != v14[11])
      {
        unint64_t v19 = (void *)v14[16];
        if (v19)
        {
          while (1)
          {
            double v37 = (uint64_t *)&v35;
            uint64_t v38 = 1;
            uint64_t v36 = v18;
            uint64_t v20 = v19[6];
            if (!v20) {
              break;
            }
            (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v20 + 48))(v20, &v36, &v37);
            unint64_t v19 = (void *)*v19;
            if (!v19) {
              goto LABEL_3;
            }
          }
LABEL_40:
          std::__throw_bad_function_call[abi:nn180100]();
LABEL_41:
          abort();
        }
        continue;
      }
    }
    for (unint64_t j = (void *)v14[22]; j; unint64_t j = (void *)*j)
    {
      double v37 = (uint64_t *)&v35;
      uint64_t v38 = 1;
      uint64_t v36 = v18;
      uint64_t v34 = j[6];
      if (!v34) {
        goto LABEL_40;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v34 + 48))(v34, &v36, &v37);
    }
LABEL_3:
    ;
  }
}

uint64_t gdc::Registry::storage<arComponents::UpDirection>(int8x8_t *a1)
{
  uint64_t v10 = 0x7D08E683B5523498;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x7D08E683B5523498;
    if (*(void *)&v1 <= 0x7D08E683B5523498uLL) {
      uint64_t v3 = 0x7D08E683B5523498uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x7D08E683B5523498;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (unint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x7D08E683B5523498)
      {
        if (v5[2] == 0x7D08E683B5523498) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x7D08E683B5523498) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x7D08E683B5523498) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A2645DD4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<arComponents::UpDirection>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::UpDirection>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  unint64_t v14 = (_DWORD *)(a1[10] + 12 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  int v16 = *(_DWORD *)(v15 - 12);
  v15 -= 12;
  _DWORD *v14 = v16;
  v14[1] = *(_DWORD *)(v15 + 4);
  v14[2] = *(_DWORD *)(v15 + 8);
  a1[11] = v15;
  uint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    uint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::UpDirection>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::UpDirection>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void md::ARUpDirectionUpdatesLogic::~ARUpDirectionUpdatesLogic(md::ARUpDirectionUpdatesLogic *this)
{
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
  JUMPOUT(0x1A6239270);
}

{
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

void sub_1A264647C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (SHIBYTE(a24) < 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a25 + 40))(a25, a22, a24 & 0x7FFFFFFFFFFFFFFFLL);
  }
  if (a14 < 0) {
    (*(void (**)(void))(*(void *)a15 + 40))();
  }

  _Unwind_Resume(a1);
}

uint64_t md::SingleGEOResourceLayerDataSource::descriptionForKey@<X0>(const gdc::LayerDataRequestKey *a1@<X1>, unsigned char *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v19);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"gdc::LayerDataRequestKey<Type:", 30);
  unint64_t v5 = *((unsigned __int16 *)a1 + 4);
  if (v5 > 0x51) {
    uint64_t v6 = "<Invalid>";
  }
  else {
    uint64_t v6 = off_1E5A95780[v5];
  }
  size_t v7 = strlen(v6);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)v6, v7);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)", Tile: ", 8);
  uint64_t v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)".", 1);
  uint64_t v9 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)".", 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)">", 1);
  if ((v26 & 0x10) != 0)
  {
    unint64_t v12 = v25;
    if (v25 < v22)
    {
      unint64_t v25 = v22;
      unint64_t v12 = v22;
    }
    uint64_t v13 = (const void **)&v21;
  }
  else
  {
    if ((v26 & 8) == 0)
    {
      size_t v11 = 0;
      a2[23] = 0;
      goto LABEL_19;
    }
    uint64_t v13 = (const void **)v20;
    unint64_t v12 = v20[2];
  }
  unint64_t v14 = *v13;
  size_t v11 = v12 - (void)*v13;
  if (v11 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v11 >= 0x17)
  {
    uint64_t v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v15 = v11 | 7;
    }
    uint64_t v16 = v15 + 1;
    uint64_t v17 = operator new(v15 + 1);
    *((void *)a2 + 1) = v11;
    *((void *)a2 + 2) = v16 | 0x8000000000000000;
    *(void *)a2 = v17;
    a2 = v17;
    goto LABEL_18;
  }
  a2[23] = v11;
  if (v11) {
LABEL_18:
  }
    memmove(a2, v14, v11);
LABEL_19:
  a2[v11] = 0;
  v19[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v19 + *(void *)(v19[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v19[1] = MEMORY[0x1E4FBA470] + 16;
  if (v24 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v27);
}

void sub_1A26467D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::SingleGEOResourceLayerDataSource::fallbackSettings(md::SingleGEOResourceLayerDataSource *this)
{
  return *((unsigned __int16 *)this + 348) | 0x10000u;
}

void md::SingleGEOResourceLayerDataSource::createDebugNode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  gdc::LayerDataSource::createDebugNode((void *)a1, a2);
  v9[23] = 17;
  strcpy(v9, "gdc::ResourceType");
  unint64_t v4 = *(unsigned __int16 *)(a1 + 584);
  if (v4 > 0x35) {
    unint64_t v5 = "<Invalid>";
  }
  else {
    unint64_t v5 = off_1E5A96820[v4];
  }
  memset(&__p, 0, sizeof(__p));
  int v8 = 4;
  std::string::__assign_external(&__p, v5);
  gdc::DebugTreeNode::addProperty(a2, (uint64_t)v9, (uint64_t)&v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

uint64_t std::unordered_map<geo::QuadTile,gdc::LayerDataKey,geo::QuadTileHash,std::equal_to<geo::QuadTile>,std::allocator<std::pair<geo::QuadTile const,gdc::LayerDataKey>>>::~unordered_map[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v5 = (void *)*v2;
      uint64_t v6 = (void *)v2[6];
      if (v6 != (void *)v2[8]) {
        free(v6);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<geo::QuadTile,gdc::LayerDataKey>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<geo::QuadTile,gdc::LayerDataKey>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (void *)v2[6];
      if (v3 != (void *)v2[8]) {
        free(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(md::SingleGEOResourceLayerDataSource *this)
{
  *(void *)this = &unk_1EF54D928;
  uint64_t v2 = (void *)*((void *)this + 91);
  if (v2)
  {
    *((void *)this + 92) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 88);
  if (v3)
  {
    *((void *)this + 89) = v3;
    operator delete(v3);
  }
  geo::Pool<gdc::FallbackNode>::disposeElements((uint64_t)this + 648);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 82));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 78));
  if (*((unsigned char *)this + 592)) {
    *((unsigned char *)this + 592) = 0;
  }
  gdc::LayerDataSource::~LayerDataSource(this);
}

void sub_1A2646A04(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 656));
  _Unwind_Resume(a1);
}

void md::GEOVectorTileResourceFetcher::~GEOVectorTileResourceFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A6239270);
}

void extractCustomImageData(std::string *a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ([v3 type] == 3)
  {
    id v4 = v3;
    unint64_t v5 = [v4 customImageKey];
    if (v5
      && ([v4 imageProvider],
          uint64_t v6 = objc_claimAutoreleasedReturnValue(),
          v6,
          v5,
          v6))
    {
      a1->__r_.__value_.__r.__words[0] = 0;
      a1->__r_.__value_.__l.__size_ = 0;
      a1->__r_.__value_.__r.__words[2] = 0;
      a1[2].__r_.__value_.__r.__words[0] = 0;
      size_t v7 = [v4 imageProvider];
      id v8 = [v4 customImageKey];
      std::string::__assign_external(a1, (const std::string::value_type *)[v8 UTF8String]);
      id v9 = v7;
      id v10 = v8;
      v11[0] = &unk_1EF56C000;
      v11[1] = v9;
      v11[2] = v10;
      unint64_t v12 = v11;
      std::__function::__value_func<CGImage * ()(gm::Matrix<unsigned int,2,1>,float)>::swap[abi:nn180100](v11, a1[1].__r_.__value_.__r.__words);
      if (v12 == v11)
      {
        (*(void (**)(void *))(v11[0] + 32))(v11);
      }
      else if (v12)
      {
        (*(void (**)(void))(*v12 + 40))();
      }
    }
    else
    {
      a1->__r_.__value_.__r.__words[0] = 0;
      a1->__r_.__value_.__l.__size_ = 0;
      a1->__r_.__value_.__r.__words[2] = 0;
      a1[2].__r_.__value_.__r.__words[0] = 0;
    }
  }
  else
  {
    a1->__r_.__value_.__r.__words[0] = 0;
    a1->__r_.__value_.__l.__size_ = 0;
    a1->__r_.__value_.__r.__words[2] = 0;
    a1[2].__r_.__value_.__r.__words[0] = 0;
  }
}

void sub_1A2646C10(_Unwind_Exception *a1)
{
  md::CustomImageData::~CustomImageData(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<extractCustomImageData(VKRouteWaypointInfo *)::$_0,std::allocator<extractCustomImageData(VKRouteWaypointInfo *)::$_0>,CGImage * ()(gm::Matrix<unsigned int,2,1>,float)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3, double a4, double a5, double a6)
{
  LODWORD(a6) = *a3;
  LODWORD(a4) = *a2;
  LODWORD(a5) = a2[1];
  return objc_msgSend(*(id *)(a1 + 8), "imageForCustomImageKey:suggestedSize:contentScale:", *(void *)(a1 + 16), (double)*(unint64_t *)&a4, (double)*(unint64_t *)&a5, a6);
}

void std::__function::__func<extractCustomImageData(VKRouteWaypointInfo *)::$_0,std::allocator<extractCustomImageData(VKRouteWaypointInfo *)::$_0>,CGImage * ()(gm::Matrix<unsigned int,2,1>,float)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

void std::__function::__func<extractCustomImageData(VKRouteWaypointInfo *)::$_0,std::allocator<extractCustomImageData(VKRouteWaypointInfo *)::$_0>,CGImage * ()(gm::Matrix<unsigned int,2,1>,float)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
}

id std::__function::__func<extractCustomImageData(VKRouteWaypointInfo *)::$_0,std::allocator<extractCustomImageData(VKRouteWaypointInfo *)::$_0>,CGImage * ()(gm::Matrix<unsigned int,2,1>,float)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF56C000;
  a2[1] = *(id *)(a1 + 8);
  id result = *(id *)(a1 + 16);
  a2[2] = result;
  return result;
}

void *std::__function::__func<extractCustomImageData(VKRouteWaypointInfo *)::$_0,std::allocator<extractCustomImageData(VKRouteWaypointInfo *)::$_0>,CGImage * ()(gm::Matrix<unsigned int,2,1>,float)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x18uLL);
  void *v2 = &unk_1EF56C000;
  v2[1] = *(id *)(a1 + 8);
  v2[2] = *(id *)(a1 + 16);
  return v2;
}

void std::__function::__func<extractCustomImageData(VKRouteWaypointInfo *)::$_0,std::allocator<extractCustomImageData(VKRouteWaypointInfo *)::$_0>,CGImage * ()(gm::Matrix<unsigned int,2,1>,float)>::~__func(uint64_t a1)
{
  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<extractCustomImageData(VKRouteWaypointInfo *)::$_0,std::allocator<extractCustomImageData(VKRouteWaypointInfo *)::$_0>,CGImage * ()(gm::Matrix<unsigned int,2,1>,float)>::~__func(uint64_t a1)
{
  return a1;
}

void md::ClusterStore::labelMarkerForClusterNode(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void md::WaypointStore::~WaypointStore(md::WaypointStore *this)
{
  md::WaypointStore::~WaypointStore(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t *v11;

  *(void *)this = &unk_1EF5334C8;
  size_t v11 = (uint64_t *)((char *)this + 248);
  std::vector<md::WaypointStoreWaypointData,geo::StdAllocator<md::WaypointStoreWaypointData,mdm::Allocator>>::__destroy_vector::operator()[abi:nn180100](&v11);
  uint64_t v2 = *((void *)this + 27);
  if (v2)
  {
    *((void *)this + 28) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 30) + 40))(*((void *)this + 30), v2, *((void *)this + 29) - v2);
  }
  id v3 = *((void *)this + 23);
  if (v3)
  {
    *((void *)this + 24) = v3;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 26) + 40))(*((void *)this + 26), v3, *((void *)this + 25) - v3);
  }
  id v4 = *((void *)this + 19);
  if (v4)
  {
    *((void *)this + 20) = v4;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 22) + 40))(*((void *)this + 22), v4, *((void *)this + 21) - v4);
  }
  unint64_t v5 = (void *)*((void *)this + 15);
  if (v5)
  {
    uint64_t v6 = (void *)*((void *)this + 16);
    size_t v7 = *((void *)this + 15);
    if (v6 != v5)
    {
      do
      {
        id v9 = *--v6;
        id v8 = v9;
        *uint64_t v6 = 0;
        if (v9) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 8))(v8, v7);
        }
      }
      while (v6 != v5);
      size_t v7 = *((void *)this + 15);
    }
    *((void *)this + 16) = v5;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 18) + 40))(*((void *)this + 18), v7, *((void *)this + 17) - v7);
  }
  size_t v11 = (uint64_t *)((char *)this + 88);
  std::vector<md::WaypointStoreWaypointData,geo::StdAllocator<md::WaypointStoreWaypointData,mdm::Allocator>>::__destroy_vector::operator()[abi:nn180100](&v11);
  std::__tree<std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,mdm::Allocator>>::destroy((uint64_t)this + 56, *((void *)this + 8));

  id v10 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
}

uint64_t **std::vector<md::WaypointStoreWaypointData,geo::StdAllocator<md::WaypointStoreWaypointData,mdm::Allocator>>::__destroy_vector::operator()[abi:nn180100](uint64_t **result)
{
  uint64_t v1 = *result;
  uint64_t v2 = **result;
  if (v2)
  {
    uint64_t v3 = v1[1];
    uint64_t v4 = **result;
    unint64_t v5 = *result;
    if (v3 != v2)
    {
      uint64_t v6 = result;
      do
      {
        uint64_t v7 = *(void *)(v3 - 8);
        *(void *)(v3 - 8) = 0;
        if (v7) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 8))(v7, v4);
        }
        uint64_t v8 = *(void *)(v3 - 16);
        *(void *)(v3 - 16) = 0;
        if (v8) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 8))(v8, v4);
        }
        uint64_t v9 = *(void *)(v3 - 24);
        *(void *)(v3 - 24) = 0;
        if (v9) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 8))(v9, v4);
        }

        v3 -= 32;
      }
      while (v3 != v2);
      unint64_t v5 = *v6;
    }
    v1[1] = v2;
    id v10 = *(uint64_t (**)(void))(*(void *)v5[3] + 40);
    return (uint64_t **)v10();
  }
  return result;
}

void md::WaypointStore::updateWaypointsForSelection(md::WaypointStore *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 48)) {
    BOOL v1 = *((unsigned char *)this + 49) != 0;
  }
  else {
    BOOL v1 = 0;
  }
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  uint64_t v2 = objc_msgSend(*((id *)this + 3), "waypoints", 0);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v7;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v6 + 1) + 8 * i) setIsOnSelectedRoute:v1];
      }
      uint64_t v3 = [v2 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

void sub_1A26472C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<md::WaypointStoreWaypointData,geo::StdAllocator<md::WaypointStoreWaypointData,mdm::Allocator>>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  unint64_t v5 = *(_OWORD **)(a1 + 8);
  uint64_t v6 = (uint64_t)v5 - *(void *)a1;
  uint64_t v7 = v6 >> 5;
  unint64_t v8 = a2 - (v6 >> 5);
  if (a2 <= v6 >> 5)
  {
    if (a2 < v6 >> 5)
    {
      for (uint64_t i = &v4[4 * a2]; v5 != i; v5 -= 2)
      {
        uint64_t v19 = *((void *)v5 - 1);
        *((void *)v5 - 1) = 0;
        if (v19) {
          (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
        }
        uint64_t v20 = *((void *)v5 - 2);
        *((void *)v5 - 2) = 0;
        if (v20) {
          (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
        }
        uint64_t v21 = *((void *)v5 - 3);
        *((void *)v5 - 3) = 0;
        if (v21) {
          (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
        }
      }
      *(void *)(a1 + 8) = i;
    }
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 16);
    if (v8 <= (v9 - (uint64_t)v5) >> 5)
    {
      unint64_t v22 = &v5[2 * v8];
      uint64_t v23 = 32 * a2 - 32 * v7;
      do
      {
        if (v5)
        {
          *unint64_t v5 = 0uLL;
          v5[1] = 0uLL;
        }
        v5 += 2;
        v23 -= 32;
      }
      while (v23);
      *(void *)(a1 + 8) = v22;
    }
    else
    {
      if (a2 >> 59) {
        abort();
      }
      uint64_t v10 = v9 - (void)v4;
      uint64_t v11 = v10 >> 4;
      if (v10 >> 4 <= a2) {
        uint64_t v11 = a2;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
        uint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v12 = v11;
      }
      uint64_t v13 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), 32 * v12, 8);
      unint64_t v14 = v13 + 32 * v7;
      unint64_t v15 = v13 + 32 * a2;
      uint64_t v16 = 32 * a2 - 32 * v7;
      uint64_t v17 = (_OWORD *)v14;
      do
      {
        if (v17)
        {
          *uint64_t v17 = 0uLL;
          v17[1] = 0uLL;
        }
        v17 += 2;
        v16 -= 32;
      }
      while (v16);
      uint64_t v24 = v13 + 32 * v12;
      unint64_t v25 = *(void **)a1;
      int v26 = *(void **)(a1 + 8);
      if (v26 == *(void **)a1)
      {
        int64x2_t v40 = vdupq_n_s64((unint64_t)v26);
      }
      else
      {
        unint64_t v27 = (unint64_t)v26 - *(void *)a1 - 32;
        if (v27 < 0xE0) {
          goto LABEL_64;
        }
        char v28 = (char *)v26 - (v27 & 0xFFFFFFFFFFFFFFE0);
        BOOL v29 = (unint64_t)(v28 - 24) >= v14
           || v13 + v6 - 24 - (v27 & 0xFFFFFFFFFFFFFFE0) >= (unint64_t)v26;
        BOOL v30 = !v29;
        if (v6 - (v27 & 0xFFFFFFFFFFFFFFE0) + v13 - 32 < (unint64_t)(v26 - 3)
          && (unint64_t)(v28 - 32) < v13 + v6 - 24)
        {
          goto LABEL_64;
        }
        if (v30) {
          goto LABEL_64;
        }
        uint64_t v32 = (v27 >> 5) + 1;
        uint64_t v33 = &v26[-4 * (v32 & 0xFFFFFFFFFFFFFFELL)];
        uint64_t v34 = (const double *)(v26 - 8);
        unint64_t v35 = (double *)(v14 - 64);
        uint64_t v36 = v32 & 0xFFFFFFFFFFFFFFELL;
        do
        {
          float64x2x4_t v48 = vld4q_f64(v34);
          *((_OWORD *)v34 + 2) = 0uLL;
          *((_OWORD *)v34 + 3) = 0uLL;
          *(_OWORD *)uint64_t v34 = 0uLL;
          *((_OWORD *)v34 + 1) = 0uLL;
          v34 -= 8;
          vst4q_f64(v35, v48);
          v35 -= 8;
          v36 -= 2;
        }
        while (v36);
        v14 -= 32 * (v32 & 0xFFFFFFFFFFFFFFELL);
        int v26 = v33;
        if (v32 != (v32 & 0xFFFFFFFFFFFFFFELL))
        {
LABEL_64:
          do
          {
            long long v37 = *((_OWORD *)v26 - 2);
            v26 -= 4;
            *int v26 = 0;
            v26[1] = 0;
            *(_OWORD *)(v14 - 32) = v37;
            v14 -= 32;
            uint64_t v38 = v26[2];
            v26[2] = 0;
            *(void *)(v14 + 16) = v38;
            uint64_t v39 = v26[3];
            v26[3] = 0;
            *(void *)(v14 + 24) = v39;
          }
          while (v26 != v25);
        }
        int64x2_t v40 = *(int64x2_t *)a1;
      }
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v15;
      *(void *)(a1 + 16) = v24;
      uint64_t v42 = v40.i64[1];
      for (uint64_t j = v40.i64[0]; v42 != j; v42 -= 32)
      {
        uint64_t v44 = *(void *)(v42 - 8);
        *(void *)(v42 - 8) = 0;
        if (v44) {
          (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
        }
        uint64_t v45 = *(void *)(v42 - 16);
        *(void *)(v42 - 16) = 0;
        if (v45) {
          (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
        }
        uint64_t v46 = *(void *)(v42 - 24);
        *(void *)(v42 - 24) = 0;
        if (v46) {
          (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
        }
      }
      if (j)
      {
        int v43 = *(void (**)(void))(**(void **)(a1 + 24) + 40);
        v43();
      }
    }
  }
}

void md::WaypointStore::buildFeatureForWaypoint(md::LabelExternalPointFeature **a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  unint64_t v8 = operator new(0x1D8uLL);
  v8[1] = 0;
  v8[2] = 0;
  *unint64_t v8 = &unk_1EF581CC8;
  *a1 = md::LabelExternalPointFeature::LabelExternalPointFeature((md::LabelExternalPointFeature *)(v8 + 3));
  a1[1] = (md::LabelExternalPointFeature *)v8;
  v8[26] = [v7 muid];
  uint64_t v9 = [v7 waypoint];
  int v10 = [v9 hasClientFeatureID];

  if (v10)
  {
    uint64_t v11 = [v7 waypoint];
    v8[6] = [v11 clientFeatureID];
  }
  if (a4 || ([v7 coordinate], objc_msgSend(v7, "routeCoordinate"), GEOCalculateDistance(), v12 > 100.0)) {
    [v7 routeCoordinate];
  }
  else {
    [v7 coordinate];
  }
  double v16 = v15;
  uint64_t v17 = v8[27];
  if (v8[28] != v17)
  {
    if (fabs(v13) <= 85.0511169)
    {
      float64_t v37 = v14;
      long double v22 = tan(v13 * 0.00872664626 + 0.785398163);
      long double v23 = log(v22);
      v24.f64[0] = v37;
      v24.f64[1] = v23;
      __asm { FMOV            V1.2D, #0.5 }
      *(float64x2_t *)(v17 + 24) = vmlaq_f64(_Q1, (float64x2_t)xmmword_1A28FCBE0, v24);
      *(_WORD *)(v17 + 45) = 257;
    }
    else
    {
      double v18 = v14 * 0.0174532925;
      __double2 v19 = __sincos_stret(v13 * 0.0174532925);
      double v20 = 6378137.0 / sqrt(v19.__sinval * v19.__sinval * -0.00669437999 + 1.0);
      __double2 v21 = __sincos_stret(v18);
      *(double *)uint64_t v17 = v20 * v19.__cosval * v21.__cosval;
      *(double *)(v17 + 8) = v20 * v19.__cosval * v21.__sinval;
      *(double *)(v17 + 16) = v19.__sinval * 0.99330562 * v20;
      *(unsigned char *)(v17 + 44) = 1;
    }
    if (v16 != 1.79769313e308)
    {
      float v30 = v16;
      *(float *)(v17 + 40) = v30;
    }
  }
  md::WaypointStore::styleAttributesForWaypoint(&v38, a2, v7, a4);
  uint64_t v32 = v38;
  uint64_t v33 = v39;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  if (v33) {
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v34 = (std::__shared_weak_count *)v8[8];
  v8[7] = v32;
  v8[8] = v33;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  unint64_t v35 = v39;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  uint64_t v36 = (int64x2_t *)*a1;
  md::WaypointStore::updateExternalFeatureText((int64x2_t *)*a1, (md::LabelExternalPointFeature *)v7, v31);
  extractCustomImageData(&__p, v7);
  md::CustomImageData::operator=((uint64_t)&v36[7].i64[1], &__p);
  if (v42 == v41)
  {
    (*(void (**)(void *))(v41[0] + 32))(v41);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_27;
    }
LABEL_29:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_27;
  }
  if (v42) {
    (*(void (**)(void))(*v42 + 40))();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_29;
  }
LABEL_27:
}

void sub_1A2647ADC(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v2);
  _Unwind_Resume(a1);
}

uint64_t md::WaypointStoreFeatureNode::WaypointStoreFeatureNode(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7 = a2;
  unint64_t v8 = *(long long **)(*a4 + 192);
  if (*(long long **)(*a4 + 200) == v8)
  {
    {
      unint64_t v8 = &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
    }
    else
    {
      unint64_t v8 = &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
      if (v32)
      {
        qword_1EB317748 = 0;
        md::LabelPoint::NullPoint(void)::kNullLabelPoint = 0u;
        *(_OWORD *)&qword_1EB317738 = 0u;
        dword_1EB317750 = 2139095039;
        word_1EB317754 = 256;
        byte_1EB317756 = 1;
        unint64_t v8 = &md::LabelPoint::NullPoint(void)::kNullLabelPoint;
      }
    }
  }
  *(void *)a1 = &unk_1EF530710;
  *(void *)(a1 + 8) = 0x437C000000000000;
  long long v9 = *v8;
  *(void *)(a1 + 32) = *((void *)v8 + 2);
  *(_OWORD *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 40) = *(long long *)((char *)v8 + 24);
  int v10 = *((_DWORD *)v8 + 10);
  *(_DWORD *)(a1 + 59) = *(_DWORD *)((char *)v8 + 43);
  *(_DWORD *)(a1 + 56) = v10;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 68) = 0;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 108) = a3;
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 116) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 124) = 0;
  *(void *)a1 = &unk_1EF5460C0;
  id v11 = v7;
  *(void *)(a1 + 128) = v11;
  uint64_t v13 = *a4;
  uint64_t v12 = a4[1];
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  double v14 = *(std::__shared_weak_count **)(a1 + 96);
  *(void *)(a1 + 88) = v13;
  *(void *)(a1 + 96) = v12;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = *a4;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(*a4 + 84);
  double v16 = *(_DWORD **)(v15 + 32);
  if (v16)
  {
    unint64_t v17 = *((unsigned __int8 *)v16 + 33);
    if (*((unsigned char *)v16 + 33))
    {
      double v18 = *(_DWORD **)v16;
      if (**(_DWORD **)v16 == 6)
      {
        unint64_t v19 = 0;
LABEL_13:
        LOWORD(v21) = v18[2 * v19 + 1];
        int v20 = v21 & 0xFF00;
        int v21 = v21;
        LODWORD(v17) = 1;
LABEL_21:
        int v24 = v20 | v21;
        if (*(unsigned __int8 *)(a1 + 116) == v17)
        {
          if (*(unsigned char *)(a1 + 116))
          {
            *(_DWORD *)(a1 + 112) = v24;
            double v16 = *(_DWORD **)(v15 + 32);
            if (!v16) {
              goto LABEL_38;
            }
          }
        }
        else if (*(unsigned char *)(a1 + 116))
        {
          *(unsigned char *)(a1 + 116) = 0;
        }
        else
        {
          *(_DWORD *)(a1 + 112) = v24;
          *(unsigned char *)(a1 + 116) = 1;
        }
        unint64_t v25 = *((unsigned __int8 *)v16 + 33);
        if (!*((unsigned char *)v16 + 33))
        {
          LODWORD(v16) = 0;
LABEL_39:
          int v27 = 0;
LABEL_40:
          unsigned int v30 = v27 | v16;
          if (*(unsigned __int8 *)(a1 + 124) == v25)
          {
            if (*(unsigned char *)(a1 + 124)) {
              *(_DWORD *)(a1 + 120) = v30;
            }
          }
          else if (*(unsigned char *)(a1 + 124))
          {
            *(unsigned char *)(a1 + 124) = 0;
          }
          else
          {
            *(_DWORD *)(a1 + 120) = v30;
            *(unsigned char *)(a1 + 124) = 1;
          }
          goto LABEL_46;
        }
        double v16 = *(_DWORD **)v16;
        if (*v16 == 4)
        {
          unint64_t v26 = 0;
LABEL_30:
          LOWORD(v16) = v16[2 * v26 + 1];
          int v27 = (unsigned __int16)v16 & 0xFF00;
          LODWORD(v16) = v16;
          LODWORD(v25) = 1;
          goto LABEL_40;
        }
        unint64_t v26 = 0;
        char v28 = v16 + 2;
        while (v25 - 1 != v26)
        {
          int v29 = *v28;
          v28 += 2;
          ++v26;
          if (v29 == 4)
          {
            if (v26 < v25) {
              goto LABEL_30;
            }
            break;
          }
        }
        LODWORD(v16) = 0;
LABEL_38:
        LODWORD(v25) = 0;
        goto LABEL_39;
      }
      unint64_t v19 = 0;
      long double v22 = v18 + 2;
      while (v17 - 1 != v19)
      {
        int v23 = *v22;
        v22 += 2;
        ++v19;
        if (v23 == 6)
        {
          if (v19 < v17) {
            goto LABEL_13;
          }
          break;
        }
      }
      int v21 = 0;
      LODWORD(v17) = 0;
    }
    else
    {
      int v21 = 0;
    }
    int v20 = 0;
    goto LABEL_21;
  }
LABEL_46:

  return a1;
}

void md::WaypointStore::styleAttributesForWaypoint(void *a1, uint64_t a2, void *a3, int a4)
{
  id v7 = a3;
  v168 = 0;
  v169 = 0;
  unint64_t v170 = 0;
  {
    operator new();
  }
  uint64_t v171 = mdm::Allocator::instance(void)::alloc;
  unint64_t v8 = [v7 styleAttributes];
  long long v9 = v8;
  if (v8)
  {
    int v10 = (char *)[v8 v];
    uint64_t v11 = [v9 v];
    unsigned int v12 = [v9 countAttrs];
    std::vector<GeoCodecsFeatureStylePair,geo::StdAllocator<GeoCodecsFeatureStylePair,mdm::Allocator>>::__insert_with_size[abi:nn180100]<GeoCodecsFeatureStylePair*,GeoCodecsFeatureStylePair*>((uint64_t *)&v168, (uint64_t)v169, v10, (char *)(v11 + 8 * v12), (v11 + 8 * v12 - (uint64_t)v10) >> 3);
  }
  if (*(unsigned char *)(a2 + 48)) {
    BOOL v13 = *(unsigned char *)(a2 + 49) != 0;
  }
  else {
    BOOL v13 = 0;
  }
  double v14 = v169;
  unint64_t v15 = v170;
  if ((unint64_t)v169 < v170)
  {
    if (v169)
    {
      uint64_t *v169 = 0x300000005;
      unint64_t v15 = v170;
    }
    double v16 = (unint64_t *)(v14 + 1);
    goto LABEL_34;
  }
  uint64_t v17 = ((char *)v169 - v168) >> 3;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61) {
    abort();
  }
  uint64_t v19 = v170 - (void)v168;
  if ((uint64_t)(v170 - (void)v168) >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v15 = v18;
  }
  if (v15)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v171 + 16))(v171, 8 * v15, 4);
    int v21 = (void *)(v20 + 8 * v17);
    unint64_t v15 = v20 + 8 * v15;
    if (v20) {
      void *v21 = 0x300000005;
    }
  }
  else
  {
    int v21 = (void *)(8 * v17);
  }
  double v16 = v21 + 1;
  uint64_t v23 = (uint64_t)v168;
  long double v22 = v169;
  if (v169 != (uint64_t *)v168)
  {
    unint64_t v24 = (char *)v169 - v168 - 8;
    if (v24 < 0x38)
    {
      unint64_t v26 = v169;
    }
    else if ((unint64_t)((char *)v169 - (char *)v21) < 0x20)
    {
      unint64_t v26 = v169;
    }
    else
    {
      uint64_t v25 = (v24 >> 3) + 1;
      unint64_t v26 = &v169[-(v25 & 0x3FFFFFFFFFFFFFFCLL)];
      int v27 = v21 - 2;
      char v28 = v169 - 2;
      uint64_t v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v30 = *(_OWORD *)v28;
        *(v27 - 1) = *((_OWORD *)v28 - 1);
        *int v27 = v30;
        v27 -= 2;
        v28 -= 4;
        v29 -= 4;
      }
      while (v29);
      v21 -= v25 & 0x3FFFFFFFFFFFFFFCLL;
      if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_31;
      }
    }
    do
    {
      uint64_t v31 = *--v26;
      *--int v21 = v31;
    }
    while (v26 != (uint64_t *)v23);
LABEL_31:
    long double v22 = (uint64_t *)v168;
  }
  unint64_t v32 = v170;
  v168 = (char *)v21;
  unint64_t v170 = v15;
  if (v22) {
    (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(void *)v171 + 40))(v171, v22, v32 - (void)v22);
  }
LABEL_34:
  v169 = (uint64_t *)v16;
  if ((a4 - 1) >= 3) {
    unint64_t v33 = 0x400010023;
  }
  else {
    unint64_t v33 = ((unint64_t)(a4 - 1) << 32) + 0x500010023;
  }
  if ((unint64_t)v16 < v15)
  {
    unint64_t *v16 = v33;
    uint64_t v34 = (uint64_t *)(v16 + 1);
    unint64_t v35 = v170;
    goto LABEL_62;
  }
  uint64_t v36 = ((char *)v16 - v168) >> 3;
  unint64_t v37 = v36 + 1;
  if ((unint64_t)(v36 + 1) >> 61) {
    abort();
  }
  uint64_t v38 = v15 - (void)v168;
  if ((uint64_t)(v15 - (void)v168) >> 2 > v37) {
    unint64_t v37 = v38 >> 2;
  }
  if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v35 = v37;
  }
  if (v35)
  {
    uint64_t v39 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v171 + 16))(v171, 8 * v35, 4);
    int64x2_t v40 = (unint64_t *)(v39 + 8 * v36);
    unint64_t v35 = v39 + 8 * v35;
    if (v39) {
      *int64x2_t v40 = v33;
    }
  }
  else
  {
    int64x2_t v40 = (unint64_t *)(8 * v36);
  }
  uint64_t v34 = (uint64_t *)(v40 + 1);
  uint64_t v42 = (uint64_t)v168;
  uint64_t v41 = v169;
  if (v169 != (uint64_t *)v168)
  {
    unint64_t v43 = (char *)v169 - v168 - 8;
    if (v43 < 0x38)
    {
      uint64_t v45 = v169;
    }
    else if ((unint64_t)((char *)v169 - (char *)v40) < 0x20)
    {
      uint64_t v45 = v169;
    }
    else
    {
      uint64_t v44 = (v43 >> 3) + 1;
      uint64_t v45 = &v169[-(v44 & 0x3FFFFFFFFFFFFFFCLL)];
      uint64_t v46 = v40 - 2;
      int8x16_t v47 = v169 - 2;
      uint64_t v48 = v44 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v49 = *(_OWORD *)v47;
        *((_OWORD *)v46 - 1) = *((_OWORD *)v47 - 1);
        *(_OWORD *)uint64_t v46 = v49;
        v46 -= 4;
        v47 -= 4;
        v48 -= 4;
      }
      while (v48);
      v40 -= v44 & 0x3FFFFFFFFFFFFFFCLL;
      if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_59;
      }
    }
    do
    {
      unint64_t v50 = *--v45;
      *--int64x2_t v40 = v50;
    }
    while (v45 != (uint64_t *)v42);
LABEL_59:
    uint64_t v41 = (uint64_t *)v168;
  }
  unint64_t v51 = v170;
  v168 = (char *)v40;
  unint64_t v170 = v35;
  if (v41) {
    (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(void *)v171 + 40))(v171, v41, v51 - (void)v41);
  }
LABEL_62:
  v169 = v34;
  if ((unint64_t)v34 < v35)
  {
    uint64_t v52 = 65538;
    if (v13) {
      uint64_t v52 = 0x100010002;
    }
    uint64_t *v34 = v52;
    uint64_t v53 = v34 + 1;
    unint64_t v54 = v170;
    goto LABEL_91;
  }
  uint64_t v55 = ((char *)v34 - v168) >> 3;
  unint64_t v56 = v55 + 1;
  if ((unint64_t)(v55 + 1) >> 61) {
    abort();
  }
  uint64_t v57 = v35 - (void)v168;
  if ((uint64_t)(v35 - (void)v168) >> 2 > v56) {
    unint64_t v56 = v57 >> 2;
  }
  if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v54 = v56;
  }
  if (v54)
  {
    uint64_t v58 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v171 + 16))(v171, 8 * v54, 4);
    long long v59 = (uint64_t *)(v58 + 8 * v55);
    unint64_t v54 = v58 + 8 * v54;
    if (v58)
    {
      uint64_t v60 = 65538;
      if (v13) {
        uint64_t v60 = 0x100010002;
      }
      *long long v59 = v60;
    }
  }
  else
  {
    long long v59 = (uint64_t *)(8 * v55);
  }
  uint64_t v53 = v59 + 1;
  uint64_t v62 = (uint64_t)v168;
  uint64_t v61 = v169;
  if (v169 != (uint64_t *)v168)
  {
    unint64_t v63 = (char *)v169 - v168 - 8;
    if (v63 < 0x38)
    {
      char v65 = v169;
    }
    else if ((unint64_t)((char *)v169 - (char *)v59) < 0x20)
    {
      char v65 = v169;
    }
    else
    {
      uint64_t v64 = (v63 >> 3) + 1;
      char v65 = &v169[-(v64 & 0x3FFFFFFFFFFFFFFCLL)];
      uint64_t v66 = v59 - 2;
      int8x16_t v67 = v169 - 2;
      uint64_t v68 = v64 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v69 = *(_OWORD *)v67;
        *((_OWORD *)v66 - 1) = *((_OWORD *)v67 - 1);
        *(_OWORD *)uint64_t v66 = v69;
        v66 -= 4;
        v67 -= 4;
        v68 -= 4;
      }
      while (v68);
      v59 -= v64 & 0x3FFFFFFFFFFFFFFCLL;
      if (v64 == (v64 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_88;
      }
    }
    do
    {
      uint64_t v70 = *--v65;
      *--long long v59 = v70;
    }
    while (v65 != (uint64_t *)v62);
LABEL_88:
    uint64_t v61 = (uint64_t *)v168;
  }
  unint64_t v71 = v170;
  v168 = (char *)v59;
  unint64_t v170 = v54;
  if (v61) {
    (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(void *)v171 + 40))(v171, v61, v71 - (void)v61);
  }
LABEL_91:
  v169 = v53;
  if ((unint64_t)v53 < v54)
  {
    *uint64_t v53 = 0x100010024;
    int v72 = v53 + 1;
    unint64_t v73 = v170;
    goto LABEL_116;
  }
  uint64_t v74 = ((char *)v53 - v168) >> 3;
  unint64_t v75 = v74 + 1;
  if ((unint64_t)(v74 + 1) >> 61) {
    abort();
  }
  uint64_t v76 = v54 - (void)v168;
  if ((uint64_t)(v54 - (void)v168) >> 2 > v75) {
    unint64_t v75 = v76 >> 2;
  }
  if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v73 = v75;
  }
  if (v73)
  {
    uint64_t v77 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v171 + 16))(v171, 8 * v73, 4);
    int32x4_t v78 = (void *)(v77 + 8 * v74);
    unint64_t v73 = v77 + 8 * v73;
    if (v77) {
      *int32x4_t v78 = 0x100010024;
    }
  }
  else
  {
    int32x4_t v78 = (void *)(8 * v74);
  }
  int v72 = v78 + 1;
  uint64_t v80 = (uint64_t)v168;
  int8x16_t v79 = v169;
  if (v169 != (uint64_t *)v168)
  {
    unint64_t v81 = (char *)v169 - v168 - 8;
    if (v81 < 0x38)
    {
      v83 = v169;
    }
    else if ((unint64_t)((char *)v169 - (char *)v78) < 0x20)
    {
      v83 = v169;
    }
    else
    {
      uint64_t v82 = (v81 >> 3) + 1;
      v83 = &v169[-(v82 & 0x3FFFFFFFFFFFFFFCLL)];
      v84 = v78 - 2;
      v85 = v169 - 2;
      uint64_t v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v87 = *(_OWORD *)v85;
        *(v84 - 1) = *((_OWORD *)v85 - 1);
        _OWORD *v84 = v87;
        v84 -= 2;
        v85 -= 4;
        v86 -= 4;
      }
      while (v86);
      v78 -= v82 & 0x3FFFFFFFFFFFFFFCLL;
      if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_113;
      }
    }
    do
    {
      uint64_t v88 = *--v83;
      *--int32x4_t v78 = v88;
    }
    while (v83 != (uint64_t *)v80);
LABEL_113:
    int8x16_t v79 = (uint64_t *)v168;
  }
  unint64_t v89 = v170;
  v168 = (char *)v78;
  unint64_t v170 = v73;
  if (v79) {
    (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(void *)v171 + 40))(v171, v79, v89 - (void)v79);
  }
LABEL_116:
  v169 = v72;
  if ((unint64_t)v72 < v73)
  {
    *int v72 = 0x20001001FLL;
    v90 = v72 + 1;
    goto LABEL_141;
  }
  uint64_t v91 = ((char *)v72 - v168) >> 3;
  unint64_t v92 = v91 + 1;
  if ((unint64_t)(v91 + 1) >> 61) {
    abort();
  }
  uint64_t v93 = v73 - (void)v168;
  if ((uint64_t)(v73 - (void)v168) >> 2 > v92) {
    unint64_t v92 = v93 >> 2;
  }
  if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8) {
    uint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v94 = v92;
  }
  if (v94)
  {
    uint64_t v95 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v171 + 16))(v171, 8 * v94, 4);
    v96 = (void *)(v95 + 8 * v91);
    unint64_t v97 = v95 + 8 * v94;
    if (v95) {
      void *v96 = 0x20001001FLL;
    }
  }
  else
  {
    unint64_t v97 = 0;
    v96 = (void *)(8 * v91);
  }
  v90 = v96 + 1;
  uint64_t v99 = (uint64_t)v168;
  v98 = v169;
  if (v169 != (uint64_t *)v168)
  {
    unint64_t v100 = (char *)v169 - v168 - 8;
    if (v100 < 0x38)
    {
      v102 = v169;
    }
    else if ((unint64_t)((char *)v169 - (char *)v96) < 0x20)
    {
      v102 = v169;
    }
    else
    {
      uint64_t v101 = (v100 >> 3) + 1;
      v102 = &v169[-(v101 & 0x3FFFFFFFFFFFFFFCLL)];
      v103 = v96 - 2;
      v104 = v169 - 2;
      uint64_t v105 = v101 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v106 = *(_OWORD *)v104;
        *(v103 - 1) = *((_OWORD *)v104 - 1);
        _OWORD *v103 = v106;
        v103 -= 2;
        v104 -= 4;
        v105 -= 4;
      }
      while (v105);
      v96 -= v101 & 0x3FFFFFFFFFFFFFFCLL;
      if (v101 == (v101 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_138;
      }
    }
    do
    {
      uint64_t v107 = *--v102;
      *--v96 = v107;
    }
    while (v102 != (uint64_t *)v99);
LABEL_138:
    v98 = (uint64_t *)v168;
  }
  unint64_t v108 = v170;
  v168 = (char *)v96;
  unint64_t v170 = v97;
  if (v98) {
    (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(void *)v171 + 40))(v171, v98, v108 - (void)v98);
  }
LABEL_141:
  v169 = v90;
  id v167 = v7;
  if ([v167 isAtEnd])
  {
    uint64_t v109 = 4;
  }
  else
  {
    if ([v167 isAtStart]) {
      uint64_t v109 = 3;
    }
    else {
      uint64_t v109 = 2;
    }
    v90 = v169;
  }

  if ((unint64_t)v90 < v170)
  {
    if (v90) {
      uint64_t *v90 = (v109 << 32) | 0x2C;
    }
    v110 = v90 + 1;
    goto LABEL_174;
  }
  uint64_t v111 = ((char *)v90 - v168) >> 3;
  if ((unint64_t)(v111 + 1) >> 61) {
    abort();
  }
  unint64_t v112 = (uint64_t)(v170 - (void)v168) >> 2;
  if (v112 <= v111 + 1) {
    unint64_t v112 = v111 + 1;
  }
  if (v170 - (unint64_t)v168 >= 0x7FFFFFFFFFFFFFF8) {
    uint64_t v113 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v113 = v112;
  }
  if (v113)
  {
    uint64_t v114 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v171 + 16))(v171, 8 * v113, 4);
    v115 = (uint64_t *)(v114 + 8 * v111);
    unint64_t v116 = v114 + 8 * v113;
    if (v114) {
      uint64_t *v115 = (v109 << 32) | 0x2C;
    }
  }
  else
  {
    unint64_t v116 = 0;
    v115 = (uint64_t *)(8 * v111);
  }
  v110 = v115 + 1;
  uint64_t v118 = (uint64_t)v168;
  v117 = v169;
  if (v169 != (uint64_t *)v168)
  {
    unint64_t v119 = (char *)v169 - v168 - 8;
    if (v119 < 0x38)
    {
      v121 = v169;
    }
    else if ((unint64_t)((char *)v169 - (char *)v115) < 0x20)
    {
      v121 = v169;
    }
    else
    {
      uint64_t v120 = (v119 >> 3) + 1;
      v121 = &v169[-(v120 & 0x3FFFFFFFFFFFFFFCLL)];
      v122 = v115 - 2;
      v123 = v169 - 2;
      uint64_t v124 = v120 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v125 = *(_OWORD *)v123;
        *((_OWORD *)v122 - 1) = *((_OWORD *)v123 - 1);
        *(_OWORD *)v122 = v125;
        v122 -= 4;
        v123 -= 4;
        v124 -= 4;
      }
      while (v124);
      v115 -= v120 & 0x3FFFFFFFFFFFFFFCLL;
      if (v120 == (v120 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_171;
      }
    }
    do
    {
      uint64_t v126 = *--v121;
      *--v115 = v126;
    }
    while (v121 != (uint64_t *)v118);
LABEL_171:
    v117 = (uint64_t *)v168;
  }
  unint64_t v127 = v170;
  v168 = (char *)v115;
  unint64_t v170 = v116;
  if (v117) {
    (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(void *)v171 + 40))(v171, v117, v127 - (void)v117);
  }
LABEL_174:
  v169 = v110;
  if ([v167 type] != 4) {
    goto LABEL_207;
  }
  v128 = [v167 waypoint];
  uint64_t v129 = [v128 anchorPointType];
  uint64_t v130 = v129;
  v131 = v169;
  if ((unint64_t)v169 >= v170)
  {
    uint64_t v134 = ((char *)v169 - v168) >> 3;
    unint64_t v135 = v134 + 1;
    if ((unint64_t)(v134 + 1) >> 61) {
      abort();
    }
    uint64_t v136 = v170 - (void)v168;
    if ((uint64_t)(v170 - (void)v168) >> 2 > v135) {
      unint64_t v135 = v136 >> 2;
    }
    if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF8) {
      uint64_t v137 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v137 = v135;
    }
    if (v137)
    {
      uint64_t v138 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v171 + 16))(v171, 8 * v137, 4);
      v139 = (uint64_t *)(v138 + 8 * v134);
      unint64_t v140 = v138 + 8 * v137;
      if (v138)
      {
        uint64_t v141 = 65670;
        if (v130 == 4) {
          uint64_t v141 = 0x100010086;
        }
        uint64_t *v139 = v141;
      }
    }
    else
    {
      unint64_t v140 = 0;
      v139 = (uint64_t *)(8 * v134);
    }
    v133 = v139 + 1;
    uint64_t v143 = (uint64_t)v168;
    v142 = v169;
    if (v169 == (uint64_t *)v168) {
      goto LABEL_204;
    }
    unint64_t v144 = (char *)v169 - v168 - 8;
    if (v144 < 0x38)
    {
      v146 = v169;
    }
    else if ((unint64_t)((char *)v169 - (char *)v139) < 0x20)
    {
      v146 = v169;
    }
    else
    {
      uint64_t v145 = (v144 >> 3) + 1;
      v146 = &v169[-(v145 & 0x3FFFFFFFFFFFFFFCLL)];
      v147 = v139 - 2;
      v148 = v169 - 2;
      uint64_t v149 = v145 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v150 = *(_OWORD *)v148;
        *((_OWORD *)v147 - 1) = *((_OWORD *)v148 - 1);
        *(_OWORD *)v147 = v150;
        v147 -= 4;
        v148 -= 4;
        v149 -= 4;
      }
      while (v149);
      v139 -= v145 & 0x3FFFFFFFFFFFFFFCLL;
      if (v145 == (v145 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_203;
      }
    }
    do
    {
      uint64_t v151 = *--v146;
      *--v139 = v151;
    }
    while (v146 != (uint64_t *)v143);
LABEL_203:
    v142 = (uint64_t *)v168;
LABEL_204:
    unint64_t v152 = v170;
    v168 = (char *)v139;
    unint64_t v170 = v140;
    if (v142) {
      (*(void (**)(uint64_t, uint64_t *, unint64_t))(*(void *)v171 + 40))(v171, v142, v152 - (void)v142);
    }
    goto LABEL_206;
  }
  if (v169)
  {
    uint64_t v132 = 65670;
    if (v129 == 4) {
      uint64_t v132 = 0x100010086;
    }
    uint64_t *v169 = v132;
  }
  v133 = v131 + 1;
LABEL_206:
  v169 = v133;

LABEL_207:
  _ZNSt3__115allocate_sharedB8nn180100I22FeatureStyleAttributesNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a1);
  uint64_t v153 = (uint64_t)v168;
  if ((((char *)v169 - v168) & 0x7FFFFFFF8) != 0)
  {
    uint64_t v154 = 0;
    char v155 = 0;
    uint64_t v156 = *a1;
    uint64_t v157 = ((unint64_t)((char *)v169 - v168) >> 3);
    unsigned __int8 v158 = *(unsigned char *)(*a1 + 33);
    while (1)
    {
      size_t v159 = v158;
      v160 = *(void **)v156;
      if (v158) {
        break;
      }
LABEL_209:
      v160[v159] = *(void *)(v153 + 8 * v154);
      unsigned __int8 v158 = *(unsigned char *)(v156 + 33) + 1;
      *(unsigned char *)(v156 + 33) = v158;
      ++v154;
      char v155 = 1;
      if (v154 == v157)
      {
        v160 = *(void **)v156;
        size_t v159 = v158;
LABEL_226:
        qsort(v160, v159, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
        goto LABEL_227;
      }
    }
    if (v158 > 0x1Fu)
    {
      do
      {
        uint64_t v164 = 0;
        v165 = (int *)v160;
        while (1)
        {
          int v166 = *v165;
          v165 += 2;
          if (v166 == *(_DWORD *)(v153 + 8 * v154)) {
            break;
          }
          if (v158 == ++v164) {
            goto LABEL_220;
          }
        }
        HIDWORD(v160[v164]) = *(_DWORD *)(v153 + 8 * v154 + 4);
LABEL_220:
        ++v154;
      }
      while (v154 != v157);
    }
    else
    {
      do
      {
        uint64_t v161 = 0;
        v162 = (int *)v160;
        while (1)
        {
          int v163 = *v162;
          v162 += 2;
          if (v163 == *(_DWORD *)(v153 + 8 * v154)) {
            break;
          }
          if (v159 == ++v161) {
            goto LABEL_209;
          }
        }
        HIDWORD(v160[v161]) = *(_DWORD *)(v153 + 8 * v154++ + 4);
      }
      while (v154 != v157);
    }
    if (v155) {
      goto LABEL_226;
    }
  }
LABEL_227:

  if (v168) {
    (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v171 + 40))(v171, v168, v170 - (void)v168);
  }
}

void sub_1A2648CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v16);

  if (a11) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a14 + 40))(a14, a11, a13 - a11);
  }

  _Unwind_Resume(a1);
}

id md::WaypointStoreFeatureNode::waypoint(id *this)
{
  return this[16];
}

uint64_t md::WaypointStoreFeatureNode::nodeTypeMask(md::WaypointStoreFeatureNode *this)
{
  if (*((unsigned char *)this + 80) == 2) {
    return 3;
  }
  else {
    return 1;
  }
}

uint64_t md::WaypointStoreFeatureNode::populateNodes(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  if ((result & a3) != 0 && (result & a4) == 0)
  {
    int v10 = (void *)a2[1];
    unint64_t v11 = a2[2];
    if ((unint64_t)v10 < v11)
    {
      if (v10) {
        *int v10 = a1;
      }
      unsigned int v12 = v10 + 1;
LABEL_32:
      a2[1] = (uint64_t)v12;
      return result;
    }
    uint64_t v13 = ((uint64_t)v10 - *a2) >> 3;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      abort();
    }
    uint64_t v15 = v11 - *a2;
    if (v15 >> 2 > v14) {
      unint64_t v14 = v15 >> 2;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    if (v14)
    {
      uint64_t v16 = 8 * v14;
      uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2[3] + 16))(a2[3], 8 * v14, 8);
      uint64_t v17 = (void *)(result + 8 * v13);
      unint64_t v14 = result + v16;
      if (result) {
        *uint64_t v17 = a1;
      }
    }
    else
    {
      uint64_t v17 = (void *)(8 * v13);
    }
    unsigned int v12 = v17 + 1;
    uint64_t v19 = *a2;
    uint64_t v18 = a2[1];
    if (v18 == *a2)
    {
LABEL_30:
      *a2 = (uint64_t)v17;
      a2[1] = (uint64_t)v12;
      uint64_t v28 = a2[2];
      a2[2] = v14;
      if (v18) {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2[3] + 40))(a2[3], v18, v28 - v18);
      }
      goto LABEL_32;
    }
    unint64_t v20 = v18 - *a2 - 8;
    if (v20 < 0x38)
    {
      uint64_t v22 = a2[1];
    }
    else if ((unint64_t)(v18 - (void)v17) < 0x20)
    {
      uint64_t v22 = a2[1];
    }
    else
    {
      uint64_t v21 = (v20 >> 3) + 1;
      uint64_t v22 = v18 - 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v23 = v17 - 2;
      unint64_t v24 = (long long *)(v18 - 16);
      uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v26 = *v24;
        *(v23 - 1) = *(v24 - 1);
        *uint64_t v23 = v26;
        v23 -= 2;
        v24 -= 2;
        v25 -= 4;
      }
      while (v25);
      v17 -= v21 & 0x3FFFFFFFFFFFFFFCLL;
      if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_29;
      }
    }
    do
    {
      uint64_t v27 = *(void *)(v22 - 8);
      v22 -= 8;
      *--uint64_t v17 = v27;
    }
    while (v22 != v19);
LABEL_29:
    uint64_t v18 = *a2;
    goto LABEL_30;
  }
  return result;
}

void md::WaypointStoreFeatureNode::~WaypointStoreFeatureNode(id *this)
{
  *this = &unk_1EF538668;
  uint64_t v2 = (std::__shared_weak_count *)this[12];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;

  *this = &unk_1EF538668;
  uint64_t v2 = (std::__shared_weak_count *)this[12];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t md::WaypointStoreNode::waypoint(md::WaypointStoreNode *this)
{
  return 0;
}

void md::WaypointStore::updateExternalFeatureText(int64x2_t *this, md::LabelExternalPointFeature *a2, VKRouteWaypointInfo *a3)
{
  unint64_t v14 = a2;
  uint64_t v4 = this[3].i64[0];
  for (uint64_t i = this[3].i64[1]; i != v4; i -= 104)
  {
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if ((*(char *)(i - 25) & 0x80000000) == 0)
      {
LABEL_7:
        if ((*(char *)(i - 49) & 0x80000000) == 0) {
          goto LABEL_11;
        }
        goto LABEL_2;
      }
    }
    else if ((*(char *)(i - 25) & 0x80000000) == 0)
    {
      goto LABEL_7;
    }
    operator delete(*(void **)(i - 48));
    if ((*(char *)(i - 49) & 0x80000000) == 0)
    {
LABEL_11:
      if ((*(char *)(i - 73) & 0x80000000) == 0) {
        continue;
      }
      goto LABEL_12;
    }
LABEL_2:
    operator delete(*(void **)(i - 72));
    if ((*(char *)(i - 73) & 0x80000000) == 0) {
      continue;
    }
LABEL_12:
    operator delete(*(void **)(i - 96));
  }
  this[3].i64[1] = v4;
  uint64_t v6 = [(md::LabelExternalPointFeature *)v14 name];

  if (v6)
  {
    id v7 = [(md::LabelExternalPointFeature *)v14 name];
    md::LabelExternalFeature::addTextForZoom(this, 0, 0, (const char *)[v7 UTF8String], 0);
  }
  unint64_t v8 = [(md::LabelExternalPointFeature *)v14 annotationText];

  if (v8)
  {
    id v9 = [(md::LabelExternalPointFeature *)v14 annotationText];
    md::LabelExternalFeature::addTextForZoom(this, 0, 2, (const char *)[v9 UTF8String], 0);
  }
  if ([(md::LabelExternalPointFeature *)v14 type] == 2)
  {
    int v10 = [(md::LabelExternalPointFeature *)v14 annotationText];

    if (!v10)
    {
      unint64_t v11 = v14;
      unsigned int v12 = [(md::LabelExternalPointFeature *)v11 chargeTimeText];

      if (v12)
      {
        id v13 = [(md::LabelExternalPointFeature *)v11 chargeTimeText];
        md::LabelExternalFeature::addTextForZoom(this, 0, 2, (const char *)[v13 UTF8String], 0);
      }
    }
  }
}

void sub_1A2649280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<md::WaypointStore::generateClusters(float)::$_0,std::allocator<md::WaypointStore::generateClusters(float)::$_0>,md::ClusterNode * ()(std::pair<md::ClusterNode *,md::ClusterNode *> &,double)>::operator()()
{
}

void sub_1A2649854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a11) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a14 + 40))(a14, a11, a13 - a11);
  }
  uint64_t v17 = *v15;
  if (*v15)
  {
    v14[19] = v17;
    operator delete(v17);
  }
  void *v14 = &unk_1EF538668;
  uint64_t v18 = (std::__shared_weak_count *)v14[12];
  if (v18)
  {
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  MEMORY[0x1A6239270](v14, 0x10B1C40763AE39BLL);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,SortFeatureNodes(std::vector<md::ClusterNode *,geo::StdAllocator<md::ClusterNode *,mdm::Allocator>> &)::$_0 &,md::ClusterNode **,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  id v9 = (uint64_t *)result;
LABEL_2:
  int v10 = a2 - 1;
  unint64_t v11 = v9;
  while (1)
  {
    id v9 = v11;
    uint64_t v12 = (char *)a2 - (char *)v11;
    uint64_t v13 = a2 - v11;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v81 = *v11;
          if (*(_DWORD *)(*v10 + 104) < *(_DWORD *)(*v11 + 104))
          {
            *unint64_t v11 = *v10;
            *int v10 = v81;
          }
          return result;
        case 3:
          uint64_t v82 = *v11;
          uint64_t v83 = v11[1];
          int v84 = *(_DWORD *)(v83 + 104);
          int v85 = *(_DWORD *)(*v11 + 104);
          uint64_t v86 = *v10;
          int v87 = *(_DWORD *)(*v10 + 104);
          if (v84 >= v85)
          {
            if (v87 < v84)
            {
              v11[1] = v86;
              *int v10 = v83;
              uint64_t v138 = *v11;
              uint64_t v137 = v11[1];
              if (*(_DWORD *)(v137 + 104) < *(_DWORD *)(*v11 + 104))
              {
                *unint64_t v11 = v137;
                v11[1] = v138;
              }
            }
          }
          else
          {
            if (v87 >= v84)
            {
              *unint64_t v11 = v83;
              v11[1] = v82;
              if (*(_DWORD *)(*v10 + 104) >= v85) {
                return result;
              }
              v11[1] = *v10;
            }
            else
            {
              *unint64_t v11 = v86;
            }
            *int v10 = v82;
          }
          return result;
        case 4:
          uint64_t v88 = v11 + 1;
          uint64_t v89 = v11[1];
          v90 = v11 + 2;
          uint64_t v91 = v11[2];
          uint64_t v92 = *v11;
          int v93 = *(_DWORD *)(v89 + 104);
          int v94 = *(_DWORD *)(*v11 + 104);
          int v95 = *(_DWORD *)(v91 + 104);
          if (v93 >= v94)
          {
            if (v95 >= v93) {
              goto LABEL_169;
            }
            *uint64_t v88 = v91;
            uint64_t *v90 = v89;
            v96 = v11;
            unint64_t v97 = v11 + 1;
            uint64_t result = v89;
            if (v95 >= v94) {
              goto LABEL_170;
            }
          }
          else
          {
            v96 = v11;
            unint64_t v97 = v11 + 2;
            uint64_t result = *v11;
            if (v95 >= v93)
            {
              *unint64_t v11 = v89;
              v11[1] = v92;
              v96 = v11 + 1;
              unint64_t v97 = v11 + 2;
              uint64_t result = v92;
              if (v95 >= v94)
              {
LABEL_169:
                uint64_t v89 = v91;
LABEL_170:
                if (*(_DWORD *)(*v10 + 104) < *(_DWORD *)(v89 + 104))
                {
                  uint64_t *v90 = *v10;
                  *int v10 = v89;
                  uint64_t v142 = *v90;
                  uint64_t v143 = *v88;
                  int v144 = *(_DWORD *)(v142 + 104);
                  if (v144 < *(_DWORD *)(v143 + 104))
                  {
                    v11[1] = v142;
                    v11[2] = v143;
                    uint64_t v145 = *v11;
                    if (v144 < *(_DWORD *)(*v11 + 104))
                    {
                      *unint64_t v11 = v142;
                      v11[1] = v145;
                    }
                  }
                }
                return result;
              }
            }
          }
          uint64_t *v96 = v91;
          *unint64_t v97 = v92;
          uint64_t v89 = result;
          goto LABEL_170;
        case 5:
          return (uint64_t)std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,SortFeatureNodes(std::vector<md::ClusterNode *,geo::StdAllocator<md::ClusterNode *,mdm::Allocator>> &)::$_0 &,md::ClusterNode **,0>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if (v12 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v11 != a2)
      {
        int64_t v109 = (unint64_t)(v13 - 2) >> 1;
        int64_t v110 = v109;
        do
        {
          if (v109 >= v110)
          {
            uint64_t v112 = (2 * v110) | 1;
            uint64_t v113 = &v11[v112];
            uint64_t v114 = *v113;
            if (2 * v110 + 2 < v13)
            {
              uint64_t result = *(unsigned int *)(v114 + 104);
              if ((int)result < *(_DWORD *)(v113[1] + 104))
              {
                uint64_t v114 = v113[1];
                ++v113;
                uint64_t v112 = 2 * v110 + 2;
              }
            }
            v115 = &v11[v110];
            uint64_t v116 = *v115;
            int v117 = *(_DWORD *)(*v115 + 104);
            if (*(_DWORD *)(v114 + 104) >= v117)
            {
              do
              {
                uint64_t v118 = v113;
                uint64_t *v115 = v114;
                if (v109 < v112) {
                  break;
                }
                uint64_t result = (2 * v112) | 1;
                uint64_t v113 = &v11[result];
                uint64_t v119 = 2 * v112 + 2;
                uint64_t v114 = *v113;
                if (v119 < v13 && *(_DWORD *)(v114 + 104) < *(_DWORD *)(v113[1] + 104))
                {
                  uint64_t v114 = v113[1];
                  ++v113;
                  uint64_t result = v119;
                }
                v115 = v118;
                uint64_t v112 = result;
              }
              while (*(_DWORD *)(v114 + 104) >= v117);
              *uint64_t v118 = v116;
            }
          }
          BOOL v111 = v110-- <= 0;
        }
        while (!v111);
        uint64_t v120 = (unint64_t)v12 >> 3;
        do
        {
          uint64_t v121 = 0;
          uint64_t v122 = *v11;
          v123 = v11;
          do
          {
            uint64_t v124 = &v123[v121];
            uint64_t v127 = v124[1];
            long long v125 = v124 + 1;
            uint64_t v126 = v127;
            uint64_t v128 = (2 * v121) | 1;
            uint64_t v129 = 2 * v121 + 2;
            if (v129 < v120)
            {
              uint64_t result = *(unsigned int *)(v126 + 104);
              if ((int)result < *(_DWORD *)(v125[1] + 104))
              {
                uint64_t v126 = v125[1];
                ++v125;
                uint64_t v128 = v129;
              }
            }
            uint64_t *v123 = v126;
            v123 = v125;
            uint64_t v121 = v128;
          }
          while (v128 <= (uint64_t)((unint64_t)(v120 - 2) >> 1));
          if (v125 == --a2)
          {
            *long long v125 = v122;
          }
          else
          {
            *long long v125 = *a2;
            *a2 = v122;
            uint64_t v130 = (char *)v125 - (char *)v11 + 8;
            if (v130 >= 9)
            {
              unint64_t v131 = (((unint64_t)v130 >> 3) - 2) >> 1;
              uint64_t v132 = &v11[v131];
              uint64_t v133 = *v132;
              uint64_t v134 = *v125;
              int v135 = *(_DWORD *)(*v125 + 104);
              if (*(_DWORD *)(*v132 + 104) < v135)
              {
                do
                {
                  uint64_t v136 = v132;
                  *long long v125 = v133;
                  if (!v131) {
                    break;
                  }
                  unint64_t v131 = (v131 - 1) >> 1;
                  uint64_t v132 = &v11[v131];
                  uint64_t v133 = *v132;
                  long long v125 = v136;
                }
                while (*(_DWORD *)(*v132 + 104) < v135);
                *uint64_t v136 = v134;
              }
            }
          }
          BOOL v111 = v120-- <= 2;
        }
        while (!v111);
      }
      return result;
    }
    unint64_t v14 = (unint64_t)v13 >> 1;
    uint64_t v15 = &v11[(unint64_t)v13 >> 1];
    uint64_t v16 = *v10;
    int v17 = *(_DWORD *)(*v10 + 104);
    if ((unint64_t)v12 >= 0x401)
    {
      uint64_t v18 = *v15;
      uint64_t v19 = *v11;
      int v20 = *(_DWORD *)(*v15 + 104);
      int v21 = *(_DWORD *)(*v11 + 104);
      if (v20 >= v21)
      {
        if (v17 < v20)
        {
          uint64_t *v15 = v16;
          *int v10 = v18;
          uint64_t v26 = *v11;
          if (*(_DWORD *)(*v15 + 104) < *(_DWORD *)(*v11 + 104))
          {
            *unint64_t v11 = *v15;
            uint64_t *v15 = v26;
          }
        }
      }
      else
      {
        if (v17 < v20)
        {
          *unint64_t v11 = v16;
          goto LABEL_22;
        }
        *unint64_t v11 = v18;
        uint64_t *v15 = v19;
        if (*(_DWORD *)(*v10 + 104) < v21)
        {
          uint64_t *v15 = *v10;
LABEL_22:
          *int v10 = v19;
        }
      }
      uint64_t v28 = &v11[v14];
      uint64_t v31 = *(v28 - 1);
      uint64_t v29 = v28 - 1;
      uint64_t v30 = v31;
      uint64_t v32 = v11[1];
      int v33 = *(_DWORD *)(v31 + 104);
      int v34 = *(_DWORD *)(v32 + 104);
      uint64_t v35 = *(a2 - 2);
      int v36 = *(_DWORD *)(v35 + 104);
      if (v33 >= v34)
      {
        if (v36 < v33)
        {
          *uint64_t v29 = v35;
          *(a2 - 2) = v30;
          uint64_t v37 = v11[1];
          if (*(_DWORD *)(*v29 + 104) < *(_DWORD *)(v37 + 104))
          {
            v11[1] = *v29;
            *uint64_t v29 = v37;
          }
        }
      }
      else
      {
        if (v36 < v33)
        {
          v11[1] = v35;
          goto LABEL_34;
        }
        v11[1] = v30;
        *uint64_t v29 = v32;
        uint64_t v38 = *(a2 - 2);
        if (*(_DWORD *)(v38 + 104) < v34)
        {
          *uint64_t v29 = v38;
LABEL_34:
          *(a2 - 2) = v32;
        }
      }
      uint64_t v39 = &v11[v14];
      uint64_t v42 = v39[1];
      int64x2_t v40 = v39 + 1;
      uint64_t v41 = v42;
      uint64_t v43 = v11[2];
      int v44 = *(_DWORD *)(v42 + 104);
      int v45 = *(_DWORD *)(v43 + 104);
      uint64_t v46 = *(a2 - 3);
      int v47 = *(_DWORD *)(v46 + 104);
      if (v44 >= v45)
      {
        if (v47 < v44)
        {
          *int64x2_t v40 = v46;
          *(a2 - 3) = v41;
          uint64_t v48 = v11[2];
          if (*(_DWORD *)(*v40 + 104) < *(_DWORD *)(v48 + 104))
          {
            v11[2] = *v40;
            *int64x2_t v40 = v48;
          }
        }
      }
      else
      {
        if (v47 < v44)
        {
          v11[2] = v46;
          goto LABEL_43;
        }
        v11[2] = v41;
        *int64x2_t v40 = v43;
        uint64_t v49 = *(a2 - 3);
        if (*(_DWORD *)(v49 + 104) < v45)
        {
          *int64x2_t v40 = v49;
LABEL_43:
          *(a2 - 3) = v43;
        }
      }
      uint64_t v50 = *v15;
      uint64_t v51 = *v29;
      int v52 = *(_DWORD *)(*v15 + 104);
      int v53 = *(_DWORD *)(*v29 + 104);
      uint64_t v54 = *v40;
      int v55 = *(_DWORD *)(*v40 + 104);
      if (v52 >= v53)
      {
        if (v55 >= v52) {
          goto LABEL_51;
        }
        uint64_t *v15 = v54;
        *int64x2_t v40 = v50;
        int64x2_t v40 = v15;
        uint64_t v50 = v51;
        if (v55 >= v53)
        {
          uint64_t v50 = v54;
          goto LABEL_51;
        }
      }
      else if (v55 >= v52)
      {
        *uint64_t v29 = v50;
        uint64_t *v15 = v51;
        uint64_t v29 = v15;
        uint64_t v50 = v54;
        if (v55 >= v53)
        {
          uint64_t v50 = v51;
LABEL_51:
          uint64_t v56 = *v11;
          *unint64_t v11 = v50;
          uint64_t *v15 = v56;
          goto LABEL_52;
        }
      }
      *uint64_t v29 = v54;
      *int64x2_t v40 = v51;
      goto LABEL_51;
    }
    uint64_t v22 = *v11;
    uint64_t v23 = *v15;
    int v24 = *(_DWORD *)(*v11 + 104);
    int v25 = *(_DWORD *)(*v15 + 104);
    if (v24 >= v25)
    {
      if (v17 < v24)
      {
        *unint64_t v11 = v16;
        *int v10 = v22;
        uint64_t v27 = *v15;
        if (*(_DWORD *)(*v11 + 104) < *(_DWORD *)(*v15 + 104))
        {
          uint64_t *v15 = *v11;
          *unint64_t v11 = v27;
        }
      }
      goto LABEL_52;
    }
    if (v17 < v24)
    {
      uint64_t *v15 = v16;
LABEL_31:
      *int v10 = v23;
      goto LABEL_52;
    }
    uint64_t *v15 = v22;
    *unint64_t v11 = v23;
    if (*(_DWORD *)(*v10 + 104) < v25)
    {
      *unint64_t v11 = *v10;
      goto LABEL_31;
    }
LABEL_52:
    --a3;
    uint64_t v57 = *v11;
    if (a4)
    {
      int v58 = *(_DWORD *)(v57 + 104);
LABEL_55:
      long long v59 = v11;
      do
      {
        uint64_t v60 = v59;
        uint64_t v62 = v59[1];
        ++v59;
        uint64_t v61 = v62;
      }
      while (*(_DWORD *)(v62 + 104) < v58);
      unint64_t v63 = a2;
      if (v60 == v11)
      {
        unint64_t v63 = a2;
        do
        {
          if (v59 >= v63) {
            break;
          }
          uint64_t v65 = *--v63;
        }
        while (*(_DWORD *)(v65 + 104) >= v58);
      }
      else
      {
        do
          uint64_t v64 = *--v63;
        while (*(_DWORD *)(v64 + 104) >= v58);
      }
      if (v59 < v63)
      {
        uint64_t v66 = *v63;
        int8x16_t v67 = v59;
        uint64_t v68 = v63;
        do
        {
          *int8x16_t v67 = v66;
          *uint64_t v68 = v61;
          do
          {
            uint64_t v60 = v67;
            uint64_t v69 = v67[1];
            ++v67;
            uint64_t v61 = v69;
          }
          while (*(_DWORD *)(v69 + 104) < v58);
          do
          {
            uint64_t v70 = *--v68;
            uint64_t v66 = v70;
          }
          while (*(_DWORD *)(v70 + 104) >= v58);
        }
        while (v67 < v68);
      }
      if (v60 != v11) {
        *unint64_t v11 = *v60;
      }
      *uint64_t v60 = v57;
      if (v59 < v63) {
        goto LABEL_74;
      }
      BOOL v71 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,SortFeatureNodes(std::vector<md::ClusterNode *,geo::StdAllocator<md::ClusterNode *,mdm::Allocator>> &)::$_0 &,md::ClusterNode **>(v11, v60);
      unint64_t v11 = v60 + 1;
      uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,SortFeatureNodes(std::vector<md::ClusterNode *,geo::StdAllocator<md::ClusterNode *,mdm::Allocator>> &)::$_0 &,md::ClusterNode **>(v60 + 1, a2);
      if (result)
      {
        a2 = v60;
        if (v71) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v71)
      {
LABEL_74:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,SortFeatureNodes(std::vector<md::ClusterNode *,geo::StdAllocator<md::ClusterNode *,mdm::Allocator>> &)::$_0 &,md::ClusterNode **,false>(v9, v60, a3, a4 & 1);
        a4 = 0;
        unint64_t v11 = v60 + 1;
      }
    }
    else
    {
      int v58 = *(_DWORD *)(v57 + 104);
      if (*(_DWORD *)(*(v11 - 1) + 104) < v58) {
        goto LABEL_55;
      }
      if (v58 < *(_DWORD *)(*v10 + 104))
      {
        do
        {
          uint64_t v72 = v11[1];
          ++v11;
        }
        while (v58 >= *(_DWORD *)(v72 + 104));
      }
      else
      {
        unint64_t v73 = v11 + 1;
        do
        {
          unint64_t v11 = v73;
          if (v73 >= a2) {
            break;
          }
          ++v73;
        }
        while (v58 >= *(_DWORD *)(*v11 + 104));
      }
      uint64_t v74 = a2;
      if (v11 < a2)
      {
        uint64_t v74 = a2;
        do
          uint64_t v75 = *--v74;
        while (v58 < *(_DWORD *)(v75 + 104));
      }
      if (v11 < v74)
      {
        uint64_t v76 = *v11;
        uint64_t v77 = *v74;
        do
        {
          *unint64_t v11 = v77;
          *uint64_t v74 = v76;
          do
          {
            uint64_t v78 = v11[1];
            ++v11;
            uint64_t v76 = v78;
          }
          while (v58 >= *(_DWORD *)(v78 + 104));
          do
          {
            uint64_t v79 = *--v74;
            uint64_t v77 = v79;
          }
          while (v58 < *(_DWORD *)(v79 + 104));
        }
        while (v11 < v74);
      }
      uint64_t v80 = v11 - 1;
      BOOL v4 = v11 - 1 >= v9;
      BOOL v5 = v11 - 1 == v9;
      if (v11 - 1 != v9) {
        *id v9 = *v80;
      }
      a4 = 0;
      *uint64_t v80 = v57;
    }
  }
  v98 = v11 + 1;
  BOOL v100 = v11 == a2 || v98 == a2;
  if (a4)
  {
    if (!v100)
    {
      uint64_t v101 = 8;
      v102 = v11;
      do
      {
        uint64_t v105 = *v102;
        uint64_t v104 = v102[1];
        v102 = v98;
        int v106 = *(_DWORD *)(v104 + 104);
        if (v106 < *(_DWORD *)(v105 + 104))
        {
          uint64_t v107 = v101;
          do
          {
            *(uint64_t *)((char *)v11 + v107) = v105;
            uint64_t v108 = v107 - 8;
            if (v107 == 8)
            {
              v103 = v11;
              goto LABEL_118;
            }
            uint64_t v105 = *(uint64_t *)((char *)v11 + v107 - 16);
            v107 -= 8;
          }
          while (v106 < *(_DWORD *)(v105 + 104));
          v103 = (uint64_t *)((char *)v11 + v108);
LABEL_118:
          uint64_t *v103 = v104;
        }
        v98 = v102 + 1;
        v101 += 8;
      }
      while (v102 + 1 != a2);
    }
  }
  else if (!v100)
  {
    do
    {
      uint64_t v140 = *v9;
      uint64_t v139 = v9[1];
      id v9 = v98;
      int v141 = *(_DWORD *)(v139 + 104);
      if (v141 < *(_DWORD *)(v140 + 104))
      {
        do
        {
          uint64_t *v98 = v140;
          uint64_t v140 = *(v98 - 2);
          --v98;
        }
        while (v141 < *(_DWORD *)(v140 + 104));
        uint64_t *v98 = v139;
      }
      v98 = v9 + 1;
    }
    while (v9 + 1 != a2);
  }
  return result;
}

uint64_t *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,SortFeatureNodes(std::vector<md::ClusterNode *,geo::StdAllocator<md::ClusterNode *,mdm::Allocator>> &)::$_0 &,md::ClusterNode **,0>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *result;
  int v7 = *(_DWORD *)(*a2 + 104);
  int v8 = *(_DWORD *)(*result + 104);
  uint64_t v9 = *a3;
  int v10 = *(_DWORD *)(*a3 + 104);
  if (v7 >= v8)
  {
    if (v10 >= v7)
    {
      uint64_t v5 = *a3;
    }
    else
    {
      *a2 = v9;
      *a3 = v5;
      uint64_t v11 = *result;
      if (*(_DWORD *)(*a2 + 104) < *(_DWORD *)(*result + 104))
      {
        *uint64_t result = *a2;
        *a2 = v11;
        uint64_t v5 = *a3;
      }
    }
  }
  else
  {
    if (v10 < v7)
    {
      *uint64_t result = v9;
LABEL_9:
      *a3 = v6;
      uint64_t v5 = v6;
      goto LABEL_11;
    }
    *uint64_t result = v5;
    *a2 = v6;
    uint64_t v5 = *a3;
    if (*(_DWORD *)(*a3 + 104) < v8)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(_DWORD *)(*a4 + 104) < *(_DWORD *)(v5 + 104))
  {
    *a3 = *a4;
    *a4 = v5;
    uint64_t v12 = *a2;
    if (*(_DWORD *)(*a3 + 104) < *(_DWORD *)(*a2 + 104))
    {
      *a2 = *a3;
      *a3 = v12;
      uint64_t v13 = *result;
      if (*(_DWORD *)(*a2 + 104) < *(_DWORD *)(*result + 104))
      {
        *uint64_t result = *a2;
        *a2 = v13;
      }
    }
  }
  uint64_t v14 = *a4;
  if (*(_DWORD *)(*a5 + 104) < *(_DWORD *)(*a4 + 104))
  {
    *a4 = *a5;
    *a5 = v14;
    uint64_t v15 = *a3;
    if (*(_DWORD *)(*a4 + 104) < *(_DWORD *)(*a3 + 104))
    {
      *a3 = *a4;
      *a4 = v15;
      uint64_t v16 = *a2;
      if (*(_DWORD *)(*a3 + 104) < *(_DWORD *)(*a2 + 104))
      {
        *a2 = *a3;
        *a3 = v16;
        uint64_t v17 = *result;
        if (*(_DWORD *)(*a2 + 104) < *(_DWORD *)(*result + 104))
        {
          *uint64_t result = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,SortFeatureNodes(std::vector<md::ClusterNode *,geo::StdAllocator<md::ClusterNode *,mdm::Allocator>> &)::$_0 &,md::ClusterNode **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      uint64_t v3 = *(a2 - 1);
      uint64_t v4 = *a1;
      if (*(_DWORD *)(v3 + 104) < *(_DWORD *)(*a1 + 104))
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      uint64_t v14 = *a1;
      uint64_t v15 = a1[1];
      int v16 = *(_DWORD *)(v15 + 104);
      int v17 = *(_DWORD *)(*a1 + 104);
      uint64_t v18 = *(a2 - 1);
      int v19 = *(_DWORD *)(v18 + 104);
      if (v16 >= v17)
      {
        if (v19 < v16)
        {
          a1[1] = v18;
          *(a2 - 1) = v15;
          uint64_t v41 = *a1;
          uint64_t v40 = a1[1];
          if (*(_DWORD *)(v40 + 104) < *(_DWORD *)(*a1 + 104))
          {
            *a1 = v40;
            a1[1] = v41;
          }
        }
      }
      else
      {
        if (v19 >= v16)
        {
          *a1 = v15;
          a1[1] = v14;
          uint64_t v47 = *(a2 - 1);
          if (*(_DWORD *)(v47 + 104) >= v17) {
            return 1;
          }
          a1[1] = v47;
        }
        else
        {
          *a1 = v18;
        }
        *(a2 - 1) = v14;
      }
      return 1;
    case 4:
      int v20 = a1 + 1;
      uint64_t v21 = a1[1];
      uint64_t v22 = a1 + 2;
      uint64_t v23 = a1[2];
      uint64_t v24 = *a1;
      int v25 = *(_DWORD *)(v21 + 104);
      int v26 = *(_DWORD *)(*a1 + 104);
      int v27 = *(_DWORD *)(v23 + 104);
      if (v25 < v26)
      {
        uint64_t v28 = a1;
        uint64_t v29 = a1 + 2;
        uint64_t v30 = *a1;
        if (v27 >= v25)
        {
          *a1 = v21;
          a1[1] = v24;
          uint64_t v28 = a1 + 1;
          uint64_t v29 = a1 + 2;
          uint64_t v30 = v24;
          if (v27 >= v26) {
            goto LABEL_35;
          }
        }
LABEL_34:
        *uint64_t v28 = v23;
        *uint64_t v29 = v24;
        uint64_t v21 = v30;
        goto LABEL_36;
      }
      if (v27 < v25)
      {
        *int v20 = v23;
        uint64_t *v22 = v21;
        uint64_t v28 = a1;
        uint64_t v29 = a1 + 1;
        uint64_t v30 = v21;
        if (v27 >= v26) {
          goto LABEL_36;
        }
        goto LABEL_34;
      }
LABEL_35:
      uint64_t v21 = v23;
LABEL_36:
      uint64_t v42 = *(a2 - 1);
      if (*(_DWORD *)(v42 + 104) < *(_DWORD *)(v21 + 104))
      {
        uint64_t *v22 = v42;
        *(a2 - 1) = v21;
        uint64_t v43 = *v22;
        uint64_t v44 = *v20;
        int v45 = *(_DWORD *)(v43 + 104);
        if (v45 < *(_DWORD *)(v44 + 104))
        {
          a1[1] = v43;
          a1[2] = v44;
          uint64_t v46 = *a1;
          if (v45 < *(_DWORD *)(*a1 + 104))
          {
            *a1 = v43;
            a1[1] = v46;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,SortFeatureNodes(std::vector<md::ClusterNode *,geo::StdAllocator<md::ClusterNode *,mdm::Allocator>> &)::$_0 &,md::ClusterNode **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v6 = a1 + 2;
      uint64_t v5 = a1[2];
      uint64_t v7 = a1[1];
      uint64_t v8 = *a1;
      int v9 = *(_DWORD *)(v7 + 104);
      int v10 = *(_DWORD *)(*a1 + 104);
      int v11 = *(_DWORD *)(v5 + 104);
      if (v9 >= v10)
      {
        if (v11 >= v9) {
          goto LABEL_19;
        }
        a1[1] = v5;
        *uint64_t v6 = v7;
        uint64_t v12 = a1;
        uint64_t v13 = a1 + 1;
      }
      else
      {
        uint64_t v12 = a1;
        uint64_t v13 = a1 + 2;
        if (v11 < v9) {
          goto LABEL_18;
        }
        *a1 = v7;
        a1[1] = v8;
        uint64_t v12 = a1 + 1;
        uint64_t v13 = a1 + 2;
      }
      if (v11 >= v10) {
        goto LABEL_19;
      }
LABEL_18:
      uint64_t *v12 = v5;
      uint64_t *v13 = v8;
LABEL_19:
      uint64_t v31 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v32 = 0;
      for (uint64_t i = 24; ; i += 8)
      {
        uint64_t v35 = *v31;
        uint64_t v36 = *v6;
        int v37 = *(_DWORD *)(*v31 + 104);
        if (v37 < *(_DWORD *)(v36 + 104))
        {
          uint64_t v38 = i;
          do
          {
            *(uint64_t *)((char *)a1 + v38) = v36;
            uint64_t v39 = v38 - 8;
            if (v38 == 8)
            {
              int v34 = a1;
              goto LABEL_22;
            }
            uint64_t v36 = *(uint64_t *)((char *)a1 + v38 - 16);
            v38 -= 8;
          }
          while (v37 < *(_DWORD *)(v36 + 104));
          int v34 = (uint64_t *)((char *)a1 + v39);
LABEL_22:
          uint64_t *v34 = v35;
          if (++v32 == 8) {
            break;
          }
        }
        uint64_t v6 = v31++;
        if (v31 == a2) {
          return 1;
        }
      }
      return v31 + 1 == a2;
  }
}

uint64_t md::WaypointStoreClusterNode::waypoint(md::WaypointStoreClusterNode *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 21) + 88))();
}

uint64_t md::WaypointStoreClusterNode::setupClusterNode(md::WaypointStoreClusterNode *this, char a2, float a3)
{
  *((unsigned char *)this + 80) = 1;
  *((unsigned char *)this + 188) = a2;
  *((float *)this + 3) = a3;
  md::WaypointStoreClusterNode::updateDescendantNode(this, *((md::WaypointStoreNode **)this + 16));
  uint64_t v4 = (md::WaypointStoreNode *)*((void *)this + 17);
  return md::WaypointStoreClusterNode::updateDescendantNode(this, v4);
}

uint64_t md::WaypointStoreClusterNode::updateDescendantNode(md::WaypointStoreClusterNode *this, md::WaypointStoreNode *a2)
{
  *((_DWORD *)a2 + 2) = *((_DWORD *)this + 3);
  *((void *)a2 + 9) = this;
  if (*((unsigned char *)a2 + 80) == 1)
  {
    if (((*(uint64_t (**)(md::WaypointStoreNode *))(*(void *)a2 + 32))(a2) & 1) == 0) {
      *((_DWORD *)this + 46) += *((_DWORD *)a2 + 46);
    }
LABEL_8:
    if (!*((unsigned char *)a2 + 116)) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  if (*((unsigned char *)a2 + 80)) {
    goto LABEL_8;
  }
  if ((*(uint64_t (**)(md::WaypointStoreNode *))(*(void *)a2 + 32))(a2))
  {
    ++*((_DWORD *)this + 46);
    if (*((unsigned char *)this + 188)) {
      char v5 = 2;
    }
    else {
      char v5 = 1;
    }
    *((unsigned char *)a2 + 80) = v5;
    if (!*((unsigned char *)a2 + 116)) {
      goto LABEL_15;
    }
  }
  else
  {
    *((unsigned char *)a2 + 80) = 2;
    md::WaypointStoreClusterNode::updateDescendantNode(this, *((md::WaypointStoreNode **)a2 + 16));
    md::WaypointStoreClusterNode::updateDescendantNode(this, *((md::WaypointStoreNode **)a2 + 17));
    if (!*((unsigned char *)a2 + 116)) {
      goto LABEL_15;
    }
  }
LABEL_9:
  if (!*((unsigned char *)this + 116))
  {
    int v4 = *((_DWORD *)a2 + 28);
    *((unsigned char *)this + 116) = *((unsigned char *)a2 + 116);
    *((_DWORD *)this + 28) = v4;
  }
LABEL_15:
  if (*((unsigned char *)a2 + 124) && !*((unsigned char *)this + 124))
  {
    int v6 = *((_DWORD *)a2 + 30);
    *((unsigned char *)this + 124) = *((unsigned char *)a2 + 124);
    *((_DWORD *)this + 30) = v6;
  }
  uint64_t result = (*(uint64_t (**)(md::WaypointStoreNode *))(*(void *)a2 + 32))(a2);
  if (result)
  {
    uint64_t v10 = *((void *)this + 21);
    if (!v10 || *(_DWORD *)(v10 + 104) > *((_DWORD *)a2 + 26)) {
      *((void *)this + 21) = a2;
    }
  }
  else
  {
    uint64_t v8 = *((void *)a2 + 21);
    uint64_t v9 = *((void *)this + 21);
    if (!v9 || v8 && *(_DWORD *)(v9 + 104) > *(_DWORD *)(v8 + 104)) {
      *((void *)this + 21) = v8;
    }
  }
  return result;
}

double md::WaypointStoreClusterNode::distance(md::WaypointStoreClusterNode *this)
{
  return *((double *)this + 22);
}

uint64_t md::WaypointStoreClusterNode::nodeTypeMask(md::WaypointStoreClusterNode *this)
{
  if (*((unsigned char *)this + 80) == 2) {
    return 20;
  }
  if (*((unsigned char *)this + 188)) {
    return 12;
  }
  return 4;
}

uint64_t md::WaypointStoreClusterNode::populateNodes(void **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v8 = ((uint64_t (*)(void **))(*a1)[4])(a1);
  if ((v8 & a3) != 0 && (v8 & a4) == 0)
  {
    uint64_t v10 = (void *)a2[1];
    unint64_t v11 = a2[2];
    if ((unint64_t)v10 < v11)
    {
      if (v10) {
        *uint64_t v10 = a1;
      }
      uint64_t v12 = v10 + 1;
LABEL_32:
      a2[1] = (uint64_t)v12;
      goto LABEL_33;
    }
    uint64_t v13 = ((uint64_t)v10 - *a2) >> 3;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      abort();
    }
    uint64_t v15 = v11 - *a2;
    if (v15 >> 2 > v14) {
      unint64_t v14 = v15 >> 2;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    if (v14)
    {
      uint64_t v16 = 8 * v14;
      uint64_t v17 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2[3] + 16))(a2[3], 8 * v14, 8);
      uint64_t v18 = (void *)(v17 + 8 * v13);
      unint64_t v14 = v17 + v16;
      if (v17) {
        void *v18 = a1;
      }
    }
    else
    {
      uint64_t v18 = (void *)(8 * v13);
    }
    uint64_t v12 = v18 + 1;
    uint64_t v20 = *a2;
    uint64_t v19 = a2[1];
    if (v19 == *a2)
    {
LABEL_30:
      *a2 = (uint64_t)v18;
      a2[1] = (uint64_t)v12;
      uint64_t v29 = a2[2];
      a2[2] = v14;
      if (v19) {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2[3] + 40))(a2[3], v19, v29 - v19);
      }
      goto LABEL_32;
    }
    unint64_t v21 = v19 - *a2 - 8;
    if (v21 < 0x38)
    {
      uint64_t v23 = a2[1];
    }
    else if ((unint64_t)(v19 - (void)v18) < 0x20)
    {
      uint64_t v23 = a2[1];
    }
    else
    {
      uint64_t v22 = (v21 >> 3) + 1;
      uint64_t v23 = v19 - 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v24 = v18 - 2;
      int v25 = (long long *)(v19 - 16);
      uint64_t v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v27 = *v25;
        *(v24 - 1) = *(v25 - 1);
        *uint64_t v24 = v27;
        v24 -= 2;
        v25 -= 2;
        v26 -= 4;
      }
      while (v26);
      v18 -= v22 & 0x3FFFFFFFFFFFFFFCLL;
      if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_29;
      }
    }
    do
    {
      uint64_t v28 = *(void *)(v23 - 8);
      v23 -= 8;
      *--uint64_t v18 = v28;
    }
    while (v23 != v20);
LABEL_29:
    uint64_t v19 = *a2;
    goto LABEL_30;
  }
LABEL_33:
  (*(void (**)(void *, uint64_t *, uint64_t, uint64_t))(*a1[16] + 24))(a1[16], a2, a3, a4);
  uint64_t v30 = *(uint64_t (**)(void))(*a1[17] + 24);
  return v30();
}

uint64_t md::WaypointStoreClusterNode::populateChildNodes(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 128) + 24))(*(void *)(a1 + 128));
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(a1 + 136) + 24);
  return v2();
}

void md::WaypointStoreClusterNode::~WaypointStoreClusterNode(md::WaypointStoreClusterNode *this)
{
  *(void *)this = &unk_1EF546050;
  uint64_t v2 = (void *)*((void *)this + 18);
  if (v2)
  {
    *((void *)this + 19) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1EF538668;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1EF546050;
  uint64_t v2 = (void *)*((void *)this + 18);
  if (v2)
  {
    *((void *)this + 19) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1EF538668;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t std::__function::__func<md::WaypointStore::generateClusters(float)::$_0,std::allocator<md::WaypointStore::generateClusters(float)::$_0>,md::ClusterNode * ()(std::pair<md::ClusterNode *,md::ClusterNode *> &,double)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF570770;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::WaypointStore::generateClusters(float)::$_0,std::allocator<md::WaypointStore::generateClusters(float)::$_0>,md::ClusterNode * ()(std::pair<md::ClusterNode *,md::ClusterNode *> &,double)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF570770;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::WaypointStore::generateClusters(float)::$_0,std::allocator<md::WaypointStore::generateClusters(float)::$_0>,md::ClusterNode * ()(std::pair<md::ClusterNode *,md::ClusterNode *> &,double)>::~__func()
{
}

void non-virtual thunk to'ggl::DaVinci::RibbonMesh::~RibbonMesh(ggl::DaVinci::RibbonMesh *this)
{
  ggl::Mesh::~Mesh((ggl::DaVinci::RibbonMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::DaVinci::RibbonMesh *)((char *)this - 16));
}

void ggl::DaVinci::RibbonMesh::~RibbonMesh(ggl::DaVinci::RibbonMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::DaVinci::RibbonVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::DaVinci::RibbonVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

void md::PolygonSectionRound::~PolygonSectionRound(md::PolygonSectionRound *this)
{
  md::PolygonSectionRound::~PolygonSectionRound(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  *(void *)this = &unk_1EF53C128;
  uint64_t v2 = *((void *)this + 21);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 22);
    int v4 = (void *)*((void *)this + 21);
    if (v3 != v2)
    {
      char v5 = *((void *)this + 22);
      do
      {
        uint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        int v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      int v4 = (void *)*((void *)this + 21);
    }
    *((void *)this + 22) = v2;
    operator delete(v4);
  }
  int v8 = (void *)*((void *)this + 18);
  if (v8)
  {
    *((void *)this + 19) = v8;
    operator delete(v8);
  }
  *(void *)this = &unk_1EF534428;
  uint64_t v9 = (void *)*((void *)this + 14);
  if (v9)
  {
    *((void *)this + 15) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 8);
  if (v10) {
    operator delete(v10);
  }
  unint64_t v11 = (void *)*((void *)this + 5);
  if (v11)
  {
    *((void *)this + 6) = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 2);
  if (v12)
  {
    *((void *)this + 3) = v12;
    operator delete(v12);
  }
}

void *md::PolygonSectionRound::PolygonSectionRound(uint64_t a1, void *a2, unint64_t a3, float *a4)
{
  int v4 = (void *)a1;
  uint64_t v295 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)(a1 + 8) = 0u;
  v265 = (void *)(a1 + 8);
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)a1 = &unk_1EF53C128;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  v274 = (std::vector<unsigned int>::size_type *)(a1 + 192);
  v275 = (void **)(a1 + 144);
  char v5 = geo::codec::multiSectionFeaturePoints(a2, a3, (void *)(a1 + 192));
  std::vector<unsigned int>::size_type v6 = *v274;
  v289 = v4;
  if (*v274)
  {
    uint64_t v7 = v5;
    uint64_t v8 = 0;
    v269 = v5;
    std::vector<unsigned int>::size_type v272 = v6 - 1;
    std::vector<unsigned int>::size_type v280 = *v274;
    do
    {
      uint64_t v10 = v8 + 1;
      if (v8 + 1 == v6) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = v8 + 1;
      }
      uint64_t v12 = (float *)&v7[v8];
      float v13 = *v12;
      if (*v12 == 1.0 || v13 == 0.0 || (float v14 = v12[1], v14 == 1.0) || v14 == 0.0)
      {
        int v53 = (char *)v289[19];
        unint64_t v52 = v289[20];
        if ((unint64_t)v53 >= v52)
        {
          int v55 = (char *)*v275;
          uint64_t v56 = v53 - (unsigned char *)*v275;
          uint64_t v57 = v56 >> 3;
          unint64_t v58 = (v56 >> 3) + 1;
          if (v58 >> 61) {
            goto LABEL_374;
          }
          uint64_t v59 = v10;
          uint64_t v60 = v52 - (void)v55;
          if (v60 >> 2 > v58) {
            unint64_t v58 = v60 >> 2;
          }
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v61 = v58;
          }
          if (v61)
          {
            if (v61 >> 61) {
              goto LABEL_370;
            }
            uint64_t v62 = operator new(8 * v61);
            std::vector<unsigned int>::size_type v6 = v280;
          }
          else
          {
            uint64_t v62 = 0;
          }
          unint64_t v63 = &v62[8 * v57];
          *unint64_t v63 = *(void *)v12;
          uint64_t v54 = v63 + 1;
          if (v53 == v55)
          {
            int v55 = v53;
          }
          else
          {
            unint64_t v64 = v53 - 8 - v55;
            if (v64 < 0x58) {
              goto LABEL_380;
            }
            if ((unint64_t)(v53 - &v62[v56]) < 0x20) {
              goto LABEL_380;
            }
            uint64_t v65 = (v64 >> 3) + 1;
            uint64_t v66 = &v62[8 * v57 - 16];
            int8x16_t v67 = v53 - 16;
            uint64_t v68 = v65 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v69 = *(_OWORD *)v67;
              *(v66 - 1) = *((_OWORD *)v67 - 1);
              *uint64_t v66 = v69;
              v66 -= 2;
              v67 -= 32;
              v68 -= 4;
            }
            while (v68);
            v63 -= v65 & 0x3FFFFFFFFFFFFFFCLL;
            v53 -= 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
            if (v65 != (v65 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_380:
              do
              {
                uint64_t v70 = *((void *)v53 - 1);
                v53 -= 8;
                *--unint64_t v63 = v70;
              }
              while (v53 != v55);
              int v55 = (char *)*v275;
            }
          }
          v289[18] = v63;
          v289[19] = v54;
          v289[20] = &v62[8 * v61];
          if (v55) {
            operator delete(v55);
          }
          uint64_t v10 = v59;
        }
        else
        {
          *(void *)int v53 = *(void *)v12;
          uint64_t v54 = v53 + 8;
        }
        v289[19] = v54;
        int v71 = (((unint64_t)v54 - v289[18]) >> 3) - 1;
        LODWORD(__x.__begin_) = v71;
        unint64_t v73 = (void *)v289[22];
        unint64_t v72 = v289[23];
        if ((unint64_t)v73 >= v72)
        {
          uint64_t v76 = v10;
          uint64_t v77 = (void *)v289[21];
          unint64_t v78 = 0xAAAAAAAAAAAAAAABLL * (v73 - v77) + 1;
          if (v78 > 0xAAAAAAAAAAAAAAALL) {
LABEL_374:
          }
            abort();
          unint64_t v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - (void)v77) >> 3);
          if (2 * v79 > v78) {
            unint64_t v78 = 2 * v79;
          }
          if (v79 >= 0x555555555555555) {
            unint64_t v80 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v80 = v78;
          }
          if (v80)
          {
            if (v80 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_370;
            }
            uint64_t v81 = (char *)operator new(24 * v80);
          }
          else
          {
            uint64_t v81 = 0;
          }
          uint64_t v82 = &v81[8 * (v73 - v77)];
          *(void *)uint64_t v82 = 0;
          *((void *)v82 + 1) = 0;
          *((void *)v82 + 2) = 0;
          uint64_t v83 = operator new(4uLL);
          int v84 = &v81[24 * v80];
          *(void *)uint64_t v82 = v83;
          uint64_t v75 = v82 + 24;
          _DWORD *v83 = __x.__begin_;
          *(int64x2_t *)(v82 + 8) = vdupq_n_s64((unint64_t)(v83 + 1));
          if (v73 == v77)
          {
            v289[21] = v82;
            v289[22] = v75;
            v289[23] = v84;
            std::vector<unsigned int>::size_type v6 = v280;
            uint64_t v10 = v76;
          }
          else
          {
            std::vector<unsigned int>::size_type v6 = v280;
            do
            {
              int v85 = v82;
              *((void *)v82 - 2) = 0;
              *((void *)v82 - 1) = 0;
              long long v86 = *(_OWORD *)(v73 - 3);
              v73 -= 3;
              *(_OWORD *)(v82 - 24) = v86;
              v82 -= 24;
              *((void *)v85 - 1) = v73[2];
              *unint64_t v73 = 0;
              v73[1] = 0;
              v73[2] = 0;
            }
            while (v73 != v77);
            unint64_t v73 = (void *)v289[21];
            int v87 = (void *)v289[22];
            v289[21] = v82;
            v289[22] = v75;
            v289[23] = v84;
            uint64_t v10 = v76;
            if (v87 != v73)
            {
              uint64_t v88 = v87;
              do
              {
                v90 = (void *)*(v88 - 3);
                v88 -= 3;
                uint64_t v89 = v90;
                if (v90)
                {
                  *(v87 - 2) = v89;
                  operator delete(v89);
                }
                int v87 = v88;
              }
              while (v88 != v73);
            }
          }
          if (v73) {
            operator delete(v73);
          }
          uint64_t v9 = v289;
        }
        else
        {
          *unint64_t v73 = 0;
          v73[1] = 0;
          v73[2] = 0;
          uint64_t v74 = operator new(4uLL);
          *unint64_t v73 = v74;
          *v74++ = v71;
          v73[1] = v74;
          v73[2] = v74;
          uint64_t v75 = v73 + 3;
          uint64_t v9 = v289;
          v289[22] = v73 + 3;
        }
        v9[22] = v75;
        int v4 = v9;
      }
      else
      {
        uint64_t v278 = v8 + 1;
        __x.__begin_ = (std::vector<unsigned int>::pointer)v7[(v272 + v8) % v6];
        __x.__end_ = (std::vector<unsigned int>::pointer)__PAIR64__(LODWORD(v14), LODWORD(v13));
        __x.__end_cap_.__value_ = (unsigned int *)v7[v11];
        md::PolygonRound::smoothTwoSegments((float **)&__p, a4, (float *)&__x);
        uint64_t v15 = (uint64_t *)__p;
        v284 = v291;
        if (__p != v291)
        {
          uint64_t v16 = 0;
          uint64_t v17 = 0;
          uint64_t v18 = 0;
          int v4 = v289;
          while (1)
          {
            unint64_t v21 = (char *)v4[19];
            unint64_t v20 = v4[20];
            if ((unint64_t)v21 >= v20)
            {
              uint64_t v23 = (char *)*v275;
              uint64_t v24 = v21 - (unsigned char *)*v275;
              uint64_t v25 = v24 >> 3;
              unint64_t v26 = (v24 >> 3) + 1;
              if (v26 >> 61) {
                abort();
              }
              uint64_t v27 = v20 - (void)v23;
              if (v27 >> 2 > v26) {
                unint64_t v26 = v27 >> 2;
              }
              unint64_t v28 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v26;
              if (v28)
              {
                if (v28 >> 61) {
                  goto LABEL_370;
                }
                uint64_t v29 = operator new(8 * v28);
              }
              else
              {
                uint64_t v29 = 0;
              }
              uint64_t v30 = (uint64_t *)&v29[8 * v25];
              *uint64_t v30 = *v15;
              uint64_t v22 = v30 + 1;
              if (v21 == v23)
              {
                uint64_t v23 = v21;
              }
              else
              {
                unint64_t v31 = v21 - 8 - v23;
                if (v31 < 0x58) {
                  goto LABEL_381;
                }
                if ((unint64_t)(v21 - &v29[v24]) < 0x20) {
                  goto LABEL_381;
                }
                uint64_t v32 = (v31 >> 3) + 1;
                int v33 = &v29[8 * v25 - 16];
                int v34 = v21 - 16;
                uint64_t v35 = v32 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v36 = *(_OWORD *)v34;
                  *(v33 - 1) = *((_OWORD *)v34 - 1);
                  *int v33 = v36;
                  v33 -= 2;
                  v34 -= 32;
                  v35 -= 4;
                }
                while (v35);
                v30 -= v32 & 0x3FFFFFFFFFFFFFFCLL;
                v21 -= 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
                if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_381:
                  do
                  {
                    uint64_t v37 = *((void *)v21 - 1);
                    v21 -= 8;
                    *--uint64_t v30 = v37;
                  }
                  while (v21 != v23);
                  uint64_t v23 = (char *)*v275;
                }
              }
              int v4 = v289;
              v289[18] = v30;
              v289[19] = v22;
              v289[20] = &v29[8 * v28];
              if (v23) {
                operator delete(v23);
              }
            }
            else
            {
              *(void *)unint64_t v21 = *v15;
              uint64_t v22 = v21 + 8;
            }
            v4[19] = v22;
            int v38 = (((unint64_t)v22 - v4[18]) >> 3) - 1;
            if (v17 >= v18) {
              break;
            }
            *(_DWORD *)uint64_t v17 = v38;
            uint64_t v19 = v17 + 4;
LABEL_16:
            ++v15;
            uint64_t v17 = v19;
            if (v15 == v284) {
              goto LABEL_113;
            }
          }
          uint64_t v39 = (v17 - v16) >> 2;
          unint64_t v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 62) {
            abort();
          }
          if ((v18 - v16) >> 1 > v40) {
            unint64_t v40 = (v18 - v16) >> 1;
          }
          if ((unint64_t)(v18 - v16) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v41 = v40;
          }
          if (v41)
          {
            if (v41 >> 62) {
              goto LABEL_370;
            }
            uint64_t v42 = operator new(4 * v41);
          }
          else
          {
            uint64_t v42 = 0;
          }
          uint64_t v43 = &v42[4 * v39];
          *(_DWORD *)uint64_t v43 = v38;
          uint64_t v19 = v43 + 4;
          if (v17 == v16)
          {
            int v4 = v289;
            uint64_t v18 = &v42[4 * v41];
            if (v16) {
              goto LABEL_57;
            }
          }
          else
          {
            unint64_t v44 = v17 - 4 - v16;
            if (v44 < 0x2C || (unint64_t)(v16 - v42) < 0x20)
            {
              int v45 = v17;
              int v4 = v289;
              goto LABEL_55;
            }
            uint64_t v47 = (v44 >> 2) + 1;
            int v45 = &v17[-4 * (v47 & 0x7FFFFFFFFFFFFFF8)];
            uint64_t v48 = &v42[4 * v39 - 16];
            uint64_t v49 = v17 - 16;
            uint64_t v50 = v47 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v51 = *(_OWORD *)v49;
              *(v48 - 1) = *((_OWORD *)v49 - 1);
              *uint64_t v48 = v51;
              v48 -= 2;
              v49 -= 32;
              v50 -= 8;
            }
            while (v50);
            v43 -= 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
            int v4 = v289;
            if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_55:
                int v46 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *((_DWORD *)v43 - 1) = v46;
                v43 -= 4;
              }
              while (v45 != v16);
            }
            uint64_t v18 = &v42[4 * v41];
            if (v16) {
LABEL_57:
            }
              operator delete(v16);
          }
          uint64_t v16 = v43;
          goto LABEL_16;
        }
        uint64_t v16 = 0;
        uint64_t v19 = 0;
        int v4 = v289;
LABEL_113:
        uint64_t v92 = (void *)v4[22];
        unint64_t v91 = v4[23];
        if ((unint64_t)v92 >= v91)
        {
          unint64_t v97 = (void *)v4[21];
          unint64_t v98 = 0xAAAAAAAAAAAAAAABLL * (v92 - v97) + 1;
          if (v98 > 0xAAAAAAAAAAAAAAALL) {
            abort();
          }
          unint64_t v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v91 - (void)v97) >> 3);
          if (2 * v99 > v98) {
            unint64_t v98 = 2 * v99;
          }
          if (v99 >= 0x555555555555555) {
            unint64_t v100 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v100 = v98;
          }
          if (v100)
          {
            if (v100 > 0xAAAAAAAAAAAAAAALL) {
LABEL_370:
            }
              std::__throw_bad_array_new_length[abi:nn180100]();
            uint64_t v101 = (char *)operator new(24 * v100);
          }
          else
          {
            uint64_t v101 = 0;
          }
          v102 = &v101[8 * (v92 - v97)];
          *((void *)v102 + 1) = 0;
          v103 = (char **)(v102 + 8);
          *((void *)v102 + 2) = 0;
          *(void *)v102 = 0;
          int64_t v104 = v19 - v16;
          if (v19 != v16)
          {
            if (v104 < 0) {
              abort();
            }
            uint64_t v105 = (char *)operator new(v19 - v16);
            *(void *)v102 = v105;
            uint64_t *v103 = v105;
            int v106 = &v105[4 * (v104 >> 2)];
            *((void *)v102 + 2) = v106;
            memcpy(v105, v16, v104);
            uint64_t *v103 = v106;
          }
          uint64_t v107 = &v101[24 * v100];
          v96 = v102 + 24;
          if (v92 == v97)
          {
            int v4 = v289;
            v289[21] = v102;
            v289[22] = v96;
            v289[23] = v107;
            uint64_t v7 = v269;
          }
          else
          {
            uint64_t v7 = v269;
            do
            {
              uint64_t v108 = v102;
              *((void *)v102 - 2) = 0;
              *((void *)v102 - 1) = 0;
              long long v109 = *(_OWORD *)(v92 - 3);
              v92 -= 3;
              *(_OWORD *)(v102 - 24) = v109;
              v102 -= 24;
              *((void *)v108 - 1) = v92[2];
              *uint64_t v92 = 0;
              v92[1] = 0;
              v92[2] = 0;
            }
            while (v92 != v97);
            int v4 = v289;
            uint64_t v92 = (void *)v289[21];
            int64_t v110 = (void *)v289[22];
            v289[21] = v102;
            v289[22] = v96;
            v289[23] = v107;
            if (v110 != v92)
            {
              BOOL v111 = v110;
              do
              {
                uint64_t v113 = (void *)*(v111 - 3);
                v111 -= 3;
                uint64_t v112 = v113;
                if (v113)
                {
                  *(v110 - 2) = v112;
                  operator delete(v112);
                }
                int64_t v110 = v111;
              }
              while (v111 != v92);
            }
          }
          if (v92) {
            operator delete(v92);
          }
        }
        else
        {
          *uint64_t v92 = 0;
          v92[1] = 0;
          v92[2] = 0;
          uint64_t v93 = v19 - v16;
          uint64_t v7 = v269;
          if (v19 != v16)
          {
            if (v93 < 0) {
              abort();
            }
            int v94 = (char *)operator new(v19 - v16);
            *uint64_t v92 = v94;
            v92[1] = v94;
            int v95 = &v94[4 * (v93 >> 2)];
            v92[2] = v95;
            memcpy(v94, v16, v19 - v16);
            v92[1] = v95;
          }
          v96 = v92 + 3;
          v4[22] = v92 + 3;
        }
        v4[22] = v96;
        if (v16) {
          operator delete(v16);
        }
        uint64_t v10 = v278;
        if (__p) {
          operator delete(__p);
        }
        std::vector<unsigned int>::size_type v6 = v280;
      }
      uint64_t v8 = v10;
    }
    while (v10 != v6);
  }
  uint64_t v114 = v4[2];
  v4[13] = a2[5];
  uint64_t v115 = v4[18];
  uint64_t v116 = v4[19];
  v4[1] = v115;
  unint64_t v117 = (v116 - v115) >> 3;
  v4[11] = v117;
  unint64_t v118 = (v4[3] - v114) >> 3;
  BOOL v119 = v117 >= v118;
  unint64_t v120 = v117 - v118;
  v279 = v4 + 2;
  if (v120 != 0 && v119)
  {
    std::vector<gm::Matrix<float,2,1>>::__append((uint64_t)(v4 + 2), v120);
    unint64_t v117 = v4[11];
  }
  else if (!v119)
  {
    v4[3] = v114 + 8 * v117;
  }
  uint64_t v121 = v4[5];
  unint64_t v122 = (v4[6] - v121) >> 3;
  BOOL v123 = v117 >= v122;
  unint64_t v124 = v117 - v122;
  if (v124 != 0 && v123)
  {
    std::vector<gm::Matrix<float,2,1>>::__append((uint64_t)(v4 + 5), v124);
    unint64_t v117 = v4[11];
  }
  else if (!v123)
  {
    v4[6] = v121 + 8 * v117;
  }
  v273 = v4 + 8;
  std::vector<BOOL>::resize((uint64_t)(v4 + 8), v117);
  unint64_t v125 = v4[11];
  uint64_t v126 = v4[14];
  uint64_t v127 = v4[15];
  uint64_t v128 = (void **)(v4 + 14);
  v4[12] = v125;
  LODWORD(__x.__begin_) = 0;
  unint64_t v129 = (v127 - v126) >> 2;
  if (v125 <= v129)
  {
    if (v125 < v129) {
      v4[15] = v126 + 4 * v125;
    }
  }
  else
  {
    std::vector<unsigned int>::__append((std::vector<unsigned int> *)(v4 + 14), v125 - v129, (std::vector<unsigned int>::const_reference)&__x);
  }
  unint64_t v293 = 0;
  StrokeSpecifications = geo::codec::polygonFeatureGetStrokeSpecifications(a2, (uint64_t *)&v293);
  v277 = v4 + 5;
  if (!v293) {
    goto LABEL_279;
  }
  unint64_t v131 = StrokeSpecifications;
  memset(&__x, 0, sizeof(__x));
  std::vector<unsigned int>::size_type v132 = *v274;
  LODWORD(__p) = 0;
  if (v132) {
    std::vector<unsigned int>::__append(&__x, v132, (std::vector<unsigned int>::const_reference)&__p);
  }
  v291 = 0;
  uint64_t v292 = 0;
  std::string __p = &v291;
  uint64_t v133 = operator new(0x28uLL);
  void *v133 = 0;
  v133[1] = 0;
  v133[2] = &v291;
  std::string __p = v133;
  v291 = v133;
  *((unsigned char *)v133 + 24) = 1;
  uint64_t v292 = 1;
  *((_DWORD *)v133 + 7) = 0;
  *((_DWORD *)v133 + 8) = 0;
  unint64_t v134 = v293;
  if (!v293)
  {
LABEL_238:
    unint64_t v177 = *v274;
    goto LABEL_240;
  }
  unint64_t v135 = 0;
  uint64_t v136 = 1;
  do
  {
    uint64_t v138 = v291;
    unsigned int v139 = *(_DWORD *)&v131[16 * v135 + 12];
    uint64_t v140 = &v291;
    int v141 = &v291;
    if (!v291)
    {
LABEL_185:
      v148 = operator new(0x28uLL);
      v148[7] = v139;
      v148[8] = 0;
      *(void *)v148 = 0;
      *((void *)v148 + 1) = 0;
      *((void *)v148 + 2) = v141;
      *uint64_t v140 = (uint64_t *)v148;
      uint64_t v149 = (uint64_t *)v148;
      if (*(void *)__p)
      {
        std::string __p = *(void **)__p;
        uint64_t v149 = *v140;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v291, v149);
      unint64_t v134 = v293;
      uint64_t v137 = ++v292;
LABEL_167:
      v148[8] = v136;
      uint64_t v136 = v137;
      goto LABEL_168;
    }
    uint64_t v142 = &v291;
    uint64_t v143 = v291;
    do
    {
      int v144 = v143;
      uint64_t v145 = v142;
      unsigned int v146 = *((_DWORD *)v143 + 7);
      if (v146 >= v139) {
        uint64_t v142 = (uint64_t **)v143;
      }
      else {
        ++v143;
      }
      uint64_t v143 = (uint64_t *)*v143;
    }
    while (v143);
    if (v142 == &v291) {
      goto LABEL_182;
    }
    if (v146 < v139) {
      int v144 = (uint64_t *)v145;
    }
    if (v139 < *((_DWORD *)v144 + 7))
    {
LABEL_182:
      while (1)
      {
        while (1)
        {
          int v141 = (uint64_t **)v138;
          unsigned int v147 = *((_DWORD *)v138 + 7);
          if (v139 >= v147) {
            break;
          }
          uint64_t v138 = *v141;
          uint64_t v140 = v141;
          if (!*v141) {
            goto LABEL_185;
          }
        }
        if (v147 >= v139) {
          break;
        }
        uint64_t v138 = v141[1];
        if (!v138)
        {
          uint64_t v140 = v141 + 1;
          goto LABEL_185;
        }
      }
      uint64_t v137 = v136;
      v148 = v141;
      goto LABEL_167;
    }
LABEL_168:
    ++v135;
  }
  while (v135 < v134);
  if (!v134) {
    goto LABEL_238;
  }
  unint64_t v281 = v134;
  uint64_t v150 = 0;
  LODWORD(v151) = 0;
  unsigned int v152 = 0;
  char v285 = 1;
  do
  {
    uint64_t v153 = &v131[16 * v150];
    if (*((_DWORD *)v153 + 1) == a3)
    {
      unsigned int v156 = *((_DWORD *)v153 + 2);
      char v155 = (unsigned int *)(v153 + 8);
      unsigned int v154 = v156;
      if (v285)
      {
        unsigned int v152 = *(_DWORD *)&v131[16 * v150 + 12];
        LODWORD(v151) = v154;
      }
      else if (v151 < v154)
      {
        int v270 = v151;
        unint64_t v151 = v151;
        do
        {
          unsigned __int8 v158 = v291;
          size_t v159 = &v291;
          v160 = &v291;
          if (v291)
          {
            while (1)
            {
              while (1)
              {
                v160 = (uint64_t **)v158;
                unsigned int v161 = *((_DWORD *)v158 + 7);
                if (v152 >= v161) {
                  break;
                }
                unsigned __int8 v158 = *v160;
                size_t v159 = v160;
                if (!*v160) {
                  goto LABEL_208;
                }
              }
              if (v161 >= v152) {
                break;
              }
              unsigned __int8 v158 = v160[1];
              if (!v158)
              {
                size_t v159 = v160 + 1;
                goto LABEL_208;
              }
            }
            unsigned int v157 = *((_DWORD *)v160 + 8);
          }
          else
          {
LABEL_208:
            v162 = (uint64_t *)operator new(0x28uLL);
            *((_DWORD *)v162 + 7) = v152;
            *((_DWORD *)v162 + 8) = 0;
            uint64_t *v162 = 0;
            v162[1] = 0;
            v162[2] = (uint64_t)v160;
            *size_t v159 = v162;
            if (*(void *)__p)
            {
              std::string __p = *(void **)__p;
              v162 = *v159;
            }
            int v163 = v291;
            BOOL v164 = v162 == v291;
            *((unsigned char *)v162 + 24) = v162 == v291;
            if (!v164)
            {
              do
              {
                uint64_t v165 = v162[2];
                if (*(unsigned char *)(v165 + 24)) {
                  break;
                }
                int v166 = *(uint64_t **)(v165 + 16);
                uint64_t v167 = *v166;
                if (*v166 == v165)
                {
                  uint64_t v170 = v166[1];
                  if (!v170 || (int v171 = *(unsigned __int8 *)(v170 + 24), v168 = (unsigned char *)(v170 + 24), v171))
                  {
                    if (*(uint64_t **)v165 == v162)
                    {
                      uint64_t v172 = v162[2];
                    }
                    else
                    {
                      uint64_t v172 = *(void *)(v165 + 8);
                      uint64_t v173 = *(void *)v172;
                      *(void *)(v165 + 8) = *(void *)v172;
                      if (v173)
                      {
                        *(void *)(v173 + 16) = v165;
                        int v166 = *(uint64_t **)(v165 + 16);
                      }
                      *(void *)(v172 + 16) = v166;
                      *(void *)(*(void *)(v165 + 16) + 8 * (**(void **)(v165 + 16) != v165)) = v172;
                      *(void *)uint64_t v172 = v165;
                      *(void *)(v165 + 16) = v172;
                      int v166 = *(uint64_t **)(v172 + 16);
                      uint64_t v165 = *v166;
                    }
                    *(unsigned char *)(v172 + 24) = 1;
                    *((unsigned char *)v166 + 24) = 0;
                    uint64_t v176 = *(void *)(v165 + 8);
                    *int v166 = v176;
                    if (v176) {
                      *(void *)(v176 + 16) = v166;
                    }
                    *(void *)(v165 + 16) = v166[2];
                    *(void *)(v166[2] + 8 * (*(void *)v166[2] != (void)v166)) = v165;
                    *(void *)(v165 + 8) = v166;
                    goto LABEL_198;
                  }
                }
                else if (!v167 || (int v169 = *(unsigned __int8 *)(v167 + 24), v168 = (unsigned char *)(v167 + 24), v169))
                {
                  if (*(uint64_t **)v165 == v162)
                  {
                    uint64_t v174 = v162[1];
                    *(void *)uint64_t v165 = v174;
                    if (v174)
                    {
                      *(void *)(v174 + 16) = v165;
                      int v166 = *(uint64_t **)(v165 + 16);
                    }
                    v162[2] = (uint64_t)v166;
                    *(void *)(*(void *)(v165 + 16) + 8 * (**(void **)(v165 + 16) != v165)) = v162;
                    v162[1] = v165;
                    *(void *)(v165 + 16) = v162;
                    int v166 = (uint64_t *)v162[2];
                  }
                  else
                  {
                    v162 = (uint64_t *)v162[2];
                  }
                  *((unsigned char *)v162 + 24) = 1;
                  *((unsigned char *)v166 + 24) = 0;
                  uint64_t v165 = v166[1];
                  v175 = *(uint64_t **)v165;
                  v166[1] = *(void *)v165;
                  if (v175) {
                    v175[2] = (uint64_t)v166;
                  }
                  *(void *)(v165 + 16) = v166[2];
                  *(void *)(v166[2] + 8 * (*(void *)v166[2] != (void)v166)) = v165;
                  *(void *)uint64_t v165 = v166;
LABEL_198:
                  v166[2] = v165;
                  break;
                }
                *(unsigned char *)(v165 + 24) = 1;
                v162 = v166;
                *((unsigned char *)v166 + 24) = v166 == v163;
                unsigned char *v168 = 1;
              }
              while (v166 != v163);
            }
            unsigned int v157 = 0;
            uint64_t v292 = ++v136;
          }
          __x.__begin_[v151++] = v157;
        }
        while (v151 < *v155);
        LODWORD(v151) = v270;
      }
      v285 ^= 1u;
    }
    ++v150;
  }
  while (v150 != v281);
  unint64_t v177 = *v274;
  uint64_t v178 = v151;
  if (!(v285 & 1 | (*v274 <= v151)))
  {
    do
    {
      v259 = v291;
      v260 = &v291;
      v261 = &v291;
      if (v291)
      {
        while (1)
        {
          while (1)
          {
            v261 = (uint64_t **)v259;
            unsigned int v262 = *((_DWORD *)v259 + 7);
            if (v152 >= v262) {
              break;
            }
            v259 = *v261;
            v260 = v261;
            if (!*v261) {
              goto LABEL_367;
            }
          }
          if (v262 >= v152) {
            break;
          }
          v259 = v261[1];
          if (!v259)
          {
            v260 = v261 + 1;
            goto LABEL_367;
          }
        }
        v263 = v261;
      }
      else
      {
LABEL_367:
        v263 = operator new(0x28uLL);
        v263[7] = v152;
        v263[8] = 0;
        *(void *)v263 = 0;
        *((void *)v263 + 1) = 0;
        *((void *)v263 + 2) = v261;
        *v260 = (uint64_t *)v263;
        v264 = (uint64_t *)v263;
        if (*(void *)__p)
        {
          std::string __p = *(void **)__p;
          v264 = *v260;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v291, v264);
        ++v292;
        unint64_t v177 = *v274;
      }
      __x.__begin_[v178] = v263[8];
      LODWORD(v151) = v151 + 1;
      uint64_t v178 = v151;
    }
    while (v177 > v151);
  }
LABEL_240:
  std::vector<unsigned int>::pointer begin = __x.__begin_;
  if (!v177)
  {
    int v4 = v289;
    std::vector<unsigned int>::pointer v202 = __x.__begin_;
    goto LABEL_277;
  }
  uint64_t v180 = 0;
  int v4 = v289;
  uint64_t v181 = v289[21];
  std::vector<unsigned int>::pointer v286 = __x.__begin_;
  while (2)
  {
    if (*(void *)(v181 + 24 * v180 + 8) != *(void *)(v181 + 24 * v180))
    {
      unint64_t v182 = 0;
      v183 = (char *)v4[15];
      while (1)
      {
        unint64_t v185 = v4[16];
        if ((unint64_t)v183 >= v185) {
          break;
        }
        *(_DWORD *)v183 = begin[v180];
        v184 = v183 + 4;
LABEL_247:
        v4[15] = v184;
        ++v182;
        v183 = v184;
        if (v182 >= (uint64_t)(*(void *)(v181 + 24 * v180 + 8) - *(void *)(v181 + 24 * v180)) >> 2)
        {
          unint64_t v177 = *v274;
          goto LABEL_243;
        }
      }
      v186 = v128;
      v187 = (char *)*v128;
      uint64_t v188 = (v183 - v187) >> 2;
      unint64_t v189 = v188 + 1;
      if ((unint64_t)(v188 + 1) >> 62) {
        abort();
      }
      uint64_t v190 = v185 - (void)v187;
      if (v190 >> 1 > v189) {
        unint64_t v189 = v190 >> 1;
      }
      if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v191 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v191 = v189;
      }
      if (v191)
      {
        if (v191 >> 62) {
          goto LABEL_370;
        }
        v192 = operator new(4 * v191);
        std::vector<unsigned int>::pointer begin = v286;
      }
      else
      {
        v192 = 0;
      }
      v193 = &v192[4 * v188];
      _DWORD *v193 = begin[v180];
      v184 = (char *)(v193 + 1);
      if (v183 == v187)
      {
        int v4 = v289;
      }
      else
      {
        unint64_t v194 = v183 - 4 - v187;
        if (v194 < 0xBC
          || &v192[v183 - v187 - 4 - (v194 & 0xFFFFFFFFFFFFFFFCLL)] > &v192[v183 - v187 - 4]
          || &v183[-(v194 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v183 - 4
          || (unint64_t)(v187 - v192) < 0x20)
        {
          v195 = v183;
          int v4 = v289;
        }
        else
        {
          uint64_t v197 = (v194 >> 2) + 1;
          v195 = &v183[-4 * (v197 & 0x7FFFFFFFFFFFFFF8)];
          v198 = &v192[4 * v188 - 16];
          v199 = v183 - 16;
          uint64_t v200 = v197 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v201 = *(_OWORD *)v199;
            *(v198 - 1) = *((_OWORD *)v199 - 1);
            _OWORD *v198 = v201;
            v198 -= 2;
            v199 -= 32;
            v200 -= 8;
          }
          while (v200);
          v193 -= v197 & 0x7FFFFFFFFFFFFFF8;
          int v4 = v289;
          if (v197 == (v197 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_265;
          }
        }
        do
        {
          int v196 = *((_DWORD *)v195 - 1);
          v195 -= 4;
          *--v193 = v196;
        }
        while (v195 != v187);
      }
LABEL_265:
      v4[14] = v193;
      v4[15] = v184;
      v4[16] = &v192[4 * v191];
      if (v187)
      {
        operator delete(v187);
        std::vector<unsigned int>::pointer begin = v286;
        uint64_t v181 = v4[21];
      }
      uint64_t v128 = v186;
      goto LABEL_247;
    }
LABEL_243:
    if (++v180 < v177) {
      continue;
    }
    break;
  }
  std::vector<unsigned int>::pointer v202 = __x.__begin_;
LABEL_277:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v291);
  if (v202) {
    operator delete(v202);
  }
LABEL_279:
  __x.__begin_ = 0;
  CharacteristicPointsForSection = geo::codec::polygonFeatureGetCharacteristicPointsForSection(a2, a3, (uint64_t *)&__x);
  std::vector<unsigned int>::size_type v206 = *v274;
  if (!CharacteristicPointsForSection)
  {
LABEL_299:
    if (!v206) {
      return v289;
    }
    int v224 = 0;
    uint64_t v225 = 0;
    uint64_t v268 = v289[11];
    uint64_t v271 = v289[12];
LABEL_303:
    uint64_t v226 = v224;
    uint64_t v227 = v224 - 1;
    if (v271 == v268) {
      goto LABEL_304;
    }
    unint64_t v232 = v289[11];
    unint64_t v233 = (v227 + v232) % v232;
    uint64_t v234 = *(void *)(*v273 + ((v233 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v233);
    if ((*(void *)(*v273 + (((unint64_t)v224 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v224)) != 0 || !v234)
    {
      if ((*(void *)(*v273 + (((unint64_t)v224 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v224)) != 0 && !v234)
      {
        GhostPoint = (float32x2_t *)geo::codec::multiSectionFeatureGetGhostPoint((uint64_t)a2, a3, v225);
        if (GhostPoint)
        {
          *(void *)&long long v205 = *(void *)(*v265 + 8 * v224);
          float32x2_t v230 = vsub_f32(*GhostPoint, *(float32x2_t *)&v205);
          v235 = (float32x2_t *)(*v265 + 8 * v233);
          goto LABEL_314;
        }
      }
    }
    else
    {
      v235 = (float32x2_t *)geo::codec::multiSectionFeatureGetGhostPoint((uint64_t)a2, a3, v225);
      if (v235)
      {
        *(void *)&long long v205 = *(void *)(*v265 + 8 * v224);
        float32x2_t v230 = vsub_f32(*(float32x2_t *)(*v265 + 8 * ((v224 + 1) % v232)), *(float32x2_t *)&v205);
LABEL_314:
        if (*(void *)(v289[21] + 24 * v225 + 8) == *(void *)(v289[21] + 24 * v225)) {
          goto LABEL_302;
        }
        float32x2_t v231 = *v235;
LABEL_316:
        float32x2_t v237 = vsub_f32(*(float32x2_t *)&v205, v231);
        *(float32x2_t *)&long long v205 = vmul_f32(v230, v230);
        *(float *)&long long v205 = sqrtf(vaddv_f32(*(float32x2_t *)&v205));
        *(_OWORD *)v287 = v205;
        if (*(float *)&v205 <= 0.00000011921)
        {
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
          }
          v238 = (id)GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled(v238, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__x.__begin_) = 0;
            _os_log_impl(&dword_1A1780000, v238, OS_LOG_TYPE_ERROR, "Zero Length edge on polygon boundary", (uint8_t *)&__x, 2u);
          }
        }
        else
        {
          *(float32x2_t *)(*v279 + 8 * v224) = vdiv_f32(v230, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v205, 0));
        }
        *(float32x2_t *)&long long v204 = vmul_f32(v237, v237);
        *(float *)&long long v204 = sqrtf(vaddv_f32(*(float32x2_t *)&v204));
        long long v282 = v204;
        if (*(float *)&v204 <= 0.00000011921)
        {
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
          }
          v257 = (id)GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled(v257, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__x.__begin_) = 0;
            _os_log_impl(&dword_1A1780000, v257, OS_LOG_TYPE_ERROR, "Zero Length edge on polygon boundary", (uint8_t *)&__x, 2u);
          }

          float32x2_t v239 = (float32x2_t)0x3F80000000000000;
          if (*(float *)v287 > 0.00000011921) {
            goto LABEL_326;
          }
        }
        else
        {
          float32x2_t v239 = vdiv_f32(v237, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v204, 0));
          *(float32x2_t *)(*v277 + 8 * v226) = v239;
          *((std::vector<unsigned int>::pointer *)&v205 + 1) = v287[1];
          if (*(float *)v287 > 0.00000011921)
          {
LABEL_326:
            *((void *)&v204 + 1) = *((void *)&v282 + 1);
            if (*(float *)&v282 <= 0.00000011921)
            {
              v240 = (_DWORD *)(*v279 + 8 * v226);
              v241 = (_DWORD *)(*v277 + 8 * v226);
              _DWORD *v241 = *v240;
              v241[1] = v240[1];
            }
            if (*(void *)(v289[21] + 24 * v225 + 8) - *(void *)(v289[21] + 24 * v225) < 5uLL)
            {
              int v224 = v226 + 1;
              goto LABEL_302;
            }
            uint64_t v242 = 0;
            uint64_t v243 = 8 * v226;
            unint64_t v244 = 1;
            v245 = v289;
            while (1)
            {
              unint64_t v246 = v245[11];
              uint64_t v247 = v245[1];
              float32x2_t v248 = *(float32x2_t *)(v247 + v243 + 8 * v244);
              float32x2_t v249 = vsub_f32(*(float32x2_t *)(v247 + 8 * ((v226 + v244 + 1) % v246)), v248);
              float32x2_t v250 = *(float32x2_t *)(v247 + 8 * ((v226 + v244 + v246 - 1) % v246));
              *(float32x2_t *)&long long v205 = vmul_f32(v249, v249);
              *(float *)&long long v205 = sqrtf(vaddv_f32(*(float32x2_t *)&v205));
              long long v288 = v205;
              if (*(float *)&v205 <= 0.00000011921)
              {
                if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
                  dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
                }
                v251 = (id)GEOGetVectorKitVKDefaultLog_log;
                if (os_log_type_enabled(v251, OS_LOG_TYPE_ERROR))
                {
                  LOWORD(__x.__begin_) = 0;
                  _os_log_impl(&dword_1A1780000, v251, OS_LOG_TYPE_ERROR, "Zero Length edge on polygon boundary", (uint8_t *)&__x, 2u);
                }
              }
              else
              {
                *(float32x2_t *)(*v279 + v243 + 8 * v244) = vdiv_f32(v249, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v205, 0));
              }
              float32x2_t v252 = vsub_f32(v248, v250);
              *(float32x2_t *)&long long v205 = vmul_f32(v252, v252);
              *(float *)&long long v205 = sqrtf(vaddv_f32(*(float32x2_t *)&v205));
              long long v283 = v205;
              if (*(float *)&v205 <= 0.00000011921) {
                break;
              }
              float32x2_t v253 = vdiv_f32(v252, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v205, 0));
              *(float32x2_t *)(*v277 + v243 + 8 * v244) = v253;
              *((void *)&v205 + 1) = *((void *)&v288 + 1);
              if (*(float *)&v288 <= 0.00000011921) {
                goto LABEL_340;
              }
LABEL_341:
              *((void *)&v204 + 1) = *((void *)&v283 + 1);
              if (*(float *)&v283 <= 0.00000011921)
              {
                uint64_t v254 = *v279 + v243 + v242;
                uint64_t v255 = *v277 + v243 + v242;
                *(_DWORD *)(v255 + 8) = *(_DWORD *)(v254 + 8);
                *(_DWORD *)(v255 + 12) = *(_DWORD *)(v254 + 12);
              }
              ++v244;
              v245 = v289;
              v242 += 8;
              if (v244 >= (uint64_t)(*(void *)(v289[21] + 24 * v225 + 8) - *(void *)(v289[21] + 24 * v225)) >> 2)
              {
                int v224 = v226 + v244;
LABEL_302:
                if (++v225 >= *v274) {
                  return v289;
                }
                goto LABEL_303;
              }
            }
            if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
              dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
            }
            v256 = (id)GEOGetVectorKitVKDefaultLog_log;
            if (os_log_type_enabled(v256, OS_LOG_TYPE_ERROR))
            {
              LOWORD(__x.__begin_) = 0;
              _os_log_impl(&dword_1A1780000, v256, OS_LOG_TYPE_ERROR, "Zero Length edge on polygon boundary", (uint8_t *)&__x, 2u);
            }

            float32x2_t v253 = (float32x2_t)0x3F80000000000000;
            if (*(float *)&v288 > 0.00000011921) {
              goto LABEL_341;
            }
LABEL_340:
            *(float32x2_t *)(*v279 + v243 + 8 * v244) = v253;
            goto LABEL_341;
          }
        }
        *(float32x2_t *)(*v279 + 8 * v226) = v239;
        goto LABEL_326;
      }
    }
LABEL_304:
    if (*(void *)(v289[21] + 24 * v225 + 8) == *(void *)(v289[21] + 24 * v225)) {
      goto LABEL_302;
    }
    unint64_t v228 = v289[11];
    uint64_t v229 = v289[1];
    *(void *)&long long v205 = *(void *)(v229 + 8 * v224);
    float32x2_t v230 = vsub_f32(*(float32x2_t *)(v229 + 8 * ((v224 + 1) % v228)), *(float32x2_t *)&v205);
    float32x2_t v231 = *(float32x2_t *)(v229 + 8 * ((v227 + v228) % v228));
    goto LABEL_316;
  }
  if (v206)
  {
    int v207 = 0;
    std::vector<unsigned int>::pointer v208 = 0;
    std::vector<unsigned int>::size_type v209 = 0;
    uint64_t v210 = v4[21];
    do
    {
      if (v208 >= __x.__begin_)
      {
LABEL_288:
        BOOL v214 = 0;
      }
      else
      {
        v211 = &CharacteristicPointsForSection[100 * (void)v208 + 12];
        std::vector<unsigned int>::pointer v212 = v208;
        while (1)
        {
          int v213 = *(_DWORD *)v211;
          v211 += 100;
          if (v209 == v213) {
            break;
          }
          std::vector<unsigned int>::pointer v212 = (std::vector<unsigned int>::pointer)((char *)v212 + 1);
          if (__x.__begin_ == v212) {
            goto LABEL_288;
          }
        }
        BOOL v214 = CharacteristicPointsForSection[100 * (void)v212 + 28] != 0;
        std::vector<unsigned int>::pointer v208 = v212;
      }
      uint64_t v215 = *(void *)(v210 + 24 * v209 + 8) - *(void *)(v210 + 24 * v209);
      if (v215)
      {
        unint64_t v216 = v215 >> 2;
        uint64_t v217 = *v273;
        unint64_t v218 = v207;
        if (v216 <= 1) {
          uint64_t v219 = 1;
        }
        else {
          uint64_t v219 = v216;
        }
        if (v214)
        {
          do
          {
            unint64_t v220 = v218 >> 3;
            uint64_t v221 = 1 << v218++;
            *(void *)(v217 + (v220 & 0x1FFFFFFFFFFFFFF8)) |= v221;
            --v219;
          }
          while (v219);
        }
        else
        {
          do
          {
            unint64_t v222 = v218 >> 3;
            uint64_t v223 = 1 << v218++;
            *(void *)(v217 + (v222 & 0x1FFFFFFFFFFFFFF8)) &= ~v223;
            ++v4[12];
            --v219;
          }
          while (v219);
        }
        int v207 = v218;
      }
      ++v209;
      std::vector<unsigned int>::size_type v206 = *v274;
    }
    while (v209 < *v274);
    goto LABEL_299;
  }
  return v289;
}

void sub_1A264C96C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v31 = v29[21];
  if (v31)
  {
    uint64_t v32 = v29[22];
    int v33 = (void *)v29[21];
    if (v32 != v31)
    {
      uint64_t v34 = v29[22];
      do
      {
        long long v36 = *(void **)(v34 - 24);
        v34 -= 24;
        uint64_t v35 = v36;
        if (v36)
        {
          *(void *)(v32 - 16) = v35;
          operator delete(v35);
        }
        uint64_t v32 = v34;
      }
      while (v34 != v31);
      int v33 = (void *)v29[21];
    }
    v29[22] = v31;
    operator delete(v33);
  }
  uint64_t v37 = *a16;
  if (*a16)
  {
    v29[19] = v37;
    operator delete(v37);
  }
  *uint64_t v29 = &unk_1EF534428;
  int v38 = (void *)v29[14];
  if (v38)
  {
    v29[15] = v38;
    operator delete(v38);
    uint64_t v39 = (void *)v29[8];
    if (!v39)
    {
LABEL_15:
      unint64_t v40 = (void *)v29[5];
      if (!v40) {
        goto LABEL_16;
      }
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v39 = (void *)v29[8];
    if (!v39) {
      goto LABEL_15;
    }
  }
  operator delete(v39);
  unint64_t v40 = (void *)v29[5];
  if (!v40)
  {
LABEL_16:
    unint64_t v41 = (void *)v29[2];
    if (!v41) {
LABEL_22:
    }
      _Unwind_Resume(exception_object);
LABEL_21:
    v29[3] = v41;
    operator delete(v41);
    _Unwind_Resume(exception_object);
  }
LABEL_20:
  v29[6] = v40;
  operator delete(v40);
  unint64_t v41 = (void *)v29[2];
  if (!v41) {
    goto LABEL_22;
  }
  goto LABEL_21;
}

void md::NotificationObserver::~NotificationObserver(md::NotificationObserver *this)
{
  *(void *)this = off_1EF53E788;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveEveryObserver(LocalCenter, this);
  JUMPOUT(0x1A6239270);
}

{
  __CFNotificationCenter *LocalCenter;

  *(void *)this = off_1EF53E788;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveEveryObserver(LocalCenter, this);
}

{
  __CFNotificationCenter *LocalCenter;

  *(void *)this = off_1EF53E788;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveEveryObserver(LocalCenter, this);
}

void notificationHandler(__CFNotificationCenter *a1, void *a2, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  if (a2 && objc_msgSend((id)*MEMORY[0x1E4F1C370], "isEqualToString:", a3, a4, a5))
  {
    std::vector<unsigned int>::size_type v6 = *(void (**)(void *))(*(void *)a2 + 16);
    v6(a2);
  }
}

void ggl::FlyoverMorphNight::MorphPipelineState::~MorphPipelineState(ggl::FlyoverMorphNight::MorphPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::FlyoverMorphNight::MorphPipelineState::MorphPipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4)
{
  {
    uint64_t v10 = a4;
    uint64_t v12 = a2;
    uint64_t v13 = a3;
    a2 = v12;
    a3 = v13;
    a4 = v10;
    if (v11)
    {
      {
        if (v11)
        {
          {
            {
              ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::attributesReflection(void)::r = (uint64_t)&ggl::FlyoverMorph::vertexReflection;
            }
            ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::attributesReflection(void)::r;
            unk_1E957D578 = 1;
          }
          ggl::FlyoverMorphNight::MorphPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::FlyoverMorph::Vertex>::typedReflection(void)::r;
          *(void *)algn_1E957D348 = &ggl::FlyoverMorphNight::pipelineDataMorphPipelineDeviceStructs(void)::ref;
          qword_1E957D350 = 0;
          {
            ggl::FlyoverMorphNight::pipelineDataMorphPipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverCommon::Shared::reflection(void)::reflection;
            unk_1E957D380 = ggl::FlyoverCommon::Transform::reflection(void)::reflection;
            qword_1E957D388 = (uint64_t)ggl::FlyoverCommon::Clip::reflection(void)::reflection;
            unk_1E957D390 = ggl::FlyoverCommon::Material::reflection(void)::reflection;
            qword_1E957D398 = (uint64_t)ggl::FlyoverCommon::Texcoords::reflection(void)::reflection;
            unk_1E957D3A0 = ggl::FlyoverMorph::Morph::reflection(void)::reflection;
          }
          qword_1E957D358 = (uint64_t)&ggl::FlyoverMorphNight::pipelineDataMorphPipelineConstantStructs(void)::ref;
          unk_1E957D360 = xmmword_1A28FF160;
        }
      }
      ggl::FlyoverMorphNight::MorphPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverMorphNight::MorphPipelineSetup::typedReflection(void)::ref;
      ggl::FlyoverMorphNightShader::typedReflection(v11);
      qword_1E95934A0 = (uint64_t)&ggl::FlyoverMorphNightShader::typedReflection(void)::ref;
      {
        ggl::FlyoverMorphNight::pipelineStateMorphPipelineAttributeStructBinding(void)::attr = 0;
        unk_1E9593500 = 0;
        qword_1E9593508 = (uint64_t)"";
        dword_1E9593510 = 0;
        qword_1E9593518 = (uint64_t)&ggl::FlyoverMorphNight::pipelineStateMorphPipelineAttributeBinding_0(void)::attr;
        unk_1E9593520 = 4;
      }
      qword_1E95934A8 = (uint64_t)&ggl::FlyoverMorphNight::pipelineStateMorphPipelineAttributeStructBinding(void)::attr;
      unk_1E95934B0 = 1;
      qword_1E95934B8 = 0;
      unk_1E95934C0 = 5;
      qword_1E95934C8 = (uint64_t)&ggl::FlyoverMorphNight::pipelineStateMorphPipelineDeviceStructBinding(void)::ref;
      unk_1E95934D0 = 0;
      {
        ggl::FlyoverMorphNight::pipelineStateMorphPipelineConstantStructBinding(void)::ref = 0;
        unk_1E9593540 = 0;
        qword_1E9593548 = (uint64_t)"sharedConstants";
        dword_1E9593550 = 3;
        qword_1E9593558 = (uint64_t)&ggl::FlyoverMorphNight::pipelineStateMorphPipelineConstantSharedConstantsBinding(void)::reflection;
        unk_1E9593560 = xmmword_1A28FC940;
        qword_1E9593570 = 1;
        unk_1E9593578 = "transform";
        dword_1E9593580 = 3;
        qword_1E9593588 = (uint64_t)&ggl::FlyoverMorphNight::pipelineStateMorphPipelineConstantTransformBinding(void)::reflection;
        *(int64x2_t *)algn_1E9593590 = vdupq_n_s64(2uLL);
        qword_1E95935A0 = 2;
        unk_1E95935A8 = "clip";
        dword_1E95935B0 = 3;
        qword_1E95935B8 = (uint64_t)&ggl::FlyoverMorphNight::pipelineStateMorphPipelineConstantClipBinding(void)::reflection;
        unk_1E95935C0 = xmmword_1A28FC950;
        qword_1E95935D0 = 3;
        unk_1E95935D8 = "material";
        dword_1E95935E0 = 3;
        qword_1E95935E8 = (uint64_t)&ggl::FlyoverMorphNight::pipelineStateMorphPipelineConstantMaterialBinding(void)::reflection;
        *(_OWORD *)algn_1E95935F0 = xmmword_1A28FC960;
        qword_1E9593600 = 4;
        unk_1E9593608 = "texcoords";
        dword_1E9593610 = 3;
        qword_1E9593618 = (uint64_t)&ggl::FlyoverMorphNight::pipelineStateMorphPipelineConstantTexcoordsBinding(void)::reflection;
        unk_1E9593620 = xmmword_1A28FE180;
        qword_1E9593630 = 5;
        unk_1E9593638 = "morph";
        dword_1E9593640 = 3;
        qword_1E9593648 = (uint64_t)&ggl::FlyoverMorphNight::pipelineStateMorphPipelineConstantMorphBinding(void)::reflection;
        unk_1E9593650 = 3;
      }
      qword_1E95934D8 = (uint64_t)&ggl::FlyoverMorphNight::pipelineStateMorphPipelineConstantStructBinding(void)::ref;
      unk_1E95934E0 = 6;
      a4 = v10;
      a2 = v12;
      a3 = v13;
    }
  }
  uint64_t v5 = *a2;
  std::vector<unsigned int>::size_type v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)uint64_t v16 = *(_OWORD *)a3;
  *(_OWORD *)&v16[12] = *(_OWORD *)(a3 + 12);
  long long v7 = *(_OWORD *)(a3 + 28);
  char v8 = *(unsigned char *)(a3 + 44);
  long long v14 = *a4;
  long long v15 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::FlyoverMorphNight::MorphPipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v14;
  *(_OWORD *)(a1 + 272) = v15;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v16;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v16[12];
  *(_OWORD *)(a1 + 92) = v7;
  *(unsigned char *)(a1 + 108) = v8;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(void *)a1 = &unk_1EF55EB68;
  return a1;
}

BOOL ggl::FlyoverMorphNight::MorphPipelineSetup::textureIsEnabled(ggl::FlyoverMorphNight::MorphPipelineSetup *this, unint64_t a2)
{
  return a2 < 5;
}

BOOL ggl::FlyoverMorphNight::MorphPipelineSetup::constantDataIsEnabled(ggl::FlyoverMorphNight::MorphPipelineSetup *this, unint64_t a2)
{
  return a2 < 6;
}

void ggl::FlyoverMorphNight::MorphPipelineSetup::~MorphPipelineSetup(ggl::FlyoverMorphNight::MorphPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void md::Logic<md::ARRenderEntityGenerationLogic,md::ARRenderEntityGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void md::ARRenderEntityGenerationLogic::runBeforeLayout(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2245 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(int8x8_t **)(a1 + 120);
  if (!v2 || !*(void *)(v1 + 128)) {
    return;
  }
  uint64_t v3 = gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(v2);
  uint64_t v2222 = v1;
  if (*(void *)(v3 + 88) == *(void *)(v3 + 80)) {
    goto LABEL_1614;
  }
  uint64_t v4 = *(int8x8_t **)(v1 + 120);
  uint64_t v2232 = *(void *)(v1 + 128);
  v2233 = v4;
  v2234 = (long long *)&unk_1EF56D200;
  v2235 = &v2232;
  v2237 = (uint64_t *)&v2234;
  uint64_t v5 = gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(v4);
  uint64_t v6 = gdc::Registry::storage<arComponents::StandardPipeline>(v4);
  uint64_t v7 = gdc::Registry::storage<arComponents::WorldTransform>(v4);
  uint64_t v8 = gdc::Registry::storage<arComponents::MeshComponent>(v4);
  uint64_t v9 = gdc::Registry::storage<arComponents::Boundary>(v4);
  uint64_t v10 = gdc::Registry::storage<arComponents::AlbedoTextureComponent>(v4);
  uint64_t v11 = gdc::Registry::storage<arComponents::AlbedoTextureUVMapping>(v4);
  uint64_t v12 = gdc::Registry::storage<arComponents::AlbedoTextureUVScale>(v4);
  uint64_t v13 = gdc::Registry::storage<arComponents::StyleColor>(v4);
  uint64_t v14 = gdc::Registry::storage<arComponents::VisibilityAlpha>(v4);
  *(void *)&long long v2238 = v5;
  *((void *)&v2238 + 1) = v6;
  uint64_t v2239 = v7;
  *(void *)&long long v2240 = v8;
  *((void *)&v2240 + 1) = v9;
  uint64_t v2241 = v10;
  uint64_t v2242 = v11;
  *(void *)&long long v2243 = v12;
  *((void *)&v2243 + 1) = v13;
  uint64_t v2244 = v14;
  *(void *)&long long v2230 = &v2234;
  *((void *)&v2230 + 1) = v2222 + 160;
  v2231 = &v2233;
  gdc::RegistryView<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>::each<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}>(&v2238, &v2230);
  if (v2237 == (uint64_t *)&v2234)
  {
    (*((void (**)(long long **))v2234 + 4))(&v2234);
    uint64_t v15 = v2222;
  }
  else
  {
    uint64_t v15 = v2222;
    if (v2237) {
      (*(void (**)(uint64_t *))(*v2237 + 40))(v2237);
    }
  }
  uint64_t v17 = *(int8x8_t **)(v15 + 120);
  uint64_t v16 = *(int8x8_t **)(v15 + 128);
  *(void *)&long long v2230 = v17;
  v2233 = v16;
  *(void *)&long long v2238 = &unk_1EF56D290;
  *((void *)&v2238 + 1) = &v2233;
  *(void *)&long long v2240 = &v2238;
  uint64_t v18 = (void *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(v17);
  uint64_t v19 = (void *)gdc::Registry::storage<arComponents::OcclusionPipeline>(v17);
  unint64_t v20 = (void *)gdc::Registry::storage<arComponents::WorldTransform>(v17);
  v2223 = (void *)gdc::Registry::storage<arComponents::MeshComponent>(v17);
  v2216 = (void *)gdc::Registry::storage<arComponents::Boundary>(v17);
  uint64_t v21 = gdc::Registry::storage<arComponents::VisibilityAlpha>(v17);
  uint64_t v22 = (void *)v21;
  uint64_t v23 = (uint64_t *)(v2222 + 208);
  uint64_t v24 = v19 + 4;
  uint64_t v25 = v20 + 4;
  uint64_t v26 = v21 + 32;
  uint64_t v27 = v18[7];
  uint64_t v28 = v18[8];
  if (v19[8] - v19[7] >= (unint64_t)(v28 - v27)) {
    uint64_t v29 = v18 + 4;
  }
  else {
    uint64_t v29 = v19 + 4;
  }
  if (v20[8] - v20[7] < v29[4] - v29[3]) {
    uint64_t v29 = v20 + 4;
  }
  if (v2223[8] - v2223[7] < v29[4] - v29[3]) {
    uint64_t v29 = v2223 + 4;
  }
  if (v2216[8] - v2216[7] < v29[4] - v29[3]) {
    uint64_t v29 = v2216 + 4;
  }
  if (*(void *)(v21 + 64) - *(void *)(v21 + 56) >= v29[4] - v29[3]) {
    uint64_t v30 = v29;
  }
  else {
    uint64_t v30 = (void *)(v21 + 32);
  }
  if (v18 + 4 == v30)
  {
    uint64_t v2202 = v21 + 32;
    v2234 = &v2238;
    v2235 = (uint64_t *)(v2222 + 208);
    k = &v2230;
    while (v27 != v28)
    {
      unint64_t v32 = *(unsigned int *)(v27 + 4);
      unint64_t v33 = v32 >> 7;
      uint64_t v34 = v19[4];
      if (v32 >> 7 < (v19[5] - v34) >> 3)
      {
        uint64_t v35 = *(void *)(v34 + 8 * v33);
        if (v35)
        {
          uint64_t v36 = v32 & 0x7F;
          unint64_t v37 = *(unsigned __int16 *)(v35 + 2 * v36);
          uint64_t v39 = v19[7];
          uint64_t v38 = v19[8];
          if (v37 < (v38 - v39) >> 3)
          {
            uint64_t v40 = v39 + 8 * v37;
            if (v40 != v38 && *(_DWORD *)(v40 + 4) == v32)
            {
              uint64_t v42 = v20[4];
              unint64_t v43 = (v20[5] - v42) >> 3;
              if (v33 < v43)
              {
                uint64_t v44 = *(void *)(v42 + 8 * v33);
                if (v44)
                {
                  unint64_t v45 = *(unsigned __int16 *)(v44 + 2 * v36);
                  uint64_t v47 = v20[7];
                  uint64_t v46 = v20[8];
                  unint64_t v48 = (v46 - v47) >> 3;
                  if (v48 > v45)
                  {
                    uint64_t v49 = v47 + 8 * v45;
                    if (v49 != v46 && *(_DWORD *)(v49 + 4) == v32)
                    {
                      uint64_t v51 = v2223[4];
                      unint64_t v52 = (v2223[5] - v51) >> 3;
                      if (v33 < v52)
                      {
                        uint64_t v53 = *(void *)(v51 + 8 * v33);
                        if (v53)
                        {
                          unint64_t v54 = *(unsigned __int16 *)(v53 + 2 * v36);
                          uint64_t v56 = v2223[7];
                          uint64_t v55 = v2223[8];
                          unint64_t v57 = (v55 - v56) >> 3;
                          if (v57 > v54)
                          {
                            uint64_t v58 = v56 + 8 * v54;
                            if (v58 != v55 && *(_DWORD *)(v58 + 4) == v32)
                            {
                              uint64_t v60 = v2216[4];
                              unint64_t v61 = (v2216[5] - v60) >> 3;
                              if (v33 < v61)
                              {
                                uint64_t v62 = *(void *)(v60 + 8 * v33);
                                if (v62)
                                {
                                  unint64_t v63 = *(unsigned __int16 *)(v62 + 2 * v36);
                                  uint64_t v65 = v2216[7];
                                  uint64_t v64 = v2216[8];
                                  unint64_t v2187 = (v64 - v65) >> 3;
                                  if (v2187 > v63)
                                  {
                                    uint64_t v66 = v65 + 8 * v63;
                                    if (v66 != v64 && *(_DWORD *)(v66 + 4) == v32)
                                    {
                                      uint64_t v2181 = v22[4];
                                      if (v33 < (v22[5] - v2181) >> 3)
                                      {
                                        uint64_t v67 = *(void *)(v2181 + 8 * v33);
                                        if (v67)
                                        {
                                          unint64_t v68 = *(unsigned __int16 *)(v67 + 2 * v36);
                                          uint64_t v69 = v22[7];
                                          uint64_t v2170 = v22[8];
                                          unint64_t v2158 = (v2170 - v69) >> 3;
                                          if (v2158 > v68)
                                          {
                                            uint64_t v70 = v69 + 8 * v68;
                                            if (v70 != v2170 && *(_DWORD *)(v70 + 4) == v32)
                                            {
                                              uint64_t v2132 = HIDWORD(*(void *)v27);
                                              unint64_t v2149 = *(void *)v27;
                                              unint64_t v71 = *(void *)v27 >> 39;
                                              if (v71 < v43
                                                && (uint64_t v72 = *(void *)(v42 + 8 * v71)) != 0
                                                && (unint64_t v73 = *(unsigned __int16 *)(v72 + 2 * (HIDWORD(v2149) & 0x7F)),
                                                    v48 > v73)
                                                && (uint64_t v74 = v47 + 8 * v73, v74 != v46)
                                                && *(_DWORD *)(v74 + 4) == v2132)
                                              {
                                                uint64_t v75 = (long long *)(v20[10] + 80 * v73);
                                              }
                                              else
                                              {
                                                uint64_t v75 = (long long *)v20[11];
                                              }
                                              if (v71 < v52
                                                && (uint64_t v76 = *(void *)(v51 + 8 * v71)) != 0
                                                && (unint64_t v77 = *(unsigned __int16 *)(v76 + 2 * (HIDWORD(v2149) & 0x7F)),
                                                    v57 > v77)
                                                && (uint64_t v78 = v56 + 8 * v77, v78 != v55)
                                                && *(_DWORD *)(v78 + 4) == v2132)
                                              {
                                                uint64_t v79 = v2223[10] + 16 * v77;
                                              }
                                              else
                                              {
                                                uint64_t v79 = v2223[11];
                                              }
                                              if (v71 < v61
                                                && (uint64_t v80 = *(void *)(v60 + 8 * v71)) != 0
                                                && (unint64_t v81 = *(unsigned __int16 *)(v80 + 2 * (HIDWORD(v2149) & 0x7F)),
                                                    v2187 > v81)
                                                && (uint64_t v82 = v65 + 8 * v81, v82 != v64)
                                                && *(_DWORD *)(v82 + 4) == v2132)
                                              {
                                                uint64_t v83 = (long long *)(v2216[10] + 24 * v81);
                                              }
                                              else
                                              {
                                                uint64_t v83 = (long long *)v2216[11];
                                              }
                                              if (v71 < (v22[5] - v2181) >> 3
                                                && (uint64_t v84 = *(void *)(v2181 + 8 * v71)) != 0
                                                && (unint64_t v85 = *(unsigned __int16 *)(v84 + 2 * (HIDWORD(v2149) & 0x7F)),
                                                    v2158 > v85)
                                                && (uint64_t v86 = v69 + 8 * v85, v86 != v2170)
                                                && *(_DWORD *)(v86 + 4) == v2132)
                                              {
                                                uint64_t v31 = (int *)(v22[10] + 4 * v85);
                                              }
                                              else
                                              {
                                                uint64_t v31 = (int *)v22[11];
                                              }
                                              md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v2234, v2149, v75, *(void *)v79, *(std::__shared_weak_count **)(v79 + 8), v83, v31);
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v27 += 8;
    }
    uint64_t v23 = (uint64_t *)(v2222 + 208);
    uint64_t v26 = v2202;
    if (v24 != v30)
    {
LABEL_22:
      if (v25 != v30) {
        goto LABEL_217;
      }
      goto LABEL_158;
    }
  }
  else if (v24 != v30)
  {
    goto LABEL_22;
  }
  uint64_t v2203 = v26;
  v2234 = &v2238;
  v2235 = v23;
  int v87 = v23;
  k = &v2230;
  uint64_t v88 = v19[7];
  uint64_t v89 = v19[8];
  while (v88 != v89)
  {
    unint64_t v91 = *(unsigned int *)(v88 + 4);
    unint64_t v92 = v91 >> 7;
    uint64_t v93 = v18[4];
    if (v91 >> 7 < (v18[5] - v93) >> 3)
    {
      uint64_t v94 = *(void *)(v93 + 8 * v92);
      if (v94)
      {
        uint64_t v95 = v91 & 0x7F;
        unint64_t v96 = *(unsigned __int16 *)(v94 + 2 * v95);
        uint64_t v98 = v18[7];
        uint64_t v97 = v18[8];
        if (v96 < (v97 - v98) >> 3)
        {
          uint64_t v99 = v98 + 8 * v96;
          if (v99 != v97 && *(_DWORD *)(v99 + 4) == v91)
          {
            uint64_t v101 = v20[4];
            unint64_t v102 = (v20[5] - v101) >> 3;
            if (v92 < v102)
            {
              uint64_t v103 = *(void *)(v101 + 8 * v92);
              if (v103)
              {
                unint64_t v104 = *(unsigned __int16 *)(v103 + 2 * v95);
                uint64_t v106 = v20[7];
                uint64_t v105 = v20[8];
                unint64_t v107 = (v105 - v106) >> 3;
                if (v107 > v104)
                {
                  uint64_t v108 = v106 + 8 * v104;
                  if (v108 != v105 && *(_DWORD *)(v108 + 4) == v91)
                  {
                    uint64_t v110 = v2223[4];
                    unint64_t v111 = (v2223[5] - v110) >> 3;
                    if (v92 < v111)
                    {
                      uint64_t v112 = *(void *)(v110 + 8 * v92);
                      if (v112)
                      {
                        unint64_t v113 = *(unsigned __int16 *)(v112 + 2 * v95);
                        uint64_t v115 = v2223[7];
                        uint64_t v114 = v2223[8];
                        unint64_t v116 = (v114 - v115) >> 3;
                        if (v116 > v113)
                        {
                          uint64_t v117 = v115 + 8 * v113;
                          if (v117 != v114 && *(_DWORD *)(v117 + 4) == v91)
                          {
                            uint64_t v119 = v2216[4];
                            unint64_t v120 = (v2216[5] - v119) >> 3;
                            if (v92 < v120)
                            {
                              uint64_t v121 = *(void *)(v119 + 8 * v92);
                              if (v121)
                              {
                                unint64_t v122 = *(unsigned __int16 *)(v121 + 2 * v95);
                                uint64_t v124 = v2216[7];
                                uint64_t v123 = v2216[8];
                                unint64_t v2195 = (v123 - v124) >> 3;
                                if (v2195 > v122)
                                {
                                  uint64_t v125 = v124 + 8 * v122;
                                  if (v125 != v123 && *(_DWORD *)(v125 + 4) == v91)
                                  {
                                    uint64_t v2188 = v22[4];
                                    if (v92 < (v22[5] - v2188) >> 3)
                                    {
                                      uint64_t v126 = *(void *)(v2188 + 8 * v92);
                                      if (v126)
                                      {
                                        unint64_t v127 = *(unsigned __int16 *)(v126 + 2 * v95);
                                        uint64_t v128 = v22[7];
                                        uint64_t v2182 = v22[8];
                                        unint64_t v2171 = (v2182 - v128) >> 3;
                                        if (v2171 > v127)
                                        {
                                          uint64_t v129 = v128 + 8 * v127;
                                          if (v129 != v2182 && *(_DWORD *)(v129 + 4) == v91)
                                          {
                                            uint64_t v2150 = HIDWORD(*(void *)v88);
                                            unint64_t v2159 = *(void *)v88;
                                            unint64_t v130 = *(void *)v88 >> 39;
                                            if (v130 < v102
                                              && (uint64_t v131 = *(void *)(v101 + 8 * v130)) != 0
                                              && (unint64_t v132 = *(unsigned __int16 *)(v131 + 2 * (HIDWORD(v2159) & 0x7F)),
                                                  v107 > v132)
                                              && (uint64_t v133 = v106 + 8 * v132, v133 != v105)
                                              && *(_DWORD *)(v133 + 4) == v2150)
                                            {
                                              unint64_t v134 = (long long *)(v20[10] + 80 * v132);
                                            }
                                            else
                                            {
                                              unint64_t v134 = (long long *)v20[11];
                                            }
                                            if (v130 < v111
                                              && (uint64_t v135 = *(void *)(v110 + 8 * v130)) != 0
                                              && (unint64_t v136 = *(unsigned __int16 *)(v135 + 2 * (HIDWORD(v2159) & 0x7F)),
                                                  v116 > v136)
                                              && (uint64_t v137 = v115 + 8 * v136, v137 != v114)
                                              && *(_DWORD *)(v137 + 4) == v2150)
                                            {
                                              uint64_t v138 = v2223[10] + 16 * v136;
                                            }
                                            else
                                            {
                                              uint64_t v138 = v2223[11];
                                            }
                                            if (v130 < v120
                                              && (uint64_t v139 = *(void *)(v119 + 8 * v130)) != 0
                                              && (unint64_t v140 = *(unsigned __int16 *)(v139 + 2 * (HIDWORD(v2159) & 0x7F)),
                                                  v2195 > v140)
                                              && (uint64_t v141 = v124 + 8 * v140, v141 != v123)
                                              && *(_DWORD *)(v141 + 4) == v2150)
                                            {
                                              uint64_t v142 = (long long *)(v2216[10] + 24 * v140);
                                            }
                                            else
                                            {
                                              uint64_t v142 = (long long *)v2216[11];
                                            }
                                            if (v130 < (v22[5] - v2188) >> 3
                                              && (uint64_t v143 = *(void *)(v2188 + 8 * v130)) != 0
                                              && (unint64_t v144 = *(unsigned __int16 *)(v143 + 2 * (HIDWORD(v2159) & 0x7F)),
                                                  v2171 > v144)
                                              && (uint64_t v145 = v128 + 8 * v144, v145 != v2182)
                                              && *(_DWORD *)(v145 + 4) == v2150)
                                            {
                                              v90 = (int *)(v22[10] + 4 * v144);
                                            }
                                            else
                                            {
                                              v90 = (int *)v22[11];
                                            }
                                            md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v2234, v2159, v134, *(void *)v138, *(std::__shared_weak_count **)(v138 + 8), v142, v90);
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v88 += 8;
  }
  uint64_t v23 = v87;
  uint64_t v26 = v2203;
  if (v25 == v30)
  {
LABEL_158:
    v2234 = &v2238;
    v2235 = v23;
    k = &v2230;
    uint64_t v146 = v20[7];
    uint64_t v147 = v20[8];
    if (v146 != v147)
    {
      v148 = (long long *)v20[10];
      do
      {
        unint64_t v150 = *(unsigned int *)(v146 + 4);
        unint64_t v151 = v150 >> 7;
        uint64_t v152 = v18[4];
        if (v150 >> 7 < (v18[5] - v152) >> 3)
        {
          uint64_t v153 = *(void *)(v152 + 8 * v151);
          if (v153)
          {
            uint64_t v154 = v150 & 0x7F;
            unint64_t v155 = *(unsigned __int16 *)(v153 + 2 * v154);
            uint64_t v157 = v18[7];
            uint64_t v156 = v18[8];
            if (v155 < (v156 - v157) >> 3)
            {
              uint64_t v158 = v157 + 8 * v155;
              if (v158 != v156 && *(_DWORD *)(v158 + 4) == v150)
              {
                uint64_t v160 = v19[4];
                if (v151 < (v19[5] - v160) >> 3)
                {
                  uint64_t v161 = *(void *)(v160 + 8 * v151);
                  if (v161)
                  {
                    unint64_t v162 = *(unsigned __int16 *)(v161 + 2 * v154);
                    uint64_t v164 = v19[7];
                    uint64_t v163 = v19[8];
                    if (v162 < (v163 - v164) >> 3)
                    {
                      uint64_t v165 = v164 + 8 * v162;
                      if (v165 != v163 && *(_DWORD *)(v165 + 4) == v150)
                      {
                        uint64_t v167 = v2223[4];
                        unint64_t v168 = (v2223[5] - v167) >> 3;
                        if (v151 < v168)
                        {
                          uint64_t v169 = *(void *)(v167 + 8 * v151);
                          if (v169)
                          {
                            unint64_t v170 = *(unsigned __int16 *)(v169 + 2 * v154);
                            uint64_t v172 = v2223[7];
                            uint64_t v171 = v2223[8];
                            unint64_t v173 = (v171 - v172) >> 3;
                            if (v173 > v170)
                            {
                              uint64_t v174 = v172 + 8 * v170;
                              if (v174 != v171 && *(_DWORD *)(v174 + 4) == v150)
                              {
                                uint64_t v176 = v2216[4];
                                unint64_t v177 = (v2216[5] - v176) >> 3;
                                if (v151 < v177)
                                {
                                  uint64_t v178 = *(void *)(v176 + 8 * v151);
                                  if (v178)
                                  {
                                    unint64_t v179 = *(unsigned __int16 *)(v178 + 2 * v154);
                                    uint64_t v181 = v2216[7];
                                    uint64_t v180 = v2216[8];
                                    unint64_t v182 = (v180 - v181) >> 3;
                                    if (v182 > v179)
                                    {
                                      uint64_t v183 = v181 + 8 * v179;
                                      if (v183 != v180 && *(_DWORD *)(v183 + 4) == v150)
                                      {
                                        uint64_t v184 = v22[4];
                                        unint64_t v185 = (v22[5] - v184) >> 3;
                                        if (v151 < v185)
                                        {
                                          uint64_t v186 = *(void *)(v184 + 8 * v151);
                                          if (v186)
                                          {
                                            unint64_t v187 = *(unsigned __int16 *)(v186 + 2 * v154);
                                            uint64_t v189 = v22[7];
                                            uint64_t v188 = v22[8];
                                            unint64_t v190 = (v188 - v189) >> 3;
                                            if (v190 > v187)
                                            {
                                              uint64_t v191 = v189 + 8 * v187;
                                              if (v191 != v188 && *(_DWORD *)(v191 + 4) == v150)
                                              {
                                                v2196 = v23;
                                                unint64_t v192 = *(void *)v146;
                                                uint64_t v193 = HIDWORD(*(void *)v146);
                                                unint64_t v194 = *(void *)v146 >> 39;
                                                if (v194 < v168
                                                  && (uint64_t v195 = *(void *)(v167 + 8 * v194)) != 0
                                                  && (unint64_t v196 = *(unsigned __int16 *)(v195 + 2 * (HIDWORD(v192) & 0x7F)),
                                                      v173 > v196)
                                                  && (uint64_t v197 = v172 + 8 * v196, v197 != v171)
                                                  && *(_DWORD *)(v197 + 4) == v193)
                                                {
                                                  uint64_t v198 = v2223[10] + 16 * v196;
                                                }
                                                else
                                                {
                                                  uint64_t v198 = v2223[11];
                                                }
                                                if (v194 < v177
                                                  && (uint64_t v199 = *(void *)(v176 + 8 * v194)) != 0
                                                  && (unint64_t v200 = *(unsigned __int16 *)(v199 + 2 * (HIDWORD(v192) & 0x7F)),
                                                      v182 > v200)
                                                  && (uint64_t v201 = v181 + 8 * v200, v201 != v180)
                                                  && *(_DWORD *)(v201 + 4) == v193)
                                                {
                                                  std::vector<unsigned int>::pointer v202 = (long long *)(v2216[10] + 24 * v200);
                                                }
                                                else
                                                {
                                                  std::vector<unsigned int>::pointer v202 = (long long *)v2216[11];
                                                }
                                                if (v194 < v185
                                                  && (uint64_t v203 = *(void *)(v184 + 8 * v194)) != 0
                                                  && (unint64_t v204 = *(unsigned __int16 *)(v203 + 2 * (HIDWORD(v192) & 0x7F)),
                                                      v190 > v204)
                                                  && (uint64_t v205 = v189 + 8 * v204, v205 != v188)
                                                  && *(_DWORD *)(v205 + 4) == v193)
                                                {
                                                  uint64_t v149 = (int *)(v22[10] + 4 * v204);
                                                }
                                                else
                                                {
                                                  uint64_t v149 = (int *)v22[11];
                                                }
                                                md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v2234, v192, v148, *(void *)v198, *(std::__shared_weak_count **)(v198 + 8), v202, v149);
                                                uint64_t v23 = v2196;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v148 += 5;
        v146 += 8;
      }
      while (v146 != v147);
    }
  }
LABEL_217:
  if (v2223 + 4 == v30)
  {
    v2234 = &v2238;
    v2235 = v23;
    k = &v2230;
    uint64_t v207 = v2223[7];
    uint64_t v208 = v2223[8];
    if (v207 != v208)
    {
      std::vector<unsigned int>::size_type v209 = (std::__shared_weak_count **)(v2223[10] + 8);
      do
      {
        unint64_t v236 = *(unsigned int *)(v207 + 4);
        unint64_t v237 = v236 >> 7;
        uint64_t v238 = v18[4];
        if (v236 >> 7 < (v18[5] - v238) >> 3)
        {
          uint64_t v239 = *(void *)(v238 + 8 * v237);
          if (v239)
          {
            uint64_t v240 = v236 & 0x7F;
            unint64_t v241 = *(unsigned __int16 *)(v239 + 2 * v240);
            uint64_t v243 = v18[7];
            uint64_t v242 = v18[8];
            if (v241 < (v242 - v243) >> 3)
            {
              uint64_t v244 = v243 + 8 * v241;
              if (v244 != v242 && *(_DWORD *)(v244 + 4) == v236)
              {
                uint64_t v246 = v19[4];
                if (v237 < (v19[5] - v246) >> 3)
                {
                  uint64_t v247 = *(void *)(v246 + 8 * v237);
                  if (v247)
                  {
                    unint64_t v248 = *(unsigned __int16 *)(v247 + 2 * v240);
                    uint64_t v250 = v19[7];
                    uint64_t v249 = v19[8];
                    if (v248 < (v249 - v250) >> 3)
                    {
                      uint64_t v251 = v250 + 8 * v248;
                      if (v251 != v249 && *(_DWORD *)(v251 + 4) == v236)
                      {
                        uint64_t v253 = v20[4];
                        unint64_t v254 = (v20[5] - v253) >> 3;
                        if (v237 < v254)
                        {
                          uint64_t v255 = *(void *)(v253 + 8 * v237);
                          if (v255)
                          {
                            unint64_t v256 = *(unsigned __int16 *)(v255 + 2 * v240);
                            uint64_t v258 = v20[7];
                            uint64_t v257 = v20[8];
                            unint64_t v259 = (v257 - v258) >> 3;
                            if (v259 > v256)
                            {
                              uint64_t v260 = v258 + 8 * v256;
                              if (v260 != v257 && *(_DWORD *)(v260 + 4) == v236)
                              {
                                uint64_t v262 = v2216[4];
                                unint64_t v263 = (v2216[5] - v262) >> 3;
                                if (v237 < v263)
                                {
                                  uint64_t v264 = *(void *)(v262 + 8 * v237);
                                  if (v264)
                                  {
                                    unint64_t v265 = *(unsigned __int16 *)(v264 + 2 * v240);
                                    uint64_t v267 = v2216[7];
                                    uint64_t v266 = v2216[8];
                                    unint64_t v268 = (v266 - v267) >> 3;
                                    if (v268 > v265)
                                    {
                                      uint64_t v269 = v267 + 8 * v265;
                                      if (v269 != v266 && *(_DWORD *)(v269 + 4) == v236)
                                      {
                                        uint64_t v270 = v22[4];
                                        unint64_t v271 = (v22[5] - v270) >> 3;
                                        if (v237 < v271)
                                        {
                                          uint64_t v272 = *(void *)(v270 + 8 * v237);
                                          if (v272)
                                          {
                                            unint64_t v273 = *(unsigned __int16 *)(v272 + 2 * v240);
                                            uint64_t v275 = v22[7];
                                            uint64_t v274 = v22[8];
                                            unint64_t v276 = (v274 - v275) >> 3;
                                            if (v276 > v273)
                                            {
                                              uint64_t v277 = v275 + 8 * v273;
                                              if (v277 != v274 && *(_DWORD *)(v277 + 4) == v236)
                                              {
                                                v2197 = v23;
                                                unint64_t v278 = *(void *)v207;
                                                uint64_t v279 = HIDWORD(*(void *)v207);
                                                unint64_t v280 = *(void *)v207 >> 39;
                                                if (v280 < v254
                                                  && (uint64_t v281 = *(void *)(v253 + 8 * v280)) != 0
                                                  && (unint64_t v282 = *(unsigned __int16 *)(v281 + 2 * (HIDWORD(v278) & 0x7F)),
                                                      v259 > v282)
                                                  && (uint64_t v283 = v258 + 8 * v282, v283 != v257)
                                                  && *(_DWORD *)(v283 + 4) == v279)
                                                {
                                                  v284 = (long long *)(v20[10] + 80 * v282);
                                                }
                                                else
                                                {
                                                  v284 = (long long *)v20[11];
                                                }
                                                if (v280 < v263
                                                  && (uint64_t v285 = *(void *)(v262 + 8 * v280)) != 0
                                                  && (unint64_t v286 = *(unsigned __int16 *)(v285 + 2 * (HIDWORD(v278) & 0x7F)),
                                                      v268 > v286)
                                                  && (uint64_t v287 = v267 + 8 * v286, v287 != v266)
                                                  && *(_DWORD *)(v287 + 4) == v279)
                                                {
                                                  long long v288 = (long long *)(v2216[10] + 24 * v286);
                                                }
                                                else
                                                {
                                                  long long v288 = (long long *)v2216[11];
                                                }
                                                if (v280 < v271
                                                  && (uint64_t v289 = *(void *)(v270 + 8 * v280)) != 0
                                                  && (unint64_t v290 = *(unsigned __int16 *)(v289 + 2 * (HIDWORD(v278) & 0x7F)),
                                                      v276 > v290)
                                                  && (uint64_t v291 = v275 + 8 * v290, v291 != v274)
                                                  && *(_DWORD *)(v291 + 4) == v279)
                                                {
                                                  v235 = (int *)(v22[10] + 4 * v290);
                                                }
                                                else
                                                {
                                                  v235 = (int *)v22[11];
                                                }
                                                md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v2234, v278, v284, (uint64_t)*(v209 - 1), *v209, v288, v235);
                                                uint64_t v23 = v2197;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v207 += 8;
        v209 += 2;
      }
      while (v207 != v208);
    }
  }
  if (v2216 + 4 == v30)
  {
    v2234 = &v2238;
    v2235 = v23;
    k = &v2230;
    uint64_t v210 = v2216[7];
    uint64_t v211 = v2216[8];
    if (v210 != v211)
    {
      std::vector<unsigned int>::pointer v212 = (long long *)v2216[10];
      do
      {
        unint64_t v293 = *(unsigned int *)(v210 + 4);
        unint64_t v294 = v293 >> 7;
        uint64_t v295 = v18[4];
        if (v293 >> 7 < (v18[5] - v295) >> 3)
        {
          uint64_t v296 = *(void *)(v295 + 8 * v294);
          if (v296)
          {
            uint64_t v297 = v293 & 0x7F;
            unint64_t v298 = *(unsigned __int16 *)(v296 + 2 * v297);
            uint64_t v300 = v18[7];
            uint64_t v299 = v18[8];
            if (v298 < (v299 - v300) >> 3)
            {
              uint64_t v301 = v300 + 8 * v298;
              if (v301 != v299 && *(_DWORD *)(v301 + 4) == v293)
              {
                uint64_t v303 = v19[4];
                if (v294 < (v19[5] - v303) >> 3)
                {
                  uint64_t v304 = *(void *)(v303 + 8 * v294);
                  if (v304)
                  {
                    unint64_t v305 = *(unsigned __int16 *)(v304 + 2 * v297);
                    uint64_t v307 = v19[7];
                    uint64_t v306 = v19[8];
                    if (v305 < (v306 - v307) >> 3)
                    {
                      uint64_t v308 = v307 + 8 * v305;
                      if (v308 != v306 && *(_DWORD *)(v308 + 4) == v293)
                      {
                        uint64_t v310 = v20[4];
                        unint64_t v311 = (v20[5] - v310) >> 3;
                        if (v294 < v311)
                        {
                          uint64_t v312 = *(void *)(v310 + 8 * v294);
                          if (v312)
                          {
                            unint64_t v313 = *(unsigned __int16 *)(v312 + 2 * v297);
                            uint64_t v315 = v20[7];
                            uint64_t v314 = v20[8];
                            unint64_t v316 = (v314 - v315) >> 3;
                            if (v316 > v313)
                            {
                              uint64_t v317 = v315 + 8 * v313;
                              if (v317 != v314 && *(_DWORD *)(v317 + 4) == v293)
                              {
                                uint64_t v319 = v2223[4];
                                unint64_t v320 = (v2223[5] - v319) >> 3;
                                if (v294 < v320)
                                {
                                  uint64_t v321 = *(void *)(v319 + 8 * v294);
                                  if (v321)
                                  {
                                    unint64_t v322 = *(unsigned __int16 *)(v321 + 2 * v297);
                                    uint64_t v324 = v2223[7];
                                    uint64_t v323 = v2223[8];
                                    unint64_t v325 = (v323 - v324) >> 3;
                                    if (v325 > v322)
                                    {
                                      uint64_t v326 = v324 + 8 * v322;
                                      if (v326 != v323 && *(_DWORD *)(v326 + 4) == v293)
                                      {
                                        uint64_t v327 = v22[4];
                                        unint64_t v328 = (v22[5] - v327) >> 3;
                                        if (v294 < v328)
                                        {
                                          uint64_t v329 = *(void *)(v327 + 8 * v294);
                                          if (v329)
                                          {
                                            unint64_t v330 = *(unsigned __int16 *)(v329 + 2 * v297);
                                            uint64_t v332 = v22[7];
                                            uint64_t v331 = v22[8];
                                            unint64_t v333 = (v331 - v332) >> 3;
                                            if (v333 > v330)
                                            {
                                              uint64_t v334 = v332 + 8 * v330;
                                              if (v334 != v331 && *(_DWORD *)(v334 + 4) == v293)
                                              {
                                                v335 = v23;
                                                unint64_t v336 = *(void *)v210;
                                                uint64_t v337 = HIDWORD(*(void *)v210);
                                                unint64_t v338 = *(void *)v210 >> 39;
                                                if (v338 < v311
                                                  && (uint64_t v339 = *(void *)(v310 + 8 * v338)) != 0
                                                  && (unint64_t v340 = *(unsigned __int16 *)(v339 + 2 * (HIDWORD(v336) & 0x7F)),
                                                      v316 > v340)
                                                  && (uint64_t v341 = v315 + 8 * v340, v341 != v314)
                                                  && *(_DWORD *)(v341 + 4) == v337)
                                                {
                                                  v342 = (long long *)(v20[10] + 80 * v340);
                                                }
                                                else
                                                {
                                                  v342 = (long long *)v20[11];
                                                }
                                                if (v338 < v320
                                                  && (uint64_t v343 = *(void *)(v319 + 8 * v338)) != 0
                                                  && (unint64_t v344 = *(unsigned __int16 *)(v343 + 2 * (HIDWORD(v336) & 0x7F)),
                                                      v325 > v344)
                                                  && (uint64_t v345 = v324 + 8 * v344, v345 != v323)
                                                  && *(_DWORD *)(v345 + 4) == v337)
                                                {
                                                  uint64_t v346 = v2223[10] + 16 * v344;
                                                }
                                                else
                                                {
                                                  uint64_t v346 = v2223[11];
                                                }
                                                if (v338 < v328
                                                  && (uint64_t v347 = *(void *)(v327 + 8 * v338)) != 0
                                                  && (unint64_t v348 = *(unsigned __int16 *)(v347 + 2 * (HIDWORD(v336) & 0x7F)),
                                                      v333 > v348)
                                                  && (uint64_t v349 = v332 + 8 * v348, v349 != v331)
                                                  && *(_DWORD *)(v349 + 4) == v337)
                                                {
                                                  uint64_t v292 = (int *)(v22[10] + 4 * v348);
                                                }
                                                else
                                                {
                                                  uint64_t v292 = (int *)v22[11];
                                                }
                                                md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v2234, v336, v342, *(void *)v346, *(std::__shared_weak_count **)(v346 + 8), v212, v292);
                                                uint64_t v23 = v335;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        std::vector<unsigned int>::pointer v212 = (long long *)((char *)v212 + 24);
        v210 += 8;
      }
      while (v210 != v211);
    }
  }
  if ((void *)v26 == v30)
  {
    v2234 = &v2238;
    v2235 = v23;
    k = &v2230;
    uint64_t v213 = v22[7];
    uint64_t v214 = v22[8];
    if (v213 != v214)
    {
      uint64_t v215 = (int *)v22[10];
      do
      {
        unint64_t v351 = *(unsigned int *)(v213 + 4);
        unint64_t v352 = v351 >> 7;
        uint64_t v353 = v18[4];
        if (v351 >> 7 < (v18[5] - v353) >> 3)
        {
          uint64_t v354 = *(void *)(v353 + 8 * v352);
          if (v354)
          {
            uint64_t v355 = v351 & 0x7F;
            unint64_t v356 = *(unsigned __int16 *)(v354 + 2 * v355);
            uint64_t v358 = v18[7];
            uint64_t v357 = v18[8];
            if (v356 < (v357 - v358) >> 3)
            {
              uint64_t v359 = v358 + 8 * v356;
              if (v359 != v357 && *(_DWORD *)(v359 + 4) == v351)
              {
                uint64_t v361 = v19[4];
                if (v352 < (v19[5] - v361) >> 3)
                {
                  uint64_t v362 = *(void *)(v361 + 8 * v352);
                  if (v362)
                  {
                    unint64_t v363 = *(unsigned __int16 *)(v362 + 2 * v355);
                    uint64_t v365 = v19[7];
                    uint64_t v364 = v19[8];
                    if (v363 < (v364 - v365) >> 3)
                    {
                      uint64_t v366 = v365 + 8 * v363;
                      if (v366 != v364 && *(_DWORD *)(v366 + 4) == v351)
                      {
                        uint64_t v368 = v20[4];
                        unint64_t v369 = (v20[5] - v368) >> 3;
                        if (v352 < v369)
                        {
                          uint64_t v370 = *(void *)(v368 + 8 * v352);
                          if (v370)
                          {
                            unint64_t v371 = *(unsigned __int16 *)(v370 + 2 * v355);
                            uint64_t v373 = v20[7];
                            uint64_t v372 = v20[8];
                            unint64_t v374 = (v372 - v373) >> 3;
                            if (v374 > v371)
                            {
                              uint64_t v375 = v373 + 8 * v371;
                              if (v375 != v372 && *(_DWORD *)(v375 + 4) == v351)
                              {
                                uint64_t v377 = v2223[4];
                                unint64_t v378 = (v2223[5] - v377) >> 3;
                                if (v352 < v378)
                                {
                                  uint64_t v379 = *(void *)(v377 + 8 * v352);
                                  if (v379)
                                  {
                                    unint64_t v380 = *(unsigned __int16 *)(v379 + 2 * v355);
                                    uint64_t v382 = v2223[7];
                                    uint64_t v381 = v2223[8];
                                    unint64_t v383 = (v381 - v382) >> 3;
                                    if (v383 > v380)
                                    {
                                      uint64_t v384 = v382 + 8 * v380;
                                      if (v384 != v381 && *(_DWORD *)(v384 + 4) == v351)
                                      {
                                        uint64_t v385 = v2216[4];
                                        unint64_t v386 = (v2216[5] - v385) >> 3;
                                        if (v352 < v386)
                                        {
                                          uint64_t v387 = *(void *)(v385 + 8 * v352);
                                          if (v387)
                                          {
                                            unint64_t v388 = *(unsigned __int16 *)(v387 + 2 * v355);
                                            uint64_t v390 = v2216[7];
                                            uint64_t v389 = v2216[8];
                                            unint64_t v391 = (v389 - v390) >> 3;
                                            if (v391 > v388)
                                            {
                                              uint64_t v392 = v390 + 8 * v388;
                                              if (v392 != v389 && *(_DWORD *)(v392 + 4) == v351)
                                              {
                                                unint64_t v393 = *(void *)v213;
                                                uint64_t v394 = HIDWORD(*(void *)v213);
                                                unint64_t v395 = *(void *)v213 >> 39;
                                                if (v395 < v369
                                                  && (uint64_t v396 = *(void *)(v368 + 8 * v395)) != 0
                                                  && (unint64_t v397 = *(unsigned __int16 *)(v396 + 2 * (HIDWORD(v393) & 0x7F)),
                                                      v374 > v397)
                                                  && (uint64_t v398 = v373 + 8 * v397, v398 != v372)
                                                  && *(_DWORD *)(v398 + 4) == v394)
                                                {
                                                  v399 = (long long *)(v20[10] + 80 * v397);
                                                }
                                                else
                                                {
                                                  v399 = (long long *)v20[11];
                                                }
                                                if (v395 < v378
                                                  && (uint64_t v400 = *(void *)(v377 + 8 * v395)) != 0
                                                  && (unint64_t v401 = *(unsigned __int16 *)(v400 + 2 * (HIDWORD(v393) & 0x7F)),
                                                      v383 > v401)
                                                  && (uint64_t v402 = v382 + 8 * v401, v402 != v381)
                                                  && *(_DWORD *)(v402 + 4) == v394)
                                                {
                                                  uint64_t v403 = v2223[10] + 16 * v401;
                                                }
                                                else
                                                {
                                                  uint64_t v403 = v2223[11];
                                                }
                                                if (v395 < v386
                                                  && (uint64_t v404 = *(void *)(v385 + 8 * v395)) != 0
                                                  && (unint64_t v405 = *(unsigned __int16 *)(v404 + 2 * (HIDWORD(v393) & 0x7F)),
                                                      v391 > v405)
                                                  && (uint64_t v406 = v390 + 8 * v405, v406 != v389)
                                                  && *(_DWORD *)(v406 + 4) == v394)
                                                {
                                                  v350 = (long long *)(v2216[10] + 24 * v405);
                                                }
                                                else
                                                {
                                                  v350 = (long long *)v2216[11];
                                                }
                                                md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v2234, v393, v399, *(void *)v403, *(std::__shared_weak_count **)(v403 + 8), v350, v215);
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v215;
        v213 += 8;
      }
      while (v213 != v214);
    }
  }
  if ((long long *)v2240 == &v2238)
  {
    (*(void (**)(long long *))(v2238 + 32))(&v2238);
    uint64_t v206 = v2222;
  }
  else
  {
    uint64_t v206 = v2222;
    if ((void)v2240) {
      (*(void (**)(void))(*(void *)v2240 + 40))(v2240);
    }
  }
  uint64_t v217 = *(int8x8_t **)(v206 + 120);
  unint64_t v216 = *(int8x8_t **)(v206 + 128);
  *(void *)&long long v2230 = v217;
  v2233 = v216;
  *(void *)&long long v2238 = &unk_1EF56D1B8;
  *((void *)&v2238 + 1) = &v2233;
  *(void *)&long long v2240 = &v2238;
  unint64_t v218 = (void *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(v217);
  uint64_t v219 = (void *)gdc::Registry::storage<arComponents::ShadowPipeline>(v217);
  unint64_t v220 = (void *)gdc::Registry::storage<arComponents::WorldTransform>(v217);
  uint64_t v221 = gdc::Registry::storage<arComponents::MeshComponent>(v217);
  v2224 = (void *)gdc::Registry::storage<arComponents::Boundary>(v217);
  v2217 = (void *)gdc::Registry::storage<arComponents::StyleColor>(v217);
  uint64_t v222 = gdc::Registry::storage<arComponents::VisibilityAlpha>(v217);
  uint64_t v223 = (void *)v222;
  unint64_t v224 = v2222 + 184;
  uint64_t v225 = v221 + 32;
  uint64_t v227 = v218[7];
  uint64_t v226 = v218[8];
  if (v219[8] - v219[7] >= (unint64_t)(v226 - v227)) {
    unint64_t v228 = v218 + 4;
  }
  else {
    unint64_t v228 = v219 + 4;
  }
  if (v220[8] - v220[7] < v228[4] - v228[3]) {
    unint64_t v228 = v220 + 4;
  }
  v2183 = (void *)v221;
  if (*(void *)(v221 + 64) - *(void *)(v221 + 56) < v228[4] - v228[3]) {
    unint64_t v228 = (void *)(v221 + 32);
  }
  if (v2224[8] - v2224[7] < v228[4] - v228[3]) {
    unint64_t v228 = v2224 + 4;
  }
  uint64_t v2204 = v222 + 32;
  if (v2217[8] - v2217[7] < v228[4] - v228[3]) {
    unint64_t v228 = v2217 + 4;
  }
  if (*(void *)(v222 + 64) - *(void *)(v222 + 56) >= v228[4] - v228[3]) {
    uint64_t v229 = v228;
  }
  else {
    uint64_t v229 = (void *)(v222 + 32);
  }
  if (v218 + 4 == v229)
  {
    v2234 = &v2238;
    v2235 = (uint64_t *)(v2222 + 184);
    k = &v2230;
    while (v227 != v226)
    {
      unint64_t v408 = *(unsigned int *)(v227 + 4);
      unint64_t v409 = v408 >> 7;
      uint64_t v410 = v219[4];
      if (v408 >> 7 < (v219[5] - v410) >> 3)
      {
        uint64_t v411 = *(void *)(v410 + 8 * v409);
        if (v411)
        {
          uint64_t v412 = v408 & 0x7F;
          unint64_t v413 = *(unsigned __int16 *)(v411 + 2 * v412);
          uint64_t v415 = v219[7];
          uint64_t v414 = v219[8];
          if (v413 < (v414 - v415) >> 3)
          {
            uint64_t v416 = v415 + 8 * v413;
            if (v416 != v414 && *(_DWORD *)(v416 + 4) == v408)
            {
              uint64_t v418 = v220[4];
              unint64_t v419 = (v220[5] - v418) >> 3;
              if (v409 < v419)
              {
                uint64_t v420 = *(void *)(v418 + 8 * v409);
                if (v420)
                {
                  unint64_t v421 = *(unsigned __int16 *)(v420 + 2 * v412);
                  uint64_t v422 = v220[7];
                  uint64_t v423 = v220[8];
                  unint64_t v424 = (v423 - v422) >> 3;
                  if (v424 > v421)
                  {
                    uint64_t v425 = v422 + 8 * v421;
                    if (v425 != v423 && *(_DWORD *)(v425 + 4) == v408)
                    {
                      uint64_t v427 = v2183[4];
                      unint64_t v428 = (v2183[5] - v427) >> 3;
                      if (v409 < v428)
                      {
                        uint64_t v429 = *(void *)(v427 + 8 * v409);
                        if (v429)
                        {
                          unint64_t v430 = *(unsigned __int16 *)(v429 + 2 * v412);
                          uint64_t v432 = v2183[7];
                          uint64_t v431 = v2183[8];
                          unint64_t v433 = (v431 - v432) >> 3;
                          if (v433 > v430)
                          {
                            uint64_t v434 = v432 + 8 * v430;
                            if (v434 != v431 && *(_DWORD *)(v434 + 4) == v408)
                            {
                              uint64_t v436 = v2224[4];
                              unint64_t v437 = (v2224[5] - v436) >> 3;
                              if (v409 < v437)
                              {
                                uint64_t v438 = *(void *)(v436 + 8 * v409);
                                if (v438)
                                {
                                  unint64_t v439 = *(unsigned __int16 *)(v438 + 2 * v412);
                                  uint64_t v440 = v2224[7];
                                  uint64_t v2172 = v2224[8];
                                  unint64_t v224 = v2222 + 184;
                                  unint64_t v2160 = (v2172 - v440) >> 3;
                                  if (v2160 > v439)
                                  {
                                    uint64_t v441 = v440 + 8 * v439;
                                    if (v441 != v2172 && *(_DWORD *)(v441 + 4) == v408)
                                    {
                                      unint64_t v224 = v2222 + 184;
                                      unint64_t v2133 = (uint64_t)(v2217[5] - v2217[4]) >> 3;
                                      uint64_t v2151 = v2217[4];
                                      if (v409 < v2133)
                                      {
                                        uint64_t v442 = *(void *)(v2151 + 8 * v409);
                                        if (v442)
                                        {
                                          unint64_t v2117 = *(unsigned __int16 *)(v442 + 2 * v412);
                                          uint64_t v2091 = v2217[7];
                                          uint64_t v2103 = v2217[8];
                                          unint64_t v2078 = (v2103 - v2091) >> 3;
                                          if (v2078 > v2117)
                                          {
                                            uint64_t v443 = v2091 + 8 * v2117;
                                            if (v443 != v2103 && *(_DWORD *)(v443 + 4) == v408)
                                            {
                                              uint64_t v444 = v223[5];
                                              uint64_t v2118 = v223[4];
                                              if (v409 < (v444 - v2118) >> 3)
                                              {
                                                unint64_t v445 = (v444 - v2118) >> 3;
                                                uint64_t v446 = *(void *)(v2118 + 8 * v409);
                                                if (v446)
                                                {
                                                  unint64_t v447 = *(unsigned __int16 *)(v446 + 2 * v412);
                                                  uint64_t v448 = v223[7];
                                                  uint64_t v2066 = v223[8];
                                                  unint64_t v2055 = (v2066 - v448) >> 3;
                                                  if (v2055 > v447)
                                                  {
                                                    uint64_t v449 = v448 + 8 * v447;
                                                    if (v449 != v2066 && *(_DWORD *)(v449 + 4) == v408)
                                                    {
                                                      unint64_t v450 = *(void *)v227;
                                                      uint64_t v451 = HIDWORD(*(void *)v227);
                                                      unint64_t v452 = *(void *)v227 >> 39;
                                                      if (v452 < v419
                                                        && (uint64_t v453 = *(void *)(v418 + 8 * v452)) != 0
                                                        && (unint64_t v454 = *(unsigned __int16 *)(v453
                                                                                       + 2 * (HIDWORD(v450) & 0x7F)),
                                                            v424 > v454)
                                                        && (uint64_t v455 = v422 + 8 * v454, v455 != v423)
                                                        && *(_DWORD *)(v455 + 4) == v451)
                                                      {
                                                        v456 = (long long *)(v220[10]
                                                                          + 80
                                                                          * *(unsigned __int16 *)(v453
                                                                                                + 2
                                                                                                * (HIDWORD(v450) & 0x7F)));
                                                      }
                                                      else
                                                      {
                                                        v456 = (long long *)v220[11];
                                                      }
                                                      if (v452 < v428
                                                        && (uint64_t v457 = *(void *)(v427 + 8 * v452)) != 0
                                                        && (unint64_t v458 = *(unsigned __int16 *)(v457
                                                                                       + 2 * (HIDWORD(v450) & 0x7F)),
                                                            v433 > v458)
                                                        && (uint64_t v459 = v432 + 8 * v458, v459 != v431)
                                                        && *(_DWORD *)(v459 + 4) == v451)
                                                      {
                                                        uint64_t v460 = v2183[10] + 16 * v458;
                                                      }
                                                      else
                                                      {
                                                        uint64_t v460 = v2183[11];
                                                      }
                                                      if (v452 < v437
                                                        && (uint64_t v461 = *(void *)(v436 + 8 * v452)) != 0
                                                        && (unint64_t v462 = *(unsigned __int16 *)(v461
                                                                                       + 2 * (HIDWORD(v450) & 0x7F)),
                                                            v2160 > v462)
                                                        && (uint64_t v463 = v440 + 8 * v462, v463 != v2172)
                                                        && *(_DWORD *)(v463 + 4) == v451)
                                                      {
                                                        v464 = (long long *)(v2224[10] + 24 * v462);
                                                      }
                                                      else
                                                      {
                                                        v464 = (long long *)v2224[11];
                                                      }
                                                      if (v452 < v2133
                                                        && (uint64_t v465 = *(void *)(v2151 + 8 * v452)) != 0
                                                        && (unint64_t v466 = *(unsigned __int16 *)(v465
                                                                                       + 2 * (HIDWORD(v450) & 0x7F)),
                                                            v2078 > v466)
                                                        && (uint64_t v467 = v2091 + 8 * v466, v467 != v2103)
                                                        && *(_DWORD *)(v467 + 4) == v451)
                                                      {
                                                        v468 = (long long *)(v2217[10] + 16 * v466);
                                                      }
                                                      else
                                                      {
                                                        v468 = (long long *)v2217[11];
                                                      }
                                                      if (v452 < v445
                                                        && (uint64_t v469 = *(void *)(v2118 + 8 * v452)) != 0
                                                        && (unint64_t v470 = *(unsigned __int16 *)(v469
                                                                                       + 2 * (HIDWORD(v450) & 0x7F)),
                                                            v2055 > v470)
                                                        && (uint64_t v471 = v448 + 8 * v470, v471 != v2066)
                                                        && *(_DWORD *)(v471 + 4) == v451)
                                                      {
                                                        v407 = (int *)(v223[10] + 4 * v470);
                                                      }
                                                      else
                                                      {
                                                        v407 = (int *)v223[11];
                                                      }
                                                      md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v2234, *(void *)v227, v456, *(void *)v460, *(std::__shared_weak_count **)(v460 + 8), v464, v468, v407);
                                                      unint64_t v224 = v2222 + 184;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v227 += 8;
    }
  }
  if (v219 + 4 == v229)
  {
    v2234 = &v2238;
    v2235 = (uint64_t *)v224;
    k = &v2230;
    uint64_t v230 = v219[7];
    for (uint64_t i = v219[8]; v230 != i; v230 += 8)
    {
      unint64_t v473 = *(unsigned int *)(v230 + 4);
      unint64_t v474 = v473 >> 7;
      uint64_t v475 = v218[4];
      if (v473 >> 7 < (v218[5] - v475) >> 3)
      {
        uint64_t v476 = *(void *)(v475 + 8 * v474);
        if (v476)
        {
          uint64_t v477 = v473 & 0x7F;
          unint64_t v478 = *(unsigned __int16 *)(v476 + 2 * v477);
          uint64_t v480 = v218[7];
          uint64_t v479 = v218[8];
          if (v478 < (v479 - v480) >> 3)
          {
            uint64_t v481 = v480 + 8 * v478;
            if (v481 != v479 && *(_DWORD *)(v481 + 4) == v473)
            {
              uint64_t v483 = v220[4];
              unint64_t v484 = (v220[5] - v483) >> 3;
              if (v474 < v484)
              {
                uint64_t v485 = *(void *)(v483 + 8 * v474);
                if (v485)
                {
                  unint64_t v486 = *(unsigned __int16 *)(v485 + 2 * v477);
                  uint64_t v487 = v220[7];
                  uint64_t v488 = v220[8];
                  unint64_t v489 = (v488 - v487) >> 3;
                  if (v489 > v486)
                  {
                    uint64_t v490 = v487 + 8 * v486;
                    if (v490 != v488 && *(_DWORD *)(v490 + 4) == v473)
                    {
                      uint64_t v492 = v2183[4];
                      unint64_t v493 = (v2183[5] - v492) >> 3;
                      if (v474 < v493)
                      {
                        uint64_t v494 = *(void *)(v492 + 8 * v474);
                        if (v494)
                        {
                          unint64_t v495 = *(unsigned __int16 *)(v494 + 2 * v477);
                          uint64_t v497 = v2183[7];
                          uint64_t v496 = v2183[8];
                          unint64_t v498 = (v496 - v497) >> 3;
                          if (v498 > v495)
                          {
                            uint64_t v499 = v497 + 8 * v495;
                            if (v499 != v496 && *(_DWORD *)(v499 + 4) == v473)
                            {
                              uint64_t v501 = v2224[4];
                              unint64_t v502 = (v2224[5] - v501) >> 3;
                              if (v474 < v502)
                              {
                                uint64_t v503 = *(void *)(v501 + 8 * v474);
                                if (v503)
                                {
                                  unint64_t v504 = *(unsigned __int16 *)(v503 + 2 * v477);
                                  uint64_t v505 = v2224[7];
                                  uint64_t v2173 = v2224[8];
                                  unint64_t v224 = v2222 + 184;
                                  unint64_t v2161 = (v2173 - v505) >> 3;
                                  if (v2161 > v504)
                                  {
                                    uint64_t v506 = v505 + 8 * v504;
                                    if (v506 != v2173 && *(_DWORD *)(v506 + 4) == v473)
                                    {
                                      unint64_t v224 = v2222 + 184;
                                      unint64_t v2134 = (uint64_t)(v2217[5] - v2217[4]) >> 3;
                                      uint64_t v2152 = v2217[4];
                                      if (v474 < v2134)
                                      {
                                        uint64_t v507 = *(void *)(v2152 + 8 * v474);
                                        if (v507)
                                        {
                                          unint64_t v2119 = *(unsigned __int16 *)(v507 + 2 * v477);
                                          uint64_t v2092 = v2217[7];
                                          uint64_t v2104 = v2217[8];
                                          unint64_t v2079 = (v2104 - v2092) >> 3;
                                          if (v2079 > v2119)
                                          {
                                            uint64_t v508 = v2092 + 8 * v2119;
                                            if (v508 != v2104 && *(_DWORD *)(v508 + 4) == v473)
                                            {
                                              uint64_t v509 = v223[5];
                                              uint64_t v2120 = v223[4];
                                              if (v474 < (v509 - v2120) >> 3)
                                              {
                                                unint64_t v510 = (v509 - v2120) >> 3;
                                                uint64_t v511 = *(void *)(v2120 + 8 * v474);
                                                if (v511)
                                                {
                                                  unint64_t v512 = *(unsigned __int16 *)(v511 + 2 * v477);
                                                  uint64_t v513 = v223[7];
                                                  uint64_t v2067 = v223[8];
                                                  unint64_t v2056 = (v2067 - v513) >> 3;
                                                  if (v2056 > v512)
                                                  {
                                                    uint64_t v514 = v513 + 8 * v512;
                                                    if (v514 != v2067 && *(_DWORD *)(v514 + 4) == v473)
                                                    {
                                                      unint64_t v515 = *(void *)v230;
                                                      uint64_t v516 = HIDWORD(*(void *)v230);
                                                      unint64_t v517 = *(void *)v230 >> 39;
                                                      if (v517 < v484
                                                        && (uint64_t v518 = *(void *)(v483 + 8 * v517)) != 0
                                                        && (unint64_t v519 = *(unsigned __int16 *)(v518
                                                                                       + 2 * (HIDWORD(v515) & 0x7F)),
                                                            v489 > v519)
                                                        && (uint64_t v520 = v487 + 8 * v519, v520 != v488)
                                                        && *(_DWORD *)(v520 + 4) == v516)
                                                      {
                                                        v521 = (long long *)(v220[10]
                                                                          + 80
                                                                          * *(unsigned __int16 *)(v518
                                                                                                + 2
                                                                                                * (HIDWORD(v515) & 0x7F)));
                                                      }
                                                      else
                                                      {
                                                        v521 = (long long *)v220[11];
                                                      }
                                                      if (v517 < v493
                                                        && (uint64_t v522 = *(void *)(v492 + 8 * v517)) != 0
                                                        && (unint64_t v523 = *(unsigned __int16 *)(v522
                                                                                       + 2 * (HIDWORD(v515) & 0x7F)),
                                                            v498 > v523)
                                                        && (uint64_t v524 = v497 + 8 * v523, v524 != v496)
                                                        && *(_DWORD *)(v524 + 4) == v516)
                                                      {
                                                        uint64_t v525 = v2183[10] + 16 * v523;
                                                      }
                                                      else
                                                      {
                                                        uint64_t v525 = v2183[11];
                                                      }
                                                      if (v517 < v502
                                                        && (uint64_t v526 = *(void *)(v501 + 8 * v517)) != 0
                                                        && (unint64_t v527 = *(unsigned __int16 *)(v526
                                                                                       + 2 * (HIDWORD(v515) & 0x7F)),
                                                            v2161 > v527)
                                                        && (uint64_t v528 = v505 + 8 * v527, v528 != v2173)
                                                        && *(_DWORD *)(v528 + 4) == v516)
                                                      {
                                                        v529 = (long long *)(v2224[10] + 24 * v527);
                                                      }
                                                      else
                                                      {
                                                        v529 = (long long *)v2224[11];
                                                      }
                                                      if (v517 < v2134
                                                        && (uint64_t v530 = *(void *)(v2152 + 8 * v517)) != 0
                                                        && (unint64_t v531 = *(unsigned __int16 *)(v530
                                                                                       + 2 * (HIDWORD(v515) & 0x7F)),
                                                            v2079 > v531)
                                                        && (uint64_t v532 = v2092 + 8 * v531, v532 != v2104)
                                                        && *(_DWORD *)(v532 + 4) == v516)
                                                      {
                                                        v533 = (long long *)(v2217[10] + 16 * v531);
                                                      }
                                                      else
                                                      {
                                                        v533 = (long long *)v2217[11];
                                                      }
                                                      if (v517 < v510
                                                        && (uint64_t v534 = *(void *)(v2120 + 8 * v517)) != 0
                                                        && (unint64_t v535 = *(unsigned __int16 *)(v534
                                                                                       + 2 * (HIDWORD(v515) & 0x7F)),
                                                            v2056 > v535)
                                                        && (uint64_t v536 = v513 + 8 * v535, v536 != v2067)
                                                        && *(_DWORD *)(v536 + 4) == v516)
                                                      {
                                                        v472 = (int *)(v223[10] + 4 * v535);
                                                      }
                                                      else
                                                      {
                                                        v472 = (int *)v223[11];
                                                      }
                                                      md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v2234, *(void *)v230, v521, *(void *)v525, *(std::__shared_weak_count **)(v525 + 8), v529, v533, v472);
                                                      unint64_t v224 = v2222 + 184;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v220 + 4 != v229)
  {
    if ((void *)v225 != v229) {
      goto LABEL_720;
    }
    goto LABEL_648;
  }
  v2234 = &v2238;
  v2235 = (uint64_t *)v224;
  k = &v2230;
  uint64_t v232 = v220[7];
  uint64_t v233 = v220[8];
  if (v232 != v233)
  {
    uint64_t v234 = (long long *)v220[10];
    do
    {
      unint64_t v538 = *(unsigned int *)(v232 + 4);
      unint64_t v539 = v538 >> 7;
      uint64_t v540 = v218[4];
      if (v538 >> 7 < (v218[5] - v540) >> 3)
      {
        uint64_t v541 = *(void *)(v540 + 8 * v539);
        if (v541)
        {
          uint64_t v542 = v538 & 0x7F;
          unint64_t v543 = *(unsigned __int16 *)(v541 + 2 * v542);
          uint64_t v545 = v218[7];
          uint64_t v544 = v218[8];
          if (v543 < (v544 - v545) >> 3)
          {
            uint64_t v546 = v545 + 8 * v543;
            if (v546 != v544 && *(_DWORD *)(v546 + 4) == v538)
            {
              uint64_t v548 = v219[4];
              if (v539 < (v219[5] - v548) >> 3)
              {
                uint64_t v549 = *(void *)(v548 + 8 * v539);
                if (v549)
                {
                  unint64_t v550 = *(unsigned __int16 *)(v549 + 2 * v542);
                  uint64_t v552 = v219[7];
                  uint64_t v551 = v219[8];
                  if (v550 < (v551 - v552) >> 3)
                  {
                    uint64_t v553 = v552 + 8 * v550;
                    if (v553 != v551 && *(_DWORD *)(v553 + 4) == v538)
                    {
                      uint64_t v555 = v2183[4];
                      unint64_t v556 = (v2183[5] - v555) >> 3;
                      if (v539 < v556)
                      {
                        uint64_t v557 = *(void *)(v555 + 8 * v539);
                        if (v557)
                        {
                          unint64_t v558 = *(unsigned __int16 *)(v557 + 2 * v542);
                          uint64_t v560 = v2183[7];
                          uint64_t v559 = v2183[8];
                          unint64_t v561 = (v559 - v560) >> 3;
                          if (v561 > v558)
                          {
                            uint64_t v562 = v560 + 8 * v558;
                            if (v562 != v559 && *(_DWORD *)(v562 + 4) == v538)
                            {
                              uint64_t v564 = v2224[4];
                              unint64_t v565 = (v2224[5] - v564) >> 3;
                              if (v539 < v565)
                              {
                                uint64_t v566 = *(void *)(v564 + 8 * v539);
                                if (v566)
                                {
                                  unint64_t v567 = *(unsigned __int16 *)(v566 + 2 * v542);
                                  uint64_t v568 = v2224[7];
                                  uint64_t v569 = v2224[8];
                                  unint64_t v570 = (v569 - v568) >> 3;
                                  if (v570 > v567)
                                  {
                                    uint64_t v571 = v568 + 8 * v567;
                                    if (v571 != v569 && *(_DWORD *)(v571 + 4) == v538)
                                    {
                                      uint64_t v572 = v2217[4];
                                      unint64_t v573 = (v2217[5] - v572) >> 3;
                                      if (v539 < v573)
                                      {
                                        uint64_t v574 = *(void *)(v572 + 8 * v539);
                                        if (v574)
                                        {
                                          unint64_t v575 = *(unsigned __int16 *)(v574 + 2 * v542);
                                          uint64_t v577 = v2217[7];
                                          uint64_t v576 = v2217[8];
                                          unint64_t v2174 = (v576 - v577) >> 3;
                                          if (v2174 > v575)
                                          {
                                            uint64_t v578 = v577 + 8 * v575;
                                            if (v578 != v576 && *(_DWORD *)(v578 + 4) == v538)
                                            {
                                              uint64_t v2162 = v223[4];
                                              if (v539 < (v223[5] - v2162) >> 3)
                                              {
                                                uint64_t v579 = *(void *)(v2162 + 8 * v539);
                                                if (v579)
                                                {
                                                  unint64_t v580 = *(unsigned __int16 *)(v579 + 2 * v542);
                                                  uint64_t v581 = v223[7];
                                                  uint64_t v2153 = v223[8];
                                                  unint64_t v2135 = (v2153 - v581) >> 3;
                                                  if (v2135 > v580)
                                                  {
                                                    uint64_t v582 = v581 + 8 * v580;
                                                    if (v582 != v2153 && *(_DWORD *)(v582 + 4) == v538)
                                                    {
                                                      uint64_t v2105 = HIDWORD(*(void *)v232);
                                                      unint64_t v2121 = *(void *)v232;
                                                      unint64_t v583 = *(void *)v232 >> 39;
                                                      if (v583 < v556
                                                        && (uint64_t v584 = *(void *)(v555 + 8 * v583)) != 0
                                                        && (unint64_t v585 = *(unsigned __int16 *)(v584
                                                                                       + 2 * (HIDWORD(v2121) & 0x7F)),
                                                            v561 > v585)
                                                        && (uint64_t v586 = v560 + 8 * v585, v586 != v559)
                                                        && *(_DWORD *)(v586 + 4) == v2105)
                                                      {
                                                        uint64_t v587 = v2183[10] + 16 * v585;
                                                      }
                                                      else
                                                      {
                                                        uint64_t v587 = v2183[11];
                                                      }
                                                      if (v583 < v565
                                                        && (uint64_t v588 = *(void *)(v564 + 8 * v583)) != 0
                                                        && (unint64_t v589 = *(unsigned __int16 *)(v588
                                                                                       + 2 * (HIDWORD(v2121) & 0x7F)),
                                                            v570 > v589)
                                                        && (uint64_t v590 = v568 + 8 * v589, v590 != v569)
                                                        && *(_DWORD *)(v590 + 4) == v2105)
                                                      {
                                                        v591 = (long long *)(v2224[10] + 24 * v589);
                                                      }
                                                      else
                                                      {
                                                        v591 = (long long *)v2224[11];
                                                      }
                                                      if (v583 < v573
                                                        && (uint64_t v592 = *(void *)(v572 + 8 * v583)) != 0
                                                        && (unint64_t v593 = *(unsigned __int16 *)(v592
                                                                                       + 2 * (HIDWORD(v2121) & 0x7F)),
                                                            v2174 > v593)
                                                        && (uint64_t v594 = v577 + 8 * v593, v594 != v576)
                                                        && *(_DWORD *)(v594 + 4) == v2105)
                                                      {
                                                        v595 = (long long *)(v2217[10] + 16 * v593);
                                                      }
                                                      else
                                                      {
                                                        v595 = (long long *)v2217[11];
                                                      }
                                                      if (v583 < (v223[5] - v2162) >> 3
                                                        && (uint64_t v596 = *(void *)(v2162 + 8 * v583)) != 0
                                                        && (unint64_t v597 = *(unsigned __int16 *)(v596
                                                                                       + 2 * (HIDWORD(v2121) & 0x7F)),
                                                            v2135 > v597)
                                                        && (uint64_t v598 = v581 + 8 * v597, v598 != v2153)
                                                        && *(_DWORD *)(v598 + 4) == v2105)
                                                      {
                                                        v537 = (int *)(v223[10] + 4 * v597);
                                                      }
                                                      else
                                                      {
                                                        v537 = (int *)v223[11];
                                                      }
                                                      md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v2234, v2121, v234, *(void *)v587, *(std::__shared_weak_count **)(v587 + 8), v591, v595, v537);
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v234 += 5;
      v232 += 8;
    }
    while (v232 != v233);
  }
  unint64_t v224 = v2222 + 184;
  if ((void *)v225 == v229)
  {
LABEL_648:
    v2234 = &v2238;
    v2235 = (uint64_t *)v224;
    k = &v2230;
    uint64_t v599 = v2183[7];
    uint64_t v600 = v2183[8];
    if (v599 != v600)
    {
      v601 = (std::__shared_weak_count **)(v2183[10] + 8);
      do
      {
        unint64_t v603 = *(unsigned int *)(v599 + 4);
        unint64_t v604 = v603 >> 7;
        uint64_t v605 = v218[4];
        if (v603 >> 7 < (v218[5] - v605) >> 3)
        {
          uint64_t v606 = *(void *)(v605 + 8 * v604);
          if (v606)
          {
            uint64_t v607 = v603 & 0x7F;
            unint64_t v608 = *(unsigned __int16 *)(v606 + 2 * v607);
            uint64_t v610 = v218[7];
            uint64_t v609 = v218[8];
            if (v608 < (v609 - v610) >> 3)
            {
              uint64_t v611 = v610 + 8 * v608;
              if (v611 != v609 && *(_DWORD *)(v611 + 4) == v603)
              {
                uint64_t v613 = v219[4];
                if (v604 < (v219[5] - v613) >> 3)
                {
                  uint64_t v614 = *(void *)(v613 + 8 * v604);
                  if (v614)
                  {
                    unint64_t v615 = *(unsigned __int16 *)(v614 + 2 * v607);
                    uint64_t v617 = v219[7];
                    uint64_t v616 = v219[8];
                    if (v615 < (v616 - v617) >> 3)
                    {
                      uint64_t v618 = v617 + 8 * v615;
                      if (v618 != v616 && *(_DWORD *)(v618 + 4) == v603)
                      {
                        uint64_t v620 = v220[4];
                        unint64_t v621 = (v220[5] - v620) >> 3;
                        if (v604 < v621)
                        {
                          uint64_t v622 = *(void *)(v620 + 8 * v604);
                          if (v622)
                          {
                            unint64_t v623 = *(unsigned __int16 *)(v622 + 2 * v607);
                            uint64_t v625 = v220[7];
                            uint64_t v624 = v220[8];
                            unint64_t v626 = (v624 - v625) >> 3;
                            if (v626 > v623)
                            {
                              uint64_t v627 = v625 + 8 * v623;
                              if (v627 != v624 && *(_DWORD *)(v627 + 4) == v603)
                              {
                                uint64_t v629 = v2224[4];
                                unint64_t v630 = (v2224[5] - v629) >> 3;
                                if (v604 < v630)
                                {
                                  uint64_t v631 = *(void *)(v629 + 8 * v604);
                                  if (v631)
                                  {
                                    unint64_t v632 = *(unsigned __int16 *)(v631 + 2 * v607);
                                    uint64_t v633 = v2224[7];
                                    uint64_t v634 = v2224[8];
                                    unint64_t v635 = (v634 - v633) >> 3;
                                    if (v635 > v632)
                                    {
                                      uint64_t v636 = v633 + 8 * v632;
                                      if (v636 != v634 && *(_DWORD *)(v636 + 4) == v603)
                                      {
                                        uint64_t v637 = v2217[4];
                                        unint64_t v638 = (v2217[5] - v637) >> 3;
                                        if (v604 < v638)
                                        {
                                          uint64_t v639 = *(void *)(v637 + 8 * v604);
                                          if (v639)
                                          {
                                            unint64_t v640 = *(unsigned __int16 *)(v639 + 2 * v607);
                                            uint64_t v642 = v2217[7];
                                            uint64_t v641 = v2217[8];
                                            unint64_t v2175 = (v641 - v642) >> 3;
                                            if (v2175 > v640)
                                            {
                                              uint64_t v643 = v642 + 8 * v640;
                                              if (v643 != v641 && *(_DWORD *)(v643 + 4) == v603)
                                              {
                                                uint64_t v2163 = v223[4];
                                                if (v604 < (v223[5] - v2163) >> 3)
                                                {
                                                  uint64_t v644 = *(void *)(v2163 + 8 * v604);
                                                  if (v644)
                                                  {
                                                    unint64_t v645 = *(unsigned __int16 *)(v644 + 2 * v607);
                                                    uint64_t v646 = v223[7];
                                                    uint64_t v2154 = v223[8];
                                                    unint64_t v2136 = (v2154 - v646) >> 3;
                                                    if (v2136 > v645)
                                                    {
                                                      uint64_t v647 = v646 + 8 * v645;
                                                      if (v647 != v2154 && *(_DWORD *)(v647 + 4) == v603)
                                                      {
                                                        uint64_t v2106 = HIDWORD(*(void *)v599);
                                                        unint64_t v2122 = *(void *)v599;
                                                        unint64_t v648 = *(void *)v599 >> 39;
                                                        if (v648 < v621
                                                          && (uint64_t v649 = *(void *)(v620 + 8 * v648)) != 0
                                                          && (unint64_t v650 = *(unsigned __int16 *)(v649
                                                                                         + 2 * (HIDWORD(v2122) & 0x7F)),
                                                              v626 > v650)
                                                          && (uint64_t v651 = v625 + 8 * v650, v651 != v624)
                                                          && *(_DWORD *)(v651 + 4) == v2106)
                                                        {
                                                          v652 = (long long *)(v220[10] + 80 * v650);
                                                        }
                                                        else
                                                        {
                                                          v652 = (long long *)v220[11];
                                                        }
                                                        if (v648 < v630
                                                          && (uint64_t v653 = *(void *)(v629 + 8 * v648)) != 0
                                                          && (unint64_t v654 = *(unsigned __int16 *)(v653
                                                                                         + 2 * (HIDWORD(v2122) & 0x7F)),
                                                              v635 > v654)
                                                          && (uint64_t v655 = v633 + 8 * v654, v655 != v634)
                                                          && *(_DWORD *)(v655 + 4) == v2106)
                                                        {
                                                          v656 = (long long *)(v2224[10] + 24 * v654);
                                                        }
                                                        else
                                                        {
                                                          v656 = (long long *)v2224[11];
                                                        }
                                                        if (v648 < v638
                                                          && (uint64_t v657 = *(void *)(v637 + 8 * v648)) != 0
                                                          && (unint64_t v658 = *(unsigned __int16 *)(v657
                                                                                         + 2 * (HIDWORD(v2122) & 0x7F)),
                                                              v2175 > v658)
                                                          && (uint64_t v659 = v642 + 8 * v658, v659 != v641)
                                                          && *(_DWORD *)(v659 + 4) == v2106)
                                                        {
                                                          v660 = (long long *)(v2217[10] + 16 * v658);
                                                        }
                                                        else
                                                        {
                                                          v660 = (long long *)v2217[11];
                                                        }
                                                        if (v648 < (v223[5] - v2163) >> 3
                                                          && (uint64_t v661 = *(void *)(v2163 + 8 * v648)) != 0
                                                          && (unint64_t v662 = *(unsigned __int16 *)(v661
                                                                                         + 2 * (HIDWORD(v2122) & 0x7F)),
                                                              v2136 > v662)
                                                          && (uint64_t v663 = v646 + 8 * v662, v663 != v2154)
                                                          && *(_DWORD *)(v663 + 4) == v2106)
                                                        {
                                                          v602 = (int *)(v223[10] + 4 * v662);
                                                        }
                                                        else
                                                        {
                                                          v602 = (int *)v223[11];
                                                        }
                                                        md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v2234, v2122, v652, (uint64_t)*(v601 - 1), *v601, v656, v660, v602);
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v599 += 8;
        v601 += 2;
      }
      while (v599 != v600);
    }
    unint64_t v224 = v2222 + 184;
  }
LABEL_720:
  if (v2224 + 4 == v229)
  {
    v2234 = &v2238;
    v2235 = (uint64_t *)v224;
    k = &v2230;
    uint64_t v664 = v2224[7];
    uint64_t v665 = v2224[8];
    if (v664 != v665)
    {
      v666 = (long long *)v2224[10];
      do
      {
        unint64_t v668 = *(unsigned int *)(v664 + 4);
        unint64_t v669 = v668 >> 7;
        uint64_t v670 = v218[4];
        if (v668 >> 7 < (v218[5] - v670) >> 3)
        {
          uint64_t v671 = *(void *)(v670 + 8 * v669);
          if (v671)
          {
            uint64_t v672 = v668 & 0x7F;
            unint64_t v673 = *(unsigned __int16 *)(v671 + 2 * v672);
            uint64_t v675 = v218[7];
            uint64_t v674 = v218[8];
            if (v673 < (v674 - v675) >> 3)
            {
              uint64_t v676 = v675 + 8 * v673;
              if (v676 != v674 && *(_DWORD *)(v676 + 4) == v668)
              {
                uint64_t v678 = v219[4];
                if (v669 < (v219[5] - v678) >> 3)
                {
                  uint64_t v679 = *(void *)(v678 + 8 * v669);
                  if (v679)
                  {
                    unint64_t v680 = *(unsigned __int16 *)(v679 + 2 * v672);
                    uint64_t v682 = v219[7];
                    uint64_t v681 = v219[8];
                    if (v680 < (v681 - v682) >> 3)
                    {
                      uint64_t v683 = v682 + 8 * v680;
                      if (v683 != v681 && *(_DWORD *)(v683 + 4) == v668)
                      {
                        uint64_t v685 = v220[4];
                        unint64_t v686 = (v220[5] - v685) >> 3;
                        if (v669 < v686)
                        {
                          uint64_t v687 = *(void *)(v685 + 8 * v669);
                          if (v687)
                          {
                            unint64_t v688 = *(unsigned __int16 *)(v687 + 2 * v672);
                            uint64_t v690 = v220[7];
                            uint64_t v689 = v220[8];
                            unint64_t v691 = (v689 - v690) >> 3;
                            if (v691 > v688)
                            {
                              uint64_t v692 = v690 + 8 * v688;
                              if (v692 != v689 && *(_DWORD *)(v692 + 4) == v668)
                              {
                                uint64_t v694 = v2183[4];
                                unint64_t v695 = (v2183[5] - v694) >> 3;
                                if (v669 < v695)
                                {
                                  uint64_t v696 = *(void *)(v694 + 8 * v669);
                                  if (v696)
                                  {
                                    unint64_t v697 = *(unsigned __int16 *)(v696 + 2 * v672);
                                    uint64_t v698 = v2183[7];
                                    uint64_t v699 = v2183[8];
                                    unint64_t v700 = (v699 - v698) >> 3;
                                    if (v700 > v697)
                                    {
                                      uint64_t v701 = v698 + 8 * v697;
                                      if (v701 != v699 && *(_DWORD *)(v701 + 4) == v668)
                                      {
                                        uint64_t v702 = v2217[4];
                                        unint64_t v703 = (v2217[5] - v702) >> 3;
                                        if (v669 < v703)
                                        {
                                          uint64_t v704 = *(void *)(v702 + 8 * v669);
                                          if (v704)
                                          {
                                            unint64_t v705 = *(unsigned __int16 *)(v704 + 2 * v672);
                                            uint64_t v707 = v2217[7];
                                            uint64_t v706 = v2217[8];
                                            unint64_t v708 = (v706 - v707) >> 3;
                                            if (v708 > v705)
                                            {
                                              uint64_t v709 = v707 + 8 * v705;
                                              if (v709 != v706 && *(_DWORD *)(v709 + 4) == v668)
                                              {
                                                uint64_t v710 = v223[4];
                                                unint64_t v2189 = (v223[5] - v710) >> 3;
                                                if (v669 < v2189)
                                                {
                                                  uint64_t v711 = *(void *)(v710 + 8 * v669);
                                                  if (v711)
                                                  {
                                                    unint64_t v712 = *(unsigned __int16 *)(v711 + 2 * v672);
                                                    uint64_t v2164 = v223[7];
                                                    uint64_t v2176 = v223[8];
                                                    unint64_t v713 = (v2176 - v2164) >> 3;
                                                    if (v713 > v712)
                                                    {
                                                      uint64_t v714 = v2164 + 8 * v712;
                                                      if (v714 != v2176 && *(_DWORD *)(v714 + 4) == v668)
                                                      {
                                                        uint64_t v2137 = HIDWORD(*(void *)v664);
                                                        unint64_t v2155 = *(void *)v664;
                                                        unint64_t v715 = *(void *)v664 >> 39;
                                                        if (v715 < v686
                                                          && (uint64_t v716 = *(void *)(v685 + 8 * v715)) != 0
                                                          && (unint64_t v717 = *(unsigned __int16 *)(v716
                                                                                         + 2 * (HIDWORD(v2155) & 0x7F)),
                                                              v691 > v717)
                                                          && (uint64_t v718 = v690 + 8 * v717, v718 != v689)
                                                          && *(_DWORD *)(v718 + 4) == v2137)
                                                        {
                                                          v719 = (long long *)(v220[10] + 80 * v717);
                                                        }
                                                        else
                                                        {
                                                          v719 = (long long *)v220[11];
                                                        }
                                                        if (v715 < v695
                                                          && (uint64_t v720 = *(void *)(v694 + 8 * v715)) != 0
                                                          && (unint64_t v721 = *(unsigned __int16 *)(v720
                                                                                         + 2 * (HIDWORD(v2155) & 0x7F)),
                                                              v700 > v721)
                                                          && (uint64_t v722 = v698 + 8 * v721, v722 != v699)
                                                          && *(_DWORD *)(v722 + 4) == v2137)
                                                        {
                                                          uint64_t v723 = v2183[10] + 16 * v721;
                                                        }
                                                        else
                                                        {
                                                          uint64_t v723 = v2183[11];
                                                        }
                                                        if (v715 < v703
                                                          && (uint64_t v724 = *(void *)(v702 + 8 * v715)) != 0
                                                          && (unint64_t v725 = *(unsigned __int16 *)(v724
                                                                                         + 2 * (HIDWORD(v2155) & 0x7F)),
                                                              v708 > v725)
                                                          && (uint64_t v726 = v707 + 8 * v725, v726 != v706)
                                                          && *(_DWORD *)(v726 + 4) == v2137)
                                                        {
                                                          v727 = (long long *)(v2217[10] + 16 * v725);
                                                        }
                                                        else
                                                        {
                                                          v727 = (long long *)v2217[11];
                                                        }
                                                        if (v715 < v2189
                                                          && (uint64_t v728 = *(void *)(v710 + 8 * v715)) != 0
                                                          && (unint64_t v729 = *(unsigned __int16 *)(v728
                                                                                         + 2 * (HIDWORD(v2155) & 0x7F)),
                                                              v713 > v729)
                                                          && (uint64_t v730 = v2164 + 8 * v729, v730 != v2176)
                                                          && *(_DWORD *)(v730 + 4) == v2137)
                                                        {
                                                          v667 = (int *)(v223[10] + 4 * v729);
                                                        }
                                                        else
                                                        {
                                                          v667 = (int *)v223[11];
                                                        }
                                                        md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v2234, v2155, v719, *(void *)v723, *(std::__shared_weak_count **)(v723 + 8), v666, v727, v667);
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v666 = (long long *)((char *)v666 + 24);
        v664 += 8;
      }
      while (v664 != v665);
    }
    unint64_t v224 = v2222 + 184;
  }
  if (v2217 + 4 == v229)
  {
    v2234 = &v2238;
    v2235 = (uint64_t *)v224;
    k = &v2230;
    uint64_t v731 = v2217[7];
    uint64_t v732 = v2217[8];
    if (v731 != v732)
    {
      v733 = (long long *)v2217[10];
      do
      {
        unint64_t v735 = *(unsigned int *)(v731 + 4);
        unint64_t v736 = v735 >> 7;
        uint64_t v737 = v218[4];
        if (v735 >> 7 < (v218[5] - v737) >> 3)
        {
          uint64_t v738 = *(void *)(v737 + 8 * v736);
          if (v738)
          {
            uint64_t v739 = v735 & 0x7F;
            unint64_t v740 = *(unsigned __int16 *)(v738 + 2 * v739);
            uint64_t v742 = v218[7];
            uint64_t v741 = v218[8];
            if (v740 < (v741 - v742) >> 3)
            {
              uint64_t v743 = v742 + 8 * v740;
              if (v743 != v741 && *(_DWORD *)(v743 + 4) == v735)
              {
                uint64_t v745 = v219[4];
                if (v736 < (v219[5] - v745) >> 3)
                {
                  uint64_t v746 = *(void *)(v745 + 8 * v736);
                  if (v746)
                  {
                    unint64_t v747 = *(unsigned __int16 *)(v746 + 2 * v739);
                    uint64_t v749 = v219[7];
                    uint64_t v748 = v219[8];
                    if (v747 < (v748 - v749) >> 3)
                    {
                      uint64_t v750 = v749 + 8 * v747;
                      if (v750 != v748 && *(_DWORD *)(v750 + 4) == v735)
                      {
                        uint64_t v752 = v220[4];
                        unint64_t v753 = (v220[5] - v752) >> 3;
                        if (v736 < v753)
                        {
                          uint64_t v754 = *(void *)(v752 + 8 * v736);
                          if (v754)
                          {
                            unint64_t v755 = *(unsigned __int16 *)(v754 + 2 * v739);
                            uint64_t v757 = v220[7];
                            uint64_t v756 = v220[8];
                            unint64_t v758 = (v756 - v757) >> 3;
                            if (v758 > v755)
                            {
                              uint64_t v759 = v757 + 8 * v755;
                              if (v759 != v756 && *(_DWORD *)(v759 + 4) == v735)
                              {
                                uint64_t v761 = v2183[4];
                                unint64_t v762 = (v2183[5] - v761) >> 3;
                                if (v736 < v762)
                                {
                                  uint64_t v763 = *(void *)(v761 + 8 * v736);
                                  if (v763)
                                  {
                                    unint64_t v764 = *(unsigned __int16 *)(v763 + 2 * v739);
                                    uint64_t v765 = v2183[7];
                                    uint64_t v766 = v2183[8];
                                    unint64_t v767 = (v766 - v765) >> 3;
                                    if (v767 > v764)
                                    {
                                      uint64_t v768 = v765 + 8 * v764;
                                      if (v768 != v766 && *(_DWORD *)(v768 + 4) == v735)
                                      {
                                        uint64_t v769 = v2224[4];
                                        unint64_t v770 = (v2224[5] - v769) >> 3;
                                        if (v736 < v770)
                                        {
                                          uint64_t v771 = *(void *)(v769 + 8 * v736);
                                          if (v771)
                                          {
                                            unint64_t v772 = *(unsigned __int16 *)(v771 + 2 * v739);
                                            uint64_t v774 = v2224[7];
                                            uint64_t v773 = v2224[8];
                                            unint64_t v2198 = (v773 - v774) >> 3;
                                            if (v2198 > v772)
                                            {
                                              uint64_t v775 = v774 + 8 * v772;
                                              if (v775 != v773 && *(_DWORD *)(v775 + 4) == v735)
                                              {
                                                uint64_t v2190 = v223[4];
                                                if (v736 < (v223[5] - v2190) >> 3)
                                                {
                                                  uint64_t v776 = *(void *)(v2190 + 8 * v736);
                                                  if (v776)
                                                  {
                                                    unint64_t v777 = *(unsigned __int16 *)(v776 + 2 * v739);
                                                    uint64_t v778 = v223[7];
                                                    uint64_t v2177 = v223[8];
                                                    unint64_t v2165 = (v2177 - v778) >> 3;
                                                    if (v2165 > v777)
                                                    {
                                                      uint64_t v779 = v778 + 8 * v777;
                                                      if (v779 != v2177 && *(_DWORD *)(v779 + 4) == v735)
                                                      {
                                                        uint64_t v2138 = HIDWORD(*(void *)v731);
                                                        unint64_t v2156 = *(void *)v731;
                                                        unint64_t v780 = *(void *)v731 >> 39;
                                                        if (v780 < v753
                                                          && (uint64_t v781 = *(void *)(v752 + 8 * v780)) != 0
                                                          && (unint64_t v782 = *(unsigned __int16 *)(v781
                                                                                         + 2 * (HIDWORD(v2156) & 0x7F)),
                                                              v758 > v782)
                                                          && (uint64_t v783 = v757 + 8 * v782, v783 != v756)
                                                          && *(_DWORD *)(v783 + 4) == v2138)
                                                        {
                                                          v784 = (long long *)(v220[10] + 80 * v782);
                                                        }
                                                        else
                                                        {
                                                          v784 = (long long *)v220[11];
                                                        }
                                                        if (v780 < v762
                                                          && (uint64_t v785 = *(void *)(v761 + 8 * v780)) != 0
                                                          && (unint64_t v786 = *(unsigned __int16 *)(v785
                                                                                         + 2 * (HIDWORD(v2156) & 0x7F)),
                                                              v767 > v786)
                                                          && (uint64_t v787 = v765 + 8 * v786, v787 != v766)
                                                          && *(_DWORD *)(v787 + 4) == v2138)
                                                        {
                                                          uint64_t v788 = v2183[10] + 16 * v786;
                                                        }
                                                        else
                                                        {
                                                          uint64_t v788 = v2183[11];
                                                        }
                                                        if (v780 < v770
                                                          && (uint64_t v789 = *(void *)(v769 + 8 * v780)) != 0
                                                          && (unint64_t v790 = *(unsigned __int16 *)(v789
                                                                                         + 2 * (HIDWORD(v2156) & 0x7F)),
                                                              v2198 > v790)
                                                          && (uint64_t v791 = v774 + 8 * v790, v791 != v773)
                                                          && *(_DWORD *)(v791 + 4) == v2138)
                                                        {
                                                          v792 = (long long *)(v2224[10] + 24 * v790);
                                                        }
                                                        else
                                                        {
                                                          v792 = (long long *)v2224[11];
                                                        }
                                                        if (v780 < (v223[5] - v2190) >> 3
                                                          && (uint64_t v793 = *(void *)(v2190 + 8 * v780)) != 0
                                                          && (unint64_t v794 = *(unsigned __int16 *)(v793
                                                                                         + 2 * (HIDWORD(v2156) & 0x7F)),
                                                              v2165 > v794)
                                                          && (uint64_t v795 = v778 + 8 * v794, v795 != v2177)
                                                          && *(_DWORD *)(v795 + 4) == v2138)
                                                        {
                                                          v734 = (int *)(v223[10] + 4 * v794);
                                                        }
                                                        else
                                                        {
                                                          v734 = (int *)v223[11];
                                                        }
                                                        md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v2234, v2156, v784, *(void *)v788, *(std::__shared_weak_count **)(v788 + 8), v792, v733, v734);
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v733;
        v731 += 8;
      }
      while (v731 != v732);
    }
    unint64_t v224 = v2222 + 184;
  }
  if ((void *)v2204 == v229)
  {
    v2234 = &v2238;
    v2235 = (uint64_t *)v224;
    k = &v2230;
    uint64_t v797 = v223[7];
    uint64_t v798 = v223[8];
    if (v797 != v798)
    {
      v799 = (int *)v223[10];
      do
      {
        unint64_t v820 = *(unsigned int *)(v797 + 4);
        unint64_t v821 = v820 >> 7;
        uint64_t v822 = v218[4];
        if (v820 >> 7 < (v218[5] - v822) >> 3)
        {
          uint64_t v823 = *(void *)(v822 + 8 * v821);
          if (v823)
          {
            uint64_t v824 = v820 & 0x7F;
            unint64_t v825 = *(unsigned __int16 *)(v823 + 2 * v824);
            uint64_t v827 = v218[7];
            uint64_t v826 = v218[8];
            if (v825 < (v826 - v827) >> 3)
            {
              uint64_t v828 = v827 + 8 * v825;
              if (v828 != v826 && *(_DWORD *)(v828 + 4) == v820)
              {
                uint64_t v830 = v219[4];
                if (v821 < (v219[5] - v830) >> 3)
                {
                  uint64_t v831 = *(void *)(v830 + 8 * v821);
                  if (v831)
                  {
                    unint64_t v832 = *(unsigned __int16 *)(v831 + 2 * v824);
                    uint64_t v834 = v219[7];
                    uint64_t v833 = v219[8];
                    if (v832 < (v833 - v834) >> 3)
                    {
                      uint64_t v835 = v834 + 8 * v832;
                      if (v835 != v833 && *(_DWORD *)(v835 + 4) == v820)
                      {
                        uint64_t v837 = v220[4];
                        unint64_t v838 = (v220[5] - v837) >> 3;
                        if (v821 < v838)
                        {
                          uint64_t v839 = *(void *)(v837 + 8 * v821);
                          if (v839)
                          {
                            unint64_t v840 = *(unsigned __int16 *)(v839 + 2 * v824);
                            uint64_t v842 = v220[7];
                            uint64_t v841 = v220[8];
                            unint64_t v843 = (v841 - v842) >> 3;
                            if (v843 > v840)
                            {
                              uint64_t v844 = v842 + 8 * v840;
                              if (v844 != v841 && *(_DWORD *)(v844 + 4) == v820)
                              {
                                uint64_t v846 = v2183[4];
                                unint64_t v847 = (v2183[5] - v846) >> 3;
                                if (v821 < v847)
                                {
                                  uint64_t v848 = *(void *)(v846 + 8 * v821);
                                  if (v848)
                                  {
                                    unint64_t v849 = *(unsigned __int16 *)(v848 + 2 * v824);
                                    uint64_t v850 = v2183[7];
                                    uint64_t v851 = v2183[8];
                                    unint64_t v852 = (v851 - v850) >> 3;
                                    if (v852 > v849)
                                    {
                                      uint64_t v853 = v850 + 8 * v849;
                                      if (v853 != v851 && *(_DWORD *)(v853 + 4) == v820)
                                      {
                                        uint64_t v854 = v2224[4];
                                        unint64_t v855 = (v2224[5] - v854) >> 3;
                                        if (v821 < v855)
                                        {
                                          uint64_t v856 = *(void *)(v854 + 8 * v821);
                                          if (v856)
                                          {
                                            unint64_t v857 = *(unsigned __int16 *)(v856 + 2 * v824);
                                            uint64_t v859 = v2224[7];
                                            uint64_t v858 = v2224[8];
                                            unint64_t v860 = (v858 - v859) >> 3;
                                            if (v860 > v857)
                                            {
                                              uint64_t v861 = v859 + 8 * v857;
                                              if (v861 != v858 && *(_DWORD *)(v861 + 4) == v820)
                                              {
                                                uint64_t v862 = v2217[4];
                                                unint64_t v863 = (v2217[5] - v862) >> 3;
                                                if (v821 < v863)
                                                {
                                                  uint64_t v864 = *(void *)(v862 + 8 * v821);
                                                  if (v864)
                                                  {
                                                    unint64_t v224 = *(unsigned __int16 *)(v864 + 2 * v824);
                                                    uint64_t v2206 = v2217[7];
                                                    uint64_t v2212 = v2217[8];
                                                    unint64_t v865 = (v2212 - v2206) >> 3;
                                                    if (v865 > v224)
                                                    {
                                                      unint64_t v224 = v2206 + 8 * v224;
                                                      if (v224 != v2212 && *(_DWORD *)(v224 + 4) == v820)
                                                      {
                                                        uint64_t v2192 = HIDWORD(*(void *)v797);
                                                        unint64_t v2200 = *(void *)v797;
                                                        unint64_t v866 = *(void *)v797 >> 39;
                                                        if (v866 < v838
                                                          && (uint64_t v867 = *(void *)(v837 + 8 * v866)) != 0
                                                          && (unint64_t v868 = *(unsigned __int16 *)(v867
                                                                                         + 2 * (HIDWORD(v2200) & 0x7F)),
                                                              v843 > v868)
                                                          && (uint64_t v869 = v842 + 8 * v868, v869 != v841)
                                                          && *(_DWORD *)(v869 + 4) == v2192)
                                                        {
                                                          v870 = (long long *)(v220[10] + 80 * v868);
                                                        }
                                                        else
                                                        {
                                                          v870 = (long long *)v220[11];
                                                        }
                                                        if (v866 < v847
                                                          && (uint64_t v871 = *(void *)(v846 + 8 * v866)) != 0
                                                          && (unint64_t v872 = *(unsigned __int16 *)(v871
                                                                                         + 2 * (HIDWORD(v2200) & 0x7F)),
                                                              v852 > v872)
                                                          && (uint64_t v873 = v850 + 8 * v872, v873 != v851)
                                                          && *(_DWORD *)(v873 + 4) == v2192)
                                                        {
                                                          uint64_t v874 = v2183[10] + 16 * v872;
                                                        }
                                                        else
                                                        {
                                                          uint64_t v874 = v2183[11];
                                                        }
                                                        if (v866 < v855
                                                          && (uint64_t v875 = *(void *)(v854 + 8 * v866)) != 0
                                                          && (unint64_t v876 = *(unsigned __int16 *)(v875
                                                                                         + 2 * (HIDWORD(v2200) & 0x7F)),
                                                              v860 > v876)
                                                          && (uint64_t v877 = v859 + 8 * v876, v877 != v858)
                                                          && *(_DWORD *)(v877 + 4) == v2192)
                                                        {
                                                          v878 = (long long *)(v2224[10] + 24 * v876);
                                                        }
                                                        else
                                                        {
                                                          v878 = (long long *)v2224[11];
                                                        }
                                                        if (v866 < v863
                                                          && (uint64_t v879 = *(void *)(v862 + 8 * v866)) != 0
                                                          && (unint64_t v880 = *(unsigned __int16 *)(v879
                                                                                         + 2 * (HIDWORD(v2200) & 0x7F)),
                                                              v865 > v880)
                                                          && (uint64_t v881 = v2206 + 8 * v880, v881 != v2212)
                                                          && *(_DWORD *)(v881 + 4) == v2192)
                                                        {
                                                          v819 = (long long *)(v2217[10] + 16 * v880);
                                                        }
                                                        else
                                                        {
                                                          v819 = (long long *)v2217[11];
                                                        }
                                                        md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v2234, v2200, v870, *(void *)v874, *(std::__shared_weak_count **)(v874 + 8), v878, v819, v799);
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v799;
        v797 += 8;
      }
      while (v797 != v798);
    }
  }
  if ((long long *)v2240 == &v2238)
  {
    (*(void (**)(long long *, unint64_t))(v2238 + 32))(&v2238, v224);
    uint64_t v796 = v2222;
  }
  else
  {
    uint64_t v796 = v2222;
    if ((void)v2240) {
      (*(void (**)(void, unint64_t))(*(void *)v2240 + 40))(v2240, v224);
    }
  }
  v801 = *(int8x8_t **)(v796 + 120);
  v800 = *(int8x8_t **)(v796 + 128);
  *(void *)&long long v2230 = v801;
  v2233 = v800;
  *(void *)&long long v2238 = &unk_1EF56D248;
  *((void *)&v2238 + 1) = &v2233;
  *(void *)&long long v2240 = &v2238;
  v802 = (void *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(v801);
  v803 = (void *)gdc::Registry::storage<arComponents::StandardPipeline>(v801);
  v804 = (void *)gdc::Registry::storage<arComponents::WorldTransform>(v801);
  uint64_t v805 = gdc::Registry::storage<arComponents::MeshDataComponent>(v801);
  v2218 = (void *)gdc::Registry::storage<arComponents::AlbedoTextureComponent>(v801);
  v2211 = (void *)gdc::Registry::storage<arComponents::AlbedoTextureUVMapping>(v801);
  v2205 = (void *)gdc::Registry::storage<arComponents::AlbedoTextureUVScale>(v801);
  v2199 = (void *)gdc::Registry::storage<arComponents::Boundary>(v801);
  v806 = (void *)gdc::Registry::storage<arComponents::StyleColor>(v801);
  v807 = (uint64_t *)(v2222 + 136);
  v808 = v803 + 4;
  v809 = v804 + 4;
  uint64_t v810 = v805 + 32;
  v811 = v2218 + 4;
  unint64_t v812 = (unint64_t)(v2211 + 4);
  unint64_t v813 = (unint64_t)(v2205 + 4);
  unint64_t v814 = (unint64_t)(v2199 + 4);
  if (v803[8] - v803[7] >= v802[8] - v802[7]) {
    v815 = v802 + 4;
  }
  else {
    v815 = v803 + 4;
  }
  if (v804[8] - v804[7] < v815[4] - v815[3]) {
    v815 = v804 + 4;
  }
  v2157 = (void *)v805;
  if (*(void *)(v805 + 64) - *(void *)(v805 + 56) < v815[4] - v815[3]) {
    v815 = (void *)(v805 + 32);
  }
  if (v2218[8] - v2218[7] < v815[4] - v815[3]) {
    v815 = v2218 + 4;
  }
  if (v2211[8] - v2211[7] < v815[4] - v815[3]) {
    v815 = v2211 + 4;
  }
  if (v2205[8] - v2205[7] < v815[4] - v815[3]) {
    v815 = v2205 + 4;
  }
  v2191 = v806 + 4;
  if (v2199[8] - v2199[7] < v815[4] - v815[3]) {
    v815 = v2199 + 4;
  }
  if (v806[8] - v806[7] >= v815[4] - v815[3]) {
    v816 = v815;
  }
  else {
    v816 = v806 + 4;
  }
  if (v802 + 4 == v816)
  {
    v2234 = &v2238;
    v2235 = (uint64_t *)(v2222 + 136);
    k = &v2230;
    uint64_t v818 = v802[7];
    uint64_t v817 = v802[8];
    while (v818 != v817)
    {
      unint64_t v883 = *(unsigned int *)(v818 + 4);
      unint64_t v884 = v883 >> 7;
      uint64_t v885 = v803[4];
      if (v883 >> 7 < (v803[5] - v885) >> 3)
      {
        uint64_t v886 = *(void *)(v885 + 8 * v884);
        if (v886)
        {
          uint64_t v887 = v883 & 0x7F;
          unint64_t v888 = *(unsigned __int16 *)(v886 + 2 * v887);
          uint64_t v890 = v803[7];
          uint64_t v889 = v803[8];
          if (v888 < (v889 - v890) >> 3)
          {
            uint64_t v891 = v890 + 8 * v888;
            if (v891 != v889 && *(_DWORD *)(v891 + 4) == v883)
            {
              uint64_t v893 = v804[4];
              unint64_t v894 = (v804[5] - v893) >> 3;
              if (v884 < v894)
              {
                uint64_t v895 = *(void *)(v893 + 8 * v884);
                if (v895)
                {
                  unint64_t v896 = *(unsigned __int16 *)(v895 + 2 * v887);
                  uint64_t v897 = v804[7];
                  uint64_t v898 = v804[8];
                  unint64_t v899 = (v898 - v897) >> 3;
                  if (v899 > v896)
                  {
                    uint64_t v900 = v897 + 8 * v896;
                    if (v900 != v898 && *(_DWORD *)(v900 + 4) == v883)
                    {
                      uint64_t v902 = v2157[4];
                      unint64_t v813 = (v2157[5] - v902) >> 3;
                      if (v884 < v813)
                      {
                        uint64_t v903 = *(void *)(v902 + 8 * v884);
                        if (v903)
                        {
                          unint64_t v904 = *(unsigned __int16 *)(v903 + 2 * v887);
                          uint64_t v905 = v2157[7];
                          unint64_t v812 = v2157[8];
                          unint64_t v906 = (uint64_t)(v812 - v905) >> 3;
                          if (v906 > v904)
                          {
                            uint64_t v907 = v905 + 8 * v904;
                            if (v907 != v812 && *(_DWORD *)(v907 + 4) == v883)
                            {
                              uint64_t v909 = v2218[4];
                              unint64_t v910 = (v2218[5] - v909) >> 3;
                              if (v884 < v910)
                              {
                                uint64_t v911 = *(void *)(v909 + 8 * v884);
                                if (v911)
                                {
                                  unint64_t v912 = *(unsigned __int16 *)(v911 + 2 * v887);
                                  uint64_t v913 = v2218[7];
                                  uint64_t v2139 = v2218[8];
                                  unint64_t v814 = (v2139 - v913) >> 3;
                                  unint64_t v2123 = v814;
                                  if (v814 > v912)
                                  {
                                    uint64_t v914 = v913 + 8 * v912;
                                    unint64_t v814 = v2218[8];
                                    if (v914 != v2139 && *(_DWORD *)(v914 + 4) == v883)
                                    {
                                      unint64_t v814 = v2211[4];
                                      unint64_t v2093 = (uint64_t)(v2211[5] - v814) >> 3;
                                      unint64_t v2107 = v814;
                                      if (v884 < v2093)
                                      {
                                        uint64_t v915 = *(void *)(v814 + 8 * v884);
                                        if (v915)
                                        {
                                          unint64_t v2080 = *(unsigned __int16 *)(v915 + 2 * v887);
                                          uint64_t v2057 = v2211[7];
                                          uint64_t v2068 = v2211[8];
                                          unint64_t v2046 = (v2068 - v2057) >> 3;
                                          unint64_t v814 = v2080;
                                          if (v2046 > v2080)
                                          {
                                            uint64_t v916 = v2057 + 8 * v2080;
                                            unint64_t v814 = v2211[8];
                                            if (v916 != v2068 && *(_DWORD *)(v916 + 4) == v883)
                                            {
                                              unint64_t v814 = v2205[4];
                                              unint64_t v2081 = v814;
                                              unint64_t v2035 = (uint64_t)(v2205[5] - v814) >> 3;
                                              if (v884 < v2035)
                                              {
                                                uint64_t v917 = *(void *)(v814 + 8 * v884);
                                                if (v917)
                                                {
                                                  unint64_t v2024 = *(unsigned __int16 *)(v917 + 2 * v887);
                                                  *(void *)v2008 = v2205[7];
                                                  uint64_t v2016 = v2205[8];
                                                  unint64_t v2000 = (v2016 - *(void *)v2008) >> 3;
                                                  unint64_t v814 = v2024;
                                                  if (v2000 > v2024)
                                                  {
                                                    uint64_t v918 = *(void *)v2008 + 8 * v2024;
                                                    unint64_t v814 = v2205[8];
                                                    if (v918 != v2016 && *(_DWORD *)(v918 + 4) == v883)
                                                    {
                                                      unint64_t v814 = v2199[4];
                                                      unint64_t v2025 = v814;
                                                      unint64_t v1993 = (uint64_t)(v2199[5] - v814) >> 3;
                                                      if (v884 < v1993)
                                                      {
                                                        uint64_t v919 = *(void *)(v814 + 8 * v884);
                                                        if (v919)
                                                        {
                                                          unint64_t v1983 = *(unsigned __int16 *)(v919 + 2 * v887);
                                                          v1972 = (arComponents::AlbedoTextureComponent *)v2199[7];
                                                          *(void *)v1977 = v2199[8];
                                                          unint64_t v1968 = (uint64_t)(*(void *)v1977 - (void)v1972) >> 3;
                                                          unint64_t v814 = v1983;
                                                          if (v1968 > v1983)
                                                          {
                                                            v920 = (char *)v1972 + 8 * v1983;
                                                            unint64_t v814 = v2199[8];
                                                            if (v920 != *(char **)v1977
                                                              && *((_DWORD *)v920 + 1) == v883)
                                                            {
                                                              unint64_t v814 = v806[4];
                                                              unint64_t v1965 = v814;
                                                              if (v884 < (uint64_t)(v806[5] - v814) >> 3)
                                                              {
                                                                unint64_t v814 = (uint64_t)(v806[5] - v814) >> 3;
                                                                uint64_t v921 = *(void *)(v1965 + 8 * v884);
                                                                if (v921)
                                                                {
                                                                  unint64_t v922 = *(unsigned __int16 *)(v921 + 2 * v887);
                                                                  uint64_t v1961 = v806[7];
                                                                  uint64_t v1963 = v806[8];
                                                                  unint64_t v923 = (v1963 - v1961) >> 3;
                                                                  if (v923 > v922)
                                                                  {
                                                                    uint64_t v924 = v1961 + 8 * v922;
                                                                    if (v924 != v1963
                                                                      && *(_DWORD *)(v924 + 4) == v883)
                                                                    {
                                                                      v1984 = v806;
                                                                      unint64_t v925 = *(void *)v818;
                                                                      uint64_t v926 = HIDWORD(*(void *)v818);
                                                                      unint64_t v927 = *(void *)v818 >> 39;
                                                                      if (v927 < v894
                                                                        && (uint64_t v928 = *(void *)(v893 + 8 * v927)) != 0
                                                                        && (unint64_t v929 = *(unsigned __int16 *)(v928 + 2 * (HIDWORD(v925) & 0x7F)),
                                                                            v899 > v929)
                                                                        && (uint64_t v930 = v897 + 8 * v929, v930 != v898)
                                                                        && *(_DWORD *)(v930 + 4) == v926)
                                                                      {
                                                                        v931 = (long long *)(v804[10]
                                                                                          + 80 * v929);
                                                                      }
                                                                      else
                                                                      {
                                                                        v931 = (long long *)v804[11];
                                                                      }
                                                                      if (v927 < v813
                                                                        && (uint64_t v932 = *(void *)(v902 + 8 * v927)) != 0
                                                                        && (unint64_t v933 = *(unsigned __int16 *)(v932 + 2 * (HIDWORD(v925) & 0x7F)),
                                                                            v906 > v933)
                                                                        && (uint64_t v934 = v905 + 8 * v933, v934 != v812)
                                                                        && *(_DWORD *)(v934 + 4) == v926)
                                                                      {
                                                                        v935 = (uint64_t *)(v2157[10] + 8 * v933);
                                                                      }
                                                                      else
                                                                      {
                                                                        v935 = (uint64_t *)v2157[11];
                                                                      }
                                                                      if (v927 < v910
                                                                        && (uint64_t v936 = *(void *)(v909 + 8 * v927)) != 0
                                                                        && (unint64_t v937 = *(unsigned __int16 *)(v936 + 2 * (HIDWORD(v925) & 0x7F)),
                                                                            v2123 > v937)
                                                                        && (uint64_t v938 = v913 + 8 * v937, v938 != v2139)
                                                                        && *(_DWORD *)(v938 + 4) == v926)
                                                                      {
                                                                        v939 = (arComponents::AlbedoTextureComponent *)(v2218[10] + 48 * v937);
                                                                      }
                                                                      else
                                                                      {
                                                                        v939 = (arComponents::AlbedoTextureComponent *)v2218[11];
                                                                      }
                                                                      if (v927 < v2093
                                                                        && (uint64_t v940 = *(void *)(v2107 + 8 * v927)) != 0
                                                                        && (unint64_t v941 = *(unsigned __int16 *)(v940 + 2 * (HIDWORD(v925) & 0x7F)),
                                                                            v2046 > v941)
                                                                        && (uint64_t v942 = v2057 + 8 * v941, v942 != v2068)
                                                                        && *(_DWORD *)(v942 + 4) == v926)
                                                                      {
                                                                        v943 = (long long *)(v2211[10] + 16 * v941);
                                                                      }
                                                                      else
                                                                      {
                                                                        v943 = (long long *)v2211[11];
                                                                      }
                                                                      if (v927 < v2035
                                                                        && (uint64_t v944 = *(void *)(v2081 + 8 * v927)) != 0
                                                                        && (unint64_t v945 = *(unsigned __int16 *)(v944 + 2 * (HIDWORD(v925) & 0x7F)),
                                                                            v2000 > v945)
                                                                        && (uint64_t v946 = *(void *)v2008 + 8 * v945,
                                                                            v946 != v2016)
                                                                        && *(_DWORD *)(v946 + 4) == v926)
                                                                      {
                                                                        v947 = (uint64_t *)(v2205[10] + 8 * v945);
                                                                      }
                                                                      else
                                                                      {
                                                                        v947 = (uint64_t *)v2205[11];
                                                                      }
                                                                      if (v927 < v1993
                                                                        && (uint64_t v948 = *(void *)(v2025 + 8 * v927)) != 0
                                                                        && (unint64_t v949 = *(unsigned __int16 *)(v948 + 2 * (HIDWORD(v925) & 0x7F)),
                                                                            v1968 > v949)
                                                                        && (v950 = (char *)v1972 + 8 * v949,
                                                                            v950 != *(char **)v1977)
                                                                        && *((_DWORD *)v950 + 1) == v926)
                                                                      {
                                                                        v951 = (long long *)(v2199[10]
                                                                                          + 24 * v949);
                                                                      }
                                                                      else
                                                                      {
                                                                        v951 = (long long *)v2199[11];
                                                                      }
                                                                      if (v927 < v814
                                                                        && (uint64_t v952 = *(void *)(v1965 + 8 * v927)) != 0
                                                                        && (unint64_t v953 = *(unsigned __int16 *)(v952 + 2 * (HIDWORD(v925) & 0x7F)),
                                                                            v923 > v953)
                                                                        && (uint64_t v954 = v1961 + 8 * v953, v954 != v1963)
                                                                        && *(_DWORD *)(v954 + 4) == v926)
                                                                      {
                                                                        v882 = (long long *)(v1984[10] + 16 * v953);
                                                                      }
                                                                      else
                                                                      {
                                                                        v882 = (long long *)v1984[11];
                                                                      }
                                                                      md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshDataComponent&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::Boundary&,arComponents::StyleColor&)#1}::operator()((uint64_t *)&v2234, v925, v931, *v935, v939, v943, v947, v951, v882);
                                                                      v806 = v1984;
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v818 += 8;
    }
    v807 = (uint64_t *)(v2222 + 136);
    if (v808 != v816)
    {
LABEL_893:
      if (v809 != v816) {
        goto LABEL_1265;
      }
      goto LABEL_1170;
    }
  }
  else if (v808 != v816)
  {
    goto LABEL_893;
  }
  v2234 = &v2238;
  v2235 = v807;
  k = &v2230;
  uint64_t v956 = v803[7];
  for (uint64_t j = v803[8]; v956 != j; v956 += 8)
  {
    unint64_t v958 = *(unsigned int *)(v956 + 4);
    unint64_t v959 = v958 >> 7;
    uint64_t v960 = v802[4];
    if (v958 >> 7 < (v802[5] - v960) >> 3)
    {
      uint64_t v961 = *(void *)(v960 + 8 * v959);
      if (v961)
      {
        uint64_t v962 = v958 & 0x7F;
        unint64_t v963 = *(unsigned __int16 *)(v961 + 2 * v962);
        uint64_t v965 = v802[7];
        uint64_t v964 = v802[8];
        if (v963 < (v964 - v965) >> 3)
        {
          uint64_t v966 = v965 + 8 * v963;
          if (v966 != v964 && *(_DWORD *)(v966 + 4) == v958)
          {
            uint64_t v968 = v804[4];
            unint64_t v969 = (v804[5] - v968) >> 3;
            if (v959 < v969)
            {
              uint64_t v970 = *(void *)(v968 + 8 * v959);
              if (v970)
              {
                unint64_t v971 = *(unsigned __int16 *)(v970 + 2 * v962);
                uint64_t v972 = v804[7];
                uint64_t v973 = v804[8];
                unint64_t v974 = (v973 - v972) >> 3;
                if (v974 > v971)
                {
                  uint64_t v975 = v972 + 8 * v971;
                  if (v975 != v973 && *(_DWORD *)(v975 + 4) == v958)
                  {
                    uint64_t v977 = v2157[4];
                    unint64_t v813 = (v2157[5] - v977) >> 3;
                    if (v959 < v813)
                    {
                      uint64_t v978 = *(void *)(v977 + 8 * v959);
                      if (v978)
                      {
                        unint64_t v979 = *(unsigned __int16 *)(v978 + 2 * v962);
                        uint64_t v980 = v2157[7];
                        unint64_t v812 = v2157[8];
                        unint64_t v981 = (uint64_t)(v812 - v980) >> 3;
                        if (v981 > v979)
                        {
                          uint64_t v982 = v980 + 8 * v979;
                          if (v982 != v812 && *(_DWORD *)(v982 + 4) == v958)
                          {
                            uint64_t v984 = v2218[4];
                            unint64_t v985 = (v2218[5] - v984) >> 3;
                            if (v959 < v985)
                            {
                              uint64_t v986 = *(void *)(v984 + 8 * v959);
                              if (v986)
                              {
                                unint64_t v987 = *(unsigned __int16 *)(v986 + 2 * v962);
                                uint64_t v988 = v2218[7];
                                uint64_t v2140 = v2218[8];
                                unint64_t v814 = (v2140 - v988) >> 3;
                                unint64_t v2124 = v814;
                                if (v814 > v987)
                                {
                                  uint64_t v989 = v988 + 8 * v987;
                                  unint64_t v814 = v2218[8];
                                  if (v989 != v2140 && *(_DWORD *)(v989 + 4) == v958)
                                  {
                                    unint64_t v814 = v2211[4];
                                    unint64_t v2094 = (uint64_t)(v2211[5] - v814) >> 3;
                                    unint64_t v2108 = v814;
                                    if (v959 < v2094)
                                    {
                                      uint64_t v990 = *(void *)(v814 + 8 * v959);
                                      if (v990)
                                      {
                                        unint64_t v2082 = *(unsigned __int16 *)(v990 + 2 * v962);
                                        uint64_t v2058 = v2211[7];
                                        uint64_t v2069 = v2211[8];
                                        unint64_t v2047 = (v2069 - v2058) >> 3;
                                        unint64_t v814 = v2082;
                                        if (v2047 > v2082)
                                        {
                                          uint64_t v991 = v2058 + 8 * v2082;
                                          unint64_t v814 = v2211[8];
                                          if (v991 != v2069 && *(_DWORD *)(v991 + 4) == v958)
                                          {
                                            unint64_t v814 = v2205[4];
                                            unint64_t v2083 = v814;
                                            unint64_t v2036 = (uint64_t)(v2205[5] - v814) >> 3;
                                            if (v959 < v2036)
                                            {
                                              uint64_t v992 = *(void *)(v814 + 8 * v959);
                                              if (v992)
                                              {
                                                unint64_t v2026 = *(unsigned __int16 *)(v992 + 2 * v962);
                                                *(void *)v2009 = v2205[7];
                                                uint64_t v2017 = v2205[8];
                                                unint64_t v2001 = (v2017 - *(void *)v2009) >> 3;
                                                unint64_t v814 = v2026;
                                                if (v2001 > v2026)
                                                {
                                                  uint64_t v993 = *(void *)v2009 + 8 * v2026;
                                                  unint64_t v814 = v2205[8];
                                                  if (v993 != v2017 && *(_DWORD *)(v993 + 4) == v958)
                                                  {
                                                    unint64_t v814 = v2199[4];
                                                    unint64_t v2027 = v814;
                                                    unint64_t v1994 = (uint64_t)(v2199[5] - v814) >> 3;
                                                    if (v959 < v1994)
                                                    {
                                                      uint64_t v994 = *(void *)(v814 + 8 * v959);
                                                      if (v994)
                                                      {
                                                        unint64_t v1985 = *(unsigned __int16 *)(v994 + 2 * v962);
                                                        v1973 = (arComponents::AlbedoTextureComponent *)v2199[7];
                                                        *(void *)v1978 = v2199[8];
                                                        unint64_t v1969 = (uint64_t)(*(void *)v1978 - (void)v1973) >> 3;
                                                        unint64_t v814 = v1985;
                                                        if (v1969 > v1985)
                                                        {
                                                          v995 = (char *)v1973 + 8 * v1985;
                                                          unint64_t v814 = v2199[8];
                                                          if (v995 != *(char **)v1978
                                                            && *((_DWORD *)v995 + 1) == v958)
                                                          {
                                                            unint64_t v814 = v806[4];
                                                            unint64_t v1966 = v814;
                                                            if (v959 < (uint64_t)(v806[5] - v814) >> 3)
                                                            {
                                                              unint64_t v814 = (uint64_t)(v806[5] - v814) >> 3;
                                                              uint64_t v996 = *(void *)(v1966 + 8 * v959);
                                                              if (v996)
                                                              {
                                                                unint64_t v997 = *(unsigned __int16 *)(v996 + 2 * v962);
                                                                uint64_t v1962 = v806[7];
                                                                uint64_t v1964 = v806[8];
                                                                unint64_t v998 = (v1964 - v1962) >> 3;
                                                                if (v998 > v997)
                                                                {
                                                                  uint64_t v999 = v1962 + 8 * v997;
                                                                  if (v999 != v1964
                                                                    && *(_DWORD *)(v999 + 4) == v958)
                                                                  {
                                                                    v1986 = v806;
                                                                    unint64_t v1000 = *(void *)v956;
                                                                    uint64_t v1001 = HIDWORD(*(void *)v956);
                                                                    unint64_t v1002 = *(void *)v956 >> 39;
                                                                    if (v1002 < v969
                                                                      && (uint64_t v1003 = *(void *)(v968 + 8 * v1002)) != 0
                                                                      && (unint64_t v1004 = *(unsigned __int16 *)(v1003 + 2 * (HIDWORD(v1000) & 0x7F)),
                                                                          v974 > v1004)
                                                                      && (uint64_t v1005 = v972 + 8 * v1004, v1005 != v973)
                                                                      && *(_DWORD *)(v1005 + 4) == v1001)
                                                                    {
                                                                      v1006 = (long long *)(v804[10]
                                                                                         + 80 * v1004);
                                                                    }
                                                                    else
                                                                    {
                                                                      v1006 = (long long *)v804[11];
                                                                    }
                                                                    if (v1002 < v813
                                                                      && (uint64_t v1007 = *(void *)(v977 + 8 * v1002)) != 0
                                                                      && (unint64_t v1008 = *(unsigned __int16 *)(v1007 + 2 * (HIDWORD(v1000) & 0x7F)),
                                                                          v981 > v1008)
                                                                      && (uint64_t v1009 = v980 + 8 * v1008, v1009 != v812)
                                                                      && *(_DWORD *)(v1009 + 4) == v1001)
                                                                    {
                                                                      v1010 = (uint64_t *)(v2157[10] + 8 * v1008);
                                                                    }
                                                                    else
                                                                    {
                                                                      v1010 = (uint64_t *)v2157[11];
                                                                    }
                                                                    if (v1002 < v985
                                                                      && (uint64_t v1011 = *(void *)(v984 + 8 * v1002)) != 0
                                                                      && (unint64_t v1012 = *(unsigned __int16 *)(v1011 + 2 * (HIDWORD(v1000) & 0x7F)),
                                                                          v2124 > v1012)
                                                                      && (uint64_t v1013 = v988 + 8 * v1012, v1013 != v2140)
                                                                      && *(_DWORD *)(v1013 + 4) == v1001)
                                                                    {
                                                                      v1014 = (arComponents::AlbedoTextureComponent *)(v2218[10] + 48 * v1012);
                                                                    }
                                                                    else
                                                                    {
                                                                      v1014 = (arComponents::AlbedoTextureComponent *)v2218[11];
                                                                    }
                                                                    if (v1002 < v2094
                                                                      && (uint64_t v1015 = *(void *)(v2108 + 8 * v1002)) != 0
                                                                      && (unint64_t v1016 = *(unsigned __int16 *)(v1015 + 2 * (HIDWORD(v1000) & 0x7F)),
                                                                          v2047 > v1016)
                                                                      && (uint64_t v1017 = v2058 + 8 * v1016, v1017 != v2069)
                                                                      && *(_DWORD *)(v1017 + 4) == v1001)
                                                                    {
                                                                      v1018 = (long long *)(v2211[10] + 16 * v1016);
                                                                    }
                                                                    else
                                                                    {
                                                                      v1018 = (long long *)v2211[11];
                                                                    }
                                                                    if (v1002 < v2036
                                                                      && (uint64_t v1019 = *(void *)(v2083 + 8 * v1002)) != 0
                                                                      && (unint64_t v1020 = *(unsigned __int16 *)(v1019 + 2 * (HIDWORD(v1000) & 0x7F)),
                                                                          v2001 > v1020)
                                                                      && (uint64_t v1021 = *(void *)v2009 + 8 * v1020,
                                                                          v1021 != v2017)
                                                                      && *(_DWORD *)(v1021 + 4) == v1001)
                                                                    {
                                                                      v1022 = (uint64_t *)(v2205[10] + 8 * v1020);
                                                                    }
                                                                    else
                                                                    {
                                                                      v1022 = (uint64_t *)v2205[11];
                                                                    }
                                                                    if (v1002 < v1994
                                                                      && (uint64_t v1023 = *(void *)(v2027 + 8 * v1002)) != 0
                                                                      && (unint64_t v1024 = *(unsigned __int16 *)(v1023 + 2 * (HIDWORD(v1000) & 0x7F)),
                                                                          v1969 > v1024)
                                                                      && (v1025 = (char *)v1973 + 8 * v1024,
                                                                          v1025 != *(char **)v1978)
                                                                      && *((_DWORD *)v1025 + 1) == v1001)
                                                                    {
                                                                      v1026 = (long long *)(v2199[10]
                                                                                         + 24 * v1024);
                                                                    }
                                                                    else
                                                                    {
                                                                      v1026 = (long long *)v2199[11];
                                                                    }
                                                                    if (v1002 < v814
                                                                      && (uint64_t v1027 = *(void *)(v1966 + 8 * v1002)) != 0
                                                                      && (unint64_t v1028 = *(unsigned __int16 *)(v1027 + 2 * (HIDWORD(v1000) & 0x7F)),
                                                                          v998 > v1028)
                                                                      && (uint64_t v1029 = v1962 + 8 * v1028, v1029 != v1964)
                                                                      && *(_DWORD *)(v1029 + 4) == v1001)
                                                                    {
                                                                      v957 = (long long *)(v1986[10] + 16 * v1028);
                                                                    }
                                                                    else
                                                                    {
                                                                      v957 = (long long *)v1986[11];
                                                                    }
                                                                    md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshDataComponent&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::Boundary&,arComponents::StyleColor&)#1}::operator()((uint64_t *)&v2234, v1000, v1006, *v1010, v1014, v1018, v1022, v1026, v957);
                                                                    v806 = v1986;
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v807 = (uint64_t *)(v2222 + 136);
  if (v809 == v816)
  {
LABEL_1170:
    v2234 = &v2238;
    v2235 = v807;
    k = &v2230;
    uint64_t v1030 = v804[7];
    uint64_t v1031 = v804[8];
    if (v1030 != v1031)
    {
      v1032 = (long long *)v804[10];
      do
      {
        unint64_t v1034 = *(unsigned int *)(v1030 + 4);
        unint64_t v1035 = v1034 >> 7;
        uint64_t v1036 = v802[4];
        if (v1034 >> 7 < (v802[5] - v1036) >> 3)
        {
          uint64_t v1037 = *(void *)(v1036 + 8 * v1035);
          if (v1037)
          {
            uint64_t v1038 = v1034 & 0x7F;
            unint64_t v1039 = *(unsigned __int16 *)(v1037 + 2 * v1038);
            uint64_t v1041 = v802[7];
            uint64_t v1040 = v802[8];
            if (v1039 < (v1040 - v1041) >> 3)
            {
              uint64_t v1042 = v1041 + 8 * v1039;
              if (v1042 != v1040 && *(_DWORD *)(v1042 + 4) == v1034)
              {
                uint64_t v1044 = v803[4];
                if (v1035 < (v803[5] - v1044) >> 3)
                {
                  uint64_t v1045 = *(void *)(v1044 + 8 * v1035);
                  if (v1045)
                  {
                    unint64_t v1046 = *(unsigned __int16 *)(v1045 + 2 * v1038);
                    uint64_t v1048 = v803[7];
                    uint64_t v1047 = v803[8];
                    if (v1046 < (v1047 - v1048) >> 3)
                    {
                      uint64_t v1049 = v1048 + 8 * v1046;
                      if (v1049 != v1047 && *(_DWORD *)(v1049 + 4) == v1034)
                      {
                        unint64_t v812 = v2157[4];
                        unint64_t v1051 = (uint64_t)(v2157[5] - v812) >> 3;
                        if (v1035 < v1051)
                        {
                          uint64_t v1052 = *(void *)(v812 + 8 * v1035);
                          if (v1052)
                          {
                            unint64_t v1053 = *(unsigned __int16 *)(v1052 + 2 * v1038);
                            uint64_t v1054 = v2157[7];
                            uint64_t v1055 = v2157[8];
                            unint64_t v813 = (v1055 - v1054) >> 3;
                            if (v813 > v1053)
                            {
                              uint64_t v1056 = v1054 + 8 * v1053;
                              if (v1056 != v1055 && *(_DWORD *)(v1056 + 4) == v1034)
                              {
                                uint64_t v1058 = v2218[4];
                                unint64_t v1059 = (v2218[5] - v1058) >> 3;
                                if (v1035 < v1059)
                                {
                                  uint64_t v1060 = *(void *)(v1058 + 8 * v1035);
                                  if (v1060)
                                  {
                                    unint64_t v1061 = *(unsigned __int16 *)(v1060 + 2 * v1038);
                                    uint64_t v1062 = v2218[7];
                                    uint64_t v1063 = v2218[8];
                                    unint64_t v814 = (v1063 - v1062) >> 3;
                                    if (v814 > v1061)
                                    {
                                      uint64_t v1064 = v1062 + 8 * v1061;
                                      if (v1064 != v1063 && *(_DWORD *)(v1064 + 4) == v1034)
                                      {
                                        uint64_t v1065 = v2211[4];
                                        unint64_t v2141 = (v2211[5] - v1065) >> 3;
                                        if (v1035 < v2141)
                                        {
                                          uint64_t v1066 = *(void *)(v1065 + 8 * v1035);
                                          if (v1066)
                                          {
                                            unint64_t v1067 = *(unsigned __int16 *)(v1066 + 2 * v1038);
                                            uint64_t v2109 = v2211[7];
                                            uint64_t v2125 = v2211[8];
                                            v807 = (uint64_t *)(v2222 + 136);
                                            unint64_t v2095 = (v2125 - v2109) >> 3;
                                            if (v2095 > v1067)
                                            {
                                              uint64_t v1068 = v2109 + 8 * v1067;
                                              if (v1068 != v2125 && *(_DWORD *)(v1068 + 4) == v1034)
                                              {
                                                v807 = (uint64_t *)(v2222 + 136);
                                                uint64_t v2084 = v2205[4];
                                                unint64_t v2070 = (v2205[5] - v2084) >> 3;
                                                if (v1035 < v2070)
                                                {
                                                  uint64_t v1069 = *(void *)(v2084 + 8 * v1035);
                                                  if (v1069)
                                                  {
                                                    unint64_t v1070 = *(unsigned __int16 *)(v1069 + 2 * v1038);
                                                    uint64_t v2048 = v2205[7];
                                                    uint64_t v2059 = v2205[8];
                                                    v807 = (uint64_t *)(v2222 + 136);
                                                    unint64_t v2037 = (v2059 - v2048) >> 3;
                                                    if (v2037 > v1070)
                                                    {
                                                      uint64_t v1071 = v2048 + 8 * v1070;
                                                      if (v1071 != v2059 && *(_DWORD *)(v1071 + 4) == v1034)
                                                      {
                                                        v807 = (uint64_t *)(v2222 + 136);
                                                        uint64_t v2028 = v2199[4];
                                                        unint64_t v2018 = (v2199[5] - v2028) >> 3;
                                                        if (v1035 < v2018)
                                                        {
                                                          uint64_t v1072 = *(void *)(v2028 + 8 * v1035);
                                                          if (v1072)
                                                          {
                                                            unint64_t v1073 = *(unsigned __int16 *)(v1072 + 2 * v1038);
                                                            uint64_t v2002 = v2199[7];
                                                            *(void *)v2010 = v2199[8];
                                                            v807 = (uint64_t *)(v2222 + 136);
                                                            unint64_t v1995 = (*(void *)v2010 - v2002) >> 3;
                                                            if (v1995 > v1073)
                                                            {
                                                              uint64_t v1074 = v2002 + 8 * v1073;
                                                              if (v1074 != *(void *)v2010
                                                                && *(_DWORD *)(v1074 + 4) == v1034)
                                                              {
                                                                *(void *)v1979 = v806[4];
                                                                unint64_t v1974 = (uint64_t)(v806[5] - *(void *)v1979) >> 3;
                                                                if (v1035 < v1974)
                                                                {
                                                                  uint64_t v1075 = *(void *)(*(void *)v1979 + 8 * v1035);
                                                                  if (v1075)
                                                                  {
                                                                    unint64_t v1076 = *(unsigned __int16 *)(v1075 + 2 * v1038);
                                                                    uint64_t v1078 = v806[7];
                                                                    uint64_t v1077 = v806[8];
                                                                    v807 = (uint64_t *)(v2222 + 136);
                                                                    unint64_t v1970 = (v1077 - v1078) >> 3;
                                                                    if (v1970 > v1076)
                                                                    {
                                                                      uint64_t v1079 = v1078 + 8 * v1076;
                                                                      if (v1079 != v1077
                                                                        && *(_DWORD *)(v1079 + 4) == v1034)
                                                                      {
                                                                        v1987 = v806;
                                                                        unint64_t v1080 = *(void *)v1030;
                                                                        uint64_t v1081 = HIDWORD(*(void *)v1030);
                                                                        unint64_t v1082 = *(void *)v1030 >> 39;
                                                                        if (v1082 < v1051
                                                                          && (uint64_t v1083 = *(void *)(v812 + 8 * v1082)) != 0
                                                                          && (unint64_t v1084 = *(unsigned __int16 *)(v1083 + 2 * (HIDWORD(v1080) & 0x7F)),
                                                                              v813 > v1084)
                                                                          && (uint64_t v1085 = v1054 + 8 * v1084, v1085 != v1055)
                                                                          && *(_DWORD *)(v1085 + 4) == v1081)
                                                                        {
                                                                          v1086 = (uint64_t *)(v2157[10] + 8 * v1084);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1086 = (uint64_t *)v2157[11];
                                                                        }
                                                                        if (v1082 < v1059
                                                                          && (uint64_t v1087 = *(void *)(v1058 + 8 * v1082)) != 0
                                                                          && (unint64_t v1088 = *(unsigned __int16 *)(v1087 + 2 * (HIDWORD(v1080) & 0x7F)),
                                                                              v814 > v1088)
                                                                          && (uint64_t v1089 = v1062 + 8 * v1088, v1089 != v1063)
                                                                          && *(_DWORD *)(v1089 + 4) == v1081)
                                                                        {
                                                                          v1090 = (arComponents::AlbedoTextureComponent *)(v2218[10] + 48 * v1088);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1090 = (arComponents::AlbedoTextureComponent *)v2218[11];
                                                                        }
                                                                        if (v1082 < v2141
                                                                          && (uint64_t v1091 = *(void *)(v1065 + 8 * v1082)) != 0
                                                                          && (unint64_t v1092 = *(unsigned __int16 *)(v1091 + 2 * (HIDWORD(v1080) & 0x7F)),
                                                                              v2095 > v1092)
                                                                          && (uint64_t v1093 = v2109 + 8 * v1092, v1093 != v2125)
                                                                          && *(_DWORD *)(v1093 + 4) == v1081)
                                                                        {
                                                                          v1094 = (long long *)(v2211[10] + 16 * v1092);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1094 = (long long *)v2211[11];
                                                                        }
                                                                        if (v1082 < v2070
                                                                          && (uint64_t v1095 = *(void *)(v2084 + 8 * v1082)) != 0
                                                                          && (unint64_t v1096 = *(unsigned __int16 *)(v1095 + 2 * (HIDWORD(v1080) & 0x7F)),
                                                                              v2037 > v1096)
                                                                          && (uint64_t v1097 = v2048 + 8 * v1096, v1097 != v2059)
                                                                          && *(_DWORD *)(v1097 + 4) == v1081)
                                                                        {
                                                                          v1098 = (uint64_t *)(v2205[10] + 8 * v1096);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1098 = (uint64_t *)v2205[11];
                                                                        }
                                                                        if (v1082 < v2018
                                                                          && (uint64_t v1099 = *(void *)(v2028 + 8 * v1082)) != 0
                                                                          && (unint64_t v1100 = *(unsigned __int16 *)(v1099 + 2 * (HIDWORD(v1080) & 0x7F)),
                                                                              v1995 > v1100)
                                                                          && (uint64_t v1101 = v2002 + 8 * v1100,
                                                                              v1101 != *(void *)v2010)
                                                                          && *(_DWORD *)(v1101 + 4) == v1081)
                                                                        {
                                                                          v1102 = (long long *)(v2199[10]
                                                                                             + 24
                                                                                             * v1100);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1102 = (long long *)v2199[11];
                                                                        }
                                                                        if (v1082 < v1974
                                                                          && (uint64_t v1103 = *(void *)(*(void *)v1979
                                                                                                + 8 * v1082)) != 0
                                                                          && (unint64_t v1104 = *(unsigned __int16 *)(v1103 + 2 * (HIDWORD(v1080) & 0x7F)),
                                                                              v1970 > v1104)
                                                                          && (uint64_t v1105 = v1078 + 8 * v1104, v1105 != v1077)
                                                                          && *(_DWORD *)(v1105 + 4) == v1081)
                                                                        {
                                                                          v1033 = (long long *)(v1987[10] + 16 * v1104);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1033 = (long long *)v1987[11];
                                                                        }
                                                                        v1967 = v1032;
                                                                        md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshDataComponent&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::Boundary&,arComponents::StyleColor&)#1}::operator()((uint64_t *)&v2234, v1080, v1032, *v1086, v1090, v1094, v1098, v1102, v1033);
                                                                        v1032 = v1967;
                                                                        v806 = v1987;
                                                                        v807 = (uint64_t *)(v2222 + 136);
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v1032 += 5;
        v1030 += 8;
      }
      while (v1030 != v1031);
    }
  }
LABEL_1265:
  if ((void *)v810 == v816)
  {
    v2234 = &v2238;
    v2235 = v807;
    k = &v2230;
    uint64_t v1106 = v2157[7];
    uint64_t v1107 = v2157[8];
    if (v1106 != v1107)
    {
      v1108 = (uint64_t *)v2157[10];
      do
      {
        unint64_t v1110 = *(unsigned int *)(v1106 + 4);
        unint64_t v1111 = v1110 >> 7;
        uint64_t v1112 = v802[4];
        if (v1110 >> 7 < (v802[5] - v1112) >> 3)
        {
          uint64_t v1113 = *(void *)(v1112 + 8 * v1111);
          if (v1113)
          {
            uint64_t v1114 = v1110 & 0x7F;
            unint64_t v1115 = *(unsigned __int16 *)(v1113 + 2 * v1114);
            uint64_t v1117 = v802[7];
            uint64_t v1116 = v802[8];
            if (v1115 < (v1116 - v1117) >> 3)
            {
              uint64_t v1118 = v1117 + 8 * v1115;
              if (v1118 != v1116 && *(_DWORD *)(v1118 + 4) == v1110)
              {
                uint64_t v1120 = v803[4];
                if (v1111 < (v803[5] - v1120) >> 3)
                {
                  uint64_t v1121 = *(void *)(v1120 + 8 * v1111);
                  if (v1121)
                  {
                    unint64_t v1122 = *(unsigned __int16 *)(v1121 + 2 * v1114);
                    uint64_t v1124 = v803[7];
                    uint64_t v1123 = v803[8];
                    if (v1122 < (v1123 - v1124) >> 3)
                    {
                      uint64_t v1125 = v1124 + 8 * v1122;
                      if (v1125 != v1123 && *(_DWORD *)(v1125 + 4) == v1110)
                      {
                        unint64_t v812 = v804[4];
                        unint64_t v813 = (uint64_t)(v804[5] - v812) >> 3;
                        if (v1111 < v813)
                        {
                          uint64_t v1127 = *(void *)(v812 + 8 * v1111);
                          if (v1127)
                          {
                            unint64_t v1128 = *(unsigned __int16 *)(v1127 + 2 * v1114);
                            uint64_t v1130 = v804[7];
                            uint64_t v1129 = v804[8];
                            unint64_t v1131 = (v1129 - v1130) >> 3;
                            if (v1131 > v1128)
                            {
                              uint64_t v1132 = v1130 + 8 * v1128;
                              if (v1132 != v1129 && *(_DWORD *)(v1132 + 4) == v1110)
                              {
                                uint64_t v1134 = v2218[4];
                                unint64_t v1135 = (v2218[5] - v1134) >> 3;
                                if (v1111 < v1135)
                                {
                                  uint64_t v1136 = *(void *)(v1134 + 8 * v1111);
                                  if (v1136)
                                  {
                                    unint64_t v1137 = *(unsigned __int16 *)(v1136 + 2 * v1114);
                                    uint64_t v1138 = v2218[7];
                                    unint64_t v814 = v2218[8];
                                    unint64_t v1139 = (uint64_t)(v814 - v1138) >> 3;
                                    if (v1139 > v1137)
                                    {
                                      uint64_t v1140 = v1138 + 8 * v1137;
                                      if (v1140 != v814 && *(_DWORD *)(v1140 + 4) == v1110)
                                      {
                                        uint64_t v1141 = v2211[4];
                                        unint64_t v1142 = (v2211[5] - v1141) >> 3;
                                        if (v1111 < v1142)
                                        {
                                          uint64_t v1143 = *(void *)(v1141 + 8 * v1111);
                                          if (v1143)
                                          {
                                            unint64_t v1144 = *(unsigned __int16 *)(v1143 + 2 * v1114);
                                            uint64_t v2126 = v2211[7];
                                            uint64_t v2142 = v2211[8];
                                            unint64_t v2110 = (v2142 - v2126) >> 3;
                                            if (v2110 > v1144)
                                            {
                                              uint64_t v1145 = v2126 + 8 * v1144;
                                              if (v1145 != v2142 && *(_DWORD *)(v1145 + 4) == v1110)
                                              {
                                                unint64_t v2085 = (uint64_t)(v2205[5] - v2205[4]) >> 3;
                                                uint64_t v2096 = v2205[4];
                                                if (v1111 < v2085)
                                                {
                                                  uint64_t v1146 = *(void *)(v2096 + 8 * v1111);
                                                  if (v1146)
                                                  {
                                                    unint64_t v1147 = *(unsigned __int16 *)(v1146 + 2 * v1114);
                                                    uint64_t v2060 = v2205[7];
                                                    uint64_t v2071 = v2205[8];
                                                    unint64_t v2049 = (v2071 - v2060) >> 3;
                                                    if (v2049 > v1147)
                                                    {
                                                      uint64_t v1148 = v2060 + 8 * v1147;
                                                      if (v1148 != v2071 && *(_DWORD *)(v1148 + 4) == v1110)
                                                      {
                                                        unint64_t v2029 = (uint64_t)(v2199[5] - v2199[4]) >> 3;
                                                        *(void *)v2038 = v2199[4];
                                                        if (v1111 < v2029)
                                                        {
                                                          uint64_t v1149 = *(void *)(*(void *)v2038 + 8 * v1111);
                                                          if (v1149)
                                                          {
                                                            unint64_t v1150 = *(unsigned __int16 *)(v1149 + 2 * v1114);
                                                            *(void *)v2011 = v2199[7];
                                                            uint64_t v2019 = v2199[8];
                                                            unint64_t v2003 = (v2019 - *(void *)v2011) >> 3;
                                                            if (v2003 > v1150)
                                                            {
                                                              uint64_t v1151 = *(void *)v2011 + 8 * v1150;
                                                              if (v1151 != v2019
                                                                && *(_DWORD *)(v1151 + 4) == v1110)
                                                              {
                                                                *(void *)v1996 = v806[4];
                                                                unint64_t v1980 = (uint64_t)(v806[5] - *(void *)v1996) >> 3;
                                                                if (v1111 < v1980)
                                                                {
                                                                  uint64_t v1152 = *(void *)(*(void *)v1996 + 8 * v1111);
                                                                  if (v1152)
                                                                  {
                                                                    unint64_t v1153 = *(unsigned __int16 *)(v1152 + 2 * v1114);
                                                                    uint64_t v1155 = v806[7];
                                                                    uint64_t v1154 = v806[8];
                                                                    unint64_t v1975 = (v1154 - v1155) >> 3;
                                                                    if (v1975 > v1153)
                                                                    {
                                                                      uint64_t v1156 = v1155 + 8 * v1153;
                                                                      if (v1156 != v1154
                                                                        && *(_DWORD *)(v1156 + 4) == v1110)
                                                                      {
                                                                        v1988 = v806;
                                                                        unint64_t v1157 = *(void *)v1106;
                                                                        uint64_t v1158 = HIDWORD(*(void *)v1106);
                                                                        unint64_t v1159 = *(void *)v1106 >> 39;
                                                                        if (v1159 < v813
                                                                          && (uint64_t v1160 = *(void *)(v812 + 8 * v1159)) != 0
                                                                          && (unint64_t v1161 = *(unsigned __int16 *)(v1160 + 2 * (HIDWORD(v1157) & 0x7F)),
                                                                              v1131 > v1161)
                                                                          && (uint64_t v1162 = v1130 + 8 * v1161, v1162 != v1129)
                                                                          && *(_DWORD *)(v1162 + 4) == v1158)
                                                                        {
                                                                          v1163 = (long long *)(v804[10]
                                                                                             + 80
                                                                                             * v1161);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1163 = (long long *)v804[11];
                                                                        }
                                                                        if (v1159 < v1135
                                                                          && (uint64_t v1164 = *(void *)(v1134 + 8 * v1159)) != 0
                                                                          && (unint64_t v1165 = *(unsigned __int16 *)(v1164 + 2 * (HIDWORD(v1157) & 0x7F)),
                                                                              v1139 > v1165)
                                                                          && (uint64_t v1166 = v1138 + 8 * v1165, v1166 != v814)
                                                                          && *(_DWORD *)(v1166 + 4) == v1158)
                                                                        {
                                                                          v1167 = (arComponents::AlbedoTextureComponent *)(v2218[10] + 48 * *(unsigned __int16 *)(v1164 + 2 * (HIDWORD(v1157) & 0x7F)));
                                                                        }
                                                                        else
                                                                        {
                                                                          v1167 = (arComponents::AlbedoTextureComponent *)v2218[11];
                                                                        }
                                                                        if (v1159 < v1142
                                                                          && (uint64_t v1168 = *(void *)(v1141 + 8 * v1159)) != 0
                                                                          && (unint64_t v1169 = *(unsigned __int16 *)(v1168 + 2 * (HIDWORD(v1157) & 0x7F)),
                                                                              v2110 > v1169)
                                                                          && (uint64_t v1170 = v2126 + 8 * v1169, v1170 != v2142)
                                                                          && *(_DWORD *)(v1170 + 4) == v1158)
                                                                        {
                                                                          v1171 = (long long *)(v2211[10] + 16 * v1169);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1171 = (long long *)v2211[11];
                                                                        }
                                                                        if (v1159 < v2085
                                                                          && (uint64_t v1172 = *(void *)(v2096 + 8 * v1159)) != 0
                                                                          && (unint64_t v1173 = *(unsigned __int16 *)(v1172 + 2 * (HIDWORD(v1157) & 0x7F)),
                                                                              v2049 > v1173)
                                                                          && (uint64_t v1174 = v2060 + 8 * v1173, v1174 != v2071)
                                                                          && *(_DWORD *)(v1174 + 4) == v1158)
                                                                        {
                                                                          v1175 = (uint64_t *)(v2205[10] + 8 * v1173);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1175 = (uint64_t *)v2205[11];
                                                                        }
                                                                        if (v1159 < v2029
                                                                          && (uint64_t v1176 = *(void *)(*(void *)v2038
                                                                                                + 8 * v1159)) != 0
                                                                          && (unint64_t v1177 = *(unsigned __int16 *)(v1176 + 2 * (HIDWORD(v1157) & 0x7F)),
                                                                              v2003 > v1177)
                                                                          && (uint64_t v1178 = *(void *)v2011 + 8 * v1177,
                                                                              v1178 != v2019)
                                                                          && *(_DWORD *)(v1178 + 4) == v1158)
                                                                        {
                                                                          v1179 = (long long *)(v2199[10]
                                                                                             + 24
                                                                                             * v1177);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1179 = (long long *)v2199[11];
                                                                        }
                                                                        if (v1159 < v1980
                                                                          && (uint64_t v1180 = *(void *)(*(void *)v1996
                                                                                                + 8 * v1159)) != 0
                                                                          && (unint64_t v1181 = *(unsigned __int16 *)(v1180 + 2 * (HIDWORD(v1157) & 0x7F)),
                                                                              v1975 > v1181)
                                                                          && (uint64_t v1182 = v1155 + 8 * v1181, v1182 != v1154)
                                                                          && *(_DWORD *)(v1182 + 4) == v1158)
                                                                        {
                                                                          v1109 = (long long *)(v1988[10] + 16 * v1181);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1109 = (long long *)v1988[11];
                                                                        }
                                                                        md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshDataComponent&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::Boundary&,arComponents::StyleColor&)#1}::operator()((uint64_t *)&v2234, v1157, v1163, *v1108, v1167, v1171, v1175, v1179, v1109);
                                                                        v806 = v1988;
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v1108;
        v1106 += 8;
      }
      while (v1106 != v1107);
    }
    v807 = (uint64_t *)(v2222 + 136);
    if (v811 != v816) {
      goto LABEL_1460;
    }
    goto LABEL_1364;
  }
  if (v811 == v816)
  {
LABEL_1364:
    v2234 = &v2238;
    v2235 = v807;
    k = &v2230;
    uint64_t v1183 = v2218[7];
    uint64_t v1184 = v2218[8];
    if (v1183 != v1184)
    {
      v1185 = (arComponents::AlbedoTextureComponent *)v2218[10];
      do
      {
        unint64_t v1187 = *(unsigned int *)(v1183 + 4);
        unint64_t v1188 = v1187 >> 7;
        uint64_t v1189 = v802[4];
        if (v1187 >> 7 < (v802[5] - v1189) >> 3)
        {
          uint64_t v1190 = *(void *)(v1189 + 8 * v1188);
          if (v1190)
          {
            uint64_t v1191 = v1187 & 0x7F;
            unint64_t v1192 = *(unsigned __int16 *)(v1190 + 2 * v1191);
            uint64_t v1194 = v802[7];
            uint64_t v1193 = v802[8];
            if (v1192 < (v1193 - v1194) >> 3)
            {
              uint64_t v1195 = v1194 + 8 * v1192;
              if (v1195 != v1193 && *(_DWORD *)(v1195 + 4) == v1187)
              {
                uint64_t v1197 = v803[4];
                if (v1188 < (v803[5] - v1197) >> 3)
                {
                  uint64_t v1198 = *(void *)(v1197 + 8 * v1188);
                  if (v1198)
                  {
                    unint64_t v1199 = *(unsigned __int16 *)(v1198 + 2 * v1191);
                    uint64_t v1201 = v803[7];
                    uint64_t v1200 = v803[8];
                    if (v1199 < (v1200 - v1201) >> 3)
                    {
                      uint64_t v1202 = v1201 + 8 * v1199;
                      if (v1202 != v1200 && *(_DWORD *)(v1202 + 4) == v1187)
                      {
                        uint64_t v1204 = v804[4];
                        unint64_t v1205 = (v804[5] - v1204) >> 3;
                        if (v1188 < v1205)
                        {
                          uint64_t v1206 = *(void *)(v1204 + 8 * v1188);
                          if (v1206)
                          {
                            unint64_t v1207 = *(unsigned __int16 *)(v1206 + 2 * v1191);
                            uint64_t v1208 = v804[7];
                            uint64_t v1209 = v804[8];
                            unint64_t v813 = (v1209 - v1208) >> 3;
                            if (v813 > v1207)
                            {
                              uint64_t v1210 = v1208 + 8 * v1207;
                              if (v1210 != v1209 && *(_DWORD *)(v1210 + 4) == v1187)
                              {
                                uint64_t v1212 = v2157[4];
                                unint64_t v1213 = (v2157[5] - v1212) >> 3;
                                if (v1188 < v1213)
                                {
                                  uint64_t v1214 = *(void *)(v1212 + 8 * v1188);
                                  if (v1214)
                                  {
                                    unint64_t v1215 = *(unsigned __int16 *)(v1214 + 2 * v1191);
                                    unint64_t v814 = v2157[7];
                                    uint64_t v1216 = v2157[8];
                                    unint64_t v812 = (uint64_t)(v1216 - v814) >> 3;
                                    if (v812 > v1215)
                                    {
                                      unint64_t v1217 = v814 + 8 * v1215;
                                      if (v1217 != v1216 && *(_DWORD *)(v1217 + 4) == v1187)
                                      {
                                        uint64_t v1218 = v2211[4];
                                        unint64_t v1219 = (v2211[5] - v1218) >> 3;
                                        if (v1188 < v1219)
                                        {
                                          uint64_t v1220 = *(void *)(v1218 + 8 * v1188);
                                          if (v1220)
                                          {
                                            unint64_t v1221 = *(unsigned __int16 *)(v1220 + 2 * v1191);
                                            uint64_t v1223 = v2211[7];
                                            uint64_t v1222 = v2211[8];
                                            unint64_t v2143 = (v1222 - v1223) >> 3;
                                            if (v2143 > v1221)
                                            {
                                              uint64_t v1224 = v1223 + 8 * v1221;
                                              if (v1224 != v1222 && *(_DWORD *)(v1224 + 4) == v1187)
                                              {
                                                uint64_t v2127 = v2205[4];
                                                unint64_t v2111 = (v2205[5] - v2127) >> 3;
                                                if (v1188 < v2111)
                                                {
                                                  uint64_t v1225 = *(void *)(v2127 + 8 * v1188);
                                                  if (v1225)
                                                  {
                                                    unint64_t v2097 = *(unsigned __int16 *)(v1225 + 2 * v1191);
                                                    uint64_t v2072 = v2205[7];
                                                    uint64_t v2086 = v2205[8];
                                                    unint64_t v2061 = (v2086 - v2072) >> 3;
                                                    if (v2061 > v2097)
                                                    {
                                                      uint64_t v1226 = v2072 + 8 * v2097;
                                                      if (v1226 != v2086 && *(_DWORD *)(v1226 + 4) == v1187)
                                                      {
                                                        uint64_t v2098 = v2199[4];
                                                        unint64_t v2050 = (v2199[5] - v2098) >> 3;
                                                        if (v1188 < v2050)
                                                        {
                                                          uint64_t v1227 = *(void *)(v2098 + 8 * v1188);
                                                          if (v1227)
                                                          {
                                                            *(void *)v2039 = *(unsigned __int16 *)(v1227 + 2 * v1191);
                                                            uint64_t v2020 = v2199[7];
                                                            uint64_t v2030 = v2199[8];
                                                            unint64_t v2012 = (v2030 - v2020) >> 3;
                                                            if (v2012 > *(void *)v2039)
                                                            {
                                                              uint64_t v1228 = v2020 + 8 * *(void *)v2039;
                                                              if (v1228 != v2030
                                                                && *(_DWORD *)(v1228 + 4) == v1187)
                                                              {
                                                                *(void *)v2040 = v806[4];
                                                                unint64_t v2004 = (uint64_t)(v806[5] - *(void *)v2040) >> 3;
                                                                if (v1188 < v2004)
                                                                {
                                                                  uint64_t v1229 = *(void *)(*(void *)v2040 + 8 * v1188);
                                                                  if (v1229)
                                                                  {
                                                                    unint64_t v1230 = *(unsigned __int16 *)(v1229 + 2 * v1191);
                                                                    uint64_t v1231 = v806[7];
                                                                    *(void *)v1997 = v806[8];
                                                                    unint64_t v1981 = (*(void *)v1997 - v1231) >> 3;
                                                                    if (v1981 > v1230)
                                                                    {
                                                                      uint64_t v1232 = v1231 + 8 * v1230;
                                                                      if (v1232 != *(void *)v1997
                                                                        && *(_DWORD *)(v1232 + 4) == v1187)
                                                                      {
                                                                        v1976 = v1185;
                                                                        v1989 = v806;
                                                                        unint64_t v1233 = *(void *)v1183;
                                                                        uint64_t v1971 = HIDWORD(*(void *)v1183);
                                                                        unint64_t v1234 = *(void *)v1183 >> 39;
                                                                        if (v1234 < v1205
                                                                          && (uint64_t v1235 = *(void *)(v1204 + 8 * v1234)) != 0
                                                                          && (unint64_t v1236 = *(unsigned __int16 *)(v1235 + 2 * (HIDWORD(v1233) & 0x7F)),
                                                                              v813 > v1236)
                                                                          && (uint64_t v1237 = v1208 + 8 * v1236, v1237 != v1209)
                                                                          && *(_DWORD *)(v1237 + 4) == v1971)
                                                                        {
                                                                          v1238 = (long long *)(v804[10]
                                                                                             + 80
                                                                                             * v1236);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1238 = (long long *)v804[11];
                                                                        }
                                                                        if (v1234 < v1213
                                                                          && (uint64_t v1239 = *(void *)(v1212 + 8 * v1234)) != 0
                                                                          && (unint64_t v1240 = *(unsigned __int16 *)(v1239 + 2 * (HIDWORD(v1233) & 0x7F)),
                                                                              v812 > v1240)
                                                                          && (unint64_t v1241 = v814 + 8 * v1240, v1241 != v1216)
                                                                          && *(_DWORD *)(v1241 + 4) == v1971)
                                                                        {
                                                                          v1242 = (uint64_t *)(v2157[10] + 8 * v1240);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1242 = (uint64_t *)v2157[11];
                                                                        }
                                                                        if (v1234 < v1219
                                                                          && (uint64_t v1243 = *(void *)(v1218 + 8 * v1234)) != 0
                                                                          && (unint64_t v1244 = *(unsigned __int16 *)(v1243 + 2 * (HIDWORD(v1233) & 0x7F)),
                                                                              v2143 > v1244)
                                                                          && (uint64_t v1245 = v1223 + 8 * v1244, v1245 != v1222)
                                                                          && *(_DWORD *)(v1245 + 4) == v1971)
                                                                        {
                                                                          v1246 = (long long *)(v2211[10] + 16 * v1244);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1246 = (long long *)v2211[11];
                                                                        }
                                                                        if (v1234 < v2111
                                                                          && (uint64_t v1247 = *(void *)(v2127 + 8 * v1234)) != 0
                                                                          && (unint64_t v1248 = *(unsigned __int16 *)(v1247 + 2 * (HIDWORD(v1233) & 0x7F)),
                                                                              v2061 > v1248)
                                                                          && (uint64_t v1249 = v2072 + 8 * v1248, v1249 != v2086)
                                                                          && *(_DWORD *)(v1249 + 4) == v1971)
                                                                        {
                                                                          v1250 = (uint64_t *)(v2205[10] + 8 * v1248);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1250 = (uint64_t *)v2205[11];
                                                                        }
                                                                        if (v1234 < v2050
                                                                          && (uint64_t v1251 = *(void *)(v2098 + 8 * v1234)) != 0
                                                                          && (unint64_t v1252 = *(unsigned __int16 *)(v1251 + 2 * (HIDWORD(v1233) & 0x7F)),
                                                                              v2012 > v1252)
                                                                          && (uint64_t v1253 = v2020 + 8 * v1252, v1253 != v2030)
                                                                          && *(_DWORD *)(v1253 + 4) == v1971)
                                                                        {
                                                                          v1254 = (long long *)(v2199[10]
                                                                                             + 24
                                                                                             * v1252);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1254 = (long long *)v2199[11];
                                                                        }
                                                                        if (v1234 < v2004
                                                                          && (uint64_t v1255 = *(void *)(*(void *)v2040
                                                                                                + 8 * v1234)) != 0
                                                                          && (unint64_t v1256 = *(unsigned __int16 *)(v1255 + 2 * (HIDWORD(v1233) & 0x7F)),
                                                                              v1981 > v1256)
                                                                          && (uint64_t v1257 = v1231 + 8 * v1256,
                                                                              v1257 != *(void *)v1997)
                                                                          && *(_DWORD *)(v1257 + 4) == v1971)
                                                                        {
                                                                          v1186 = (long long *)(v1989[10] + 16 * v1256);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1186 = (long long *)v1989[11];
                                                                        }
                                                                        md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshDataComponent&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::Boundary&,arComponents::StyleColor&)#1}::operator()((uint64_t *)&v2234, v1233, v1238, *v1242, v1976, v1246, v1250, v1254, v1186);
                                                                        v1185 = v1976;
                                                                        v806 = v1989;
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v1185 = (arComponents::AlbedoTextureComponent *)((char *)v1185 + 48);
        v1183 += 8;
      }
      while (v1183 != v1184);
    }
    v807 = (uint64_t *)(v2222 + 136);
  }
LABEL_1460:
  if (v2211 + 4 == v816)
  {
    v2234 = &v2238;
    v2235 = v807;
    k = &v2230;
    uint64_t v1261 = v2211[7];
    uint64_t v1262 = v2211[8];
    if (v1261 != v1262)
    {
      v1263 = (long long *)v2211[10];
      do
      {
        unint64_t v1740 = *(unsigned int *)(v1261 + 4);
        unint64_t v1741 = v1740 >> 7;
        uint64_t v1742 = v802[4];
        if (v1740 >> 7 < (v802[5] - v1742) >> 3)
        {
          uint64_t v1743 = *(void *)(v1742 + 8 * v1741);
          if (v1743)
          {
            uint64_t v1744 = v1740 & 0x7F;
            unint64_t v1745 = *(unsigned __int16 *)(v1743 + 2 * v1744);
            uint64_t v1747 = v802[7];
            uint64_t v1746 = v802[8];
            if (v1745 < (v1746 - v1747) >> 3)
            {
              uint64_t v1748 = v1747 + 8 * v1745;
              if (v1748 != v1746 && *(_DWORD *)(v1748 + 4) == v1740)
              {
                uint64_t v1750 = v803[4];
                if (v1741 < (v803[5] - v1750) >> 3)
                {
                  uint64_t v1751 = *(void *)(v1750 + 8 * v1741);
                  if (v1751)
                  {
                    unint64_t v1752 = *(unsigned __int16 *)(v1751 + 2 * v1744);
                    uint64_t v1754 = v803[7];
                    uint64_t v1753 = v803[8];
                    if (v1752 < (v1753 - v1754) >> 3)
                    {
                      uint64_t v1755 = v1754 + 8 * v1752;
                      if (v1755 != v1753 && *(_DWORD *)(v1755 + 4) == v1740)
                      {
                        unint64_t v812 = v804[4];
                        unint64_t v1757 = (uint64_t)(v804[5] - v812) >> 3;
                        if (v1741 < v1757)
                        {
                          uint64_t v1758 = *(void *)(v812 + 8 * v1741);
                          if (v1758)
                          {
                            unint64_t v1759 = *(unsigned __int16 *)(v1758 + 2 * v1744);
                            uint64_t v1761 = v804[7];
                            uint64_t v1760 = v804[8];
                            unint64_t v1762 = (v1760 - v1761) >> 3;
                            if (v1762 > v1759)
                            {
                              uint64_t v1763 = v1761 + 8 * v1759;
                              if (v1763 != v1760 && *(_DWORD *)(v1763 + 4) == v1740)
                              {
                                uint64_t v1765 = v2157[4];
                                unint64_t v1766 = (v2157[5] - v1765) >> 3;
                                if (v1741 < v1766)
                                {
                                  uint64_t v1767 = *(void *)(v1765 + 8 * v1741);
                                  if (v1767)
                                  {
                                    unint64_t v1768 = *(unsigned __int16 *)(v1767 + 2 * v1744);
                                    uint64_t v1769 = v2157[7];
                                    unint64_t v813 = v2157[8];
                                    unint64_t v1770 = (uint64_t)(v813 - v1769) >> 3;
                                    if (v1770 > v1768)
                                    {
                                      uint64_t v1771 = v1769 + 8 * v1768;
                                      if (v1771 != v813 && *(_DWORD *)(v1771 + 4) == v1740)
                                      {
                                        uint64_t v1772 = v2218[4];
                                        unint64_t v1773 = (v2218[5] - v1772) >> 3;
                                        if (v1741 < v1773)
                                        {
                                          uint64_t v1774 = *(void *)(v1772 + 8 * v1741);
                                          if (v1774)
                                          {
                                            unint64_t v1775 = *(unsigned __int16 *)(v1774 + 2 * v1744);
                                            uint64_t v2167 = v2218[8];
                                            uint64_t v2146 = v2218[7];
                                            unint64_t v814 = (v2167 - v2146) >> 3;
                                            v807 = (uint64_t *)(v2222 + 136);
                                            unint64_t v2129 = v814;
                                            if (v814 > v1775)
                                            {
                                              uint64_t v1776 = v2146 + 8 * v1775;
                                              unint64_t v814 = v2218[8];
                                              if (v1776 != v2167 && *(_DWORD *)(v1776 + 4) == v1740)
                                              {
                                                unint64_t v814 = v2205[4];
                                                v807 = (uint64_t *)(v2222 + 136);
                                                unint64_t v2100 = (uint64_t)(v2205[5] - v814) >> 3;
                                                unint64_t v2113 = v814;
                                                if (v1741 < v2100)
                                                {
                                                  uint64_t v1777 = *(void *)(v814 + 8 * v1741);
                                                  if (v1777)
                                                  {
                                                    unint64_t v1778 = *(unsigned __int16 *)(v1777 + 2 * v1744);
                                                    uint64_t v2075 = v2205[7];
                                                    uint64_t v2088 = v2205[8];
                                                    unint64_t v814 = (v2088 - v2075) >> 3;
                                                    v807 = (uint64_t *)(v2222 + 136);
                                                    unint64_t v2063 = v814;
                                                    if (v814 > v1778)
                                                    {
                                                      uint64_t v1779 = v2075 + 8 * v1778;
                                                      unint64_t v814 = v2205[8];
                                                      if (v1779 != v2088 && *(_DWORD *)(v1779 + 4) == v1740)
                                                      {
                                                        unint64_t v814 = v2199[5];
                                                        v807 = (uint64_t *)(v2222 + 136);
                                                        uint64_t v2052 = v2199[4];
                                                        unint64_t v2042 = (uint64_t)(v814 - v2052) >> 3;
                                                        if (v1741 < v2042)
                                                        {
                                                          uint64_t v1780 = *(void *)(v2052 + 8 * v1741);
                                                          if (v1780)
                                                          {
                                                            unint64_t v2032 = *(unsigned __int16 *)(v1780 + 2 * v1744);
                                                            *(void *)v2014 = v2199[8];
                                                            uint64_t v2022 = v2199[7];
                                                            v807 = (uint64_t *)(v2222 + 136);
                                                            unint64_t v2006 = (*(void *)v2014 - v2022) >> 3;
                                                            unint64_t v814 = v2032;
                                                            if (v2006 > v2032)
                                                            {
                                                              uint64_t v1781 = v2022 + 8 * v2032;
                                                              unint64_t v814 = v2199[8];
                                                              if (v1781 != *(void *)v2014
                                                                && *(_DWORD *)(v1781 + 4) == v1740)
                                                              {
                                                                unint64_t v814 = v806[5];
                                                                uint64_t v2033 = v806[4];
                                                                unint64_t v1998 = (uint64_t)(v814 - v2033) >> 3;
                                                                if (v1741 < v1998)
                                                                {
                                                                  uint64_t v1782 = *(void *)(v2033 + 8 * v1741);
                                                                  if (v1782)
                                                                  {
                                                                    unint64_t v1783 = *(unsigned __int16 *)(v1782 + 2 * v1744);
                                                                    uint64_t v1785 = v806[7];
                                                                    uint64_t v1784 = v806[8];
                                                                    unint64_t v814 = (v1784 - v1785) >> 3;
                                                                    v807 = (uint64_t *)(v2222 + 136);
                                                                    if (v814 > v1783)
                                                                    {
                                                                      uint64_t v1786 = v1785 + 8 * v1783;
                                                                      if (v1786 != v1784
                                                                        && *(_DWORD *)(v1786 + 4) == v1740)
                                                                      {
                                                                        v1982 = v1263;
                                                                        v1991 = v806;
                                                                        unint64_t v1787 = *(void *)v1261;
                                                                        uint64_t v1788 = HIDWORD(*(void *)v1261);
                                                                        unint64_t v1789 = *(void *)v1261 >> 39;
                                                                        if (v1789 < v1757
                                                                          && (uint64_t v1790 = *(void *)(v812 + 8 * v1789)) != 0
                                                                          && (unint64_t v1791 = *(unsigned __int16 *)(v1790 + 2 * (HIDWORD(v1787) & 0x7F)),
                                                                              v1762 > v1791)
                                                                          && (uint64_t v1792 = v1761 + 8 * v1791, v1792 != v1760)
                                                                          && *(_DWORD *)(v1792 + 4) == v1788)
                                                                        {
                                                                          v1793 = (long long *)(v804[10]
                                                                                             + 80
                                                                                             * v1791);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1793 = (long long *)v804[11];
                                                                        }
                                                                        if (v1789 < v1766
                                                                          && (uint64_t v1794 = *(void *)(v1765 + 8 * v1789)) != 0
                                                                          && (unint64_t v1795 = *(unsigned __int16 *)(v1794 + 2 * (HIDWORD(v1787) & 0x7F)),
                                                                              v1770 > v1795)
                                                                          && (uint64_t v1796 = v1769 + 8 * v1795, v1796 != v813)
                                                                          && *(_DWORD *)(v1796 + 4) == v1788)
                                                                        {
                                                                          v1797 = (uint64_t *)(v2157[10] + 8 * v1795);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1797 = (uint64_t *)v2157[11];
                                                                        }
                                                                        if (v1789 < v1773
                                                                          && (uint64_t v1798 = *(void *)(v1772 + 8 * v1789)) != 0
                                                                          && (unint64_t v1799 = *(unsigned __int16 *)(v1798 + 2 * (HIDWORD(v1787) & 0x7F)),
                                                                              v2129 > v1799)
                                                                          && (uint64_t v1800 = v2146 + 8 * v1799, v1800 != v2167)
                                                                          && *(_DWORD *)(v1800 + 4) == v1788)
                                                                        {
                                                                          v1801 = (arComponents::AlbedoTextureComponent *)(v2218[10] + 48 * v1799);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1801 = (arComponents::AlbedoTextureComponent *)v2218[11];
                                                                        }
                                                                        if (v1789 < v2100
                                                                          && (uint64_t v1802 = *(void *)(v2113 + 8 * v1789)) != 0
                                                                          && (unint64_t v1803 = *(unsigned __int16 *)(v1802 + 2 * (HIDWORD(v1787) & 0x7F)),
                                                                              v2063 > v1803)
                                                                          && (uint64_t v1804 = v2075 + 8 * v1803, v1804 != v2088)
                                                                          && *(_DWORD *)(v1804 + 4) == v1788)
                                                                        {
                                                                          v1805 = (uint64_t *)(v2205[10] + 8 * v1803);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1805 = (uint64_t *)v2205[11];
                                                                        }
                                                                        if (v1789 < v2042
                                                                          && (uint64_t v1806 = *(void *)(v2052 + 8 * v1789)) != 0
                                                                          && (unint64_t v1807 = *(unsigned __int16 *)(v1806 + 2 * (HIDWORD(v1787) & 0x7F)),
                                                                              v2006 > v1807)
                                                                          && (uint64_t v1808 = v2022 + 8 * v1807,
                                                                              v1808 != *(void *)v2014)
                                                                          && *(_DWORD *)(v1808 + 4) == v1788)
                                                                        {
                                                                          v1809 = (long long *)(v2199[10]
                                                                                             + 24
                                                                                             * v1807);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1809 = (long long *)v2199[11];
                                                                        }
                                                                        if (v1789 < v1998
                                                                          && (uint64_t v1810 = *(void *)(v2033 + 8 * v1789)) != 0
                                                                          && (unint64_t v1811 = *(unsigned __int16 *)(v1810 + 2 * (HIDWORD(v1787) & 0x7F)),
                                                                              v814 > v1811)
                                                                          && (uint64_t v1812 = v1785 + 8 * v1811, v1812 != v1784)
                                                                          && *(_DWORD *)(v1812 + 4) == v1788)
                                                                        {
                                                                          v1739 = (long long *)(v1991[10] + 16 * v1811);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1739 = (long long *)v1991[11];
                                                                        }
                                                                        md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshDataComponent&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::Boundary&,arComponents::StyleColor&)#1}::operator()((uint64_t *)&v2234, v1787, v1793, *v1797, v1801, v1982, v1805, v1809, v1739);
                                                                        v1263 = v1982;
                                                                        v806 = v1991;
                                                                        v807 = (uint64_t *)(v2222 + 136);
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v1263;
        v1261 += 8;
      }
      while (v1261 != v1262);
    }
  }
  if (v2205 + 4 == v816)
  {
    v2234 = &v2238;
    v2235 = v807;
    k = &v2230;
    uint64_t v1264 = v2205[7];
    uint64_t v1265 = v2205[8];
    if (v1264 != v1265)
    {
      v1266 = (uint64_t *)v2205[10];
      do
      {
        unint64_t v1814 = *(unsigned int *)(v1264 + 4);
        unint64_t v1815 = v1814 >> 7;
        uint64_t v1816 = v802[4];
        if (v1814 >> 7 < (v802[5] - v1816) >> 3)
        {
          uint64_t v1817 = *(void *)(v1816 + 8 * v1815);
          if (v1817)
          {
            uint64_t v1818 = v1814 & 0x7F;
            unint64_t v1819 = *(unsigned __int16 *)(v1817 + 2 * v1818);
            uint64_t v1821 = v802[7];
            uint64_t v1820 = v802[8];
            if (v1819 < (v1820 - v1821) >> 3)
            {
              uint64_t v1822 = v1821 + 8 * v1819;
              if (v1822 != v1820 && *(_DWORD *)(v1822 + 4) == v1814)
              {
                uint64_t v1824 = v803[4];
                if (v1815 < (v803[5] - v1824) >> 3)
                {
                  uint64_t v1825 = *(void *)(v1824 + 8 * v1815);
                  if (v1825)
                  {
                    unint64_t v1826 = *(unsigned __int16 *)(v1825 + 2 * v1818);
                    uint64_t v1828 = v803[7];
                    uint64_t v1827 = v803[8];
                    if (v1826 < (v1827 - v1828) >> 3)
                    {
                      uint64_t v1829 = v1828 + 8 * v1826;
                      if (v1829 != v1827 && *(_DWORD *)(v1829 + 4) == v1814)
                      {
                        unint64_t v812 = v804[4];
                        unint64_t v1831 = (uint64_t)(v804[5] - v812) >> 3;
                        if (v1815 < v1831)
                        {
                          uint64_t v1832 = *(void *)(v812 + 8 * v1815);
                          if (v1832)
                          {
                            unint64_t v1833 = *(unsigned __int16 *)(v1832 + 2 * v1818);
                            uint64_t v1835 = v804[7];
                            uint64_t v1834 = v804[8];
                            unint64_t v1836 = (v1834 - v1835) >> 3;
                            if (v1836 > v1833)
                            {
                              uint64_t v1837 = v1835 + 8 * v1833;
                              if (v1837 != v1834 && *(_DWORD *)(v1837 + 4) == v1814)
                              {
                                uint64_t v1839 = v2157[4];
                                unint64_t v1840 = (v2157[5] - v1839) >> 3;
                                if (v1815 < v1840)
                                {
                                  uint64_t v1841 = *(void *)(v1839 + 8 * v1815);
                                  if (v1841)
                                  {
                                    unint64_t v1842 = *(unsigned __int16 *)(v1841 + 2 * v1818);
                                    uint64_t v1843 = v2157[7];
                                    unint64_t v813 = v2157[8];
                                    unint64_t v1844 = (uint64_t)(v813 - v1843) >> 3;
                                    if (v1844 > v1842)
                                    {
                                      uint64_t v1845 = v1843 + 8 * v1842;
                                      if (v1845 != v813 && *(_DWORD *)(v1845 + 4) == v1814)
                                      {
                                        uint64_t v1846 = v2218[4];
                                        unint64_t v1847 = (v2218[5] - v1846) >> 3;
                                        if (v1815 < v1847)
                                        {
                                          uint64_t v1848 = *(void *)(v1846 + 8 * v1815);
                                          if (v1848)
                                          {
                                            unint64_t v1849 = *(unsigned __int16 *)(v1848 + 2 * v1818);
                                            uint64_t v2168 = v2218[7];
                                            uint64_t v2179 = v2218[8];
                                            unint64_t v814 = (v2179 - v2168) >> 3;
                                            v807 = (uint64_t *)(v2222 + 136);
                                            unint64_t v2147 = v814;
                                            if (v814 > v1849)
                                            {
                                              uint64_t v1850 = v2168 + 8 * v1849;
                                              unint64_t v814 = v2218[8];
                                              if (v1850 != v2179 && *(_DWORD *)(v1850 + 4) == v1814)
                                              {
                                                unint64_t v814 = v2211[4];
                                                v807 = (uint64_t *)(v2222 + 136);
                                                unint64_t v2114 = (uint64_t)(v2211[5] - v814) >> 3;
                                                unint64_t v2130 = v814;
                                                if (v1815 < v2114)
                                                {
                                                  uint64_t v1851 = *(void *)(v814 + 8 * v1815);
                                                  if (v1851)
                                                  {
                                                    unint64_t v1852 = *(unsigned __int16 *)(v1851 + 2 * v1818);
                                                    uint64_t v2089 = v2211[7];
                                                    uint64_t v2101 = v2211[8];
                                                    unint64_t v814 = (v2101 - v2089) >> 3;
                                                    v807 = (uint64_t *)(v2222 + 136);
                                                    unint64_t v2076 = v814;
                                                    if (v814 > v1852)
                                                    {
                                                      uint64_t v1853 = v2089 + 8 * v1852;
                                                      unint64_t v814 = v2211[8];
                                                      if (v1853 != v2101 && *(_DWORD *)(v1853 + 4) == v1814)
                                                      {
                                                        unint64_t v814 = v2199[5];
                                                        v807 = (uint64_t *)(v2222 + 136);
                                                        uint64_t v2064 = v2199[4];
                                                        unint64_t v2053 = (uint64_t)(v814 - v2064) >> 3;
                                                        if (v1815 < v2053)
                                                        {
                                                          uint64_t v1854 = *(void *)(v2064 + 8 * v1815);
                                                          if (v1854)
                                                          {
                                                            *(void *)v2043 = *(unsigned __int16 *)(v1854 + 2 * v1818);
                                                            uint64_t v2023 = v2199[8];
                                                            uint64_t v2034 = v2199[7];
                                                            v807 = (uint64_t *)(v2222 + 136);
                                                            unint64_t v2015 = (v2023 - v2034) >> 3;
                                                            unint64_t v814 = *(void *)v2043;
                                                            if (v2015 > *(void *)v2043)
                                                            {
                                                              uint64_t v1855 = v2034 + 8 * *(void *)v2043;
                                                              unint64_t v814 = v2199[8];
                                                              if (v1855 != v2023
                                                                && *(_DWORD *)(v1855 + 4) == v1814)
                                                              {
                                                                unint64_t v814 = v806[5];
                                                                *(void *)v2044 = v806[4];
                                                                unint64_t v2007 = (uint64_t)(v814 - *(void *)v2044) >> 3;
                                                                if (v1815 < v2007)
                                                                {
                                                                  uint64_t v1856 = *(void *)(*(void *)v2044 + 8 * v1815);
                                                                  if (v1856)
                                                                  {
                                                                    unint64_t v1857 = *(unsigned __int16 *)(v1856 + 2 * v1818);
                                                                    uint64_t v1859 = v806[7];
                                                                    uint64_t v1858 = v806[8];
                                                                    unint64_t v814 = (v1858 - v1859) >> 3;
                                                                    v807 = (uint64_t *)(v2222 + 136);
                                                                    if (v814 > v1857)
                                                                    {
                                                                      uint64_t v1860 = v1859 + 8 * v1857;
                                                                      if (v1860 != v1858
                                                                        && *(_DWORD *)(v1860 + 4) == v1814)
                                                                      {
                                                                        v1992 = v806;
                                                                        v1999 = v1266;
                                                                        unint64_t v1861 = *(void *)v1264;
                                                                        uint64_t v1862 = HIDWORD(*(void *)v1264);
                                                                        unint64_t v1863 = *(void *)v1264 >> 39;
                                                                        if (v1863 < v1831
                                                                          && (uint64_t v1864 = *(void *)(v812 + 8 * v1863)) != 0
                                                                          && (unint64_t v1865 = *(unsigned __int16 *)(v1864 + 2 * (HIDWORD(v1861) & 0x7F)),
                                                                              v1836 > v1865)
                                                                          && (uint64_t v1866 = v1835 + 8 * v1865, v1866 != v1834)
                                                                          && *(_DWORD *)(v1866 + 4) == v1862)
                                                                        {
                                                                          v1867 = (long long *)(v804[10]
                                                                                             + 80
                                                                                             * v1865);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1867 = (long long *)v804[11];
                                                                        }
                                                                        if (v1863 < v1840
                                                                          && (uint64_t v1868 = *(void *)(v1839 + 8 * v1863)) != 0
                                                                          && (unint64_t v1869 = *(unsigned __int16 *)(v1868 + 2 * (HIDWORD(v1861) & 0x7F)),
                                                                              v1844 > v1869)
                                                                          && (uint64_t v1870 = v1843 + 8 * v1869, v1870 != v813)
                                                                          && *(_DWORD *)(v1870 + 4) == v1862)
                                                                        {
                                                                          v1871 = (uint64_t *)(v2157[10] + 8 * v1869);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1871 = (uint64_t *)v2157[11];
                                                                        }
                                                                        if (v1863 < v1847
                                                                          && (uint64_t v1872 = *(void *)(v1846 + 8 * v1863)) != 0
                                                                          && (unint64_t v1873 = *(unsigned __int16 *)(v1872 + 2 * (HIDWORD(v1861) & 0x7F)),
                                                                              v2147 > v1873)
                                                                          && (uint64_t v1874 = v2168 + 8 * v1873, v1874 != v2179)
                                                                          && *(_DWORD *)(v1874 + 4) == v1862)
                                                                        {
                                                                          v1875 = (arComponents::AlbedoTextureComponent *)(v2218[10] + 48 * v1873);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1875 = (arComponents::AlbedoTextureComponent *)v2218[11];
                                                                        }
                                                                        if (v1863 < v2114
                                                                          && (uint64_t v1876 = *(void *)(v2130 + 8 * v1863)) != 0
                                                                          && (unint64_t v1877 = *(unsigned __int16 *)(v1876 + 2 * (HIDWORD(v1861) & 0x7F)),
                                                                              v2076 > v1877)
                                                                          && (uint64_t v1878 = v2089 + 8 * v1877, v1878 != v2101)
                                                                          && *(_DWORD *)(v1878 + 4) == v1862)
                                                                        {
                                                                          v1879 = (long long *)(v2211[10] + 16 * v1877);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1879 = (long long *)v2211[11];
                                                                        }
                                                                        if (v1863 < v2053
                                                                          && (uint64_t v1880 = *(void *)(v2064 + 8 * v1863)) != 0
                                                                          && (unint64_t v1881 = *(unsigned __int16 *)(v1880 + 2 * (HIDWORD(v1861) & 0x7F)),
                                                                              v2015 > v1881)
                                                                          && (uint64_t v1882 = v2034 + 8 * v1881, v1882 != v2023)
                                                                          && *(_DWORD *)(v1882 + 4) == v1862)
                                                                        {
                                                                          v1883 = (long long *)(v2199[10]
                                                                                             + 24
                                                                                             * v1881);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1883 = (long long *)v2199[11];
                                                                        }
                                                                        if (v1863 < v2007
                                                                          && (uint64_t v1884 = *(void *)(*(void *)v2044
                                                                                                + 8 * v1863)) != 0
                                                                          && (unint64_t v1885 = *(unsigned __int16 *)(v1884 + 2 * (HIDWORD(v1861) & 0x7F)),
                                                                              v814 > v1885)
                                                                          && (uint64_t v1886 = v1859 + 8 * v1885, v1886 != v1858)
                                                                          && *(_DWORD *)(v1886 + 4) == v1862)
                                                                        {
                                                                          v1813 = (long long *)(v1992[10] + 16 * v1885);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1813 = (long long *)v1992[11];
                                                                        }
                                                                        md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshDataComponent&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::Boundary&,arComponents::StyleColor&)#1}::operator()((uint64_t *)&v2234, v1861, v1867, *v1871, v1875, v1879, v1999, v1883, v1813);
                                                                        v1266 = v1999;
                                                                        v806 = v1992;
                                                                        v807 = (uint64_t *)(v2222 + 136);
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v1266;
        v1264 += 8;
      }
      while (v1264 != v1265);
    }
  }
  if (v2199 + 4 == v816)
  {
    v2234 = &v2238;
    v2235 = v807;
    k = &v2230;
    uint64_t v1258 = v2199[7];
    uint64_t v1259 = v2199[8];
    if (v1258 != v1259)
    {
      v1260 = (long long *)v2199[10];
      do
      {
        unint64_t v1268 = *(unsigned int *)(v1258 + 4);
        unint64_t v1269 = v1268 >> 7;
        uint64_t v1270 = v802[4];
        if (v1268 >> 7 < (v802[5] - v1270) >> 3)
        {
          uint64_t v1271 = *(void *)(v1270 + 8 * v1269);
          if (v1271)
          {
            uint64_t v1272 = v1268 & 0x7F;
            unint64_t v1273 = *(unsigned __int16 *)(v1271 + 2 * v1272);
            uint64_t v1275 = v802[7];
            uint64_t v1274 = v802[8];
            if (v1273 < (v1274 - v1275) >> 3)
            {
              uint64_t v1276 = v1275 + 8 * v1273;
              if (v1276 != v1274 && *(_DWORD *)(v1276 + 4) == v1268)
              {
                uint64_t v1278 = v803[4];
                if (v1269 < (v803[5] - v1278) >> 3)
                {
                  uint64_t v1279 = *(void *)(v1278 + 8 * v1269);
                  if (v1279)
                  {
                    unint64_t v1280 = *(unsigned __int16 *)(v1279 + 2 * v1272);
                    uint64_t v1282 = v803[7];
                    uint64_t v1281 = v803[8];
                    if (v1280 < (v1281 - v1282) >> 3)
                    {
                      uint64_t v1283 = v1282 + 8 * v1280;
                      if (v1283 != v1281 && *(_DWORD *)(v1283 + 4) == v1268)
                      {
                        uint64_t v1285 = v804[4];
                        unint64_t v1286 = (v804[5] - v1285) >> 3;
                        if (v1269 < v1286)
                        {
                          uint64_t v1287 = *(void *)(v1285 + 8 * v1269);
                          if (v1287)
                          {
                            unint64_t v1288 = *(unsigned __int16 *)(v1287 + 2 * v1272);
                            unint64_t v814 = v804[7];
                            uint64_t v1289 = v804[8];
                            unint64_t v1290 = (uint64_t)(v1289 - v814) >> 3;
                            if (v1290 > v1288)
                            {
                              unint64_t v1291 = v814 + 8 * v1288;
                              if (v1291 != v1289 && *(_DWORD *)(v1291 + 4) == v1268)
                              {
                                uint64_t v1293 = v2157[4];
                                unint64_t v1294 = (v2157[5] - v1293) >> 3;
                                if (v1269 < v1294)
                                {
                                  uint64_t v1295 = *(void *)(v1293 + 8 * v1269);
                                  if (v1295)
                                  {
                                    unint64_t v1296 = *(unsigned __int16 *)(v1295 + 2 * v1272);
                                    unint64_t v812 = v2157[7];
                                    uint64_t v1297 = v2157[8];
                                    unint64_t v1298 = (uint64_t)(v1297 - v812) >> 3;
                                    if (v1298 > v1296)
                                    {
                                      unint64_t v1299 = v812 + 8 * v1296;
                                      if (v1299 != v1297 && *(_DWORD *)(v1299 + 4) == v1268)
                                      {
                                        uint64_t v1300 = v2218[4];
                                        unint64_t v1301 = (v2218[5] - v1300) >> 3;
                                        if (v1269 < v1301)
                                        {
                                          uint64_t v1302 = *(void *)(v1300 + 8 * v1269);
                                          if (v1302)
                                          {
                                            unint64_t v1303 = *(unsigned __int16 *)(v1302 + 2 * v1272);
                                            unint64_t v813 = v2218[7];
                                            uint64_t v1304 = v2218[8];
                                            unint64_t v2184 = (uint64_t)(v1304 - v813) >> 3;
                                            if (v2184 > v1303)
                                            {
                                              unint64_t v1305 = v813 + 8 * v1303;
                                              if (v1305 != v1304 && *(_DWORD *)(v1305 + 4) == v1268)
                                              {
                                                uint64_t v2178 = v2211[4];
                                                unint64_t v2166 = (v2211[5] - v2178) >> 3;
                                                if (v1269 < v2166)
                                                {
                                                  uint64_t v1306 = *(void *)(v2178 + 8 * v1269);
                                                  if (v1306)
                                                  {
                                                    unint64_t v2144 = *(unsigned __int16 *)(v1306 + 2 * v1272);
                                                    uint64_t v2112 = v2211[7];
                                                    uint64_t v2128 = v2211[8];
                                                    unint64_t v2099 = (v2128 - v2112) >> 3;
                                                    if (v2099 > v2144)
                                                    {
                                                      uint64_t v1307 = v2112 + 8 * v2144;
                                                      if (v1307 != v2128 && *(_DWORD *)(v1307 + 4) == v1268)
                                                      {
                                                        uint64_t v2145 = v2205[4];
                                                        unint64_t v2087 = (v2205[5] - v2145) >> 3;
                                                        if (v1269 < v2087)
                                                        {
                                                          uint64_t v1308 = *(void *)(v2145 + 8 * v1269);
                                                          if (v1308)
                                                          {
                                                            unint64_t v2073 = *(unsigned __int16 *)(v1308 + 2 * v1272);
                                                            uint64_t v2051 = v2205[7];
                                                            uint64_t v2062 = v2205[8];
                                                            unint64_t v2041 = (v2062 - v2051) >> 3;
                                                            if (v2041 > v2073)
                                                            {
                                                              uint64_t v1309 = v2051 + 8 * v2073;
                                                              if (v1309 != v2062
                                                                && *(_DWORD *)(v1309 + 4) == v1268)
                                                              {
                                                                uint64_t v2074 = v806[4];
                                                                unint64_t v2031 = (v806[5] - v2074) >> 3;
                                                                if (v1269 < v2031)
                                                                {
                                                                  uint64_t v1310 = *(void *)(v2074 + 8 * v1269);
                                                                  if (v1310)
                                                                  {
                                                                    unint64_t v1311 = *(unsigned __int16 *)(v1310 + 2 * v1272);
                                                                    uint64_t v1312 = v806[7];
                                                                    uint64_t v1313 = v806[8];
                                                                    unint64_t v2021 = (v1313 - v1312) >> 3;
                                                                    if (v2021 > v1311)
                                                                    {
                                                                      uint64_t v1314 = v1312 + 8 * v1311;
                                                                      if (v1314 != v1313
                                                                        && *(_DWORD *)(v1314 + 4) == v1268)
                                                                      {
                                                                        v2013 = v1260;
                                                                        v1990 = v806;
                                                                        unint64_t v1315 = *(void *)v1258;
                                                                        uint64_t v2005 = HIDWORD(*(void *)v1258);
                                                                        unint64_t v1316 = *(void *)v1258 >> 39;
                                                                        if (v1316 < v1286
                                                                          && (uint64_t v1317 = *(void *)(v1285 + 8 * v1316)) != 0
                                                                          && (unint64_t v1318 = *(unsigned __int16 *)(v1317 + 2 * (HIDWORD(v1315) & 0x7F)),
                                                                              v1290 > v1318)
                                                                          && (unint64_t v1319 = v814 + 8 * v1318, v1319 != v1289)
                                                                          && *(_DWORD *)(v1319 + 4) == v2005)
                                                                        {
                                                                          v1320 = (long long *)(v804[10]
                                                                                             + 80
                                                                                             * v1318);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1320 = (long long *)v804[11];
                                                                        }
                                                                        if (v1316 < v1294
                                                                          && (uint64_t v1321 = *(void *)(v1293 + 8 * v1316)) != 0
                                                                          && (unint64_t v1322 = *(unsigned __int16 *)(v1321 + 2 * (HIDWORD(v1315) & 0x7F)),
                                                                              v1298 > v1322)
                                                                          && (unint64_t v1323 = v812 + 8 * v1322, v1323 != v1297)
                                                                          && *(_DWORD *)(v1323 + 4) == v2005)
                                                                        {
                                                                          v1324 = (uint64_t *)(v2157[10] + 8 * v1322);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1324 = (uint64_t *)v2157[11];
                                                                        }
                                                                        if (v1316 < v1301
                                                                          && (uint64_t v1325 = *(void *)(v1300 + 8 * v1316)) != 0
                                                                          && (unint64_t v1326 = *(unsigned __int16 *)(v1325 + 2 * (HIDWORD(v1315) & 0x7F)),
                                                                              v2184 > v1326)
                                                                          && (unint64_t v1327 = v813 + 8 * v1326, v1327 != v1304)
                                                                          && *(_DWORD *)(v1327 + 4) == v2005)
                                                                        {
                                                                          v1328 = (arComponents::AlbedoTextureComponent *)(v2218[10] + 48 * v1326);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1328 = (arComponents::AlbedoTextureComponent *)v2218[11];
                                                                        }
                                                                        if (v1316 < v2166
                                                                          && (uint64_t v1329 = *(void *)(v2178 + 8 * v1316)) != 0
                                                                          && (unint64_t v1330 = *(unsigned __int16 *)(v1329 + 2 * (HIDWORD(v1315) & 0x7F)),
                                                                              v2099 > v1330)
                                                                          && (uint64_t v1331 = v2112 + 8 * v1330, v1331 != v2128)
                                                                          && *(_DWORD *)(v1331 + 4) == v2005)
                                                                        {
                                                                          v1332 = (long long *)(v2211[10] + 16 * v1330);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1332 = (long long *)v2211[11];
                                                                        }
                                                                        if (v1316 < v2087
                                                                          && (uint64_t v1333 = *(void *)(v2145 + 8 * v1316)) != 0
                                                                          && (unint64_t v1334 = *(unsigned __int16 *)(v1333 + 2 * (HIDWORD(v1315) & 0x7F)),
                                                                              v2041 > v1334)
                                                                          && (uint64_t v1335 = v2051 + 8 * v1334, v1335 != v2062)
                                                                          && *(_DWORD *)(v1335 + 4) == v2005)
                                                                        {
                                                                          v1336 = (uint64_t *)(v2205[10] + 8 * v1334);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1336 = (uint64_t *)v2205[11];
                                                                        }
                                                                        if (v1316 < v2031
                                                                          && (uint64_t v1337 = *(void *)(v2074 + 8 * v1316)) != 0
                                                                          && (unint64_t v1338 = *(unsigned __int16 *)(v1337 + 2 * (HIDWORD(v1315) & 0x7F)),
                                                                              v2021 > v1338)
                                                                          && (uint64_t v1339 = v1312 + 8 * v1338, v1339 != v1313)
                                                                          && *(_DWORD *)(v1339 + 4) == v2005)
                                                                        {
                                                                          v1267 = (long long *)(v1990[10] + 16 * v1338);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1267 = (long long *)v1990[11];
                                                                        }
                                                                        md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshDataComponent&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::Boundary&,arComponents::StyleColor&)#1}::operator()((uint64_t *)&v2234, v1315, v1320, *v1324, v1328, v1332, v1336, v2013, v1267);
                                                                        v1260 = v2013;
                                                                        v806 = v1990;
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v1260 = (long long *)((char *)v1260 + 24);
        v1258 += 8;
      }
      while (v1258 != v1259);
    }
    v807 = (uint64_t *)(v2222 + 136);
  }
  if (v2191 == v816)
  {
    v2234 = &v2238;
    v2235 = v807;
    k = &v2230;
    uint64_t v1341 = v806[7];
    uint64_t v1342 = v806[8];
    if (v1341 != v1342)
    {
      v1343 = (long long *)v806[10];
      do
      {
        unint64_t v1888 = *(unsigned int *)(v1341 + 4);
        unint64_t v1889 = v1888 >> 7;
        uint64_t v1890 = v802[4];
        if (v1888 >> 7 < (v802[5] - v1890) >> 3)
        {
          uint64_t v1891 = *(void *)(v1890 + 8 * v1889);
          if (v1891)
          {
            uint64_t v1892 = v1888 & 0x7F;
            unint64_t v1893 = *(unsigned __int16 *)(v1891 + 2 * v1892);
            uint64_t v1895 = v802[7];
            uint64_t v1894 = v802[8];
            if (v1893 < (v1894 - v1895) >> 3)
            {
              uint64_t v1896 = v1895 + 8 * v1893;
              if (v1896 != v1894 && *(_DWORD *)(v1896 + 4) == v1888)
              {
                uint64_t v1898 = v803[4];
                if (v1889 < (v803[5] - v1898) >> 3)
                {
                  uint64_t v1899 = *(void *)(v1898 + 8 * v1889);
                  if (v1899)
                  {
                    unint64_t v1900 = *(unsigned __int16 *)(v1899 + 2 * v1892);
                    uint64_t v1902 = v803[7];
                    uint64_t v1901 = v803[8];
                    if (v1900 < (v1901 - v1902) >> 3)
                    {
                      uint64_t v1903 = v1902 + 8 * v1900;
                      if (v1903 != v1901 && *(_DWORD *)(v1903 + 4) == v1888)
                      {
                        unint64_t v813 = v804[4];
                        unint64_t v1905 = (uint64_t)(v804[5] - v813) >> 3;
                        if (v1889 < v1905)
                        {
                          uint64_t v1906 = *(void *)(v813 + 8 * v1889);
                          if (v1906)
                          {
                            unint64_t v1907 = *(unsigned __int16 *)(v1906 + 2 * v1892);
                            uint64_t v1908 = v804[7];
                            uint64_t v1909 = v804[8];
                            unint64_t v812 = (v1909 - v1908) >> 3;
                            if (v812 > v1907)
                            {
                              uint64_t v1910 = v1908 + 8 * v1907;
                              if (v1910 != v1909 && *(_DWORD *)(v1910 + 4) == v1888)
                              {
                                uint64_t v1912 = v2157[4];
                                unint64_t v1913 = (v2157[5] - v1912) >> 3;
                                if (v1889 < v1913)
                                {
                                  uint64_t v1914 = *(void *)(v1912 + 8 * v1889);
                                  if (v1914)
                                  {
                                    unint64_t v1915 = *(unsigned __int16 *)(v1914 + 2 * v1892);
                                    unint64_t v814 = v2157[7];
                                    uint64_t v1916 = v2157[8];
                                    unint64_t v1917 = (uint64_t)(v1916 - v814) >> 3;
                                    if (v1917 > v1915)
                                    {
                                      unint64_t v1918 = v814 + 8 * v1915;
                                      if (v1918 != v1916 && *(_DWORD *)(v1918 + 4) == v1888)
                                      {
                                        uint64_t v1919 = v2218[4];
                                        unint64_t v1920 = (v2218[5] - v1919) >> 3;
                                        if (v1889 < v1920)
                                        {
                                          uint64_t v1921 = *(void *)(v1919 + 8 * v1889);
                                          if (v1921)
                                          {
                                            unint64_t v1922 = *(unsigned __int16 *)(v1921 + 2 * v1892);
                                            uint64_t v1924 = v2218[7];
                                            uint64_t v1923 = v2218[8];
                                            unint64_t v1925 = (v1923 - v1924) >> 3;
                                            if (v1925 > v1922)
                                            {
                                              uint64_t v1926 = v1924 + 8 * v1922;
                                              if (v1926 != v1923 && *(_DWORD *)(v1926 + 4) == v1888)
                                              {
                                                uint64_t v2229 = v2211[4];
                                                unint64_t v2194 = (v2211[5] - v2229) >> 3;
                                                if (v1889 < v2194)
                                                {
                                                  uint64_t v1927 = *(void *)(v2229 + 8 * v1889);
                                                  if (v1927)
                                                  {
                                                    unint64_t v2185 = *(unsigned __int16 *)(v1927 + 2 * v1892);
                                                    uint64_t v2169 = v2211[7];
                                                    uint64_t v2180 = v2211[8];
                                                    unint64_t v2148 = (v2180 - v2169) >> 3;
                                                    if (v2148 > v2185)
                                                    {
                                                      uint64_t v1928 = v2169 + 8 * v2185;
                                                      if (v1928 != v2180 && *(_DWORD *)(v1928 + 4) == v1888)
                                                      {
                                                        uint64_t v2186 = v2205[4];
                                                        unint64_t v2131 = (v2205[5] - v2186) >> 3;
                                                        if (v1889 < v2131)
                                                        {
                                                          uint64_t v1929 = *(void *)(v2186 + 8 * v1889);
                                                          if (v1929)
                                                          {
                                                            unint64_t v2115 = *(unsigned __int16 *)(v1929 + 2 * v1892);
                                                            uint64_t v2090 = v2205[7];
                                                            uint64_t v2102 = v2205[8];
                                                            unint64_t v2077 = (v2102 - v2090) >> 3;
                                                            if (v2077 > v2115)
                                                            {
                                                              uint64_t v1930 = v2090 + 8 * v2115;
                                                              if (v1930 != v2102
                                                                && *(_DWORD *)(v1930 + 4) == v1888)
                                                              {
                                                                uint64_t v2116 = v2199[4];
                                                                unint64_t v2065 = (v2199[5] - v2116) >> 3;
                                                                if (v1889 < v2065)
                                                                {
                                                                  uint64_t v1931 = *(void *)(v2116 + 8 * v1889);
                                                                  if (v1931)
                                                                  {
                                                                    unint64_t v1932 = *(unsigned __int16 *)(v1931 + 2 * v1892);
                                                                    uint64_t v1934 = v2199[7];
                                                                    uint64_t v1933 = v2199[8];
                                                                    unint64_t v2054 = (v1933 - v1934) >> 3;
                                                                    if (v2054 > v1932)
                                                                    {
                                                                      uint64_t v1935 = v1934 + 8 * v1932;
                                                                      if (v1935 != v1933
                                                                        && *(_DWORD *)(v1935 + 4) == v1888)
                                                                      {
                                                                        uint64_t v1936 = HIDWORD(*(void *)v1341);
                                                                        unint64_t v2045 = *(void *)v1341;
                                                                        unint64_t v1937 = *(void *)v1341 >> 39;
                                                                        if (v1937 < v1905
                                                                          && (uint64_t v1938 = *(void *)(v813 + 8 * v1937)) != 0
                                                                          && (unint64_t v1939 = *(unsigned __int16 *)(v1938 + 2 * (HIDWORD(v2045) & 0x7F)),
                                                                              v812 > v1939)
                                                                          && (uint64_t v1940 = v1908 + 8 * v1939, v1940 != v1909)
                                                                          && *(_DWORD *)(v1940 + 4) == v1936)
                                                                        {
                                                                          v1941 = (long long *)(v804[10]
                                                                                             + 80
                                                                                             * v1939);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1941 = (long long *)v804[11];
                                                                        }
                                                                        if (v1937 < v1913
                                                                          && (uint64_t v1942 = *(void *)(v1912 + 8 * v1937)) != 0
                                                                          && (unint64_t v1943 = *(unsigned __int16 *)(v1942 + 2 * (HIDWORD(v2045) & 0x7F)),
                                                                              v1917 > v1943)
                                                                          && (unint64_t v1944 = v814 + 8 * v1943, v1944 != v1916)
                                                                          && *(_DWORD *)(v1944 + 4) == v1936)
                                                                        {
                                                                          v1945 = (uint64_t *)(v2157[10] + 8 * v1943);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1945 = (uint64_t *)v2157[11];
                                                                        }
                                                                        if (v1937 < v1920
                                                                          && (uint64_t v1946 = *(void *)(v1919 + 8 * v1937)) != 0
                                                                          && (unint64_t v1947 = *(unsigned __int16 *)(v1946 + 2 * (HIDWORD(v2045) & 0x7F)),
                                                                              v1925 > v1947)
                                                                          && (uint64_t v1948 = v1924 + 8 * v1947, v1948 != v1923)
                                                                          && *(_DWORD *)(v1948 + 4) == v1936)
                                                                        {
                                                                          v1949 = (arComponents::AlbedoTextureComponent *)(v2218[10] + 48 * v1947);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1949 = (arComponents::AlbedoTextureComponent *)v2218[11];
                                                                        }
                                                                        if (v1937 < v2194
                                                                          && (uint64_t v1950 = *(void *)(v2229 + 8 * v1937)) != 0
                                                                          && (unint64_t v1951 = *(unsigned __int16 *)(v1950 + 2 * (HIDWORD(v2045) & 0x7F)),
                                                                              v2148 > v1951)
                                                                          && (uint64_t v1952 = v2169 + 8 * v1951, v1952 != v2180)
                                                                          && *(_DWORD *)(v1952 + 4) == v1936)
                                                                        {
                                                                          v1953 = (long long *)(v2211[10] + 16 * v1951);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1953 = (long long *)v2211[11];
                                                                        }
                                                                        if (v1937 < v2131
                                                                          && (uint64_t v1954 = *(void *)(v2186 + 8 * v1937)) != 0
                                                                          && (unint64_t v1955 = *(unsigned __int16 *)(v1954 + 2 * (HIDWORD(v2045) & 0x7F)),
                                                                              v2077 > v1955)
                                                                          && (uint64_t v1956 = v2090 + 8 * v1955, v1956 != v2102)
                                                                          && *(_DWORD *)(v1956 + 4) == v1936)
                                                                        {
                                                                          v1957 = (uint64_t *)(v2205[10] + 8 * v1955);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1957 = (uint64_t *)v2205[11];
                                                                        }
                                                                        if (v1937 < v2065
                                                                          && (uint64_t v1958 = *(void *)(v2116 + 8 * v1937)) != 0
                                                                          && (unint64_t v1959 = *(unsigned __int16 *)(v1958 + 2 * (HIDWORD(v2045) & 0x7F)),
                                                                              v2054 > v1959)
                                                                          && (uint64_t v1960 = v1934 + 8 * v1959, v1960 != v1933)
                                                                          && *(_DWORD *)(v1960 + 4) == v1936)
                                                                        {
                                                                          v1887 = (long long *)(v2199[10]
                                                                                             + 24
                                                                                             * v1959);
                                                                        }
                                                                        else
                                                                        {
                                                                          v1887 = (long long *)v2199[11];
                                                                        }
                                                                        md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshDataComponent&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::Boundary&,arComponents::StyleColor&)#1}::operator()((uint64_t *)&v2234, v2045, v1941, *v1945, v1949, v1953, v1957, v1887, v1343);
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v1343;
        v1341 += 8;
      }
      while (v1341 != v1342);
    }
  }
  if ((long long *)v2240 == &v2238)
  {
    (*(void (**)(long long *, unint64_t, unint64_t, unint64_t))(v2238 + 32))(&v2238, v814, v813, v812);
    uint64_t v1340 = v2222;
  }
  else
  {
    uint64_t v1340 = v2222;
    if ((void)v2240) {
      (*(void (**)(void, unint64_t, unint64_t, unint64_t))(*(void *)v2240 + 40))(v2240, v814, v813, v812);
    }
  }
  v1345 = *(int8x8_t **)(v1340 + 120);
  v1344 = *(int8x8_t **)(v1340 + 128);
  *(void *)&long long v2230 = v1345;
  v2233 = v1344;
  *(void *)&long long v2238 = &unk_1EF56D2D8;
  *((void *)&v2238 + 1) = &v2233;
  *(void *)&long long v2240 = &v2238;
  v1346 = (void *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(v1345);
  uint64_t v1347 = gdc::Registry::storage<arComponents::AREnvironmentProbeTexture>(v1345);
  v1348 = (void *)v1347;
  v1349 = (uint64_t *)(v1340 + 232);
  uint64_t v1350 = v1347 + 32;
  uint64_t v1352 = v1346[7];
  uint64_t v1351 = v1346[8];
  if (*(void *)(v1347 + 64) - *(void *)(v1347 + 56) >= (unint64_t)(v1351 - v1352)) {
    v1353 = v1346 + 4;
  }
  else {
    v1353 = (void *)(v1347 + 32);
  }
  if (v1346 + 4 == v1353)
  {
    v2234 = &v2238;
    v2235 = v1349;
    for (k = &v2230; v1352 != v1351; v1352 += 8)
    {
      unint64_t v1356 = *(unsigned int *)(v1352 + 4);
      uint64_t v1357 = v1348[4];
      unint64_t v1358 = (v1348[5] - v1357) >> 3;
      if (v1356 >> 7 < v1358)
      {
        uint64_t v1359 = *(void *)(v1357 + 8 * (v1356 >> 7));
        if (v1359)
        {
          unint64_t v1360 = *(unsigned __int16 *)(v1359 + 2 * (v1356 & 0x7F));
          uint64_t v1362 = v1348[7];
          uint64_t v1361 = v1348[8];
          unint64_t v1363 = (v1361 - v1362) >> 3;
          if (v1363 > v1360)
          {
            uint64_t v1364 = v1362 + 8 * v1360;
            if (v1364 != v1361 && *(_DWORD *)(v1364 + 4) == v1356)
            {
              unint64_t v1366 = *(void *)v1352;
              unint64_t v1367 = *(void *)v1352 >> 39;
              if (v1367 < v1358
                && (uint64_t v1368 = *(void *)(v1357 + 8 * v1367)) != 0
                && (unint64_t v1369 = *(unsigned __int16 *)(v1368 + 2 * (HIDWORD(v1366) & 0x7F)), v1363 > v1369)
                && ((uint64_t v1370 = v1362 + 8 * v1369, v1370 != v1361)
                  ? (BOOL v1371 = *(_DWORD *)(v1370 + 4) == HIDWORD(v1366))
                  : (BOOL v1371 = 0),
                    v1371))
              {
                uint64_t v1355 = v1348[10] + 24 * v1369;
              }
              else
              {
                uint64_t v1355 = v1348[11];
              }
              md::ECSHelpers::copyComponentsWithoutPipeline<arComponents::TransitionToRenderRegistry,arComponents::AREnvironmentProbeTexture>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::AREnvironmentProbeTexture&)#1}::operator()((uint64_t *)&v2234, v1366, v1355);
            }
          }
        }
      }
    }
  }
  if ((void *)v1350 == v1353)
  {
    v2234 = &v2238;
    v2235 = v1349;
    k = &v2230;
    uint64_t v1372 = v1348[7];
    uint64_t v1373 = v1348[8];
    if (v1372 != v1373)
    {
      uint64_t v1374 = v1348[10];
      do
      {
        unint64_t v1375 = *(unsigned int *)(v1372 + 4);
        uint64_t v1376 = v1346[4];
        if (v1375 >> 7 < (v1346[5] - v1376) >> 3)
        {
          uint64_t v1377 = *(void *)(v1376 + 8 * (v1375 >> 7));
          if (v1377)
          {
            unint64_t v1378 = *(unsigned __int16 *)(v1377 + 2 * (v1375 & 0x7F));
            uint64_t v1380 = v1346[7];
            uint64_t v1379 = v1346[8];
            if (v1378 < (v1379 - v1380) >> 3)
            {
              uint64_t v1381 = v1380 + 8 * v1378;
              if (v1381 != v1379 && *(_DWORD *)(v1381 + 4) == v1375) {
                md::ECSHelpers::copyComponentsWithoutPipeline<arComponents::TransitionToRenderRegistry,arComponents::AREnvironmentProbeTexture>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::AREnvironmentProbeTexture&)#1}::operator()((uint64_t *)&v2234, *(void *)v1372, v1374);
              }
            }
          }
        }
        v1374 += 24;
        v1372 += 8;
      }
      while (v1372 != v1373);
    }
  }
  if ((long long *)v2240 == &v2238)
  {
    (*(void (**)(long long *))(v2238 + 32))(&v2238);
    uint64_t v1354 = v2222;
  }
  else
  {
    uint64_t v1354 = v2222;
    if ((void)v2240) {
      (*(void (**)(void))(*(void *)v2240 + 40))();
    }
  }
  md::ECSHelpers::updateTagComponent<arComponents::IsVisible>(*(int8x8_t **)(v1354 + 120), *(int8x8_t **)(v1354 + 128), 1);
  uint64_t v1 = v2222;
LABEL_1614:
  v1383 = *(int8x8_t **)(v1 + 120);
  v1384 = *(int8x8_t **)(v1 + 128);
  v1385 = (void *)gdc::Registry::storage<arComponents::CopiedEntity>(v1383);
  v1386 = (unint64_t *)v1385[7];
  v2225 = (unint64_t *)v1385[8];
  if (v1386 == v2225) {
    goto LABEL_1662;
  }
  v1387 = (unint64_t *)v1385[10];
  do
  {
    unint64_t v1388 = *v1386;
    v1389 = (void *)gdc::Registry::storage<arComponents::QueuedForDeletionAfterLayout>(v1383);
    uint64_t v1390 = v1389[4];
    if (v1388 >> 39 >= (v1389[5] - v1390) >> 3 || (uint64_t v1391 = *(void *)(v1390 + 8 * (v1388 >> 39))) == 0)
    {
      uint64_t v1394 = v1389[8];
LABEL_1623:
      uint64_t v1396 = v1394;
      goto LABEL_1624;
    }
    unint64_t v1392 = *(unsigned __int16 *)(v1391 + 2 * (HIDWORD(v1388) & 0x7F));
    uint64_t v1393 = v1389[7];
    uint64_t v1394 = v1389[8];
    if (v1392 >= (v1394 - v1393) >> 3) {
      goto LABEL_1623;
    }
    uint64_t v1395 = v1393 + 8 * v1392;
    if (*(_DWORD *)(v1395 + 4) == HIDWORD(v1388)) {
      uint64_t v1396 = v1395;
    }
    else {
      uint64_t v1396 = v1389[8];
    }
LABEL_1624:
    unint64_t v1397 = *v1387;
    v1398 = (void *)gdc::Registry::storage<arComponents::QueuedForDeletionAfterLayout>(v1384);
    uint64_t v1399 = v1398[4];
    if (v1397 >> 39 >= (v1398[5] - v1399) >> 3 || (uint64_t v1400 = *(void *)(v1399 + 8 * (v1397 >> 39))) == 0)
    {
      uint64_t v1402 = v1398[8];
LABEL_1632:
      uint64_t v1404 = v1402;
      if (v1396 == v1394) {
        goto LABEL_1635;
      }
      goto LABEL_1633;
    }
    unint64_t v1401 = *(unsigned __int16 *)(v1400 + 2 * (HIDWORD(v1397) & 0x7F));
    uint64_t v1403 = v1398[7];
    uint64_t v1402 = v1398[8];
    if (v1401 >= (v1402 - v1403) >> 3) {
      goto LABEL_1632;
    }
    uint64_t v1404 = v1403 + 8 * v1401;
    if (*(_DWORD *)(v1404 + 4) != HIDWORD(v1397)) {
      uint64_t v1404 = v1398[8];
    }
    if (v1396 == v1394)
    {
LABEL_1635:
      if (v1396 == v1394 && v1404 != v1402)
      {
        v1407 = (void *)gdc::Registry::storage<arComponents::QueuedForDeletionAfterLayout>(v1384);
        gdc::ComponentStorageWrapper<arComponents::QueuedForDeletionAfterLayout>::remove(v1407, *v1387);
      }
      goto LABEL_1638;
    }
LABEL_1633:
    if (v1404 != v1402) {
      goto LABEL_1635;
    }
    uint64_t v1405 = *v1387;
    v1406 = (void *)gdc::Registry::storage<arComponents::QueuedForDeletionAfterLayout>(v1384);
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v1406, v1405);
LABEL_1638:
    v2234 = (long long *)0xA9FA4AB2A6BA1C58;
    int8x8_t v1408 = v1383[16];
    if (!*(void *)&v1408) {
      goto LABEL_1658;
    }
    uint8x8_t v1409 = (uint8x8_t)vcnt_s8(v1408);
    v1409.i16[0] = vaddlv_u8(v1409);
    if (v1409.u32[0] > 1uLL)
    {
      unint64_t v1410 = 0xA9FA4AB2A6BA1C58;
      if (*(void *)&v1408 <= 0xA9FA4AB2A6BA1C58) {
        unint64_t v1410 = 0xA9FA4AB2A6BA1C58 % *(void *)&v1408;
      }
    }
    else
    {
      unint64_t v1410 = (*(void *)&v1408 - 1) & 0xA9FA4AB2A6BA1C58;
    }
    v1411 = *(uint64_t ****)(*(void *)&v1383[15] + 8 * v1410);
    if (!v1411 || (v1412 = *v1411) == 0) {
LABEL_1658:
    }
      operator new();
    if (v1409.u32[0] < 2uLL)
    {
      uint64_t v1413 = *(void *)&v1408 - 1;
      while (1)
      {
        v1415 = v1412[1];
        if (v1415 == (uint64_t *)0xA9FA4AB2A6BA1C58)
        {
          if (v1412[2] == (uint64_t *)0xA9FA4AB2A6BA1C58) {
            goto LABEL_1659;
          }
        }
        else if (((unint64_t)v1415 & v1413) != v1410)
        {
          goto LABEL_1658;
        }
        v1412 = (uint64_t **)*v1412;
        if (!v1412) {
          goto LABEL_1658;
        }
      }
    }
    while (1)
    {
      unint64_t v1414 = (unint64_t)v1412[1];
      if (v1414 == 0xA9FA4AB2A6BA1C58) {
        break;
      }
      if (v1414 >= *(void *)&v1408) {
        v1414 %= *(void *)&v1408;
      }
      if (v1414 != v1410) {
        goto LABEL_1658;
      }
LABEL_1648:
      v1412 = (uint64_t **)*v1412;
      if (!v1412) {
        goto LABEL_1658;
      }
    }
    if (v1412[2] != (uint64_t *)0xA9FA4AB2A6BA1C58) {
      goto LABEL_1648;
    }
LABEL_1659:
    gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::QueuedForDeletionAfterLayout>>::remove(v1412[3], v1388);
    ++v1387;
    ++v1386;
  }
  while (v1386 != v2225);
LABEL_1662:
  v1416 = *(int8x8_t **)(v2222 + 120);
  v2219 = *(int8x8_t **)(v2222 + 128);
  v1417 = (void *)gdc::Registry::storage<arComponents::CopiedEntity>(v1416);
  v1418 = (void *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>(v1416);
  uint64_t v1419 = gdc::Registry::storage<arComponents::WorldTransform>(v1416);
  v1420 = (void *)v1419;
  v2213 = v1416;
  uint64_t v1422 = v1417[7];
  uint64_t v1421 = v1417[8];
  if (v1418[8] - v1418[7] >= (unint64_t)(v1421 - v1422)) {
    v1423 = v1417 + 4;
  }
  else {
    v1423 = v1418 + 4;
  }
  uint64_t v2226 = v1419 + 32;
  if (*(void *)(v1419 + 64) - *(void *)(v1419 + 56) >= v1423[4] - v1423[3]) {
    v1424 = v1423;
  }
  else {
    v1424 = (void *)(v1419 + 32);
  }
  if (v1421 != v1422 && v1417 + 4 == v1424)
  {
    v1446 = (uint64_t *)v1417[10];
    v1447 = &v2240;
    v1448 = &v2243;
    do
    {
      unint64_t v1713 = *(unsigned int *)(v1422 + 4);
      unint64_t v1714 = v1713 >> 7;
      uint64_t v1715 = v1418[4];
      if (v1713 >> 7 < (v1418[5] - v1715) >> 3)
      {
        uint64_t v1716 = *(void *)(v1715 + 8 * v1714);
        if (v1716)
        {
          unint64_t v1717 = *(unsigned __int16 *)(v1716 + 2 * (v1713 & 0x7F));
          uint64_t v1719 = v1418[7];
          uint64_t v1718 = v1418[8];
          if (v1717 < (v1718 - v1719) >> 3)
          {
            uint64_t v1720 = v1719 + 8 * v1717;
            if (v1720 != v1718 && *(_DWORD *)(v1720 + 4) == v1713)
            {
              uint64_t v1722 = v1420[4];
              unint64_t v1723 = (v1420[5] - v1722) >> 3;
              if (v1714 < v1723)
              {
                uint64_t v1724 = *(void *)(v1722 + 8 * v1714);
                if (v1724)
                {
                  unint64_t v1725 = *(unsigned __int16 *)(v1724 + 2 * (v1713 & 0x7F));
                  uint64_t v1727 = v1420[7];
                  uint64_t v1726 = v1420[8];
                  unint64_t v1728 = (v1726 - v1727) >> 3;
                  if (v1728 > v1725)
                  {
                    uint64_t v1729 = v1727 + 8 * v1725;
                    if (v1729 != v1726 && *(_DWORD *)(v1729 + 4) == v1713)
                    {
                      unint64_t v2210 = *(void *)v1422;
                      if (*(void *)v1422 >> 39 < v1723
                        && (uint64_t v1731 = *(void *)(v1722 + 8 * (v2210 >> 39))) != 0
                        && (unint64_t v1732 = *(unsigned __int16 *)(v1731 + 2 * (HIDWORD(v2210) & 0x7F)), v1728 > v1732)
                        && ((uint64_t v1733 = v1727 + 8 * v1732, v1733 != v1726)
                          ? (BOOL v1734 = *(_DWORD *)(v1733 + 4) == HIDWORD(v2210))
                          : (BOOL v1734 = 0),
                            v1734))
                      {
                        uint64_t v1735 = v1420[10] + 80 * v1732;
                      }
                      else
                      {
                        uint64_t v1735 = v1420[11];
                      }
                      uint64_t v1736 = *v1446;
                      long long v2238 = *(_OWORD *)v1735;
                      uint64_t v2239 = *(void *)(v1735 + 16);
                      long long *v1447 = *(_OWORD *)(v1735 + 24);
                      v2193 = v1448;
                      v2201 = v1447;
                      *((void *)v1447 + 2) = *(void *)(v1735 + 40);
                      uint64_t v2242 = *(void *)(v1735 + 48);
                      long long *v1448 = *(_OWORD *)(v1735 + 56);
                      *((void *)v1448 + 2) = *(void *)(v1735 + 72);
                      v1737 = (void *)gdc::Registry::storage<arComponents::WorldTransform>(v2219);
                      gdc::ComponentStorageWrapper<arComponents::WorldTransform>::emplace(v1737, v1736, &v2238);
                      v1738 = (void *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>(v2213);
                      gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>::remove(v1738, v2210);
                      v1448 = v2193;
                      v1447 = v2201;
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v1446;
      v1422 += 8;
    }
    while (v1422 != v1421);
  }
  if (v1418 + 4 == v1424)
  {
    uint64_t v1508 = v1418[7];
    uint64_t v1507 = v1418[8];
    if (v1508 != v1507)
    {
      while (2)
      {
        unint64_t v1509 = *(unsigned int *)(v1508 + 4);
        unint64_t v1510 = v1509 >> 7;
        uint64_t v1511 = v1417[4];
        unint64_t v1512 = (v1417[5] - v1511) >> 3;
        if (v1509 >> 7 >= v1512) {
          goto LABEL_1759;
        }
        uint64_t v1513 = *(void *)(v1511 + 8 * v1510);
        if (!v1513) {
          goto LABEL_1759;
        }
        unint64_t v1514 = *(unsigned __int16 *)(v1513 + 2 * (v1509 & 0x7F));
        uint64_t v1516 = v1417[7];
        uint64_t v1515 = v1417[8];
        unint64_t v1517 = (v1515 - v1516) >> 3;
        if (v1517 <= v1514) {
          goto LABEL_1759;
        }
        uint64_t v1518 = v1516 + 8 * v1514;
        if (v1518 == v1515 || *(_DWORD *)(v1518 + 4) != v1509) {
          goto LABEL_1759;
        }
        uint64_t v1520 = v1420[4];
        unint64_t v1521 = (v1420[5] - v1520) >> 3;
        if (v1510 >= v1521) {
          goto LABEL_1759;
        }
        uint64_t v1522 = *(void *)(v1520 + 8 * v1510);
        if (!v1522) {
          goto LABEL_1759;
        }
        unint64_t v1523 = *(unsigned __int16 *)(v1522 + 2 * (v1509 & 0x7F));
        uint64_t v1525 = v1420[7];
        uint64_t v1524 = v1420[8];
        unint64_t v1526 = (v1524 - v1525) >> 3;
        if (v1526 <= v1523) {
          goto LABEL_1759;
        }
        uint64_t v1527 = v1525 + 8 * v1523;
        if (v1527 == v1524 || *(_DWORD *)(v1527 + 4) != v1509) {
          goto LABEL_1759;
        }
        uint64_t v1529 = HIDWORD(*(void *)v1508);
        unint64_t v2209 = *(void *)v1508;
        unint64_t v1530 = *(void *)v1508 >> 39;
        if (v1530 >= v1512
          || (uint64_t v1531 = *(void *)(v1511 + 8 * v1530)) == 0
          || (unint64_t v1532 = *(unsigned __int16 *)(v1531 + 2 * (HIDWORD(v2209) & 0x7F)), v1517 <= v1532)
          || ((uint64_t v1533 = v1516 + 8 * v1532, v1533 != v1515)
            ? (BOOL v1534 = *(_DWORD *)(v1533 + 4) == v1529)
            : (BOOL v1534 = 0),
              !v1534))
        {
          v1535 = (uint64_t *)v1417[11];
          if (v1530 < v1521) {
            goto LABEL_1784;
          }
          goto LABEL_1793;
        }
        v1535 = (uint64_t *)(v1417[10] + 8 * v1532);
        if (v1530 >= v1521) {
          goto LABEL_1793;
        }
LABEL_1784:
        uint64_t v1536 = *(void *)(v1520 + 8 * v1530);
        if (v1536
          && (unint64_t v1537 = *(unsigned __int16 *)(v1536 + 2 * (HIDWORD(v2209) & 0x7F)), v1526 > v1537)
          && ((uint64_t v1538 = v1525 + 8 * v1537, v1538 != v1524)
            ? (BOOL v1539 = *(_DWORD *)(v1538 + 4) == v1529)
            : (BOOL v1539 = 0),
              v1539))
        {
          uint64_t v1540 = v1420[10] + 80 * v1537;
        }
        else
        {
LABEL_1793:
          uint64_t v1540 = v1420[11];
        }
        uint64_t v1541 = *v1535;
        long long v2238 = *(_OWORD *)v1540;
        uint64_t v2239 = *(void *)(v1540 + 16);
        long long v2240 = *(_OWORD *)(v1540 + 24);
        uint64_t v2241 = *(void *)(v1540 + 40);
        uint64_t v2242 = *(void *)(v1540 + 48);
        long long v2243 = *(_OWORD *)(v1540 + 56);
        uint64_t v2244 = *(void *)(v1540 + 72);
        v1542 = (void *)gdc::Registry::storage<arComponents::WorldTransform>(v2219);
        gdc::ComponentStorageWrapper<arComponents::WorldTransform>::emplace(v1542, v1541, &v2238);
        v1543 = (void *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>(v2213);
        gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>::remove(v1543, v2209);
LABEL_1759:
        v1508 += 8;
        if (v1508 == v1507) {
          break;
        }
        continue;
      }
    }
  }
  if ((void *)v2226 == v1424)
  {
    uint64_t v1544 = v1420[7];
    uint64_t v1545 = v1420[8];
    if (v1544 != v1545)
    {
      uint64_t v1546 = v1420[10] + 56;
      do
      {
        unint64_t v1547 = *(unsigned int *)(v1544 + 4);
        unint64_t v1548 = v1547 >> 7;
        uint64_t v1549 = v1417[4];
        unint64_t v1550 = (v1417[5] - v1549) >> 3;
        if (v1547 >> 7 < v1550)
        {
          uint64_t v1551 = *(void *)(v1549 + 8 * v1548);
          if (v1551)
          {
            unint64_t v1552 = *(unsigned __int16 *)(v1551 + 2 * (v1547 & 0x7F));
            uint64_t v1554 = v1417[7];
            uint64_t v1553 = v1417[8];
            unint64_t v1555 = (v1553 - v1554) >> 3;
            if (v1555 > v1552)
            {
              uint64_t v1556 = v1554 + 8 * v1552;
              if (v1556 != v1553 && *(_DWORD *)(v1556 + 4) == v1547)
              {
                uint64_t v1558 = v1418[4];
                if (v1548 < (v1418[5] - v1558) >> 3)
                {
                  uint64_t v1559 = *(void *)(v1558 + 8 * v1548);
                  if (v1559)
                  {
                    unint64_t v1560 = *(unsigned __int16 *)(v1559 + 2 * (v1547 & 0x7F));
                    uint64_t v1562 = v1418[7];
                    uint64_t v1561 = v1418[8];
                    if (v1560 < (v1561 - v1562) >> 3)
                    {
                      uint64_t v1563 = v1562 + 8 * v1560;
                      if (v1563 != v1561 && *(_DWORD *)(v1563 + 4) == v1547)
                      {
                        unint64_t v1565 = *(void *)v1544;
                        unint64_t v1566 = *(void *)v1544 >> 39;
                        if (v1566 < v1550
                          && (uint64_t v1567 = *(void *)(v1549 + 8 * v1566)) != 0
                          && (unint64_t v1568 = *(unsigned __int16 *)(v1567 + 2 * (HIDWORD(v1565) & 0x7F)), v1555 > v1568)
                          && ((uint64_t v1569 = v1554 + 8 * v1568, v1569 != v1553)
                            ? (BOOL v1570 = *(_DWORD *)(v1569 + 4) == HIDWORD(v1565))
                            : (BOOL v1570 = 0),
                              v1570))
                        {
                          v1571 = (uint64_t *)(v1417[10] + 8 * v1568);
                        }
                        else
                        {
                          v1571 = (uint64_t *)v1417[11];
                        }
                        uint64_t v1572 = *v1571;
                        long long v2238 = *(_OWORD *)(v1546 - 56);
                        uint64_t v2239 = *(void *)(v1546 - 40);
                        long long v2240 = *(_OWORD *)(v1546 - 32);
                        uint64_t v2241 = *(void *)(v1546 - 16);
                        uint64_t v2242 = *(void *)(v1546 - 8);
                        long long v2243 = *(_OWORD *)v1546;
                        uint64_t v2244 = *(void *)(v1546 + 16);
                        v1573 = (void *)gdc::Registry::storage<arComponents::WorldTransform>(v2219);
                        gdc::ComponentStorageWrapper<arComponents::WorldTransform>::emplace(v1573, v1572, &v2238);
                        v1574 = (void *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>(v2213);
                        gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>::remove(v1574, v1565);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v1544 += 8;
        v1546 += 80;
      }
      while (v1544 != v1545);
    }
  }
  v1426 = *(int8x8_t **)(v2222 + 120);
  v2220 = *(int8x8_t **)(v2222 + 128);
  v1427 = (void *)gdc::Registry::storage<arComponents::CopiedEntity>(v1426);
  v1428 = (void *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::StyleColor>>(v1426);
  uint64_t v1429 = gdc::Registry::storage<arComponents::StyleColor>(v1426);
  v1430 = (void *)v1429;
  v2214 = v1426;
  uint64_t v1432 = v1427[7];
  uint64_t v1431 = v1427[8];
  if (v1428[8] - v1428[7] >= (unint64_t)(v1431 - v1432)) {
    v1433 = v1427 + 4;
  }
  else {
    v1433 = v1428 + 4;
  }
  uint64_t v2227 = v1429 + 32;
  if (*(void *)(v1429 + 64) - *(void *)(v1429 + 56) >= v1433[4] - v1433[3]) {
    v1434 = v1433;
  }
  else {
    v1434 = (void *)(v1429 + 32);
  }
  if (v1431 != v1432 && v1427 + 4 == v1434)
  {
    v1449 = (uint64_t *)v1427[10];
    do
    {
      unint64_t v1450 = *(unsigned int *)(v1432 + 4);
      unint64_t v1451 = v1450 >> 7;
      uint64_t v1452 = v1428[4];
      if (v1450 >> 7 < (v1428[5] - v1452) >> 3)
      {
        uint64_t v1453 = *(void *)(v1452 + 8 * v1451);
        if (v1453)
        {
          unint64_t v1454 = *(unsigned __int16 *)(v1453 + 2 * (v1450 & 0x7F));
          uint64_t v1456 = v1428[7];
          uint64_t v1455 = v1428[8];
          if (v1454 < (v1455 - v1456) >> 3)
          {
            uint64_t v1457 = v1456 + 8 * v1454;
            if (v1457 != v1455 && *(_DWORD *)(v1457 + 4) == v1450)
            {
              uint64_t v1459 = v1430[4];
              unint64_t v1460 = (v1430[5] - v1459) >> 3;
              if (v1451 < v1460)
              {
                uint64_t v1461 = *(void *)(v1459 + 8 * v1451);
                if (v1461)
                {
                  unint64_t v1462 = *(unsigned __int16 *)(v1461 + 2 * (v1450 & 0x7F));
                  uint64_t v1464 = v1430[7];
                  uint64_t v1463 = v1430[8];
                  unint64_t v1465 = (v1463 - v1464) >> 3;
                  if (v1465 > v1462)
                  {
                    uint64_t v1466 = v1464 + 8 * v1462;
                    if (v1466 != v1463 && *(_DWORD *)(v1466 + 4) == v1450)
                    {
                      unint64_t v1468 = *(void *)v1432;
                      unint64_t v1469 = *(void *)v1432 >> 39;
                      unint64_t v2207 = *(void *)v1432;
                      if (v1469 < v1460
                        && (uint64_t v1470 = *(void *)(v1459 + 8 * v1469)) != 0
                        && (unint64_t v1471 = *(unsigned __int16 *)(v1470 + 2 * (HIDWORD(v1468) & 0x7F)), v1465 > v1471)
                        && ((uint64_t v1472 = v1464 + 8 * v1471, v1472 != v1463)
                          ? (BOOL v1473 = *(_DWORD *)(v1472 + 4) == HIDWORD(v1468))
                          : (BOOL v1473 = 0),
                            v1473))
                      {
                        v1474 = (long long *)(v1430[10] + 16 * v1471);
                      }
                      else
                      {
                        v1474 = (long long *)v1430[11];
                      }
                      uint64_t v1475 = *v1449;
                      long long v2238 = *v1474;
                      v1476 = (void *)gdc::Registry::storage<arComponents::StyleColor>(v2220);
                      gdc::ComponentStorageWrapper<arComponents::StyleColor>::emplace(v1476, v1475, (uint64_t)&v2238);
                      v1477 = (void *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::StyleColor>>(v2214);
                      gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::StyleColor>>::remove(v1477, v2207);
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v1449;
      v1432 += 8;
    }
    while (v1432 != v1431);
  }
  if (v1428 + 4 == v1434)
  {
    uint64_t v1576 = v1428[7];
    uint64_t v1575 = v1428[8];
    if (v1576 != v1575)
    {
      while (2)
      {
        unint64_t v1577 = *(unsigned int *)(v1576 + 4);
        unint64_t v1578 = v1577 >> 7;
        uint64_t v1579 = v1427[4];
        unint64_t v1580 = (v1427[5] - v1579) >> 3;
        if (v1577 >> 7 >= v1580) {
          goto LABEL_1826;
        }
        uint64_t v1581 = *(void *)(v1579 + 8 * v1578);
        if (!v1581) {
          goto LABEL_1826;
        }
        unint64_t v1582 = *(unsigned __int16 *)(v1581 + 2 * (v1577 & 0x7F));
        uint64_t v1584 = v1427[7];
        uint64_t v1583 = v1427[8];
        unint64_t v1585 = (v1583 - v1584) >> 3;
        if (v1585 <= v1582) {
          goto LABEL_1826;
        }
        uint64_t v1586 = v1584 + 8 * v1582;
        if (v1586 == v1583 || *(_DWORD *)(v1586 + 4) != v1577) {
          goto LABEL_1826;
        }
        uint64_t v1588 = v1430[4];
        unint64_t v1589 = (v1430[5] - v1588) >> 3;
        if (v1578 >= v1589) {
          goto LABEL_1826;
        }
        uint64_t v1590 = *(void *)(v1588 + 8 * v1578);
        if (!v1590) {
          goto LABEL_1826;
        }
        unint64_t v1591 = *(unsigned __int16 *)(v1590 + 2 * (v1577 & 0x7F));
        uint64_t v1593 = v1430[7];
        uint64_t v1592 = v1430[8];
        unint64_t v1594 = (v1592 - v1593) >> 3;
        if (v1594 <= v1591) {
          goto LABEL_1826;
        }
        uint64_t v1595 = v1593 + 8 * v1591;
        if (v1595 == v1592 || *(_DWORD *)(v1595 + 4) != v1577)
        {
LABEL_1826:
          v1576 += 8;
          if (v1576 == v1575) {
            goto LABEL_1685;
          }
          continue;
        }
        break;
      }
      unint64_t v1597 = *(void *)v1576;
      uint64_t v1598 = HIDWORD(*(void *)v1576);
      unint64_t v1599 = *(void *)v1576 >> 39;
      if (v1599 >= v1580
        || (uint64_t v1600 = *(void *)(v1579 + 8 * v1599)) == 0
        || (unint64_t v1601 = *(unsigned __int16 *)(v1600 + 2 * (HIDWORD(v1597) & 0x7F)), v1585 <= v1601)
        || ((uint64_t v1602 = v1584 + 8 * v1601, v1602 != v1583)
          ? (BOOL v1603 = *(_DWORD *)(v1602 + 4) == v1598)
          : (BOOL v1603 = 0),
            !v1603))
      {
        v1604 = (uint64_t *)v1427[11];
        if (v1599 < v1589) {
          goto LABEL_1851;
        }
        goto LABEL_1860;
      }
      v1604 = (uint64_t *)(v1427[10] + 8 * v1601);
      if (v1599 >= v1589) {
        goto LABEL_1860;
      }
LABEL_1851:
      uint64_t v1605 = *(void *)(v1588 + 8 * v1599);
      if (v1605
        && (unint64_t v1606 = *(unsigned __int16 *)(v1605 + 2 * (HIDWORD(v1597) & 0x7F)), v1594 > v1606)
        && ((uint64_t v1607 = v1593 + 8 * v1606, v1607 != v1592)
          ? (BOOL v1608 = *(_DWORD *)(v1607 + 4) == v1598)
          : (BOOL v1608 = 0),
            v1608))
      {
        v1609 = (long long *)(v1430[10] + 16 * v1606);
      }
      else
      {
LABEL_1860:
        v1609 = (long long *)v1430[11];
      }
      uint64_t v1610 = *v1604;
      long long v2238 = *v1609;
      v1611 = (void *)gdc::Registry::storage<arComponents::StyleColor>(v2220);
      gdc::ComponentStorageWrapper<arComponents::StyleColor>::emplace(v1611, v1610, (uint64_t)&v2238);
      v1612 = (void *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::StyleColor>>(v2214);
      gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::StyleColor>>::remove(v1612, v1597);
      goto LABEL_1826;
    }
  }
LABEL_1685:
  if ((void *)v2227 == v1434)
  {
    uint64_t v1613 = v1430[7];
    uint64_t v1614 = v1430[8];
    if (v1613 != v1614)
    {
      v1615 = (long long *)v1430[10];
      do
      {
        unint64_t v1616 = *(unsigned int *)(v1613 + 4);
        unint64_t v1617 = v1616 >> 7;
        uint64_t v1618 = v1427[4];
        unint64_t v1619 = (v1427[5] - v1618) >> 3;
        if (v1616 >> 7 < v1619)
        {
          uint64_t v1620 = *(void *)(v1618 + 8 * v1617);
          if (v1620)
          {
            unint64_t v1621 = *(unsigned __int16 *)(v1620 + 2 * (v1616 & 0x7F));
            uint64_t v1623 = v1427[7];
            uint64_t v1622 = v1427[8];
            unint64_t v1624 = (v1622 - v1623) >> 3;
            if (v1624 > v1621)
            {
              uint64_t v1625 = v1623 + 8 * v1621;
              if (v1625 != v1622 && *(_DWORD *)(v1625 + 4) == v1616)
              {
                uint64_t v1627 = v1428[4];
                if (v1617 < (v1428[5] - v1627) >> 3)
                {
                  uint64_t v1628 = *(void *)(v1627 + 8 * v1617);
                  if (v1628)
                  {
                    unint64_t v1629 = *(unsigned __int16 *)(v1628 + 2 * (v1616 & 0x7F));
                    uint64_t v1631 = v1428[7];
                    uint64_t v1630 = v1428[8];
                    if (v1629 < (v1630 - v1631) >> 3)
                    {
                      uint64_t v1632 = v1631 + 8 * v1629;
                      if (v1632 != v1630 && *(_DWORD *)(v1632 + 4) == v1616)
                      {
                        unint64_t v1634 = *(void *)v1613;
                        unint64_t v1635 = *(void *)v1613 >> 39;
                        if (v1635 < v1619
                          && (uint64_t v1636 = *(void *)(v1618 + 8 * v1635)) != 0
                          && (unint64_t v1637 = *(unsigned __int16 *)(v1636 + 2 * (HIDWORD(v1634) & 0x7F)), v1624 > v1637)
                          && ((uint64_t v1638 = v1623 + 8 * v1637, v1638 != v1622)
                            ? (BOOL v1639 = *(_DWORD *)(v1638 + 4) == HIDWORD(v1634))
                            : (BOOL v1639 = 0),
                              v1639))
                        {
                          v1640 = (uint64_t *)(v1427[10] + 8 * v1637);
                        }
                        else
                        {
                          v1640 = (uint64_t *)v1427[11];
                        }
                        uint64_t v1641 = *v1640;
                        long long v2238 = *v1615;
                        v1642 = (void *)gdc::Registry::storage<arComponents::StyleColor>(v2220);
                        gdc::ComponentStorageWrapper<arComponents::StyleColor>::emplace(v1642, v1641, (uint64_t)&v2238);
                        v1643 = (void *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::StyleColor>>(v2214);
                        gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::StyleColor>>::remove(v1643, v1634);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v1615;
        v1613 += 8;
      }
      while (v1613 != v1614);
    }
  }
  v1436 = *(int8x8_t **)(v2222 + 120);
  v2221 = *(int8x8_t **)(v2222 + 128);
  v1437 = (void *)gdc::Registry::storage<arComponents::CopiedEntity>(v1436);
  v1438 = (void *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>>(v1436);
  uint64_t v1439 = gdc::Registry::storage<arComponents::VisibilityAlpha>(v1436);
  v1440 = (void *)v1439;
  v2215 = v1436;
  uint64_t v1442 = v1437[7];
  uint64_t v1441 = v1437[8];
  if (v1438[8] - v1438[7] >= (unint64_t)(v1441 - v1442)) {
    v1443 = v1437 + 4;
  }
  else {
    v1443 = v1438 + 4;
  }
  uint64_t v2228 = v1439 + 32;
  if (*(void *)(v1439 + 64) - *(void *)(v1439 + 56) >= v1443[4] - v1443[3]) {
    v1444 = v1443;
  }
  else {
    v1444 = (void *)(v1439 + 32);
  }
  if (v1441 != v1442 && v1437 + 4 == v1444)
  {
    v1478 = (uint64_t *)v1437[10];
    do
    {
      unint64_t v1479 = *(unsigned int *)(v1442 + 4);
      unint64_t v1480 = v1479 >> 7;
      uint64_t v1481 = v1438[4];
      if (v1479 >> 7 < (v1438[5] - v1481) >> 3)
      {
        uint64_t v1482 = *(void *)(v1481 + 8 * v1480);
        if (v1482)
        {
          unint64_t v1483 = *(unsigned __int16 *)(v1482 + 2 * (v1479 & 0x7F));
          uint64_t v1485 = v1438[7];
          uint64_t v1484 = v1438[8];
          if (v1483 < (v1484 - v1485) >> 3)
          {
            uint64_t v1486 = v1485 + 8 * v1483;
            if (v1486 != v1484 && *(_DWORD *)(v1486 + 4) == v1479)
            {
              uint64_t v1488 = v1440[4];
              unint64_t v1489 = (v1440[5] - v1488) >> 3;
              if (v1480 < v1489)
              {
                uint64_t v1490 = *(void *)(v1488 + 8 * v1480);
                if (v1490)
                {
                  unint64_t v1491 = *(unsigned __int16 *)(v1490 + 2 * (v1479 & 0x7F));
                  uint64_t v1493 = v1440[7];
                  uint64_t v1492 = v1440[8];
                  unint64_t v1494 = (v1492 - v1493) >> 3;
                  if (v1494 > v1491)
                  {
                    uint64_t v1495 = v1493 + 8 * v1491;
                    if (v1495 != v1492 && *(_DWORD *)(v1495 + 4) == v1479)
                    {
                      unint64_t v1497 = *(void *)v1442;
                      unint64_t v1498 = *(void *)v1442 >> 39;
                      unint64_t v2208 = *(void *)v1442;
                      if (v1498 < v1489
                        && (uint64_t v1499 = *(void *)(v1488 + 8 * v1498)) != 0
                        && (unint64_t v1500 = *(unsigned __int16 *)(v1499 + 2 * (HIDWORD(v1497) & 0x7F)), v1494 > v1500)
                        && ((uint64_t v1501 = v1493 + 8 * v1500, v1501 != v1492)
                          ? (BOOL v1502 = *(_DWORD *)(v1501 + 4) == HIDWORD(v1497))
                          : (BOOL v1502 = 0),
                            v1502))
                      {
                        v1503 = (_DWORD *)(v1440[10] + 4 * v1500);
                      }
                      else
                      {
                        v1503 = (_DWORD *)v1440[11];
                      }
                      uint64_t v1504 = *v1478;
                      LODWORD(v2238) = *v1503;
                      v1505 = (void *)gdc::Registry::storage<arComponents::VisibilityAlpha>(v2221);
                      gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v1505, v1504, &v2238);
                      v1506 = (void *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>>(v2215);
                      gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>>::remove(v1506, v2208);
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v1478;
      v1442 += 8;
    }
    while (v1442 != v1441);
  }
  if (v1438 + 4 == v1444)
  {
    uint64_t v1645 = v1438[7];
    uint64_t v1644 = v1438[8];
    if (v1645 != v1644)
    {
      while (2)
      {
        unint64_t v1646 = *(unsigned int *)(v1645 + 4);
        unint64_t v1647 = v1646 >> 7;
        uint64_t v1648 = v1437[4];
        unint64_t v1649 = (v1437[5] - v1648) >> 3;
        if (v1646 >> 7 >= v1649) {
          goto LABEL_1893;
        }
        uint64_t v1650 = *(void *)(v1648 + 8 * v1647);
        if (!v1650) {
          goto LABEL_1893;
        }
        unint64_t v1651 = *(unsigned __int16 *)(v1650 + 2 * (v1646 & 0x7F));
        uint64_t v1653 = v1437[7];
        uint64_t v1652 = v1437[8];
        unint64_t v1654 = (v1652 - v1653) >> 3;
        if (v1654 <= v1651) {
          goto LABEL_1893;
        }
        uint64_t v1655 = v1653 + 8 * v1651;
        if (v1655 == v1652 || *(_DWORD *)(v1655 + 4) != v1646) {
          goto LABEL_1893;
        }
        uint64_t v1657 = v1440[4];
        unint64_t v1658 = (v1440[5] - v1657) >> 3;
        if (v1647 >= v1658) {
          goto LABEL_1893;
        }
        uint64_t v1659 = *(void *)(v1657 + 8 * v1647);
        if (!v1659) {
          goto LABEL_1893;
        }
        unint64_t v1660 = *(unsigned __int16 *)(v1659 + 2 * (v1646 & 0x7F));
        uint64_t v1662 = v1440[7];
        uint64_t v1661 = v1440[8];
        unint64_t v1663 = (v1661 - v1662) >> 3;
        if (v1663 <= v1660) {
          goto LABEL_1893;
        }
        uint64_t v1664 = v1662 + 8 * v1660;
        if (v1664 == v1661 || *(_DWORD *)(v1664 + 4) != v1646)
        {
LABEL_1893:
          v1645 += 8;
          if (v1645 == v1644) {
            goto LABEL_1697;
          }
          continue;
        }
        break;
      }
      unint64_t v1666 = *(void *)v1645;
      uint64_t v1667 = HIDWORD(*(void *)v1645);
      unint64_t v1668 = *(void *)v1645 >> 39;
      if (v1668 >= v1649
        || (uint64_t v1669 = *(void *)(v1648 + 8 * v1668)) == 0
        || (unint64_t v1670 = *(unsigned __int16 *)(v1669 + 2 * (HIDWORD(v1666) & 0x7F)), v1654 <= v1670)
        || ((uint64_t v1671 = v1653 + 8 * v1670, v1671 != v1652)
          ? (BOOL v1672 = *(_DWORD *)(v1671 + 4) == v1667)
          : (BOOL v1672 = 0),
            !v1672))
      {
        v1673 = (uint64_t *)v1437[11];
        if (v1668 < v1658) {
          goto LABEL_1918;
        }
        goto LABEL_1927;
      }
      v1673 = (uint64_t *)(v1437[10] + 8 * v1670);
      if (v1668 >= v1658) {
        goto LABEL_1927;
      }
LABEL_1918:
      uint64_t v1674 = *(void *)(v1657 + 8 * v1668);
      if (v1674
        && (unint64_t v1675 = *(unsigned __int16 *)(v1674 + 2 * (HIDWORD(v1666) & 0x7F)), v1663 > v1675)
        && ((uint64_t v1676 = v1662 + 8 * v1675, v1676 != v1661)
          ? (BOOL v1677 = *(_DWORD *)(v1676 + 4) == v1667)
          : (BOOL v1677 = 0),
            v1677))
      {
        v1678 = (_DWORD *)(v1440[10] + 4 * v1675);
      }
      else
      {
LABEL_1927:
        v1678 = (_DWORD *)v1440[11];
      }
      uint64_t v1679 = *v1673;
      LODWORD(v2238) = *v1678;
      v1680 = (void *)gdc::Registry::storage<arComponents::VisibilityAlpha>(v2221);
      gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v1680, v1679, &v2238);
      v1681 = (void *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>>(v2215);
      gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>>::remove(v1681, v1666);
      goto LABEL_1893;
    }
  }
LABEL_1697:
  if ((void *)v2228 == v1444)
  {
    uint64_t v1682 = v1440[7];
    uint64_t v1683 = v1440[8];
    if (v1682 != v1683)
    {
      v1684 = (_DWORD *)v1440[10];
      do
      {
        unint64_t v1685 = *(unsigned int *)(v1682 + 4);
        unint64_t v1686 = v1685 >> 7;
        uint64_t v1687 = v1437[4];
        unint64_t v1688 = (v1437[5] - v1687) >> 3;
        if (v1685 >> 7 < v1688)
        {
          uint64_t v1689 = *(void *)(v1687 + 8 * v1686);
          if (v1689)
          {
            unint64_t v1690 = *(unsigned __int16 *)(v1689 + 2 * (v1685 & 0x7F));
            uint64_t v1692 = v1437[7];
            uint64_t v1691 = v1437[8];
            unint64_t v1693 = (v1691 - v1692) >> 3;
            if (v1693 > v1690)
            {
              uint64_t v1694 = v1692 + 8 * v1690;
              if (v1694 != v1691 && *(_DWORD *)(v1694 + 4) == v1685)
              {
                uint64_t v1696 = v1438[4];
                if (v1686 < (v1438[5] - v1696) >> 3)
                {
                  uint64_t v1697 = *(void *)(v1696 + 8 * v1686);
                  if (v1697)
                  {
                    unint64_t v1698 = *(unsigned __int16 *)(v1697 + 2 * (v1685 & 0x7F));
                    uint64_t v1700 = v1438[7];
                    uint64_t v1699 = v1438[8];
                    if (v1698 < (v1699 - v1700) >> 3)
                    {
                      uint64_t v1701 = v1700 + 8 * v1698;
                      if (v1701 != v1699 && *(_DWORD *)(v1701 + 4) == v1685)
                      {
                        unint64_t v1703 = *(void *)v1682;
                        unint64_t v1704 = *(void *)v1682 >> 39;
                        if (v1704 < v1688
                          && (uint64_t v1705 = *(void *)(v1687 + 8 * v1704)) != 0
                          && (unint64_t v1706 = *(unsigned __int16 *)(v1705 + 2 * (HIDWORD(v1703) & 0x7F)), v1693 > v1706)
                          && ((uint64_t v1707 = v1692 + 8 * v1706, v1707 != v1691)
                            ? (BOOL v1708 = *(_DWORD *)(v1707 + 4) == HIDWORD(v1703))
                            : (BOOL v1708 = 0),
                              v1708))
                        {
                          v1709 = (uint64_t *)(v1437[10] + 8 * v1706);
                        }
                        else
                        {
                          v1709 = (uint64_t *)v1437[11];
                        }
                        uint64_t v1710 = *v1709;
                        LODWORD(v2238) = *v1684;
                        v1711 = (void *)gdc::Registry::storage<arComponents::VisibilityAlpha>(v2221);
                        gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v1711, v1710, &v2238);
                        v1712 = (void *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>>(v2215);
                        gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::VisibilityAlpha>>::remove(v1712, v1703);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v1684;
        v1682 += 8;
      }
      while (v1682 != v1683);
    }
  }
  md::ECSHelpers::updateTagComponent<arComponents::IsVisible>(*(int8x8_t **)(v2222 + 120), *(int8x8_t **)(v2222 + 128), 0);
}

void sub_1A2655018(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 152);
  if (v3 == v1 - 176)
  {
    (*(void (**)(uint64_t))(*(void *)(v1 - 176) + 32))(v1 - 176);
    _Unwind_Resume(exception_object);
  }
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *gdc::RegistryView<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>::each<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}>(void *result, long long *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = *result + 32;
  if (!*result) {
    uint64_t v4 = 0;
  }
  if (v2) {
    uint64_t v5 = v2 + 32;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = result[2];
  uint64_t v7 = result[3];
  if (v6) {
    uint64_t v8 = v6 + 32;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7) {
    uint64_t v9 = v7 + 32;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = result[4];
  uint64_t v11 = result[5];
  if (v10) {
    uint64_t v12 = v10 + 32;
  }
  else {
    uint64_t v12 = 0;
  }
  if (v11) {
    uint64_t v13 = v11 + 32;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = result[6];
  uint64_t v15 = result[7];
  if (v14) {
    uint64_t v16 = v14 + 32;
  }
  else {
    uint64_t v16 = 0;
  }
  if (v15) {
    uint64_t v17 = v15 + 32;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v19 = result[8];
  uint64_t v18 = result[9];
  unint64_t v20 = (void *)(v19 + 32);
  if (!v19) {
    unint64_t v20 = 0;
  }
  uint64_t v21 = (void *)(v18 + 32);
  if (!v18) {
    uint64_t v21 = 0;
  }
  if (*(void *)(v5 + 32) - *(void *)(v5 + 24) >= *(void *)(v4 + 32) - *(void *)(v4 + 24)) {
    uint64_t v5 = v4;
  }
  if (*(void *)(v8 + 32) - *(void *)(v8 + 24) < *(void *)(v5 + 32) - *(void *)(v5 + 24)) {
    uint64_t v5 = v8;
  }
  if (*(void *)(v9 + 32) - *(void *)(v9 + 24) < *(void *)(v5 + 32) - *(void *)(v5 + 24)) {
    uint64_t v5 = v9;
  }
  if (*(void *)(v12 + 32) - *(void *)(v12 + 24) < *(void *)(v5 + 32) - *(void *)(v5 + 24)) {
    uint64_t v5 = v12;
  }
  if (*(void *)(v13 + 32) - *(void *)(v13 + 24) < *(void *)(v5 + 32) - *(void *)(v5 + 24)) {
    uint64_t v5 = v13;
  }
  if (*(void *)(v16 + 32) - *(void *)(v16 + 24) < *(void *)(v5 + 32) - *(void *)(v5 + 24)) {
    uint64_t v5 = v16;
  }
  if (*(void *)(v17 + 32) - *(void *)(v17 + 24) >= *(void *)(v5 + 32) - *(void *)(v5 + 24)) {
    uint64_t v17 = v5;
  }
  if (v20[4] - v20[3] >= *(void *)(v17 + 32) - *(void *)(v17 + 24)) {
    unint64_t v20 = (void *)v17;
  }
  if (v21[4] - v21[3] >= v20[4] - v20[3]) {
    uint64_t v21 = v20;
  }
  if ((void *)v4 == v21)
  {
    long long v1296 = *a2;
    uint64_t v1297 = *((void *)a2 + 2);
    uint64_t v41 = *(void *)(v3 + 56);
    uint64_t v40 = *(void *)(v3 + 64);
    while (v41 != v40)
    {
      uint64_t v69 = (void *)result[1];
      unint64_t v70 = *(unsigned int *)(v41 + 4);
      unint64_t v71 = v70 >> 7;
      uint64_t v72 = v69[4];
      if (v70 >> 7 < (v69[5] - v72) >> 3)
      {
        uint64_t v73 = *(void *)(v72 + 8 * v71);
        if (v73)
        {
          uint64_t v74 = v70 & 0x7F;
          unint64_t v75 = *(unsigned __int16 *)(v73 + 2 * v74);
          uint64_t v78 = v69 + 7;
          uint64_t v76 = v69[7];
          uint64_t v77 = v78[1];
          if (v75 < (v77 - v76) >> 3)
          {
            uint64_t v79 = v76 + 8 * v75;
            if (v79 != v77 && *(_DWORD *)(v79 + 4) == v70)
            {
              unint64_t v81 = (void *)result[2];
              uint64_t v82 = v81[4];
              unint64_t v83 = (v81[5] - v82) >> 3;
              if (v71 < v83)
              {
                uint64_t v84 = *(void *)(v82 + 8 * v71);
                if (v84)
                {
                  unint64_t v85 = *(unsigned __int16 *)(v84 + 2 * v74);
                  uint64_t v86 = v81[7];
                  uint64_t v87 = v81[8];
                  unint64_t v88 = (v87 - v86) >> 3;
                  if (v88 > v85)
                  {
                    uint64_t v89 = v86 + 8 * v85;
                    if (v89 != v87 && *(_DWORD *)(v89 + 4) == v70)
                    {
                      unint64_t v91 = (void *)result[3];
                      uint64_t v92 = v91[4];
                      unint64_t v93 = (v91[5] - v92) >> 3;
                      if (v71 < v93)
                      {
                        uint64_t v94 = *(void *)(v92 + 8 * v71);
                        if (v94)
                        {
                          unint64_t v95 = *(unsigned __int16 *)(v94 + 2 * v74);
                          uint64_t v96 = v91[7];
                          uint64_t v97 = v91[8];
                          unint64_t v98 = (v97 - v96) >> 3;
                          if (v98 > v95)
                          {
                            uint64_t v99 = v96 + 8 * v95;
                            if (v99 != v97 && *(_DWORD *)(v99 + 4) == v70)
                            {
                              uint64_t v101 = (void *)result[4];
                              uint64_t v102 = v101[4];
                              unint64_t v103 = (v101[5] - v102) >> 3;
                              if (v71 < v103)
                              {
                                uint64_t v104 = *(void *)(v102 + 8 * v71);
                                if (v104)
                                {
                                  unint64_t v105 = *(unsigned __int16 *)(v104 + 2 * v74);
                                  uint64_t v106 = v101[7];
                                  uint64_t v107 = v101[8];
                                  unint64_t v108 = (v107 - v106) >> 3;
                                  if (v108 > v105)
                                  {
                                    uint64_t v109 = v106 + 8 * v105;
                                    if (v109 != v107 && *(_DWORD *)(v109 + 4) == v70)
                                    {
                                      unint64_t v111 = (void *)result[5];
                                      unint64_t v1276 = (uint64_t)(v111[5] - v111[4]) >> 3;
                                      uint64_t v1286 = v111[4];
                                      if (v71 < v1276)
                                      {
                                        uint64_t v112 = *(void *)(v1286 + 8 * v71);
                                        if (v112)
                                        {
                                          unint64_t v113 = *(unsigned __int16 *)(v112 + 2 * v74);
                                          uint64_t v1266 = result[5];
                                          uint64_t v1246 = v111[7];
                                          uint64_t v1256 = v111[8];
                                          unint64_t v1236 = (v1256 - v1246) >> 3;
                                          if (v1236 > v113)
                                          {
                                            uint64_t v114 = v1246 + 8 * v113;
                                            if (v114 != v1256 && *(_DWORD *)(v114 + 4) == v70)
                                            {
                                              uint64_t v1216 = (void *)result[6];
                                              uint64_t v1226 = v1216[4];
                                              unint64_t v1206 = (v1216[5] - v1226) >> 3;
                                              if (v71 < v1206)
                                              {
                                                uint64_t v115 = *(void *)(v1226 + 8 * v71);
                                                if (v115)
                                                {
                                                  unint64_t v116 = *(unsigned __int16 *)(v115 + 2 * v74);
                                                  uint64_t v1196 = v1216[8];
                                                  uint64_t v1186 = v1216[7];
                                                  unint64_t v1176 = (v1196 - v1186) >> 3;
                                                  if (v1176 > v116)
                                                  {
                                                    uint64_t v117 = v1186 + 8 * v116;
                                                    if (v117 != v1196 && *(_DWORD *)(v117 + 4) == v70)
                                                    {
                                                      uint64_t v1156 = (void *)result[7];
                                                      uint64_t v1166 = v1156[4];
                                                      unint64_t v1146 = (v1156[5] - v1166) >> 3;
                                                      if (v71 < v1146)
                                                      {
                                                        uint64_t v118 = *(void *)(v1166 + 8 * v71);
                                                        if (v118)
                                                        {
                                                          unint64_t v119 = *(unsigned __int16 *)(v118 + 2 * v74);
                                                          uint64_t v1126 = v1156[7];
                                                          uint64_t v1136 = v1156[8];
                                                          unint64_t v1116 = (v1136 - v1126) >> 3;
                                                          if (v1116 > v119)
                                                          {
                                                            uint64_t v120 = v1126 + 8 * v119;
                                                            if (v120 != v1136 && *(_DWORD *)(v120 + 4) == v70)
                                                            {
                                                              unint64_t v1096 = (void *)result[8];
                                                              uint64_t v1106 = v1096[4];
                                                              unint64_t v1086 = (v1096[5] - v1106) >> 3;
                                                              if (v71 < v1086)
                                                              {
                                                                uint64_t v121 = *(void *)(v1106 + 8 * v71);
                                                                if (v121)
                                                                {
                                                                  unint64_t v122 = *(unsigned __int16 *)(v121 + 2 * v74);
                                                                  uint64_t v1067 = v1096[7];
                                                                  uint64_t v1076 = v1096[8];
                                                                  unint64_t v1058 = (v1076 - v1067) >> 3;
                                                                  if (v1058 > v122)
                                                                  {
                                                                    uint64_t v123 = v1067 + 8 * v122;
                                                                    if (v123 != v1076
                                                                      && *(_DWORD *)(v123 + 4) == v70)
                                                                    {
                                                                      unint64_t v1024 = (void *)result[9];
                                                                      uint64_t v124 = v1024[4];
                                                                      unint64_t v1022 = (v1024[5] - v124) >> 3;
                                                                      if (v71 < v1022)
                                                                      {
                                                                        uint64_t v125 = *(void *)(v124 + 8 * v71);
                                                                        if (v125)
                                                                        {
                                                                          unint64_t v126 = *(unsigned __int16 *)(v125 + 2 * v74);
                                                                          uint64_t v1018 = v1024[7];
                                                                          uint64_t v1020 = v1024[8];
                                                                          unint64_t v127 = (v1020 - v1018) >> 3;
                                                                          if (v127 > v126)
                                                                          {
                                                                            uint64_t v128 = v1018 + 8 * v126;
                                                                            if (v128 != v1020
                                                                              && *(_DWORD *)(v128 + 4) == v70)
                                                                            {
                                                                              uint64_t v1016 = v40;
                                                                              uint64_t v1030 = a2;
                                                                              unint64_t v1039 = v21;
                                                                              uint64_t v1048 = result;
                                                                              unint64_t v129 = *(void *)v41;
                                                                              uint64_t v130 = HIDWORD(*(void *)v41);
                                                                              unint64_t v131 = *(void *)v41 >> 39;
                                                                              if (v131 < v83
                                                                                && (uint64_t v132 = *(void *)(v82 + 8 * v131)) != 0
                                                                                && (unint64_t v133 = *(unsigned __int16 *)(v132 + 2 * (HIDWORD(v129) & 0x7F)),
                                                                                    v88 > v133)
                                                                                && (uint64_t v134 = v86 + 8 * v133, v134 != v87)
                                                                                && *(_DWORD *)(v134 + 4) == v130)
                                                                              {
                                                                                uint64_t v135 = (long long *)(v81[10]
                                                                                                  + 80 * v133);
                                                                              }
                                                                              else
                                                                              {
                                                                                uint64_t v135 = (long long *)v81[11];
                                                                              }
                                                                              if (v131 < v93
                                                                                && (uint64_t v136 = *(void *)(v92 + 8 * v131)) != 0
                                                                                && (unint64_t v137 = *(unsigned __int16 *)(v136 + 2 * (HIDWORD(v129) & 0x7F)),
                                                                                    v98 > v137)
                                                                                && (uint64_t v138 = v96 + 8 * v137, v138 != v97)
                                                                                && *(_DWORD *)(v138 + 4) == v130)
                                                                              {
                                                                                uint64_t v139 = v91[10] + 16 * v137;
                                                                              }
                                                                              else
                                                                              {
                                                                                uint64_t v139 = v91[11];
                                                                              }
                                                                              if (v131 < v103
                                                                                && (uint64_t v140 = *(void *)(v102 + 8 * v131)) != 0
                                                                                && (unint64_t v141 = *(unsigned __int16 *)(v140 + 2 * (HIDWORD(v129) & 0x7F)),
                                                                                    v108 > v141)
                                                                                && (uint64_t v142 = v106 + 8 * v141, v142 != v107)
                                                                                && *(_DWORD *)(v142 + 4) == v130)
                                                                              {
                                                                                uint64_t v143 = (long long *)(v101[10]
                                                                                                  + 24 * v141);
                                                                              }
                                                                              else
                                                                              {
                                                                                uint64_t v143 = (long long *)v101[11];
                                                                              }
                                                                              if (v131 < v1276
                                                                                && (uint64_t v144 = *(void *)(v1286 + 8 * v131)) != 0
                                                                                && (unint64_t v145 = *(unsigned __int16 *)(v144 + 2 * (HIDWORD(v129) & 0x7F)),
                                                                                    v1236 > v145)
                                                                                && (uint64_t v146 = v1246 + 8 * v145,
                                                                                    v146 != v1256)
                                                                                && *(_DWORD *)(v146 + 4) == v130)
                                                                              {
                                                                                uint64_t v147 = (arComponents::AlbedoTextureComponent *)(*(void *)(v1266 + 80) + 48 * v145);
                                                                              }
                                                                              else
                                                                              {
                                                                                uint64_t v147 = *(arComponents::AlbedoTextureComponent **)(v1266 + 88);
                                                                              }
                                                                              if (v131 < v1206
                                                                                && (uint64_t v148 = *(void *)(v1226 + 8 * v131)) != 0
                                                                                && (unint64_t v149 = *(unsigned __int16 *)(v148 + 2 * (HIDWORD(v129) & 0x7F)),
                                                                                    v1176 > v149)
                                                                                && (uint64_t v150 = v1186 + 8 * v149,
                                                                                    v150 != v1196)
                                                                                && *(_DWORD *)(v150 + 4) == v130)
                                                                              {
                                                                                unint64_t v151 = (long long *)(v1216[10] + 16 * v149);
                                                                              }
                                                                              else
                                                                              {
                                                                                unint64_t v151 = (long long *)v1216[11];
                                                                              }
                                                                              if (v131 < v1146
                                                                                && (uint64_t v152 = *(void *)(v1166 + 8 * v131)) != 0
                                                                                && (unint64_t v153 = *(unsigned __int16 *)(v152 + 2 * (HIDWORD(v129) & 0x7F)),
                                                                                    v1116 > v153)
                                                                                && (uint64_t v154 = v1126 + 8 * v153,
                                                                                    v154 != v1136)
                                                                                && *(_DWORD *)(v154 + 4) == v130)
                                                                              {
                                                                                unint64_t v155 = (uint64_t *)(v1156[10] + 8 * v153);
                                                                              }
                                                                              else
                                                                              {
                                                                                unint64_t v155 = (uint64_t *)v1156[11];
                                                                              }
                                                                              if (v131 < v1086
                                                                                && (uint64_t v156 = *(void *)(v1106 + 8 * v131)) != 0
                                                                                && (unint64_t v157 = *(unsigned __int16 *)(v156 + 2 * (HIDWORD(v129) & 0x7F)),
                                                                                    v1058 > v157)
                                                                                && (uint64_t v158 = v1067 + 8 * v157,
                                                                                    v158 != v1076)
                                                                                && *(_DWORD *)(v158 + 4) == v130)
                                                                              {
                                                                                size_t v159 = (long long *)(v1096[10] + 16 * v157);
                                                                              }
                                                                              else
                                                                              {
                                                                                size_t v159 = (long long *)v1096[11];
                                                                              }
                                                                              if (v131 < v1022
                                                                                && (uint64_t v160 = *(void *)(v124 + 8 * v131)) != 0
                                                                                && (unint64_t v161 = *(unsigned __int16 *)(v160 + 2 * (HIDWORD(v129) & 0x7F)),
                                                                                    v127 > v161)
                                                                                && (uint64_t v162 = v1018 + 8 * v161,
                                                                                    v162 != v1020)
                                                                                && *(_DWORD *)(v162 + 4) == v130)
                                                                              {
                                                                                unint64_t v68 = (int *)(v1024[10] + 4 * v161);
                                                                              }
                                                                              else
                                                                              {
                                                                                unint64_t v68 = (int *)v1024[11];
                                                                              }
                                                                              md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v1296, v129, v135, *(void *)v139, *(std::__shared_weak_count **)(v139 + 8), v143, v147, v151, v155, v159, v68);
                                                                              uint64_t v21 = v1039;
                                                                              uint64_t result = v1048;
                                                                              a2 = v1030;
                                                                              uint64_t v40 = v1016;
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v41 += 8;
    }
  }
  uint64_t v22 = (void *)result[1];
  uint64_t v23 = v22 + 4;
  if (!v22) {
    uint64_t v23 = 0;
  }
  if (v23 == v21)
  {
    long long v1296 = *a2;
    uint64_t v1297 = *((void *)a2 + 2);
    uint64_t v43 = v22[7];
    uint64_t v42 = v22[8];
    while (v43 != v42)
    {
      uint64_t v164 = *result;
      unint64_t v165 = *(unsigned int *)(v43 + 4);
      unint64_t v166 = v165 >> 7;
      uint64_t v167 = *(void *)(*result + 32);
      if (v165 >> 7 < (*(void *)(*result + 40) - v167) >> 3)
      {
        uint64_t v168 = *(void *)(v167 + 8 * v166);
        if (v168)
        {
          uint64_t v169 = v165 & 0x7F;
          unint64_t v170 = *(unsigned __int16 *)(v168 + 2 * v169);
          uint64_t v173 = v164 + 56;
          uint64_t v171 = *(void *)(v164 + 56);
          uint64_t v172 = *(void *)(v173 + 8);
          if (v170 < (v172 - v171) >> 3)
          {
            uint64_t v174 = v171 + 8 * v170;
            if (v174 != v172 && *(_DWORD *)(v174 + 4) == v165)
            {
              uint64_t v176 = (void *)result[2];
              uint64_t v177 = v176[4];
              unint64_t v178 = (v176[5] - v177) >> 3;
              if (v166 < v178)
              {
                uint64_t v179 = *(void *)(v177 + 8 * v166);
                if (v179)
                {
                  unint64_t v180 = *(unsigned __int16 *)(v179 + 2 * v169);
                  uint64_t v181 = v176[7];
                  uint64_t v182 = v176[8];
                  unint64_t v183 = (v182 - v181) >> 3;
                  if (v183 > v180)
                  {
                    uint64_t v184 = v181 + 8 * v180;
                    if (v184 != v182 && *(_DWORD *)(v184 + 4) == v165)
                    {
                      uint64_t v186 = (void *)result[3];
                      uint64_t v187 = v186[4];
                      unint64_t v188 = (v186[5] - v187) >> 3;
                      if (v166 < v188)
                      {
                        uint64_t v189 = *(void *)(v187 + 8 * v166);
                        if (v189)
                        {
                          unint64_t v190 = *(unsigned __int16 *)(v189 + 2 * v169);
                          uint64_t v191 = v186[7];
                          uint64_t v192 = v186[8];
                          unint64_t v193 = (v192 - v191) >> 3;
                          if (v193 > v190)
                          {
                            uint64_t v194 = v191 + 8 * v190;
                            if (v194 != v192 && *(_DWORD *)(v194 + 4) == v165)
                            {
                              unint64_t v196 = (void *)result[4];
                              uint64_t v197 = v196[4];
                              unint64_t v198 = (v196[5] - v197) >> 3;
                              if (v166 < v198)
                              {
                                uint64_t v199 = *(void *)(v197 + 8 * v166);
                                if (v199)
                                {
                                  unint64_t v200 = *(unsigned __int16 *)(v199 + 2 * v169);
                                  uint64_t v201 = v196[7];
                                  uint64_t v202 = v196[8];
                                  unint64_t v203 = (v202 - v201) >> 3;
                                  if (v203 > v200)
                                  {
                                    uint64_t v204 = v201 + 8 * v200;
                                    if (v204 != v202 && *(_DWORD *)(v204 + 4) == v165)
                                    {
                                      uint64_t v206 = (void *)result[5];
                                      unint64_t v1277 = (uint64_t)(v206[5] - v206[4]) >> 3;
                                      uint64_t v1287 = v206[4];
                                      if (v166 < v1277)
                                      {
                                        uint64_t v207 = *(void *)(v1287 + 8 * v166);
                                        if (v207)
                                        {
                                          unint64_t v208 = *(unsigned __int16 *)(v207 + 2 * v169);
                                          uint64_t v1267 = result[5];
                                          uint64_t v1247 = v206[7];
                                          uint64_t v1257 = v206[8];
                                          unint64_t v1237 = (v1257 - v1247) >> 3;
                                          if (v1237 > v208)
                                          {
                                            uint64_t v209 = v1247 + 8 * v208;
                                            if (v209 != v1257 && *(_DWORD *)(v209 + 4) == v165)
                                            {
                                              unint64_t v1217 = (void *)result[6];
                                              uint64_t v1227 = v1217[4];
                                              unint64_t v1207 = (v1217[5] - v1227) >> 3;
                                              if (v166 < v1207)
                                              {
                                                uint64_t v210 = *(void *)(v1227 + 8 * v166);
                                                if (v210)
                                                {
                                                  unint64_t v211 = *(unsigned __int16 *)(v210 + 2 * v169);
                                                  uint64_t v1197 = v1217[8];
                                                  uint64_t v1187 = v1217[7];
                                                  unint64_t v1177 = (v1197 - v1187) >> 3;
                                                  if (v1177 > v211)
                                                  {
                                                    uint64_t v212 = v1187 + 8 * v211;
                                                    if (v212 != v1197 && *(_DWORD *)(v212 + 4) == v165)
                                                    {
                                                      unint64_t v1157 = (void *)result[7];
                                                      uint64_t v1167 = v1157[4];
                                                      unint64_t v1147 = (v1157[5] - v1167) >> 3;
                                                      if (v166 < v1147)
                                                      {
                                                        uint64_t v213 = *(void *)(v1167 + 8 * v166);
                                                        if (v213)
                                                        {
                                                          unint64_t v214 = *(unsigned __int16 *)(v213 + 2 * v169);
                                                          uint64_t v1127 = v1157[7];
                                                          uint64_t v1137 = v1157[8];
                                                          unint64_t v1117 = (v1137 - v1127) >> 3;
                                                          if (v1117 > v214)
                                                          {
                                                            uint64_t v215 = v1127 + 8 * v214;
                                                            if (v215 != v1137 && *(_DWORD *)(v215 + 4) == v165)
                                                            {
                                                              uint64_t v1097 = (void *)result[8];
                                                              uint64_t v1107 = v1097[4];
                                                              unint64_t v1087 = (v1097[5] - v1107) >> 3;
                                                              if (v166 < v1087)
                                                              {
                                                                uint64_t v216 = *(void *)(v1107 + 8 * v166);
                                                                if (v216)
                                                                {
                                                                  unint64_t v217 = *(unsigned __int16 *)(v216 + 2 * v169);
                                                                  uint64_t v1068 = v1097[7];
                                                                  uint64_t v1077 = v1097[8];
                                                                  unint64_t v1059 = (v1077 - v1068) >> 3;
                                                                  if (v1059 > v217)
                                                                  {
                                                                    uint64_t v218 = v1068 + 8 * v217;
                                                                    if (v218 != v1077
                                                                      && *(_DWORD *)(v218 + 4) == v165)
                                                                    {
                                                                      v1025 = (void *)result[9];
                                                                      uint64_t v219 = v1025[4];
                                                                      unint64_t v1023 = (v1025[5] - v219) >> 3;
                                                                      if (v166 < v1023)
                                                                      {
                                                                        uint64_t v220 = *(void *)(v219 + 8 * v166);
                                                                        if (v220)
                                                                        {
                                                                          unint64_t v221 = *(unsigned __int16 *)(v220 + 2 * v169);
                                                                          uint64_t v1019 = v1025[7];
                                                                          uint64_t v1021 = v1025[8];
                                                                          unint64_t v222 = (v1021 - v1019) >> 3;
                                                                          if (v222 > v221)
                                                                          {
                                                                            uint64_t v223 = v1019 + 8 * v221;
                                                                            if (v223 != v1021
                                                                              && *(_DWORD *)(v223 + 4) == v165)
                                                                            {
                                                                              uint64_t v1017 = v42;
                                                                              uint64_t v1031 = a2;
                                                                              uint64_t v1040 = v21;
                                                                              uint64_t v1049 = result;
                                                                              unint64_t v224 = *(void *)v43;
                                                                              uint64_t v225 = HIDWORD(*(void *)v43);
                                                                              unint64_t v226 = *(void *)v43 >> 39;
                                                                              if (v226 < v178
                                                                                && (uint64_t v227 = *(void *)(v177 + 8 * v226)) != 0
                                                                                && (unint64_t v228 = *(unsigned __int16 *)(v227 + 2 * (HIDWORD(v224) & 0x7F)),
                                                                                    v183 > v228)
                                                                                && (uint64_t v229 = v181 + 8 * v228, v229 != v182)
                                                                                && *(_DWORD *)(v229 + 4) == v225)
                                                                              {
                                                                                uint64_t v230 = (long long *)(v176[10]
                                                                                                  + 80 * v228);
                                                                              }
                                                                              else
                                                                              {
                                                                                uint64_t v230 = (long long *)v176[11];
                                                                              }
                                                                              if (v226 < v188
                                                                                && (uint64_t v231 = *(void *)(v187 + 8 * v226)) != 0
                                                                                && (unint64_t v232 = *(unsigned __int16 *)(v231 + 2 * (HIDWORD(v224) & 0x7F)),
                                                                                    v193 > v232)
                                                                                && (uint64_t v233 = v191 + 8 * v232, v233 != v192)
                                                                                && *(_DWORD *)(v233 + 4) == v225)
                                                                              {
                                                                                uint64_t v234 = v186[10] + 16 * v232;
                                                                              }
                                                                              else
                                                                              {
                                                                                uint64_t v234 = v186[11];
                                                                              }
                                                                              if (v226 < v198
                                                                                && (uint64_t v235 = *(void *)(v197 + 8 * v226)) != 0
                                                                                && (unint64_t v236 = *(unsigned __int16 *)(v235 + 2 * (HIDWORD(v224) & 0x7F)),
                                                                                    v203 > v236)
                                                                                && (uint64_t v237 = v201 + 8 * v236, v237 != v202)
                                                                                && *(_DWORD *)(v237 + 4) == v225)
                                                                              {
                                                                                uint64_t v238 = (long long *)(v196[10]
                                                                                                  + 24 * v236);
                                                                              }
                                                                              else
                                                                              {
                                                                                uint64_t v238 = (long long *)v196[11];
                                                                              }
                                                                              if (v226 < v1277
                                                                                && (uint64_t v239 = *(void *)(v1287 + 8 * v226)) != 0
                                                                                && (unint64_t v240 = *(unsigned __int16 *)(v239 + 2 * (HIDWORD(v224) & 0x7F)),
                                                                                    v1237 > v240)
                                                                                && (uint64_t v241 = v1247 + 8 * v240,
                                                                                    v241 != v1257)
                                                                                && *(_DWORD *)(v241 + 4) == v225)
                                                                              {
                                                                                uint64_t v242 = (arComponents::AlbedoTextureComponent *)(*(void *)(v1267 + 80) + 48 * v240);
                                                                              }
                                                                              else
                                                                              {
                                                                                uint64_t v242 = *(arComponents::AlbedoTextureComponent **)(v1267 + 88);
                                                                              }
                                                                              if (v226 < v1207
                                                                                && (uint64_t v243 = *(void *)(v1227 + 8 * v226)) != 0
                                                                                && (unint64_t v244 = *(unsigned __int16 *)(v243 + 2 * (HIDWORD(v224) & 0x7F)),
                                                                                    v1177 > v244)
                                                                                && (uint64_t v245 = v1187 + 8 * v244,
                                                                                    v245 != v1197)
                                                                                && *(_DWORD *)(v245 + 4) == v225)
                                                                              {
                                                                                uint64_t v246 = (long long *)(v1217[10] + 16 * v244);
                                                                              }
                                                                              else
                                                                              {
                                                                                uint64_t v246 = (long long *)v1217[11];
                                                                              }
                                                                              if (v226 < v1147
                                                                                && (uint64_t v247 = *(void *)(v1167 + 8 * v226)) != 0
                                                                                && (unint64_t v248 = *(unsigned __int16 *)(v247 + 2 * (HIDWORD(v224) & 0x7F)),
                                                                                    v1117 > v248)
                                                                                && (uint64_t v249 = v1127 + 8 * v248,
                                                                                    v249 != v1137)
                                                                                && *(_DWORD *)(v249 + 4) == v225)
                                                                              {
                                                                                uint64_t v250 = (uint64_t *)(v1157[10] + 8 * v248);
                                                                              }
                                                                              else
                                                                              {
                                                                                uint64_t v250 = (uint64_t *)v1157[11];
                                                                              }
                                                                              if (v226 < v1087
                                                                                && (uint64_t v251 = *(void *)(v1107 + 8 * v226)) != 0
                                                                                && (unint64_t v252 = *(unsigned __int16 *)(v251 + 2 * (HIDWORD(v224) & 0x7F)),
                                                                                    v1059 > v252)
                                                                                && (uint64_t v253 = v1068 + 8 * v252,
                                                                                    v253 != v1077)
                                                                                && *(_DWORD *)(v253 + 4) == v225)
                                                                              {
                                                                                unint64_t v254 = (long long *)(v1097[10] + 16 * v252);
                                                                              }
                                                                              else
                                                                              {
                                                                                unint64_t v254 = (long long *)v1097[11];
                                                                              }
                                                                              if (v226 < v1023
                                                                                && (uint64_t v255 = *(void *)(v219 + 8 * v226)) != 0
                                                                                && (unint64_t v256 = *(unsigned __int16 *)(v255 + 2 * (HIDWORD(v224) & 0x7F)),
                                                                                    v222 > v256)
                                                                                && (uint64_t v257 = v1019 + 8 * v256,
                                                                                    v257 != v1021)
                                                                                && *(_DWORD *)(v257 + 4) == v225)
                                                                              {
                                                                                uint64_t v163 = (int *)(v1025[10] + 4 * v256);
                                                                              }
                                                                              else
                                                                              {
                                                                                uint64_t v163 = (int *)v1025[11];
                                                                              }
                                                                              md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v1296, v224, v230, *(void *)v234, *(std::__shared_weak_count **)(v234 + 8), v238, v242, v246, v250, v254, v163);
                                                                              uint64_t v21 = v1040;
                                                                              uint64_t result = v1049;
                                                                              a2 = v1031;
                                                                              uint64_t v42 = v1017;
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v43 += 8;
    }
  }
  uint64_t v24 = (void *)result[2];
  uint64_t v25 = v24 + 4;
  if (!v24) {
    uint64_t v25 = 0;
  }
  if (v25 == v21)
  {
    long long v1296 = *a2;
    uint64_t v1297 = *((void *)a2 + 2);
    uint64_t v44 = v24[7];
    uint64_t v45 = v24[8];
    if (v44 != v45)
    {
      uint64_t v46 = (long long *)v24[10];
      do
      {
        uint64_t v259 = *result;
        unint64_t v260 = *(unsigned int *)(v44 + 4);
        unint64_t v261 = v260 >> 7;
        uint64_t v262 = *(void *)(*result + 32);
        if (v260 >> 7 < (*(void *)(*result + 40) - v262) >> 3)
        {
          uint64_t v263 = *(void *)(v262 + 8 * v261);
          if (v263)
          {
            uint64_t v264 = v260 & 0x7F;
            unint64_t v265 = *(unsigned __int16 *)(v263 + 2 * v264);
            uint64_t v268 = v259 + 56;
            uint64_t v266 = *(void *)(v259 + 56);
            uint64_t v267 = *(void *)(v268 + 8);
            if (v265 < (v267 - v266) >> 3)
            {
              uint64_t v269 = v266 + 8 * v265;
              if (v269 != v267 && *(_DWORD *)(v269 + 4) == v260)
              {
                unint64_t v271 = (void *)result[1];
                uint64_t v272 = v271[4];
                if (v261 < (v271[5] - v272) >> 3)
                {
                  uint64_t v273 = *(void *)(v272 + 8 * v261);
                  if (v273)
                  {
                    unint64_t v274 = *(unsigned __int16 *)(v273 + 2 * v264);
                    uint64_t v277 = v271 + 7;
                    uint64_t v275 = v271[7];
                    uint64_t v276 = v277[1];
                    if (v274 < (v276 - v275) >> 3)
                    {
                      uint64_t v278 = v275 + 8 * v274;
                      if (v278 != v276 && *(_DWORD *)(v278 + 4) == v260)
                      {
                        unint64_t v280 = (void *)result[3];
                        uint64_t v281 = v280[4];
                        unint64_t v282 = (v280[5] - v281) >> 3;
                        if (v261 < v282)
                        {
                          uint64_t v283 = *(void *)(v281 + 8 * v261);
                          if (v283)
                          {
                            unint64_t v284 = *(unsigned __int16 *)(v283 + 2 * v264);
                            uint64_t v286 = v280[7];
                            uint64_t v285 = v280[8];
                            unint64_t v287 = (v285 - v286) >> 3;
                            if (v287 > v284)
                            {
                              uint64_t v288 = v286 + 8 * v284;
                              if (v288 != v285 && *(_DWORD *)(v288 + 4) == v260)
                              {
                                unint64_t v290 = (void *)result[4];
                                uint64_t v291 = v290[4];
                                unint64_t v292 = (v290[5] - v291) >> 3;
                                if (v261 < v292)
                                {
                                  uint64_t v293 = *(void *)(v291 + 8 * v261);
                                  if (v293)
                                  {
                                    unint64_t v294 = *(unsigned __int16 *)(v293 + 2 * v264);
                                    uint64_t v296 = v290[7];
                                    uint64_t v295 = v290[8];
                                    unint64_t v297 = (v295 - v296) >> 3;
                                    if (v297 > v294)
                                    {
                                      uint64_t v298 = v296 + 8 * v294;
                                      if (v298 != v295 && *(_DWORD *)(v298 + 4) == v260)
                                      {
                                        uint64_t v300 = (void *)result[5];
                                        uint64_t v301 = v300[4];
                                        unint64_t v302 = (v300[5] - v301) >> 3;
                                        if (v261 < v302)
                                        {
                                          uint64_t v303 = *(void *)(v301 + 8 * v261);
                                          if (v303)
                                          {
                                            unint64_t v304 = *(unsigned __int16 *)(v303 + 2 * v264);
                                            uint64_t v306 = v300[7];
                                            uint64_t v305 = v300[8];
                                            unint64_t v1288 = (v305 - v306) >> 3;
                                            if (v1288 > v304)
                                            {
                                              uint64_t v307 = v306 + 8 * v304;
                                              if (v307 != v305 && *(_DWORD *)(v307 + 4) == v260)
                                              {
                                                unint64_t v1268 = (void *)result[6];
                                                uint64_t v1278 = v1268[4];
                                                unint64_t v1258 = (v1268[5] - v1278) >> 3;
                                                if (v261 < v1258)
                                                {
                                                  uint64_t v308 = *(void *)(v1278 + 8 * v261);
                                                  if (v308)
                                                  {
                                                    unint64_t v309 = *(unsigned __int16 *)(v308 + 2 * v264);
                                                    uint64_t v1238 = v1268[7];
                                                    uint64_t v1248 = v1268[8];
                                                    unint64_t v1228 = (v1248 - v1238) >> 3;
                                                    if (v1228 > v309)
                                                    {
                                                      uint64_t v310 = v1238 + 8 * v309;
                                                      if (v310 != v1248 && *(_DWORD *)(v310 + 4) == v260)
                                                      {
                                                        uint64_t v1208 = (void *)result[7];
                                                        uint64_t v1218 = v1208[4];
                                                        unint64_t v1198 = (v1208[5] - v1218) >> 3;
                                                        if (v261 < v1198)
                                                        {
                                                          uint64_t v311 = *(void *)(v1218 + 8 * v261);
                                                          if (v311)
                                                          {
                                                            unint64_t v312 = *(unsigned __int16 *)(v311 + 2 * v264);
                                                            uint64_t v1178 = v1208[7];
                                                            uint64_t v1188 = v1208[8];
                                                            unint64_t v1168 = (v1188 - v1178) >> 3;
                                                            if (v1168 > v312)
                                                            {
                                                              uint64_t v313 = v1178 + 8 * v312;
                                                              if (v313 != v1188
                                                                && *(_DWORD *)(v313 + 4) == v260)
                                                              {
                                                                uint64_t v1148 = (void *)result[8];
                                                                uint64_t v1158 = v1148[4];
                                                                unint64_t v1138 = (v1148[5] - v1158) >> 3;
                                                                if (v261 < v1138)
                                                                {
                                                                  uint64_t v314 = *(void *)(v1158 + 8 * v261);
                                                                  if (v314)
                                                                  {
                                                                    unint64_t v315 = *(unsigned __int16 *)(v314 + 2 * v264);
                                                                    uint64_t v1118 = v1148[7];
                                                                    uint64_t v1128 = v1148[8];
                                                                    unint64_t v1108 = (v1128 - v1118) >> 3;
                                                                    if (v1108 > v315)
                                                                    {
                                                                      uint64_t v316 = v1118 + 8 * v315;
                                                                      if (v316 != v1128
                                                                        && *(_DWORD *)(v316 + 4) == v260)
                                                                      {
                                                                        unint64_t v1088 = (void *)result[9];
                                                                        uint64_t v1098 = v1088[4];
                                                                        unint64_t v1078 = (v1088[5] - v1098) >> 3;
                                                                        if (v261 < v1078)
                                                                        {
                                                                          uint64_t v317 = *(void *)(v1098 + 8 * v261);
                                                                          if (v317)
                                                                          {
                                                                            unint64_t v318 = *(unsigned __int16 *)(v317 + 2 * v264);
                                                                            uint64_t v319 = v1088[7];
                                                                            uint64_t v320 = v1088[8];
                                                                            unint64_t v1069 = (v320 - v319) >> 3;
                                                                            if (v1069 > v318)
                                                                            {
                                                                              uint64_t v321 = v319 + 8 * v318;
                                                                              if (v321 != v320
                                                                                && *(_DWORD *)(v321 + 4) == v260)
                                                                              {
                                                                                v1050 = result;
                                                                                uint64_t v1060 = v45;
                                                                                v1032 = a2;
                                                                                uint64_t v1041 = v21;
                                                                                uint64_t v1026 = v44;
                                                                                unint64_t v322 = *(void *)v44;
                                                                                uint64_t v323 = HIDWORD(*(void *)v44);
                                                                                unint64_t v324 = *(void *)v44 >> 39;
                                                                                if (v324 < v282
                                                                                  && (uint64_t v325 = *(void *)(v281 + 8 * v324)) != 0
                                                                                  && (unint64_t v326 = *(unsigned __int16 *)(v325 + 2 * (HIDWORD(v322) & 0x7F)),
                                                                                      v287 > v326)
                                                                                  && (uint64_t v327 = v286 + 8 * v326,
                                                                                      v327 != v285)
                                                                                  && *(_DWORD *)(v327 + 4) == v323)
                                                                                {
                                                                                  uint64_t v328 = v280[10] + 16 * v326;
                                                                                }
                                                                                else
                                                                                {
                                                                                  uint64_t v328 = v280[11];
                                                                                }
                                                                                if (v324 < v292
                                                                                  && (uint64_t v329 = *(void *)(v291 + 8 * v324)) != 0
                                                                                  && (unint64_t v330 = *(unsigned __int16 *)(v329 + 2 * (HIDWORD(v322) & 0x7F)),
                                                                                      v297 > v330)
                                                                                  && (uint64_t v331 = v296 + 8 * v330,
                                                                                      v331 != v295)
                                                                                  && *(_DWORD *)(v331 + 4) == v323)
                                                                                {
                                                                                  uint64_t v332 = (long long *)(v290[10] + 24 * v330);
                                                                                }
                                                                                else
                                                                                {
                                                                                  uint64_t v332 = (long long *)v290[11];
                                                                                }
                                                                                if (v324 < v302
                                                                                  && (uint64_t v333 = *(void *)(v301 + 8 * v324)) != 0
                                                                                  && (unint64_t v334 = *(unsigned __int16 *)(v333 + 2 * (HIDWORD(v322) & 0x7F)),
                                                                                      v1288 > v334)
                                                                                  && (uint64_t v335 = v306 + 8 * v334,
                                                                                      v335 != v305)
                                                                                  && *(_DWORD *)(v335 + 4) == v323)
                                                                                {
                                                                                  unint64_t v336 = (arComponents::AlbedoTextureComponent *)(v300[10] + 48 * v334);
                                                                                }
                                                                                else
                                                                                {
                                                                                  unint64_t v336 = (arComponents::AlbedoTextureComponent *)v300[11];
                                                                                }
                                                                                if (v324 < v1258
                                                                                  && (uint64_t v337 = *(void *)(v1278 + 8 * v324)) != 0
                                                                                  && (unint64_t v338 = *(unsigned __int16 *)(v337 + 2 * (HIDWORD(v322) & 0x7F)),
                                                                                      v1228 > v338)
                                                                                  && (uint64_t v339 = v1238 + 8 * v338,
                                                                                      v339 != v1248)
                                                                                  && *(_DWORD *)(v339 + 4) == v323)
                                                                                {
                                                                                  unint64_t v340 = (long long *)(v1268[10] + 16 * v338);
                                                                                }
                                                                                else
                                                                                {
                                                                                  unint64_t v340 = (long long *)v1268[11];
                                                                                }
                                                                                if (v324 < v1198
                                                                                  && (uint64_t v341 = *(void *)(v1218 + 8 * v324)) != 0
                                                                                  && (unint64_t v342 = *(unsigned __int16 *)(v341 + 2 * (HIDWORD(v322) & 0x7F)),
                                                                                      v1168 > v342)
                                                                                  && (uint64_t v343 = v1178 + 8 * v342,
                                                                                      v343 != v1188)
                                                                                  && *(_DWORD *)(v343 + 4) == v323)
                                                                                {
                                                                                  unint64_t v344 = (uint64_t *)(v1208[10] + 8 * v342);
                                                                                }
                                                                                else
                                                                                {
                                                                                  unint64_t v344 = (uint64_t *)v1208[11];
                                                                                }
                                                                                if (v324 < v1138
                                                                                  && (uint64_t v345 = *(void *)(v1158 + 8 * v324)) != 0
                                                                                  && (unint64_t v346 = *(unsigned __int16 *)(v345 + 2 * (HIDWORD(v322) & 0x7F)),
                                                                                      v1108 > v346)
                                                                                  && (uint64_t v347 = v1118 + 8 * v346,
                                                                                      v347 != v1128)
                                                                                  && *(_DWORD *)(v347 + 4) == v323)
                                                                                {
                                                                                  unint64_t v348 = (long long *)(v1148[10] + 16 * v346);
                                                                                }
                                                                                else
                                                                                {
                                                                                  unint64_t v348 = (long long *)v1148[11];
                                                                                }
                                                                                if (v324 < v1078
                                                                                  && (uint64_t v349 = *(void *)(v1098 + 8 * v324)) != 0
                                                                                  && (unint64_t v350 = *(unsigned __int16 *)(v349 + 2 * (HIDWORD(v322) & 0x7F)),
                                                                                      v1069 > v350)
                                                                                  && (uint64_t v351 = v319 + 8 * v350,
                                                                                      v351 != v320)
                                                                                  && *(_DWORD *)(v351 + 4) == v323)
                                                                                {
                                                                                  uint64_t v258 = (int *)(v1088[10] + 4 * v350);
                                                                                }
                                                                                else
                                                                                {
                                                                                  uint64_t v258 = (int *)v1088[11];
                                                                                }
                                                                                md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v1296, v322, v46, *(void *)v328, *(std::__shared_weak_count **)(v328 + 8), v332, v336, v340, v344, v348, v258);
                                                                                uint64_t v21 = v1041;
                                                                                uint64_t result = v1050;
                                                                                uint64_t v44 = v1026;
                                                                                a2 = v1032;
                                                                                uint64_t v45 = v1060;
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v46 += 5;
        v44 += 8;
      }
      while (v44 != v45);
    }
  }
  uint64_t v26 = (void *)result[3];
  uint64_t v27 = v26 + 4;
  if (!v26) {
    uint64_t v27 = 0;
  }
  if (v27 == v21)
  {
    long long v1296 = *a2;
    uint64_t v1297 = *((void *)a2 + 2);
    uint64_t v48 = v26[7];
    uint64_t v47 = v26[8];
    if (v48 != v47)
    {
      uint64_t v49 = (std::__shared_weak_count **)(v26[10] + 8);
      do
      {
        uint64_t v354 = *result;
        unint64_t v355 = *(unsigned int *)(v48 + 4);
        unint64_t v356 = v355 >> 7;
        uint64_t v357 = *(void *)(*result + 32);
        if (v355 >> 7 < (*(void *)(*result + 40) - v357) >> 3)
        {
          uint64_t v358 = *(void *)(v357 + 8 * v356);
          if (v358)
          {
            uint64_t v359 = v355 & 0x7F;
            unint64_t v360 = *(unsigned __int16 *)(v358 + 2 * v359);
            uint64_t v363 = v354 + 56;
            uint64_t v361 = *(void *)(v354 + 56);
            uint64_t v362 = *(void *)(v363 + 8);
            if (v360 < (v362 - v361) >> 3)
            {
              uint64_t v364 = v361 + 8 * v360;
              if (v364 != v362 && *(_DWORD *)(v364 + 4) == v355)
              {
                uint64_t v366 = (void *)result[1];
                uint64_t v367 = v366[4];
                if (v356 < (v366[5] - v367) >> 3)
                {
                  uint64_t v368 = *(void *)(v367 + 8 * v356);
                  if (v368)
                  {
                    unint64_t v369 = *(unsigned __int16 *)(v368 + 2 * v359);
                    uint64_t v372 = v366 + 7;
                    uint64_t v370 = v366[7];
                    uint64_t v371 = v372[1];
                    if (v369 < (v371 - v370) >> 3)
                    {
                      uint64_t v373 = v370 + 8 * v369;
                      if (v373 != v371 && *(_DWORD *)(v373 + 4) == v355)
                      {
                        uint64_t v375 = (void *)result[2];
                        uint64_t v376 = v375[4];
                        unint64_t v377 = (v375[5] - v376) >> 3;
                        if (v356 < v377)
                        {
                          uint64_t v378 = *(void *)(v376 + 8 * v356);
                          if (v378)
                          {
                            unint64_t v379 = *(unsigned __int16 *)(v378 + 2 * v359);
                            uint64_t v381 = v375[7];
                            uint64_t v380 = v375[8];
                            unint64_t v382 = (v380 - v381) >> 3;
                            if (v382 > v379)
                            {
                              uint64_t v383 = v381 + 8 * v379;
                              if (v383 != v380 && *(_DWORD *)(v383 + 4) == v355)
                              {
                                uint64_t v385 = (void *)result[4];
                                uint64_t v386 = v385[4];
                                unint64_t v387 = (v385[5] - v386) >> 3;
                                if (v356 < v387)
                                {
                                  uint64_t v388 = *(void *)(v386 + 8 * v356);
                                  if (v388)
                                  {
                                    unint64_t v389 = *(unsigned __int16 *)(v388 + 2 * v359);
                                    uint64_t v391 = v385[7];
                                    uint64_t v390 = v385[8];
                                    unint64_t v392 = (v390 - v391) >> 3;
                                    if (v392 > v389)
                                    {
                                      uint64_t v393 = v391 + 8 * v389;
                                      if (v393 != v390 && *(_DWORD *)(v393 + 4) == v355)
                                      {
                                        unint64_t v395 = (void *)result[5];
                                        uint64_t v396 = v395[4];
                                        unint64_t v397 = (v395[5] - v396) >> 3;
                                        if (v356 < v397)
                                        {
                                          uint64_t v398 = *(void *)(v396 + 8 * v356);
                                          if (v398)
                                          {
                                            unint64_t v399 = *(unsigned __int16 *)(v398 + 2 * v359);
                                            uint64_t v401 = v395[7];
                                            uint64_t v400 = v395[8];
                                            unint64_t v1289 = (v400 - v401) >> 3;
                                            if (v1289 > v399)
                                            {
                                              uint64_t v402 = v401 + 8 * v399;
                                              if (v402 != v400 && *(_DWORD *)(v402 + 4) == v355)
                                              {
                                                unint64_t v1269 = (void *)result[6];
                                                uint64_t v1279 = v1269[4];
                                                unint64_t v1259 = (v1269[5] - v1279) >> 3;
                                                if (v356 < v1259)
                                                {
                                                  uint64_t v403 = *(void *)(v1279 + 8 * v356);
                                                  if (v403)
                                                  {
                                                    unint64_t v404 = *(unsigned __int16 *)(v403 + 2 * v359);
                                                    uint64_t v1239 = v1269[7];
                                                    uint64_t v1249 = v1269[8];
                                                    unint64_t v1229 = (v1249 - v1239) >> 3;
                                                    if (v1229 > v404)
                                                    {
                                                      uint64_t v405 = v1239 + 8 * v404;
                                                      if (v405 != v1249 && *(_DWORD *)(v405 + 4) == v355)
                                                      {
                                                        uint64_t v1209 = (void *)result[7];
                                                        uint64_t v1219 = v1209[4];
                                                        unint64_t v1199 = (v1209[5] - v1219) >> 3;
                                                        if (v356 < v1199)
                                                        {
                                                          uint64_t v406 = *(void *)(v1219 + 8 * v356);
                                                          if (v406)
                                                          {
                                                            unint64_t v407 = *(unsigned __int16 *)(v406 + 2 * v359);
                                                            uint64_t v1179 = v1209[7];
                                                            uint64_t v1189 = v1209[8];
                                                            unint64_t v1169 = (v1189 - v1179) >> 3;
                                                            if (v1169 > v407)
                                                            {
                                                              uint64_t v408 = v1179 + 8 * v407;
                                                              if (v408 != v1189
                                                                && *(_DWORD *)(v408 + 4) == v355)
                                                              {
                                                                uint64_t v1149 = (void *)result[8];
                                                                uint64_t v1159 = v1149[4];
                                                                unint64_t v1139 = (v1149[5] - v1159) >> 3;
                                                                if (v356 < v1139)
                                                                {
                                                                  uint64_t v409 = *(void *)(v1159 + 8 * v356);
                                                                  if (v409)
                                                                  {
                                                                    unint64_t v410 = *(unsigned __int16 *)(v409 + 2 * v359);
                                                                    uint64_t v1119 = v1149[7];
                                                                    uint64_t v1129 = v1149[8];
                                                                    unint64_t v1109 = (v1129 - v1119) >> 3;
                                                                    if (v1109 > v410)
                                                                    {
                                                                      uint64_t v411 = v1119 + 8 * v410;
                                                                      if (v411 != v1129
                                                                        && *(_DWORD *)(v411 + 4) == v355)
                                                                      {
                                                                        uint64_t v1089 = (void *)result[9];
                                                                        uint64_t v1099 = v1089[4];
                                                                        unint64_t v1079 = (v1089[5] - v1099) >> 3;
                                                                        if (v356 < v1079)
                                                                        {
                                                                          uint64_t v412 = *(void *)(v1099 + 8 * v356);
                                                                          if (v412)
                                                                          {
                                                                            unint64_t v413 = *(unsigned __int16 *)(v412 + 2 * v359);
                                                                            uint64_t v414 = v1089[7];
                                                                            uint64_t v415 = v1089[8];
                                                                            unint64_t v1070 = (v415 - v414) >> 3;
                                                                            if (v1070 > v413)
                                                                            {
                                                                              uint64_t v416 = v414 + 8 * v413;
                                                                              if (v416 != v415
                                                                                && *(_DWORD *)(v416 + 4) == v355)
                                                                              {
                                                                                unint64_t v1051 = result;
                                                                                uint64_t v1061 = v47;
                                                                                v1033 = a2;
                                                                                uint64_t v1042 = v21;
                                                                                unint64_t v417 = *(void *)v48;
                                                                                uint64_t v418 = HIDWORD(*(void *)v48);
                                                                                unint64_t v419 = *(void *)v48 >> 39;
                                                                                if (v419 < v377
                                                                                  && (uint64_t v420 = *(void *)(v376 + 8 * v419)) != 0
                                                                                  && (unint64_t v421 = *(unsigned __int16 *)(v420 + 2 * (HIDWORD(v417) & 0x7F)),
                                                                                      v382 > v421)
                                                                                  && (uint64_t v422 = v381 + 8 * v421,
                                                                                      v422 != v380)
                                                                                  && *(_DWORD *)(v422 + 4) == v418)
                                                                                {
                                                                                  uint64_t v423 = (long long *)(v375[10] + 80 * v421);
                                                                                }
                                                                                else
                                                                                {
                                                                                  uint64_t v423 = (long long *)v375[11];
                                                                                }
                                                                                if (v419 < v387
                                                                                  && (uint64_t v424 = *(void *)(v386 + 8 * v419)) != 0
                                                                                  && (unint64_t v425 = *(unsigned __int16 *)(v424 + 2 * (HIDWORD(v417) & 0x7F)),
                                                                                      v392 > v425)
                                                                                  && (uint64_t v426 = v391 + 8 * v425,
                                                                                      v426 != v390)
                                                                                  && *(_DWORD *)(v426 + 4) == v418)
                                                                                {
                                                                                  uint64_t v427 = (long long *)(v385[10] + 24 * v425);
                                                                                }
                                                                                else
                                                                                {
                                                                                  uint64_t v427 = (long long *)v385[11];
                                                                                }
                                                                                if (v419 < v397
                                                                                  && (uint64_t v428 = *(void *)(v396 + 8 * v419)) != 0
                                                                                  && (unint64_t v429 = *(unsigned __int16 *)(v428 + 2 * (HIDWORD(v417) & 0x7F)),
                                                                                      v1289 > v429)
                                                                                  && (uint64_t v430 = v401 + 8 * v429,
                                                                                      v430 != v400)
                                                                                  && *(_DWORD *)(v430 + 4) == v418)
                                                                                {
                                                                                  uint64_t v431 = (arComponents::AlbedoTextureComponent *)(v395[10] + 48 * v429);
                                                                                }
                                                                                else
                                                                                {
                                                                                  uint64_t v431 = (arComponents::AlbedoTextureComponent *)v395[11];
                                                                                }
                                                                                if (v419 < v1259
                                                                                  && (uint64_t v432 = *(void *)(v1279 + 8 * v419)) != 0
                                                                                  && (unint64_t v433 = *(unsigned __int16 *)(v432 + 2 * (HIDWORD(v417) & 0x7F)),
                                                                                      v1229 > v433)
                                                                                  && (uint64_t v434 = v1239 + 8 * v433,
                                                                                      v434 != v1249)
                                                                                  && *(_DWORD *)(v434 + 4) == v418)
                                                                                {
                                                                                  v435 = (long long *)(v1269[10] + 16 * v433);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v435 = (long long *)v1269[11];
                                                                                }
                                                                                if (v419 < v1199
                                                                                  && (uint64_t v436 = *(void *)(v1219 + 8 * v419)) != 0
                                                                                  && (unint64_t v437 = *(unsigned __int16 *)(v436 + 2 * (HIDWORD(v417) & 0x7F)),
                                                                                      v1169 > v437)
                                                                                  && (uint64_t v438 = v1179 + 8 * v437,
                                                                                      v438 != v1189)
                                                                                  && *(_DWORD *)(v438 + 4) == v418)
                                                                                {
                                                                                  unint64_t v439 = (uint64_t *)(v1209[10] + 8 * v437);
                                                                                }
                                                                                else
                                                                                {
                                                                                  unint64_t v439 = (uint64_t *)v1209[11];
                                                                                }
                                                                                if (v419 < v1139
                                                                                  && (uint64_t v440 = *(void *)(v1159 + 8 * v419)) != 0
                                                                                  && (unint64_t v441 = *(unsigned __int16 *)(v440 + 2 * (HIDWORD(v417) & 0x7F)),
                                                                                      v1109 > v441)
                                                                                  && (uint64_t v442 = v1119 + 8 * v441,
                                                                                      v442 != v1129)
                                                                                  && *(_DWORD *)(v442 + 4) == v418)
                                                                                {
                                                                                  uint64_t v443 = (long long *)(v1149[10] + 16 * v441);
                                                                                }
                                                                                else
                                                                                {
                                                                                  uint64_t v443 = (long long *)v1149[11];
                                                                                }
                                                                                if (v419 < v1079
                                                                                  && (uint64_t v444 = *(void *)(v1099 + 8 * v419)) != 0
                                                                                  && (unint64_t v445 = *(unsigned __int16 *)(v444 + 2 * (HIDWORD(v417) & 0x7F)),
                                                                                      v1070 > v445)
                                                                                  && (uint64_t v446 = v414 + 8 * v445,
                                                                                      v446 != v415)
                                                                                  && *(_DWORD *)(v446 + 4) == v418)
                                                                                {
                                                                                  unint64_t v352 = (int *)(v1089[10] + 4 * v445);
                                                                                }
                                                                                else
                                                                                {
                                                                                  unint64_t v352 = (int *)v1089[11];
                                                                                }
                                                                                uint64_t v353 = v49;
                                                                                md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v1296, v417, v423, (uint64_t)*(v49 - 1), *v49, v427, v431, v435, v439, v443, v352);
                                                                                uint64_t v49 = v353;
                                                                                uint64_t v21 = v1042;
                                                                                uint64_t result = v1051;
                                                                                a2 = v1033;
                                                                                uint64_t v47 = v1061;
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v48 += 8;
        v49 += 2;
      }
      while (v48 != v47);
    }
  }
  uint64_t v28 = (void *)result[4];
  uint64_t v29 = v28 + 4;
  if (!v28) {
    uint64_t v29 = 0;
  }
  if (v29 == v21)
  {
    long long v1296 = *a2;
    uint64_t v1297 = *((void *)a2 + 2);
    uint64_t v50 = v28[7];
    uint64_t v51 = v28[8];
    if (v50 != v51)
    {
      unint64_t v52 = (long long *)v28[10];
      do
      {
        uint64_t v448 = *result;
        unint64_t v449 = *(unsigned int *)(v50 + 4);
        unint64_t v450 = v449 >> 7;
        uint64_t v451 = *(void *)(*result + 32);
        if (v449 >> 7 < (*(void *)(*result + 40) - v451) >> 3)
        {
          uint64_t v452 = *(void *)(v451 + 8 * v450);
          if (v452)
          {
            uint64_t v453 = v449 & 0x7F;
            unint64_t v454 = *(unsigned __int16 *)(v452 + 2 * v453);
            uint64_t v457 = v448 + 56;
            uint64_t v455 = *(void *)(v448 + 56);
            uint64_t v456 = *(void *)(v457 + 8);
            if (v454 < (v456 - v455) >> 3)
            {
              uint64_t v458 = v455 + 8 * v454;
              if (v458 != v456 && *(_DWORD *)(v458 + 4) == v449)
              {
                uint64_t v460 = (void *)result[1];
                uint64_t v461 = v460[4];
                if (v450 < (v460[5] - v461) >> 3)
                {
                  uint64_t v462 = *(void *)(v461 + 8 * v450);
                  if (v462)
                  {
                    unint64_t v463 = *(unsigned __int16 *)(v462 + 2 * v453);
                    unint64_t v466 = v460 + 7;
                    uint64_t v464 = v460[7];
                    uint64_t v465 = v466[1];
                    if (v463 < (v465 - v464) >> 3)
                    {
                      uint64_t v467 = v464 + 8 * v463;
                      if (v467 != v465 && *(_DWORD *)(v467 + 4) == v449)
                      {
                        uint64_t v469 = (void *)result[2];
                        uint64_t v470 = v469[4];
                        unint64_t v471 = (v469[5] - v470) >> 3;
                        if (v450 < v471)
                        {
                          uint64_t v472 = *(void *)(v470 + 8 * v450);
                          if (v472)
                          {
                            unint64_t v473 = *(unsigned __int16 *)(v472 + 2 * v453);
                            uint64_t v474 = v469[7];
                            uint64_t v475 = v469[8];
                            unint64_t v476 = (v475 - v474) >> 3;
                            if (v476 > v473)
                            {
                              uint64_t v477 = v474 + 8 * v473;
                              if (v477 != v475 && *(_DWORD *)(v477 + 4) == v449)
                              {
                                uint64_t v479 = (void *)result[3];
                                uint64_t v480 = v479[4];
                                unint64_t v481 = (v479[5] - v480) >> 3;
                                if (v450 < v481)
                                {
                                  uint64_t v482 = *(void *)(v480 + 8 * v450);
                                  if (v482)
                                  {
                                    unint64_t v483 = *(unsigned __int16 *)(v482 + 2 * v453);
                                    uint64_t v485 = v479[7];
                                    uint64_t v484 = v479[8];
                                    unint64_t v486 = (v484 - v485) >> 3;
                                    if (v486 > v483)
                                    {
                                      uint64_t v487 = v485 + 8 * v483;
                                      if (v487 != v484 && *(_DWORD *)(v487 + 4) == v449)
                                      {
                                        unint64_t v489 = (void *)result[5];
                                        uint64_t v490 = v489[4];
                                        unint64_t v491 = (v489[5] - v490) >> 3;
                                        if (v450 < v491)
                                        {
                                          uint64_t v492 = *(void *)(v490 + 8 * v450);
                                          if (v492)
                                          {
                                            unint64_t v493 = *(unsigned __int16 *)(v492 + 2 * v453);
                                            uint64_t v495 = v489[7];
                                            uint64_t v494 = v489[8];
                                            unint64_t v1290 = (v494 - v495) >> 3;
                                            if (v1290 > v493)
                                            {
                                              uint64_t v496 = v495 + 8 * v493;
                                              if (v496 != v494 && *(_DWORD *)(v496 + 4) == v449)
                                              {
                                                uint64_t v1270 = (void *)result[6];
                                                uint64_t v1280 = v1270[4];
                                                unint64_t v1260 = (v1270[5] - v1280) >> 3;
                                                if (v450 < v1260)
                                                {
                                                  uint64_t v497 = *(void *)(v1280 + 8 * v450);
                                                  if (v497)
                                                  {
                                                    unint64_t v498 = *(unsigned __int16 *)(v497 + 2 * v453);
                                                    uint64_t v1240 = v1270[7];
                                                    uint64_t v1250 = v1270[8];
                                                    unint64_t v1230 = (v1250 - v1240) >> 3;
                                                    if (v1230 > v498)
                                                    {
                                                      uint64_t v499 = v1240 + 8 * v498;
                                                      if (v499 != v1250 && *(_DWORD *)(v499 + 4) == v449)
                                                      {
                                                        uint64_t v1210 = (void *)result[7];
                                                        uint64_t v1220 = v1210[4];
                                                        unint64_t v1200 = (v1210[5] - v1220) >> 3;
                                                        if (v450 < v1200)
                                                        {
                                                          uint64_t v500 = *(void *)(v1220 + 8 * v450);
                                                          if (v500)
                                                          {
                                                            unint64_t v501 = *(unsigned __int16 *)(v500 + 2 * v453);
                                                            uint64_t v1180 = v1210[7];
                                                            uint64_t v1190 = v1210[8];
                                                            unint64_t v1170 = (v1190 - v1180) >> 3;
                                                            if (v1170 > v501)
                                                            {
                                                              uint64_t v502 = v1180 + 8 * v501;
                                                              if (v502 != v1190
                                                                && *(_DWORD *)(v502 + 4) == v449)
                                                              {
                                                                unint64_t v1150 = (void *)result[8];
                                                                uint64_t v1160 = v1150[4];
                                                                unint64_t v1140 = (v1150[5] - v1160) >> 3;
                                                                if (v450 < v1140)
                                                                {
                                                                  uint64_t v503 = *(void *)(v1160 + 8 * v450);
                                                                  if (v503)
                                                                  {
                                                                    unint64_t v504 = *(unsigned __int16 *)(v503 + 2 * v453);
                                                                    uint64_t v1120 = v1150[7];
                                                                    uint64_t v1130 = v1150[8];
                                                                    unint64_t v1110 = (v1130 - v1120) >> 3;
                                                                    if (v1110 > v504)
                                                                    {
                                                                      uint64_t v505 = v1120 + 8 * v504;
                                                                      if (v505 != v1130
                                                                        && *(_DWORD *)(v505 + 4) == v449)
                                                                      {
                                                                        v1090 = (void *)result[9];
                                                                        uint64_t v1100 = v1090[4];
                                                                        unint64_t v1080 = (v1090[5] - v1100) >> 3;
                                                                        if (v450 < v1080)
                                                                        {
                                                                          uint64_t v506 = *(void *)(v1100 + 8 * v450);
                                                                          if (v506)
                                                                          {
                                                                            unint64_t v507 = *(unsigned __int16 *)(v506 + 2 * v453);
                                                                            uint64_t v508 = v1090[7];
                                                                            uint64_t v509 = v1090[8];
                                                                            unint64_t v1071 = (v509 - v508) >> 3;
                                                                            if (v1071 > v507)
                                                                            {
                                                                              uint64_t v510 = v508 + 8 * v507;
                                                                              if (v510 != v509
                                                                                && *(_DWORD *)(v510 + 4) == v449)
                                                                              {
                                                                                uint64_t v1052 = result;
                                                                                uint64_t v1062 = v51;
                                                                                unint64_t v1034 = a2;
                                                                                v1043 = v21;
                                                                                uint64_t v1027 = v50;
                                                                                unint64_t v511 = *(void *)v50;
                                                                                uint64_t v512 = HIDWORD(*(void *)v50);
                                                                                unint64_t v513 = *(void *)v50 >> 39;
                                                                                if (v513 < v471
                                                                                  && (uint64_t v514 = *(void *)(v470 + 8 * v513)) != 0
                                                                                  && (unint64_t v515 = *(unsigned __int16 *)(v514 + 2 * (HIDWORD(v511) & 0x7F)),
                                                                                      v476 > v515)
                                                                                  && (uint64_t v516 = v474 + 8 * v515,
                                                                                      v516 != v475)
                                                                                  && *(_DWORD *)(v516 + 4) == v512)
                                                                                {
                                                                                  unint64_t v517 = (long long *)(v469[10] + 80 * v515);
                                                                                }
                                                                                else
                                                                                {
                                                                                  unint64_t v517 = (long long *)v469[11];
                                                                                }
                                                                                if (v513 < v481
                                                                                  && (uint64_t v518 = *(void *)(v480 + 8 * v513)) != 0
                                                                                  && (unint64_t v519 = *(unsigned __int16 *)(v518 + 2 * (HIDWORD(v511) & 0x7F)),
                                                                                      v486 > v519)
                                                                                  && (uint64_t v520 = v485 + 8 * v519,
                                                                                      v520 != v484)
                                                                                  && *(_DWORD *)(v520 + 4) == v512)
                                                                                {
                                                                                  uint64_t v521 = v479[10] + 16 * v519;
                                                                                }
                                                                                else
                                                                                {
                                                                                  uint64_t v521 = v479[11];
                                                                                }
                                                                                if (v513 < v491
                                                                                  && (uint64_t v522 = *(void *)(v490 + 8 * v513)) != 0
                                                                                  && (unint64_t v523 = *(unsigned __int16 *)(v522 + 2 * (HIDWORD(v511) & 0x7F)),
                                                                                      v1290 > v523)
                                                                                  && (uint64_t v524 = v495 + 8 * v523,
                                                                                      v524 != v494)
                                                                                  && *(_DWORD *)(v524 + 4) == v512)
                                                                                {
                                                                                  uint64_t v525 = (arComponents::AlbedoTextureComponent *)(v489[10] + 48 * v523);
                                                                                }
                                                                                else
                                                                                {
                                                                                  uint64_t v525 = (arComponents::AlbedoTextureComponent *)v489[11];
                                                                                }
                                                                                if (v513 < v1260
                                                                                  && (uint64_t v526 = *(void *)(v1280 + 8 * v513)) != 0
                                                                                  && (unint64_t v527 = *(unsigned __int16 *)(v526 + 2 * (HIDWORD(v511) & 0x7F)),
                                                                                      v1230 > v527)
                                                                                  && (uint64_t v528 = v1240 + 8 * v527,
                                                                                      v528 != v1250)
                                                                                  && *(_DWORD *)(v528 + 4) == v512)
                                                                                {
                                                                                  v529 = (long long *)(v1270[10] + 16 * v527);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v529 = (long long *)v1270[11];
                                                                                }
                                                                                if (v513 < v1200
                                                                                  && (uint64_t v530 = *(void *)(v1220 + 8 * v513)) != 0
                                                                                  && (unint64_t v531 = *(unsigned __int16 *)(v530 + 2 * (HIDWORD(v511) & 0x7F)),
                                                                                      v1170 > v531)
                                                                                  && (uint64_t v532 = v1180 + 8 * v531,
                                                                                      v532 != v1190)
                                                                                  && *(_DWORD *)(v532 + 4) == v512)
                                                                                {
                                                                                  v533 = (uint64_t *)(v1210[10] + 8 * v531);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v533 = (uint64_t *)v1210[11];
                                                                                }
                                                                                if (v513 < v1140
                                                                                  && (uint64_t v534 = *(void *)(v1160 + 8 * v513)) != 0
                                                                                  && (unint64_t v535 = *(unsigned __int16 *)(v534 + 2 * (HIDWORD(v511) & 0x7F)),
                                                                                      v1110 > v535)
                                                                                  && (uint64_t v536 = v1120 + 8 * v535,
                                                                                      v536 != v1130)
                                                                                  && *(_DWORD *)(v536 + 4) == v512)
                                                                                {
                                                                                  v537 = (long long *)(v1150[10] + 16 * v535);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v537 = (long long *)v1150[11];
                                                                                }
                                                                                if (v513 < v1080
                                                                                  && (uint64_t v538 = *(void *)(v1100 + 8 * v513)) != 0
                                                                                  && (unint64_t v539 = *(unsigned __int16 *)(v538 + 2 * (HIDWORD(v511) & 0x7F)),
                                                                                      v1071 > v539)
                                                                                  && (uint64_t v540 = v508 + 8 * v539,
                                                                                      v540 != v509)
                                                                                  && *(_DWORD *)(v540 + 4) == v512)
                                                                                {
                                                                                  unint64_t v447 = (int *)(v1090[10] + 4 * v539);
                                                                                }
                                                                                else
                                                                                {
                                                                                  unint64_t v447 = (int *)v1090[11];
                                                                                }
                                                                                md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v1296, v511, v517, *(void *)v521, *(std::__shared_weak_count **)(v521 + 8), v52, v525, v529, v533, v537, v447);
                                                                                uint64_t v21 = v1043;
                                                                                uint64_t result = v1052;
                                                                                uint64_t v50 = v1027;
                                                                                a2 = v1034;
                                                                                uint64_t v51 = v1062;
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        unint64_t v52 = (long long *)((char *)v52 + 24);
        v50 += 8;
      }
      while (v50 != v51);
    }
  }
  uint64_t v30 = (void *)result[5];
  uint64_t v31 = v30 + 4;
  if (!v30) {
    uint64_t v31 = 0;
  }
  if (v31 == v21)
  {
    long long v1296 = *a2;
    uint64_t v1297 = *((void *)a2 + 2);
    uint64_t v53 = v30[7];
    uint64_t v54 = v30[8];
    if (v53 != v54)
    {
      uint64_t v55 = (arComponents::AlbedoTextureComponent *)v30[10];
      do
      {
        uint64_t v542 = *result;
        unint64_t v543 = *(unsigned int *)(v53 + 4);
        unint64_t v544 = v543 >> 7;
        uint64_t v545 = *(void *)(*result + 32);
        if (v543 >> 7 < (*(void *)(*result + 40) - v545) >> 3)
        {
          uint64_t v546 = *(void *)(v545 + 8 * v544);
          if (v546)
          {
            uint64_t v547 = v543 & 0x7F;
            unint64_t v548 = *(unsigned __int16 *)(v546 + 2 * v547);
            uint64_t v551 = v542 + 56;
            uint64_t v549 = *(void *)(v542 + 56);
            uint64_t v550 = *(void *)(v551 + 8);
            if (v548 < (v550 - v549) >> 3)
            {
              uint64_t v552 = v549 + 8 * v548;
              if (v552 != v550 && *(_DWORD *)(v552 + 4) == v543)
              {
                v554 = (void *)result[1];
                uint64_t v555 = v554[4];
                if (v544 < (v554[5] - v555) >> 3)
                {
                  uint64_t v556 = *(void *)(v555 + 8 * v544);
                  if (v556)
                  {
                    unint64_t v557 = *(unsigned __int16 *)(v556 + 2 * v547);
                    uint64_t v560 = v554 + 7;
                    uint64_t v558 = v554[7];
                    uint64_t v559 = v560[1];
                    if (v557 < (v559 - v558) >> 3)
                    {
                      uint64_t v561 = v558 + 8 * v557;
                      if (v561 != v559 && *(_DWORD *)(v561 + 4) == v543)
                      {
                        v563 = (void *)result[2];
                        uint64_t v564 = v563[4];
                        unint64_t v565 = (v563[5] - v564) >> 3;
                        if (v544 < v565)
                        {
                          uint64_t v566 = *(void *)(v564 + 8 * v544);
                          if (v566)
                          {
                            unint64_t v567 = *(unsigned __int16 *)(v566 + 2 * v547);
                            uint64_t v568 = v563[7];
                            uint64_t v569 = v563[8];
                            unint64_t v570 = (v569 - v568) >> 3;
                            if (v570 > v567)
                            {
                              uint64_t v571 = v568 + 8 * v567;
                              if (v571 != v569 && *(_DWORD *)(v571 + 4) == v543)
                              {
                                unint64_t v573 = (void *)result[3];
                                uint64_t v574 = v573[4];
                                unint64_t v575 = (v573[5] - v574) >> 3;
                                if (v544 < v575)
                                {
                                  uint64_t v576 = *(void *)(v574 + 8 * v544);
                                  if (v576)
                                  {
                                    unint64_t v577 = *(unsigned __int16 *)(v576 + 2 * v547);
                                    uint64_t v579 = v573[7];
                                    uint64_t v578 = v573[8];
                                    unint64_t v580 = (v578 - v579) >> 3;
                                    if (v580 > v577)
                                    {
                                      uint64_t v581 = v579 + 8 * v577;
                                      if (v581 != v578 && *(_DWORD *)(v581 + 4) == v543)
                                      {
                                        unint64_t v583 = (void *)result[4];
                                        uint64_t v584 = v583[4];
                                        unint64_t v585 = (v583[5] - v584) >> 3;
                                        if (v544 < v585)
                                        {
                                          uint64_t v586 = *(void *)(v584 + 8 * v544);
                                          if (v586)
                                          {
                                            unint64_t v587 = *(unsigned __int16 *)(v586 + 2 * v547);
                                            uint64_t v589 = v583[7];
                                            uint64_t v588 = v583[8];
                                            unint64_t v1291 = (v588 - v589) >> 3;
                                            if (v1291 > v587)
                                            {
                                              uint64_t v590 = v589 + 8 * v587;
                                              if (v590 != v588 && *(_DWORD *)(v590 + 4) == v543)
                                              {
                                                uint64_t v1271 = (void *)result[6];
                                                uint64_t v1281 = v1271[4];
                                                unint64_t v1261 = (v1271[5] - v1281) >> 3;
                                                if (v544 < v1261)
                                                {
                                                  uint64_t v591 = *(void *)(v1281 + 8 * v544);
                                                  if (v591)
                                                  {
                                                    unint64_t v592 = *(unsigned __int16 *)(v591 + 2 * v547);
                                                    uint64_t v1241 = v1271[7];
                                                    uint64_t v1251 = v1271[8];
                                                    unint64_t v1231 = (v1251 - v1241) >> 3;
                                                    if (v1231 > v592)
                                                    {
                                                      uint64_t v593 = v1241 + 8 * v592;
                                                      if (v593 != v1251 && *(_DWORD *)(v593 + 4) == v543)
                                                      {
                                                        v1211 = (void *)result[7];
                                                        uint64_t v1221 = v1211[4];
                                                        unint64_t v1201 = (v1211[5] - v1221) >> 3;
                                                        if (v544 < v1201)
                                                        {
                                                          uint64_t v594 = *(void *)(v1221 + 8 * v544);
                                                          if (v594)
                                                          {
                                                            unint64_t v595 = *(unsigned __int16 *)(v594 + 2 * v547);
                                                            uint64_t v1181 = v1211[7];
                                                            uint64_t v1191 = v1211[8];
                                                            unint64_t v1171 = (v1191 - v1181) >> 3;
                                                            if (v1171 > v595)
                                                            {
                                                              uint64_t v596 = v1181 + 8 * v595;
                                                              if (v596 != v1191
                                                                && *(_DWORD *)(v596 + 4) == v543)
                                                              {
                                                                uint64_t v1151 = (void *)result[8];
                                                                uint64_t v1161 = v1151[4];
                                                                unint64_t v1141 = (v1151[5] - v1161) >> 3;
                                                                if (v544 < v1141)
                                                                {
                                                                  uint64_t v597 = *(void *)(v1161 + 8 * v544);
                                                                  if (v597)
                                                                  {
                                                                    unint64_t v598 = *(unsigned __int16 *)(v597 + 2 * v547);
                                                                    uint64_t v1121 = v1151[7];
                                                                    uint64_t v1131 = v1151[8];
                                                                    unint64_t v1111 = (v1131 - v1121) >> 3;
                                                                    if (v1111 > v598)
                                                                    {
                                                                      uint64_t v599 = v1121 + 8 * v598;
                                                                      if (v599 != v1131
                                                                        && *(_DWORD *)(v599 + 4) == v543)
                                                                      {
                                                                        uint64_t v1091 = (void *)result[9];
                                                                        uint64_t v1101 = v1091[4];
                                                                        unint64_t v1081 = (v1091[5] - v1101) >> 3;
                                                                        if (v544 < v1081)
                                                                        {
                                                                          uint64_t v600 = *(void *)(v1101 + 8 * v544);
                                                                          if (v600)
                                                                          {
                                                                            unint64_t v601 = *(unsigned __int16 *)(v600 + 2 * v547);
                                                                            uint64_t v602 = v1091[7];
                                                                            uint64_t v603 = v1091[8];
                                                                            unint64_t v1072 = (v603 - v602) >> 3;
                                                                            if (v1072 > v601)
                                                                            {
                                                                              uint64_t v604 = v602 + 8 * v601;
                                                                              if (v604 != v603
                                                                                && *(_DWORD *)(v604 + 4) == v543)
                                                                              {
                                                                                unint64_t v1053 = result;
                                                                                uint64_t v1063 = v54;
                                                                                unint64_t v1035 = a2;
                                                                                uint64_t v1044 = v21;
                                                                                uint64_t v1028 = v53;
                                                                                unint64_t v605 = *(void *)v53;
                                                                                uint64_t v606 = HIDWORD(*(void *)v53);
                                                                                unint64_t v607 = *(void *)v53 >> 39;
                                                                                if (v607 < v565
                                                                                  && (uint64_t v608 = *(void *)(v564 + 8 * v607)) != 0
                                                                                  && (unint64_t v609 = *(unsigned __int16 *)(v608 + 2 * (HIDWORD(v605) & 0x7F)),
                                                                                      v570 > v609)
                                                                                  && (uint64_t v610 = v568 + 8 * v609,
                                                                                      v610 != v569)
                                                                                  && *(_DWORD *)(v610 + 4) == v606)
                                                                                {
                                                                                  uint64_t v611 = (long long *)(v563[10] + 80 * v609);
                                                                                }
                                                                                else
                                                                                {
                                                                                  uint64_t v611 = (long long *)v563[11];
                                                                                }
                                                                                if (v607 < v575
                                                                                  && (uint64_t v612 = *(void *)(v574 + 8 * v607)) != 0
                                                                                  && (unint64_t v613 = *(unsigned __int16 *)(v612 + 2 * (HIDWORD(v605) & 0x7F)),
                                                                                      v580 > v613)
                                                                                  && (uint64_t v614 = v579 + 8 * v613,
                                                                                      v614 != v578)
                                                                                  && *(_DWORD *)(v614 + 4) == v606)
                                                                                {
                                                                                  uint64_t v615 = v573[10] + 16 * v613;
                                                                                }
                                                                                else
                                                                                {
                                                                                  uint64_t v615 = v573[11];
                                                                                }
                                                                                if (v607 < v585
                                                                                  && (uint64_t v616 = *(void *)(v584 + 8 * v607)) != 0
                                                                                  && (unint64_t v617 = *(unsigned __int16 *)(v616 + 2 * (HIDWORD(v605) & 0x7F)),
                                                                                      v1291 > v617)
                                                                                  && (uint64_t v618 = v589 + 8 * v617,
                                                                                      v618 != v588)
                                                                                  && *(_DWORD *)(v618 + 4) == v606)
                                                                                {
                                                                                  v619 = (long long *)(v583[10] + 24 * v617);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v619 = (long long *)v583[11];
                                                                                }
                                                                                if (v607 < v1261
                                                                                  && (uint64_t v620 = *(void *)(v1281 + 8 * v607)) != 0
                                                                                  && (unint64_t v621 = *(unsigned __int16 *)(v620 + 2 * (HIDWORD(v605) & 0x7F)),
                                                                                      v1231 > v621)
                                                                                  && (uint64_t v622 = v1241 + 8 * v621,
                                                                                      v622 != v1251)
                                                                                  && *(_DWORD *)(v622 + 4) == v606)
                                                                                {
                                                                                  unint64_t v623 = (long long *)(v1271[10] + 16 * v621);
                                                                                }
                                                                                else
                                                                                {
                                                                                  unint64_t v623 = (long long *)v1271[11];
                                                                                }
                                                                                if (v607 < v1201
                                                                                  && (uint64_t v624 = *(void *)(v1221 + 8 * v607)) != 0
                                                                                  && (unint64_t v625 = *(unsigned __int16 *)(v624 + 2 * (HIDWORD(v605) & 0x7F)),
                                                                                      v1171 > v625)
                                                                                  && (uint64_t v626 = v1181 + 8 * v625,
                                                                                      v626 != v1191)
                                                                                  && *(_DWORD *)(v626 + 4) == v606)
                                                                                {
                                                                                  uint64_t v627 = (uint64_t *)(v1211[10] + 8 * v625);
                                                                                }
                                                                                else
                                                                                {
                                                                                  uint64_t v627 = (uint64_t *)v1211[11];
                                                                                }
                                                                                if (v607 < v1141
                                                                                  && (uint64_t v628 = *(void *)(v1161 + 8 * v607)) != 0
                                                                                  && (unint64_t v629 = *(unsigned __int16 *)(v628 + 2 * (HIDWORD(v605) & 0x7F)),
                                                                                      v1111 > v629)
                                                                                  && (uint64_t v630 = v1121 + 8 * v629,
                                                                                      v630 != v1131)
                                                                                  && *(_DWORD *)(v630 + 4) == v606)
                                                                                {
                                                                                  uint64_t v631 = (long long *)(v1151[10] + 16 * v629);
                                                                                }
                                                                                else
                                                                                {
                                                                                  uint64_t v631 = (long long *)v1151[11];
                                                                                }
                                                                                if (v607 < v1081
                                                                                  && (uint64_t v632 = *(void *)(v1101 + 8 * v607)) != 0
                                                                                  && (unint64_t v633 = *(unsigned __int16 *)(v632 + 2 * (HIDWORD(v605) & 0x7F)),
                                                                                      v1072 > v633)
                                                                                  && (uint64_t v634 = v602 + 8 * v633,
                                                                                      v634 != v603)
                                                                                  && *(_DWORD *)(v634 + 4) == v606)
                                                                                {
                                                                                  uint64_t v541 = (int *)(v1091[10] + 4 * v633);
                                                                                }
                                                                                else
                                                                                {
                                                                                  uint64_t v541 = (int *)v1091[11];
                                                                                }
                                                                                md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v1296, v605, v611, *(void *)v615, *(std::__shared_weak_count **)(v615 + 8), v619, v55, v623, v627, v631, v541);
                                                                                uint64_t v21 = v1044;
                                                                                uint64_t result = v1053;
                                                                                uint64_t v53 = v1028;
                                                                                a2 = v1035;
                                                                                uint64_t v54 = v1063;
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        uint64_t v55 = (arComponents::AlbedoTextureComponent *)((char *)v55 + 48);
        v53 += 8;
      }
      while (v53 != v54);
    }
  }
  unint64_t v32 = (void *)result[6];
  unint64_t v33 = v32 + 4;
  if (!v32) {
    unint64_t v33 = 0;
  }
  if (v33 == v21)
  {
    long long v1296 = *a2;
    uint64_t v1297 = *((void *)a2 + 2);
    uint64_t v56 = v32[7];
    uint64_t v57 = v32[8];
    if (v56 != v57)
    {
      uint64_t v58 = (long long *)v32[10];
      do
      {
        uint64_t v636 = *result;
        unint64_t v637 = *(unsigned int *)(v56 + 4);
        unint64_t v638 = v637 >> 7;
        uint64_t v639 = *(void *)(*result + 32);
        if (v637 >> 7 < (*(void *)(*result + 40) - v639) >> 3)
        {
          uint64_t v640 = *(void *)(v639 + 8 * v638);
          if (v640)
          {
            uint64_t v641 = v637 & 0x7F;
            unint64_t v642 = *(unsigned __int16 *)(v640 + 2 * v641);
            uint64_t v645 = v636 + 56;
            uint64_t v643 = *(void *)(v636 + 56);
            uint64_t v644 = *(void *)(v645 + 8);
            if (v642 < (v644 - v643) >> 3)
            {
              uint64_t v646 = v643 + 8 * v642;
              if (v646 != v644 && *(_DWORD *)(v646 + 4) == v637)
              {
                unint64_t v648 = (void *)result[1];
                uint64_t v649 = v648[4];
                if (v638 < (v648[5] - v649) >> 3)
                {
                  uint64_t v650 = *(void *)(v649 + 8 * v638);
                  if (v650)
                  {
                    unint64_t v651 = *(unsigned __int16 *)(v650 + 2 * v641);
                    unint64_t v654 = v648 + 7;
                    uint64_t v652 = v648[7];
                    uint64_t v653 = v654[1];
                    if (v651 < (v653 - v652) >> 3)
                    {
                      uint64_t v655 = v652 + 8 * v651;
                      if (v655 != v653 && *(_DWORD *)(v655 + 4) == v637)
                      {
                        uint64_t v657 = (void *)result[2];
                        uint64_t v658 = v657[4];
                        unint64_t v659 = (v657[5] - v658) >> 3;
                        if (v638 < v659)
                        {
                          uint64_t v660 = *(void *)(v658 + 8 * v638);
                          if (v660)
                          {
                            unint64_t v661 = *(unsigned __int16 *)(v660 + 2 * v641);
                            uint64_t v662 = v657[7];
                            uint64_t v663 = v657[8];
                            unint64_t v664 = (v663 - v662) >> 3;
                            if (v664 > v661)
                            {
                              uint64_t v665 = v662 + 8 * v661;
                              if (v665 != v663 && *(_DWORD *)(v665 + 4) == v637)
                              {
                                v667 = (void *)result[3];
                                uint64_t v668 = v667[4];
                                unint64_t v669 = (v667[5] - v668) >> 3;
                                if (v638 < v669)
                                {
                                  uint64_t v670 = *(void *)(v668 + 8 * v638);
                                  if (v670)
                                  {
                                    unint64_t v671 = *(unsigned __int16 *)(v670 + 2 * v641);
                                    uint64_t v673 = v667[7];
                                    uint64_t v672 = v667[8];
                                    unint64_t v674 = (v672 - v673) >> 3;
                                    if (v674 > v671)
                                    {
                                      uint64_t v675 = v673 + 8 * v671;
                                      if (v675 != v672 && *(_DWORD *)(v675 + 4) == v637)
                                      {
                                        v677 = (void *)result[4];
                                        uint64_t v678 = v677[4];
                                        unint64_t v679 = (v677[5] - v678) >> 3;
                                        if (v638 < v679)
                                        {
                                          uint64_t v680 = *(void *)(v678 + 8 * v638);
                                          if (v680)
                                          {
                                            unint64_t v681 = *(unsigned __int16 *)(v680 + 2 * v641);
                                            uint64_t v683 = v677[7];
                                            uint64_t v682 = v677[8];
                                            unint64_t v1292 = (v682 - v683) >> 3;
                                            if (v1292 > v681)
                                            {
                                              uint64_t v684 = v683 + 8 * v681;
                                              if (v684 != v682 && *(_DWORD *)(v684 + 4) == v637)
                                              {
                                                uint64_t v1272 = (void *)result[5];
                                                uint64_t v1282 = v1272[4];
                                                unint64_t v1262 = (v1272[5] - v1282) >> 3;
                                                if (v638 < v1262)
                                                {
                                                  uint64_t v685 = *(void *)(v1282 + 8 * v638);
                                                  if (v685)
                                                  {
                                                    unint64_t v686 = *(unsigned __int16 *)(v685 + 2 * v641);
                                                    uint64_t v1242 = v1272[7];
                                                    uint64_t v1252 = v1272[8];
                                                    unint64_t v1232 = (v1252 - v1242) >> 3;
                                                    if (v1232 > v686)
                                                    {
                                                      uint64_t v687 = v1242 + 8 * v686;
                                                      if (v687 != v1252 && *(_DWORD *)(v687 + 4) == v637)
                                                      {
                                                        uint64_t v1212 = (void *)result[7];
                                                        uint64_t v1222 = v1212[4];
                                                        unint64_t v1202 = (v1212[5] - v1222) >> 3;
                                                        if (v638 < v1202)
                                                        {
                                                          uint64_t v688 = *(void *)(v1222 + 8 * v638);
                                                          if (v688)
                                                          {
                                                            unint64_t v689 = *(unsigned __int16 *)(v688 + 2 * v641);
                                                            uint64_t v1182 = v1212[7];
                                                            uint64_t v1192 = v1212[8];
                                                            unint64_t v1172 = (v1192 - v1182) >> 3;
                                                            if (v1172 > v689)
                                                            {
                                                              uint64_t v690 = v1182 + 8 * v689;
                                                              if (v690 != v1192
                                                                && *(_DWORD *)(v690 + 4) == v637)
                                                              {
                                                                uint64_t v1152 = (void *)result[8];
                                                                uint64_t v1162 = v1152[4];
                                                                unint64_t v1142 = (v1152[5] - v1162) >> 3;
                                                                if (v638 < v1142)
                                                                {
                                                                  uint64_t v691 = *(void *)(v1162 + 8 * v638);
                                                                  if (v691)
                                                                  {
                                                                    unint64_t v692 = *(unsigned __int16 *)(v691 + 2 * v641);
                                                                    uint64_t v1122 = v1152[7];
                                                                    uint64_t v1132 = v1152[8];
                                                                    unint64_t v1112 = (v1132 - v1122) >> 3;
                                                                    if (v1112 > v692)
                                                                    {
                                                                      uint64_t v693 = v1122 + 8 * v692;
                                                                      if (v693 != v1132
                                                                        && *(_DWORD *)(v693 + 4) == v637)
                                                                      {
                                                                        unint64_t v1092 = (void *)result[9];
                                                                        uint64_t v1102 = v1092[4];
                                                                        unint64_t v1082 = (v1092[5] - v1102) >> 3;
                                                                        if (v638 < v1082)
                                                                        {
                                                                          uint64_t v694 = *(void *)(v1102 + 8 * v638);
                                                                          if (v694)
                                                                          {
                                                                            unint64_t v695 = *(unsigned __int16 *)(v694 + 2 * v641);
                                                                            uint64_t v696 = v1092[7];
                                                                            uint64_t v697 = v1092[8];
                                                                            unint64_t v1073 = (v697 - v696) >> 3;
                                                                            if (v1073 > v695)
                                                                            {
                                                                              uint64_t v698 = v696 + 8 * v695;
                                                                              if (v698 != v697
                                                                                && *(_DWORD *)(v698 + 4) == v637)
                                                                              {
                                                                                uint64_t v1054 = result;
                                                                                uint64_t v1064 = v57;
                                                                                uint64_t v1036 = a2;
                                                                                uint64_t v1045 = v21;
                                                                                uint64_t v1029 = v56;
                                                                                unint64_t v699 = *(void *)v56;
                                                                                uint64_t v700 = HIDWORD(*(void *)v56);
                                                                                unint64_t v701 = *(void *)v56 >> 39;
                                                                                if (v701 < v659
                                                                                  && (uint64_t v702 = *(void *)(v658 + 8 * v701)) != 0
                                                                                  && (unint64_t v703 = *(unsigned __int16 *)(v702 + 2 * (HIDWORD(v699) & 0x7F)),
                                                                                      v664 > v703)
                                                                                  && (uint64_t v704 = v662 + 8 * v703,
                                                                                      v704 != v663)
                                                                                  && *(_DWORD *)(v704 + 4) == v700)
                                                                                {
                                                                                  unint64_t v705 = (long long *)(v657[10] + 80 * v703);
                                                                                }
                                                                                else
                                                                                {
                                                                                  unint64_t v705 = (long long *)v657[11];
                                                                                }
                                                                                if (v701 < v669
                                                                                  && (uint64_t v706 = *(void *)(v668 + 8 * v701)) != 0
                                                                                  && (unint64_t v707 = *(unsigned __int16 *)(v706 + 2 * (HIDWORD(v699) & 0x7F)),
                                                                                      v674 > v707)
                                                                                  && (uint64_t v708 = v673 + 8 * v707,
                                                                                      v708 != v672)
                                                                                  && *(_DWORD *)(v708 + 4) == v700)
                                                                                {
                                                                                  uint64_t v709 = v667[10] + 16 * v707;
                                                                                }
                                                                                else
                                                                                {
                                                                                  uint64_t v709 = v667[11];
                                                                                }
                                                                                if (v701 < v679
                                                                                  && (uint64_t v710 = *(void *)(v678 + 8 * v701)) != 0
                                                                                  && (unint64_t v711 = *(unsigned __int16 *)(v710 + 2 * (HIDWORD(v699) & 0x7F)),
                                                                                      v1292 > v711)
                                                                                  && (uint64_t v712 = v683 + 8 * v711,
                                                                                      v712 != v682)
                                                                                  && *(_DWORD *)(v712 + 4) == v700)
                                                                                {
                                                                                  unint64_t v713 = (long long *)(v677[10] + 24 * v711);
                                                                                }
                                                                                else
                                                                                {
                                                                                  unint64_t v713 = (long long *)v677[11];
                                                                                }
                                                                                if (v701 < v1262
                                                                                  && (uint64_t v714 = *(void *)(v1282 + 8 * v701)) != 0
                                                                                  && (unint64_t v715 = *(unsigned __int16 *)(v714 + 2 * (HIDWORD(v699) & 0x7F)),
                                                                                      v1232 > v715)
                                                                                  && (uint64_t v716 = v1242 + 8 * v715,
                                                                                      v716 != v1252)
                                                                                  && *(_DWORD *)(v716 + 4) == v700)
                                                                                {
                                                                                  unint64_t v717 = (arComponents::AlbedoTextureComponent *)(v1272[10] + 48 * v715);
                                                                                }
                                                                                else
                                                                                {
                                                                                  unint64_t v717 = (arComponents::AlbedoTextureComponent *)v1272[11];
                                                                                }
                                                                                if (v701 < v1202
                                                                                  && (uint64_t v718 = *(void *)(v1222 + 8 * v701)) != 0
                                                                                  && (unint64_t v719 = *(unsigned __int16 *)(v718 + 2 * (HIDWORD(v699) & 0x7F)),
                                                                                      v1172 > v719)
                                                                                  && (uint64_t v720 = v1182 + 8 * v719,
                                                                                      v720 != v1192)
                                                                                  && *(_DWORD *)(v720 + 4) == v700)
                                                                                {
                                                                                  unint64_t v721 = (uint64_t *)(v1212[10] + 8 * v719);
                                                                                }
                                                                                else
                                                                                {
                                                                                  unint64_t v721 = (uint64_t *)v1212[11];
                                                                                }
                                                                                if (v701 < v1142
                                                                                  && (uint64_t v722 = *(void *)(v1162 + 8 * v701)) != 0
                                                                                  && (unint64_t v723 = *(unsigned __int16 *)(v722 + 2 * (HIDWORD(v699) & 0x7F)),
                                                                                      v1112 > v723)
                                                                                  && (uint64_t v724 = v1122 + 8 * v723,
                                                                                      v724 != v1132)
                                                                                  && *(_DWORD *)(v724 + 4) == v700)
                                                                                {
                                                                                  unint64_t v725 = (long long *)(v1152[10] + 16 * v723);
                                                                                }
                                                                                else
                                                                                {
                                                                                  unint64_t v725 = (long long *)v1152[11];
                                                                                }
                                                                                if (v701 < v1082
                                                                                  && (uint64_t v726 = *(void *)(v1102 + 8 * v701)) != 0
                                                                                  && (unint64_t v727 = *(unsigned __int16 *)(v726 + 2 * (HIDWORD(v699) & 0x7F)),
                                                                                      v1073 > v727)
                                                                                  && (uint64_t v728 = v696 + 8 * v727,
                                                                                      v728 != v697)
                                                                                  && *(_DWORD *)(v728 + 4) == v700)
                                                                                {
                                                                                  unint64_t v635 = (int *)(v1092[10] + 4 * v727);
                                                                                }
                                                                                else
                                                                                {
                                                                                  unint64_t v635 = (int *)v1092[11];
                                                                                }
                                                                                md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v1296, v699, v705, *(void *)v709, *(std::__shared_weak_count **)(v709 + 8), v713, v717, v58, v721, v725, v635);
                                                                                uint64_t v21 = v1045;
                                                                                uint64_t result = v1054;
                                                                                uint64_t v56 = v1029;
                                                                                a2 = v1036;
                                                                                uint64_t v57 = v1064;
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v58;
        v56 += 8;
      }
      while (v56 != v57);
    }
  }
  uint64_t v34 = (void *)result[7];
  uint64_t v35 = v34 + 4;
  if (!v34) {
    uint64_t v35 = 0;
  }
  if (v35 == v21)
  {
    long long v1296 = *a2;
    uint64_t v1297 = *((void *)a2 + 2);
    uint64_t v60 = v34[7];
    uint64_t v59 = v34[8];
    if (v60 != v59)
    {
      unint64_t v61 = (uint64_t *)v34[10];
      do
      {
        uint64_t v731 = *result;
        unint64_t v732 = *(unsigned int *)(v60 + 4);
        unint64_t v733 = v732 >> 7;
        uint64_t v734 = *(void *)(*result + 32);
        if (v732 >> 7 < (*(void *)(*result + 40) - v734) >> 3)
        {
          uint64_t v735 = *(void *)(v734 + 8 * v733);
          if (v735)
          {
            uint64_t v736 = v732 & 0x7F;
            unint64_t v737 = *(unsigned __int16 *)(v735 + 2 * v736);
            uint64_t v740 = v731 + 56;
            uint64_t v738 = *(void *)(v731 + 56);
            uint64_t v739 = *(void *)(v740 + 8);
            if (v737 < (v739 - v738) >> 3)
            {
              uint64_t v741 = v738 + 8 * v737;
              if (v741 != v739 && *(_DWORD *)(v741 + 4) == v732)
              {
                uint64_t v743 = (void *)result[1];
                uint64_t v744 = v743[4];
                if (v733 < (v743[5] - v744) >> 3)
                {
                  uint64_t v745 = *(void *)(v744 + 8 * v733);
                  if (v745)
                  {
                    unint64_t v746 = *(unsigned __int16 *)(v745 + 2 * v736);
                    uint64_t v749 = v743 + 7;
                    uint64_t v747 = v743[7];
                    uint64_t v748 = v749[1];
                    if (v746 < (v748 - v747) >> 3)
                    {
                      uint64_t v750 = v747 + 8 * v746;
                      if (v750 != v748 && *(_DWORD *)(v750 + 4) == v732)
                      {
                        uint64_t v752 = (void *)result[2];
                        uint64_t v753 = v752[4];
                        unint64_t v754 = (v752[5] - v753) >> 3;
                        if (v733 < v754)
                        {
                          uint64_t v755 = *(void *)(v753 + 8 * v733);
                          if (v755)
                          {
                            unint64_t v756 = *(unsigned __int16 *)(v755 + 2 * v736);
                            uint64_t v757 = v752[7];
                            uint64_t v758 = v752[8];
                            unint64_t v759 = (v758 - v757) >> 3;
                            if (v759 > v756)
                            {
                              uint64_t v760 = v757 + 8 * v756;
                              if (v760 != v758 && *(_DWORD *)(v760 + 4) == v732)
                              {
                                unint64_t v762 = (void *)result[3];
                                uint64_t v763 = v762[4];
                                unint64_t v764 = (v762[5] - v763) >> 3;
                                if (v733 < v764)
                                {
                                  uint64_t v765 = *(void *)(v763 + 8 * v733);
                                  if (v765)
                                  {
                                    unint64_t v766 = *(unsigned __int16 *)(v765 + 2 * v736);
                                    uint64_t v768 = v762[7];
                                    uint64_t v767 = v762[8];
                                    unint64_t v769 = (v767 - v768) >> 3;
                                    if (v769 > v766)
                                    {
                                      uint64_t v770 = v768 + 8 * v766;
                                      if (v770 != v767 && *(_DWORD *)(v770 + 4) == v732)
                                      {
                                        unint64_t v772 = (void *)result[4];
                                        uint64_t v773 = v772[4];
                                        unint64_t v774 = (v772[5] - v773) >> 3;
                                        if (v733 < v774)
                                        {
                                          uint64_t v775 = *(void *)(v773 + 8 * v733);
                                          if (v775)
                                          {
                                            unint64_t v776 = *(unsigned __int16 *)(v775 + 2 * v736);
                                            uint64_t v778 = v772[7];
                                            uint64_t v777 = v772[8];
                                            unint64_t v1293 = (v777 - v778) >> 3;
                                            if (v1293 > v776)
                                            {
                                              uint64_t v779 = v778 + 8 * v776;
                                              if (v779 != v777 && *(_DWORD *)(v779 + 4) == v732)
                                              {
                                                unint64_t v1273 = (void *)result[5];
                                                uint64_t v1283 = v1273[4];
                                                unint64_t v1263 = (v1273[5] - v1283) >> 3;
                                                if (v733 < v1263)
                                                {
                                                  uint64_t v780 = *(void *)(v1283 + 8 * v733);
                                                  if (v780)
                                                  {
                                                    unint64_t v781 = *(unsigned __int16 *)(v780 + 2 * v736);
                                                    uint64_t v1243 = v1273[7];
                                                    uint64_t v1253 = v1273[8];
                                                    unint64_t v1233 = (v1253 - v1243) >> 3;
                                                    if (v1233 > v781)
                                                    {
                                                      uint64_t v782 = v1243 + 8 * v781;
                                                      if (v782 != v1253 && *(_DWORD *)(v782 + 4) == v732)
                                                      {
                                                        unint64_t v1213 = (void *)result[6];
                                                        uint64_t v1223 = v1213[4];
                                                        unint64_t v1203 = (v1213[5] - v1223) >> 3;
                                                        if (v733 < v1203)
                                                        {
                                                          uint64_t v783 = *(void *)(v1223 + 8 * v733);
                                                          if (v783)
                                                          {
                                                            unint64_t v784 = *(unsigned __int16 *)(v783 + 2 * v736);
                                                            uint64_t v1183 = v1213[7];
                                                            uint64_t v1193 = v1213[8];
                                                            unint64_t v1173 = (v1193 - v1183) >> 3;
                                                            if (v1173 > v784)
                                                            {
                                                              uint64_t v785 = v1183 + 8 * v784;
                                                              if (v785 != v1193
                                                                && *(_DWORD *)(v785 + 4) == v732)
                                                              {
                                                                unint64_t v1153 = (void *)result[8];
                                                                uint64_t v1163 = v1153[4];
                                                                unint64_t v1143 = (v1153[5] - v1163) >> 3;
                                                                if (v733 < v1143)
                                                                {
                                                                  uint64_t v786 = *(void *)(v1163 + 8 * v733);
                                                                  if (v786)
                                                                  {
                                                                    unint64_t v787 = *(unsigned __int16 *)(v786 + 2 * v736);
                                                                    uint64_t v1123 = v1153[7];
                                                                    uint64_t v1133 = v1153[8];
                                                                    unint64_t v1113 = (v1133 - v1123) >> 3;
                                                                    if (v1113 > v787)
                                                                    {
                                                                      uint64_t v788 = v1123 + 8 * v787;
                                                                      if (v788 != v1133
                                                                        && *(_DWORD *)(v788 + 4) == v732)
                                                                      {
                                                                        uint64_t v1093 = (void *)result[9];
                                                                        uint64_t v1103 = v1093[4];
                                                                        unint64_t v1083 = (v1093[5] - v1103) >> 3;
                                                                        if (v733 < v1083)
                                                                        {
                                                                          uint64_t v789 = *(void *)(v1103 + 8 * v733);
                                                                          if (v789)
                                                                          {
                                                                            unint64_t v790 = *(unsigned __int16 *)(v789 + 2 * v736);
                                                                            uint64_t v791 = v1093[7];
                                                                            uint64_t v792 = v1093[8];
                                                                            unint64_t v1074 = (v792 - v791) >> 3;
                                                                            if (v1074 > v790)
                                                                            {
                                                                              uint64_t v793 = v791 + 8 * v790;
                                                                              if (v793 != v792
                                                                                && *(_DWORD *)(v793 + 4) == v732)
                                                                              {
                                                                                uint64_t v1055 = result;
                                                                                uint64_t v1065 = v59;
                                                                                uint64_t v1037 = a2;
                                                                                unint64_t v1046 = v21;
                                                                                unint64_t v794 = *(void *)v60;
                                                                                uint64_t v795 = HIDWORD(*(void *)v60);
                                                                                unint64_t v796 = *(void *)v60 >> 39;
                                                                                if (v796 < v754
                                                                                  && (uint64_t v797 = *(void *)(v753 + 8 * v796)) != 0
                                                                                  && (unint64_t v798 = *(unsigned __int16 *)(v797 + 2 * (HIDWORD(v794) & 0x7F)),
                                                                                      v759 > v798)
                                                                                  && (uint64_t v799 = v757 + 8 * v798,
                                                                                      v799 != v758)
                                                                                  && *(_DWORD *)(v799 + 4) == v795)
                                                                                {
                                                                                  v800 = (long long *)(v752[10] + 80 * v798);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v800 = (long long *)v752[11];
                                                                                }
                                                                                if (v796 < v764
                                                                                  && (uint64_t v801 = *(void *)(v763 + 8 * v796)) != 0
                                                                                  && (unint64_t v802 = *(unsigned __int16 *)(v801 + 2 * (HIDWORD(v794) & 0x7F)),
                                                                                      v769 > v802)
                                                                                  && (uint64_t v803 = v768 + 8 * v802,
                                                                                      v803 != v767)
                                                                                  && *(_DWORD *)(v803 + 4) == v795)
                                                                                {
                                                                                  uint64_t v804 = v762[10] + 16 * v802;
                                                                                }
                                                                                else
                                                                                {
                                                                                  uint64_t v804 = v762[11];
                                                                                }
                                                                                if (v796 < v774
                                                                                  && (uint64_t v805 = *(void *)(v773 + 8 * v796)) != 0
                                                                                  && (unint64_t v806 = *(unsigned __int16 *)(v805 + 2 * (HIDWORD(v794) & 0x7F)),
                                                                                      v1293 > v806)
                                                                                  && (uint64_t v807 = v778 + 8 * v806,
                                                                                      v807 != v777)
                                                                                  && *(_DWORD *)(v807 + 4) == v795)
                                                                                {
                                                                                  v808 = (long long *)(v772[10] + 24 * v806);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v808 = (long long *)v772[11];
                                                                                }
                                                                                if (v796 < v1263
                                                                                  && (uint64_t v809 = *(void *)(v1283 + 8 * v796)) != 0
                                                                                  && (unint64_t v810 = *(unsigned __int16 *)(v809 + 2 * (HIDWORD(v794) & 0x7F)),
                                                                                      v1233 > v810)
                                                                                  && (uint64_t v811 = v1243 + 8 * v810,
                                                                                      v811 != v1253)
                                                                                  && *(_DWORD *)(v811 + 4) == v795)
                                                                                {
                                                                                  unint64_t v812 = (arComponents::AlbedoTextureComponent *)(v1273[10] + 48 * v810);
                                                                                }
                                                                                else
                                                                                {
                                                                                  unint64_t v812 = (arComponents::AlbedoTextureComponent *)v1273[11];
                                                                                }
                                                                                if (v796 < v1203
                                                                                  && (uint64_t v813 = *(void *)(v1223 + 8 * v796)) != 0
                                                                                  && (unint64_t v814 = *(unsigned __int16 *)(v813 + 2 * (HIDWORD(v794) & 0x7F)),
                                                                                      v1173 > v814)
                                                                                  && (uint64_t v815 = v1183 + 8 * v814,
                                                                                      v815 != v1193)
                                                                                  && *(_DWORD *)(v815 + 4) == v795)
                                                                                {
                                                                                  v816 = (long long *)(v1213[10] + 16 * v814);
                                                                                }
                                                                                else
                                                                                {
                                                                                  v816 = (long long *)v1213[11];
                                                                                }
                                                                                if (v796 < v1143
                                                                                  && (uint64_t v817 = *(void *)(v1163 + 8 * v796)) != 0
                                                                                  && (unint64_t v818 = *(unsigned __int16 *)(v817 + 2 * (HIDWORD(v794) & 0x7F)),
                                                                                      v1113 > v818)
                                                                                  && (uint64_t v819 = v1123 + 8 * v818,
                                                                                      v819 != v1133)
                                                                                  && *(_DWORD *)(v819 + 4) == v795)
                                                                                {
                                                                                  unint64_t v820 = (long long *)(v1153[10] + 16 * v818);
                                                                                }
                                                                                else
                                                                                {
                                                                                  unint64_t v820 = (long long *)v1153[11];
                                                                                }
                                                                                if (v796 < v1083
                                                                                  && (uint64_t v821 = *(void *)(v1103 + 8 * v796)) != 0
                                                                                  && (unint64_t v822 = *(unsigned __int16 *)(v821 + 2 * (HIDWORD(v794) & 0x7F)),
                                                                                      v1074 > v822)
                                                                                  && (uint64_t v823 = v791 + 8 * v822,
                                                                                      v823 != v792)
                                                                                  && *(_DWORD *)(v823 + 4) == v795)
                                                                                {
                                                                                  unint64_t v729 = (int *)(v1093[10] + 4 * v822);
                                                                                }
                                                                                else
                                                                                {
                                                                                  unint64_t v729 = (int *)v1093[11];
                                                                                }
                                                                                uint64_t v730 = v61;
                                                                                md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v1296, v794, v800, *(void *)v804, *(std::__shared_weak_count **)(v804 + 8), v808, v812, v816, v61, v820, v729);
                                                                                unint64_t v61 = v730;
                                                                                uint64_t v21 = v1046;
                                                                                uint64_t result = v1055;
                                                                                a2 = v1037;
                                                                                uint64_t v59 = v1065;
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v61;
        v60 += 8;
      }
      while (v60 != v59);
    }
  }
  uint64_t v36 = (void *)result[8];
  unint64_t v37 = v36 + 4;
  if (!v36) {
    unint64_t v37 = 0;
  }
  if (v37 == v21)
  {
    long long v1296 = *a2;
    uint64_t v1297 = *((void *)a2 + 2);
    uint64_t v63 = v36[7];
    uint64_t v62 = v36[8];
    if (v63 != v62)
    {
      uint64_t v64 = (long long *)v36[10];
      do
      {
        uint64_t v826 = *result;
        unint64_t v827 = *(unsigned int *)(v63 + 4);
        unint64_t v828 = v827 >> 7;
        uint64_t v829 = *(void *)(*result + 32);
        if (v827 >> 7 < (*(void *)(*result + 40) - v829) >> 3)
        {
          uint64_t v830 = *(void *)(v829 + 8 * v828);
          if (v830)
          {
            uint64_t v831 = v827 & 0x7F;
            unint64_t v832 = *(unsigned __int16 *)(v830 + 2 * v831);
            uint64_t v835 = v826 + 56;
            uint64_t v833 = *(void *)(v826 + 56);
            uint64_t v834 = *(void *)(v835 + 8);
            if (v832 < (v834 - v833) >> 3)
            {
              uint64_t v836 = v833 + 8 * v832;
              if (v836 != v834 && *(_DWORD *)(v836 + 4) == v827)
              {
                unint64_t v838 = (void *)result[1];
                uint64_t v839 = v838[4];
                if (v828 < (v838[5] - v839) >> 3)
                {
                  uint64_t v840 = *(void *)(v839 + 8 * v828);
                  if (v840)
                  {
                    unint64_t v841 = *(unsigned __int16 *)(v840 + 2 * v831);
                    uint64_t v844 = v838 + 7;
                    uint64_t v842 = v838[7];
                    uint64_t v843 = v844[1];
                    if (v841 < (v843 - v842) >> 3)
                    {
                      uint64_t v845 = v842 + 8 * v841;
                      if (v845 != v843 && *(_DWORD *)(v845 + 4) == v827)
                      {
                        unint64_t v847 = (void *)result[2];
                        uint64_t v848 = v847[4];
                        unint64_t v849 = (v847[5] - v848) >> 3;
                        if (v828 < v849)
                        {
                          uint64_t v850 = *(void *)(v848 + 8 * v828);
                          if (v850)
                          {
                            unint64_t v851 = *(unsigned __int16 *)(v850 + 2 * v831);
                            uint64_t v852 = v847[7];
                            uint64_t v853 = v847[8];
                            unint64_t v854 = (v853 - v852) >> 3;
                            if (v854 > v851)
                            {
                              uint64_t v855 = v852 + 8 * v851;
                              if (v855 != v853 && *(_DWORD *)(v855 + 4) == v827)
                              {
                                unint64_t v857 = (void *)result[3];
                                uint64_t v858 = v857[4];
                                unint64_t v859 = (v857[5] - v858) >> 3;
                                if (v828 < v859)
                                {
                                  uint64_t v860 = *(void *)(v858 + 8 * v828);
                                  if (v860)
                                  {
                                    unint64_t v861 = *(unsigned __int16 *)(v860 + 2 * v831);
                                    uint64_t v863 = v857[7];
                                    uint64_t v862 = v857[8];
                                    unint64_t v864 = (v862 - v863) >> 3;
                                    if (v864 > v861)
                                    {
                                      uint64_t v865 = v863 + 8 * v861;
                                      if (v865 != v862 && *(_DWORD *)(v865 + 4) == v827)
                                      {
                                        uint64_t v867 = (void *)result[4];
                                        uint64_t v868 = v867[4];
                                        unint64_t v869 = (v867[5] - v868) >> 3;
                                        if (v828 < v869)
                                        {
                                          uint64_t v870 = *(void *)(v868 + 8 * v828);
                                          if (v870)
                                          {
                                            unint64_t v871 = *(unsigned __int16 *)(v870 + 2 * v831);
                                            uint64_t v873 = v867[7];
                                            uint64_t v872 = v867[8];
                                            unint64_t v1294 = (v872 - v873) >> 3;
                                            if (v1294 > v871)
                                            {
                                              uint64_t v874 = v873 + 8 * v871;
                                              if (v874 != v872 && *(_DWORD *)(v874 + 4) == v827)
                                              {
                                                uint64_t v1274 = (void *)result[5];
                                                uint64_t v1284 = v1274[4];
                                                unint64_t v1264 = (v1274[5] - v1284) >> 3;
                                                if (v828 < v1264)
                                                {
                                                  uint64_t v875 = *(void *)(v1284 + 8 * v828);
                                                  if (v875)
                                                  {
                                                    unint64_t v876 = *(unsigned __int16 *)(v875 + 2 * v831);
                                                    uint64_t v1244 = v1274[7];
                                                    uint64_t v1254 = v1274[8];
                                                    unint64_t v1234 = (v1254 - v1244) >> 3;
                                                    if (v1234 > v876)
                                                    {
                                                      uint64_t v877 = v1244 + 8 * v876;
                                                      if (v877 != v1254 && *(_DWORD *)(v877 + 4) == v827)
                                                      {
                                                        uint64_t v1214 = (void *)result[6];
                                                        uint64_t v1224 = v1214[4];
                                                        unint64_t v1204 = (v1214[5] - v1224) >> 3;
                                                        if (v828 < v1204)
                                                        {
                                                          uint64_t v878 = *(void *)(v1224 + 8 * v828);
                                                          if (v878)
                                                          {
                                                            unint64_t v879 = *(unsigned __int16 *)(v878 + 2 * v831);
                                                            uint64_t v1184 = v1214[7];
                                                            uint64_t v1194 = v1214[8];
                                                            unint64_t v1174 = (v1194 - v1184) >> 3;
                                                            if (v1174 > v879)
                                                            {
                                                              uint64_t v880 = v1184 + 8 * v879;
                                                              if (v880 != v1194
                                                                && *(_DWORD *)(v880 + 4) == v827)
                                                              {
                                                                uint64_t v1154 = (void *)result[7];
                                                                uint64_t v1164 = v1154[4];
                                                                unint64_t v1144 = (v1154[5] - v1164) >> 3;
                                                                if (v828 < v1144)
                                                                {
                                                                  uint64_t v881 = *(void *)(v1164 + 8 * v828);
                                                                  if (v881)
                                                                  {
                                                                    unint64_t v882 = *(unsigned __int16 *)(v881 + 2 * v831);
                                                                    uint64_t v1124 = v1154[7];
                                                                    uint64_t v1134 = v1154[8];
                                                                    unint64_t v1114 = (v1134 - v1124) >> 3;
                                                                    if (v1114 > v882)
                                                                    {
                                                                      uint64_t v883 = v1124 + 8 * v882;
                                                                      if (v883 != v1134
                                                                        && *(_DWORD *)(v883 + 4) == v827)
                                                                      {
                                                                        v1094 = (void *)result[9];
                                                                        uint64_t v1104 = v1094[4];
                                                                        unint64_t v1084 = (v1094[5] - v1104) >> 3;
                                                                        if (v828 < v1084)
                                                                        {
                                                                          uint64_t v884 = *(void *)(v1104 + 8 * v828);
                                                                          if (v884)
                                                                          {
                                                                            unint64_t v885 = *(unsigned __int16 *)(v884 + 2 * v831);
                                                                            uint64_t v886 = v1094[7];
                                                                            uint64_t v887 = v1094[8];
                                                                            unint64_t v1075 = (v887 - v886) >> 3;
                                                                            if (v1075 > v885)
                                                                            {
                                                                              uint64_t v888 = v886 + 8 * v885;
                                                                              if (v888 != v887
                                                                                && *(_DWORD *)(v888 + 4) == v827)
                                                                              {
                                                                                uint64_t v1056 = result;
                                                                                uint64_t v1066 = v62;
                                                                                uint64_t v1038 = a2;
                                                                                uint64_t v1047 = v21;
                                                                                unint64_t v889 = *(void *)v63;
                                                                                uint64_t v890 = HIDWORD(*(void *)v63);
                                                                                unint64_t v891 = *(void *)v63 >> 39;
                                                                                if (v891 < v849
                                                                                  && (uint64_t v892 = *(void *)(v848 + 8 * v891)) != 0
                                                                                  && (unint64_t v893 = *(unsigned __int16 *)(v892 + 2 * (HIDWORD(v889) & 0x7F)),
                                                                                      v854 > v893)
                                                                                  && (uint64_t v894 = v852 + 8 * v893,
                                                                                      v894 != v853)
                                                                                  && *(_DWORD *)(v894 + 4) == v890)
                                                                                {
                                                                                  uint64_t v895 = (long long *)(v847[10] + 80 * v893);
                                                                                }
                                                                                else
                                                                                {
                                                                                  uint64_t v895 = (long long *)v847[11];
                                                                                }
                                                                                if (v891 < v859
                                                                                  && (uint64_t v896 = *(void *)(v858 + 8 * v891)) != 0
                                                                                  && (unint64_t v897 = *(unsigned __int16 *)(v896 + 2 * (HIDWORD(v889) & 0x7F)),
                                                                                      v864 > v897)
                                                                                  && (uint64_t v898 = v863 + 8 * v897,
                                                                                      v898 != v862)
                                                                                  && *(_DWORD *)(v898 + 4) == v890)
                                                                                {
                                                                                  uint64_t v899 = v857[10] + 16 * v897;
                                                                                }
                                                                                else
                                                                                {
                                                                                  uint64_t v899 = v857[11];
                                                                                }
                                                                                if (v891 < v869
                                                                                  && (uint64_t v900 = *(void *)(v868 + 8 * v891)) != 0
                                                                                  && (unint64_t v901 = *(unsigned __int16 *)(v900 + 2 * (HIDWORD(v889) & 0x7F)),
                                                                                      v1294 > v901)
                                                                                  && (uint64_t v902 = v873 + 8 * v901,
                                                                                      v902 != v872)
                                                                                  && *(_DWORD *)(v902 + 4) == v890)
                                                                                {
                                                                                  uint64_t v903 = (long long *)(v867[10] + 24 * v901);
                                                                                }
                                                                                else
                                                                                {
                                                                                  uint64_t v903 = (long long *)v867[11];
                                                                                }
                                                                                if (v891 < v1264
                                                                                  && (uint64_t v904 = *(void *)(v1284 + 8 * v891)) != 0
                                                                                  && (unint64_t v905 = *(unsigned __int16 *)(v904 + 2 * (HIDWORD(v889) & 0x7F)),
                                                                                      v1234 > v905)
                                                                                  && (uint64_t v906 = v1244 + 8 * v905,
                                                                                      v906 != v1254)
                                                                                  && *(_DWORD *)(v906 + 4) == v890)
                                                                                {
                                                                                  uint64_t v907 = (arComponents::AlbedoTextureComponent *)(v1274[10] + 48 * v905);
                                                                                }
                                                                                else
                                                                                {
                                                                                  uint64_t v907 = (arComponents::AlbedoTextureComponent *)v1274[11];
                                                                                }
                                                                                if (v891 < v1204
                                                                                  && (uint64_t v908 = *(void *)(v1224 + 8 * v891)) != 0
                                                                                  && (unint64_t v909 = *(unsigned __int16 *)(v908 + 2 * (HIDWORD(v889) & 0x7F)),
                                                                                      v1174 > v909)
                                                                                  && (uint64_t v910 = v1184 + 8 * v909,
                                                                                      v910 != v1194)
                                                                                  && *(_DWORD *)(v910 + 4) == v890)
                                                                                {
                                                                                  uint64_t v911 = (long long *)(v1214[10] + 16 * v909);
                                                                                }
                                                                                else
                                                                                {
                                                                                  uint64_t v911 = (long long *)v1214[11];
                                                                                }
                                                                                if (v891 < v1144
                                                                                  && (uint64_t v912 = *(void *)(v1164 + 8 * v891)) != 0
                                                                                  && (unint64_t v913 = *(unsigned __int16 *)(v912 + 2 * (HIDWORD(v889) & 0x7F)),
                                                                                      v1114 > v913)
                                                                                  && (uint64_t v914 = v1124 + 8 * v913,
                                                                                      v914 != v1134)
                                                                                  && *(_DWORD *)(v914 + 4) == v890)
                                                                                {
                                                                                  uint64_t v915 = (uint64_t *)(v1154[10] + 8 * v913);
                                                                                }
                                                                                else
                                                                                {
                                                                                  uint64_t v915 = (uint64_t *)v1154[11];
                                                                                }
                                                                                if (v891 < v1084
                                                                                  && (uint64_t v916 = *(void *)(v1104 + 8 * v891)) != 0
                                                                                  && (unint64_t v917 = *(unsigned __int16 *)(v916 + 2 * (HIDWORD(v889) & 0x7F)),
                                                                                      v1075 > v917)
                                                                                  && (uint64_t v918 = v886 + 8 * v917,
                                                                                      v918 != v887)
                                                                                  && *(_DWORD *)(v918 + 4) == v890)
                                                                                {
                                                                                  uint64_t v824 = (int *)(v1094[10] + 4 * v917);
                                                                                }
                                                                                else
                                                                                {
                                                                                  uint64_t v824 = (int *)v1094[11];
                                                                                }
                                                                                unint64_t v825 = v64;
                                                                                md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v1296, v889, v895, *(void *)v899, *(std::__shared_weak_count **)(v899 + 8), v903, v907, v911, v915, v64, v824);
                                                                                uint64_t v64 = v825;
                                                                                uint64_t v21 = v1047;
                                                                                uint64_t result = v1056;
                                                                                a2 = v1038;
                                                                                uint64_t v62 = v1066;
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v64;
        v63 += 8;
      }
      while (v63 != v62);
    }
  }
  uint64_t v38 = (void *)result[9];
  uint64_t v39 = v38 + 4;
  if (!v38) {
    uint64_t v39 = 0;
  }
  if (v39 == v21)
  {
    long long v1296 = *a2;
    uint64_t v1297 = *((void *)a2 + 2);
    uint64_t v66 = v38[7];
    uint64_t v65 = v38[8];
    if (v66 != v65)
    {
      uint64_t v67 = (int *)v38[10];
      do
      {
        uint64_t v921 = *result;
        unint64_t v922 = *(unsigned int *)(v66 + 4);
        unint64_t v923 = v922 >> 7;
        uint64_t v924 = *(void *)(*result + 32);
        if (v922 >> 7 < (*(void *)(*result + 40) - v924) >> 3)
        {
          uint64_t v925 = *(void *)(v924 + 8 * v923);
          if (v925)
          {
            uint64_t v926 = v922 & 0x7F;
            unint64_t v927 = *(unsigned __int16 *)(v925 + 2 * v926);
            uint64_t v930 = v921 + 56;
            uint64_t v928 = *(void *)(v921 + 56);
            uint64_t v929 = *(void *)(v930 + 8);
            if (v927 < (v929 - v928) >> 3)
            {
              uint64_t v931 = v928 + 8 * v927;
              if (v931 != v929 && *(_DWORD *)(v931 + 4) == v922)
              {
                unint64_t v933 = (void *)result[1];
                uint64_t v934 = v933[4];
                if (v923 < (v933[5] - v934) >> 3)
                {
                  uint64_t v935 = *(void *)(v934 + 8 * v923);
                  if (v935)
                  {
                    unint64_t v936 = *(unsigned __int16 *)(v935 + 2 * v926);
                    v939 = v933 + 7;
                    uint64_t v937 = v933[7];
                    uint64_t v938 = v939[1];
                    if (v936 < (v938 - v937) >> 3)
                    {
                      uint64_t v940 = v937 + 8 * v936;
                      if (v940 != v938 && *(_DWORD *)(v940 + 4) == v922)
                      {
                        uint64_t v942 = (void *)result[2];
                        uint64_t v943 = v942[4];
                        unint64_t v944 = (v942[5] - v943) >> 3;
                        if (v923 < v944)
                        {
                          uint64_t v945 = *(void *)(v943 + 8 * v923);
                          if (v945)
                          {
                            unint64_t v946 = *(unsigned __int16 *)(v945 + 2 * v926);
                            uint64_t v947 = v942[7];
                            uint64_t v948 = v942[8];
                            unint64_t v949 = (v948 - v947) >> 3;
                            if (v949 > v946)
                            {
                              uint64_t v950 = v947 + 8 * v946;
                              if (v950 != v948 && *(_DWORD *)(v950 + 4) == v922)
                              {
                                uint64_t v952 = (void *)result[3];
                                uint64_t v953 = v952[4];
                                unint64_t v954 = (v952[5] - v953) >> 3;
                                if (v923 < v954)
                                {
                                  uint64_t v955 = *(void *)(v953 + 8 * v923);
                                  if (v955)
                                  {
                                    unint64_t v956 = *(unsigned __int16 *)(v955 + 2 * v926);
                                    uint64_t v957 = v952[7];
                                    uint64_t v958 = v952[8];
                                    unint64_t v959 = (v958 - v957) >> 3;
                                    if (v959 > v956)
                                    {
                                      uint64_t v960 = v957 + 8 * v956;
                                      if (v960 != v958 && *(_DWORD *)(v960 + 4) == v922)
                                      {
                                        uint64_t v962 = (void *)result[4];
                                        uint64_t v963 = v962[4];
                                        unint64_t v964 = (v962[5] - v963) >> 3;
                                        if (v923 < v964)
                                        {
                                          uint64_t v965 = *(void *)(v963 + 8 * v923);
                                          if (v965)
                                          {
                                            unint64_t v966 = *(unsigned __int16 *)(v965 + 2 * v926);
                                            uint64_t v967 = v962[7];
                                            uint64_t v968 = v962[8];
                                            unint64_t v969 = (v968 - v967) >> 3;
                                            if (v969 > v966)
                                            {
                                              uint64_t v970 = v967 + 8 * v966;
                                              if (v970 != v968 && *(_DWORD *)(v970 + 4) == v922)
                                              {
                                                unint64_t v971 = (void *)result[5];
                                                unint64_t v1285 = (uint64_t)(v971[5] - v971[4]) >> 3;
                                                uint64_t v1295 = v971[4];
                                                if (v923 < v1285)
                                                {
                                                  uint64_t v972 = *(void *)(v1295 + 8 * v923);
                                                  if (v972)
                                                  {
                                                    unint64_t v973 = *(unsigned __int16 *)(v972 + 2 * v926);
                                                    uint64_t v1265 = v971[7];
                                                    uint64_t v1275 = v971[8];
                                                    unint64_t v1255 = (v1275 - v1265) >> 3;
                                                    if (v1255 > v973)
                                                    {
                                                      uint64_t v974 = v1265 + 8 * v973;
                                                      if (v974 != v1275 && *(_DWORD *)(v974 + 4) == v922)
                                                      {
                                                        uint64_t v1235 = (void *)result[6];
                                                        uint64_t v1245 = v1235[4];
                                                        unint64_t v1225 = (v1235[5] - v1245) >> 3;
                                                        if (v923 < v1225)
                                                        {
                                                          uint64_t v975 = *(void *)(v1245 + 8 * v923);
                                                          if (v975)
                                                          {
                                                            unint64_t v976 = *(unsigned __int16 *)(v975 + 2 * v926);
                                                            uint64_t v1205 = v1235[7];
                                                            uint64_t v1215 = v1235[8];
                                                            unint64_t v1195 = (v1215 - v1205) >> 3;
                                                            if (v1195 > v976)
                                                            {
                                                              uint64_t v977 = v1205 + 8 * v976;
                                                              if (v977 != v1215
                                                                && *(_DWORD *)(v977 + 4) == v922)
                                                              {
                                                                v1175 = (void *)result[7];
                                                                uint64_t v1185 = v1175[4];
                                                                unint64_t v1165 = (v1175[5] - v1185) >> 3;
                                                                if (v923 < v1165)
                                                                {
                                                                  uint64_t v978 = *(void *)(v1185 + 8 * v923);
                                                                  if (v978)
                                                                  {
                                                                    unint64_t v979 = *(unsigned __int16 *)(v978 + 2 * v926);
                                                                    uint64_t v1145 = v1175[7];
                                                                    uint64_t v1155 = v1175[8];
                                                                    unint64_t v1135 = (v1155 - v1145) >> 3;
                                                                    if (v1135 > v979)
                                                                    {
                                                                      uint64_t v980 = v1145 + 8 * v979;
                                                                      if (v980 != v1155
                                                                        && *(_DWORD *)(v980 + 4) == v922)
                                                                      {
                                                                        unint64_t v1115 = (void *)result[8];
                                                                        uint64_t v1125 = v1115[4];
                                                                        unint64_t v1105 = (v1115[5] - v1125) >> 3;
                                                                        if (v923 < v1105)
                                                                        {
                                                                          uint64_t v981 = *(void *)(v1125 + 8 * v923);
                                                                          if (v981)
                                                                          {
                                                                            unint64_t v982 = *(unsigned __int16 *)(v981 + 2 * v926);
                                                                            uint64_t v984 = v1115[7];
                                                                            uint64_t v983 = v1115[8];
                                                                            unint64_t v1095 = (v983 - v984) >> 3;
                                                                            if (v1095 > v982)
                                                                            {
                                                                              uint64_t v985 = v984 + 8 * v982;
                                                                              if (v985 != v983
                                                                                && *(_DWORD *)(v985 + 4) == v922)
                                                                              {
                                                                                uint64_t v1085 = v65;
                                                                                v1057 = result;
                                                                                unint64_t v986 = *(void *)v66;
                                                                                uint64_t v987 = HIDWORD(*(void *)v66);
                                                                                unint64_t v988 = *(void *)v66 >> 39;
                                                                                if (v988 < v944
                                                                                  && (uint64_t v989 = *(void *)(v943 + 8 * v988)) != 0
                                                                                  && (unint64_t v990 = *(unsigned __int16 *)(v989 + 2 * (HIDWORD(v986) & 0x7F)),
                                                                                      v949 > v990)
                                                                                  && (uint64_t v991 = v947 + 8 * v990,
                                                                                      v991 != v948)
                                                                                  && *(_DWORD *)(v991 + 4) == v987)
                                                                                {
                                                                                  uint64_t v992 = (long long *)(v942[10] + 80 * v990);
                                                                                }
                                                                                else
                                                                                {
                                                                                  uint64_t v992 = (long long *)v942[11];
                                                                                }
                                                                                if (v988 < v954
                                                                                  && (uint64_t v993 = *(void *)(v953 + 8 * v988)) != 0
                                                                                  && (unint64_t v994 = *(unsigned __int16 *)(v993 + 2 * (HIDWORD(v986) & 0x7F)),
                                                                                      v959 > v994)
                                                                                  && (uint64_t v995 = v957 + 8 * v994,
                                                                                      v995 != v958)
                                                                                  && *(_DWORD *)(v995 + 4) == v987)
                                                                                {
                                                                                  uint64_t v996 = v952[10] + 16 * v994;
                                                                                }
                                                                                else
                                                                                {
                                                                                  uint64_t v996 = v952[11];
                                                                                }
                                                                                if (v988 < v964
                                                                                  && (uint64_t v997 = *(void *)(v963 + 8 * v988)) != 0
                                                                                  && (unint64_t v998 = *(unsigned __int16 *)(v997 + 2 * (HIDWORD(v986) & 0x7F)),
                                                                                      v969 > v998)
                                                                                  && (uint64_t v999 = v967 + 8 * v998,
                                                                                      v999 != v968)
                                                                                  && *(_DWORD *)(v999 + 4) == v987)
                                                                                {
                                                                                  unint64_t v1000 = (long long *)(v962[10] + 24 * v998);
                                                                                }
                                                                                else
                                                                                {
                                                                                  unint64_t v1000 = (long long *)v962[11];
                                                                                }
                                                                                if (v988 < v1285
                                                                                  && (uint64_t v1001 = *(void *)(v1295 + 8 * v988)) != 0
                                                                                  && (unint64_t v1002 = *(unsigned __int16 *)(v1001 + 2 * (HIDWORD(v986) & 0x7F)),
                                                                                      v1255 > v1002)
                                                                                  && (uint64_t v1003 = v1265 + 8 * v1002,
                                                                                      v1003 != v1275)
                                                                                  && *(_DWORD *)(v1003 + 4) == v987)
                                                                                {
                                                                                  unint64_t v1004 = (arComponents::AlbedoTextureComponent *)(v971[10] + 48 * v1002);
                                                                                }
                                                                                else
                                                                                {
                                                                                  unint64_t v1004 = (arComponents::AlbedoTextureComponent *)v971[11];
                                                                                }
                                                                                if (v988 < v1225
                                                                                  && (uint64_t v1005 = *(void *)(v1245 + 8 * v988)) != 0
                                                                                  && (unint64_t v1006 = *(unsigned __int16 *)(v1005 + 2 * (HIDWORD(v986) & 0x7F)),
                                                                                      v1195 > v1006)
                                                                                  && (uint64_t v1007 = v1205 + 8 * v1006,
                                                                                      v1007 != v1215)
                                                                                  && *(_DWORD *)(v1007 + 4) == v987)
                                                                                {
                                                                                  unint64_t v1008 = (long long *)(v1235[10] + 16 * v1006);
                                                                                }
                                                                                else
                                                                                {
                                                                                  unint64_t v1008 = (long long *)v1235[11];
                                                                                }
                                                                                if (v988 < v1165
                                                                                  && (uint64_t v1009 = *(void *)(v1185 + 8 * v988)) != 0
                                                                                  && (unint64_t v1010 = *(unsigned __int16 *)(v1009 + 2 * (HIDWORD(v986) & 0x7F)),
                                                                                      v1135 > v1010)
                                                                                  && (uint64_t v1011 = v1145 + 8 * v1010,
                                                                                      v1011 != v1155)
                                                                                  && *(_DWORD *)(v1011 + 4) == v987)
                                                                                {
                                                                                  unint64_t v1012 = (uint64_t *)(v1175[10] + 8 * v1010);
                                                                                }
                                                                                else
                                                                                {
                                                                                  unint64_t v1012 = (uint64_t *)v1175[11];
                                                                                }
                                                                                if (v988 < v1105
                                                                                  && (uint64_t v1013 = *(void *)(v1125 + 8 * v988)) != 0
                                                                                  && (unint64_t v1014 = *(unsigned __int16 *)(v1013 + 2 * (HIDWORD(v986) & 0x7F)),
                                                                                      v1095 > v1014)
                                                                                  && (uint64_t v1015 = v984 + 8 * v1014,
                                                                                      v1015 != v983)
                                                                                  && *(_DWORD *)(v1015 + 4) == v987)
                                                                                {
                                                                                  uint64_t v919 = (long long *)(v1115[10] + 16 * v1014);
                                                                                }
                                                                                else
                                                                                {
                                                                                  uint64_t v919 = (long long *)v1115[11];
                                                                                }
                                                                                v920 = v67;
                                                                                md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()((uint64_t *)&v1296, v986, v992, *(void *)v996, *(std::__shared_weak_count **)(v996 + 8), v1000, v1004, v1008, v1012, v919, v67);
                                                                                uint64_t v67 = v920;
                                                                                uint64_t result = v1057;
                                                                                uint64_t v65 = v1085;
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v67;
        v66 += 8;
      }
      while (v66 != v65);
    }
  }
  return result;
}

void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::VisibilityAlpha&)#1}::operator()(uint64_t *a1, unint64_t a2, long long *a3, uint64_t a4, std::__shared_weak_count *a5, long long *a6, int *a7)
{
  long long v38 = *a3;
  uint64_t v39 = *((void *)a3 + 2);
  long long v40 = *(long long *)((char *)a3 + 24);
  uint64_t v41 = *((void *)a3 + 5);
  uint64_t v9 = *((void *)a3 + 6);
  long long v42 = *(long long *)((char *)a3 + 56);
  uint64_t v43 = *((void *)a3 + 9);
  uint64_t v44 = 0;
  if (a5)
  {
    atomic_fetch_add_explicit(&a5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v44 = a5;
  }
  long long v45 = *a6;
  uint64_t v46 = *((void *)a6 + 2);
  int v10 = *a7;
  uint64_t v11 = *a1;
  long long v51 = v38;
  long long v53 = v40;
  uint64_t v52 = v39;
  uint64_t v54 = v41;
  uint64_t v55 = v9;
  long long v56 = v42;
  uint64_t v57 = v43;
  uint64_t v50 = 0;
  if (a5)
  {
    atomic_fetch_add_explicit(&a5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v50 = a5;
  }
  uint64_t v49 = a4;
  long long v47 = v45;
  uint64_t v48 = v46;
  int v58 = v10;
  uint64_t v12 = *(void *)(v11 + 24);
  if (!v12)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, long long *, uint64_t *, long long *, int *))(*(void *)v12 + 48))(v12, &v51, &v49, &v47, &v58);
  uint64_t v14 = v50;
  if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = a1[1];
  uint64_t v17 = *(uint64_t **)(v15 + 8);
  unint64_t v16 = *(void *)(v15 + 16);
  if ((unint64_t)v17 < v16)
  {
    *uint64_t v17 = v13;
    uint64_t v18 = v17 + 1;
    goto LABEL_32;
  }
  uint64_t v19 = *(uint64_t **)v15;
  uint64_t v20 = (uint64_t)v17 - *(void *)v15;
  uint64_t v21 = v20 >> 3;
  unint64_t v22 = (v20 >> 3) + 1;
  if (v22 >> 61) {
    abort();
  }
  uint64_t v23 = v16 - (void)v19;
  if (v23 >> 2 > v22) {
    unint64_t v22 = v23 >> 2;
  }
  if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v24 = v22;
  }
  if (!v24)
  {
    uint64_t v25 = 0;
    goto LABEL_21;
  }
  if (v24 >> 61) {
LABEL_38:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint64_t v25 = operator new(8 * v24);
LABEL_21:
  uint64_t v26 = (uint64_t *)&v25[8 * v21];
  uint64_t v27 = &v25[8 * v24];
  *uint64_t v26 = v13;
  uint64_t v18 = v26 + 1;
  if (v17 == v19)
  {
    uint64_t v19 = v17;
  }
  else
  {
    unint64_t v28 = (char *)v17 - (char *)v19 - 8;
    if (v28 < 0x58) {
      goto LABEL_41;
    }
    if ((unint64_t)((char *)v17 - v25 - v20) < 0x20) {
      goto LABEL_41;
    }
    uint64_t v29 = (v28 >> 3) + 1;
    uint64_t v30 = &v25[8 * v21 - 16];
    uint64_t v31 = v17 - 2;
    uint64_t v32 = v29 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v33 = *(_OWORD *)v31;
      *(v30 - 1) = *((_OWORD *)v31 - 1);
      *uint64_t v30 = v33;
      v30 -= 2;
      v31 -= 4;
      v32 -= 4;
    }
    while (v32);
    v26 -= v29 & 0x3FFFFFFFFFFFFFFCLL;
    v17 -= v29 & 0x3FFFFFFFFFFFFFFCLL;
    if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_41:
      do
      {
        uint64_t v34 = *--v17;
        *--uint64_t v26 = v34;
      }
      while (v17 != v19);
      uint64_t v19 = *(uint64_t **)v15;
    }
  }
  *(void *)uint64_t v15 = v26;
  *(void *)(v15 + 8) = v18;
  *(void *)(v15 + 16) = v27;
  if (v19) {
    operator delete(v19);
  }
LABEL_32:
  *(void *)(v15 + 8) = v18;
  uint64_t v35 = (void *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(*(int8x8_t **)a1[2]);
  gdc::ComponentStorageWrapper<arComponents::TransitionToRenderRegistry>::remove(v35, a2);
  uint64_t v36 = *(int8x8_t **)a1[2];
  *(void *)&long long v51 = v13;
  unint64_t v37 = (void *)gdc::Registry::storage<arComponents::CopiedEntity>(v36);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v37, a2, &v51);
  if (v44)
  {
    if (!atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
}

void sub_1A26596DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()(uint64_t *a1, unint64_t a2, long long *a3, uint64_t a4, std::__shared_weak_count *a5, long long *a6, long long *a7, int *a8)
{
  long long v39 = *a3;
  uint64_t v40 = *((void *)a3 + 2);
  long long v41 = *(long long *)((char *)a3 + 24);
  uint64_t v42 = *((void *)a3 + 5);
  uint64_t v10 = *((void *)a3 + 6);
  long long v43 = *(long long *)((char *)a3 + 56);
  uint64_t v44 = *((void *)a3 + 9);
  long long v45 = 0;
  if (a5)
  {
    atomic_fetch_add_explicit(&a5->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v45 = a5;
  }
  long long v46 = *a6;
  uint64_t v47 = *((void *)a6 + 2);
  long long v48 = *a7;
  int v11 = *a8;
  uint64_t v12 = *a1;
  long long v54 = v39;
  long long v56 = v41;
  uint64_t v55 = v40;
  uint64_t v57 = v42;
  uint64_t v58 = v10;
  long long v59 = v43;
  uint64_t v60 = v44;
  long long v53 = 0;
  if (a5)
  {
    atomic_fetch_add_explicit(&a5->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v53 = a5;
  }
  uint64_t v52 = a4;
  uint64_t v51 = v47;
  long long v49 = v48;
  long long v50 = v46;
  int v61 = v11;
  uint64_t v13 = *(void *)(v12 + 24);
  if (!v13)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, long long *, uint64_t *, long long *, long long *, int *))(*(void *)v13 + 48))(v13, &v54, &v52, &v50, &v49, &v61);
  uint64_t v15 = v53;
  if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = a1[1];
  uint64_t v18 = *(uint64_t **)(v16 + 8);
  unint64_t v17 = *(void *)(v16 + 16);
  if ((unint64_t)v18 < v17)
  {
    uint64_t *v18 = v14;
    uint64_t v19 = v18 + 1;
    goto LABEL_32;
  }
  uint64_t v20 = *(uint64_t **)v16;
  uint64_t v21 = (uint64_t)v18 - *(void *)v16;
  uint64_t v22 = v21 >> 3;
  unint64_t v23 = (v21 >> 3) + 1;
  if (v23 >> 61) {
    abort();
  }
  uint64_t v24 = v17 - (void)v20;
  if (v24 >> 2 > v23) {
    unint64_t v23 = v24 >> 2;
  }
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v25 = v23;
  }
  if (!v25)
  {
    uint64_t v26 = 0;
    goto LABEL_21;
  }
  if (v25 >> 61) {
LABEL_38:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint64_t v26 = operator new(8 * v25);
LABEL_21:
  uint64_t v27 = (uint64_t *)&v26[8 * v22];
  unint64_t v28 = &v26[8 * v25];
  *uint64_t v27 = v14;
  uint64_t v19 = v27 + 1;
  if (v18 == v20)
  {
    uint64_t v20 = v18;
  }
  else
  {
    unint64_t v29 = (char *)v18 - (char *)v20 - 8;
    if (v29 < 0x58) {
      goto LABEL_41;
    }
    if ((unint64_t)((char *)v18 - v26 - v21) < 0x20) {
      goto LABEL_41;
    }
    uint64_t v30 = (v29 >> 3) + 1;
    uint64_t v31 = &v26[8 * v22 - 16];
    uint64_t v32 = v18 - 2;
    uint64_t v33 = v30 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v34 = *(_OWORD *)v32;
      *(v31 - 1) = *((_OWORD *)v32 - 1);
      *uint64_t v31 = v34;
      v31 -= 2;
      v32 -= 4;
      v33 -= 4;
    }
    while (v33);
    v27 -= v30 & 0x3FFFFFFFFFFFFFFCLL;
    v18 -= v30 & 0x3FFFFFFFFFFFFFFCLL;
    if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_41:
      do
      {
        uint64_t v35 = *--v18;
        *--uint64_t v27 = v35;
      }
      while (v18 != v20);
      uint64_t v20 = *(uint64_t **)v16;
    }
  }
  *(void *)uint64_t v16 = v27;
  *(void *)(v16 + 8) = v19;
  *(void *)(v16 + 16) = v28;
  if (v20) {
    operator delete(v20);
  }
LABEL_32:
  *(void *)(v16 + 8) = v19;
  uint64_t v36 = (void *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(*(int8x8_t **)a1[2]);
  gdc::ComponentStorageWrapper<arComponents::TransitionToRenderRegistry>::remove(v36, a2);
  unint64_t v37 = *(int8x8_t **)a1[2];
  *(void *)&long long v54 = v14;
  long long v38 = (void *)gdc::Registry::storage<arComponents::CopiedEntity>(v37);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v38, a2, &v54);
  if (v45)
  {
    if (!atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
}

void sub_1A2659AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshDataComponent&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::Boundary&,arComponents::StyleColor&)#1}::operator()(uint64_t *a1, unint64_t a2, long long *a3, uint64_t a4, arComponents::AlbedoTextureComponent *a5, long long *a6, uint64_t *a7, long long *a8, long long *a9)
{
  long long v42 = *a3;
  uint64_t v43 = *((void *)a3 + 2);
  long long v44 = *(long long *)((char *)a3 + 24);
  uint64_t v45 = *((void *)a3 + 5);
  uint64_t v46 = *((void *)a3 + 6);
  long long v47 = *(long long *)((char *)a3 + 56);
  uint64_t v48 = *((void *)a3 + 9);
  arComponents::AlbedoTextureComponent::AlbedoTextureComponent((arComponents::AlbedoTextureComponent *)v50, a5);
  long long v54 = *a6;
  uint64_t v55 = *a7;
  long long v56 = *a8;
  uint64_t v57 = *((void *)a8 + 2);
  long long v58 = *a9;
  uint64_t v14 = *a1;
  long long v67 = v42;
  long long v69 = v44;
  uint64_t v68 = v43;
  uint64_t v70 = v45;
  uint64_t v71 = v46;
  uint64_t v73 = v48;
  long long v72 = v47;
  uint64_t v66 = a4;
  arComponents::AlbedoTextureComponent::AlbedoTextureComponent((arComponents::AlbedoTextureComponent *)v62, (const arComponents::AlbedoTextureComponent *)v50);
  uint64_t v61 = v57;
  long long v59 = v58;
  long long v60 = v56;
  long long v75 = v54;
  uint64_t v74 = v55;
  uint64_t v15 = *(void *)(v14 + 24);
  if (!v15)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t, long long *, uint64_t *, unsigned char *, long long *, uint64_t *, long long *, long long *))(*(void *)v15 + 48))(v15, &v67, &v66, v62, &v75, &v74, &v60, &v59);
  uint64_t v64 = &unk_1EF559EB8;

  unint64_t v17 = v63;
  if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  uint64_t v18 = a1[1];
  uint64_t v20 = *(uint64_t **)(v18 + 8);
  unint64_t v19 = *(void *)(v18 + 16);
  if ((unint64_t)v20 < v19)
  {
    *uint64_t v20 = v16;
    uint64_t v21 = v20 + 1;
    goto LABEL_28;
  }
  uint64_t v22 = *(uint64_t **)v18;
  uint64_t v23 = (uint64_t)v20 - *(void *)v18;
  uint64_t v24 = v23 >> 3;
  unint64_t v25 = (v23 >> 3) + 1;
  if (v25 >> 61) {
    abort();
  }
  uint64_t v26 = v19 - (void)v22;
  if (v26 >> 2 > v25) {
    unint64_t v25 = v26 >> 2;
  }
  if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v27 = v25;
  }
  if (!v27)
  {
    unint64_t v28 = 0;
    goto LABEL_17;
  }
  if (v27 >> 61) {
LABEL_34:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  unint64_t v28 = operator new(8 * v27);
LABEL_17:
  unint64_t v29 = (uint64_t *)&v28[8 * v24];
  uint64_t v30 = &v28[8 * v27];
  *unint64_t v29 = v16;
  uint64_t v21 = v29 + 1;
  if (v20 == v22)
  {
    uint64_t v22 = v20;
  }
  else
  {
    unint64_t v31 = (char *)v20 - (char *)v22 - 8;
    if (v31 < 0x58) {
      goto LABEL_37;
    }
    if ((unint64_t)((char *)v20 - v28 - v23) < 0x20) {
      goto LABEL_37;
    }
    uint64_t v32 = (v31 >> 3) + 1;
    uint64_t v33 = &v28[8 * v24 - 16];
    long long v34 = v20 - 2;
    uint64_t v35 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v36 = *(_OWORD *)v34;
      *(v33 - 1) = *((_OWORD *)v34 - 1);
      *uint64_t v33 = v36;
      v33 -= 2;
      v34 -= 4;
      v35 -= 4;
    }
    while (v35);
    v29 -= v32 & 0x3FFFFFFFFFFFFFFCLL;
    v20 -= v32 & 0x3FFFFFFFFFFFFFFCLL;
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_37:
      do
      {
        uint64_t v37 = *--v20;
        *--unint64_t v29 = v37;
      }
      while (v20 != v22);
      uint64_t v22 = *(uint64_t **)v18;
    }
  }
  *(void *)uint64_t v18 = v29;
  *(void *)(v18 + 8) = v21;
  *(void *)(v18 + 16) = v30;
  if (v22) {
    operator delete(v22);
  }
LABEL_28:
  *(void *)(v18 + 8) = v21;
  long long v38 = (void *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(*(int8x8_t **)a1[2]);
  gdc::ComponentStorageWrapper<arComponents::TransitionToRenderRegistry>::remove(v38, a2);
  long long v39 = *(int8x8_t **)a1[2];
  *(void *)&long long v67 = v16;
  uint64_t v40 = (void *)gdc::Registry::storage<arComponents::CopiedEntity>(v39);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v40, a2, &v67);
  uint64_t v52 = &unk_1EF559EB8;

  long long v41 = v51;
  if (v51)
  {
    if (!atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
}

void sub_1A2659F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void md::ECSHelpers::copyComponentsWithoutPipeline<arComponents::TransitionToRenderRegistry,arComponents::AREnvironmentProbeTexture>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::AREnvironmentProbeTexture&)#1}::operator()(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  id v6 = *(id *)a3;
  long long v36 = v6;
  uint64_t v8 = *(void **)(a3 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a3 + 16);
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v37 = v7;
    uint64_t v9 = *a1;
    v38[0] = v6;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v37 = 0;
    uint64_t v9 = *a1;
    v38[0] = v6;
  }
  v38[1] = v8;
  long long v39 = v7;
  uint64_t v10 = *(void *)(v9 + 24);
  if (!v10)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    goto LABEL_37;
  }
  int v11 = (void *)(*(uint64_t (**)(uint64_t, id *))(*(void *)v10 + 48))(v10, v38);
  uint64_t v12 = v39;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }

  uint64_t v13 = a1[1];
  uint64_t v15 = *(void **)(v13 + 8);
  unint64_t v14 = *(void *)(v13 + 16);
  if ((unint64_t)v15 < v14)
  {
    void *v15 = v11;
    uint64_t v16 = v15 + 1;
    goto LABEL_31;
  }
  unint64_t v17 = *(unsigned char **)v13;
  uint64_t v18 = (uint64_t)v15 - *(void *)v13;
  uint64_t v19 = v18 >> 3;
  unint64_t v20 = (v18 >> 3) + 1;
  if (v20 >> 61) {
    abort();
  }
  uint64_t v21 = v14 - (void)v17;
  if (v21 >> 2 > v20) {
    unint64_t v20 = v21 >> 2;
  }
  if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v22 = v20;
  }
  if (!v22)
  {
    uint64_t v23 = 0;
    goto LABEL_20;
  }
  if (v22 >> 61) {
LABEL_37:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint64_t v23 = operator new(8 * v22);
LABEL_20:
  uint64_t v24 = &v23[8 * v19];
  unint64_t v25 = &v23[8 * v22];
  *uint64_t v24 = v11;
  uint64_t v16 = v24 + 1;
  if (v15 == (void *)v17)
  {
    unint64_t v17 = v15;
  }
  else
  {
    unint64_t v26 = (char *)v15 - v17 - 8;
    if (v26 < 0x58) {
      goto LABEL_40;
    }
    if ((unint64_t)((char *)v15 - v23 - v18) < 0x20) {
      goto LABEL_40;
    }
    uint64_t v27 = (v26 >> 3) + 1;
    unint64_t v28 = &v23[8 * v19 - 16];
    unint64_t v29 = (long long *)(v15 - 2);
    uint64_t v30 = v27 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v31 = *v29;
      *(v28 - 1) = *(v29 - 1);
      *unint64_t v28 = v31;
      v28 -= 2;
      v29 -= 2;
      v30 -= 4;
    }
    while (v30);
    v24 -= v27 & 0x3FFFFFFFFFFFFFFCLL;
    v15 -= v27 & 0x3FFFFFFFFFFFFFFCLL;
    if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_40:
      do
      {
        uint64_t v32 = *--v15;
        *--uint64_t v24 = v32;
      }
      while (v15 != (void *)v17);
      unint64_t v17 = *(unsigned char **)v13;
    }
  }
  *(void *)uint64_t v13 = v24;
  *(void *)(v13 + 8) = v16;
  *(void *)(v13 + 16) = v25;
  if (v17) {
    operator delete(v17);
  }
LABEL_31:
  *(void *)(v13 + 8) = v16;
  uint64_t v33 = (void *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(*(int8x8_t **)a1[2]);
  gdc::ComponentStorageWrapper<arComponents::TransitionToRenderRegistry>::remove(v33, a2);
  long long v34 = *(int8x8_t **)a1[2];
  v38[0] = v11;
  uint64_t v35 = (void *)gdc::Registry::storage<arComponents::CopiedEntity>(v34);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v35, a2, v38);
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
}

void sub_1A265A220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void md::ECSHelpers::updateTagComponent<arComponents::IsVisible>(int8x8_t *a1, int8x8_t *a2, char a3)
{
  long long v67 = a2;
  uint64_t v68 = a1;
  id v6 = (void *)gdc::Registry::storage<arComponents::CopiedEntity>(a1);
  uint64_t v7 = v6;
  if (a3)
  {
    uint64_t v8 = (unint64_t *)v6[7];
    uint64_t v9 = (unint64_t *)v6[8];
    if (v8 != v9)
    {
      for (uint64_t i = (unint64_t *)v6[10]; ; ++i)
      {
        unint64_t v14 = *v8;
        uint64_t v15 = (void *)gdc::Registry::storage<arComponents::IsVisible>(a1);
        uint64_t v16 = v15[4];
        if (v14 >> 39 >= (v15[5] - v16) >> 3) {
          break;
        }
        uint64_t v17 = *(void *)(v16 + 8 * (v14 >> 39));
        if (!v17) {
          break;
        }
        unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v14) & 0x7F));
        uint64_t v19 = v15[7];
        uint64_t v20 = v15[8];
        if (v18 >= (v20 - v19) >> 3) {
          goto LABEL_13;
        }
        uint64_t v21 = v19 + 8 * v18;
        if (*(_DWORD *)(v21 + 4) == HIDWORD(v14)) {
          uint64_t v22 = v21;
        }
        else {
          uint64_t v22 = v15[8];
        }
LABEL_14:
        unint64_t v23 = *i;
        uint64_t v24 = (void *)gdc::Registry::storage<arComponents::IsVisible>(a2);
        uint64_t v25 = v24[4];
        if (v23 >> 39 < (v24[5] - v25) >> 3 && (uint64_t v26 = *(void *)(v25 + 8 * (v23 >> 39))) != 0)
        {
          unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v23) & 0x7F));
          uint64_t v29 = v24[7];
          uint64_t v28 = v24[8];
          if (v27 < (v28 - v29) >> 3)
          {
            uint64_t v30 = v29 + 8 * v27;
            if (*(_DWORD *)(v30 + 4) != HIDWORD(v23)) {
              uint64_t v30 = v24[8];
            }
            goto LABEL_22;
          }
        }
        else
        {
          uint64_t v28 = v24[8];
        }
        uint64_t v30 = v28;
LABEL_22:
        if (v22 != v20 && v30 == v28)
        {
          uint64_t v11 = *i;
          uint64_t v12 = (void *)gdc::Registry::storage<arComponents::IsVisible>(a2);
          gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v12, v11);
        }
        else if (v22 == v20 && v30 != v28)
        {
          uint64_t v32 = (void *)gdc::Registry::storage<arComponents::IsVisible>(a2);
          gdc::ComponentStorageWrapper<arComponents::IsVisible>::remove(v32, *i);
        }
        uint64_t v13 = (void *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::IsVisible>>(a1);
        gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::IsVisible>>::remove(v13, v14);
        if (++v8 == v9) {
          return;
        }
      }
      uint64_t v20 = v15[8];
LABEL_13:
      uint64_t v22 = v20;
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v33 = gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::IsVisible>>(a1);
    long long v34 = (void *)v33;
    uint64_t v35 = v33 + 32;
    uint64_t v37 = v7[7];
    uint64_t v36 = v7[8];
    if (*(void *)(v33 + 64) - *(void *)(v33 + 56) >= (unint64_t)(v36 - v37)) {
      long long v38 = v7 + 4;
    }
    else {
      long long v38 = (void *)(v33 + 32);
    }
    if (v7 + 4 == v38)
    {
      long long v69 = &v68;
      uint64_t v70 = &v67;
      if (v37 != v36)
      {
        long long v39 = (unint64_t *)v7[10];
        do
        {
          unint64_t v40 = *(unsigned int *)(v37 + 4);
          uint64_t v41 = v34[4];
          if (v40 >> 7 < (v34[5] - v41) >> 3)
          {
            uint64_t v42 = *(void *)(v41 + 8 * (v40 >> 7));
            if (v42)
            {
              unint64_t v43 = *(unsigned __int16 *)(v42 + 2 * (v40 & 0x7F));
              uint64_t v45 = v34[7];
              uint64_t v44 = v34[8];
              if (v43 < (v44 - v45) >> 3)
              {
                uint64_t v46 = v45 + 8 * v43;
                if (v46 != v44 && *(_DWORD *)(v46 + 4) == v40) {
                  md::ECSHelpers::updateTagComponent<arComponents::IsVisible>(gdc::Registry *,gdc::Registry *,BOOL)::{lambda(gdc::Entity,arComponents::CopiedEntity &)#1}::operator()(&v69, *(void *)v37, v39);
                }
              }
            }
          }
          ++v39;
          v37 += 8;
        }
        while (v37 != v36);
      }
    }
    if ((void *)v35 == v38)
    {
      long long v69 = &v68;
      uint64_t v70 = &v67;
      uint64_t v49 = v34[7];
      uint64_t v48 = v34[8];
      while (v49 != v48)
      {
        unint64_t v51 = *(unsigned int *)(v49 + 4);
        uint64_t v52 = v7[4];
        unint64_t v53 = (v7[5] - v52) >> 3;
        if (v51 >> 7 < v53)
        {
          uint64_t v54 = *(void *)(v52 + 8 * (v51 >> 7));
          if (v54)
          {
            unint64_t v55 = *(unsigned __int16 *)(v54 + 2 * (v51 & 0x7F));
            uint64_t v57 = v7[7];
            uint64_t v56 = v7[8];
            unint64_t v58 = (v56 - v57) >> 3;
            if (v58 > v55)
            {
              uint64_t v59 = v57 + 8 * v55;
              if (v59 != v56 && *(_DWORD *)(v59 + 4) == v51)
              {
                unint64_t v61 = *(void *)v49;
                unint64_t v62 = *(void *)v49 >> 39;
                if (v62 < v53
                  && (uint64_t v63 = *(void *)(v52 + 8 * v62)) != 0
                  && (unint64_t v64 = *(unsigned __int16 *)(v63 + 2 * (HIDWORD(v61) & 0x7F)), v58 > v64)
                  && ((uint64_t v65 = v57 + 8 * v64, v65 != v56) ? (v66 = *(_DWORD *)(v65 + 4) == HIDWORD(v61)) : (v66 = 0), v66))
                {
                  long long v50 = (unint64_t *)(v7[10] + 8 * v64);
                }
                else
                {
                  long long v50 = (unint64_t *)v7[11];
                }
                md::ECSHelpers::updateTagComponent<arComponents::IsVisible>(gdc::Registry *,gdc::Registry *,BOOL)::{lambda(gdc::Entity,arComponents::CopiedEntity &)#1}::operator()(&v69, v61, v50);
              }
            }
          }
        }
        v49 += 8;
      }
    }
  }
}

uint64_t gdc::Registry::storage<arComponents::CopiedEntity>(int8x8_t *a1)
{
  uint64_t v10 = 0x3DAC51DBC96F761DLL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x3DAC51DBC96F761DLL;
    if (*(void *)&v1 <= 0x3DAC51DBC96F761DuLL) {
      uint64_t v3 = 0x3DAC51DBC96F761DuLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x3DAC51DBC96F761DLL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x3DAC51DBC96F761DLL)
      {
        if (v5[2] == 0x3DAC51DBC96F761DLL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x3DAC51DBC96F761DLL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x3DAC51DBC96F761DLL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A265A7F8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::QueuedForDeletionAfterLayout>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  unint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    unint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::StyleColor>>();
}

uint64_t gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::StyleColor>>(int8x8_t *a1)
{
  unint64_t v10 = 0xE0C3110899EA91FELL;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    unint64_t v3 = 0xE0C3110899EA91FELL;
    if (*(void *)&v1 <= 0xE0C3110899EA91FELL) {
      unint64_t v3 = 0xE0C3110899EA91FELL % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v3 = (*(void *)&v1 - 1) & 0xE0C3110899EA91FELL;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0xE0C3110899EA91FELL)
      {
        if (v5[2] == 0xE0C3110899EA91FELL) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0xE0C3110899EA91FELL) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0xE0C3110899EA91FELL) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A265AB60(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::StyleColor>>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  unint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  unint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v20, v21);
    unint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::StyleColor>>::contains(v17, v18);
}

BOOL gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::StyleColor>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::StyleColor>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::QueuedForDeletionAfterLayout>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::QueuedForDeletionAfterLayout>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<arComponents::CopiedEntity>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::CopiedEntity>::remove(void *a1, unint64_t a2)
{
  unint64_t v18 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  *(void *)(v14 + 8 * v7) = *(void *)(a1[11] - 8);
  a1[11] -= 8;
  uint64_t v15 = (void *)a1[28];
  if (!v15) {
    return 1;
  }
  uint64_t v16 = a1[31];
  while (1)
  {
    v20[0] = &v18;
    v20[1] = 1;
    uint64_t v19 = v16;
    uint64_t v17 = v15[6];
    if (!v17) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v17 + 48))(v17, &v19, v20);
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::CopiedEntity>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::CopiedEntity>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void md::ECSHelpers::updateTagComponent<arComponents::IsVisible>(gdc::Registry *,gdc::Registry *,BOOL)::{lambda(gdc::Entity,arComponents::CopiedEntity &)#1}::operator()(int8x8_t ***a1, unint64_t a2, unint64_t *a3)
{
  uint64_t v6 = (void *)gdc::Registry::storage<arComponents::IsVisible>(**a1);
  uint64_t v7 = v6[4];
  if (a2 >> 39 >= (v6[5] - v7) >> 3 || (uint64_t v8 = *(void *)(v7 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v11 = v6[8];
    goto LABEL_8;
  }
  unint64_t v9 = *(unsigned __int16 *)(v8 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v10 = v6[7];
  uint64_t v11 = v6[8];
  if (v9 >= (v11 - v10) >> 3)
  {
LABEL_8:
    uint64_t v13 = v11;
    goto LABEL_9;
  }
  uint64_t v12 = v10 + 8 * v9;
  if (*(_DWORD *)(v12 + 4) == HIDWORD(a2)) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = v6[8];
  }
LABEL_9:
  unint64_t v14 = *a3;
  uint64_t v15 = (void *)gdc::Registry::storage<arComponents::IsVisible>(*a1[1]);
  uint64_t v16 = v15[4];
  if (v14 >> 39 >= (v15[5] - v16) >> 3 || (uint64_t v17 = *(void *)(v16 + 8 * (v14 >> 39))) == 0)
  {
    uint64_t v19 = v15[8];
    goto LABEL_16;
  }
  unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * (HIDWORD(v14) & 0x7F));
  uint64_t v20 = v15[7];
  uint64_t v19 = v15[8];
  if (v18 >= (v19 - v20) >> 3)
  {
LABEL_16:
    uint64_t v21 = v19;
    goto LABEL_17;
  }
  uint64_t v21 = v20 + 8 * v18;
  if (*(_DWORD *)(v21 + 4) != HIDWORD(v14)) {
    uint64_t v21 = v15[8];
  }
LABEL_17:
  if (v13 != v11 && v21 == v19)
  {
    uint64_t v25 = *a3;
    uint64_t v26 = (void *)gdc::Registry::storage<arComponents::IsVisible>(*a1[1]);
    gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v26, v25);
  }
  else if (v13 == v11 && v21 != v19)
  {
    uint64_t v24 = (void *)gdc::Registry::storage<arComponents::IsVisible>(*a1[1]);
    gdc::ComponentStorageWrapper<arComponents::IsVisible>::remove(v24, *a3);
  }
  unint64_t v27 = (void *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::IsVisible>>(**a1);
  gdc::ComponentStorageWrapper<arComponents::RequiresUpdateInRenderLayer<arComponents::IsVisible>>::remove(v27, a2);
}

void std::__function::__func<void md::ECSHelpers::copyComponentsWithoutPipeline<arComponents::TransitionToRenderRegistry,arComponents::AREnvironmentProbeTexture>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::AREnvironmentProbeTexture)#1},std::allocator<void md::ECSHelpers::copyComponentsWithoutPipeline<arComponents::TransitionToRenderRegistry,arComponents::AREnvironmentProbeTexture>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::AREnvironmentProbeTexture)#1}>,gdc::Entity ()(arComponents::AREnvironmentProbeTexture)>::operator()(uint64_t a1, uint64_t a2)
{
  id v6 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = v4;
  uint64_t v8 = v5;
  gdc::Registry::create(**(gdc::Registry ***)(a1 + 8));
}

void sub_1A265B1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  if (v10)
  {
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void md::ECSHelpers::copyComponentsWithoutPipeline<arComponents::TransitionToRenderRegistry,arComponents::AREnvironmentProbeTexture>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::AREnvironmentProbeTexture)#1},std::allocator<void md::ECSHelpers::copyComponentsWithoutPipeline<arComponents::TransitionToRenderRegistry,arComponents::AREnvironmentProbeTexture>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::AREnvironmentProbeTexture)#1}>,gdc::Entity ()(arComponents::AREnvironmentProbeTexture)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56D2D8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<void md::ECSHelpers::copyComponentsWithoutPipeline<arComponents::TransitionToRenderRegistry,arComponents::AREnvironmentProbeTexture>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::AREnvironmentProbeTexture)#1},std::allocator<void md::ECSHelpers::copyComponentsWithoutPipeline<arComponents::TransitionToRenderRegistry,arComponents::AREnvironmentProbeTexture>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::AREnvironmentProbeTexture)#1}>,gdc::Entity ()(arComponents::AREnvironmentProbeTexture)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF56D2D8;
  result[1] = v3;
  return result;
}

void std::__function::__func<void md::ECSHelpers::copyComponentsWithoutPipeline<arComponents::TransitionToRenderRegistry,arComponents::AREnvironmentProbeTexture>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::AREnvironmentProbeTexture)#1},std::allocator<void md::ECSHelpers::copyComponentsWithoutPipeline<arComponents::TransitionToRenderRegistry,arComponents::AREnvironmentProbeTexture>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::AREnvironmentProbeTexture)#1}>,gdc::Entity ()(arComponents::AREnvironmentProbeTexture)>::~__func()
{
}

uint64_t std::tuple<arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>::~tuple(uint64_t a1)
{
  *(void *)(a1 + 112) = &unk_1EF559EB8;

  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor)>::operator()(uint64_t a1, long long *a2, uint64_t *a3, arComponents::AlbedoTextureComponent *a4, long long *a5, uint64_t *a6, long long *a7, long long *a8)
{
  uint64_t v13 = *a3;
  long long v23 = *a2;
  uint64_t v24 = *((void *)a2 + 2);
  long long v25 = *(long long *)((char *)a2 + 24);
  uint64_t v26 = *((void *)a2 + 5);
  uint64_t v27 = *((void *)a2 + 6);
  uint64_t v29 = *((void *)a2 + 9);
  long long v28 = *(long long *)((char *)a2 + 56);
  uint64_t v22 = v13;
  arComponents::AlbedoTextureComponent::AlbedoTextureComponent((arComponents::AlbedoTextureComponent *)v21, a4);
  long long v14 = *a5;
  uint64_t v15 = *a6;
  long long v16 = *a7;
  uint64_t v20 = *((void *)a7 + 2);
  long long v18 = *a8;
  long long v19 = v16;
  uint64_t v17 = **(gdc::Registry ***)(a1 + 8);
  long long v31 = v14;
  uint64_t v30 = v15;
  gdc::Registry::create(v17);
}

void sub_1A265B520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void *a18)
{
  if (a16)
  {
    if (!atomic_fetch_add(&a16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56D248;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF56D248;
  result[1] = v3;
  return result;
}

void std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshDataComponent,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::Boundary,arComponents::StyleColor)>::~__func()
{
}

uint64_t std::tuple<arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>::~tuple(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha)>::operator()(uint64_t a1, long long *a2, uint64_t *a3, long long *a4, long long *a5, int *a6)
{
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  long long v15 = *a2;
  uint64_t v16 = *((void *)a2 + 2);
  long long v17 = *(long long *)((char *)a2 + 24);
  uint64_t v18 = *((void *)a2 + 5);
  uint64_t v19 = *((void *)a2 + 6);
  uint64_t v21 = *((void *)a2 + 9);
  long long v20 = *(long long *)((char *)a2 + 56);
  uint64_t v14 = 0;
  if (v7)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    uint64_t v14 = v7;
  }
  uint64_t v13 = v6;
  long long v8 = *a4;
  uint64_t v12 = *((void *)a4 + 2);
  long long v10 = *a5;
  long long v11 = v8;
  unint64_t v9 = **(gdc::Registry ***)(a1 + 8);
  int v22 = *a6;
  gdc::Registry::create(v9);
}

void sub_1A265B814(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56D1B8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF56D1B8;
  result[1] = v3;
  return result;
}

void std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::ShadowPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::StyleColor,arComponents::VisibilityAlpha)>::~__func()
{
}

void std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha)>::operator()(uint64_t a1, long long *a2, uint64_t *a3, long long *a4, int *a5)
{
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  long long v12 = *a2;
  uint64_t v13 = *((void *)a2 + 2);
  long long v14 = *(long long *)((char *)a2 + 24);
  uint64_t v15 = *((void *)a2 + 5);
  uint64_t v16 = *((void *)a2 + 6);
  long long v17 = *(long long *)((char *)a2 + 56);
  uint64_t v18 = *((void *)a2 + 9);
  uint64_t v11 = 0;
  if (v6)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    uint64_t v11 = v6;
  }
  uint64_t v10 = v5;
  long long v8 = *a4;
  uint64_t v9 = *((void *)a4 + 2);
  uint64_t v7 = **(gdc::Registry ***)(a1 + 8);
  int v19 = *a5;
  gdc::Registry::create(v7);
}

void sub_1A265BA58(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56D290;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF56D290;
  result[1] = v3;
  return result;
}

void std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::OcclusionPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::VisibilityAlpha)>::~__func()
{
}

void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(gdc::Entity,arComponents::WorldTransform&,arComponents::MeshComponent&,arComponents::Boundary&,arComponents::AlbedoTextureComponent&,arComponents::AlbedoTextureUVMapping&,arComponents::AlbedoTextureUVScale&,arComponents::StyleColor&,arComponents::VisibilityAlpha&)#1}::operator()(uint64_t *a1, unint64_t a2, long long *a3, uint64_t a4, std::__shared_weak_count *a5, long long *a6, arComponents::AlbedoTextureComponent *a7, long long *a8, uint64_t *a9, long long *a10, int *a11)
{
  long long v43 = *a3;
  uint64_t v44 = *((void *)a3 + 2);
  long long v45 = *(long long *)((char *)a3 + 24);
  uint64_t v46 = *((void *)a3 + 5);
  uint64_t v47 = *((void *)a3 + 6);
  long long v48 = *(long long *)((char *)a3 + 56);
  uint64_t v49 = *((void *)a3 + 9);
  unint64_t v51 = 0;
  if (a5)
  {
    atomic_fetch_add_explicit(&a5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v50 = a4;
    unint64_t v51 = a5;
  }
  else
  {
    uint64_t v50 = a4;
  }
  long long v52 = *a6;
  uint64_t v53 = *((void *)a6 + 2);
  arComponents::AlbedoTextureComponent::AlbedoTextureComponent((arComponents::AlbedoTextureComponent *)v54, a7);
  long long v58 = *a8;
  uint64_t v59 = *a9;
  long long v60 = *a10;
  int v61 = *a11;
  uint64_t v14 = *a1;
  long long v71 = v43;
  long long v73 = v45;
  uint64_t v72 = v44;
  uint64_t v74 = v46;
  uint64_t v75 = v47;
  long long v76 = v48;
  uint64_t v77 = v49;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  if (v51)
  {
    atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v70 = v51;
  }
  uint64_t v69 = v50;
  long long v67 = v52;
  uint64_t v68 = v53;
  arComponents::AlbedoTextureComponent::AlbedoTextureComponent((arComponents::AlbedoTextureComponent *)v63, (const arComponents::AlbedoTextureComponent *)v54);
  long long v62 = v60;
  long long v80 = v58;
  uint64_t v79 = v59;
  int v78 = v61;
  uint64_t v15 = *(void *)(v14 + 24);
  if (!v15)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t, long long *, uint64_t *, long long *, unsigned char *, long long *, uint64_t *, long long *, int *))(*(void *)v15 + 48))(v15, &v71, &v69, &v67, v63, &v80, &v79, &v62, &v78);
  uint64_t v65 = &unk_1EF559EB8;

  long long v17 = v64;
  if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  uint64_t v18 = v70;
  if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  int v19 = (uint64_t **)a1[1];
  uint64_t v21 = v19[1];
  unint64_t v20 = (unint64_t)v19[2];
  if ((unint64_t)v21 < v20)
  {
    uint64_t *v21 = v16;
    int v22 = v21 + 1;
    goto LABEL_35;
  }
  long long v23 = *v19;
  uint64_t v24 = (char *)v21 - (char *)*v19;
  uint64_t v25 = v24 >> 3;
  unint64_t v26 = (v24 >> 3) + 1;
  if (v26 >> 61) {
    abort();
  }
  uint64_t v27 = v20 - (void)v23;
  if (v27 >> 2 > v26) {
    unint64_t v26 = v27 >> 2;
  }
  if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v28 = v26;
  }
  if (!v28)
  {
    uint64_t v29 = 0;
    goto LABEL_25;
  }
  if (v28 >> 61) {
LABEL_44:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint64_t v29 = operator new(8 * v28);
LABEL_25:
  uint64_t v30 = (uint64_t *)&v29[8 * v25];
  long long v31 = (uint64_t *)&v29[8 * v28];
  *uint64_t v30 = v16;
  int v22 = v30 + 1;
  if (v21 != v23)
  {
    unint64_t v32 = (char *)v21 - (char *)v23 - 8;
    if (v32 < 0x58) {
      goto LABEL_47;
    }
    if ((unint64_t)((char *)v21 - v29 - v24) < 0x20) {
      goto LABEL_47;
    }
    uint64_t v33 = (v32 >> 3) + 1;
    long long v34 = &v29[8 * v25 - 16];
    uint64_t v35 = v21 - 2;
    uint64_t v36 = v33 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      _OWORD *v34 = v37;
      v34 -= 2;
      v35 -= 4;
      v36 -= 4;
    }
    while (v36);
    v30 -= v33 & 0x3FFFFFFFFFFFFFFCLL;
    v21 -= v33 & 0x3FFFFFFFFFFFFFFCLL;
    if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_47:
      do
      {
        uint64_t v38 = *--v21;
        *--uint64_t v30 = v38;
      }
      while (v21 != v23);
    }
    uint64_t v21 = *v19;
  }
  void *v19 = v30;
  v19[1] = v22;
  void v19[2] = v31;
  if (v21) {
    operator delete(v21);
  }
LABEL_35:
  v19[1] = v22;
  long long v39 = (void *)gdc::Registry::storage<arComponents::TransitionToRenderRegistry>(*(int8x8_t **)a1[2]);
  gdc::ComponentStorageWrapper<arComponents::TransitionToRenderRegistry>::remove(v39, a2);
  unint64_t v40 = *(int8x8_t **)a1[2];
  *(void *)&long long v71 = v16;
  uint64_t v41 = (void *)gdc::Registry::storage<arComponents::CopiedEntity>(v40);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v41, a2, &v71);
  uint64_t v56 = &unk_1EF559EB8;

  uint64_t v42 = v55;
  if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  if (v51)
  {
    if (!atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
}

void sub_1A265C008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v3 - 208);
  std::tuple<arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>::~tuple((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::tuple<arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>::~tuple(uint64_t a1)
{
  *(void *)(a1 + 144) = &unk_1EF559EB8;

  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 136);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 88);
    if (!v3) {
      return a1;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 88);
    if (!v3) {
      return a1;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha)>::operator()(uint64_t a1, long long *a2, uint64_t *a3, long long *a4, arComponents::AlbedoTextureComponent *a5, long long *a6, uint64_t *a7, long long *a8, int *a9)
{
  uint64_t v13 = *a3;
  uint64_t v14 = a3[1];
  long long v27 = *a2;
  uint64_t v15 = *((void *)a2 + 2);
  long long v29 = *(long long *)((char *)a2 + 24);
  uint64_t v16 = *((void *)a2 + 5);
  uint64_t v28 = v15;
  uint64_t v30 = v16;
  uint64_t v31 = *((void *)a2 + 6);
  uint64_t v33 = *((void *)a2 + 9);
  long long v32 = *(long long *)((char *)a2 + 56);
  uint64_t v26 = 0;
  if (v14)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    uint64_t v26 = v14;
  }
  uint64_t v25 = v13;
  long long v23 = *a4;
  uint64_t v24 = *((void *)a4 + 2);
  arComponents::AlbedoTextureComponent::AlbedoTextureComponent((arComponents::AlbedoTextureComponent *)v22, a5);
  long long v17 = *a6;
  uint64_t v18 = *a7;
  long long v21 = *a8;
  int v19 = *a9;
  unint64_t v20 = **(gdc::Registry ***)(a1 + 8);
  long long v36 = v17;
  uint64_t v35 = v18;
  int v34 = v19;
  gdc::Registry::create(v20);
}

void sub_1A265C3F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22)
  {
    if (!atomic_fetch_add(&a22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a22->__on_zero_shared)(a22);
      std::__shared_weak_count::__release_weak(a22);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56D200;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF56D200;
  result[1] = v3;
  return result;
}

void std::__function::__func<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha)#1},std::allocator<void md::ECSHelpers::copyComponents<arComponents::TransitionToRenderRegistry,arComponents::StandardPipeline,arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha>(gdc::Registry *,gdc::Registry *,std::vector<gdc::Entity> &)::{lambda(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha)#1}>,gdc::Entity ()(arComponents::WorldTransform,arComponents::MeshComponent,arComponents::Boundary,arComponents::AlbedoTextureComponent,arComponents::AlbedoTextureUVMapping,arComponents::AlbedoTextureUVScale,arComponents::StyleColor,arComponents::VisibilityAlpha)>::~__func()
{
}

uint64_t md::Logic<md::ARRenderEntityGenerationLogic,md::ARRenderEntityGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::ARRenderEntityGenerationLogic,md::ARRenderEntityGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0x51AAE9259E4A5431 && (uint64_t v4 = *(void *)(a3 + 32)) != 0)
  {
    uint64_t v6 = result;
    md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>(v7, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

void *md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>(void *result, uint64_t a2, unint64_t a3)
{
  if (!a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    goto LABEL_117;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v4 = 0x37F8C546A65FE3EELL;
    if (a3 <= 0x37F8C546A65FE3EELL) {
      uint64_t v4 = 0x37F8C546A65FE3EELL % a3;
    }
  }
  else
  {
    uint64_t v4 = (a3 - 1) & 0x37F8C546A65FE3EELL;
  }
  uint64_t v9 = *(void **)(a2 + 8 * v4);
  if (!v9) {
    goto LABEL_25;
  }
  uint64_t v10 = (void *)*v9;
  if (!v10) {
    goto LABEL_25;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v12 = v10[1];
      if (v12 == 0x37F8C546A65FE3EELL)
      {
        if (v10[2] == 0x37F8C546A65FE3EELL) {
          goto LABEL_23;
        }
      }
      else if ((v12 & (a3 - 1)) != v4)
      {
        goto LABEL_25;
      }
      uint64_t v10 = (void *)*v10;
      if (!v10) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v10[1];
    if (v11 == 0x37F8C546A65FE3EELL) {
      break;
    }
    if (v11 >= a3) {
      v11 %= a3;
    }
    if (v11 != v4) {
      goto LABEL_25;
    }
LABEL_12:
    uint64_t v10 = (void *)*v10;
    if (!v10) {
      goto LABEL_25;
    }
  }
  if (v10[2] != 0x37F8C546A65FE3EELL) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v13 = v10[5];
  if (*(void *)(v13 + 8) == 0x37F8C546A65FE3EELL)
  {
    uint64_t v7 = *(void *)(v13 + 32);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v7 = 0;
LABEL_26:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v14 = 0xA822B3A972ECE7CDLL;
    if (a3 <= 0xA822B3A972ECE7CDLL) {
      unint64_t v14 = 0xA822B3A972ECE7CDLL % a3;
    }
  }
  else
  {
    unint64_t v14 = (a3 - 1) & 0xA822B3A972ECE7CDLL;
  }
  uint64_t v15 = *(void **)(a2 + 8 * v14);
  if (!v15) {
    goto LABEL_48;
  }
  uint64_t v16 = (void *)*v15;
  if (!v16) {
    goto LABEL_48;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v18 = v16[1];
      if (v18 == 0xA822B3A972ECE7CDLL)
      {
        if (v16[2] == 0xA822B3A972ECE7CDLL) {
          goto LABEL_46;
        }
      }
      else if ((v18 & (a3 - 1)) != v14)
      {
        goto LABEL_48;
      }
      uint64_t v16 = (void *)*v16;
      if (!v16) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v17 = v16[1];
    if (v17 != 0xA822B3A972ECE7CDLL)
    {
      if (v17 >= a3) {
        v17 %= a3;
      }
      if (v17 != v14) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }
    if (v16[2] != 0xA822B3A972ECE7CDLL)
    {
LABEL_35:
      uint64_t v16 = (void *)*v16;
      if (!v16) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v19 = v16[5];
  if (*(void *)(v19 + 8) == 0xA822B3A972ECE7CDLL)
  {
    uint64_t v6 = *(void *)(v19 + 32);
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v6 = 0;
LABEL_49:
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v20 = 0x3C394DB2AC35C8;
    if (a3 <= 0x3C394DB2AC35C8) {
      uint64_t v20 = 0x3C394DB2AC35C8 % a3;
    }
  }
  else
  {
    uint64_t v20 = (a3 - 1) & 0x3C394DB2AC35C8;
  }
  long long v21 = *(void **)(a2 + 8 * v20);
  if (!v21) {
    goto LABEL_71;
  }
  int v22 = (void *)*v21;
  if (!v22) {
    goto LABEL_71;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v24 = v22[1];
      if (v24 == 0x3C394DB2AC35C8)
      {
        if (v22[2] == 0x3C394DB2AC35C8) {
          goto LABEL_69;
        }
      }
      else if ((v24 & (a3 - 1)) != v20)
      {
        goto LABEL_71;
      }
      int v22 = (void *)*v22;
      if (!v22) {
        goto LABEL_71;
      }
    }
  }
  while (2)
  {
    unint64_t v23 = v22[1];
    if (v23 != 0x3C394DB2AC35C8)
    {
      if (v23 >= a3) {
        v23 %= a3;
      }
      if (v23 != v20) {
        goto LABEL_71;
      }
      goto LABEL_58;
    }
    if (v22[2] != 0x3C394DB2AC35C8)
    {
LABEL_58:
      int v22 = (void *)*v22;
      if (!v22) {
        goto LABEL_71;
      }
      continue;
    }
    break;
  }
LABEL_69:
  uint64_t v25 = v22[5];
  if (*(void *)(v25 + 8) == 0x3C394DB2AC35C8)
  {
    uint64_t v8 = *(void *)(v25 + 32);
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v8 = 0;
LABEL_72:
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v26 = 0xF409241CDA31AF08;
    if (a3 <= 0xF409241CDA31AF08) {
      unint64_t v26 = 0xF409241CDA31AF08 % a3;
    }
  }
  else
  {
    unint64_t v26 = (a3 - 1) & 0xF409241CDA31AF08;
  }
  long long v27 = *(void **)(a2 + 8 * v26);
  if (!v27) {
    goto LABEL_94;
  }
  uint64_t v28 = (void *)*v27;
  if (!v28) {
    goto LABEL_94;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v30 = v28[1];
      if (v30 == 0xF409241CDA31AF08)
      {
        if (v28[2] == 0xF409241CDA31AF08) {
          goto LABEL_92;
        }
      }
      else if ((v30 & (a3 - 1)) != v26)
      {
        goto LABEL_94;
      }
      uint64_t v28 = (void *)*v28;
      if (!v28) {
        goto LABEL_94;
      }
    }
  }
  while (2)
  {
    unint64_t v29 = v28[1];
    if (v29 != 0xF409241CDA31AF08)
    {
      if (v29 >= a3) {
        v29 %= a3;
      }
      if (v29 != v26) {
        goto LABEL_94;
      }
      goto LABEL_81;
    }
    if (v28[2] != 0xF409241CDA31AF08)
    {
LABEL_81:
      uint64_t v28 = (void *)*v28;
      if (!v28) {
        goto LABEL_94;
      }
      continue;
    }
    break;
  }
LABEL_92:
  uint64_t v31 = v28[5];
  if (*(void *)(v31 + 8) == 0xF409241CDA31AF08)
  {
    uint64_t v5 = *(void *)(v31 + 32);
    goto LABEL_95;
  }
LABEL_94:
  uint64_t v5 = 0;
LABEL_95:
  if (v3.u32[0] > 1uLL)
  {
    uint64_t v32 = 0x61AAF6FADEFBCCACLL;
    if (a3 <= 0x61AAF6FADEFBCCACLL) {
      uint64_t v32 = 0x61AAF6FADEFBCCACLL % a3;
    }
  }
  else
  {
    uint64_t v32 = (a3 - 1) & 0x61AAF6FADEFBCCACLL;
  }
  uint64_t v33 = *(void **)(a2 + 8 * v32);
  if (!v33) {
    goto LABEL_117;
  }
  int v34 = (void *)*v33;
  if (!v34) {
    goto LABEL_117;
  }
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v36 = v34[1];
      if (v36 == 0x61AAF6FADEFBCCACLL)
      {
        if (v34[2] == 0x61AAF6FADEFBCCACLL) {
          goto LABEL_115;
        }
      }
      else if ((v36 & (a3 - 1)) != v32)
      {
        goto LABEL_117;
      }
      int v34 = (void *)*v34;
      if (!v34) {
        goto LABEL_117;
      }
    }
  }
  while (1)
  {
    unint64_t v35 = v34[1];
    if (v35 == 0x61AAF6FADEFBCCACLL) {
      break;
    }
    if (v35 >= a3) {
      v35 %= a3;
    }
    if (v35 != v32) {
      goto LABEL_117;
    }
LABEL_104:
    int v34 = (void *)*v34;
    if (!v34) {
      goto LABEL_117;
    }
  }
  if (v34[2] != 0x61AAF6FADEFBCCACLL) {
    goto LABEL_104;
  }
LABEL_115:
  uint64_t v37 = v34[5];
  if (*(void *)(v37 + 8) != 0x61AAF6FADEFBCCACLL)
  {
LABEL_117:
    uint64_t v38 = 0;
    goto LABEL_118;
  }
  uint64_t v38 = *(void *)(v37 + 32);
LABEL_118:
  *uint64_t result = v7;
  result[1] = v6;
  result[2] = v8;
  result[3] = v5;
  result[4] = v38;
  return result;
}

uint64_t md::Logic<md::ARRenderEntityGenerationLogic,md::ARRenderEntityGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x51AAE9259E4A5431)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 152))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARRenderEntityGenerationLogic,md::ARRenderEntityGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x51AAE9259E4A5431)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 144))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARRenderEntityGenerationLogic,md::ARRenderEntityGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x51AAE9259E4A5431)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 136))(v5, a2, v6, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARRenderEntityGenerationLogic,md::ARRenderEntityGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0x51AAE9259E4A5431)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    if (v3)
    {
      uint64_t v5 = result;
      md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>::buildRequiredTuple<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>(v6, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
      return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 128))(v5, a2, v6, v3);
    }
  }
  return result;
}

void md::Logic<md::ARRenderEntityGenerationLogic,md::ARRenderEntityGenerationContext,md::LogicDependencies<gdc::TypeList<md::ARLogicContext,md::AROcclusionGenerationContext,md::ARProcessMeshComponentsContext,md::LabelsExternalMeshContext,md::ARApplyWorldTransformUpdatesContext>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A265CE1C(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t gdc::ObjectHolder<md::ARRenderEntityGenerationContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::ARRenderEntityGenerationContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555DE8;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0xC400A2AC0F1);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::ARRenderEntityGenerationContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555DE8;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0xC400A2AC0F1);
  }
  return a1;
}

uint64_t md::ARRenderEntityGenerationLogic::didBecomeInactive(md::ARRenderEntityGenerationLogic *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 16))();
}

void md::ARRenderEntityGenerationLogic::~ARRenderEntityGenerationLogic(md::ARRenderEntityGenerationLogic *this)
{
  md::ARRenderEntityGenerationLogic::~ARRenderEntityGenerationLogic(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(void *)this = &unk_1EF54AC20;
  uint64_t v2 = (void *)*((void *)this + 29);
  if (v2)
  {
    *((void *)this + 30) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 26);
  if (v3)
  {
    *((void *)this + 27) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 23);
  if (v4)
  {
    *((void *)this + 24) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 20);
  if (v5)
  {
    *((void *)this + 21) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 17);
  if (v6)
  {
    *((void *)this + 18) = v6;
    operator delete(v6);
  }
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

float std::__function::__func<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_1,std::allocator<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_1>,void ()(md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&)>::operator()(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(*(void *)(**(void **)(a1 + 8) + 10056)
                 + 8 * *(unsigned int *)(*(void *)(**(void **)(a1 + 8) + 10032) + 8 * *a2));
  float result = *(double *)(**(void **)(a1 + 16) + 3768)
         * *(double *)(**(void **)(a1 + 16) + 1384)
         / (*(double *)(**(void **)(a1 + 16) + 1368)
          * (*(double *)(v2 + 72) - *(double *)(v2 + 56)));
  *(float *)(v2 + 368) = result;
  return result;
}

__n128 std::__function::__func<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_1,std::allocator<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_1>,void ()(md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF520270;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_1,std::allocator<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_1>,void ()(md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF520270;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_1,std::allocator<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_1>,void ()(md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&)>::~__func()
{
}

void std::__function::__func<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_0,std::allocator<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_0>,void ()(md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int16 *a14)
{
}

void md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_0::operator()(void **a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int16 *a12)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  unint64_t v14 = (void ***)a1[6];
  uint64_t v15 = (void *)**a1;
  uint64_t v16 = v15[1232];
  if (a2 < (unint64_t)((v15[1233] - v16) >> 3)
    && (uint64_t v17 = *(void *)(v16 + 8 * a2)) != 0
    && HIDWORD(a2) == HIDWORD(v17)
    && ((uint64_t v18 = v15[1235],
         uint64_t v19 = (const gdc::Registry **)(v18 + 8 * v17),
         v19 != (const gdc::Registry **)v15[1236])
      ? (BOOL v20 = v18 == 0)
      : (BOOL v20 = 1),
        !v20))
  {
    uint64_t v72 = *v19;
  }
  else
  {
    uint64_t v72 = 0;
  }
  long long v21 = md::MeshRenderableContext::renderablesForRegistry((int8x8_t *)*a1[1], v72);
  if (v21[1] == *v21) {
    return;
  }
  int v22 = v21;
  unint64_t v23 = (void *)**a1;
  unint64_t v24 = *a3;
  uint64_t v25 = v23[1254];
  if (v24 >= (v23[1255] - v25) >> 3) {
    goto LABEL_19;
  }
  uint64_t v26 = *(void *)(v25 + 8 * v24);
  if (v26)
  {
    if (HIDWORD(*a3) == HIDWORD(v26))
    {
      uint64_t v27 = v23[1257];
      uint64_t v28 = (uint64_t *)(v27 + 8 * v26);
      if (v28 != (uint64_t *)v23[1258] && v27 != 0)
      {
        uint64_t v26 = *v28;
        goto LABEL_20;
      }
    }
LABEL_19:
    uint64_t v26 = 0;
  }
LABEL_20:
  uint64_t v31 = *(void *)(v26 + 232);
  uint64_t v30 = *(std::__shared_weak_count **)(v26 + 240);
  long long v76 = v30;
  if (v30)
  {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v31 = *(void *)(v26 + 232);
  }
  if ((*(unsigned char *)(v31 + 16) & 2) == 0
    && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
  {
    int v78 = &v82;
    *(void *)&long long v77 = &v78;
    std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v77, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
  }
  uint64_t v32 = a12[1];
  if (v32 < *a12)
  {
    uint64_t v74 = v14;
    uint64_t v33 = *v14;
    int v34 = (uint64_t *)***v14;
    if (v34 != (uint64_t *)(**v14)[1] && *v34 != 0x22D45F5AAD4BF408)
    {
      unint64_t v35 = v34 + 5;
      do
      {
        uint64_t v36 = *v35;
        v35 += 5;
      }
      while (v36 != 0x22D45F5AAD4BF408);
      int v34 = v35 - 5;
    }
    uint64_t v37 = *(void *)(*v22 + 8 * v32);
    uint64_t v38 = (uint64_t (***)(void))v34[3];
    long long v39 = (std::__shared_weak_count *)v34[4];
    if (v39)
    {
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    unint64_t v40 = (md::LayoutContext *)(**v38)(v38);
    uint64_t v41 = (void *)**v33;
    uint64_t v42 = (void *)(*v33)[1];
    if (v41 == v42)
    {
LABEL_38:
      if (v41 == v42)
      {
        long long v43 = 0;
      }
      else
      {
        long long v43 = (void *)v41[3];
        uint64_t v44 = (std::__shared_weak_count *)v41[4];
        if (v44)
        {
          atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
      }
    }
    else
    {
      do
      {
        if (*v41 == 0x4EDAD23DFB014132) {
          goto LABEL_38;
        }
        v41 += 5;
      }
      while (v41 != v42);
      long long v43 = 0;
    }
    long long v45 = (void *)**v33;
    uint64_t v46 = (void *)(*v33)[1];
    if (v45 != v46)
    {
      while (*v45 != 0x41D4E9297E100630)
      {
        v45 += 5;
        if (v45 == v46) {
          goto LABEL_51;
        }
      }
    }
    if (v45 != v46)
    {
      uint64_t v47 = (std::__shared_weak_count *)v45[4];
      if (v47)
      {
        atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
    }
LABEL_51:
    long long v48 = (void *)**v33;
    uint64_t v49 = (void *)(*v33)[1];
    if (v48 == v49)
    {
LABEL_55:
      if (v48 == v49)
      {
        uint64_t v75 = 0;
      }
      else
      {
        uint64_t v50 = (std::__shared_weak_count *)v48[4];
        uint64_t v75 = (int8x8_t *)v48[3];
        if (v50)
        {
          atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
      }
    }
    else
    {
      do
      {
        if (*v48 == 0x348A0B0E758C07C2) {
          goto LABEL_55;
        }
        v48 += 5;
      }
      while (v48 != v49);
      uint64_t v75 = 0;
    }
    unint64_t v51 = (void *)*((void *)v40 + 1);
    unint64_t v52 = v51[1];
    if ((v52 & (v52 - 1)) != 0)
    {
      unint64_t v54 = 0x1AF456233693CD46;
      if (v52 <= 0x1AF456233693CD46) {
        unint64_t v54 = 0x1AF456233693CD46 % v52;
      }
      unint64_t v55 = *(void **)(*v51 + 8 * v54);
      do
      {
        do
          unint64_t v55 = (void *)*v55;
        while (v55[1] != 0x1AF456233693CD46);
      }
      while (v55[2] != 0x1AF456233693CD46);
    }
    else
    {
      uint64_t v53 = *(void **)(*v51 + 8 * ((v52 - 1) & 0x1AF456233693CD46));
      do
      {
        do
          uint64_t v53 = (void *)*v53;
        while (v53[1] != 0x1AF456233693CD46);
      }
      while (v53[2] != 0x1AF456233693CD46);
    }
    int v56 = *(unsigned __int8 *)(v37 + 8);
    uint64_t v57 = *(void *)(md::LayoutContext::frameState(v40) + 624);
    uint64_t v80 = 0;
    unint64_t v81 = 0;
    if (v56 == 2)
    {
      long long v58 = *(std::__shared_weak_count **)(v37 + 232);
      uint64_t v59 = *(void *)(v37 + 240);
      uint64_t v60 = *(void *)(v37 + 224);
      if (v58) {
        atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v80 = v60;
      unint64_t v81 = v58;
      uint64_t v61 = 256;
    }
    else
    {
      if (v56 != 1)
      {
        long long v67 = v74;
        goto LABEL_92;
      }
      long long v58 = *(std::__shared_weak_count **)(v37 + 232);
      uint64_t v59 = *(void *)(v37 + 240);
      uint64_t v62 = *(void *)(v37 + 224);
      if (v58) {
        atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v80 = v62;
      unint64_t v81 = v58;
      uint64_t v63 = *(md::SharedResource **)(v37 + 256);
      if (v63) {
        md::SharedResource::addFrameRef(v63, v57);
      }
      unint64_t v64 = *(md::SharedResource **)(v37 + 296);
      if (v64) {
        md::SharedResource::addFrameRef(v64, v57);
      }
      uint64_t v65 = *(md::SharedResource **)(v37 + 280);
      if (v65) {
        md::SharedResource::addFrameRef(v65, v57);
      }
      uint64_t v61 = 0;
    }
    int v78 = (long long *)v59;
    uint64_t v79 = v61;
    uint64_t v73 = v61;
    id v66 = std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>(v43 + 29, (uint64_t *)&v78);
    if (!v66 || !v66[4]) {
      gdc::Registry::create((gdc::Registry *)v33[1]);
    }
    int v78 = (long long *)v59;
    uint64_t v79 = v73;
    std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>(v43 + 29, (uint64_t *)&v78);
    int v78 = (long long *)v59;
    uint64_t v79 = v73;
    std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>(v43 + 66, (uint64_t *)&v78);
    int v78 = (long long *)v59;
    uint64_t v79 = v73;
    std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>(v43 + 103, (uint64_t *)&v78);
    unint64_t v68 = (((v59 - 0x61C8864680B583EBLL) << 6)
         - 0x61C8864680B583EBLL
         + ((unint64_t)(v59 - 0x61C8864680B583EBLL) >> 2)) ^ (v59 - 0x61C8864680B583EBLL);
    unint64_t v69 = (v68 >> 2) + (v68 << 6);
    mre::GGLResourceStore::getTextureHandleWithKey(v75, (uint64_t *)(((((v69 - 0x61C8864680B583EALL) ^ v68) << 6)- 0x61C8864680B583EALL+ (((v69 - 0x61C8864680B583EALL) ^ v68) >> 2)) ^ (v69 - 0x61C8864680B583EALL) ^ v68), 0);
    unint64_t v70 = (v69 - 0x61C8864680B583EBLL) ^ v68;
    unint64_t v71 = (v70 >> 2) + (v70 << 6);
    mre::GGLResourceStore::getTextureHandleWithKey(v75, (uint64_t *)((v71 - 0x61C8864680B583EALL) ^ v70), 0);
    mre::GGLResourceStore::getTextureHandleWithKey(v75, (uint64_t *)((v71 - 0x61C8864680B583E7) ^ v70), 0);
    int v78 = (long long *)v59;
    uint64_t v79 = v73;
    std::__hash_table<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::__unordered_map_hasher<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,md::MaterialKeyHasher,std::equal_to<md::MaterialKey>,true>,std::__unordered_map_equal<md::MaterialKey,std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>,std::equal_to<md::MaterialKey>,md::MaterialKeyHasher,true>,std::allocator<std::__hash_value_type<md::MaterialKey,geo::handle<md::MaterialIDStorage>>>>::find<md::MaterialKey>(v43 + 140, (uint64_t *)&v78);
    long long v67 = v74;
    if (v58)
    {
      if (!atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
LABEL_92:
    gdc::Registry::create((gdc::Registry *)(*v67)[1]);
  }
  if (v76 && !atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
    std::__shared_weak_count::__release_weak(v76);
  }
}

void sub_1A2668D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  operator delete(v67);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a63);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a65);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t *mre::GGLResourceStore::getTextureHandleWithKey(int8x8_t *a1, uint64_t *a2, unsigned __int8 a3)
{
  int8x8_t v3 = a1[4];
  if (!*(void *)&v3) {
    return 0;
  }
  unint64_t v4 = (unint64_t)(&a2[8 * a3 - 0xE44323405AC1F58] - 0x3A3AA7D820E2E4E6) ^ (a3 - 0x61C8864680B583EBLL);
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = (unint64_t)(&a2[8 * a3 - 0xE44323405AC1F58] - 0x3A3AA7D820E2E4E6) ^ (a3 - 0x61C8864680B583EBLL);
    if (v4 >= *(void *)&v3) {
      uint64_t v6 = v4 % *(void *)&v3;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v3 - 1) & v4;
  }
  uint64_t v7 = *(uint64_t ****)(*(void *)&a1[3] + 8 * v6);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *v7;
  if (!v8) {
    return 0;
  }
  if (v5.u32[0] < 2uLL)
  {
    uint64_t v9 = *(void *)&v3 - 1;
    while (1)
    {
      uint64_t v13 = v8[1];
      if (v13 == (uint64_t *)v4)
      {
        if (v8[2] == a2 && *((unsigned __int8 *)v8 + 24) == a3) {
          return v8[4];
        }
      }
      else if (((unint64_t)v13 & v9) != v6)
      {
        return 0;
      }
      uint64_t v8 = (uint64_t **)*v8;
      if (!v8) {
        return 0;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = (unint64_t)v8[1];
    if (v11 == v4) {
      break;
    }
    if (v11 >= *(void *)&v3) {
      v11 %= *(void *)&v3;
    }
    if (v11 != v6) {
      return 0;
    }
LABEL_14:
    uint64_t v8 = (uint64_t **)*v8;
    if (!v8) {
      return 0;
    }
  }
  if (v8[2] != a2 || *((unsigned __int8 *)v8 + 24) != a3) {
    goto LABEL_14;
  }
  return v8[4];
}

void ecs2::addComponent<md::ls::AssociationHandle>(void *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v6 = &unk_1EF522AF0;
  *(_OWORD *)(v6 + 8) = *a3;
  *((void *)v6 + 3) = a2;
  uint64_t v9 = v6;
  int v10 = 0;
  ecs2::Runtime::queueCommand(a1, (uint64_t)v8);
  if (v10 != -1) {
    ((void (*)(char *, unsigned char *))off_1EF591020[v10])(&v7, v8);
  }
}

void ecs2::addComponent<md::ls::SharedUniqueID>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v6 = &unk_1EF522238;
  *(_OWORD *)(v6 + 8) = *(_OWORD *)a3;
  *((void *)v6 + 3) = *(void *)(a3 + 16);
  *((void *)v6 + 4) = a2;
  uint64_t v9 = v6;
  int v10 = 0;
  ecs2::Runtime::queueCommand(a1, (uint64_t)v8);
  if (v10 != -1) {
    ((void (*)(char *, unsigned char *))off_1EF591020[v10])(&v7, v8);
  }
}

void ecs2::addComponent<md::BoundData>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v6 = &unk_1EF526258;
  *(_OWORD *)(v6 + 8) = *(_OWORD *)a3;
  *((void *)v6 + 3) = *(void *)(a3 + 16);
  *((void *)v6 + 4) = a2;
  uint64_t v9 = v6;
  int v10 = 0;
  ecs2::Runtime::queueCommand(a1, (uint64_t)v8);
  if (v10 != -1) {
    ((void (*)(char *, unsigned char *))off_1EF591020[v10])(&v7, v8);
  }
}

void ecs2::addComponent<md::ls::CustomRenderState>(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  __int16 v7 = *((_WORD *)a3 + 8);
  uint64_t v8 = operator new(0x28uLL);
  *uint64_t v8 = &unk_1EF522B38;
  v8[1] = v6;
  v8[2] = v5;
  *((_WORD *)v8 + 12) = v7;
  v8[4] = a2;
  uint64_t v11 = v8;
  int v12 = 0;
  ecs2::Runtime::queueCommand(a1, (uint64_t)v10);
  if (v12 != -1) {
    ((void (*)(char *, unsigned char *))off_1EF591020[v12])(&v9, v10);
  }
}

void sub_1A2669404(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void ecs2::addComponent<md::ls::RasterOverlayConstantDataHandle>(void *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v6 = &unk_1EF525B50;
  long long v7 = a3[1];
  *(_OWORD *)(v6 + 8) = *a3;
  *(_OWORD *)(v6 + 24) = v7;
  *((void *)v6 + 5) = a2;
  int v10 = v6;
  int v11 = 0;
  ecs2::Runtime::queueCommand(a1, (uint64_t)v9);
  if (v11 != -1) {
    ((void (*)(char *, unsigned char *))off_1EF591020[v11])(&v8, v9);
  }
}

void ecs2::addComponent<md::ls::IndexRange>(void *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v6 = &unk_1EF5216F8;
  *(_OWORD *)(v6 + 8) = *a3;
  *((void *)v6 + 3) = a2;
  char v9 = v6;
  int v10 = 0;
  ecs2::Runtime::queueCommand(a1, (uint64_t)v8);
  if (v10 != -1) {
    ((void (*)(char *, unsigned char *))off_1EF591020[v10])(&v7, v8);
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableVisibilityOptions>(gdc::Entity,md::ls::RenderableVisibilityOptions &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 12);
  unint64_t v4 = (void *)gdc::Registry::storage<md::ls::RenderableVisibilityOptions>(a2);
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 2;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 1 > v17) {
        unint64_t v17 = v18 >> 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 62) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        BOOL v20 = operator new(4 * v19);
      }
      else
      {
        BOOL v20 = 0;
      }
      long long v21 = &v20[4 * v16];
      int v22 = &v20[4 * v19];
      _DWORD *v21 = v5;
      unint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        uint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 4;
        if (v23 < 0x2C) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 2) + 1;
        uint64_t v25 = &v20[4 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        v21 -= v24 & 0x7FFFFFFFFFFFFFF8;
        v13 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_40:
          do
          {
            int v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--long long v21 = v29;
          }
          while (v13 != v15);
          uint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v13 = v5;
      unint64_t v14 = v13 + 4;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    char v8 = (_DWORD *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 1));
    *char v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (_DWORD *)v4[11])
    {
      int v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          int v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          int v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  uint64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      int v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      uint64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableVisibilityOptions>(gdc::Entity,md::ls::RenderableVisibilityOptions &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF524B00;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableVisibilityOptions>(gdc::Entity,md::ls::RenderableVisibilityOptions &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF524B00;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableVisibilityOptions>(gdc::Entity,md::ls::RenderableVisibilityOptions &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NeedsZBias>(gdc::Entity,md::ls::NeedsZBias &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::NeedsZBias>(a2);
  uint64_t v22 = v2;
  unint64_t v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if (v5)
  {
    int v10 = (unsigned char *)v3[11];
    unint64_t v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      unint64_t v12 = (char *)v3[10];
      uint64_t v13 = v10 - v12;
      uint64_t v14 = v10 - v12 + 1;
      if (v14 < 0) {
        goto LABEL_28;
      }
      unint64_t v15 = v9 - (void)v12;
      if (2 * v15 > v14) {
        uint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16) {
        unint64_t v17 = (char *)operator new(v16);
      }
      else {
        unint64_t v17 = 0;
      }
      uint64_t v18 = &v17[v16];
      uint64_t v11 = (uint64_t)&v17[v13 + 1];
      unint64_t v19 = (char *)(v12 - v10);
      if (v12 == v10) {
        unint64_t v19 = 0;
      }
      v3[10] = &v17[v13 + (void)v19];
      v3[11] = v11;
      v3[12] = v18;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    uint64_t v6 = v3[31];
  }
  else
  {
    uint64_t v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      char v7 = (void *)v3[16];
      if (v7)
      {
        while (1)
        {
          uint64_t v24 = &v22;
          uint64_t v25 = 1;
          uint64_t v23 = v6;
          uint64_t v8 = v7[6];
          if (!v8) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v8 + 48))(v8, &v23, &v24);
          char v7 = (void *)*v7;
          if (!v7) {
            return;
          }
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  BOOL v20 = (void *)v3[22];
  if (v20)
  {
    while (1)
    {
      uint64_t v24 = &v22;
      uint64_t v25 = 1;
      uint64_t v23 = v6;
      uint64_t v21 = v20[6];
      if (!v21) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v21 + 48))(v21, &v23, &v24);
      BOOL v20 = (void *)*v20;
      if (!v20) {
        return;
      }
    }
    goto LABEL_27;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NeedsZBias>(gdc::Entity,md::ls::NeedsZBias &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5218A8;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NeedsZBias>(gdc::Entity,md::ls::NeedsZBias &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF5218A8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NeedsZBias>(gdc::Entity,md::ls::NeedsZBias &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ColorDataHandle>(gdc::Entity,md::ls::ColorDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = (void *)gdc::Registry::storage<md::ls::ColorDataHandle>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        BOOL v20 = operator new(8 * v19);
      }
      else
      {
        BOOL v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      uint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        unint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          unint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      int v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          int v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          int v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  uint64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      int v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      uint64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ColorDataHandle>(gdc::Entity,md::ls::ColorDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5222C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ColorDataHandle>(gdc::Entity,md::ls::ColorDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF5222C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ColorDataHandle>(gdc::Entity,md::ls::ColorDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedColorDataHandle>(gdc::Entity,md::ls::SharedColorDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = (void *)gdc::Registry::storage<md::ls::SharedColorDataHandle>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        BOOL v20 = operator new(8 * v19);
      }
      else
      {
        BOOL v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      uint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        unint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          unint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      int v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          int v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          int v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  uint64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      int v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      uint64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedColorDataHandle>(gdc::Entity,md::ls::SharedColorDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF523870;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedColorDataHandle>(gdc::Entity,md::ls::SharedColorDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF523870;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedColorDataHandle>(gdc::Entity,md::ls::SharedColorDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialZIndexHandle>(gdc::Entity,md::ls::SharedMaterialZIndexHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = (void *)gdc::Registry::storage<md::ls::SharedMaterialZIndexHandle>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        BOOL v20 = operator new(8 * v19);
      }
      else
      {
        BOOL v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      uint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        unint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          unint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      int v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          int v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          int v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  uint64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      int v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      uint64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialZIndexHandle>(gdc::Entity,md::ls::SharedMaterialZIndexHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF524878;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialZIndexHandle>(gdc::Entity,md::ls::SharedMaterialZIndexHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF524878;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialZIndexHandle>(gdc::Entity,md::ls::SharedMaterialZIndexHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialVisibilityOptionsHandle>(gdc::Entity,md::ls::SharedMaterialVisibilityOptionsHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = (void *)gdc::Registry::storage<md::ls::SharedMaterialVisibilityOptionsHandle>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        BOOL v20 = operator new(8 * v19);
      }
      else
      {
        BOOL v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      uint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        unint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          unint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      int v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          int v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          int v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  uint64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      int v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      uint64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialVisibilityOptionsHandle>(gdc::Entity,md::ls::SharedMaterialVisibilityOptionsHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF525DD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialVisibilityOptionsHandle>(gdc::Entity,md::ls::SharedMaterialVisibilityOptionsHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF525DD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialVisibilityOptionsHandle>(gdc::Entity,md::ls::SharedMaterialVisibilityOptionsHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::EmissiveTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = (void *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        BOOL v20 = operator new(8 * v19);
      }
      else
      {
        BOOL v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      uint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        unint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          unint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      int v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          int v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          int v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  uint64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      int v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      uint64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::EmissiveTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5234C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::EmissiveTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF5234C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::EmissiveTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::EmissiveTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialEmissiveTexture>(gdc::Entity,md::ls::SharedMaterialEmissiveTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = (void *)gdc::Registry::storage<md::ls::SharedMaterialEmissiveTexture>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        BOOL v20 = operator new(8 * v19);
      }
      else
      {
        BOOL v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      uint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        unint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          unint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      int v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          int v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          int v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  uint64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      int v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      uint64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialEmissiveTexture>(gdc::Entity,md::ls::SharedMaterialEmissiveTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5257F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialEmissiveTexture>(gdc::Entity,md::ls::SharedMaterialEmissiveTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF5257F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialEmissiveTexture>(gdc::Entity,md::ls::SharedMaterialEmissiveTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialAlbedoTexture>(gdc::Entity,md::ls::SharedMaterialAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = (void *)gdc::Registry::storage<md::ls::SharedMaterialAlbedoTexture>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        BOOL v20 = operator new(8 * v19);
      }
      else
      {
        BOOL v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      uint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        unint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          unint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      int v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          int v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          int v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  uint64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      int v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      uint64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialAlbedoTexture>(gdc::Entity,md::ls::SharedMaterialAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF524B48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialAlbedoTexture>(gdc::Entity,md::ls::SharedMaterialAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF524B48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialAlbedoTexture>(gdc::Entity,md::ls::SharedMaterialAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableAlbedoTexture>(gdc::Entity,md::ls::RenderableAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = gdc::Registry::storage<md::ls::RenderableAlbedoTexture>(a2);
  uint64_t v5 = (void *)v4;
  long long v6 = *(_OWORD *)(a1 + 8);
  long long v34 = v6;
  uint64_t v7 = *(void *)(a1 + 16);
  if (*((void *)&v6 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v6 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v35 = v3;
  uint64_t v9 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((void *)(v4 + 32), (uint64_t)&v35);
  if (v10)
  {
    unint64_t v19 = (char *)v5[11];
    unint64_t v18 = v5[12];
    if ((unint64_t)v19 >= v18)
    {
      uint64_t v21 = (char *)v5[10];
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v21) >> 3);
      unint64_t v23 = v22 + 1;
      if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (void)v21) >> 3);
      if (2 * v24 > v23) {
        unint64_t v23 = 2 * v24;
      }
      if (v24 >= 0x555555555555555) {
        unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v25 = v23;
      }
      if (v25)
      {
        if (v25 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_50;
        }
        uint64_t v26 = operator new(24 * v25);
      }
      else
      {
        uint64_t v26 = 0;
      }
      uint64_t v27 = (char *)&v26[(v19 - v21) >> 3];
      *(_OWORD *)uint64_t v27 = v34;
      if (v7)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
        uint64_t v21 = (char *)v5[10];
        unint64_t v19 = (char *)v5[11];
      }
      long long v28 = (char *)&v26[3 * v25];
      v26[3 * v22 + 2] = v8;
      BOOL v20 = v27 + 24;
      if (v19 == v21)
      {
        v5[10] = v27;
        v5[11] = v20;
        v5[12] = v28;
      }
      else
      {
        do
        {
          long long v29 = *(_OWORD *)(v19 - 24);
          v19 -= 24;
          *(_OWORD *)(v27 - 24) = v29;
          v27 -= 24;
          *(void *)unint64_t v19 = 0;
          *((void *)v19 + 1) = 0;
          *((void *)v27 + 2) = *((void *)v19 + 2);
        }
        while (v19 != v21);
        uint64_t v21 = (char *)v5[10];
        uint64_t v30 = (char *)v5[11];
        v5[10] = v27;
        v5[11] = v20;
        for (v5[12] = v28; v30 != v21; v30 -= 24)
        {
          uint64_t v31 = (std::__shared_weak_count *)*((void *)v30 - 2);
          if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
      }
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v19 = v34;
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      *((void *)v19 + 2) = v8;
      BOOL v20 = v19 + 24;
    }
    v5[11] = v20;
    uint64_t v15 = v5[31];
  }
  else
  {
    uint64_t v11 = v5[10];
    uint64_t v12 = ((uint64_t)v9 - v5[7]) >> 3;
    uint64_t v13 = v11 + 24 * v12;
    uint64_t v14 = *(std::__shared_weak_count **)(v13 + 8);
    *(_OWORD *)uint64_t v13 = v34;
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    *(void *)(v11 + 24 * v12 + 16) = v8;
    uint64_t v15 = v5[31];
    if (v13 != v5[11])
    {
      uint64_t v16 = (void *)v5[16];
      if (v16)
      {
        while (1)
        {
          uint64_t v37 = &v35;
          uint64_t v38 = 1;
          uint64_t v36 = v15;
          uint64_t v17 = v16[6];
          if (!v17) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v17 + 48))(v17, &v36, &v37);
          uint64_t v16 = (void *)*v16;
          if (!v16) {
            goto LABEL_11;
          }
        }
LABEL_48:
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
LABEL_50:
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
LABEL_11:
      long long v34 = 0u;
      goto LABEL_44;
    }
    long long v34 = 0u;
  }
  for (uint64_t i = (void *)v5[22]; i; uint64_t i = (void *)*i)
  {
    uint64_t v37 = &v35;
    uint64_t v38 = 1;
    uint64_t v36 = v15;
    uint64_t v33 = i[6];
    if (!v33) {
      goto LABEL_48;
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v33 + 48))(v33, &v36, &v37);
  }
LABEL_44:
  if (*((void *)&v34 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v34 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**((void **)&v34 + 1) + 16))(*((void *)&v34 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v34 + 1));
    }
  }
}

void sub_1A266B40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableAlbedoTexture>(gdc::Entity,md::ls::RenderableAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableAlbedoTexture>(gdc::Entity,md::ls::RenderableAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableAlbedoTexture>(gdc::Entity,md::ls::RenderableAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = &unk_1EF523DC8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  a2[3] = result[3];
  a2[4] = result[4];
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableAlbedoTexture>(gdc::Entity,md::ls::RenderableAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1EF523DC8;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableAlbedoTexture>(gdc::Entity,md::ls::RenderableAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func(void *a1)
{
  *a1 = &unk_1EF523DC8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableAlbedoTexture>(gdc::Entity,md::ls::RenderableAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func(void *a1)
{
  *a1 = &unk_1EF523DC8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::TexTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::TexTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::TexTexture>>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  long long v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        BOOL v20 = operator new(8 * v19);
      }
      else
      {
        BOOL v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      unint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        uint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        unint64_t v25 = &v20[8 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *unint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          uint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      char v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          long long v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          char v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  uint64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      long long v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      uint64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::TexTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::TexTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5233F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::TexTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::TexTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF5233F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::TexTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::TexTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::DiffuseTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  long long v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        BOOL v20 = operator new(8 * v19);
      }
      else
      {
        BOOL v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      unint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        uint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        unint64_t v25 = &v20[8 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *unint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          uint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      char v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          long long v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          char v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  uint64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      long long v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      uint64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::DiffuseTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF523438;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::DiffuseTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF523438;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::DiffuseTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::DiffuseTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialDiffuseTexture>(gdc::Entity,md::ls::SharedMaterialDiffuseTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::SharedMaterialDiffuseTexture>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  long long v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        BOOL v20 = operator new(8 * v19);
      }
      else
      {
        BOOL v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      unint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        uint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        unint64_t v25 = &v20[8 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *unint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          uint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      char v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          long long v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          char v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  uint64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      long long v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      uint64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialDiffuseTexture>(gdc::Entity,md::ls::SharedMaterialDiffuseTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF525640;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialDiffuseTexture>(gdc::Entity,md::ls::SharedMaterialDiffuseTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF525640;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedMaterialDiffuseTexture>(gdc::Entity,md::ls::SharedMaterialDiffuseTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsMaterial>(gdc::Entity,md::ls::IsMaterial &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::IsMaterial>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  long long v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        BOOL v20 = operator new(8 * v19);
      }
      else
      {
        BOOL v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      unint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        uint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        unint64_t v25 = &v20[8 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *unint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          uint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      char v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          long long v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          char v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  uint64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      long long v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      uint64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsMaterial>(gdc::Entity,md::ls::IsMaterial &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF521788;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsMaterial>(gdc::Entity,md::ls::IsMaterial &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF521788;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsMaterial>(gdc::Entity,md::ls::IsMaterial &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableMaterialData>(gdc::Entity,md::ls::RenderableMaterialData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::RenderableMaterialData>(a2);
  long long v24 = *(_OWORD *)(a1 + 8);
  long long v25 = *(_OWORD *)(a1 + 24);
  uint64_t v26 = v3;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v26);
  if (v6)
  {
    unint64_t v12 = (char *)v4[11];
    unint64_t v11 = v4[12];
    if ((unint64_t)v12 >= v11)
    {
      uint64_t v14 = (char *)v4[10];
      uint64_t v15 = (v12 - v14) >> 5;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 59) {
        goto LABEL_30;
      }
      uint64_t v17 = v11 - (void)v14;
      if (v17 >> 4 > v16) {
        unint64_t v16 = v17 >> 4;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 >> 59) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v19 = (char *)operator new(32 * v18);
      }
      else
      {
        unint64_t v19 = 0;
      }
      BOOL v20 = &v19[32 * v15];
      *(_OWORD *)BOOL v20 = v24;
      *((_OWORD *)v20 + 1) = v25;
      uint64_t v13 = v20 + 32;
      if (v12 != v14)
      {
        do
        {
          long long v21 = *((_OWORD *)v12 - 1);
          *((_OWORD *)v20 - 2) = *((_OWORD *)v12 - 2);
          *((_OWORD *)v20 - 1) = v21;
          v20 -= 32;
          v12 -= 32;
        }
        while (v12 != v14);
        unint64_t v12 = (char *)v4[10];
      }
      v4[10] = v20;
      v4[11] = v13;
      v4[12] = &v19[32 * v18];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v12 = v24;
      *((_OWORD *)v12 + 1) = v25;
      uint64_t v13 = v12 + 32;
    }
    v4[11] = v13;
    uint64_t v8 = v4[31];
  }
  else
  {
    char v7 = (_OWORD *)(v4[10] + 4 * ((void)v5 - v4[7]));
    *char v7 = v24;
    v7[1] = v25;
    uint64_t v8 = v4[31];
    if (v7 != (_OWORD *)v4[11])
    {
      uint64_t v9 = (void *)v4[16];
      if (v9)
      {
        while (1)
        {
          long long v28 = &v26;
          uint64_t v29 = 1;
          uint64_t v27 = v8;
          uint64_t v10 = v9[6];
          if (!v10) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v10 + 48))(v10, &v27, &v28);
          uint64_t v9 = (void *)*v9;
          if (!v9) {
            return;
          }
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  unint64_t v22 = (void *)v4[22];
  if (v22)
  {
    while (1)
    {
      long long v28 = &v26;
      uint64_t v29 = 1;
      uint64_t v27 = v8;
      uint64_t v23 = v22[6];
      if (!v23) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v23 + 48))(v23, &v27, &v28);
      unint64_t v22 = (void *)*v22;
      if (!v22) {
        return;
      }
    }
    goto LABEL_29;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableMaterialData>(gdc::Entity,md::ls::RenderableMaterialData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF523B88;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableMaterialData>(gdc::Entity,md::ls::RenderableMaterialData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EF523B88;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableMaterialData>(gdc::Entity,md::ls::RenderableMaterialData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CustomZIndex>(gdc::Entity,md::ls::CustomZIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::CustomZIndex>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  char v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_34;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        BOOL v20 = operator new(8 * v19);
      }
      else
      {
        BOOL v20 = 0;
      }
      long long v21 = &v20[8 * v16];
      unint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 != v15)
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_38;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_38;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        long long v25 = &v20[8 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *long long v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--long long v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      uint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          long long v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          uint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  uint64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      long long v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      uint64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_33;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CustomZIndex>(gdc::Entity,md::ls::CustomZIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF521BC0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CustomZIndex>(gdc::Entity,md::ls::CustomZIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF521BC0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CustomZIndex>(gdc::Entity,md::ls::CustomZIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::AlbedoTintColor>(gdc::Entity,md::ls::AlbedoTintColor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::AlbedoTintColor>(a2);
  int v6 = *(_DWORD *)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 12);
  int v8 = *(_DWORD *)(a1 + 16);
  int v7 = *(_DWORD *)(a1 + 20);
  uint64_t v27 = v3;
  uint64_t v9 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v27);
  if (v10)
  {
    uint64_t v16 = (char *)v4[11];
    unint64_t v15 = v4[12];
    if ((unint64_t)v16 >= v15)
    {
      uint64_t v18 = (char *)v4[10];
      uint64_t v19 = (v16 - v18) >> 4;
      unint64_t v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 60) {
        goto LABEL_30;
      }
      uint64_t v21 = v15 - (void)v18;
      if (v21 >> 3 > v20) {
        unint64_t v20 = v21 >> 3;
      }
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v22 = v20;
      }
      if (v22)
      {
        if (v22 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v23 = (char *)operator new(16 * v22);
      }
      else
      {
        unint64_t v23 = 0;
      }
      uint64_t v24 = &v23[16 * v19];
      *(_DWORD *)uint64_t v24 = v6;
      *((_DWORD *)v24 + 1) = v5;
      *((_DWORD *)v24 + 2) = v8;
      *((_DWORD *)v24 + 3) = v7;
      unint64_t v17 = v24 + 16;
      if (v16 != v18)
      {
        do
        {
          *((_OWORD *)v24 - 1) = *((_OWORD *)v16 - 1);
          v24 -= 16;
          v16 -= 16;
        }
        while (v16 != v18);
        uint64_t v16 = (char *)v4[10];
      }
      v4[10] = v24;
      v4[11] = v17;
      v4[12] = &v23[16 * v22];
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v16 = v6;
      *((_DWORD *)v16 + 1) = v5;
      unint64_t v17 = v16 + 16;
      *((_DWORD *)v16 + 2) = v8;
      *((_DWORD *)v16 + 3) = v7;
    }
    v4[11] = v17;
    uint64_t v12 = v4[31];
  }
  else
  {
    uint64_t v11 = (_DWORD *)(v4[10] + 2 * ((void)v9 - v4[7]));
    *uint64_t v11 = v6;
    v11[1] = v5;
    v11[2] = v8;
    void v11[3] = v7;
    uint64_t v12 = v4[31];
    if (v11 != (_DWORD *)v4[11])
    {
      uint64_t v13 = (void *)v4[16];
      if (v13)
      {
        while (1)
        {
          uint64_t v29 = &v27;
          uint64_t v30 = 1;
          uint64_t v28 = v12;
          uint64_t v14 = v13[6];
          if (!v14) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v14 + 48))(v14, &v28, &v29);
          uint64_t v13 = (void *)*v13;
          if (!v13) {
            return;
          }
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  long long v25 = (void *)v4[22];
  if (v25)
  {
    while (1)
    {
      uint64_t v29 = &v27;
      uint64_t v30 = 1;
      uint64_t v28 = v12;
      uint64_t v26 = v25[6];
      if (!v26) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v26 + 48))(v26, &v28, &v29);
      long long v25 = (void *)*v25;
      if (!v25) {
        return;
      }
    }
    goto LABEL_29;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::AlbedoTintColor>(gdc::Entity,md::ls::AlbedoTintColor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF522280;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::AlbedoTintColor>(gdc::Entity,md::ls::AlbedoTintColor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF522280;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::AlbedoTintColor>(gdc::Entity,md::ls::AlbedoTintColor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::OrientedBox>(gdc::Entity,md::ls::OrientedBox &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(void *a1, int8x8_t *a2)
{
  uint64_t v3 = a1[14];
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::OrientedBox>(a2);
  uint64_t v43 = a1[1];
  uint64_t v44 = a1[2];
  uint64_t v5 = a1[5];
  uint64_t v41 = a1[4];
  uint64_t v42 = a1[3];
  uint64_t v6 = a1[6];
  uint64_t v40 = a1[7];
  uint64_t v7 = a1[8];
  uint64_t v8 = a1[9];
  uint64_t v9 = a1[10];
  uint64_t v10 = a1[11];
  uint64_t v12 = a1[12];
  uint64_t v11 = a1[13];
  uint64_t v45 = v3;
  uint64_t v13 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v45);
  if (v14)
  {
    unint64_t v20 = (void *)v4[11];
    unint64_t v19 = v4[12];
    if ((unint64_t)v20 >= v19)
    {
      unint64_t v22 = (void *)v4[10];
      unint64_t v23 = 0x4EC4EC4EC4EC4EC5 * (v20 - v22) + 1;
      uint64_t v25 = v6;
      uint64_t v24 = v11;
      uint64_t v27 = v43;
      uint64_t v26 = v44;
      uint64_t v28 = v5;
      if (v23 > 0x276276276276276) {
        goto LABEL_32;
      }
      unint64_t v29 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v19 - (void)v22) >> 3);
      if (2 * v29 > v23) {
        unint64_t v23 = 2 * v29;
      }
      if (v29 >= 0x13B13B13B13B13BLL) {
        unint64_t v30 = 0x276276276276276;
      }
      else {
        unint64_t v30 = v23;
      }
      if (v30)
      {
        if (v30 > 0x276276276276276) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v31 = (char *)operator new(104 * v30);
        uint64_t v25 = v6;
        uint64_t v24 = v11;
        uint64_t v27 = v43;
        uint64_t v26 = v44;
        uint64_t v28 = v5;
      }
      else
      {
        uint64_t v31 = 0;
      }
      uint64_t v32 = &v31[8 * (v20 - v22)];
      *(void *)uint64_t v32 = v27;
      *((void *)v32 + 1) = v26;
      *((void *)v32 + 2) = v42;
      *((void *)v32 + 3) = v41;
      *((void *)v32 + 4) = v28;
      *((void *)v32 + 5) = v25;
      *((void *)v32 + 6) = v40;
      *((void *)v32 + 7) = v7;
      *((void *)v32 + 8) = v8;
      *((void *)v32 + 9) = v9;
      *((void *)v32 + 10) = v10;
      *((void *)v32 + 11) = v12;
      *((void *)v32 + 12) = v24;
      uint64_t v21 = v32 + 104;
      if (v20 != v22)
      {
        do
        {
          long long v33 = *(_OWORD *)(v20 - 13);
          *((void *)v32 - 11) = *(v20 - 11);
          *(_OWORD *)(v32 - 104) = v33;
          long long v34 = *((_OWORD *)v20 - 5);
          *((void *)v32 - 8) = *(v20 - 8);
          *((_OWORD *)v32 - 5) = v34;
          *((void *)v32 - 7) = *(v20 - 7);
          long long v35 = *((_OWORD *)v20 - 3);
          long long v36 = *((_OWORD *)v20 - 1);
          *((_OWORD *)v32 - 2) = *((_OWORD *)v20 - 2);
          *((_OWORD *)v32 - 1) = v36;
          *((_OWORD *)v32 - 3) = v35;
          v32 -= 104;
          v20 -= 13;
        }
        while (v20 != v22);
        unint64_t v20 = (void *)v4[10];
      }
      v4[10] = v32;
      v4[11] = v21;
      v4[12] = &v31[104 * v30];
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      *unint64_t v20 = v43;
      v20[1] = v44;
      void v20[2] = v42;
      void v20[3] = v41;
      v20[4] = v5;
      v20[5] = v6;
      v20[6] = v40;
      v20[7] = v7;
      v20[8] = v8;
      v20[9] = v9;
      v20[10] = v10;
      v20[11] = v12;
      uint64_t v21 = v20 + 13;
      v20[12] = v11;
    }
    v4[11] = v21;
  }
  else
  {
    unint64_t v15 = (void *)(v4[10] + 104 * (((uint64_t)v13 - v4[7]) >> 3));
    v15[4] = v5;
    v15[5] = v6;
    void *v15 = v43;
    v15[1] = v44;
    v15[2] = v42;
    v15[3] = v41;
    v15[6] = v40;
    v15[7] = v7;
    v15[8] = v8;
    v15[9] = v9;
    v15[10] = v10;
    v15[11] = v12;
    v15[12] = v11;
    if (v15 != (void *)v4[11])
    {
      uint64_t v16 = (void *)v4[16];
      if (v16)
      {
        uint64_t v17 = v4[31];
        while (1)
        {
          uint64_t v47 = &v45;
          uint64_t v48 = 1;
          uint64_t v46 = v17;
          uint64_t v18 = v16[6];
          if (!v18) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v18 + 48))(v18, &v46, &v47);
          uint64_t v16 = (void *)*v16;
          if (!v16) {
            return;
          }
        }
LABEL_31:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_32:
        abort();
      }
      return;
    }
  }
  uint64_t v37 = (void *)v4[22];
  if (v37)
  {
    uint64_t v38 = v4[31];
    while (1)
    {
      uint64_t v47 = &v45;
      uint64_t v48 = 1;
      uint64_t v46 = v38;
      uint64_t v39 = v37[6];
      if (!v39) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v39 + 48))(v39, &v46, &v47);
      uint64_t v37 = (void *)*v37;
      if (!v37) {
        return;
      }
    }
    goto LABEL_31;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::OrientedBox>(gdc::Entity,md::ls::OrientedBox &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF521AE8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = v3;
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  __n128 result = *(__n128 *)(a1 + 64);
  long long v5 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 96) = v5;
  *(__n128 *)(a2 + 64) = result;
  *(void *)(a2 + 112) = *(void *)(a1 + 112);
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::OrientedBox>(gdc::Entity,md::ls::OrientedBox &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0x78uLL);
  *(void *)long long v2 = &unk_1EF521AE8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  *((void *)v2 + 6) = *(void *)(a1 + 48);
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  long long v3 = *(_OWORD *)(a1 + 80);
  *((_OWORD *)v2 + 4) = *(_OWORD *)(a1 + 64);
  *((_OWORD *)v2 + 5) = v3;
  __n128 result = *(__n128 *)(a1 + 96);
  *((__n128 *)v2 + 6) = result;
  *((void *)v2 + 14) = *(void *)(a1 + 112);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::OrientedBox>(gdc::Entity,md::ls::OrientedBox &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleEmissiveDataKeyHandle>(gdc::Entity,md::ls::StyleEmissiveDataKeyHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::StyleEmissiveDataKeyHandle>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_34;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v20 = operator new(8 * v19);
      }
      else
      {
        unint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      unint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      char v14 = v21 + 1;
      if (v13 != v15)
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_38;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_38;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      char v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      uint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          long long v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          uint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  unint64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      long long v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      unint64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_33;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleEmissiveDataKeyHandle>(gdc::Entity,md::ls::StyleEmissiveDataKeyHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF524908;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleEmissiveDataKeyHandle>(gdc::Entity,md::ls::StyleEmissiveDataKeyHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0x18uLL);
  *(void *)long long v2 = &unk_1EF524908;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleEmissiveDataKeyHandle>(gdc::Entity,md::ls::StyleEmissiveDataKeyHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialID>(gdc::Entity,md::ls::MaterialID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v42 = 0x764AD34FCA61B6DLL;
  int8x8_t v3 = a2[16];
  if (!*(void *)&v3) {
    goto LABEL_21;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    uint64_t v5 = 0x764AD34FCA61B6DLL;
    if (*(void *)&v3 <= 0x764AD34FCA61B6DuLL) {
      uint64_t v5 = 0x764AD34FCA61B6DuLL % *(void *)&v3;
    }
  }
  else
  {
    uint64_t v5 = (*(void *)&v3 - 1) & 0x764AD34FCA61B6DLL;
  }
  uint64_t v6 = *(void **)(*(void *)&a2[15] + 8 * v5);
  if (!v6 || (char v7 = (void *)*v6) == 0) {
LABEL_21:
  }
    operator new();
  if (v4.u32[0] < 2uLL)
  {
    uint64_t v8 = *(void *)&v3 - 1;
    while (1)
    {
      uint64_t v10 = v7[1];
      if (v10 == 0x764AD34FCA61B6DLL)
      {
        if (v7[2] == 0x764AD34FCA61B6DLL) {
          goto LABEL_54;
        }
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_21;
      }
      char v7 = (void *)*v7;
      if (!v7) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v7[1];
    if (v9 == 0x764AD34FCA61B6DLL) {
      break;
    }
    if (v9 >= *(void *)&v3) {
      v9 %= *(void *)&v3;
    }
    if (v9 != v5) {
      goto LABEL_21;
    }
LABEL_11:
    char v7 = (void *)*v7;
    if (!v7) {
      goto LABEL_21;
    }
  }
  if (v7[2] != 0x764AD34FCA61B6DLL) {
    goto LABEL_11;
  }
LABEL_54:
  uint64_t v38 = (void *)v7[3];
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v41 = v2;
  unint64_t v12 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v38 + 4, (uint64_t)&v41);
  if (v13)
  {
    unint64_t v19 = (char *)v38[11];
    unint64_t v18 = v38[12];
    if ((unint64_t)v19 >= v18)
    {
      uint64_t v21 = (char *)v38[10];
      uint64_t v22 = (v19 - v21) >> 3;
      unint64_t v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61) {
        goto LABEL_56;
      }
      uint64_t v24 = v18 - (void)v21;
      if (v24 >> 2 > v23) {
        unint64_t v23 = v24 >> 2;
      }
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v23;
      }
      if (v25)
      {
        if (v25 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v26 = operator new(8 * v25);
      }
      else
      {
        uint64_t v26 = 0;
      }
      uint64_t v27 = &v26[8 * v22];
      long long v28 = &v26[8 * v25];
      *uint64_t v27 = v11;
      unint64_t v20 = v27 + 1;
      if (v19 != v21)
      {
        unint64_t v29 = v19 - v21 - 8;
        if (v29 < 0x58) {
          goto LABEL_60;
        }
        if ((unint64_t)(v21 - v26) < 0x20) {
          goto LABEL_60;
        }
        uint64_t v30 = (v29 >> 3) + 1;
        uint64_t v31 = &v26[8 * v22 - 16];
        uint64_t v32 = v19 - 16;
        uint64_t v33 = v30 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v34 = *(_OWORD *)v32;
          *(v31 - 1) = *((_OWORD *)v32 - 1);
          *uint64_t v31 = v34;
          v31 -= 2;
          v32 -= 32;
          v33 -= 4;
        }
        while (v33);
        v27 -= v30 & 0x3FFFFFFFFFFFFFFCLL;
        v19 -= 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
        if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_60:
          do
          {
            uint64_t v35 = *((void *)v19 - 1);
            v19 -= 8;
            *--uint64_t v27 = v35;
          }
          while (v19 != v21);
        }
      }
      v38[10] = v27;
      v38[11] = v20;
      v38[12] = v28;
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *(void *)unint64_t v19 = v11;
      unint64_t v20 = v19 + 8;
    }
    v38[11] = v20;
    uint64_t v15 = v38[31];
LABEL_50:
    long long v36 = (void *)v38[22];
    if (!v36) {
      return;
    }
    while (1)
    {
      uint64_t v39 = &v41;
      uint64_t v40 = 1;
      uint64_t v42 = v15;
      uint64_t v37 = v36[6];
      if (!v37) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v37 + 48))(v37, &v42, &v39);
      long long v36 = (void *)*v36;
      if (!v36) {
        return;
      }
    }
LABEL_55:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_56:
    abort();
  }
  char v14 = (void *)((char *)v12 + v38[10] - v38[7]);
  void *v14 = v11;
  uint64_t v15 = v38[31];
  if (v14 == (void *)v38[11]) {
    goto LABEL_50;
  }
  uint64_t v16 = (void *)v38[16];
  if (v16)
  {
    while (1)
    {
      uint64_t v39 = &v41;
      uint64_t v40 = 1;
      uint64_t v42 = v15;
      uint64_t v17 = v16[6];
      if (!v17) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v17 + 48))(v17, &v42, &v39);
      uint64_t v16 = (void *)*v16;
      if (!v16) {
        return;
      }
    }
    goto LABEL_55;
  }
}

void sub_1A266D784(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<md::ls::MaterialID>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::MaterialID>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(void *)(v14 + 8 * v7) = *(void *)(v15 - 8);
  a1[11] = v15 - 8;
  uint64_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::MaterialID>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::MaterialID>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialID>(gdc::Entity,md::ls::MaterialID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF521860;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialID>(gdc::Entity,md::ls::MaterialID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF521860;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialID>(gdc::Entity,md::ls::MaterialID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::BlendRasterConstantDataHandle>(gdc::Entity,md::ls::BlendRasterConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::BlendRasterConstantDataHandle>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    char v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(8 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      uint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        uint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        unint64_t v25 = &v20[8 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *unint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          uint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)char v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      unint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          long long v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          unint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  uint64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      long long v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      uint64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::BlendRasterConstantDataHandle>(gdc::Entity,md::ls::BlendRasterConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF525718;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::BlendRasterConstantDataHandle>(gdc::Entity,md::ls::BlendRasterConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF525718;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::BlendRasterConstantDataHandle>(gdc::Entity,md::ls::BlendRasterConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RasterOverlayConstantDataHandle>(gdc::Entity,md::ls::RasterOverlayConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::RasterOverlayConstantDataHandle>(a2);
  long long v24 = *(_OWORD *)(a1 + 8);
  long long v25 = *(_OWORD *)(a1 + 24);
  uint64_t v26 = v3;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v26);
  if (v6)
  {
    unint64_t v12 = (char *)v4[11];
    unint64_t v11 = v4[12];
    if ((unint64_t)v12 >= v11)
    {
      uint64_t v14 = (char *)v4[10];
      uint64_t v15 = (v12 - v14) >> 5;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 59) {
        goto LABEL_30;
      }
      uint64_t v17 = v11 - (void)v14;
      if (v17 >> 4 > v16) {
        unint64_t v16 = v17 >> 4;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 >> 59) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v19 = (char *)operator new(32 * v18);
      }
      else
      {
        unint64_t v19 = 0;
      }
      uint64_t v20 = &v19[32 * v15];
      *(_OWORD *)uint64_t v20 = v24;
      *((_OWORD *)v20 + 1) = v25;
      char v13 = v20 + 32;
      if (v12 != v14)
      {
        do
        {
          long long v21 = *((_OWORD *)v12 - 1);
          *((_OWORD *)v20 - 2) = *((_OWORD *)v12 - 2);
          *((_OWORD *)v20 - 1) = v21;
          v20 -= 32;
          v12 -= 32;
        }
        while (v12 != v14);
        unint64_t v12 = (char *)v4[10];
      }
      v4[10] = v20;
      v4[11] = v13;
      v4[12] = &v19[32 * v18];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v12 = v24;
      *((_OWORD *)v12 + 1) = v25;
      char v13 = v12 + 32;
    }
    v4[11] = v13;
    uint64_t v8 = v4[31];
  }
  else
  {
    char v7 = (_OWORD *)(v4[10] + 4 * ((void)v5 - v4[7]));
    *char v7 = v24;
    v7[1] = v25;
    uint64_t v8 = v4[31];
    if (v7 != (_OWORD *)v4[11])
    {
      uint64_t v9 = (void *)v4[16];
      if (v9)
      {
        while (1)
        {
          long long v28 = &v26;
          uint64_t v29 = 1;
          uint64_t v27 = v8;
          uint64_t v10 = v9[6];
          if (!v10) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v10 + 48))(v10, &v27, &v28);
          uint64_t v9 = (void *)*v9;
          if (!v9) {
            return;
          }
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  uint64_t v22 = (void *)v4[22];
  if (v22)
  {
    while (1)
    {
      long long v28 = &v26;
      uint64_t v29 = 1;
      uint64_t v27 = v8;
      uint64_t v23 = v22[6];
      if (!v23) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v23 + 48))(v23, &v27, &v28);
      uint64_t v22 = (void *)*v22;
      if (!v22) {
        return;
      }
    }
    goto LABEL_29;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RasterOverlayConstantDataHandle>(gdc::Entity,md::ls::RasterOverlayConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF525B50;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RasterOverlayConstantDataHandle>(gdc::Entity,md::ls::RasterOverlayConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EF525B50;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RasterOverlayConstantDataHandle>(gdc::Entity,md::ls::RasterOverlayConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasOverlayPatch>(gdc::Entity,md::ls::HasOverlayPatch &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 12);
  HasOverlay = (void *)gdc::Registry::storage<md::ls::HasOverlayPatch>(a2);
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t v36 = v3;
  char v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(HasOverlay + 4, (uint64_t)&v36);
  if (v7)
  {
    char v13 = (unsigned char *)HasOverlay[11];
    unint64_t v12 = HasOverlay[12];
    if ((unint64_t)v13 < v12)
    {
      unsigned char *v13 = v5;
      uint64_t v14 = (uint64_t)(v13 + 1);
LABEL_37:
      HasOverlay[11] = v14;
      uint64_t v9 = HasOverlay[31];
      goto LABEL_38;
    }
    uint64_t v15 = (unsigned char *)HasOverlay[10];
    unint64_t v16 = v13 - v15;
    uint64_t v17 = v13 - v15 + 1;
    if (v17 < 0) {
      goto LABEL_43;
    }
    unint64_t v18 = v12 - (void)v15;
    if (2 * v18 > v17) {
      uint64_t v17 = 2 * v18;
    }
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v19 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v19 = v17;
    }
    if (v19) {
      uint64_t v20 = (char *)operator new(v19);
    }
    else {
      uint64_t v20 = 0;
    }
    long long v21 = &v20[v16];
    uint64_t v22 = &v20[v19];
    v20[v16] = v5;
    uint64_t v14 = (uint64_t)&v20[v16 + 1];
    if (v13 == v15)
    {
LABEL_35:
      HasOverlay[10] = v21;
      HasOverlay[11] = v14;
      HasOverlay[12] = v22;
      if (v15) {
        operator delete(v15);
      }
      goto LABEL_37;
    }
    if (v16 < 8 || (unint64_t)(v15 - v20) < 0x20) {
      goto LABEL_32;
    }
    if (v16 >= 0x20)
    {
      unint64_t v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      long long v24 = (long long *)(v13 - 16);
      long long v25 = &v20[v13 - 16 - v15];
      unint64_t v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v27 = *v24;
        *((_OWORD *)v25 - 1) = *(v24 - 1);
        *(_OWORD *)long long v25 = v27;
        v25 -= 32;
        v24 -= 2;
        v26 -= 32;
      }
      while (v26);
      if (v16 == v23) {
        goto LABEL_34;
      }
      if ((v16 & 0x18) == 0)
      {
        v21 -= v23;
        v13 -= v23;
        goto LABEL_32;
      }
    }
    else
    {
      unint64_t v23 = 0;
    }
    unint64_t v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v29 = &v13[-v23 - 8];
    int64_t v30 = v29 - v15;
    do
    {
      uint64_t v31 = *(void *)v29;
      v29 -= 8;
      *(void *)&v20[v30] = v31;
      v30 -= 8;
      v28 += 8;
    }
    while (v28);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_34;
    }
    v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
LABEL_32:
    uint64_t v32 = v21 - 1;
    do
    {
      char v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
LABEL_34:
    long long v21 = v20;
    goto LABEL_35;
  }
  uint64_t v8 = (unsigned char *)(HasOverlay[10] + (((uint64_t)v6 - HasOverlay[7]) >> 3));
  *uint64_t v8 = v5;
  uint64_t v9 = HasOverlay[31];
  if (v8 != (unsigned char *)HasOverlay[11])
  {
    uint64_t v10 = (void *)HasOverlay[16];
    if (v10)
    {
      while (1)
      {
        uint64_t v38 = &v36;
        uint64_t v39 = 1;
        uint64_t v37 = v9;
        uint64_t v11 = v10[6];
        if (!v11) {
          break;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v37, &v38);
        uint64_t v10 = (void *)*v10;
        if (!v10) {
          return;
        }
      }
LABEL_42:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
      abort();
    }
    return;
  }
LABEL_38:
  long long v34 = (void *)HasOverlay[22];
  if (v34)
  {
    while (1)
    {
      uint64_t v38 = &v36;
      uint64_t v39 = 1;
      uint64_t v37 = v9;
      uint64_t v35 = v34[6];
      if (!v35) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v35 + 48))(v35, &v37, &v38);
      long long v34 = (void *)*v34;
      if (!v34) {
        return;
      }
    }
    goto LABEL_42;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasOverlayPatch>(gdc::Entity,md::ls::HasOverlayPatch &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5223E8;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasOverlayPatch>(gdc::Entity,md::ls::HasOverlayPatch &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF5223E8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasOverlayPatch>(gdc::Entity,md::ls::HasOverlayPatch &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::OverlayTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::OverlayTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::TextureHandleForType<DaVinci::OverlayTexture>>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  char v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    char v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(8 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      long long v21 = &v20[8 * v16];
      uint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        uint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        long long v25 = &v20[8 * v16 - 16];
        unint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *long long v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--long long v21 = v29;
          }
          while (v13 != v15);
          uint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)char v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      uint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          long long v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          uint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  int64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      long long v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      int64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::OverlayTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::OverlayTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF523480;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::OverlayTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::OverlayTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF523480;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::TextureHandleForType<DaVinci::OverlayTexture>>(gdc::Entity,md::ls::TextureHandleForType<DaVinci::OverlayTexture> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ColorRampDataHandle>(gdc::Entity,md::ls::ColorRampDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::ColorRampDataHandle>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  char v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    char v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(8 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      long long v21 = &v20[8 * v16];
      uint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        uint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        long long v25 = &v20[8 * v16 - 16];
        unint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *long long v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--long long v21 = v29;
          }
          while (v13 != v15);
          uint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)char v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      uint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          long long v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          uint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  int64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      long long v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      int64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ColorRampDataHandle>(gdc::Entity,md::ls::ColorRampDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF522FB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ColorRampDataHandle>(gdc::Entity,md::ls::ColorRampDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF522FB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ColorRampDataHandle>(gdc::Entity,md::ls::ColorRampDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsDualElevation>(gdc::Entity,md::ls::IsDualElevation &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  uint64_t v33 = 0x38C48843ABFB6D46;
  int8x8_t v3 = a2[16];
  if (!*(void *)&v3) {
    goto LABEL_21;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    uint64_t v5 = 0x38C48843ABFB6D46;
    if (*(void *)&v3 <= 0x38C48843ABFB6D46uLL) {
      uint64_t v5 = 0x38C48843ABFB6D46uLL % *(void *)&v3;
    }
  }
  else
  {
    uint64_t v5 = (*(void *)&v3 - 1) & 0x38C48843ABFB6D46;
  }
  char v6 = *(void **)(*(void *)&a2[15] + 8 * v5);
  if (!v6 || (char v7 = (void *)*v6) == 0) {
LABEL_21:
  }
    operator new();
  if (v4.u32[0] < 2uLL)
  {
    uint64_t v8 = *(void *)&v3 - 1;
    while (1)
    {
      uint64_t v10 = v7[1];
      if (v10 == 0x38C48843ABFB6D46)
      {
        if (v7[2] == 0x38C48843ABFB6D46) {
          goto LABEL_48;
        }
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_21;
      }
      char v7 = (void *)*v7;
      if (!v7) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v7[1];
    if (v9 == 0x38C48843ABFB6D46) {
      break;
    }
    if (v9 >= *(void *)&v3) {
      v9 %= *(void *)&v3;
    }
    if (v9 != v5) {
      goto LABEL_21;
    }
LABEL_11:
    char v7 = (void *)*v7;
    if (!v7) {
      goto LABEL_21;
    }
  }
  if (v7[2] != 0x38C48843ABFB6D46) {
    goto LABEL_11;
  }
LABEL_48:
  uint64_t v29 = (void *)v7[3];
  uint64_t v32 = v2;
  uint64_t v11 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v29 + 4, (uint64_t)&v32);
  if (v12)
  {
    unint64_t v17 = (unsigned char *)v29[11];
    unint64_t v16 = v29[12];
    if ((unint64_t)v17 >= v16)
    {
      unint64_t v19 = (char *)v29[10];
      uint64_t v20 = v17 - v19;
      uint64_t v21 = v17 - v19 + 1;
      if (v21 < 0) {
        goto LABEL_50;
      }
      unint64_t v22 = v16 - (void)v19;
      if (2 * v22 > v21) {
        uint64_t v21 = 2 * v22;
      }
      if (v22 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v23 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v23 = v21;
      }
      if (v23) {
        uint64_t v24 = (char *)operator new(v23);
      }
      else {
        uint64_t v24 = 0;
      }
      long long v25 = &v24[v23];
      uint64_t v18 = (uint64_t)&v24[v20 + 1];
      unint64_t v26 = (char *)(v19 - v17);
      if (v19 == v17) {
        unint64_t v26 = 0;
      }
      v29[10] = &v24[v20 + (void)v26];
      v29[11] = v18;
      v29[12] = v25;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      uint64_t v18 = (uint64_t)(v17 + 1);
    }
    v29[11] = v18;
    uint64_t v13 = v29[31];
LABEL_44:
    uint64_t v27 = (void *)v29[22];
    if (!v27) {
      return;
    }
    while (1)
    {
      int64_t v30 = &v32;
      uint64_t v31 = 1;
      uint64_t v33 = v13;
      uint64_t v28 = v27[6];
      if (!v28) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v28 + 48))(v28, &v33, &v30);
      uint64_t v27 = (void *)*v27;
      if (!v27) {
        return;
      }
    }
LABEL_49:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_50:
    abort();
  }
  uint64_t v13 = v29[31];
  if (v29[10] + (((uint64_t)v11 - v29[7]) >> 3) == v29[11]) {
    goto LABEL_44;
  }
  uint64_t v14 = (void *)v29[16];
  if (v14)
  {
    while (1)
    {
      int64_t v30 = &v32;
      uint64_t v31 = 1;
      uint64_t v33 = v13;
      uint64_t v15 = v14[6];
      if (!v15) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v15 + 48))(v15, &v33, &v30);
      uint64_t v14 = (void *)*v14;
      if (!v14) {
        return;
      }
    }
    goto LABEL_49;
  }
}

void sub_1A266EC88(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IsDualElevation>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::IsDualElevation>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IsDualElevation>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::IsDualElevation>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsDualElevation>(gdc::Entity,md::ls::IsDualElevation &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF522430;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsDualElevation>(gdc::Entity,md::ls::IsDualElevation &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF522430;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsDualElevation>(gdc::Entity,md::ls::IsDualElevation &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialRasterMaxIndex>(gdc::Entity,md::ls::MaterialRasterMaxIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 12);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::MaterialRasterMaxIndex>(a2);
  __int16 v5 = *(_WORD *)(a1 + 8);
  uint64_t v33 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v33);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = (char *)v4[10];
      uint64_t v16 = v13 - v15;
      if (v13 - v15 <= -3) {
        goto LABEL_35;
      }
      uint64_t v17 = v16 >> 1;
      unint64_t v18 = v12 - (void)v15;
      if (v18 <= (v16 >> 1) + 1) {
        unint64_t v19 = v17 + 1;
      }
      else {
        unint64_t v19 = v18;
      }
      if (v18 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v20 = v19;
      }
      if (v20)
      {
        if (v20 < 0) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v21 = operator new(2 * v20);
      }
      else
      {
        uint64_t v21 = 0;
      }
      unint64_t v22 = &v21[2 * v17];
      size_t v23 = &v21[2 * v20];
      _WORD *v22 = v5;
      uint64_t v14 = v22 + 1;
      if (v13 != v15)
      {
        unint64_t v24 = v13 - v15 - 2;
        if (v24 < 0x1E) {
          goto LABEL_39;
        }
        if ((unint64_t)(v13 - &v21[v16 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
          goto LABEL_39;
        }
        uint64_t v25 = (v24 >> 1) + 1;
        unint64_t v26 = &v21[2 * v17 - 16];
        uint64_t v27 = v13 - 16;
        unint64_t v28 = v25 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          long long v29 = *(_OWORD *)v27;
          *(v26 - 1) = *((_OWORD *)v27 - 1);
          *unint64_t v26 = v29;
          v26 -= 2;
          v27 -= 32;
          v28 -= 16;
        }
        while (v28);
        v22 -= v25 & 0xFFFFFFFFFFFFFFF0;
        v13 -= 2 * (v25 & 0xFFFFFFFFFFFFFFF0);
        if (v25 != (v25 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_39:
          do
          {
            __int16 v30 = *((_WORD *)v13 - 1);
            v13 -= 2;
            *--unint64_t v22 = v30;
          }
          while (v13 != v15);
        }
      }
      v4[10] = v22;
      v4[11] = v14;
      v4[12] = v23;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(_WORD *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 2;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (_WORD *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 2));
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (_WORD *)v4[11])
    {
      unint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v35 = &v33;
          uint64_t v36 = 1;
          uint64_t v34 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v34, &v35);
          unint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_34:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_35:
        abort();
      }
      return;
    }
  }
  uint64_t v31 = (void *)v4[22];
  if (v31)
  {
    while (1)
    {
      uint64_t v35 = &v33;
      uint64_t v36 = 1;
      uint64_t v34 = v9;
      uint64_t v32 = v31[6];
      if (!v32) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v32 + 48))(v32, &v34, &v35);
      uint64_t v31 = (void *)*v31;
      if (!v31) {
        return;
      }
    }
    goto LABEL_34;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialRasterMaxIndex>(gdc::Entity,md::ls::MaterialRasterMaxIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF523AF8;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialRasterMaxIndex>(gdc::Entity,md::ls::MaterialRasterMaxIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF523AF8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MaterialRasterMaxIndex>(gdc::Entity,md::ls::MaterialRasterMaxIndex &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasMaterialRaster>(gdc::Entity,md::ls::HasMaterialRaster &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  HasMaterial = (void *)gdc::Registry::storage<md::ls::HasMaterialRaster>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(HasMaterial + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)HasMaterial[11];
    unint64_t v12 = HasMaterial[12];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = (char *)HasMaterial[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(8 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      unint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        uint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        unint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          uint64_t v15 = (char *)HasMaterial[10];
        }
      }
      HasMaterial[10] = v21;
      HasMaterial[11] = v14;
      HasMaterial[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    HasMaterial[11] = v14;
    uint64_t v9 = HasMaterial[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + HasMaterial[10] - HasMaterial[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = HasMaterial[31];
    if (v8 != (void *)HasMaterial[11])
    {
      unint64_t v10 = (void *)HasMaterial[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          unint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  __int16 v30 = (void *)HasMaterial[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      __int16 v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasMaterialRaster>(gdc::Entity,md::ls::HasMaterialRaster &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF522C10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasMaterialRaster>(gdc::Entity,md::ls::HasMaterialRaster &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF522C10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasMaterialRaster>(gdc::Entity,md::ls::HasMaterialRaster &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CanCastShadow>(gdc::Entity,md::ls::CanCastShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  CanCast = (void *)gdc::Registry::storage<md::ls::CanCastShadow>(a2);
  uint64_t v22 = v2;
  uint64_t v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(CanCast + 4, (uint64_t)&v22);
  if (v5)
  {
    unint64_t v10 = (unsigned char *)CanCast[11];
    unint64_t v9 = CanCast[12];
    if ((unint64_t)v10 >= v9)
    {
      unint64_t v12 = (char *)CanCast[10];
      uint64_t v13 = v10 - v12;
      uint64_t v14 = v10 - v12 + 1;
      if (v14 < 0) {
        goto LABEL_28;
      }
      unint64_t v15 = v9 - (void)v12;
      if (2 * v15 > v14) {
        uint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16) {
        unint64_t v17 = (char *)operator new(v16);
      }
      else {
        unint64_t v17 = 0;
      }
      uint64_t v18 = &v17[v16];
      uint64_t v11 = (uint64_t)&v17[v13 + 1];
      unint64_t v19 = (char *)(v12 - v10);
      if (v12 == v10) {
        unint64_t v19 = 0;
      }
      CanCast[10] = &v17[v13 + (void)v19];
      CanCast[11] = v11;
      CanCast[12] = v18;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t v11 = (uint64_t)(v10 + 1);
    }
    CanCast[11] = v11;
    uint64_t v6 = CanCast[31];
  }
  else
  {
    uint64_t v6 = CanCast[31];
    if (CanCast[10] + (((uint64_t)v4 - CanCast[7]) >> 3) != CanCast[11])
    {
      char v7 = (void *)CanCast[16];
      if (v7)
      {
        while (1)
        {
          uint64_t v24 = &v22;
          uint64_t v25 = 1;
          uint64_t v23 = v6;
          uint64_t v8 = v7[6];
          if (!v8) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v8 + 48))(v8, &v23, &v24);
          char v7 = (void *)*v7;
          if (!v7) {
            return;
          }
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  uint64_t v20 = (void *)CanCast[22];
  if (v20)
  {
    while (1)
    {
      uint64_t v24 = &v22;
      uint64_t v25 = 1;
      uint64_t v23 = v6;
      uint64_t v21 = v20[6];
      if (!v21) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v21 + 48))(v21, &v23, &v24);
      uint64_t v20 = (void *)*v20;
      if (!v20) {
        return;
      }
    }
    goto LABEL_27;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CanCastShadow>(gdc::Entity,md::ls::CanCastShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF521CE0;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CanCastShadow>(gdc::Entity,md::ls::CanCastShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF521CE0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CanCastShadow>(gdc::Entity,md::ls::CanCastShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MarketMask>(gdc::Entity,md::ls::MarketMask &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 12);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::MarketMask>(a2);
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t v36 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if (v7)
  {
    uint64_t v13 = (unsigned char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      unsigned char *v13 = v5;
      uint64_t v14 = (uint64_t)(v13 + 1);
LABEL_39:
      v4[11] = v14;
      uint64_t v9 = v4[31];
      goto LABEL_40;
    }
    unint64_t v15 = (unsigned char *)v4[10];
    unint64_t v16 = v13 - v15;
    uint64_t v17 = v13 - v15 + 1;
    if (v17 < 0) {
      goto LABEL_45;
    }
    unint64_t v18 = v12 - (void)v15;
    if (2 * v18 > v17) {
      uint64_t v17 = 2 * v18;
    }
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v19 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v19 = v17;
    }
    if (v19) {
      uint64_t v20 = operator new(v19);
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = (char *)v20 + v16;
    uint64_t v22 = (char *)v20 + v19;
    *((unsigned char *)v20 + v16) = v5;
    uint64_t v14 = (uint64_t)v20 + v16 + 1;
    if (v13 == v15)
    {
      uint64_t v20 = (char *)v20 + v16;
      goto LABEL_37;
    }
    if (v16 >= 8 && (unint64_t)(v15 - (unsigned char *)v20) >= 0x20)
    {
      if (v16 >= 0x20)
      {
        unint64_t v23 = v16 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v24 = (long long *)(v13 - 16);
        uint64_t v25 = (char *)v20 + v13 - 16 - v15;
        unint64_t v26 = v16 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v27 = *v24;
          *(v25 - 1) = *(v24 - 1);
          *uint64_t v25 = v27;
          v25 -= 2;
          v24 -= 2;
          v26 -= 32;
        }
        while (v26);
        if (v16 == v23) {
          goto LABEL_31;
        }
        if ((v16 & 0x18) == 0)
        {
          v21 -= v23;
          v13 -= v23;
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v23 = 0;
      }
      unint64_t v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v29 = &v13[-v23 - 8];
      __int16 v30 = (char *)(v29 - v15);
      do
      {
        uint64_t v31 = *(void *)v29;
        v29 -= 8;
        *(void *)&v30[(void)v20] = v31;
        v30 -= 8;
        v28 += 8;
      }
      while (v28);
      if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_31:
        uint64_t v13 = v15;
LABEL_37:
        v4[10] = v20;
        v4[11] = v14;
        v4[12] = v22;
        if (v13) {
          operator delete(v13);
        }
        goto LABEL_39;
      }
      v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
      v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
    }
LABEL_34:
    uint64_t v32 = v21 - 1;
    do
    {
      char v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
    uint64_t v13 = (unsigned char *)v4[10];
    goto LABEL_37;
  }
  uint64_t v8 = (unsigned char *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *uint64_t v8 = v5;
  uint64_t v9 = v4[31];
  if (v8 != (unsigned char *)v4[11])
  {
    unint64_t v10 = (void *)v4[16];
    if (v10)
    {
      while (1)
      {
        uint64_t v38 = &v36;
        uint64_t v39 = 1;
        uint64_t v37 = v9;
        uint64_t v11 = v10[6];
        if (!v11) {
          break;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v37, &v38);
        unint64_t v10 = (void *)*v10;
        if (!v10) {
          return;
        }
      }
LABEL_44:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_45:
      abort();
    }
    return;
  }
LABEL_40:
  uint64_t v34 = (void *)v4[22];
  if (v34)
  {
    while (1)
    {
      uint64_t v38 = &v36;
      uint64_t v39 = 1;
      uint64_t v37 = v9;
      uint64_t v35 = v34[6];
      if (!v35) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v35 + 48))(v35, &v37, &v38);
      uint64_t v34 = (void *)*v34;
      if (!v34) {
        return;
      }
    }
    goto LABEL_44;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MarketMask>(gdc::Entity,md::ls::MarketMask &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF521818;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MarketMask>(gdc::Entity,md::ls::MarketMask &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF521818;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MarketMask>(gdc::Entity,md::ls::MarketMask &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsDecal>(gdc::Entity,md::ls::IsDecal &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::IsDecal>(a2);
  uint64_t v22 = v2;
  uint64_t v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if (v5)
  {
    unint64_t v10 = (unsigned char *)v3[11];
    unint64_t v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      unint64_t v12 = (char *)v3[10];
      uint64_t v13 = v10 - v12;
      uint64_t v14 = v10 - v12 + 1;
      if (v14 < 0) {
        goto LABEL_28;
      }
      unint64_t v15 = v9 - (void)v12;
      if (2 * v15 > v14) {
        uint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16) {
        uint64_t v17 = (char *)operator new(v16);
      }
      else {
        uint64_t v17 = 0;
      }
      unint64_t v18 = &v17[v16];
      uint64_t v11 = (uint64_t)&v17[v13 + 1];
      size_t v19 = (char *)(v12 - v10);
      if (v12 == v10) {
        size_t v19 = 0;
      }
      v3[10] = &v17[v13 + (void)v19];
      v3[11] = v11;
      v3[12] = v18;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    uint64_t v6 = v3[31];
  }
  else
  {
    uint64_t v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      char v7 = (void *)v3[16];
      if (v7)
      {
        while (1)
        {
          uint64_t v24 = &v22;
          uint64_t v25 = 1;
          uint64_t v23 = v6;
          uint64_t v8 = v7[6];
          if (!v8) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v8 + 48))(v8, &v23, &v24);
          char v7 = (void *)*v7;
          if (!v7) {
            return;
          }
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  uint64_t v20 = (void *)v3[22];
  if (v20)
  {
    while (1)
    {
      uint64_t v24 = &v22;
      uint64_t v25 = 1;
      uint64_t v23 = v6;
      uint64_t v21 = v20[6];
      if (!v21) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v21 + 48))(v21, &v23, &v24);
      uint64_t v20 = (void *)*v20;
      if (!v20) {
        return;
      }
    }
    goto LABEL_27;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsDecal>(gdc::Entity,md::ls::IsDecal &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF526018;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsDecal>(gdc::Entity,md::ls::IsDecal &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF526018;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsDecal>(gdc::Entity,md::ls::IsDecal &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CustomRenderState>(gdc::Entity,md::ls::CustomRenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = gdc::Registry::storage<md::ls::CustomRenderState>(a2);
  char v5 = (void *)v4;
  long long v6 = *(_OWORD *)(a1 + 8);
  long long v34 = v6;
  uint64_t v7 = *(void *)(a1 + 16);
  if (*((void *)&v6 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v6 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v8 = *(_WORD *)(a1 + 24);
  uint64_t v35 = v3;
  unint64_t v9 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert((void *)(v4 + 32), (uint64_t)&v35);
  if (v10)
  {
    size_t v19 = (char *)v5[11];
    unint64_t v18 = v5[12];
    if ((unint64_t)v19 >= v18)
    {
      uint64_t v21 = (char *)v5[10];
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v21) >> 3);
      unint64_t v23 = v22 + 1;
      if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (void)v21) >> 3);
      if (2 * v24 > v23) {
        unint64_t v23 = 2 * v24;
      }
      if (v24 >= 0x555555555555555) {
        unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v25 = v23;
      }
      if (v25)
      {
        if (v25 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_50;
        }
        unint64_t v26 = operator new(24 * v25);
      }
      else
      {
        unint64_t v26 = 0;
      }
      long long v27 = (char *)&v26[4 * ((v19 - v21) >> 3)];
      *(_OWORD *)long long v27 = v34;
      if (v7)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
        uint64_t v21 = (char *)v5[10];
        size_t v19 = (char *)v5[11];
      }
      unint64_t v28 = (char *)&v26[12 * v25];
      v26[12 * v22 + 8] = v8;
      uint64_t v20 = v27 + 24;
      if (v19 == v21)
      {
        v5[10] = v27;
        v5[11] = v20;
        v5[12] = v28;
      }
      else
      {
        do
        {
          long long v29 = *(_OWORD *)(v19 - 24);
          v19 -= 24;
          *(_OWORD *)(v27 - 24) = v29;
          v27 -= 24;
          *(void *)size_t v19 = 0;
          *((void *)v19 + 1) = 0;
          *((_WORD *)v27 + 8) = *((_WORD *)v19 + 8);
        }
        while (v19 != v21);
        uint64_t v21 = (char *)v5[10];
        __int16 v30 = (char *)v5[11];
        v5[10] = v27;
        v5[11] = v20;
        for (v5[12] = v28; v30 != v21; v30 -= 24)
        {
          uint64_t v31 = (std::__shared_weak_count *)*((void *)v30 - 2);
          if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
      }
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *(_OWORD *)size_t v19 = v34;
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      *((_WORD *)v19 + 8) = v8;
      uint64_t v20 = v19 + 24;
    }
    v5[11] = v20;
    uint64_t v15 = v5[31];
  }
  else
  {
    uint64_t v11 = v5[10];
    uint64_t v12 = ((uint64_t)v9 - v5[7]) >> 3;
    uint64_t v13 = v11 + 24 * v12;
    uint64_t v14 = *(std::__shared_weak_count **)(v13 + 8);
    *(_OWORD *)uint64_t v13 = v34;
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    *(_WORD *)(v11 + 24 * v12 + 16) = v8;
    uint64_t v15 = v5[31];
    if (v13 != v5[11])
    {
      size_t v16 = (void *)v5[16];
      if (v16)
      {
        while (1)
        {
          uint64_t v37 = &v35;
          uint64_t v38 = 1;
          uint64_t v36 = v15;
          uint64_t v17 = v16[6];
          if (!v17) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v17 + 48))(v17, &v36, &v37);
          size_t v16 = (void *)*v16;
          if (!v16) {
            goto LABEL_11;
          }
        }
LABEL_48:
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
LABEL_50:
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
LABEL_11:
      long long v34 = 0u;
      goto LABEL_44;
    }
    long long v34 = 0u;
  }
  for (uint64_t i = (void *)v5[22]; i; uint64_t i = (void *)*i)
  {
    uint64_t v37 = &v35;
    uint64_t v38 = 1;
    uint64_t v36 = v15;
    uint64_t v33 = i[6];
    if (!v33) {
      goto LABEL_48;
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v33 + 48))(v33, &v36, &v37);
  }
LABEL_44:
  if (*((void *)&v34 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v34 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**((void **)&v34 + 1) + 16))(*((void *)&v34 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v34 + 1));
    }
  }
}

void sub_1A2670094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CustomRenderState>(gdc::Entity,md::ls::CustomRenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CustomRenderState>(gdc::Entity,md::ls::CustomRenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CustomRenderState>(gdc::Entity,md::ls::CustomRenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = &unk_1EF522B38;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_WORD *)(a2 + 24) = *(_WORD *)(result + 24);
  *(void *)(a2 + 32) = *(void *)(result + 32);
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CustomRenderState>(gdc::Entity,md::ls::CustomRenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1EF522B38;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((_WORD *)result + 12) = *(_WORD *)(a1 + 24);
  result[4] = *(void *)(a1 + 32);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CustomRenderState>(gdc::Entity,md::ls::CustomRenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func(void *a1)
{
  *a1 = &unk_1EF522B38;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CustomRenderState>(gdc::Entity,md::ls::CustomRenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func(void *a1)
{
  *a1 = &unk_1EF522B38;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::WantsCulledSlices>(gdc::Entity,md::ls::WantsCulledSlices &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::WantsCulledSlices>(a2);
  uint64_t v22 = v2;
  uint64_t v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if (v5)
  {
    char v10 = (unsigned char *)v3[11];
    unint64_t v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      uint64_t v12 = (char *)v3[10];
      uint64_t v13 = v10 - v12;
      uint64_t v14 = v10 - v12 + 1;
      if (v14 < 0) {
        goto LABEL_28;
      }
      unint64_t v15 = v9 - (void)v12;
      if (2 * v15 > v14) {
        uint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16) {
        uint64_t v17 = (char *)operator new(v16);
      }
      else {
        uint64_t v17 = 0;
      }
      unint64_t v18 = &v17[v16];
      uint64_t v11 = (uint64_t)&v17[v13 + 1];
      size_t v19 = (char *)(v12 - v10);
      if (v12 == v10) {
        size_t v19 = 0;
      }
      v3[10] = &v17[v13 + (void)v19];
      v3[11] = v11;
      v3[12] = v18;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    uint64_t v6 = v3[31];
  }
  else
  {
    uint64_t v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      uint64_t v7 = (void *)v3[16];
      if (v7)
      {
        while (1)
        {
          unint64_t v24 = &v22;
          uint64_t v25 = 1;
          uint64_t v23 = v6;
          uint64_t v8 = v7[6];
          if (!v8) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v8 + 48))(v8, &v23, &v24);
          uint64_t v7 = (void *)*v7;
          if (!v7) {
            return;
          }
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  uint64_t v20 = (void *)v3[22];
  if (v20)
  {
    while (1)
    {
      unint64_t v24 = &v22;
      uint64_t v25 = 1;
      uint64_t v23 = v6;
      uint64_t v21 = v20[6];
      if (!v21) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v21 + 48))(v21, &v23, &v24);
      uint64_t v20 = (void *)*v20;
      if (!v20) {
        return;
      }
    }
    goto LABEL_27;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::WantsCulledSlices>(gdc::Entity,md::ls::WantsCulledSlices &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF522D78;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::WantsCulledSlices>(gdc::Entity,md::ls::WantsCulledSlices &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF522D78;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::WantsCulledSlices>(gdc::Entity,md::ls::WantsCulledSlices &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::InstanceTransformHandle>(gdc::Entity,md::ls::InstanceTransformHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::InstanceTransformHandle>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(8 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      uint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        unint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        unint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          unint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      char v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          long long v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          char v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  __int16 v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      long long v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      __int16 v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::InstanceTransformHandle>(gdc::Entity,md::ls::InstanceTransformHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF523CA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::InstanceTransformHandle>(gdc::Entity,md::ls::InstanceTransformHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF523CA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::InstanceTransformHandle>(gdc::Entity,md::ls::InstanceTransformHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshRenderableBounds>(gdc::Entity,md::ls::MeshRenderableBounds &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::MeshRenderableBounds>(a2);
  int v6 = *(_DWORD *)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 12);
  int v8 = *(_DWORD *)(a1 + 16);
  int v7 = *(_DWORD *)(a1 + 20);
  int v10 = *(_DWORD *)(a1 + 24);
  int v9 = *(_DWORD *)(a1 + 28);
  uint64_t v29 = v3;
  uint64_t v11 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v29);
  if (v12)
  {
    uint64_t v18 = (char *)v4[11];
    unint64_t v17 = v4[12];
    if ((unint64_t)v18 >= v17)
    {
      uint64_t v20 = (char *)v4[10];
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v20) >> 3) + 1;
      if (v21 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_30;
      }
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (void)v20) >> 3);
      if (2 * v22 > v21) {
        unint64_t v21 = 2 * v22;
      }
      if (v22 >= 0x555555555555555) {
        unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        if (v23 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v24 = (char *)operator new(24 * v23);
      }
      else
      {
        uint64_t v24 = 0;
      }
      uint64_t v25 = &v24[8 * ((v18 - v20) >> 3)];
      *(_DWORD *)uint64_t v25 = v6;
      *((_DWORD *)v25 + 1) = v5;
      *((_DWORD *)v25 + 2) = v8;
      *((_DWORD *)v25 + 3) = v7;
      *((_DWORD *)v25 + 4) = v10;
      *((_DWORD *)v25 + 5) = v9;
      unint64_t v19 = v25 + 24;
      if (v18 != v20)
      {
        do
        {
          long long v26 = *(_OWORD *)(v18 - 24);
          *((void *)v25 - 1) = *((void *)v18 - 1);
          *(_OWORD *)(v25 - 24) = v26;
          v25 -= 24;
          v18 -= 24;
        }
        while (v18 != v20);
        uint64_t v18 = (char *)v4[10];
      }
      v4[10] = v25;
      v4[11] = v19;
      v4[12] = &v24[24 * v23];
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v18 = v6;
      *((_DWORD *)v18 + 1) = v5;
      *((_DWORD *)v18 + 2) = v8;
      *((_DWORD *)v18 + 3) = v7;
      unint64_t v19 = v18 + 24;
      *((_DWORD *)v18 + 4) = v10;
      *((_DWORD *)v18 + 5) = v9;
    }
    v4[11] = v19;
    uint64_t v14 = v4[31];
  }
  else
  {
    uint64_t v13 = (_DWORD *)(v4[10] + 24 * (((uint64_t)v11 - v4[7]) >> 3));
    _DWORD *v13 = v6;
    v13[1] = v5;
    v13[2] = v8;
    v13[3] = v7;
    v13[4] = v10;
    v13[5] = v9;
    uint64_t v14 = v4[31];
    if (v13 != (_DWORD *)v4[11])
    {
      unint64_t v15 = (void *)v4[16];
      if (v15)
      {
        while (1)
        {
          uint64_t v31 = &v29;
          uint64_t v32 = 1;
          uint64_t v30 = v14;
          uint64_t v16 = v15[6];
          if (!v16) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v16 + 48))(v16, &v30, &v31);
          unint64_t v15 = (void *)*v15;
          if (!v15) {
            return;
          }
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  uint64_t v27 = (void *)v4[22];
  if (v27)
  {
    while (1)
    {
      uint64_t v31 = &v29;
      uint64_t v32 = 1;
      uint64_t v30 = v14;
      uint64_t v28 = v27[6];
      if (!v28) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v28 + 48))(v28, &v30, &v31);
      uint64_t v27 = (void *)*v27;
      if (!v27) {
        return;
      }
    }
    goto LABEL_29;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshRenderableBounds>(gdc::Entity,md::ls::MeshRenderableBounds &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF523240;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshRenderableBounds>(gdc::Entity,md::ls::MeshRenderableBounds &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF523240;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshRenderableBounds>(gdc::Entity,md::ls::MeshRenderableBounds &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::GeocentricBounds>(gdc::Entity,md::ls::GeocentricBounds &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 44);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::GeocentricBounds>(a2);
  int v5 = *(_DWORD *)(a1 + 12);
  int v33 = *(_DWORD *)(a1 + 8);
  int v7 = *(_DWORD *)(a1 + 16);
  int v6 = *(_DWORD *)(a1 + 20);
  int v9 = *(_DWORD *)(a1 + 24);
  int v8 = *(_DWORD *)(a1 + 28);
  int v11 = *(_DWORD *)(a1 + 32);
  int v10 = *(_DWORD *)(a1 + 36);
  int v12 = *(_DWORD *)(a1 + 40);
  uint64_t v34 = v3;
  uint64_t v13 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v34);
  if (v14)
  {
    uint64_t v20 = (_DWORD *)v4[11];
    unint64_t v19 = v4[12];
    if ((unint64_t)v20 >= v19)
    {
      unint64_t v22 = (_DWORD *)v4[10];
      unint64_t v23 = 0x8E38E38E38E38E39 * (v20 - v22) + 1;
      int v24 = v12;
      if (v23 > 0x71C71C71C71C71CLL) {
        goto LABEL_30;
      }
      unint64_t v25 = 0x8E38E38E38E38E39 * ((uint64_t)(v19 - (void)v22) >> 2);
      if (2 * v25 > v23) {
        unint64_t v23 = 2 * v25;
      }
      if (v25 >= 0x38E38E38E38E38ELL) {
        unint64_t v26 = 0x71C71C71C71C71CLL;
      }
      else {
        unint64_t v26 = v23;
      }
      if (v26)
      {
        if (v26 > 0x71C71C71C71C71CLL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v27 = (char *)operator new(36 * v26);
        int v24 = v12;
      }
      else
      {
        uint64_t v27 = 0;
      }
      uint64_t v28 = &v27[4 * (v20 - v22)];
      *(_DWORD *)uint64_t v28 = v33;
      *((_DWORD *)v28 + 1) = v5;
      *((_DWORD *)v28 + 2) = v7;
      *((_DWORD *)v28 + 3) = v6;
      *((_DWORD *)v28 + 4) = v9;
      *((_DWORD *)v28 + 5) = v8;
      *((_DWORD *)v28 + 6) = v11;
      *((_DWORD *)v28 + 7) = v10;
      *((_DWORD *)v28 + 8) = v24;
      unint64_t v21 = v28 + 36;
      if (v20 != v22)
      {
        do
        {
          long long v29 = *(_OWORD *)(v20 - 9);
          long long v30 = *(_OWORD *)(v20 - 5);
          *((_DWORD *)v28 - 1) = *(v20 - 1);
          *(_OWORD *)(v28 - 20) = v30;
          *(_OWORD *)(v28 - 36) = v29;
          v28 -= 36;
          v20 -= 9;
        }
        while (v20 != v22);
        uint64_t v20 = (_DWORD *)v4[10];
      }
      v4[10] = v28;
      v4[11] = v21;
      v4[12] = &v27[36 * v26];
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      *uint64_t v20 = v33;
      v20[1] = v5;
      void v20[2] = v7;
      void v20[3] = v6;
      v20[4] = v9;
      v20[5] = v8;
      v20[6] = v11;
      v20[7] = v10;
      unint64_t v21 = v20 + 9;
      v20[8] = v12;
    }
    v4[11] = v21;
    uint64_t v16 = v4[31];
  }
  else
  {
    unint64_t v15 = (_DWORD *)(v4[10] + 36 * (((uint64_t)v13 - v4[7]) >> 3));
    _DWORD *v15 = v33;
    v15[1] = v5;
    v15[2] = v7;
    v15[3] = v6;
    v15[4] = v9;
    v15[5] = v8;
    v15[6] = v11;
    v15[7] = v10;
    v15[8] = v12;
    uint64_t v16 = v4[31];
    if (v15 != (_DWORD *)v4[11])
    {
      unint64_t v17 = (void *)v4[16];
      if (v17)
      {
        while (1)
        {
          uint64_t v36 = &v34;
          uint64_t v37 = 1;
          uint64_t v35 = v16;
          uint64_t v18 = v17[6];
          if (!v18) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v18 + 48))(v18, &v35, &v36);
          unint64_t v17 = (void *)*v17;
          if (!v17) {
            return;
          }
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  uint64_t v31 = (void *)v4[22];
  if (v31)
  {
    while (1)
    {
      uint64_t v36 = &v34;
      uint64_t v37 = 1;
      uint64_t v35 = v16;
      uint64_t v32 = v31[6];
      if (!v32) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v32 + 48))(v32, &v35, &v36);
      uint64_t v31 = (void *)*v31;
      if (!v31) {
        return;
      }
    }
    goto LABEL_29;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::GeocentricBounds>(gdc::Entity,md::ls::GeocentricBounds &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF522598;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 36) = *(_OWORD *)(a1 + 36);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::GeocentricBounds>(gdc::Entity,md::ls::GeocentricBounds &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_1EF522598;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 36);
  *(__n128 *)(v2 + 36) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::GeocentricBounds>(gdc::Entity,md::ls::GeocentricBounds &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PreserveHeight>(gdc::Entity,md::ls::PreserveHeight &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  long long v3 = (void *)gdc::Registry::storage<md::ls::PreserveHeight>(a2);
  uint64_t v22 = v2;
  uint64_t v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if (v5)
  {
    int v10 = (unsigned char *)v3[11];
    unint64_t v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      int v12 = (char *)v3[10];
      uint64_t v13 = v10 - v12;
      uint64_t v14 = v10 - v12 + 1;
      if (v14 < 0) {
        goto LABEL_28;
      }
      unint64_t v15 = v9 - (void)v12;
      if (2 * v15 > v14) {
        uint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16) {
        unint64_t v17 = (char *)operator new(v16);
      }
      else {
        unint64_t v17 = 0;
      }
      uint64_t v18 = &v17[v16];
      uint64_t v11 = (uint64_t)&v17[v13 + 1];
      unint64_t v19 = (char *)(v12 - v10);
      if (v12 == v10) {
        unint64_t v19 = 0;
      }
      v3[10] = &v17[v13 + (void)v19];
      v3[11] = v11;
      v3[12] = v18;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    uint64_t v6 = v3[31];
  }
  else
  {
    uint64_t v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      int v7 = (void *)v3[16];
      if (v7)
      {
        while (1)
        {
          int v24 = &v22;
          uint64_t v25 = 1;
          uint64_t v23 = v6;
          uint64_t v8 = v7[6];
          if (!v8) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v8 + 48))(v8, &v23, &v24);
          int v7 = (void *)*v7;
          if (!v7) {
            return;
          }
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  uint64_t v20 = (void *)v3[22];
  if (v20)
  {
    while (1)
    {
      int v24 = &v22;
      uint64_t v25 = 1;
      uint64_t v23 = v6;
      uint64_t v21 = v20[6];
      if (!v21) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v21 + 48))(v21, &v23, &v24);
      uint64_t v20 = (void *)*v20;
      if (!v20) {
        return;
      }
    }
    goto LABEL_27;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PreserveHeight>(gdc::Entity,md::ls::PreserveHeight &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF522160;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PreserveHeight>(gdc::Entity,md::ls::PreserveHeight &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF522160;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PreserveHeight>(gdc::Entity,md::ls::PreserveHeight &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshRenderablePositionScaleInfo>(gdc::Entity,md::ls::MeshRenderablePositionScaleInfo &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 12);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::MeshRenderablePositionScaleInfo>(a2);
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 2;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62) {
        goto LABEL_34;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 1 > v17) {
        unint64_t v17 = v18 >> 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 62) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(4 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[4 * v16];
      uint64_t v22 = &v20[4 * v19];
      _DWORD *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 != v15)
      {
        unint64_t v23 = v13 - v15 - 4;
        if (v23 < 0x2C) {
          goto LABEL_38;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_38;
        }
        uint64_t v24 = (v23 >> 2) + 1;
        uint64_t v25 = &v20[4 * v16 - 16];
        unint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        v21 -= v24 & 0x7FFFFFFFFFFFFFF8;
        v13 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          do
          {
            int v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 4;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (_DWORD *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 1));
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (_DWORD *)v4[11])
    {
      int v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          int v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  long long v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      long long v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_33;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshRenderablePositionScaleInfo>(gdc::Entity,md::ls::MeshRenderablePositionScaleInfo &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF525AC0;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshRenderablePositionScaleInfo>(gdc::Entity,md::ls::MeshRenderablePositionScaleInfo &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF525AC0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshRenderablePositionScaleInfo>(gdc::Entity,md::ls::MeshRenderablePositionScaleInfo &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::BoundZAdjust>(gdc::Entity,md::ls::BoundZAdjust &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 12);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::BoundZAdjust>(a2);
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 2;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62) {
        goto LABEL_34;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 1 > v17) {
        unint64_t v17 = v18 >> 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 62) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(4 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[4 * v16];
      uint64_t v22 = &v20[4 * v19];
      _DWORD *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 != v15)
      {
        unint64_t v23 = v13 - v15 - 4;
        if (v23 < 0x2C) {
          goto LABEL_38;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_38;
        }
        uint64_t v24 = (v23 >> 2) + 1;
        uint64_t v25 = &v20[4 * v16 - 16];
        unint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        v21 -= v24 & 0x7FFFFFFFFFFFFFF8;
        v13 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          do
          {
            int v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 4;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (_DWORD *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 1));
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (_DWORD *)v4[11])
    {
      int v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          int v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  long long v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      long long v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_33;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::BoundZAdjust>(gdc::Entity,md::ls::BoundZAdjust &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF521B78;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::BoundZAdjust>(gdc::Entity,md::ls::BoundZAdjust &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF521B78;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::BoundZAdjust>(gdc::Entity,md::ls::BoundZAdjust &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::BoundZScale>(gdc::Entity,md::ls::BoundZScale &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 12);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::BoundZScale>(a2);
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 2;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62) {
        goto LABEL_34;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 1 > v17) {
        unint64_t v17 = v18 >> 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 62) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(4 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[4 * v16];
      uint64_t v22 = &v20[4 * v19];
      _DWORD *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 != v15)
      {
        unint64_t v23 = v13 - v15 - 4;
        if (v23 < 0x2C) {
          goto LABEL_38;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_38;
        }
        uint64_t v24 = (v23 >> 2) + 1;
        uint64_t v25 = &v20[4 * v16 - 16];
        unint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        v21 -= v24 & 0x7FFFFFFFFFFFFFF8;
        v13 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          do
          {
            int v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 4;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (_DWORD *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 1));
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (_DWORD *)v4[11])
    {
      int v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          int v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  long long v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      long long v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_33;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::BoundZScale>(gdc::Entity,md::ls::BoundZScale &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5219C8;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::BoundZScale>(gdc::Entity,md::ls::BoundZScale &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF5219C8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::BoundZScale>(gdc::Entity,md::ls::BoundZScale &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedUniqueID>(gdc::Entity,md::ls::SharedUniqueID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::SharedUniqueID>(a2);
  long long v26 = *(_OWORD *)(a1 + 8);
  int v5 = *(unsigned __int8 *)(a1 + 24);
  *(_DWORD *)uint64_t v25 = *(_DWORD *)(a1 + 25);
  *(_DWORD *)&v25[3] = *(_DWORD *)(a1 + 28);
  uint64_t v27 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v27);
  if (v7)
  {
    uint64_t v11 = (char *)v4[11];
    unint64_t v10 = v4[12];
    if ((unint64_t)v11 >= v10)
    {
      uint64_t v13 = (char *)v4[10];
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v13) >> 3) + 1;
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_35;
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)v13) >> 3);
      if (2 * v15 > v14) {
        unint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x555555555555555) {
        unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16)
      {
        if (v16 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v17 = (char *)operator new(24 * v16);
      }
      else
      {
        unint64_t v17 = 0;
      }
      uint64_t v21 = &v17[8 * ((v11 - v13) >> 3)];
      *(_OWORD *)uint64_t v21 = v26;
      unsigned char v21[16] = v5;
      *(_DWORD *)(v21 + 17) = *(_DWORD *)v25;
      *((_DWORD *)v21 + 5) = *(_DWORD *)&v25[3];
      unint64_t v12 = v21 + 24;
      if (v11 != v13)
      {
        do
        {
          long long v22 = *(_OWORD *)(v11 - 24);
          *((void *)v21 - 1) = *((void *)v11 - 1);
          *(_OWORD *)(v21 - 24) = v22;
          v21 -= 24;
          v11 -= 24;
        }
        while (v11 != v13);
        uint64_t v11 = (char *)v4[10];
      }
      v4[10] = v21;
      v4[11] = v12;
      v4[12] = &v17[24 * v16];
      if (v11) {
        operator delete(v11);
      }
    }
    else
    {
      *(_OWORD *)uint64_t v11 = v26;
      v11[16] = v5;
      *(_DWORD *)(v11 + 17) = *(_DWORD *)v25;
      *((_DWORD *)v11 + 5) = *(_DWORD *)&v25[3];
      unint64_t v12 = v11 + 24;
    }
    v4[11] = v12;
    uint64_t v18 = v4[31];
  }
  else
  {
    uint64_t v8 = v4[10] + 24 * (((uint64_t)v6 - v4[7]) >> 3);
    if (*(unsigned __int8 *)(v8 + 16) != v5)
    {
      if (*(unsigned char *)(v8 + 16))
      {
        char v9 = 0;
      }
      else
      {
        *(_OWORD *)uint64_t v8 = v26;
        char v9 = 1;
      }
      *(unsigned char *)(v8 + 16) = v9;
    }
    uint64_t v18 = v4[31];
    if (v8 != v4[11])
    {
      unint64_t v19 = (void *)v4[16];
      if (v19)
      {
        while (1)
        {
          int v29 = &v27;
          uint64_t v30 = 1;
          uint64_t v28 = v18;
          uint64_t v20 = v19[6];
          if (!v20) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v20 + 48))(v20, &v28, &v29);
          unint64_t v19 = (void *)*v19;
          if (!v19) {
            return;
          }
        }
LABEL_34:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_35:
        abort();
      }
      return;
    }
  }
  unint64_t v23 = (void *)v4[22];
  if (v23)
  {
    while (1)
    {
      int v29 = &v27;
      uint64_t v30 = 1;
      uint64_t v28 = v18;
      uint64_t v24 = v23[6];
      if (!v24) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v24 + 48))(v24, &v28, &v29);
      unint64_t v23 = (void *)*v23;
      if (!v23) {
        return;
      }
    }
    goto LABEL_34;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedUniqueID>(gdc::Entity,md::ls::SharedUniqueID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF522238;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedUniqueID>(gdc::Entity,md::ls::SharedUniqueID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF522238;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedUniqueID>(gdc::Entity,md::ls::SharedUniqueID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleDataKeyHandle>(gdc::Entity,md::ls::StyleDataKeyHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::StyleDataKeyHandle>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(8 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      long long v22 = &v20[8 * v19];
      void *v21 = v5;
      unint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        unint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        long long v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          unint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      unint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      unint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          unint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  uint64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      uint64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleDataKeyHandle>(gdc::Entity,md::ls::StyleDataKeyHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF522F28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleDataKeyHandle>(gdc::Entity,md::ls::StyleDataKeyHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF522F28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleDataKeyHandle>(gdc::Entity,md::ls::StyleDataKeyHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableHash>(gdc::Entity,md::ls::RenderableHash &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::RenderableHash>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_34;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(8 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      long long v22 = &v20[8 * v19];
      void *v21 = v5;
      unint64_t v14 = v21 + 1;
      if (v13 != v15)
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_38;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_38;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        long long v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      unint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      unint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          unint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  uint64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      uint64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_33;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableHash>(gdc::Entity,md::ls::RenderableHash &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5221A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableHash>(gdc::Entity,md::ls::RenderableHash &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF5221A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderableHash>(gdc::Entity,md::ls::RenderableHash &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PendingProcessingDepthPrePass>(gdc::Entity,md::ls::PendingProcessingDepthPrePass &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 12);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::PendingProcessingDepthPrePass>(a2);
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t v36 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if (v7)
  {
    uint64_t v13 = (unsigned char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      unsigned char *v13 = v5;
      uint64_t v14 = (uint64_t)(v13 + 1);
LABEL_37:
      v4[11] = v14;
      uint64_t v9 = v4[31];
      goto LABEL_38;
    }
    unint64_t v15 = (unsigned char *)v4[10];
    unint64_t v16 = v13 - v15;
    uint64_t v17 = v13 - v15 + 1;
    if (v17 < 0) {
      goto LABEL_43;
    }
    unint64_t v18 = v12 - (void)v15;
    if (2 * v18 > v17) {
      uint64_t v17 = 2 * v18;
    }
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v19 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v19 = v17;
    }
    if (v19) {
      uint64_t v20 = (char *)operator new(v19);
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = &v20[v16];
    long long v22 = &v20[v19];
    v20[v16] = v5;
    uint64_t v14 = (uint64_t)&v20[v16 + 1];
    if (v13 == v15)
    {
LABEL_35:
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
      goto LABEL_37;
    }
    if (v16 < 8 || (unint64_t)(v15 - v20) < 0x20) {
      goto LABEL_32;
    }
    if (v16 >= 0x20)
    {
      unint64_t v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v24 = (long long *)(v13 - 16);
      uint64_t v25 = &v20[v13 - 16 - v15];
      unint64_t v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v27 = *v24;
        *((_OWORD *)v25 - 1) = *(v24 - 1);
        *(_OWORD *)uint64_t v25 = v27;
        v25 -= 32;
        v24 -= 2;
        v26 -= 32;
      }
      while (v26);
      if (v16 == v23) {
        goto LABEL_34;
      }
      if ((v16 & 0x18) == 0)
      {
        v21 -= v23;
        v13 -= v23;
        goto LABEL_32;
      }
    }
    else
    {
      unint64_t v23 = 0;
    }
    unint64_t v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v29 = &v13[-v23 - 8];
    int64_t v30 = v29 - v15;
    do
    {
      uint64_t v31 = *(void *)v29;
      v29 -= 8;
      *(void *)&v20[v30] = v31;
      v30 -= 8;
      v28 += 8;
    }
    while (v28);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_34;
    }
    v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
LABEL_32:
    uint64_t v32 = v21 - 1;
    do
    {
      char v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
LABEL_34:
    uint64_t v21 = v20;
    goto LABEL_35;
  }
  uint64_t v8 = (unsigned char *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *uint64_t v8 = v5;
  uint64_t v9 = v4[31];
  if (v8 != (unsigned char *)v4[11])
  {
    unint64_t v10 = (void *)v4[16];
    if (v10)
    {
      while (1)
      {
        uint64_t v38 = &v36;
        uint64_t v39 = 1;
        uint64_t v37 = v9;
        uint64_t v11 = v10[6];
        if (!v11) {
          break;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v37, &v38);
        unint64_t v10 = (void *)*v10;
        if (!v10) {
          return;
        }
      }
LABEL_42:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
      abort();
    }
    return;
  }
LABEL_38:
  uint64_t v34 = (void *)v4[22];
  if (v34)
  {
    while (1)
    {
      uint64_t v38 = &v36;
      uint64_t v39 = 1;
      uint64_t v37 = v9;
      uint64_t v35 = v34[6];
      if (!v35) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v35 + 48))(v35, &v37, &v38);
      uint64_t v34 = (void *)*v34;
      if (!v34) {
        return;
      }
    }
    goto LABEL_42;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PendingProcessingDepthPrePass>(gdc::Entity,md::ls::PendingProcessingDepthPrePass &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5257A8;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PendingProcessingDepthPrePass>(gdc::Entity,md::ls::PendingProcessingDepthPrePass &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF5257A8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PendingProcessingDepthPrePass>(gdc::Entity,md::ls::PendingProcessingDepthPrePass &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PendingProcessingShadow>(gdc::Entity,md::ls::PendingProcessingShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 12);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::PendingProcessingShadow>(a2);
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t v36 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if (v7)
  {
    uint64_t v13 = (unsigned char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      unsigned char *v13 = v5;
      uint64_t v14 = (uint64_t)(v13 + 1);
LABEL_37:
      v4[11] = v14;
      uint64_t v9 = v4[31];
      goto LABEL_38;
    }
    unint64_t v15 = (unsigned char *)v4[10];
    unint64_t v16 = v13 - v15;
    uint64_t v17 = v13 - v15 + 1;
    if (v17 < 0) {
      goto LABEL_43;
    }
    unint64_t v18 = v12 - (void)v15;
    if (2 * v18 > v17) {
      uint64_t v17 = 2 * v18;
    }
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v19 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v19 = v17;
    }
    if (v19) {
      uint64_t v20 = (char *)operator new(v19);
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = &v20[v16];
    long long v22 = &v20[v19];
    v20[v16] = v5;
    uint64_t v14 = (uint64_t)&v20[v16 + 1];
    if (v13 == v15)
    {
LABEL_35:
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
      goto LABEL_37;
    }
    if (v16 < 8 || (unint64_t)(v15 - v20) < 0x20) {
      goto LABEL_32;
    }
    if (v16 >= 0x20)
    {
      unint64_t v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v24 = (long long *)(v13 - 16);
      uint64_t v25 = &v20[v13 - 16 - v15];
      unint64_t v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v27 = *v24;
        *((_OWORD *)v25 - 1) = *(v24 - 1);
        *(_OWORD *)uint64_t v25 = v27;
        v25 -= 32;
        v24 -= 2;
        v26 -= 32;
      }
      while (v26);
      if (v16 == v23) {
        goto LABEL_34;
      }
      if ((v16 & 0x18) == 0)
      {
        v21 -= v23;
        v13 -= v23;
        goto LABEL_32;
      }
    }
    else
    {
      unint64_t v23 = 0;
    }
    unint64_t v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v29 = &v13[-v23 - 8];
    int64_t v30 = v29 - v15;
    do
    {
      uint64_t v31 = *(void *)v29;
      v29 -= 8;
      *(void *)&v20[v30] = v31;
      v30 -= 8;
      v28 += 8;
    }
    while (v28);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_34;
    }
    v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
LABEL_32:
    uint64_t v32 = v21 - 1;
    do
    {
      char v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
LABEL_34:
    uint64_t v21 = v20;
    goto LABEL_35;
  }
  uint64_t v8 = (unsigned char *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *uint64_t v8 = v5;
  uint64_t v9 = v4[31];
  if (v8 != (unsigned char *)v4[11])
  {
    unint64_t v10 = (void *)v4[16];
    if (v10)
    {
      while (1)
      {
        uint64_t v38 = &v36;
        uint64_t v39 = 1;
        uint64_t v37 = v9;
        uint64_t v11 = v10[6];
        if (!v11) {
          break;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v37, &v38);
        unint64_t v10 = (void *)*v10;
        if (!v10) {
          return;
        }
      }
LABEL_42:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
      abort();
    }
    return;
  }
LABEL_38:
  uint64_t v34 = (void *)v4[22];
  if (v34)
  {
    while (1)
    {
      uint64_t v38 = &v36;
      uint64_t v39 = 1;
      uint64_t v37 = v9;
      uint64_t v35 = v34[6];
      if (!v35) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v35 + 48))(v35, &v37, &v38);
      uint64_t v34 = (void *)*v34;
      if (!v34) {
        return;
      }
    }
    goto LABEL_42;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PendingProcessingShadow>(gdc::Entity,md::ls::PendingProcessingShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF523D80;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PendingProcessingShadow>(gdc::Entity,md::ls::PendingProcessingShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF523D80;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PendingProcessingShadow>(gdc::Entity,md::ls::PendingProcessingShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasStyleAttributeRasterSet>(gdc::Entity,md::ls::HasStyleAttributeRasterSet &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  HasStyleAttributeRaster = (void *)gdc::Registry::storage<md::ls::HasStyleAttributeRasterSet>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(HasStyleAttributeRaster + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)HasStyleAttributeRaster[11];
    unint64_t v12 = HasStyleAttributeRaster[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)HasStyleAttributeRaster[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(8 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      long long v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        unint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        unint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          unint64_t v15 = (char *)HasStyleAttributeRaster[10];
        }
      }
      HasStyleAttributeRaster[10] = v21;
      HasStyleAttributeRaster[11] = v14;
      HasStyleAttributeRaster[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    HasStyleAttributeRaster[11] = v14;
    uint64_t v9 = HasStyleAttributeRaster[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + HasStyleAttributeRaster[10] - HasStyleAttributeRaster[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = HasStyleAttributeRaster[31];
    if (v8 != (void *)HasStyleAttributeRaster[11])
    {
      unint64_t v10 = (void *)HasStyleAttributeRaster[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          unint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  int64_t v30 = (void *)HasStyleAttributeRaster[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      int64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasStyleAttributeRasterSet>(gdc::Entity,md::ls::HasStyleAttributeRasterSet &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF524680;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasStyleAttributeRasterSet>(gdc::Entity,md::ls::HasStyleAttributeRasterSet &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF524680;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasStyleAttributeRasterSet>(gdc::Entity,md::ls::HasStyleAttributeRasterSet &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PrepassConstantDataHandle>(gdc::Entity,md::ls::PrepassConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::PrepassConstantDataHandle>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(8 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      long long v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        unint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        unint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          unint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      unint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          unint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  int64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      int64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PrepassConstantDataHandle>(gdc::Entity,md::ls::PrepassConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5245F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PrepassConstantDataHandle>(gdc::Entity,md::ls::PrepassConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF5245F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PrepassConstantDataHandle>(gdc::Entity,md::ls::PrepassConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PrepassShadowConstantDataHandle>(gdc::Entity,md::ls::PrepassShadowConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::PrepassShadowConstantDataHandle>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(8 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      long long v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        unint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        unint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          unint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      unint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          unint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  int64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      int64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PrepassShadowConstantDataHandle>(gdc::Entity,md::ls::PrepassShadowConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF525B08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PrepassShadowConstantDataHandle>(gdc::Entity,md::ls::PrepassShadowConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF525B08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PrepassShadowConstantDataHandle>(gdc::Entity,md::ls::PrepassShadowConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ShadowConstantDataHandle>(gdc::Entity,md::ls::ShadowConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::ShadowConstantDataHandle>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(8 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      long long v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        unint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        unint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          unint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      unint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          unint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  int64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      int64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ShadowConstantDataHandle>(gdc::Entity,md::ls::ShadowConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF524440;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ShadowConstantDataHandle>(gdc::Entity,md::ls::ShadowConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF524440;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ShadowConstantDataHandle>(gdc::Entity,md::ls::ShadowConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleCameraConstantDataHandle>(gdc::Entity,md::ls::StyleCameraConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::StyleCameraConstantDataHandle>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(8 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      long long v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        unint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        unint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          unint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      unint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          unint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  int64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      int64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleCameraConstantDataHandle>(gdc::Entity,md::ls::StyleCameraConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF525838;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleCameraConstantDataHandle>(gdc::Entity,md::ls::StyleCameraConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF525838;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleCameraConstantDataHandle>(gdc::Entity,md::ls::StyleCameraConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ClippingConstantDataHandle>(gdc::Entity,md::ls::ClippingConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::ClippingConstantDataHandle>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(8 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      long long v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        unint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        unint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          unint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      unint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          unint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  int64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      int64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ClippingConstantDataHandle>(gdc::Entity,md::ls::ClippingConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF524638;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ClippingConstantDataHandle>(gdc::Entity,md::ls::ClippingConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF524638;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ClippingConstantDataHandle>(gdc::Entity,md::ls::ClippingConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshRenderableTransformConstantDataHandle>(gdc::Entity,md::ls::MeshRenderableTransformConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::MeshRenderableTransformConstantDataHandle>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(8 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      long long v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        unint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        unint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          unint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      unint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          unint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  int64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      int64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshRenderableTransformConstantDataHandle>(gdc::Entity,md::ls::MeshRenderableTransformConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF525EF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshRenderableTransformConstantDataHandle>(gdc::Entity,md::ls::MeshRenderableTransformConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF525EF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MeshRenderableTransformConstantDataHandle>(gdc::Entity,md::ls::MeshRenderableTransformConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedRenderableDataHandle>(gdc::Entity,md::ls::SharedRenderableDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::SharedRenderableDataHandle>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(8 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      long long v22 = &v20[8 * v19];
      void *v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        unint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        unint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          unint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      unint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          unint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  int64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      int64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedRenderableDataHandle>(gdc::Entity,md::ls::SharedRenderableDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5248C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedRenderableDataHandle>(gdc::Entity,md::ls::SharedRenderableDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF5248C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::SharedRenderableDataHandle>(gdc::Entity,md::ls::SharedRenderableDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UnitsPerMeter>(gdc::Entity,md::ls::UnitsPerMeter &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 20);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::UnitsPerMeter>(a2);
  int v6 = *(_DWORD *)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 12);
  int v7 = *(_DWORD *)(a1 + 16);
  uint64_t v27 = v3;
  uint64_t v8 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v27);
  if (v9)
  {
    unint64_t v15 = (_DWORD *)v4[11];
    unint64_t v14 = v4[12];
    if ((unint64_t)v15 >= v14)
    {
      unint64_t v17 = (_DWORD *)v4[10];
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (v15 - v17) + 1;
      if (v18 > 0x1555555555555555) {
        goto LABEL_30;
      }
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (void)v17) >> 2);
      if (2 * v19 > v18) {
        unint64_t v18 = 2 * v19;
      }
      if (v19 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v20 = 0x1555555555555555;
      }
      else {
        unint64_t v20 = v18;
      }
      if (v20)
      {
        if (v20 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v21 = (char *)operator new(12 * v20);
      }
      else
      {
        uint64_t v21 = 0;
      }
      long long v22 = &v21[4 * (v15 - v17)];
      *(_DWORD *)long long v22 = v6;
      *((_DWORD *)v22 + 1) = v5;
      *((_DWORD *)v22 + 2) = v7;
      uint64_t v16 = v22 + 12;
      if (v15 != v17)
      {
        do
        {
          uint64_t v23 = *(void *)(v15 - 3);
          v15 -= 3;
          int v24 = v15[2];
          *(void *)(v22 - 12) = v23;
          v22 -= 12;
          *((_DWORD *)v22 + 2) = v24;
        }
        while (v15 != v17);
        unint64_t v15 = (_DWORD *)v4[10];
      }
      v4[10] = v22;
      v4[11] = v16;
      v4[12] = &v21[12 * v20];
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      _DWORD *v15 = v6;
      v15[1] = v5;
      uint64_t v16 = v15 + 3;
      v15[2] = v7;
    }
    v4[11] = v16;
    uint64_t v11 = v4[31];
  }
  else
  {
    unint64_t v10 = (_DWORD *)(v4[10] + 12 * (((uint64_t)v8 - v4[7]) >> 3));
    *unint64_t v10 = v6;
    v10[1] = v5;
    _DWORD v10[2] = v7;
    uint64_t v11 = v4[31];
    if (v10 != (_DWORD *)v4[11])
    {
      unint64_t v12 = (void *)v4[16];
      if (v12)
      {
        while (1)
        {
          uint64_t v29 = &v27;
          uint64_t v30 = 1;
          uint64_t v28 = v11;
          uint64_t v13 = v12[6];
          if (!v13) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v13 + 48))(v13, &v28, &v29);
          unint64_t v12 = (void *)*v12;
          if (!v12) {
            return;
          }
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  uint64_t v25 = (void *)v4[22];
  if (v25)
  {
    while (1)
    {
      uint64_t v29 = &v27;
      uint64_t v30 = 1;
      uint64_t v28 = v11;
      uint64_t v26 = v25[6];
      if (!v26) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v26 + 48))(v26, &v28, &v29);
      uint64_t v25 = (void *)*v25;
      if (!v25) {
        return;
      }
    }
    goto LABEL_29;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UnitsPerMeter>(gdc::Entity,md::ls::UnitsPerMeter &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF522088;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UnitsPerMeter>(gdc::Entity,md::ls::UnitsPerMeter &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF522088;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_DWORD *)v2 + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UnitsPerMeter>(gdc::Entity,md::ls::UnitsPerMeter &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialData>(gdc::Entity,md::ls::UniqueMaterialData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::UniqueMaterialData>(a2);
  long long v23 = *(_OWORD *)(a1 + 8);
  uint64_t v24 = *(void *)(a1 + 24);
  uint64_t v25 = v3;
  int v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v25);
  if (v6)
  {
    unint64_t v12 = (void *)v4[11];
    unint64_t v11 = v4[12];
    if ((unint64_t)v12 >= v11)
    {
      unint64_t v14 = (void *)v4[10];
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v12 - v14) + 1;
      if (v15 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_30;
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)v14) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        if (v17 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v18 = (char *)operator new(24 * v17);
      }
      else
      {
        unint64_t v18 = 0;
      }
      unint64_t v19 = &v18[8 * (v12 - v14)];
      *(_OWORD *)unint64_t v19 = v23;
      *((void *)v19 + 2) = v24;
      uint64_t v13 = v19 + 24;
      if (v12 != v14)
      {
        do
        {
          long long v20 = *(_OWORD *)(v12 - 3);
          *((void *)v19 - 1) = *(v12 - 1);
          *(_OWORD *)(v19 - 24) = v20;
          v19 -= 24;
          v12 -= 3;
        }
        while (v12 != v14);
        unint64_t v12 = (void *)v4[10];
      }
      v4[10] = v19;
      v4[11] = v13;
      v4[12] = &v18[24 * v17];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v12 = v23;
      v12[2] = v24;
      uint64_t v13 = v12 + 3;
    }
    v4[11] = v13;
    uint64_t v8 = v4[31];
  }
  else
  {
    uint64_t v7 = v4[10] + 24 * (((uint64_t)v5 - v4[7]) >> 3);
    *(_OWORD *)uint64_t v7 = v23;
    *(void *)(v7 + 16) = v24;
    uint64_t v8 = v4[31];
    if (v7 != v4[11])
    {
      char v9 = (void *)v4[16];
      if (v9)
      {
        while (1)
        {
          uint64_t v27 = &v25;
          uint64_t v28 = 1;
          uint64_t v26 = v8;
          uint64_t v10 = v9[6];
          if (!v10) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v10 + 48))(v10, &v26, &v27);
          char v9 = (void *)*v9;
          if (!v9) {
            return;
          }
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  uint64_t v21 = (void *)v4[22];
  if (v21)
  {
    while (1)
    {
      uint64_t v27 = &v25;
      uint64_t v28 = 1;
      uint64_t v26 = v8;
      uint64_t v22 = v21[6];
      if (!v22) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v22 + 48))(v22, &v26, &v27);
      uint64_t v21 = (void *)*v21;
      if (!v21) {
        return;
      }
    }
    goto LABEL_29;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialData>(gdc::Entity,md::ls::UniqueMaterialData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF522F70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialData>(gdc::Entity,md::ls::UniqueMaterialData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF522F70;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialData>(gdc::Entity,md::ls::UniqueMaterialData &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UpdatesWithStyleZChange>(gdc::Entity,md::ls::UpdatesWithStyleZChange &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 12);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::UpdatesWithStyleZChange>(a2);
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v32 = v3;
  char v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 2;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62) {
        goto LABEL_34;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 1 > v17) {
        unint64_t v17 = v18 >> 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 62) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        long long v20 = operator new(4 * v19);
      }
      else
      {
        long long v20 = 0;
      }
      uint64_t v21 = &v20[4 * v16];
      uint64_t v22 = &v20[4 * v19];
      _DWORD *v21 = v5;
      unint64_t v14 = v21 + 1;
      if (v13 != v15)
      {
        unint64_t v23 = v13 - v15 - 4;
        if (v23 < 0x2C) {
          goto LABEL_38;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_38;
        }
        uint64_t v24 = (v23 >> 2) + 1;
        uint64_t v25 = &v20[4 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        v21 -= v24 & 0x7FFFFFFFFFFFFFF8;
        v13 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          do
          {
            int v29 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v13 = v5;
      unint64_t v14 = v13 + 4;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (_DWORD *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 1));
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (_DWORD *)v4[11])
    {
      uint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          uint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  uint64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      uint64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_33;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UpdatesWithStyleZChange>(gdc::Entity,md::ls::UpdatesWithStyleZChange &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5242D8;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UpdatesWithStyleZChange>(gdc::Entity,md::ls::UpdatesWithStyleZChange &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF5242D8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UpdatesWithStyleZChange>(gdc::Entity,md::ls::UpdatesWithStyleZChange &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialVisibilityOptionsHandle>(gdc::Entity,md::ls::UniqueMaterialVisibilityOptionsHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::UniqueMaterialVisibilityOptionsHandle>(a2);
  *(void *)&long long v25 = *(void *)(a1 + 8);
  BYTE8(v25) = *(unsigned char *)(a1 + 16);
  uint64_t v26 = v3;
  int v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v26);
  if (v6)
  {
    unint64_t v12 = (unsigned char *)v4[11];
    unint64_t v11 = v4[12];
    if ((unint64_t)v12 >= v11)
    {
      unint64_t v14 = (unsigned char *)v4[10];
      uint64_t v15 = (v12 - v14) >> 4;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60) {
        goto LABEL_30;
      }
      uint64_t v17 = v11 - (void)v14;
      if (v17 >> 3 > v16) {
        unint64_t v16 = v17 >> 3;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v19 = (char *)operator new(16 * v18);
      }
      else
      {
        unint64_t v19 = 0;
      }
      long long v20 = &v19[16 * v15];
      *(_OWORD *)long long v20 = v25;
      uint64_t v13 = v20 + 16;
      if (v12 != v14)
      {
        do
        {
          uint64_t v21 = *((void *)v12 - 2);
          v12 -= 16;
          char v22 = v12[8];
          *((void *)v20 - 2) = v21;
          v20 -= 16;
          v20[8] = v22;
        }
        while (v12 != v14);
        unint64_t v12 = (unsigned char *)v4[10];
      }
      v4[10] = v20;
      v4[11] = v13;
      v4[12] = &v19[16 * v18];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v12 = v25;
      uint64_t v13 = v12 + 16;
    }
    v4[11] = v13;
    uint64_t v8 = v4[31];
  }
  else
  {
    uint64_t v7 = v4[10] + 2 * ((void)v5 - v4[7]);
    *(void *)uint64_t v7 = v25;
    *(unsigned char *)(v7 + 8) = BYTE8(v25);
    uint64_t v8 = v4[31];
    if (v7 != v4[11])
    {
      uint64_t v9 = (void *)v4[16];
      if (v9)
      {
        while (1)
        {
          long long v28 = &v26;
          uint64_t v29 = 1;
          uint64_t v27 = v8;
          uint64_t v10 = v9[6];
          if (!v10) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v10 + 48))(v10, &v27, &v28);
          uint64_t v9 = (void *)*v9;
          if (!v9) {
            return;
          }
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  unint64_t v23 = (void *)v4[22];
  if (v23)
  {
    while (1)
    {
      long long v28 = &v26;
      uint64_t v29 = 1;
      uint64_t v27 = v8;
      uint64_t v24 = v23[6];
      if (!v24) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v24 + 48))(v24, &v27, &v28);
      unint64_t v23 = (void *)*v23;
      if (!v23) {
        return;
      }
    }
    goto LABEL_29;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialVisibilityOptionsHandle>(gdc::Entity,md::ls::UniqueMaterialVisibilityOptionsHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF525E20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialVisibilityOptionsHandle>(gdc::Entity,md::ls::UniqueMaterialVisibilityOptionsHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF525E20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialVisibilityOptionsHandle>(gdc::Entity,md::ls::UniqueMaterialVisibilityOptionsHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueColorDataHandle>(gdc::Entity,md::ls::UniqueColorDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::UniqueColorDataHandle>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  char v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        long long v20 = operator new(8 * v19);
      }
      else
      {
        long long v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      char v22 = &v20[8 * v19];
      void *v21 = v5;
      unint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        uint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        long long v25 = &v20[8 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *long long v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          uint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      unint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      uint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          uint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  uint64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      uint64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueColorDataHandle>(gdc::Entity,md::ls::UniqueColorDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5238B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueColorDataHandle>(gdc::Entity,md::ls::UniqueColorDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF5238B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueColorDataHandle>(gdc::Entity,md::ls::UniqueColorDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialEmissiveTexture>(gdc::Entity,md::ls::UniqueMaterialEmissiveTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::UniqueMaterialEmissiveTexture>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  char v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        long long v20 = operator new(8 * v19);
      }
      else
      {
        long long v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      char v22 = &v20[8 * v19];
      void *v21 = v5;
      unint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        uint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        long long v25 = &v20[8 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *long long v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          uint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      unint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      uint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          uint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  uint64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      uint64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialEmissiveTexture>(gdc::Entity,md::ls::UniqueMaterialEmissiveTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF525880;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialEmissiveTexture>(gdc::Entity,md::ls::UniqueMaterialEmissiveTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF525880;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialEmissiveTexture>(gdc::Entity,md::ls::UniqueMaterialEmissiveTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialAlbedoTexture>(gdc::Entity,md::ls::UniqueMaterialAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::UniqueMaterialAlbedoTexture>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  char v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        long long v20 = operator new(8 * v19);
      }
      else
      {
        long long v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      char v22 = &v20[8 * v19];
      void *v21 = v5;
      unint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        uint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        long long v25 = &v20[8 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *long long v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          uint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      unint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      uint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          uint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  uint64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      uint64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialAlbedoTexture>(gdc::Entity,md::ls::UniqueMaterialAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF524BD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialAlbedoTexture>(gdc::Entity,md::ls::UniqueMaterialAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF524BD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialAlbedoTexture>(gdc::Entity,md::ls::UniqueMaterialAlbedoTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialZIndexHandle>(gdc::Entity,md::ls::UniqueMaterialZIndexHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::UniqueMaterialZIndexHandle>(a2);
  long long v23 = *(_OWORD *)(a1 + 8);
  uint64_t v24 = *(void *)(a1 + 24);
  uint64_t v25 = v3;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v25);
  if (v6)
  {
    unint64_t v12 = (void *)v4[11];
    unint64_t v11 = v4[12];
    if ((unint64_t)v12 >= v11)
    {
      unint64_t v14 = (void *)v4[10];
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v12 - v14) + 1;
      if (v15 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_30;
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)v14) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        if (v17 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v18 = (char *)operator new(24 * v17);
      }
      else
      {
        uint64_t v18 = 0;
      }
      unint64_t v19 = &v18[8 * (v12 - v14)];
      *(_OWORD *)unint64_t v19 = v23;
      *((void *)v19 + 2) = v24;
      uint64_t v13 = v19 + 24;
      if (v12 != v14)
      {
        do
        {
          long long v20 = *(_OWORD *)(v12 - 3);
          *((void *)v19 - 1) = *(v12 - 1);
          *(_OWORD *)(v19 - 24) = v20;
          v19 -= 24;
          v12 -= 3;
        }
        while (v12 != v14);
        unint64_t v12 = (void *)v4[10];
      }
      v4[10] = v19;
      v4[11] = v13;
      v4[12] = &v18[24 * v17];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v12 = v23;
      v12[2] = v24;
      uint64_t v13 = v12 + 3;
    }
    v4[11] = v13;
    uint64_t v8 = v4[31];
  }
  else
  {
    uint64_t v7 = v4[10] + 24 * (((uint64_t)v5 - v4[7]) >> 3);
    *(_OWORD *)uint64_t v7 = v23;
    *(void *)(v7 + 16) = v24;
    uint64_t v8 = v4[31];
    if (v7 != v4[11])
    {
      uint64_t v9 = (void *)v4[16];
      if (v9)
      {
        while (1)
        {
          uint64_t v27 = &v25;
          uint64_t v28 = 1;
          uint64_t v26 = v8;
          uint64_t v10 = v9[6];
          if (!v10) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v10 + 48))(v10, &v26, &v27);
          uint64_t v9 = (void *)*v9;
          if (!v9) {
            return;
          }
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  uint64_t v21 = (void *)v4[22];
  if (v21)
  {
    while (1)
    {
      uint64_t v27 = &v25;
      uint64_t v28 = 1;
      uint64_t v26 = v8;
      uint64_t v22 = v21[6];
      if (!v22) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v22 + 48))(v22, &v26, &v27);
      uint64_t v21 = (void *)*v21;
      if (!v21) {
        return;
      }
    }
    goto LABEL_29;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialZIndexHandle>(gdc::Entity,md::ls::UniqueMaterialZIndexHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF524950;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialZIndexHandle>(gdc::Entity,md::ls::UniqueMaterialZIndexHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF524950;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialZIndexHandle>(gdc::Entity,md::ls::UniqueMaterialZIndexHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialDiffuseTexture>(gdc::Entity,md::ls::UniqueMaterialDiffuseTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::UniqueMaterialDiffuseTexture>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  char v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        long long v20 = operator new(8 * v19);
      }
      else
      {
        long long v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      uint64_t v22 = &v20[8 * v19];
      void *v21 = v5;
      unint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        unint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          unint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      unint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      uint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          uint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  uint64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      uint64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialDiffuseTexture>(gdc::Entity,md::ls::UniqueMaterialDiffuseTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5256D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialDiffuseTexture>(gdc::Entity,md::ls::UniqueMaterialDiffuseTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF5256D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueMaterialDiffuseTexture>(gdc::Entity,md::ls::UniqueMaterialDiffuseTexture &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

__n128 std::__function::__func<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_0,std::allocator<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_0>,void ()(md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF520228;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  long long v3 = *(_OWORD *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 std::__function::__func<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_0,std::allocator<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_0>,void ()(md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x50uLL);
  *(void *)uint64_t v2 = &unk_1EF520228;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((void *)v2 + 9) = *(void *)(a1 + 72);
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_0,std::allocator<md::ita::CollectDaVinciMeshRenderables::operator()(ecs2::Query<md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*>,ecs2::Query<md::ls::BaseMapTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TileRenderableDataHandle const&>)::$_0>,void ()(md::ls::RegisterHandle const&,md::ls::EnteringView const&,md::ls::BaseMapTileHandle const&,md::ls::AssociationTileHandle const&,md::ls::TileRenderableTypeT<md::DaVinciGroundRenderable> const&,md::ls::TransferStyleAttributeRasterSet const*,md::ls::TileUnitsPerMeter const&,md::ls::MapDataTypeV const&,md::ls::TileClippingConstantDataHandle const*,md::ls::TileViewConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileRenderableDataHandle const&,md::ls::RenderablesCount const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileShadowConstantDataHandle const*,md::ls::TilePrepassShadowConstantDataHandle const*,md::ls::TilePrepassConstantDataHandle const*,md::ls::TileStyleCameraConstantDataHandle const*)>::~__func()
{
}

void *std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::RampMaterialData>(std::type_identity<md::ls::RampMaterialData>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::RampMaterialData>(std::type_identity<md::ls::RampMaterialData>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EF526378;
  return result;
}

void std::__function::__func<ecs2::ClearComponent::ClearComponent<md::ls::RampMaterialData>(std::type_identity<md::ls::RampMaterialData>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::ClearComponent::ClearComponent<md::ls::RampMaterialData>(std::type_identity<md::ls::RampMaterialData>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
}

void md::Logic<md::LocalNorthLogic,md::LocalNorthLogicContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  long long v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    unint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

uint64_t _ZNKSt3__110__function6__funcIZN2md15LocalNorthLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22LocalNorthLogicContextEE3__2NS_9allocatorISL_EEFvNS2_17StyleManagerEventEEE7__cloneEPNS0_6__baseISP_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF571148;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md15LocalNorthLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22LocalNorthLogicContextEE3__2NS_9allocatorISL_EEFvNS2_17StyleManagerEventEEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF571148;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md15LocalNorthLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22LocalNorthLogicContextEE3__2NS_9allocatorISL_EEFvNS2_17StyleManagerEventEEED0Ev()
{
}

uint64_t _ZNKSt3__110__function6__funcIZN2md15LocalNorthLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22LocalNorthLogicContextEE3__1NS_9allocatorISL_EEFvvEE7__cloneEPNS0_6__baseISO_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF571100;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md15LocalNorthLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22LocalNorthLogicContextEE3__1NS_9allocatorISL_EEFvvEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF571100;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md15LocalNorthLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22LocalNorthLogicContextEE3__1NS_9allocatorISL_EEFvvEED0Ev()
{
}

uint64_t _ZNKSt3__110__function6__funcIZN2md15LocalNorthLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22LocalNorthLogicContextEE3__0NS_9allocatorISL_EEFvvEE7__cloneEPNS0_6__baseISO_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5710B8;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md15LocalNorthLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22LocalNorthLogicContextEE3__0NS_9allocatorISL_EEFvvEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF5710B8;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md15LocalNorthLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_17StyleLogicContextENS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_22LocalNorthLogicContextEE3__0NS_9allocatorISL_EEFvvEED0Ev()
{
}

uint64_t md::Logic<md::LocalNorthLogic,md::LocalNorthLogicContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::LocalNorthLogic,md::LocalNorthLogicContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0xC81F81A7CB7767BBLL && (uint64_t v4 = *(void *)(a3 + 32)) != 0)
  {
    uint64_t v6 = result;
    md::LogicDependencies<gdc::TypeList<md::StyleLogicContext,md::SceneContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::StyleLogicContext,md::SceneContext,md::CameraContext>(v7, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t gdc::ObjectHolder<md::LocalNorthLogicContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::LocalNorthLogicContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF5559B0;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0x1000C4000313F17);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::LocalNorthLogicContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF5559B0;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x1000C4000313F17);
  }
  return a1;
}

void md::LocalNorthLogic::~LocalNorthLogic(md::LocalNorthLogic *this)
{
  md::LocalNorthLogic::~LocalNorthLogic(this);
  JUMPOUT(0x1A6239270);
}

{
  char *v2;
  char *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;

  *(void *)this = &unk_1EF534EB8;
  uint64_t v2 = (char *)this + 176;
  uint64_t v3 = (char *)*((void *)this + 25);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 20);
    if (!v4) {
      goto LABEL_8;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 20);
    if (!v4) {
      goto LABEL_8;
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = *((void *)this + 15);
    if (!v5) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v5 = *((void *)this + 15);
  if (v5)
  {
LABEL_9:
    *((void *)this + 16) = v5;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 18) + 40))(*((void *)this + 18), v5, *((void *)this + 17) - v5);
  }
LABEL_10:
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

void md::LabelClusterProvider::labelMarkerForClusterNode(md::LabelClusterProvider *this@<X0>, md::ClusterNode *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = (*(uint64_t (**)(md::ClusterNode *))(*(void *)a2 + 64))(a2);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 2);
    (*(void (**)(uint64_t))(*(void *)v5 + 88))(v5);
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    md::LabelManager::labelMarkerForCustomFeatureAnnotation(a3, v6, v7, *((void **)this + 4));
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_1A267653C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2677AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  md::LabelExternalTextElement::~LabelExternalTextElement(&a14);
  if (v27) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28 + 40))(v28, v27, v29 - v27);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a27);

  _Unwind_Resume(a1);
}

void md::LabelClusterProvider::~LabelClusterProvider(md::LabelClusterProvider *this)
{
  *((_WORD *)this + 64) = 0;
  uint64_t v2 = *((void *)this + 14);
  if (v2)
  {
    *(void *)(v2 + 8) = 0;
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 15);
    *((void *)this + 14) = 0;
    *((void *)this + 15) = 0;
    if (v3)
    {
      if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  uint64_t v4 = (void *)*((void *)this + 10);
  if (v4)
  {
    *((void *)this + 10) = 0;
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 13);
    if (!v6) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 13);
    if (!v6) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  *((void *)this + 9) = &unk_1EF559E78;

  *((void *)this + 6) = &unk_1EF559E78;
  *((void *)this + 3) = &unk_1EF55A038;
}

uint64_t std::__shared_ptr_emplace<md::LabelClusterTree>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::LabelClusterTree>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580218;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::LabelClusterTree>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580218;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::function<void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<md::ita::ProcessRenderableForPlanarParameters::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>)::$_0,std::allocator<md::ita::ProcessRenderableForPlanarParameters::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3, float *a4, float *a5)
{
  unint64_t v9 = *a2;
  uint64_t v10 = *(void ***)(a1 + 48);
  uint64_t v11 = **(void **)(a1 + 8);
  *(void *)&long long v203 = v9;
  uint64_t v12 = *(void *)(v11 + 120);
  if (v9 >= (unint64_t)((*(void *)(v11 + 128) - v12) >> 3)) {
    goto LABEL_9;
  }
  unint64_t v13 = *(void *)(v12 + 8 * v9);
  if (v13)
  {
    if (HIDWORD(v9) == HIDWORD(v13))
    {
      uint64_t v14 = *(void *)(v11 + 144);
      unint64_t v15 = (unint64_t *)(v14 + 8 * v13);
      if (v15 != *(unint64_t **)(v11 + 152) && v14 != 0)
      {
        unint64_t v52 = std::__hash_table<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::__unordered_map_hasher<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::hash<geo::handle<md::MaterialIDStorage>>,std::equal_to<geo::handle<md::MaterialIDStorage>>,true>,std::__unordered_map_equal<geo::handle<md::MaterialIDStorage>,std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>,std::equal_to<geo::handle<md::MaterialIDStorage>>,std::hash<geo::handle<md::MaterialIDStorage>>,true>,std::allocator<std::__hash_value_type<geo::handle<md::MaterialIDStorage>,md::Counter>>>::__emplace_unique_key_args<geo::handle<md::MaterialIDStorage>,std::piecewise_construct_t const&,std::tuple<geo::handle<md::MaterialIDStorage> const&>,std::tuple<>>(v11 + 56, v9, &v203);
        ++v52[3];
        unint64_t v13 = *v15;
        goto LABEL_10;
      }
    }
LABEL_9:
    unint64_t v13 = 0;
  }
LABEL_10:
  unint64_t v17 = *(int8x8_t **)v11;
  long long v210 = v13;
  gms::MaterialManager<ggl::Texture2D>::materialForKeyAndAttributes(&v208, v17, (uint64_t *)&v210, 0);
  uint64_t v18 = v208;
  if (v208[8] - 3 <= 1)
  {
    uint64_t v19 = **(void **)(a1 + 16);
    unint64_t v20 = *a3;
    *(void *)&long long v210 = v20;
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v19 + 104));
    uint64_t v21 = *(void *)(v19 + 504);
    if (v20 < (unint64_t)((*(void *)(v19 + 512) - v21) >> 3)
      && ((v22 = *(void *)(v21 + 8 * v20)) != 0 ? (BOOL v23 = HIDWORD(v20) == HIDWORD(v22)) : (BOOL v23 = 0), v23))
    {
      uint64_t v25 = (uint64_t *)(*(void *)(v19 + 528) + 40 * v22);
      uint64_t v24 = *(uint64_t **)(v19 + 536);
    }
    else
    {
      uint64_t v24 = *(uint64_t **)(v19 + 536);
      uint64_t v25 = v24;
    }
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v19 + 104));
    uint64_t v26 = std::__hash_table<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::__unordered_map_hasher<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::hash<geo::handle<mre::Texture>>,std::equal_to<geo::handle<mre::Texture>>,true>,std::__unordered_map_equal<geo::handle<mre::Texture>,std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>,std::equal_to<geo::handle<mre::Texture>>,std::hash<geo::handle<mre::Texture>>,true>,std::allocator<std::__hash_value_type<geo::handle<mre::Texture>,mre::GGLResourceStore::Counter>>>::__emplace_unique_key_args<geo::handle<mre::Texture>,std::piecewise_construct_t const&,std::tuple<geo::handle<mre::Texture> const&>,std::tuple<>>((float *)(v19 + 440), v20, &v210);
    ++v26[3];
    if (v25 != v24 && v25 != 0)
    {
      uint64_t v28 = *v25;
      if (*v25)
      {
        unsigned int v29 = *(_DWORD *)(v28 + 80);
        unsigned int v30 = *(_DWORD *)(v28 + 84);
        float v31 = *a4;
        (*(void (**)(uint64_t *__return_ptr, unsigned char *, float))(*(void *)v18 + 392))(&v206, v18, *a5);
        (*(void (**)(uint64_t *__return_ptr, unsigned char *, float))(*(void *)v18 + 424))(&v204, v18, *a5);
        LODWORD(v34) = v207;
        if ((_BYTE)v206)
        {
          float v35 = *((float *)&v206 + 1);
        }
        else
        {
          *(float *)&double v34 = 1.0;
          float v35 = 1.0;
        }
        LODWORD(v33) = HIDWORD(v204);
        LODWORD(v32) = v205;
        if ((_BYTE)v204)
        {
          float v36 = *((float *)&v204 + 1);
        }
        else
        {
          *(float *)&double v32 = 0.0;
          float v36 = 0.0;
        }
        if (**(unsigned char **)(a1 + 24))
        {
          uint64_t v37 = +[VKDebugSettings sharedSettings];
          [v37 daVinciPlanarTilingOverride];
          float v35 = v38;

          uint64_t v39 = +[VKDebugSettings sharedSettings];
          [v39 daVinciPlanarOffsetOverride];
          float v36 = v40;

          *(float *)&double v32 = v36;
          *(float *)&double v34 = v35;
        }
        uint64_t v41 = *(void **)(a1 + 40);
        float v42 = **(float **)(a1 + 32);
        float v43 = v42 / (float)(v31 * (float)v29);
        float v44 = v42 / (float)(v31 * (float)v30);
        *(float *)&long long v203 = v43 * v35;
        *((float *)&v203 + 1) = v44 * *(float *)&v34;
        *((float *)&v203 + 2) = v43 * v36;
        *((float *)&v203 + 3) = v44 * *(float *)&v32;
        uint64_t v45 = *v41;
        uint64_t v46 = (void *)(*v41 + 6192);
        uint64_t v47 = std::__hash_table<std::__hash_value_type<md::PlanarParametersCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,std::__unordered_map_hasher<md::PlanarParametersCacheKey,std::__hash_value_type<md::PlanarParametersCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,md::PlanarParametersCacheKeyHasher,std::equal_to<md::PlanarParametersCacheKey>,true>,std::__unordered_map_equal<md::PlanarParametersCacheKey,std::__hash_value_type<md::PlanarParametersCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>,std::equal_to<md::PlanarParametersCacheKey>,md::PlanarParametersCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::PlanarParametersCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::PlanarParameters>>>>>::find<md::PlanarParametersCacheKey>(v46, (float *)&v203);
        if (v47 && v47[4])
        {
          *(void *)&long long v210 = v47[4];
          BYTE8(v210) = v18[8] == 4;
          uint64_t v48 = (uint64_t *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
          ecs2::addComponent<md::ls::PlanarConstantDataHandle>(*v10, *v48, (uint64_t)&v210);
          goto LABEL_357;
        }
        long long v210 = 0uLL;
        unint64_t v211 = 0;
        uint64_t v49 = *(void *)(v45 + 6064);
        if (*(void *)(v45 + 6056) == v49)
        {
          uint64_t v53 = (-1431655765 * ((*(void *)(v45 + 6112) - *(void *)(v45 + 6104)) >> 3)) | 0x100000000;
          unint64_t v54 = *(uint64_t **)(v45 + 6088);
          unint64_t v55 = *(void *)(v45 + 6096);
          if ((unint64_t)v54 >= v55)
          {
            uint64_t v57 = *(char **)(v45 + 6080);
            uint64_t v58 = ((char *)v54 - v57) >> 3;
            unint64_t v59 = v58 + 1;
            if ((unint64_t)(v58 + 1) >> 61) {
              goto LABEL_362;
            }
            uint64_t v60 = v55 - (void)v57;
            if (v60 >> 2 > v59) {
              unint64_t v59 = v60 >> 2;
            }
            if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v61 = v59;
            }
            if (v61)
            {
              if (v61 >> 61) {
                goto LABEL_361;
              }
              uint64_t v62 = (char *)operator new(8 * v61);
            }
            else
            {
              uint64_t v62 = 0;
            }
            uint64_t v63 = (uint64_t *)&v62[8 * v58];
            *uint64_t v63 = v53;
            int v56 = v63 + 1;
            if (v54 != (uint64_t *)v57)
            {
              unint64_t v64 = (char *)v54 - v57 - 8;
              if (v64 < 0x58) {
                goto LABEL_365;
              }
              if ((unint64_t)(v57 - v62) < 0x20) {
                goto LABEL_365;
              }
              uint64_t v65 = (v64 >> 3) + 1;
              id v66 = &v62[(char *)v54 - v57 - 16];
              long long v67 = v54 - 2;
              uint64_t v68 = v65 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v69 = *(_OWORD *)v67;
                *((_OWORD *)v66 - 1) = *((_OWORD *)v67 - 1);
                *(_OWORD *)id v66 = v69;
                v66 -= 32;
                v67 -= 4;
                v68 -= 4;
              }
              while (v68);
              v63 -= v65 & 0x3FFFFFFFFFFFFFFCLL;
              v54 -= v65 & 0x3FFFFFFFFFFFFFFCLL;
              if (v65 != (v65 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_365:
                do
                {
                  uint64_t v70 = *--v54;
                  *--uint64_t v63 = v70;
                }
                while (v54 != (uint64_t *)v57);
              }
              unint64_t v54 = *(uint64_t **)(v45 + 6080);
            }
            *(void *)(v45 + 6080) = v63;
            *(void *)(v45 + 6088) = v56;
            *(void *)(v45 + 6096) = &v62[8 * v61];
            if (v54) {
              operator delete(v54);
            }
          }
          else
          {
            *unint64_t v54 = v53;
            int v56 = v54 + 1;
          }
          *(void *)(v45 + 6088) = v56;
          unint64_t v51 = *(v56 - 1);
        }
        else
        {
          uint64_t v50 = *(void *)(v49 - 8);
          *(void *)(v45 + 6064) = v49 - 8;
          *(_DWORD *)(*(void *)(v45 + 6080) + 8 * v50) = -1431655765
                                                         * ((*(void *)(v45 + 6112) - *(void *)(v45 + 6104)) >> 3);
          *(_DWORD *)(*(void *)(v45 + 6080) + 8 * v50 + 4) = (((unint64_t)*(unsigned int *)(*(void *)(v45 + 6080) + 8 * v50 + 4) << 32)
                                                              + 0x100000000) >> 32;
          unint64_t v51 = v50 | ((unint64_t)*(unsigned int *)(*(void *)(v45 + 6080) + 8 * v50 + 4) << 32);
        }
        unint64_t v71 = *(char **)(v45 + 6112);
        unint64_t v72 = *(void *)(v45 + 6120);
        if ((unint64_t)v71 >= v72)
        {
          uint64_t v75 = *(char **)(v45 + 6104);
          unint64_t v76 = 0xAAAAAAAAAAAAAAABLL * ((v71 - v75) >> 3) + 1;
          if (v76 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_362;
          }
          unint64_t v77 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - (void)v75) >> 3);
          if (2 * v77 > v76) {
            unint64_t v76 = 2 * v77;
          }
          if (v77 >= 0x555555555555555) {
            unint64_t v78 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v78 = v76;
          }
          if (v78 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_361;
          }
          uint64_t v79 = (char *)operator new(24 * v78);
          uint64_t v80 = &v79[8 * ((v71 - v75) >> 3)];
          *(_OWORD *)uint64_t v80 = v210;
          unint64_t v81 = v211;
          *((void *)v80 + 2) = v211;
          if (v81)
          {
            atomic_fetch_add_explicit(&v81->__shared_owners_, 1uLL, memory_order_relaxed);
            unint64_t v71 = *(char **)(v45 + 6112);
            uint64_t v75 = *(char **)(v45 + 6104);
          }
          long long v82 = &v79[24 * v78];
          uint64_t v74 = v80 + 24;
          if (v71 == v75)
          {
            *(void *)(v45 + 6104) = v80;
            *(void *)(v45 + 6112) = v74;
            *(void *)(v45 + 6120) = v82;
          }
          else
          {
            do
            {
              long long v83 = *(_OWORD *)(v71 - 24);
              v71 -= 24;
              *(_OWORD *)(v80 - 24) = v83;
              v80 -= 24;
              *((void *)v80 + 2) = *((void *)v71 + 2);
              *((void *)v71 + 1) = 0;
              *((void *)v71 + 2) = 0;
            }
            while (v71 != v75);
            uint64_t v75 = *(char **)(v45 + 6104);
            uint64_t v84 = *(char **)(v45 + 6112);
            *(void *)(v45 + 6104) = v80;
            *(void *)(v45 + 6112) = v74;
            for (*(void *)(v45 + 6120) = v82; v84 != v75; v84 -= 24)
            {
              unint64_t v85 = (std::__shared_weak_count *)*((void *)v84 - 1);
              if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                std::__shared_weak_count::__release_weak(v85);
              }
            }
          }
          if (v75) {
            operator delete(v75);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v71 = v210;
          uint64_t v73 = v211;
          *((void *)v71 + 2) = v211;
          if (v73) {
            atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v74 = v71 + 24;
        }
        *(void *)(v45 + 6112) = v74;
        unint64_t v86 = *(void *)(v45 + 6136);
        unint64_t v87 = *(void *)(v45 + 6144);
        if (v86 < v87)
        {
          *(void *)unint64_t v86 = v51;
          v86 += 8;
          unint64_t v88 = v86;
          goto LABEL_104;
        }
        uint64_t v89 = *(unsigned char **)(v45 + 6128);
        uint64_t v90 = (uint64_t)(v86 - (void)v89) >> 3;
        unint64_t v91 = v90 + 1;
        if (!((unint64_t)(v90 + 1) >> 61))
        {
          uint64_t v92 = v87 - (void)v89;
          if (v92 >> 2 > v91) {
            unint64_t v91 = v92 >> 2;
          }
          if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v93 = v91;
          }
          if (v93)
          {
            if (v93 >> 61) {
              goto LABEL_361;
            }
            uint64_t v94 = operator new(8 * v93);
          }
          else
          {
            uint64_t v94 = 0;
          }
          unint64_t v95 = &v94[8 * v90];
          *unint64_t v95 = v51;
          unint64_t v88 = (unint64_t)(v95 + 1);
          if ((unsigned char *)v86 != v89)
          {
            unint64_t v96 = v86 - (void)v89 - 8;
            if (v96 < 0x58) {
              goto LABEL_366;
            }
            if ((unint64_t)(v89 - v94) < 0x20) {
              goto LABEL_366;
            }
            uint64_t v97 = (v96 >> 3) + 1;
            unint64_t v98 = &v94[v86 - (void)v89 - 16];
            uint64_t v99 = (long long *)(v86 - 16);
            uint64_t v100 = v97 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v101 = *v99;
              *(v98 - 1) = *(v99 - 1);
              _OWORD *v98 = v101;
              v98 -= 2;
              v99 -= 2;
              v100 -= 4;
            }
            while (v100);
            v95 -= v97 & 0x3FFFFFFFFFFFFFFCLL;
            v86 -= 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
            if (v97 != (v97 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_366:
              do
              {
                uint64_t v102 = *(void *)(v86 - 8);
                v86 -= 8;
                *--unint64_t v95 = v102;
              }
              while ((unsigned char *)v86 != v89);
            }
          }
          *(void *)(v45 + 6128) = v95;
          *(void *)(v45 + 6136) = v88;
          *(void *)(v45 + 6144) = &v94[8 * v93];
          if (v89) {
            operator delete(v89);
          }
LABEL_104:
          unint64_t v103 = (uint64_t *)(v45 + 5976);
          *(void *)(v45 + 6136) = v88;
          unint64_t v104 = *(void *)(v45 + 5984);
          if (v104)
          {
            uint8x8_t v105 = (uint8x8_t)vcnt_s8((int8x8_t)v104);
            v105.i16[0] = vaddlv_u8(v105);
            if (v105.u32[0] > 1uLL)
            {
              unint64_t v88 = v51;
              if (v51 >= v104) {
                unint64_t v88 = v51 % v104;
              }
            }
            else
            {
              unint64_t v88 = (v104 - 1) & v51;
            }
            uint64_t v106 = *(void **)(*v103 + 8 * v88);
            if (v106)
            {
              uint64_t v107 = (void *)*v106;
              if (v107)
              {
                if (v105.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v109 = v107[1];
                    if (v109 == v51)
                    {
                      if (v107[2] == v51) {
                        goto LABEL_163;
                      }
                    }
                    else if ((v109 & (v104 - 1)) != v88)
                    {
                      goto LABEL_125;
                    }
                    uint64_t v107 = (void *)*v107;
                    if (!v107) {
                      goto LABEL_125;
                    }
                  }
                }
                do
                {
                  unint64_t v108 = v107[1];
                  if (v108 == v51)
                  {
                    if (v107[2] == v51) {
                      goto LABEL_163;
                    }
                  }
                  else
                  {
                    if (v108 >= v104) {
                      v108 %= v104;
                    }
                    if (v108 != v88) {
                      break;
                    }
                  }
                  uint64_t v107 = (void *)*v107;
                }
                while (v107);
              }
            }
          }
LABEL_125:
          unint64_t v86 = (unint64_t)operator new(0x30uLL);
          *(void *)unint64_t v86 = 0;
          *(void *)(v86 + 8) = v51;
          *(void *)(v86 + 16) = v51;
          *(_OWORD *)(v86 + 24) = xmmword_1A28FCC60;
          *(unsigned char *)(v86 + 40) = 0;
          float v110 = (float)(unint64_t)(*(void *)(v45 + 6000) + 1);
          float v111 = *(float *)(v45 + 6008);
          if (!v104 || (float)(v111 * (float)v104) < v110)
          {
            BOOL v112 = 1;
            if (v104 >= 3) {
              BOOL v112 = (v104 & (v104 - 1)) != 0;
            }
            unint64_t v113 = v112 | (2 * v104);
            unint64_t v114 = vcvtps_u32_f32(v110 / v111);
            if (v113 <= v114) {
              size_t prime = v114;
            }
            else {
              size_t prime = v113;
            }
            if (prime == 1)
            {
              size_t prime = 2;
            }
            else if ((prime & (prime - 1)) != 0)
            {
              size_t prime = std::__next_prime(prime);
              unint64_t v104 = *(void *)(v45 + 5984);
            }
            if (prime > v104) {
              goto LABEL_137;
            }
            if (prime < v104)
            {
              unint64_t v116 = vcvtps_u32_f32((float)*(unint64_t *)(v45 + 6000) / *(float *)(v45 + 6008));
              if (v104 < 3
                || (uint8x8_t v117 = (uint8x8_t)vcnt_s8((int8x8_t)v104), v117.i16[0] = vaddlv_u8(v117), v117.u32[0] > 1uLL))
              {
                unint64_t v116 = std::__next_prime(v116);
              }
              else
              {
                uint64_t v118 = 1 << -(char)__clz(v116 - 1);
                if (v116 >= 2) {
                  unint64_t v116 = v118;
                }
              }
              if (prime <= v116) {
                size_t prime = v116;
              }
              if (prime < v104) {
LABEL_137:
              }
                std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v45 + 5976, prime);
            }
            unint64_t v104 = *(void *)(v45 + 5984);
            if ((v104 & (v104 - 1)) != 0)
            {
              if (v51 >= v104) {
                unint64_t v88 = v51 % v104;
              }
              else {
                unint64_t v88 = v51;
              }
            }
            else
            {
              unint64_t v88 = (v104 - 1) & v51;
            }
          }
          uint64_t v119 = *v103;
          uint64_t v120 = *(unint64_t **)(*v103 + 8 * v88);
          if (v120)
          {
            *(void *)unint64_t v86 = *v120;
          }
          else
          {
            *(void *)unint64_t v86 = *(void *)(v45 + 5992);
            *(void *)(v45 + 5992) = v86;
            *(void *)(v119 + 8 * v88) = v45 + 5992;
            if (!*(void *)v86)
            {
LABEL_162:
              ++*(void *)(v45 + 6000);
LABEL_163:
              unint64_t v122 = v211;
              if (v211 && !atomic_fetch_add(&v211->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                std::__shared_weak_count::__release_weak(v122);
              }
              uint64_t v123 = v203;
              unint64_t v124 = v203 - 0x61C8864680B583EBLL;
              if (*(float *)&v203 == 0.0) {
                unint64_t v124 = 0x9E3779B97F4A7C15;
              }
              uint64_t v125 = DWORD1(v203) - 0x61C8864680B583EBLL;
              if (*((float *)&v203 + 1) == 0.0) {
                uint64_t v125 = 0x9E3779B97F4A7C15;
              }
              unint64_t v126 = ((v124 >> 2) + (v124 << 6) + v125) ^ v124;
              uint64_t v127 = *((void *)&v203 + 1);
              uint64_t v128 = DWORD2(v203) - 0x61C8864680B583EBLL;
              if (*((float *)&v203 + 2) == 0.0) {
                uint64_t v128 = 0x9E3779B97F4A7C15;
              }
              unint64_t v129 = (v128 + (v126 << 6) + (v126 >> 2)) ^ v126;
              uint64_t v130 = HIDWORD(v203) - 0x61C8864680B583EBLL;
              if (*((float *)&v203 + 3) == 0.0) {
                uint64_t v130 = 0x9E3779B97F4A7C15;
              }
              unint64_t v131 = ((v130 + (v129 << 6) + (v129 >> 2)) ^ v129) - 0x61C8864680B583EBLL;
              unint64_t v132 = *(void *)(v45 + 6200);
              if (v132)
              {
                uint8x8_t v133 = (uint8x8_t)vcnt_s8((int8x8_t)v132);
                v133.i16[0] = vaddlv_u8(v133);
                if (v133.u32[0] > 1uLL)
                {
                  unint64_t v86 = ((v130 + (v129 << 6) + (v129 >> 2)) ^ v129) - 0x61C8864680B583EBLL;
                  if (v131 >= v132) {
                    unint64_t v86 = v131 % v132;
                  }
                }
                else
                {
                  unint64_t v86 = v131 & (v132 - 1);
                }
                uint64_t v134 = *(uint64_t **)(*v46 + 8 * v86);
                if (v134)
                {
                  uint64_t v135 = *v134;
                  if (*v134)
                  {
                    if (v133.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        uint64_t v139 = *(void *)(v135 + 8);
                        if (v139 == v131)
                        {
                          if (*(void *)(v135 + 16) == (void)v203
                            && *(void *)(v135 + 24) == *((void *)&v203 + 1))
                          {
                            goto LABEL_268;
                          }
                        }
                        else if ((v139 & (v132 - 1)) != v86)
                        {
                          goto LABEL_201;
                        }
                        uint64_t v135 = *(void *)v135;
                        if (!v135) {
                          goto LABEL_201;
                        }
                      }
                    }
                    do
                    {
                      unint64_t v137 = *(void *)(v135 + 8);
                      if (v137 == v131)
                      {
                        if (*(void *)(v135 + 16) == (void)v203 && *(void *)(v135 + 24) == *((void *)&v203 + 1)) {
                          goto LABEL_268;
                        }
                      }
                      else
                      {
                        if (v137 >= v132) {
                          v137 %= v132;
                        }
                        if (v137 != v86) {
                          break;
                        }
                      }
                      uint64_t v135 = *(void *)v135;
                    }
                    while (v135);
                  }
                }
              }
LABEL_201:
              uint64_t v135 = (uint64_t)operator new(0x28uLL);
              *(void *)uint64_t v135 = 0;
              *(void *)(v135 + 8) = v131;
              *(_OWORD *)(v135 + 16) = v203;
              *(void *)(v135 + 32) = 0;
              float v140 = (float)(unint64_t)(*(void *)(v45 + 6216) + 1);
              float v141 = *(float *)(v45 + 6224);
              if (v132 && (float)(v141 * (float)v132) >= v140)
              {
LABEL_258:
                uint64_t v164 = (void *)*v46;
                unint64_t v165 = *(uint64_t **)(*v46 + 8 * v86);
                if (v165)
                {
                  *(void *)uint64_t v135 = *v165;
                }
                else
                {
                  *(void *)uint64_t v135 = *(void *)(v45 + 6208);
                  *(void *)(v45 + 6208) = v135;
                  v164[v86] = v45 + 6208;
                  if (!*(void *)v135) {
                    goto LABEL_267;
                  }
                  unint64_t v166 = *(void *)(*(void *)v135 + 8);
                  if ((v132 & (v132 - 1)) != 0)
                  {
                    if (v166 >= v132) {
                      v166 %= v132;
                    }
                  }
                  else
                  {
                    v166 &= v132 - 1;
                  }
                  unint64_t v165 = (uint64_t *)(*v46 + 8 * v166);
                }
                uint64_t *v165 = v135;
LABEL_267:
                ++*(void *)(v45 + 6216);
LABEL_268:
                *(void *)(v135 + 32) = v51;
                unint64_t v167 = *(void *)(v45 + 6240);
                if (v167)
                {
                  uint8x8_t v168 = (uint8x8_t)vcnt_s8((int8x8_t)v167);
                  v168.i16[0] = vaddlv_u8(v168);
                  if (v168.u32[0] > 1uLL)
                  {
                    uint64_t v135 = v51;
                    if (v51 >= v167) {
                      uint64_t v135 = v51 % v167;
                    }
                  }
                  else
                  {
                    uint64_t v135 = (v167 - 1) & v51;
                  }
                  uint64_t v169 = *(void ***)(*(void *)(v45 + 6232) + 8 * v135);
                  if (v169)
                  {
                    unint64_t v170 = *v169;
                    if (*v169)
                    {
                      if (v168.u32[0] < 2uLL)
                      {
                        while (1)
                        {
                          uint64_t v172 = v170[1];
                          if (v172 == v51)
                          {
                            if (v170[2] == v51) {
                              goto LABEL_356;
                            }
                          }
                          else if ((v172 & (v167 - 1)) != v135)
                          {
                            goto LABEL_289;
                          }
                          unint64_t v170 = (void *)*v170;
                          if (!v170) {
                            goto LABEL_289;
                          }
                        }
                      }
                      do
                      {
                        unint64_t v171 = v170[1];
                        if (v171 == v51)
                        {
                          if (v170[2] == v51) {
                            goto LABEL_356;
                          }
                        }
                        else
                        {
                          if (v171 >= v167) {
                            v171 %= v167;
                          }
                          if (v171 != v135) {
                            break;
                          }
                        }
                        unint64_t v170 = (void *)*v170;
                      }
                      while (v170);
                    }
                  }
                }
LABEL_289:
                unint64_t v170 = operator new(0x28uLL);
                *unint64_t v170 = 0;
                v170[1] = v51;
                v170[3] = 0;
                v170[4] = 0;
                v170[2] = v51;
                float v173 = (float)(unint64_t)(*(void *)(v45 + 6256) + 1);
                float v174 = *(float *)(v45 + 6264);
                if (v167 && (float)(v174 * (float)v167) >= v173)
                {
LABEL_346:
                  uint64_t v199 = *(void *)(v45 + 6232);
                  unint64_t v200 = *(void **)(v199 + 8 * v135);
                  if (v200)
                  {
                    *unint64_t v170 = *v200;
                  }
                  else
                  {
                    *unint64_t v170 = *(void *)(v45 + 6248);
                    *(void *)(v45 + 6248) = v170;
                    *(void *)(v199 + 8 * v135) = v45 + 6248;
                    if (!*v170)
                    {
LABEL_355:
                      ++*(void *)(v45 + 6256);
LABEL_356:
                      v170[3] = v123;
                      v170[4] = v127;
                      *(void *)&long long v210 = v51;
                      operator new();
                    }
                    unint64_t v201 = *(void *)(*v170 + 8);
                    if ((v167 & (v167 - 1)) != 0)
                    {
                      if (v201 >= v167) {
                        v201 %= v167;
                      }
                    }
                    else
                    {
                      v201 &= v167 - 1;
                    }
                    unint64_t v200 = (void *)(*(void *)(v45 + 6232) + 8 * v201);
                  }
                  *unint64_t v200 = v170;
                  goto LABEL_355;
                }
                BOOL v175 = 1;
                if (v167 >= 3) {
                  BOOL v175 = (v167 & (v167 - 1)) != 0;
                }
                unint64_t v176 = v175 | (2 * v167);
                unint64_t v177 = vcvtps_u32_f32(v173 / v174);
                if (v176 <= v177) {
                  size_t v178 = v177;
                }
                else {
                  size_t v178 = v176;
                }
                if (v178 == 1)
                {
                  size_t v178 = 2;
                }
                else if ((v178 & (v178 - 1)) != 0)
                {
                  size_t v178 = std::__next_prime(v178);
                  unint64_t v167 = *(void *)(v45 + 6240);
                }
                if (v178 <= v167)
                {
                  if (v178 >= v167) {
                    goto LABEL_341;
                  }
                  unint64_t v191 = vcvtps_u32_f32((float)*(unint64_t *)(v45 + 6256) / *(float *)(v45 + 6264));
                  if (v167 < 3
                    || (uint8x8_t v192 = (uint8x8_t)vcnt_s8((int8x8_t)v167), v192.i16[0] = vaddlv_u8(v192), v192.u32[0] > 1uLL))
                  {
                    unint64_t v191 = std::__next_prime(v191);
                  }
                  else
                  {
                    uint64_t v193 = 1 << -(char)__clz(v191 - 1);
                    if (v191 >= 2) {
                      unint64_t v191 = v193;
                    }
                  }
                  if (v178 <= v191) {
                    size_t v178 = v191;
                  }
                  if (v178 >= v167) {
                    goto LABEL_341;
                  }
                  if (!v178)
                  {
                    unint64_t v198 = *(void **)(v45 + 6232);
                    *(void *)(v45 + 6232) = 0;
                    if (v198) {
                      operator delete(v198);
                    }
                    *(void *)(v45 + 6240) = 0;
                    goto LABEL_341;
                  }
                }
                if (!(v178 >> 61))
                {
                  uint64_t v179 = operator new(8 * v178);
                  unint64_t v180 = *(void **)(v45 + 6232);
                  *(void *)(v45 + 6232) = v179;
                  if (v180) {
                    operator delete(v180);
                  }
                  uint64_t v181 = 0;
                  *(void *)(v45 + 6240) = v178;
                  do
                    *(void *)(*(void *)(v45 + 6232) + 8 * v181++) = 0;
                  while (v178 != v181);
                  uint64_t v182 = *(void **)(v45 + 6248);
                  if (!v182) {
                    goto LABEL_341;
                  }
                  uint64_t v183 = v45 + 6248;
                  size_t v184 = v182[1];
                  size_t v185 = v178 - 1;
                  if ((v178 & (v178 - 1)) == 0)
                  {
                    size_t v186 = v184 & v185;
                    *(void *)(*(void *)(v45 + 6232) + 8 * v186) = v183;
                    while (1)
                    {
                      uint64_t v187 = (void *)*v182;
                      if (!*v182) {
                        break;
                      }
                      size_t v188 = v187[1] & v185;
                      if (v188 == v186)
                      {
                        uint64_t v182 = (void *)*v182;
                      }
                      else
                      {
                        uint64_t v189 = *(void *)(v45 + 6232);
                        if (*(void *)(v189 + 8 * v188))
                        {
                          *uint64_t v182 = *v187;
                          uint64_t v190 = 8 * v188;
                          void *v187 = **(void **)(*(void *)(v45 + 6232) + v190);
                          **(void **)(*(void *)(v45 + 6232) + v190) = v187;
                        }
                        else
                        {
                          *(void *)(v189 + 8 * v188) = v182;
                          uint64_t v182 = v187;
                          size_t v186 = v188;
                        }
                      }
                    }
LABEL_341:
                    unint64_t v167 = *(void *)(v45 + 6240);
                    if ((v167 & (v167 - 1)) != 0)
                    {
                      if (v51 >= v167) {
                        uint64_t v135 = v51 % v167;
                      }
                      else {
                        uint64_t v135 = v51;
                      }
                    }
                    else
                    {
                      uint64_t v135 = (v167 - 1) & v51;
                    }
                    goto LABEL_346;
                  }
                  if (v184 >= v178) {
                    v184 %= v178;
                  }
                  *(void *)(*(void *)(v45 + 6232) + 8 * v184) = v183;
                  uint64_t v194 = (void *)*v182;
                  if (!*v182) {
                    goto LABEL_341;
                  }
                  while (1)
                  {
                    size_t v196 = v194[1];
                    if (v196 >= v178) {
                      v196 %= v178;
                    }
                    if (v196 != v184)
                    {
                      uint64_t v197 = *(void *)(v45 + 6232);
                      if (!*(void *)(v197 + 8 * v196))
                      {
                        *(void *)(v197 + 8 * v196) = v182;
                        goto LABEL_327;
                      }
                      *uint64_t v182 = *v194;
                      uint64_t v195 = 8 * v196;
                      *uint64_t v194 = **(void **)(*(void *)(v45 + 6232) + v195);
                      **(void **)(*(void *)(v45 + 6232) + v195) = v194;
                      uint64_t v194 = v182;
                    }
                    size_t v196 = v184;
LABEL_327:
                    uint64_t v182 = v194;
                    uint64_t v194 = (void *)*v194;
                    size_t v184 = v196;
                    if (!v194) {
                      goto LABEL_341;
                    }
                  }
                }
LABEL_361:
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              BOOL v142 = 1;
              if (v132 >= 3) {
                BOOL v142 = (v132 & (v132 - 1)) != 0;
              }
              unint64_t v143 = v142 | (2 * v132);
              unint64_t v144 = vcvtps_u32_f32(v140 / v141);
              if (v143 <= v144) {
                size_t v145 = v144;
              }
              else {
                size_t v145 = v143;
              }
              if (v145 == 1)
              {
                size_t v145 = 2;
              }
              else if ((v145 & (v145 - 1)) != 0)
              {
                size_t v145 = std::__next_prime(v145);
                unint64_t v132 = *(void *)(v45 + 6200);
              }
              if (v145 <= v132)
              {
                if (v145 >= v132) {
                  goto LABEL_253;
                }
                unint64_t v157 = vcvtps_u32_f32((float)*(unint64_t *)(v45 + 6216) / *(float *)(v45 + 6224));
                if (v132 < 3
                  || (uint8x8_t v158 = (uint8x8_t)vcnt_s8((int8x8_t)v132), v158.i16[0] = vaddlv_u8(v158), v158.u32[0] > 1uLL))
                {
                  unint64_t v157 = std::__next_prime(v157);
                }
                else
                {
                  uint64_t v159 = 1 << -(char)__clz(v157 - 1);
                  if (v157 >= 2) {
                    unint64_t v157 = v159;
                  }
                }
                if (v145 <= v157) {
                  size_t v145 = v157;
                }
                if (v145 >= v132) {
                  goto LABEL_253;
                }
                if (!v145)
                {
                  uint64_t v163 = (void *)*v46;
                  *uint64_t v46 = 0;
                  if (v163) {
                    operator delete(v163);
                  }
                  *(void *)(v45 + 6200) = 0;
                  goto LABEL_253;
                }
              }
              if (v145 >> 61) {
                goto LABEL_361;
              }
              uint64_t v146 = operator new(8 * v145);
              uint64_t v147 = (void *)*v46;
              *uint64_t v46 = v146;
              if (v147) {
                operator delete(v147);
              }
              uint64_t v148 = 0;
              *(void *)(v45 + 6200) = v145;
              do
                *(void *)(*v46 + 8 * v148++) = 0;
              while (v145 != v148);
              unint64_t v149 = *(void **)(v45 + 6208);
              if (!v149) {
                goto LABEL_253;
              }
              uint64_t v150 = v45 + 6208;
              size_t v151 = v149[1];
              size_t v152 = v145 - 1;
              if ((v145 & (v145 - 1)) == 0)
              {
                size_t v153 = v151 & v152;
                *(void *)(*v46 + 8 * v153) = v150;
                while (1)
                {
                  uint64_t v154 = (void *)*v149;
                  if (!*v149) {
                    break;
                  }
                  size_t v155 = v154[1] & v152;
                  if (v155 == v153)
                  {
                    unint64_t v149 = (void *)*v149;
                  }
                  else if (*(void *)(*v46 + 8 * v155))
                  {
                    *unint64_t v149 = *v154;
                    uint64_t v156 = 8 * v155;
                    *uint64_t v154 = **(void **)(*v46 + v156);
                    **(void **)(*v46 + v156) = v154;
                  }
                  else
                  {
                    *(void *)(*v46 + 8 * v155) = v149;
                    unint64_t v149 = v154;
                    size_t v153 = v155;
                  }
                }
LABEL_253:
                unint64_t v132 = *(void *)(v45 + 6200);
                if ((v132 & (v132 - 1)) != 0)
                {
                  if (v131 >= v132) {
                    unint64_t v86 = v131 % v132;
                  }
                  else {
                    unint64_t v86 = v131;
                  }
                }
                else
                {
                  unint64_t v86 = (v132 - 1) & v131;
                }
                goto LABEL_258;
              }
              if (v151 >= v145) {
                v151 %= v145;
              }
              *(void *)(*v46 + 8 * v151) = v150;
              uint64_t v160 = (void *)*v149;
              if (!*v149) {
                goto LABEL_253;
              }
              while (1)
              {
                size_t v162 = v160[1];
                if (v162 >= v145) {
                  v162 %= v145;
                }
                if (v162 != v151)
                {
                  if (!*(void *)(*v46 + 8 * v162))
                  {
                    *(void *)(*v46 + 8 * v162) = v149;
                    goto LABEL_239;
                  }
                  *unint64_t v149 = *v160;
                  uint64_t v161 = 8 * v162;
                  void *v160 = **(void **)(*v46 + v161);
                  **(void **)(*v46 + v161) = v160;
                  uint64_t v160 = v149;
                }
                size_t v162 = v151;
LABEL_239:
                unint64_t v149 = v160;
                uint64_t v160 = (void *)*v160;
                size_t v151 = v162;
                if (!v160) {
                  goto LABEL_253;
                }
              }
            }
            unint64_t v121 = *(void *)(*(void *)v86 + 8);
            if ((v104 & (v104 - 1)) != 0)
            {
              if (v121 >= v104) {
                v121 %= v104;
              }
            }
            else
            {
              v121 &= v104 - 1;
            }
            uint64_t v120 = (unint64_t *)(*v103 + 8 * v121);
          }
          *uint64_t v120 = v86;
          goto LABEL_162;
        }
LABEL_362:
        abort();
      }
    }
  }
LABEL_357:
  uint64_t v202 = v209;
  if (v209)
  {
    if (!atomic_fetch_add(&v209->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
      std::__shared_weak_count::__release_weak(v202);
    }
  }
}

void sub_1A267977C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  uint64_t v19 = v17[3];
  uint64_t v17[3] = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  operator delete(v17);
  if (a16)
  {
    if (!atomic_fetch_add(&a16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }
  _Unwind_Resume(a1);
}

void ecs2::addComponent<md::ls::PlanarConstantDataHandle>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v7 = *(void *)a3;
  BYTE8(v7) = *(unsigned char *)(a3 + 8);
  uint64_t v5 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v5 = &unk_1EF5243F8;
  *(_OWORD *)(v5 + 8) = v7;
  *((void *)v5 + 3) = a2;
  uint64_t v8 = v5;
  int v9 = 0;
  ecs2::Runtime::queueCommand(a1, (uint64_t)&v7);
  if (v9 != -1) {
    ((void (*)(char *, long long *))off_1EF591040[v9])(&v6, &v7);
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PlanarConstantDataHandle>(gdc::Entity,md::ls::PlanarConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::PlanarConstantDataHandle>(a2);
  *(void *)&long long v25 = *(void *)(a1 + 8);
  BYTE8(v25) = *(unsigned char *)(a1 + 16);
  uint64_t v26 = v3;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v26);
  if (v6)
  {
    uint64_t v12 = (unsigned char *)v4[11];
    unint64_t v11 = v4[12];
    if ((unint64_t)v12 >= v11)
    {
      uint64_t v14 = (unsigned char *)v4[10];
      uint64_t v15 = (v12 - v14) >> 4;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60) {
        goto LABEL_30;
      }
      uint64_t v17 = v11 - (void)v14;
      if (v17 >> 3 > v16) {
        unint64_t v16 = v17 >> 3;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v19 = (char *)operator new(16 * v18);
      }
      else
      {
        uint64_t v19 = 0;
      }
      unint64_t v20 = &v19[16 * v15];
      *(_OWORD *)unint64_t v20 = v25;
      unint64_t v13 = v20 + 16;
      if (v12 != v14)
      {
        do
        {
          uint64_t v21 = *((void *)v12 - 2);
          v12 -= 16;
          char v22 = v12[8];
          *((void *)v20 - 2) = v21;
          v20 -= 16;
          v20[8] = v22;
        }
        while (v12 != v14);
        uint64_t v12 = (unsigned char *)v4[10];
      }
      v4[10] = v20;
      v4[11] = v13;
      v4[12] = &v19[16 * v18];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(_OWORD *)uint64_t v12 = v25;
      unint64_t v13 = v12 + 16;
    }
    v4[11] = v13;
    uint64_t v8 = v4[31];
  }
  else
  {
    uint64_t v7 = v4[10] + 2 * ((void)v5 - v4[7]);
    *(void *)uint64_t v7 = v25;
    *(unsigned char *)(v7 + 8) = BYTE8(v25);
    uint64_t v8 = v4[31];
    if (v7 != v4[11])
    {
      int v9 = (void *)v4[16];
      if (v9)
      {
        while (1)
        {
          uint64_t v28 = &v26;
          uint64_t v29 = 1;
          uint64_t v27 = v8;
          uint64_t v10 = v9[6];
          if (!v10) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v10 + 48))(v10, &v27, &v28);
          int v9 = (void *)*v9;
          if (!v9) {
            return;
          }
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  BOOL v23 = (void *)v4[22];
  if (v23)
  {
    while (1)
    {
      uint64_t v28 = &v26;
      uint64_t v29 = 1;
      uint64_t v27 = v8;
      uint64_t v24 = v23[6];
      if (!v24) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v24 + 48))(v24, &v27, &v28);
      BOOL v23 = (void *)*v23;
      if (!v23) {
        return;
      }
    }
    goto LABEL_29;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PlanarConstantDataHandle>(gdc::Entity,md::ls::PlanarConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5243F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PlanarConstantDataHandle>(gdc::Entity,md::ls::PlanarConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF5243F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PlanarConstantDataHandle>(gdc::Entity,md::ls::PlanarConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

__n128 std::__function::__func<md::ita::ProcessRenderableForPlanarParameters::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>)::$_0,std::allocator<md::ita::ProcessRenderableForPlanarParameters::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5207C8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::ProcessRenderableForPlanarParameters::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>)::$_0,std::allocator<md::ita::ProcessRenderableForPlanarParameters::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_1EF5207C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

void std::__function::__func<md::ita::ProcessRenderableForPlanarParameters::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>)::$_0,std::allocator<md::ita::ProcessRenderableForPlanarParameters::operator()(ecs2::Query<md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&>)::$_0>,void ()(md::ls::UniqueMaterialData const&,md::ls::UniqueMaterialAlbedoTexture const&,md::ls::UnitsPerMeter const&,md::ls::CanUpdateWithStyleZChange const&)>::~__func()
{
}

void non-virtual thunk to'md::realistic::OverlayRenderLayer::onTileComponentDataRelease(md::realistic::OverlayRenderLayer *this, altitude::TileComponent **a2, altitude::TileComponent *a3, void *a4)
{
  if (a2[45] == a3)
  {
    uint64_t v4 = *((void *)this + 7);
    uint64_t v5 = *((void *)this + 8);
    uint64_t v6 = v5 - v4;
    if (v5 != v4)
    {
      uint64_t v7 = 0;
      uint64_t v8 = v6 >> 3;
      while (*(altitude::TileComponent ***)(v4 + 8 * v7) != a2)
      {
        if (v8 == ++v7) {
          return;
        }
      }
      if (*((void *)a3 + 13)) {
        unint64_t v9 = (*((void *)a3 + 11) != 0) + 1;
      }
      else {
        unint64_t v9 = *((void *)a3 + 11) != 0;
      }
      if (v9 <= 1)
      {
        unint64_t v10 = v8 - 1;
        *(void *)(v4 + 8 * v7) = *(void *)(v4 + 8 * v10);
        uint64_t v11 = *((void *)this + 7);
        unint64_t v12 = (*((void *)this + 8) - v11) >> 3;
        if (v10 <= v12)
        {
          if (v10 < v12) {
            *((void *)this + 8) = v11 + 8 * v10;
          }
        }
        else
        {
          std::vector<altitude::TextureMap *>::__append((uint64_t)this + 56, v10 - v12);
        }
      }
    }
  }
}

void non-virtual thunk to'md::realistic::OverlayRenderLayer::onTileComponentDataLoaded(md::realistic::OverlayRenderLayer *this, altitude::TileComponent **a2, altitude::TileComponent *a3, void *a4)
{
}

void md::realistic::OverlayRenderLayer::onTileComponentDataLoaded(md::realistic::OverlayRenderLayer *this, altitude::TileComponent **a2, altitude::TileComponent *a3, void *a4)
{
  if (a2[45] == a3)
  {
    uint64_t v6 = (altitude::Tile **)*((void *)this + 13);
    uint64_t v7 = (altitude::Tile **)*((void *)this + 14);
    uint64_t v8 = v6;
    if (v6 != v7)
    {
      while (*v8 != (altitude::Tile *)a2)
      {
        if (++v8 == v7)
        {
          uint64_t v8 = (altitude::Tile **)*((void *)this + 14);
          break;
        }
      }
    }
    if (v8 == v7)
    {
      unint64_t v9 = *((void *)this + 15);
      if ((unint64_t)v7 >= v9)
      {
        int64_t v11 = (char *)v7 - (char *)v6;
        uint64_t v12 = v7 - v6;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61) {
          abort();
        }
        uint64_t v14 = v9 - (void)v6;
        if (v14 >> 2 > v13) {
          unint64_t v13 = v14 >> 2;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          if (v15 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          unint64_t v16 = operator new(8 * v15);
        }
        else
        {
          unint64_t v16 = 0;
        }
        uint64_t v17 = (altitude::TileComponent ***)&v16[8 * v12];
        unint64_t v18 = &v16[8 * v15];
        *uint64_t v17 = a2;
        unint64_t v10 = v17 + 1;
        if (v6 != v7)
        {
          if ((unint64_t)(v11 - 8) < 0x58) {
            goto LABEL_35;
          }
          if ((unint64_t)((char *)v6 - v16) < 0x20) {
            goto LABEL_35;
          }
          unint64_t v19 = ((unint64_t)(v11 - 8) >> 3) + 1;
          unint64_t v20 = &v16[8 * v12 - 16];
          uint64_t v21 = v7 - 2;
          uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v23 = *(_OWORD *)v21;
            *(v20 - 1) = *((_OWORD *)v21 - 1);
            *unint64_t v20 = v23;
            v20 -= 2;
            v21 -= 4;
            v22 -= 4;
          }
          while (v22);
          v17 -= v19 & 0x3FFFFFFFFFFFFFFCLL;
          v7 -= v19 & 0x3FFFFFFFFFFFFFFCLL;
          if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_35:
            do
            {
              uint64_t v24 = (altitude::TileComponent **)*--v7;
              *--uint64_t v17 = v24;
            }
            while (v7 != v6);
            uint64_t v6 = (altitude::Tile **)*((void *)this + 13);
          }
        }
        *((void *)this + 13) = v17;
        *((void *)this + 14) = v10;
        *((void *)this + 15) = v18;
        if (v6) {
          operator delete(v6);
        }
      }
      else
      {
        *uint64_t v7 = (altitude::Tile *)a2;
        unint64_t v10 = v7 + 1;
      }
      *((void *)this + 14) = v10;
    }
  }
}

void non-virtual thunk to'md::realistic::OverlayRenderLayer::~OverlayRenderLayer(md::realistic::OverlayRenderLayer *this)
{
  md::realistic::OverlayRenderLayer::~OverlayRenderLayer((md::realistic::OverlayRenderLayer *)((char *)this - 48));
  JUMPOUT(0x1A6239270);
}

{
  md::realistic::OverlayRenderLayer::~OverlayRenderLayer((md::realistic::OverlayRenderLayer *)((char *)this - 48));
}

void md::realistic::OverlayRenderLayer::~OverlayRenderLayer(md::realistic::OverlayRenderLayer *this)
{
  *(void *)this = &unk_1EF554888;
  *((void *)this + 6) = &unk_1EF5548F8;
  altitude::TileManager::unregisterTileListener(*(void *)(*(void *)(*((void *)this + 5) + 128) + 688), (uint64_t)this + 48);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 36);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *((void *)this + 34);
  *((void *)this + 34) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = *((void *)this + 31);
  *((void *)this + 31) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 28);
    if (!v7) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 28);
    if (!v7) {
      goto LABEL_17;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_17:
  uint64_t v8 = *((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((void *)this + 22);
  if (v9)
  {
    uint64_t v10 = *((void *)this + 23);
    int64_t v11 = (void *)*((void *)this + 22);
    if (v10 != v9)
    {
      do
      {
        uint64_t v12 = *(std::__shared_weak_count **)(v10 - 8);
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        v10 -= 16;
      }
      while (v10 != v9);
      int64_t v11 = (void *)*((void *)this + 22);
    }
    *((void *)this + 23) = v9;
    operator delete(v11);
  }
  uint64_t v13 = *((void *)this + 19);
  if (v13)
  {
    uint64_t v14 = *((void *)this + 20);
    unint64_t v15 = (void *)*((void *)this + 19);
    if (v14 != v13)
    {
      do
      {
        unint64_t v16 = *(std::__shared_weak_count **)(v14 - 8);
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        v14 -= 16;
      }
      while (v14 != v13);
      unint64_t v15 = (void *)*((void *)this + 19);
    }
    *((void *)this + 20) = v13;
    operator delete(v15);
  }
  uint64_t v17 = (void *)*((void *)this + 16);
  if (v17)
  {
    *((void *)this + 17) = v17;
    operator delete(v17);
  }
  unint64_t v18 = (void *)*((void *)this + 13);
  if (v18)
  {
    *((void *)this + 14) = v18;
    operator delete(v18);
  }
  uint64_t v19 = *((void *)this + 10);
  if (v19)
  {
    uint64_t v20 = *((void *)this + 11);
    uint64_t v21 = (void *)*((void *)this + 10);
    if (v20 != v19)
    {
      do
      {
        uint64_t v22 = *(void **)(v20 - 16);
        v20 -= 16;
      }
      while (v20 != v19);
      uint64_t v21 = (void *)*((void *)this + 10);
    }
    *((void *)this + 11) = v19;
    operator delete(v21);
  }
  long long v23 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  *(void *)this = &unk_1EF530C60;
  uint64_t v24 = (void *)*((void *)this + 1);
  if (v24)
  {
    *((void *)this + 2) = v24;
    operator delete(v24);
  }
}

{
  uint64_t vars8;

  md::realistic::OverlayRenderLayer::~OverlayRenderLayer(this);
  JUMPOUT(0x1A6239270);
}

void md::realistic::OverlayRenderLayer::onTileComponentDataRelease(md::realistic::OverlayRenderLayer *this, altitude::TileComponent **a2, altitude::TileComponent *a3, void *a4)
{
  if (a2[45] == a3)
  {
    uint64_t v4 = *((void *)this + 13);
    uint64_t v5 = *((void *)this + 14);
    uint64_t v6 = v5 - v4;
    if (v5 != v4)
    {
      uint64_t v7 = 0;
      uint64_t v8 = v6 >> 3;
      while (*(altitude::TileComponent ***)(v4 + 8 * v7) != a2)
      {
        if (v8 == ++v7) {
          return;
        }
      }
      if (*((void *)a3 + 13)) {
        unint64_t v9 = (*((void *)a3 + 11) != 0) + 1;
      }
      else {
        unint64_t v9 = *((void *)a3 + 11) != 0;
      }
      if (v9 <= 1)
      {
        unint64_t v10 = v8 - 1;
        *(void *)(v4 + 8 * v7) = *(void *)(v4 + 8 * v10);
        uint64_t v11 = *((void *)this + 13);
        unint64_t v12 = (*((void *)this + 14) - v11) >> 3;
        if (v10 <= v12)
        {
          if (v10 < v12) {
            *((void *)this + 14) = v11 + 8 * v10;
          }
        }
        else
        {
          std::vector<altitude::TextureMap *>::__append((uint64_t)this + 104, v10 - v12);
        }
      }
    }
  }
}

uint64_t md::realistic::OverlayRenderLayer::setActive(uint64_t this, char a2)
{
  *(unsigned char *)(this + 32) = a2;
  *(unsigned char *)(*(void *)(this + 272) + 104) = a2;
  return this;
}

uint64_t *md::realistic::OverlayRenderLayer::layout(md::realistic::OverlayRenderLayer *this, const md::LayoutContext *a2)
{
  uint64_t v4 = (void *)*((void *)this + 5);
  uint64_t v5 = v4[3];
  uint64_t v6 = *(void *)(*((void *)a2 + 92) + 16);
  uint64_t v7 = v4[18];
  uint64_t v8 = *(unsigned int *)(v4[17] + 88);
  float v9 = (float)((float)(*(float *)(v6 + 1320) * 0.011111) + -1.0)
     * (float)((float)(*(float *)(v6 + 1320) * 0.011111) + -1.0);
  double v10 = (float)(v9 * (float)(v9 * v9)) * 0.1;
  float32x4_t v11 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v6 + 376)), *(float64x2_t *)(v6 + 392));
  float32x4_t v12 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v6 + 408)), *(float64x2_t *)(v6 + 424));
  float32x4_t v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v6 + 440)), *(float64x2_t *)(v6 + 456));
  float32x4_t v14 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v6 + 472)), *(float64x2_t *)(v6 + 488));
  unint64_t v15 = (void *)*((void *)this + 27);
  unint64_t v16 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float v17 = v10;
  unint64_t v18 = v15[1];
  unint64_t v20 = v15[8];
  uint64_t v19 = (float32x4_t *)v15[9];
  float32x4_t *v19 = v11;
  v19[1] = v12;
  void v19[2] = v13;
  void v19[3] = v14;
  if (v20 > v18) {
    unint64_t v18 = v20;
  }
  v15[7] = 0;
  v15[8] = v18;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  float v21 = fmaxf(v17, 0.0);
  uint64_t v22 = (void *)*((void *)this + 27);
  long long v23 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v24 = v22[1];
  unint64_t v25 = v22[8];
  *(float *)(v22[9] + 64) = v21;
  if (v25 > v24) {
    unint64_t v24 = v25;
  }
  v22[7] = 0;
  v22[8] = v24;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  float32x4_t v26 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v6 + 376)), *(float64x2_t *)(v6 + 392));
  float32x4_t v27 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v6 + 408)), *(float64x2_t *)(v6 + 424));
  float32x4_t v28 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v6 + 440)), *(float64x2_t *)(v6 + 456));
  float32x4_t v29 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v6 + 472)), *(float64x2_t *)(v6 + 488));
  unsigned int v30 = (void *)*((void *)this + 29);
  float v31 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v32 = v30[1];
  unint64_t v34 = v30[8];
  double v33 = (float32x4_t *)v30[9];
  *double v33 = v26;
  v33[1] = v27;
  v33[2] = v28;
  v33[3] = v29;
  if (v34 > v32) {
    unint64_t v32 = v34;
  }
  v30[7] = 0;
  v30[8] = v32;
  if (!v31 || atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    float v35 = (void *)*((void *)this + 29);
    float v36 = (std::__shared_weak_count *)*((void *)this + 30);
    if (!v36) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  float v35 = (void *)*((void *)this + 29);
  float v36 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v36) {
LABEL_22:
  }
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_23:
  unint64_t v37 = v35[1];
  unint64_t v38 = v35[8];
  *(_DWORD *)(v35[9] + 64) = 0;
  if (v38 > v37) {
    unint64_t v37 = v38;
  }
  v35[7] = 0;
  v35[8] = v37;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  uint64_t v39 = (uint64_t *)(*(uint64_t (**)(void))(**((void **)this + 25) + 56))(*((void *)this + 25));
  uint64_t v40 = *v39;
  uint64_t v41 = v39[1];
  if (*v39 != v41)
  {
    do
    {
      uint64_t v42 = *(void *)(*(void *)v40 + 360);
      if (!v42) {
        operator new();
      }
      (*(void (**)(uint64_t, const md::LayoutContext *, uint64_t, void, uint64_t, uint64_t))(*(void *)v42 + 80))(v42, a2, v6, *(void *)(*((void *)a2 + 92) + 24), v8, v7);
      v40 += 8;
    }
    while (v40 != v41);
  }
  __n128 result = (uint64_t *)(*(uint64_t (**)(void))(**((void **)this + 25) + 56))(*((void *)this + 25));
  uint64_t v44 = *result;
  uint64_t v45 = result[1];
  if (*result != v45)
  {
    do
    {
      uint64_t v46 = *(void *)(*(void *)v44 + 360);
      if (!v46) {
        operator new();
      }
      __n128 result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v46 + 88))(v46, v6, v5, v8, 255, *(void *)(*((void *)this + 5) + 120));
      v44 += 8;
    }
    while (v44 != v45);
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<ggl::FlyoverOverlay::P3T2PipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::FlyoverOverlay::P3T2PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583CB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::FlyoverOverlay::P3T2PipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583CB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::FlyoverOverlay::Shared>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::FlyoverOverlay::Shared>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverOverlay::Shared>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverOverlay::Shared>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586028;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::FlyoverOverlay::Shared>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586028;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL md::realistic::OverlayRenderLayer::tileNeedsRefresh(md::realistic::OverlayRenderLayer *this, altitude::Tile *a2)
{
  uint64_t v4 = *((void *)a2 + 45);
  uint64_t v5 = *((void *)a2 + 36);
  if (v5)
  {
    char isPoleTile = altitude::Tile::isPoleTile((char **)(v5 + 40));
    if (!v4) {
      return 0;
    }
  }
  else
  {
    char isPoleTile = 0;
    if (!v4) {
      return 0;
    }
  }
  if (*((_DWORD *)a2 + 101)) {
    return 0;
  }
  if (v5)
  {
    char v8 = isPoleTile ^ 1;
    if (*(unsigned char *)(v5 + 164)) {
      char v8 = 0;
    }
    if (v8) {
      return 0;
    }
  }
  if (*(_DWORD *)(v4 + 84) < *((_DWORD *)this + 19))
  {
    *(_WORD *)(v4 + 168) = 0;
    uint64_t v9 = *((void *)this + 10);
    uint64_t v10 = *((void *)this + 11);
    if (v9 != v10)
    {
      if (isPoleTile)
      {
        do
        {
          if (*(_DWORD *)(v4 + 84) < *(_DWORD *)(v9 + 8))
          {
            BOOL v13 = [*(id *)v9 level] != 0;
            uint64_t v14 = *((_DWORD *)a2 + 98) | 0x200000000;
            unint64_t v17 = *((unsigned int *)a2 + 100) | ((unint64_t)(~(-1 << *((_DWORD *)a2 + 98))
                                                                                - *((_DWORD *)a2 + 99)) << 32);
            uint64_t v18 = v14;
            if (!*(void *)(v4 + 16 * v13 + 120))
            {
              if ([*(id *)v9 canDrawKey:&v17]) {
                *(unsigned char *)(v4 + v13 + 168) = 1;
              }
            }
          }
          id v11 = *(id *)v9;
          v9 += 16;
          if (objc_msgSend(v11, "level", v17, v18)) {
            uint64_t v12 = v4 + 1;
          }
          else {
            uint64_t v12 = v4;
          }
          *(unsigned char *)(v12 + 168) = 1;
        }
        while (v9 != v10);
      }
      else
      {
        do
        {
          if (*(_DWORD *)(v4 + 84) < *(_DWORD *)(v9 + 8))
          {
            BOOL v15 = [*(id *)v9 level] != 0;
            uint64_t v16 = *((_DWORD *)a2 + 98) | 0x200000000;
            unint64_t v17 = *((unsigned int *)a2 + 100) | ((unint64_t)(~(-1 << *((_DWORD *)a2 + 98))
                                                                                - *((_DWORD *)a2 + 99)) << 32);
            uint64_t v18 = v16;
            if (!*(void *)(v4 + 16 * v15 + 120))
            {
              if ([*(id *)v9 canDrawKey:&v17]) {
                *(unsigned char *)(v4 + v15 + 168) = 1;
              }
            }
          }
          v9 += 16;
        }
        while (v9 != v10);
      }
    }
    *(_DWORD *)(v4 + 84) = *((_DWORD *)this + 19);
  }
  return *(unsigned char *)(v4 + 168) || *(unsigned char *)(v4 + 169) != 0;
}

void md::realistic::OverlayRenderLayer::clearOverlays(md::realistic::OverlayRenderLayer *this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(altitude::GlobeCleanupLoader **)(*(void *)(*((void *)this + 5) + 128) + 448);
  if (v2)
  {
    unsigned int v3 = *(_DWORD *)(*((void *)v2 + 4) + 88) + 1;
    altitude::GlobeCleanupLoader::pruneOverlayElements(v2, v3, v3);
  }
  uint64_t v4 = *((void *)v1 + 34);
  if (v4)
  {
    unsigned int v30 = 0;
    uint64_t v31 = 0;
    float32x4_t v28 = v1;
    float32x4_t v29 = &v30;
    pthread_mutex_lock(*(pthread_mutex_t **)(v4 + 40));
    uint64_t v5 = *(void **)(v4 + 64);
    if (v5 != (void *)(v4 + 72))
    {
      do
      {
        uint64_t v7 = v5[9];
        uint64_t v6 = (std::__shared_weak_count *)v5[10];
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
        char v8 = v30;
        uint64_t v9 = &v30;
        uint64_t v10 = &v30;
        if (v30)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v10 = (uint64_t **)v8;
              id v11 = (_DWORD *)v8 + 7;
              char v12 = std::__synth_three_way[abi:nn180100]<altitude::TileKey,altitude::TileKey>((_DWORD *)(v7 + 224), (_DWORD *)v8 + 7);
              if (!v12)
              {
                int v13 = *(_DWORD *)(v7 + 256);
                int v14 = *((_DWORD *)v10 + 15);
                char v12 = v13 < v14 ? -1 : 1;
                if (v13 == v14) {
                  break;
                }
              }
              if ((v12 & 0x80) == 0) {
                break;
              }
              char v8 = *v10;
              uint64_t v9 = v10;
              if (!*v10) {
                goto LABEL_25;
              }
            }
            char v15 = std::__synth_three_way[abi:nn180100]<altitude::TileKey,altitude::TileKey>(v11, (_DWORD *)(v7 + 224));
            if (!v15)
            {
              int v16 = *((_DWORD *)v10 + 15);
              int v17 = *(_DWORD *)(v7 + 256);
              char v15 = v16 < v17 ? -1 : 1;
              if (v16 == v17) {
                break;
              }
            }
            if ((v15 & 0x80) == 0) {
              break;
            }
            uint64_t v9 = v10 + 1;
            char v8 = v10[1];
            if (!v8) {
              goto LABEL_25;
            }
          }
        }
        else
        {
LABEL_25:
          uint64_t v18 = (char *)operator new(0x40uLL);
          *(_OWORD *)(v18 + 28) = *(_OWORD *)(v7 + 224);
          *(_OWORD *)(v18 + 44) = *(_OWORD *)(v7 + 240);
          *((_DWORD *)v18 + 15) = *(_DWORD *)(v7 + 256);
          *(void *)uint64_t v18 = 0;
          *((void *)v18 + 1) = 0;
          *((void *)v18 + 2) = v10;
          *uint64_t v9 = (uint64_t *)v18;
          if (*v29)
          {
            float32x4_t v29 = (uint64_t **)*v29;
            uint64_t v18 = (char *)*v9;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v30, (uint64_t *)v18);
          ++v31;
        }
        if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
          uint64_t v19 = (void *)v5[1];
          if (!v19)
          {
            do
            {
LABEL_34:
              unint64_t v20 = (void *)v5[2];
              BOOL v21 = *v20 == (void)v5;
              uint64_t v5 = v20;
            }
            while (!v21);
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v19 = (void *)v5[1];
          if (!v19) {
            goto LABEL_34;
          }
        }
        do
        {
          unint64_t v20 = v19;
          uint64_t v19 = (void *)*v19;
        }
        while (v19);
LABEL_6:
        uint64_t v5 = v20;
      }
      while (v20 != (void *)(v4 + 72));
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 40));
    uint64_t v22 = v29;
    if (v29 != &v30)
    {
      do
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, (uint64_t)v22 + 28);
        float32x4_t v26 = v22[1];
        if (v26)
        {
          do
          {
            float32x4_t v27 = (uint64_t **)v26;
            float32x4_t v26 = (uint64_t *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            float32x4_t v27 = (uint64_t **)v22[2];
            BOOL v21 = *v27 == (uint64_t *)v22;
            uint64_t v22 = v27;
          }
          while (!v21);
        }
        uint64_t v22 = v27;
      }
      while (v27 != &v30);
    }
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v30);
    uint64_t v1 = v28;
  }
  *((void *)v1 + 14) = *((void *)v1 + 13);
  uint64_t v23 = *((void *)v1 + 10);
  for (uint64_t i = *((void *)v1 + 11); i != v23; i -= 16)
  {
    unint64_t v25 = *(void **)(i - 16);
  }
  *((void *)v1 + 11) = v23;
}

void sub_1A267B0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void md::realistic::OverlayRenderLayer::invalidateTiles(md::realistic::OverlayRenderLayer *this, VKOverlay *a2)
{
  unsigned int v3 = a2;
  *((_DWORD *)this + 19) = *((_DWORD *)this + 18) + 1;
  uint64_t v5 = *((void *)this + 13);
  uint64_t v4 = *((void *)this + 14);
  if (v4 != v5)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      uint64_t v8 = *(void *)(v7 + 360);
      if (v8)
      {
        unint64_t v9 = *(unsigned int *)(v7 + 400) | ((unint64_t)(~(-1 << *(_DWORD *)(v7 + 392))
                                                                           - *(_DWORD *)(v7 + 396)) << 32);
        uint64_t v10 = *(_DWORD *)(v7 + 392) | 0x200000000;
        v12[0] = v9;
        v12[1] = v10;
        if ([(VKOverlay *)v3 canDrawKey:v12])
        {
          if ([(VKOverlay *)v3 level]) {
            uint64_t v11 = v8 + 1;
          }
          else {
            uint64_t v11 = v8;
          }
          *(unsigned char *)(v11 + 168) = 1;
        }
        *(_DWORD *)(v8 + 84) = *((_DWORD *)this + 19);
        uint64_t v5 = *((void *)this + 13);
        uint64_t v4 = *((void *)this + 14);
      }
      ++v6;
    }
    while (v6 != (v4 - v5) >> 3);
  }
}

void sub_1A267B238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::realistic::OverlayRenderLayer::addOverlay(md::realistic::OverlayRenderLayer *this, VKOverlay *a2)
{
  unsigned int v3 = a2;
  md::realistic::OverlayRenderLayer::invalidateTiles(this, v3);
  uint64_t v4 = v3;
  int v5 = *((_DWORD *)this + 18) + 1;
  uint64_t v7 = (char *)*((void *)this + 11);
  unint64_t v6 = *((void *)this + 12);
  if ((unint64_t)v7 < v6)
  {
    *(void *)uint64_t v7 = v4;
    *((_DWORD *)v7 + 2) = v5;
    uint64_t v8 = v7 + 16;
    goto LABEL_18;
  }
  unint64_t v20 = v4;
  unint64_t v9 = (char *)*((void *)this + 10);
  uint64_t v10 = (v7 - v9) >> 4;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60) {
    abort();
  }
  uint64_t v12 = v6 - (void)v9;
  if (v12 >> 3 > v11) {
    unint64_t v11 = v12 >> 3;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13 >> 60) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  int v14 = (char *)operator new(16 * v13);
  char v15 = &v14[16 * v10];
  int v16 = &v14[16 * v13];
  *(void *)char v15 = v20;
  *((_DWORD *)v15 + 2) = v5;
  uint64_t v8 = v15 + 16;
  if (v7 == v9)
  {
    *((void *)this + 10) = v15;
    *((void *)this + 11) = v8;
    *((void *)this + 12) = v16;
    if (!v7) {
      goto LABEL_17;
    }
  }
  else
  {
    int v17 = v7;
    do
    {
      uint64_t v18 = *((void *)v17 - 2);
      v17 -= 16;
      *(void *)int v17 = 0;
      *((void *)v15 - 2) = v18;
      v15 -= 16;
      *((_DWORD *)v15 + 2) = *((_DWORD *)v17 + 2);
    }
    while (v17 != v9);
    *((void *)this + 10) = v15;
    *((void *)this + 11) = v8;
    *((void *)this + 12) = v16;
    do
    {
      uint64_t v19 = (void *)*((void *)v7 - 2);
      v7 -= 16;
    }
    while (v7 != v9);
    uint64_t v7 = v9;
    if (!v9) {
      goto LABEL_17;
    }
  }
  operator delete(v7);
LABEL_17:
  uint64_t v4 = v20;
LABEL_18:
  *((void *)this + 11) = v8;
}

void sub_1A267B3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void md::realistic::OverlayRenderLayer::stageLoadOperation(md::realistic::OverlayRenderLayer *this, altitude::Tile *a2, int a3)
{
  uint64_t v7 = (char *)*((void *)this + 17);
  unint64_t v6 = *((void *)this + 18);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = (char *)*((void *)this + 16);
    uint64_t v10 = (v7 - v9) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      abort();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 60) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      int v14 = (char *)operator new(16 * v13);
    }
    else
    {
      int v14 = 0;
    }
    char v15 = &v14[16 * v10];
    *(void *)char v15 = a2;
    *((_DWORD *)v15 + 2) = a3;
    uint64_t v8 = v15 + 16;
    if (v7 != v9)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
        v15 -= 16;
        v7 -= 16;
      }
      while (v7 != v9);
      uint64_t v7 = (char *)*((void *)this + 16);
    }
    *((void *)this + 16) = v15;
    *((void *)this + 17) = v8;
    *((void *)this + 18) = &v14[16 * v13];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(void *)uint64_t v7 = a2;
    *((_DWORD *)v7 + 2) = a3;
    uint64_t v8 = v7 + 16;
  }
  *((void *)this + 17) = v8;
}

void md::StandardPipelineProxy::copy(uint64_t a1, int8x8_t *a2, int8x8_t *a3, unint64_t *a4, uint64_t *a5)
{
  unint64_t v9 = *a4;
  uint64_t v10 = (void *)gdc::Registry::storage<arComponents::AlbedoTextureComponent>(a2);
  uint64_t v11 = v10[4];
  if (v9 >> 39 < (v10[5] - v11) >> 3
    && (uint64_t v12 = *(void *)(v11 + 8 * (v9 >> 39))) != 0
    && (unint64_t v13 = *(unsigned __int16 *)(v12 + 2 * (HIDWORD(v9) & 0x7F)), v15 = v10[7], v14 = v10[8], v13 < (v14 - v15) >> 3)
    && ((v16 = v15 + 8 * v13, v16 != v14) ? (BOOL v17 = *(_DWORD *)(v16 + 4) == HIDWORD(v9)) : (BOOL v17 = 0), v17))
  {
    uint64_t v18 = (unint64_t *)(v10[10] + 48 * v13);
  }
  else
  {
    uint64_t v18 = (unint64_t *)v10[11];
  }
  uint64_t v19 = *a5;
  unint64_t v20 = *v18;
  uint64_t v49 = 0;
  long long v48 = v20;
  uint64_t v50 = &unk_1EF559EB8;
  id v51 = 0;
  uint64_t v21 = gdc::Registry::storage<arComponents::AlbedoTextureComponent>(a3);
  gdc::ComponentStorageWrapper<arComponents::AlbedoTextureComponent>::emplace(v21, v19, (uint64_t)&v48);
  uint64_t v50 = &unk_1EF559EB8;

  uint64_t v22 = v49;
  if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }

  unint64_t v23 = *a4;
  unint64_t v24 = (void *)gdc::Registry::storage<arComponents::StyleColor>(a2);
  uint64_t v25 = v24[4];
  if (v23 >> 39 < (v24[5] - v25) >> 3
    && (uint64_t v26 = *(void *)(v25 + 8 * (v23 >> 39))) != 0
    && (unint64_t v27 = *(unsigned __int16 *)(v26 + 2 * (HIDWORD(v23) & 0x7F)), v29 = v24[7], v28 = v24[8], v27 < (v28 - v29) >> 3)
    && ((uint64_t v30 = v29 + 8 * v27, v30 != v28) ? (v31 = *(_DWORD *)(v30 + 4) == HIDWORD(v23)) : (v31 = 0), v31))
  {
    unint64_t v32 = (long long *)v24[11];
    double v33 = (long long *)(v24[10] + 16 * v27);
  }
  else
  {
    unint64_t v32 = (long long *)v24[11];
    double v33 = v32;
  }
  if (v33 == v32) {
    double v33 = 0;
  }
  uint64_t v34 = *a5;
  long long v48 = *v33;
  float v35 = (void *)gdc::Registry::storage<arComponents::StyleColor>(a3);
  gdc::ComponentStorageWrapper<arComponents::StyleColor>::emplace(v35, v34, (uint64_t)&v48);
  unint64_t v36 = *a4;
  unint64_t v37 = (void *)gdc::Registry::storage<arComponents::VisibilityAlpha>(a2);
  uint64_t v38 = v37[4];
  if (v36 >> 39 < (v37[5] - v38) >> 3
    && (uint64_t v39 = *(void *)(v38 + 8 * (v36 >> 39))) != 0
    && (unint64_t v40 = *(unsigned __int16 *)(v39 + 2 * (HIDWORD(v36) & 0x7F)), v42 = v37[7], v41 = v37[8], v40 < (v41 - v42) >> 3)
    && ((uint64_t v43 = v42 + 8 * v40, v43 != v41) ? (v44 = *(_DWORD *)(v43 + 4) == HIDWORD(v36)) : (v44 = 0), v44))
  {
    uint64_t v45 = (_DWORD *)(v37[10] + 4 * v40);
  }
  else
  {
    uint64_t v45 = (_DWORD *)v37[11];
  }
  uint64_t v46 = *a5;
  LODWORD(v48) = *v45;
  uint64_t v47 = (void *)gdc::Registry::storage<arComponents::VisibilityAlpha>(a3);
  gdc::ComponentStorageWrapper<md::ls::BoundsWidth>::emplace(v47, v46, &v48);
}

void sub_1A267B784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, ...)
{
  va_start(va, a5);
  arComponents::AlbedoTextureComponent::~AlbedoTextureComponent((arComponents::AlbedoTextureComponent *)va);

  _Unwind_Resume(a1);
}

void md::StandardPipelineProxy::initARLightingSetup(float a1, float a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *a4;
  uint64_t v7 = *(void **)(*(void *)(*a4 + 64) + 80);
  if (!v7)
  {
    uint64_t v8 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v8->__shared_owners_ = 0;
    v8->__shared_weak_owners_ = 0;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587138;
    uint64_t v7 = &v8[1].__vftable;
    ggl::BufferData::BufferData((uint64_t)&v8[1], qword_1E9568868, 2, 1, 6, 1);
    v8[9].__shared_owners_ = (uint64_t)ggl::ARMesh::ARLightingSetup::reflection(void)::reflection;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55E458;
    uint64_t v9 = *(void *)(v6 + 64);
    *(void *)(v9 + 80) = v8 + 1;
    *(void *)(v9 + 88) = 0;
    uint64_t v10 = *(void *)(v6 + 160);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v11 = *(std::__shared_weak_count **)(v10 + 88);
    *(void *)(v10 + 80) = v8 + 1;
    *(void *)(v10 + 88) = v8;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  unint64_t v12 = v7[1];
  unint64_t v14 = v7[8];
  unint64_t v13 = (float *)v7[9];
  float *v13 = a2;
  v13[1] = a1;
  if (v14 > v12) {
    unint64_t v12 = v14;
  }
  v7[7] = 0;
  v7[8] = v12;
}

void ggl::ConstantDataTyped<ggl::ARMesh::ARLightingSetup>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unsigned int v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::ARMesh::ARLightingSetup>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unsigned int v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ARMesh::ARLightingSetup>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ARMesh::ARLightingSetup>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587138;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ARMesh::ARLightingSetup>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587138;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::StandardPipelineProxy::setARLightingSetup(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)a2 + 64) + 80);
  unint64_t v4 = *(void *)(v3 + 8);
  unint64_t v5 = *(void *)(v3 + 64);
  **(int32x2_t **)(v3 + 72) = vrev64_s32(*a3);
  if (v5 > v4) {
    unint64_t v4 = v5;
  }
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 64) = v4;
}

void non-virtual thunk to'md::StandardPipelineProxy::update(uint64_t a1, int8x8_t *a2, uint64_t *a3)
{
}

void md::StandardPipelineProxy::update(uint64_t a1, int8x8_t *a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(v6 + 8);
  if (v7 == *(void *)v6)
  {
    uint64_t v18 = *(void *)(v6 + 88);
    if (!v18)
    {
LABEL_247:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_248:
      abort();
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 48))(v18);
    uint64_t v9 = *(uint64_t **)(v6 + 40);
    unint64_t v19 = *(void *)(v6 + 48);
    if ((unint64_t)v9 >= v19)
    {
      uint64_t v21 = *(void *)(v6 + 32);
      uint64_t v22 = ((uint64_t)v9 - v21) >> 3;
      unint64_t v13 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61) {
        goto LABEL_248;
      }
      uint64_t v23 = v19 - v21;
      if (v23 >> 2 > v13) {
        unint64_t v13 = v23 >> 2;
      }
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v13)
      {
        uint64_t v24 = 8 * v13;
        uint64_t v25 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v6 + 56) + 16))(*(void *)(v6 + 56), 8 * v13, 8);
        BOOL v17 = (uint64_t *)(v25 + 8 * v22);
        unint64_t v13 = v25 + v24;
        if (v25) {
          *BOOL v17 = v8;
        }
      }
      else
      {
        BOOL v17 = (uint64_t *)(8 * v22);
      }
      unint64_t v20 = v17 + 1;
      uint64_t v35 = *(void *)(v6 + 32);
      uint64_t v26 = *(void *)(v6 + 40);
      if (v26 == v35) {
        goto LABEL_48;
      }
      unint64_t v36 = v26 - v35 - 8;
      if (v36 < 0x38)
      {
        uint64_t v38 = *(void *)(v6 + 40);
      }
      else if ((unint64_t)(v26 - (void)v17) < 0x20)
      {
        uint64_t v38 = *(void *)(v6 + 40);
      }
      else
      {
        uint64_t v37 = (v36 >> 3) + 1;
        uint64_t v38 = v26 - 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v39 = v17 - 2;
        unint64_t v40 = (long long *)(v26 - 16);
        uint64_t v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v42 = *v40;
          *((_OWORD *)v39 - 1) = *(v40 - 1);
          *(_OWORD *)uint64_t v39 = v42;
          v39 -= 4;
          v40 -= 2;
          v41 -= 4;
        }
        while (v41);
        v17 -= v37 & 0x3FFFFFFFFFFFFFFCLL;
        if (v37 == (v37 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_47;
        }
      }
      do
      {
        uint64_t v44 = *(void *)(v38 - 8);
        v38 -= 8;
        *--BOOL v17 = v44;
      }
      while (v38 != v35);
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t v8 = *(void *)(v7 - 8);
    *(void *)(v6 + 8) = v7 - 8;
    uint64_t v9 = *(uint64_t **)(v6 + 40);
    unint64_t v10 = *(void *)(v6 + 48);
    if ((unint64_t)v9 >= v10)
    {
      uint64_t v11 = *(void *)(v6 + 32);
      uint64_t v12 = ((uint64_t)v9 - v11) >> 3;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61) {
        goto LABEL_248;
      }
      uint64_t v14 = v10 - v11;
      if (v14 >> 2 > v13) {
        unint64_t v13 = v14 >> 2;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v13)
      {
        uint64_t v15 = 8 * v13;
        uint64_t v16 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v6 + 56) + 16))(*(void *)(v6 + 56), 8 * v13, 8);
        BOOL v17 = (uint64_t *)(v16 + 8 * v12);
        unint64_t v13 = v16 + v15;
        if (v16) {
          *BOOL v17 = v8;
        }
      }
      else
      {
        BOOL v17 = (uint64_t *)(8 * v12);
      }
      unint64_t v20 = v17 + 1;
      uint64_t v27 = *(void *)(v6 + 32);
      uint64_t v26 = *(void *)(v6 + 40);
      if (v26 == v27) {
        goto LABEL_48;
      }
      unint64_t v28 = v26 - v27 - 8;
      if (v28 < 0x38)
      {
        uint64_t v30 = *(void *)(v6 + 40);
      }
      else if ((unint64_t)(v26 - (void)v17) < 0x20)
      {
        uint64_t v30 = *(void *)(v6 + 40);
      }
      else
      {
        uint64_t v29 = (v28 >> 3) + 1;
        uint64_t v30 = v26 - 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
        BOOL v31 = v17 - 2;
        unint64_t v32 = (long long *)(v26 - 16);
        uint64_t v33 = v29 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v34 = *v32;
          *((_OWORD *)v31 - 1) = *(v32 - 1);
          *(_OWORD *)BOOL v31 = v34;
          v31 -= 4;
          v32 -= 2;
          v33 -= 4;
        }
        while (v33);
        v17 -= v29 & 0x3FFFFFFFFFFFFFFCLL;
        if (v29 == (v29 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_47;
        }
      }
      do
      {
        uint64_t v43 = *(void *)(v30 - 8);
        v30 -= 8;
        *--BOOL v17 = v43;
      }
      while (v30 != v27);
LABEL_47:
      uint64_t v26 = *(void *)(v6 + 32);
LABEL_48:
      *(void *)(v6 + 32) = v17;
      *(void *)(v6 + 40) = v20;
      uint64_t v45 = *(void *)(v6 + 48);
      *(void *)(v6 + 48) = v13;
      if (v26) {
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v6 + 56) + 40))(*(void *)(v6 + 56), v26, v45 - v26);
      }
      goto LABEL_50;
    }
  }
  if (v9) {
    *uint64_t v9 = v8;
  }
  unint64_t v20 = v9 + 1;
LABEL_50:
  *(void *)(v6 + 40) = v20;
  *(void *)uint64_t v241 = v8;
  uint64_t v46 = *(void *)(v6 + 120);
  if (!v46) {
    goto LABEL_247;
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v46 + 48))(v46, v241);
  uint64_t v47 = *a3;
  *(void *)uint64_t v241 = v8;
  long long v48 = (void *)gdc::Registry::storage<arComponents::PipelineInstanceToUse>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v48, v47, v241);
  uint64_t v49 = *a3;
  *(void *)&v241[12] = 0;
  *(void *)&v241[4] = 0;
  uint64_t v243 = 0;
  uint64_t v244 = 0;
  uint64_t v247 = 0;
  uint64_t v246 = 0;
  *(_DWORD *)uint64_t v241 = 1065353216;
  int v242 = 1065353216;
  int v245 = 1065353216;
  int v248 = 1065353216;
  uint64_t v50 = (void *)gdc::Registry::storage<arComponents::ViewConstantDataComponent>(a2);
  gdc::ComponentStorageWrapper<arComponents::ViewConstantDataComponent>::emplace(v50, v49, (long long *)v241);
  uint64_t v51 = *a3;
  *(void *)uint64_t v241 = 0;
  *(void *)&v241[8] = 0;
  unint64_t v52 = (void *)gdc::Registry::storage<arComponents::TransformConstantDataComponent>(a2);
  gdc::ComponentStorageWrapper<arComponents::TransformConstantDataComponent>::emplace(v52, v51, v241);
  uint64_t v53 = *(std::__shared_weak_count **)&v241[8];
  if (*(void *)&v241[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v241[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
  }
  uint64_t v54 = *a3;
  unint64_t v55 = (void *)gdc::Registry::storage<arComponents::NeedsTransformConstantDataUpdate>(a2);
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v55, v54);
  uint64_t v56 = *a3;
  *(void *)uint64_t v241 = *(void *)(*(void *)(v8 + 64) + 96);
  uint64_t v57 = (void *)gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::DaVinci::StyleColor>>>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v57, v56, v241);
  uint64_t v58 = *a3;
  *(void *)uint64_t v241 = **(void **)(v8 + 64);
  unint64_t v59 = (void *)gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::View>>>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v59, v58, v241);
  uint64_t v60 = *a3;
  *(void *)uint64_t v241 = *(void *)(*(void *)(v8 + 64) + 16);
  unint64_t v61 = (void *)gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::Tile::Transform>>>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v61, v60, v241);
  uint64_t v62 = *a3;
  *(void *)uint64_t v241 = **(void **)(v8 + 32);
  uint64_t v63 = (void *)gdc::Registry::storage<arComponents::CompWrap<ggl::DeviceDataTyped<ggl::DaVinci::InstanceTransform>>>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(v63, v62, v241);
  uint64_t v64 = *a3;
  uint64_t v65 = *(void *)(*(void *)(v8 + 64) + 32);
  id v66 = (void *)gdc::Registry::storage<arComponents::CompWrap<ggl::ConstantDataTyped<ggl::ARMesh::CameraView>>>(a2);
  uint64_t v249 = v64;
  long long v67 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v66 + 4, (uint64_t)&v249);
  if (v68)
  {
    uint64_t v74 = (char *)v66[11];
    unint64_t v73 = v66[12];
    if ((unint64_t)v74 >= v73)
    {
      unint64_t v76 = (char *)v66[10];
      uint64_t v77 = (v74 - v76) >> 3;
      unint64_t v78 = v77 + 1;
      if ((unint64_t)(v77 + 1) >> 61) {
        goto LABEL_248;
      }
      uint64_t v79 = v73 - (void)v76;
      if (v79 >> 2 > v78) {
        unint64_t v78 = v79 >> 2;
      }
      if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v80 = v78;
      }
      if (v80)
      {
        if (v80 >> 61) {
          goto LABEL_249;
        }
        unint64_t v81 = (char *)operator new(8 * v80);
      }
      else
      {
        unint64_t v81 = 0;
      }
      long long v82 = &v81[8 * v77];
      long long v83 = &v81[8 * v80];
      *(void *)long long v82 = v65;
      uint64_t v75 = v82 + 8;
      if (v74 != v76)
      {
        unint64_t v84 = v74 - v76 - 8;
        if (v84 < 0x58) {
          goto LABEL_252;
        }
        if ((unint64_t)(v76 - v81) < 0x20) {
          goto LABEL_252;
        }
        uint64_t v85 = (v84 >> 3) + 1;
        unint64_t v86 = &v81[8 * v77 - 16];
        unint64_t v87 = (long long *)(v74 - 16);
        uint64_t v88 = v85 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v89 = *v87;
          *((_OWORD *)v86 - 1) = *(v87 - 1);
          *(_OWORD *)unint64_t v86 = v89;
          v86 -= 32;
          v87 -= 2;
          v88 -= 4;
        }
        while (v88);
        v82 -= 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
        v74 -= 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
        if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_252:
          do
          {
            uint64_t v90 = *((void *)v74 - 1);
            v74 -= 8;
            *((void *)v82 - 1) = v90;
            v82 -= 8;
          }
          while (v74 != v76);
        }
        uint64_t v74 = (char *)v66[10];
      }
      v66[10] = v82;
      v66[11] = v75;
      v66[12] = v83;
      if (v74) {
        operator delete(v74);
      }
    }
    else
    {
      *(void *)uint64_t v74 = v65;
      uint64_t v75 = v74 + 8;
    }
    v66[11] = v75;
    uint64_t v70 = v66[31];
    goto LABEL_83;
  }
  long long v69 = (void *)((char *)v67 + v66[10] - v66[7]);
  *long long v69 = v65;
  uint64_t v70 = v66[31];
  if (v69 == (void *)v66[11])
  {
LABEL_83:
    unint64_t v91 = (void *)v66[22];
    if (v91)
    {
      while (1)
      {
        *(void *)uint64_t v241 = &v249;
        *(void *)&v241[8] = 1;
        uint64_t v250 = v70;
        uint64_t v92 = v91[6];
        if (!v92) {
          goto LABEL_247;
        }
        (*(void (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)v92 + 48))(v92, &v250, v241);
        unint64_t v91 = (void *)*v91;
        if (!v91) {
          goto LABEL_86;
        }
      }
    }
    goto LABEL_86;
  }
  for (uint64_t i = (void *)v66[16]; i; uint64_t i = (void *)*i)
  {
    *(void *)uint64_t v241 = &v249;
    *(void *)&v241[8] = 1;
    uint64_t v250 = v70;
    uint64_t v72 = i[6];
    if (!v72) {
      goto LABEL_247;
    }
    (*(void (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)v72 + 48))(v72, &v250, v241);
  }
LABEL_86:
  uint64_t v93 = *a3;
  uint64_t v94 = (void *)gdc::Registry::storage<md::pipelineECS::HasAlbedo>(a2);
  uint64_t v249 = v93;
  unint64_t v95 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v94 + 4, (uint64_t)&v249);
  if (v96)
  {
    uint64_t v102 = (char *)v94[11];
    unint64_t v101 = v94[12];
    if ((unint64_t)v102 >= v101)
    {
      unint64_t v104 = (char *)v94[10];
      uint64_t v105 = (v102 - v104) >> 3;
      unint64_t v106 = v105 + 1;
      if ((unint64_t)(v105 + 1) >> 61) {
        goto LABEL_248;
      }
      uint64_t v107 = v101 - (void)v104;
      if (v107 >> 2 > v106) {
        unint64_t v106 = v107 >> 2;
      }
      if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v108 = v106;
      }
      if (v108)
      {
        if (v108 >> 61) {
          goto LABEL_249;
        }
        uint64_t v109 = (char *)operator new(8 * v108);
      }
      else
      {
        uint64_t v109 = 0;
      }
      float v110 = &v109[8 * v105];
      float v111 = &v109[8 * v108];
      *(void *)float v110 = a1;
      unint64_t v103 = v110 + 8;
      if (v102 != v104)
      {
        unint64_t v112 = v102 - v104 - 8;
        if (v112 < 0x58) {
          goto LABEL_253;
        }
        if ((unint64_t)(v104 - v109) < 0x20) {
          goto LABEL_253;
        }
        uint64_t v113 = (v112 >> 3) + 1;
        unint64_t v114 = &v109[8 * v105 - 16];
        uint64_t v115 = (long long *)(v102 - 16);
        uint64_t v116 = v113 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v117 = *v115;
          *((_OWORD *)v114 - 1) = *(v115 - 1);
          *(_OWORD *)unint64_t v114 = v117;
          v114 -= 32;
          v115 -= 2;
          v116 -= 4;
        }
        while (v116);
        v110 -= 8 * (v113 & 0x3FFFFFFFFFFFFFFCLL);
        v102 -= 8 * (v113 & 0x3FFFFFFFFFFFFFFCLL);
        if (v113 != (v113 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_253:
          do
          {
            uint64_t v118 = *((void *)v102 - 1);
            v102 -= 8;
            *((void *)v110 - 1) = v118;
            v110 -= 8;
          }
          while (v102 != v104);
        }
        uint64_t v102 = (char *)v94[10];
      }
      v94[10] = v110;
      v94[11] = v103;
      v94[12] = v111;
      if (v102) {
        operator delete(v102);
      }
    }
    else
    {
      *(void *)uint64_t v102 = a1;
      unint64_t v103 = v102 + 8;
    }
    v94[11] = v103;
    uint64_t v98 = v94[31];
    goto LABEL_115;
  }
  uint64_t v97 = (void *)((char *)v95 + v94[10] - v94[7]);
  *uint64_t v97 = a1;
  uint64_t v98 = v94[31];
  if (v97 == (void *)v94[11])
  {
LABEL_115:
    uint64_t v119 = (void *)v94[22];
    if (v119)
    {
      while (1)
      {
        *(void *)uint64_t v241 = &v249;
        *(void *)&v241[8] = 1;
        uint64_t v250 = v98;
        uint64_t v120 = v119[6];
        if (!v120) {
          goto LABEL_247;
        }
        (*(void (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)v120 + 48))(v120, &v250, v241);
        uint64_t v119 = (void *)*v119;
        if (!v119) {
          goto LABEL_118;
        }
      }
    }
    goto LABEL_118;
  }
  for (uint64_t j = (void *)v94[16]; j; uint64_t j = (void *)*j)
  {
    *(void *)uint64_t v241 = &v249;
    *(void *)&v241[8] = 1;
    uint64_t v250 = v98;
    uint64_t v100 = j[6];
    if (!v100) {
      goto LABEL_247;
    }
    (*(void (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)v100 + 48))(v100, &v250, v241);
  }
LABEL_118:
  uint64_t v121 = *a3;
  uint64_t v122 = a1 + 32;
  uint64_t v123 = (void *)gdc::Registry::storage<md::pipelineECS::HasUVMapping>(a2);
  uint64_t v249 = v121;
  unint64_t v124 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v123 + 4, (uint64_t)&v249);
  if (v125)
  {
    unint64_t v131 = (char *)v123[11];
    unint64_t v130 = v123[12];
    if ((unint64_t)v131 >= v130)
    {
      uint8x8_t v133 = (char *)v123[10];
      uint64_t v134 = (v131 - v133) >> 3;
      unint64_t v135 = v134 + 1;
      if ((unint64_t)(v134 + 1) >> 61) {
        goto LABEL_248;
      }
      uint64_t v136 = v130 - (void)v133;
      if (v136 >> 2 > v135) {
        unint64_t v135 = v136 >> 2;
      }
      if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v137 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v137 = v135;
      }
      if (v137)
      {
        if (v137 >> 61) {
          goto LABEL_249;
        }
        uint64_t v138 = (char *)operator new(8 * v137);
      }
      else
      {
        uint64_t v138 = 0;
      }
      uint64_t v139 = &v138[8 * v134];
      float v140 = &v138[8 * v137];
      *(void *)uint64_t v139 = v122;
      unint64_t v132 = v139 + 8;
      if (v131 != v133)
      {
        unint64_t v141 = v131 - v133 - 8;
        if (v141 < 0x58) {
          goto LABEL_254;
        }
        if ((unint64_t)(v133 - v138) < 0x20) {
          goto LABEL_254;
        }
        uint64_t v142 = (v141 >> 3) + 1;
        unint64_t v143 = &v138[8 * v134 - 16];
        unint64_t v144 = (long long *)(v131 - 16);
        uint64_t v145 = v142 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v146 = *v144;
          *((_OWORD *)v143 - 1) = *(v144 - 1);
          *(_OWORD *)unint64_t v143 = v146;
          v143 -= 32;
          v144 -= 2;
          v145 -= 4;
        }
        while (v145);
        v139 -= 8 * (v142 & 0x3FFFFFFFFFFFFFFCLL);
        v131 -= 8 * (v142 & 0x3FFFFFFFFFFFFFFCLL);
        if (v142 != (v142 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_254:
          do
          {
            uint64_t v147 = *((void *)v131 - 1);
            v131 -= 8;
            *((void *)v139 - 1) = v147;
            v139 -= 8;
          }
          while (v131 != v133);
        }
        unint64_t v131 = (char *)v123[10];
      }
      v123[10] = v139;
      v123[11] = v132;
      v123[12] = v140;
      if (v131) {
        operator delete(v131);
      }
    }
    else
    {
      *(void *)unint64_t v131 = v122;
      unint64_t v132 = v131 + 8;
    }
    v123[11] = v132;
    uint64_t v127 = v123[31];
    goto LABEL_147;
  }
  unint64_t v126 = (void *)((char *)v124 + v123[10] - v123[7]);
  *unint64_t v126 = v122;
  uint64_t v127 = v123[31];
  if (v126 == (void *)v123[11])
  {
LABEL_147:
    uint64_t v148 = (void *)v123[22];
    if (v148)
    {
      while (1)
      {
        *(void *)uint64_t v241 = &v249;
        *(void *)&v241[8] = 1;
        uint64_t v250 = v127;
        uint64_t v149 = v148[6];
        if (!v149) {
          goto LABEL_247;
        }
        (*(void (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)v149 + 48))(v149, &v250, v241);
        uint64_t v148 = (void *)*v148;
        if (!v148) {
          goto LABEL_150;
        }
      }
    }
    goto LABEL_150;
  }
  for (k = (void *)v123[16]; k; k = (void *)*k)
  {
    *(void *)uint64_t v241 = &v249;
    *(void *)&v241[8] = 1;
    uint64_t v250 = v127;
    uint64_t v129 = k[6];
    if (!v129) {
      goto LABEL_247;
    }
    (*(void (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)v129 + 48))(v129, &v250, v241);
  }
LABEL_150:
  uint64_t v150 = *a3;
  uint64_t v151 = a1 + 40;
  size_t v152 = (void *)gdc::Registry::storage<md::pipelineECS::HasUVScale>(a2);
  uint64_t v249 = v150;
  size_t v153 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v152 + 4, (uint64_t)&v249);
  if (v154)
  {
    uint64_t v160 = (char *)v152[11];
    unint64_t v159 = v152[12];
    if ((unint64_t)v160 >= v159)
    {
      size_t v162 = (char *)v152[10];
      uint64_t v163 = (v160 - v162) >> 3;
      unint64_t v164 = v163 + 1;
      if ((unint64_t)(v163 + 1) >> 61) {
        goto LABEL_248;
      }
      uint64_t v165 = v159 - (void)v162;
      if (v165 >> 2 > v164) {
        unint64_t v164 = v165 >> 2;
      }
      if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v166 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v166 = v164;
      }
      if (v166)
      {
        if (v166 >> 61) {
          goto LABEL_249;
        }
        unint64_t v167 = (char *)operator new(8 * v166);
      }
      else
      {
        unint64_t v167 = 0;
      }
      uint8x8_t v168 = &v167[8 * v163];
      uint64_t v169 = &v167[8 * v166];
      *(void *)uint8x8_t v168 = v151;
      uint64_t v161 = v168 + 8;
      if (v160 != v162)
      {
        unint64_t v170 = v160 - v162 - 8;
        if (v170 < 0x58) {
          goto LABEL_255;
        }
        if ((unint64_t)(v162 - v167) < 0x20) {
          goto LABEL_255;
        }
        uint64_t v171 = (v170 >> 3) + 1;
        uint64_t v172 = &v167[8 * v163 - 16];
        float v173 = (long long *)(v160 - 16);
        uint64_t v174 = v171 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v175 = *v173;
          *((_OWORD *)v172 - 1) = *(v173 - 1);
          *(_OWORD *)uint64_t v172 = v175;
          v172 -= 32;
          v173 -= 2;
          v174 -= 4;
        }
        while (v174);
        v168 -= 8 * (v171 & 0x3FFFFFFFFFFFFFFCLL);
        v160 -= 8 * (v171 & 0x3FFFFFFFFFFFFFFCLL);
        if (v171 != (v171 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_255:
          do
          {
            uint64_t v176 = *((void *)v160 - 1);
            v160 -= 8;
            *((void *)v168 - 1) = v176;
            v168 -= 8;
          }
          while (v160 != v162);
        }
        uint64_t v160 = (char *)v152[10];
      }
      v152[10] = v168;
      v152[11] = v161;
      v152[12] = v169;
      if (v160) {
        operator delete(v160);
      }
    }
    else
    {
      *(void *)uint64_t v160 = v151;
      uint64_t v161 = v160 + 8;
    }
    v152[11] = v161;
    uint64_t v156 = v152[31];
    goto LABEL_179;
  }
  size_t v155 = (void *)((char *)v153 + v152[10] - v152[7]);
  *size_t v155 = v151;
  uint64_t v156 = v152[31];
  if (v155 == (void *)v152[11])
  {
LABEL_179:
    unint64_t v177 = (void *)v152[22];
    if (v177)
    {
      while (1)
      {
        *(void *)uint64_t v241 = &v249;
        *(void *)&v241[8] = 1;
        uint64_t v250 = v156;
        uint64_t v178 = v177[6];
        if (!v178) {
          goto LABEL_247;
        }
        (*(void (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)v178 + 48))(v178, &v250, v241);
        unint64_t v177 = (void *)*v177;
        if (!v177) {
          goto LABEL_182;
        }
      }
    }
    goto LABEL_182;
  }
  for (m = (void *)v152[16]; m; m = (void *)*m)
  {
    *(void *)uint64_t v241 = &v249;
    *(void *)&v241[8] = 1;
    uint64_t v250 = v156;
    uint64_t v158 = m[6];
    if (!v158) {
      goto LABEL_247;
    }
    (*(void (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)v158 + 48))(v158, &v250, v241);
  }
LABEL_182:
  uint64_t v179 = *a3;
  uint64_t v180 = a1 + 56;
  HasARLighting = (void *)gdc::Registry::storage<md::pipelineECS::HasARLightingSetup>(a2);
  uint64_t v249 = v179;
  uint64_t v182 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(HasARLighting + 4, (uint64_t)&v249);
  if (v183)
  {
    uint64_t v189 = (char *)HasARLighting[11];
    unint64_t v188 = HasARLighting[12];
    if ((unint64_t)v189 >= v188)
    {
      unint64_t v191 = (char *)HasARLighting[10];
      uint64_t v192 = (v189 - v191) >> 3;
      unint64_t v193 = v192 + 1;
      if ((unint64_t)(v192 + 1) >> 61) {
        goto LABEL_248;
      }
      uint64_t v194 = v188 - (void)v191;
      if (v194 >> 2 > v193) {
        unint64_t v193 = v194 >> 2;
      }
      if ((unint64_t)v194 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v195 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v195 = v193;
      }
      if (v195)
      {
        if (v195 >> 61) {
          goto LABEL_249;
        }
        size_t v196 = (char *)operator new(8 * v195);
      }
      else
      {
        size_t v196 = 0;
      }
      uint64_t v197 = &v196[8 * v192];
      unint64_t v198 = &v196[8 * v195];
      *(void *)uint64_t v197 = v180;
      uint64_t v190 = v197 + 8;
      if (v189 != v191)
      {
        unint64_t v199 = v189 - v191 - 8;
        if (v199 < 0x58) {
          goto LABEL_256;
        }
        if ((unint64_t)(v191 - v196) < 0x20) {
          goto LABEL_256;
        }
        uint64_t v200 = (v199 >> 3) + 1;
        unint64_t v201 = &v196[8 * v192 - 16];
        uint64_t v202 = (long long *)(v189 - 16);
        uint64_t v203 = v200 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v204 = *v202;
          *((_OWORD *)v201 - 1) = *(v202 - 1);
          *(_OWORD *)unint64_t v201 = v204;
          v201 -= 32;
          v202 -= 2;
          v203 -= 4;
        }
        while (v203);
        v197 -= 8 * (v200 & 0x3FFFFFFFFFFFFFFCLL);
        v189 -= 8 * (v200 & 0x3FFFFFFFFFFFFFFCLL);
        if (v200 != (v200 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_256:
          do
          {
            uint64_t v205 = *((void *)v189 - 1);
            v189 -= 8;
            *((void *)v197 - 1) = v205;
            v197 -= 8;
          }
          while (v189 != v191);
        }
        uint64_t v189 = (char *)HasARLighting[10];
      }
      HasARLighting[10] = v197;
      HasARLighting[11] = v190;
      HasARLighting[12] = v198;
      if (v189) {
        operator delete(v189);
      }
    }
    else
    {
      *(void *)uint64_t v189 = v180;
      uint64_t v190 = v189 + 8;
    }
    HasARLighting[11] = v190;
    uint64_t v185 = HasARLighting[31];
    goto LABEL_211;
  }
  size_t v184 = (void *)((char *)v182 + HasARLighting[10] - HasARLighting[7]);
  void *v184 = v180;
  uint64_t v185 = HasARLighting[31];
  if (v184 == (void *)HasARLighting[11])
  {
LABEL_211:
    uint64_t v206 = (void *)HasARLighting[22];
    if (v206)
    {
      while (1)
      {
        *(void *)uint64_t v241 = &v249;
        *(void *)&v241[8] = 1;
        uint64_t v250 = v185;
        uint64_t v207 = v206[6];
        if (!v207) {
          goto LABEL_247;
        }
        (*(void (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)v207 + 48))(v207, &v250, v241);
        uint64_t v206 = (void *)*v206;
        if (!v206) {
          goto LABEL_214;
        }
      }
    }
    goto LABEL_214;
  }
  for (n = (void *)HasARLighting[16]; n; n = (void *)*n)
  {
    *(void *)uint64_t v241 = &v249;
    *(void *)&v241[8] = 1;
    uint64_t v250 = v185;
    uint64_t v187 = n[6];
    if (!v187) {
      goto LABEL_247;
    }
    (*(void (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)v187 + 48))(v187, &v250, v241);
  }
LABEL_214:
  uint64_t v208 = *a3;
  *(void *)uint64_t v241 = a1 + 16;
  HasTransformConstant = (void *)gdc::Registry::storage<md::pipelineECS::HasTransformConstantData>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(HasTransformConstant, v208, v241);
  uint64_t v210 = *a3;
  *(void *)uint64_t v241 = a1 + 24;
  HasTransformInstanceDeviceData = (void *)gdc::Registry::storage<md::pipelineECS::HasTransformInstanceDeviceDataFeature>(a2);
  gdc::ComponentStorageWrapper<md::ls::RegisterHandle>::emplace(HasTransformInstanceDeviceData, v210, v241);
  uint64_t v212 = *a3;
  uint64_t v213 = a1 + 8;
  unint64_t v214 = (void *)gdc::Registry::storage<md::pipelineECS::SupportsEnvironmentTexture>(a2);
  uint64_t v249 = v212;
  uint64_t v215 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v214 + 4, (uint64_t)&v249);
  if (v216)
  {
    unint64_t v222 = (char *)v214[11];
    unint64_t v221 = v214[12];
    if ((unint64_t)v222 < v221)
    {
      *(void *)unint64_t v222 = v213;
      uint64_t v223 = v222 + 8;
LABEL_242:
      v214[11] = v223;
      uint64_t v218 = v214[31];
LABEL_243:
      uint64_t v239 = (void *)v214[22];
      if (v239)
      {
        while (1)
        {
          *(void *)uint64_t v241 = &v249;
          *(void *)&v241[8] = 1;
          uint64_t v250 = v218;
          uint64_t v240 = v239[6];
          if (!v240) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)v240 + 48))(v240, &v250, v241);
          uint64_t v239 = (void *)*v239;
          if (!v239) {
            return;
          }
        }
        goto LABEL_247;
      }
      return;
    }
    unint64_t v224 = (char *)v214[10];
    uint64_t v225 = (v222 - v224) >> 3;
    unint64_t v226 = v225 + 1;
    if ((unint64_t)(v225 + 1) >> 61) {
      goto LABEL_248;
    }
    uint64_t v227 = v221 - (void)v224;
    if (v227 >> 2 > v226) {
      unint64_t v226 = v227 >> 2;
    }
    if ((unint64_t)v227 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v228 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v228 = v226;
    }
    if (!v228)
    {
      uint64_t v229 = 0;
      goto LABEL_232;
    }
    if (!(v228 >> 61))
    {
      uint64_t v229 = (char *)operator new(8 * v228);
LABEL_232:
      uint64_t v230 = &v229[8 * v225];
      uint64_t v231 = &v229[8 * v228];
      *(void *)uint64_t v230 = v213;
      uint64_t v223 = v230 + 8;
      if (v222 != v224)
      {
        unint64_t v232 = v222 - v224 - 8;
        if (v232 < 0x58) {
          goto LABEL_257;
        }
        if ((unint64_t)(v224 - v229) < 0x20) {
          goto LABEL_257;
        }
        uint64_t v233 = (v232 >> 3) + 1;
        uint64_t v234 = &v229[8 * v225 - 16];
        uint64_t v235 = (long long *)(v222 - 16);
        uint64_t v236 = v233 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v237 = *v235;
          *((_OWORD *)v234 - 1) = *(v235 - 1);
          *(_OWORD *)uint64_t v234 = v237;
          v234 -= 32;
          v235 -= 2;
          v236 -= 4;
        }
        while (v236);
        v230 -= 8 * (v233 & 0x3FFFFFFFFFFFFFFCLL);
        v222 -= 8 * (v233 & 0x3FFFFFFFFFFFFFFCLL);
        if (v233 != (v233 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_257:
          do
          {
            uint64_t v238 = *((void *)v222 - 1);
            v222 -= 8;
            *((void *)v230 - 1) = v238;
            v230 -= 8;
          }
          while (v222 != v224);
        }
        unint64_t v222 = (char *)v214[10];
      }
      v214[10] = v230;
      v214[11] = v223;
      v214[12] = v231;
      if (v222) {
        operator delete(v222);
      }
      goto LABEL_242;
    }
LABEL_249:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  unint64_t v217 = (void *)((char *)v215 + v214[10] - v214[7]);
  *unint64_t v217 = v213;
  uint64_t v218 = v214[31];
  if (v217 == (void *)v214[11]) {
    goto LABEL_243;
  }
  uint64_t v219 = (void *)v214[16];
  if (v219)
  {
    while (1)
    {
      *(void *)uint64_t v241 = &v249;
      *(void *)&v241[8] = 1;
      uint64_t v250 = v218;
      uint64_t v220 = v219[6];
      if (!v220) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)v220 + 48))(v220, &v250, v241);
      uint64_t v219 = (void *)*v219;
      if (!v219) {
        return;
      }
    }
    goto LABEL_247;
  }
}

void sub_1A267CD98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void md::StandardPipelineProxy::initUVScaleBuffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*(void *)(*(void *)(*a2 + 64) + 64))
  {
    uint64_t v3 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v3->__shared_weak_owners_ = 0;
    v3->__shared_owners_ = 0;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587170;
    uint64_t v4 = ggl::BufferData::BufferData((uint64_t)&v3[1], qword_1E9568808, 2, 1, 6, 1);
    v3[9].__shared_owners_ = (uint64_t)ggl::ARMesh::UVScale::reflection(void)::reflection;
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55E478;
    uint64_t v5 = *(void *)(v2 + 64);
    *(void *)(v5 + 64) = v4;
    *(void *)(v5 + 72) = 0;
    uint64_t v6 = *(void *)(v2 + 160);
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v7 = *(std::__shared_weak_count **)(v6 + 72);
    *(void *)(v6 + 64) = v4;
    *(void *)(v6 + 72) = v3;
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    unint64_t shared_owners = v3[1].__shared_owners_;
    __asm { FMOV            V0.2S, #1.0 }
    unint64_t shared_weak_owners = v3[3].__shared_weak_owners_;
    v3[4].~__shared_weak_count = _D0;
    if (shared_weak_owners > shared_owners) {
      unint64_t shared_owners = shared_weak_owners;
    }
    v3[3].__shared_owners_ = 0;
    v3[3].__shared_weak_owners_ = shared_owners;
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::ConstantDataTyped<ggl::ARMesh::UVScale>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::ARMesh::UVScale>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ARMesh::UVScale>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ARMesh::UVScale>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587170;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ARMesh::UVScale>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587170;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::StandardPipelineProxy::setUVScale(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3 = *(void **)(*(void *)(*(void *)a2 + 64) + 64);
  unint64_t v5 = v3[8];
  uint64_t v4 = (_DWORD *)v3[9];
  *uint64_t v4 = *a3;
  unint64_t v6 = v3[1];
  v4[1] = a3[1];
  if (v5 <= v6) {
    unint64_t v7 = v6;
  }
  else {
    unint64_t v7 = v5;
  }
  v3[7] = 0;
  v3[8] = v7;
}

void md::StandardPipelineProxy::initUVMappingBuffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*(void *)(*(void *)(*a2 + 64) + 48))
  {
    uint64_t v3 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v3->__shared_weak_owners_ = 0;
    v3->__shared_owners_ = 0;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5871A8;
    uint64_t v4 = ggl::BufferData::BufferData((uint64_t)&v3[1], qword_1E95687C8, 2, 1, 6, 1);
    v3[9].__shared_owners_ = (uint64_t)ggl::ARMesh::UVMapping::reflection(void)::reflection;
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55E498;
    uint64_t v5 = *(void *)(v2 + 64);
    *(void *)(v5 + 48) = v4;
    *(void *)(v5 + 56) = 0;
    uint64_t v6 = *(void *)(v2 + 160);
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v7 = *(std::__shared_weak_count **)(v6 + 56);
    *(void *)(v6 + 48) = v4;
    *(void *)(v6 + 56) = v3;
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    unint64_t shared_owners = v3[1].__shared_owners_;
    unint64_t shared_weak_owners = v3[3].__shared_weak_owners_;
    *(_OWORD *)&v3[4].~__shared_weak_count = xmmword_1A28FCDA0;
    if (shared_weak_owners > shared_owners) {
      unint64_t shared_owners = shared_weak_owners;
    }
    v3[3].__shared_owners_ = 0;
    v3[3].__shared_weak_owners_ = shared_owners;
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::ConstantDataTyped<ggl::ARMesh::UVMapping>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::ARMesh::UVMapping>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ARMesh::UVMapping>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ARMesh::UVMapping>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5871A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::ARMesh::UVMapping>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5871A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::StandardPipelineProxy::setUVMapping(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3 = *(void **)(*(void *)(*(void *)a2 + 64) + 48);
  unint64_t v4 = v3[1];
  unint64_t v5 = v3[8];
  *(_OWORD *)v3[9] = *a3;
  if (v5 > v4) {
    unint64_t v4 = v5;
  }
  v3[7] = 0;
  v3[8] = v4;
}

void non-virtual thunk to'md::StandardPipelineProxy::setTransformInstanceDeviceData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *(uint64_t **)(a3 + 32);
  unint64_t v5 = *(void **)(*a2 + 32);
  uint64_t v6 = *v4;
  uint64_t v7 = v4[1];
  *unint64_t v5 = v6;
  v5[1] = 0;
  uint64_t v8 = *(void **)(v3 + 128);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (std::__shared_weak_count *)v8[1];
  *uint64_t v8 = v6;
  v8[1] = v7;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void non-virtual thunk to'md::StandardPipelineProxy::setTransformConstant(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*a2 + 64);
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  *(void *)(v4 + 16) = *a3;
  *(void *)(v4 + 24) = 0;
  uint64_t v7 = *(void *)(v3 + 160);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(v7 + 24);
  *(void *)(v7 + 16) = v5;
  *(void *)(v7 + 24) = v6;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void non-virtual thunk to'md::StandardPipelineProxy::setEnvironmentTexture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)a2 + 96) + 8) = a3;
}

void md::StandardPipelineProxy::setTransformInstanceDeviceData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(uint64_t **)(a3 + 32);
  uint64_t v5 = *(void **)(*a2 + 32);
  uint64_t v6 = *v4;
  uint64_t v7 = v4[1];
  *uint64_t v5 = v6;
  v5[1] = 0;
  uint64_t v8 = *(void **)(v3 + 128);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (std::__shared_weak_count *)v8[1];
  *uint64_t v8 = v6;
  v8[1] = v7;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void md::StandardPipelineProxy::setTransformConstant(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*a2 + 64);
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  *(void *)(v4 + 16) = *a3;
  *(void *)(v4 + 24) = 0;
  uint64_t v7 = *(void *)(v3 + 160);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(v7 + 24);
  *(void *)(v7 + 16) = v5;
  *(void *)(v7 + 24) = v6;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void md::StandardPipelineProxy::setEnvironmentTexture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)a2 + 96) + 8) = a3;
}

void md::StandardPipelineProxy::~StandardPipelineProxy(md::StandardPipelineProxy *this)
{
}

void md::StandardPipelineProxy::setAlbedo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  **(void **)(*(void *)a2 + 96) = a3;
}

uint64_t __copy_helper_atomic_property__6(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 24);
  if (result)
  {
    if (result == a2)
    {
      *(void *)(a1 + 24) = a1;
      uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a2 + 24) + 24);
      return v4();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      *(void *)(a1 + 24) = result;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return result;
}

uint64_t __copy_helper_atomic_property__4(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 24);
  if (result)
  {
    if (result == a2)
    {
      *(void *)(a1 + 24) = a1;
      uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a2 + 24) + 24);
      return v4();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      *(void *)(a1 + 24) = result;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return result;
}

uint64_t __copy_helper_atomic_property_(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 24);
  if (result)
  {
    if (result == a2)
    {
      *(void *)(a1 + 24) = a1;
      uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a2 + 24) + 24);
      return v4();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      *(void *)(a1 + 24) = result;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return result;
}

void sub_1A267DD9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1A267DF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1A267E0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1A267E280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  unint64_t v10 = v9;

  a9.super_class = (Class)VKManifestTileGroupObserverProxy;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

uint64_t karo::graphics::ViewSwitchNode::setCurrentViewNode(void *a1, unsigned __int8 **a2)
{
  uint64_t v3 = a1[5];
  uint64_t v2 = a1[6];
  uint64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    uint64_t v6 = 0;
    unsigned int v7 = 0;
    unint64_t v8 = v4 >> 3;
    char v9 = *((unsigned char *)a2 + 23);
    if (v9 >= 0) {
      unint64_t v10 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    }
    else {
      unint64_t v10 = a2[1];
    }
    if (v9 >= 0) {
      uint64_t v11 = (unsigned __int8 *)a2;
    }
    else {
      uint64_t v11 = *a2;
    }
    do
    {
      uint64_t v12 = *(void *)(v3 + 8 * v6);
      uint64_t v13 = *(unsigned __int8 *)(v12 + 31);
      if ((v13 & 0x80u) == 0) {
        uint64_t v14 = (unsigned __int8 *)*(unsigned __int8 *)(v12 + 31);
      }
      else {
        uint64_t v14 = *(unsigned __int8 **)(v12 + 16);
      }
      if (v14 == v10)
      {
        uint64_t v15 = (const void **)(v12 + 8);
        if ((v13 & 0x80) != 0)
        {
          if (!memcmp(*v15, v11, *(void *)(v12 + 16))) {
            goto LABEL_19;
          }
        }
        else
        {
          if (!*(unsigned char *)(v12 + 31))
          {
LABEL_19:
            a1[8] = v12;
            return 1;
          }
          uint64_t v16 = v11;
          while (*(unsigned __int8 *)v15 == *v16)
          {
            uint64_t v15 = (const void **)((char *)v15 + 1);
            ++v16;
            if (!--v13) {
              goto LABEL_19;
            }
          }
        }
      }
      uint64_t v6 = ++v7;
    }
    while (v8 > v7);
  }
  return 0;
}

uint64_t karo::graphics::ViewSwitchNode::setCurrentViewNode(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[6] - v2;
  if (!v3) {
    return 0;
  }
  unint64_t v4 = 0;
  unint64_t v5 = v3 >> 3;
  unsigned int v6 = 1;
  while (*(void *)(v2 + 8 * v4) != a2)
  {
    unint64_t v4 = v6++;
    if (v5 <= v4) {
      return 0;
    }
  }
  a1[8] = a2;
  return 1;
}

uint64_t karo::graphics::ViewSwitchNode::computeView(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 64);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 24))(result, a1);
  }
  return result;
}

void karo::graphics::ViewSwitchNode::~ViewSwitchNode(karo::graphics::ViewSwitchNode *this)
{
  *(void *)this = &unk_1EF568290;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1A6239270);
}

{
  void *v2;

  *(void *)this = &unk_1EF568290;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void md::PointLabelIcon::~PointLabelIcon(md::PointLabelIcon *this)
{
  *(void *)this = &unk_1EF5343E8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::LabelIcon::~LabelIcon(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF5343E8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::LabelIcon::~LabelIcon(this);
}

void md::TextureBackedLabelIcon::renderIcon(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v7 = [VKImage alloc];
  grl::IconImage::image(*(grl::IconImage **)(a1 + 152), &v14);
  CFTypeRef v8 = cf;
  double v9 = *(float *)(*(void *)(a1 + 32) + 56);
  unint64_t v10 = (std::__shared_weak_count *)a4[1];
  uint64_t v12 = *a4;
  uint64_t v13 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = [(VKImage *)v7 initWithCGImage:v8 scale:1 usedAsTextureAndImage:&v12 resourceStore:v9];
  uint64_t v16 = &unk_1EF559EB8;
  BOOL v17 = v11;
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = &unk_1EF559118;
  if (cf) {
    CFRelease(cf);
  }
  md::LabelIcon::setImage(a1, (uint64_t)&v16, a2, 0);
  uint64_t v16 = &unk_1EF559EB8;
}

void sub_1A267E788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1A267E7A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, CFTypeRef cf)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  if (!cf) {
    _Unwind_Resume(exception_object);
  }
  CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void md::TextureBackedLabelIcon::~TextureBackedLabelIcon(md::TextureBackedLabelIcon *this)
{
  *(void *)this = &unk_1EF542670;
  atomic_store(0, (unsigned __int8 *)this + 144);
  *(void *)this = &unk_1EF5343E8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::LabelIcon::~LabelIcon(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF542670;
  atomic_store(0, (unsigned __int8 *)this + 144);
  *(void *)this = &unk_1EF5343E8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::LabelIcon::~LabelIcon(this);
}

uint64_t md::RoadSignLabelIcon::isIconRTL(id *this)
{
  id v1 = this[20];
  uint64_t v2 = *(unsigned __int8 *)([v1 textMetrics] + 137);

  return v2;
}

void sub_1A267E9B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::RoadSignLabelIcon::renderIcon(uint64_t a1, int a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 160);
  [v6 image];
  unsigned int v7 = &unk_1EF559EB8;
  id v8 = (id)objc_claimAutoreleasedReturnValue();

  md::LabelIcon::setImage(a1, (uint64_t)&v7, a2, a3);
  unsigned int v7 = &unk_1EF559EB8;
}

void sub_1A267EA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1A267EA74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::RoadSignLabelIcon::~RoadSignLabelIcon(md::RoadSignLabelIcon *this)
{
  *(void *)this = &unk_1EF537C10;
  *((void *)this + 19) = &unk_1EF559778;

  md::LabelIcon::~LabelIcon(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EF537C10;
  *((void *)this + 19) = &unk_1EF559778;

  md::LabelIcon::~LabelIcon(this);
}

void md::ExternalImageLabelIcon::renderIcon(uint64_t a1, int a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 176)) {
    uint64_t v3 = a3;
  }
  else {
    uint64_t v3 = 0;
  }
  md::LabelIcon::setImage(a1, a1 + 152, a2, v3);
}

void md::ExternalImageLabelIcon::~ExternalImageLabelIcon(md::ExternalImageLabelIcon *this)
{
  *(void *)this = &unk_1EF5136A8;
  *((void *)this + 19) = &unk_1EF559EB8;

  md::LabelIcon::~LabelIcon(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EF5136A8;
  *((void *)this + 19) = &unk_1EF559EB8;

  md::LabelIcon::~LabelIcon(this);
}

uint64_t md::ShieldLabelIcon::text(md::ShieldLabelIcon *this)
{
  uint64_t result = (uint64_t)this + 168;
  if (*((char *)this + 191) < 0) {
    return *(void *)result;
  }
  return result;
}

void md::ShieldLabelIcon::~ShieldLabelIcon(md::ShieldLabelIcon *this)
{
  *(void *)this = &unk_1EF535478;
  if (*((char *)this + 191) < 0)
  {
    (*(void (**)(void, void, uint64_t))(**((void **)this + 24) + 40))(*((void *)this + 24), *((void *)this + 21), *((void *)this + 23) & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
    if (!v2) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
    if (!v2) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
LABEL_7:
  md::LabelIcon::~LabelIcon(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF535478;
  if (*((char *)this + 191) < 0)
  {
    (*(void (**)(void, void, uint64_t))(**((void **)this + 24) + 40))(*((void *)this + 24), *((void *)this + 21), *((void *)this + 23) & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
    if (!v2) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
    if (!v2) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
LABEL_7:
  md::LabelIcon::~LabelIcon(this);
}

uint64_t md::LabelIcon::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(a1 + 143));
  if (v3) {
    id v4 = *(id *)(a1 + 16);
  }
  else {
    id v4 = 0;
  }
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)(a2 + 143));
  if (v6) {
    id v7 = *(id *)(a2 + 16);
  }
  else {
    id v7 = 0;
  }
  BOOL v5 = v4 == v7;

  return v5;
}

md::RoadSignLabelIcon *md::RoadSignLabelIcon::RoadSignLabelIcon(md::RoadSignLabelIcon *this, VKRoadSignArtwork *a2)
{
  unsigned __int8 v3 = a2;
  *((void *)this + 1) = &unk_1EF559EB8;
  *((void *)this + 2) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((_OWORD *)this + 3) = xmmword_1A28FC750;
  *((_OWORD *)this + 4) = xmmword_1A28FC750;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 1065353216;
  *((unsigned char *)this + 144) = 0;
  *(void *)this = &unk_1EF537C10;
  id v4 = v3;
  *((void *)this + 19) = &unk_1EF559778;
  *((void *)this + 20) = v4;
  [(VKRoadSignArtwork *)v4 localRenderBounds];
  *((_DWORD *)this + 12) = v5;
  *((_DWORD *)this + 13) = v6;
  *((_DWORD *)this + 14) = v7;
  *((_DWORD *)this + 15) = v8;
  [(VKRoadSignArtwork *)v4 localCollisionBounds];
  *((_DWORD *)this + 16) = v9;
  *((_DWORD *)this + 17) = v10;
  *((_DWORD *)this + 18) = v11;
  *((_DWORD *)this + 19) = v12;
  atomic_store(1u, (unsigned __int8 *)this + 144);
  if (*(void *)[(VKRoadSignArtwork *)v4 glyph])
  {
    uint64_t v13 = [(VKRoadSignArtwork *)v4 glyph];
    uint64_t v14 = (long long *)v13;
    uint64_t v16 = (char *)*((void *)this + 15);
    unint64_t v15 = *((void *)this + 16);
    if ((unint64_t)v16 >= v15)
    {
      unint64_t v19 = (char *)*((void *)this + 14);
      uint64_t v20 = (v16 - v19) >> 4;
      unint64_t v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 60) {
        abort();
      }
      uint64_t v22 = v15 - (void)v19;
      if (v22 >> 3 > v21) {
        unint64_t v21 = v22 >> 3;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23 >> 60) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v24 = (char *)operator new(16 * v23);
      uint64_t v25 = &v24[16 * v20];
      long long v26 = *v14;
      *(_OWORD *)uint64_t v25 = *v14;
      if (*((void *)&v26 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v26 + 1) + 8), 1uLL, memory_order_relaxed);
        unint64_t v19 = (char *)*((void *)this + 14);
        uint64_t v16 = (char *)*((void *)this + 15);
      }
      uint64_t v27 = &v24[16 * v23];
      uint64_t v18 = v25 + 16;
      if (v16 == v19)
      {
        *((void *)this + 14) = v25;
        *((void *)this + 15) = v18;
        *((void *)this + 16) = v27;
      }
      else
      {
        do
        {
          long long v28 = *((_OWORD *)v16 - 1);
          v16 -= 16;
          *((_OWORD *)v25 - 1) = v28;
          v25 -= 16;
          *(void *)uint64_t v16 = 0;
          *((void *)v16 + 1) = 0;
        }
        while (v16 != v19);
        unint64_t v19 = (char *)*((void *)this + 14);
        uint64_t v29 = (char *)*((void *)this + 15);
        *((void *)this + 14) = v25;
        *((void *)this + 15) = v18;
        for (*((void *)this + 16) = v27; v29 != v19; v29 -= 16)
        {
          uint64_t v30 = (std::__shared_weak_count *)*((void *)v29 - 1);
          if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
      }
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      uint64_t v17 = v13[1];
      *(void *)uint64_t v16 = *v13;
      *((void *)v16 + 1) = v17;
      if (v17) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v18 = v16 + 16;
    }
    *((void *)this + 15) = v18;
  }

  return this;
}

void sub_1A267F178(_Unwind_Exception *a1)
{
  *(void *)(v1 + 152) = v3;

  md::LabelIcon::~LabelIcon((md::LabelIcon *)v1);
  _Unwind_Resume(a1);
}

void **geo::linear_map<ggl::Landmark::LandmarkMesh *,std::vector<md::ObjectGroupFeatureRange>,std::equal_to<ggl::Landmark::LandmarkMesh *>,std::allocator<std::pair<ggl::Landmark::LandmarkMesh *,std::vector<md::ObjectGroupFeatureRange>>>,std::vector<std::pair<ggl::Landmark::LandmarkMesh *,std::vector<md::ObjectGroupFeatureRange>>>>::~linear_map(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    id v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        int v5 = (void *)*((void *)v3 - 3);
        if (v5)
        {
          *((void *)v3 - 2) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      id v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *std::vector<std::pair<ggl::Landmark::LandmarkMesh *,std::vector<md::ObjectGroupFeatureRange>>>::__init_with_size[abi:nn180100]<std::pair<ggl::Landmark::LandmarkMesh *,std::vector<md::ObjectGroupFeatureRange>>*,std::pair<ggl::Landmark::LandmarkMesh *,std::vector<md::ObjectGroupFeatureRange>>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 59) {
      abort();
    }
    int v6 = result;
    uint64_t v7 = 4 * a4;
    uint64_t result = operator new(32 * a4);
    int v8 = result;
    *int v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    if (a2 != a3)
    {
      uint64_t v17 = v6;
      unint64_t v9 = 0;
      do
      {
        uint64_t v11 = a2 + v9;
        int v12 = &v8[v9 / 8];
        uint64_t v13 = *(unsigned char **)(a2 + v9 + 8);
        void *v12 = *(void *)(a2 + v9);
        v8[v9 / 8 + 1] = 0;
        void v12[2] = 0;
        v12[3] = 0;
        uint64_t v14 = *(unsigned char **)(a2 + v9 + 16);
        int64_t v15 = v14 - v13;
        if (v14 != v13)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v15 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
            abort();
          }
          uint64_t v16 = (char *)operator new(v15);
          v8[v9 / 8 + 1] = v16;
          int v10 = &v16[8 * (v15 >> 3)];
          void v12[2] = v16;
          v12[3] = v10;
          uint64_t result = memcpy(v16, v13, v15);
          void v12[2] = v10;
        }
        v9 += 32;
      }
      while (v11 + 32 != a3);
      int v8 = (void *)((char *)v8 + v9);
      int v6 = v17;
    }
    v6[1] = v8;
  }
  return result;
}

void sub_1A267F344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(a10 + 8) = v10;
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::pair<std::shared_ptr<ggl::Texture2D>,geo::linear_map<ggl::Landmark::LandmarkMesh *,std::vector<md::ObjectGroupFeatureRange>,std::equal_to<ggl::Landmark::LandmarkMesh *>,std::allocator<std::pair<ggl::Landmark::LandmarkMesh *,std::vector<md::ObjectGroupFeatureRange>>>,std::vector<std::pair<ggl::Landmark::LandmarkMesh *,std::vector<md::ObjectGroupFeatureRange>>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    uint64_t v4 = *(void *)(i - 24);
    if (v4)
    {
      uint64_t v5 = *(void *)(i - 16);
      int v6 = *(void **)(i - 24);
      if (v5 != v4)
      {
        do
        {
          uint64_t v7 = *(void **)(v5 - 24);
          if (v7)
          {
            *(void *)(v5 - 16) = v7;
            operator delete(v7);
          }
          v5 -= 32;
        }
        while (v5 != v4);
        int v6 = *(void **)(i - 24);
      }
      *(void *)(i - 16) = v4;
      operator delete(v6);
    }
    int v8 = *(std::__shared_weak_count **)(i - 32);
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void altitude::util::getTileIndexFromUrlString(void **a1, uint64_t a2)
{
  uint64_t v3 = __dst;
  karo::util::Path::getNonDirectory(__dst, a1);
  if ((v18 & 0x80u) == 0) {
    uint64_t v4 = v18;
  }
  else {
    uint64_t v4 = (uint64_t)__dst[1];
  }
  if ((v18 & 0x80u) != 0) {
    uint64_t v3 = (void **)__dst[0];
  }
  uint64_t v5 = (char *)v3 + v4;
  if (v4 > 4)
  {
    uint64_t v6 = v4;
    uint64_t v7 = v3;
    do
    {
      int v8 = (char *)memchr(v7, 116, v6 - 4);
      if (!v8) {
        break;
      }
      if (*(_DWORD *)v8 == 1701603700 && v8[4] == 63)
      {
        if (v8 == v5 || v8 - (char *)v3 == -1) {
          break;
        }
        char v16 = 3;
        LODWORD(__p[0]) = 4028966;
        if (v16 < 0) {
          operator delete(__p[0]);
        }
        char v16 = 3;
        LODWORD(__p[0]) = 4028454;
        if (v16 < 0) {
          operator delete(__p[0]);
        }
        char v16 = 3;
        LODWORD(__p[0]) = 4028710;
        if (v16 < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_31;
      }
      uint64_t v7 = (void **)(v8 + 1);
      uint64_t v6 = v5 - (char *)v7;
    }
    while (v5 - (char *)v7 > 4);
  }
  if (v4 >= 4)
  {
    uint64_t v10 = v3;
    do
    {
      uint64_t v11 = (char *)memchr(v10, 109, v4 - 3);
      if (!v11) {
        break;
      }
      if (*(_DWORD *)v11 == 1601200493)
      {
        if (v11 != v5 && v11 - (char *)v3 != -1)
        {
          LODWORD(__p[0]) = 0;
          uint64_t v14 = 0;
          sscanf((const char *)v3, "map_%d_%d_%d", __p, (char *)&v14 + 4, &v14);
          char v12 = (char)__p[0];
          *(unsigned char *)(a2 + 1) = __p[0];
          int v13 = v14;
          *(_DWORD *)(a2 + 4) = ~(-1 << v12) - HIDWORD(v14);
          *(_DWORD *)(a2 + 8) = v13;
        }
        break;
      }
      uint64_t v10 = (void **)(v11 + 1);
      uint64_t v4 = v5 - (char *)v10;
    }
    while (v5 - (char *)v10 >= 4);
  }
LABEL_31:
  if ((char)v18 < 0) {
    operator delete(__dst[0]);
  }
}

uint64_t anonymous namespace'::getValueFromString(char *a1, char *a2)
{
  uint64_t v2 = (uint64_t *)a1;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  int v3 = a1[23];
  int v4 = a2[23];
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(char **)a2;
  }
  if (v4 >= 0) {
    int64_t v6 = a2[23];
  }
  else {
    int64_t v6 = *((void *)a2 + 1);
  }
  uint64_t v7 = *(char **)a1;
  int64_t v8 = *((void *)a1 + 1);
  uint64_t v37 = *(char **)a1;
  unint64_t v38 = v8;
  if (v3 >= 0) {
    unint64_t v9 = a1;
  }
  else {
    unint64_t v9 = v7;
  }
  unint64_t v10 = v3;
  if (v3 >= 0) {
    int64_t v11 = v3;
  }
  else {
    int64_t v11 = v8;
  }
  if (!v6)
  {
    int64_t v17 = 0;
    goto LABEL_27;
  }
  if (v11 >= v6)
  {
    uint64_t v20 = &v9[v11];
    int v21 = *v5;
    int64_t v22 = v11;
    unint64_t v23 = v9;
    while (1)
    {
      int64_t v24 = v22 - v6;
      if (v24 == -1) {
        goto LABEL_15;
      }
      uint64_t v25 = (char *)memchr(v23, v21, v24 + 1);
      if (!v25) {
        goto LABEL_15;
      }
      long long v26 = v25;
      if (!memcmp(v25, v5, v6)) {
        break;
      }
      unint64_t v23 = v26 + 1;
      int64_t v22 = v20 - (v26 + 1);
      if (v22 < v6) {
        goto LABEL_15;
      }
    }
    if (v26 != v20)
    {
      int64_t v17 = v26 - v9;
      if (v26 - v9 != -1)
      {
LABEL_27:
        unint64_t v18 = v17 + v6;
        if (v11 >= (unint64_t)(v17 + v6))
        {
          uint64_t v27 = &v9[v18];
          long long v28 = &v9[v11];
          size_t v29 = v11 - v18;
          if ((uint64_t)(v11 - v18) >= 1)
          {
            do
            {
              uint64_t v30 = (char *)memchr(v27, 38, v29);
              if (!v30) {
                break;
              }
              if (*v30 == 38) {
                goto LABEL_42;
              }
              uint64_t v27 = v30 + 1;
              size_t v29 = v28 - v27;
            }
            while (v28 - v27 > 0);
          }
          uint64_t v30 = &v9[v11];
LABEL_42:
          unint64_t v19 = v30 - v9;
          if (v30 == v28) {
            unint64_t v19 = -1;
          }
          if ((v10 & 0x80) == 0)
          {
LABEL_29:
            if (v18 > v10) {
              goto LABEL_65;
            }
LABEL_47:
            if (v10 - v18 >= v19) {
              size_t v31 = v19;
            }
            else {
              size_t v31 = v10 - v18;
            }
            if (v31 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_65:
            }
              abort();
            if (v31 >= 0x17)
            {
              uint64_t v33 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v31 | 7) != 0x17) {
                uint64_t v33 = v31 | 7;
              }
              uint64_t v34 = v33 + 1;
              unint64_t v32 = operator new(v33 + 1);
              *(void *)&buf[8] = v31;
              *(void *)&buf[16] = v34 | 0x8000000000000000;
              *(void *)buf = v32;
            }
            else
            {
              buf[23] = v31;
              unint64_t v32 = buf;
              if (!v31)
              {
LABEL_58:
                v32[v31] = 0;
                if ((buf[23] & 0x80000000) == 0) {
                  return atoi(buf);
                }
                uint64_t v35 = *(void **)buf;
                uint64_t v16 = atoi(*(const char **)buf);
                operator delete(v35);
                return v16;
              }
            }
            memmove(v32, (char *)v2 + v18, v31);
            goto LABEL_58;
          }
        }
        else
        {
          unint64_t v19 = -1;
          if ((v10 & 0x80) == 0) {
            goto LABEL_29;
          }
        }
        unint64_t v10 = v38;
        if (v38 < v18) {
          goto LABEL_65;
        }
        uint64_t v2 = (uint64_t *)v37;
        goto LABEL_47;
      }
    }
  }
LABEL_15:
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
  }
  int v13 = GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_ERROR))
  {
    if (a2[23] >= 0) {
      uint64_t v14 = a2;
    }
    else {
      uint64_t v14 = *(char **)a2;
    }
    if (*((char *)v2 + 23) >= 0) {
      int64_t v15 = v2;
    }
    else {
      int64_t v15 = (uint64_t *)*v2;
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&buf[4] = v14;
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v15;
    _os_log_impl(&dword_1A1780000, v13, OS_LOG_TYPE_ERROR, "Failed to find key (%s) in string: %s", buf, 0x16u);
  }
  return 0;
}

void md::LabelAnimator::createMorphAnimation(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = a4;
  if (a4)
  {
    (*(void (**)(uint64_t))(*(void *)a4 + 296))(a4);
    a1.n128_f32[0] = (*(float (**)(uint64_t))(*(void *)a3 + 296))(a3);
    if (a5 == 1)
    {
      (*(float (**)(uint64_t))(*(void *)v6 + 304))(v6);
LABEL_5:
      uint64_t v6 = a3;
      goto LABEL_7;
    }
  }
  else
  {
    a1.n128_u64[0] = 0;
    if (a5 == 1) {
      goto LABEL_5;
    }
  }
  (*(float (**)(uint64_t, __n128))(*(void *)a3 + 304))(a3, a1);
  if (!v6) {
LABEL_8:
  }
    operator new();
LABEL_7:
  (*(float (**)(uint64_t))(*(void *)v6 + 304))(v6);
  goto LABEL_8;
}

void md::LabelAnimator::addRotateAnimation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 52)) {
    operator new();
  }
}

void *md::LabelAnimator::createIconRowScaleAnimation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (*(void *(**)(unint64_t *__return_ptr, uint64_t))(*(void *)a2 + 200))(&v11, a2);
  if (v12 != v11)
  {
    uint64_t v6 = (void *)(v12 - 8);
    if (*(unsigned char *)(a4 + 1)) {
      BOOL v7 = 0;
    }
    else {
      BOOL v7 = (unint64_t)v6 > v11;
    }
    if (v7)
    {
      unint64_t v8 = v11 + 8;
      do
      {
        uint64_t v9 = *(void *)(v8 - 8);
        *(void *)(v8 - 8) = *v6;
        *v6-- = v9;
        BOOL v10 = v8 >= (unint64_t)v6;
        v8 += 8;
      }
      while (!v10);
    }
    operator new();
  }
  if (v12) {
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 40))(v14, v12, v13 - v12);
  }
  return result;
}

void sub_1A2680758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a13) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a16 + 40))(a16, a13, a15 - a13);
  }
  _Unwind_Resume(exception_object);
}

void *md::LabelAnimator::createIconRowShiftAnimation(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = (*(void *(**)(unint64_t *__return_ptr, uint64_t))(*(void *)a2 + 200))(&v9, a2);
  if (v10 != v9)
  {
    if (!a3)
    {
      uint64_t v5 = (void *)(v10 - 8);
      if (v10 - 8 > v9)
      {
        unint64_t v6 = v9 + 8;
        do
        {
          uint64_t v7 = *(void *)(v6 - 8);
          *(void *)(v6 - 8) = *v5;
          *v5-- = v7;
          BOOL v8 = v6 >= (unint64_t)v5;
          v6 += 8;
        }
        while (!v8);
      }
    }
    operator new();
  }
  if (v10) {
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12 + 40))(v12, v10, v11 - v10);
  }
  return result;
}

void sub_1A2680CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a13) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a16 + 40))(a16, a13, a15 - a13);
  }
  _Unwind_Resume(exception_object);
}

void *md::LabelAnimator::createImageListFeatherAnimation(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = (*(void *(**)(unint64_t *__return_ptr, uint64_t))(*(void *)a2 + 200))(&v9, a2);
  if (v10 != v9)
  {
    if (!a3)
    {
      uint64_t v5 = (void *)(v10 - 8);
      if (v10 - 8 > v9)
      {
        unint64_t v6 = v9 + 8;
        do
        {
          uint64_t v7 = *(void *)(v6 - 8);
          *(void *)(v6 - 8) = *v5;
          *v5-- = v7;
          BOOL v8 = v6 >= (unint64_t)v5;
          v6 += 8;
        }
        while (!v8);
      }
    }
    operator new();
  }
  if (v10) {
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12 + 40))(v12, v10, v11 - v10);
  }
  return result;
}

void sub_1A26812A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a13) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a16 + 40))(a16, a13, a15 - a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::LabelAnimator::createClusterAnimation(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  if (a2[1])
  {
    uint64_t v4 = *(void *)(result + 24);
    uint64_t v6 = *(void *)(result + 32);
    uint64_t v5 = (void *)(result + 24);
    if (v6 - v4 == -144)
    {
      while (v6 != v4)
      {
        BOOL v8 = *(void **)(v6 - 144);
        v6 -= 144;
        uint64_t v7 = v8;
        if (v8 != *(void **)(v6 + 16)) {
          free(v7);
        }
      }
      *(void *)(v3 + 32) = v4;
    }
    else
    {
      std::vector<md::LabelAnimation,geo::StdAllocator<md::LabelAnimation,mdm::Allocator>>::__append((uint64_t *)(result + 24));
      uint64_t v4 = *(void *)(v3 + 32);
    }
    *(unsigned char *)(a2[1] + 564) = 57 * ((v4 - *v5) >> 4) - 1;
    operator new();
  }
  if (a2[2])
  {
    uint64_t v9 = *(void *)(result + 24);
    uint64_t v11 = *(void *)(result + 32);
    uint64_t v10 = (void *)(result + 24);
    if (v11 - v9 == -144)
    {
      while (v11 != v9)
      {
        uint64_t v13 = *(void **)(v11 - 144);
        v11 -= 144;
        uint64_t v12 = v13;
        if (v13 != *(void **)(v11 + 16)) {
          free(v12);
        }
      }
      *(void *)(v3 + 32) = v9;
    }
    else
    {
      std::vector<md::LabelAnimation,geo::StdAllocator<md::LabelAnimation,mdm::Allocator>>::__append((uint64_t *)(result + 24));
      uint64_t v9 = *(void *)(v3 + 32);
    }
    *(unsigned char *)(a2[2] + 564) = 57 * ((v9 - *v10) >> 4) - 1;
    operator new();
  }
  if (a2[4])
  {
    uint64_t v14 = *(void *)(result + 24);
    uint64_t v16 = *(void *)(result + 32);
    int64_t v15 = (void *)(result + 24);
    if (v16 - v14 == -144)
    {
      while (v16 != v14)
      {
        unint64_t v18 = *(void **)(v16 - 144);
        v16 -= 144;
        int64_t v17 = v18;
        if (v18 != *(void **)(v16 + 16)) {
          free(v17);
        }
      }
      *(void *)(v3 + 32) = v14;
    }
    else
    {
      std::vector<md::LabelAnimation,geo::StdAllocator<md::LabelAnimation,mdm::Allocator>>::__append((uint64_t *)(result + 24));
      uint64_t v14 = *(void *)(v3 + 32);
    }
    *(unsigned char *)(a2[4] + 564) = 57 * ((v14 - *v15) >> 4) - 1;
    operator new();
  }
  return result;
}

uint64_t md::LabelAnimator::createClusterFadeAnimation(uint64_t result, uint64_t a2)
{
  if (*(void *)(a2 + 16) && *(void *)(a2 + 32))
  {
    uint64_t v3 = result;
    uint64_t v5 = *(void *)(result + 24);
    uint64_t v6 = *(void *)(result + 32);
    uint64_t v4 = (void *)(result + 24);
    if (v6 - v5 == -144)
    {
      while (v6 != v5)
      {
        BOOL v8 = *(void **)(v6 - 144);
        v6 -= 144;
        uint64_t v7 = v8;
        if (v8 != *(void **)(v6 + 16)) {
          free(v7);
        }
      }
      *(void *)(v3 + 32) = v5;
    }
    else
    {
      std::vector<md::LabelAnimation,geo::StdAllocator<md::LabelAnimation,mdm::Allocator>>::__append((uint64_t *)(result + 24));
      uint64_t v5 = *(void *)(v3 + 32);
    }
    *(unsigned char *)(*(void *)(a2 + 16) + 564) = 57 * ((v5 - *v4) >> 4) - 1;
    operator new();
  }
  return result;
}

void sub_1A2682E7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2682F20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2682FC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2683154(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A26831E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A26832B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2683BA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2683E5C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1A2683F54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A26841C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  objc_destroyWeak(v10);
  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_1A2684300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2684770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A26848CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2684C4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2684E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A2684EB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2685180(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1A2685294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A26854EC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1A26855B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2685ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2685C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A268672C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2686964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1A2686CE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A26880D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void std::vector<geo::Coordinate3D<geo::Radians,double>>::push_back[abi:nn180100](uint64_t a1, uint64_t a2)
{
  unint64_t v5 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v6 = v5;
  if (v5 >= v4)
  {
    BOOL v8 = *(void **)a1;
    uint64_t v9 = v5 - *(void *)a1;
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3) + 1;
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)v8) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v13 = 24 * v12;
    uint64_t v14 = (char *)operator new(24 * v12);
    unint64_t v15 = (unint64_t)&v14[8 * (v9 >> 3)];
    *(_OWORD *)unint64_t v15 = *(_OWORD *)a2;
    *(void *)(v15 + 16) = *(void *)(a2 + 16);
    unint64_t v7 = v15 + 24;
    if ((void *)v5 != v8)
    {
      unint64_t v16 = v5 - (void)v8 - 24;
      if (v16 < 0x1C8) {
        goto LABEL_35;
      }
      unint64_t v17 = v16 / 0x18;
      BOOL v18 = (unint64_t)&v14[v9 - 8 - 24 * v17] >= v5 || v5 - 24 * v17 - 8 >= v15;
      BOOL v19 = !v18;
      if (v5 - 24 * v17 - 24 < (unint64_t)&v14[v9 - 8] && (unint64_t)&v14[v9 - 24 * v17 - 24] < v5 - 8) {
        goto LABEL_35;
      }
      if (v19) {
        goto LABEL_35;
      }
      unint64_t v21 = v17 + 1;
      unint64_t v6 = v5 - 24 * (v21 & 0x1FFFFFFFFFFFFFFELL);
      int64_t v22 = (const double *)(v5 - 48);
      unint64_t v23 = (double *)(v15 - 48);
      uint64_t v24 = v21 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        float64x2x3_t v26 = vld3q_f64(v22);
        vst3q_f64(v23, v26);
        v23 -= 6;
        v22 -= 6;
        v24 -= 2;
      }
      while (v24);
      v15 -= 24 * (v21 & 0x1FFFFFFFFFFFFFFELL);
      if (v21 != (v21 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_35:
        do
        {
          uint64_t v25 = *(void *)(v6 - 24);
          v6 -= 24;
          *(void *)(v15 - 24) = v25;
          v15 -= 24;
          *(_OWORD *)(v15 + 8) = *(_OWORD *)(v6 + 8);
        }
        while ((void *)v6 != v8);
      }
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v14[v13];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(void *)unint64_t v5 = *(void *)a2;
    *(_OWORD *)(v5 + 8) = *(_OWORD *)(a2 + 8);
    unint64_t v7 = v5 + 24;
  }
  *(void *)(a1 + 8) = v7;
}

void sub_1A2689010(_Unwind_Exception *a1)
{
  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~StringWithLocaleImp(v7 - 248);
  _Unwind_Resume(a1);
}

void *std::function<void ()(gm::Matrix<float,2,1> &)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1A2689B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A2689D84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268A010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A268A170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268A4AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268A8D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268AB20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268AC88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268ADEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268AEB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268AF68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268B02C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268B0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A268B524(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 136));
  _Unwind_Resume(a1);
}

void sub_1A268B6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1A268B814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268BC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);

  objc_destroyWeak(v16);
  objc_destroyWeak(v15);
  _Block_object_dispose(va, 8);
  objc_destroyWeak((id *)(v17 - 72));

  _Unwind_Resume(a1);
}

void sub_1A268BE14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268BFE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268D2A4(_Unwind_Exception *exception_object)
{
}

void sub_1A268D388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268D7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1A268D9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A268DE4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268DF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A268DFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A268E124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268E1D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268E27C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268E334(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268E408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268E4B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268E56C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268E638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268E6D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268E7BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268E8FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268EAC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268EB7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268EC28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268EE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1A268F014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268F704(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A268FEA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2690014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VKNavCameraController;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1A2690C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  _Unwind_Resume(a1);
}

uint64_t md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::operator=(uint64_t a1, long long *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v4 = *a2;
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(_OWORD *)a1 = v4;
  objc_storeStrong((id *)(a1 + 24), *((id *)a2 + 3));
  uint64_t v6 = *((void *)a2 + 4);
  uint64_t v5 = *((void *)a2 + 5);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  BOOL v8 = (long long *)*((void *)a2 + 9);
  if (v8)
  {
    if (v8 == a2 + 3)
    {
      unint64_t v11 = v10;
      (*(void (**)(long long *, void *))(*((void *)a2 + 6) + 24))(a2 + 3, v10);
    }
    else
    {
      unint64_t v11 = (void *)(*(uint64_t (**)(long long *))(*(void *)v8 + 16))(v8);
    }
  }
  else
  {
    unint64_t v11 = 0;
  }
  std::__function::__value_func<void ()(BOOL)>::swap[abi:nn180100](v10, (void *)(a1 + 48));
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void))(*v11 + 40))();
  }
  return a1;
}

void sub_1A2690FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A269103C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::DaVinciBaseMapEngineMode::willBecomeInactive(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int8x8_t **)(a2 + 1120);
  int8x8_t v3 = v2[2];
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = 0x91E65CD7F1A7A7FALL % *(void *)&v3;
    if (*(void *)&v3 > 0x91E65CD7F1A7A7FALL) {
      unint64_t v5 = 0x91E65CD7F1A7A7FALL;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v3 - 1) & 0x91E65CD7F1A7A7FALL;
  }
  int8x8_t v6 = v2[1];
  uint64_t v7 = *(void **)(*(void *)&v6 + 8 * v5);
  if (v7)
  {
    BOOL v8 = (void *)*v7;
    if (v8)
    {
      if (v4.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v10 = v8[1];
          if (v10 == 0x91E65CD7F1A7A7FALL)
          {
            if (v8[2] == 0x91E65CD7F1A7A7FALL) {
              goto LABEL_21;
            }
          }
          else if ((v10 & (*(void *)&v3 - 1)) != v5)
          {
            goto LABEL_23;
          }
          BOOL v8 = (void *)*v8;
          if (!v8) {
            goto LABEL_23;
          }
        }
      }
      do
      {
        unint64_t v9 = v8[1];
        if (v9 == 0x91E65CD7F1A7A7FALL)
        {
          if (v8[2] == 0x91E65CD7F1A7A7FALL)
          {
LABEL_21:
            uint64_t v11 = v8[5];
            if (v11) {
              *(unsigned char *)(v11 + 120) = 0;
            }
            break;
          }
        }
        else
        {
          if (v9 >= *(void *)&v3) {
            v9 %= *(void *)&v3;
          }
          if (v9 != v5) {
            break;
          }
        }
        BOOL v8 = (void *)*v8;
      }
      while (v8);
    }
  }
LABEL_23:
  if (v4.u32[0] >= 2uLL)
  {
    unint64_t v13 = 0xAF46DE79C836B0D8;
    if (*(void *)&v3 <= 0xAF46DE79C836B0D8) {
      unint64_t v13 = 0xAF46DE79C836B0D8 % *(void *)&v3;
    }
    uint64_t v12 = *(void **)(*(void *)&v6 + 8 * v13);
    do
    {
      do
        uint64_t v12 = (void *)*v12;
      while (v12[1] != 0xAF46DE79C836B0D8);
    }
    while (v12[2] != 0xAF46DE79C836B0D8);
  }
  else
  {
    uint64_t v12 = *(void **)(*(void *)&v6 + 8 * ((*(void *)&v3 - 1) & 0xAF46DE79C836B0D8));
    do
    {
      do
        uint64_t v12 = (void *)*v12;
      while (v12[1] != 0xAF46DE79C836B0D8);
    }
    while (v12[2] != 0xAF46DE79C836B0D8);
  }
  uint64_t v14 = *(void *)(v12[5] + 416);
  if (v14)
  {
    *(void *)(v14 + 32) = 0;
    *(void *)(v14 + 40) = 0;
  }
}

void md::DaVinciBaseMapEngineMode::~DaVinciBaseMapEngineMode(md::DaVinciBaseMapEngineMode *this)
{
  *(void *)this = &unk_1EF544D70;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF544D70;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::MapEngineMode::~MapEngineMode(this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF544D70;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::MapEngineMode::~MapEngineMode(this);
}

void md::DaVinciMapEngineMode::~DaVinciMapEngineMode(md::DaVinciMapEngineMode *this)
{
  *(void *)this = &unk_1EF544D70;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF544D70;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::MapEngineMode::~MapEngineMode(this);
}

void md::Logic<md::StandardLogic,md::StandardLogicContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  int8x8_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    unint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      unint64_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

uint64_t _ZNKSt3__110__function6__funcIZN2md13StandardLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20StandardLogicContextEE3__1NS_9allocatorISK_EEFvvEE7__cloneEPNS0_6__baseISN_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5706E0;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md13StandardLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20StandardLogicContextEE3__1NS_9allocatorISK_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF5706E0;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md13StandardLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20StandardLogicContextEE3__1NS_9allocatorISK_EEFvvEED0Ev()
{
}

uint64_t _ZNKSt3__110__function6__funcIZN2md13StandardLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20StandardLogicContextEE3__0NS_9allocatorISK_EEFvvEE7__cloneEPNS0_6__baseISN_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF570698;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md13StandardLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20StandardLogicContextEE3__0NS_9allocatorISK_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF570698;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md13StandardLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextEEEENS9_IJEEEEE20ResolvedDependenciesERNS2_20StandardLogicContextEE3__0NS_9allocatorISK_EEFvvEED0Ev()
{
}

uint64_t md::Logic<md::StandardLogic,md::StandardLogicContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::StandardLogic,md::StandardLogicContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0xFFA06A69D924B0E8 && (uint64_t v4 = *(void *)(a3 + 32)) != 0)
  {
    uint64_t v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext>,gdc::TypeList<>>::buildRequiredTuple<md::SceneContext,md::CameraContext>(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t gdc::ObjectHolder<md::StandardLogicContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::StandardLogicContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555870;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0x20C4093837F09);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::StandardLogicContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555870;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x20C4093837F09);
  }
  return a1;
}

void md::StandardLogic::~StandardLogic(md::StandardLogic *this)
{
  *(void *)this = &unk_1EF532FD0;
  uint64_t v2 = (md::TrafficSharedResources *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v2)
  {
    md::TrafficSharedResources::~TrafficSharedResources(v2);
    MEMORY[0x1A6239270]();
  }
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
  JUMPOUT(0x1A6239270);
}

{
  md::TrafficSharedResources *v2;

  *(void *)this = &unk_1EF532FD0;
  uint64_t v2 = (md::TrafficSharedResources *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v2)
  {
    md::TrafficSharedResources::~TrafficSharedResources(v2);
    MEMORY[0x1A6239270]();
  }
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

void md::TrafficSharedResources::~TrafficSharedResources(md::TrafficSharedResources *this)
{
  uint64_t v2 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  md::TrafficSharedPipelineStates::~TrafficSharedPipelineStates(this);
}

void ggl::StandardLibrary::~StandardLibrary(ggl::StandardLibrary *this)
{
  ggl::ShaderLibrary::~ShaderLibrary(this);
  JUMPOUT(0x1A6239270);
}

void ggl::StandardLibraryBundleMTLData::~StandardLibraryBundleMTLData(ggl::StandardLibraryBundleMTLData *this)
{
  ggl::MTLShaderLibraryData::~MTLShaderLibraryData(this);
  JUMPOUT(0x1A6239270);
}

void altitude::util::LoadImageJob::jobStep(pthread_mutex_t **this)
{
  pthread_mutex_lock(this[19]);
  int v2 = *((_DWORD *)this + 40);
  pthread_mutex_unlock(this[19]);
  if ((v2 & 2) == 0)
  {
    SubJob = karo::Job::getSubJob(this, 0);
    uint64_t v5 = *(void *)SubJob;
    uint64_t v4 = (std::__shared_weak_count *)*((void *)SubJob + 1);
    uint64_t v18 = *(void *)SubJob;
    BOOL v19 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v5
      || (pthread_mutex_lock(*(pthread_mutex_t **)(v5 + 152)),
          int v6 = *(_DWORD *)(v5 + 160),
          pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 152)),
          (v6 & 2) != 0))
    {
      LODWORD(this[22]->__sig) = 1;
      (*(void (**)(pthread_mutex_t **))&(*this)->__opaque[8])(this);
    }
    else if ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5) == 4 {
           && *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5) == 0x2000000)
    }
    {
      LODWORD(this[22]->__sig) = 2;
      (*(void (**)(pthread_mutex_t **))&(*this)->__opaque[8])(this);
    }
    else
    {
      BOOL v8 = this[24];
      if (v8)
      {
        pthread_mutex_lock(*(pthread_mutex_t **)&v8[2].__opaque[16]);
        int v9 = *(_DWORD *)&v8[2].__opaque[24];
        pthread_mutex_unlock(*(pthread_mutex_t **)&v8[2].__opaque[16]);
        if (v9)
        {
          uint64_t v10 = this[24];
          pthread_mutex_lock(*(pthread_mutex_t **)&v10[2].__opaque[16]);
          int v11 = *(_DWORD *)&v10[2].__opaque[24];
          pthread_mutex_unlock(*(pthread_mutex_t **)&v10[2].__opaque[16]);
          if ((v11 & 2) == 0)
          {
            karo::Job::setDone(this);
            goto LABEL_14;
          }
        }
      }
      else
      {
        uint64_t v12 = *(void *)(*(void *)this[1][1].__opaque + 8);
        uint64_t v13 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 48))(v5) >= 0xBuLL
          && *v13 == 255
          && v13[1] == 216
          && v13[2] == 255
          && v13[3] == 224
          && v13[6] == 74
          && v13[7] == 70
          && v13[8] == 73
          && v13[9] == 70
          && !v13[10]
          && v12)
        {
          operator new();
        }
      }
      int v17 = *(_DWORD *)&this[1]->__opaque[36];
      uint64_t v14 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
      unsigned int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
      uint64_t v16 = *(void *)this[22]->__opaque;
      char v21 = 0;
      LOBYTE(v20[0]) = 0;
      if ((karo::media::ImageLoader::loadFromChunk(&v17, v14, v15, v20, v16) & 1) == 0)
      {
        LODWORD(this[22]->__sig) = 3;
        (*(void (**)(pthread_mutex_t **))&(*this)->__opaque[8])(this);
      }
    }
    pthread_mutex_lock(this[19]);
    *((_DWORD *)this + 40) |= 1u;
    pthread_mutex_unlock(this[19]);
LABEL_14:
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    return;
  }
  pthread_mutex_lock(this[19]);
  *((_DWORD *)this + 40) |= 1u;
  uint64_t v7 = this[19];
  pthread_mutex_unlock(v7);
}

void sub_1A26921A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t karo::Job::setDone(pthread_mutex_t **this)
{
  pthread_mutex_lock(this[19]);
  *((_DWORD *)this + 40) |= 1u;
  int v2 = this[19];
  return pthread_mutex_unlock(v2);
}

uint64_t std::__shared_ptr_pointer<altitude::util::LoadImageJob::FigLoaderSubJob *,std::shared_ptr<karo::Job>::__shared_ptr_default_delete<karo::Job,altitude::util::LoadImageJob::FigLoaderSubJob>,std::allocator<altitude::util::LoadImageJob::FigLoaderSubJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<altitude::util::LoadImageJob::FigLoaderSubJob *,std::shared_ptr<karo::Job>::__shared_ptr_default_delete<karo::Job,altitude::util::LoadImageJob::FigLoaderSubJob>,std::allocator<altitude::util::LoadImageJob::FigLoaderSubJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t altitude::util::LoadImageJob::FigLoaderSubJob::jobStep(altitude::util::LoadImageJob::FigLoaderSubJob *this)
{
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  int v2 = *((_DWORD *)this + 40);
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  if ((v2 & 2) == 0)
  {
    int v8 = *(_DWORD *)(*((void *)this + 1) + 44);
    uint64_t v3 = (pwin_jpg *)(*(uint64_t (**)(void))(**((void **)this + 22) + 56))(*((void *)this + 22));
    unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 22) + 48))(*((void *)this + 22));
    if ((karo::media::JpegLoaderFig::loadFromChunk(&v8, v3, (unsigned __int8 *)v4, *((void *)this + 24), v5) & 1) == 0) {
      (*(void (**)(altitude::util::LoadImageJob::FigLoaderSubJob *))(*(void *)this + 16))(this);
    }
  }
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  *((_DWORD *)this + 40) |= 1u;
  uint64_t v6 = (pthread_mutex_t *)*((void *)this + 19);
  return pthread_mutex_unlock(v6);
}

void altitude::util::LoadImageJob::FigLoaderSubJob::~FigLoaderSubJob(altitude::util::LoadImageJob::FigLoaderSubJob *this)
{
  *(void *)this = &unk_1EF56B3E0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 23);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 23);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  karo::Job::~Job(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF56B3E0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 23);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 23);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  karo::Job::~Job(this);
}

void altitude::util::LoadImageJob::~LoadImageJob(altitude::util::LoadImageJob *this)
{
  *(void *)this = &unk_1EF56B418;
  int v2 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 23);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 23);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  karo::Job::~Job(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF56B418;
  int v2 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 23);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 23);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  karo::Job::~Job(this);
}

uint64_t altitude::util::ComputeAltBoundsJob::jobStep(pthread_mutex_t **this)
{
  pthread_mutex_lock(this[19]);
  int v2 = *((_DWORD *)this + 40);
  pthread_mutex_unlock(this[19]);
  if ((v2 & 2) != 0) {
    goto LABEL_14;
  }
  uint64_t v3 = (uint64_t)this[22];
  unsigned int v4 = (std::__shared_weak_count *)this[23];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v5 = 626172.136 / (double)(1 << *((unsigned char *)this + 193));
  float v6 = v5;
  if (!v3)
  {
    *((float *)this + 55) = -v6;
    *((_DWORD *)this + 56) = 0;
    if (!v4) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  uint64_t v7 = (char *)(this + 24);
  int v12 = -8388609;
  float v13 = 3.4028e38;
  int v8 = *(_DWORD *)(v3 + 132);
  if (v8 == 16)
  {
    karo::media::DigitalTerrainModel::heightBoundsT<unsigned short>(v3, (uint64_t)v7, &v13, (float *)&v12, *(float *)&v5);
  }
  else if (v8 == 8)
  {
    karo::media::DigitalTerrainModel::heightBoundsT<unsigned char>(v3, (uint64_t)v7, &v13, (float *)&v12, *(float *)&v5);
  }
  int v9 = v12;
  *((float *)this + 55) = v13 - v6;
  *((_DWORD *)this + 56) = v9;
  if (v4)
  {
LABEL_12:
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
LABEL_14:
  pthread_mutex_lock(this[19]);
  *((_DWORD *)this + 40) |= 1u;
  uint64_t v10 = this[19];
  return pthread_mutex_unlock(v10);
}

void altitude::util::ComputeAltBoundsJob::~ComputeAltBoundsJob(altitude::util::ComputeAltBoundsJob *this)
{
  *(void *)this = &unk_1EF56B4C0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  karo::Job::~Job(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF56B4C0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  karo::Job::~Job(this);
}

uint64_t altitude::util::BuildHeightMeshJob::jobStep(altitude::util::BuildHeightMeshJob *this)
{
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  int v2 = *((_DWORD *)this + 40);
  pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
  if ((v2 & 2) != 0) {
    goto LABEL_75;
  }
  uint64_t v3 = *((void *)this + 25);
  unsigned int v4 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v43 = v3;
    uint64_t v44 = v4;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v43 = *((void *)this + 25);
    uint64_t v44 = 0;
  }
  uint64_t v47 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v45 = 0u;
  int v48 = -1;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  uint64_t v52 = 0x3FF0000000000000;
  __int16 v53 = 255;
  int v55 = 0;
  int v54 = 0;
  char v56 = 0;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  double v5 = (const QuadTile *)((char *)this + 216);
  unsigned int v6 = *((_DWORD *)this + 60);
  float v7 = *((float *)this + 76);
  if (*((unsigned char *)this + 300))
  {
    altitude::HeightMeshBuilder::buildHeightMesh((uint64_t)&v43, v5, v6, 2u, v7);
    int v8 = *((char *)this + 199);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)this + 199);
    }
    else {
      size_t v9 = *((void *)this + 23);
    }
    unint64_t v10 = v9 + 8;
    if (v9 + 8 > 0x7FFFFFFFFFFFFFF7) {
      abort();
    }
    uint64_t v11 = *((void *)this + 1);
    if (v10 >= 0x17)
    {
      uint64_t v16 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v16 = v10 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (long long *)operator new(v16 + 1);
      *((void *)&__dst + 1) = v9 + 8;
      unint64_t v58 = v17 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      unint64_t v58 = 0;
      long long __dst = 0uLL;
      p_dst = &__dst;
      HIBYTE(v58) = v9 + 8;
      if (!v9) {
        goto LABEL_28;
      }
    }
    if (v8 >= 0) {
      uint64_t v18 = (char *)this + 176;
    }
    else {
      uint64_t v18 = (char *)*((void *)this + 22);
    }
    memmove(p_dst, v18, v9);
LABEL_28:
    strcpy((char *)p_dst + v9, "/Element");
    BOOL v19 = (char *)operator new(0xA8uLL);
    *((void *)v19 + 1) = 0;
    *((void *)v19 + 2) = 0;
    *(void *)BOOL v19 = &unk_1EF58AC80;
    *((void *)v19 + 3) = &unk_1EF562D20;
    uint64_t v20 = (std::string *)(v19 + 32);
    int v21 = SHIBYTE(v58);
    if (SHIBYTE(v58) < 0)
    {
      std::string::__init_copy_ctor_external(v20, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
    }
    else
    {
      *(_OWORD *)&v20->__r_.__value_.__l.__data_ = __dst;
      *((void *)v19 + 6) = v58;
    }
    *((void *)v19 + 3) = &unk_1EF5690C0;
    *((void *)v19 + 7) = 0;
    v19[64] = 1;
    *(_OWORD *)(v19 + 72) = 0u;
    *(_OWORD *)(v19 + 88) = 0u;
    *(_OWORD *)(v19 + 104) = 0u;
    *(_OWORD *)(v19 + 120) = 0u;
    *((void *)v19 + 17) = 0;
    v19[144] = 1;
    *((void *)v19 + 19) = 0;
    *((void *)v19 + 20) = 0;
    if (v21 < 0) {
      operator delete((void *)__dst);
    }
    int64_t v22 = *(void **)(*(void *)(*(void *)(v11 + 8) + 40) + 8);
    uint64_t v23 = v22[13];
    uint64_t v24 = (std::__shared_weak_count *)v22[14];
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = (std::__shared_weak_count *)operator new(0xE8uLL);
    v25->__shared_owners_ = 0;
    v25->__shared_weak_owners_ = 0;
    v25->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5864C0;
    float64x2x3_t v26 = v25 + 1;
    ggl::BufferData::BufferData((uint64_t)&v25[1], qword_1E9579900, 2, 1, 6, 1);
    v25[9].__shared_owners_ = (uint64_t)ggl::TileBaseSurface::Element::reflection(void)::reflection;
    v25[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55DCF8;
    uint64_t v27 = v22[21];
    long long v28 = (std::__shared_weak_count *)v22[22];
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    size_t v29 = (std::__shared_weak_count *)operator new(0x100uLL);
    v29->__shared_owners_ = 0;
    v29->__shared_weak_owners_ = 0;
    v29->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5842A0;
    uint64_t v30 = &v29[1].__vftable;
    if (v24)
    {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      ggl::PipelineSetup::PipelineSetup(v30, v23, (uint64_t)v24);
      if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    else
    {
      ggl::PipelineSetup::PipelineSetup(v30, v23, 0);
    }
    v29[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55BEE8;
    unint64_t shared_weak_owners = (void *)v29[3].__shared_weak_owners_;
    *unint64_t shared_weak_owners = v26;
    shared_weak_owners[1] = 0;
    unint64_t v32 = (void *)v29[7].__shared_weak_owners_;
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v33 = (std::__shared_weak_count *)v32[1];
    void *v32 = v26;
    v32[1] = v25;
    if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    uint64_t v34 = v29[3].__shared_weak_owners_;
    *(void *)(v34 + 16) = v27;
    *(void *)(v34 + 24) = 0;
    uint64_t v35 = v29[7].__shared_weak_owners_;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v36 = *(std::__shared_weak_count **)(v35 + 24);
    *(void *)(v35 + 16) = v27;
    *(void *)(v35 + 24) = v28;
    if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
    if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
    uint64_t v37 = *(char ****)(v45 + 216);
    if (v37 == &ggl::CommonMesh::bufferPos4UVReflection) {
      operator new();
    }
    if (v37 == &ggl::TileBaseSurface::p3T2T2BufferReflection) {
      operator new();
    }
    if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
    *(void *)&long long v38 = v19 + 24;
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      *(void *)&long long v38 = v19 + 24;
    }
    *((void *)&v38 + 1) = v19;
    long long v42 = v38;
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    (*(void (**)(char *, void))(*((void *)v19 + 3) + 16))(v19 + 24, 0);
    unsigned int v15 = (std::__shared_weak_count *)*((void *)this + 40);
    *(_OWORD *)((char *)this + 312) = v42;
    if (!v15) {
      goto LABEL_67;
    }
    goto LABEL_65;
  }
  altitude::HeightMeshBuilder::buildHeightMesh((uint64_t)&v43, v5, v6, 0, v7);
  altitude::HeightMeshBuilder::createGlobeElement(&__dst, (uint64_t)&v43, (const void **)this + 22, *((void *)this + 1), (uint64_t **)this + 31, (uint64_t **)this + 34);
  long long v13 = __dst;
  long long __dst = 0uLL;
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 40);
  *(_OWORD *)((char *)this + 312) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  unsigned int v15 = (std::__shared_weak_count *)*((void *)&__dst + 1);
  if (!*((void *)&__dst + 1)) {
    goto LABEL_67;
  }
LABEL_65:
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_67:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v39 = (std::__shared_weak_count *)*((void *)&v45 + 1);
  if (*((void *)&v45 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v45 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  uint64_t v40 = v44;
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
LABEL_75:
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  *((_DWORD *)this + 40) |= 1u;
  return pthread_mutex_unlock(*((pthread_mutex_t **)this + 19));
}

void altitude::util::BuildHeightMeshJob::~BuildHeightMeshJob(altitude::util::BuildHeightMeshJob *this)
{
  altitude::util::BuildHeightMeshJob::~BuildHeightMeshJob(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t vars8;

  *(void *)this = &unk_1EF56B488;
  int v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (char *)*((void *)this + 34);
    if (!v3) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v3 = (char *)*((void *)this + 34);
    if (!v3) {
      goto LABEL_12;
    }
  }
  unsigned int v4 = (char *)*((void *)this + 35);
  double v5 = v3;
  if (v4 != v3)
  {
    do
    {
      unsigned int v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      v4 -= 16;
    }
    while (v4 != v3);
    double v5 = (char *)*((void *)this + 34);
  }
  *((void *)this + 35) = v3;
  operator delete(v5);
LABEL_12:
  float v7 = *((void *)this + 31);
  if (v7)
  {
    int v8 = *((void *)this + 32);
    size_t v9 = (void *)*((void *)this + 31);
    if (v8 != v7)
    {
      do
      {
        unint64_t v10 = *(std::__shared_weak_count **)(v8 - 8);
        if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        v8 -= 16;
      }
      while (v8 != v7);
      size_t v9 = (void *)*((void *)this + 31);
    }
    *((void *)this + 32) = v7;
    operator delete(v9);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 26);
  if (!v11 || atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*((char *)this + 199) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (*((char *)this + 199) < 0) {
LABEL_24:
  }
    operator delete(*((void **)this + 22));
LABEL_25:
  karo::Job::~Job(this);
}

void altitude::util::GenericJob::jobStep(altitude::util::GenericJob *this)
{
  uint64_t v2 = *((void *)this + 25);
  if (v2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 48))(v2))
    {
      pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
      *((_DWORD *)this + 40) |= 1u;
      uint64_t v3 = (pthread_mutex_t *)*((void *)this + 19);
      pthread_mutex_unlock(v3);
    }
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    altitude::util::GenericJob::~GenericJob(v4);
  }
}

void altitude::util::GenericJob::~GenericJob(altitude::util::GenericJob *this)
{
  *(void *)this = &unk_1EF56B3A8;
  uint64_t v2 = (char *)this + 176;
  uint64_t v3 = (char *)*((void *)this + 25);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  karo::Job::~Job(this);
  JUMPOUT(0x1A6239270);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF56B3A8;
  uint64_t v2 = (char *)this + 176;
  uint64_t v3 = (char *)*((void *)this + 25);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  karo::Job::~Job(this);
}

uint64_t altitude::util::MipmapAndCompressImageJob::jobStep(altitude::util::MipmapAndCompressImageJob *this)
{
  karo::media::Image::mipmapAndCompress(*((void *)this + 22), *((_DWORD *)this + 48));
  pthread_mutex_lock(*((pthread_mutex_t **)this + 19));
  *((_DWORD *)this + 40) |= 1u;
  uint64_t v2 = (pthread_mutex_t *)*((void *)this + 19);
  return pthread_mutex_unlock(v2);
}

void altitude::util::MipmapAndCompressImageJob::~MipmapAndCompressImageJob(altitude::util::MipmapAndCompressImageJob *this)
{
  *(void *)this = &unk_1EF56B4F8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  karo::Job::~Job(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF56B4F8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  karo::Job::~Job(this);
}

uint64_t altitude::util::MergeImagesJob::jobStep(altitude::util::MergeImagesJob *this)
{
  uint64_t v1 = this;
  karo::media::Image::setFormat(*((void *)this + 25), *(_DWORD *)(*(void *)(**((void **)this + 22) + 8) + 16));
  uint64_t v2 = *(void *)(**((void **)v1 + 22) + 8);
  if (*(_DWORD *)(v2 + 16) != 29)
  {
    uint64_t v3 = *(int **)(v2 + 8);
    int v4 = *v3;
    uint64_t v5 = v3[1];
    uint64_t v6 = v3[2];
    if (v6 >= 0x3B) {
      int v7 = 1;
    }
    else {
      int v7 = dword_1A29C6104[v6];
    }
    int v8 = 2 * v4;
    size_t v9 = *(_DWORD **)(*((void *)v1 + 25) + 8);
    *size_t v9 = 2 * v4;
    v9[1] = 2 * v5;
    unint64_t v10 = (uint64_t *)*((void *)v3 + 2);
    uint64_t v11 = *v10;
    int v12 = (std::__shared_weak_count *)v10[1];
    int v41 = v4;
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v13 = *(void *)(v11 + 8);
      if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    else
    {
      uint64_t v13 = *(void *)(v11 + 8);
    }
    uint64_t v14 = *(uint64_t **)(*(void *)(*(void *)(*(void *)(*((void *)v1 + 22) + 32) + 8) + 8) + 16);
    uint64_t v15 = *v14;
    uint64_t v16 = (std::__shared_weak_count *)v14[1];
    if (v16)
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v17 = *(void *)(v15 + 8);
      if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    else
    {
      uint64_t v17 = *(void *)(v15 + 8);
    }
    int v18 = v7 * v8;
    BOOL v19 = *(uint64_t **)(*(void *)(*(void *)(*(void *)(*((void *)v1 + 22) + 16) + 8) + 8) + 16);
    uint64_t v20 = *v19;
    int v21 = (std::__shared_weak_count *)v19[1];
    if (v21)
    {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v22 = *(void *)(v20 + 8);
      if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    else
    {
      uint64_t v22 = *(void *)(v20 + 8);
    }
    uint64_t v23 = *(uint64_t **)(*(void *)(*(void *)(*(void *)(*((void *)v1 + 22) + 48) + 8) + 8) + 16);
    uint64_t v24 = *v23;
    uint64_t v25 = (std::__shared_weak_count *)v23[1];
    int v40 = v7;
    uint64_t v45 = v17;
    if (v25)
    {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v26 = *(void *)(v24 + 8);
      if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    else
    {
      uint64_t v26 = *(void *)(v24 + 8);
    }
    uint64_t v27 = (std::__shared_weak_count *)operator new(0x30uLL);
    v27->__shared_owners_ = 0;
    v27->__shared_weak_owners_ = 0;
    v27->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588E18;
    long long v28 = ggl::Data::Data((ggl::Data *)&v27[1], (v18 * 2 * v5));
    uint64_t shared_owners = v27[1].__shared_owners_;
    p_uint64_t shared_owners = &v27->__shared_owners_;
    uint64_t v43 = v1;
    uint64_t v30 = *(ggl::Data ***)(*(void *)(*((void *)v1 + 25) + 8) + 16);
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    size_t v31 = (std::__shared_weak_count *)v30[1];
    *uint64_t v30 = v28;
    v30[1] = (ggl::Data *)v27;
    uint64_t v39 = v27;
    if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
    uint64_t v44 = v26;
    if (v5)
    {
      unsigned int v32 = 0;
      unsigned int v33 = 0;
      size_t v34 = (v40 * v41);
      int v35 = v34 * ((2 * v5) | 1);
      int v36 = 2 * v34 * v5;
      do
      {
        memcpy((void *)(shared_owners + v33), (const void *)(v13 + v32), v34);
        memcpy((void *)(shared_owners + v34 + v33), (const void *)(v45 + v32), v34);
        memcpy((void *)(shared_owners + v36 + v33), (const void *)(v22 + v32), v34);
        memcpy((void *)(shared_owners + v35 + v33), (const void *)(v44 + v32), v34);
        v33 += v18;
        v32 += v34;
        --v5;
      }
      while (v5);
    }
    uint64_t v1 = v43;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  pthread_mutex_lock(*((pthread_mutex_t **)v1 + 19));
  *((_DWORD *)v1 + 40) |= 1u;
  uint64_t v37 = (pthread_mutex_t *)*((void *)v1 + 19);
  return pthread_mutex_unlock(v37);
}

void altitude::util::MergeImagesJob::~MergeImagesJob(altitude::util::MergeImagesJob *this)
{
  altitude::util::MergeImagesJob::~MergeImagesJob(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  uint64_t vars8;

  *(void *)this = &unk_1EF56B450;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (char *)*((void *)this + 22);
    if (!v3) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v3 = (char *)*((void *)this + 22);
    if (!v3) {
      goto LABEL_12;
    }
  }
  int v4 = (char *)*((void *)this + 23);
  uint64_t v5 = v3;
  if (v4 != v3)
  {
    do
    {
      uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      v4 -= 16;
    }
    while (v4 != v3);
    uint64_t v5 = (char *)*((void *)this + 22);
  }
  *((void *)this + 23) = v3;
  operator delete(v5);
LABEL_12:
  karo::Job::~Job(this);
}

void std::vector<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference,std::allocator<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference>>::__init_with_size[abi:nn180100]<karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference*,karo::SharedItemManager<altitude::Map,altitude::MapRequestId>::Reference*>(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 60) {
      abort();
    }
    uint64_t v7 = 2 * a4;
    int v8 = operator new(16 * a4);
    *a1 = v8;
    a1[1] = v8;
    for (a1[2] = &v8[v7]; a2 != a3; a2 += 2)
    {
      *int v8 = 0;
      v8[1] = 0;
      uint64_t v9 = *a2;
      uint64_t v10 = a2[1];
      if (v10)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
        uint64_t v11 = (std::__shared_weak_count *)v8[1];
        *int v8 = v9;
        v8[1] = v10;
        if (v11)
        {
          if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
      }
      else
      {
        *int v8 = v9;
        v8[1] = 0;
      }
      v8 += 2;
    }
    a1[1] = v8;
  }
}

void ggl::ConstantDataTyped<ggl::Label::DeviceBufferTextureSize>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::Label::DeviceBufferTextureSize>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::DeviceBufferTextureSize>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::DeviceBufferTextureSize>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586FE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::DeviceBufferTextureSize>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586FE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t ggl::FragmentedPool<ggl::SDFGlyph::DefaultPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  int v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::SDFGlyph::HaloPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  int v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::SDFGlyph::SuperSamplePipelineSetup>::~FragmentedPool(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  int v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::Glyph3d::DefaultPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  int v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::Glyph3d::LowPrecisionPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  int v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::Glyph3d::LowPrecisionHaloPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  int v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::Glyph3d::RaymarchPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  int v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::GlyphWithNormalHalo::DefaultPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  int v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::ColorGlyphWithNormalHalo::DefaultPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  int v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::Icon::IconPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  int v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::Icon::ShadowPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  int v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::Icon::MaskedIconPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  int v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

uint64_t ggl::FragmentedPool<ggl::Icon::WaypointPipelineSetup>::~FragmentedPool(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  int v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6 == a1 + 96)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 96) + 32))(a1 + 96);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7 == a1 + 64)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 32))(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
LABEL_19:
      *(void *)(a1 + 40) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), v8, *(void *)(a1 + 48) - v8);
    }
  }
  else
  {
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      goto LABEL_19;
    }
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    (*(void (**)(void, void *, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v9, *(void *)(a1 + 16) - (void)v9);
  }
  return a1;
}

void *std::function<void ()(ggl::SDFGlyph::DefaultPipelineSetup *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::SDFGlyph::DefaultPipelineSetup * ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::SDFGlyph::HaloPipelineSetup *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::SDFGlyph::HaloPipelineSetup * ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::SDFGlyph::SuperSamplePipelineSetup *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::SDFGlyph::SuperSamplePipelineSetup * ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::Glyph3d::DefaultPipelineSetup *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::Glyph3d::DefaultPipelineSetup * ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::Glyph3d::LowPrecisionPipelineSetup *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::Glyph3d::LowPrecisionPipelineSetup * ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::Glyph3d::LowPrecisionHaloPipelineSetup *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::Glyph3d::LowPrecisionHaloPipelineSetup * ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::Glyph3d::RaymarchPipelineSetup *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::Glyph3d::RaymarchPipelineSetup * ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::GlyphWithNormalHalo::DefaultPipelineSetup *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::GlyphWithNormalHalo::DefaultPipelineSetup * ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::ColorGlyphWithNormalHalo::DefaultPipelineSetup *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::ColorGlyphWithNormalHalo::DefaultPipelineSetup * ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::Icon::IconPipelineSetup *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::Icon::IconPipelineSetup * ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::Icon::ShadowPipelineSetup *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::Icon::ShadowPipelineSetup * ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::Icon::MaskedIconPipelineSetup *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::Icon::MaskedIconPipelineSetup * ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(ggl::Icon::WaypointPipelineSetup *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<ggl::Icon::WaypointPipelineSetup * ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t **std::unique_ptr<md::LabelRenderer::LabelMeshRenderStateSet>::~unique_ptr[abi:nn180100](uint64_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = v2[3];
    v2[3] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = v2[2];
    v2[2] = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = v2[1];
    v2[1] = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = *v2;
    uint64_t *v2 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    MEMORY[0x1A6239270](v2, 0x20C40DC1BFBCFLL);
  }
  return a1;
}

uint64_t *std::vector<ggl::Texture2DLoadItem,geo::StdAllocator<ggl::Texture2DLoadItem,mdm::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = (void *)*a1;
  if (!*a1) {
    return a1;
  }
  uint64_t v3 = (void *)a1[1];
  uint64_t v4 = (void *)*a1;
  if (v3 == v2) {
    goto LABEL_15;
  }
  uint64_t v5 = v3 - 4;
  uint64_t v6 = v3 - 4;
  do
  {
    uint64_t v8 = (void *)v6[3];
    if (v6 == v8)
    {
      (*(void (**)(void *, void *))(*v6 + 32))(v6, v4);
      if (*((unsigned char *)v6 - 28)) {
        goto LABEL_9;
      }
    }
    else
    {
      if (v8) {
        (*(void (**)(void *, void *))(*v8 + 40))(v8, v4);
      }
      if (*((unsigned char *)v6 - 28)) {
LABEL_9:
      }
        *((unsigned char *)v6 - 28) = 0;
    }
    if (*((unsigned char *)v6 - 32)) {
      *((unsigned char *)v6 - 32) = 0;
    }
    uint64_t v7 = v6 - 6;
    v6 -= 10;
    v5 -= 10;
  }
  while (v7 != v2);
  uint64_t v4 = (void *)*a1;
LABEL_15:
  a1[1] = (uint64_t)v2;
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a1[3] + 40))(a1[3], v4, a1[2] - (void)v4);
  return a1;
}

void md::LabelRenderDeviceBuffer::~LabelRenderDeviceBuffer(md::LabelRenderDeviceBuffer *this)
{
  uint64_t v2 = *((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 16) + 40))(*((void *)this + 16), v2, *((void *)this + 15) - v2);
  }
  uint64_t v3 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 2);
    if (!v7) {
      return;
    }
  }
  else
  {
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 2);
    if (!v7) {
      return;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::Icon::WaypointPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::Icon::WaypointPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::Icon::MaskedIconPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::Icon::MaskedIconPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::Icon::ShadowPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::Icon::ShadowPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::Icon::IconPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::Icon::IconPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::ColorGlyphWithNormalHalo::DefaultPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::ColorGlyphWithNormalHalo::DefaultPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::GlyphWithNormalHalo::DefaultPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::GlyphWithNormalHalo::DefaultPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::SDFGlyph::SuperSamplePipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::SDFGlyph::SuperSamplePipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::SDFGlyph::HaloPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::SDFGlyph::HaloPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::SDFGlyph::DefaultPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::SDFGlyph::DefaultPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::Glyph3d::RaymarchPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::Glyph3d::RaymarchPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::Glyph3d::LowPrecisionHaloPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::Glyph3d::LowPrecisionHaloPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::Glyph3d::LowPrecisionPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::Glyph3d::LowPrecisionPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

uint64_t *std::unique_ptr<ggl::FragmentedPool<ggl::Glyph3d::DefaultPipelineSetup>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = ggl::FragmentedPool<ggl::Glyph3d::DefaultPipelineSetup>::~FragmentedPool(v2);
    MEMORY[0x1A6239270](v3, 0x10A0C40D234DDC7);
  }
  return a1;
}

void md::LabelRenderModel::~LabelRenderModel(md::LabelRenderModel *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 8) + 40))(*((void *)this + 8), v2, *((void *)this + 7) - v2);
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 4) + 40))(*((void *)this + 4), v3, *((void *)this + 3) - v3);
  }
  uint64_t v4 = *(gdc::Registry **)this;
  *(void *)this = 0;
  if (v4)
  {
    gdc::Registry::~Registry(v4);
    MEMORY[0x1A6239270]();
  }
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Icon21WaypointPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57BFB8;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Icon21WaypointPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_14,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_14>,ggl::Icon::WaypointPipelineSetup * ()(void)>::operator()()
{
}

void *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_14,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_14>,ggl::Icon::WaypointPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF51DC30;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_14,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_14>,ggl::Icon::WaypointPipelineSetup * ()(void)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<ggl::Icon::WaypointPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::Icon::WaypointPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588EC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::Icon::WaypointPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588EC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Icon::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Icon::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584E00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Icon::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584E00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Icon23MaskedIconPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57C000;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Icon23MaskedIconPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_13,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_13>,ggl::Icon::MaskedIconPipelineSetup * ()(void)>::operator()()
{
}

void *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_13,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_13>,ggl::Icon::MaskedIconPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF51DBE8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_13,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_13>,ggl::Icon::MaskedIconPipelineSetup * ()(void)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<ggl::Icon::MaskedIconPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::Icon::MaskedIconPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588EF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::Icon::MaskedIconPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588EF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Icon19ShadowPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF521620;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Icon19ShadowPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_12,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_12>,ggl::Icon::ShadowPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF51DBA0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_12,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_12>,ggl::Icon::ShadowPipelineSetup * ()(void)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<ggl::Icon::ShadowPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::Icon::ShadowPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF52E450;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::Icon::ShadowPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF52E450;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Icon17IconPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57BF70;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_4Icon17IconPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_11,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_11>,ggl::Icon::IconPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF56FB10;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_11,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_11>,ggl::Icon::IconPipelineSetup * ()(void)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<ggl::Icon::IconPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::Icon::IconPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588E88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::Icon::IconPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588E88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Glyph::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Glyph::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584F50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Glyph::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584F50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_24ColorGlyphWithNormalHalo20DefaultPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57BC10;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_24ColorGlyphWithNormalHalo20DefaultPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_10,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_10>,ggl::ColorGlyphWithNormalHalo::DefaultPipelineSetup * ()(void)>::operator()()
{
}

void *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_10,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_10>,ggl::ColorGlyphWithNormalHalo::DefaultPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF56FAC8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_10,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_10>,ggl::ColorGlyphWithNormalHalo::DefaultPipelineSetup * ()(void)>::~__func()
{
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_9,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_9>,ggl::GlyphWithNormalHalo::DefaultPipelineSetup * ()(void)>::operator()()
{
}

void sub_1A2698D18(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0xE1C40C3CBA79CLL);
  _Unwind_Resume(a1);
}

void *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_9,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_9>,ggl::GlyphWithNormalHalo::DefaultPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF56FA80;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_9,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_9>,ggl::GlyphWithNormalHalo::DefaultPipelineSetup * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_19GlyphWithNormalHalo20DefaultPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57B868;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_19GlyphWithNormalHalo20DefaultPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_8,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_8>,ggl::GlyphWithNormalHalo::DefaultPipelineSetup * ()(void)>::operator()()
{
}

void *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_8,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_8>,ggl::GlyphWithNormalHalo::DefaultPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF56FA38;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_8,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_8>,ggl::GlyphWithNormalHalo::DefaultPipelineSetup * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7Glyph3d21RaymarchPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57C510;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7Glyph3d21RaymarchPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_7,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_7>,ggl::Glyph3d::RaymarchPipelineSetup * ()(void)>::operator()()
{
}

void *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_7,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_7>,ggl::Glyph3d::RaymarchPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF56F9F0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_7,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_7>,ggl::Glyph3d::RaymarchPipelineSetup * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7Glyph3d29LowPrecisionHaloPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57C5A0;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7Glyph3d29LowPrecisionHaloPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_6,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_6>,ggl::Glyph3d::LowPrecisionHaloPipelineSetup * ()(void)>::operator()()
{
}

void *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_6,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_6>,ggl::Glyph3d::LowPrecisionHaloPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF56F9A8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_6,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_6>,ggl::Glyph3d::LowPrecisionHaloPipelineSetup * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7Glyph3d25LowPrecisionPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57C558;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7Glyph3d25LowPrecisionPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_5,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_5>,ggl::Glyph3d::LowPrecisionPipelineSetup * ()(void)>::operator()()
{
}

void *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_5,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_5>,ggl::Glyph3d::LowPrecisionPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF56F960;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_5,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_5>,ggl::Glyph3d::LowPrecisionPipelineSetup * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7Glyph3d20DefaultPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57C4C8;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_7Glyph3d20DefaultPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_4,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_4>,ggl::Glyph3d::DefaultPipelineSetup * ()(void)>::operator()()
{
}

void *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_4,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_4>,ggl::Glyph3d::DefaultPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF56F918;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_4,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_4>,ggl::Glyph3d::DefaultPipelineSetup * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8SDFGlyph24SuperSamplePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57C678;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8SDFGlyph24SuperSamplePipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_3,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_3>,ggl::SDFGlyph::SuperSamplePipelineSetup * ()(void)>::operator()()
{
}

void *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_3,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_3>,ggl::SDFGlyph::SuperSamplePipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF56F8D0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_3,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_3>,ggl::SDFGlyph::SuperSamplePipelineSetup * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8SDFGlyph17HaloPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57C5E8;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8SDFGlyph17HaloPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_2,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_2>,ggl::SDFGlyph::HaloPipelineSetup * ()(void)>::operator()()
{
}

void *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_2,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_2>,ggl::SDFGlyph::HaloPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF56F888;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_2,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_2>,ggl::SDFGlyph::HaloPipelineSetup * ()(void)>::~__func()
{
}

void *_ZNKSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8SDFGlyph20DefaultPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_E7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF57C630;
  return result;
}

void _ZNSt3__110__function6__funcIZN3ggl14FragmentedPoolINS2_8SDFGlyph20DefaultPipelineSetupEEC1ENS_8functionIFPS5_vEEENS7_IFvS8_EEEmmEd1_UlS8_E_NS_9allocatorISD_EESB_ED0Ev()
{
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_1,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_1>,ggl::SDFGlyph::DefaultPipelineSetup * ()(void)>::operator()()
{
}

void *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_1,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_1>,ggl::SDFGlyph::DefaultPipelineSetup * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF56F840;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_1,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_1>,ggl::SDFGlyph::DefaultPipelineSetup * ()(void)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<ggl::ColorGlyphWithNormalHalo::DefaultPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ColorGlyphWithNormalHalo::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5888A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ColorGlyphWithNormalHalo::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5888A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::GlyphWithNormalHalo::DefaultPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::GlyphWithNormalHalo::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588248;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::GlyphWithNormalHalo::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588248;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::Glyph3d::RaymarchPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::Glyph3d::RaymarchPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589940;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::Glyph3d::RaymarchPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589940;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::Glyph3d::LowPrecisionHaloPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::Glyph3d::LowPrecisionHaloPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5899B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::Glyph3d::LowPrecisionHaloPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5899B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::Glyph3d::LowPrecisionPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::Glyph3d::LowPrecisionPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589978;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::Glyph3d::LowPrecisionPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589978;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::Glyph3d::DefaultPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::Glyph3d::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589908;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::Glyph3d::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589908;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::SDFGlyph::SuperSamplePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::SDFGlyph::SuperSamplePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589AC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::SDFGlyph::SuperSamplePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589AC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::SDFGlyph::HaloPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::SDFGlyph::HaloPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589A58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::SDFGlyph::HaloPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589A58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::SDFGlyph::DefaultPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::SDFGlyph::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589A90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::SDFGlyph::DefaultPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF589A90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::Glyph::Options>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::Glyph::Options>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Glyph::Options>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Glyph::Options>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586F40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Glyph::Options>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586F40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::Label::Options>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::Label::Options>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::Options>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::Options>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587058;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::Options>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587058;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::Label::ViewCommon>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::Label::ViewCommon>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::ViewCommon>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::ViewCommon>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586F78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::ViewCommon>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586F78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::Label::ViewInScreenSpace>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::Label::ViewInScreenSpace>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::ViewInScreenSpace>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::ViewInScreenSpace>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586FB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::ViewInScreenSpace>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586FB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::Label::View>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::Label::View>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::View>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::View>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587020;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Label::View>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF587020;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_0,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_0>,ggl::RenderItem * ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF56F7F8;
  return result;
}

void std::__function::__func<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_0,std::allocator<md::LabelRenderer::LabelRenderer(md::LabelWorldTraits const&,ggl::StandardLibrary const&,ggl::RenderTargetFormat const&,gdc::ServiceLocator &)::$_0>,ggl::RenderItem * ()(void)>::~__func()
{
}

void md::LabelRenderer::~LabelRenderer(md::LabelRenderer *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 237);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 235);
    if (v3)
    {
LABEL_4:
      if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 235);
    if (v3) {
      goto LABEL_4;
    }
  }
  uint64_t v4 = (uint64_t *)*((void *)this + 230);
  *((void *)this + 230) = 0;
  if (v4)
  {
    uint64_t v5 = v4[3];
    v4[3] = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = v4[2];
    v4[2] = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = v4[1];
    v4[1] = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = *v4;
    *uint64_t v4 = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    MEMORY[0x1A6239270](v4, 0x20C40DC1BFBCFLL);
  }
  uint64_t v9 = (uint64_t *)*((void *)this + 229);
  *((void *)this + 229) = 0;
  if (v9)
  {
    uint64_t v10 = v9[3];
    void v9[3] = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t v11 = v9[2];
    v9[2] = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    uint64_t v12 = v9[1];
    v9[1] = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    uint64_t v13 = *v9;
    *uint64_t v9 = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    MEMORY[0x1A6239270](v9, 0x20C40DC1BFBCFLL);
  }
  uint64_t v14 = (uint64_t *)*((void *)this + 228);
  *((void *)this + 228) = 0;
  if (v14)
  {
    uint64_t v15 = v14[3];
    v14[3] = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    uint64_t v16 = v14[2];
    v14[2] = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    uint64_t v17 = v14[1];
    v14[1] = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
    uint64_t v18 = *v14;
    uint64_t *v14 = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
    MEMORY[0x1A6239270](v14, 0x20C40DC1BFBCFLL);
  }
  BOOL v19 = (void *)*((void *)this + 222);
  if (!v19) {
    goto LABEL_52;
  }
  uint64_t v20 = (void *)*((void *)this + 223);
  uint64_t v21 = *((void *)this + 222);
  if (v20 == v19) {
    goto LABEL_51;
  }
  uint64_t v22 = v20 - 4;
  uint64_t v23 = v20 - 4;
  do
  {
    uint64_t v25 = (void *)v23[3];
    if (v23 == v25)
    {
      (*(void (**)(void *, uint64_t))(*v23 + 32))(v23, v21);
      if (*((unsigned char *)v23 - 28)) {
        goto LABEL_45;
      }
    }
    else
    {
      if (v25) {
        (*(void (**)(void *, uint64_t))(*v25 + 40))(v25, v21);
      }
      if (*((unsigned char *)v23 - 28)) {
LABEL_45:
      }
        *((unsigned char *)v23 - 28) = 0;
    }
    if (*((unsigned char *)v23 - 32)) {
      *((unsigned char *)v23 - 32) = 0;
    }
    uint64_t v24 = v23 - 6;
    v23 -= 10;
    v22 -= 10;
  }
  while (v24 != v19);
  uint64_t v21 = *((void *)this + 222);
LABEL_51:
  *((void *)this + 223) = v19;
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 225) + 40))(*((void *)this + 225), v21, *((void *)this + 224) - v21);
LABEL_52:
  md::LabelRenderDeviceBuffer::~LabelRenderDeviceBuffer((md::LabelRenderer *)((char *)this + 1632));
  md::LabelRenderDeviceBuffer::~LabelRenderDeviceBuffer((md::LabelRenderer *)((char *)this + 1488));
  uint64_t v26 = (std::__shared_weak_count *)*((void *)this + 185);
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    uint64_t v27 = (std::__shared_weak_count *)*((void *)this + 183);
    if (v27) {
      goto LABEL_55;
    }
  }
  else
  {
    uint64_t v27 = (std::__shared_weak_count *)*((void *)this + 183);
    if (v27)
    {
LABEL_55:
      if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  long long v28 = (std::__shared_weak_count *)*((void *)this + 181);
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    size_t v29 = (std::__shared_weak_count *)*((void *)this + 179);
    if (v29) {
      goto LABEL_61;
    }
  }
  else
  {
    size_t v29 = (std::__shared_weak_count *)*((void *)this + 179);
    if (v29)
    {
LABEL_61:
      if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  uint64_t v30 = (std::__shared_weak_count *)*((void *)this + 177);
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    size_t v31 = (std::__shared_weak_count *)*((void *)this + 175);
    if (v31) {
      goto LABEL_67;
    }
  }
  else
  {
    size_t v31 = (std::__shared_weak_count *)*((void *)this + 175);
    if (v31)
    {
LABEL_67:
      if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
  unsigned int v32 = (std::__shared_weak_count *)*((void *)this + 173);
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  ggl::Mesh::~Mesh((md::LabelRenderer *)((char *)this + 1232));
  unsigned int v33 = (std::__shared_weak_count *)*((void *)this + 153);
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
    size_t v34 = (std::__shared_weak_count *)*((void *)this + 151);
    if (v34) {
      goto LABEL_76;
    }
  }
  else
  {
    size_t v34 = (std::__shared_weak_count *)*((void *)this + 151);
    if (v34)
    {
LABEL_76:
      if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
  int v35 = (std::__shared_weak_count *)*((void *)this + 149);
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
    int v36 = (std::__shared_weak_count *)*((void *)this + 147);
    if (v36) {
      goto LABEL_82;
    }
  }
  else
  {
    int v36 = (std::__shared_weak_count *)*((void *)this + 147);
    if (v36)
    {
LABEL_82:
      if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
  ggl::Mesh::~Mesh((md::LabelRenderer *)((char *)this + 1024));
  uint64_t v37 = (std::__shared_weak_count *)*((void *)this + 127);
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    long long v38 = (std::__shared_weak_count *)*((void *)this + 125);
    if (v38) {
      goto LABEL_88;
    }
  }
  else
  {
    long long v38 = (std::__shared_weak_count *)*((void *)this + 125);
    if (v38)
    {
LABEL_88:
      if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
  uint64_t v39 = (std::__shared_weak_count *)*((void *)this + 123);
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
    int v40 = (std::__shared_weak_count *)*((void *)this + 121);
    if (v40) {
      goto LABEL_94;
    }
  }
  else
  {
    int v40 = (std::__shared_weak_count *)*((void *)this + 121);
    if (v40)
    {
LABEL_94:
      if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  int v41 = (std::__shared_weak_count *)*((void *)this + 119);
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
    long long v42 = (std::__shared_weak_count *)*((void *)this + 117);
    if (v42) {
      goto LABEL_100;
    }
  }
  else
  {
    long long v42 = (std::__shared_weak_count *)*((void *)this + 117);
    if (v42)
    {
LABEL_100:
      if (!atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
  }
  uint64_t v43 = (std::__shared_weak_count *)*((void *)this + 115);
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
    uint64_t v44 = (std::__shared_weak_count *)*((void *)this + 113);
    if (v44) {
      goto LABEL_106;
    }
  }
  else
  {
    uint64_t v44 = (std::__shared_weak_count *)*((void *)this + 113);
    if (v44)
    {
LABEL_106:
      if (!atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
  }
  uint64_t v45 = (std::__shared_weak_count *)*((void *)this + 111);
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
    uint64_t v46 = (std::__shared_weak_count *)*((void *)this + 109);
    if (v46) {
      goto LABEL_112;
    }
  }
  else
  {
    uint64_t v46 = (std::__shared_weak_count *)*((void *)this + 109);
    if (v46)
    {
LABEL_112:
      if (!atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
  }
  uint64_t v47 = (std::__shared_weak_count *)*((void *)this + 107);
  if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
    int v48 = (std::__shared_weak_count *)*((void *)this + 105);
    if (v48) {
      goto LABEL_118;
    }
  }
  else
  {
    int v48 = (std::__shared_weak_count *)*((void *)this + 105);
    if (v48)
    {
LABEL_118:
      if (!atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((void **)this + 102));
  long long v49 = (std::__shared_weak_count *)*((void *)this + 90);
  if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((void **)this + 87));
  long long v50 = (std::__shared_weak_count *)*((void *)this + 75);
  if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
  std::__tree<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<ggl::SinglePassRouteLine::BasePipelineState>>>>::destroy(*((void **)this + 72));
  long long v51 = (std::__shared_weak_count *)*((void *)this + 60);
  if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
    uint64_t v52 = (std::__shared_weak_count *)*((void *)this + 58);
    if (v52) {
      goto LABEL_130;
    }
  }
  else
  {
    uint64_t v52 = (std::__shared_weak_count *)*((void *)this + 58);
    if (v52)
    {
LABEL_130:
      if (!atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
  }
  uint64_t v53 = *((void *)this + 56);
  *((void *)this + 56) = 0;
  if (v53)
  {
    uint64_t v54 = ggl::FragmentedPool<ggl::Icon::WaypointPipelineSetup>::~FragmentedPool(v53);
    MEMORY[0x1A6239270](v54, 0x10A0C40D234DDC7);
  }
  uint64_t v55 = *((void *)this + 55);
  *((void *)this + 55) = 0;
  if (v55)
  {
    uint64_t v56 = ggl::FragmentedPool<ggl::Icon::MaskedIconPipelineSetup>::~FragmentedPool(v55);
    MEMORY[0x1A6239270](v56, 0x10A0C40D234DDC7);
  }
  uint64_t v57 = *((void *)this + 54);
  *((void *)this + 54) = 0;
  if (v57)
  {
    uint64_t v58 = ggl::FragmentedPool<ggl::Icon::ShadowPipelineSetup>::~FragmentedPool(v57);
    MEMORY[0x1A6239270](v58, 0x10A0C40D234DDC7);
  }
  uint64_t v59 = *((void *)this + 53);
  *((void *)this + 53) = 0;
  if (v59)
  {
    uint64_t v60 = ggl::FragmentedPool<ggl::Icon::IconPipelineSetup>::~FragmentedPool(v59);
    MEMORY[0x1A6239270](v60, 0x10A0C40D234DDC7);
  }
  uint64_t v61 = *((void *)this + 52);
  *((void *)this + 52) = 0;
  if (v61)
  {
    uint64_t v62 = ggl::FragmentedPool<ggl::ColorGlyphWithNormalHalo::DefaultPipelineSetup>::~FragmentedPool(v61);
    MEMORY[0x1A6239270](v62, 0x10A0C40D234DDC7);
  }
  uint64_t v63 = *((void *)this + 51);
  *((void *)this + 51) = 0;
  if (v63)
  {
    uint64_t v64 = ggl::FragmentedPool<ggl::GlyphWithNormalHalo::DefaultPipelineSetup>::~FragmentedPool(v63);
    MEMORY[0x1A6239270](v64, 0x10A0C40D234DDC7);
  }
  uint64_t v65 = *((void *)this + 50);
  *((void *)this + 50) = 0;
  if (v65)
  {
    uint64_t v66 = ggl::FragmentedPool<ggl::GlyphWithNormalHalo::DefaultPipelineSetup>::~FragmentedPool(v65);
    MEMORY[0x1A6239270](v66, 0x10A0C40D234DDC7);
  }
  uint64_t v67 = *((void *)this + 49);
  *((void *)this + 49) = 0;
  if (v67)
  {
    uint64_t v68 = ggl::FragmentedPool<ggl::SDFGlyph::SuperSamplePipelineSetup>::~FragmentedPool(v67);
    MEMORY[0x1A6239270](v68, 0x10A0C40D234DDC7);
  }
  uint64_t v69 = *((void *)this + 48);
  *((void *)this + 48) = 0;
  if (v69)
  {
    uint64_t v70 = ggl::FragmentedPool<ggl::SDFGlyph::HaloPipelineSetup>::~FragmentedPool(v69);
    MEMORY[0x1A6239270](v70, 0x10A0C40D234DDC7);
  }
  uint64_t v71 = *((void *)this + 47);
  *((void *)this + 47) = 0;
  if (v71)
  {
    uint64_t v72 = ggl::FragmentedPool<ggl::SDFGlyph::DefaultPipelineSetup>::~FragmentedPool(v71);
    MEMORY[0x1A6239270](v72, 0x10A0C40D234DDC7);
  }
  uint64_t v73 = *((void *)this + 46);
  *((void *)this + 46) = 0;
  if (v73)
  {
    uint64_t v74 = ggl::FragmentedPool<ggl::Glyph3d::RaymarchPipelineSetup>::~FragmentedPool(v73);
    MEMORY[0x1A6239270](v74, 0x10A0C40D234DDC7);
  }
  uint64_t v75 = *((void *)this + 45);
  *((void *)this + 45) = 0;
  if (v75)
  {
    uint64_t v76 = ggl::FragmentedPool<ggl::Glyph3d::LowPrecisionHaloPipelineSetup>::~FragmentedPool(v75);
    MEMORY[0x1A6239270](v76, 0x10A0C40D234DDC7);
  }
  uint64_t v77 = *((void *)this + 44);
  *((void *)this + 44) = 0;
  if (v77)
  {
    uint64_t v78 = ggl::FragmentedPool<ggl::Glyph3d::LowPrecisionPipelineSetup>::~FragmentedPool(v77);
    MEMORY[0x1A6239270](v78, 0x10A0C40D234DDC7);
  }
  uint64_t v79 = *((void *)this + 43);
  *((void *)this + 43) = 0;
  if (v79)
  {
    uint64_t v80 = ggl::FragmentedPool<ggl::Glyph3d::DefaultPipelineSetup>::~FragmentedPool(v79);
    MEMORY[0x1A6239270](v80, 0x10A0C40D234DDC7);
  }
  uint64_t v81 = *((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v81)
  {
    uint64_t v82 = ggl::FragmentedPool<ggl::RenderItem>::~FragmentedPool(v81);
    MEMORY[0x1A6239270](v82, 0x10A0C40D234DDC7);
  }
  uint64_t v83 = *((void *)this + 28);
  if (v83)
  {
    *((void *)this + 29) = v83;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 31) + 40))(*((void *)this + 31), v83, *((void *)this + 30) - v83);
  }
  uint64_t v84 = *((void *)this + 24);
  if (v84)
  {
    *((void *)this + 25) = v84;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 27) + 40))(*((void *)this + 27), v84, *((void *)this + 26) - v84);
  }
  uint64_t v85 = *((void *)this + 20);
  if (v85)
  {
    *((void *)this + 21) = v85;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 23) + 40))(*((void *)this + 23), v85, *((void *)this + 22) - v85);
  }
  uint64_t v86 = *((void *)this + 16);
  if (v86)
  {
    *((void *)this + 17) = v86;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 19) + 40))(*((void *)this + 19), v86, *((void *)this + 18) - v86);
  }
  uint64_t v87 = *((void *)this + 12);
  if (v87)
  {
    *((void *)this + 13) = v87;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 15) + 40))(*((void *)this + 15), v87, *((void *)this + 14) - v87);
  }
  uint64_t v88 = *((void *)this + 8);
  if (v88)
  {
    *((void *)this + 9) = v88;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 11) + 40))(*((void *)this + 11), v88, *((void *)this + 10) - v88);
  }
  uint64_t v89 = *((void *)this + 4);
  if (v89)
  {
    *((void *)this + 5) = v89;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 7) + 40))(*((void *)this + 7), v89, *((void *)this + 6) - v89);
  }
  uint64_t v90 = (gdc::Registry *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v90)
  {
    gdc::Registry::~Registry(v90);
    MEMORY[0x1A6239270]();
  }
}

BOOL gdc::ComponentStorageWrapper<md::GlyphMeshDescriptor>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::GlyphMeshDescriptor>::remove(void *a1, unint64_t a2)
{
  v33[3] = *MEMORY[0x1E4F143B8];
  unint64_t v30 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  uint64_t v15 = (_WORD *)(v14 + 40 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v16 = a1[11];
  _WORD *v15 = *(_WORD *)(v16 - 40);
  uint64_t v17 = v15 + 4;
  uint64_t v18 = *(void *)(v16 - 8);
  if (v18)
  {
    uint64_t v19 = v16 - 32;
    if (v18 == v19)
    {
      unsigned int v32 = v31;
      (*(void (**)(uint64_t, void *))(*(void *)v19 + 24))(v19, v31);
    }
    else
    {
      unsigned int v32 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
  }
  else
  {
    unsigned int v32 = 0;
  }
  if (v17 != v31)
  {
    uint64_t v20 = v32;
    uint64_t v21 = v14 + 40 * v7;
    uint64_t v24 = *(void **)(v21 + 32);
    uint64_t v23 = (void *)(v21 + 32);
    uint64_t v22 = v24;
    if (v32 == v31)
    {
      if (v22 == v17)
      {
        (*(void (**)(void *, void *))(v31[0] + 24))(v31, v33);
        (*(void (**)(void *))(*v32 + 32))(v32);
        unsigned int v32 = 0;
        (*(void (**)(void, void *))(*(void *)*v23 + 24))(*v23, v31);
        (*(void (**)(void))(*(void *)*v23 + 32))();
        *uint64_t v23 = 0;
        unsigned int v32 = v31;
        (*(void (**)(void *, void *))(v33[0] + 24))(v33, v17);
        (*(void (**)(void *))(v33[0] + 32))(v33);
      }
      else
      {
        (*(void (**)(void *, void *))(v31[0] + 24))(v31, v17);
        (*(void (**)(void *))(*v32 + 32))(v32);
        unsigned int v32 = (void *)*v23;
      }
      *uint64_t v23 = v17;
    }
    else if (v22 == v17)
    {
      (*(void (**)(void *, void *))(*v17 + 24))(v17, v31);
      (*(void (**)(void))(*(void *)*v23 + 32))();
      *uint64_t v23 = v32;
      unsigned int v32 = v31;
    }
    else
    {
      unsigned int v32 = v22;
      *uint64_t v23 = v20;
    }
  }
  if (v32 == v31)
  {
    (*(void (**)(void *))(v31[0] + 32))(v31);
  }
  else if (v32)
  {
    (*(void (**)(void))(*v32 + 40))();
  }
  uint64_t v25 = a1[11];
  uint64_t v26 = *(void *)(v25 - 8);
  if (v26 == v25 - 32)
  {
    (*(void (**)(uint64_t))(*(void *)(v25 - 32) + 32))(v25 - 32);
  }
  else if (v26)
  {
    (*(void (**)(uint64_t))(*(void *)v26 + 40))(v26);
  }
  a1[11] = v25 - 40;
  uint64_t v27 = (void *)a1[28];
  if (v27)
  {
    uint64_t v28 = a1[31];
    do
    {
      v31[0] = &v30;
      v31[1] = 1;
      v33[0] = v28;
      uint64_t v29 = v27[6];
      if (!v29) {
        std::__throw_bad_function_call[abi:nn180100]();
      }
      (*(void (**)(uint64_t, void *, void *))(*(void *)v29 + 48))(v29, v33, v31);
      uint64_t v27 = (void *)*v27;
    }
    while (v27);
  }
  return 1;
}

uint64_t gdc::ComponentStorageWrapper<md::GlyphMeshDescriptor>::~ComponentStorageWrapper(uint64_t a1)
{
  return a1;
}

BOOL gdc::ComponentStorageWrapper<md::ShadowMeshDescriptor>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ShadowMeshDescriptor>::remove(void *a1, unint64_t a2)
{
  v33[3] = *MEMORY[0x1E4F143B8];
  unint64_t v30 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  uint64_t v15 = (unsigned char *)(v14 + 40 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v16 = a1[11];
  unsigned char *v15 = *(unsigned char *)(v16 - 40);
  uint64_t v17 = v15 + 8;
  uint64_t v18 = *(void *)(v16 - 8);
  if (v18)
  {
    uint64_t v19 = v16 - 32;
    if (v18 == v19)
    {
      unsigned int v32 = v31;
      (*(void (**)(uint64_t, void *))(*(void *)v19 + 24))(v19, v31);
    }
    else
    {
      unsigned int v32 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
  }
  else
  {
    unsigned int v32 = 0;
  }
  if (v17 != v31)
  {
    uint64_t v20 = v32;
    uint64_t v21 = v14 + 40 * v7;
    uint64_t v24 = *(void **)(v21 + 32);
    uint64_t v23 = (void *)(v21 + 32);
    uint64_t v22 = v24;
    if (v32 == v31)
    {
      if (v22 == v17)
      {
        (*(void (**)(void *, void *))(v31[0] + 24))(v31, v33);
        (*(void (**)(void *))(*v32 + 32))(v32);
        unsigned int v32 = 0;
        (*(void (**)(void, void *))(*(void *)*v23 + 24))(*v23, v31);
        (*(void (**)(void))(*(void *)*v23 + 32))();
        *uint64_t v23 = 0;
        unsigned int v32 = v31;
        (*(void (**)(void *, void *))(v33[0] + 24))(v33, v17);
        (*(void (**)(void *))(v33[0] + 32))(v33);
      }
      else
      {
        (*(void (**)(void *, void *))(v31[0] + 24))(v31, v17);
        (*(void (**)(void *))(*v32 + 32))(v32);
        unsigned int v32 = (void *)*v23;
      }
      *uint64_t v23 = v17;
    }
    else if (v22 == v17)
    {
      (*(void (**)(void *, void *))(*v17 + 24))(v17, v31);
      (*(void (**)(void))(*(void *)*v23 + 32))();
      *uint64_t v23 = v32;
      unsigned int v32 = v31;
    }
    else
    {
      unsigned int v32 = v22;
      *uint64_t v23 = v20;
    }
  }
  if (v32 == v31)
  {
    (*(void (**)(void *))(v31[0] + 32))(v31);
  }
  else if (v32)
  {
    (*(void (**)(void))(*v32 + 40))();
  }
  uint64_t v25 = a1[11];
  uint64_t v26 = *(void *)(v25 - 8);
  if (v26 == v25 - 32)
  {
    (*(void (**)(uint64_t))(*(void *)(v25 - 32) + 32))(v25 - 32);
  }
  else if (v26)
  {
    (*(void (**)(uint64_t))(*(void *)v26 + 40))(v26);
  }
  a1[11] = v25 - 40;
  uint64_t v27 = (void *)a1[28];
  if (v27)
  {
    uint64_t v28 = a1[31];
    do
    {
      v31[0] = &v30;
      v31[1] = 1;
      v33[0] = v28;
      uint64_t v29 = v27[6];
      if (!v29) {
        std::__throw_bad_function_call[abi:nn180100]();
      }
      (*(void (**)(uint64_t, void *, void *))(*(void *)v29 + 48))(v29, v33, v31);
      uint64_t v27 = (void *)*v27;
    }
    while (v27);
  }
  return 1;
}

uint64_t gdc::ComponentStorageWrapper<md::ShadowMeshDescriptor>::~ComponentStorageWrapper(uint64_t a1)
{
  return a1;
}

void *std::__function::__func<md::LabelRenderer::prepareDeviceBuffer(md::LabelRenderDeviceBuffer &,unsigned int)::$_0,std::allocator<md::LabelRenderer::prepareDeviceBuffer(md::LabelRenderDeviceBuffer &,unsigned int)::$_0>,void ()(ggl::Texture2DLoadItem const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF56F7B0;
  return result;
}

void std::__function::__func<md::LabelRenderer::prepareDeviceBuffer(md::LabelRenderDeviceBuffer &,unsigned int)::$_0,std::allocator<md::LabelRenderer::prepareDeviceBuffer(md::LabelRenderDeviceBuffer &,unsigned int)::$_0>,void ()(ggl::Texture2DLoadItem const&)>::~__func()
{
}

void md::LabelMapTile::~LabelMapTile(md::LabelMapTile *this)
{
  *(void *)this = &unk_1EF5316A8;
  uint64_t v2 = (std::mutex *)*((void *)this + 17);
  if (v2)
  {
    std::mutex::lock(*((std::mutex **)this + 17));
    uint64_t sig = v2[1].__m_.__sig;
    if (sig) {
      (*(void (**)(uint64_t, md::LabelMapTile *))(*(void *)sig + 16))(sig, this);
    }
    std::mutex::unlock(v2);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 60);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 58);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 56);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  std::__tree<std::shared_ptr<md::MuninRoadLabel>,std::less<std::shared_ptr<md::MuninRoadLabel>>,geo::StdAllocator<std::shared_ptr<md::MuninRoadLabel>,mdm::Allocator>>::destroy((uint64_t)this + 408, *((void **)this + 52));
  uint64_t v7 = *((void *)this + 47);
  if (v7)
  {
    uint64_t v8 = *((void *)this + 48);
    uint64_t v9 = *((void *)this + 47);
    if (v8 != v7)
    {
      do
      {
        unint64_t v10 = *(std::__shared_weak_count **)(v8 - 8);
        if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v10->__on_zero_shared)(v10, v9);
          std::__shared_weak_count::__release_weak(v10);
        }
        v8 -= 16;
      }
      while (v8 != v7);
      uint64_t v9 = *((void *)this + 47);
    }
    *((void *)this + 48) = v7;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 50) + 40))(*((void *)this + 50), v9, *((void *)this + 49) - v9);
  }
  uint64_t v11 = *((void *)this + 43);
  if (v11)
  {
    uint64_t v12 = *((void *)this + 44);
    uint64_t v13 = *((void *)this + 43);
    if (v12 != v11)
    {
      do
      {
        uint64_t v14 = *(std::__shared_weak_count **)(v12 - 8);
        if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v14->__on_zero_shared)(v14, v13);
          std::__shared_weak_count::__release_weak(v14);
        }
        v12 -= 16;
      }
      while (v12 != v11);
      uint64_t v13 = *((void *)this + 43);
    }
    *((void *)this + 44) = v11;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 46) + 40))(*((void *)this + 46), v13, *((void *)this + 45) - v13);
  }
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  md::LabelTileSet::~LabelTileSet((md::LabelMapTile *)((char *)this + 168));
  uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
}

void sub_1A269CA94(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  std::mutex::unlock(v4);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 472);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 456);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 440);
  std::__tree<std::shared_ptr<md::MuninRoadLabel>,std::less<std::shared_ptr<md::MuninRoadLabel>>,geo::StdAllocator<std::shared_ptr<md::MuninRoadLabel>,mdm::Allocator>>::destroy(v1 + 408, *(void **)(v1 + 416));
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100]((uint64_t *)(v1 + 376));
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100]((uint64_t *)(v1 + 344));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 328);
  md::LabelTileSet::~LabelTileSet((md::LabelTileSet *)(v1 + 168));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 152);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v2);
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 80);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  _Unwind_Resume(a1);
}

void md::LabelMapTile::broadcastLabelDeactivate(md::LabelMapTile *this)
{
  if (*((unsigned char *)this + 131))
  {
    *((unsigned char *)this + 131) = 0;
    uint64_t v2 = *((void *)this + 43);
    uint64_t v3 = *((void *)this + 44);
    if (v2 != v3)
    {
      do
      {
        uint64_t v4 = *(std::__shared_weak_count **)(v3 - 8);
        if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      *((void *)this + 44) = v2;
      *((unsigned char *)this + 128) = 1;
    }
    uint64_t v5 = *((void *)this + 47);
    uint64_t v6 = *((void *)this + 48);
    if (v5 == v6)
    {
      uint64_t v6 = *((void *)this + 47);
    }
    else
    {
      while (**(unsigned char **)v5 != 4)
      {
        v5 += 16;
        if (v5 == v6)
        {
          uint64_t v5 = *((void *)this + 48);
          goto LABEL_24;
        }
      }
      if (v5 != v6)
      {
        uint64_t v7 = (void *)(v5 + 16);
        if (v5 + 16 != v6)
        {
          do
          {
            uint64_t v8 = (unsigned char *)*v7;
            if (*(unsigned char *)*v7 != 4)
            {
              uint64_t v9 = v7[1];
              *uint64_t v7 = 0;
              v7[1] = 0;
              unint64_t v10 = *(std::__shared_weak_count **)(v5 + 8);
              *(void *)uint64_t v5 = v8;
              *(void *)(v5 + 8) = v9;
              if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
                std::__shared_weak_count::__release_weak(v10);
              }
              v5 += 16;
            }
            v7 += 2;
          }
          while (v7 != (void *)v6);
          uint64_t v6 = *((void *)this + 48);
        }
      }
    }
LABEL_24:
    std::vector<std::shared_ptr<md::Label>,geo::StdAllocator<std::shared_ptr<md::Label>,mdm::Allocator>>::erase((uint64_t)this + 376, v5, v6);
    uint64_t v11 = (std::mutex *)*((void *)this + 17);
    if (v11)
    {
      std::mutex::lock(*((std::mutex **)this + 17));
      uint64_t sig = v11[1].__m_.__sig;
      if (sig) {
        (*(void (**)(uint64_t, md::LabelMapTile *))(*(void *)sig + 8))(sig, this);
      }
      std::mutex::unlock(v11);
    }
  }
}

void sub_1A269CD18(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void md::LabelMapTile::updateLabels(md::LabelManager *,md::LabelPool &,int,BOOL)::$_0::operator()(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *a2;
  LODWORD(v29) = 1;
  uint64_t v6 = (md::LabelPoint *)(*(uint64_t (**)(uint64_t, md::Label **))(*(void *)v5 + 112))(v5, &v29);
  uint64_t v7 = (double *)md::LabelPoint::mercatorPoint(v6);
  if (*v7 >= *(double *)(v4 + 40) && *v7 <= *(double *)(v4 + 56))
  {
    double v8 = v7[1];
    if (v8 >= *(double *)(v4 + 48) && v8 <= *(double *)(v4 + 64))
    {
      uint64_t v9 = *a2;
      if (!*(void *)(*a2 + 72))
      {
        *(void *)(v9 + 72) = atomic_fetch_add((atomic_ullong *volatile)(*(void *)(**(void **)(a1 + 8) + 288) + 680), 1uLL)+ 1;
        uint64_t v9 = *a2;
      }
      md::TrafficIncidentLabelFeature::updateStyle((id *)v9, **(md::LabelManager ***)(a1 + 8));
      if (*(void *)(*(uint64_t (**)(void))(*(void *)*a2 + 552))())
      {
        unint64_t v10 = *(md::LabelPool **)(a1 + 16);
        uint64_t v11 = **(void **)(a1 + 8);
        uint64_t v12 = (std::__shared_weak_count *)a2[1];
        uint64_t v27 = *a2;
        uint64_t v28 = v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unsigned int v26 = 1;
        md::LabelPool::labelForFeature(&v29, v10, v11, &v27, &v26, 1);
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        uint64_t v13 = v29;
        if (v29)
        {
          uint64_t v14 = *(uint64_t **)(v4 + 416);
          if (v14)
          {
            while (1)
            {
              while (1)
              {
                uint64_t v16 = (uint64_t **)v14;
                unint64_t v17 = v14[4];
                if ((unint64_t)v29 >= v17) {
                  break;
                }
                uint64_t v14 = *v16;
                uint64_t v15 = v16;
                if (!*v16) {
                  goto LABEL_21;
                }
              }
              if (v17 >= (unint64_t)v29) {
                break;
              }
              uint64_t v14 = v16[1];
              if (!v14)
              {
                uint64_t v15 = v16 + 1;
                goto LABEL_21;
              }
            }
          }
          else
          {
            uint64_t v15 = (uint64_t **)(v4 + 416);
            uint64_t v16 = (uint64_t **)(v4 + 416);
LABEL_21:
            uint64_t v18 = (uint64_t *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v4 + 424) + 16))(*(void *)(v4 + 424), 48, 8);
            uint64_t v19 = v18;
            uint64_t v20 = v30;
            v18[4] = (uint64_t)v29;
            v18[5] = (uint64_t)v20;
            if (v20) {
              atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t *v18 = 0;
            v18[1] = 0;
            v18[2] = (uint64_t)v16;
            std::__shared_weak_count *v15 = v18;
            uint64_t v21 = **(void **)(v4 + 408);
            if (v21)
            {
              *(void *)(v4 + 408) = v21;
              uint64_t v19 = *v15;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v4 + 416), v19);
            ++*(void *)(v4 + 432);
            md::Label::incTileRefCount(v29);
            uint64_t v13 = v29;
          }
          uint64_t v22 = **(void **)(a1 + 8);
          uint64_t v23 = *a2;
          uint64_t v24 = (std::__shared_weak_count *)a2[1];
          uint64_t v27 = v23;
          uint64_t v28 = v24;
          if (v24) {
            atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          md::Label::update((uint64_t)v13, v22, v4);
          if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        uint64_t v25 = v30;
        if (v30)
        {
          if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
      }
      else
      {
        ++*(_DWORD *)(v4 + 92);
      }
    }
  }
}

void sub_1A269D088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1A269D0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<md::LabelMapTileCollisionInfo>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void (****)(void, uint64_t))(result + 208);
  if (v2)
  {
    uint64_t v3 = *(void (****)(void, uint64_t))(result + 216);
    uint64_t v4 = *(void *)(result + 208);
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 34;
      uint64_t v6 = v3 - 34;
      do
      {
        (**v6)(v6, v4);
        v5 -= 34;
        BOOL v7 = v6 == v2;
        v6 -= 34;
      }
      while (!v7);
      uint64_t v4 = *(void *)(v1 + 208);
    }
    *(void *)(v1 + 216) = v2;
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 232) + 40))(*(void *)(v1 + 232), v4, *(void *)(v1 + 224) - v4);
  }
  uint64_t v8 = *(void *)(v1 + 160);
  if (v8)
  {
    *(void *)(v1 + 168) = v8;
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 184) + 40))(*(void *)(v1 + 184), v8, *(void *)(v1 + 176) - v8);
  }
  uint64_t v9 = *(void *)(v1 + 128);
  if (v9)
  {
    *(void *)(v1 + 136) = v9;
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 152) + 40))(*(void *)(v1 + 152), v9, *(void *)(v1 + 144) - v9);
  }
  uint64_t v10 = *(void *)(v1 + 96);
  if (v10)
  {
    *(void *)(v1 + 104) = v10;
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 120) + 40))(*(void *)(v1 + 120), v10, *(void *)(v1 + 112) - v10);
  }
  uint64_t v11 = *(void *)(v1 + 64);
  if (v11)
  {
    *(void *)(v1 + 72) = v11;
    uint64_t v12 = *(uint64_t (**)(void))(**(void **)(v1 + 88) + 40);
    return v12();
  }
  return result;
}

void std::__shared_ptr_emplace<md::LabelMapTileCollisionInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581D00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::LabelMapTileCollisionInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581D00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::LabelMapTile::enumerateLineFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  int v21 = 117440770;
  uint64_t v4 = a1 + 168;
  do
  {
    uint64_t v5 = *(void *)(v4 + 16 * *((unsigned __int8 *)&v21 + v3));
    if (v5)
    {
      uint64_t v6 = *(void **)(v5 + 40);
      BOOL v7 = (void *)(v5 + 48);
      if (v6 != (void *)(v5 + 48))
      {
        do
        {
          uint64_t v8 = (std::__shared_weak_count *)v6[5];
          if (v8)
          {
            uint64_t v9 = std::__shared_weak_count::lock(v8);
            uint64_t v20 = v9;
            if (v9)
            {
              uint64_t v10 = v9;
              uint64_t v11 = v6[4];
              uint64_t v19 = v11;
              if (!v11) {
                goto LABEL_14;
              }
              uint64_t v17 = v11;
              uint64_t v18 = v9;
              atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v12 = *(void *)(a2 + 24);
              if (!v12)
              {
                std::__throw_bad_function_call[abi:nn180100]();
                __break(1u);
                return;
              }
              (*(void (**)(uint64_t, uint64_t *))(*(void *)v12 + 48))(v12, &v17);
              uint64_t v13 = v18;
              if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
                std::__shared_weak_count::__release_weak(v13);
                uint64_t v10 = v20;
                if (v20)
                {
LABEL_14:
                  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
                    std::__shared_weak_count::__release_weak(v10);
                  }
                }
              }
              else
              {
                uint64_t v10 = v20;
                if (v20) {
                  goto LABEL_14;
                }
              }
            }
          }
          uint64_t v14 = (void *)v6[1];
          if (v14)
          {
            do
            {
              uint64_t v15 = v14;
              uint64_t v14 = (void *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              uint64_t v15 = (void *)v6[2];
              BOOL v16 = *v15 == (void)v6;
              uint64_t v6 = v15;
            }
            while (!v16);
          }
          uint64_t v6 = v15;
        }
        while (v15 != v7);
      }
    }
    ++v3;
  }
  while (v3 != 4);
}

void sub_1A269D4C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void md::LabelMapTile::enumeratePhysicalLineFeatures(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void **)(a1 + 104);
    uint64_t v3 = (void *)(a1 + 112);
    if (v2 != (void *)(a1 + 112))
    {
      do
      {
        uint64_t v5 = (std::__shared_weak_count *)v2[5];
        if (v5)
        {
          uint64_t v6 = std::__shared_weak_count::lock(v5);
          uint64_t v17 = v6;
          if (v6)
          {
            BOOL v7 = v6;
            uint64_t v8 = v2[4];
            uint64_t v16 = v8;
            if (!v8) {
              goto LABEL_12;
            }
            uint64_t v14 = v8;
            uint64_t v15 = v6;
            atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v9 = *(void *)(a2 + 24);
            if (!v9)
            {
              std::__throw_bad_function_call[abi:nn180100]();
              __break(1u);
              return;
            }
            (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 48))(v9, &v14);
            uint64_t v10 = v15;
            if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
              BOOL v7 = v17;
              if (v17)
              {
LABEL_12:
                if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
                  std::__shared_weak_count::__release_weak(v7);
                }
              }
            }
            else
            {
              BOOL v7 = v17;
              if (v17) {
                goto LABEL_12;
              }
            }
          }
        }
        uint64_t v11 = (void *)v2[1];
        if (v11)
        {
          do
          {
            uint64_t v12 = v11;
            uint64_t v11 = (void *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            uint64_t v12 = (void *)v2[2];
            BOOL v13 = *v12 == (void)v2;
            uint64_t v2 = v12;
          }
          while (!v13);
        }
        uint64_t v2 = v12;
      }
      while (v12 != v3);
    }
  }
}

void sub_1A269D670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void std::__shared_ptr_emplace<md::LabelMapTileCommand>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580D08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::LabelMapTileCommand>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580D08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<md::LabelMapTile::loadResourcesTile(std::shared_ptr<md::ResourceInfo> const&)::$_0,std::allocator<md::LabelMapTile::loadResourcesTile(std::shared_ptr<md::ResourceInfo> const&)::$_0>,void ()(md::LabelManager *)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<md::LabelMapTile::loadResourcesTile(std::shared_ptr<md::ResourceInfo> const&)::$_0,std::allocator<md::LabelMapTile::loadResourcesTile(std::shared_ptr<md::ResourceInfo> const&)::$_0>,void ()(md::LabelManager *)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF56F3C0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<md::LabelMapTile::loadResourcesTile(std::shared_ptr<md::ResourceInfo> const&)::$_0,std::allocator<md::LabelMapTile::loadResourcesTile(std::shared_ptr<md::ResourceInfo> const&)::$_0>,void ()(md::LabelManager *)>::~__func(void *a1)
{
  *a1 = &unk_1EF56F3C0;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::LabelMapTile::loadResourcesTile(std::shared_ptr<md::ResourceInfo> const&)::$_0,std::allocator<md::LabelMapTile::loadResourcesTile(std::shared_ptr<md::ResourceInfo> const&)::$_0>,void ()(md::LabelManager *)>::~__func(void *a1)
{
  *a1 = &unk_1EF56F3C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0,std::allocator<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0>,void ()(md::LabelManager *)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0,std::allocator<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0>,void ()(md::LabelManager *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF56F330;
  return std::__compressed_pair_elem<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0,0,false>::__compressed_pair_elem[abi:nn180100]<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0,std::allocator<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0>,void ()(md::LabelManager *)>::~__func(void *a1)
{
  *a1 = &unk_1EF56F330;
  md::LabelTileSet::~LabelTileSet((md::LabelTileSet *)(a1 + 2));
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0,std::allocator<md::LabelMapTile::loadLabelTiles(md::LabelTileSet const&)::$_0>,void ()(md::LabelManager *)>::~__func(void *a1)
{
  *a1 = &unk_1EF56F330;
  md::LabelTileSet::~LabelTileSet((md::LabelTileSet *)(a1 + 2));
  return a1;
}

void std::__function::__func<md::LabelMapTile::loadTrafficTile(std::shared_ptr<md::LabelTrafficTile> const&)::$_0,std::allocator<md::LabelMapTile::loadTrafficTile(std::shared_ptr<md::LabelTrafficTile> const&)::$_0>,void ()(md::LabelManager *)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<md::LabelMapTile::loadTrafficTile(std::shared_ptr<md::LabelTrafficTile> const&)::$_0,std::allocator<md::LabelMapTile::loadTrafficTile(std::shared_ptr<md::LabelTrafficTile> const&)::$_0>,void ()(md::LabelManager *)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF56F378;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<md::LabelMapTile::loadTrafficTile(std::shared_ptr<md::LabelTrafficTile> const&)::$_0,std::allocator<md::LabelMapTile::loadTrafficTile(std::shared_ptr<md::LabelTrafficTile> const&)::$_0>,void ()(md::LabelManager *)>::~__func(void *a1)
{
  *a1 = &unk_1EF56F378;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::LabelMapTile::loadTrafficTile(std::shared_ptr<md::LabelTrafficTile> const&)::$_0,std::allocator<md::LabelMapTile::loadTrafficTile(std::shared_ptr<md::LabelTrafficTile> const&)::$_0>,void ()(md::LabelManager *)>::~__func(void *a1)
{
  *a1 = &unk_1EF56F378;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t md::LabelMapTile::setCustomFeatures(std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    uint64_t v4 = *(void *)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *(void *)(a1 + 8);
    }
    *(void *)(a1 + 16) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32), v4, *(void *)(a1 + 24) - v4);
  }
  return a1;
}

uint64_t std::__function::__func<md::LabelMapTile::setCustomFeatures(std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&)::$_0,std::allocator<std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&>,void ()(md::LabelManager *)>::destroy(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(result + 24);
    for (uint64_t i = *(void *)(result + 16); v3 != v1; v3 -= 16)
    {
      uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
      if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, i);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    *(void *)(v2 + 24) = v1;
    uint64_t v6 = *(uint64_t (**)(void))(**(void **)(v2 + 40) + 40);
    return v6();
  }
  return result;
}

void *std::__function::__func<md::LabelMapTile::setCustomFeatures(std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&)::$_0,std::allocator<std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&>,void ()(md::LabelManager *)>::__clone(void *a1, void *a2)
{
  uint64_t v4 = a1[1];
  *a2 = &unk_1EF56F408;
  a2[1] = v4;
  a2[2] = 0;
  a2[3] = 0;
  uint64_t result = (void *)a1[5];
  a2[4] = 0;
  a2[5] = result;
  uint64_t v6 = (char *)a1[2];
  BOOL v7 = (char *)a1[3];
  uint64_t v8 = v7 - v6;
  if (v7 != v6)
  {
    if (v8 < 0) {
      abort();
    }
    uint64_t v9 = v8 >> 4;
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
    a2[2] = result;
    a2[3] = result;
    a2[4] = &result[2 * v9];
    do
    {
      if (result)
      {
        uint64_t v10 = *((void *)v6 + 1);
        *uint64_t result = *(void *)v6;
        result[1] = v10;
        if (v10) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
        }
      }
      v6 += 16;
      result += 2;
    }
    while (v6 != v7);
    a2[3] = result;
  }
  return result;
}

void std::__function::__func<md::LabelMapTile::setCustomFeatures(std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&)::$_0,std::allocator<std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&>,void ()(md::LabelManager *)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EF56F408;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    uint64_t v4 = *(void *)(a1 + 16);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *(void *)(a1 + 16);
    }
    *(void *)(a1 + 24) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 40) + 40))(*(void *)(a1 + 40), v4, *(void *)(a1 + 32) - v4);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<md::LabelMapTile::setCustomFeatures(std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&)::$_0,std::allocator<std::vector<std::shared_ptr<md::LabelFeature>,geo::StdAllocator<std::shared_ptr<md::LabelFeature>,mdm::Allocator>> &&>,void ()(md::LabelManager *)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EF56F408;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    uint64_t v4 = *(void *)(a1 + 16);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *(void *)(a1 + 16);
    }
    *(void *)(a1 + 24) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 40) + 40))(*(void *)(a1 + 40), v4, *(void *)(a1 + 32) - v4);
  }
  return a1;
}

void ggl::TexturedSolidRibbon::PipelineState::~PipelineState(ggl::TexturedSolidRibbon::PipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::TexturedSolidRibbon::PipelineSetup::textureIsEnabled(ggl::TexturedSolidRibbon::PipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

BOOL ggl::TexturedSolidRibbon::PipelineSetup::constantDataIsEnabled(ggl::TexturedSolidRibbon::PipelineSetup *this, unint64_t a2)
{
  return a2 < 4;
}

void ggl::TexturedSolidRibbon::PipelineSetup::~PipelineSetup(ggl::TexturedSolidRibbon::PipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void md::Logic<md::GridLogic,md::GridContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    uint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

__n128 std::__function::__func<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_2,std::allocator<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_2>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF520CD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_2,std::allocator<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_2>,void ()(md::StyleManagerEvent)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF520CD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_2,std::allocator<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_2>,void ()(md::StyleManagerEvent)>::~__func()
{
}

uint64_t std::__function::__func<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_1,std::allocator<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF520C90;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_1,std::allocator<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF520C90;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_1,std::allocator<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_1>,void ()(void)>::~__func()
{
}

uint64_t std::__function::__func<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_0,std::allocator<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF520C48;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_0,std::allocator<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF520C48;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_0,std::allocator<md::GridLogic::runBeforeLayout(md::LayoutContext const&,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::ResolvedDependencies const&,md::GridContext &)::$_0>,void ()(void)>::~__func()
{
}

uint64_t md::Logic<md::GridLogic,md::GridContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::GridLogic,md::GridContext,md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0x336A901A15BB7353 && (uint64_t v4 = *(void *)(a3 + 32)) != 0)
  {
    uint64_t v6 = result;
    v8[0] = md::LogicDependencies<gdc::TypeList<md::StyleLogicContext>,gdc::TypeList<md::TileSelectionContext>>::resolveDependencies(**(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
    v8[1] = v7;
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, a2, v8, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t gdc::ObjectHolder<md::GridContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::GridContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555280;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0x1000C4017623181);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::GridContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555280;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x1000C4017623181);
  }
  return a1;
}

void md::GridLogic::~GridLogic(md::GridLogic *this)
{
  md::GridLogic::~GridLogic(this);
  JUMPOUT(0x1A6239270);
}

{
  char *v2;
  md::GridLogic *v3;
  md::GridLogic *v4;
  std::__shared_weak_count *v5;

  *(void *)this = &unk_1EF553FA0;
  if (!*((unsigned char *)this + 216)) {
    goto LABEL_5;
  }
  uint64_t v2 = (char *)this + 184;
  uint64_t v3 = (md::GridLogic *)*((void *)this + 26);
  if (v3 != (md::GridLogic *)((char *)this + 184))
  {
    if (v3) {
      (*(void (**)(md::GridLogic *))(*(void *)v3 + 40))(v3);
    }
LABEL_5:
    if (!*((unsigned char *)this + 176)) {
      goto LABEL_12;
    }
    goto LABEL_6;
  }
  (*(void (**)(char *))(*(void *)v2 + 32))((char *)this + 184);
  if (!*((unsigned char *)this + 176)) {
    goto LABEL_12;
  }
LABEL_6:
  uint64_t v4 = (md::GridLogic *)*((void *)this + 21);
  if (v4 == (md::GridLogic *)((char *)this + 144))
  {
    (*(void (**)(char *))(*((void *)this + 18) + 32))((char *)this + 144);
  }
  else if (v4)
  {
    (*(void (**)(md::GridLogic *))(*(void *)v4 + 40))(v4);
  }
LABEL_12:
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

uint64_t altitude::TrafficTileDataCache::getCacheKeyForKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t result = altitude::GeoResourceManager::getTileIdWithDataForTileId(*(void *)(*(void *)(a1 + 176) + 32), (long long *)(a2 + 16), 22);
  *(void *)(a3 + 16) = result;
  *(void *)(a3 + 24) = v5;
  return result;
}

void altitude::TrafficTileDataCache::fetchData(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (((*(uint64_t (**)(void *))(*v4 + 40))(v4) & 1) == 0)
  {
    *a2 = 0;
    a2[1] = 0;
    if (!v3) {
      return;
    }
    goto LABEL_9;
  }
  uint64_t v5 = v4[44];
  *a2 = v4[43];
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  if (v3)
  {
LABEL_9:
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

BOOL altitude::TrafficTileDataCache::hasValidKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_DWORD *)(a3 + 32) >= *(_DWORD *)(a1 + 200);
}

uint64_t altitude::GenericCacheNode<altitude::StampedTileKey,altitude::TrafficTileData>::clear(uint64_t a1)
{
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 136));
  if (*(void *)(a1 + 120))
  {
    uint64_t v2 = *(void **)(a1 + 112);
    if (v2)
    {
      do
      {
        uint64_t v7 = (void *)*v2;
        uint64_t v8 = (std::__shared_weak_count *)v2[8];
        if (v8) {
          std::__shared_weak_count::__release_weak(v8);
        }
        operator delete(v2);
        uint64_t v2 = v7;
      }
      while (v7);
    }
    *(void *)(a1 + 112) = 0;
    uint64_t v3 = *(void *)(a1 + 104);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*(void *)(a1 + 96) + 8 * i) = 0;
    }
    *(void *)(a1 + 120) = 0;
  }
  uint64_t v5 = *(pthread_mutex_t **)(a1 + 136);
  return pthread_mutex_unlock(v5);
}

BOOL altitude::TrafficTileDataCache::hasDataAvailable(uint64_t a1, uint64_t a2)
{
  return altitude::GeoResourceManager::getTileIdWithDataForTileId(*(void *)(*(void *)(a1 + 176) + 32), (long long *)(a2 + 16), 22) != 0;
}

void altitude::GenericCacheNode<altitude::StampedTileKey,altitude::TrafficTileData>::requestCached(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1) & 1) == 0)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[3] = 0;
    a5[4] = 0;
    a5[2] = (uint64_t)off_1EF5677B0;
    return;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 144))(__p, a1, a2);
  long long v10 = *(_OWORD *)(a2 + 16);
  v61[0] = *(_OWORD *)a2;
  v61[1] = v10;
  int v11 = *(_DWORD *)(a2 + 32);
  long long v63 = *(_OWORD *)__p;
  long long v64 = v59;
  int v62 = v11;
  int v65 = v60;
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 136));
  int8x8_t v12 = *(int8x8_t *)(a1 + 104);
  if (!*(void *)&v12) {
    goto LABEL_41;
  }
  unint64_t v13 = ((unint64_t)v64 << 58) | ((unint64_t)(DWORD1(v64) & 0x1FFFFFFF) << 29) | DWORD2(v64) & 0x1FFFFFFF;
  uint8x8_t v14 = (uint8x8_t)vcnt_s8(v12);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = ((unint64_t)v64 << 58) | ((unint64_t)(DWORD1(v64) & 0x1FFFFFFF) << 29) | DWORD2(v64) & 0x1FFFFFFF;
    if (v13 >= *(void *)&v12) {
      unint64_t v15 = v13 % *(void *)&v12;
    }
  }
  else
  {
    unint64_t v15 = v13 & (*(void *)&v12 - 1);
  }
  uint64_t v16 = *(std::__shared_weak_count ***)(*(void *)(a1 + 96) + 8 * v15);
  if (!v16) {
    goto LABEL_41;
  }
  uint64_t v17 = *v16;
  if (!*v16)
  {
LABEL_42:
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 136));
    goto LABEL_43;
  }
  if (v14.u32[0] < 2uLL)
  {
    uint64_t v18 = *(void *)&v12 - 1;
    while (1)
    {
      uint64_t shared_owners = v17->__shared_owners_;
      if (shared_owners == v13)
      {
        if (LODWORD(v17[1].__shared_owners_) == v64
          && *(uint64_t *)((char *)&v17[1].__shared_owners_ + 4) == *(void *)((char *)&v64 + 4)
          && HIDWORD(v64) == HIDWORD(v17[1].__shared_weak_owners_)
          && LODWORD(v17->__shared_weak_owners_) == v63
          && *(uint64_t *)((char *)&v17->__shared_weak_owners_ + 4) == *(void *)((char *)&v63 + 4))
        {
          goto LABEL_31;
        }
      }
      else if ((shared_owners & v18) != v15)
      {
        goto LABEL_41;
      }
      uint64_t v17 = (std::__shared_weak_count *)v17->__vftable;
      if (!v17) {
        goto LABEL_42;
      }
    }
  }
  while (1)
  {
    unint64_t v19 = v17->__shared_owners_;
    if (v19 == v13) {
      break;
    }
    if (v19 >= *(void *)&v12) {
      v19 %= *(void *)&v12;
    }
    if (v19 != v15) {
      goto LABEL_41;
    }
LABEL_13:
    uint64_t v17 = (std::__shared_weak_count *)v17->__vftable;
    if (!v17) {
      goto LABEL_42;
    }
  }
  if (LODWORD(v17[1].__shared_owners_) != v64
    || *(uint64_t *)((char *)&v17[1].__shared_owners_ + 4) != *(void *)((char *)&v64 + 4)
    || HIDWORD(v64) != HIDWORD(v17[1].__shared_weak_owners_)
    || LODWORD(v17->__shared_weak_owners_) != v63
    || *(uint64_t *)((char *)&v17->__shared_weak_owners_ + 4) != *(void *)((char *)&v63 + 4))
  {
    goto LABEL_13;
  }
LABEL_31:
  if (((*(uint64_t (**)(uint64_t, long long *, uint64_t *))(*(void *)a1 + 128))(a1, &v63, &v17->__shared_weak_owners_) & 1) == 0)
  {
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (void *)(a1 + 96), v17);
    uint64_t v23 = __p[0];
    if (__p[0])
    {
      if ((_BYTE)v59)
      {
        uint64_t v24 = (std::__shared_weak_count *)*((void *)__p[0] + 8);
        if (v24) {
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      operator delete(v23);
    }
    goto LABEL_41;
  }
  unint64_t shared_weak_owners = (std::__shared_weak_count *)v17[2].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
LABEL_41:
    uint64_t v17 = 0;
    goto LABEL_42;
  }
  uint64_t v22 = v17[2].__shared_owners_;
  atomic_fetch_add_explicit(&shared_weak_owners->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v17 = std::__shared_weak_count::lock(shared_weak_owners);
  std::__shared_weak_count::__release_weak(shared_weak_owners);
  if (!v17) {
    goto LABEL_42;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 136));
  if (v22)
  {
    __p[1] = 0;
    *(void *)&long long v59 = 0;
    __p[0] = off_1EF5677B0;
    *a5 = v22;
    a5[1] = (uint64_t)v17;
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    a5[3] = 0;
    a5[4] = 0;
    a5[2] = (uint64_t)off_1EF5677B0;
    goto LABEL_92;
  }
LABEL_43:
  (*(void (**)(void (***__return_ptr)(karo::AsyncRequestManager::RequestHandle *__hidden), uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 80))(&v55, a1, v61, a3, a4, 300, 1, 0);
  if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v55) == 4)
  {
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, _OWORD *, void **))(*(void *)a1 + 136))(&v50, a1, &v56, v61, &v52);
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 136));
    uint64_t v25 = std::__hash_table<std::__hash_value_type<altitude::StampedTileKey,std::weak_ptr<altitude::TrafficDynamicData>>,std::__unordered_map_hasher<altitude::StampedTileKey,std::__hash_value_type<altitude::StampedTileKey,std::weak_ptr<altitude::TrafficDynamicData>>,std::hash<altitude::StampedTileKey>,std::equal_to<altitude::StampedTileKey>,true>,std::__unordered_map_equal<altitude::StampedTileKey,std::__hash_value_type<altitude::StampedTileKey,std::weak_ptr<altitude::TrafficDynamicData>>,std::equal_to<altitude::StampedTileKey>,std::hash<altitude::StampedTileKey>,true>,std::allocator<std::__hash_value_type<altitude::StampedTileKey,std::weak_ptr<altitude::TrafficDynamicData>>>>::__emplace_unique_key_args<altitude::StampedTileKey,std::piecewise_construct_t const&,std::tuple<altitude::StampedTileKey const&>,std::tuple<>>((float *)(a1 + 96), (int *)&v63, (uint64_t)&v63);
    uint64_t v27 = v50;
    unsigned int v26 = v51;
    if (v51) {
      atomic_fetch_add_explicit(&v51->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v28 = (std::__shared_weak_count *)v25[8];
    unsigned char v25[7] = v27;
    v25[8] = v26;
    if (v28) {
      std::__shared_weak_count::__release_weak(v28);
    }
    uint64_t v29 = (int *)v52;
    if (v52 != v53)
    {
      do
      {
        unint64_t v30 = std::__hash_table<std::__hash_value_type<altitude::StampedTileKey,std::weak_ptr<altitude::TrafficDynamicData>>,std::__unordered_map_hasher<altitude::StampedTileKey,std::__hash_value_type<altitude::StampedTileKey,std::weak_ptr<altitude::TrafficDynamicData>>,std::hash<altitude::StampedTileKey>,std::equal_to<altitude::StampedTileKey>,true>,std::__unordered_map_equal<altitude::StampedTileKey,std::__hash_value_type<altitude::StampedTileKey,std::weak_ptr<altitude::TrafficDynamicData>>,std::equal_to<altitude::StampedTileKey>,std::hash<altitude::StampedTileKey>,true>,std::allocator<std::__hash_value_type<altitude::StampedTileKey,std::weak_ptr<altitude::TrafficDynamicData>>>>::__emplace_unique_key_args<altitude::StampedTileKey,std::piecewise_construct_t const&,std::tuple<altitude::StampedTileKey const&>,std::tuple<>>((float *)(a1 + 96), v29, (uint64_t)v29);
        uint64_t v32 = v50;
        size_t v31 = v51;
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        unsigned int v33 = (std::__shared_weak_count *)v30[8];
        v30[7] = v32;
        v30[8] = v31;
        if (v33) {
          std::__shared_weak_count::__release_weak(v33);
        }
        v29 += 9;
      }
      while (v29 != v53);
    }
    unsigned int v36 = *(_DWORD *)(a1 + 144) + 1;
    *(_DWORD *)(a1 + 144) = v36;
    if (v36 > 0x14)
    {
      *(_DWORD *)(a1 + 144) = 0;
      for (uint64_t i = *(void **)(a1 + 112); i; uint64_t i = (void *)*i)
      {
        while (1)
        {
          long long v38 = (std::__shared_weak_count *)i[8];
          if (!v38) {
            goto LABEL_71;
          }
          uint64_t v39 = std::__shared_weak_count::lock(v38);
          if (!v39) {
            goto LABEL_71;
          }
          int v40 = v39;
          uint64_t v41 = i[7];
          if (atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v40);
          if (v41) {
            goto LABEL_68;
          }
LABEL_71:
          long long v42 = (void *)*i;
          std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)__p, (void *)(a1 + 96), i);
          uint64_t v43 = __p[0];
          if (__p[0])
          {
            if ((_BYTE)v59)
            {
              uint64_t v44 = (std::__shared_weak_count *)*((void *)__p[0] + 8);
              if (v44) {
                std::__shared_weak_count::__release_weak(v44);
              }
            }
            operator delete(v43);
          }
          uint64_t i = v42;
          if (!v42) {
            goto LABEL_75;
          }
        }
        if (!v41) {
          goto LABEL_71;
        }
LABEL_68:
        ;
      }
    }
LABEL_75:
    uint64_t v45 = v51;
    *a5 = v50;
    a5[1] = (uint64_t)v45;
    if (v45) {
      atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v46 = v56;
    uint64_t v47 = v57;
    a5[2] = (uint64_t)off_1EF5677B0;
    a5[3] = v46;
    a5[4] = (uint64_t)v47;
    if (v47)
    {
      atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v46 = a5[3];
    }
    if (v46) {
      atomic_fetch_add((atomic_uint *volatile)(v46 + 128), 1u);
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 136));
    int v48 = v51;
    if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
    if (v52)
    {
      uint64_t v53 = v52;
      operator delete(v52);
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
    uint64_t v34 = v56;
    int v35 = v57;
    a5[2] = (uint64_t)off_1EF5677B0;
    a5[3] = v34;
    a5[4] = (uint64_t)v35;
    if (v35)
    {
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v34 = a5[3];
    }
    if (v34) {
      atomic_fetch_add((atomic_uint *volatile)(v34 + 128), 1u);
    }
  }
  uint64_t v55 = off_1EF5677B0;
  if (v56) {
    atomic_fetch_add((atomic_uint *volatile)(v56 + 128), 0xFFFFFFFF);
  }
  long long v49 = v57;
  if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
  if (v17)
  {
LABEL_92:
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void altitude::TrafficTileDataCache::createRequest()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

uint64_t std::__shared_ptr_pointer<altitude::TrafficTileDataCacheJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::TrafficTileDataCacheJob>,std::allocator<altitude::TrafficTileDataCacheJob>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<altitude::TrafficTileDataCacheJob *,std::shared_ptr<karo::AsyncRequestManager::Request>::__shared_ptr_default_delete<karo::AsyncRequestManager::Request,altitude::TrafficTileDataCacheJob>,std::allocator<altitude::TrafficTileDataCacheJob>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t altitude::TrafficTileDataCacheJob::succeeded(altitude::TrafficTileDataCacheJob *this)
{
  return *((unsigned __int8 *)this + 225);
}

void altitude::TrafficTileDataCacheJob::jobStep(altitude::TrafficTileDataCacheJob *this)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 228;
  long long v3 = *(_OWORD *)((char *)this + 244);
  v28[3] = *(_OWORD *)((char *)this + 228);
  long long v29 = v3;
  *(void *)&long long v29 = altitude::GeoResourceManager::getTileIdWithDataForTileId(*(void *)(*((void *)this + 33) + 32), &v29, 22);
  *((void *)&v29 + 1) = v4;
  if (v29)
  {
    if (!*((void *)this + 39))
    {
      atomic_load((unsigned int *)this + 4);
      (*(void (**)(pthread_mutexattr_t *__return_ptr))(**((void **)this + 34) + 104))(&v30);
      if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v30) == 4)
      {
        int8x8_t v12 = v32;
        pthread_mutex_lock(*((pthread_mutex_t **)v32 + 19));
        atomic_uint v13 = v12[40];
        pthread_mutex_unlock(*((pthread_mutex_t **)v12 + 19));
        if (v13) {
          uint8x8_t v14 = (const unsigned __int8 *)(*(uint64_t (**)(atomic_uint *))(*(void *)v32 + 56))(v32);
        }
        else {
          uint8x8_t v14 = 0;
        }
        (*(void (**)(atomic_uint *))(*(void *)v32 + 48))(v32);
        zilch::ReadBitstream::ReadBitstream((zilch::ReadBitstream *)v28, v14);
        operator new();
      }
      if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v30))
      {
        uint64_t v20 = (std::__shared_weak_count *)v31;
        v27[0] = *(void *)v30.__opaque;
        v27[1] = v31;
        if (v31)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v31 + 1, 1uLL, memory_order_relaxed);
          karo::Job::addBlockingSubJob((uint64_t *)this, v27, 0, 0);
          if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        else
        {
          karo::Job::addBlockingSubJob((uint64_t *)this, v27, 0, 0);
        }
      }
      else
      {
        (*(void (**)(altitude::TrafficTileDataCacheJob *))(*(void *)this + 16))(this);
      }
      v30.__uint64_t sig = (uint64_t)off_1EF5676C0;
      uint64_t v23 = v33;
      if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
      v30.__uint64_t sig = (uint64_t)off_1EF5677B0;
      if (*(void *)v30.__opaque) {
        atomic_fetch_add((atomic_uint *volatile)(*(void *)v30.__opaque + 128), 0xFFFFFFFF);
      }
      uint64_t v24 = (std::__shared_weak_count *)v31;
      if (v31 && !atomic_fetch_add((atomic_ullong *volatile)v31 + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (!*((void *)this + 37))
    {
      atomic_load((unsigned int *)this + 4);
      (*(void (**)(pthread_mutexattr_t *__return_ptr))(**((void **)this + 35) + 104))(&v30);
      uint64_t sig = v30.__sig;
      if (v30.__sig)
      {
        uint64_t v16 = *(void *)v30.__opaque;
        if (*(void *)v30.__opaque) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)v30.__opaque + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 38);
        *((void *)this + 37) = sig;
        *((void *)this + 38) = v16;
        if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        karo::Job::removeSubJob((pthread_mutex_t **)this, 1);
      }
      else if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v31))
      {
        uint64_t v22 = v33;
        v26[0] = v32;
        v26[1] = v33;
        if (v33)
        {
          atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
          karo::Job::addBlockingSubJob((uint64_t *)this, v26, 1, 0);
          if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        else
        {
          karo::Job::addBlockingSubJob((uint64_t *)this, v26, 1, 0);
        }
      }
      else
      {
        (*(void (**)(altitude::TrafficTileDataCacheJob *))(*(void *)this + 16))(this);
      }
      size_t v31 = off_1EF5677B0;
      if (v32) {
        atomic_fetch_add(v32 + 32, 0xFFFFFFFF);
      }
      uint64_t v18 = v33;
      if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      unint64_t v19 = *(std::__shared_weak_count **)v30.__opaque;
      if (*(void *)v30.__opaque
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)v30.__opaque + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (*((void *)this + 41))
    {
LABEL_19:
      if (*((void *)this + 39))
      {
        if (*((void *)this + 37)) {
          operator new();
        }
      }
      return;
    }
    long long v5 = *((_OWORD *)v2 + 1);
    v28[0] = *(_OWORD *)((char *)this + 228);
    v28[1] = v5;
    LODWORD(v28[0]) = 20;
    atomic_load((unsigned int *)this + 4);
    (*(void (**)(pthread_mutexattr_t *__return_ptr))(**((void **)this + 36) + 104))(&v30);
    uint64_t v6 = v30.__sig;
    if (v30.__sig)
    {
      uint64_t v7 = *(void *)v30.__opaque;
      if (*(void *)v30.__opaque) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)v30.__opaque + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 42);
      *((void *)this + 41) = v6;
      *((void *)this + 42) = v7;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      karo::Job::removeSubJob((pthread_mutex_t **)this, 2);
    }
    else if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v31))
    {
      int v21 = v33;
      v25[0] = v32;
      v25[1] = v33;
      if (v33)
      {
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
        karo::Job::addBlockingSubJob((uint64_t *)this, v25, 2, 0);
        if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      else
      {
        karo::Job::addBlockingSubJob((uint64_t *)this, v25, 2, 0);
      }
    }
    else
    {
      (*(void (**)(altitude::TrafficTileDataCacheJob *))(*(void *)this + 16))(this);
    }
    size_t v31 = off_1EF5677B0;
    if (v32) {
      atomic_fetch_add(v32 + 32, 0xFFFFFFFF);
    }
    char v9 = v33;
    if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      long long v10 = *(std::__shared_weak_count **)v30.__opaque;
      if (*(void *)v30.__opaque)
      {
LABEL_17:
        if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
          if (!*((void *)this + 41)) {
            return;
          }
          goto LABEL_19;
        }
      }
    }
    else
    {
      long long v10 = *(std::__shared_weak_count **)v30.__opaque;
      if (*(void *)v30.__opaque) {
        goto LABEL_17;
      }
    }
    if (!*((void *)this + 41)) {
      return;
    }
    goto LABEL_19;
  }
  int v11 = *(void (**)(altitude::TrafficTileDataCacheJob *))(*(void *)this + 16);
  v11(this);
}

void sub_1A26A28EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

uint64_t std::__shared_ptr_pointer<altitude::TrafficTileData *,std::shared_ptr<altitude::TrafficTileData>::__shared_ptr_default_delete<altitude::TrafficTileData,altitude::TrafficTileData>,std::allocator<altitude::TrafficTileData>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 160);
    if (v2)
    {
      *(void *)(v1 + 168) = v2;
      operator delete(v2);
    }
    long long v3 = *(void **)(v1 + 136);
    if (v3)
    {
      *(void *)(v1 + 144) = v3;
      operator delete(v3);
    }
    uint64_t v4 = *(void *)(v1 + 112);
    if (v4)
    {
      uint64_t v5 = *(void *)(v1 + 120);
      uint64_t v6 = *(void **)(v1 + 112);
      if (v5 != v4)
      {
        do
        {
          uint64_t v7 = *(void **)(v5 - 40);
          if (v7)
          {
            *(void *)(v5 - 32) = v7;
            operator delete(v7);
          }
          uint64_t v8 = *(void **)(v5 - 64);
          if (v8)
          {
            *(void *)(v5 - 56) = v8;
            operator delete(v8);
          }
          v5 -= 80;
        }
        while (v5 != v4);
        uint64_t v6 = *(void **)(v1 + 112);
      }
      *(void *)(v1 + 120) = v4;
      operator delete(v6);
    }
    char v9 = *(std::__shared_weak_count **)(v1 + 104);
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    long long v10 = *(std::__shared_weak_count **)(v1 + 88);
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    int v11 = *(std::__shared_weak_count **)(v1 + 72);
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    int8x8_t v12 = *(std::__shared_weak_count **)(v1 + 56);
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v13 = *(void *)(v1 + 24);
    if (v13)
    {
      uint64_t v14 = *(void *)(v1 + 32);
      unint64_t v15 = *(void **)(v1 + 24);
      if (v14 != v13)
      {
        do
        {
          uint64_t v16 = *(std::__shared_weak_count **)(v14 - 8);
          if (v16) {
            std::__shared_weak_count::__release_weak(v16);
          }
          v14 -= 24;
        }
        while (v14 != v13);
        unint64_t v15 = *(void **)(v1 + 24);
      }
      *(void *)(v1 + 32) = v13;
      operator delete(v15);
    }
    pthread_mutex_destroy(*(pthread_mutex_t **)(v1 + 16));
    uint64_t v17 = *(void *)(v1 + 16);
    if (v17) {
      MEMORY[0x1A6239270](v17, 0x1000C40FA0F61DDLL);
    }
    *(void *)(v1 + 16) = 0;
    JUMPOUT(0x1A6239270);
  }
  return result;
}

void std::__shared_ptr_pointer<altitude::TrafficTileData *,std::shared_ptr<altitude::TrafficTileData>::__shared_ptr_default_delete<altitude::TrafficTileData,altitude::TrafficTileData>,std::allocator<altitude::TrafficTileData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void altitude::TrafficTileDataCacheJob::~TrafficTileDataCacheJob(altitude::TrafficTileDataCacheJob *this)
{
  altitude::TrafficTileDataCacheJob::~TrafficTileDataCacheJob(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t vars8;

  *(void *)this = &unk_1EF56ADE8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    long long v3 = (std::__shared_weak_count *)*((void *)this + 44);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    long long v3 = (std::__shared_weak_count *)*((void *)this + 44);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 40);
    if (!v5) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 40);
    if (!v5) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_13:
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(void *)this = &unk_1EF56A2A8;
  if (*((char *)this + 223) < 0) {
    operator delete(*((void **)this + 25));
  }
  pthread_mutex_destroy(*((pthread_mutex_t **)this + 24));
  uint64_t v7 = *((void *)this + 24);
  if (v7) {
    MEMORY[0x1A6239270](v7, 0x1000C40FA0F61DDLL);
  }
  *((void *)this + 24) = 0;
  karo::Job::~Job(this);
}

void altitude::TrafficTileDataCache::~TrafficTileDataCache(altitude::TrafficTileDataCache *this)
{
  *(void *)this = &unk_1EF56A5C0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  altitude::GenericCacheNode<altitude::StampedTileKey,altitude::TrafficTileData>::~GenericCacheNode(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF56A5C0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  altitude::GenericCacheNode<altitude::StampedTileKey,altitude::TrafficTileData>::~GenericCacheNode(this);
}

void altitude::GenericCacheNode<altitude::StampedTileKey,altitude::TrafficTileData>::~GenericCacheNode(karo::AsyncRequestManager *a1)
{
  *(void *)a1 = &unk_1EF569208;
  pthread_mutex_destroy(*((pthread_mutex_t **)a1 + 17));
  uint64_t v2 = *((void *)a1 + 17);
  if (v2) {
    MEMORY[0x1A6239270](v2, 0x1000C40FA0F61DDLL);
  }
  *((void *)a1 + 17) = 0;
  long long v3 = (void *)*((void *)a1 + 14);
  if (v3)
  {
    do
    {
      uint64_t v5 = (void *)*v3;
      uint64_t v6 = (std::__shared_weak_count *)v3[8];
      if (v6) {
        std::__shared_weak_count::__release_weak(v6);
      }
      operator delete(v3);
      long long v3 = v5;
    }
    while (v5);
  }
  uint64_t v4 = (void *)*((void *)a1 + 12);
  *((void *)a1 + 12) = 0;
  if (v4) {
    operator delete(v4);
  }
  *(void *)a1 = &unk_1EF567B08;
  while (*((void *)a1 + 10))
    (*(void (**)(karo::AsyncRequestManager *, uint64_t))(*(void *)a1 + 48))(a1, *((void *)a1 + 8) + 32);
  std::__tree<std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::__map_value_compare<altitude::KeyPair<altitude::StampedTileKey>,std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>,std::less<altitude::KeyPair<altitude::StampedTileKey>>,true>,std::allocator<std::__value_type<altitude::KeyPair<altitude::StampedTileKey>,std::shared_ptr<karo::AsyncRequestManager::Request>>>>::destroy(*((void **)a1 + 9));
  karo::AsyncRequestManager::~AsyncRequestManager(a1);
}

__n128 altitude::GenericCacheNode<altitude::StampedTileKey,altitude::TrafficTileData>::getCacheKeyForKey@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  return result;
}

uint64_t altitude::GenericCacheNode<altitude::StampedTileKey,altitude::TrafficTileData>::hasValidKey()
{
  return 1;
}

uint64_t md::BasePolygonTileData::BasePolygonTileData(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6)
{
  char v9 = (void *)md::MapTileData::MapTileData(a1, a2, a6, a5, 1);
  *char v9 = &unk_1EF53B0A8;
  v9[79] = &unk_1EF53B0F0;
  v9[90] = 0;
  v9[92] = 0;
  v9[91] = 0;
  long long v10 = *(void **)a3;
  int v11 = *(void **)(a3 + 8);
  int64_t v12 = (int64_t)v11 - *(void *)a3;
  if (v12)
  {
    if (v12 < 0) {
      abort();
    }
    uint64_t v13 = operator new(v12);
    *(void *)(a1 + 720) = v13;
    *(void *)(a1 + 728) = v13;
    *(void *)(a1 + 736) = &v13[2 * (v12 >> 4)];
    do
    {
      uint64_t v14 = v10[1];
      void *v13 = *v10;
      v13[1] = v14;
      if (v14) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      }
      v13 += 2;
      v10 += 2;
    }
    while (v10 != v11);
    *(void *)(a1 + 728) = v13;
  }
  *(_DWORD *)(a1 + 744) = a4;
  return a1;
}

void sub_1A26A318C(_Unwind_Exception *a1)
{
  md::MapTileData::~MapTileData(v1);
  _Unwind_Resume(a1);
}

uint64_t md::PolygonTileData::polygonGroups(md::PolygonTileData *this)
{
  return (uint64_t)this + 752;
}

void md::PolygonTileData::~PolygonTileData(md::PolygonTileData *this)
{
  md::PolygonTileData::~PolygonTileData(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  md::CoastlineGroup *v8;
  md::CoastlineGroup *v9;
  void (***v10)(void);
  void (***v11)(void);
  void *v12;
  void (***v13)(void);
  void (***v14)(void);
  void (***v15)(void);
  void (**v16)(void);
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  uint64_t vars8;

  *(void *)this = &unk_1EF5351C8;
  *((void *)this + 79) = &unk_1EF535210;
  uint64_t v2 = (void *)*((void *)this + 102);
  if (v2)
  {
    do
    {
      long long v3 = *(void **)v2;
      *((void *)v2 + 3) = &unk_1EF559598;

      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 100);
  *((void *)this + 100) = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 97);
  if (v5)
  {
    uint64_t v6 = (void *)*((void *)this + 98);
    uint64_t v7 = (void *)*((void *)this + 97);
    if (v6 != v5)
    {
      do
      {
        char v9 = (md::CoastlineGroup *)*--v6;
        uint64_t v8 = v9;
        *uint64_t v6 = 0;
        if (v9)
        {
          md::CoastlineGroup::~CoastlineGroup(v8);
          MEMORY[0x1A6239270]();
        }
      }
      while (v6 != v5);
      uint64_t v7 = (void *)*((void *)this + 97);
    }
    *((void *)this + 98) = v5;
    operator delete(v7);
  }
  long long v10 = (void (***)(void))*((void *)this + 94);
  if (v10)
  {
    int v11 = (void (***)(void))*((void *)this + 95);
    int64_t v12 = (void *)*((void *)this + 94);
    if (v11 != v10)
    {
      uint64_t v13 = v11 - 3;
      uint64_t v14 = v11 - 3;
      unint64_t v15 = v11 - 3;
      do
      {
        uint64_t v16 = *v15;
        v15 -= 3;
        (*v16)(v14);
        v13 -= 3;
        uint64_t v17 = v14 == v10;
        uint64_t v14 = v15;
      }
      while (!v17);
      int64_t v12 = (void *)*((void *)this + 94);
    }
    *((void *)this + 95) = v10;
    operator delete(v12);
  }
  *(void *)this = &unk_1EF53B0A8;
  *((void *)this + 79) = &unk_1EF53B0F0;
  uint64_t v18 = *((void *)this + 90);
  if (v18)
  {
    unint64_t v19 = *((void *)this + 91);
    uint64_t v20 = (void *)*((void *)this + 90);
    if (v19 != v18)
    {
      do
      {
        int v21 = *(std::__shared_weak_count **)(v19 - 8);
        if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
        v19 -= 16;
      }
      while (v19 != v18);
      uint64_t v20 = (void *)*((void *)this + 90);
    }
    *((void *)this + 91) = v18;
    operator delete(v20);
  }
  md::MapTileData::~MapTileData(this);
}

unsigned char *anonymous namespace'::intersectView(unsigned char *result, uint64_t a2, double *a3)
{
  uint64_t v3 = *(void *)(a2 + 176);
  uint64_t v4 = *(void *)(a2 + 184);
  if (v3 == v4) {
    goto LABEL_34;
  }
  uint64_t v92 = result;
  double v94 = 0.0;
  double v95 = 0.0;
  double v99 = 1.79769313e308;
  double v93 = 0.0;
  double v97 = 0.0;
  double v98 = 0.0;
  double v96 = 0.0;
  do
  {
    float v6 = *(float *)(v3 + 72);
    float v7 = *(float *)(v3 + 76);
    float v9 = *(float *)(v3 + 80);
    float v8 = *(float *)(v3 + 84);
    double v10 = *(double *)(v3 + 56);
    double v11 = *(double *)(v3 + 64);
    double v12 = *(double *)(v3 + 48);
    double v14 = *a3;
    double v13 = a3[1];
    double v15 = a3[2];
    double v16 = a3[3];
    double v17 = a3[4];
    double v18 = a3[5];
    uint64_t v19 = **(void **)(*(void *)v3 + 64);
    uint64_t v21 = *(void *)(v19 + 40);
    uint64_t v20 = *(void *)(v19 + 48);
    unint64_t v22 = *(void *)(v19 + 8);
    if ((*(unsigned char *)(v19 + 16) & 2) == 0
      && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
    {
      v130[0] = &v128;
      uint64_t v129 = v130;
      double v116 = v11;
      double v119 = v13;
      float v122 = v6;
      float v125 = v9;
      float v23 = v7;
      double v113 = v14;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v129, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      double v14 = v113;
      double v11 = v116;
      double v13 = v119;
      float v6 = v122;
      float v9 = v125;
      float v7 = v23;
    }
    if (v20 - v21 == (v20 - v21) % v22) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = *(void *)(v19 + 72);
    }
    uint64_t v25 = *(void *)(*(void *)v3 + 96);
    uint64_t v27 = *(void *)(v25 + 40);
    uint64_t v26 = *(void *)(v25 + 48);
    unint64_t v28 = *(void *)(v25 + 8);
    if ((*(unsigned char *)(v25 + 16) & 2) == 0
      && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
    {
      v130[0] = &v128;
      uint64_t v129 = v130;
      double v117 = v11;
      double v120 = v13;
      float v123 = v6;
      float v126 = v9;
      float v29 = v7;
      double v114 = v14;
      std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, &v129, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
      double v14 = v114;
      double v11 = v117;
      double v13 = v120;
      float v6 = v123;
      float v9 = v126;
      float v7 = v29;
    }
    if (v26 - v27 == (v26 - v27) % v28) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *(void *)(v25 + 72);
    }
    unint64_t v32 = *(void *)(v3 + 32);
    unint64_t v31 = *(void *)(v3 + 40);
    if (v32 < v31)
    {
      double v33 = (float)-v6;
      double v34 = (float)-v7;
      double v35 = (float)-v9;
      double v36 = -(v10 * v35 - v11 * v34) - (v10 * v35 - v11 * v34);
      double v37 = -(v11 * v33 - v12 * v35) - (v11 * v33 - v12 * v35);
      double v38 = -(v12 * v34 - v10 * v33) - (v12 * v34 - v10 * v33);
      double v39 = -(v13 * v35 - v15 * v34) - (v13 * v35 - v15 * v34);
      double v40 = -(v15 * v33 - v14 * v35) - (v15 * v33 - v14 * v35);
      double v41 = -(v14 * v34 - v13 * v33) - (v14 * v34 - v13 * v33);
      double v42 = v14 - v12 + v37 * v35 + v39 * v8 + v41 * v34 - (v36 * v8 + v38 * v34 + v40 * v35);
      double v43 = v13 - v10 + v38 * v33 + v39 * v35 + v40 * v8 - (v36 * v35 + v37 * v8 + v41 * v33);
      double v44 = v15 - v11 + v36 * v34 + v40 * v33 + v41 * v8 - (v37 * v33 + v38 * v8 + v39 * v34);
      *(float *)&double v34 = v16;
      float v45 = v17;
      *(float *)&double v36 = v18;
      *(float *)&double v37 = (float)-(float)((float)(v7 * *(float *)&v36) - (float)(v9 * v45))
                     - (float)((float)(v7 * *(float *)&v36) - (float)(v9 * v45));
      *(float *)&double v38 = (float)-(float)((float)(v9 * *(float *)&v34) - (float)(v6 * *(float *)&v36))
                     - (float)((float)(v9 * *(float *)&v34) - (float)(v6 * *(float *)&v36));
      *(float *)&double v39 = (float)-(float)((float)(v6 * v45) - (float)(v7 * *(float *)&v34))
                     - (float)((float)(v6 * v45) - (float)(v7 * *(float *)&v34));
      float v46 = (float)((float)(*(float *)&v34 - (float)(*(float *)&v39 * v7)) + (float)(*(float *)&v37 * v8))
          + (float)(*(float *)&v38 * v9);
      float v47 = (float)((float)(v45 + (float)(*(float *)&v39 * v6)) + (float)(*(float *)&v38 * v8))
          - (float)(*(float *)&v37 * v9);
      float v48 = (float)((float)(*(float *)&v36 + (float)(*(float *)&v39 * v8)) + (float)(*(float *)&v37 * v7))
          - (float)(*(float *)&v38 * v6);
      float v49 = v42;
      float v50 = v43;
      float v51 = v44;
      float v109 = (float)((float)(v46 * v46) + (float)(v47 * v47)) + (float)(v48 * v48);
      float v110 = v51;
      float v101 = 0.0;
      float v102 = 0.0;
      float v52 = 3.4028e38;
      float v100 = 0.0;
      float v104 = 0.0;
      float v105 = 0.0;
      float v103 = 0.0;
      float v112 = v49;
      float v115 = v46;
      float v111 = v50;
      do
      {
        uint64_t v53 = (unsigned __int16 *)(v30 + 2 * v32);
        uint64_t v54 = (float *)(v24 + 32 * v53[1]);
        float v55 = *v54;
        float v56 = v54[1];
        float v57 = v54[2];
        uint64_t v58 = (float *)(v24 + 32 * v53[2]);
        float v59 = *v58;
        float v60 = v58[1];
        float v61 = v58[2];
        float v62 = *v58 - v49;
        float v63 = (float)((float)((float)-(float)((float)(v62 * v47) - (float)((float)(v60 - v50) * v46))
                            * (float)(v57 - v51))
                    + (float)((float)-(float)((float)((float)(v60 - v50) * v48) - (float)((float)(v61 - v51) * v47))
                            * (float)(v55 - v49)))
            + (float)((float)-(float)((float)((float)(v61 - v51) * v46) - (float)(v62 * v48)) * (float)(v56 - v50));
        if (v63 >= 0.0)
        {
          long long v64 = (float *)(v24 + 32 * *v53);
          float v65 = v64[1];
          float v66 = v64[2];
          float v67 = *v64 - v49;
          float v68 = (float)((float)(v62
                              * (float)-(float)((float)((float)(v65 - v50) * v48) - (float)((float)(v66 - v51) * v47)))
                      + (float)((float)(v60 - v50)
                              * (float)-(float)((float)((float)(v66 - v51) * v46) - (float)(v67 * v48))))
              + (float)((float)(v61 - v51) * (float)-(float)((float)(v67 * v47) - (float)((float)(v65 - v50) * v46)));
          if (v68 >= 0.0)
          {
            float v69 = (float)((float)((float)-(float)((float)((float)(v55 - v49) * v47) - (float)((float)(v56 - v50) * v46))
                                * (float)(v66 - v51))
                        + (float)((float)-(float)((float)((float)(v56 - v50) * v48) - (float)((float)(v57 - v51) * v47))
                                * v67))
                + (float)((float)-(float)((float)((float)(v57 - v51) * v46) - (float)((float)(v55 - v49) * v48))
                        * (float)(v65 - v50));
            if (v69 >= 0.0)
            {
              float v70 = (float)(v69 + v68) + v63;
              if (v70 > 0.0)
              {
                float v71 = 1.0 / v70;
                float v72 = v71 * v63;
                float v73 = v71 * v69;
                float v124 = (float)((float)(v72 * *v64) + (float)((float)(v71 * v68) * v55)) + (float)(v73 * v59);
                float v121 = (float)((float)(v72 * v65) + (float)((float)(v71 * v68) * v56)) + (float)(v73 * v60);
                float v118 = (float)((float)(v72 * v66) + (float)((float)(v71 * v68) * v57)) + (float)(v73 * v61);
                float v127 = v52;
                float v106 = *v64;
                float v107 = v64[1];
                float v108 = v64[2];
                float v74 = acosf(fmaxf(fminf((float)((float)((float)((float)(v124 - v49) * v46) + (float)((float)(v121 - v50) * v47))+ (float)((float)(v118 - v51) * v48))/ sqrtf((float)((float)((float)((float)(v124 - v49) * (float)(v124 - v49))+ (float)((float)(v121 - v50) * (float)(v121 - v50)))+ (float)((float)(v118 - v51) * (float)(v118 - v51)))* v109), 1.0), -1.0));
                float v52 = v127;
                float v51 = v110;
                float v50 = v111;
                float v49 = v112;
                float v46 = v115;
                if (v74 < 1.57079633
                  && (float)((float)((float)((float)(v112 - v124) * (float)(v112 - v124))
                                   + (float)((float)(v111 - v121) * (float)(v111 - v121)))
                           + (float)((float)(v110 - v118) * (float)(v110 - v118))) < v127)
                {
                  float v76 = -(float)((float)((float)(v60 - v107) * (float)(v57 - v108))
                               - (float)((float)(v61 - v108) * (float)(v56 - v107)));
                  float v77 = -(float)((float)((float)(v61 - v108) * (float)(v55 - v106))
                               - (float)((float)(v59 - v106) * (float)(v57 - v108)));
                  float v78 = -(float)((float)((float)(v59 - v106) * (float)(v56 - v107))
                               - (float)((float)(v60 - v107) * (float)(v55 - v106)));
                  float v79 = 1.0 / sqrtf((float)((float)(v78 * v78) + (float)(v76 * v76)) + (float)(v77 * v77));
                  float v100 = v79 * v77;
                  float v101 = v79 * v78;
                  float v102 = v79 * v76;
                  float v104 = v121;
                  float v105 = v124;
                  float v103 = v118;
                  float v52 = (float)((float)((float)(v112 - v124) * (float)(v112 - v124))
                              + (float)((float)(v111 - v121) * (float)(v111 - v121)))
                      + (float)((float)(v110 - v118) * (float)(v110 - v118));
                }
              }
            }
          }
        }
        v32 += 3;
      }
      while (v32 < v31);
      if (v52 < 3.4028e38
        && v99 > (float)((float)((float)((float)(v49 - v105) * (float)(v49 - v105))
                               + (float)((float)(v50 - v104) * (float)(v50 - v104)))
                       + (float)((float)(v51 - v103) * (float)(v51 - v103))))
      {
        float v80 = *(float *)(v3 + 72);
        float v81 = *(float *)(v3 + 76);
        float v82 = *(float *)(v3 + 80);
        float v83 = *(float *)(v3 + 84);
        double v84 = -(v82 * v104 - v81 * v103);
        double v85 = -(v80 * v103 - v82 * v105);
        double v86 = -(v81 * v105 - v80 * v104);
        double v87 = v84 + v84;
        double v88 = v85 + v85;
        double v89 = v86 + v86;
        double v97 = *(double *)(v3 + 56) + v104 - v89 * v80 + v87 * v82 + v88 * v83;
        double v98 = *(double *)(v3 + 48) + v105 + v89 * v81 + v87 * v83 - v88 * v82;
        double v96 = *(double *)(v3 + 64) + v103 + v89 * v83 + v88 * v80 - v87 * v81;
        *(float *)&double v89 = (float)-(float)((float)(v82 * v100) - (float)(v81 * v101))
                       - (float)((float)(v82 * v100) - (float)(v81 * v101));
        float v90 = (float)-(float)((float)(v80 * v101) - (float)(v82 * v102))
            - (float)((float)(v80 * v101) - (float)(v82 * v102));
        float v91 = (float)-(float)((float)(v81 * v102) - (float)(v80 * v100))
            - (float)((float)(v81 * v102) - (float)(v80 * v100));
        double v94 = (float)((float)((float)(v100 - (float)(v91 * v80)) + (float)(*(float *)&v89 * v82)) + (float)(v90 * v83));
        double v95 = (float)((float)((float)(v102 + (float)(v91 * v81)) + (float)(*(float *)&v89 * v83)) - (float)(v90 * v82));
        double v93 = (float)((float)((float)(v101 + (float)(v91 * v83)) + (float)(v90 * v80)) - (float)(*(float *)&v89 * v81));
        double v99 = (float)((float)((float)((float)(v49 - v105) * (float)(v49 - v105))
                            + (float)((float)(v50 - v104) * (float)(v50 - v104)))
                    + (float)((float)(v51 - v103) * (float)(v51 - v103)));
      }
    }
    v3 += 88;
  }
  while (v3 != v4);
  __n128 result = v92;
  if (v99 >= 1.79769313e308)
  {
LABEL_34:
    *__n128 result = 0;
  }
  else
  {
    *uint64_t v92 = 1;
    *((double *)v92 + 1) = v98;
    *((double *)v92 + 2) = v97;
    *((double *)v92 + 3) = v96;
    *((double *)v92 + 4) = v95;
    *((double *)v92 + 5) = v94;
    *((double *)v92 + 6) = v93;
  }
  return result;
}

void *karo::RequestPruner::update(void *this)
{
  uint64_t v1 = this[5];
  if (this[6] != v1)
  {
    uint64_t v2 = this;
    unint64_t v3 = 0;
    do
    {
      this = (void *)(*(uint64_t (**)(void, void))(**(void **)(v1 + 8 * v3) + 24))(*(void *)(v1 + 8 * v3), *(unsigned int *)(v2[4] + 88));
      ++v3;
      uint64_t v1 = v2[5];
    }
    while (v3 < (v2[6] - v1) >> 3);
  }
  return this;
}

void karo::RequestPruner::~RequestPruner(karo::RequestPruner *this)
{
  *(void *)this = &unk_1EF567690;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1A6239270);
}

{
  void *v2;

  *(void *)this = &unk_1EF567690;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void karo::RequestPruner::addRequestManager(karo::RequestPruner *this, karo::AsyncRequestManager *a2)
{
  uint64_t v5 = (char *)*((void *)this + 6);
  unint64_t v4 = *((void *)this + 7);
  float v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    float v8 = (char *)*((void *)this + 5);
    uint64_t v9 = (v5 - v8) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      abort();
    }
    uint64_t v11 = v4 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      double v13 = operator new(8 * v12);
    }
    else
    {
      double v13 = 0;
    }
    double v14 = &v13[8 * v9];
    double v15 = &v13[8 * v12];
    void *v14 = a2;
    float v7 = v14 + 1;
    if (v5 == v8)
    {
      float v8 = v5;
    }
    else
    {
      unint64_t v16 = v5 - v8 - 8;
      if (v16 < 0x58) {
        goto LABEL_29;
      }
      if ((unint64_t)(v8 - v13) < 0x20) {
        goto LABEL_29;
      }
      uint64_t v17 = (v16 >> 3) + 1;
      float v6 = &v5[-8 * (v17 & 0x3FFFFFFFFFFFFFFCLL)];
      double v18 = &v13[8 * v9 - 16];
      uint64_t v19 = v5 - 16;
      uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v21 = *(_OWORD *)v19;
        *(v18 - 1) = *((_OWORD *)v19 - 1);
        _OWORD *v18 = v21;
        v18 -= 2;
        v19 -= 32;
        v20 -= 4;
      }
      while (v20);
      v14 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          uint64_t v22 = *((void *)v6 - 1);
          v6 -= 8;
          *--double v14 = v22;
        }
        while (v6 != v8);
        float v8 = (char *)*((void *)this + 5);
      }
    }
    *((void *)this + 5) = v14;
    *((void *)this + 6) = v7;
    *((void *)this + 7) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(void *)uint64_t v5 = a2;
    float v7 = v5 + 8;
  }
  *((void *)this + 6) = v7;
  *((void *)a2 + 7) = this;
}

void md::Logic<md::mun::MuninLogic,md::mun::MuninContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext,md::ElevationContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  unint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    uint64_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      uint64_t v5 = __p;
    }
    unint64_t v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

uint64_t _ZNKSt3__110__function6__funcIZN2md3mun10MuninLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextENS2_16ElevationContextEEEENSA_IJEEEEE20ResolvedDependenciesERNS3_12MuninContextEE3__1NS_9allocatorISM_EEFvvEE7__cloneEPNS0_6__baseISP_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF578A80;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md3mun10MuninLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextENS2_16ElevationContextEEEENSA_IJEEEEE20ResolvedDependenciesERNS3_12MuninContextEE3__1NS_9allocatorISM_EEFvvEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF578A80;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md3mun10MuninLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextENS2_16ElevationContextEEEENSA_IJEEEEE20ResolvedDependenciesERNS3_12MuninContextEE3__1NS_9allocatorISM_EEFvvEED0Ev()
{
}

uint64_t _ZNKSt3__110__function6__funcIZN2md3mun10MuninLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextENS2_16ElevationContextEEEENSA_IJEEEEE20ResolvedDependenciesERNS3_12MuninContextEE3__0NS_9allocatorISM_EEFvvEE7__cloneEPNS0_6__baseISP_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF578A38;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN2md3mun10MuninLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextENS2_16ElevationContextEEEENSA_IJEEEEE20ResolvedDependenciesERNS3_12MuninContextEE3__0NS_9allocatorISM_EEFvvEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF578A38;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN2md3mun10MuninLogic15runBeforeLayoutERKNS2_13LayoutContextERKNS2_17LogicDependenciesIJN3gdc8TypeListIJNS2_12SceneContextENS2_13CameraContextENS2_16ElevationContextEEEENSA_IJEEEEE20ResolvedDependenciesERNS3_12MuninContextEE3__0NS_9allocatorISM_EEFvvEED0Ev()
{
}

uint64_t md::Logic<md::mun::MuninLogic,md::mun::MuninContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext,md::ElevationContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::mun::MuninLogic,md::mun::MuninContext,md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext,md::ElevationContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0x8EA84A1BD3791AFALL && (uint64_t v4 = *(void *)(a3 + 32)) != 0)
  {
    uint64_t v6 = result;
    md::LogicDependencies<gdc::TypeList<md::SceneContext,md::CameraContext,md::ElevationContext>,gdc::TypeList<>>::buildRequiredTuple<md::SceneContext,md::CameraContext,md::ElevationContext>(v7, **(void **)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, a2, v7, v4);
  }
  else
  {
    a4[23] = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t gdc::ObjectHolder<md::mun::MuninContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::mun::MuninContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555EB0;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0xC400A2AC0F1);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::mun::MuninContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555EB0;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0xC400A2AC0F1);
  }
  return a1;
}

void md::mun::MuninLogic::~MuninLogic(md::mun::MuninLogic *this)
{
  md::mun::MuninLogic::~MuninLogic(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  md::mun::MuninLogic *v6;

  *(void *)this = &unk_1EF550208;
  uint64_t v2 = *((void *)this + 20);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 21);
    uint64_t v4 = (void *)*((void *)this + 20);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 20);
    }
    *((void *)this + 21) = v2;
    operator delete(v4);
  }
  uint64_t v6 = (md::mun::MuninLogic *)*((void *)this + 18);
  if (v6 == (md::mun::MuninLogic *)((char *)this + 120))
  {
    (*(void (**)(char *))(*((void *)this + 15) + 32))((char *)this + 120);
  }
  else if (v6)
  {
    (*(void (**)(md::mun::MuninLogic *))(*(void *)v6 + 40))(v6);
  }
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

void ggl::BuildingShadow::MeshPipelineState::~MeshPipelineState(ggl::BuildingShadow::MeshPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::BuildingShadow::MeshPipelineSetup::textureIsEnabled(ggl::BuildingShadow::MeshPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::BuildingShadow::MeshPipelineSetup::constantDataIsEnabled(ggl::BuildingShadow::MeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

void ggl::BuildingShadow::MeshPipelineSetup::~MeshPipelineSetup(ggl::BuildingShadow::MeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

uint64_t md::ARLabelLayer::layoutWithoutStyles(md::ARLabelLayer *this, const md::LayoutContext *a2)
{
  return (*(uint64_t (**)(md::ARLabelLayer *, const md::LayoutContext *))(*(void *)this + 16))(this, a2);
}

void md::ARLabelLayer::layout(md::ARLabelLayer *this, const md::LayoutContext *a2)
{
  uint64_t v5 = (char *)this + 48;
  double v86 = (char *)this + 48;
  if (*((void *)this + 11))
  {
    uint64_t v6 = (void *)*((void *)this + 9);
    while (v6)
    {
      char v7 = v6;
      uint64_t v6 = (void *)*v6;
      float v8 = (std::__shared_weak_count *)v7[3];
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      (*(void (**)(void, void *, uint64_t))(**((void **)this + 10) + 40))(*((void *)this + 10), v7, 32);
    }
    *((void *)this + 9) = 0;
    uint64_t v9 = *((void *)this + 7);
    uint64_t v5 = v86;
    if (v9)
    {
      for (uint64_t i = 0; i != v9; ++i)
        *(void *)(*(void *)v86 + 8 * i) = 0;
    }
    *((void *)this + 11) = 0;
  }
  uint64_t v11 = (void *)*((void *)a2 + 1);
  unint64_t v12 = v11[1];
  if ((v12 & (v12 - 1)) != 0)
  {
    unint64_t v14 = 0x29BDA47DB65B52C8;
    if (v12 <= 0x29BDA47DB65B52C8) {
      unint64_t v14 = 0x29BDA47DB65B52C8 % v12;
    }
    uint64_t v13 = *(void **)(*v11 + 8 * v14);
    do
    {
      do
        uint64_t v13 = (void *)*v13;
      while (v13[1] != 0x29BDA47DB65B52C8);
    }
    while (v13[2] != 0x29BDA47DB65B52C8);
  }
  else
  {
    uint64_t v13 = *(void **)(*v11 + 8 * ((v12 - 1) & 0x29BDA47DB65B52C8));
    do
    {
      do
        uint64_t v13 = (void *)*v13;
      while (v13[1] != 0x29BDA47DB65B52C8);
    }
    while (v13[2] != 0x29BDA47DB65B52C8);
  }
  uint64_t v15 = **(void **)(v13[5] + 32);
  uint64_t v16 = *(void *)(v15 + 112);
  uint64_t v17 = *(void *)(v15 + 120);
  float v83 = a2;
  if (v16 != v17)
  {
    while (*(_WORD *)v16)
    {
      v16 += 112;
      if (v16 == v17)
      {
        uint64_t v16 = v17;
        break;
      }
    }
  }
  double v18 = *(uint64_t **)(v16 + 80);
  if (v18)
  {
    uint64_t v19 = (char *)this + 104;
    double v87 = (char *)this + 104;
    double v88 = (uint64_t *)((char *)this + 128);
    double v84 = (void *)((char *)this + 144);
    while (1)
    {
      uint64_t v20 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(v88, (unsigned __int8 *)v18 + 16);
      if (!v20) {
        goto LABEL_50;
      }
      long long v21 = v20;
      uint64_t v22 = (char *)v20[5];
      float v23 = (char *)operator new(0x40uLL);
      uint64_t v24 = v23;
      *((_WORD *)v23 + 8) = *((_WORD *)v22 + 8);
      *(void *)(v23 + 20) = *(void *)(v22 + 20);
      *((void *)v23 + 5) = *((void *)v22 + 5);
      uint64_t v25 = *((void *)v22 + 6);
      *((void *)v23 + 6) = v25;
      if (v25) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
      }
      *((void *)v23 + 7) = *((void *)v22 + 7);
      uint64_t v26 = *((void *)this + 13);
      *(void *)(v26 + 8) = v23;
      *((void *)this + 13) = v23;
      *(void *)float v23 = v26;
      *((void *)v23 + 1) = v19;
      uint64_t v27 = *((void *)this + 15);
      unint64_t v28 = (char *)*((void *)this + 21);
      if (v28 == v22) {
        break;
      }
      float v29 = v23;
      if (v28 == v19) {
        goto LABEL_36;
      }
LABEL_37:
      uint64_t v30 = *(void *)v22;
      *(void *)(v30 + 8) = *((void *)v22 + 1);
      **((void **)v22 + 1) = v30;
      *((void *)this + 15) = v27;
      uint64_t v2 = (std::__shared_weak_count *)*((void *)v22 + 6);
      if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
      operator delete(v22);
      v21[5] = (uint64_t)v24;
      if (v19 != v24)
      {
        unint64_t v31 = *((void *)v24 + 5);
        uint64_t v32 = *((void *)v24 + 6);
        if (v32) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
        }
        *((void *)&v89 + 1) = v32;
        *(void *)&long long v90 = v31;
        *((void *)&v90 + 1) = v32;
        if (v32) {
          goto LABEL_44;
        }
        goto LABEL_45;
      }
LABEL_50:
      std::allocate_shared[abi:nn180100]<md::StandardLabelMapTile,std::allocator<md::StandardLabelMapTile>,geo::QuadTile const&,void>((md::LabelMapTile **)&v90, (const QuadTile *)(v18 + 2));
      long long v35 = v90;
      long long v90 = 0uLL;
      long long v89 = v35;
      uint64_t v36 = *((unsigned __int8 *)v18 + 17);
      int v37 = *((_DWORD *)v18 + 5);
      int v38 = *((_DWORD *)v18 + 6);
      uint64_t v39 = *((unsigned __int8 *)v18 + 16);
      double v40 = (std::__shared_weak_count *)*((void *)&v35 + 1);
      if (*((void *)&v35 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 1uLL, memory_order_relaxed);
        DWORD2(v90) = v38;
        long long v91 = v35;
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      else
      {
        DWORD2(v90) = *((_DWORD *)v18 + 6);
        long long v91 = (unint64_t)v35;
      }
      LOBYTE(v90) = v39;
      BYTE1(v90) = v36;
      DWORD1(v90) = v37;
      uint64_t v92 = 0;
      double v41 = std::__hash_table<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::__unordered_map_hasher<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,geo::QuadTileHash,std::equal_to<geo::QuadTile>,true>,std::__unordered_map_equal<geo::QuadTile,std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>,std::equal_to<geo::QuadTile>,geo::QuadTileHash,true>,std::allocator<std::__hash_value_type<geo::QuadTile,std::unique_ptr<md::LabelMapTileSourceData>>>>::find<geo::QuadTile>(v88, (unsigned __int8 *)&v90);
      if (!v41)
      {
        float v50 = (char *)operator new(0x40uLL);
        float v51 = v50;
        unsigned char v50[16] = v39;
        v50[17] = v36;
        uint64_t v52 = *(void *)((char *)&v90 + 4);
        uint64_t v85 = *(void *)((char *)&v90 + 4);
        *(void *)(v50 + 20) = *(void *)((char *)&v90 + 4);
        *(_OWORD *)(v50 + 40) = v89;
        if (*((void *)&v89 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v89 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        *((void *)v50 + 7) = 0;
        uint64_t v53 = *((void *)this + 13);
        *(void *)(v53 + 8) = v50;
        *((void *)this + 13) = v50;
        *(void *)float v50 = v53;
        *((void *)v50 + 1) = v87;
        ++*((void *)this + 15);
        if (*((char **)this + 21) == v87) {
          *((void *)this + 21) = v50;
        }
        unint64_t v54 = (v36
             - 0x61C8864680B583EBLL
             + ((v39 - 0x61C8864680B583EBLL) << 6)
             + ((unint64_t)(v39 - 0x61C8864680B583EBLL) >> 2)) ^ (v39 - 0x61C8864680B583EBLL);
        unint64_t v55 = ((int)v52 - 0x61C8864680B583EBLL + (v54 << 6) + (v54 >> 2)) ^ v54;
        unint64_t v56 = (SHIDWORD(v52) - 0x61C8864680B583EBLL + (v55 << 6) + (v55 >> 2)) ^ v55;
        unint64_t v57 = *((void *)this + 17);
        if (v57)
        {
          uint8x8_t v58 = (uint8x8_t)vcnt_s8((int8x8_t)v57);
          v58.i16[0] = vaddlv_u8(v58);
          if (v58.u32[0] > 1uLL)
          {
            uint64_t v2 = (std::__shared_weak_count *)v56;
            if (v56 >= v57) {
              uint64_t v2 = (std::__shared_weak_count *)(v56 % v57);
            }
          }
          else
          {
            uint64_t v2 = (std::__shared_weak_count *)(v56 & (v57 - 1));
          }
          float v65 = *(uint64_t ***)(*v88 + 8 * (void)v2);
          if (v65)
          {
            float v66 = *v65;
            if (v66)
            {
              if (v58.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v68 = v66[1];
                  if (v68 == v56)
                  {
                    if (*((unsigned __int8 *)v66 + 16) == v39
                      && *((unsigned __int8 *)v66 + 17) == v36
                      && *(uint64_t *)((char *)v66 + 20) == v85)
                    {
                      goto LABEL_98;
                    }
                  }
                  else if ((std::__shared_weak_count *)(v68 & (v57 - 1)) != v2)
                  {
                    goto LABEL_99;
                  }
                  float v66 = (uint64_t *)*v66;
                  if (!v66) {
                    goto LABEL_99;
                  }
                }
              }
              do
              {
                unint64_t v67 = v66[1];
                if (v67 == v56)
                {
                  if (*((unsigned __int8 *)v66 + 16) == v39
                    && *((unsigned __int8 *)v66 + 17) == v36
                    && *(uint64_t *)((char *)v66 + 20) == v85)
                  {
LABEL_98:
                    uint64_t v5 = v86;
                    uint64_t v19 = (char *)this + 104;
                    goto LABEL_139;
                  }
                }
                else
                {
                  if (v67 >= v57) {
                    v67 %= v57;
                  }
                  if ((std::__shared_weak_count *)v67 != v2) {
                    break;
                  }
                }
                float v66 = (uint64_t *)*v66;
              }
              while (v66);
            }
          }
        }
LABEL_99:
        float v69 = operator new(0x30uLL);
        *float v69 = 0;
        v69[1] = v56;
        *((unsigned char *)v69 + 16) = v39;
        *((unsigned char *)v69 + 17) = v36;
        *(void *)((char *)v69 + 20) = v85;
        v69[5] = v51;
        float v70 = (float)(unint64_t)(*((void *)this + 19) + 1);
        float v71 = *((float *)this + 40);
        if (v57 && (float)(v71 * (float)v57) >= v70)
        {
          uint64_t v19 = (char *)this + 104;
        }
        else
        {
          uint64_t v19 = (char *)this + 104;
          BOOL v72 = v57 < 3 || (v57 & (v57 - 1)) != 0;
          unint64_t v73 = v72 | (2 * v57);
          unint64_t v74 = vcvtps_u32_f32(v70 / v71);
          if (v73 <= v74) {
            size_t prime = v74;
          }
          else {
            size_t prime = v73;
          }
          if (prime == 1)
          {
            size_t prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            size_t prime = std::__next_prime(prime);
            unint64_t v57 = *((void *)this + 17);
          }
          if (prime > v57) {
            goto LABEL_113;
          }
          if (prime < v57)
          {
            unint64_t v76 = vcvtps_u32_f32((float)*((unint64_t *)this + 19) / *((float *)this + 40));
            if (v57 < 3 || (uint8x8_t v77 = (uint8x8_t)vcnt_s8((int8x8_t)v57), v77.i16[0] = vaddlv_u8(v77), v77.u32[0] > 1uLL))
            {
              unint64_t v76 = std::__next_prime(v76);
            }
            else
            {
              uint64_t v78 = 1 << -(char)__clz(v76 - 1);
              if (v76 >= 2) {
                unint64_t v76 = v78;
              }
            }
            if (prime <= v76) {
              size_t prime = v76;
            }
            if (prime < v57) {
LABEL_113:
            }
              std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v88, prime);
          }
          unint64_t v57 = *((void *)this + 17);
          if ((v57 & (v57 - 1)) != 0)
          {
            if (v56 >= v57) {
              uint64_t v2 = (std::__shared_weak_count *)(v56 % v57);
            }
            else {
              uint64_t v2 = (std::__shared_weak_count *)v56;
            }
          }
          else
          {
            uint64_t v2 = (std::__shared_weak_count *)((v57 - 1) & v56);
          }
        }
        uint64_t v79 = *v88;
        float v80 = *(void **)(*v88 + 8 * (void)v2);
        uint64_t v5 = v86;
        if (v80)
        {
          *float v69 = *v80;
          goto LABEL_137;
        }
        *float v69 = *v84;
        void *v84 = v69;
        *(void *)(v79 + 8 * (void)v2) = v84;
        if (*v69)
        {
          unint64_t v81 = *(void *)(*v69 + 8);
          if ((v57 & (v57 - 1)) != 0)
          {
            if (v81 >= v57) {
              v81 %= v57;
            }
          }
          else
          {
            v81 &= v57 - 1;
          }
          float v80 = (void *)(*v88 + 8 * v81);
LABEL_137:
          *float v80 = v69;
        }
        ++*((void *)this + 19);
        goto LABEL_139;
      }
      double v42 = v41;
      double v43 = (char *)v41[5];
      double v44 = (char *)operator new(0x40uLL);
      float v45 = v44;
      v44[16] = v39;
      v44[17] = v36;
      *(void *)(v44 + 20) = *(void *)((char *)&v90 + 4);
      *(_OWORD *)(v44 + 40) = v89;
      if (*((void *)&v89 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v89 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      *((void *)v44 + 7) = 0;
      uint64_t v46 = *((void *)this + 13);
      *(void *)(v46 + 8) = v44;
      *((void *)this + 13) = v44;
      uint64_t v5 = v86;
      uint64_t v19 = (char *)this + 104;
      *(void *)double v44 = v46;
      *((void *)v44 + 1) = v87;
      uint64_t v47 = *((void *)this + 15);
      *((void *)this + 15) = v47 + 1;
      float v48 = (char *)*((void *)this + 21);
      if (v48 == v43)
      {
        float v49 = (char *)*((void *)v43 + 1);
LABEL_70:
        *((void *)this + 21) = v49;
        goto LABEL_71;
      }
      float v49 = v44;
      if (v48 == v87) {
        goto LABEL_70;
      }
LABEL_71:
      unint64_t v59 = *((void *)v43 + 7);
      unint64_t v60 = *((void *)this + 22);
      BOOL v61 = v60 >= v59;
      unint64_t v62 = v60 - v59;
      if (!v61) {
        unint64_t v62 = 0;
      }
      *((void *)this + 22) = v62;
      uint64_t v63 = *(void *)v43;
      *(void *)(v63 + 8) = *((void *)v43 + 1);
      **((void **)v43 + 1) = v63;
      *((void *)this + 15) = v47;
      long long v64 = (std::__shared_weak_count *)*((void *)v43 + 6);
      if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
      operator delete(v43);
      v42[5] = (uint64_t)v45;
      double v40 = (std::__shared_weak_count *)*((void *)&v91 + 1);
LABEL_139:
      if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
      if (*((void *)&v89 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v89 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(**((void **)&v89 + 1) + 16))(*((void *)&v89 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v89 + 1));
      }
      uint64_t v32 = *((void *)&v89 + 1);
      unint64_t v31 = v89;
      long long v90 = v89;
      if (*((void *)&v89 + 1)) {
LABEL_44:
      }
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
LABEL_45:
      std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__emplace_unique_key_args<std::shared_ptr<md::LabelMapTile>,std::shared_ptr<md::LabelMapTile>>((unint64_t)v5, v31, (uint64_t)&v90);
      double v33 = (std::__shared_weak_count *)*((void *)&v90 + 1);
      if (*((void *)&v90 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v90 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
        double v34 = (std::__shared_weak_count *)*((void *)&v89 + 1);
        if (*((void *)&v89 + 1))
        {
LABEL_48:
          if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
      }
      else
      {
        double v34 = (std::__shared_weak_count *)*((void *)&v89 + 1);
        if (*((void *)&v89 + 1)) {
          goto LABEL_48;
        }
      }
      double v18 = (uint64_t *)*v18;
      if (!v18) {
        goto LABEL_147;
      }
    }
    float v29 = (char *)*((void *)v22 + 1);
LABEL_36:
    *((void *)this + 21) = v29;
    goto LABEL_37;
  }
LABEL_147:
  uint64_t v82 = *((void *)this + 23);
  md::LabelManager::layout(v82, v83, (uint64_t)v5);
}

void sub_1A26A50DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23)
{
  operator delete(v23);
  geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry::~CacheEntry((uint64_t)&a23);
  geo::MarkedLRUCache<md::GeometryContext::SplineKey,std::shared_ptr<ggl::ConstantDataTyped<ggl::Tile::Transform>>,md::GeometryContext::SplineKeyHash,std::equal_to<md::GeometryContext::SplineKey>>::CacheEntry::~CacheEntry((uint64_t)&a16);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void md::ARLabelLayer::~ARLabelLayer(md::ARLabelLayer *this)
{
  md::ARLabelLayer::~ARLabelLayer(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  md::ARLabelLayer *v7;
  uint64_t v8;
  md::ARLabelLayer *v9;
  std::__shared_weak_count *v10;
  void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  void *v15;

  *(void *)this = &unk_1EF5311F0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (void *)*((void *)this + 18);
    if (!v3) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v3 = (void *)*((void *)this + 18);
    if (!v3) {
      goto LABEL_5;
    }
  }
  do
  {
    uint64_t v4 = (void *)*v3;
    operator delete(v3);
    uint64_t v3 = v4;
  }
  while (v4);
LABEL_5:
  uint64_t v5 = (void *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v5) {
    operator delete(v5);
  }
  if (*((void *)this + 15))
  {
    uint64_t v6 = *((void *)this + 13);
    char v7 = (md::ARLabelLayer *)*((void *)this + 14);
    float v8 = *(void *)v7;
    *(void *)(v8 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v8;
    *((void *)this + 15) = 0;
    if (v7 != (md::ARLabelLayer *)((char *)this + 104))
    {
      do
      {
        uint64_t v9 = (md::ARLabelLayer *)*((void *)v7 + 1);
        unint64_t v10 = (std::__shared_weak_count *)*((void *)v7 + 6);
        if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        operator delete(v7);
        char v7 = v9;
      }
      while (v9 != (md::ARLabelLayer *)((char *)this + 104));
    }
  }
  uint64_t v11 = (void *)*((void *)this + 9);
  while (v11)
  {
    unint64_t v12 = v11;
    uint64_t v11 = (void *)*v11;
    uint64_t v13 = (std::__shared_weak_count *)v12[3];
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    (*(void (**)(void, void *, uint64_t))(**((void **)this + 10) + 40))(*((void *)this + 10), v12, 32);
  }
  unint64_t v14 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v14) {
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 8) + 40))(*((void *)this + 8), v14, 8 * *((void *)this + 7));
  }
  *(void *)this = &unk_1EF530C60;
  uint64_t v15 = (void *)*((void *)this + 1);
  if (v15)
  {
    *((void *)this + 2) = v15;
    operator delete(v15);
  }
}

void md::HybridLabelMapTile::assignWorldPointToLabel(md::HybridLabelMapTile *this, md::Label *a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 63);
  if (v3)
  {
    double v5 = *((double *)this + 7);
    double v6 = *((double *)this + 5);
    char v7 = std::__shared_weak_count::lock(v3);
    uint64_t v52 = v7;
    if (v7)
    {
      float v8 = v7;
      uint64_t v9 = *((void *)this + 62);
      uint64_t v51 = v9;
      if (!v9) {
        goto LABEL_21;
      }
      v43[0] = 0;
      unint64_t v50 = 0xC7EFFFFFE0000000;
      unint64_t v10 = (md::LabelPoint *)(*(uint64_t (**)(void, char *))(**((void **)a2 + 1) + 112))(*((void *)a2 + 1), (char *)a2 + 48);
      float64x2_t v44 = vdivq_f64(vsubq_f64(*(float64x2_t *)md::LabelPoint::mercatorPoint(v10), *(float64x2_t *)((char *)this + 40)), (float64x2_t)vdupq_lane_s64(COERCE__INT64(*((double *)this + 7) - *((double *)this + 5)), 0));
      (*(void (**)(void *__return_ptr, double))(**((void **)a2 + 1) + 128))(v41, (v5 - v6) * 0.2);
      if (v42)
      {
        v43[0] = 1;
        float64x2_t v45 = vdivq_f64(vsubq_f64(*(float64x2_t *)md::LabelPoint::mercatorPoint((md::LabelPoint *)v41), *(float64x2_t *)((char *)this + 40)), (float64x2_t)vdupq_lane_s64(COERCE__INT64(*((double *)this + 7) - *((double *)this + 5)), 0));
      }
      uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9);
      if (((*(uint64_t (**)(uint64_t, char *))(*(void *)v11 + 24))(v11, v43) & 1) == 0) {
        goto LABEL_21;
      }
      long long v12 = v46;
      double v13 = v47;
      double v14 = sqrt(*(double *)&v46 * *(double *)&v46 + *((double *)&v46 + 1) * *((double *)&v46 + 1));
      double v15 = atan2(v47, v14 * 0.996647189);
      double v16 = atan2(*((long double *)&v12 + 1), *(long double *)&v12);
      __double2 v17 = __sincos_stret(v15);
      double v18 = atan2(v13 + v17.__sinval * v17.__sinval * 42841.3115 * v17.__sinval, v14 + v17.__cosval * v17.__cosval * -42697.6727 * v17.__cosval);
      __double2 v19 = __sincos_stret(v18);
      double v20 = v14 / v19.__cosval - 6378137.0 / sqrt(1.0 - v19.__sinval * v19.__sinval * 0.00669437999);
      long double v21 = tan(v18 * 0.5 + 0.785398163);
      if (v20 == 1.79769313e308)
      {
        float v23 = 3.4028e38;
      }
      else
      {
        float v22 = v20;
        float v23 = v22;
      }
      double v24 = atan(v21) * 2.0 + -1.57079633;
      long double v25 = fmod(v16 + 3.14159265, 6.28318531);
      double v26 = fmod(v25 + 6.28318531, 6.28318531) + -3.14159265;
      __double2 v27 = __sincos_stret(v24);
      double v28 = 6378137.0 / sqrt(1.0 - v27.__sinval * v27.__sinval * 0.00669437999);
      __double2 v29 = __sincos_stret(v26);
      double v30 = v28 * v27.__cosval * v29.__cosval;
      double v31 = v28 * v27.__cosval * v29.__sinval;
      double v32 = v27.__sinval * 0.99330562 * v28;
      double v33 = 1.0
          / sqrt(v30 * 2.45817226e-14 * (v30 * 2.45817226e-14)+ v31 * 2.45817226e-14 * (v31 * 2.45817226e-14)+ v32 * 2.4747391e-14 * (v32 * 2.4747391e-14));
      v35.f64[0] = v33 * (v30 * 2.45817226e-14);
      double v34 = v33 * (v31 * 2.45817226e-14);
      *((void *)a2 + 65) = *(void *)&v35.f64[0];
      v35.f64[1] = v34;
      double v36 = v33 * (v32 * 2.4747391e-14);
      BOOL v37 = v23 != 3.4028e38;
      float v38 = 0.0;
      if (v23 != 3.4028e38) {
        float v38 = v23;
      }
      *((float *)a2 + 47) = v38;
      *((unsigned char *)a2 + 192) = v37;
      *((unsigned char *)a2 + 835) = v37;
      *((double *)a2 + 62) = v30;
      *((double *)a2 + 63) = v31;
      *((double *)a2 + 64) = v32;
      double v39 = 0.0;
      if (v23 != 3.4028e38) {
        double v39 = v38;
      }
      double v40 = *((double *)a2 + 29) * v39;
      *((double *)a2 + 82) = v40;
      *((float64x2_t *)a2 + 34) = vmulq_n_f64(v35, v40);
      *((double *)a2 + 70) = v36 * v40;
      *((double *)a2 + 66) = v34;
      *((double *)a2 + 67) = v36;
      if (v43[0])
      {
        long long v55 = v46;
        long double v56 = v47;
        long long v53 = v48;
        uint64_t v54 = v49;
        operator new();
      }
      float v8 = v52;
      if (v52)
      {
LABEL_21:
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_1A26A58C0(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 - 192);
  _Unwind_Resume(a1);
}

double md::HybridLabelMapTile::worldPointFromMercatorPoint(uint64_t a1, float64x2_t *a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 504);
  if (!v3) {
    return 0.0;
  }
  double v5 = std::__shared_weak_count::lock(v3);
  double v15 = v5;
  double v6 = 0.0;
  if (v5)
  {
    char v7 = v5;
    uint64_t v8 = *(void *)(a1 + 496);
    uint64_t v14 = v8;
    if (v8)
    {
      float64x2_t v12 = vdivq_f64(vsubq_f64(*a2, *(float64x2_t *)(a1 + 40)), (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(double *)(a1 + 56) - *(double *)(a1 + 40)), 0));
      uint64_t v13 = 0;
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8);
      if ((*(unsigned int (**)(uint64_t, float64x2_t *, void))(*(void *)v9 + 16))(v9, &v12, 0)) {
        double v6 = v12.f64[0];
      }
      else {
        double v6 = 0.0;
      }
    }
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1A26A5A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::HybridLabelMapTile::~HybridLabelMapTile(md::HybridLabelMapTile *this)
{
  *(void *)this = &unk_1EF5390B8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 63);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  md::LabelMapTile::~LabelMapTile(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF5390B8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 63);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  md::LabelMapTile::~LabelMapTile(this);
}

void md::RouteLineSupport::~RouteLineSupport(md::RouteLineSupport *this)
{
  md::RouteLineSupport::~RouteLineSupport(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  md::LabelRoute *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;

  *(void *)this = &unk_1EF536980;
  *((void *)this + 47) = &unk_1EF5188E0;

  *((void *)this + 44) = &unk_1EF559438;
  std::__tree<std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,mdm::Allocator>>::destroy((uint64_t)this + 320, *((void *)this + 41));
  uint64_t v2 = *((void *)this + 36);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 37);
    uint64_t v4 = *((void *)this + 36);
    if (v3 != v2)
    {
      do
      {
        double v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *((void *)this + 36);
    }
    *((void *)this + 37) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 39) + 40))(*((void *)this + 39), v4, *((void *)this + 38) - v4);
  }
  double v6 = *((void *)this + 33);
  if (v6)
  {
    char v7 = *((void *)this + 34);
    uint64_t v8 = (void *)*((void *)this + 33);
    if (v7 != v6)
    {
      do
      {
        uint64_t v9 = *(std::__shared_weak_count **)(v7 - 8);
        if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        v7 -= 16;
      }
      while (v7 != v6);
      uint64_t v8 = (void *)*((void *)this + 33);
    }
    *((void *)this + 34) = v6;
    operator delete(v8);
  }
  unint64_t v10 = *((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v10) {
    MEMORY[0x1A6239270](v10, 0x20C4093837F09);
  }

  uint64_t v11 = (md::LabelRoute *)*((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v11)
  {
    md::LabelRoute::~LabelRoute(v11);
    MEMORY[0x1A6239270]();
  }
  *((void *)this + 22) = &unk_1EF559D18;

  float64x2_t v12 = (void *)*((void *)this + 18);
  if (v12)
  {
    do
    {
      uint64_t v13 = (void *)*v12;
      (*(void (**)(void))(**((void **)this + 19) + 40))(*((void *)this + 19));
      float64x2_t v12 = v13;
    }
    while (v13);
  }
  uint64_t v14 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v14) {
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 17) + 40))(*((void *)this + 17), v14, 8 * *((void *)this + 16));
  }
  double v15 = *((void *)this + 11);
  if (v15)
  {
    double v16 = *((void *)this + 12);
    __double2 v17 = *((void *)this + 11);
    if (v16 != v15)
    {
      do
      {
        double v18 = *(std::__shared_weak_count **)(v16 - 8);
        if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v18->__on_zero_shared)(v18, v17);
          std::__shared_weak_count::__release_weak(v18);
        }
        v16 -= 16;
      }
      while (v16 != v15);
      __double2 v17 = *((void *)this + 11);
    }
    *((void *)this + 12) = v15;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 14) + 40))(*((void *)this + 14), v17, *((void *)this + 13) - v17);
  }
  __double2 v19 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  std::__tree<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,mdm::Allocator>>::destroy((uint64_t)this + 40, *((void *)this + 6));
  *((void *)this + 2) = &unk_1EF5595D8;
}

uint64_t std::__tree<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,mdm::Allocator>>::destroy(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    std::__tree<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,mdm::Allocator>>::destroy(result, *(void *)a2);
    std::__tree<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,mdm::Allocator>>::destroy(v3, *(void *)(a2 + 8));
    uint64_t v4 = *(void *)(a2 + 88);
    if (v4)
    {
      uint64_t v5 = *(void *)(a2 + 96);
      uint64_t v6 = *(void *)(a2 + 88);
      if (v5 != v4)
      {
        do
        {
          char v7 = *(std::__shared_weak_count **)(v5 - 8);
          if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v7->__on_zero_shared)(v7, v6);
            std::__shared_weak_count::__release_weak(v7);
          }
          v5 -= 16;
        }
        while (v5 != v4);
        uint64_t v6 = *(void *)(a2 + 88);
      }
      *(void *)(a2 + 96) = v4;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 112) + 40))(*(void *)(a2 + 112), v6, *(void *)(a2 + 104) - v6);
    }
    uint64_t v8 = *(void *)(a2 + 56);
    if (v8)
    {
      uint64_t v9 = *(void *)(a2 + 64);
      uint64_t v10 = *(void *)(a2 + 56);
      if (v9 != v8)
      {
        do
        {
          uint64_t v11 = *(std::__shared_weak_count **)(v9 - 8);
          if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v11->__on_zero_shared)(v11, v10);
            std::__shared_weak_count::__release_weak(v11);
          }
          v9 -= 16;
        }
        while (v9 != v8);
        uint64_t v10 = *(void *)(a2 + 56);
      }
      *(void *)(a2 + 64) = v8;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 80) + 40))(*(void *)(a2 + 80), v10, *(void *)(a2 + 72) - v10);
    }
    float64x2_t v12 = *(std::__shared_weak_count **)(a2 + 48);
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }

    uint64_t v13 = *(uint64_t (**)(void))(**(void **)(v3 + 16) + 40);
    return v13();
  }
  return result;
}

void geo::_retain_ptr<VKRouteLineObserverForExternalFeatures * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5188E0;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<VKRouteLineObserverForExternalFeatures * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF5188E0;

  return a1;
}

uint64_t md::RouteLineSupport::onRouteContextStateDidChange(uint64_t this, VKRouteContext *a2)
{
  if (a2)
  {
    uint64_t v2 = this;
    this = [*(id *)(this + 24) resetNotificationsForObserverType:2];
    *(unsigned char *)(v2 + 250) = 1;
  }
  return this;
}

void md::RouteLineSupport::updateRouteLine(md::RouteLineSupport *this, VKRouteLine *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  uint64_t v4 = (md::LabelManager *)*((void *)this + 1);
  v5[0] = &unk_1EF51DE28;
  v5[1] = this;
  uint64_t v6 = v5;
  md::LabelManager::queueCommand(v4, 71, 1, v5);
  if (v6 == v5)
  {
    (*(void (**)(void *))(v5[0] + 32))(v5);
  }
  else if (v6)
  {
    (*(void (**)(void))(*v6 + 40))();
  }
}

void sub_1A26A636C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(void)>::~function((uint64_t *)va);

  _Unwind_Resume(a1);
}

void std::__function::__func<md::RouteLineSupport::updateRouteLine(VKRouteLine *)::$_0,std::allocator<md::RouteLineSupport::updateRouteLine(VKRouteLine *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
}

void md::RouteLineSupport::generateRoutelineFeatures(id *this)
{
  uint64_t v414 = *MEMORY[0x1E4F143B8];
  md::RouteLineSupport::clearRouteLabelFeatures((md::RouteLineSupport *)this);
  if (!this[3]) {
    return;
  }
  id v2 = this[45];
  if (!v2) {
    return;
  }
  id v357 = this[32];
  id v351 = v2;
  id v352 = this[3];
  uint64_t v3 = [v352 routeInfo];
  id v365 = v351;
  id v355 = v3;
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v389 = 0u;
  long long v390 = 0u;
  long long v387 = 0u;
  long long v388 = 0u;
  uint64_t v5 = [v355 travelDirectionAnnotations];
  uint64_t v358 = this;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v387 objects:v403 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v388;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v388 != v7) {
          objc_enumerationMutation(v5);
        }
        [v4 addObject:*(void *)(*((void *)&v387 + 1) + 8 * i)];
      }
      uint64_t v6 = [v5 countByEnumeratingWithState:&v387 objects:v403 count:16];
    }
    while (v6);
  }

  uint64_t v9 = v4;
  uint64_t v10 = v355;
  if (![v4 count])
  {
    uint64_t v11 = [v355 routeNameAnnotations];
    BOOL v12 = [v11 count] == 0;

    uint64_t v10 = v355;
    uint64_t v9 = v4;
    if (!v12)
    {
      uint64_t v13 = [VKRouteRangeAnnotationInfo alloc];
      uint64_t v14 = [v355 route];
      uint64_t v15 = [v14 startRouteCoordinate];
      double v16 = [v355 route];
      __double2 v17 = -[VKRouteRangeAnnotationInfo initWithEtaDescription:start:end:](v13, "initWithEtaDescription:start:end:", 0, v15, [v16 endRouteCoordinate]);

      [v4 addObject:v17];
      uint64_t v10 = v355;
      uint64_t v9 = v4;
    }
  }
  long long v385 = 0u;
  long long v386 = 0u;
  long long v383 = 0u;
  long long v384 = 0u;
  obuint64_t j = v9;
  unint64_t v18 = [obj countByEnumeratingWithState:&v383 objects:v402 count:16];
  if (!v18) {
    goto LABEL_497;
  }
  uint64_t v356 = 0;
  uint64_t v353 = *(void *)v384;
  for (uint64_t j = *(void *)v384; ; uint64_t j = *(void *)v384)
  {
    if (j != v353) {
      objc_enumerationMutation(obj);
    }
    double v20 = *(void **)(*((void *)&v383 + 1) + 8 * v356);
    uint64_t v21 = [v20 start];
    uint64_t v359 = v20;
    uint64_t v400 = [v20 end];
    uint64_t v401 = v21;
    id v22 = v10;
    std::string __p = 0;
    uint64_t v398 = 0;
    unint64_t v399 = 0;
    long long v393 = 0u;
    long long v394 = 0u;
    long long v395 = 0u;
    long long v396 = 0u;
    id v364 = v22;
    [v22 routeNameAnnotations];
    unint64_t v360 = v18;
    id v376 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v23 = [v376 countByEnumeratingWithState:&v393 objects:&v404 count:16];
    if (!v23)
    {

      unint64_t v26 = 0;
      unint64_t v25 = 0;
      double v24 = 0;
      BOOL v61 = 1;
LABEL_81:
      float v69 = v398;
      if (v398 >= v399)
      {
        float v71 = (char *)__p;
        uint64_t v72 = (v398 - (unsigned char *)__p) >> 5;
        unint64_t v73 = v72 + 1;
        if ((unint64_t)(v72 + 1) >> 59) {
          abort();
        }
        uint64_t v74 = v399 - (unsigned char *)__p;
        if ((v399 - (unsigned char *)__p) >> 4 > v73) {
          unint64_t v73 = v74 >> 4;
        }
        if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v75 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v75 = v73;
        }
        if (v75 >> 59) {
LABEL_533:
        }
          std::__throw_bad_array_new_length[abi:nn180100]();
        unint64_t v76 = (char *)operator new(32 * v75);
        uint8x8_t v77 = &v76[32 * v72];
        *uint8x8_t v77 = 0;
        v77[8] = 0;
        uint64_t v78 = v400;
        *((void *)v77 + 2) = v401;
        *((void *)v77 + 3) = v78;
        if (v69 == v71)
        {
          std::string __p = v77;
          unint64_t v399 = &v76[32 * v75];
          uint64_t v68 = v77 + 32;
          if (!v69) {
            goto LABEL_104;
          }
        }
        else
        {
          uint64_t v79 = 0;
          do
          {
            float v80 = &v77[v79];
            unint64_t v81 = &v69[v79];
            *(v80 - 32) = 0;
            *(v80 - 24) = 0;
            if (v69[v79 - 24])
            {
              uint64_t v82 = *((void *)v81 - 4);
              *((void *)v81 - 4) = 0;
              *((void *)v80 - 4) = v82;
              *(v80 - 24) = 1;
            }
            *((_OWORD *)v80 - 1) = *((_OWORD *)v81 - 1);
            v79 -= 32;
          }
          while (&v69[v79] != v71);
          std::string __p = &v77[v79];
          unint64_t v399 = &v76[32 * v75];
          do
          {
            if (*(v69 - 24)) {

            }
            v69 -= 32;
          }
          while (v69 != v71);
          float v69 = v71;
          uint64_t v68 = v77 + 32;
          if (!v69) {
            goto LABEL_104;
          }
        }
        operator delete(v69);
      }
      else
      {
        *uint64_t v398 = 0;
        v69[8] = 0;
        uint64_t v70 = v400;
        *((void *)v69 + 2) = v401;
        *((void *)v69 + 3) = v70;
        uint64_t v68 = v69 + 32;
      }
LABEL_104:
      uint64_t v398 = v68;
      unint64_t v62 = (uint64_t)(v25 - (void)v24) >> 5;
      goto LABEL_107;
    }
    double v24 = 0;
    unint64_t v25 = 0;
    unint64_t v26 = 0;
    uint64_t v380 = *(void *)v394;
    do
    {
      uint64_t v27 = 0;
      uint64_t v378 = v23;
      do
      {
        if (*(void *)v394 != v380) {
          objc_enumerationMutation(v376);
        }
        double v28 = *(void **)(*((void *)&v393 + 1) + 8 * v27);
        uint64_t v29 = [v28 start];
        unsigned int v32 = v400;
        if (v400 > v29
          || ((LODWORD(v30) = HIDWORD(v29), LODWORD(v31) = HIDWORD(v400), v400 == v29)
            ? (BOOL v33 = *((float *)&v400 + 1) < *((float *)&v29 + 1))
            : (BOOL v33 = 1),
              !v33))
        {
          uint64_t v34 = [v28 end];
          unsigned int v35 = v401;
          if (v401 < v34
            || ((LODWORD(v30) = HIDWORD(v34), LODWORD(v31) = HIDWORD(v401), v401 == v34)
              ? (BOOL v36 = *((float *)&v401 + 1) <= *((float *)&v34 + 1))
              : (BOOL v36 = 0),
                v36))
          {
            BOOL v37 = objc_msgSend(v28, "etaDescription", v30, v31);
            uint64_t v38 = [v37 etaText];
            uint64_t v39 = [v28 start];
            uint64_t v392 = v39;
            if (v35 < v39
              || v35 == v39
              && (LODWORD(v40) = HIDWORD(v39), LODWORD(v41) = HIDWORD(v401),
                                               *((float *)&v401 + 1) < *((float *)&v39 + 1)))
            {
              char v42 = &v392;
            }
            else
            {
              char v42 = &v401;
            }
            uint64_t v43 = objc_msgSend(v28, "end", v40, v41);
            uint64_t v391 = v43;
            if (v32 > v43 || v32 == v43 && *((float *)&v400 + 1) > *((float *)&v43 + 1))
            {
              float64x2_t v44 = &v391;
              if (v25 >= v26) {
                goto LABEL_46;
              }
            }
            else
            {
              float64x2_t v44 = &v400;
              if (v25 >= v26)
              {
LABEL_46:
                unint64_t v46 = v26;
                uint64_t v47 = (uint64_t)(v25 - (void)v24) >> 5;
                unint64_t v48 = v47 + 1;
                if ((unint64_t)(v47 + 1) >> 59) {
                  abort();
                }
                unint64_t v49 = v46 - (void)v24;
                unint64_t v50 = (uint64_t)(v46 - (void)v24) >> 4;
                if (v50 > v48) {
                  unint64_t v48 = v50;
                }
                if (v49 >= 0x7FFFFFFFFFFFFFE0) {
                  unint64_t v51 = 0x7FFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v51 = v48;
                }
                if (v51 >> 59) {
                  goto LABEL_533;
                }
                uint64_t v52 = (char *)operator new(32 * v51);
                long long v53 = &v52[32 * v47];
                *(void *)long long v53 = v38;
                v53[8] = 1;
                uint64_t v54 = *v44;
                *((void *)v53 + 2) = *v42;
                *((void *)v53 + 3) = v54;
                if ((char *)v25 == v24)
                {
                  unint64_t v59 = v53;
                  uint64_t v23 = v378;
                }
                else
                {
                  uint64_t v55 = 0;
                  uint64_t v23 = v378;
                  do
                  {
                    long double v56 = &v53[v55];
                    uint64_t v57 = v25 + v55;
                    *(v56 - 32) = 0;
                    *(v56 - 24) = 0;
                    if (*(unsigned char *)(v25 + v55 - 24))
                    {
                      uint64_t v58 = *(void *)(v57 - 32);
                      *(void *)(v57 - 32) = 0;
                      *((void *)v56 - 4) = v58;
                      *(v56 - 24) = 1;
                    }
                    *((_OWORD *)v56 - 1) = *(_OWORD *)(v57 - 16);
                    v55 -= 32;
                  }
                  while ((char *)(v25 + v55) != v24);
                  unint64_t v59 = &v53[v55];
                  do
                  {
                    if (*(unsigned char *)(v25 - 24)) {

                    }
                    v25 -= 32;
                  }
                  while ((char *)v25 != v24);
                }
                unint64_t v60 = &v52[32 * v51];
                unint64_t v25 = (unint64_t)(v53 + 32);
                if (v24) {
                  operator delete(v24);
                }
                double v24 = v59;
                unint64_t v26 = (unint64_t)v60;
                goto LABEL_66;
              }
            }
            *(void *)unint64_t v25 = v38;
            *(unsigned char *)(v25 + 8) = 1;
            uint64_t v45 = *v44;
            *(void *)(v25 + 16) = *v42;
            *(void *)(v25 + 24) = v45;
            v25 += 32;
            uint64_t v23 = v378;
LABEL_66:
          }
        }
        ++v27;
      }
      while (v27 != v23);
      uint64_t v23 = objc_msgSend(v376, "countByEnumeratingWithState:objects:count:", &v393, &v404, 16, v30, v31);
    }
    while (v23);

    BOOL v61 = v24 == (char *)v25;
    if (v24 == (char *)v25) {
      goto LABEL_81;
    }
    unint64_t v62 = (uint64_t)(v25 - (void)v24) >> 5;
    std::__introsort<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *,false>((uint64_t)v24, v25, 126 - 2 * __clz(v62), 1);
    uint64_t v63 = v401;
    float v64 = *((float *)&v401 + 1);
    float v65 = v24;
    do
    {
      if (v63 != *((_DWORD *)v65 + 4) || vabds_f32(v64, *((float *)v65 + 5)) >= 0.00000011921)
      {
        unint64_t v67 = v398;
        if (v398 < v399)
        {
          *uint64_t v398 = 0;
          v67[8] = 0;
          *((void *)v67 + 2) = v63;
          *((void *)v67 + 3) = *((void *)v65 + 2);
          float v66 = v67 + 32;
        }
        else
        {
          float v66 = std::vector<md::RoadNameWithRange>::__emplace_back_slow_path<std::nullopt_t const&,geo::PolylineCoordinate &,geo::PolylineCoordinate const&>(&__p, v63, *((void *)v65 + 2));
        }
        uint64_t v398 = v66;
      }
      uint64_t v63 = *((void *)v65 + 3);
      v65 += 32;
      float v64 = *((float *)&v63 + 1);
    }
    while (v65 != (char *)v25);
    if (v400 == v63)
    {
      uint64_t v68 = v398;
      if (vabds_f32(*((float *)&v63 + 1), *((float *)&v400 + 1)) < 0.00000011921) {
        goto LABEL_107;
      }
    }
    else
    {
      uint64_t v68 = v398;
    }
    if (v68 >= v399)
    {
      uint64_t v68 = std::vector<md::RoadNameWithRange>::__emplace_back_slow_path<std::nullopt_t const&,geo::PolylineCoordinate &,geo::PolylineCoordinate const&>(&__p, v63, v400);
    }
    else
    {
      *uint64_t v68 = 0;
      v68[8] = 0;
      uint64_t v83 = v400;
      *((void *)v68 + 2) = v63;
      *((void *)v68 + 3) = v83;
      v68 += 32;
    }
    uint64_t v398 = v68;
LABEL_107:
    unint64_t v84 = v25;
    uint64_t v85 = (char *)__p;
    uint64_t v86 = v68 - (unsigned char *)__p;
    if (v68 - (unsigned char *)__p < 1)
    {
      uint64_t v375 = v24;
      long long v91 = (char *)v25;
      uint64_t v92 = (char *)__p;
      if (!__p) {
        goto LABEL_187;
      }
      goto LABEL_181;
    }
    uint64_t v87 = v86 >> 5;
    double v88 = &v24[32 * v62];
    if (v86 >> 5 <= (uint64_t)(v26 - v25) >> 5)
    {
      uint64_t v93 = v25 - (void)v88;
      uint64_t v94 = (uint64_t)(v25 - (void)v88) >> 5;
      if (v94 >= v87)
      {
        double v95 = (char *)__p + 32 * v87;
        unint64_t v99 = v25;
      }
      else
      {
        double v95 = (char *)__p + 32 * v94;
        unint64_t v96 = v25;
        if (v95 != v68)
        {
          uint64_t v97 = 0;
          do
          {
            uint64_t v98 = v25 + v97;
            *(unsigned char *)uint64_t v98 = 0;
            *(unsigned char *)(v98 + 8) = 0;
            if (v95[v97 + 8])
            {
              *(void *)(v25 + v97) = *(id *)&v95[v97];
              *(unsigned char *)(v98 + 8) = 1;
            }
            *(_OWORD *)(v98 + 16) = *(_OWORD *)&v95[v97 + 16];
            v97 += 32;
          }
          while (&v95[v97] != v68);
          unint64_t v96 = v25 + v97;
          uint64_t v93 = v25 - (void)v88;
          unint64_t v84 = v25;
        }
        unint64_t v117 = v96 - v84;
        unint64_t v99 = v25 + v117;
        if (v93 < 1)
        {
          uint64_t v375 = v24;
          long long v91 = (char *)(v25 + v117);
          uint64_t v92 = (char *)__p;
          if (__p) {
            goto LABEL_181;
          }
          goto LABEL_187;
        }
        unint64_t v84 = v25 + v117;
      }
      uint64_t v118 = 32 * v87;
      unint64_t v119 = v84 - 32 * v87;
      double v120 = (char *)v99;
      if (v119 < v25)
      {
        unint64_t v121 = v99;
        uint64_t v122 = 0;
        do
        {
          uint64_t v123 = v121 + v122;
          *(unsigned char *)uint64_t v123 = 0;
          *(unsigned char *)(v123 + 8) = 0;
          if (*(unsigned char *)(v119 + v122 + 8))
          {
            uint64_t v124 = *(void *)(v119 + v122);
            *(void *)(v119 + v122) = 0;
            *(void *)(v121 + v122) = v124;
            *(unsigned char *)(v123 + 8) = 1;
          }
          *(_OWORD *)(v123 + 16) = *(_OWORD *)(v119 + v122 + 16);
          v122 += 32;
        }
        while (v119 + v122 < v25);
        unint64_t v99 = v121;
        double v120 = (char *)(v121 + v122);
      }
      float v125 = &v88[v118];
      if ((char *)v99 != v125)
      {
        uint64_t v126 = 32 * ((uint64_t)(v84 - (void)v125) >> 5);
        unint64_t v127 = v99 - 32;
        do
        {
          uint64_t v129 = &v88[v126];
          if (*(unsigned __int8 *)(v127 + 8) == v88[v126 - 24])
          {
            if (*(unsigned char *)(v127 + 8))
            {
              uint64_t v130 = *((void *)v129 - 4);
              *((void *)v129 - 4) = 0;
              id v131 = *(id *)v127;
              *(void *)unint64_t v127 = v130;
            }
          }
          else if (*(unsigned char *)(v127 + 8))
          {

            *(unsigned char *)(v127 + 8) = 0;
          }
          else
          {
            uint64_t v128 = *((void *)v129 - 4);
            *((void *)v129 - 4) = 0;
            *(void *)unint64_t v127 = v128;
            *(unsigned char *)(v127 + 8) = 1;
          }
          *(_OWORD *)(v127 + 16) = *(_OWORD *)&v88[v126 - 16];
          v127 -= 32;
          v126 -= 32;
        }
        while (v126);
      }
      if (v95 != v85)
      {
        uint64_t v132 = 0;
        do
        {
          uint8x8_t v133 = &v88[v132];
          if (v88[v132 + 8] == v85[v132 + 8])
          {
            if (v88[v132 + 8]) {
              objc_storeStrong((id *)&v88[v132], *(id *)&v85[v132]);
            }
          }
          else if (v88[v132 + 8])
          {

            v133[8] = 0;
          }
          else
          {
            *(void *)uint8x8_t v133 = *(id *)&v85[v132];
            v133[8] = 1;
          }
          *(_OWORD *)&v88[v132 + 16] = *(_OWORD *)&v85[v132 + 16];
          v132 += 32;
        }
        while (&v85[v132] != v95);
      }
      uint64_t v375 = v24;
      long long v91 = v120;
LABEL_180:
      uint64_t v92 = (char *)__p;
      if (!__p) {
        goto LABEL_187;
      }
      goto LABEL_181;
    }
    unint64_t v89 = v62 + v87;
    if ((v62 + v87) >> 59) {
      abort();
    }
    if ((uint64_t)(v26 - (void)v24) >> 4 > v89) {
      unint64_t v89 = (uint64_t)(v26 - (void)v24) >> 4;
    }
    if (v26 - (unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v89 = 0x7FFFFFFFFFFFFFFLL;
    }
    BOOL v381 = v61;
    if (!v89)
    {
      long long v90 = 0;
      goto LABEL_127;
    }
    if (v89 >> 59) {
      goto LABEL_533;
    }
    long long v90 = (char *)operator new(32 * v89);
LABEL_127:
    uint64_t v100 = 32 * v62;
    float v101 = &v90[32 * v62];
    uint64_t v102 = 32 * v87;
    uint64_t v367 = &v101[v102];
    uint64_t v375 = v101;
    float v103 = v101 + 8;
    float v104 = (id *)(v85 + 16);
    uint64_t v105 = v102;
    do
    {
      *(v103 - 8) = 0;
      char *v103 = 0;
      if (*((unsigned char *)v104 - 8))
      {
        *((void *)v103 - 1) = *(v104 - 2);
        char *v103 = 1;
      }
      long long v106 = *(_OWORD *)v104;
      v104 += 4;
      *(_OWORD *)(v103 + 8) = v106;
      v103 += 32;
      v105 -= 32;
    }
    while (v105);
    long long v91 = v367;
    if (v62)
    {
      uint64_t v107 = 0;
      float v108 = v24;
      float v109 = v90;
      do
      {
        float v110 = &v109[v100];
        float v111 = &v108[v100];
        *(v110 - 32) = 0;
        *(v110 - 24) = 0;
        if (v108[v100 - 24])
        {
          uint64_t v112 = *((void *)v111 - 4);
          *((void *)v111 - 4) = 0;
          *((void *)v110 - 4) = v112;
          *(v110 - 24) = 1;
        }
        v108 -= 32;
        *((_OWORD *)v110 - 1) = *((_OWORD *)v111 - 1);
        v109 -= 32;
        v107 += 32;
      }
      while (v100 != v107);
      uint64_t v375 = &v109[v100];
    }
    if ((char *)v25 != v88)
    {
      double v113 = &v90[v102];
      double v114 = v24;
      do
      {
        float v115 = &v113[v100];
        char *v115 = 0;
        v115[8] = 0;
        if (v114[v100 + 8])
        {
          uint64_t v116 = *(void *)&v114[32 * v62];
          *(void *)&v114[32 * v62] = 0;
          *(void *)&v113[32 * v62] = v116;
          v115[8] = 1;
        }
        *((_OWORD *)v115 + 1) = *(_OWORD *)&v114[v100 + 16];
        v114 += 32;
        v113 += 32;
      }
      while (&v114[v100] != (char *)v25);
      long long v91 = &v113[v100];
    }
    if (!v381)
    {
      do
      {
        if (*(unsigned char *)(v25 - 24)) {

        }
        v25 -= 32;
      }
      while ((char *)v25 != v24);
    }
    if (!v24) {
      goto LABEL_180;
    }
    operator delete(v24);
    uint64_t v92 = (char *)__p;
    if (!__p) {
      goto LABEL_187;
    }
LABEL_181:
    for (k = v398; k != v92; k -= 32)
    {
      if (*(k - 24)) {
    }
      }
    operator delete(v92);
LABEL_187:

    unint64_t v135 = v375;
    unint64_t v18 = v360;
    uint64_t v136 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    uint64_t v368 = v91;
    if (v375 == v91)
    {
      if (v375) {
        goto LABEL_488;
      }
      goto LABEL_489;
    }
    while (2)
    {
      if (!v135[8])
      {
        unint64_t v137 = [v359 etaDescription];
        BOOL v138 = v137 == 0;

        unint64_t v18 = v360;
        uint64_t v136 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
        if (v138) {
          goto LABEL_190;
        }
      }
      uint64_t v139 = (std::__shared_weak_count *)operator new(0x150uLL);
      v139->__shared_owners_ = 0;
      p_uint64_t shared_owners = &v139->__shared_owners_;
      v139->__shared_weak_owners_ = 0;
      v139->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581AD0;
      float v140 = v139 + 1;
      LOWORD(v139[1].__shared_owners_) = 2;
      *(_OWORD *)&v139[1].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v139[2].__shared_owners_ = 0u;
      v139[3].std::__shared_count = 0u;
      *(_OWORD *)&v139[3].__shared_weak_owners_ = 0u;
      v139[4].__shared_owners_ = 0x7FFFFFFF437C0000;
      LOBYTE(v139[4].__shared_weak_owners_) = 0;
      v139[6].__shared_owners_ = 0;
      v139[6].__shared_weak_owners_ = 0;
      v139[6].__vftable = 0;
      v139[8].__vftable = 0;
      v139[5].__vftable = 0;
      v139[5].__shared_owners_ = 0;
      LOBYTE(v139[5].__shared_weak_owners_) = 0;
      v139[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF545218;
      LOWORD(v139[8].__shared_owners_) = 0;
      *(_OWORD *)&v139[8].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v139[9].__shared_owners_ = 0u;
      v139[10].std::__shared_count = 0u;
      {
        operator new();
      }
      v139[10].__shared_weak_owners_ = *((void *)v136 + 91);
      v139[11].__vftable = 0;
      v139[11].__shared_owners_ = 0;
      v139[11].__shared_weak_owners_ = 0;
      {
        operator new();
      }
      v139[12].__vftable = (std::__shared_weak_count_vtbl *)*((void *)v136 + 91);
      v139[12].__shared_owners_ = 0;
      v139[12].__shared_weak_owners_ = 0;
      v139[13].__vftable = 0;
      {
        operator new();
      }
      v139[13].__shared_owners_ = *((void *)v136 + 91);
      LOBYTE(v139[13].__shared_weak_owners_) = 4;
      uint64_t v142 = (std::__shared_weak_count **)v358[34];
      unint64_t v141 = (std::__shared_weak_count **)v358[35];
      uint64_t v371 = v135;
      if (v142 < v141)
      {
        long long *v142 = v140;
        v142[1] = v139;
        atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
        unint64_t v143 = v142 + 2;
        goto LABEL_216;
      }
      unint64_t v144 = (char *)v358[33];
      uint64_t v145 = ((char *)v142 - v144) >> 4;
      unint64_t v146 = v145 + 1;
      if ((unint64_t)(v145 + 1) >> 60) {
        abort();
      }
      uint64_t v147 = (char *)v141 - v144;
      if (v147 >> 3 > v146) {
        unint64_t v146 = v147 >> 3;
      }
      unint64_t v148 = (unint64_t)v147 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v146;
      if (v148 >> 60) {
        goto LABEL_533;
      }
      uint64_t v149 = (char *)operator new(16 * v148);
      uint64_t v150 = (std::__shared_weak_count **)&v149[16 * v145];
      uint64_t v151 = &v149[16 * v148];
      *uint64_t v150 = v140;
      v150[1] = v139;
      atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v143 = v150 + 2;
      if (v142 == (std::__shared_weak_count **)v144)
      {
        v358[33] = v150;
        v358[34] = v143;
        v358[35] = v151;
      }
      else
      {
        do
        {
          long long v152 = *((_OWORD *)v142 - 1);
          v142 -= 2;
          *((_OWORD *)v150 - 1) = v152;
          v150 -= 2;
          long long *v142 = 0;
          v142[1] = 0;
        }
        while (v142 != (std::__shared_weak_count **)v144);
        uint64_t v142 = (std::__shared_weak_count **)v358[33];
        size_t v153 = (std::__shared_weak_count **)v358[34];
        v358[33] = v150;
        v358[34] = v143;
        v358[35] = v151;
        while (v153 != v142)
        {
          char v154 = *(v153 - 1);
          if (v154 && !atomic_fetch_add(&v154->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
            std::__shared_weak_count::__release_weak(v154);
          }
          v153 -= 2;
        }
      }
      if (v142) {
        operator delete(v142);
      }
LABEL_216:
      v358[34] = v143;
      {
        operator new();
      }
      uint64_t v366 = *((void *)v136 + 91);
      long long v91 = v368;
      size_t v155 = [v359 etaDescription];
      unint64_t v374 = [v155 styleAttributes];

      if (!v374)
      {
        uint64_t v176 = 0;
        uint64_t v156 = 0;
        unint64_t v377 = 0;
        goto LABEL_259;
      }
      unint64_t v377 = 0;
      uint64_t v156 = 0;
      unint64_t v382 = 0;
      unint64_t v157 = 0;
      while (2)
      {
        if (v157 < [v374 countAttrs])
        {
          uint64_t v159 = [v374 v];
          uint64_t v160 = v159;
          if (v156 < (void *)v377)
          {
            if (v156) {
              *uint64_t v156 = *(void *)(v159 + 8 * v157);
            }
            uint64_t v158 = v156 + 1;
            goto LABEL_220;
          }
          uint64_t v161 = ((char *)v156 - v382) >> 3;
          unint64_t v162 = v161 + 1;
          if ((unint64_t)(v161 + 1) >> 61) {
            abort();
          }
          if ((v377 - v382) >> 2 > v162) {
            unint64_t v162 = (v377 - v382) >> 2;
          }
          if ((unint64_t)(v377 - v382) >= 0x7FFFFFFFFFFFFFF8) {
            uint64_t v163 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v163 = v162;
          }
          if (v163)
          {
            uint64_t v164 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v366 + 16))(v366, 8 * v163, 4);
            uint64_t v165 = (char *)(v164 + 8 * v161);
            uint64_t v163 = v164 + 8 * v163;
            if (v164) {
              *(void *)uint64_t v165 = *(void *)(v160 + 8 * v157);
            }
          }
          else
          {
            uint64_t v165 = (char *)(8 * v161);
          }
          if (v156 != (void *)v382)
          {
            unint64_t v166 = (char *)v156 - v382 - 8;
            if (v166 < 0x138
              || &v165[-(v166 & 0xFFFFFFFFFFFFFFF8) - 8] > v165 - 8
              || (void *)((char *)v156 - (v166 & 0xFFFFFFFFFFFFFFF8) - 8) > v156 - 1
              || (unint64_t)((char *)v156 - v165) < 0x20)
            {
              unint64_t v167 = (char *)v156;
              uint8x8_t v168 = v165;
            }
            else
            {
              uint64_t v170 = (v166 >> 3) + 1;
              unint64_t v167 = (char *)&v156[-(v170 & 0x3FFFFFFFFFFFFFFCLL)];
              uint64_t v171 = v165 - 16;
              uint64_t v172 = (long long *)(v156 - 2);
              uint64_t v173 = v170 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v174 = *v172;
                *((_OWORD *)v171 - 1) = *(v172 - 1);
                *(_OWORD *)uint64_t v171 = v174;
                v171 -= 32;
                v172 -= 2;
                v173 -= 4;
              }
              while (v173);
              uint8x8_t v168 = &v165[-8 * (v170 & 0x3FFFFFFFFFFFFFFCLL)];
              if (v170 == (v170 & 0x3FFFFFFFFFFFFFFCLL))
              {
                uint64_t v156 = v382;
                uint64_t v158 = v165 + 8;
                if (!v382) {
                  goto LABEL_242;
                }
LABEL_241:
                (*(void (**)(uint64_t, void *, int64_t))(*(void *)v366 + 40))(v366, v156, v377 - (char *)v156);
LABEL_242:
                unint64_t v377 = (char *)v163;
                unint64_t v382 = v168;
LABEL_220:
                ++v157;
                uint64_t v156 = v158;
                continue;
              }
            }
            uint64_t v156 = v382;
            do
            {
              uint64_t v169 = *((void *)v167 - 1);
              v167 -= 8;
              *((void *)v168 - 1) = v169;
              v168 -= 8;
            }
            while (v167 != v382);
            uint64_t v158 = v165 + 8;
            if (!v382) {
              goto LABEL_242;
            }
            goto LABEL_241;
          }
          uint8x8_t v168 = v165;
          uint64_t v158 = v165 + 8;
          if (v156) {
            goto LABEL_241;
          }
          goto LABEL_242;
        }
        break;
      }
      if (v156 < (void *)v377)
      {
        long long v91 = v368;
        if (v156) {
          *uint64_t v156 = 0xB00000005;
        }
        long long v175 = (char *)(v156 + 1);
        goto LABEL_280;
      }
      uint64_t v176 = v382;
      long long v91 = v368;
LABEL_259:
      uint64_t v177 = ((char *)v156 - v176) >> 3;
      unint64_t v178 = v177 + 1;
      if ((unint64_t)(v177 + 1) >> 61) {
        abort();
      }
      unint64_t v179 = v377 - v176;
      if ((v377 - v176) >> 2 > v178) {
        unint64_t v178 = (v377 - v176) >> 2;
      }
      if (v179 >= 0x7FFFFFFFFFFFFFF8) {
        uint64_t v180 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v180 = v178;
      }
      if (v180)
      {
        uint64_t v181 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v366 + 16))(v366, 8 * v180, 4);
        uint64_t v182 = (char *)(v181 + 8 * v177);
        unint64_t v377 = (char *)(v181 + 8 * v180);
        if (v181) {
          *(void *)uint64_t v182 = 0xB00000005;
        }
      }
      else
      {
        unint64_t v377 = 0;
        uint64_t v182 = (char *)(8 * v177);
      }
      char v183 = v182;
      if (v156 != (void *)v176)
      {
        unint64_t v184 = (char *)v156 - v176 - 8;
        if (v184 < 0x38 || (unint64_t)((char *)v156 - v182) < 0x20)
        {
          size_t v186 = (char *)v156;
          char v183 = v182;
        }
        else
        {
          uint64_t v185 = (v184 >> 3) + 1;
          size_t v186 = (char *)&v156[-(v185 & 0x3FFFFFFFFFFFFFFCLL)];
          uint64_t v187 = v182 - 16;
          unint64_t v188 = (long long *)(v156 - 2);
          uint64_t v189 = v185 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v190 = *v188;
            *((_OWORD *)v187 - 1) = *(v188 - 1);
            *(_OWORD *)uint64_t v187 = v190;
            v187 -= 32;
            v188 -= 2;
            v189 -= 4;
          }
          while (v189);
          char v183 = &v182[-8 * (v185 & 0x3FFFFFFFFFFFFFFCLL)];
          if (v185 == (v185 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_278;
          }
        }
        do
        {
          uint64_t v191 = *((void *)v186 - 1);
          v186 -= 8;
          *((void *)v183 - 1) = v191;
          v183 -= 8;
        }
        while (v186 != v176);
      }
LABEL_278:
      unint64_t v382 = v183;
      long long v175 = v182 + 8;
      if (v176) {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v366 + 40))(v366, v176, v179);
      }
LABEL_280:
      if (v175 < v377)
      {
        *(void *)long long v175 = 0x100010002;
        uint64_t v192 = v175 + 8;
        unint64_t v193 = (id *)v371;
        goto LABEL_305;
      }
      uint64_t v194 = (v175 - v382) >> 3;
      unint64_t v195 = v194 + 1;
      if ((unint64_t)(v194 + 1) >> 61) {
        abort();
      }
      unint64_t v196 = v377 - v382;
      if ((v377 - v382) >> 2 > v195) {
        unint64_t v195 = (v377 - v382) >> 2;
      }
      if (v196 >= 0x7FFFFFFFFFFFFFF8) {
        uint64_t v197 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v197 = v195;
      }
      if (v197)
      {
        uint64_t v198 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v366 + 16))(v366, 8 * v197, 4);
        unint64_t v199 = (char *)(v198 + 8 * v194);
        unint64_t v377 = (char *)(v198 + 8 * v197);
        if (v198) {
          *(void *)unint64_t v199 = 0x100010002;
        }
      }
      else
      {
        unint64_t v377 = 0;
        unint64_t v199 = (char *)(8 * v194);
      }
      uint64_t v192 = v199 + 8;
      if (v175 == v382)
      {
        unint64_t v193 = (id *)v371;
        uint64_t v207 = v382;
        goto LABEL_303;
      }
      unint64_t v200 = v175 - v382 - 8;
      if (v200 < 0x38 || (unint64_t)(v175 - v199) < 0x20)
      {
        uint64_t v202 = v175;
        unint64_t v193 = (id *)v371;
        uint64_t v207 = v382;
        do
        {
LABEL_301:
          uint64_t v208 = *((void *)v202 - 1);
          v202 -= 8;
          *((void *)v199 - 1) = v208;
          v199 -= 8;
        }
        while (v202 != v207);
        goto LABEL_302;
      }
      uint64_t v201 = (v200 >> 3) + 1;
      uint64_t v202 = &v175[-8 * (v201 & 0x3FFFFFFFFFFFFFFCLL)];
      uint64_t v203 = v199 - 16;
      long long v204 = v175 - 16;
      uint64_t v205 = v201 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v206 = *(_OWORD *)v204;
        *((_OWORD *)v203 - 1) = *((_OWORD *)v204 - 1);
        *(_OWORD *)uint64_t v203 = v206;
        v203 -= 32;
        v204 -= 32;
        v205 -= 4;
      }
      while (v205);
      v199 -= 8 * (v201 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v193 = (id *)v371;
      uint64_t v207 = v382;
      if (v201 != (v201 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_301;
      }
LABEL_302:
      if (v207) {
LABEL_303:
      }
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v366 + 40))(v366, v207, v196);
      unint64_t v382 = v199;
LABEL_305:
      uint64_t v209 = (char *)operator new(0x40uLL);
      *((void *)v209 + 1) = 0;
      uint64_t v362 = (atomic_ullong *)(v209 + 8);
      *((void *)v209 + 2) = 0;
      *(void *)uint64_t v209 = &unk_1EF57F680;
      *(_OWORD *)(v209 + 24) = 0u;
      uint64_t v210 = (_DWORD **)(v209 + 24);
      *(_OWORD *)(v209 + 40) = 0u;
      *(_DWORD *)(v209 + 55) = 0;
      uint64_t v372 = v209;
      unint64_t v211 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
      *((void *)v209 + 3) = v211;
      if (v211)
      {
        *(void *)&long long v212 = -1;
        *((void *)&v212 + 1) = -1;
        v211[14] = v212;
        v211[15] = v212;
        v211[12] = v212;
        v211[13] = v212;
        v211[10] = v212;
        v211[11] = v212;
        v211[8] = v212;
        v211[9] = v212;
        v211[6] = v212;
        v211[7] = v212;
        v211[4] = v212;
        v211[5] = v212;
        v211[2] = v212;
        v211[3] = v212;
        _OWORD *v211 = v212;
        v211[1] = v212;
      }
      if (((v192 - v382) & 0x7FFFFFFF8) != 0)
      {
        uint64_t v213 = 0;
        char v214 = 0;
        uint64_t v215 = ((unint64_t)(v192 - v382) >> 3);
        unsigned __int8 v216 = v209[57];
        while (1)
        {
          size_t v217 = v216;
          uint64_t v218 = *v210;
          if (v216) {
            break;
          }
LABEL_309:
          *(void *)&v218[2 * v217] = *(void *)&v382[8 * v213];
          unsigned __int8 v216 = v209[57] + 1;
          v209[57] = v216;
          ++v213;
          char v214 = 1;
          if (v213 == v215)
          {
            uint64_t v218 = *v210;
            size_t v217 = v216;
LABEL_326:
            qsort(v218, v217, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
            goto LABEL_327;
          }
        }
        if (v216 > 0x1Fu)
        {
          do
          {
            uint64_t v222 = 0;
            uint64_t v223 = v218;
            while (1)
            {
              int v224 = *v223;
              v223 += 2;
              if (v224 == *(_DWORD *)&v382[8 * v213]) {
                break;
              }
              if (v217 == ++v222) {
                goto LABEL_320;
              }
            }
            v218[2 * v222 + 1] = *(_DWORD *)&v382[8 * v213 + 4];
LABEL_320:
            ++v213;
          }
          while (v213 != v215);
        }
        else
        {
          do
          {
            uint64_t v219 = 0;
            uint64_t v220 = v218;
            while (1)
            {
              int v221 = *v220;
              v220 += 2;
              if (v221 == *(_DWORD *)&v382[8 * v213]) {
                break;
              }
              if (v217 == ++v219) {
                goto LABEL_309;
              }
            }
            v218[2 * v219 + 1] = *(_DWORD *)&v382[8 * v213++ + 4];
          }
          while (v213 != v215);
        }
        if (v214) {
          goto LABEL_326;
        }
      }
LABEL_327:
      atomic_fetch_add_explicit((atomic_ullong *volatile)v209 + 1, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit((atomic_ullong *volatile)v209 + 1, 1uLL, memory_order_relaxed);
      uint64_t v225 = (uint64_t)v209;
      unint64_t shared_weak_owners = (std::__shared_weak_count *)v139[2].__shared_weak_owners_;
      v139[2].__shared_owners_ = (uint64_t)v210;
      v139[2].__shared_weak_owners_ = v225;
      if (shared_weak_owners && !atomic_fetch_add(&shared_weak_owners->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
        std::__shared_weak_count::__release_weak(shared_weak_owners);
      }
      if (!atomic_fetch_add(v362, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(char *))(*(void *)v372 + 16))(v372);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v372);
      }
      BYTE1(v139[8].__shared_owners_) = *(unsigned char *)(*(void *)v357 + 468);
      LOBYTE(v139[8].__shared_owners_) = 14;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v372 + 1, 1uLL, memory_order_relaxed);
      unint64_t v227 = v372[57];
      if (!v372[57]) {
        goto LABEL_340;
      }
      unint64_t v228 = *v210;
      if (**v210 != 191)
      {
        unint64_t v229 = 0;
        uint64_t v231 = v228 + 2;
        while (v227 - 1 != v229)
        {
          int v232 = *v231;
          v231 += 2;
          ++v229;
          if (v232 == 191)
          {
            BOOL v230 = v229 < v227;
            goto LABEL_339;
          }
        }
LABEL_340:
        int v233 = 0;
        BOOL v230 = 0;
        goto LABEL_341;
      }
      unint64_t v229 = 0;
      BOOL v230 = 1;
LABEL_339:
      int v233 = LOBYTE(v228[2 * v229 + 1]);
LABEL_341:
      if (atomic_fetch_add(v362, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (v230) {
          goto LABEL_343;
        }
LABEL_346:
        if (*((unsigned char *)v193 + 8)) {
          goto LABEL_347;
        }
      }
      else
      {
        (*(void (**)(char *))(*(void *)v372 + 16))(v372);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v372);
        if (!v230) {
          goto LABEL_346;
        }
LABEL_343:
        LOBYTE(v139[13].__shared_weak_owners_) = v233 == 0;
        if (*((unsigned char *)v193 + 8))
        {
LABEL_347:
          uint64_t v234 = (char *)[*v193 UTF8String];
          if (v234) {
            std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_external(&v139[11].__vftable, v234);
          }
        }
      }
      unint64_t v235 = 0;
      int v236 = 0;
      p_unint64_t shared_weak_owners = &v139[9].__shared_weak_owners_;
      long long v237 = v365;
      uint64_t v238 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
      unint64_t v369 = v139;
      while (2)
      {
        [v237 sections];
        int v379 = v236;
        uint64_t v239 = (char *)v404;
        uint64_t v240 = v405;
        unint64_t v241 = (v405 - (unsigned char *)v404) >> 3;
        if (!v404) {
          goto LABEL_365;
        }
        if (v405 == v404)
        {
          uint64_t v405 = (char *)v404;
          operator delete(v404);
LABEL_365:
          if (v241 <= v235) {
            goto LABEL_472;
          }
LABEL_366:
          [v237 sections];
          uint64_t v246 = (char *)v404;
          uint64_t v247 = v405;
          uint64_t v248 = *((void *)v404 + v235);
          if (v248) {
            uint64_t v249 = (_OWORD *)(v248 + 8);
          }
          else {
            uint64_t v249 = 0;
          }
          uint64_t v250 = v404;
          if (v405 != v404)
          {
            uint64_t v251 = v405;
            do
            {
              uint64_t v253 = (void *)*((void *)v251 - 1);
              v251 -= 8;
              unint64_t v252 = v253;
              if (v253)
              {
                BOOL v245 = (*v252)-- == 1;
                if (v245)
                {
                  md::RouteLineSection::~RouteLineSection((md::RouteLineSection *)(v252 + 1));
                  {
                    operator new();
                  }
                  (*(void (**)(void, void, uint64_t))(**((void **)v238 + 91) + 40))(*((void *)v238 + 91), *((void *)v247 - 1), 400);
                  *((void *)v247 - 1) = 0;
                }
              }
              uint64_t v247 = v251;
            }
            while (v251 != v246);
            uint64_t v250 = v404;
          }
          uint64_t v405 = v246;
          operator delete(v250);
          int v254 = (*(uint64_t (**)(_OWORD *))(*(void *)v249 + 56))(v249);
          if (v254)
          {
            uint64_t v255 = (*(uint64_t (**)(_OWORD *, void))(*(void *)v249 + 48))(v249, 0);
            unsigned int v256 = *(_DWORD *)(v255 + 12);
            float v257 = *(float *)(v255 + 16);
            uint64_t v258 = (*(uint64_t (**)(_OWORD *, void))(*(void *)v249 + 48))(v249, (v254 - 1));
            unsigned int v259 = *(_DWORD *)(v258 + 12);
            unsigned int v260 = *((_DWORD *)v371 + 4);
            if (v260 < v259 || v260 == v259 && *((float *)v371 + 5) <= *(float *)(v258 + 16))
            {
              unsigned int v261 = *((_DWORD *)v371 + 6);
              if (v256 < v261 || v256 == v261 && v257 <= *((float *)v371 + 7))
              {
                uint64_t v262 = [v364 route];
                unsigned int v263 = *((_DWORD *)v371 + 4);
                unsigned int v370 = *((_DWORD *)v371 + 6);
                float v264 = *((float *)v371 + 5);
                float v265 = *((float *)v371 + 7);
                id v266 = v262;
                uint64_t v405 = 0;
                unint64_t v404 = 0;
                unint64_t v406 = 0;
                {
                  operator new();
                }
                uint64_t v407 = *((void *)v238 + 91);
                uint64_t v409 = 0;
                unint64_t v410 = 0;
                uint64_t v408 = 0;
                {
                  operator new();
                }
                uint64_t v411 = *((void *)v238 + 91);
                long long v267 = *(_OWORD *)((char *)v249 + 168);
                long long v412 = v249[9];
                long long v413 = v267;
                uint64_t v268 = (*(uint64_t (**)(_OWORD *))(*(void *)v249 + 56))(v249);
                uint64_t v373 = v266;
                if (v268)
                {
                  uint64_t v269 = 0;
                  while (2)
                  {
                    uint64_t v271 = (*(uint64_t (**)(_OWORD *, uint64_t))(*(void *)v249 + 48))(v249, v269);
                    unsigned int v273 = *(_DWORD *)(v271 + 12);
                    if (v273 < v263) {
                      goto LABEL_389;
                    }
                    v272.n128_u32[0] = *(_DWORD *)(v271 + 16);
                    if (v273 == v263 && v272.n128_f32[0] < v264) {
                      goto LABEL_389;
                    }
                    uint64_t v275 = (*(uint64_t (**)(_OWORD *, uint64_t, __n128))(*(void *)v249 + 48))(v249, v269, v272);
                    unsigned int v277 = *(_DWORD *)(v275 + 12);
                    if (v277 > v370) {
                      break;
                    }
                    v276.n128_u32[0] = *(_DWORD *)(v275 + 16);
                    if (v277 == v370 && v276.n128_f32[0] > v265) {
                      break;
                    }
                    uint64_t v279 = (void *)(*(uint64_t (**)(_OWORD *, uint64_t, __n128))(*(void *)v249 + 48))(v249, v269, v276);
                    unint64_t v280 = v279;
                    uint64_t v281 = v405;
                    unint64_t v282 = v406;
                    if ((unint64_t)v405 < v406)
                    {
                      if (v405) {
                        *(void *)uint64_t v405 = *v279;
                      }
                      uint64_t v283 = v281 + 8;
                      goto LABEL_428;
                    }
                    unint64_t v284 = (char *)v404;
                    uint64_t v285 = (v405 - (unsigned char *)v404) >> 3;
                    unint64_t v286 = v285 + 1;
                    if ((unint64_t)(v285 + 1) >> 61) {
                      abort();
                    }
                    if ((uint64_t)(v406 - (void)v404) >> 2 > v286) {
                      unint64_t v286 = (uint64_t)(v406 - (void)v404) >> 2;
                    }
                    if (v406 - (unint64_t)v404 >= 0x7FFFFFFFFFFFFFF8) {
                      uint64_t v287 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      uint64_t v287 = v286;
                    }
                    if (v287)
                    {
                      uint64_t v288 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v407 + 16))(v407, 8 * v287, 4);
                      uint64_t v289 = (void *)(v288 + 8 * v285);
                      uint64_t v290 = v288 + 8 * v287;
                      if (v288) {
                        void *v289 = *v280;
                      }
                    }
                    else
                    {
                      uint64_t v290 = 0;
                      uint64_t v289 = (void *)(8 * v285);
                    }
                    int64_t v291 = v281 - v284;
                    if (v281 == v284)
                    {
                      uint64_t v293 = v289;
                      unint64_t v284 = v281;
                      goto LABEL_426;
                    }
                    unint64_t v292 = v291 - 8;
                    if ((unint64_t)(v291 - 8) < 0x38)
                    {
                      uint64_t v293 = v289;
                    }
                    else
                    {
                      uint64_t v293 = v289;
                      if ((unint64_t)(v281 - (char *)v289) >= 0x20)
                      {
                        uint64_t v294 = (v292 >> 3) + 1;
                        uint64_t v295 = v289 - 2;
                        uint64_t v296 = v281 - 16;
                        uint64_t v297 = v294 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          long long v298 = *(_OWORD *)v296;
                          *(v295 - 1) = *((_OWORD *)v296 - 1);
                          *uint64_t v295 = v298;
                          v295 -= 2;
                          v296 -= 32;
                          v297 -= 4;
                        }
                        while (v297);
                        uint64_t v293 = &v289[-(v294 & 0x3FFFFFFFFFFFFFFCLL)];
                        v281 -= 8 * (v294 & 0x3FFFFFFFFFFFFFFCLL);
                        if (v294 == (v294 & 0x3FFFFFFFFFFFFFFCLL)) {
                          goto LABEL_426;
                        }
                      }
                    }
                    do
                    {
                      uint64_t v299 = *((void *)v281 - 1);
                      v281 -= 8;
                      *--uint64_t v293 = v299;
                    }
                    while (v281 != v284);
                    unint64_t v284 = (char *)v404;
                    unint64_t v282 = v406;
LABEL_426:
                    uint64_t v283 = (char *)(v289 + 1);
                    unint64_t v404 = v293;
                    unint64_t v406 = v290;
                    if (v284) {
                      (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v407 + 40))(v407, v284, v282 - (void)v284);
                    }
LABEL_428:
                    uint64_t v405 = v283;
                    objc_msgSend(v373, "pointAtRouteCoordinate:", *(void *)((*(uint64_t (**)(_OWORD *, uint64_t))(*(void *)v249 + 48))(v249, v269)+ 12));
                    double v301 = v300;
                    unint64_t v302 = v409;
                    if ((unint64_t)v409 < v410)
                    {
                      if (v409)
                      {
                        float v303 = v300;
                        *uint64_t v409 = v303;
                      }
                      uint64_t v270 = v302 + 1;
                      goto LABEL_388;
                    }
                    unint64_t v304 = v408;
                    uint64_t v305 = v409 - v408;
                    if ((unint64_t)(v305 + 1) >> 62) {
                      abort();
                    }
                    unint64_t v306 = v410 - (void)v408;
                    unint64_t v307 = (uint64_t)(v410 - (void)v408) >> 1;
                    if (v307 <= v305 + 1) {
                      unint64_t v307 = v305 + 1;
                    }
                    if (v306 >= 0x7FFFFFFFFFFFFFFCLL) {
                      uint64_t v308 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      uint64_t v308 = v307;
                    }
                    if (v308)
                    {
                      uint64_t v309 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v411 + 16))(v411, 4 * v308, 4);
                      uint64_t v310 = (float *)(v309 + 4 * v305);
                      uint64_t v311 = v309 + 4 * v308;
                      if (v309)
                      {
                        float v312 = v301;
                        *uint64_t v310 = v312;
                      }
                    }
                    else
                    {
                      uint64_t v311 = 0;
                      uint64_t v310 = (float *)(4 * v305);
                    }
                    uint64_t v313 = v310;
                    if (v302 != v304)
                    {
                      unint64_t v314 = (char *)v302 - (char *)v304 - 4;
                      if (v314 < 0x1C)
                      {
                        uint64_t v313 = v310;
                      }
                      else
                      {
                        uint64_t v313 = v310;
                        if ((unint64_t)((char *)v302 - (char *)v310) >= 0x20)
                        {
                          uint64_t v315 = (v314 >> 2) + 1;
                          uint64_t v316 = v310 - 4;
                          uint64_t v317 = v302 - 4;
                          uint64_t v318 = v315 & 0x7FFFFFFFFFFFFFF8;
                          do
                          {
                            long long v319 = *(_OWORD *)v317;
                            *((_OWORD *)v316 - 1) = *((_OWORD *)v317 - 1);
                            *(_OWORD *)uint64_t v316 = v319;
                            v316 -= 8;
                            v317 -= 8;
                            v318 -= 8;
                          }
                          while (v318);
                          uint64_t v313 = &v310[-(v315 & 0x7FFFFFFFFFFFFFF8)];
                          v302 -= v315 & 0x7FFFFFFFFFFFFFF8;
                          if (v315 == (v315 & 0x7FFFFFFFFFFFFFF8)) {
                            goto LABEL_450;
                          }
                        }
                      }
                      do
                      {
                        int v320 = *((_DWORD *)v302-- - 1);
                        *((_DWORD *)v313-- - 1) = v320;
                      }
                      while (v302 != v304);
                    }
LABEL_450:
                    uint64_t v270 = v310 + 1;
                    uint64_t v408 = v313;
                    unint64_t v410 = v311;
                    if (v304) {
                      (*(void (**)(uint64_t, float *, unint64_t))(*(void *)v411 + 40))(v411, v304, v306);
                    }
LABEL_388:
                    uint64_t v409 = v270;
LABEL_389:
                    if (++v269 == v268) {
                      break;
                    }
                    continue;
                  }
                }
                uint64_t v139 = v369;
                uint64_t v321 = v369[10].__vftable;
                if ((unint64_t)v321 >= v369[10].__shared_owners_)
                {
                  long long v91 = v368;
                  unint64_t v322 = v373;
                  uint64_t p_on_zero_shared = std::vector<md::LabelExternalRoadFeature::SectionInfo,geo::StdAllocator<md::LabelExternalRoadFeature::SectionInfo,mdm::Allocator>>::__emplace_back_slow_path<md::LabelExternalRoadFeature::SectionInfo const&>(p_shared_weak_owners, (uint64_t)&v404);
                }
                else
                {
                  long long v91 = v368;
                  unint64_t v322 = v373;
                  if (v321) {
                    md::LabelExternalRoadFeature::SectionInfo::SectionInfo((uint64_t)v369[10].__vftable, (uint64_t)&v404);
                  }
                  uint64_t p_on_zero_shared = (uint64_t)&v321[2].__on_zero_shared;
                  v369[10].__vftable = (std::__shared_weak_count_vtbl *)((char *)v321 + 96);
                }
                v369[10].__vftable = (std::__shared_weak_count_vtbl *)p_on_zero_shared;
                if (v408) {
                  (*(void (**)(uint64_t, float *, unint64_t))(*(void *)v411 + 40))(v411, v408, v410 - (void)v408);
                }
                if (v404) {
                  (*(void (**)(uint64_t, void *, unint64_t))(*(void *)v407 + 40))(v407, v404, v406 - (void)v404);
                }

                long long v237 = v365;
                uint64_t v238 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
              }
            }
          }
          unint64_t v235 = (v379 + 1);
          int v236 = v379 + 1;
          continue;
        }
        break;
      }
      int v242 = v405;
      do
      {
        uint64_t v244 = (void *)*((void *)v242 - 1);
        v242 -= 8;
        uint64_t v243 = v244;
        if (v244)
        {
          BOOL v245 = (*v243)-- == 1;
          if (v245)
          {
            md::RouteLineSection::~RouteLineSection((md::RouteLineSection *)(v243 + 1));
            {
              operator new();
            }
            (*(void (**)(void, void, uint64_t))(**((void **)v238 + 91) + 40))(*((void *)v238 + 91), *((void *)v240 - 1), 400);
            *((void *)v240 - 1) = 0;
          }
        }
        uint64_t v240 = v242;
      }
      while (v242 != v239);
      uint64_t v405 = v239;
      operator delete(v404);
      long long v91 = v368;
      if (v241 > v235) {
        goto LABEL_366;
      }
LABEL_472:
      unint64_t v135 = v371;
      if (!atomic_fetch_add(v362, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(char *))(*(void *)v372 + 16))(v372);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v372);
      }

      if (v382) {
        (*(void (**)(uint64_t, char *, int64_t))(*(void *)v366 + 40))(v366, v382, v377 - v382);
      }
      unint64_t v18 = v360;
      uint64_t v136 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
        std::__shared_weak_count::__release_weak(v139);
      }
LABEL_190:
      v135 += 32;
      if (v135 != v91) {
        continue;
      }
      break;
    }
    if (v375)
    {
      for (; v91 != v375; v91 -= 32)
      {
        if (*(v91 - 24))
        {

          unint64_t v18 = v360;
        }
      }
LABEL_488:
      operator delete(v375);
    }
LABEL_489:
    uint64_t v10 = v355;
    if (++v356 >= v18) {
      break;
    }
LABEL_15:
    ;
  }
  unint64_t v18 = [obj countByEnumeratingWithState:&v383 objects:v402 count:16];
  if (v18)
  {
    uint64_t v356 = 0;
    goto LABEL_15;
  }
LABEL_497:

  unint64_t v324 = v358;
  unsigned __int8 v325 = atomic_load((unsigned __int8 *)v358[1] + 3392);
  unint64_t v326 = (void **)v324[33];
  uint64_t v327 = (void **)v324[34];
  if (v326 != v327)
  {
    uint64_t v328 = v325 & 1;
    do
    {
      unint64_t v404 = *v326;
      uint64_t v329 = v326[1];
      uint64_t v405 = (char *)v329;
      if (v329) {
        atomic_fetch_add_explicit(v329 + 1, 1uLL, memory_order_relaxed);
      }
      unint64_t v330 = operator new(0x208uLL);
      v330[1] = 0;
      v330[2] = 0;
      *unint64_t v330 = &unk_1EF580DE8;
      *(void *)&v403[0] = md::UniLineLabelFeature::UniLineLabelFeature(v330 + 3, (uint64_t *)&v404, 7, v328);
      *((void *)&v403[0] + 1) = v330;
      v330[12] = atomic_fetch_add((atomic_ullong *volatile)(*((void *)v358[1] + 36) + 680), 1uLL) + 1;
      uint64_t v331 = v358[37];
      if (v331 >= v358[38])
      {
        uint64_t v333 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>((uint64_t)(v358 + 36), v403);
      }
      else
      {
        if (v331)
        {
          *uint64_t v331 = *(void *)&v403[0];
          uint64_t v332 = *((void *)&v403[0] + 1);
          v331[1] = *((void *)&v403[0] + 1);
          if (v332) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v332 + 8), 1uLL, memory_order_relaxed);
          }
        }
        uint64_t v333 = v331 + 2;
      }
      v358[37] = v333;
      unint64_t v334 = (std::__shared_weak_count *)*((void *)&v403[0] + 1);
      if (*((void *)&v403[0] + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v403[0] + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
        std::__shared_weak_count::__release_weak(v334);
        uint64_t v335 = (std::__shared_weak_count *)v405;
        if (v405)
        {
LABEL_511:
          if (!atomic_fetch_add(&v335->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
            std::__shared_weak_count::__release_weak(v335);
          }
        }
      }
      else
      {
        uint64_t v335 = (std::__shared_weak_count *)v405;
        if (v405) {
          goto LABEL_511;
        }
      }
      v326 += 2;
    }
    while (v326 != v327);
  }
  id v336 = v358[3];
  uint64_t v337 = [v336 routeInfo];
  unint64_t v338 = [v337 route];
  uint64_t v339 = (void *)v338;
  unint64_t v340 = (uint64_t *)v358[41];
  if (v340)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v342 = v340;
        unint64_t v343 = v340[4];
        if (v338 >= v343) {
          break;
        }
        unint64_t v340 = (uint64_t *)*v342;
        uint64_t v341 = v342;
        if (!*v342) {
          goto LABEL_522;
        }
      }
      if (v343 >= v338) {
        break;
      }
      unint64_t v340 = (uint64_t *)v342[1];
      if (!v340)
      {
        uint64_t v341 = v342 + 1;
        goto LABEL_522;
      }
    }
    uint64_t v344 = (uint64_t)v342;
  }
  else
  {
    uint64_t v341 = (uint64_t *)(v358 + 41);
    unint64_t v342 = (uint64_t *)(v358 + 41);
LABEL_522:
    uint64_t v344 = (*(uint64_t (**)(id, uint64_t, uint64_t))(*(void *)v358[42] + 16))(v358[42], 48, 8);
    *(void *)(v344 + 32) = v339;
    *(unsigned char *)(v344 + 40) = 0;
    *(void *)uint64_t v344 = 0;
    *(void *)(v344 + 8) = 0;
    *(void *)(v344 + 16) = v342;
    *uint64_t v341 = v344;
    uint64_t v345 = *(void **)v358[40];
    unint64_t v346 = (uint64_t *)v344;
    if (v345)
    {
      v358[40] = v345;
      unint64_t v346 = (uint64_t *)*v341;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v358[41], v346);
    uint64_t v339 = 0;
    v358[43] = (char *)v358[43] + 1;
  }
  *(unsigned char *)(v344 + 40) = 1;

  md::LabelFeatureStyler::styleExternalFeatures(*((unsigned int **)v358[1] + 37), (uint64_t **)v358 + 36);
  uint64_t v347 = v358[1];
  v347[3041] = 1;
  unsigned __int8 v348 = atomic_load(v347 + 3058);
  if (v348)
  {
    uint64_t v349 = *((void *)v347 + 17);
    if (v349)
    {
      uint64_t v350 = *(void *)(v349 + 56);
      if (v350)
      {
        unint64_t v404 = v347;
        LOBYTE(v403[0]) = 9;
        (*(void (**)(uint64_t, void **, long long *))(*(void *)v350 + 48))(v350, &v404, v403);
      }
    }
  }
}

void sub_1A26A8B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  _Unwind_Resume(a1);
}

void md::RouteLineSupport::clearRouteLabelFeatures(md::RouteLineSupport *this)
{
  std::__tree<std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::PolylineOverlayInfo>,mdm::Allocator>>::destroy((uint64_t)this + 320, *((void *)this + 41));
  *((void *)this + 43) = 0;
  *((void *)this + 40) = (char *)this + 328;
  *((void *)this + 41) = 0;
  uint64_t v2 = *((void *)this + 33);
  for (uint64_t i = *((void *)this + 34); i != v2; i -= 16)
  {
    id v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *((void *)this + 34) = v2;
  uint64_t v5 = *((void *)this + 36);
  for (uint64_t j = *((void *)this + 37); j != v5; j -= 16)
  {
    uint64_t v7 = *(std::__shared_weak_count **)(j - 8);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *((void *)this + 37) = v5;
}

void std::__introsort<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
char *std::vector<md::RoadNameWithRange>::__emplace_back_slow_path<std::nullopt_t const&,geo::PolylineCoordinate &,geo::PolylineCoordinate const&>(void **a1, uint64_t a2, uint64_t a3)
{
  BOOL v4 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  uint64_t v5 = (v3 - (unsigned char *)*a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    abort();
  }
  uint64_t v8 = (unsigned char *)a1[2] - v4;
  if (v8 >> 4 > v6) {
    unint64_t v6 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v6 = 0x7FFFFFFFFFFFFFFLL;
  }
  if (v6 >> 59) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v11 = 32 * v6;
  uint64_t v12 = (char *)operator new(32 * v6);
  uint64_t v13 = &v12[32 * v5];
  char *v13 = 0;
  v13[8] = 0;
  unint64_t v14 = &v12[v11];
  *((void *)v13 + 2) = a2;
  *((void *)v13 + 3) = a3;
  uint64_t v15 = v13 + 32;
  if (v3 == v4)
  {
    *a1 = v13;
    a1[1] = v15;
    a1[2] = v14;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      __double2 v17 = &v13[v16];
      unint64_t v18 = &v3[v16];
      *(v17 - 32) = 0;
      *(v17 - 24) = 0;
      if (v3[v16 - 24])
      {
        uint64_t v19 = *((void *)v18 - 4);
        *((void *)v18 - 4) = 0;
        *((void *)v17 - 4) = v19;
        *(v17 - 24) = 1;
      }
      *((_OWORD *)v17 - 1) = *((_OWORD *)v18 - 1);
      v16 -= 32;
    }
    while (&v3[v16] != v4);
    uint64_t v3 = (char *)*a1;
    double v20 = (id *)a1[1];
    *a1 = &v13[v16];
    a1[1] = v15;
    a1[2] = v14;
    while (v20 != (id *)v3)
    {
      if (*((unsigned char *)v20 - 24)) {

      }
      v20 -= 4;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v15;
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<md::RoadNameWithRange *&,md::RoadNameWithRange *&>(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    BOOL v4 = *(void **)a1;
    *(void *)a1 = 0;
    uint64_t v5 = (_OWORD *)(a1 + 16);
    long long v13 = *(_OWORD *)(a1 + 16);
    if (*(unsigned char *)(a2 + 8))
    {
      id v6 = *(id *)a2;
      *(void *)a2 = 0;
      uint64_t v7 = *(void **)a1;
      *(void *)a1 = v6;
      uint64_t v11 = v4;

      BOOL v4 = v11;
    }
    else
    {
      *(unsigned char *)(a1 + 8) = 0;
    }
    int v8 = 1;
  }
  else
  {
    uint64_t v5 = (_OWORD *)(a1 + 16);
    long long v13 = *(_OWORD *)(a1 + 16);
    int v8 = *(unsigned __int8 *)(a2 + 8);
    if (*(unsigned char *)(a2 + 8))
    {
      BOOL v4 = 0;
      int v8 = 0;
      id v9 = *(id *)a2;
      *(void *)a2 = 0;
      *(void *)a1 = v9;
      *(unsigned char *)(a1 + 8) = 1;
    }
    else
    {
      BOOL v4 = 0;
    }
  }
  *uint64_t v5 = *(_OWORD *)(a2 + 16);
  if (*(unsigned __int8 *)(a2 + 8) == v8)
  {
    if (!*(unsigned char *)(a2 + 8)) {
      goto LABEL_16;
    }
    id v10 = *(id *)a2;
    *(void *)a2 = v4;
  }
  else
  {
    if (*(unsigned char *)(a2 + 8))
    {
      uint64_t v12 = v4;

      BOOL v4 = v12;
      *(unsigned char *)(a2 + 8) = 0;
      goto LABEL_16;
    }
    *(void *)a2 = v4;
    *(unsigned char *)(a2 + 8) = 1;
  }
  BOOL v4 = 0;
LABEL_16:
  *(_OWORD *)(a2 + 16) = v13;
  if (v3)
  {
  }
}

void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  unsigned int v6 = *(_DWORD *)(a2 + 16);
  float v7 = *(float *)(a2 + 20);
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  if (v6 < v8 || (v6 == v8 ? (BOOL v9 = v7 < *(float *)(a1 + 20)) : (BOOL v9 = 0), v9))
  {
    unsigned int v15 = *(_DWORD *)(a3 + 16);
    if (v15 >= v6 && (v15 != v6 || *(float *)(a3 + 20) >= v7))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<md::RoadNameWithRange *&,md::RoadNameWithRange *&>(a1, a2);
      unsigned int v17 = *(_DWORD *)(a3 + 16);
      unsigned int v18 = *(_DWORD *)(a2 + 16);
      if (v17 >= v18 && (v17 != v18 || *(float *)(a3 + 20) >= *(float *)(a2 + 20))) {
        return;
      }
      a1 = a2;
    }
    uint64_t v14 = a3;
    goto LABEL_26;
  }
  unsigned int v10 = *(_DWORD *)(a3 + 16);
  if (v10 < v6 || (v10 == v6 ? (BOOL v11 = *(float *)(a3 + 20) < v7) : (BOOL v11 = 0), v11))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<md::RoadNameWithRange *&,md::RoadNameWithRange *&>(a2, a3);
    unsigned int v12 = *(_DWORD *)(a2 + 16);
    unsigned int v13 = *(_DWORD *)(v5 + 16);
    if (v12 < v13 || v12 == v13 && *(float *)(a2 + 20) < *(float *)(v5 + 20))
    {
      a1 = v5;
      uint64_t v14 = a2;
LABEL_26:
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<md::RoadNameWithRange *&,md::RoadNameWithRange *&>(a1, v14);
    }
  }
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *>(a1, a2, a3);
  unsigned int v8 = *(_DWORD *)(a4 + 16);
  unsigned int v9 = *(_DWORD *)(a3 + 16);
  if (v8 < v9 || (v8 == v9 ? (BOOL v10 = *(float *)(a4 + 20) < *(float *)(a3 + 20)) : (BOOL v10 = 0), v10))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<md::RoadNameWithRange *&,md::RoadNameWithRange *&>(a3, a4);
    unsigned int v11 = *(_DWORD *)(a3 + 16);
    unsigned int v12 = *(_DWORD *)(a2 + 16);
    if (v11 < v12 || (v11 == v12 ? (BOOL v13 = *(float *)(a3 + 20) < *(float *)(a2 + 20)) : (BOOL v13 = 0), v13))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<md::RoadNameWithRange *&,md::RoadNameWithRange *&>(a2, a3);
      unsigned int v14 = *(_DWORD *)(a2 + 16);
      unsigned int v15 = *(_DWORD *)(a1 + 16);
      if (v14 < v15 || v14 == v15 && *(float *)(a2 + 20) < *(float *)(a1 + 20))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<md::RoadNameWithRange *&,md::RoadNameWithRange *&>(a1, a2);
      }
    }
  }
}

void std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *>(a1, a2, a3, a4);
  unsigned int v10 = *(_DWORD *)(a5 + 16);
  unsigned int v11 = *(_DWORD *)(a4 + 16);
  if (v10 < v11 || (v10 == v11 ? (BOOL v12 = *(float *)(a5 + 20) < *(float *)(a4 + 20)) : (BOOL v12 = 0), v12))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<md::RoadNameWithRange *&,md::RoadNameWithRange *&>(a4, a5);
    unsigned int v13 = *(_DWORD *)(a4 + 16);
    unsigned int v14 = *(_DWORD *)(a3 + 16);
    if (v13 < v14 || (v13 == v14 ? (BOOL v15 = *(float *)(a4 + 20) < *(float *)(a3 + 20)) : (BOOL v15 = 0), v15))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<md::RoadNameWithRange *&,md::RoadNameWithRange *&>(a3, a4);
      unsigned int v16 = *(_DWORD *)(a3 + 16);
      unsigned int v17 = *(_DWORD *)(a2 + 16);
      if (v16 < v17 || v16 == v17 && *(float *)(a3 + 20) < *(float *)(a2 + 20))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<md::RoadNameWithRange *&,md::RoadNameWithRange *&>(a2, a3);
        unsigned int v18 = *(_DWORD *)(a2 + 16);
        unsigned int v19 = *(_DWORD *)(a1 + 16);
        if (v18 < v19 || v18 == v19 && *(float *)(a2 + 20) < *(float *)(a1 + 20))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<md::RoadNameWithRange *&,md::RoadNameWithRange *&>(a1, a2);
        }
      }
    }
  }
}

uint64_t std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  BOOL v4 = 1;
  switch((a2 - a1) >> 5)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      unsigned int v5 = *(_DWORD *)(a2 - 16);
      unsigned int v6 = *(_DWORD *)(a1 + 16);
      if (v5 < v6 || (v5 == v6 ? (BOOL v7 = *(float *)(a2 - 12) < *(float *)(a1 + 20)) : (BOOL v7 = 0), v7)) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<md::RoadNameWithRange *&,md::RoadNameWithRange *&>(a1, a2 - 32);
      }
      break;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *>(a1, a1 + 32, a2 - 32);
      break;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *>(a1, a1 + 32, a1 + 64, a2 - 32);
      break;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *,0>(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
      break;
    default:
      uint64_t v8 = a1 + 64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::LabelRouteLine::roadNamesForSection(VKRouteInfo const*,geo::PolylineCoordinate,geo::PolylineCoordinate)::$_0 &,md::RoadNameWithRange *>(a1, a1 + 32, a1 + 64);
      uint64_t v9 = a1 + 96;
      BOOL v4 = 1;
      if (a1 + 96 != v2)
      {
        uint64_t v10 = 0;
        int v11 = 0;
        uint64_t v33 = v2;
        while (1)
        {
          unsigned int v12 = *(_DWORD *)(v9 + 16);
          unsigned int v13 = *(_DWORD *)(v8 + 16);
          if (v12 < v13 || (v12 == v13 ? (BOOL v14 = *(float *)(v9 + 20) < *(float *)(v8 + 20)) : (BOOL v14 = 0), v14))
          {
            int v15 = *(unsigned __int8 *)(v9 + 8);
            if (*(unsigned char *)(v9 + 8))
            {
              unint64_t v36 = *(void *)v9;
              *(void *)uint64_t v9 = 0;
              int v35 = 1;
            }
            else
            {
              int v35 = 0;
              v36 &= 0xFFFFFFFFFFFFFF00;
            }
            float v16 = *(float *)(v9 + 20);
            uint64_t v34 = *(void *)(v9 + 24);
            uint64_t v17 = v10;
            int v18 = v15;
            while (1)
            {
              uint64_t v19 = a1 + v17;
              if (v18 == *(unsigned __int8 *)(a1 + v17 + 72))
              {
                if (v18)
                {
                  uint64_t v20 = *(void *)(v19 + 64);
                  *(void *)(v19 + 64) = 0;
                  id v21 = *(void **)(v19 + 96);
                  *(void *)(v19 + 96) = v20;
                }
              }
              else if (v18)
              {

                *(unsigned char *)(v19 + 104) = 0;
              }
              else
              {
                uint64_t v22 = *(void *)(v19 + 64);
                *(void *)(v19 + 64) = 0;
                *(void *)(v19 + 96) = v22;
                *(unsigned char *)(v19 + 104) = 1;
              }
              uint64_t v23 = a1 + v17;
              *(_OWORD *)(a1 + v17 + 112) = *(_OWORD *)(a1 + v17 + 80);
              if (v17 == -64) {
                break;
              }
              unsigned int v24 = *(_DWORD *)(v23 + 48);
              BOOL v25 = v12 == v24;
              if (v12 >= v24)
              {
                uint64_t v26 = a1 + v17;
                if (!v25 || v16 >= *(float *)(a1 + v17 + 52))
                {
                  uint64_t v28 = v26 + 64;
                  uint64_t v29 = (unsigned int *)(v26 + 80);
                  unsigned int v30 = (unsigned char *)(v26 + 72);
                  goto LABEL_38;
                }
              }
              int v18 = *(unsigned __int8 *)(v19 + 72);
              v17 -= 32;
            }
            uint64_t v29 = (unsigned int *)(v23 + 80);
            unsigned int v30 = (unsigned char *)(v23 + 72);
            uint64_t v28 = a1;
LABEL_38:
            if (*v30 == v35)
            {
              if (*v30)
              {
                id v31 = *(id *)v28;
                *(void *)uint64_t v28 = v36;

                unint64_t v36 = 0;
              }
            }
            else if (*v30)
            {

              *unsigned int v30 = 0;
            }
            else
            {
              *(void *)uint64_t v28 = v36;
              unint64_t v36 = 0;
              *unsigned int v30 = 1;
            }
            uint64_t v2 = v33;
            *uint64_t v29 = v12;
            *(float *)(v28 + 20) = v16;
            *(void *)(v28 + 24) = v34;
            if (v15) {

            }
            if (++v11 == 8) {
              break;
            }
          }
          uint64_t v8 = v9;
          v10 += 32;
          v9 += 32;
          if (v9 == v2) {
            return 1;
          }
        }
        BOOL v4 = v9 + 32 == v33;
      }
      break;
  }
  return v4;
}

uint64_t std::__function::__func<md::RouteLineSupport::updateRouteLine(VKRouteLine *)::$_0,std::allocator<md::RouteLineSupport::updateRouteLine(VKRouteLine *)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF51DE28;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::RouteLineSupport::updateRouteLine(VKRouteLine *)::$_0,std::allocator<md::RouteLineSupport::updateRouteLine(VKRouteLine *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF51DE28;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::RouteLineSupport::updateRouteLine(VKRouteLine *)::$_0,std::allocator<md::RouteLineSupport::updateRouteLine(VKRouteLine *)::$_0>,void ()(void)>::~__func()
{
}

void sub_1A26AAC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  uint64_t v10 = v9;

  a9.super_class = (Class)VKRouteLineObserverForExternalFeatures;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1A26AAD10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void getSortedArrayOfRoutes(VKRouteContext *a1, void *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  BOOL v4 = [v3 alternateRoutes];
  unint64_t v5 = [v4 count];
  unsigned int v6 = [v3 routeInfo];
  if (v6) {
    ++v5;
  }
  a1->super.isa = 0;
  a1->_routeInfo = 0;
  *(void *)&a1->_useType = 0;
  {
    operator new();
  }
  uint64_t v7 = mdm::Allocator::instance(void)::alloc;
  a1->_inspectedSegmentIndex = mdm::Allocator::instance(void)::alloc;
  if (v5)
  {
    if (v5 >> 61) {
      abort();
    }
    uint64_t v8 = 8 * v5;
    uint64_t v9 = (objc_class *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v8, 8);
    a1->super.isa = v9;
    uint64_t v10 = (VKRouteInfo *)((char *)v9 + v8);
    *(void *)&a1->_useType = (char *)v9 + v8;
    do
    {
      if (v9) {
        *(void *)uint64_t v9 = 0;
      }
      uint64_t v9 = (objc_class *)((char *)v9 + 8);
      v8 -= 8;
    }
    while (v8);
    a1->_routeInfo = v10;
  }

  int v11 = [v3 routeInfo];

  if (v11)
  {
    unsigned int v12 = [v3 routeInfo];
    unsigned int v13 = [v12 route];
    id v31 = v13;
    routeInfo = a1->_routeInfo;
    if ((unint64_t)routeInfo >= *(void *)&a1->_useType)
    {
      p_route = (VKRouteInfo *)std::vector<GEOComposedRoute * {__strong},geo::StdAllocator<GEOComposedRoute * {__strong},mdm::Allocator>>::__emplace_back_slow_path<GEOComposedRoute * {__strong}>((uint64_t)a1, (uint64_t *)&v31);
      unsigned int v13 = v31;
    }
    else
    {
      if (routeInfo)
      {
        id v31 = 0;
        routeInfo->super.isa = (Class)v13;
        unsigned int v13 = 0;
      }
      p_route = (VKRouteInfo *)&routeInfo->_route;
    }
    a1->_routeInfo = p_route;
  }
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  float v16 = [v3 alternateRoutes];
  uint64_t v17 = [v16 countByEnumeratingWithState:&v27 objects:v32 count:16];
  if (v17)
  {
    uint64_t v18 = *(void *)v28;
    do
    {
      for (uint64_t i = 0; i != v17; ++i)
      {
        if (*(void *)v28 != v18) {
          objc_enumerationMutation(v16);
        }
        uint64_t v20 = [*(id *)(*((void *)&v27 + 1) + 8 * i) route];
        id v26 = v20;
        id v21 = a1->_routeInfo;
        if ((unint64_t)v21 >= *(void *)&a1->_useType)
        {
          uint64_t v22 = (VKRouteInfo *)std::vector<GEOComposedRoute * {__strong},geo::StdAllocator<GEOComposedRoute * {__strong},mdm::Allocator>>::__emplace_back_slow_path<GEOComposedRoute * {__strong}>((uint64_t)a1, (uint64_t *)&v26);
          uint64_t v20 = v26;
        }
        else
        {
          if (v21)
          {
            id v26 = 0;
            v21->super.isa = (Class)v20;
            uint64_t v20 = 0;
          }
          uint64_t v22 = (VKRouteInfo *)&v21->_route;
        }
        a1->_routeInfo = v22;
      }
      uint64_t v17 = [v16 countByEnumeratingWithState:&v27 objects:v32 count:16];
    }
    while (v17);
  }

  uint64_t v23 = (objc_class *)a1->_routeInfo;
  unint64_t v24 = 126 - 2 * __clz((v23 - a1->super.isa) >> 3);
  if (v23 == a1->super.isa) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = v24;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*,false>((void **)a1->super.isa, (void **)v23, v25, 1);
}

void sub_1A26AB03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  std::vector<VKLabelNavRoadLabel * {__strong},geo::StdAllocator<VKLabelNavRoadLabel * {__strong},mdm::Allocator>>::~vector[abi:nn180100](v20);
  _Unwind_Resume(a1);
}

void md::RouteLineSupport::resolveCurrentRouteLeg(md::RouteLineSupport *this)
{
  *((void *)this + 28) = 0;
  uint64_t v1 = (void *)*((void *)this + 3);
  if (v1)
  {
    id v3 = v1;
    BOOL v4 = [v3 routeInfo];
    id v6 = [v4 route];

    LODWORD(v3) = *((_DWORD *)this + 53);
    if (v3 < [v6 pointCount])
    {
      uint64_t v5 = objc_msgSend(v6, "legIndexForStepIndex:", objc_msgSend(v6, "stepIndexForPointIndex:", *((unsigned int *)this + 53)));
      if (v5 != 0x7FFFFFFFFFFFFFFFLL) {
        *((void *)this + 28) = v5;
      }
    }
  }
}

void sub_1A26AB190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void *std::vector<GEOComposedRoute * {__strong},geo::StdAllocator<GEOComposedRoute * {__strong},mdm::Allocator>>::__emplace_back_slow_path<GEOComposedRoute * {__strong}>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61) {
    abort();
  }
  uint64_t v5 = *(void *)(a1 + 16) - *(void *)a1;
  if (v5 >> 2 > v3) {
    unint64_t v3 = v5 >> 2;
  }
  BOOL v19 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF8;
  uint64_t v6 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v19) {
    uint64_t v6 = v3;
  }
  if (v6)
  {
    uint64_t v8 = 8 * v6;
    uint64_t v9 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), 8 * v6, 8);
    uint64_t v10 = (void *)(v9 + 8 * v2);
    uint64_t v6 = v9 + v8;
    if (v9)
    {
      uint64_t v11 = *a2;
      *a2 = 0;
      *uint64_t v10 = v11;
    }
  }
  else
  {
    uint64_t v10 = (void *)(8 * v2);
  }
  unsigned int v12 = v10 + 1;
  unsigned int v13 = *(void **)a1;
  unint64_t v14 = *(void *)(a1 + 8);
  if (v14 == *(void *)a1)
  {
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v12;
    uint64_t v29 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v6;
    if (!v14) {
      return v12;
    }
    goto LABEL_26;
  }
  unint64_t v15 = v14 - *(void *)a1 - 8;
  if (v15 <= 0x57
    || ((unint64_t v16 = ((unint64_t)v13 - v14 + 7) & 0xFFFFFFFFFFFFFFF8,
         unint64_t v17 = v14 + v16,
         uint64_t v18 = (char *)v10 + v16,
         v17 < (unint64_t)v10)
      ? (BOOL v19 = (unint64_t)v18 >= v14)
      : (BOOL v19 = 1),
        !v19))
  {
    id v21 = *(void **)(a1 + 8);
    do
    {
LABEL_22:
      uint64_t v27 = *--v21;
      void *v21 = 0;
      *--uint64_t v10 = v27;
    }
    while (v21 != v13);
    goto LABEL_23;
  }
  uint64_t v20 = (v15 >> 3) + 1;
  id v21 = (void *)(v14 - 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL));
  uint64_t v22 = v10 - 2;
  uint64_t v23 = (long long *)(v14 - 32);
  uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v26 = *v23;
    long long v25 = v23[1];
    *uint64_t v23 = 0uLL;
    v23[1] = 0uLL;
    v23 -= 2;
    *(v22 - 1) = v26;
    _OWORD *v22 = v25;
    v22 -= 2;
    v24 -= 4;
  }
  while (v24);
  v10 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
  if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_22;
  }
LABEL_23:
  unint64_t v14 = *(void *)a1;
  uint64_t v28 = *(void *)(a1 + 8);
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v12;
  uint64_t v29 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v6;
  while (v28 != v14)
  {
    long long v30 = *(void **)(v28 - 8);
    v28 -= 8;
  }
  if (v14) {
LABEL_26:
  }
    (*(void (**)(void, unint64_t, unint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v14, v29 - v14);
  return v12;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*,false>(void **a1, void **a2, uint64_t a3, char a4)
{
void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(void **a1, void **a2, void **a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  uint64_t v8 = *a3;
  if (*a2 >= *a1)
  {
    if (v8 >= v6) {
      return;
    }
    *a2 = 0;
    uint64_t v12 = *a3;
    *a3 = 0;
    unint64_t v13 = *a2;
    *a2 = v12;

    unint64_t v14 = *a3;
    *a3 = v6;

    uint64_t v15 = *a1;
    if (*a2 >= *a1) {
      return;
    }
    *a1 = 0;
    unint64_t v16 = *a2;
    *a2 = 0;
    unint64_t v17 = *a1;
    *a1 = v16;

    uint64_t v11 = *a2;
    *a2 = v15;
  }
  else
  {
    *a1 = 0;
    if (v8 >= v6)
    {
      uint64_t v18 = *a2;
      *a2 = 0;
      BOOL v19 = *a1;
      *a1 = v18;

      uint64_t v20 = *a2;
      *a2 = v7;

      id v21 = *a2;
      if (*a3 >= *a2) {
        return;
      }
      *a2 = 0;
      uint64_t v22 = *a3;
      *a3 = 0;
      uint64_t v23 = *a2;
      *a2 = v22;

      uint64_t v11 = *a3;
      *a3 = v21;
    }
    else
    {
      uint64_t v9 = *a3;
      *a3 = 0;
      uint64_t v10 = *a1;
      *a1 = v9;

      uint64_t v11 = *a3;
      *a3 = v7;
    }
  }
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(void **a1, void **a2, void **a3, void **a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(a1, a2, a3);
  uint64_t v8 = *a3;
  if (*a4 < *a3)
  {
    *a3 = 0;
    uint64_t v9 = *a4;
    *a4 = 0;
    uint64_t v10 = *a3;
    *a3 = v9;

    uint64_t v11 = *a4;
    *a4 = v8;

    uint64_t v12 = *a2;
    if (*a3 < *a2)
    {
      *a2 = 0;
      unint64_t v13 = *a3;
      *a3 = 0;
      unint64_t v14 = *a2;
      *a2 = v13;

      uint64_t v15 = *a3;
      *a3 = v12;

      unint64_t v16 = *a1;
      if (*a2 < *a1)
      {
        *a1 = 0;
        unint64_t v17 = *a2;
        *a2 = 0;
        uint64_t v18 = *a1;
        *a1 = v17;

        BOOL v19 = *a2;
        *a2 = v16;
      }
    }
  }
}

void std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(void **a1, void **a2, void **a3, void **a4, void **a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(a1, a2, a3, a4);
  uint64_t v10 = *a4;
  if (*a5 < *a4)
  {
    *a4 = 0;
    uint64_t v11 = *a5;
    *a5 = 0;
    uint64_t v12 = *a4;
    *a4 = v11;

    unint64_t v13 = *a5;
    *a5 = v10;

    unint64_t v14 = *a3;
    if (*a4 < *a3)
    {
      *a3 = 0;
      uint64_t v15 = *a4;
      *a4 = 0;
      unint64_t v16 = *a3;
      *a3 = v15;

      unint64_t v17 = *a4;
      *a4 = v14;

      uint64_t v18 = *a2;
      if (*a3 < *a2)
      {
        *a2 = 0;
        BOOL v19 = *a3;
        *a3 = 0;
        uint64_t v20 = *a2;
        *a2 = v19;

        id v21 = *a3;
        *a3 = v18;

        uint64_t v22 = *a1;
        if (*a2 < *a1)
        {
          *a1 = 0;
          uint64_t v23 = *a2;
          *a2 = 0;
          uint64_t v24 = *a1;
          *a1 = v23;

          unint64_t v25 = *a2;
          *a2 = v22;
        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(void **a1, void **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *a1;
      if (*(a2 - 1) < *a1)
      {
        *a1 = 0;
        uint64_t v7 = *(a2 - 1);
        *(a2 - 1) = 0;
        uint64_t v8 = *a1;
        *a1 = v7;

        uint64_t v9 = *(a2 - 1);
        *(a2 - 1) = v6;

        return 1;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v10 = (unint64_t *)(a1 + 2);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GEOComposedRoute * {__strong}*>(a1, a1 + 1, a1 + 2);
      uint64_t v11 = (unint64_t *)(a1 + 3);
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    unint64_t v16 = (void *)*v11;
    unint64_t v17 = *v10;
    if (*v11 < *v10)
    {
      *uint64_t v11 = 0;
      uint64_t v18 = v12;
      do
      {
        BOOL v19 = (void **)((char *)a1 + v18);
        uint64_t v20 = *(void **)((char *)a1 + v18 + 24);
        void v19[2] = 0;
        void v19[3] = v17;

        if (v18 == -16)
        {
          unint64_t v14 = a1;
          goto LABEL_7;
        }
        unint64_t v17 = v19[1];
        v18 -= 8;
      }
      while ((unint64_t)v16 < v17);
      unint64_t v14 = (void **)((char *)a1 + v18 + 24);
LABEL_7:
      uint64_t v15 = *v14;
      void *v14 = v16;

      if (++v13 == 8) {
        return v11 + 1 == (unint64_t *)a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 8;
    if (++v11 == (unint64_t *)a2) {
      return 1;
    }
  }
}

void md::RouteLineSupport::resolveRouteLegWhen(md::RouteLineSupport *this, const PolylineCoordinate *a2, unsigned int *a3)
{
  if (*(void *)&a2[28] == -1 || (char v5 = (void *)a2[3]) == 0)
  {
    *(unsigned char *)this = 0;
  }
  else
  {
    id v7 = v5;
    uint64_t v8 = [v7 routeInfo];
    id v13 = [v8 route];

    LODWORD(v7) = *a3;
    if (v7 >= [v13 pointCount]
      || (unint64_t v9 = objc_msgSend(v13, "legIndexForStepIndex:", objc_msgSend(v13, "stepIndexForPointIndex:", *a3)),
          v9 == 0x7FFFFFFFFFFFFFFFLL))
    {
      *(unsigned char *)this = 0;
    }
    else
    {
      PolylineCoordinate v10 = a2[28];
      BOOL v11 = *(void *)&v10 > v9;
      char v12 = *(void *)&v10 >= v9;
      if (v11) {
        char v12 = 2;
      }
      *(unsigned char *)this = 1;
      *((unsigned char *)this + 1) = v12;
    }
  }
}

void sub_1A26AC1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t md::RouteLineSupport::updateWaypointProximities(id *this)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (md::RouteLineSupport::didCurrentWaypointChange((md::RouteLineSupport *)this))
  {
    id v2 = this[3];
    uint64_t v3 = [v2 currentWaypoint];
    id v4 = this[30];
    this[30] = (id)v3;

    id v5 = this[3];
    *((unsigned char *)this + 248) = [v5 currentWaypointProximity];
  }
  float v43 = objc_msgSend(this[3], "routeInfo", this);
  uint64_t v6 = *(void **)(v42 + 40);
  if (v6 == (void *)(v42 + 48))
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    int v7 = 0;
    do
    {
      if ((void *)v6[4] == v43)
      {
        uint64_t v8 = *(void **)(v42 + 240);
        int v46 = *(unsigned __int8 *)(v42 + 248);
      }
      else
      {
        uint64_t v8 = 0;
        int v46 = 0;
      }
      uint64_t v9 = v6[5];
      id v47 = v8;
      PolylineCoordinate v10 = *(void **)(v9 + 64);
      float v11 = 0.0;
      if (!v10) {
        goto LABEL_20;
      }
      char v12 = (void *)(v9 + 64);
      do
      {
        unint64_t v13 = v10[4];
        BOOL v14 = v13 >= (unint64_t)v47;
        if (v13 >= (unint64_t)v47) {
          uint64_t v15 = v10;
        }
        else {
          uint64_t v15 = v10 + 1;
        }
        if (v14) {
          char v12 = v10;
        }
        PolylineCoordinate v10 = (void *)*v15;
      }
      while (*v15);
      if (v12 != (void *)(v9 + 64) && v12[4] <= (unint64_t)v47)
      {
        unsigned int v16 = *((_DWORD *)v12 + 10);
        float v11 = *((float *)v12 + 11);
      }
      else
      {
LABEL_20:
        unsigned int v16 = 0;
      }
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      unint64_t v17 = [*(id *)(v9 + 24) waypoints];
      float64x2_t v44 = v6;
      int v45 = v7;
      uint64_t v18 = [v17 countByEnumeratingWithState:&v52 objects:v57 count:16];
      if (v18)
      {
        uint64_t v19 = *(void *)v53;
        if (v46 == 2) {
          char v20 = 2;
        }
        else {
          char v20 = 1;
        }
        do
        {
          for (uint64_t i = 0; i != v18; ++i)
          {
            if (*(void *)v53 != v19) {
              objc_enumerationMutation(v17);
            }
            uint64_t v22 = *(void **)(*((void *)&v52 + 1) + 8 * i);
            uint64_t v23 = [v22 polylineCoordinate];
            if (v16 <= v23 && (v16 == v23 ? (BOOL v24 = v11 <= *((float *)&v23 + 1)) : (BOOL v24 = 1), v24))
            {
              uint64_t v25 = [v22 polylineCoordinate];
              if (v16 == v25 && vabds_f32(*((float *)&v25 + 1), v11) < 0.00000011921) {
                unsigned __int8 v26 = v20;
              }
              else {
                unsigned __int8 v26 = 1;
              }
            }
            else
            {
              unsigned __int8 v26 = 3;
            }
            if ([v22 when] != v26)
            {
              if (v26 == 3 || [v22 when] == 3) {
                *(unsigned char *)(v9 + 50) = 1;
              }
              [v22 setWhen:v26];
            }
          }
          uint64_t v18 = [v17 countByEnumeratingWithState:&v52 objects:v57 count:16];
        }
        while (v18);
      }

      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      unint64_t v27 = [*(id *)(v9 + 24) anchorpoints];
      uint64_t v28 = [v27 countByEnumeratingWithState:&v48 objects:v56 count:16];
      if (v28)
      {
        uint64_t v29 = *(void *)v49;
        if (v46 == 2) {
          char v30 = 2;
        }
        else {
          char v30 = 1;
        }
        do
        {
          for (uint64_t j = 0; j != v28; ++j)
          {
            if (*(void *)v49 != v29) {
              objc_enumerationMutation(v27);
            }
            float v32 = *(void **)(*((void *)&v48 + 1) + 8 * j);
            uint64_t v33 = [v32 polylineCoordinate];
            if (v16 <= v33 && (v16 == v33 ? (BOOL v34 = v11 <= *((float *)&v33 + 1)) : (BOOL v34 = 1), v34))
            {
              uint64_t v35 = [v32 polylineCoordinate];
              if (v16 == v35 && vabds_f32(*((float *)&v35 + 1), v11) < 0.00000011921) {
                unsigned __int8 v36 = v30;
              }
              else {
                unsigned __int8 v36 = 1;
              }
            }
            else
            {
              unsigned __int8 v36 = 3;
            }
            if ([v32 when] != v36)
            {
              [v32 setWhen:v36];
              *(unsigned char *)(v9 + 50) = 1;
            }
          }
          uint64_t v28 = [v27 countByEnumeratingWithState:&v48 objects:v56 count:16];
        }
        while (v28);
      }

      BOOL v37 = v44;
      BOOL v38 = (void *)v44[1];
      if (v38)
      {
        do
        {
          BOOL v39 = v38;
          BOOL v38 = (void *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          BOOL v39 = (void *)v37[2];
          BOOL v40 = *v39 == (void)v37;
          BOOL v37 = v39;
        }
        while (!v40);
      }
      int v7 = (*(unsigned char *)(v44[5] + 50) != 0) | v45;
      uint64_t v6 = v39;
    }
    while (v39 != (void *)(v42 + 48));
  }

  return v7 & 1;
}

void sub_1A26AC688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<md::RouteWaypointLabelFeature>,geo::StdAllocator<std::shared_ptr<md::RouteWaypointLabelFeature>,mdm::Allocator>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::shared_ptr<md::RouteWaypointLabelFeature>*>,std::__wrap_iter<std::shared_ptr<md::RouteWaypointLabelFeature>*>>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  uint64_t v6 = a3;
  uint64_t v8 = (void *)*a1;
  unint64_t v9 = a1[1];
  uint64_t v10 = a2 - *a1;
  uint64_t v11 = v10 >> 4;
  unint64_t v12 = *a1 + (v10 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[2];
  if (a5 > (uint64_t)(v13 - v9) >> 4)
  {
    unint64_t v14 = a5 + ((uint64_t)(v9 - (void)v8) >> 4);
    if (v14 >> 60) {
      abort();
    }
    uint64_t v15 = v13 - (void)v8;
    if (v15 >> 3 > v14) {
      unint64_t v14 = v15 >> 3;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
      uint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v16 = v14;
    }
    if (v16) {
      uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], 16 * v16, 8);
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v23 = (void *)(v17 + 16 * v11);
    uint64_t v24 = 16 * a5;
    uint64_t v25 = &v23[2 * a5];
    unsigned __int8 v26 = v6 + 1;
    unint64_t v27 = v23;
    do
    {
      if (v27)
      {
        uint64_t v28 = *v26;
        *unint64_t v27 = *(v26 - 1);
        v27[1] = v28;
        if (v28) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
        }
      }
      v27 += 2;
      v26 += 2;
      v24 -= 16;
    }
    while (v24);
    uint64_t v29 = (void *)*a1;
    if (*a1 != v12)
    {
      char v30 = (void *)v12;
      do
      {
        long long v31 = *((_OWORD *)v30 - 1);
        v30 -= 2;
        *((_OWORD *)v23 - 1) = v31;
        v23 -= 2;
        *char v30 = 0;
        v30[1] = 0;
      }
      while (v30 != v29);
    }
    uint64_t v32 = a1[1];
    if (v32 != v12)
    {
      do
      {
        *v25++ = *(_OWORD *)v12;
        *(void *)unint64_t v12 = 0;
        *(void *)(v12 + 8) = 0;
        v12 += 16;
      }
      while (v12 != v32);
      unint64_t v12 = a1[1];
    }
    uint64_t v33 = (void *)*a1;
    *a1 = (uint64_t)v23;
    a1[1] = (uint64_t)v25;
    for (a1[2] = v17 + 16 * v16; (void *)v12 != v33; v12 -= 16)
    {
      BOOL v34 = *(std::__shared_weak_count **)(v12 - 8);
      if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v33)
    {
      uint64_t v35 = *(void (**)(void))(*(void *)a1[3] + 40);
      v35();
    }
    return;
  }
  uint64_t v18 = (uint64_t)(v9 - v12) >> 4;
  if (v18 >= a5)
  {
    uint64_t v19 = &a3[2 * a5];
    id v21 = (char *)a1[1];
LABEL_43:
    unsigned __int8 v36 = (char *)(v12 + 16 * a5);
    BOOL v37 = &v21[-16 * a5];
    BOOL v38 = v21;
    if ((unint64_t)v37 < v9)
    {
      BOOL v38 = v21;
      do
      {
        if (v38)
        {
          *(_OWORD *)BOOL v38 = *(_OWORD *)v37;
          *(void *)BOOL v37 = 0;
          *((void *)v37 + 1) = 0;
        }
        v37 += 16;
        v38 += 16;
      }
      while ((unint64_t)v37 < v9);
    }
    a1[1] = (uint64_t)v38;
    if (v21 != v36)
    {
      BOOL v39 = (std::__shared_weak_count **)(v21 - 8);
      uint64_t v40 = 16 * ((v21 - v36) >> 4);
      uint64_t v41 = (uint64_t)&v8[2 * v11 - 2];
      do
      {
        uint64_t v42 = (void *)(v41 + v40);
        long long v43 = *(_OWORD *)(v41 + v40);
        void *v42 = 0;
        v42[1] = 0;
        float64x2_t v44 = *v39;
        *(_OWORD *)(v39 - 1) = v43;
        if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
        v39 -= 2;
        v40 -= 16;
      }
      while (v40);
    }
    for (; v6 != v19; v12 += 16)
    {
      uint64_t v46 = *v6;
      uint64_t v45 = v6[1];
      if (v45) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v45 + 8), 1uLL, memory_order_relaxed);
      }
      id v47 = *(std::__shared_weak_count **)(v12 + 8);
      *(void *)unint64_t v12 = v46;
      *(void *)(v12 + 8) = v45;
      if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
      v6 += 2;
    }
    return;
  }
  uint64_t v19 = &a3[2 * v18];
  if (v19 == a4)
  {
    id v21 = (char *)a1[1];
  }
  else
  {
    char v20 = &a3[2 * v18];
    id v21 = (char *)a1[1];
    do
    {
      if (v21)
      {
        uint64_t v22 = v20[1];
        *(void *)id v21 = *v20;
        *((void *)v21 + 1) = v22;
        if (v22) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
        }
      }
      v20 += 2;
      v21 += 16;
    }
    while (v20 != a4);
  }
  a1[1] = (uint64_t)v21;
  if ((uint64_t)(v9 - v12) >= 1) {
    goto LABEL_43;
  }
}

uint64_t *std::__tree<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::__map_value_compare<VKRouteInfo * {__strong},std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,std::less<VKRouteInfo * {__strong}>,true>,geo::StdAllocator<std::__value_type<VKRouteInfo * {__strong},md::RouteLineSupport::RouteWaypointData>,mdm::Allocator>>::__emplace_unique_key_args<VKRouteInfo * {__strong},std::piecewise_construct_t const&,std::tuple<VKRouteInfo * const {__strong}&>,std::tuple<>>(uint64_t **a1, unint64_t a2, id **a3)
{
  uint64_t v6 = (uint64_t *)(a1 + 1);
  id v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        id v5 = (uint64_t *)*v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_8;
        }
      }
      if (v8 >= a2) {
        return v7;
      }
      id v5 = (uint64_t *)v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    int v7 = (uint64_t *)(a1 + 1);
LABEL_8:
    uint64_t v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1[2] + 16))(a1[2], 120, 8);
    *(void *)(v9 + 32) = **a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    {
      operator new();
    }
    *(void *)(v9 + 80) = mdm::Allocator::instance(void)::alloc;
    *(void *)(v9 + 88) = 0;
    *(void *)(v9 + 96) = 0;
    *(void *)(v9 + 104) = 0;
    {
      operator new();
    }
    *(void *)(v9 + 112) = mdm::Allocator::instance(void)::alloc;
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = v7;
    *uint64_t v6 = v9;
    uint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v9;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = (uint64_t *)*v6;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[3] = (uint64_t *)((char *)a1[3] + 1);
  }
  return (uint64_t *)v9;
}

uint64_t std::__shared_ptr_emplace<md::WaypointStore>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::WaypointStore>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FBC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::WaypointStore>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF57FBC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::RouteLineSupport::setRouteLine(md::RouteLineSupport *this, VKRouteLine *a2)
{
  uint64_t v9 = a2;
  if (*((VKRouteLine **)this + 45) != v9)
  {
    uint64_t v3 = v9;
    id v4 = v3;
    if (v3) {
      id v5 = v3;
    }
    uint64_t v6 = (void *)*((void *)this + 45);
    *((void *)this + 45) = v4;

    int v7 = [[VKRouteLineObserverForExternalFeatures alloc] initWithRouteLineSupport:this andRouteLine:v4];
    unint64_t v8 = (void *)*((void *)this + 48);
    *((void *)this + 48) = v7;

    md::RouteLineSupport::generateRoutelineFeatures((id *)this);
  }
}

void sub_1A26ACE38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double md::StandardLabelMapTile::assignWorldPointToLabel(md::StandardLabelMapTile *this, md::Label *a2)
{
  id v4 = (float *)(*(uint64_t (**)(void, char *, void, void))(**((void **)a2 + 1) + 120))(*((void *)a2 + 1), (char *)a2 + 48, *((unsigned __int8 *)this + 9), *((void *)this + 63));
  uint64_t v5 = md::LabelPoint::mercatorPoint((md::LabelPoint *)v4);
  uint64_t v6 = *(void *)(v5 + 8);
  double v7 = *(double *)v5 + (double)*((char *)this + 32);
  float v8 = v4[10];
  BOOL v9 = v8 == 3.4028e38;
  BOOL v10 = v8 != 3.4028e38;
  if (v8 == 3.4028e38) {
    float v8 = 0.0;
  }
  *((float *)a2 + 47) = v8;
  *((unsigned char *)a2 + 192) = v10;
  *((unsigned char *)a2 + 835) = v10;
  *((double *)a2 + 62) = v7;
  *((void *)a2 + 63) = v6;
  *((void *)a2 + 64) = 0;
  double v11 = 0.0;
  if (!v9) {
    double v11 = v8;
  }
  double result = *((double *)a2 + 29) * v11;
  *((double *)a2 + 82) = result;
  *((void *)a2 + 68) = 0;
  *((void *)a2 + 69) = 0;
  *((double *)a2 + 70) = result;
  *((void *)a2 + 65) = 0;
  *((void *)a2 + 66) = 0;
  *((void *)a2 + 67) = 0x3FF0000000000000;
  return result;
}

double md::StandardLabelMapTile::worldPointFromMercatorPoint(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

void md::StandardLabelMapTile::~StandardLabelMapTile(md::StandardLabelMapTile *this)
{
  *(void *)this = &unk_1EF53ED68;
  id v2 = (std::__shared_weak_count *)*((void *)this + 64);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::LabelMapTile::~LabelMapTile(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF53ED68;
  id v2 = (std::__shared_weak_count *)*((void *)this + 64);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::LabelMapTile::~LabelMapTile(this);
}

void std::__function::__func<md::StandardLabelMapTile::loadElevationData(std::shared_ptr<md::ElevationTileData> const&)::$_0,std::allocator<md::StandardLabelMapTile::loadElevationData(std::shared_ptr<md::ElevationTileData> const&)::$_0>,void ()(md::LabelManager *)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<md::StandardLabelMapTile::loadElevationData(std::shared_ptr<md::ElevationTileData> const&)::$_0,std::allocator<md::StandardLabelMapTile::loadElevationData(std::shared_ptr<md::ElevationTileData> const&)::$_0>,void ()(md::LabelManager *)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF575318;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<md::StandardLabelMapTile::loadElevationData(std::shared_ptr<md::ElevationTileData> const&)::$_0,std::allocator<md::StandardLabelMapTile::loadElevationData(std::shared_ptr<md::ElevationTileData> const&)::$_0>,void ()(md::LabelManager *)>::~__func(void *a1)
{
  *a1 = &unk_1EF575318;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::StandardLabelMapTile::loadElevationData(std::shared_ptr<md::ElevationTileData> const&)::$_0,std::allocator<md::StandardLabelMapTile::loadElevationData(std::shared_ptr<md::ElevationTileData> const&)::$_0>,void ()(md::LabelManager *)>::~__func(void *a1)
{
  *a1 = &unk_1EF575318;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void md::DaVinciAssetResourceDecoder::decode(const gdc::ResourceKey *a1@<X1>, const gdc::RawResourceSourceData *a2@<X2>, uint64_t *a3@<X8>)
{
  if (*(void *)a2)
  {
    uint64_t v7 = (*(uint64_t (**)(void))(**(void **)a2 + 32))(*(void *)a2);
    uint64_t v8 = (*(uint64_t (**)(void))(**(void **)a2 + 24))();
    v74[0] = 0;
    v72[0] = v7;
    v72[1] = v8;
    v72[2] = 0;
    char v73 = 0;
    long long v69 = 0u;
    long long v70 = 0u;
    int v71 = 1065353216;
    long long v66 = 0u;
    long long v67 = 0u;
    int v68 = 1065353216;
    v64[1] = 0;
    unint64_t v65 = 0;
    geo::codec::AssetDecoder::decodeAsset((geo::codec::AssetDecoder *)v72, (geo::ibitstream *)v74, (geo::codec::AssetDecoder *)v64);
    if (v64[0])
    {
      long long v50 = a3;
      uint64_t v9 = *(void *)(v64[0] + 24);
      if (v9 != *(void *)(v64[0] + 32))
      {
        v51[6] = *(void **)v9;
        __int16 v52 = *(_WORD *)(v9 + 8);
        long long v54 = 0;
        long long v55 = 0;
        long long v53 = 0;
        double v11 = *(const geo::codec::MaterialSheet::Material **)(v9 + 16);
        BOOL v10 = *(const geo::codec::MaterialSheet::Material **)(v9 + 24);
        int64_t v12 = v10 - v11;
        if (v10 != v11)
        {
          unint64_t v13 = 0x823EE08FB823EE09 * (v12 >> 3);
          if (v13 >= 0x8FB823EE08FB83) {
            abort();
          }
          unint64_t v14 = (geo::codec::MaterialSheet::Material *)operator new(v12);
          long long v53 = v14;
          long long v54 = v14;
          long long v55 = (char *)v14 + 456 * v13;
          do
          {
            uint64_t v15 = geo::codec::MaterialSheet::Material::Material(v14, v11);
            double v11 = (const geo::codec::MaterialSheet::Material *)((char *)v11 + 456);
            unint64_t v14 = (geo::codec::MaterialSheet::Material *)((char *)v15 + 456);
          }
          while (v11 != v10);
          long long v54 = v14;
        }
        long double v56 = 0;
        uint64_t v57 = 0;
        uint64_t v58 = 0;
        uint64_t v17 = *(void *)(v9 + 40);
        uint64_t v16 = *(void *)(v9 + 48);
        int64_t v18 = v16 - v17;
        if (v16 != v17)
        {
          unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (v18 >> 3);
          if (v19 >= 0xAAAAAAAAAAAAAABLL) {
            abort();
          }
          long double v56 = operator new(v18);
          uint64_t v57 = v56;
          uint64_t v58 = (char *)&v56[3 * v19];
          char v20 = v56;
          do
          {
            *char v20 = 0;
            v20[1] = 0;
            void v20[2] = 0;
            uint64_t v24 = *(const void **)v17;
            uint64_t v23 = *(void *)(v17 + 8);
            uint64_t v25 = v23 - *(void *)v17;
            if (v23 != *(void *)v17)
            {
              if (v25 < 0) {
                abort();
              }
              id v21 = (char *)operator new(v23 - *(void *)v17);
              *char v20 = v21;
              v20[1] = v21;
              void v20[2] = &v21[8 * (v25 >> 3)];
              size_t v22 = v25 & 0xFFFFFFFFFFFFFFF8;
              memcpy(v21, v24, v22);
              v20[1] = &v21[v22];
            }
            v20 += 3;
            v17 += 24;
          }
          while (v17 != v16);
          uint64_t v57 = v20;
        }
        geo::codec::MaterialSheet::Material::Material((geo::codec::MaterialSheet::Material *)&v59, (const geo::codec::MaterialSheet::Material *)(v9 + 64));
        uint64_t v60 = 0;
        BOOL v61 = 0;
        uint64_t v26 = *(void *)(v9 + 544);
        uint64_t v62 = 0;
        uint64_t v63 = v26;
        uint64_t v27 = *(void *)(v9 + 520);
        uint64_t v28 = *(void *)(v9 + 528);
        if (v28 != v27)
        {
          if (0xCCCCCCCCCCCCCCCDLL * ((v28 - v27) >> 3) >= 0x666666666666667) {
            abort();
          }
          uint64_t v60 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 16))(v26);
          BOOL v61 = (void *)v60;
          uint64_t v62 = v60 + 8 * ((v28 - v27) >> 3);
          uint64_t v29 = (void *)v60;
          do
          {
            if (v29)
            {
              *uint64_t v29 = 0;
              v29[1] = 0;
              uint64_t v30 = *(void *)(v27 + 24);
              v29[2] = 0;
              v29[3] = v30;
              long long v31 = *(unsigned char **)v27;
              uint64_t v32 = *(unsigned char **)(v27 + 8);
              unint64_t v33 = (unint64_t)&v32[-*(void *)v27];
              if (v32 != *(unsigned char **)v27)
              {
                if ((v33 & 0x8000000000000000) != 0) {
                  abort();
                }
                uint64_t v34 = (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v30 + 16))(v30, &v32[-*(void *)v27], 1);
                *uint64_t v29 = v34;
                v29[1] = v34;
                v29[2] = v34 + v33;
                do
                {
                  if (v34) {
                    *(unsigned char *)uint64_t v34 = *v31;
                  }
                  ++v31;
                  ++v34;
                }
                while (v31 != v32);
                v29[1] = v34;
              }
              v29[4] = *(void *)(v27 + 32);
            }
            v27 += 40;
            v29 += 5;
          }
          while (v27 != v28);
          BOOL v61 = v29;
        }
        md::DaVinciMaterialResourceDecoder::translateFromCodec((md::DaVinciMaterialResourceDecoder *)v51, (geo::codec::MaterialSheet *)&v52);
      }
      uint64_t v35 = (char *)operator new(0xE0uLL);
      *(_OWORD *)(v35 + 8) = 0u;
      *(void *)uint64_t v35 = &unk_1EF580E90;
      uint64_t v36 = v64[0];
      v64[0] = 0;
      uint64_t v37 = gdc::Resource::Resource((uint64_t)(v35 + 24), (uint64_t)a1);
      long long v38 = v70;
      *((void *)v35 + 25) = v70;
      *((void *)v35 + 21) = 0;
      *((void *)v35 + 22) = v36;
      long long v39 = v69;
      long long v69 = 0u;
      *(_OWORD *)(v35 + 184) = v39;
      *((void *)v35 + 26) = *((void *)&v38 + 1);
      *((_DWORD *)v35 + 54) = v71;
      if (*((void *)&v38 + 1))
      {
        unint64_t v40 = *(void *)(v38 + 8);
        if ((*((void *)&v39 + 1) & (*((void *)&v39 + 1) - 1)) != 0)
        {
          if (v40 >= *((void *)&v39 + 1)) {
            v40 %= *((void *)&v39 + 1);
          }
        }
        else
        {
          v40 &= *((void *)&v39 + 1) - 1;
        }
        *(void *)(v39 + 8 * v40) = v35 + 200;
        long long v70 = 0uLL;
      }
      *long long v50 = v37;
      v50[1] = (uint64_t)v35;
      uint64_t v41 = (geo::codec::Asset *)v64[0];
      v64[0] = 0;
      if (v41)
      {
        geo::codec::Asset::~Asset(v41);
        MEMORY[0x1A6239270]();
      }
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
    }
    uint64_t v42 = v65;
    if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
    long long v43 = (void *)v67;
    if ((void)v67)
    {
      do
      {
        uint64_t v45 = (void *)*v43;
        uint64_t v46 = (void *)v43[3];
        if (v46)
        {
          v43[4] = v46;
          operator delete(v46);
        }
        operator delete(v43);
        long long v43 = v45;
      }
      while (v45);
    }
    if ((void)v66) {
      operator delete((void *)v66);
    }
    float64x2_t v44 = (void *)v70;
    while (v44)
    {
      id v47 = v44;
      float64x2_t v44 = (void *)*v44;
      long long v48 = (std::__shared_weak_count *)v47[4];
      if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
      operator delete(v47);
    }
    long long v49 = (void *)v69;
    *(void *)&long long v69 = 0;
    if (v49) {
      operator delete(v49);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_1A26AD98C(_Unwind_Exception *a1)
{
  std::unique_ptr<geo::codec::Asset>::~unique_ptr[abi:nn180100]((geo::codec::Asset **)(v1 - 248));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 - 240);
  md::MeshRenderableContext::~MeshRenderableContext((md::MeshRenderableContext *)(v1 - 224));
  std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>::~unordered_map[abi:nn180100](v1 - 176);
  _Unwind_Resume(a1);
}

geo::codec::Asset **std::unique_ptr<geo::codec::Asset>::~unique_ptr[abi:nn180100](geo::codec::Asset **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    geo::codec::Asset::~Asset(v2);
    MEMORY[0x1A6239270]();
  }
  return a1;
}

void geo::codec::Asset::~Asset(geo::codec::Asset *this)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 31));
  uint64_t v2 = *((void *)this + 26);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 27);
    uint64_t v4 = *((void *)this + 26);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(void *)(v3 - 56);
        if (v5)
        {
          *(void *)(v3 - 48) = v5;
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v3 - 32) + 40))(*(void *)(v3 - 32), v5, *(void *)(v3 - 40) - v5);
        }
        uint64_t v6 = *(void *)(v3 - 88);
        if (v6)
        {
          *(void *)(v3 - 80) = v6;
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v3 - 64) + 40))(*(void *)(v3 - 64), v6, *(void *)(v3 - 72) - v6);
        }
        uint64_t v7 = *(void *)(v3 - 120);
        if (v7)
        {
          *(void *)(v3 - 112) = v7;
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v3 - 96) + 40))(*(void *)(v3 - 96), v7, *(void *)(v3 - 104) - v7);
        }
        uint64_t v8 = *(void *)(v3 - 152);
        if (v8)
        {
          *(void *)(v3 - 144) = v8;
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v3 - 128) + 40))(*(void *)(v3 - 128), v8, *(void *)(v3 - 136) - v8);
        }
        v3 -= 152;
      }
      while (v3 != v2);
      uint64_t v4 = *((void *)this + 26);
    }
    *((void *)this + 27) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 29) + 40))(*((void *)this + 29), v4, *((void *)this + 28) - v4);
  }
  uint64_t v9 = (uint64_t *)*((void *)this + 22);
  if (v9)
  {
    do
    {
      unint64_t v14 = (uint64_t *)*v9;
      uint64_t v15 = v9[3];
      if (v15)
      {
        v9[4] = v15;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[6] + 40))(v9[6], v15, v9[5] - v15);
      }
      (*(void (**)(void, uint64_t *, uint64_t))(**((void **)this + 23) + 40))(*((void *)this + 23), v9, 56);
      uint64_t v9 = v14;
    }
    while (v14);
  }
  uint64_t v10 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v10) {
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 21) + 40))(*((void *)this + 21), v10, 8 * *((void *)this + 20));
  }
  uint64_t v11 = *((void *)this + 15);
  if (v11)
  {
    uint64_t v12 = *((void *)this + 16);
    uint64_t v13 = *((void *)this + 15);
    if (v12 != v11)
    {
      do
      {
        uint64_t v16 = *(std::__shared_weak_count **)(v12 - 8);
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v16->__on_zero_shared)(v16, v13);
          std::__shared_weak_count::__release_weak(v16);
        }
        v12 -= 16;
      }
      while (v12 != v11);
      uint64_t v13 = *((void *)this + 15);
    }
    *((void *)this + 16) = v11;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 18) + 40))(*((void *)this + 18), v13, *((void *)this + 17) - v13);
  }
  uint64_t v17 = *((void *)this + 11);
  if (v17)
  {
    *((void *)this + 12) = v17;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 14) + 40))(*((void *)this + 14), v17, *((void *)this + 13) - v17);
  }
  uint64_t v18 = *((void *)this + 7);
  if (v18)
  {
    *((void *)this + 8) = v18;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 10) + 40))(*((void *)this + 10), v18, *((void *)this + 9) - v18);
  }
  uint64_t v19 = *((void *)this + 3);
  if (v19)
  {
    uint64_t v20 = *((void *)this + 4);
    uint64_t v21 = *((void *)this + 3);
    if (v20 != v19)
    {
      do
      {
        uint64_t v22 = v20 - 552;
        geo::codec::MaterialSheet::~MaterialSheet((geo::codec::MaterialSheet *)(v20 - 544));
        uint64_t v20 = v22;
      }
      while (v22 != v19);
      uint64_t v21 = *((void *)this + 3);
    }
    *((void *)this + 4) = v19;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 6) + 40))(*((void *)this + 6), v21, *((void *)this + 5) - v21);
  }
  uint64_t v23 = *(void **)this;
  if (*(void *)this)
  {
    uint64_t v24 = (void *)*((void *)this + 1);
    uint64_t v25 = *(void **)this;
    if (v24 != v23)
    {
      do
      {
        uint64_t v26 = (void *)*(v24 - 3);
        if (v26)
        {
          do
          {
            uint64_t v27 = (void *)*v26;
            operator delete(v26);
            uint64_t v26 = v27;
          }
          while (v27);
        }
        uint64_t v29 = (void *)*(v24 - 5);
        v24 -= 5;
        uint64_t v28 = v29;
        *uint64_t v24 = 0;
        if (v29) {
          operator delete(v28);
        }
      }
      while (v24 != v23);
      uint64_t v25 = *(void **)this;
    }
    *((void *)this + 1) = v23;
    operator delete(v25);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  std::__tree<std::__value_type<gm::Range<unsigned short>,unsigned char>,std::__map_value_compare<gm::Range<unsigned short>,std::__value_type<gm::Range<unsigned short>,unsigned char>,geo::range_map<unsigned short,unsigned char,std::less<unsigned short>,std::allocator<std::pair<gm::Range<unsigned short> const,unsigned char>>>::RangeCompare,true>,std::allocator<std::__value_type<gm::Range<unsigned short>,unsigned char>>>::destroy((uint64_t)this + 240, *((void **)this + 31));
  uint64_t v2 = *((void *)this + 26);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 27);
    uint64_t v4 = *((void *)this + 26);
    if (v3 != v2)
    {
      do
        geo::codec::Mesh::~Mesh((geo::codec::Mesh *)(v3 - 152));
      while (v3 != v2);
      uint64_t v4 = *((void *)this + 26);
    }
    *((void *)this + 27) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 29) + 40))(*((void *)this + 29), v4, *((void *)this + 28) - v4);
  }
  std::__hash_table<std::__hash_value_type<unsigned short,std::vector<geo::codec::DynamicTransform,geo::StdAllocator<geo::codec::DynamicTransform,geo::codec::Allocator>>>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,std::vector<geo::codec::DynamicTransform,geo::StdAllocator<geo::codec::DynamicTransform,geo::codec::Allocator>>>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,std::vector<geo::codec::DynamicTransform,geo::StdAllocator<geo::codec::DynamicTransform,geo::codec::Allocator>>>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,geo::StdAllocator<std::__hash_value_type<unsigned short,std::vector<geo::codec::DynamicTransform,geo::StdAllocator<geo::codec::DynamicTransform,geo::codec::Allocator>>>,geo::codec::Allocator>>::~__hash_table((uint64_t *)this + 19);
  uint64_t v5 = *((void *)this + 15);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 16);
    uint64_t v7 = *((void *)this + 15);
    if (v6 != v5)
    {
      do
      {
        uint64_t v8 = *(std::__shared_weak_count **)(v6 - 8);
        if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v8->__on_zero_shared)(v8, v7);
          std::__shared_weak_count::__release_weak(v8);
        }
        v6 -= 16;
      }
      while (v6 != v5);
      uint64_t v7 = *((void *)this + 15);
    }
    *((void *)this + 16) = v5;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 18) + 40))(*((void *)this + 18), v7, *((void *)this + 17) - v7);
  }
  uint64_t v9 = *((void *)this + 11);
  if (v9)
  {
    *((void *)this + 12) = v9;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 14) + 40))(*((void *)this + 14), v9, *((void *)this + 13) - v9);
  }
  uint64_t v10 = *((void *)this + 7);
  if (v10)
  {
    *((void *)this + 8) = v10;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 10) + 40))(*((void *)this + 10), v10, *((void *)this + 9) - v10);
  }
  uint64_t v11 = *((void *)this + 3);
  if (v11)
  {
    uint64_t v12 = *((void *)this + 4);
    uint64_t v13 = *((void *)this + 3);
    if (v12 != v11)
    {
      do
      {
        unint64_t v14 = v12 - 552;
        geo::codec::MaterialSheet::~MaterialSheet((geo::codec::MaterialSheet *)(v12 - 544));
        uint64_t v12 = v14;
      }
      while (v14 != v11);
      uint64_t v13 = *((void *)this + 3);
    }
    *((void *)this + 4) = v11;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 6) + 40))(*((void *)this + 6), v13, *((void *)this + 5) - v13);
  }
  uint64_t v15 = *(void **)this;
  if (*(void *)this)
  {
    uint64_t v16 = (void *)*((void *)this + 1);
    uint64_t v17 = *(void **)this;
    if (v16 != v15)
    {
      do
      {
        uint64_t v18 = (void *)*(v16 - 3);
        if (v18)
        {
          do
          {
            uint64_t v19 = (void *)*v18;
            operator delete(v18);
            uint64_t v18 = v19;
          }
          while (v19);
        }
        uint64_t v21 = (void *)*(v16 - 5);
        v16 -= 5;
        uint64_t v20 = v21;
        std::__shared_weak_count *v16 = 0;
        if (v21) {
          operator delete(v20);
        }
      }
      while (v16 != v15);
      uint64_t v17 = *(void **)this;
    }
    *((void *)this + 1) = v15;
    operator delete(v17);
  }
}

void **std::vector<geo::codec::MaterialSheet::Material>::~vector[abi:nn180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        geo::codec::MaterialSheet::Material::~Material((geo::codec::MaterialSheet::Material *)(v3 - 456));
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned char,std::vector<std::pair<gm::Range<unsigned char>,std::unordered_map<float,geo::Color<float,3,(geo::ColorSpace)0>>>>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = v2[3];
      if (v3)
      {
        uint64_t v4 = v2[4];
        uint64_t v5 = (void *)v2[3];
        if (v4 != v3)
        {
          do
          {
            uint64_t v6 = *(void **)(v4 - 24);
            if (v6)
            {
              do
              {
                uint64_t v7 = (void *)*v6;
                operator delete(v6);
                uint64_t v6 = v7;
              }
              while (v7);
            }
            uint64_t v8 = *(void **)(v4 - 40);
            *(void *)(v4 - 40) = 0;
            if (v8) {
              operator delete(v8);
            }
            v4 -= 48;
          }
          while (v4 != v3);
          uint64_t v5 = (void *)v2[3];
        }
        v2[4] = v3;
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::DaVinciAssetResource>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (void *)a1[25];
  while (v2)
  {
    uint64_t v3 = v2;
    uint64_t v2 = (void *)*v2;
    uint64_t v4 = (std::__shared_weak_count *)v3[4];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete(v3);
  }
  uint64_t v5 = (void *)a1[23];
  a1[23] = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (geo::codec::Asset *)a1[22];
  a1[22] = 0;
  if (v6)
  {
    geo::codec::Asset::~Asset(v6);
    MEMORY[0x1A6239270]();
  }
  uint64_t v7 = (void *)a1[4];
  if (v7 != (void *)a1[6])
  {
    free(v7);
  }
}

void std::__shared_ptr_emplace<md::DaVinciAssetResource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580E90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::DaVinciAssetResource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580E90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::DaVinciAssetResourceDecoder::~DaVinciAssetResourceDecoder(md::DaVinciAssetResourceDecoder *this)
{
}

void md::DaVinciAssetOcclusionMeshResourceDecoder::decode(const gdc::ResourceKey *a1@<X1>, const gdc::RawResourceSourceData *a2@<X2>, uint64_t *a3@<X8>)
{
  if (*(void *)a2)
  {
    uint64_t v7 = (*(uint64_t (**)(void))(**(void **)a2 + 32))(*(void *)a2);
    uint64_t v8 = (*(uint64_t (**)(void))(**(void **)a2 + 24))();
    int v18 = 0;
    v16[0] = v7;
    v16[1] = v8;
    v16[2] = 0;
    char v17 = 0;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v15 = 0;
    if (geo::codec::AssetDecoder::decodeAssetOcclusionMeshes((uint64_t)v16, &v18, (uint64_t)__p))
    {
      uint64_t v9 = (char *)operator new(0xC0uLL);
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      *(void *)uint64_t v9 = &unk_1EF582748;
      uint64_t v10 = gdc::Resource::Resource((uint64_t)(v9 + 24), (uint64_t)a1);
      *(_OWORD *)(v9 + 168) = *(_OWORD *)__p;
      *((void *)v9 + 23) = v15;
      *a3 = v10;
      a3[1] = (uint64_t)v9;
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      uint64_t v11 = (char *)__p[0];
      if (__p[0])
      {
        uint64_t v12 = (char *)__p[1];
        uint64_t v13 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            v12 -= 152;
            std::__destroy_at[abi:nn180100]<geo::codec::Mesh,0>((uint64_t)v12);
          }
          while (v12 != v11);
          uint64_t v13 = __p[0];
        }
        __p[1] = v11;
        operator delete(v13);
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_1A26AE290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t std::__destroy_at[abi:nn180100]<geo::codec::Mesh,0>(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 96);
  if (v2)
  {
    *(void *)(result + 104) = v2;
    double result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 120) + 40))(*(void *)(result + 120), v2, *(void *)(result + 112) - v2);
  }
  uint64_t v3 = *(void *)(v1 + 64);
  if (v3)
  {
    *(void *)(v1 + 72) = v3;
    double result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 88) + 40))(*(void *)(v1 + 88), v3, *(void *)(v1 + 80) - v3);
  }
  uint64_t v4 = *(void *)(v1 + 32);
  if (v4)
  {
    *(void *)(v1 + 40) = v4;
    double result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 56) + 40))(*(void *)(v1 + 56), v4, *(void *)(v1 + 48) - v4);
  }
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = *(void *)v1;
    uint64_t v5 = *(uint64_t (**)(void))(**(void **)(v1 + 24) + 40);
    return v5();
  }
  return result;
}

void **std::vector<geo::codec::Mesh>::~vector[abi:nn180100](void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 152;
        std::__destroy_at[abi:nn180100]<geo::codec::Mesh,0>(v3);
      }
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::DaVinciAssetOcclusionMeshResource>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[21];
  if (v2)
  {
    uint64_t v3 = a1[22];
    uint64_t v4 = (void *)a1[21];
    if (v3 != v2)
    {
      do
      {
        v3 -= 152;
        std::__destroy_at[abi:nn180100]<geo::codec::Mesh,0>(v3);
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[21];
    }
    a1[22] = v2;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[4];
  if (v5 != (void *)a1[6])
  {
    free(v5);
  }
}

void std::__shared_ptr_emplace<md::DaVinciAssetOcclusionMeshResource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582748;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::DaVinciAssetOcclusionMeshResource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582748;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::DaVinciAssetOcclusionMeshResourceDecoder::~DaVinciAssetOcclusionMeshResourceDecoder(md::DaVinciAssetOcclusionMeshResourceDecoder *this)
{
}

void generateRotationMatrixMeshPositioningMode(double *a1, uint64_t a2, uint64_t a3, double *a4, int a5, int a6, int a7)
{
  switch(a7)
  {
    case 2:
      float v9 = *(float *)(a3 + 424);
      uint64_t v10 = a3 + 208;
      uint64_t v11 = 160;
      if (v9 >= 45.0) {
        uint64_t v10 = a3 + 160;
      }
      else {
        uint64_t v11 = 208;
      }
      double v12 = *(double *)(a3 + v11);
      double v13 = *(double *)(v10 + 8);
      double v14 = *(double *)(v10 + 16);
      double v15 = 0.0;
      double v16 = 0.0;
      double v17 = 1.0;
      if (!*(unsigned char *)(a3 + 8))
      {
        double v18 = a4[1];
        double v19 = a4[2];
        double v20 = 1.0 / sqrt(*a4 * *a4 + v18 * v18 + v19 * v19);
        double v15 = v20 * *a4;
        double v16 = v20 * v18;
        double v17 = v20 * v19;
      }
      double v21 = -(v16 * v14 - v17 * v13);
      double v22 = -(v17 * v12 - v15 * v14);
      double v23 = -(v15 * v13 - v16 * v12);
      double v24 = 1.0 / sqrt(v23 * v23 + v21 * v21 + v22 * v22);
      double v25 = v24 * v21;
      double v26 = v24 * v22;
      double v27 = v24 * v23;
      double v28 = -(v26 * v17 - v27 * v16);
      double v29 = -(v27 * v15 - v25 * v17);
      double v30 = -(v25 * v16 - v26 * v15);
      *a1 = v25;
      a1[1] = v26;
      a1[2] = v27;
      a1[3] = v28;
      a1[4] = v29;
      a1[5] = v30;
      a1[6] = v15;
      a1[7] = v16;
      a1[8] = v17;
      if (*(unsigned char *)(a3 + 1192))
      {
        float v31 = *(float *)(a3 + 1188);
        if (v9 > v31)
        {
          __float2 v32 = __sincosf_stret((float)(v9 - v31) * 0.017453);
          double v33 = (float)-v32.__sinval;
          double v34 = v29 * v33 + v16 * v32.__cosval;
          a1[3] = v28 * v32.__cosval + v15 * v32.__sinval;
          a1[4] = v29 * v32.__cosval + v16 * v32.__sinval;
          a1[5] = v30 * v32.__cosval + v17 * v32.__sinval;
          a1[6] = v28 * v33 + v15 * v32.__cosval;
          double v35 = v30 * v33 + v17 * v32.__cosval;
          a1[7] = v34;
          goto LABEL_70;
        }
      }
      return;
    case 3:
      float v36 = *(float *)(a3 + 424);
      uint64_t v37 = (float64x2_t *)(a3 + 160);
      if (v36 < 45.0) {
        uint64_t v37 = (float64x2_t *)(a3 + 208);
      }
      _Q1 = vnegq_f64(*v37);
      if (v36 >= 45.0) {
        long long v39 = (double *)(a3 + 176);
      }
      else {
        long long v39 = (double *)(a3 + 224);
      }
      _D10 = 0.0;
      double v41 = 0.0;
      double v42 = 1.0;
      if (!*(unsigned char *)(a3 + 8))
      {
        double v43 = a4[1];
        double v44 = a4[2];
        double v45 = 1.0 / sqrt(*a4 * *a4 + v43 * v43 + v44 * v44);
        _D10 = v45 * *a4;
        double v41 = v45 * v43;
        double v42 = v45 * v44;
      }
      double v46 = -(vmuld_lane_f64(v42, _Q1, 1) - v41 * -*v39);
      double v47 = vmlad_n_f64(*v39 * _D10, v42, _Q1.f64[0]);
      __asm { FMLA            D5, D10, V1.D[1] }
      double v53 = 1.0 / sqrt(_D5 * _D5 + v46 * v46 + v47 * v47);
      double v54 = v53 * v46;
      double v55 = v53 * v47;
      double v56 = v53 * _D5;
      double v57 = -(v56 * v41 - v55 * v42);
      double v58 = -(v54 * v42 - v56 * _D10);
      double v59 = -(v55 * _D10 - v54 * v41);
      *a1 = v54;
      a1[1] = v55;
      a1[2] = v56;
      a1[3] = _D10;
      a1[4] = v41;
      a1[5] = v42;
      a1[6] = v57;
      a1[7] = v58;
      a1[8] = v59;
      if (*(unsigned char *)(a3 + 1192))
      {
        float v60 = 90.0 - v36;
        float v61 = *(float *)(a3 + 1188);
        if (v60 > v61)
        {
          __float2 v62 = __sincosf_stret((float)(v61 - v60) * 0.017453);
          double v63 = (float)-v62.__sinval;
          double v64 = v41 * v63 + v58 * v62.__cosval;
          a1[3] = _D10 * v62.__cosval + v57 * v62.__sinval;
          a1[4] = v41 * v62.__cosval + v58 * v62.__sinval;
          a1[5] = v42 * v62.__cosval + v59 * v62.__sinval;
          a1[6] = _D10 * v63 + v57 * v62.__cosval;
          double v35 = v42 * v63 + v59 * v62.__cosval;
          a1[7] = v64;
          goto LABEL_70;
        }
      }
      return;
    case 4:
      double v66 = *a4;
      double v65 = a4[1];
      double v67 = *(double *)(a3 + 136) - *a4;
      double v68 = *(double *)(a3 + 144) - v65;
      double v69 = a4[2];
      double v70 = *(double *)(a3 + 152) - v69;
      double v71 = 0.0;
      double v72 = 0.0;
      double v73 = 1.0;
      if (!*(unsigned char *)(a3 + 8))
      {
        double v74 = 1.0 / sqrt(v66 * v66 + v65 * v65 + v69 * v69);
        double v71 = v74 * v66;
        double v72 = v74 * v65;
        double v73 = v74 * v69;
      }
      double v75 = -(v73 * v68 - v72 * v70);
      double v76 = -(v71 * v70 - v73 * v67);
      double v77 = -(v72 * v67 - v71 * v68);
      double v78 = 1.0 / sqrt(v77 * v77 + v75 * v75 + v76 * v76);
      double v79 = v78 * v75;
      double v80 = v78 * v76;
      double v81 = v78 * v77;
      double v82 = -(v78 * v75 * v73 - v81 * v71);
      *a1 = v79;
      a1[1] = v80;
      a1[2] = v81;
      a1[3] = v71;
      a1[4] = v72;
      a1[5] = v73;
      double v35 = -(v80 * v71 - v79 * v72);
      a1[6] = -(v81 * v72 - v80 * v73);
      a1[7] = v82;
      goto LABEL_70;
    case 5:
      double v83 = *(float *)(a2 + 4);
      double v84 = 1.0;
      if (*(unsigned char *)(a2 + 12)) {
        double v85 = *(float *)a2;
      }
      else {
        double v85 = 1.0;
      }
      double v86 = 0.0;
      if (*(unsigned char *)(a2 + 12))
      {
        double v87 = *(float *)(a2 + 8);
      }
      else
      {
        double v83 = 0.0;
        double v87 = 0.0;
      }
      double v88 = *a4;
      double v89 = a4[1];
      double v90 = a4[2];
      double v91 = 0.0;
      if (!*(unsigned char *)(a3 + 8))
      {
        double v92 = 1.0 / sqrt(v88 * v88 + v89 * v89 + v90 * v90);
        double v86 = v92 * v88;
        double v91 = v92 * v89;
        double v84 = v92 * v90;
      }
      double v93 = -(v91 * v87 - v84 * v83);
      double v94 = -(v84 * v85 - v86 * v87);
      double v95 = -(v86 * v83 - v91 * v85);
      double v96 = -(v95 * v86 - v93 * v84);
      double v97 = -(v93 * v91 - v94 * v86);
      double v98 = -(v84 * v83 - v91 * v87);
      double v99 = -(v86 * v87 - v84 * v85);
      double v100 = -(v91 * v85 - v86 * v83);
      double v101 = -(v100 * v91 - v99 * v84);
      double v102 = -(v98 * v84 - v100 * v86);
      double v103 = -(v99 * v86 - v98 * v91);
      if (a5 == 6)
      {
        double v104 = v98;
      }
      else
      {
        double v101 = v93;
        double v102 = v94;
        double v103 = v95;
        double v104 = -(v94 * v84 - v95 * v91);
      }
      if (a5 == 6) {
        double v105 = v99;
      }
      else {
        double v105 = v96;
      }
      if (a5 == 6) {
        double v106 = v100;
      }
      else {
        double v106 = v97;
      }
      if (a6
        && (v101 * (*(double *)(a3 + 136) - v88)
          + v102 * (*(double *)(a3 + 144) - v89)
          + v103 * (*(double *)(a3 + 152) - v90))
         / sqrt((*(double *)(a3 + 136) - v88) * (*(double *)(a3 + 136) - v88)+ (*(double *)(a3 + 144) - v89) * (*(double *)(a3 + 144) - v89)+ (*(double *)(a3 + 152) - v90) * (*(double *)(a3 + 152) - v90)) < 0.0)
      {
        double v101 = -v101;
        double v102 = -v102;
        double v103 = -v103;
        double v104 = -v104;
        double v105 = -v105;
        double v106 = -v106;
      }
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v106;
      a1[3] = v86;
      a1[4] = v91;
      a1[5] = v84;
      a1[6] = v101;
      a1[7] = v102;
      a1[8] = v103;
      return;
    case 6:
      double v107 = *(float *)(a2 + 8);
      double v108 = *(float *)a2;
      double v109 = 1.0;
      if (!*(unsigned char *)(a2 + 12)) {
        double v108 = 1.0;
      }
      double v110 = 0.0;
      if (*(unsigned char *)(a2 + 12)) {
        double v111 = *(float *)(a2 + 4);
      }
      else {
        double v111 = 0.0;
      }
      if (!*(unsigned char *)(a2 + 12)) {
        double v107 = 0.0;
      }
      double v112 = a4[1];
      double v113 = *(double *)(a3 + 136) - *a4;
      double v114 = *(double *)(a3 + 144) - v112;
      double v115 = a4[2];
      double v116 = *(double *)(a3 + 152) - v115;
      double v117 = sqrt(v113 * v113 + v114 * v114 + v116 * v116);
      double v118 = 1.0 / sqrt(*a4 * *a4 + v112 * v112 + v115 * v115);
      double v119 = v118 * v112;
      double v120 = v118 * v115;
      if (*(unsigned char *)(a3 + 8)) {
        double v121 = 0.0;
      }
      else {
        double v121 = v118 * *a4;
      }
      if (!*(unsigned char *)(a3 + 8))
      {
        double v110 = v119;
        double v109 = v120;
      }
      double v122 = (v114 * v111 + v116 * v107 + v113 * v108) / v117;
      if (v122 <= 0.5) {
        goto LABEL_69;
      }
      double v123 = -(v109 * v111 - v110 * v107);
      double v124 = -(v121 * v107 - v109 * v108);
      double v125 = -(v110 * v108 - v121 * v111);
      *a1 = v123;
      a1[1] = v124;
      a1[2] = v125;
      a1[3] = v121;
      a1[4] = v110;
      a1[5] = v109;
      a1[6] = -(v125 * v110 - v124 * v109);
      a1[7] = -(v123 * v109 - v125 * v121);
      a1[8] = -(v124 * v121 - v123 * v110);
      goto LABEL_67;
    case 7:
      float v126 = *(float *)(a3 + 424);
      double v128 = *a4;
      double v127 = a4[1];
      double v129 = *(double *)(a3 + 136) - *a4;
      double v130 = *(double *)(a3 + 144) - v127;
      double v131 = a4[2];
      double v132 = *(double *)(a3 + 152) - v131;
      double v133 = sqrt(v129 * v129 + v130 * v130 + v132 * v132);
      id v134 = (float64x2_t *)(a3 + 160);
      if (v126 < 45.0) {
        id v134 = (float64x2_t *)(a3 + 208);
      }
      _Q17 = vnegq_f64(*v134);
      if (v126 >= 45.0) {
        uint64_t v136 = (double *)(a3 + 176);
      }
      else {
        uint64_t v136 = (double *)(a3 + 224);
      }
      double v137 = 0.0;
      double v138 = 1.0;
      _D6 = 0.0;
      if (!*(unsigned char *)(a3 + 8))
      {
        double v140 = 1.0 / sqrt(v128 * v128 + v127 * v127 + v131 * v131);
        _D6 = v140 * v128;
        double v137 = v140 * v127;
        double v138 = v140 * v131;
      }
      double v141 = -(vmuld_lane_f64(v138, _Q17, 1) - v137 * -*v136);
      double v142 = vmlad_n_f64(*v136 * _D6, v138, _Q17.f64[0]);
      __asm { FMLA            D20, D6, V17.D[1] }
      double v144 = 1.0 / sqrt(v141 * v141 + v142 * v142 + _D20 * _D20);
      double v145 = v144 * v141;
      double v146 = v144 * v142;
      double v147 = v144 * _D20;
      double v148 = -(v147 * v137 - v146 * v138);
      double v149 = -(v145 * v138 - v147 * _D6);
      double v150 = -(v146 * _D6 - v145 * v137);
      double v122 = (v149 * v130 + v150 * v132 + v148 * v129) / v133;
      if (v122 <= 0.5) {
        goto LABEL_69;
      }
      *a1 = v145;
      a1[1] = v146;
      a1[2] = v147;
      a1[3] = _D6;
      a1[4] = v137;
      a1[5] = v138;
      a1[6] = v148;
      a1[7] = v149;
      a1[8] = v150;
LABEL_67:
      if (v122 >= 0.642780006) {
        return;
      }
      gm::quaternionFromRotationMatrix<double>(&v188, a1);
      gm::quaternionFromRotationMatrix<double>(v187, (double *)(a3 + 992));
      float v151 = v122 * -7.00378175 + 4.50189088;
      gm::Quaternion<double>::slerp(&v188, v187, v151);
      double v152 = v188;
      double v153 = v189;
      double v154 = v190;
      double v155 = v153 + v153;
      double v156 = (v153 + v153) * v153;
      double v157 = (v154 + v154) * v154;
      double v158 = v152 + v152;
      double v159 = (v152 + v152) * v189;
      double v160 = (v154 + v154) * v191;
      double v161 = v190 * (v152 + v152);
      double v162 = v191 * v155;
      double v163 = v191 * v155 + v161;
      double v164 = 1.0 - (v152 + v152) * v152;
      double v165 = v155 * v190;
      double v166 = v155 * v190 - v191 * v158;
      double v167 = v191 * v158 + v165;
      *a1 = 1.0 - (v156 + v157);
      a1[1] = v160 + v159;
      a1[2] = v161 - v162;
      a1[3] = v159 - v160;
      a1[4] = v164 - v157;
      a1[5] = v167;
      double v35 = v164 - v156;
      a1[6] = v163;
      a1[7] = v166;
LABEL_70:
      a1[8] = v35;
      return;
    case 50:
      double v170 = *(float *)(a2 + 8);
      double v171 = *(float *)a2;
      double v172 = 1.0;
      if (!*(unsigned char *)(a2 + 12)) {
        double v171 = 1.0;
      }
      double v173 = 0.0;
      if (*(unsigned char *)(a2 + 12)) {
        double v174 = *(float *)(a2 + 4);
      }
      else {
        double v174 = 0.0;
      }
      if (!*(unsigned char *)(a2 + 12)) {
        double v170 = 0.0;
      }
      double v175 = 0.0;
      if (!*(unsigned char *)(a3 + 8))
      {
        double v176 = a4[1];
        double v177 = a4[2];
        double v178 = 1.0 / sqrt(*a4 * *a4 + v176 * v176 + v177 * v177);
        double v173 = v178 * *a4;
        double v175 = v178 * v176;
        double v172 = v178 * v177;
      }
      double v179 = -(v172 * v174 - v175 * v170);
      double v180 = -(v173 * v170 - v172 * v171);
      double v181 = -(v175 * v171 - v173 * v174);
      double v182 = -(v180 * v170 - v181 * v174);
      double v183 = -(v181 * v171 - v179 * v170);
      double v184 = -(v179 * v174 - v180 * v171);
      if (a6)
      {
        double v185 = *(double *)(a3 + 144) - a4[1];
        double v186 = *(double *)(a3 + 152) - a4[2];
        if ((v185 * v183 + v186 * v184 + (*(double *)(a3 + 136) - *a4) * v182)
           / sqrt(v185 * v185 + (*(double *)(a3 + 136) - *a4) * (*(double *)(a3 + 136) - *a4) + v186 * v186) < 0.0)
        {
          double v182 = -v182;
          double v183 = -v183;
          double v184 = -v184;
          double v179 = -v179;
          double v180 = -v180;
          double v181 = -v181;
        }
      }
      *a1 = v171;
      a1[1] = v174;
      a1[2] = v170;
      a1[3] = v179;
      a1[4] = v180;
      a1[5] = v181;
      a1[6] = v182;
      a1[7] = v183;
      a1[8] = v184;
      return;
    default:
LABEL_69:
      long long v168 = *(_OWORD *)(a3 + 1008);
      *(_OWORD *)a1 = *(_OWORD *)(a3 + 992);
      *((_OWORD *)a1 + 1) = v168;
      long long v169 = *(_OWORD *)(a3 + 1040);
      *((_OWORD *)a1 + 2) = *(_OWORD *)(a3 + 1024);
      *((_OWORD *)a1 + 3) = v169;
      double v35 = *(double *)(a3 + 1056);
      goto LABEL_70;
  }
}

void md::FlyoverCommon::encodeFlyoverKey(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 + 28);
  int v8 = a2[24];
  uint64_t v9 = *(void *)(a2 + 4);
  int v81 = v9;
  int v10 = a2[1];
  int v11 = *a2;
  int v12 = *((_DWORD *)a2 + 9);
  double v95 = v99;
  double v96 = v99;
  double v97 = v99;
  uint64_t v98 = 32;
  unint64_t v100 = 0;
  if ((v7 & 0xFF00000000) != 0) {
    int v13 = v7;
  }
  else {
    int v13 = 0;
  }
  int v14 = v8 | (((v7 & 0xFF00000000) != 0) << 31);
  int v101 = HIDWORD(v9);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v95, v99, (char *)&v101, (char *)&v102);
  int v101 = v81;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v95, v96, (char *)&v101, (char *)&v102);
  int v101 = v10;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v95, v96, (char *)&v101, (char *)&v102);
  int v101 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v95, v96, (char *)&v101, (char *)&v102);
  int v101 = v13;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v95, v96, (char *)&v101, (char *)&v102);
  int v101 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v95, v96, (char *)&v101, (char *)&v102);
  int v101 = v14;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)&v95, v96, (char *)&v101, (char *)&v102);
  double v16 = v95;
  double v15 = v96;
  unint64_t v17 = 0;
  unint64_t v18 = v96 - v95;
  if (v96 != v95)
  {
    if (v18 <= 1) {
      uint64_t v19 = 1;
    }
    else {
      uint64_t v19 = v96 - v95;
    }
    double v20 = v95;
    do
    {
      unsigned int v21 = *v20++;
      v17 ^= (v17 << 6) - 0x61C8864680B583EBLL + (v17 >> 2) + v21;
      --v19;
    }
    while (v19);
  }
  unint64_t v100 = v17;
  if ((a4 & 0xFF00000000) != 0)
  {
    double v22 = v94;
    double v90 = v94;
    double v91 = (char *)v94;
    double v92 = v94;
    uint64_t v93 = 32;
    if (v18 < 0x21) {
      goto LABEL_50;
    }
    if (v18 <= 0x40) {
      size_t v23 = 64;
    }
    else {
      size_t v23 = v96 - v95;
    }
    double v22 = malloc_type_malloc(v23, 0x100004077774924uLL);
    double v24 = (char *)v90;
    double v25 = v91;
    if (v90 == v91)
    {
LABEL_49:
      double v90 = v22;
      double v91 = (char *)v22;
      uint64_t v93 = v23;
LABEL_50:
      if (v15 == v16) {
        goto LABEL_68;
      }
      if (v18 < 8)
      {
        double v56 = v22;
        goto LABEL_66;
      }
      if ((unint64_t)((char *)v22 - v16) < 0x20)
      {
        double v56 = v22;
        goto LABEL_66;
      }
      if (v18 >= 0x20)
      {
        unint64_t v55 = v18 & 0xFFFFFFFFFFFFFFE0;
        double v57 = (long long *)(v16 + 16);
        double v58 = v22 + 2;
        unint64_t v59 = v18 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v60 = *v57;
          *(v58 - 1) = *(v57 - 1);
          *double v58 = v60;
          v57 += 2;
          v58 += 2;
          v59 -= 32;
        }
        while (v59);
        if (v18 == v55) {
          goto LABEL_67;
        }
        if ((v18 & 0x18) == 0)
        {
          v16 += v55;
          double v56 = (char *)v22 + v55;
          goto LABEL_66;
        }
      }
      else
      {
        unint64_t v55 = 0;
      }
      unint64_t v61 = v18 & 0xFFFFFFFFFFFFFFF8;
      double v56 = (char *)v22 + (v18 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v62 = v55 - (v18 & 0xFFFFFFFFFFFFFFF8);
      double v63 = &v16[v55];
      double v64 = (void *)((char *)v22 + v55);
      do
      {
        uint64_t v65 = *(void *)v63;
        v63 += 8;
        *v64++ = v65;
        v62 += 8;
      }
      while (v62);
      if (v18 == v61) {
        goto LABEL_67;
      }
      v16 += v61;
      do
      {
LABEL_66:
        char v66 = *v16++;
        *v56++ = v66;
      }
      while (v16 != v15);
LABEL_67:
      double v22 = v91;
LABEL_68:
      double v91 = (char *)v22 + v18;
      v94[4] = v100;
      gdc::LayerDataRequestKey::LayerDataRequestKey(a1, a3, 0x4Bu, (uint64_t)&v90, a4);
      double v67 = v90;
      if (v90 == v92) {
        goto LABEL_70;
      }
      goto LABEL_69;
    }
    unint64_t v26 = v91 - (unsigned char *)v90;
    if ((unint64_t)(v91 - (unsigned char *)v90) < 8)
    {
      double v27 = v22;
    }
    else
    {
      double v27 = v22;
      if ((unint64_t)((char *)v22 - (unsigned char *)v90) >= 0x20)
      {
        if (v26 < 0x20)
        {
          uint64_t v28 = 0;
LABEL_34:
          unint64_t v40 = v26 & 0xFFFFFFFFFFFFFFF8;
          double v27 = (char *)v22 + (v26 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v41 = v28 - (v26 & 0xFFFFFFFFFFFFFFF8);
          double v42 = (uint64_t *)&v24[v28];
          double v43 = (void *)((char *)v22 + v28);
          do
          {
            uint64_t v44 = *v42++;
            *v43++ = v44;
            v41 += 8;
          }
          while (v41);
          if (v26 == v40) {
            goto LABEL_49;
          }
          v24 += v40;
          goto LABEL_48;
        }
        uint64_t v28 = v26 & 0xFFFFFFFFFFFFFFE0;
        float v36 = (long long *)((char *)v90 + 16);
        uint64_t v37 = v22 + 2;
        unint64_t v38 = v26 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v39 = *v36;
          *(v37 - 1) = *(v36 - 1);
          _OWORD *v37 = v39;
          v36 += 2;
          v37 += 2;
          v38 -= 32;
        }
        while (v38);
        if (v26 == v28) {
          goto LABEL_49;
        }
        if ((v26 & 0x18) != 0) {
          goto LABEL_34;
        }
        v24 += v28;
        double v27 = (char *)v22 + v28;
      }
    }
    do
    {
LABEL_48:
      char v54 = *v24++;
      *v27++ = v54;
    }
    while (v24 != v25);
    goto LABEL_49;
  }
  double v29 = v86;
  double v82 = (char *)v86;
  double v83 = (char *)v86;
  double v84 = (char *)v86;
  uint64_t v85 = 32;
  if (v18 >= 0x21)
  {
    if (v18 <= 0x40) {
      size_t v30 = 64;
    }
    else {
      size_t v30 = v96 - v95;
    }
    double v29 = malloc_type_malloc(v30, 0x100004077774924uLL);
    float v31 = v82;
    __float2 v32 = v83;
    if (v82 == v83) {
      goto LABEL_75;
    }
    unint64_t v33 = v83 - v82;
    if ((unint64_t)(v83 - v82) < 8)
    {
      double v34 = v29;
      goto LABEL_74;
    }
    double v34 = v29;
    if ((unint64_t)((char *)v29 - v82) < 0x20) {
      goto LABEL_74;
    }
    if (v33 >= 0x20)
    {
      unint64_t v35 = v33 & 0xFFFFFFFFFFFFFFE0;
      double v45 = (long long *)(v82 + 16);
      double v46 = v29 + 2;
      unint64_t v47 = v33 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v48 = *v45;
        *(v46 - 1) = *(v45 - 1);
        *double v46 = v48;
        v45 += 2;
        v46 += 2;
        v47 -= 32;
      }
      while (v47);
      if (v33 == v35) {
        goto LABEL_75;
      }
      if ((v33 & 0x18) == 0)
      {
        v31 += v35;
        double v34 = (char *)v29 + v35;
        goto LABEL_74;
      }
    }
    else
    {
      unint64_t v35 = 0;
    }
    unint64_t v49 = v33 & 0xFFFFFFFFFFFFFFF8;
    double v34 = (char *)v29 + (v33 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v50 = v35 - (v33 & 0xFFFFFFFFFFFFFFF8);
    long long v51 = &v31[v35];
    __int16 v52 = (void *)((char *)v29 + v35);
    do
    {
      uint64_t v53 = *(void *)v51;
      v51 += 8;
      *v52++ = v53;
      v50 += 8;
    }
    while (v50);
    if (v33 == v49) {
      goto LABEL_75;
    }
    v31 += v49;
    do
    {
LABEL_74:
      char v68 = *v31++;
      *v34++ = v68;
    }
    while (v31 != v32);
LABEL_75:
    double v82 = (char *)v29;
    double v83 = (char *)v29;
    uint64_t v85 = v30;
  }
  if (v15 == v16) {
    goto LABEL_94;
  }
  if (v18 < 8)
  {
    double v70 = v29;
    goto LABEL_92;
  }
  if ((unint64_t)((char *)v29 - v16) < 0x20)
  {
    double v70 = v29;
    goto LABEL_92;
  }
  if (v18 >= 0x20)
  {
    unint64_t v69 = v18 & 0xFFFFFFFFFFFFFFE0;
    double v71 = (long long *)(v16 + 16);
    double v72 = v29 + 2;
    unint64_t v73 = v18 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v74 = *v71;
      *(v72 - 1) = *(v71 - 1);
      *double v72 = v74;
      v71 += 2;
      v72 += 2;
      v73 -= 32;
    }
    while (v73);
    if (v18 == v69) {
      goto LABEL_93;
    }
    if ((v18 & 0x18) == 0)
    {
      v16 += v69;
      double v70 = (char *)v29 + v69;
      goto LABEL_92;
    }
  }
  else
  {
    unint64_t v69 = 0;
  }
  unint64_t v75 = v18 & 0xFFFFFFFFFFFFFFF8;
  double v70 = (char *)v29 + (v18 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v76 = v69 - (v18 & 0xFFFFFFFFFFFFFFF8);
  double v77 = &v16[v69];
  double v78 = (void *)((char *)v29 + v69);
  do
  {
    uint64_t v79 = *(void *)v77;
    v77 += 8;
    *v78++ = v79;
    v76 += 8;
  }
  while (v76);
  if (v18 == v75) {
    goto LABEL_93;
  }
  v16 += v75;
  do
  {
LABEL_92:
    char v80 = *v16++;
    *v70++ = v80;
  }
  while (v16 != v15);
LABEL_93:
  double v29 = v83;
LABEL_94:
  double v83 = (char *)v29 + v18;
  v86[4] = v100;
  gdc::LayerDataKey::LayerDataKey(&v87, 0x4Bu, (uint64_t)&v82);
  *a1 = a3;
  gdc::LayerDataKey::LayerDataKey((uint64_t)(a1 + 8), (uint64_t)&v87);
  a1[96] = 0;
  *((void *)a1 + 13) = (*((void *)a1 + 11)
                        + ((*a1 - 0x61C8864680B583EBLL) << 6)
                        + (((unint64_t)*a1 - 0x61C8864680B583EBLL) >> 2)
                        - 0x61C8864680B583EBLL) ^ (*a1 - 0x61C8864680B583EBLL);
  if (v88 != v89) {
    free(v88);
  }
  double v67 = v82;
  if (v82 != v84) {
LABEL_69:
  }
    free(v67);
LABEL_70:
  if (v95 != v97) {
    free(v95);
  }
}

void sub_1A26AF560(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 160);
  if (v3 != *(void **)(v1 - 144)) {
    free(v3);
  }
  _Unwind_Resume(exception_object);
}

void md::FlyoverCommon::decodeFlyoverKey(md::FlyoverCommon *this, const gdc::LayerDataRequestKey *a2)
{
  gdc::LayerDataRequestKey::keyData((gdc::LayerDataRequestKey *)v14, a2);
  uint64_t v4 = v14[0];
  int v5 = *((_DWORD *)v14[0] + 6);
  uint64_t v6 = (int32x2_t *)*((void *)a2 + 2);
  int32x2_t v7 = *v6;
  __int32 v8 = v6[1].i32[0];
  __int32 v9 = v6[1].i32[1];
  int32x2_t v10 = vrev64_s32(v7);
  if (v5 < 0)
  {
    uint64_t v12 = *((unsigned int *)v14[0] + 4);
    uint64_t v11 = 0x100000000;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  int v13 = *((_DWORD *)v14[0] + 5);
  *(unsigned char *)this = v9;
  *((unsigned char *)this + 1) = v8;
  *(int32x2_t *)((char *)this + 4) = v10;
  *((unsigned char *)this + 24) = v5;
  *(void *)((char *)this + 28) = v11 | v12;
  *((_DWORD *)this + 9) = v13;
  if (v4 != v14[2]) {
    free(v4);
  }
}

void md::FlyoverCommon::computeGeocentricBoundsFromOctile(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5)
{
  int v7 = *(_DWORD *)(a1 + 4);
  if (*(unsigned char *)(a1 + 1))
  {
    int v8 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    int v8 = *(_DWORD *)(a1 + 8);
    if (!(v7 | v8))
    {
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)a2 = 0u;
      *(void *)(a2 + 48) = 0x3FF0000000000000;
      *(int64x2_t *)a3 = vdupq_n_s64(0xC158CBA800000000);
      *(_OWORD *)(a3 + 16) = xmmword_1A28FC730;
      *(int64x2_t *)(a3 + 32) = vdupq_n_s64(0x4158CBA800000000uLL);
      return;
    }
  }
  double v9 = (float)(a4 + (float)((float)(a5 - a4) * 0.5));
  int v10 = 1 << *(unsigned char *)(a1 + 1);
  double v129 = (double)v8;
  double v131 = (double)(v10 + ~v7);
  double v132 = 1.0 / (double)v10;
  long double v11 = ((double)v8 + 0.5) * 6.28318531 * v132;
  long double v12 = exp((v131 + 0.5) * v132 * 6.28318531 + -3.14159265);
  double v13 = atan(v12) * 2.0 + -1.57079633;
  long double v14 = fmod(v11, 6.28318531);
  double v134 = fmod(v14 + 6.28318531, 6.28318531) + -3.14159265;
  __double2 v15 = __sincos_stret(v13);
  double v125 = v9;
  double v118 = 6378137.0 / sqrt(1.0 - v15.__sinval * v15.__sinval * 0.00669437999);
  double v16 = (v118 + v9) * v15.__cosval;
  __double2 v17 = __sincos_stret(v134);
  double v18 = v16 * v17.__cosval;
  double v19 = v16 * v17.__sinval;
  double v120 = v118 * 0.99330562;
  double v20 = (v118 * 0.99330562 + v9) * v15.__sinval;
  *(double *)a2 = v16 * v17.__cosval;
  *(double *)(a2 + 8) = v16 * v17.__sinval;
  *(double *)(a2 + 16) = v20;
  __double2 v21 = __sincos_stret(v13 * 0.5);
  double sinval = v21.__sinval;
  double v23 = (sinval + sinval) * v21.__cosval;
  double v24 = 1.0 - (sinval + sinval) * sinval;
  __double2 v25 = __sincos_stret(v134 * 0.5);
  double v26 = v25.__sinval / sqrt(v23 * v23 + v24 * v24);
  double v27 = v26 * v23;
  double v28 = v26 * v24;
  double v29 = -(v21.__sinval * v25.__cosval);
  double v30 = -(v28 * v21.__sinval - v27 * v21.__cosval);
  double v31 = v27 * v21.__sinval + v28 * v21.__cosval;
  *(double *)(a2 + 24) = v30;
  *(double *)(a2 + 32) = v29;
  *(double *)(a2 + 40) = v31;
  *(double *)(a2 + 48) = v25.__cosval * v21.__cosval;
  double v32 = -(v20 * v29 - v31 * v19) - (v20 * v29 - v31 * v19);
  double v33 = -(v31 * v18 - v30 * v20) - (v31 * v18 - v30 * v20);
  double v34 = -(v30 * v19 - v18 * v29) - (v30 * v19 - v18 * v29);
  double v130 = -(v16 * v17.__sinval + v33 * (v25.__cosval * v21.__cosval) + v34 * v30 - v32 * v31);
  double v133 = -(v20 + v32 * v29 + v34 * (v25.__cosval * v21.__cosval) - v33 * v30);
  double v135 = -(v16 * v17.__cosval + v32 * (v25.__cosval * v21.__cosval) + v33 * v31 - v34 * v29);
  double v35 = (v118 + a5) * v15.__cosval;
  double v36 = v35 * v17.__cosval;
  double v37 = v35 * v17.__sinval;
  double v119 = a5;
  double v38 = (v120 + a5) * v15.__sinval;
  double v39 = -(v38 * v29 - v37 * v31) - (v38 * v29 - v37 * v31);
  double v40 = -(v36 * v31 - v38 * v30) - (v36 * v31 - v38 * v30);
  double v41 = -(v37 * v30 - v36 * v29) - (v37 * v30 - v36 * v29);
  double v42 = v36 + v135 + v39 * (v25.__cosval * v21.__cosval) + v40 * v31 - v41 * v29;
  double v43 = v37 + v130 + v40 * (v25.__cosval * v21.__cosval) + v41 * v30 - v39 * v31;
  double v44 = v38 + v133 + v39 * v29 + v41 * (v25.__cosval * v21.__cosval) - v40 * v30;
  double v127 = fmin(v42, 1.79769313e308);
  double v121 = fmin(v43, 1.79769313e308);
  double v123 = fmax(v42, -1.79769313e308);
  double v116 = fmin(v44, 1.79769313e308);
  double v117 = fmax(v43, -1.79769313e308);
  double v109 = fmax(v44, -1.79769313e308);
  long double v45 = exp(v132 * 6.28318531 * v131 + -3.14159265);
  long double v46 = atan(v45);
  __double2 v47 = __sincos_stret(v46 * 2.0 + -1.57079633);
  double v48 = 6378137.0 / sqrt(1.0 - v47.__sinval * v47.__sinval * 0.00669437999);
  double v49 = (v48 + v125) * v47.__cosval;
  double v50 = v49 * v17.__cosval;
  double v51 = v49 * v17.__sinval;
  double v52 = (v125 + v48 * 0.99330562) * v47.__sinval;
  double v53 = -(v52 * v29 - v51 * v31) - (v52 * v29 - v51 * v31);
  double v54 = -(v50 * v31 - v52 * v30) - (v50 * v31 - v52 * v30);
  double v55 = -(v51 * v30 - v50 * v29) - (v51 * v30 - v50 * v29);
  double v56 = v50 + v135 + v53 * (v25.__cosval * v21.__cosval) + v54 * v31 - v55 * v29;
  double v57 = v51 + v130 + v54 * (v25.__cosval * v21.__cosval) + v55 * v30 - v53 * v31;
  double v58 = v52 + v133 + v53 * v29 + v55 * (v25.__cosval * v21.__cosval) - v54 * v30;
  double v114 = fmax(v123, v56);
  double v115 = fmin(v56, v127);
  double v112 = fmax(v117, v57);
  double v113 = fmin(v57, v121);
  double v110 = fmax(v109, v58);
  double v111 = fmin(v58, v116);
  long double v59 = exp(v132 * 6.28318531 * (v131 + 1.0) + -3.14159265);
  long double v60 = atan(v59);
  __double2 v61 = __sincos_stret(v60 * 2.0 + -1.57079633);
  unsigned int v62 = 0;
  double v63 = 6378137.0 / sqrt(1.0 - v61.__sinval * v61.__sinval * 0.00669437999);
  double v64 = (v63 + v125) * v61.__cosval;
  double v65 = v64 * v17.__cosval;
  double v66 = v64 * v17.__sinval;
  double v67 = (v125 + v63 * 0.99330562) * v61.__sinval;
  double v68 = -(v67 * v29 - v66 * v31) - (v67 * v29 - v66 * v31);
  double v69 = -(v65 * v31 - v67 * v30) - (v65 * v31 - v67 * v30);
  double v70 = -(v66 * v30 - v65 * v29) - (v66 * v30 - v65 * v29);
  double v71 = v65 + v135 + v68 * (v25.__cosval * v21.__cosval) + v69 * v31 - v70 * v29;
  double v122 = v25.__cosval * v21.__cosval;
  double v124 = v31;
  double v72 = v66 + v130 + v69 * (v25.__cosval * v21.__cosval) + v70 * v30 - v68 * v31;
  double v128 = v29;
  double v73 = v67 + v133 + v68 * v29 + v70 * (v25.__cosval * v21.__cosval) - v69 * v30;
  double v74 = fmin(v71, v115);
  double v75 = fmax(v114, v71);
  double v76 = fmin(v72, v113);
  double v77 = fmax(v112, v72);
  double v78 = fmin(v73, v111);
  double v79 = fmax(v110, v73);
  double v80 = a4;
  do
  {
    double v137 = v74;
    double v138 = v75;
    double v139 = v78;
    double v140 = v79;
    long double v81 = exp(((double)(v62 & 1) + v131) * v132 * 6.28318531 + -3.14159265);
    double v82 = atan(v81) * 2.0 + -1.57079633;
    long double v83 = fmod(((float)(v62 >> 1) + v129) * (v132 * 6.28318531), 6.28318531);
    double v84 = fmod(v83 + 6.28318531, 6.28318531) + -3.14159265;
    __double2 v85 = __sincos_stret(v82);
    double v86 = 6378137.0 / sqrt(v85.__sinval * v85.__sinval * -0.00669437999 + 1.0);
    double v87 = (v86 + v80) * v85.__cosval;
    __double2 v88 = __sincos_stret(v84);
    double v89 = (v86 * 0.99330562 + v80) * v85.__sinval;
    double v90 = -(v89 * v128 - v87 * v88.__sinval * v124);
    double v91 = -(v87 * v88.__cosval * v124 - v89 * v30);
    double v92 = -(v87 * v88.__sinval * v30 - v87 * v88.__cosval * v128);
    double v93 = v91 + v91;
    double v94 = v90 + v90;
    double v95 = v92 + v92;
    double v96 = v87 * v88.__sinval + v130 + v93 * v122 + v95 * v30 - v94 * v124;
    double v97 = v87 * v88.__cosval + v135 + v94 * v122 + v93 * v124 - v95 * v128;
    double v98 = v89 + v133 + v94 * v128 + v95 * v122 - v93 * v30;
    double v99 = (v86 + v119) * v85.__cosval;
    double v100 = v99 * v88.__cosval;
    double v101 = v99 * v88.__sinval;
    double v102 = (v86 * 0.99330562 + v119) * v85.__sinval;
    double v103 = -(v102 * v128 - v101 * v124) - (v102 * v128 - v101 * v124);
    double v104 = -(v100 * v124 - v102 * v30) - (v100 * v124 - v102 * v30);
    double v105 = -(v101 * v30 - v100 * v128) - (v101 * v30 - v100 * v128);
    double v106 = v100 + v135 + v103 * v122 + v104 * v124 - v105 * v128;
    double v107 = v101 + v130 + v104 * v122 + v105 * v30 - v103 * v124;
    double v108 = v102 + v133 + v103 * v128 + v105 * v122 - v104 * v30;
    double v74 = fmin(v106, fmin(v97, v137));
    double v75 = fmax(fmax(v138, v97), v106);
    double v76 = fmin(v107, fmin(v96, v76));
    double v77 = fmax(fmax(v77, v96), v107);
    double v78 = fmin(v108, fmin(v98, v139));
    double v79 = fmax(fmax(v140, v98), v108);
    ++v62;
  }
  while (v62 != 4);
  *(double *)a3 = v74;
  *(double *)(a3 + 8) = v76;
  *(double *)(a3 + 16) = v78;
  *(double *)(a3 + 24) = v75;
  *(double *)(a3 + 32) = v77;
  *(double *)(a3 + 40) = v79;
}

void md::FlyoverCommon::selectChildren(const QuadTile *a1, uint64_t a2, unsigned __int8 **a3, void **a4)
{
  if (!a1) {
    return;
  }
  a3[1] = *a3;
  long long v157 = 0u;
  long long v158 = 0u;
  *(_OWORD *)std::string __p = 0u;
  if (a4) {
    uint64_t v6 = a4;
  }
  else {
    uint64_t v6 = __p;
  }
  int v8 = (void **)v6[1];
  uint64_t v7 = (uint64_t)v6[2];
  v6[5] = 0;
  unint64_t v9 = v7 - (void)v8;
  if ((unint64_t)(v7 - (void)v8) >= 0x11)
  {
    do
    {
      operator delete(*v8);
      uint64_t v7 = (uint64_t)v6[2];
      int v8 = (void **)((char *)v6[1] + 8);
      v6[1] = v8;
      unint64_t v9 = v7 - (void)v8;
    }
    while ((unint64_t)(v7 - (void)v8) > 0x10);
  }
  unint64_t v10 = v9 >> 3;
  if (v10 == 1)
  {
    uint64_t v11 = 51;
  }
  else
  {
    if (v10 != 2) {
      goto LABEL_12;
    }
    uint64_t v11 = 102;
  }
  void v6[4] = (void *)v11;
LABEL_12:
  long double v12 = v6[5];
  double v137 = a1;
  if (v12)
  {
    unint64_t v13 = (unint64_t)v6[4];
    if (v13 >= 0x66)
    {
      operator delete(*v8);
      uint64_t v7 = (uint64_t)v6[2];
      int v8 = (void **)((char *)v6[1] + 8);
      v6[1] = v8;
      long double v12 = v6[5];
      unint64_t v13 = (unint64_t)v6[4] - 102;
      void v6[4] = (void *)v13;
    }
    uint64_t v14 = 102 * ((v7 - (uint64_t)v8) >> 3) - 1;
    if ((void **)v7 == v8) {
      uint64_t v14 = 0;
    }
    if (v14 - ((unint64_t)v12 + v13) >= 0x66)
    {
      operator delete(*(void **)(v7 - 8));
      int v8 = (void **)v6[1];
      uint64_t v7 = (uint64_t)v6[2] - 8;
      v6[2] = (void *)v7;
    }
  }
  else
  {
    if ((void **)v7 != v8)
    {
      do
      {
        operator delete(*(void **)(v7 - 8));
        __double2 v15 = v6[1];
        uint64_t v7 = (uint64_t)v6[2] - 8;
        v6[2] = (void *)v7;
      }
      while ((void *)v7 != v15);
    }
    void v6[4] = 0;
    int v8 = (void **)v7;
  }
  if (a4) {
    double v16 = a4;
  }
  else {
    double v16 = __p;
  }
  __double2 v17 = *v6;
  uint64_t v18 = v7 - (void)v8;
  unint64_t v19 = (v7 - (uint64_t)v8) >> 3;
  if (v19 < ((unsigned char *)v16[3] - (unsigned char *)*v6) >> 3)
  {
    if ((void **)v7 == v8)
    {
      double v20 = 0;
      uint64_t v7 = 8 * v19;
      goto LABEL_38;
    }
    if (v18 < 0) {
      goto LABEL_172;
    }
    double v20 = operator new(v7 - (void)v8);
    uint64_t v7 = (uint64_t)&v20[v19];
    if ((unint64_t)(v18 - 8) < 0x18)
    {
      double v24 = v20;
    }
    else if ((unint64_t)((char *)v20 - (char *)v8) < 0x20)
    {
      double v24 = v20;
    }
    else
    {
      uint64_t v21 = 0;
      unint64_t v22 = ((unint64_t)(v18 - 8) >> 3) + 1;
      uint64_t v23 = v22 & 0x3FFFFFFFFFFFFFFCLL;
      double v24 = &v20[v23];
      uint64_t v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        double v26 = &v20[v21];
        long long v27 = *(_OWORD *)&v8[v21 + 2];
        *double v26 = *(_OWORD *)&v8[v21];
        v26[1] = v27;
        v21 += 4;
        v25 -= 4;
      }
      while (v25);
      if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_38:
        *uint64_t v6 = v20;
        v6[1] = v20;
        v6[2] = (void *)v7;
        int v8 = (void **)v20;
        void v16[3] = (void *)v7;
        if (v17)
        {
          operator delete(v17);
          int v8 = (void **)v6[1];
          uint64_t v7 = (uint64_t)v6[2];
        }
        goto LABEL_40;
      }
      int v8 = (void **)((char *)v8 + v23 * 8);
    }
    do
    {
      double v28 = *v8++;
      *v24++ = v28;
    }
    while (v24 != (void *)v7);
    goto LABEL_38;
  }
LABEL_40:
  if ((void **)v7 == v8)
  {
    double v29 = v8;
  }
  else
  {
    double v29 = (void **)(v7 + (((unint64_t)v8 - v7 + 7) & 0xFFFFFFFFFFFFFFF8));
    v6[2] = v29;
    uint64_t v7 = (uint64_t)v29;
  }
  double v30 = *v6;
  int64_t v31 = (char *)v29 - (char *)v8;
  unint64_t v32 = v29 - v8;
  if (v32 < ((unsigned char *)v16[3] - (unsigned char *)*v6) >> 3)
  {
    if ((void **)v7 == v8)
    {
      double v33 = 0;
      uint64_t v34 = 8 * v32;
      goto LABEL_56;
    }
    if ((v31 & 0x8000000000000000) == 0)
    {
      double v33 = operator new((char *)v29 - (char *)v8);
      uint64_t v34 = (uint64_t)&v33[v32];
      if ((unint64_t)(v31 - 8) < 0x18)
      {
        double v38 = v33;
      }
      else if ((unint64_t)((char *)v33 - (char *)v8) < 0x20)
      {
        double v38 = v33;
      }
      else
      {
        uint64_t v35 = 0;
        unint64_t v36 = ((unint64_t)(v31 - 8) >> 3) + 1;
        uint64_t v37 = v36 & 0x3FFFFFFFFFFFFFFCLL;
        double v38 = &v33[v37];
        uint64_t v39 = v36 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          double v40 = &v33[v35];
          long long v41 = *(_OWORD *)&v8[v35 + 2];
          *double v40 = *(_OWORD *)&v8[v35];
          v40[1] = v41;
          v35 += 4;
          v39 -= 4;
        }
        while (v39);
        if (v36 == (v36 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_56:
          *uint64_t v6 = v33;
          v6[1] = v33;
          v6[2] = (void *)v34;
          void v16[3] = (void *)v34;
          if (v30) {
            operator delete(v30);
          }
          goto LABEL_58;
        }
        int v8 = (void **)((char *)v8 + v37 * 8);
      }
      do
      {
        double v42 = *v8++;
        *v38++ = v42;
      }
      while (v38 != (void *)v34);
      goto LABEL_56;
    }
LABEL_172:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
LABEL_58:
  *uint64_t v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
  void v16[3] = 0;
  void v6[4] = 0;
  v6[5] = 0;
  std::deque<md::FlyoverOctile>::__add_back_capacity((uint64_t)v6);
  unint64_t v43 = (unint64_t)v6[4] + (void)v6[5];
  unint64_t v44 = *((void *)v6[1] + v43 / 0x66) + 40 * (v43 % 0x66);
  long double v46 = v137;
  uint64_t v45 = a2;
  *(_WORD *)unint64_t v44 = *(_WORD *)a2;
  *(void *)(v44 + 4) = *(void *)(a2 + 4);
  *(_OWORD *)(v44 + 24) = *(_OWORD *)(a2 + 24);
  __double2 v47 = (char *)v6[5];
  BOOL v48 = __CFADD__(v47, 1);
  double v49 = v47 + 1;
  v6[5] = v49;
  double v50 = a3;
  if (!v48)
  {
    while (1)
    {
      double v54 = (void **)v6[1];
      unint64_t v55 = (unint64_t)v6[4];
      unint64_t v56 = (unint64_t)v54[v55 / 0x66] + 40 * (v55 % 0x66);
      int v57 = *(unsigned __int8 *)(v56 + 1);
      unsigned __int8 v58 = *(unsigned char *)v56;
      unsigned __int8 v152 = *(unsigned char *)v56;
      char v153 = v57;
      int32x2_t v59 = *(int32x2_t *)(v56 + 4);
      int32x2_t v154 = v59;
      long long v155 = *(_OWORD *)(v56 + 24);
      void v6[4] = (void *)++v55;
      v6[5] = v49 - 1;
      if (v55 >= 0xCC)
      {
        operator delete(*v54);
        v6[1] = (char *)v6[1] + 8;
        void v6[4] = (char *)v6[4] - 102;
      }
      int v60 = *(unsigned __int8 *)(v45 + 1);
      int v61 = v57 - v60;
      if ((v57 - v60) <= 1)
      {
        if (v57 - 1 == v60)
        {
          double v63 = v50[1];
          unint64_t v62 = (unint64_t)v50[2];
          if ((unint64_t)v63 >= v62)
          {
            double v65 = *v50;
            unint64_t v66 = 0xCCCCCCCCCCCCCCCDLL * ((v63 - v65) >> 3) + 1;
            if (v66 > 0x666666666666666) {
              abort();
            }
            unint64_t v67 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v62 - (void)v65) >> 3);
            if (2 * v67 > v66) {
              unint64_t v66 = 2 * v67;
            }
            if (v67 >= 0x333333333333333) {
              unint64_t v68 = 0x666666666666666;
            }
            else {
              unint64_t v68 = v66;
            }
            if (v68)
            {
              if (v68 > 0x666666666666666) {
                goto LABEL_172;
              }
              double v69 = (char *)operator new(40 * v68);
            }
            else
            {
              double v69 = 0;
            }
            double v70 = (unsigned __int8 *)&v69[8 * ((v63 - v65) >> 3)];
            *double v70 = v58;
            v70[1] = v57;
            *(int32x2_t *)(v70 + 4) = v59;
            *(_OWORD *)(v70 + 24) = v155;
            if (v63 == v65)
            {
              double v73 = &v69[8 * ((v63 - v65) >> 3)];
              double v50 = a3;
            }
            else
            {
              uint64_t v71 = 0;
              do
              {
                double v72 = (char *)&v70[v71];
                *((_WORD *)v72 - 20) = *(_WORD *)&v63[v71 - 40];
                *(void *)(v72 - 36) = *(void *)&v63[v71 - 36];
                *((_OWORD *)v72 - 1) = *(_OWORD *)&v63[v71 - 16];
                v71 -= 40;
              }
              while (&v63[v71] != v65);
              double v73 = (char *)&v70[v71];
              double v50 = a3;
              double v63 = *a3;
            }
            double v64 = v70 + 40;
            *double v50 = (unsigned __int8 *)v73;
            v50[1] = v70 + 40;
            v50[2] = (unsigned __int8 *)&v69[40 * v68];
            if (v63) {
              operator delete(v63);
            }
          }
          else
          {
            *double v63 = v58;
            v63[1] = v57;
            *(int32x2_t *)(v63 + 4) = v59;
            *(_OWORD *)(v63 + 24) = v155;
            double v64 = v63 + 40;
          }
          v50[1] = v64;
          uint64_t v45 = a2;
          int v61 = v57 - *(unsigned __int8 *)(a2 + 1);
        }
        if (!v61) {
          break;
        }
      }
LABEL_69:
      double v49 = (char *)v6[5];
      if (!v49) {
        goto LABEL_60;
      }
    }
    v173[0] = v175;
    v173[1] = v175;
    *(void *)&long long v174 = v175;
    *((void *)&v174 + 1) = 8;
    int v74 = HIDWORD(v155);
    md::FlyoverMetaData::tileCacheLookup((md::FlyoverMetaData *)v170, v46, &v152, HIDWORD(v155), 0);
    if (!v172)
    {
      LOBYTE(v147) = 0;
      char v151 = 0;
      goto LABEL_157;
    }
    if (BYTE4(v171))
    {
      md::FlyoverRegionManager::getArea((md::FlyoverRegionManager *)&v163, **(void **)&v46->_type, v171);
      char v75 = v153;
      int v76 = ~(-1 << v153);
      __int32 v77 = v154.i32[1];
      LOBYTE(v162[0]) = v153;
      v162[1] = v76 - v154.i32[0];
      v162[2] = v154.i32[1];
      v162[3] = v74;
      v164[1] = 0;
      v164[0] = 0;
      int v165 = 1;
      __int16 v166 = 0;
      if (geo::c3mm::C3mmArea::getEntry((_WORD *)v163, v162, (uint64_t)v164) != -1)
      {
        char v121 = 0;
        LOBYTE(v147) = 0;
        double v50 = a3;
        goto LABEL_150;
      }
      unsigned int v78 = 0;
      uint64_t v79 = (2 * v77);
      uint64_t v80 = (2 * (v76 - v154.i32[0]));
      uint64_t v139 = (v75 + 1);
      char v142 = v75 + 1;
      uint64_t v143 = v171;
      uint64_t v81 = ~(-1 << (v75 + 1));
      int v82 = 2 * v74;
      uint64_t v83 = v79;
      int v136 = v82;
      while (1)
      {
        uint64_t v85 = v80 | (v78 >> 1) & 1;
        if (v165 == 1)
        {
          if (v78 <= 3) {
            goto LABEL_108;
          }
        }
        else
        {
          uint64_t v159 = v139 | (v85 << 32);
          int v160 = v83 | v78 & 1;
          int v161 = v82 | (v78 >> 2);
          int v88 = geo::c3mm::C3mmEntry::childMeshType((uint64_t)v164, (uint64_t)&v159);
          LODWORD(v85) = v80 | (v78 >> 1) & 1;
          if (v88 != 3)
          {
            if (v88 == 2)
            {
              int v144 = v83 | v78 & 1;
              int v145 = v82 | (v78 >> 2);
              char v86 = 3;
            }
            else if (v88 == 1)
            {
LABEL_108:
              int v144 = v83 | v78 & 1;
              int v145 = v82 | (v78 >> 2);
              char v86 = 2;
            }
            else
            {
              int v144 = v83 | v78 & 1;
              int v145 = v82 | (v78 >> 2);
              char v86 = 1;
            }
            double v84 = (char *)v173[1];
            double v89 = v173[0];
            unint64_t v90 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v173[1] - (char *)v173[0]) >> 3);
            if (*((void *)&v174 + 1) < v90 + 1)
            {
              char v140 = v86;
              int v141 = v85;
              uint64_t v91 = v81;
              uint64_t v92 = v80;
              uint64_t v93 = v83;
              double v94 = (void *)v174;
              unint64_t v95 = (1 << -(char)__clz(*((void *)&v174 + 1) + 1));
              if (*((void *)&v174 + 1) >= 0xFFFFFFFFFFFFFFFELL) {
                unint64_t v95 = 1;
              }
              if (v95 <= v90 + 1) {
                unint64_t v96 = v90 + 1;
              }
              else {
                unint64_t v96 = v95;
              }
              double v97 = (char *)malloc_type_malloc(40 * v96, 0x1000040BC7A988CuLL);
              double v98 = v173[0];
              double v99 = (char *)v173[1];
              if (v173[0] != v173[1])
              {
                double v100 = v97;
                double v101 = (char *)v173[0];
                do
                {
                  *(_WORD *)double v100 = *(_WORD *)v101;
                  *(void *)(v100 + 4) = *(void *)(v101 + 4);
                  *(_OWORD *)(v100 + 24) = *(_OWORD *)(v101 + 24);
                  v101 += 40;
                  v100 += 40;
                }
                while (v101 != v99);
              }
              if (v89 != v94) {
                free(v98);
              }
              double v84 = &v97[40 * v90];
              v173[0] = v97;
              *((void *)&v174 + 1) = v96;
              uint64_t v83 = v93;
              uint64_t v80 = v92;
              uint64_t v81 = v91;
              int v82 = v136;
              LODWORD(v85) = v141;
              char v86 = v140;
            }
            LODWORD(v87) = v81 - v85;
            HIDWORD(v87) = v144;
            char *v84 = -1;
            v84[1] = v142;
            *(void *)(v84 + 4) = v87;
            v84[24] = v86;
            *(void *)(v84 + 28) = v143;
            *((_DWORD *)v84 + 9) = v145;
            v173[1] = v84 + 40;
          }
        }
        if (++v78 == 8)
        {
          double v147 = v150;
          double v149 = v150;
          double v122 = (char *)v173[0];
          double v50 = a3;
          if (v173[0] == (void *)v174)
          {
            double v124 = (char *)v173[1];
            double v148 = &v150[(char *)v173[1] - (char *)v173[0]];
            long double v46 = v137;
            if (v173[1] != v173[0])
            {
              double v125 = v150;
              do
              {
                *(_WORD *)double v125 = *(_WORD *)v122;
                *(void *)(v125 + 4) = *(void *)(v122 + 4);
                *(_OWORD *)(v125 + 24) = *(_OWORD *)(v122 + 24);
                v122 += 40;
                v125 += 40;
              }
              while (v122 != v124);
            }
            char v121 = 1;
          }
          else
          {
            double v147 = (char *)v173[0];
            double v148 = (char *)v173[1];
            *(_OWORD *)double v173 = 0u;
            long long v174 = 0u;
            char v121 = 1;
            long double v46 = v137;
          }
LABEL_150:
          char v151 = v121;
          float v126 = (std::__shared_weak_count *)*((void *)&v163 + 1);
          if (*((void *)&v163 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v163 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v126);
          }
          goto LABEL_157;
        }
      }
    }
    uint64_t v102 = 0;
    unsigned __int8 v103 = v152;
    char v104 = v153 + 1;
    int32x2_t v105 = vadd_s32(v154, v154);
    int32x2_t v106 = v105;
    do
    {
      LOBYTE(v163) = v103;
      BYTE1(v163) = v104;
      int32x2_t v146 = v106;
      *(int32x2_t *)((char *)&v163 + 4) = v106;
      md::FlyoverMetaData::tileCacheLookup((md::FlyoverMetaData *)v164, v46, (unsigned __int8 *)&v163, 0, 0);
      if (!v169)
      {
        LOBYTE(v147) = 0;
        char v151 = 0;
        double v50 = a3;
        goto LABEL_157;
      }
      char v110 = v168;
      if (v168)
      {
        double v107 = (unsigned __int8 *)v173[1];
        double v111 = v173[0];
        unint64_t v112 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v173[1] - (char *)v173[0]) >> 3);
        if (*((void *)&v174 + 1) < v112 + 1)
        {
          double v113 = (void *)v174;
          unint64_t v114 = (1 << -(char)__clz(*((void *)&v174 + 1) + 1));
          if (*((void *)&v174 + 1) >= 0xFFFFFFFFFFFFFFFELL) {
            unint64_t v114 = 1;
          }
          if (v114 <= v112 + 1) {
            unint64_t v115 = v112 + 1;
          }
          else {
            unint64_t v115 = v114;
          }
          double v116 = (char *)malloc_type_malloc(40 * v115, 0x1000040BC7A988CuLL);
          double v117 = v173[0];
          double v118 = (char *)v173[1];
          if (v173[0] != v173[1])
          {
            double v119 = v116;
            double v120 = (char *)v173[0];
            do
            {
              *(_WORD *)double v119 = *(_WORD *)v120;
              *(void *)(v119 + 4) = *(void *)(v120 + 4);
              *(_OWORD *)(v119 + 24) = *(_OWORD *)(v120 + 24);
              v120 += 40;
              v119 += 40;
            }
            while (v120 != v118);
          }
          if (v111 != v113) {
            free(v117);
          }
          double v107 = (unsigned __int8 *)&v116[40 * v112];
          v173[0] = v116;
          *((void *)&v174 + 1) = v115;
        }
        uint64_t v108 = v167;
        *double v107 = v103;
        v107[1] = v104;
        v109.i32[1] = v146.i32[1];
        *(int32x2_t *)(v107 + 4) = v146;
        v107[24] = v110;
        *(void *)(v107 + 28) = v108;
        *((_DWORD *)v107 + 9) = 0;
        v173[1] = v107 + 40;
        long double v46 = v137;
      }
      v109.i32[0] = (unint64_t)++v102 >> 1;
      v106.i32[0] = vadd_s32(v105, v109).u32[0];
      v109.i32[1] = v102 & 1;
      v106.i32[1] = vorr_s8(*(int8x8_t *)&v105, *(int8x8_t *)&v109).i32[1];
    }
    while (v102 != 4);
    double v147 = v150;
    double v149 = v150;
    double v123 = (char *)v173[0];
    if (v173[0] == (void *)v174)
    {
      double v127 = (char *)v173[1];
      double v148 = &v150[(char *)v173[1] - (char *)v173[0]];
      double v50 = a3;
      if (v173[1] != v173[0])
      {
        double v128 = v150;
        do
        {
          *(_WORD *)double v128 = *(_WORD *)v123;
          *(void *)(v128 + 4) = *(void *)(v123 + 4);
          *(_OWORD *)(v128 + 24) = *(_OWORD *)(v123 + 24);
          v123 += 40;
          v128 += 40;
        }
        while (v123 != v127);
      }
    }
    else
    {
      double v147 = (char *)v173[0];
      double v148 = (char *)v173[1];
      *(_OWORD *)double v173 = 0u;
      long long v174 = 0u;
      double v50 = a3;
    }
    char v151 = 1;
LABEL_157:
    if (v173[0] != (void *)v174) {
      free(v173[0]);
    }
    if (v151)
    {
      double v129 = v147;
      if (v147 != v148)
      {
        uint64_t v130 = (uint64_t)v6[5];
        do
        {
          double v132 = v6[1];
          uint64_t v133 = 102 * (((unsigned char *)v6[2] - v132) >> 3) - 1;
          if (v6[2] == v132) {
            uint64_t v133 = 0;
          }
          unint64_t v134 = (unint64_t)v6[4] + v130;
          if (v133 == v134)
          {
            std::deque<md::FlyoverOctile>::__add_back_capacity((uint64_t)v6);
            double v132 = v6[1];
            unint64_t v134 = (unint64_t)v6[4] + (void)v6[5];
          }
          unint64_t v131 = *(void *)&v132[8 * (v134 / 0x66)] + 40 * (v134 % 0x66);
          *(_WORD *)unint64_t v131 = *(_WORD *)v129;
          *(void *)(v131 + 4) = *(void *)(v129 + 4);
          *(_OWORD *)(v131 + 24) = *(_OWORD *)(v129 + 24);
          uint64_t v130 = (uint64_t)v6[5] + 1;
          v6[5] = (void *)v130;
          v129 += 40;
        }
        while (v129 != v148);
        if (!v151) {
          goto LABEL_68;
        }
        double v129 = v147;
      }
      if (v129 != v149) {
        free(v129);
      }
    }
LABEL_68:
    uint64_t v45 = a2;
    goto LABEL_69;
  }
LABEL_60:
  double v51 = (void **)__p[1];
  double v52 = (void **)v157;
  if ((unint64_t)v157 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v51);
      double v52 = (void **)v157;
      double v51 = (void **)((char *)__p[1] + 8);
      __p[1] = v51;
    }
    while ((void)v157 - (void)v51 > 0x10uLL);
  }
  while (v51 != v52)
  {
    double v53 = *v51++;
    operator delete(v53);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

void sub_1A26B0B08(_Unwind_Exception *a1)
{
}

void std::deque<md::FlyoverOctile>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x66;
  unint64_t v4 = v2 - 102;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    int v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_88:
      *(void *)int v5 = v8;
      goto LABEL_89;
    }
    unint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v33 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v33 = 1;
      }
      if (!(v33 >> 61))
      {
        unint64_t v34 = v33 >> 2;
        uint64_t v35 = 8 * v33;
        unint64_t v36 = (char *)operator new(8 * v33);
        uint64_t v37 = &v36[8 * v34];
        double v38 = &v36[v35];
        int64_t v40 = v5 - v7;
        BOOL v39 = v5 == v7;
        int v5 = v37;
        if (!v39)
        {
          int v5 = &v37[v40 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v41 = v40 - 8;
          if ((unint64_t)(v40 - 8) >= 0x38)
          {
            uint64_t v83 = &v36[8 * v34];
            double v42 = v83;
            if ((unint64_t)(v83 - v7) >= 0x20)
            {
              uint64_t v84 = (v41 >> 3) + 1;
              uint64_t v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
              double v42 = &v37[v85];
              char v86 = (long long *)(v6 + 3);
              uint64_t v87 = v83 + 16;
              uint64_t v88 = v84 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v89 = *v86;
                *(v87 - 1) = *(v86 - 1);
                *uint64_t v87 = v89;
                v86 += 2;
                v87 += 2;
                v88 -= 4;
              }
              while (v88);
              if (v84 == (v84 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_81;
              }
              v7 += v85;
            }
          }
          else
          {
            double v42 = &v36[8 * v34];
          }
          do
          {
            uint64_t v90 = *(void *)v7;
            v7 += 8;
            *(void *)double v42 = v90;
            v42 += 8;
          }
          while (v42 != v5);
        }
        goto LABEL_81;
      }
LABEL_105:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    __double2 v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      uint64_t v7 = *(char **)(a1 + 8);
    }
    int v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_88;
  }
  uint64_t v18 = *(char **)(a1 + 16);
  __double2 v17 = *(char **)(a1 + 24);
  double v20 = *(char **)a1;
  unint64_t v19 = *(char **)(a1 + 8);
  uint64_t v21 = v18 - v19;
  uint64_t v22 = (v18 - v19) >> 3;
  uint64_t v23 = (uint64_t)&v17[-*(void *)a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    double v24 = operator new(0xFF0uLL);
    uint64_t v25 = v24;
    if (v17 != v18)
    {
      *(void *)uint64_t v18 = v24;
LABEL_89:
      *(void *)(a1 + 16) += 8;
      return;
    }
    if (v19 != v20)
    {
      unint64_t v43 = v19;
      goto LABEL_87;
    }
    unint64_t v68 = (v17 - v19) >> 2;
    if (v18 == v19) {
      unint64_t v68 = 1;
    }
    if (v68 >> 61) {
      goto LABEL_105;
    }
    unint64_t v69 = (v68 + 3) >> 2;
    uint64_t v70 = 8 * v68;
    uint64_t v71 = (char *)operator new(8 * v68);
    unint64_t v43 = &v71[8 * v69];
    double v72 = &v71[v70];
    double v73 = v43;
    if (v18 != v19)
    {
      double v73 = &v43[8 * v22];
      int v74 = &v71[8 * v69];
      char v75 = v19;
      if ((unint64_t)(v21 - 8) > 0x37)
      {
        int v76 = &v71[8 * v69];
        int v74 = v76;
        char v75 = v19;
        if ((unint64_t)(v76 - v19) >= 0x20)
        {
          unint64_t v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
          uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
          int v74 = &v43[v78];
          uint64_t v79 = (long long *)(v19 + 16);
          uint64_t v80 = v76 + 16;
          uint64_t v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v82 = *v79;
            *(v80 - 1) = *(v79 - 1);
            *uint64_t v80 = v82;
            v79 += 2;
            v80 += 2;
            v81 -= 4;
          }
          while (v81);
          if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
          {
            *(void *)a1 = v71;
            *(void *)(a1 + 8) = v43;
            *(void *)(a1 + 16) = v73;
            *(void *)(a1 + 24) = v72;
LABEL_86:
            operator delete(v19);
            unint64_t v43 = *(char **)(a1 + 8);
LABEL_87:
            *((void *)v43 - 1) = v25;
            uint64_t v7 = *(char **)(a1 + 8);
            int v5 = *(char **)(a1 + 16);
            *(void *)(a1 + 8) = v7 - 8;
            uint64_t v8 = *((void *)v7 - 1);
            *(void *)(a1 + 8) = v7;
            if (v5 != *(char **)(a1 + 24)) {
              goto LABEL_88;
            }
            unint64_t v9 = *(char **)a1;
            uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
            if ((unint64_t)v7 <= *(void *)a1)
            {
              unint64_t v92 = (v5 - v9) >> 2;
              if (v5 == v9) {
                unint64_t v92 = 1;
              }
              if (!(v92 >> 61))
              {
                unint64_t v93 = v92 >> 2;
                uint64_t v94 = 8 * v92;
                unint64_t v36 = (char *)operator new(8 * v92);
                uint64_t v37 = &v36[8 * v93];
                double v38 = &v36[v94];
                int64_t v95 = v5 - v7;
                BOOL v39 = v5 == v7;
                int v5 = v37;
                if (!v39)
                {
                  int v5 = &v37[v95 & 0xFFFFFFFFFFFFFFF8];
                  unint64_t v96 = v95 - 8;
                  if ((unint64_t)(v95 - 8) >= 0x38)
                  {
                    double v98 = &v36[8 * v93];
                    double v97 = v98;
                    if ((unint64_t)(v98 - v7) >= 0x20)
                    {
                      uint64_t v99 = (v96 >> 3) + 1;
                      uint64_t v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
                      double v97 = &v37[v100];
                      double v101 = (long long *)(v7 + 16);
                      uint64_t v102 = v98 + 16;
                      uint64_t v103 = v99 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v104 = *v101;
                        *(v102 - 1) = *(v101 - 1);
                        _OWORD *v102 = v104;
                        v101 += 2;
                        v102 += 2;
                        v103 -= 4;
                      }
                      while (v103);
                      if (v99 == (v99 & 0x3FFFFFFFFFFFFFFCLL)) {
                        goto LABEL_81;
                      }
                      v7 += v100;
                    }
                  }
                  else
                  {
                    double v97 = &v36[8 * v93];
                  }
                  do
                  {
                    uint64_t v105 = *(void *)v7;
                    v7 += 8;
                    *(void *)double v97 = v105;
                    v97 += 8;
                  }
                  while (v97 != v5);
                }
LABEL_81:
                *(void *)a1 = v36;
                *(void *)(a1 + 8) = v37;
                *(void *)(a1 + 16) = v5;
                *(void *)(a1 + 24) = v38;
                if (v9)
                {
                  operator delete(v9);
                  int v5 = *(char **)(a1 + 16);
                }
                goto LABEL_88;
              }
              goto LABEL_105;
            }
            goto LABEL_5;
          }
          char v75 = &v19[v78];
        }
      }
      do
      {
        uint64_t v91 = *(void *)v75;
        v75 += 8;
        *(void *)int v74 = v91;
        v74 += 8;
      }
      while (v74 != v73);
    }
    *(void *)a1 = v71;
    *(void *)(a1 + 8) = v43;
    *(void *)(a1 + 16) = v73;
    *(void *)(a1 + 24) = v72;
    if (!v19) {
      goto LABEL_87;
    }
    goto LABEL_86;
  }
  uint64_t v26 = v23 >> 2;
  if (v17 == v20) {
    unint64_t v27 = 1;
  }
  else {
    unint64_t v27 = v26;
  }
  if (v27 >> 61) {
    goto LABEL_105;
  }
  double v28 = (char *)operator new(8 * v27);
  double v29 = operator new(0xFF0uLL);
  double v30 = &v28[8 * v22];
  int64_t v31 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19) {
        unint64_t v44 = 1;
      }
      else {
        unint64_t v44 = v21 >> 2;
      }
      if (v44 >> 61) {
        goto LABEL_105;
      }
      double v30 = (char *)operator new(8 * v44);
      int64_t v31 = &v30[8 * v44];
      operator delete(v28);
      unint64_t v19 = *(char **)(a1 + 8);
      uint64_t v18 = *(char **)(a1 + 16);
      double v28 = v30;
    }
    else
    {
      unint64_t v32 = v22 + 2;
      if (v22 >= -1) {
        unint64_t v32 = v22 + 1;
      }
      v30 -= 8 * (v32 >> 1);
    }
  }
  *(void *)double v30 = v29;
  uint64_t v45 = v30 + 8;
  if (v18 != v19)
  {
    while (v30 != v28)
    {
      double v49 = v30;
      __double2 v47 = v45;
LABEL_43:
      uint64_t v50 = *((void *)v18 - 1);
      v18 -= 8;
      *((void *)v49 - 1) = v50;
      long double v46 = v49 - 8;
      uint64_t v45 = v47;
      double v30 = v46;
      if (v18 == *(char **)(a1 + 8)) {
        goto LABEL_38;
      }
    }
    if (v45 < v31)
    {
      uint64_t v51 = (v31 - v45) >> 3;
      if (v51 >= -1) {
        unint64_t v52 = v51 + 1;
      }
      else {
        unint64_t v52 = v51 + 2;
      }
      __double2 v47 = &v45[8 * (v52 >> 1)];
      double v49 = &v30[8 * (v52 >> 1)];
      if (v45 == v30)
      {
        double v28 = v45;
      }
      else
      {
        memmove(&v30[8 * (v52 >> 1)], v30, v45 - v30);
        double v28 = v30;
      }
      goto LABEL_43;
    }
    if (v31 == v30) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = (v31 - v30) >> 2;
    }
    if (v53 >> 61) {
      goto LABEL_105;
    }
    double v54 = (char *)operator new(8 * v53);
    double v28 = v54;
    unint64_t v55 = (v53 + 3) >> 2;
    double v49 = &v54[8 * v55];
    __double2 v47 = v49;
    int64_t v56 = v45 - v30;
    if (v45 != v30)
    {
      __double2 v47 = &v49[v56 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v57 = v56 - 8;
      unsigned __int8 v58 = &v54[8 * v55];
      int32x2_t v59 = v30;
      if (v57 >= 0x38)
      {
        uint64_t v60 = 8 * v55;
        unsigned __int8 v58 = &v54[8 * v55];
        int32x2_t v59 = v30;
        if ((unint64_t)(v58 - v30) >= 0x20)
        {
          uint64_t v61 = (v57 >> 3) + 1;
          uint64_t v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
          unsigned __int8 v58 = &v49[v62];
          double v63 = (long long *)(v30 + 16);
          double v64 = &v54[v60 + 16];
          uint64_t v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v66 = *v63;
            *((_OWORD *)v64 - 1) = *(v63 - 1);
            *(_OWORD *)double v64 = v66;
            v63 += 2;
            v64 += 32;
            v65 -= 4;
          }
          while (v65);
          if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_63;
          }
          int32x2_t v59 = &v30[v62];
        }
      }
      do
      {
        uint64_t v67 = *(void *)v59;
        v59 += 8;
        *(void *)unsigned __int8 v58 = v67;
        v58 += 8;
      }
      while (v58 != v47);
    }
LABEL_63:
    int64_t v31 = &v54[8 * v53];
    operator delete(v30);
    goto LABEL_43;
  }
  long double v46 = v30;
  __double2 v47 = v30 + 8;
LABEL_38:
  BOOL v48 = *(char **)a1;
  *(void *)a1 = v28;
  *(void *)(a1 + 8) = v46;
  *(void *)(a1 + 16) = v47;
  *(void *)(a1 + 24) = v31;
  if (v48)
  {
    operator delete(v48);
  }
}

void sub_1A26B1198(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::FlyoverManeuverBatch::~FlyoverManeuverBatch(md::FlyoverManeuverBatch *this)
{
  md::Ribbons::RibbonBatch<md::FlyoverManeuverTypeDesc>::~RibbonBatch((uint64_t)this);
  JUMPOUT(0x1A6239270);
}

uint64_t md::Ribbons::RibbonBatch<md::FlyoverManeuverTypeDesc>::~RibbonBatch(uint64_t a1)
{
  *(void *)a1 = &unk_1EF553AB0;
  unint64_t v2 = *(void **)(a1 + 248);
  if (v2)
  {
    BOOL v3 = *(void **)(a1 + 256);
    unint64_t v4 = *(void **)(a1 + 248);
    if (v3 != v2)
    {
      do
      {
        uint64_t v7 = *--v3;
        uint64_t v6 = v7;
        *BOOL v3 = 0;
        if (v7)
        {
          uint64_t v8 = *(void **)(v6 + 56);
          if (v8)
          {
            unint64_t v9 = *(void **)(v6 + 64);
            uint64_t v5 = *(void *)(v6 + 56);
            if (v9 != v8)
            {
              do
              {
                uint64_t v10 = *--v9;
                *unint64_t v9 = 0;
                if (v10)
                {
                  {
                    operator new();
                  }
                  (*(void (**)(uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc);
                }
              }
              while (v9 != v8);
              uint64_t v5 = *(void *)(v6 + 56);
            }
            *(void *)(v6 + 64) = v8;
            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v6 + 80) + 40))(*(void *)(v6 + 80), v5, *(void *)(v6 + 72) - v5);
          }
          MEMORY[0x1A6239270](v6, 0x1020C4097AEC518);
        }
      }
      while (v3 != v2);
      unint64_t v4 = *(void **)(a1 + 248);
    }
    *(void *)(a1 + 256) = v2;
    operator delete(v4);
  }
  uint64_t v11 = *(void **)(a1 + 224);
  do
  {
    if (v11[1])
    {
      unint64_t v12 = 0;
      uint64_t v13 = v11 + 2;
      uint64_t v14 = v11 + 2;
      __double2 v15 = (void (***)(void))(v11 + 2);
      do
      {
        int64_t v16 = (void (**)(void *))*v15;
        v15 += 15;
        (*v16)(v14);
        ++v12;
        v13 += 15;
        uint64_t v14 = v15;
      }
      while (v12 < v11[1]);
    }
    v11[1] = 0;
    uint64_t v11 = (void *)*v11;
  }
  while (v11);
  __double2 v17 = *(void ***)(a1 + 224);
  *(void *)(a1 + 232) = v17;
  uint64_t v18 = *v17;
  *__double2 v17 = 0;
  if (v18)
  {
    do
    {
      unint64_t v19 = (void *)*v18;
      free(v18);
      uint64_t v18 = v19;
    }
    while (v19);
    __double2 v17 = *(void ***)(a1 + 224);
  }
  free(v17);
  double v20 = *(void **)(a1 + 200);
  if (v20)
  {
    *(void *)(a1 + 208) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *(void *)(a1 + 168);
  if (v21)
  {
    uint64_t v22 = *(void *)(a1 + 176);
    uint64_t v23 = *(void *)(a1 + 168);
    if (v22 != v21)
    {
      uint64_t v24 = *(void *)(a1 + 176);
      do
      {
        uint64_t v26 = *(void **)(v24 - 24);
        v24 -= 24;
        uint64_t v25 = v26;
        if (v26)
        {
          *(void *)(v22 - 16) = v25;
          operator delete(v25);
        }
        uint64_t v22 = v24;
      }
      while (v24 != v21);
      uint64_t v23 = *(void *)(a1 + 168);
    }
    *(void *)(a1 + 176) = v21;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 192) + 40))(*(void *)(a1 + 192), v23, *(void *)(a1 + 184) - v23);
  }
  unint64_t v27 = *(void **)(a1 + 144);
  if (v27)
  {
    *(void *)(a1 + 152) = v27;
    operator delete(v27);
  }
  *(void *)(a1 + 16) = &off_1EF55A458;
  *(void *)(a1 + 32) = 3131955885;
  return a1;
}

void md::Ribbons::RibbonBatch<md::FlyoverManeuverTypeDesc>::~RibbonBatch(uint64_t a1)
{
  md::Ribbons::RibbonBatch<md::FlyoverManeuverTypeDesc>::~RibbonBatch(a1);
  JUMPOUT(0x1A6239270);
}

void md::FlyoverManeuverLayer::~FlyoverManeuverLayer(md::FlyoverManeuverLayer *this)
{
  md::Ribbons::RibbonLayer<md::FlyoverManeuverTypeDesc>::~RibbonLayer(this);
  JUMPOUT(0x1A6239270);
}

void *md::Ribbons::RibbonLayer<md::FlyoverManeuverTypeDesc>::~RibbonLayer(void *a1)
{
  *a1 = &unk_1EF553CF0;
  unint64_t v2 = (void *)a1[1];
  BOOL v3 = (void *)a1[2];
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  unint64_t v4 = (void *)a1[4];
  uint64_t v5 = (void *)a1[5];
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = a1[9];
  a1[9] = 0;
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 2584);
    if (v7) {
      MEMORY[0x1A6239250](v7, 0x1000C8000313F17);
    }
    MEMORY[0x1A6239270](v6, 0x1020C4007FF0C4BLL);
  }
  uint64_t v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  unint64_t v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void md::Ribbons::RibbonLayer<md::FlyoverManeuverTypeDesc>::~RibbonLayer(void *a1)
{
  md::Ribbons::RibbonLayer<md::FlyoverManeuverTypeDesc>::~RibbonLayer(a1);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::FlyoverManeuver::Default>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  BOOL v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  BOOL v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::FlyoverManeuver::Default>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  BOOL v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::FlyoverManeuver::Default>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  BOOL v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverManeuver::Default>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverManeuver::Default>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584A10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::FlyoverManeuver::Default>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584A10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1A26B1B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A26B1C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A26B1CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A26B1D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A26B1E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A26B1EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A26B1F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A26B2014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A26B20C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A26B2174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A26B2224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A26B22C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A26B235C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A26B2584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A26B26D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A26B27DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A26B2924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A26B2A58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A26B2B98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A26B2CC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A26B2DE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A26B2F14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A26B3030(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A26B3154(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A26B3278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t md::LabelFeature::debugPopulateStyleAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v6[0] = &unk_1EF51D9F0;
  v6[1] = a2;
  uint64_t v7 = v6;
  BOOL v3 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v4 = *(void *)(a1 + 152);
  if (v4) {
    (*(void (**)(uint64_t, void *))(*(void *)v4 + 24))(v4, v6);
  }
  std::mutex::unlock(v3);
  uint64_t result = (uint64_t)v7;
  if (v7 == v6) {
    return (*(uint64_t (**)(void *))(v6[0] + 32))(v6);
  }
  if (v7) {
    return (*(uint64_t (**)(void))(*v7 + 40))();
  }
  return result;
}

void sub_1A26B33B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex::unlock(v10);
  std::function<void ()(GeoCodecsFeature const*)>::~function(&a10);
  _Unwind_Resume(a1);
}

unint64_t std::__function::__func<md::LabelFeature::debugPopulateStyleAttributes(std::unordered_set<gss::FeatureAttributeSet,std::hash<gss::FeatureAttributeSet>,std::equal_to<gss::FeatureAttributeSet>,geo::StdAllocator<gss::FeatureAttributeSet,mdm::Allocator>> &,md::LabelManager const*,md::LabelIdentifier const&)::$_0,std::allocator<md::LabelFeature::debugPopulateStyleAttributes(std::unordered_set<gss::FeatureAttributeSet,std::hash<gss::FeatureAttributeSet>,std::equal_to<gss::FeatureAttributeSet>,geo::StdAllocator<gss::FeatureAttributeSet,mdm::Allocator>> &,md::LabelManager const*,md::LabelIdentifier const&)::$_0>,void ()(GeoCodecsFeature const*)>::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  md::createFeatureAttributeSet((gss::Allocator *)&v4, (uint64_t *)(*(void *)a2 + 24));
  unint64_t result = std::__hash_table<gss::FeatureAttributeSet,std::hash<gss::FeatureAttributeSet>,std::equal_to<gss::FeatureAttributeSet>,geo::StdAllocator<gss::FeatureAttributeSet,mdm::Allocator>>::__emplace_unique_key_args<gss::FeatureAttributeSet,gss::FeatureAttributeSet>(v2, v4, v5, (uint64_t)&v4);
  if (v4)
  {
    uint64_t v5 = v4;
    return (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(*(void *)v7 + 40))(v7, v4, v6 - (void)v4);
  }
  return result;
}

void sub_1A26B345C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a9) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a12 + 40))(a12, a9, a11 - a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<md::LabelFeature::debugPopulateStyleAttributes(std::unordered_set<gss::FeatureAttributeSet,std::hash<gss::FeatureAttributeSet>,std::equal_to<gss::FeatureAttributeSet>,geo::StdAllocator<gss::FeatureAttributeSet,mdm::Allocator>> &,md::LabelManager const*,md::LabelIdentifier const&)::$_0,std::allocator<md::LabelFeature::debugPopulateStyleAttributes(std::unordered_set<gss::FeatureAttributeSet,std::hash<gss::FeatureAttributeSet>,std::equal_to<gss::FeatureAttributeSet>,geo::StdAllocator<gss::FeatureAttributeSet,mdm::Allocator>> &,md::LabelManager const*,md::LabelIdentifier const&)::$_0>,void ()(GeoCodecsFeature const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF51D9F0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::LabelFeature::debugPopulateStyleAttributes(std::unordered_set<gss::FeatureAttributeSet,std::hash<gss::FeatureAttributeSet>,std::equal_to<gss::FeatureAttributeSet>,geo::StdAllocator<gss::FeatureAttributeSet,mdm::Allocator>> &,md::LabelManager const*,md::LabelIdentifier const&)::$_0,std::allocator<md::LabelFeature::debugPopulateStyleAttributes(std::unordered_set<gss::FeatureAttributeSet,std::hash<gss::FeatureAttributeSet>,std::equal_to<gss::FeatureAttributeSet>,geo::StdAllocator<gss::FeatureAttributeSet,mdm::Allocator>> &,md::LabelManager const*,md::LabelIdentifier const&)::$_0>,void ()(GeoCodecsFeature const*)>::__clone(uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = &unk_1EF51D9F0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelFeature::debugPopulateStyleAttributes(std::unordered_set<gss::FeatureAttributeSet,std::hash<gss::FeatureAttributeSet>,std::equal_to<gss::FeatureAttributeSet>,geo::StdAllocator<gss::FeatureAttributeSet,mdm::Allocator>> &,md::LabelManager const*,md::LabelIdentifier const&)::$_0,std::allocator<md::LabelFeature::debugPopulateStyleAttributes(std::unordered_set<gss::FeatureAttributeSet,std::hash<gss::FeatureAttributeSet>,std::equal_to<gss::FeatureAttributeSet>,geo::StdAllocator<gss::FeatureAttributeSet,mdm::Allocator>> &,md::LabelManager const*,md::LabelIdentifier const&)::$_0>,void ()(GeoCodecsFeature const*)>::~__func()
{
}

void md::LabelFeature::debugPopulateAttributeStrings(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  v7[0] = &unk_1EF51DA38;
  v7[1] = v5;
  void v7[2] = a3;
  uint64_t v8 = v7;
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v6 = *(void *)(a1 + 152);
  if (v6) {
    (*(void (**)(uint64_t, void *))(*(void *)v6 + 24))(v6, v7);
  }
  std::mutex::unlock((std::mutex *)(a1 + 8));
  if (v8 == v7)
  {
    (*(void (**)(void *))(v7[0] + 32))(v7);
  }
  else if (v8)
  {
    (*(void (**)(void))(*v8 + 40))();
  }
}

void sub_1A26B3668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex::unlock(v11);
  std::function<void ()(GeoCodecsFeature const*)>::~function(&a10);

  _Unwind_Resume(a1);
}

void std::__function::__func<md::LabelFeature::debugPopulateAttributeStrings(NSMutableSet *,md::LabelManager const*,md::LabelIdentifier const&)::$_0,std::allocator<md::LabelFeature::debugPopulateAttributeStrings(NSMutableSet *,md::LabelManager const*,md::LabelIdentifier const&)::$_0>,void ()(GeoCodecsFeature const*)>::operator()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = NSString;
  id v5 = (gss::Allocator *)(*a2 + 24);
  md::HighlightHelper::debugAttributesToString(v5);
  id v10 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = [v4 stringWithFormat:@"{%@}", v10];
  [v3 addObject:v6];

  uint64_t v7 = md::LabelFeature::debugClientAttributesToString((uint64_t *)v5, *(void *)(*(void *)(a1 + 16) + 336));
  if (v7)
  {
    uint64_t v8 = *(void **)(a1 + 8);
    id v11 = v7;
    uint64_t v9 = [NSString stringWithFormat:@"{%@}", v7];
    [v8 addObject:v9];

    uint64_t v7 = v11;
  }
}

void sub_1A26B3784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id md::LabelFeature::debugClientAttributesToString(uint64_t *a1, uint64_t a2)
{
  md::LabelManager::styleQueryForFeatureAttributes((uint64_t)&v5, a2, a1);
  uint64_t v2 = md::HighlightHelper::debugClientAttributesToString(v5);
  uint64_t v3 = v6;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v2;
}

void sub_1A26B3850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__function::__func<md::LabelFeature::debugPopulateAttributeStrings(NSMutableSet *,md::LabelManager const*,md::LabelIdentifier const&)::$_0,std::allocator<md::LabelFeature::debugPopulateAttributeStrings(NSMutableSet *,md::LabelManager const*,md::LabelIdentifier const&)::$_0>,void ()(GeoCodecsFeature const*)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

void std::__function::__func<md::LabelFeature::debugPopulateAttributeStrings(NSMutableSet *,md::LabelManager const*,md::LabelIdentifier const&)::$_0,std::allocator<md::LabelFeature::debugPopulateAttributeStrings(NSMutableSet *,md::LabelManager const*,md::LabelIdentifier const&)::$_0>,void ()(GeoCodecsFeature const*)>::destroy(uint64_t a1)
{
}

id std::__function::__func<md::LabelFeature::debugPopulateAttributeStrings(NSMutableSet *,md::LabelManager const*,md::LabelIdentifier const&)::$_0,std::allocator<md::LabelFeature::debugPopulateAttributeStrings(NSMutableSet *,md::LabelManager const*,md::LabelIdentifier const&)::$_0>,void ()(GeoCodecsFeature const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF51DA38;
  id result = *(id *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  a2[1] = result;
  a2[2] = v5;
  return result;
}

void *std::__function::__func<md::LabelFeature::debugPopulateAttributeStrings(NSMutableSet *,md::LabelManager const*,md::LabelIdentifier const&)::$_0,std::allocator<md::LabelFeature::debugPopulateAttributeStrings(NSMutableSet *,md::LabelManager const*,md::LabelIdentifier const&)::$_0>,void ()(GeoCodecsFeature const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x18uLL);
  void *v2 = &unk_1EF51DA38;
  id v3 = *(id *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  v2[1] = v3;
  v2[2] = v4;
  return v2;
}

void std::__function::__func<md::LabelFeature::debugPopulateAttributeStrings(NSMutableSet *,md::LabelManager const*,md::LabelIdentifier const&)::$_0,std::allocator<md::LabelFeature::debugPopulateAttributeStrings(NSMutableSet *,md::LabelManager const*,md::LabelIdentifier const&)::$_0>,void ()(GeoCodecsFeature const*)>::~__func(uint64_t a1)
{
  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<md::LabelFeature::debugPopulateAttributeStrings(NSMutableSet *,md::LabelManager const*,md::LabelIdentifier const&)::$_0,std::allocator<md::LabelFeature::debugPopulateAttributeStrings(NSMutableSet *,md::LabelManager const*,md::LabelIdentifier const&)::$_0>,void ()(GeoCodecsFeature const*)>::~__func(uint64_t a1)
{
  return a1;
}

uint64_t std::__function::__func<md::LabelFeature::styleAttributes(md::LabelIdentifier)::$_0,std::allocator<md::LabelFeature::styleAttributes(md::LabelIdentifier)::$_0>,void ()(GeoCodecsFeature const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF52DE60;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::LabelFeature::styleAttributes(md::LabelIdentifier)::$_0,std::allocator<md::LabelFeature::styleAttributes(md::LabelIdentifier)::$_0>,void ()(GeoCodecsFeature const*)>::__clone(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = &unk_1EF52DE60;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LabelFeature::styleAttributes(md::LabelIdentifier)::$_0,std::allocator<md::LabelFeature::styleAttributes(md::LabelIdentifier)::$_0>,void ()(GeoCodecsFeature const*)>::~__func()
{
}

uint64_t md::LabelFeature::restyleFeature(md::LabelFeature *this, md::LabelFeatureStyler **a2)
{
  return md::LabelFeatureStyler::restyleFeature(a2[37], this);
}

void md::LabelFeature::populateDebugNode(md::LabelFeature *this, gdc::DebugTreeNode *a2, unint64_t a3)
{
  __p[23] = 11;
  strcpy(__p, "Public Name");
  if (!(*(uint64_t (**)(void))(*(void *)this + 472))())
  {
    BOOL v10 = 0;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 14;
    strcpy((char *)&__dst, "No Public Name");
    int v143 = 4;
    memset(&v142, 0, sizeof(v142));
LABEL_14:
    std::string v142 = __dst;
    goto LABEL_16;
  }
  uint64_t v6 = (*(uint64_t (**)(md::LabelFeature *, void))(*(void *)this + 472))(this, 0);
  uint64_t v7 = (const void *)v6;
  if ((*(char *)(v6 + 23) & 0x80000000) == 0)
  {
    std::string::size_type v8 = *(unsigned __int8 *)(v6 + 23);
    if (v8 < 0x17) {
      goto LABEL_4;
    }
LABEL_9:
    uint64_t v11 = (v8 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = v8;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_12;
  }
  std::string::size_type v8 = *(void *)(v6 + 8);
  if (v8 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_128;
  }
  uint64_t v7 = *(const void **)v6;
  if (v8 >= 0x17) {
    goto LABEL_9;
  }
LABEL_4:
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v8;
  p_dst = &__dst;
  if (v8) {
LABEL_12:
  }
    memmove(p_dst, v7, v8);
  p_dst->__r_.__value_.__s.__data_[v8] = 0;
  memset(&v142, 0, sizeof(v142));
  int v143 = 4;
  BOOL v10 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_14;
  }
  std::string::__assign_no_alias<true>(&v142, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
LABEL_16:
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v141);
  if ((SHIBYTE(v142.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v10) {
      goto LABEL_18;
    }
LABEL_25:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_26;
  }
  operator delete(v142.__r_.__value_.__l.__data_);
  if (v10) {
    goto LABEL_25;
  }
LABEL_18:
  if ((__p[23] & 0x80000000) == 0) {
    goto LABEL_19;
  }
LABEL_26:
  operator delete(*(void **)__p);
LABEL_19:
  __p[23] = 13;
  strcpy(__p, "Public Locale");
  if (!(*(uint64_t (**)(md::LabelFeature *, void))(*(void *)this + 480))(this, 0))
  {
    BOOL v17 = 0;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 16;
    strcpy((char *)&__dst, "No Public Locale");
    memset(&v138, 0, sizeof(v138));
    int v139 = 4;
LABEL_35:
    std::string v138 = __dst;
    goto LABEL_37;
  }
  uint64_t v13 = (*(uint64_t (**)(md::LabelFeature *, void))(*(void *)this + 480))(this, 0);
  uint64_t v14 = (const void *)v13;
  if ((*(char *)(v13 + 23) & 0x80000000) == 0)
  {
    std::string::size_type v15 = *(unsigned __int8 *)(v13 + 23);
    if (v15 < 0x17) {
      goto LABEL_22;
    }
LABEL_30:
    uint64_t v18 = (v15 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v18 = v15 | 7;
    }
    uint64_t v19 = v18 + 1;
    int64_t v16 = (std::string *)operator new(v18 + 1);
    __dst.__r_.__value_.__l.__size_ = v15;
    __dst.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
    goto LABEL_33;
  }
  std::string::size_type v15 = *(void *)(v13 + 8);
  if (v15 > 0x7FFFFFFFFFFFFFF7) {
LABEL_128:
  }
    abort();
  uint64_t v14 = *(const void **)v13;
  if (v15 >= 0x17) {
    goto LABEL_30;
  }
LABEL_22:
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v15;
  int64_t v16 = &__dst;
  if (v15) {
LABEL_33:
  }
    memmove(v16, v14, v15);
  v16->__r_.__value_.__s.__data_[v15] = 0;
  memset(&v138, 0, sizeof(v138));
  int v139 = 4;
  BOOL v17 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_35;
  }
  std::string::__assign_no_alias<true>(&v138, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
LABEL_37:
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v137);
  if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v17) {
      goto LABEL_39;
    }
LABEL_121:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_122;
  }
  operator delete(v138.__r_.__value_.__l.__data_);
  if (v17) {
    goto LABEL_121;
  }
LABEL_39:
  if ((__p[23] & 0x80000000) == 0) {
    goto LABEL_40;
  }
LABEL_122:
  operator delete(*(void **)__p);
LABEL_40:
  __p[23] = 10;
  strcpy(__p, "Feature ID");
  uint64_t v20 = (*(uint64_t (**)(md::LabelFeature *))(*(void *)this + 160))(this);
  uint64_t v135 = 0;
  uint64_t v134 = 0;
  int v136 = 1;
  uint64_t v133 = 0;
  uint64_t v132 = v20;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v131);
  uint64_t v21 = *(void *)this;
  __p[23] = 8;
  strcpy(__p, "Venue ID");
  uint64_t v22 = (*(uint64_t (**)(md::LabelFeature *))(v21 + 368))(this);
  uint64_t v129 = 0;
  uint64_t v128 = 0;
  int v130 = 1;
  uint64_t v127 = 0;
  uint64_t v126 = v22;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v125);
  uint64_t v23 = *(void *)this;
  __p[23] = 17;
  strcpy(__p, "Venue Building ID");
  uint64_t v24 = (*(uint64_t (**)(md::LabelFeature *))(v23 + 376))(this);
  uint64_t v123 = 0;
  uint64_t v122 = 0;
  int v124 = 1;
  uint64_t v121 = 0;
  uint64_t v120 = v24;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v119);
  uint64_t v25 = *(void *)this;
  __p[23] = 14;
  strcpy(__p, "Venue Level ID");
  uint64_t v26 = (*(uint64_t (**)(md::LabelFeature *))(v25 + 384))(this);
  uint64_t v117 = 0;
  uint64_t v116 = 0;
  int v118 = 1;
  uint64_t v115 = 0;
  uint64_t v114 = v26;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v113);
  uint64_t v27 = *(void *)this;
  __p[23] = 19;
  strcpy(__p, "Venue Comoponent ID");
  uint64_t v28 = (*(uint64_t (**)(md::LabelFeature *))(v27 + 392))(this);
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  int v112 = 1;
  uint64_t v109 = 0;
  uint64_t v108 = v28;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v107);
  uint64_t v29 = *(void *)this;
  __p[23] = 19;
  strcpy(__p, "Venue Floor Ordinal");
  int v30 = (*(uint64_t (**)(md::LabelFeature *))(v29 + 400))(this);
  int v106 = 0;
  memset(&v105[4], 0, 24);
  v105[0] = v30;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v105);
  uint64_t v31 = *(void *)this;
  __p[23] = 11;
  strcpy(__p, "Business ID");
  uint64_t v32 = (*(uint64_t (**)(md::LabelFeature *))(v31 + 176))(this);
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  int v104 = 1;
  uint64_t v101 = 0;
  uint64_t v100 = v32;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v99);
  uint64_t v33 = *(void *)this;
  __p[23] = 18;
  strcpy(__p, "Feature Zoom Range");
  float v34 = (*(float (**)(md::LabelFeature *))(v33 + 240))(this);
  float v35 = (*(float (**)(md::LabelFeature *))(*(void *)this + 248))(this);
  __dst.__r_.__value_.__l.__size_ = 0;
  unint64_t v36 = (char *)operator new(0x80uLL);
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)(v36 + 128);
  __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)(v36 + 128);
  *((double *)v36 + 2) = v34;
  *((void *)v36 + 5) = 0;
  *((void *)v36 + 6) = 0;
  *((void *)v36 + 4) = 0;
  *((_DWORD *)v36 + 14) = 2;
  *((void *)v36 + 12) = 0;
  *((double *)v36 + 10) = v35;
  *((void *)v36 + 13) = 0;
  *((void *)v36 + 14) = 0;
  *((_DWORD *)v36 + 30) = 2;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t *)&__dst);
  if (v36[119] < 0) {
    operator delete(*((void **)v36 + 12));
  }
  unint64_t v79 = a3;
  if (v36[55] < 0) {
    operator delete(*((void **)v36 + 4));
  }
  operator delete(v36);
  uint64_t v37 = *(void *)this;
  __p[23] = 19;
  strcpy(__p, "is External Feature");
  uint64_t v38 = (*(uint64_t (**)(md::LabelFeature *))(v37 + 64))(this);
  int v98 = 0;
  memset(&v97[4], 0, 24);
  v97[0] = v38 != 0;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v97);
  uint64_t v39 = *(void *)this;
  __p[23] = 14;
  strcpy(__p, "has Annotation");
  unsigned int v40 = (*(uint64_t (**)(md::LabelFeature *))(v39 + 216))(this);
  int v96 = 0;
  memset(&v95[4], 0, 24);
  v95[0] = v40;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)__p, (uint64_t)v95);
  __p[23] = 5;
  strcpy(__p, "Style");
  ChildNode = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (long long *)__p);
  unint64_t v43 = (md::LabelStyle **)*((void *)this + 12);
  unint64_t v44 = (md::LabelStyle **)*((void *)this + 13);
  if (v43 != v44)
  {
    uint64_t v45 = (gdc::DebugTreeNode *)ChildNode;
    do
    {
      long double v46 = *v43;
      if (*v43 && *((unsigned char *)v46 + 125) && *((unsigned __int8 *)v46 + 136) != 255)
      {
        md::LabelStyle::populateDebugNode(v46, v45, v42);
      }
      else
      {
        __p[23] = 14;
        strcpy(__p, "No Style Found");
        a3 = a3 & 0xFFFFFFFFFFFF0000 | 0x20;
        uint64_t v92 = 0;
        uint64_t v93 = 0x100000000000000;
        int v94 = 4;
        unint64_t v91 = a3;
        gdc::DebugTreeNode::addProperty((uint64_t)v45, (uint64_t)__p, (uint64_t)v90);
      }
      v43 += 2;
    }
    while (v43 != v44);
  }
  __p[23] = 18;
  strcpy(__p, "Feature Attributes");
  unint64_t v77 = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (long long *)__p);
  *(void *)std::string __p = 0;
  *(void *)&__p[8] = 0;
  {
    operator new();
  }
  *(void *)&__p[16] = mdm::Allocator::instance(void)::alloc;
  char v86 = 0;
  {
    operator new();
  }
  uint64_t v87 = mdm::Allocator::instance(void)::alloc;
  uint64_t v88 = 0;
  int v89 = 1065353216;
  LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
  (*(void (**)(md::LabelFeature *, unsigned char *, unint64_t, std::string *))(*(void *)this + 624))(this, __p, v79, &__dst);
  __double2 v47 = v86;
  if (v86)
  {
    uint64_t v48 = 0;
    while (1)
    {
      std::to_string(&v84, v48);
      double v49 = std::string::insert(&v84, 0, "Set: ", 5uLL);
      std::string __dst = *v49;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      uint64_t v80 = gdc::DebugTreeNode::createChildNode((uint64_t)v77, (long long *)&__dst);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
LABEL_112:
        }
          operator delete(v84.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_112;
      }
      uint64_t v50 = (unsigned int *)v47[2];
      uint64_t v51 = (unsigned int *)v47[3];
      uint64_t v78 = v47;
      if (v50 != v51)
      {
        unsigned int v52 = 0;
        do
        {
          std::to_string(&v84, v52);
          if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t size = v84.__r_.__value_.__l.__size_;
          }
          if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v54 = 22;
          }
          else {
            std::string::size_type v54 = (v84.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          }
          if (v54 - size >= 0xB)
          {
            if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v60 = &v84;
            }
            else {
              uint64_t v60 = (std::string *)v84.__r_.__value_.__r.__words[0];
            }
            if (size)
            {
              BOOL v61 = (char *)v60 + size <= "Attribute: " || v60 > (std::string *)"Attribute: ";
              uint64_t v62 = 11;
              if (v61) {
                uint64_t v62 = 0;
              }
              double v63 = &aAttribute[v62];
              memmove((char *)&v60->__r_.__value_.__r.__words[1] + 3, v60, size);
            }
            else
            {
              double v63 = "Attribute: ";
            }
            v60->__r_.__value_.__r.__words[0] = *(void *)v63;
            *(_DWORD *)((char *)v60->__r_.__value_.__r.__words + 7) = *(_DWORD *)(v63 + 7);
            size_t v64 = size + 11;
            if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
              v84.__r_.__value_.__l.__size_ = size + 11;
            }
            else {
              *((unsigned char *)&v84.__r_.__value_.__s + 23) = v64 & 0x7F;
            }
            uint64_t v65 = (char *)v60 + v64;
          }
          else
          {
            unint64_t v55 = size + 11;
            if (0x7FFFFFFFFFFFFFF6 - v54 < size + 11 - v54) {
              abort();
            }
            uint64_t v56 = v48;
            if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v57 = &v84;
            }
            else {
              unint64_t v57 = (std::string *)v84.__r_.__value_.__r.__words[0];
            }
            size_t v58 = 0x7FFFFFFFFFFFFFF7;
            if (v54 <= 0x3FFFFFFFFFFFFFF2)
            {
              unint64_t v59 = 2 * v54;
              if (v55 > 2 * v54) {
                unint64_t v59 = size + 11;
              }
              if (v59 >= 0x17)
              {
                unint64_t v66 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
                uint64_t v67 = v59 | 7;
                if (v67 == 23) {
                  uint64_t v67 = v66;
                }
                size_t v58 = v67 + 1;
              }
              else
              {
                size_t v58 = 23;
              }
            }
            unint64_t v68 = (char *)operator new(v58);
            std::string::size_type v69 = (std::string::size_type)v68;
            *(_DWORD *)(v68 + 7) = 540697972;
            *(void *)unint64_t v68 = *(void *)"Attribute: ";
            if (size) {
              memmove(v68 + 11, v57, size);
            }
            if (v54 != 22) {
              operator delete(v57);
            }
            v84.__r_.__value_.__l.__size_ = size + 11;
            v84.__r_.__value_.__r.__words[2] = v58 | 0x8000000000000000;
            v84.__r_.__value_.__r.__words[0] = v69;
            uint64_t v65 = (unsigned char *)(v69 + v55);
            uint64_t v48 = v56;
          }
          *uint64_t v65 = 0;
          std::string __dst = v84;
          memset(&v84, 0, sizeof(v84));
          uint64_t v70 = *v50;
          uint64_t v71 = *((unsigned __int16 *)v50 + 2);
          long long v82 = 0;
          double v72 = (char *)operator new(0x80uLL);
          long long v82 = v72 + 128;
          uint64_t v83 = v72 + 128;
          *((void *)v72 + 1) = v70;
          *((void *)v72 + 5) = 0;
          *((void *)v72 + 6) = 0;
          *((void *)v72 + 4) = 0;
          *((_DWORD *)v72 + 14) = 1;
          *((void *)v72 + 12) = 0;
          *((void *)v72 + 9) = v71;
          *((void *)v72 + 13) = 0;
          *((void *)v72 + 14) = 0;
          *((_DWORD *)v72 + 30) = 1;
          uint64_t v81 = v72;
          gdc::DebugTreeNode::addProperty((uint64_t)v80, (uint64_t)&__dst, (uint64_t *)&v81);
          if (v72[119] < 0)
          {
            operator delete(*((void **)v72 + 12));
            if ((v72[55] & 0x80000000) == 0) {
              goto LABEL_104;
            }
          }
          else if ((v72[55] & 0x80000000) == 0)
          {
            goto LABEL_104;
          }
          operator delete(*((void **)v72 + 4));
LABEL_104:
          operator delete(v72);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
LABEL_110:
            }
              operator delete(v84.__r_.__value_.__l.__data_);
          }
          else if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
          {
            goto LABEL_110;
          }
          v50 += 2;
          ++v52;
        }
        while (v50 != v51);
      }
      uint64_t v48 = (v48 + 1);
      __double2 v47 = (void *)*v78;
      if (!*v78)
      {
        double v73 = v86;
        if (v86)
        {
          do
          {
            char v75 = (uint64_t *)*v73;
            uint64_t v76 = v73[2];
            if (v76)
            {
              v73[3] = v76;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v73[5] + 40))(v73[5], v76, v73[4] - v76);
            }
            (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v87 + 40))(v87, v73, 48);
            double v73 = v75;
          }
          while (v75);
        }
        break;
      }
    }
  }
  uint64_t v74 = *(void *)__p;
  *(void *)std::string __p = 0;
  if (v74) {
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)&__p[16] + 40))(*(void *)&__p[16], v74, 8 * *(void *)&__p[8]);
  }
}

void sub_1A26B4A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
}

uint64_t *std::unordered_set<gss::FeatureAttributeSet,std::hash<gss::FeatureAttributeSet>,std::equal_to<gss::FeatureAttributeSet>,geo::StdAllocator<gss::FeatureAttributeSet,mdm::Allocator>>::~unordered_set[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[3];
  if (v2)
  {
    do
    {
      uint64_t v5 = (uint64_t *)*v2;
      uint64_t v6 = v2[2];
      if (v6)
      {
        v2[3] = v6;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[5] + 40))(v2[5], v6, v2[4] - v6);
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1[4] + 40))(a1[4], v2, 48);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[2] + 40))(a1[2], v3, 8 * a1[1]);
  }
  return a1;
}

uint64_t md::LabelFeature::debugString@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, char a4@<W3>, unsigned char *a5@<X8>)
{
  uint64_t v141 = *MEMORY[0x1E4F143B8];
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v126);
  if (!*((void *)a1 + 9)) {
    goto LABEL_208;
  }
  uint64_t v9 = (uint64_t *)(*(uint64_t (**)(unsigned char *, void, void, void, uint64_t))(*(void *)a1 + 552))(a1, *a3, 0, 0, a2);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v116 = (std::__shared_weak_count *)v10;
  if (v11 && !*(unsigned char *)(v11 + 125)) {
    md::LabelStyle::updateZoomInvariantStyles(v11);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v126, (uint64_t)"Feature ", 8);
  uint64_t v12 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)"\n", 1);
  if ((*(uint64_t (**)(unsigned char *))(*(void *)a1 + 488))(a1)
    && (*(uint64_t (**)(unsigned char *, void))(*(void *)a1 + 472))(a1, 0))
  {
    uint64_t v13 = (*(uint64_t (**)(unsigned char *, void))(*(void *)a1 + 472))(a1, 0);
    if (*(char *)(v13 + 23) < 0)
    {
      if (!*(void *)(v13 + 8)) {
        goto LABEL_33;
      }
    }
    else if (!*(unsigned char *)(v13 + 23))
    {
      goto LABEL_33;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v126, (uint64_t)"  ", 2);
    uint64_t v14 = (*(uint64_t (**)(unsigned char *, void))(*(void *)a1 + 472))(a1, 0);
    int v15 = *(char *)(v14 + 23);
    if (v15 >= 0) {
      uint64_t v16 = v14;
    }
    else {
      uint64_t v16 = *(void *)v14;
    }
    if (v15 >= 0) {
      uint64_t v17 = *(unsigned __int8 *)(v14 + 23);
    }
    else {
      uint64_t v17 = *(void *)(v14 + 8);
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v126, v16, v17);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v126, (uint64_t)" (", 2);
    if ((*(uint64_t (**)(unsigned char *, void))(*(void *)a1 + 480))(a1, 0))
    {
      uint64_t v18 = (*(uint64_t (**)(unsigned char *, void))(*(void *)a1 + 480))(a1, 0);
      uint64_t v138 = *(void *)(v18 + 24);
      if (*(char *)(v18 + 23) < 0)
      {
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)__p, *(void **)v18, *(void *)(v18 + 8));
      }
      else
      {
        long long v19 = *(_OWORD *)v18;
        int64_t v137 = *(void *)(v18 + 16);
        *(_OWORD *)std::string __p = v19;
      }
    }
    else
    {
      {
        operator new();
      }
      uint64_t v138 = mdm::Allocator::instance(void)::alloc;
      HIBYTE(v137) = 0;
      LOBYTE(__p[0]) = 0;
    }
    if (v137 >= 0) {
      uint64_t v20 = __p;
    }
    else {
      uint64_t v20 = (void **)__p[0];
    }
    if (v137 >= 0) {
      uint64_t v21 = HIBYTE(v137);
    }
    else {
      uint64_t v21 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v126, (uint64_t)v20, v21);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v126, (uint64_t)")\n", 2);
    if (SHIBYTE(v137) < 0) {
      (*(void (**)(uint64_t, void *, int64_t))(*(void *)v138 + 40))(v138, __p[0], v137 & 0x7FFFFFFFFFFFFFFFLL);
    }
  }
LABEL_33:
  if ((*(uint64_t (**)(unsigned char *))(*(void *)a1 + 160))(a1))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v126, (uint64_t)"  FeatureID=", 12);
    (*(void (**)(unsigned char *))(*(void *)a1 + 160))(a1);
    uint64_t v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)"\n", 1);
  }
  if ((*(uint64_t (**)(unsigned char *))(*(void *)a1 + 168))(a1))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v126, (uint64_t)"  ClientFeatureID=", 18);
    (*(void (**)(unsigned char *))(*(void *)a1 + 168))(a1);
    uint64_t v23 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)"\n", 1);
  }
  if ((*(uint64_t (**)(unsigned char *))(*(void *)a1 + 176))(a1))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v126, (uint64_t)"  BusinessID=", 13);
    (*(void (**)(unsigned char *))(*(void *)a1 + 176))(a1);
    uint64_t v24 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n", 1);
  }
  if ((*(float (**)(unsigned char *))(*(void *)a1 + 240))(a1) < 252.0
    || (*(float (**)(unsigned char *))(*(void *)a1 + 248))(a1) < 252.0)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v126, (uint64_t)"  FeatureZoom: Min=", 19);
    uint64_t v25 = v126[0];
    *(_DWORD *)((char *)&v126[1] + *(void *)(v126[0] - 24)) = *(_DWORD *)((unsigned char *)&v126[1]
                                                                            + *(void *)(v126[0] - 24)) & 0xFFFFFEFB | 4;
    *(void *)((char *)&v126[2] + *(void *)(v25 - 24)) = 2;
    (*(void (**)(unsigned char *))(*(void *)a1 + 240))(a1);
    uint64_t v26 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)" Max=", 5);
    (*(void (**)(unsigned char *))(*(void *)a1 + 248))(a1);
    uint64_t v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)"\n", 1);
  }
  if ((*(uint64_t (**)(unsigned char *))(*(void *)a1 + 64))(a1))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v126, (uint64_t)"  External: hasAnnotation=", 26);
    (*(void (**)(unsigned char *))(*(void *)a1 + 216))(a1);
    uint64_t v28 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)"\n", 1);
  }
  if (!v11) {
    goto LABEL_92;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v126, (uint64_t)"  Style:", 8);
  md::LabelStyle::styleName((uint64_t)__p, (uint64_t *)v11);
  if (v137 >= 0) {
    uint64_t v29 = __p;
  }
  else {
    uint64_t v29 = (void **)__p[0];
  }
  if (v137 >= 0) {
    uint64_t v30 = HIBYTE(v137);
  }
  else {
    uint64_t v30 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v126, (uint64_t)v29, v30);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v126, (uint64_t)"\n", 1);
  if (SHIBYTE(v137) < 0)
  {
    (*(void (**)(uint64_t, void *, int64_t))(*(void *)v138 + 40))(v138, __p[0], v137 & 0x7FFFFFFFFFFFFFFFLL);
    if (a4) {
      goto LABEL_56;
    }
  }
  else if (a4)
  {
    goto LABEL_56;
  }
  if (!*(unsigned char *)(a2 + 3642)) {
    goto LABEL_88;
  }
LABEL_56:
  uint64_t v31 = *(void *)v11;
  uint64_t v32 = *(std::__shared_weak_count **)(v11 + 8);
  v135[0] = *(void *)v11;
  v135[1] = v32;
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  gss::QueryableLocker<gss::PropertyID>::QueryableLocker((uint64_t *)__p, v31, (uint64_t)v32);
  if (!v32 || atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (v139) {
      goto LABEL_61;
    }
LABEL_87:
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)__p);
    goto LABEL_88;
  }
  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
  std::__shared_weak_count::__release_weak(v32);
  if (!v139) {
    goto LABEL_87;
  }
LABEL_61:
  uint64_t v33 = *((void *)__p[0] + 3);
  uint64_t v35 = *(void *)(v33 + 16);
  float v34 = *(std::__shared_weak_count **)(v33 + 24);
  if (v34)
  {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v35) {
      unint64_t v36 = (uint64_t *)(v35 + 56);
    }
    else {
      unint64_t v36 = 0;
    }
    if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)__p);
    if (!v35) {
      goto LABEL_88;
    }
    uint64_t v37 = *((unsigned __int16 *)v36 + 4);
    if (!*((_WORD *)v36 + 4)) {
      goto LABEL_88;
    }
    goto LABEL_74;
  }
  if (!v35) {
    goto LABEL_87;
  }
  unint64_t v36 = (uint64_t *)(v35 + 56);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)__p);
  uint64_t v37 = *(unsigned __int16 *)(v35 + 64);
  if (*(_WORD *)(v35 + 64))
  {
LABEL_74:
    uint64_t v38 = *v36;
    uint64_t v39 = 16 * v37;
    do
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v126, (uint64_t)"      (", 7);
      if (*(void *)v38)
      {
        (*(void (**)(void **__return_ptr))(**(void **)v38 + 16))(__p);
        unsigned int v40 = (void *)HIBYTE(v137);
      }
      else
      {
        unsigned int v40 = 0;
        HIBYTE(v137) = 0;
        LOBYTE(__p[0]) = 0;
      }
      if ((char)v40 >= 0) {
        unint64_t v41 = __p;
      }
      else {
        unint64_t v41 = (void **)__p[0];
      }
      if ((char)v40 >= 0) {
        double v42 = v40;
      }
      else {
        double v42 = __p[1];
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v126, (uint64_t)v41, (uint64_t)v42);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v126, (uint64_t)")\n", 2);
      if (SHIBYTE(v137) < 0) {
        operator delete(__p[0]);
      }
      v38 += 16;
      v39 -= 16;
    }
    while (v39);
  }
LABEL_88:
  if (!*(void *)v11) {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v126, (uint64_t)"      Default\n", 14);
  }
  if (a1[138]) {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v126, (uint64_t)"      Dedupable\n", 16);
  }
LABEL_92:
  id v113 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  unint64_t v43 = v116;
  (*(void (**)(unsigned char *))(*(void *)a1 + 616))(a1);
  if (![v113 count])
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v126, (uint64_t)"  No attrs\n", 11);
    goto LABEL_206;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v126, (uint64_t)"  Attrs:\n", 9);
  long long v124 = 0u;
  long long v125 = 0u;
  long long v122 = 0u;
  long long v123 = 0u;
  unint64_t v44 = [v113 allObjects];
  obuint64_t j = [v44 sortedArrayUsingSelector:sel_caseInsensitiveCompare_];

  uint64_t v45 = [obj countByEnumeratingWithState:&v122 objects:v140 count:16];
  if (!v45) {
    goto LABEL_204;
  }
  uint64_t v115 = *(void *)v123;
  do
  {
    uint64_t v46 = 0;
    uint64_t v117 = v45;
    do
    {
      if (*(void *)v123 != v115) {
        objc_enumerationMutation(obj);
      }
      uint64_t v118 = v46;
      double v119 = (const char *)[*(id *)(*((void *)&v122 + 1) + 8 * v46) UTF8String];
      size_t v121 = strlen(v119);
      size_t v47 = 0;
      do
      {
        if (v121 <= v47 + 60)
        {
          uint64_t v49 = -1;
        }
        else
        {
          uint64_t v48 = memchr((void *)&v119[v47 + 60], 44, v121 - (v47 + 60));
          if (v48) {
            uint64_t v49 = v48 - v119;
          }
          else {
            uint64_t v49 = -1;
          }
        }
        uint64_t v120 = v49;
        if (v49 == -1) {
          unint64_t v50 = -1;
        }
        else {
          unint64_t v50 = v49 - v47 + 1;
        }
        MEMORY[0x1A6238CF0](v135, v126);
        if (LOBYTE(v135[0]))
        {
          uint64_t v51 = (char *)v126 + *(void *)(v126[0] - 24);
          uint64_t v52 = *((void *)v51 + 5);
          int v53 = *((_DWORD *)v51 + 2);
          int v54 = *((_DWORD *)v51 + 36);
          if (v54 == -1)
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v126 + *(void *)(v126[0] - 24)));
            unint64_t v55 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
            int v54 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 32);
            std::locale::~locale((std::locale *)__p);
            *((_DWORD *)v51 + 36) = v54;
          }
          if ((v53 & 0xB0) == 0x20) {
            uint64_t v56 = "";
          }
          else {
            uint64_t v56 = "    ";
          }
          if (!v52) {
            goto LABEL_139;
          }
          uint64_t v57 = *((void *)v51 + 3);
          BOOL v58 = v57 <= 4;
          uint64_t v59 = v57 - 4;
          size_t v60 = v58 ? 0 : v59;
          if (v56 - "    " >= 1
            && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(void *)v52 + 96))(v52, "    ", v56 - "    ") != v56 - "    ")
          {
            goto LABEL_139;
          }
          if ((uint64_t)v60 >= 1)
          {
            if (v60 > 0x7FFFFFFFFFFFFFF7) {
              abort();
            }
            if (v60 >= 0x17)
            {
              uint64_t v62 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v60 | 7) != 0x17) {
                uint64_t v62 = v60 | 7;
              }
              uint64_t v63 = v62 + 1;
              BOOL v61 = operator new(v62 + 1);
              __p[1] = (void *)v60;
              int64_t v137 = v63 | 0x8000000000000000;
              __p[0] = v61;
            }
            else
            {
              HIBYTE(v137) = v60;
              BOOL v61 = __p;
            }
            memset(v61, v54, v60);
            *((unsigned char *)v61 + v60) = 0;
            if (v137 >= 0) {
              size_t v64 = __p;
            }
            else {
              size_t v64 = (void **)__p[0];
            }
            uint64_t v65 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(void *)v52 + 96))(v52, v64, v60);
            uint64_t v66 = v65;
            if (SHIBYTE(v137) < 0)
            {
              operator delete(__p[0]);
              if (v66 != v60)
              {
LABEL_139:
                std::ios_base::clear((std::ios_base *)((char *)v126 + *(void *)(v126[0] - 24)), *(_DWORD *)((char *)&v127[1] + *(void *)(v126[0] - 24)) | 5);
                goto LABEL_140;
              }
            }
            else if (v65 != v60)
            {
              goto LABEL_139;
            }
          }
          uint64_t v67 = "    " - v56 + 4;
          if (v67 < 1
            || (*(uint64_t (**)(uint64_t, char *, int64_t))(*(void *)v52 + 96))(v52, v56, "    " - v56 + 4) == v67)
          {
            *((void *)v51 + 3) = 0;
            goto LABEL_140;
          }
          goto LABEL_139;
        }
LABEL_140:
        MEMORY[0x1A6238D00](v135);
        if (v121 < v47) {
          abort();
        }
        if (v121 - v47 >= v50) {
          int64_t v68 = v50;
        }
        else {
          int64_t v68 = v121 - v47;
        }
        MEMORY[0x1A6238CF0](v135, v126);
        if (LOBYTE(v135[0]))
        {
          std::string::size_type v69 = (char *)v126 + *(void *)(v126[0] - 24);
          uint64_t v70 = *((void *)v69 + 5);
          int v71 = *((_DWORD *)v69 + 2);
          int v72 = *((_DWORD *)v69 + 36);
          if (v72 == -1)
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v126 + *(void *)(v126[0] - 24)));
            double v73 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
            int v72 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v73->__vftable[2].~facet_0)(v73, 32);
            std::locale::~locale((std::locale *)__p);
            *((_DWORD *)v69 + 36) = v72;
          }
          uint64_t v74 = &v119[v47];
          char v75 = &v119[v47 + v68];
          if ((v71 & 0xB0) == 0x20) {
            uint64_t v76 = &v119[v47 + v68];
          }
          else {
            uint64_t v76 = &v119[v47];
          }
          if (!v70) {
            goto LABEL_173;
          }
          int64_t v77 = *((void *)v69 + 3);
          BOOL v58 = v77 <= v68;
          int64_t v78 = v77 - v68;
          size_t v79 = v58 ? 0 : v78;
          if (v76 - v74 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)v70 + 96))(v70) != v76 - v74) {
            goto LABEL_173;
          }
          if ((uint64_t)v79 >= 1)
          {
            if (v79 > 0x7FFFFFFFFFFFFFF7) {
              abort();
            }
            if (v79 >= 0x17)
            {
              uint64_t v81 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v79 | 7) != 0x17) {
                uint64_t v81 = v79 | 7;
              }
              uint64_t v82 = v81 + 1;
              uint64_t v80 = operator new(v81 + 1);
              __p[1] = (void *)v79;
              int64_t v137 = v82 | 0x8000000000000000;
              __p[0] = v80;
            }
            else
            {
              HIBYTE(v137) = v79;
              uint64_t v80 = __p;
            }
            memset(v80, v72, v79);
            *((unsigned char *)v80 + v79) = 0;
            if (v137 >= 0) {
              uint64_t v83 = __p;
            }
            else {
              uint64_t v83 = (void **)__p[0];
            }
            uint64_t v84 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(void *)v70 + 96))(v70, v83, v79);
            uint64_t v85 = v84;
            if (SHIBYTE(v137) < 0)
            {
              operator delete(__p[0]);
              if (v85 != v79)
              {
LABEL_173:
                std::ios_base::clear((std::ios_base *)((char *)v126 + *(void *)(v126[0] - 24)), *(_DWORD *)((char *)&v127[1] + *(void *)(v126[0] - 24)) | 5);
                goto LABEL_174;
              }
            }
            else if (v84 != v79)
            {
              goto LABEL_173;
            }
          }
          if (v75 - v76 < 1
            || (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(void *)v70 + 96))(v70, v76, v75 - v76) == v75 - v76)
          {
            *((void *)v69 + 3) = 0;
            goto LABEL_174;
          }
          goto LABEL_173;
        }
LABEL_174:
        MEMORY[0x1A6238D00](v135);
        MEMORY[0x1A6238CF0](v135, v126);
        if (LOBYTE(v135[0]))
        {
          char v86 = (char *)v126 + *(void *)(v126[0] - 24);
          uint64_t v87 = *((void *)v86 + 5);
          int v88 = *((_DWORD *)v86 + 2);
          int v89 = *((_DWORD *)v86 + 36);
          if (v89 == -1)
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v126 + *(void *)(v126[0] - 24)));
            uint64_t v90 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
            int v89 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v90->__vftable[2].~facet_0)(v90, 32);
            std::locale::~locale((std::locale *)__p);
            *((_DWORD *)v86 + 36) = v89;
          }
          if ((v88 & 0xB0) == 0x20) {
            unint64_t v91 = "";
          }
          else {
            unint64_t v91 = "\n";
          }
          if (!v87) {
            goto LABEL_100;
          }
          uint64_t v92 = *((void *)v86 + 3);
          BOOL v58 = v92 <= 1;
          uint64_t v93 = v92 - 1;
          size_t v94 = v58 ? 0 : v93;
          if (v91 - "\n" >= 1
            && (*(uint64_t (**)(uint64_t, const char *, int64_t))(*(void *)v87 + 96))(v87, "\n", v91 - "\n") != v91 - "\n")
          {
            goto LABEL_100;
          }
          if ((uint64_t)v94 >= 1)
          {
            if (v94 > 0x7FFFFFFFFFFFFFF7) {
              abort();
            }
            if (v94 >= 0x17)
            {
              uint64_t v96 = (v94 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v94 | 7) != 0x17) {
                uint64_t v96 = v94 | 7;
              }
              uint64_t v97 = v96 + 1;
              int64_t v95 = operator new(v96 + 1);
              __p[1] = (void *)v94;
              int64_t v137 = v97 | 0x8000000000000000;
              __p[0] = v95;
            }
            else
            {
              HIBYTE(v137) = v94;
              int64_t v95 = __p;
            }
            memset(v95, v89, v94);
            *((unsigned char *)v95 + v94) = 0;
            if (v137 >= 0) {
              int v98 = __p;
            }
            else {
              int v98 = (void **)__p[0];
            }
            uint64_t v99 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(void *)v87 + 96))(v87, v98, v94);
            uint64_t v100 = v99;
            if (SHIBYTE(v137) < 0)
            {
              operator delete(__p[0]);
              if (v100 != v94) {
                goto LABEL_100;
              }
            }
            else if (v99 != v94)
            {
              goto LABEL_100;
            }
          }
          uint64_t v101 = "\n" - v91 + 1;
          if (v101 >= 1
            && (*(uint64_t (**)(uint64_t, char *, int64_t))(*(void *)v87 + 96))(v87, v91, "\n" - v91 + 1) != v101)
          {
LABEL_100:
            std::ios_base::clear((std::ios_base *)((char *)v126 + *(void *)(v126[0] - 24)), *(_DWORD *)((char *)&v127[1] + *(void *)(v126[0] - 24)) | 5);
            goto LABEL_101;
          }
          *((void *)v86 + 3) = 0;
        }
LABEL_101:
        MEMORY[0x1A6238D00](v135);
        v47 += v50;
      }
      while (v120 != -1);
      uint64_t v46 = v118 + 1;
      unint64_t v43 = v116;
    }
    while (v118 + 1 != v117);
    uint64_t v45 = [obj countByEnumeratingWithState:&v122 objects:v140 count:16];
  }
  while (v45);
LABEL_204:

LABEL_206:
  if (!v43 || atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_208:
    char v102 = v133;
    if ((v133 & 0x10) == 0) {
      goto LABEL_209;
    }
LABEL_213:
    unint64_t v106 = v132;
    uint64_t v103 = a5;
    if (v132 < v129)
    {
      unint64_t v132 = v129;
      unint64_t v106 = v129;
    }
    uint64_t v105 = (const void **)&v128;
LABEL_216:
    double v107 = *v105;
    size_t v104 = v106 - (void)*v105;
    if (v104 > 0x7FFFFFFFFFFFFFF7) {
      abort();
    }
    if (v104 >= 0x17)
    {
      uint64_t v108 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v104 | 7) != 0x17) {
        uint64_t v108 = v104 | 7;
      }
      uint64_t v109 = v108 + 1;
      uint64_t v110 = operator new(v108 + 1);
      v103[1] = v104;
      v103[2] = v109 | 0x8000000000000000;
      void *v103 = v110;
      uint64_t v103 = v110;
    }
    else
    {
      *((unsigned char *)v103 + 23) = v104;
      if (!v104) {
        goto LABEL_224;
      }
    }
    memmove(v103, v107, v104);
    goto LABEL_224;
  }
  ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
  std::__shared_weak_count::__release_weak(v43);
  char v102 = v133;
  if ((v133 & 0x10) != 0) {
    goto LABEL_213;
  }
LABEL_209:
  uint64_t v103 = a5;
  if ((v102 & 8) != 0)
  {
    uint64_t v105 = (const void **)v127;
    unint64_t v106 = v127[2];
    goto LABEL_216;
  }
  size_t v104 = 0;
  a5[23] = 0;
LABEL_224:
  *((unsigned char *)v103 + v104) = 0;
  v126[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v126 + *(void *)(v126[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v126[1] = MEMORY[0x1E4FBA470] + 16;
  if (v131 < 0) {
    operator delete(v130);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v134);
}

void sub_1A26B6100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  if (a13 && !atomic_fetch_add(&a13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
    std::__shared_weak_count::__release_weak(a13);
  }
  a28 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a28 + *(void *)(a28 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a29 = MEMORY[0x1E4FBA470] + 16;
  if (a42 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A62391A0](&a45);
  _Unwind_Resume(a1);
}

void md::LabelFeature::populateFeatureInfo(md::LabelFeature *this, md::LabelFeatureInfo *a2)
{
  uint64_t v2 = (char *)a2 + 16;
  if (!*((void *)a2 + 2))
  {
    uint64_t v4 = (std::mutex *)((char *)this + 8);
    std::mutex::lock((std::mutex *)((char *)this + 8));
    uint64_t v5 = *((void *)this + 19);
    if (v5) {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 16))(v5, v2);
    }
    std::mutex::unlock(v4);
  }
}

void sub_1A26B6418(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void md::LabelFeature::tileAnnotationText(unsigned char *a1, geo::codec::VectorTile **a2, unsigned int a3, unsigned int a4, int a5, unsigned int a6)
{
  uint64_t v12 = geo::codec::VectorTile::annotations(*a2);
  if (!a4) {
    goto LABEL_15;
  }
  uint64_t v13 = 0;
  uint64_t v14 = (unsigned int *)(v12 + 16 * a3);
  uint64_t v15 = a4;
  do
  {
    if (v14[1] == a5) {
      uint64_t v13 = v14;
    }
    v14 += 4;
    --v15;
  }
  while (v15);
  if (!v13
    || ((uint64_t v16 = *v13,
         v62.__r_.__value_.__r.__words[0] = 0,
         int64_t v68 = 0,
         geo::codec::tileGetLocalizedLabel((void **)a2, v16, (unint64_t *)&v62, (unint64_t *)&v68),
         (uint64_t v17 = (const char *)v62.__r_.__value_.__r.__words[0]) == 0)
     || !*v62.__r_.__value_.__l.__data_)
    && ((geo::codec::tileGetNativeLabel((uint64_t)a2, v16, &v62, &v68),
         (uint64_t v17 = (const char *)v62.__r_.__value_.__r.__words[0]) == 0)
     || !*v62.__r_.__value_.__l.__data_))
  {
LABEL_15:
    *a1 = 0;
    a1[64] = 0;
    return;
  }
  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp((uint64_t)&__src, v17, v68);
  char v81 = 1;
  if (SHIBYTE(v76) < 0)
  {
    size_t v18 = v75;
    if (v75 > 0x7FFFFFFFFFFFFFF7) {
      abort();
    }
    p_src = __src;
    if (v75 < 0x17)
    {
LABEL_13:
      HIBYTE(v73) = v18;
      uint64_t v20 = __dst;
      if (!v18) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
  }
  else
  {
    size_t v18 = HIBYTE(v76);
    p_src = &__src;
    if (HIBYTE(v76) < 0x17uLL) {
      goto LABEL_13;
    }
  }
  uint64_t v21 = (v18 & 0x7FFFFFFFFFFFFFF8) + 8;
  if ((v18 | 7) != 0x17) {
    uint64_t v21 = v18 | 7;
  }
  uint64_t v22 = v21 + 1;
  uint64_t v20 = (void **)operator new(v21 + 1);
  __dst[1] = (void *)v18;
  int64_t v73 = v22 | 0x8000000000000000;
  __dst[0] = v20;
LABEL_22:
  memmove(v20, p_src, v18);
LABEL_23:
  *((unsigned char *)v20 + v18) = 0;
  if (*((unsigned char *)v13 + 12))
  {
    size_t v60 = a1;
    uint64_t v23 = geo::codec::VectorTile::annotationValues(*a2);
    uint64_t v24 = v13[2];
    md::LabelValueFormatter::LabelValueFormatter((md::LabelValueFormatter *)&v68);
    if (*((unsigned char *)v13 + 12))
    {
      uint64_t v25 = a6 == 3;
      if (a6 == 4) {
        uint64_t v25 = 2;
      }
      uint64_t v61 = v25;
      uint64_t v26 = (double *)(v23 + 16 * v24 + 8);
      uint64_t v27 = (std::locale::id *)MEMORY[0x1E4FBA258];
      uint64_t v28 = (std::locale::id *)MEMORY[0x1E4FBA280];
      memset(&__p[32], 0, 24);
      switch(*((unsigned char *)v26 - 8))
      {
        case 0:
          double v29 = *v26;
          id v30 = objc_alloc_init(MEMORY[0x1E4F28EE0]);
          [v30 setGeneratesDecimalNumbers:1];
          [v30 setMaximumFractionDigits:v61];
          uint64_t v31 = [NSNumber numberWithDouble:v29];
          uint64_t v32 = [v30 stringFromNumber:v31];

          if (v32) {
            uint64_t v33 = (const char *)[v32 UTF8String];
          }
          else {
            uint64_t v33 = "";
          }
          size_t v49 = strlen(v33);
          if (v49 > 0x7FFFFFFFFFFFFFF7) {
            abort();
          }
          std::string::size_type v50 = v49;
          if (v49 >= 0x17)
          {
            uint64_t v52 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v49 | 7) != 0x17) {
              uint64_t v52 = v49 | 7;
            }
            uint64_t v53 = v52 + 1;
            uint64_t v51 = operator new(v52 + 1);
            v62.__r_.__value_.__l.__size_ = v50;
            v62.__r_.__value_.__r.__words[2] = v53 | 0x8000000000000000;
            v62.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
          }
          else
          {
            *((unsigned char *)&v62.__r_.__value_.__s + 23) = v49;
            uint64_t v51 = &v62;
            if (!v49)
            {
LABEL_62:
              v51[v50] = 0;

              if ((__p[55] & 0x80000000) != 0) {
                operator delete(*(void **)&__p[32]);
              }
              *(std::string *)&__p[32] = v62;
LABEL_65:
              uint64_t v27 = (std::locale::id *)MEMORY[0x1E4FBA258];
              uint64_t v28 = (std::locale::id *)MEMORY[0x1E4FBA280];
LABEL_66:
              std::to_string(&v66, 0);
              int v54 = std::string::insert(&v66, 0, "\\{", 2uLL);
              long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
              v62.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v55;
              v54->__r_.__value_.__l.__size_ = 0;
              v54->__r_.__value_.__r.__words[2] = 0;
              v54->__r_.__value_.__r.__words[0] = 0;
              uint64_t v56 = std::string::append(&v62, "\\}", 2uLL);
              std::string::size_type v57 = v56->__r_.__value_.__r.__words[2];
              *(_OWORD *)std::string __p = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
              *(void *)&__p[16] = v57;
              v56->__r_.__value_.__l.__size_ = 0;
              v56->__r_.__value_.__r.__words[2] = 0;
              v56->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v62.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_68;
                }
              }
              else if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                goto LABEL_68;
              }
              operator delete(v66.__r_.__value_.__l.__data_);
LABEL_68:
              MEMORY[0x1A6239040](&v62);
              v62.__r_.__value_.__l.__size_ = (std::string::size_type)std::locale::use_facet((const std::locale *)&v62, v27);
              v62.__r_.__value_.__r.__words[2] = (std::string::size_type)std::locale::use_facet((const std::locale *)&v62, v28);
              long long v63 = 0u;
              long long v64 = 0u;
              uint64_t v65 = 0;
              std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>();
            }
          }
          memmove(v51, v33, v50);
          goto LABEL_62;
        case 1:
          double v41 = *v26;
          *(_OWORD *)&v66.__r_.__value_.__l.__data_ = xmmword_1A28FF7F0;
          id v42 = objc_alloc(MEMORY[0x1E4F28E28]);
          unint64_t v43 = [MEMORY[0x1E4F291E0] kilometers];
          std::string::size_type v44 = [v42 initWithDoubleValue:v43 unit:v41 * 0.001];
          v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EF559538;
          v62.__r_.__value_.__l.__size_ = v44;

          LODWORD(v43) = v68;
          id v45 = (id)v62.__r_.__value_.__l.__size_;
          if (!v43)
          {
            uint64_t v46 = [MEMORY[0x1E4F291E0] miles];
            uint64_t v47 = [v45 measurementByConvertingToUnit:v46];

            id v45 = (id)v47;
          }
          LODWORD(v66.__r_.__value_.__r.__words[1]) = 1;
          objc_msgSend(v45, "doubleValue", v60);
          if (v48 >= 0.1) {
            md::LabelValueFormatter::FormatMeasurement(__p, (uint64_t)&v68, v45, a6, 1, (int *)&v66);
          }
          else {
            memset(__p, 0, 24);
          }

          v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EF559538;
          if ((__p[55] & 0x80000000) != 0) {
            operator delete(*(void **)&__p[32]);
          }
          *(std::string *)&__p[32] = *(std::string *)__p;
          goto LABEL_65;
        case 2:
          md::LabelValueFormatter::formatElevation(&v62, (unsigned __int8 *)&v68, a6, 0x100000000, 0x100000000, *v26);
          goto LABEL_45;
        case 3:
          double v34 = *v26;
          *(_OWORD *)&v66.__r_.__value_.__l.__data_ = xmmword_1A28FF7F0;
          id v35 = objc_alloc(MEMORY[0x1E4F28E28]);
          unint64_t v36 = [MEMORY[0x1E4F29218] celsius];
          std::string::size_type v37 = [v35 initWithDoubleValue:v36 unit:v34];
          v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EF559538;
          v62.__r_.__value_.__l.__size_ = v37;

          md::LabelValueFormatter::FormatMeasurement(__p, (uint64_t)&v68, (void *)v62.__r_.__value_.__l.__size_, a6, 0, (int *)&v66);
          v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EF559538;

          if ((__p[55] & 0x80000000) != 0) {
            operator delete(*(void **)&__p[32]);
          }
          *(_OWORD *)&__p[32] = *(_OWORD *)__p;
          std::string::size_type v38 = *(void *)&__p[16];
          goto LABEL_48;
        case 4:
          md::LabelValueFormatter::formatDateTime(&v62, (uint64_t)&v68, 1u, a6, *v26);
          goto LABEL_45;
        case 5:
          md::LabelValueFormatter::formatDateTime(&v62, (uint64_t)&v68, a6, 1u, *v26);
          goto LABEL_45;
        case 6:
          md::LabelValueFormatter::formatDateTime(&v62, (uint64_t)&v68, a6, a6, *v26);
          goto LABEL_45;
        case 7:
          double v39 = *v26;
          if (fabs(remainder(*v26, 0.1)) <= 0.005) {
            uint64_t v40 = 0x100000001;
          }
          else {
            uint64_t v40 = 0x100000002;
          }
          md::LabelValueFormatter::formatElevation(&v62, (unsigned __int8 *)&v68, a6, 0x100000001, v40, v39);
LABEL_45:
          if ((__p[55] & 0x80000000) != 0) {
            operator delete(*(void **)&__p[32]);
          }
          *(_OWORD *)&__p[32] = *(_OWORD *)&v62.__r_.__value_.__l.__data_;
          std::string::size_type v38 = v62.__r_.__value_.__r.__words[2];
LABEL_48:
          *(void *)&__p[48] = v38;
          goto LABEL_66;
        default:
          *size_t v60 = 0;
          v60[64] = 0;

          std::string::size_type v69 = &unk_1EF559EF8;
          if (SHIBYTE(v73) < 0) {
            goto LABEL_80;
          }
          goto LABEL_81;
      }
    }

    std::string::size_type v69 = &unk_1EF559EF8;
    a1 = v60;
  }
  if (v81)
  {
    if (v73 >= 0) {
      BOOL v58 = (const char *)__dst;
    }
    else {
      BOOL v58 = (const char *)__dst[0];
    }
    if (v79 >= 0) {
      uint64_t v59 = (const char *)&v78;
    }
    else {
      uint64_t v59 = v78;
    }
    md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp((uint64_t)a1, v58, v59);
    a1[64] = 1;
    if (SHIBYTE(v73) < 0) {
LABEL_80:
    }
      operator delete(__dst[0]);
LABEL_81:
    if (v81)
    {
      if (SHIBYTE(v79) < 0) {
        (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)v80 + 40))(v80, v78, v79 & 0x7FFFFFFFFFFFFFFFLL);
      }
      if (SHIBYTE(v76) < 0) {
        (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v77 + 40))(v77, __src, v76 & 0x7FFFFFFFFFFFFFFFLL);
      }
    }
  }
  else
  {
    std::__throw_bad_optional_access[abi:nn180100]();
    __break(1u);
  }
}

void sub_1A26B6E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,id a43)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  md::LabelValueFormatter::~LabelValueFormatter(&a43);
  if (*(char *)(v45 - 201) < 0) {
    operator delete(*(void **)(v45 - 224));
  }
  std::optional<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>>::~optional(v45 - 192);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale && !atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
  }
  std::locale::~locale(this);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  long long v161 = 0u;
  long long v162 = 0u;
  long long v160 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    *(_DWORD *)long long v157 = 0;
    memset(&v157[8], 0, 48);
    *(_OWORD *)std::string __p = 0uLL;
    memset(v159, 0, 21);
    std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v160);
    unint64_t v11 = *(void *)(*((void *)&v160 + 1) + 8 * ((*((void *)&v162 + 1) + (void)v162) / 0x2AuLL))
        + 96 * ((*((void *)&v162 + 1) + (void)v162) % 0x2AuLL);
    long long v12 = *(_OWORD *)&v157[16];
    *(_OWORD *)unint64_t v11 = *(_OWORD *)v157;
    *(_OWORD *)(v11 + 16) = v12;
    *(void *)(v11 + 40) = 0;
    *(void *)(v11 + 48) = 0;
    *(void *)(v11 + 32) = 0;
    memset(&v157[32], 0, 24);
    *(void *)(v11 + 56) = 0;
    *(void *)(v11 + 64) = 0;
    *(void *)(v11 + 72) = 0;
    __p[0] = 0;
    __p[1] = 0;
    v159[0] = 0;
    uint64_t v13 = v159[1];
    *(void *)(v11 + 85) = *(void *)((char *)&v159[1] + 5);
    *(void *)(v11 + 80) = v13;
    uint64_t v15 = *((void *)&v162 + 1);
    uint64_t v14 = v162;
    uint64_t v16 = ++*((void *)&v162 + 1);
    uint64_t v17 = *((void *)&v160 + 1);
    unint64_t v18 = *(unsigned int *)(a1 + 32);
    unint64_t v19 = v15 + v162;
    unint64_t v20 = 8 * (v19 / 0x2A);
    unint64_t v21 = 96 * (v19 % 0x2A);
    unint64_t v22 = *(void *)(*((void *)&v160 + 1) + v20) + v21;
    *(_DWORD *)unint64_t v22 = 0;
    *(void *)(v22 + 8) = a2;
    *(void *)(*(void *)(v17 + v20) + v21 + 16) = a2;
    *(void *)(*(void *)(v17 + v20) + v21 + 24) = a3;
    unint64_t v23 = *(void *)(v17 + v20) + v21;
    uint64_t v26 = *(void *)(v23 + 56);
    uint64_t v24 = (std::vector<std::pair<unsigned long, const char *>> *)(v23 + 56);
    uint64_t v25 = v26;
    unint64_t v27 = ((uint64_t)v24->__end_ - v26) >> 4;
    double v148 = a4;
    if (v18 <= v27)
    {
      if (v18 < v27) {
        v24->__end_ = (std::vector<std::pair<unsigned long, const char *>>::pointer)(v25 + 16 * v18);
      }
    }
    else
    {
      std::vector<geo::Mercator2<double>>::__append(v24, v18 - v27);
      uint64_t v16 = *((void *)&v162 + 1);
      uint64_t v14 = v162;
      uint64_t v17 = *((void *)&v160 + 1);
    }
    char v151 = 0;
    unsigned int v28 = 0;
    uint64_t v150 = 0;
    uint64_t v149 = a3;
    uint64_t v156 = a3 - a2;
    unint64_t v29 = v16 + v14 - 1;
    unint64_t v30 = 8 * (v29 / 0x2A);
    unint64_t v31 = 96 * (v29 % 0x2A);
    *(void *)(*(void *)(v17 + v30) + v31 + 80) = v6;
    unint64_t v32 = *(void *)(v17 + v30) + v31;
    *(_DWORD *)(v32 + 88) = a5;
    *(unsigned char *)(v32 + 92) = a6;
    while (1)
    {
      if ((++v28 & 0xFFF) == 0 && (int)(v28 >> 12) >= (int)v156)
      {
LABEL_13:
        std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
        __break(1u);
        goto LABEL_158;
      }
      unint64_t v34 = v16 + v162 - 1;
      uint64_t v35 = *(void *)(*((void *)&v160 + 1) + 8 * (v34 / 0x2A));
      unint64_t v36 = v34 % 0x2A;
      uint64_t v37 = v35 + 96 * (v34 % 0x2A);
      double v39 = (void *)(v37 + 80);
      uint64_t v38 = *(void *)(v37 + 80);
      if (v38) {
        (*(void (**)(uint64_t, unint64_t))(*(void *)v38 + 16))(v38, v35 + 96 * v36);
      }
      switch(*(_DWORD *)v37)
      {
        case 0xFFFFFC18:
          uint64_t v40 = *(void *)(v35 + 96 * v36 + 16);
          if ((a5 & 0x20) != 0 && v40 == a2)
          {
            unint64_t v41 = *((void *)&v162 + 1) + v162 - 1;
            uint64_t v42 = *(void *)(*((void *)&v160 + 1) + 8 * (v41 / 0x2A));
            unint64_t v43 = v41 % 0x2A;
            std::string::size_type v44 = *(void **)(v42 + 96 * (v41 % 0x2A) + 56);
            if (v44)
            {
              *(void *)(v42 + 96 * v43 + 64) = v44;
              operator delete(v44);
            }
            uint64_t v45 = *(void **)(v42 + 96 * v43 + 32);
            if (!v45) {
              goto LABEL_28;
            }
LABEL_27:
            *(void *)(v42 + 96 * v43 + 40) = v45;
            operator delete(v45);
            goto LABEL_28;
          }
          if ((a5 & 0x1000) != 0 && v40 != v149)
          {
            unint64_t v62 = *((void *)&v162 + 1) + v162 - 1;
            uint64_t v42 = *(void *)(*((void *)&v160 + 1) + 8 * (v62 / 0x2A));
            unint64_t v43 = v62 % 0x2A;
LABEL_24:
            uint64_t v47 = *(void **)(v42 + 96 * v43 + 56);
            if (v47) {
              goto LABEL_25;
            }
            goto LABEL_26;
          }
          uint64_t v75 = v40 - *(void *)(v35 + 96 * v36 + 8);
          uint64_t v76 = v150;
          if ((v151 & (v150 >= v75)) == 0) {
            uint64_t v76 = v75;
          }
          if (v76 != v156)
          {
            uint64_t v150 = v76;
            unint64_t v85 = *((void *)&v162 + 1) + v162 - 1;
            uint64_t v86 = *(void *)(*((void *)&v160 + 1) + 8 * (v85 / 0x2A));
            unint64_t v87 = v85 % 0x2A;
            int v88 = *(void **)(v86 + 96 * (v85 % 0x2A) + 56);
            if (v88)
            {
              *(void *)(v86 + 96 * v87 + 64) = v88;
              operator delete(v88);
            }
            int v89 = *(void **)(v86 + 96 * v87 + 32);
            if (v89)
            {
              *(void *)(v86 + 96 * v87 + 40) = v89;
              operator delete(v89);
            }
            uint64_t v90 = 42 * ((uint64_t)(v161 - *((void *)&v160 + 1)) >> 3) - 1;
            long long v91 = v162;
            --*((void *)&v162 + 1);
            if ((void)v161 == *((void *)&v160 + 1)) {
              uint64_t v90 = 0;
            }
            if ((unint64_t)(v90 - (*((void *)&v91 + 1) + v91) + 1) >= 0x54)
            {
              operator delete(*(void **)(v161 - 8));
              *(void *)&long long v161 = v161 - 8;
            }
            char v151 = 1;
            goto LABEL_8;
          }
          uint64_t v77 = (void **)*((void *)&v160 + 1);
          uint64_t v78 = v161;
          if ((void)v161 == *((void *)&v160 + 1))
          {
            uint64_t v78 = *((void *)&v160 + 1);
          }
          else
          {
            uint64_t v79 = (void *)(*((void *)&v160 + 1) + 8 * ((unint64_t)v162 / 0x2A));
            uint64_t v80 = (void *)(*v79 + 96 * ((unint64_t)v162 % 0x2A));
            unint64_t v81 = *(void *)(*((void *)&v160 + 1) + 8 * ((*((void *)&v162 + 1) + (void)v162) / 0x2AuLL))
                + 96 * ((*((void *)&v162 + 1) + (void)v162) % 0x2AuLL);
            if (v80 != (void *)v81)
            {
              do
              {
                uint64_t v82 = (void *)v80[7];
                if (v82)
                {
                  v80[8] = v82;
                  operator delete(v82);
                }
                uint64_t v83 = (void *)v80[4];
                if (v83)
                {
                  v80[5] = v83;
                  operator delete(v83);
                }
                v80 += 12;
                if ((void *)((char *)v80 - *v79) == (void *)4032)
                {
                  uint64_t v84 = (void *)v79[1];
                  ++v79;
                  uint64_t v80 = v84;
                }
              }
              while (v80 != (void *)v81);
              uint64_t v77 = (void **)*((void *)&v160 + 1);
              uint64_t v78 = v161;
            }
          }
          *((void *)&v162 + 1) = 0;
          unint64_t v97 = v78 - (void)v77;
          if (v97 >= 0x11)
          {
            do
            {
              operator delete(*v77);
              uint64_t v77 = (void **)(*((void *)&v160 + 1) + 8);
              *((void *)&v160 + 1) = v77;
              unint64_t v97 = v161 - (void)v77;
            }
            while ((void)v161 - (void)v77 > 0x10uLL);
          }
          if (v97 >> 3 == 1)
          {
            uint64_t v98 = 21;
          }
          else
          {
            if (v97 >> 3 != 2)
            {
LABEL_94:
              char v151 = 1;
              uint64_t v150 = v156;
              goto LABEL_8;
            }
            uint64_t v98 = 42;
          }
          *(void *)&long long v162 = v98;
          goto LABEL_94;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_8;
        case 0xFFFFFC1D:
          unint64_t v57 = v162;
          BOOL v58 = (uint64_t *)*((void *)&v160 + 1);
          uint64_t v59 = (uint64_t *)v161;
          if ((void)v162) {
            goto LABEL_106;
          }
          unint64_t v60 = (uint64_t)(v161 - *((void *)&v160 + 1)) >> 3;
          uint64_t v61 = 42 * v60 - 1;
          if ((void)v161 == *((void *)&v160 + 1)) {
            uint64_t v61 = 0;
          }
          if ((unint64_t)(v61 - *((void *)&v162 + 1)) < 0x2A)
          {
            if (v60 >= (uint64_t)(*((void *)&v161 + 1) - v160) >> 3)
            {
              if (*((void *)&v161 + 1) == (void)v160) {
                unint64_t v92 = 1;
              }
              else {
                unint64_t v92 = (uint64_t)(*((void *)&v161 + 1) - v160) >> 2;
              }
              if (v92 >> 61) {
LABEL_158:
              }
                std::__throw_bad_array_new_length[abi:nn180100]();
              uint64_t v93 = (char *)operator new(8 * v92);
              size_t v94 = operator new(0xFC0uLL);
              if (v92)
              {
                int64_t v95 = v93;
                uint64_t v96 = &v93[8 * v92];
              }
              else
              {
                unsigned __int8 v152 = v93;
                uint64_t v100 = (char *)operator new(8uLL);
                uint64_t v96 = v100 + 8;
                operator delete(v152);
                BOOL v58 = (uint64_t *)*((void *)&v160 + 1);
                uint64_t v59 = (uint64_t *)v161;
                int64_t v95 = v100;
              }
              *(void *)int64_t v95 = v94;
              uint64_t v101 = v95 + 8;
              char v153 = v95;
              char v102 = v95;
              if (v58 == v59)
              {
LABEL_101:
                uint64_t v103 = (void *)v160;
                *(void *)&long long v160 = v153;
                *((void *)&v160 + 1) = v102;
                *(void *)&long long v161 = v101;
                *((void *)&v161 + 1) = v96;
                uint64_t v104 = v162 + 42;
                if (v101 - v102 == 8) {
                  uint64_t v104 = 21;
                }
                *(void *)&long long v162 = v104;
                if (v103) {
                  operator delete(v103);
                }
                goto LABEL_105;
              }
              while (2)
              {
                if (v101 != v96)
                {
                  id v113 = v102;
                  uint64_t v114 = v101;
                  uint64_t v101 = v96;
                  goto LABEL_113;
                }
                if (v102 > v153)
                {
                  uint64_t v116 = (v102 - v153) >> 3;
                  if (v116 >= -1) {
                    uint64_t v117 = v116 + 1;
                  }
                  else {
                    uint64_t v117 = v116 + 2;
                  }
                  uint64_t v118 = v117 >> 1;
                  double v119 = &v102[-8 * (v117 >> 1)];
                  uint64_t v120 = v101;
                  int64_t v121 = v101 - v102;
                  if (v101 != v102)
                  {
                    memmove(v119, v102, v101 - v102);
                    int64_t v121 = v101 - v102;
                    uint64_t v120 = v102;
                  }
                  uint64_t v122 = -v118;
                  uint64_t v114 = &v119[v121];
                  id v113 = &v120[8 * v122];
LABEL_113:
                  uint64_t v115 = *v58++;
                  *(void *)uint64_t v114 = v115;
                  char v102 = v113;
                  uint64_t v96 = v101;
                  uint64_t v101 = v114 + 8;
                  if (v58 == (uint64_t *)v161) {
                    goto LABEL_101;
                  }
                  continue;
                }
                break;
              }
              if (v101 == v153) {
                unint64_t v123 = 1;
              }
              else {
                unint64_t v123 = (v101 - v153) >> 2;
              }
              if (v123 >> 61) {
                goto LABEL_158;
              }
              long long v124 = (char *)operator new(8 * v123);
              unint64_t v125 = v123;
              unint64_t v126 = v123 >> 2;
              id v113 = &v124[8 * (v123 >> 2)];
              uint64_t v114 = v113;
              int64_t v127 = v101 - v102;
              if (v101 != v102)
              {
                uint64_t v114 = &v113[v127 & 0xFFFFFFFFFFFFFFF8];
                unint64_t v128 = v127 - 8;
                if (v128 >= 0x38)
                {
                  uint64_t v130 = 8 * v126;
                  if ((unint64_t)(&v124[8 * v126] - v102) < 0x20)
                  {
                    unint64_t v129 = v113;
                    goto LABEL_135;
                  }
                  uint64_t v131 = (v128 >> 3) + 1;
                  uint64_t v132 = 8 * (v131 & 0x3FFFFFFFFFFFFFFCLL);
                  unint64_t v129 = &v113[v132];
                  int v133 = (long long *)(v102 + 16);
                  uint64_t v134 = &v124[v130 + 16];
                  uint64_t v135 = v131 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v136 = *v133;
                    *((_OWORD *)v134 - 1) = *(v133 - 1);
                    *(_OWORD *)uint64_t v134 = v136;
                    v133 += 2;
                    v134 += 32;
                    v135 -= 4;
                  }
                  while (v135);
                  if (v131 != (v131 & 0x3FFFFFFFFFFFFFFCLL))
                  {
                    v102 += v132;
                    goto LABEL_135;
                  }
                }
                else
                {
                  unint64_t v129 = v113;
                  do
                  {
LABEL_135:
                    uint64_t v137 = *(void *)v102;
                    v102 += 8;
                    *(void *)unint64_t v129 = v137;
                    v129 += 8;
                  }
                  while (v129 != v114);
                }
              }
              uint64_t v101 = &v124[8 * v125];
              if (v153)
              {
                uint64_t v138 = v124;
                char v139 = v113;
                operator delete(v153);
                id v113 = v139;
                char v153 = v138;
              }
              else
              {
                char v153 = v124;
              }
              goto LABEL_113;
            }
            if (*((void *)&v160 + 1) == (void)v160)
            {
              *(void *)long long v157 = operator new(0xFC0uLL);
              std::__split_buffer<geo::QuadTile *>::push_back((char **)&v160, v157);
              *(void *)long long v157 = *(void *)(v161 - 8);
              *(void *)&long long v161 = v161 - 8;
            }
            else
            {
              *(void *)long long v157 = operator new(0xFC0uLL);
            }
            std::__split_buffer<geo::QuadTile *>::push_front((void **)&v160, v157);
            uint64_t v99 = 21;
            if ((void)v161 - *((void *)&v160 + 1) != 8) {
              uint64_t v99 = v162 + 42;
            }
            *(void *)&long long v162 = v99;
          }
          else
          {
            *(void *)&long long v162 = 42;
            *(void *)long long v157 = *(void *)(v161 - 8);
            *(void *)&long long v161 = v161 - 8;
            std::__split_buffer<geo::QuadTile *>::push_front((void **)&v160, v157);
          }
LABEL_105:
          unint64_t v57 = v162;
          BOOL v58 = (uint64_t *)*((void *)&v160 + 1);
          uint64_t v59 = (uint64_t *)v161;
LABEL_106:
          uint64_t v105 = &v58[v57 / 0x2A];
          uint64_t v106 = *v105 + 96 * (v57 % 0x2A);
          if (v59 == v58) {
            uint64_t v106 = 0;
          }
          if (v106 == *v105) {
            uint64_t v106 = *(v105 - 1) + 4032;
          }
          long long v107 = *(_OWORD *)(v37 + 16);
          *(_OWORD *)(v106 - 96) = *(_OWORD *)v37;
          *(_OWORD *)(v106 - 80) = v107;
          uint64_t v108 = v35 + 96 * v36;
          *(void *)(v106 - 56) = 0;
          *(void *)(v106 - 48) = 0;
          *(void *)(v106 - 64) = 0;
          *(_OWORD *)(v106 - 64) = *(_OWORD *)(v108 + 32);
          *(void *)(v106 - 48) = *(void *)(v108 + 48);
          *(void *)(v108 + 32) = 0;
          *(void *)(v108 + 40) = 0;
          *(void *)(v108 + 48) = 0;
          *(void *)(v106 - 40) = 0;
          *(void *)(v106 - 32) = 0;
          *(void *)(v106 - 24) = 0;
          *(_OWORD *)(v106 - 40) = *(_OWORD *)(v108 + 56);
          *(void *)(v106 - 24) = *(void *)(v108 + 72);
          *(void *)(v108 + 56) = 0;
          *(void *)(v108 + 64) = 0;
          *(void *)(v108 + 72) = 0;
          uint64_t v109 = *v39;
          *(void *)(v106 - 11) = *(void *)(v37 + 85);
          *(void *)(v106 - 16) = v109;
          uint64_t v110 = *((void *)&v162 + 1);
          *(void *)&long long v162 = v162 - 1;
          ++*((void *)&v162 + 1);
          uint64_t v111 = v110 + v162;
          unint64_t v112 = (v110 + (uint64_t)v162) / 0x2AuLL;
          uint64_t v42 = *(void *)(*((void *)&v160 + 1) + 8 * v112);
          unint64_t v43 = v111 - 42 * v112;
          uint64_t v47 = *(void **)(v42 + 96 * v43 + 56);
          if (v47)
          {
LABEL_25:
            *(void *)(v42 + 96 * v43 + 64) = v47;
            operator delete(v47);
          }
LABEL_26:
          uint64_t v45 = *(void **)(v42 + 96 * v43 + 32);
          if (v45) {
            goto LABEL_27;
          }
LABEL_28:
          uint64_t v48 = 42 * ((uint64_t)(v161 - *((void *)&v160 + 1)) >> 3) - 1;
          long long v49 = v162;
          --*((void *)&v162 + 1);
          if ((void)v161 == *((void *)&v160 + 1)) {
            uint64_t v48 = 0;
          }
          if ((unint64_t)(v48 - (*((void *)&v49 + 1) + v49) + 1) >= 0x54)
          {
            operator delete(*(void **)(v161 - 8));
            *(void *)&long long v161 = v161 - 8;
          }
LABEL_8:
          uint64_t v16 = *((void *)&v162 + 1);
          if (!*((void *)&v162 + 1))
          {
            if (v151)
            {
              uint64_t v140 = *v148;
              *(void *)uint64_t v140 = a2;
              *(void *)(v140 + 8) = a2 + v150;
              uint64_t v6 = 1;
              *(unsigned char *)(v140 + 16) = 1;
            }
            else
            {
              uint64_t v6 = 0;
            }
            goto LABEL_142;
          }
          break;
        case 0xFFFFFC1F:
          unint64_t v46 = *((void *)&v162 + 1) + v162 - 1;
          uint64_t v42 = *(void *)(*((void *)&v160 + 1) + 8 * (v46 / 0x2A));
          unint64_t v43 = v46 % 0x2A;
          goto LABEL_24;
        case 0xFFFFFC20:
          long long v50 = *(_OWORD *)(v37 + 16);
          *(_OWORD *)long long v157 = *(_OWORD *)v37;
          *(_OWORD *)&v157[16] = v50;
          uint64_t v51 = v35 + 96 * v36;
          memset(&v157[32], 0, 24);
          uint64_t v53 = *(unsigned char **)(v51 + 32);
          uint64_t v52 = *(unsigned char **)(v51 + 40);
          int64_t v54 = v52 - v53;
          if (v52 != v53)
          {
            if (0xAAAAAAAAAAAAAAABLL * (v54 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
              abort();
            }
            long long v55 = (char *)operator new(v54);
            *(void *)&v157[32] = v55;
            *(void *)&v157[40] = v55;
            *(void *)&v157[48] = &v55[8 * (v54 >> 3)];
            size_t v56 = 24 * ((v54 - 24) / 0x18uLL) + 24;
            memcpy(v55, v53, v56);
            *(void *)&v157[40] = &v55[v56];
          }
          uint64_t v63 = v35 + 96 * v36;
          __p[0] = 0;
          __p[1] = 0;
          v159[0] = 0;
          uint64_t v65 = *(unsigned char **)(v63 + 56);
          long long v64 = *(unsigned char **)(v63 + 64);
          uint64_t v66 = v64 - v65;
          if (v64 != v65)
          {
            if (v66 < 0) {
              abort();
            }
            uint64_t v67 = (char *)operator new(v64 - v65);
            __p[0] = v67;
            __p[1] = v67;
            v159[0] = &v67[16 * (v66 >> 4)];
            memcpy(v67, v65, v66 & 0xFFFFFFFFFFFFFFF0);
            __p[1] = &v67[v66 & 0xFFFFFFFFFFFFFFF0];
          }
          uint64_t v68 = *v39;
          *(void *)((char *)&v159[1] + 5) = *(void *)(v37 + 85);
          v159[1] = v68;
          (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v39 + 24))(*v39, 1, v37);
          (*(void (**)(void, void, unsigned char *))(*(void *)v159[1] + 24))(v159[1], 0, v157);
          uint64_t v69 = *((void *)&v160 + 1);
          if ((void)v161 == *((void *)&v160 + 1)) {
            uint64_t v70 = 0;
          }
          else {
            uint64_t v70 = 42 * ((uint64_t)(v161 - *((void *)&v160 + 1)) >> 3) - 1;
          }
          unint64_t v71 = *((void *)&v162 + 1) + v162;
          if (v70 == *((void *)&v162 + 1) + (void)v162)
          {
            std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v160);
            uint64_t v69 = *((void *)&v160 + 1);
            unint64_t v71 = *((void *)&v162 + 1) + v162;
          }
          unint64_t v72 = *(void *)(v69 + 8 * (v71 / 0x2A)) + 96 * (v71 % 0x2A);
          long long v73 = *(_OWORD *)&v157[16];
          *(_OWORD *)unint64_t v72 = *(_OWORD *)v157;
          *(_OWORD *)(v72 + 16) = v73;
          *(void *)(v72 + 40) = 0;
          *(void *)(v72 + 48) = 0;
          *(void *)(v72 + 32) = 0;
          *(_OWORD *)(v72 + 32) = *(_OWORD *)&v157[32];
          *(void *)(v72 + 48) = *(void *)&v157[48];
          memset(&v157[32], 0, 24);
          *(void *)(v72 + 56) = 0;
          *(void *)(v72 + 64) = 0;
          *(void *)(v72 + 72) = 0;
          *(_OWORD *)(v72 + 56) = *(_OWORD *)__p;
          *(void *)(v72 + 72) = v159[0];
          __p[0] = 0;
          __p[1] = 0;
          v159[0] = 0;
          uint64_t v74 = v159[1];
          *(void *)(v72 + 85) = *(void *)((char *)&v159[1] + 5);
          *(void *)(v72 + 80) = v74;
          ++*((void *)&v162 + 1);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(void *)&v157[32])
          {
            *(void *)&v157[40] = *(void *)&v157[32];
            operator delete(*(void **)&v157[32]);
          }
          goto LABEL_8;
        default:
          goto LABEL_13;
      }
    }
  }
LABEL_142:
  uint64_t v141 = (void **)*((void *)&v160 + 1);
  std::string v142 = (void **)v161;
  *((void *)&v162 + 1) = 0;
  unint64_t v143 = v161 - *((void *)&v160 + 1);
  if ((void)v161 - *((void *)&v160 + 1) >= 0x11uLL)
  {
    do
    {
      operator delete(*v141);
      std::string v142 = (void **)v161;
      uint64_t v141 = (void **)(*((void *)&v160 + 1) + 8);
      *((void *)&v160 + 1) = v141;
      unint64_t v143 = v161 - (void)v141;
    }
    while ((void)v161 - (void)v141 > 0x10uLL);
  }
  unint64_t v144 = v143 >> 3;
  if (v144 == 1)
  {
    uint64_t v145 = 21;
    goto LABEL_148;
  }
  if (v144 == 2)
  {
    uint64_t v145 = 42;
LABEL_148:
    *(void *)&long long v162 = v145;
  }
  if (v141 != v142)
  {
    do
    {
      int32x2_t v146 = *v141++;
      operator delete(v146);
    }
    while (v141 != v142);
    if ((void)v161 != *((void *)&v160 + 1)) {
      *(void *)&long long v161 = v161 + ((*((void *)&v160 + 1) - v161 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if ((void)v160) {
    operator delete((void *)v160);
  }
  return v6;
}

void sub_1A26B7E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  operator delete(v26);
  operator delete(__p);
  std::deque<std::__state<char>>::~deque[abi:nn180100](v27 - 144);
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v141 = 0;
  std::string v142 = 0;
  unint64_t v143 = 0;
  *(_DWORD *)uint64_t v137 = 0;
  memset(&v137[8], 0, 32);
  long long v138 = 0u;
  long long v139 = 0u;
  memset(v140, 0, 21);
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6)
  {
    uint64_t v15 = 0;
    uint64_t v16 = (void *)v139;
    if (!(void)v139) {
      goto LABEL_154;
    }
    goto LABEL_153;
  }
  __x.first = a3;
  __x.second = a3;
  __x.matched = 0;
  *(_DWORD *)int v133 = 0;
  memset(&v133[8], 0, 48);
  *(_OWORD *)std::string __p = 0uLL;
  memset(v135, 0, 21);
  unint64_t v11 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v141, (uint64_t)v133);
  std::string v142 = v11;
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (*(void *)&v133[32]) {
    operator delete(*(void **)&v133[32]);
  }
  uint64_t v12 = *((void *)v11 - 8);
  *((_DWORD *)v11 - 24) = 0;
  *((void *)v11 - 11) = a2;
  *((void *)v11 - 10) = a2;
  *((void *)v11 - 9) = a3;
  unint64_t v13 = *(unsigned int *)(a1 + 28);
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v11 - 7) - v12) >> 3);
  if (v13 <= v14)
  {
    if (v13 < v14) {
      *((void *)v11 - 7) = v12 + 24 * v13;
    }
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v11 - 64), v13 - v14, &__x);
  }
  uint64_t v17 = *((void *)v11 - 5);
  unint64_t v18 = *(unsigned int *)(a1 + 32);
  unint64_t v19 = (*((void *)v11 - 4) - v17) >> 4;
  if (v18 <= v19)
  {
    if (v18 < v19) {
      *((void *)v11 - 4) = v17 + 16 * v18;
    }
  }
  else
  {
    std::vector<geo::Mercator2<double>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v11 - 40), v18 - v19);
  }
  unint64_t v126 = a4;
  unint64_t v129 = 0;
  char v128 = 0;
  unsigned int v20 = 0;
  unint64_t v21 = (const char *)(a3 - a2);
  *((void *)v11 - 2) = v6;
  *((_DWORD *)v11 - 2) = a5;
  *(v11 - 4) = a6;
  int64_t v127 = a3;
  while (2)
  {
    BOOL v22 = (++v20 & 0xFFF) != 0 || (int)(v20 >> 12) < (int)v21;
    if (!v22)
    {
LABEL_23:
      uint64_t result = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
      __break(1u);
      return result;
    }
    uint64_t v24 = v11 - 16;
    uint64_t v23 = *((void *)v11 - 2);
    uint64_t v25 = v11 - 96;
    if (v23) {
      (*(void (**)(uint64_t, char *))(*(void *)v23 + 16))(v23, v11 - 96);
    }
    switch(*(_DWORD *)v25)
    {
      case 0xFFFFFC18:
        uint64_t v26 = (const char *)*((void *)v11 - 10);
        if ((a5 & 0x20) != 0 && v26 == a2 || (a5 & 0x1000) != 0 && v26 != v127) {
          goto LABEL_31;
        }
        uint64_t v45 = &v26[-*((void *)v11 - 11)];
        unint64_t v46 = v129;
        if ((v128 & ((uint64_t)v129 >= (uint64_t)v45)) != 0) {
          goto LABEL_100;
        }
        long long v47 = *((_OWORD *)v11 - 5);
        *(_OWORD *)uint64_t v137 = *(_OWORD *)v25;
        *(_OWORD *)&v137[16] = v47;
        if (v137 == v25) {
          goto LABEL_99;
        }
        uint64_t v48 = (char *)*((void *)v11 - 8);
        long long v49 = (char *)*((void *)v11 - 7);
        unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((v49 - v48) >> 3);
        uint64_t v51 = *((void *)&v138 + 1);
        uint64_t v52 = *(char **)&v137[32];
        unint64_t v125 = v45;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v138 + 1) - *(void *)&v137[32]) >> 3) >= v50)
        {
          unint64_t v57 = (char *)v138;
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v138 - *(void *)&v137[32]) >> 3) >= v50)
          {
            for (uint64_t i = *(void *)&v137[32]; v48 != v49; v48 += 24)
            {
              *(_OWORD *)uint64_t i = *(_OWORD *)v48;
              *(unsigned char *)(i + 16) = v48[16];
              i += 24;
            }
            uint64_t v59 = i - (void)v52;
            unint64_t v57 = v52;
          }
          else
          {
            unint64_t v60 = &v48[8 * ((uint64_t)(v138 - *(void *)&v137[32]) >> 3)];
            if ((void)v138 != *(void *)&v137[32])
            {
              do
              {
                *(_OWORD *)uint64_t v52 = *(_OWORD *)v48;
                v52[16] = v48[16];
                v48 += 24;
                v52 += 24;
              }
              while (v48 != v60);
            }
            for (uint64_t j = v57; v60 != v49; v60 += 24)
            {
              long long v62 = *(_OWORD *)v60;
              *((void *)j + 2) = *((void *)v60 + 2);
              *(_OWORD *)uint64_t j = v62;
              j += 24;
            }
            uint64_t v59 = j - v57;
          }
        }
        else
        {
          uint64_t v130 = v49 - v48;
          if (*(void *)&v137[32])
          {
            *(void *)&long long v138 = *(void *)&v137[32];
            operator delete(*(void **)&v137[32]);
            uint64_t v51 = 0;
            *(void *)&char v137[32] = 0;
            long long v138 = 0uLL;
          }
          if (v50 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_161;
          }
          unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * (v51 >> 3);
          uint64_t v54 = 2 * v53;
          if (2 * v53 <= v50) {
            uint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((v49 - v48) >> 3);
          }
          unint64_t v55 = v53 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v54;
          if (v55 > 0xAAAAAAAAAAAAAAALL) {
LABEL_161:
          }
            abort();
          size_t v56 = (char *)operator new(24 * v55);
          unint64_t v57 = v56;
          *(void *)&char v137[32] = v56;
          *(void *)&long long v138 = v56;
          *((void *)&v138 + 1) = &v56[24 * v55];
          BOOL v58 = v56;
          if (v48 != v49)
          {
            memcpy(v56, v48, 24 * ((v130 - 24) / 0x18uLL) + 24);
            BOOL v58 = &v57[24 * ((v130 - 24) / 0x18uLL) + 24];
          }
          uint64_t v59 = v58 - v57;
          uint64_t v45 = v125;
        }
        *(void *)&long long v138 = &v57[v59];
        long long v64 = (char *)*((void *)v11 - 5);
        uint64_t v65 = (char *)*((void *)v11 - 4);
        int64_t v66 = v65 - v64;
        unint64_t v67 = (v65 - v64) >> 4;
        uint64_t v68 = v140[0];
        uint64_t v69 = (char *)v139;
        if (v67 <= (uint64_t)(v140[0] - v139) >> 4)
        {
          long long v73 = (char *)*((void *)&v139 + 1);
          uint64_t v76 = *((void *)&v139 + 1) - v139;
          unint64_t v77 = (uint64_t)(*((void *)&v139 + 1) - v139) >> 4;
          if (v77 < v67)
          {
            uint64_t v78 = &v64[16 * v77];
            if (*((void *)&v139 + 1) != (void)v139)
            {
              unint64_t v79 = v76 - 16;
              if ((unint64_t)(v76 - 16) >= 0xF0)
              {
                unint64_t v91 = v76 & 0xFFFFFFFFFFFFFFF0;
                unint64_t v92 = v139 + v91 - 8;
                unint64_t v93 = (unint64_t)&v64[v91 - 8];
                BOOL v94 = (uint64_t)v139 + 8 >= (unint64_t)&v64[v91]
                   || (unint64_t)(v64 + 8) >= (unint64_t)v139 + v91;
                BOOL v95 = !v94;
                BOOL v96 = v92 <= (unint64_t)v64 || (unint64_t)v139 >= v93;
                if (v96 && !v95)
                {
                  uint64_t v97 = (v79 >> 4) + 1;
                  uint64_t v98 = 16 * (v97 & 0x1FFFFFFFFFFFFFFCLL);
                  uint64_t v99 = (const double *)(v64 + 32);
                  uint64_t v100 = (double *)(v139 + 32);
                  uint64_t v101 = v97 & 0x1FFFFFFFFFFFFFFCLL;
                  do
                  {
                    char v102 = v99 - 4;
                    float64x2x2_t v144 = vld2q_f64(v102);
                    float64x2x2_t v146 = vld2q_f64(v99);
                    uint64_t v103 = v100 - 4;
                    vst2q_f64(v103, v144);
                    vst2q_f64(v100, v146);
                    v99 += 8;
                    v100 += 8;
                    v101 -= 4;
                  }
                  while (v101);
                  if (v97 == (v97 & 0x1FFFFFFFFFFFFFFCLL)) {
                    goto LABEL_88;
                  }
                  v64 += v98;
                  v69 += v98;
                }
              }
              do
              {
                *(void *)uint64_t v69 = *(void *)v64;
                *((void *)v69 + 1) = *((void *)v64 + 1);
                v64 += 16;
                v69 += 16;
              }
              while (v64 != v78);
            }
LABEL_88:
            for (unint64_t k = v73; v78 != v65; k += 16)
            {
              long long v81 = *(_OWORD *)v78;
              v78 += 16;
              *(_OWORD *)unint64_t k = v81;
            }
            uint64_t v75 = (char *)(k - v73);
            goto LABEL_98;
          }
          if (v64 == v65)
          {
            uint64_t v83 = (char *)v139;
          }
          else
          {
            unint64_t v82 = v66 - 16;
            if ((unint64_t)(v66 - 16) >= 0xF0)
            {
              unint64_t v104 = v82 & 0xFFFFFFFFFFFFFFF0 | 8;
              unint64_t v105 = v139 + v104;
              unint64_t v106 = (unint64_t)&v64[v104];
              unint64_t v107 = (v82 & 0xFFFFFFFFFFFFFFF0) + 16;
              BOOL v109 = (uint64_t)v139 + 8 < (unint64_t)&v64[v107]
                  && (unint64_t)(v64 + 8) < (unint64_t)v139 + v107;
              uint64_t v83 = (char *)v139;
              BOOL v110 = v105 <= (unint64_t)v64 || (unint64_t)v139 >= v106;
              if (v110 && !v109)
              {
                uint64_t v111 = (v82 >> 4) + 1;
                uint64_t v112 = 16 * (v111 & 0x1FFFFFFFFFFFFFFCLL);
                uint64_t v83 = (char *)(v139 + v112);
                id v113 = (const double *)(v64 + 32);
                uint64_t v114 = (double *)(v139 + 32);
                uint64_t v115 = v111 & 0x1FFFFFFFFFFFFFFCLL;
                do
                {
                  uint64_t v116 = v113 - 4;
                  float64x2x2_t v145 = vld2q_f64(v116);
                  float64x2x2_t v147 = vld2q_f64(v113);
                  uint64_t v117 = v114 - 4;
                  vst2q_f64(v117, v145);
                  vst2q_f64(v114, v147);
                  v113 += 8;
                  v114 += 8;
                  v115 -= 4;
                }
                while (v115);
                if (v111 == (v111 & 0x1FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_97;
                }
                v64 += v112;
              }
            }
            else
            {
              uint64_t v83 = (char *)v139;
            }
            do
            {
              *(void *)uint64_t v83 = *(void *)v64;
              *((void *)v83 + 1) = *((void *)v64 + 1);
              v83 += 16;
              v64 += 16;
            }
            while (v64 != v65);
          }
LABEL_97:
          uint64_t v75 = (char *)(v83 - v69);
          long long v73 = v69;
          goto LABEL_98;
        }
        if ((void)v139)
        {
          *((void *)&v139 + 1) = v139;
          operator delete((void *)v139);
          uint64_t v68 = 0;
          long long v139 = 0uLL;
          v140[0] = 0;
        }
        if (v66 < 0) {
          goto LABEL_161;
        }
        uint64_t v70 = v68 >> 3;
        if (v68 >> 3 <= v67) {
          uint64_t v70 = (v65 - v64) >> 4;
        }
        unint64_t v71 = (unint64_t)v68 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v70;
        if (v71 >> 60) {
          goto LABEL_161;
        }
        unint64_t v72 = (char *)operator new(16 * v71);
        long long v73 = v72;
        *(void *)&long long v139 = v72;
        *((void *)&v139 + 1) = v72;
        v140[0] = &v72[16 * v71];
        uint64_t v74 = v72;
        if (v64 != v65)
        {
          memcpy(v72, v64, ((v66 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
          uint64_t v74 = &v73[((v66 - 16) & 0xFFFFFFFFFFFFFFF0) + 16];
        }
        uint64_t v75 = (char *)(v74 - v73);
        uint64_t v45 = v125;
LABEL_98:
        *((void *)&v139 + 1) = &v75[(void)v73];
LABEL_99:
        uint64_t v84 = *(void *)v24;
        *(void *)((char *)&v140[1] + 5) = *(void *)(v24 + 5);
        v140[1] = v84;
        unint64_t v46 = v45;
LABEL_100:
        unint64_t v85 = v142;
        if (v46 == v21)
        {
          uint64_t v86 = v141;
          while (v85 != v86)
          {
            unint64_t v87 = (void *)*((void *)v85 - 5);
            if (v87)
            {
              *((void *)v85 - 4) = v87;
              operator delete(v87);
            }
            int v88 = (void *)*((void *)v85 - 8);
            if (v88)
            {
              *((void *)v85 - 7) = v88;
              operator delete(v88);
            }
            v85 -= 96;
          }
          std::string v142 = v86;
          char v128 = 1;
          unint64_t v129 = v21;
        }
        else
        {
          unint64_t v129 = v46;
          int v89 = (void *)*((void *)v142 - 5);
          if (v89)
          {
            *((void *)v142 - 4) = v89;
            operator delete(v89);
          }
          uint64_t v90 = (void *)*((void *)v85 - 8);
          if (v90)
          {
            *((void *)v85 - 7) = v90;
            operator delete(v90);
          }
          std::string v142 = v85 - 96;
          char v128 = 1;
        }
LABEL_18:
        uint64_t v15 = v141;
        unint64_t v11 = v142;
        if (v141 != v142) {
          continue;
        }
        if ((v128 & 1) == 0)
        {
          uint64_t v6 = 0;
          uint64_t v16 = (void *)v139;
          if (!(void)v139) {
            goto LABEL_154;
          }
          goto LABEL_153;
        }
        uint64_t v118 = *v126;
        *(void *)uint64_t v118 = a2;
        *(void *)(v118 + 8) = &v129[(void)a2];
        *(unsigned char *)(v118 + 16) = 1;
        if ((void)v138 != *(void *)&v137[32])
        {
          unint64_t v119 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v138 - *(void *)&v137[32]) >> 3);
          uint64_t v120 = (unsigned char *)(*(void *)&v137[32] + 16);
          unsigned int v121 = 1;
          do
          {
            uint64_t v122 = v118 + 24 * v121;
            *(_OWORD *)uint64_t v122 = *((_OWORD *)v120 - 1);
            char v123 = *v120;
            v120 += 24;
            *(unsigned char *)(v122 + 16) = v123;
            BOOL v22 = v119 > v121++;
          }
          while (v22);
        }
        uint64_t v6 = 1;
        uint64_t v16 = (void *)v139;
        if ((void)v139)
        {
LABEL_153:
          *((void *)&v139 + 1) = v16;
          operator delete(v16);
        }
LABEL_154:
        if (*(void *)&v137[32])
        {
          *(void *)&long long v138 = *(void *)&v137[32];
          operator delete(*(void **)&v137[32]);
        }
        if (v15) {
          operator delete(v15);
        }
        return v6;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_18;
      case 0xFFFFFC1F:
LABEL_31:
        uint64_t v27 = v142;
        unsigned int v28 = (void *)*((void *)v142 - 5);
        if (v28)
        {
          *((void *)v142 - 4) = v28;
          operator delete(v28);
        }
        unint64_t v29 = (void *)*((void *)v27 - 8);
        if (v29)
        {
          *((void *)v27 - 7) = v29;
          operator delete(v29);
        }
        std::string v142 = v27 - 96;
        goto LABEL_18;
      case 0xFFFFFC20:
        long long v30 = *((_OWORD *)v11 - 5);
        *(_OWORD *)int v133 = *(_OWORD *)v25;
        *(_OWORD *)&v133[16] = v30;
        memset(&v133[32], 0, 24);
        unint64_t v32 = (unsigned char *)*((void *)v11 - 8);
        unint64_t v31 = (unsigned char *)*((void *)v11 - 7);
        int64_t v33 = v31 - v32;
        if (v31 != v32)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v33 >> 3) > 0xAAAAAAAAAAAAAAALL) {
            abort();
          }
          unint64_t v34 = (char *)operator new(v33);
          *(void *)&v133[32] = v34;
          *(void *)&v133[40] = v34;
          *(void *)&v133[48] = &v34[8 * (v33 >> 3)];
          size_t v35 = 24 * ((v33 - 24) / 0x18uLL) + 24;
          memcpy(v34, v32, v35);
          *(void *)&v133[40] = &v34[v35];
        }
        __p[0] = 0;
        __p[1] = 0;
        v135[0] = 0;
        uint64_t v37 = (unsigned char *)*((void *)v11 - 5);
        unint64_t v36 = (unsigned char *)*((void *)v11 - 4);
        uint64_t v38 = v36 - v37;
        if (v36 != v37)
        {
          if (v38 < 0) {
            abort();
          }
          double v39 = (char *)operator new(v36 - v37);
          __p[0] = v39;
          __p[1] = v39;
          v135[0] = &v39[16 * (v38 >> 4)];
          size_t v40 = v38 & 0xFFFFFFFFFFFFFFF0;
          memcpy(v39, v37, v40);
          __p[1] = &v39[v40];
        }
        uint64_t v41 = *(void *)v24;
        *(void *)((char *)&v135[1] + 5) = *(void *)(v24 + 5);
        v135[1] = v41;
        (*(void (**)(void, uint64_t, char *))(**(void **)v24 + 24))(*(void *)v24, 1, v25);
        (*(void (**)(void, void, unsigned char *))(*(void *)v135[1] + 24))(v135[1], 0, v133);
        uint64_t v42 = v142;
        if ((unint64_t)v142 >= v143)
        {
          std::string v142 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v141, (uint64_t)v133);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v43 = *(_OWORD *)&v133[16];
          *(_OWORD *)std::string v142 = *(_OWORD *)v133;
          *((_OWORD *)v42 + 1) = v43;
          *((void *)v42 + 4) = 0;
          *((void *)v42 + 5) = 0;
          *((void *)v42 + 6) = 0;
          *((void *)v42 + 7) = 0;
          *((_OWORD *)v42 + 2) = *(_OWORD *)&v133[32];
          *((void *)v42 + 6) = *(void *)&v133[48];
          memset(&v133[32], 0, 24);
          *((void *)v42 + 8) = 0;
          *((void *)v42 + 9) = 0;
          *(_OWORD *)(v42 + 56) = *(_OWORD *)__p;
          *((void *)v42 + 9) = v135[0];
          __p[0] = 0;
          __p[1] = 0;
          v135[0] = 0;
          uint64_t v44 = v135[1];
          *(void *)(v42 + 85) = *(void *)((char *)&v135[1] + 5);
          *((void *)v42 + 10) = v44;
          std::string v142 = v42 + 96;
        }
        if (*(void *)&v133[32])
        {
          *(void *)&v133[40] = *(void *)&v133[32];
          operator delete(*(void **)&v133[32]);
        }
        goto LABEL_18;
      default:
        goto LABEL_23;
    }
  }
}

void sub_1A26B8A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  std::__state<char>::~__state(&a37);
  std::vector<std::__state<char>>::~vector[abi:nn180100]((void **)(v37 - 120));
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      unint64_t v13 = &end[__n];
      std::vector<std::csub_match>::size_type v14 = 24 * __n;
      do
      {
        std::pair<const char *, const char *> v15 = __x->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__x->matched;
        end->std::pair<const char *, const char *> = v15;
        ++end;
        v14 -= 24;
      }
      while (v14);
      std::vector<std::csub_match>::pointer end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    unint64_t v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v12 = (char *)operator new(24 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v16 = (std::sub_match<const char *> *)&v12[24 * v8];
    std::vector<std::csub_match>::size_type v17 = 24 * __n;
    unint64_t v18 = &v16[__n];
    unint64_t v19 = v16;
    do
    {
      std::pair<const char *, const char *> v20 = __x->std::pair<const char *, const char *>;
      v19[1].first = *(const char **)&__x->matched;
      std::pair<const char *, const char *> *v19 = v20;
      unint64_t v19 = (std::pair<const char *, const char *> *)((char *)v19 + 24);
      v17 -= 24;
    }
    while (v17);
    std::vector<std::csub_match>::pointer begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<const char *, const char *> v22 = end[-1].std::pair<const char *, const char *>;
        *(void *)&v16[-1].matched = *(void *)&end[-1].matched;
        v16[-1].std::pair<const char *, const char *> = v22;
        --v16;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v16;
    this->__end_ = v18;
    this->__end_cap_.__value_ = (std::sub_match<const char *> *)&v12[24 * v11];
    if (end)
    {
      operator delete(end);
    }
  }
}

uint64_t std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>()
{
  return std::__state<char>::~__state();
}

void *std::__state<char>::~__state(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void **std::vector<std::__state<char>>::~vector[abi:nn180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 5);
        if (v5)
        {
          *((void *)v3 - 4) = v5;
          operator delete(v5);
        }
        uint64_t v6 = (void *)*((void *)v3 - 8);
        if (v6)
        {
          *((void *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::deque<std::__state<char>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_79:
      *(void *)uint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    unint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v30 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v30 = 1;
      }
      if (!(v30 >> 61))
      {
        unint64_t v31 = v30 >> 2;
        uint64_t v32 = 8 * v30;
        int64_t v33 = (char *)operator new(8 * v30);
        unint64_t v34 = &v33[8 * v31];
        size_t v35 = &v33[v32];
        int64_t v37 = v5 - v7;
        BOOL v36 = v5 == v7;
        uint64_t v5 = v34;
        if (!v36)
        {
          uint64_t v5 = &v34[v37 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v38 = v37 - 8;
          if ((unint64_t)(v37 - 8) >= 0x38)
          {
            unint64_t v71 = &v33[8 * v31];
            double v39 = v71;
            if ((unint64_t)(v71 - v7) >= 0x20)
            {
              uint64_t v72 = (v38 >> 3) + 1;
              uint64_t v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
              double v39 = &v34[v73];
              uint64_t v74 = (long long *)(v6 + 3);
              uint64_t v75 = v71 + 16;
              uint64_t v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v77 = *v74;
                *(v75 - 1) = *(v74 - 1);
                *uint64_t v75 = v77;
                v74 += 2;
                v75 += 2;
                v76 -= 4;
              }
              while (v76);
              if (v72 == (v72 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_77;
              }
              v7 += v73;
            }
          }
          else
          {
            double v39 = &v33[8 * v31];
          }
          do
          {
            uint64_t v78 = *(void *)v7;
            v7 += 8;
            *(void *)double v39 = v78;
            v39 += 8;
          }
          while (v39 != v5);
        }
        goto LABEL_77;
      }
LABEL_88:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    std::pair<const char *, const char *> v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      uint64_t v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_79;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      unint64_t v87 = operator new(0xFC0uLL);
      std::__split_buffer<geo::QuadTile *>::push_back((char **)a1, &v87);
      return;
    }
    unint64_t v87 = operator new(0xFC0uLL);
    std::__split_buffer<geo::QuadTile *>::push_front((void **)a1, &v87);
    size_t v40 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v40 + 1);
    uint64_t v8 = *v40;
    *(void *)(a1 + 8) = v40 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_79;
    }
    unint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v41 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v41 = 1;
      }
      if (!(v41 >> 61))
      {
        unint64_t v42 = v41 >> 2;
        uint64_t v43 = 8 * v41;
        int64_t v33 = (char *)operator new(8 * v41);
        unint64_t v34 = &v33[8 * v42];
        size_t v35 = &v33[v43];
        int64_t v44 = v5 - v7;
        BOOL v36 = v5 == v7;
        uint64_t v5 = v34;
        if (!v36)
        {
          uint64_t v5 = &v34[v44 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v45 = v44 - 8;
          if ((unint64_t)(v44 - 8) >= 0x38)
          {
            unint64_t v79 = &v33[8 * v42];
            unint64_t v46 = v79;
            if ((unint64_t)(v79 - v7) >= 0x20)
            {
              uint64_t v80 = (v45 >> 3) + 1;
              uint64_t v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v46 = &v34[v81];
              unint64_t v82 = (long long *)(v40 + 3);
              uint64_t v83 = v79 + 16;
              uint64_t v84 = v80 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v85 = *v82;
                *(v83 - 1) = *(v82 - 1);
                _OWORD *v83 = v85;
                v82 += 2;
                v83 += 2;
                v84 -= 4;
              }
              while (v84);
              if (v80 == (v80 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_77;
              }
              v7 += v81;
            }
          }
          else
          {
            unint64_t v46 = &v33[8 * v42];
          }
          do
          {
            uint64_t v86 = *(void *)v7;
            v7 += 8;
            *(void *)unint64_t v46 = v86;
            v46 += 8;
          }
          while (v46 != v5);
        }
LABEL_77:
        *(void *)a1 = v33;
        *(void *)(a1 + 8) = v34;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v35;
        if (v9)
        {
          operator delete(v9);
          uint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_79;
      }
      goto LABEL_88;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_88;
  }
  uint64_t v25 = (char *)operator new(8 * v24);
  uint64_t v26 = operator new(0xFC0uLL);
  uint64_t v27 = &v25[8 * v21];
  unsigned int v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v47 = 1;
      }
      else {
        unint64_t v47 = v20 >> 2;
      }
      if (v47 >> 61) {
        goto LABEL_88;
      }
      uint64_t v27 = (char *)operator new(8 * v47);
      unsigned int v28 = &v27[8 * v47];
      operator delete(v25);
      uint64_t v19 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v25 = v27;
    }
    else
    {
      unint64_t v29 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v29 = v21 + 1;
      }
      v27 -= 8 * (v29 >> 1);
    }
  }
  *(void *)uint64_t v27 = v26;
  uint64_t v48 = v27 + 8;
  if (v18 != v19)
  {
    while (v27 != v25)
    {
      uint64_t v52 = v27;
      unint64_t v50 = v48;
LABEL_49:
      uint64_t v53 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v52 - 1) = v53;
      long long v49 = v52 - 8;
      uint64_t v48 = v50;
      uint64_t v27 = v49;
      if (v18 == *(void *)(a1 + 8)) {
        goto LABEL_44;
      }
    }
    if (v48 < v28)
    {
      uint64_t v54 = (v28 - v48) >> 3;
      if (v54 >= -1) {
        unint64_t v55 = v54 + 1;
      }
      else {
        unint64_t v55 = v54 + 2;
      }
      unint64_t v50 = &v48[8 * (v55 >> 1)];
      uint64_t v52 = &v27[8 * (v55 >> 1)];
      if (v48 == v27)
      {
        uint64_t v25 = v48;
      }
      else
      {
        memmove(&v27[8 * (v55 >> 1)], v27, v48 - v27);
        uint64_t v25 = v27;
      }
      goto LABEL_49;
    }
    if (v28 == v27) {
      unint64_t v56 = 1;
    }
    else {
      unint64_t v56 = (v28 - v27) >> 2;
    }
    if (v56 >> 61) {
      goto LABEL_88;
    }
    unint64_t v57 = (char *)operator new(8 * v56);
    uint64_t v25 = v57;
    unint64_t v58 = (v56 + 3) >> 2;
    uint64_t v52 = &v57[8 * v58];
    unint64_t v50 = v52;
    int64_t v59 = v48 - v27;
    if (v48 != v27)
    {
      unint64_t v50 = &v52[v59 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v60 = v59 - 8;
      uint64_t v61 = &v57[8 * v58];
      long long v62 = v27;
      if (v60 >= 0x38)
      {
        uint64_t v63 = 8 * v58;
        uint64_t v61 = &v57[8 * v58];
        long long v62 = v27;
        if ((unint64_t)(v61 - v27) >= 0x20)
        {
          uint64_t v64 = (v60 >> 3) + 1;
          uint64_t v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v61 = &v52[v65];
          int64_t v66 = (long long *)(v27 + 16);
          unint64_t v67 = &v57[v63 + 16];
          uint64_t v68 = v64 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v69 = *v66;
            *((_OWORD *)v67 - 1) = *(v66 - 1);
            *(_OWORD *)unint64_t v67 = v69;
            v66 += 2;
            v67 += 32;
            v68 -= 4;
          }
          while (v68);
          if (v64 == (v64 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_69;
          }
          long long v62 = &v27[v65];
        }
      }
      do
      {
        uint64_t v70 = *(void *)v62;
        v62 += 8;
        *(void *)uint64_t v61 = v70;
        v61 += 8;
      }
      while (v61 != v50);
    }
LABEL_69:
    unsigned int v28 = &v57[8 * v56];
    operator delete(v27);
    goto LABEL_49;
  }
  long long v49 = v27;
  unint64_t v50 = v27 + 8;
LABEL_44:
  uint64_t v51 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v49;
  *(void *)(a1 + 16) = v50;
  *(void *)(a1 + 24) = v28;
  if (v51)
  {
    operator delete(v51);
  }
}

void sub_1A26B925C(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::~deque[abi:nn180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  BOOL v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    unint64_t v4 = (void *)(a1 + 40);
    BOOL v3 = *(void ***)(a1 + 8);
  }
  else
  {
    unint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 / 0x2A];
    uint64_t v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    unint64_t v8 = (unint64_t)v2[(*(void *)(a1 + 40) + v5) / 0x2A] + 96 * ((*(void *)(a1 + 40) + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        unint64_t v9 = (void *)*((void *)v7 + 7);
        if (v9)
        {
          *((void *)v7 + 8) = v9;
          operator delete(v9);
        }
        uint64_t v10 = (void *)*((void *)v7 + 4);
        if (v10)
        {
          *((void *)v7 + 5) = v10;
          operator delete(v10);
        }
        v7 += 96;
        if (v7 - (unsigned char *)*v6 == 4032)
        {
          uint64_t v11 = (char *)v6[1];
          ++v6;
          uint64_t v7 = v11;
        }
      }
      while (v7 != (char *)v8);
      unint64_t v2 = *(void ***)(a1 + 8);
      BOOL v3 = *(void ***)(a1 + 16);
    }
  }
  *unint64_t v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 21;
    goto LABEL_19;
  }
  if (v13 == 2)
  {
    uint64_t v14 = 42;
LABEL_19:
    *(void *)(a1 + 32) = v14;
  }
  if (v2 != v3)
  {
    do
    {
      std::pair<const char *, const char *> v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    uint64_t v17 = *(void *)(a1 + 8);
    uint64_t v16 = *(void *)(a1 + 16);
    if (v16 != v17) {
      *(void *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>()
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v6 = a2;
  while (1)
  {
    uint64_t v7 = (unsigned __int8 *)v6;
    uint64_t v6 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(a1, v6, a3);
    if (v7 == (unsigned __int8 *)v6) {
      break;
    }
LABEL_2:
    if (v6 == (char *)v7) {
      goto LABEL_6;
    }
  }
  std::vector<std::csub_match>::pointer end = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v7, (unsigned __int8 *)a3);
  if (v7 != v10)
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)v10, a3, end, marked_count + 1, a1->__marked_count_ + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v7 == (unsigned __int8 *)a2) {
    operator new();
  }
  if (v7 == (unsigned __int8 *)a3) {
    return (unsigned __int8 *)a3;
  }
  if (*v7 == 124)
  {
    uint64_t v11 = v7 + 1;
    unint64_t v12 = (char *)(v7 + 1);
    while (1)
    {
      unint64_t v13 = (unsigned __int8 *)v12;
      unint64_t v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(a1, v12, a3);
      if (v13 == (unsigned __int8 *)v12)
      {
        uint64_t v14 = a1->__end_;
        unsigned int v15 = a1->__marked_count_;
        uint64_t v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v13, (unsigned __int8 *)a3);
        if (v13 == v16)
        {
LABEL_15:
          if (v13 == v11) {
            operator new();
          }
          operator new();
        }
        std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)v16, a3, v14, v15 + 1, a1->__marked_count_ + 1);
      }
      if (v12 == (char *)v13) {
        goto LABEL_15;
      }
    }
  }
  return v7;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  BOOL v3 = a2;
  if (a2 == a3) {
    return (uint64_t)a2;
  }
  unint64_t v4 = a3;
  if (*a2 == 94) {
    operator new();
  }
  if (a2 != a3)
  {
    while (v3 != v4)
    {
      uint64_t v6 = v3;
      std::vector<std::csub_match>::pointer end = a1->__end_;
      unsigned int marked_count = a1->__marked_count_;
      unint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>((uint64_t)a1, v6, v4);
      if (v6 != v9)
      {
        BOOL v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v9, v4, end, marked_count + 1, a1->__marked_count_ + 1);
        if (v6 != v3) {
          continue;
        }
      }
      if (v6 + 1 == v4 && *v6 == 36) {
        operator new();
      }
      uint64_t v11 = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(v11);
    }
  }
  return (uint64_t)v4;
}

void std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v6 = ((uint64_t (*)(void))std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>)();
  if ((unsigned char *)v6 == a2) {
    goto LABEL_11;
  }
  do
  {
    uint64_t v7 = (unsigned char *)v6;
    uint64_t v6 = ((uint64_t (*)(uint64_t, uint64_t, unsigned char *))std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>)(a1, v6, a3);
  }
  while (v7 != (unsigned char *)v6);
  if (v7 == a2)
  {
LABEL_11:
    uint64_t v11 = (const std::__node<char> *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
    std::__node<char>::__exec_split(v11, v12, v13);
    return;
  }
  if (v7 != a3 && *v7 == 124)
  {
    unint64_t v8 = v7 + 1;
    uint64_t v9 = ((uint64_t (*)(uint64_t, unsigned char *, unsigned char *))std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>)(a1, v7 + 1, a3);
    if (v7 + 1 != (unsigned char *)v9)
    {
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = ((uint64_t (*)(uint64_t, uint64_t, unsigned char *))std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>)(a1, v9, a3);
      }
      while (v10 != v9);
      if ((unsigned char *)v10 != v8) {
        operator new();
      }
    }
    goto LABEL_11;
  }
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EF57F3B0;
  unint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  BOOL v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  JUMPOUT(0x1A6239270);
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EF57F3B0;
  unint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  BOOL v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EF57F3B0;
  unint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  BOOL v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 == a3 || *a2 != 91) {
    return (uint64_t)a2;
  }
  if (a2 + 1 != a3) {
    operator new();
  }
  std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
  uint64_t result = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
  __break(1u);
  return result;
}

void sub_1A26BB2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
  {
    operator delete(__p);
    if (a22 < 0) {
      goto LABEL_6;
    }
  }
  else if (a22 < 0)
  {
LABEL_6:
    operator delete(a17);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  if (a2 != a3)
  {
    int v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
    int v7 = *a2;
    if (v7 <= 62)
    {
      if (v7 == 42)
      {
        uint64_t v18 = a2 + 1;
        if (v6) {
          BOOL v19 = 1;
        }
        else {
          BOOL v19 = v18 == a3;
        }
        if (!v19 && *v18 == 63)
        {
          __mexp_std::vector<std::csub_match>::pointer begin = __mexp_begin;
          __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
          size_t v9 = 0;
          goto LABEL_35;
        }
        __mexp_std::vector<std::csub_match>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
        size_t v9 = 0;
      }
      else
      {
        if (v7 != 43) {
          return;
        }
        unint64_t v8 = a2 + 1;
        if (!v6 && v8 != a3 && *v8 == 63)
        {
          __mexp_std::vector<std::csub_match>::pointer begin = __mexp_begin;
          __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
          size_t v9 = 1;
LABEL_35:
          size_t v17 = -1;
          goto LABEL_42;
        }
        __mexp_std::vector<std::csub_match>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
        size_t v9 = 1;
      }
      goto LABEL_45;
    }
    if (v7 == 63)
    {
      uint64_t v20 = a2 + 1;
      if (v6) {
        BOOL v21 = 1;
      }
      else {
        BOOL v21 = v20 == a3;
      }
      if (!v21 && *v20 == 63)
      {
        __mexp_std::vector<std::csub_match>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
        size_t v9 = 0;
        size_t v17 = 1;
        goto LABEL_42;
      }
      __mexp_std::vector<std::csub_match>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
      size_t v9 = 0;
      size_t v17 = 1;
      goto LABEL_72;
    }
    if (v7 != 123) {
      return;
    }
    uint64_t v10 = a2 + 1;
    if (a2 + 1 == a3) {
      goto LABEL_75;
    }
    int v11 = *v10;
    if ((v11 & 0xF8) != 0x30 && (v11 & 0xFE) != 0x38) {
      goto LABEL_75;
    }
    int v12 = v11 - 48;
    unint64_t v13 = a2 + 2;
    if (a2 + 2 == a3)
    {
LABEL_20:
      unint64_t v13 = a3;
    }
    else
    {
      while (1)
      {
        int v14 = *v13;
        if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38) {
          break;
        }
        if (v12 >= 214748364) {
          goto LABEL_75;
        }
        int v12 = v14 + 10 * v12 - 48;
        if (++v13 == a3) {
          goto LABEL_20;
        }
      }
    }
    if (v13 == v10) {
      goto LABEL_75;
    }
    if (v13 != a3)
    {
      int v15 = *v13;
      if (v15 != 44)
      {
        if (v15 == 125)
        {
          uint64_t v16 = v13 + 1;
          if (!v6 && v16 != a3 && *v16 == 63)
          {
            size_t v9 = v12;
            __mexp_std::vector<std::csub_match>::pointer begin = __mexp_begin;
            __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
            size_t v17 = v12;
LABEL_42:
            BOOL v22 = 0;
LABEL_73:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v9, v17, a4, __mexp_begin, __mexp_end, v22);
            return;
          }
          size_t v9 = v12;
          __mexp_std::vector<std::csub_match>::pointer begin = __mexp_begin;
          __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
          size_t v17 = v12;
LABEL_72:
          BOOL v22 = 1;
          goto LABEL_73;
        }
        goto LABEL_75;
      }
      uint64_t v23 = v13 + 1;
      if (v13 + 1 == a3)
      {
LABEL_75:
        std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
        goto LABEL_76;
      }
      int v24 = *v23;
      if (v24 == 125)
      {
        uint64_t v25 = v13 + 2;
        if (!v6 && v25 != a3 && *v25 == 63)
        {
          size_t v9 = v12;
          __mexp_std::vector<std::csub_match>::pointer begin = __mexp_begin;
          __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
          goto LABEL_35;
        }
        size_t v9 = v12;
        __mexp_std::vector<std::csub_match>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
LABEL_45:
        size_t v17 = -1;
        goto LABEL_72;
      }
      if ((v24 & 0xF8) == 0x30 || (v24 & 0xFE) == 0x38)
      {
        int v26 = v24 - 48;
        uint64_t v27 = v13 + 2;
        if (v27 == a3)
        {
LABEL_61:
          uint64_t v27 = a3;
        }
        else
        {
          while (1)
          {
            int v28 = *v27;
            if ((v28 & 0xF8) != 0x30 && (v28 & 0xFE) != 0x38) {
              break;
            }
            if (v26 >= 214748364) {
              goto LABEL_75;
            }
            int v26 = v28 + 10 * v26 - 48;
            if (++v27 == a3) {
              goto LABEL_61;
            }
          }
        }
        if (v27 != v23 && v27 != a3 && *v27 == 125)
        {
          if (v26 >= v12)
          {
            unint64_t v29 = v27 + 1;
            if (!v6 && v29 != a3 && *v29 == 63)
            {
              size_t v9 = v12;
              size_t v17 = v26;
              __mexp_std::vector<std::csub_match>::pointer begin = __mexp_begin;
              __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
              goto LABEL_42;
            }
            size_t v9 = v12;
            size_t v17 = v26;
            __mexp_std::vector<std::csub_match>::pointer begin = __mexp_begin;
            __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
            goto LABEL_72;
          }
          goto LABEL_75;
        }
      }
    }
LABEL_76:
    unint64_t v30 = (std::basic_regex<char> *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(v30, v31, v32, v33, v34, v35, v36);
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
}

void sub_1A26BB890(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EF57F3B0;
  unint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  BOOL v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1A6239270);
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1A6239270);
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((v3 = *v2, v3 != 13) ? (BOOL v4 = v3 == 10) : (BOOL v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  return result;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1A6239270);
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 92))
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 80) = *(void *)(result + 8);
    return result;
  }
  if (*(void *)(a2 + 16) == *(void *)(a2 + 8) && (*(unsigned char *)(a2 + 88) & 1) == 0) {
    goto LABEL_11;
  }
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(void *)(a2 + 80) = 0;
  return result;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1A6239270);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  unint64_t v5 = a3 - 2;
  int v6 = a2;
  for (i = a2; ; int v6 = i)
  {
    int v8 = *i++;
    if (v8 == 46 && *i == 93) {
      break;
    }
    if (a2 == v5) {
      goto LABEL_15;
    }
    --v5;
  }
  if (v6 == a3)
  {
LABEL_15:
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
    goto LABEL_16;
  }
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)&v12, a1, a2, v6);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v12;
  unint64_t v9 = v13;
  *(void *)(a4 + 16) = v13;
  unint64_t v10 = HIBYTE(v9);
  if ((v10 & 0x80u) != 0) {
    unint64_t v10 = *(void *)(a4 + 8);
  }
  if (v10 - 1 >= 2)
  {
LABEL_16:
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
    JUMPOUT(0x1A26BBF60);
  }
  return v6 + 2;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:nn180100](uint64_t a1, char *a2, char *a3)
{
  int v3 = a3;
  BOOL v4 = a2;
  if (!*(unsigned char *)(a1 + 170))
  {
    uint64_t v14 = a2[23];
    if (a2[23] < 0)
    {
      if (*((void *)a2 + 1) != 1) {
        goto LABEL_72;
      }
    }
    else if (v14 != 1)
    {
      goto LABEL_72;
    }
    if (a3[23] < 0)
    {
      if (*((void *)a3 + 1) == 1) {
        goto LABEL_53;
      }
    }
    else if (a3[23] == 1)
    {
LABEL_53:
      if (*(unsigned char *)(a1 + 169))
      {
        unint64_t v29 = a2;
        if ((v14 & 0x80) != 0) {
          unint64_t v29 = *(char **)a2;
        }
        char v30 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v29);
        size_t v31 = v4;
        if (v4[23] < 0) {
          size_t v31 = *(unsigned char **)v4;
        }
        *size_t v31 = v30;
        size_t v32 = v3;
        if (v3[23] < 0) {
          size_t v32 = *(char **)v3;
        }
        char v33 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v32);
        size_t v34 = v3;
        if (v3[23] < 0) {
          size_t v34 = *(unsigned char **)v3;
        }
        unsigned char *v34 = v33;
      }
      *(_OWORD *)std::string __p = *(_OWORD *)v4;
      uint64_t v45 = *((void *)v4 + 2);
      *((void *)v4 + 1) = 0;
      *((void *)v4 + 2) = 0;
      *(void *)BOOL v4 = 0;
      *(_OWORD *)unint64_t v46 = *(_OWORD *)v3;
      uint64_t v47 = *((void *)v3 + 2);
      *((void *)v3 + 1) = 0;
      *((void *)v3 + 2) = 0;
      *(void *)int v3 = 0;
      unint64_t v35 = *(void *)(a1 + 96);
      if (v35 >= *(void *)(a1 + 104))
      {
        unint64_t v38 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
        int v39 = SHIBYTE(v47);
        *(void *)(a1 + 96) = v38;
        if (v39 < 0)
        {
          operator delete(v46[0]);
          if ((SHIBYTE(v45) & 0x80000000) == 0) {
            return;
          }
        }
        else if ((SHIBYTE(v45) & 0x80000000) == 0)
        {
          return;
        }
      }
      else
      {
        long long v36 = *(_OWORD *)__p;
        *(void *)(v35 + 16) = v45;
        *(_OWORD *)unint64_t v35 = v36;
        __p[1] = 0;
        uint64_t v45 = 0;
        __p[0] = 0;
        uint64_t v37 = v47;
        *(_OWORD *)(v35 + 24) = *(_OWORD *)v46;
        *(void *)(v35 + 40) = v37;
        *(void *)(a1 + 96) = v35 + 48;
        if ((SHIBYTE(v45) & 0x80000000) == 0) {
          return;
        }
      }
      int v28 = __p[0];
LABEL_69:
      operator delete(v28);
      return;
    }
LABEL_72:
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
    goto LABEL_73;
  }
  if (*(unsigned char *)(a1 + 169))
  {
    for (unint64_t i = 0; ; ++i)
    {
      if (v4[23] < 0)
      {
        if (i >= *((void *)v4 + 1))
        {
LABEL_12:
          for (unint64_t j = 0; ; ++j)
          {
            if (v3[23] < 0)
            {
              if (j >= *((void *)v3 + 1)) {
                goto LABEL_34;
              }
              int v11 = *(char **)v3;
            }
            else
            {
              int v11 = v3;
              if (j >= v3[23]) {
                goto LABEL_34;
              }
            }
            char v12 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v11[j]);
            unint64_t v13 = v3;
            if (v3[23] < 0) {
              unint64_t v13 = *(char **)v3;
            }
            v13[j] = v12;
          }
        }
        int v7 = *(char **)v4;
      }
      else
      {
        int v7 = v4;
        if (i >= v4[23]) {
          goto LABEL_12;
        }
      }
      char v8 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v7[i]);
      unint64_t v9 = v4;
      if (v4[23] < 0) {
        unint64_t v9 = *(char **)v4;
      }
      v9[i] = v8;
    }
  }
  unint64_t v15 = 0;
  unint64_t v16 = a2[23];
  while ((v16 & 0x80) != 0)
  {
    if (v15 >= *((void *)a2 + 1)) {
      goto LABEL_29;
    }
LABEL_26:
    ++v15;
  }
  if (v15 < v16) {
    goto LABEL_26;
  }
LABEL_29:
  unint64_t v17 = 0;
  unint64_t v18 = a3[23];
  while ((v18 & 0x80) != 0)
  {
    if (v17 >= *((void *)a3 + 1)) {
      goto LABEL_34;
    }
LABEL_31:
    ++v17;
  }
  if (v17 < v18) {
    goto LABEL_31;
  }
LABEL_34:
  if (v4[23] < 0)
  {
    uint64_t v20 = v4;
    BOOL v4 = *(char **)v4;
    uint64_t v19 = *((void *)v20 + 1);
  }
  else
  {
    uint64_t v19 = v4[23];
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)&v42, a1 + 16, v4, &v4[v19]);
  if (v3[23] < 0)
  {
    BOOL v22 = v3;
    int v3 = *(char **)v3;
    uint64_t v21 = *((void *)v22 + 1);
  }
  else
  {
    uint64_t v21 = v3[23];
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)v40, a1 + 16, v3, &v3[v21]);
  *(_OWORD *)std::string __p = v42;
  uint64_t v45 = v43;
  uint64_t v43 = 0;
  *(_OWORD *)unint64_t v46 = *(_OWORD *)v40;
  uint64_t v47 = v41;
  v40[0] = 0;
  v40[1] = 0;
  uint64_t v41 = 0;
  long long v42 = 0uLL;
  unint64_t v23 = *(void *)(a1 + 96);
  if (v23 >= *(void *)(a1 + 104))
  {
    int v26 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
    int v27 = SHIBYTE(v47);
    *(void *)(a1 + 96) = v26;
    if ((v27 & 0x80000000) == 0)
    {
      if ((SHIBYTE(v45) & 0x80000000) == 0) {
        goto LABEL_47;
      }
      goto LABEL_42;
    }
LABEL_73:
    operator delete(v46[0]);
    if ((SHIBYTE(v45) & 0x80000000) == 0) {
      goto LABEL_47;
    }
LABEL_42:
    operator delete(__p[0]);
    if ((SHIBYTE(v41) & 0x80000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_43;
  }
  long long v24 = *(_OWORD *)__p;
  *(void *)(v23 + 16) = v45;
  *(_OWORD *)unint64_t v23 = v24;
  __p[1] = 0;
  uint64_t v45 = 0;
  __p[0] = 0;
  uint64_t v25 = v47;
  *(_OWORD *)(v23 + 24) = *(_OWORD *)v46;
  *(void *)(v23 + 40) = v25;
  *(void *)(a1 + 96) = v23 + 48;
  if (SHIBYTE(v45) < 0) {
    goto LABEL_42;
  }
LABEL_47:
  if (SHIBYTE(v41) < 0)
  {
LABEL_43:
    operator delete(v40[0]);
    if ((SHIBYTE(v43) & 0x80000000) == 0) {
      return;
    }
LABEL_49:
    int v28 = (void *)v42;
    goto LABEL_69;
  }
LABEL_48:
  if (SHIBYTE(v43) < 0) {
    goto LABEL_49;
  }
}

void sub_1A26BCA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A26BCA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:nn180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 169))
  {
    __int16 v10 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    char v12 = *(char **)(a1 + 120);
    unint64_t v11 = *(void *)(a1 + 128);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v12 >= v11)
      {
        unint64_t v13 = *(char **)(a1 + 112);
        uint64_t v14 = v12 - v13;
        if (v12 - v13 <= -3) {
          goto LABEL_73;
        }
        uint64_t v15 = v14 >> 1;
        unint64_t v16 = v11 - (void)v13;
        if (v16 <= (v14 >> 1) + 1) {
          unint64_t v17 = v15 + 1;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v16 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v18 = v17;
        }
        if (v18)
        {
          if (v18 < 0) {
            goto LABEL_74;
          }
          uint64_t v19 = operator new(2 * v18);
        }
        else
        {
          uint64_t v19 = 0;
        }
        uint64_t v43 = &v19[2 * v15];
        int64_t v44 = &v19[2 * v18];
        *uint64_t v43 = v10;
        unint64_t v9 = v43 + 1;
        if (v12 != v13)
        {
          unint64_t v45 = v12 - v13 - 2;
          if (v45 < 0x1E) {
            goto LABEL_77;
          }
          if (v12 - v19 - (v14 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
            goto LABEL_77;
          }
          uint64_t v46 = (v45 >> 1) + 1;
          uint64_t v47 = &v19[2 * v15 - 16];
          uint64_t v48 = v12 - 16;
          unint64_t v49 = v46 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            long long v50 = *(_OWORD *)v48;
            *(v47 - 1) = *((_OWORD *)v48 - 1);
            _OWORD *v47 = v50;
            v47 -= 2;
            v48 -= 32;
            v49 -= 16;
          }
          while (v49);
          v43 -= v46 & 0xFFFFFFFFFFFFFFF0;
          v12 -= 2 * (v46 & 0xFFFFFFFFFFFFFFF0);
          if (v46 != (v46 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_77:
            do
            {
              __int16 v51 = *((_WORD *)v12 - 1);
              v12 -= 2;
              *--uint64_t v43 = v51;
            }
            while (v12 != v13);
LABEL_68:
            unint64_t v13 = *(char **)(a1 + 112);
            goto LABEL_70;
          }
          goto LABEL_70;
        }
        goto LABEL_69;
      }
    }
    else if ((unint64_t)v12 >= v11)
    {
      unint64_t v13 = *(char **)(a1 + 112);
      uint64_t v37 = v12 - v13;
      if (v12 - v13 <= -3) {
        goto LABEL_73;
      }
      uint64_t v38 = v37 >> 1;
      unint64_t v39 = v11 - (void)v13;
      if (v39 <= (v37 >> 1) + 1) {
        unint64_t v40 = v38 + 1;
      }
      else {
        unint64_t v40 = v39;
      }
      if (v39 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v41 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v41 = v40;
      }
      if (v41)
      {
        if (v41 < 0) {
          goto LABEL_74;
        }
        long long v42 = operator new(2 * v41);
      }
      else
      {
        long long v42 = 0;
      }
      uint64_t v43 = &v42[2 * v38];
      int64_t v44 = &v42[2 * v41];
      *uint64_t v43 = v10;
      unint64_t v9 = v43 + 1;
      if (v12 != v13)
      {
        unint64_t v52 = v12 - v13 - 2;
        if (v52 < 0x1E) {
          goto LABEL_78;
        }
        if (v12 - v42 - (v37 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
          goto LABEL_78;
        }
        uint64_t v53 = (v52 >> 1) + 1;
        uint64_t v54 = &v42[2 * v38 - 16];
        unint64_t v55 = v12 - 16;
        unint64_t v56 = v53 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          long long v57 = *(_OWORD *)v55;
          *(v54 - 1) = *((_OWORD *)v55 - 1);
          *uint64_t v54 = v57;
          v54 -= 2;
          v55 -= 32;
          v56 -= 16;
        }
        while (v56);
        v43 -= v53 & 0xFFFFFFFFFFFFFFF0;
        v12 -= 2 * (v53 & 0xFFFFFFFFFFFFFFF0);
        if (v53 != (v53 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_78:
          do
          {
            __int16 v58 = *((_WORD *)v12 - 1);
            v12 -= 2;
            *--uint64_t v43 = v58;
          }
          while (v12 != v13);
          goto LABEL_68;
        }
LABEL_70:
        *(void *)(a1 + 112) = v43;
        *(void *)(a1 + 120) = v9;
        *(void *)(a1 + 128) = v44;
        if (v13) {
          operator delete(v13);
        }
        goto LABEL_72;
      }
LABEL_69:
      unint64_t v13 = v12;
      goto LABEL_70;
    }
    *(_WORD *)char v12 = v10;
    unint64_t v9 = v12 + 2;
    goto LABEL_72;
  }
  unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  __int16 v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3) << 8);
  char v8 = *(char **)(a1 + 120);
  unint64_t v7 = *(void *)(a1 + 128);
  if ((unint64_t)v8 < v7)
  {
    *(_WORD *)char v8 = v6;
    unint64_t v9 = v8 + 2;
LABEL_72:
    *(void *)(a1 + 120) = v9;
    return;
  }
  uint64_t v20 = *(char **)(a1 + 112);
  uint64_t v21 = v8 - v20;
  if (v8 - v20 <= -3) {
LABEL_73:
  }
    abort();
  uint64_t v22 = v21 >> 1;
  unint64_t v23 = v7 - (void)v20;
  if (v23 <= (v21 >> 1) + 1) {
    unint64_t v24 = v22 + 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v23 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v25 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v25 = v24;
  }
  if (!v25)
  {
    int v26 = 0;
    goto LABEL_29;
  }
  if (v25 < 0) {
LABEL_74:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  int v26 = operator new(2 * v25);
LABEL_29:
  int v27 = &v26[2 * v22];
  int v28 = &v26[2 * v25];
  *int v27 = v6;
  unint64_t v29 = v27 + 1;
  if (v8 == v20)
  {
    uint64_t v20 = v8;
  }
  else
  {
    unint64_t v30 = v8 - v20 - 2;
    if (v30 < 0x1E) {
      goto LABEL_79;
    }
    if (v8 - v26 - (v21 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
      goto LABEL_79;
    }
    uint64_t v31 = (v30 >> 1) + 1;
    size_t v32 = &v26[2 * v22 - 16];
    char v33 = v8 - 16;
    unint64_t v34 = v31 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v35 = *(_OWORD *)v33;
      *(v32 - 1) = *((_OWORD *)v33 - 1);
      _OWORD *v32 = v35;
      v32 -= 2;
      v33 -= 32;
      v34 -= 16;
    }
    while (v34);
    v27 -= v31 & 0xFFFFFFFFFFFFFFF0;
    v8 -= 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
    if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_79:
      do
      {
        __int16 v36 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--int v27 = v36;
      }
      while (v8 != v20);
      uint64_t v20 = *(char **)(a1 + 112);
    }
  }
  *(void *)(a1 + 112) = v27;
  *(void *)(a1 + 120) = v29;
  *(void *)(a1 + 128) = v28;
  if (v20) {
    operator delete(v20);
  }
  *(void *)(a1 + 120) = v29;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v4 = a4 - a3;
  if ((unint64_t)(a4 - a3) >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  __int16 v6 = a3;
  if (v4 <= 0x16)
  {
    HIBYTE(v22) = (_BYTE)a4 - (_BYTE)a3;
    p_p = &__p;
    if (a3 == a4) {
      goto LABEL_18;
    }
LABEL_8:
    if (v4 < 0x20 || (unint64_t)(p_p - v6) < 0x20)
    {
      char v12 = p_p;
    }
    else
    {
      unint64_t v11 = v4 & 0xFFFFFFFFFFFFFFE0;
      char v12 = &p_p[v4 & 0xFFFFFFFFFFFFFFE0];
      unint64_t v13 = (long long *)(v6 + 16);
      uint64_t v14 = p_p + 16;
      unint64_t v15 = v4 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v16 = *v13;
        *(v14 - 1) = *(v13 - 1);
        _OWORD *v14 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 32;
      }
      while (v15);
      if (v4 == v11)
      {
        p_p += v4 & 0xFFFFFFFFFFFFFFE0;
        goto LABEL_18;
      }
      v6 += v11;
    }
    p_p = v12;
    do
    {
      char v17 = *v6++;
      *p_p++ = v17;
    }
    while (v6 != a4);
    goto LABEL_18;
  }
  uint64_t v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17) {
    uint64_t v9 = v4 | 7;
  }
  uint64_t v10 = v9 + 1;
  p_p = operator new(v9 + 1);
  unint64_t v21 = v4;
  int64_t v22 = v10 | 0x8000000000000000;
  std::string __p = p_p;
  if (v6 != a4) {
    goto LABEL_8;
  }
LABEL_18:
  unsigned char *p_p = 0;
  unint64_t v18 = HIBYTE(v22);
  if (v22 >= 0) {
    uint64_t v19 = (char *)&__p;
  }
  else {
    uint64_t v19 = (char *)__p;
  }
  if (v22 < 0) {
    unint64_t v18 = v21;
  }
  (*(void (**)(void, char *, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v19, &v19[v18]);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p);
  }
}

void sub_1A26BCFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>(void **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555) {
    abort();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  char v8 = &v7[48 * v2];
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(_OWORD *)char v8 = *(_OWORD *)a2;
  uint64_t v9 = &v7[48 * v6];
  long long v10 = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((void *)v8 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  unint64_t v11 = v8 + 48;
  char v12 = (void **)*a1;
  unint64_t v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      long long v14 = *((_OWORD *)v13 - 3);
      *((void *)v8 - 4) = *(v13 - 4);
      *((_OWORD *)v8 - 3) = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      long long v15 = *(_OWORD *)(v13 - 3);
      *((void *)v8 - 1) = *(v13 - 1);
      *(_OWORD *)(v8 - 24) = v15;
      v8 -= 48;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    unint64_t v13 = (void **)*a1;
    long long v16 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v16 == v13) {
        goto LABEL_22;
      }
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 25) & 0x80000000) == 0) {
          goto LABEL_14;
        }
      }
      else if ((*((char *)v16 - 25) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(*(v16 - 6));
LABEL_14:
      v16 -= 6;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_22:
  if (v13) {
    operator delete(v13);
  }
  return v11;
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
LABEL_5:
    operator delete(*(void **)a1);
    return a1;
  }
  if (*(char *)(a1 + 23) < 0) {
    goto LABEL_5;
  }
  return a1;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EF57F620;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1A6239270);
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EF57F620;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    uint64_t v5 = *(void *)(v4 + 8);
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EF57F468;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1A6239270);
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EF57F468;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:nn180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 169))
  {
    unint64_t v7 = *(unsigned char **)(a1 + 72);
    unint64_t v6 = *(void *)(a1 + 80);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v7 >= v6)
      {
        char v8 = *(unsigned char **)(a1 + 64);
        unint64_t v9 = v7 - v8;
        uint64_t v10 = v7 - v8 + 1;
        if (v10 < 0) {
          goto LABEL_96;
        }
        unint64_t v11 = v6 - (void)v8;
        if (2 * v11 > v10) {
          uint64_t v10 = 2 * v11;
        }
        if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v12 = v10;
        }
        if (v12) {
          unint64_t v13 = operator new(v12);
        }
        else {
          unint64_t v13 = 0;
        }
        unint64_t v29 = (char *)v13 + v9;
        unint64_t v30 = (char *)v13 + v12;
        *((unsigned char *)v13 + v9) = 95;
        uint64_t v20 = (uint64_t)v13 + v9 + 1;
        if (v7 != v8)
        {
          if (v9 < 8 || (unint64_t)(v8 - (unsigned char *)v13) < 0x20) {
            goto LABEL_86;
          }
          if (v9 >= 0x20)
          {
            unint64_t v31 = v9 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v41 = (long long *)(v7 - 16);
            long long v42 = (char *)v13 + v7 - 16 - v8;
            unint64_t v43 = v9 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v44 = *v41;
              *(v42 - 1) = *(v41 - 1);
              _OWORD *v42 = v44;
              v42 -= 2;
              v41 -= 2;
              v43 -= 32;
            }
            while (v43);
            if (v9 == v31) {
              goto LABEL_76;
            }
            if ((v9 & 0x18) == 0)
            {
              v29 -= v31;
              v7 -= v31;
LABEL_86:
              int64_t v59 = v29 - 1;
              do
              {
                char v60 = *--v7;
                *v59-- = v60;
              }
              while (v7 != v8);
LABEL_92:
              unint64_t v7 = *(unsigned char **)(a1 + 64);
LABEL_93:
              *(void *)(a1 + 64) = v13;
              *(void *)(a1 + 72) = v20;
              *(void *)(a1 + 80) = v30;
              if (v7) {
                operator delete(v7);
              }
              goto LABEL_95;
            }
          }
          else
          {
            unint64_t v31 = 0;
          }
          unint64_t v45 = v31 - (v9 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v46 = &v7[-v31 - 8];
          uint64_t v47 = (char *)(v46 - v8);
          do
          {
            uint64_t v48 = *(void *)v46;
            v46 -= 8;
            *(void *)&v47[(void)v13] = v48;
            v47 -= 8;
            v45 += 8;
          }
          while (v45);
          if (v9 != (v9 & 0xFFFFFFFFFFFFFFF8))
          {
            v29 -= v9 & 0xFFFFFFFFFFFFFFF8;
            v7 -= v9 & 0xFFFFFFFFFFFFFFF8;
            goto LABEL_86;
          }
LABEL_76:
          unint64_t v7 = v8;
          goto LABEL_93;
        }
LABEL_51:
        unint64_t v13 = v29;
        goto LABEL_93;
      }
LABEL_23:
      *unint64_t v7 = 95;
      uint64_t v20 = (uint64_t)(v7 + 1);
LABEL_95:
      *(void *)(a1 + 72) = v20;
      return;
    }
    if ((unint64_t)v7 < v6) {
      goto LABEL_23;
    }
    char v8 = *(unsigned char **)(a1 + 64);
    unint64_t v25 = v7 - v8;
    uint64_t v26 = v7 - v8 + 1;
    if (v26 < 0) {
      goto LABEL_96;
    }
    unint64_t v27 = v6 - (void)v8;
    if (2 * v27 > v26) {
      uint64_t v26 = 2 * v27;
    }
    if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v28 = v26;
    }
    if (v28) {
      unint64_t v13 = operator new(v28);
    }
    else {
      unint64_t v13 = 0;
    }
    unint64_t v29 = (char *)v13 + v25;
    unint64_t v30 = (char *)v13 + v28;
    *((unsigned char *)v13 + v25) = 95;
    uint64_t v20 = (uint64_t)v13 + v25 + 1;
    if (v7 == v8) {
      goto LABEL_51;
    }
    if (v25 >= 8 && (unint64_t)(v8 - (unsigned char *)v13) >= 0x20)
    {
      if (v25 >= 0x20)
      {
        unint64_t v32 = v25 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v49 = (long long *)(v7 - 16);
        long long v50 = (char *)v13 + v7 - 16 - v8;
        unint64_t v51 = v25 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v52 = *v49;
          *(v50 - 1) = *(v49 - 1);
          *long long v50 = v52;
          v50 -= 2;
          v49 -= 2;
          v51 -= 32;
        }
        while (v51);
        if (v25 == v32) {
          goto LABEL_76;
        }
        if ((v25 & 0x18) == 0)
        {
          v29 -= v32;
          v7 -= v32;
          goto LABEL_90;
        }
      }
      else
      {
        unint64_t v32 = 0;
      }
      unint64_t v53 = v32 - (v25 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v54 = &v7[-v32 - 8];
      unint64_t v55 = (char *)(v54 - v8);
      do
      {
        uint64_t v56 = *(void *)v54;
        v54 -= 8;
        *(void *)&v55[(void)v13] = v56;
        v55 -= 8;
        v53 += 8;
      }
      while (v53);
      if (v25 == (v25 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_76;
      }
      v29 -= v25 & 0xFFFFFFFFFFFFFFF8;
      v7 -= v25 & 0xFFFFFFFFFFFFFFF8;
    }
LABEL_90:
    uint64_t v61 = v29 - 1;
    do
    {
      char v62 = *--v7;
      *v61-- = v62;
    }
    while (v7 != v8);
    goto LABEL_92;
  }
  char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), 95);
  char v3 = v2;
  uint64_t v5 = *(unsigned char **)(a1 + 72);
  unint64_t v4 = *(void *)(a1 + 80);
  if ((unint64_t)v5 < v4)
  {
    *uint64_t v5 = v2;
    *(void *)(a1 + 72) = v5 + 1;
    return;
  }
  long long v14 = *(unsigned char **)(a1 + 64);
  unint64_t v15 = v5 - v14;
  uint64_t v16 = v5 - v14 + 1;
  if (v16 < 0) {
LABEL_96:
  }
    abort();
  unint64_t v17 = v4 - (void)v14;
  if (2 * v17 > v16) {
    uint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    uint64_t v19 = operator new(v18);
  }
  else {
    uint64_t v19 = 0;
  }
  unint64_t v21 = (char *)v19 + v15;
  int64_t v22 = (char *)v19 + v18;
  *((unsigned char *)v19 + v15) = v3;
  uint64_t v23 = (uint64_t)v19 + v15 + 1;
  if (v5 == v14)
  {
    uint64_t v19 = (char *)v19 + v15;
    goto LABEL_81;
  }
  if (v15 >= 8 && (unint64_t)(v14 - (unsigned char *)v19) >= 0x20)
  {
    if (v15 < 0x20)
    {
      unint64_t v24 = 0;
      goto LABEL_56;
    }
    unint64_t v24 = v15 & 0xFFFFFFFFFFFFFFE0;
    char v33 = (long long *)(v5 - 16);
    unint64_t v34 = (char *)v19 + v5 - 16 - v14;
    unint64_t v35 = v15 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v36 = *v33;
      *(v34 - 1) = *(v33 - 1);
      _OWORD *v34 = v36;
      v34 -= 2;
      v33 -= 2;
      v35 -= 32;
    }
    while (v35);
    if (v15 == v24) {
      goto LABEL_59;
    }
    if ((v15 & 0x18) != 0)
    {
LABEL_56:
      unint64_t v37 = v24 - (v15 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v38 = &v5[-v24 - 8];
      unint64_t v39 = (char *)(v38 - v14);
      do
      {
        uint64_t v40 = *(void *)v38;
        v38 -= 8;
        *(void *)&v39[(void)v19] = v40;
        v39 -= 8;
        v37 += 8;
      }
      while (v37);
      if (v15 == (v15 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_59:
        uint64_t v5 = v14;
        goto LABEL_81;
      }
      v21 -= v15 & 0xFFFFFFFFFFFFFFF8;
      v5 -= v15 & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_78;
    }
    v21 -= v24;
    v5 -= v24;
  }
LABEL_78:
  long long v57 = v21 - 1;
  do
  {
    char v58 = *--v5;
    *v57-- = v58;
  }
  while (v5 != v14);
  uint64_t v5 = *(unsigned char **)(a1 + 64);
LABEL_81:
  *(void *)(a1 + 64) = v19;
  *(void *)(a1 + 72) = v23;
  *(void *)(a1 + 80) = v22;
  if (v5) {
    operator delete(v5);
  }
  *(void *)(a1 + 72) = v23;
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v4 = a4 - a3;
  if ((unint64_t)(a4 - a3) >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  unint64_t v6 = a3;
  if (v4 > 0x16)
  {
    uint64_t v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v10 = v4 | 7;
    }
    uint64_t v11 = v10 + 1;
    unint64_t v9 = (char *)operator new(v10 + 1);
    __s[1] = (char *)v4;
    int64_t v28 = v11 | 0x8000000000000000;
    __s[0] = v9;
    if (v6 == a4) {
      goto LABEL_18;
    }
  }
  else
  {
    HIBYTE(v28) = (_BYTE)a4 - (_BYTE)a3;
    unint64_t v9 = (char *)__s;
    if (a3 == a4) {
      goto LABEL_18;
    }
  }
  if (v4 < 0x20 || (unint64_t)(v9 - v6) < 0x20)
  {
    unint64_t v13 = v9;
  }
  else
  {
    unint64_t v12 = v4 & 0xFFFFFFFFFFFFFFE0;
    unint64_t v13 = &v9[v4 & 0xFFFFFFFFFFFFFFE0];
    long long v14 = (long long *)(v6 + 16);
    unint64_t v15 = v9 + 16;
    unint64_t v16 = v4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v17 = *v14;
      *(v15 - 1) = *(v14 - 1);
      _OWORD *v15 = v17;
      v14 += 2;
      v15 += 2;
      v16 -= 32;
    }
    while (v16);
    if (v4 == v12)
    {
      v9 += v4 & 0xFFFFFFFFFFFFFFE0;
      goto LABEL_18;
    }
    v6 += v12;
  }
  unint64_t v9 = v13;
  do
  {
    char v18 = *v6++;
    *v9++ = v18;
  }
  while (v6 != a4);
LABEL_18:
  *unint64_t v9 = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (SHIBYTE(v28) < 0)
  {
    if (!__s[1]) {
      goto LABEL_26;
    }
    uint64_t v19 = __s[0];
  }
  else
  {
    if (!HIBYTE(v28)) {
      return;
    }
    uint64_t v19 = (const char *)__s;
  }
  std::__get_collation_name(&v26, v19);
  *(_OWORD *)a1 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  unint64_t v20 = v26.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 16) = *((void *)&v26.__r_.__value_.__l + 2);
  unint64_t v21 = HIBYTE(v20);
  if ((v21 & 0x80u) != 0) {
    unint64_t v21 = *(void *)(a1 + 8);
  }
  if (v21) {
    goto LABEL_26;
  }
  if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
    if (HIBYTE(v28) >= 3u) {
      return;
    }
    goto LABEL_32;
  }
  if (__s[1] < (char *)3)
  {
LABEL_32:
    (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v26);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(std::string *)a1 = v26;
    if (*(char *)(a1 + 23) < 0)
    {
      uint64_t v23 = *(void *)(a1 + 8);
      if (v23 == 1 || v23 == 12)
      {
        if (__s != (char **)a1)
        {
          if (v28 >= 0) {
            unint64_t v24 = __s;
          }
          else {
            unint64_t v24 = (char **)__s[0];
          }
          if (v28 >= 0) {
            size_t v25 = HIBYTE(v28);
          }
          else {
            size_t v25 = (size_t)__s[1];
          }
          std::string::__assign_no_alias<false>((void **)a1, v24, v25);
        }
      }
      else
      {
        **(unsigned char **)a1 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
    else
    {
      int v22 = *(unsigned __int8 *)(a1 + 23);
      if (v22 == 1 || v22 == 12)
      {
        if (__s != (char **)a1)
        {
          if (SHIBYTE(v28) < 0)
          {
            std::string::__assign_no_alias<true>((void *)a1, __s[0], (size_t)__s[1]);
          }
          else
          {
            *(_OWORD *)a1 = *(_OWORD *)__s;
            *(void *)(a1 + 16) = v28;
          }
        }
      }
      else
      {
        *(unsigned char *)a1 = 0;
        *(unsigned char *)(a1 + 23) = 0;
      }
    }
  }
LABEL_26:
  if (SHIBYTE(v28) < 0) {
    operator delete(__s[0]);
  }
}

void sub_1A26BE19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if (a17 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a17 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v4 = a4 - a3;
  if ((unint64_t)(a4 - a3) >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  unint64_t v6 = a3;
  if (v4 <= 0x16)
  {
    HIBYTE(v26) = (_BYTE)a4 - (_BYTE)a3;
    p_p = &__p;
    if (a3 == a4) {
      goto LABEL_18;
    }
LABEL_8:
    if (v4 < 0x20 || (unint64_t)(p_p - v6) < 0x20)
    {
      unint64_t v13 = p_p;
    }
    else
    {
      unint64_t v12 = v4 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v13 = &p_p[v4 & 0xFFFFFFFFFFFFFFE0];
      long long v14 = (long long *)(v6 + 16);
      unint64_t v15 = p_p + 16;
      unint64_t v16 = v4 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        _OWORD *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v4 == v12)
      {
        p_p += v4 & 0xFFFFFFFFFFFFFFE0;
        goto LABEL_18;
      }
      v6 += v12;
    }
    p_p = v13;
    do
    {
      char v18 = *v6++;
      *p_p++ = v18;
    }
    while (v6 != a4);
    goto LABEL_18;
  }
  uint64_t v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17) {
    uint64_t v10 = v4 | 7;
  }
  uint64_t v11 = v10 + 1;
  p_p = operator new(v10 + 1);
  unint64_t v25 = v4;
  int64_t v26 = v11 | 0x8000000000000000;
  std::string __p = p_p;
  if (v6 != a4) {
    goto LABEL_8;
  }
LABEL_18:
  unsigned char *p_p = 0;
  unint64_t v19 = HIBYTE(v26);
  if (v26 >= 0) {
    unint64_t v20 = (char *)&__p;
  }
  else {
    unint64_t v20 = (char *)__p;
  }
  if (v26 < 0) {
    unint64_t v19 = v25;
  }
  (*(void (**)(void, char *, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v20, &v20[v19]);
  uint64_t v21 = *(unsigned __int8 *)(a1 + 23);
  int v22 = (char)v21;
  if ((v21 & 0x80u) != 0) {
    uint64_t v21 = *(void *)(a1 + 8);
  }
  if (v21 == 1)
  {
LABEL_34:
    if ((SHIBYTE(v26) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_35;
  }
  if (v21 == 12)
  {
    if (v22 >= 0) {
      uint64_t v23 = (unsigned char *)a1;
    }
    else {
      uint64_t v23 = *(unsigned char **)a1;
    }
    v23[11] = v23[3];
    if (SHIBYTE(v26) < 0) {
      goto LABEL_35;
    }
    return;
  }
  if ((v22 & 0x80000000) == 0)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 23) = 0;
    goto LABEL_34;
  }
  **(unsigned char **)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (SHIBYTE(v26) < 0) {
LABEL_35:
  }
    operator delete(__p);
}

void sub_1A26BE3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::pair<std::string,std::string>>::~vector[abi:nn180100](void **a1)
{
  char v2 = (void **)*a1;
  if (*a1)
  {
    char v3 = (void **)a1[1];
    unint64_t v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0) {
LABEL_9:
        }
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        unint64_t v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1, uint64_t a2, unsigned char *__src, unsigned char *a4)
{
  size_t v4 = a4 - __src;
  if ((unint64_t)(a4 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v4 <= 0x16)
  {
    HIBYTE(v19) = (_BYTE)a4 - (_BYTE)__src;
    p_dst = (void **)&__dst;
    if (__src == a4) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(p_dst, __src, v4);
    p_dst = (void **)((char *)p_dst + v4);
    goto LABEL_9;
  }
  uint64_t v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17) {
    uint64_t v10 = v4 | 7;
  }
  uint64_t v11 = v10 + 1;
  p_dst = (void **)operator new(v10 + 1);
  size_t v18 = v4;
  int64_t v19 = v11 | 0x8000000000000000;
  std::string __dst = p_dst;
  if (__src != a4) {
    goto LABEL_8;
  }
LABEL_9:
  *(unsigned char *)p_dst = 0;
  size_t v12 = HIBYTE(v19);
  if (v19 >= 0) {
    unint64_t v13 = (void **)&__dst;
  }
  else {
    unint64_t v13 = __dst;
  }
  if (v19 < 0) {
    size_t v12 = v18;
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v13, (char *)v13 + v12);
  uint64_t v14 = *(unsigned __int8 *)(a1 + 23);
  int v15 = (char)v14;
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = *(void *)(a1 + 8);
  }
  if (v14 == 1)
  {
LABEL_25:
    if ((SHIBYTE(v19) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_26;
  }
  if (v14 == 12)
  {
    if (v15 >= 0) {
      unint64_t v16 = (unsigned char *)a1;
    }
    else {
      unint64_t v16 = *(unsigned char **)a1;
    }
    v16[11] = v16[3];
    if (SHIBYTE(v19) < 0) {
      goto LABEL_26;
    }
    return;
  }
  if ((v15 & 0x80000000) == 0)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 23) = 0;
    goto LABEL_25;
  }
  **(unsigned char **)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (SHIBYTE(v19) < 0) {
LABEL_26:
  }
    operator delete(__dst);
}

void sub_1A26BE604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  char v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1A6239270);
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 > this->__marked_count_)
  {
    char v3 = (std::basic_regex<char> *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
    std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(v3, v4);
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
    return 1;
  }
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void std::__back_ref<char>::__exec(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2)
  {
    uint64_t v11 = (void (__cdecl ***)(std::__owns_one_state<char> *__hidden))std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
    std::__back_ref<char>::~__back_ref(v11);
  }
  else
  {
    unsigned int v5 = v2 - 1;
    if (*(unsigned char *)(v3 + 24 * v5 + 16)
      && (uint64_t v7 = v3 + 24 * v5,
          int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
          uint64_t v9 = *(void *)(a2 + 16),
          *(void *)(a2 + 24) - v9 >= v8)
      && !memcmp(*(const void **)v7, *(const void **)(a2 + 16), v8))
    {
      *(_DWORD *)a2 = -994;
      *(void *)(a2 + 16) = v9 + v8;
      uint64_t v10 = *(void *)(a1 + 8);
    }
    else
    {
      uint64_t v10 = 0;
      *(_DWORD *)a2 = -993;
    }
    *(void *)(a2 + 80) = v10;
  }
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x1A6239270);
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (!*(unsigned char *)(v3 + 24 * v2 + 16)
    || (int v4 = (unsigned __int8 **)(v3 + 24 * v2),
        unsigned int v5 = *v4,
        uint64_t v6 = v4[1] - *v4,
        uint64_t v7 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v7 < v6))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    return result;
  }
  if (v6 >= 1)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(unsigned __int8 **)(a2 + 16);
    do
    {
      int v11 = *v5++;
      int v10 = v11;
      int v12 = *v9++;
      if (v10 != v12) {
        goto LABEL_3;
      }
    }
    while (--v8);
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 16) = v7 + v6;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EF57F438;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1A6239270);
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EF57F438;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(unsigned char *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3;
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v5 >= v4)
    {
      uint64_t v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v5 + v4;
        uint64_t v6 = *(void *)(v7 + 8);
        goto LABEL_10;
      }
      uint64_t v8 = 0;
      while (1)
      {
        int v9 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)v3 + v8));
        BOOL result = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)(a2 + 16) + v8));
        if (v9 != result) {
          break;
        }
        if (v4 == ++v8)
        {
          uint64_t v5 = *(void *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(void *)(a2 + 80) = v6;
  return result;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EF57F350;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1A6239270);
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EF57F350;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    uint64_t v7 = a2 + 1;
    int v6 = *a2;
    if (a2 + 1 != a3 || v6 != 36)
    {
      if ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v6);
        uint64_t v10 = (uint64_t)(a2 + 1);
        if (a2 != v7) {
          return (unsigned __int8 *)v10;
        }
        goto LABEL_17;
      }
      if (v7 != a3 && v6 == 92)
      {
        int v9 = (char)*v7;
        if ((v9 - 36) <= 0x3A && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v9);
          uint64_t v10 = (uint64_t)(a2 + 2);
          goto LABEL_16;
        }
      }
      if (*a2 == 46) {
        operator new();
      }
    }
  }
  uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
LABEL_16:
  if (a2 != (unsigned __int8 *)v10) {
    return (unsigned __int8 *)v10;
  }
LABEL_17:
  if (a2 == a3 || a2 + 1 == a3 || *a2 != 92) {
    return (unsigned __int8 *)v10;
  }
  int v11 = a2[1];
  if (v11 == 40)
  {
    int v12 = a2 + 2;
    if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
      operator new();
    }
    do
    {
      if (v12 == a3) {
        goto LABEL_39;
      }
      unint64_t v13 = v12;
      uint64_t v14 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v15 = *(_DWORD *)(a1 + 28);
      unint64_t v16 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, v13, a3);
      if (v13 == v16) {
        break;
      }
      int v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v16, a3, v14, (v15 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v13 != v12);
    if (v13 + 1 == a3 || *v13 != 92 || v13[1] != 41)
    {
LABEL_39:
      std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
      goto LABEL_40;
    }
    uint64_t v10 = (uint64_t)&v13[2 * (v13[1] == 41)];
    if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
      operator new();
    }
    return (unsigned __int8 *)v10;
  }
  if ((v11 & 0xF8) != 0x30 && (v11 & 0xFE) != 0x38 || (v11 - 49) > 8) {
    return (unsigned __int8 *)v10;
  }
  if ((v11 - 48) <= *(_DWORD *)(a1 + 28))
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v11 - 48);
    return a2 + 2;
  }
LABEL_40:
  size_t v18 = (std::basic_regex<char> *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
  return std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(v18, v19, v20, v21, v22, v23);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  if (a2 == a3) {
    return a2;
  }
  int v7 = *a2;
  if (v7 == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return a2 + 1;
  }
  uint64_t v8 = a3;
  if (a2 + 1 == a3 || v7 != 92 || a2[1] != 123) {
    return a2;
  }
  int v9 = &a2[2 * (a2[1] == 123)];
  if (v9 == a3) {
    goto LABEL_47;
  }
  int v10 = *v9;
  if ((v10 & 0xF8) != 0x30 && (v10 & 0xFE) != 0x38) {
    goto LABEL_47;
  }
  int v11 = v10 - 48;
  int v12 = v9 + 1;
  if (v9 + 1 == a3)
  {
LABEL_15:
    int v12 = a3;
  }
  else
  {
    while (1)
    {
      int v13 = *v12;
      if ((v13 & 0xF8) != 0x30 && (v13 & 0xFE) != 0x38) {
        break;
      }
      if (v11 >= 214748364) {
        goto LABEL_47;
      }
      int v11 = v13 + 10 * v11 - 48;
      if (++v12 == a3) {
        goto LABEL_15;
      }
    }
  }
  if (v12 == v9)
  {
LABEL_47:
    std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
    goto LABEL_48;
  }
  if (v12 != a3)
  {
    uint64_t v14 = v12 + 1;
    int v15 = *v12;
    if (v15 != 44)
    {
      if (v14 != a3 && v15 == 92 && *v14 == 125)
      {
        size_t v19 = v11;
        uint64_t v8 = v12 + 2;
        __mexp_std::vector<std::csub_match>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
        size_t v20 = v11;
LABEL_46:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v19, v20, a4, __mexp_begin, __mexp_end, 1);
        return v8;
      }
      goto LABEL_48;
    }
    if (v14 == a3) {
      goto LABEL_48;
    }
    int v16 = *v14;
    if ((v16 & 0xF8) == 0x30 || (v16 & 0xFE) == 0x38)
    {
      int v17 = v16 - 48;
      uint64_t v14 = v12 + 2;
      if (v12 + 2 == a3)
      {
LABEL_38:
        uint64_t v14 = a3;
        goto LABEL_41;
      }
      while (1)
      {
        int v16 = *v14;
        if ((v16 & 0xF8) != 0x30 && (v16 & 0xFE) != 0x38) {
          break;
        }
        if (v17 >= 214748364) {
          goto LABEL_47;
        }
        int v17 = v16 + 10 * v17 - 48;
        if (++v14 == a3) {
          goto LABEL_38;
        }
      }
    }
    else
    {
      int v17 = -1;
    }
    if (v14 == a3)
    {
      uint64_t v21 = v14;
      uint64_t v14 = a3;
      uint64_t v8 = v21;
    }
    else if (v14 + 1 == a3 || v16 != 92)
    {
      uint64_t v8 = v14;
    }
    else
    {
      uint64_t v8 = &v14[2 * (v14[1] == 125)];
    }
LABEL_41:
    if (v14 != v8)
    {
      if (v17 == -1)
      {
        size_t v19 = v11;
        __mexp_std::vector<std::csub_match>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
        size_t v20 = -1;
        goto LABEL_46;
      }
      if (v17 >= v11)
      {
        size_t v19 = v11;
        size_t v20 = v17;
        __mexp_std::vector<std::csub_match>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
        goto LABEL_46;
      }
      goto LABEL_47;
    }
  }
LABEL_48:
  size_t v22 = (std::basic_regex<char> *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
  return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(v22, v23, v24);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return (uint64_t)v3;
  }
  int v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        int v11 = a2[1];
        if (v11 == 66) {
          operator new();
        }
        if (v11 == 98) {
          operator new();
        }
      }
    }
    else if (v6 == 94)
    {
      operator new();
    }
    return (uint64_t)v3;
  }
  if (v6 == 36) {
    operator new();
  }
  if (v6 != 40 || a2 + 1 == a3 || a2[1] != 63 || a2 + 2 == a3) {
    return (uint64_t)v3;
  }
  int v7 = a2[2];
  if (v7 == 33)
  {
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:nn180100]((uint64_t)&v13);
    v13.__flags_ = a1->__flags_;
    uint64_t v8 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v13, v3 + 3, a3);
    unsigned int marked_count = v13.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v13, 1, a1->__marked_count_);
    a1->__marked_count_ += marked_count;
    if (v8 == a3 || *v8 != 41) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v7 != 61) {
    return (uint64_t)v3;
  }
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:nn180100]((uint64_t)&v13);
  v13.__flags_ = a1->__flags_;
  uint64_t v8 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v13, v3 + 3, a3);
  unsigned int v9 = v13.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v13, 0, a1->__marked_count_);
  a1->__marked_count_ += v9;
  if (v8 != a3 && *v8 == 41)
  {
LABEL_25:
    uint64_t v3 = v8 + 1;
    std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v13.__traits_.__loc_);
    return (uint64_t)v3;
  }
LABEL_26:
  uint64_t result = std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
  __break(1u);
  return result;
}

void sub_1A26BF788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v5 = *a2;
  switch(*a2)
  {
    case '$':
    case ')':
    case ']':
    case '^':
    case '|':
    case '}':
      return v3;
    case '(':
      if (a2 + 1 == a3) {
        goto LABEL_48;
      }
      if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
      {
        ++this->__open_count_;
        unsigned int v9 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, a2 + 3, a3);
        if (v9 != a3 && *v9 == 41)
        {
          --this->__open_count_;
          return v9 + 1;
        }
        goto LABEL_48;
      }
      if ((this->__flags_ & 2) == 0) {
        operator new();
      }
      ++this->__open_count_;
      std::basic_regex<char> v13 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, a2 + 1, a3);
      if (v13 == a3 || *v13 != 41)
      {
LABEL_48:
        std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
        goto LABEL_49;
      }
      if ((this->__flags_ & 2) == 0) {
        operator new();
      }
      --this->__open_count_;
      return v13 + 1;
    case '*':
    case '+':
    case '?':
    case '{':
      std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
      goto LABEL_48;
    case '.':
      operator new();
    case '[':
      return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
    case '\\':
      int v7 = a2;
      if (v5 != 92) {
        return v7;
      }
      int v10 = a2 + 1;
      if (a2 + 1 == a3) {
        goto LABEL_50;
      }
      int v11 = *v10;
      unsigned int v12 = v11 - 48;
      if (v11 == 48)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v12);
        return v3 + 2;
      }
      if ((v11 - 49) > 8) {
        goto LABEL_37;
      }
      int v7 = v3 + 2;
      if (v3 + 2 == a3)
      {
        int v7 = a3;
      }
      else
      {
        while (1)
        {
          int v14 = *v7;
          if ((v14 - 48) > 9) {
            break;
          }
          if (v12 >= 0x19999999) {
            goto LABEL_49;
          }
          ++v7;
          unsigned int v12 = v14 + 10 * v12 - 48;
          if (v7 == a3)
          {
            int v7 = a3;
            break;
          }
        }
        if (!v12)
        {
LABEL_49:
          std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
LABEL_50:
          int v16 = (_Unwind_Exception *)std::__throw_regex_error[abi:nn180100]<(std::regex_constants::error_type)12>();
          MEMORY[0x1A6239270](a3, 0x10F1C4061CF1F02);
          _Unwind_Resume(v16);
        }
      }
      if (v12 > this->__marked_count_) {
        goto LABEL_49;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v12);
      if (v7 != v10) {
        return v7;
      }
LABEL_37:
      switch(*v10)
      {
        case 'D':
          operator new();
        case 'S':
          operator new();
        case 'W':
          operator new();
        case 'd':
          operator new();
        case 's':
          operator new();
        case 'w':
          operator new();
        default:
          uint64_t v15 = ((uint64_t (*)(std::basic_regex<char> *, unsigned __int8 *, unsigned __int8 *, void))std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>)(this, v3 + 1, a3, 0);
          if (v10 == (unsigned __int8 *)v15) {
            int v7 = v3;
          }
          else {
            int v7 = (unsigned __int8 *)v15;
          }
          break;
      }
      break;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
      return ++v3;
  }
  return v7;
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:nn180100](uint64_t a1)
{
  unsigned int v2 = (const std::locale *)MEMORY[0x1A6239040]();
  *(void *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x1E4FBA258]);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E4FBA280]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  return a1;
}

void sub_1A26C0048(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v21 = 0;
  memset(&v22, 0, 17);
  char v23 = 0;
  uint64_t v24 = 0;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::csub_match>::size_type v4 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v5 = *(void *)(a2 + 16);
  v18.first = *(const char **)(a2 + 24);
  v18.second = v18.first;
  v18.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v18);
  uint64_t v19 = v5;
  uint64_t v20 = v5;
  char v21 = 0;
  std::vector<std::csub_match>::value_type v22 = v18;
  uint64_t v24 = v5;
  char v23 = 1;
  int v6 = *(const char **)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v7 = v6 == *(const char **)(a2 + 8);
  }
  else {
    BOOL v7 = 0;
  }
  char v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    std::vector<std::csub_match>::pointer begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  std::vector<std::csub_match>::pointer begin = __p.__begin_;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin) {
      return;
    }
    goto LABEL_14;
  }
  int v11 = *(_DWORD *)(a1 + 80);
  uint64_t v12 = *(void *)(a2 + 32);
  unsigned int v13 = 2;
  for (unint64_t i = 1; i < v10; unint64_t i = v13++)
  {
    uint64_t v15 = &begin[i];
    uint64_t v16 = v12 + 24 * (v11 + v13 - 2);
    *(std::pair<const char *, const char *> *)uint64_t v16 = v15->std::pair<const char *, const char *>;
    *(unsigned char *)(v16 + 16) = v15->matched;
  }
LABEL_14:
  operator delete(begin);
}

void sub_1A26C02B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EF57F1E0;
  unsigned int v2 = (std::locale *)(a1 + 2);
  uint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  std::locale::~locale(v2);
  std::vector<std::csub_match>::size_type v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  JUMPOUT(0x1A6239270);
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EF57F1E0;
  unsigned int v2 = (std::locale *)(a1 + 2);
  uint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  std::locale::~locale(v2);
  std::vector<std::csub_match>::size_type v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  return a1;
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 **)(a2 + 8);
  uint64_t v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_18;
  }
  std::vector<std::csub_match>::size_type v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(unsigned char *)(a2 + 88) & 8) == 0)
    {
      uint64_t v6 = *(v3 - 1);
      if (v6 != 95)
      {
LABEL_15:
        if ((v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0) {
          goto LABEL_17;
        }
        goto LABEL_18;
      }
LABEL_17:
      int v10 = 1;
      goto LABEL_25;
    }
LABEL_18:
    int v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    int v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        uint64_t v6 = *v2;
        if (v6 != 95) {
          goto LABEL_15;
        }
        goto LABEL_17;
      }
      goto LABEL_18;
    }
  }
  uint64_t v7 = *(v4 - 1);
  uint64_t v8 = *v4;
  if (v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0)
  {
    int v9 = 1;
    if (v8 == 95) {
      goto LABEL_22;
    }
  }
  else
  {
    int v9 = 0;
    if (v8 == 95) {
      goto LABEL_22;
    }
  }
  if ((v8 & 0x80) != 0 || (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) == 0)
  {
    int v11 = 0;
    goto LABEL_24;
  }
LABEL_22:
  int v11 = 1;
LABEL_24:
  int v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    uint64_t v12 = 0;
    int v13 = -993;
  }
  else
  {
    uint64_t v12 = *(void *)(result + 8);
    int v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + 80) = v12;
  return result;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EF57F2A0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  JUMPOUT(0x1A6239270);
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EF57F2A0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void md::LabelFeature::textDataForZoom(md::LabelFeature *this, md::LabelFeature *a2, const md::LabelTextStyleGroup *a3, uint64_t a4)
{
  int v5 = (int)a3;
  unint64_t v8 = (*(uint64_t (**)(md::LabelFeature *))(*(void *)a2 + 488))(a2);
  int v9 = (unsigned __int8 *)*((void *)a2 + 20);
  int v10 = (unsigned __int8 *)*((void *)a2 + 21);
  if (v8 > 0x6DB6DB6DB6DB6DB7 * ((v10 - v9) >> 3))
  {
    md::LabelFeature::updateTextVector(a2);
    int v9 = (unsigned __int8 *)*((void *)a2 + 20);
    int v10 = (unsigned __int8 *)*((void *)a2 + 21);
  }
  md::TextDataStore::textDataForZoom(this, v9, v10, v5, a4 + 72);
}

float md::LabelFeature::vectorFromAzimuth(md::LabelFeature *this, float a2, const md::LabelPoint *a3)
{
  float v3 = a2 * -0.017453;
  double v4 = v3;
  if (!a3) {
    return __sincos_stret(v3).__cosval;
  }
  double v5 = md::LabelPoint::geocentricNormal(this);
  double v7 = v6;
  double v9 = v8;
  double v10 = -(v5 * v8);
  double v11 = -(v6 * v8);
  double v12 = v7 * v7 + v5 * v5;
  double v13 = 1.0 / sqrt(v10 * v10 + v11 * v11 + v12 * v12);
  double v14 = v13 * v10;
  double v15 = v13 * v11;
  double v16 = v13 * v12;
  __double2 v17 = __sincos_stret(v4 * 0.5);
  double v18 = v5 * v17.__sinval;
  double v19 = v7 * v17.__sinval;
  double v20 = v9 * v17.__sinval;
  return v14
       + (-(v15 * v20 - v16 * v19) - (v15 * v20 - v16 * v19)) * v17.__cosval
       + (-(v14 * v19 - v15 * v18) - (v14 * v19 - v15 * v18)) * v19
       - (-(v16 * v18 - v14 * v20) - (v16 * v18 - v14 * v20)) * v20;
}

void *md::LabelFeature::debugName(md::LabelFeature *this, void *a2)
{
  uint64_t result = (void *)(*(uint64_t (**)(void *, void))(*a2 + 472))(a2, 0);
  if (result)
  {
    *((void *)this + 3) = result[3];
    if (*((char *)result + 23) < 0)
    {
      double v12 = (void *)*result;
      unint64_t v13 = result[1];
      return std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)this, v12, v13);
    }
    else
    {
      *(_OWORD *)this = *(_OWORD *)result;
      *((void *)this + 2) = result[2];
    }
    return result;
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*a2 + 496))(a2);
  if (v5)
  {
    double v6 = (const void **)v5;
    uint64_t v7 = 0x7FFFFFFFFFFFFFF7;
    int v8 = *(char *)(v5 + 23);
    if (v8 >= 0) {
      size_t v9 = *(unsigned __int8 *)(v5 + 23);
    }
    else {
      size_t v9 = *(void *)(v5 + 8);
    }
    unint64_t v10 = v9 + 7;
    uint64_t result = *(void **)(v5 + 24);
    *((void *)&v53 + 1) = result;
    if (v9 + 7 > 0x7FFFFFFFFFFFFFF7) {
      abort();
    }
    if (v10 >= 0x17)
    {
      uint64_t v17 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v17 = v10 | 7;
      }
      uint64_t v18 = v17 + 1;
      double v19 = (_DWORD *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*result + 16))(result, v17 + 1, 1);
      *((void *)&v52 + 1) = v9 + 7;
      *(void *)&long long v53 = v18 | 0x8000000000000000;
      *(void *)&long long v52 = v19;
      double v11 = (char *)v19 + 7;
      *(_DWORD *)((char *)v19 + 3) = 677669989;
      _DWORD *v19 = 1701406835;
      LOBYTE(v8) = *((unsigned char *)v6 + 23);
    }
    else
    {
      *((void *)&v52 + 1) = 0;
      *(void *)&long long v53 = 0;
      BYTE7(v53) = v9 + 7;
      double v11 = (char *)&v52 + 7;
      strcpy((char *)&v52, "shield(");
      if (!v9) {
        goto LABEL_31;
      }
    }
    if ((v8 & 0x80u) == 0) {
      double v20 = v6;
    }
    else {
      double v20 = *v6;
    }
    uint64_t result = memmove(v11, v20, v9);
LABEL_31:
    v11[v9] = 0;
    uint64_t v21 = BYTE7(v53);
    if ((SBYTE7(v53) & 0x80u) == 0) {
      size_t v22 = 22;
    }
    else {
      size_t v22 = (v53 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    }
    if (SBYTE7(v53) < 0) {
      uint64_t v21 = *((void *)&v52 + 1);
    }
    if (v22 != v21)
    {
      unint64_t v31 = &v52;
      if (SBYTE7(v53) < 0) {
        unint64_t v31 = (long long *)v52;
      }
      *((unsigned char *)v31 + v21) = 41;
      uint64_t v32 = v21 + 1;
      if (SBYTE7(v53) < 0) {
        *((void *)&v52 + 1) = v32;
      }
      else {
        BYTE7(v53) = v32 & 0x7F;
      }
      char v33 = (char *)v31 + v32;
      goto LABEL_70;
    }
    if (v22 == 0x7FFFFFFFFFFFFFF6) {
      abort();
    }
    unint64_t v23 = v22 + 1;
    uint64_t v24 = *((void *)&v53 + 1);
    if ((SBYTE7(v53) & 0x80u) == 0) {
      unint64_t v25 = &v52;
    }
    else {
      unint64_t v25 = (long long *)v52;
    }
    unint64_t v26 = 2 * v22;
    if (v23 > 2 * v22) {
      unint64_t v26 = v22 + 1;
    }
    uint64_t v27 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v27 = v26 | 7;
    }
    if (v26 >= 0x17) {
      uint64_t v28 = v27 + 1;
    }
    else {
      uint64_t v28 = 23;
    }
    if (v22 <= 0x3FFFFFFFFFFFFFF2) {
      uint64_t v7 = v28;
    }
    unint64_t v29 = (unsigned char *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)&v53 + 1) + 16))(*((void *)&v53 + 1), v7, 1);
    unint64_t v30 = v29;
    if (v22)
    {
      uint64_t result = memmove(v29, v25, v22);
      v30[v22] = 41;
      if (v22 == 22) {
        goto LABEL_69;
      }
    }
    else
    {
      *unint64_t v29 = 41;
    }
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, long long *, size_t))(*(void *)v24 + 40))(v24, v25, v22 + 1);
LABEL_69:
    *((void *)&v52 + 1) = v22 + 1;
    *(void *)&long long v53 = v7 | 0x8000000000000000;
    *(void *)&long long v52 = v30;
    char v33 = &v30[v23];
LABEL_70:
    *char v33 = 0;
    long long v38 = v53;
    *(_OWORD *)this = v52;
    *((_OWORD *)this + 1) = v38;
    return result;
  }
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)&v52);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v52, (uint64_t)"type=", 5);
  int v14 = (*(uint64_t (**)(void *))(*a2 + 264))(a2);
  md::to_string((uint64_t)&__dst, v14);
  if (v50 >= 0) {
    p_dst = (void **)&__dst;
  }
  else {
    p_dst = __dst;
  }
  if (v50 >= 0) {
    uint64_t v16 = HIBYTE(v50);
  }
  else {
    uint64_t v16 = v49;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v52, (uint64_t)p_dst, v16);
  if (SHIBYTE(v50) < 0)
  {
    (*(void (**)(uint64_t, void **, int64_t))(*(void *)v51 + 40))(v51, __dst, v50 & 0x7FFFFFFFFFFFFFFFLL);
    if (!a2[9]) {
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  if (a2[9])
  {
LABEL_59:
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v52, (uint64_t)" key=", 5);
    std::ostream::operator<<();
  }
LABEL_60:
  if ((v60 & 0x10) != 0)
  {
    unint64_t v36 = v59;
    if (v59 < v56)
    {
      unint64_t v59 = v56;
      unint64_t v36 = v56;
    }
    unint64_t v37 = (const void **)&v55;
  }
  else
  {
    if ((v60 & 8) == 0)
    {
      size_t v34 = 0;
      HIBYTE(v50) = 0;
      unint64_t v35 = (void **)&__dst;
      goto LABEL_80;
    }
    unint64_t v37 = (const void **)&v53 + 1;
    unint64_t v36 = v54;
  }
  unint64_t v39 = *v37;
  size_t v34 = v36 - (void)*v37;
  if (v34 > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  if (v34 >= 0x17)
  {
    uint64_t v40 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17) {
      uint64_t v40 = v34 | 7;
    }
    uint64_t v41 = v40 + 1;
    unint64_t v35 = (void **)operator new(v40 + 1);
    unint64_t v49 = v34;
    int64_t v50 = v41 | 0x8000000000000000;
    std::string __dst = v35;
  }
  else
  {
    HIBYTE(v50) = v36 - *(unsigned char *)v37;
    unint64_t v35 = (void **)&__dst;
    if (!v34) {
      goto LABEL_80;
    }
  }
  memmove(v35, v39, v34);
LABEL_80:
  *((unsigned char *)v35 + v34) = 0;
  {
    operator new();
  }
  uint64_t v42 = mdm::Allocator::instance(void)::alloc;
  *((void *)this + 3) = mdm::Allocator::instance(void)::alloc;
  if (SHIBYTE(v50) < 0)
  {
    unint64_t v43 = __dst;
    size_t v44 = v49;
    if (v49 > 0x7FFFFFFFFFFFFFF7) {
      abort();
    }
  }
  else
  {
    unint64_t v43 = (void **)&__dst;
    size_t v44 = HIBYTE(v50);
  }
  if (v44 >= 0x17)
  {
    uint64_t v45 = (v44 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17) {
      uint64_t v45 = v44 | 7;
    }
    uint64_t v46 = v45 + 1;
    uint64_t v47 = (md::LabelFeature *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v42 + 16))(v42, v45 + 1, 1);
    *((void *)this + 1) = v44;
    *((void *)this + 2) = v46 | 0x8000000000000000;
    *(void *)this = v47;
    this = v47;
  }
  else
  {
    *((unsigned char *)this + 23) = v44;
    if (!v44) {
      goto LABEL_91;
    }
  }
  memmove(this, v43, v44);
LABEL_91:
  *((unsigned char *)this + v44) = 0;
  if (SHIBYTE(v50) < 0) {
    operator delete(__dst);
  }
  *(void *)&long long v52 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v52 + *(void *)(v52 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v52 + 1) = MEMORY[0x1E4FBA470] + 16;
  if (v58 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)MEMORY[0x1A62391A0](&v61);
}

void sub_1A26C10E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  operator delete(v20);
  std::ostringstream::~ostringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void md::PolygonOverlayRenderable::updateWithContext(long long *a1, const md::LayoutContext *a2, unsigned int a3, int a4, uint64_t a5)
{
  double v6 = (void *)*((void *)a2 + 1);
  unint64_t v7 = v6[1];
  if ((v7 & (v7 - 1)) != 0)
  {
    unint64_t v10 = 0x1AF456233693CD46;
    if (v7 <= 0x1AF456233693CD46) {
      unint64_t v10 = 0x1AF456233693CD46 % v7;
    }
    uint64_t v9 = a5;
    int v8 = *(void **)(*v6 + 8 * v10);
    do
    {
      do
        int v8 = (void *)*v8;
      while (v8[1] != 0x1AF456233693CD46);
    }
    while (v8[2] != 0x1AF456233693CD46);
  }
  else
  {
    int v8 = *(void **)(*v6 + 8 * ((v7 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        int v8 = (void *)*v8;
      while (v8[1] != 0x1AF456233693CD46);
    }
    while (v8[2] != 0x1AF456233693CD46);
    uint64_t v9 = a5;
  }
  uint64_t v11 = *(void *)(v8[5] + 32);
  *((void *)a1 + 31) = 0;
  double v12 = (char *)a1 + 248;
  *(void *)((char *)a1 + 254) = 0;
  uint64_t v171 = v11;
  if (*(double *)(v11 + 40) > 0.0) {
    unsigned int v13 = a3;
  }
  else {
    unsigned int v13 = 0;
  }
  int v14 = (os_unfair_lock_s *)*((void *)a1 + 6);
  os_unfair_lock_lock(v14 + 6);
  os_unfair_lock_unlock(v14 + 6);
  long long v193 = *(_OWORD *)&v14->_os_unfair_lock_opaque;
  uint64_t v15 = *((void *)a1 + 6);
  os_unfair_lock_lock((os_unfair_lock_t)(v15 + 24));
  float v16 = *(float *)(v15 + 16);
  os_unfair_lock_unlock((os_unfair_lock_t)(v15 + 24));
  float v17 = *((float *)&v193 + 3) * v16;
  *((float *)&v193 + 3) = v17;
  float v18 = vabds_f32(1.0, v17);
  BOOL v19 = v18 <= (float)(fabsf(v17 + 1.0) * 0.000011921);
  if (v18 < 1.1755e-38) {
    BOOL v19 = 1;
  }
  BOOL v192 = v19;
  uint64_t v20 = *((void *)a1 + 38);
  BOOL v22 = v17 > 0.0 && *((void *)a1 + 3) != 0;
  BOOL v173 = v20 != 0;
  if (v20) {
    BOOL v23 = 0;
  }
  else {
    BOOL v23 = v22;
  }
  uint64_t v24 = *((void *)a1 + 6);
  uint64_t v25 = *(void *)(v24 + 32);
  unint64_t v26 = *(std::__shared_weak_count **)(v24 + 40);
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v25 + 196));
  float v27 = *(float *)(v25 + 148);
  os_unfair_lock_unlock((os_unfair_lock_t)(v25 + 196));
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  float v28 = vabds_f32(1.0, v27);
  BOOL v29 = v28 > (float)(fabsf(v27 + 1.0) * 0.000011921);
  BOOL v30 = v28 >= 1.1755e-38 && v29;
  if (*((void *)a1 + 5)) {
    int v31 = v27 > 0.0 || v173;
  }
  else {
    int v31 = 0;
  }
  uint64_t v32 = (os_unfair_lock_s *)*((void *)a1 + 6);
  char v33 = v32 + 6;
  os_unfair_lock_lock(v32 + 6);
  int os_unfair_lock_opaque = v32[5]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v33);
  if (os_unfair_lock_opaque == 13)
  {
    uint64_t v35 = *((void *)a1 + 6);
    unint64_t v36 = (os_unfair_lock_s *)(v35 + 24);
    os_unfair_lock_lock((os_unfair_lock_t)(v35 + 24));
    LODWORD(v35) = *(unsigned __int8 *)(v35 + 48);
    os_unfair_lock_unlock(v36);
    if (v35) {
      int os_unfair_lock_opaque = 18;
    }
  }
  char v37 = a4;
  int v191 = os_unfair_lock_opaque;
  int v38 = a4 ^ 1;
  unsigned char *v12 = v23 & (a4 ^ 1);
  if (v23)
  {
    uint64_t v39 = *((void *)a1 + 4);
    if (v39) {
      LODWORD(v39) = (v30 | ~v31) & v38;
    }
  }
  else
  {
    LODWORD(v39) = 0;
  }
  *(_DWORD *)((char *)a1 + 250) = 16843009 * (v31 & v38);
  *((unsigned char *)a1 + 249) = v39;
  *(_DWORD *)((char *)a1 + 254) = 16843009 * (v31 & v173 & v38);
  *((unsigned char *)a1 + 260) = v23 & a4;
  *((unsigned char *)a1 + 258) = v31 & a4;
  *((unsigned char *)a1 + 259) = v31 & a4;
  *((unsigned char *)a1 + 261) = v173;
  v190[0] = &v192;
  v190[1] = &v193;
  v190[2] = &v191;
  v190[3] = v9;
  v190[4] = a1;
  if ((v23 & (a4 ^ 1)) != 0)
  {
    md::PolygonOverlayRenderable::updateWithContext(md::LayoutContext const&,BOOL,BOOL,ggl::ConstantDataTyped<ggl::OverlayOcclusion::AlphaTint> *,float)::$_0::operator()((uint64_t)v190, *(void *)(**((void **)a1 + 11) + 16 * v192 + 8 * v13 + 72), *((void *)a1 + 17));
    LODWORD(v39) = *((unsigned __int8 *)a1 + 249);
  }
  if (!v39) {
    goto LABEL_115;
  }
  uint64_t v40 = *(void *)(**((void **)a1 + 11) + 64);
  uint64_t v41 = *(void *)(v40 + 8);
  if (v41 == *(void *)v40)
  {
    uint64_t v52 = *(void *)(v40 + 88);
    if (!v52) {
      goto LABEL_210;
    }
    uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v52 + 48))(v52);
    unint64_t v43 = *(uint64_t **)(v40 + 40);
    unint64_t v53 = *(void *)(v40 + 48);
    if ((unint64_t)v43 >= v53)
    {
      uint64_t v55 = *(void *)(v40 + 32);
      uint64_t v56 = ((uint64_t)v43 - v55) >> 3;
      unint64_t v47 = v56 + 1;
      if ((unint64_t)(v56 + 1) >> 61) {
        goto LABEL_211;
      }
      uint64_t v57 = v53 - v55;
      if (v57 >> 2 > v47) {
        unint64_t v47 = v57 >> 2;
      }
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v47)
      {
        uint64_t v58 = 8 * v47;
        uint64_t v59 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v40 + 56) + 16))(*(void *)(v40 + 56), 8 * v47, 8);
        uint64_t v51 = (uint64_t *)(v59 + 8 * v56);
        unint64_t v47 = v59 + v58;
        if (v59) {
          *uint64_t v51 = v42;
        }
      }
      else
      {
        uint64_t v51 = (uint64_t *)(8 * v56);
      }
      unint64_t v54 = v51 + 1;
      uint64_t v69 = *(void *)(v40 + 32);
      uint64_t v60 = *(void *)(v40 + 40);
      if (v60 == v69) {
        goto LABEL_95;
      }
      unint64_t v70 = v60 - v69 - 8;
      if (v70 < 0x38)
      {
        uint64_t v72 = *(void *)(v40 + 40);
      }
      else if ((unint64_t)(v60 - (void)v51) < 0x20)
      {
        uint64_t v72 = *(void *)(v40 + 40);
      }
      else
      {
        uint64_t v71 = (v70 >> 3) + 1;
        uint64_t v72 = v60 - 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v73 = v51 - 2;
        uint64_t v74 = (long long *)(v60 - 16);
        uint64_t v75 = v71 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v76 = *v74;
          *((_OWORD *)v73 - 1) = *(v74 - 1);
          *(_OWORD *)uint64_t v73 = v76;
          v73 -= 4;
          v74 -= 2;
          v75 -= 4;
        }
        while (v75);
        v51 -= v71 & 0x3FFFFFFFFFFFFFFCLL;
        if (v71 == (v71 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_94;
        }
      }
      do
      {
        uint64_t v78 = *(void *)(v72 - 8);
        v72 -= 8;
        *--uint64_t v51 = v78;
      }
      while (v72 != v69);
      goto LABEL_94;
    }
LABEL_60:
    if (v43) {
      *unint64_t v43 = v42;
    }
    unint64_t v54 = v43 + 1;
    goto LABEL_97;
  }
  uint64_t v42 = *(void *)(v41 - 8);
  *(void *)(v40 + 8) = v41 - 8;
  unint64_t v43 = *(uint64_t **)(v40 + 40);
  unint64_t v44 = *(void *)(v40 + 48);
  if ((unint64_t)v43 < v44) {
    goto LABEL_60;
  }
  uint64_t v45 = *(void *)(v40 + 32);
  uint64_t v46 = ((uint64_t)v43 - v45) >> 3;
  unint64_t v47 = v46 + 1;
  if ((unint64_t)(v46 + 1) >> 61) {
    goto LABEL_211;
  }
  uint64_t v48 = v44 - v45;
  if (v48 >> 2 > v47) {
    unint64_t v47 = v48 >> 2;
  }
  if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
  }
  if (v47)
  {
    uint64_t v49 = 8 * v47;
    uint64_t v50 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v40 + 56) + 16))(*(void *)(v40 + 56), 8 * v47, 8);
    uint64_t v51 = (uint64_t *)(v50 + 8 * v46);
    unint64_t v47 = v50 + v49;
    if (v50) {
      *uint64_t v51 = v42;
    }
  }
  else
  {
    uint64_t v51 = (uint64_t *)(8 * v46);
  }
  unint64_t v54 = v51 + 1;
  uint64_t v61 = *(void *)(v40 + 32);
  uint64_t v60 = *(void *)(v40 + 40);
  if (v60 == v61) {
    goto LABEL_95;
  }
  unint64_t v62 = v60 - v61 - 8;
  if (v62 < 0x38)
  {
    uint64_t v64 = *(void *)(v40 + 40);
  }
  else if ((unint64_t)(v60 - (void)v51) < 0x20)
  {
    uint64_t v64 = *(void *)(v40 + 40);
  }
  else
  {
    uint64_t v63 = (v62 >> 3) + 1;
    uint64_t v64 = v60 - 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v65 = v51 - 2;
    int64_t v66 = (long long *)(v60 - 16);
    uint64_t v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v68 = *v66;
      *((_OWORD *)v65 - 1) = *(v66 - 1);
      *(_OWORD *)uint64_t v65 = v68;
      v65 -= 4;
      v66 -= 2;
      v67 -= 4;
    }
    while (v67);
    v51 -= v63 & 0x3FFFFFFFFFFFFFFCLL;
    if (v63 == (v63 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_94;
    }
  }
  do
  {
    uint64_t v77 = *(void *)(v64 - 8);
    v64 -= 8;
    *--uint64_t v51 = v77;
  }
  while (v64 != v61);
LABEL_94:
  uint64_t v60 = *(void *)(v40 + 32);
LABEL_95:
  *(void *)(v40 + 32) = v51;
  *(void *)(v40 + 40) = v54;
  uint64_t v79 = *(void *)(v40 + 48);
  *(void *)(v40 + 48) = v47;
  if (v60) {
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v40 + 56) + 40))(*(void *)(v40 + 56), v60, v79 - v60);
  }
LABEL_97:
  *(void *)(v40 + 40) = v54;
  v174[0] = v42;
  uint64_t v80 = *(void *)(v40 + 120);
  if (!v80) {
    goto LABEL_210;
  }
  (*(void (**)(uint64_t, void *))(*(void *)v80 + 48))(v80, v174);
  uint64_t v81 = *(void **)(v42 + 64);
  v81[1] = 0;
  uint64_t v82 = *((void *)a1 + 13);
  *uint64_t v81 = v82;
  uint64_t v83 = *(void **)(v42 + 160);
  uint64_t v84 = *((void *)a1 + 14);
  if (v84) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v84 + 8), 1uLL, memory_order_relaxed);
  }
  long long v85 = (std::__shared_weak_count *)v83[1];
  void *v83 = v82;
  v83[1] = v84;
  if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
    std::__shared_weak_count::__release_weak(v85);
  }
  uint64_t v86 = *(void *)(v42 + 64);
  *(void *)(v86 + 24) = 0;
  uint64_t v87 = *((void *)a1 + 15);
  *(void *)(v86 + 16) = v87;
  uint64_t v88 = *(void *)(v42 + 160);
  uint64_t v89 = *((void *)a1 + 16);
  if (v89) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v89 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v90 = *(std::__shared_weak_count **)(v88 + 24);
  *(void *)(v88 + 16) = v87;
  *(void *)(v88 + 24) = v89;
  if (v90 && !atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
    std::__shared_weak_count::__release_weak(v90);
  }
  **(void **)(v42 + 96) = *(void *)(*((void *)a1 + 11) + 8);
  if (v9)
  {
    uint64_t v91 = *(void *)(v42 + 64);
    *(void *)(v91 + 48) = v9;
    *(void *)(v91 + 56) = 0;
    uint64_t v92 = *(void *)(v42 + 160);
    unint64_t v93 = *(std::__shared_weak_count **)(v92 + 56);
    *(void *)(v92 + 48) = 0;
    *(void *)(v92 + 56) = 0;
    if (v93)
    {
      if (!atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
  }
  BOOL v94 = *(void **)(*(void *)(v42 + 64) + 32);
  double v95 = *(double *)(v171 + 3768) / (*(double *)(v171 + 1368) * *((double *)a1 + 12));
  unint64_t v96 = v94[1];
  uint64_t v97 = v94[9];
  *(_OWORD *)uint64_t v97 = v193;
  *(float *)&double v95 = v95;
  *(_DWORD *)(v97 + 16) = LODWORD(v95);
  *(_DWORD *)(v97 + 20) = v191;
  if (v94[8] > v96) {
    unint64_t v96 = v94[8];
  }
  v94[7] = 0;
  v94[8] = v96;
  uint64_t v98 = *((void *)a1 + 18);
  *(void *)(v98 + 24) = *(void *)(**((void **)a1 + 11) + 8 * v13 + 104);
  *(_DWORD *)(v98 + 40) = *((_DWORD *)a1 + 20);
  *(void *)(v98 + 32) = v42;
  *(void *)(v98 + 64) = *((void *)a1 + 4);
  char v37 = a4;
LABEL_115:
  if (v31)
  {
    md::RibbonLayoutContext::RibbonLayoutContext((md::RibbonLayoutContext *)v174, a2);
    uint64_t v179 = 0;
    int v180 = 1065353216;
    char v181 = 0;
    uint64_t v184 = 0;
    double v185 = 0;
    uint64_t v182 = 0;
    BOOL v183 = 0;
    LOWORD(v186) = 255;
    *(void *)((char *)&v186 + 4) = 0;
    char v175 = 0;
    uint64_t v99 = +[VKDebugSettings sharedSettings];
    [v99 ribbonCrispness];
    int v177 = v100;

    uint64_t v101 = *(void *)(*((void *)a1 + 11) + 16);
    int v178 = *(_DWORD *)(*(void *)(v101 + 256) + 8);
    uint64_t v179 = v101;
    char v176 = *((_DWORD *)a1 + 20);
    BYTE4(v182) = v13;
    BYTE5(v182) = v37;
    char v181 = 1;
    LODWORD(v182) = v191;
    uint64_t v102 = *((void *)a1 + 8);
    uint64_t v103 = (std::__shared_weak_count *)*((void *)a1 + 9);
    if (v103) {
      atomic_fetch_add_explicit(&v103->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v104 = v185;
    uint64_t v184 = v102;
    double v185 = v103;
    if (v104 && !atomic_fetch_add(&v104->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
    BOOL v183 = v173;
    long long v186 = *a1;
    uint64_t v187 = *((void *)a1 + 2);
    long long v105 = a1[21];
    long long v188 = a1[20];
    long long v189 = v105;
    md::PolylineOverlayLayer<md::Ribbons::PolylineOverlayRibbonDescriptor>::layout(*((void *)a1 + 5), (uint64_t)v174);
    unint64_t v106 = v185;
    if (v185 && !atomic_fetch_add(&v185->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  if (*((unsigned char *)a1 + 260)) {
    md::PolygonOverlayRenderable::updateWithContext(md::LayoutContext const&,BOOL,BOOL,ggl::ConstantDataTyped<ggl::OverlayOcclusion::AlphaTint> *,float)::$_0::operator()((uint64_t)v190, *(void *)(**((void **)a1 + 11) + 8 * v192 + 120), *((void *)a1 + 29));
  }
  if (*((unsigned char *)a1 + 261))
  {
    unint64_t v107 = (void *)*((void *)a1 + 38);
    if (v107[14])
    {
      if (v107[15])
      {
        unint64_t v108 = v107[21];
        if (v108 < v107[20])
        {
          if (*((void *)a1 + 3))
          {
            unint64_t v109 = v108 + 1;
            v107[21] = v109;
            uint64_t v110 = 8 * (v109 >> 6);
            uint64_t v111 = 1 << v109;
            *(void *)(v107[11] + v110) &= ~(1 << v109);
            uint64_t v112 = *(void *)(v107[8] + 8 * v109);
            uint64_t v113 = *(void *)(v107[3] + 80);
            uint64_t v114 = *(void *)(v113 + 8);
            if (v114 != *(void *)v113)
            {
              uint64_t v115 = *(void **)(v114 - 8);
              *(void *)(v113 + 8) = v114 - 8;
              uint64_t v116 = *(void **)(v113 + 40);
              unint64_t v117 = *(void *)(v113 + 48);
              if ((unint64_t)v116 >= v117)
              {
                uint64_t v118 = *(void *)(v113 + 32);
                uint64_t v119 = ((uint64_t)v116 - v118) >> 3;
                unint64_t v120 = v119 + 1;
                if ((unint64_t)(v119 + 1) >> 61) {
                  goto LABEL_211;
                }
                uint64_t v121 = v117 - v118;
                if (v121 >> 2 > v120) {
                  unint64_t v120 = v121 >> 2;
                }
                if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v120 = 0x1FFFFFFFFFFFFFFFLL;
                }
                if (v120)
                {
                  uint64_t v122 = 8 * v120;
                  uint64_t v123 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v113 + 56) + 16))(*(void *)(v113 + 56), 8 * v120, 8);
                  long long v124 = (void *)(v123 + 8 * v119);
                  unint64_t v120 = v123 + v122;
                  if (v123) {
                    *long long v124 = v115;
                  }
                }
                else
                {
                  long long v124 = (void *)(8 * v119);
                }
                int64_t v127 = v124 + 1;
                uint64_t v134 = *(void *)(v113 + 32);
                uint64_t v133 = *(void *)(v113 + 40);
                if (v133 == v134) {
                  goto LABEL_178;
                }
                unint64_t v135 = v133 - v134 - 8;
                if (v135 < 0x38)
                {
                  uint64_t v137 = *(void *)(v113 + 40);
                }
                else if ((unint64_t)(v133 - (void)v124) < 0x20)
                {
                  uint64_t v137 = *(void *)(v113 + 40);
                }
                else
                {
                  uint64_t v136 = (v135 >> 3) + 1;
                  uint64_t v137 = v133 - 8 * (v136 & 0x3FFFFFFFFFFFFFFCLL);
                  long long v138 = v124 - 2;
                  long long v139 = (long long *)(v133 - 16);
                  uint64_t v140 = v136 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v141 = *v139;
                    *(v138 - 1) = *(v139 - 1);
                    *long long v138 = v141;
                    v138 -= 2;
                    v139 -= 2;
                    v140 -= 4;
                  }
                  while (v140);
                  v124 -= v136 & 0x3FFFFFFFFFFFFFFCLL;
                  if (v136 == (v136 & 0x3FFFFFFFFFFFFFFCLL)) {
                    goto LABEL_177;
                  }
                }
                do
                {
                  uint64_t v150 = *(void *)(v137 - 8);
                  v137 -= 8;
                  *--long long v124 = v150;
                }
                while (v137 != v134);
LABEL_177:
                uint64_t v133 = *(void *)(v113 + 32);
LABEL_178:
                *(void *)(v113 + 32) = v124;
                *(void *)(v113 + 40) = v127;
                uint64_t v152 = *(void *)(v113 + 48);
                *(void *)(v113 + 48) = v120;
                if (v133) {
                  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v113 + 56) + 40))(*(void *)(v113 + 56), v133, v152 - v133);
                }
                goto LABEL_180;
              }
              goto LABEL_143;
            }
            uint64_t v125 = *(void *)(v113 + 88);
            if (v125)
            {
              uint64_t v115 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v125 + 48))(v125);
              uint64_t v116 = *(void **)(v113 + 40);
              unint64_t v126 = *(void *)(v113 + 48);
              if ((unint64_t)v116 >= v126)
              {
                uint64_t v128 = *(void *)(v113 + 32);
                uint64_t v129 = ((uint64_t)v116 - v128) >> 3;
                unint64_t v120 = v129 + 1;
                if ((unint64_t)(v129 + 1) >> 61) {
                  goto LABEL_211;
                }
                uint64_t v130 = v126 - v128;
                if (v130 >> 2 > v120) {
                  unint64_t v120 = v130 >> 2;
                }
                if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v120 = 0x1FFFFFFFFFFFFFFFLL;
                }
                if (v120)
                {
                  uint64_t v131 = 8 * v120;
                  uint64_t v132 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v113 + 56) + 16))(*(void *)(v113 + 56), 8 * v120, 8);
                  long long v124 = (void *)(v132 + 8 * v129);
                  unint64_t v120 = v132 + v131;
                  if (v132) {
                    *long long v124 = v115;
                  }
                }
                else
                {
                  long long v124 = (void *)(8 * v129);
                }
                int64_t v127 = v124 + 1;
                uint64_t v142 = *(void *)(v113 + 32);
                uint64_t v133 = *(void *)(v113 + 40);
                if (v133 == v142) {
                  goto LABEL_178;
                }
                unint64_t v143 = v133 - v142 - 8;
                if (v143 < 0x38)
                {
                  uint64_t v145 = *(void *)(v113 + 40);
                }
                else if ((unint64_t)(v133 - (void)v124) < 0x20)
                {
                  uint64_t v145 = *(void *)(v113 + 40);
                }
                else
                {
                  uint64_t v144 = (v143 >> 3) + 1;
                  uint64_t v145 = v133 - 8 * (v144 & 0x3FFFFFFFFFFFFFFCLL);
                  float64x2x2_t v146 = v124 - 2;
                  float64x2x2_t v147 = (long long *)(v133 - 16);
                  uint64_t v148 = v144 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v149 = *v147;
                    *(v146 - 1) = *(v147 - 1);
                    _OWORD *v146 = v149;
                    v146 -= 2;
                    v147 -= 2;
                    v148 -= 4;
                  }
                  while (v148);
                  v124 -= v144 & 0x3FFFFFFFFFFFFFFCLL;
                  if (v144 == (v144 & 0x3FFFFFFFFFFFFFFCLL)) {
                    goto LABEL_177;
                  }
                }
                do
                {
                  uint64_t v151 = *(void *)(v145 - 8);
                  v145 -= 8;
                  *--long long v124 = v151;
                }
                while (v145 != v142);
                goto LABEL_177;
              }
LABEL_143:
              if (v116) {
                *uint64_t v116 = v115;
              }
              int64_t v127 = v116 + 1;
LABEL_180:
              *(void *)(v113 + 40) = v127;
              v174[0] = v115;
              uint64_t v153 = *(void *)(v113 + 120);
              if (v153)
              {
                (*(void (**)(uint64_t, void *))(*(void *)v153 + 48))(v153, v174);
                int32x2_t v154 = (void *)v115[8];
                v154[1] = 0;
                uint64_t v155 = v107[4];
                *int32x2_t v154 = v155;
                uint64_t v156 = (void *)v115[20];
                uint64_t v157 = v107[5];
                if (v157) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v157 + 8), 1uLL, memory_order_relaxed);
                }
                long long v158 = (std::__shared_weak_count *)v156[1];
                *uint64_t v156 = v155;
                v156[1] = v157;
                if (v158 && !atomic_fetch_add(&v158->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                  std::__shared_weak_count::__release_weak(v158);
                }
                uint64_t v159 = v115[8];
                *(void *)(v159 + 24) = 0;
                uint64_t v160 = v107[6];
                *(void *)(v159 + 16) = v160;
                uint64_t v161 = v115[20];
                uint64_t v162 = v107[7];
                if (v162) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v162 + 8), 1uLL, memory_order_relaxed);
                }
                long long v163 = *(std::__shared_weak_count **)(v161 + 24);
                *(void *)(v161 + 16) = v160;
                *(void *)(v161 + 24) = v162;
                if (v163 && !atomic_fetch_add(&v163->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                  std::__shared_weak_count::__release_weak(v163);
                }
                uint64_t v164 = v107[3];
                uint64_t v166 = *(void *)(v164 + 56);
                int v165 = *(std::__shared_weak_count **)(v164 + 64);
                if (v165) {
                  atomic_fetch_add_explicit(&v165->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                if (v166 && **(void **)(v166 + 40) == v115[1])
                {
                  uint64_t v168 = v115[2];
                  if (v168 && v168 != v166) {
                    ggl::PipelineSetup::resetData((uint64_t)v115);
                  }
                  if (v165) {
                    atomic_fetch_add_explicit(&v165->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  uint64_t v167 = (std::__shared_weak_count *)v115[3];
                  v115[2] = v166;
                  v115[3] = v165;
                  if (!v167) {
                    goto LABEL_205;
                  }
                }
                else
                {
                  uint64_t v167 = (std::__shared_weak_count *)v115[3];
                  v115[2] = 0;
                  v115[3] = 0;
                  if (!v167)
                  {
LABEL_205:
                    if (v165)
                    {
                      if (!atomic_fetch_add(&v165->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                        std::__shared_weak_count::__release_weak(v165);
                      }
                    }
                    *(void *)(v112 + 24) = *(void *)(v107[3] + 72);
                    *(void *)(v112 + 32) = v115;
                    *(_DWORD *)(v112 + 40) = 127;
                    *(void *)(v112 + 64) = *((void *)a1 + 3);
                    uint64_t v169 = *((void *)a1 + 3);
                    v107[18] = *(void *)(**(void **)(v169 + 64) + 48)
                             - *(void *)(**(void **)(v169 + 64) + 40);
                    v107[19] = *(void *)(*(void *)(v169 + 96) + 48) - *(void *)(*(void *)(v169 + 96) + 40);
                    *(void *)(v107[11] + v110) |= v111;
                    return;
                  }
                }
                if (!atomic_fetch_add(&v167->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                  std::__shared_weak_count::__release_weak(v167);
                }
                goto LABEL_205;
              }
            }
LABEL_210:
            std::__throw_bad_function_call[abi:nn180100]();
LABEL_211:
            abort();
          }
        }
      }
    }
  }
}

void sub_1A26C2188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);

  md::PolylineOverlayLayoutContext::~PolylineOverlayLayoutContext((md::PolylineOverlayLayoutContext *)va);
  _Unwind_Resume(a1);
}

void md::PolygonOverlayRenderable::updateWithContext(md::LayoutContext const&,BOOL,BOOL,ggl::ConstantDataTyped<ggl::OverlayOcclusion::AlphaTint> *,float)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = 48;
  if (!**(unsigned char **)a1) {
    uint64_t v7 = 56;
  }
  uint64_t v8 = *(void *)(**(void **)(v6 + 88) + v7);
  uint64_t v9 = *(void *)(v8 + 8);
  if (v9 == *(void *)v8)
  {
    uint64_t v20 = *(void *)(v8 + 88);
    if (!v20)
    {
LABEL_89:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_90:
      abort();
    }
    unint64_t v10 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 48))(v20);
    uint64_t v11 = *(void **)(v8 + 40);
    unint64_t v21 = *(void *)(v8 + 48);
    if ((unint64_t)v11 >= v21)
    {
      uint64_t v23 = *(void *)(v8 + 32);
      uint64_t v24 = ((uint64_t)v11 - v23) >> 3;
      unint64_t v15 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 61) {
        goto LABEL_90;
      }
      uint64_t v25 = v21 - v23;
      if (v25 >> 2 > v15) {
        unint64_t v15 = v25 >> 2;
      }
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v15)
      {
        uint64_t v26 = 8 * v15;
        uint64_t v27 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v8 + 56) + 16))(*(void *)(v8 + 56), 8 * v15, 8);
        BOOL v19 = (void *)(v27 + 8 * v24);
        unint64_t v15 = v27 + v26;
        if (v27) {
          void *v19 = v10;
        }
      }
      else
      {
        BOOL v19 = (void *)(8 * v24);
      }
      BOOL v22 = v19 + 1;
      uint64_t v37 = *(void *)(v8 + 32);
      uint64_t v28 = *(void *)(v8 + 40);
      if (v28 == v37) {
        goto LABEL_50;
      }
      unint64_t v38 = v28 - v37 - 8;
      if (v38 < 0x38)
      {
        uint64_t v40 = *(void *)(v8 + 40);
      }
      else if ((unint64_t)(v28 - (void)v19) < 0x20)
      {
        uint64_t v40 = *(void *)(v8 + 40);
      }
      else
      {
        uint64_t v39 = (v38 >> 3) + 1;
        uint64_t v40 = v28 - 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v41 = v19 - 2;
        uint64_t v42 = (long long *)(v28 - 16);
        uint64_t v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v44 = *v42;
          *(v41 - 1) = *(v42 - 1);
          *uint64_t v41 = v44;
          v41 -= 2;
          v42 -= 2;
          v43 -= 4;
        }
        while (v43);
        v19 -= v39 & 0x3FFFFFFFFFFFFFFCLL;
        if (v39 == (v39 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_49;
        }
      }
      do
      {
        uint64_t v46 = *(void *)(v40 - 8);
        v40 -= 8;
        *--BOOL v19 = v46;
      }
      while (v40 != v37);
      goto LABEL_49;
    }
  }
  else
  {
    unint64_t v10 = *(void **)(v9 - 8);
    *(void *)(v8 + 8) = v9 - 8;
    uint64_t v11 = *(void **)(v8 + 40);
    unint64_t v12 = *(void *)(v8 + 48);
    if ((unint64_t)v11 >= v12)
    {
      uint64_t v13 = *(void *)(v8 + 32);
      uint64_t v14 = ((uint64_t)v11 - v13) >> 3;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 61) {
        goto LABEL_90;
      }
      uint64_t v16 = v12 - v13;
      if (v16 >> 2 > v15) {
        unint64_t v15 = v16 >> 2;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v15)
      {
        uint64_t v17 = 8 * v15;
        uint64_t v18 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v8 + 56) + 16))(*(void *)(v8 + 56), 8 * v15, 8);
        BOOL v19 = (void *)(v18 + 8 * v14);
        unint64_t v15 = v18 + v17;
        if (v18) {
          void *v19 = v10;
        }
      }
      else
      {
        BOOL v19 = (void *)(8 * v14);
      }
      BOOL v22 = v19 + 1;
      uint64_t v29 = *(void *)(v8 + 32);
      uint64_t v28 = *(void *)(v8 + 40);
      if (v28 == v29) {
        goto LABEL_50;
      }
      unint64_t v30 = v28 - v29 - 8;
      if (v30 < 0x38)
      {
        uint64_t v32 = *(void *)(v8 + 40);
      }
      else if ((unint64_t)(v28 - (void)v19) < 0x20)
      {
        uint64_t v32 = *(void *)(v8 + 40);
      }
      else
      {
        uint64_t v31 = (v30 >> 3) + 1;
        uint64_t v32 = v28 - 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
        char v33 = v19 - 2;
        size_t v34 = (long long *)(v28 - 16);
        uint64_t v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v36 = *v34;
          *(v33 - 1) = *(v34 - 1);
          *char v33 = v36;
          v33 -= 2;
          v34 -= 2;
          v35 -= 4;
        }
        while (v35);
        v19 -= v31 & 0x3FFFFFFFFFFFFFFCLL;
        if (v31 == (v31 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_49;
        }
      }
      do
      {
        uint64_t v45 = *(void *)(v32 - 8);
        v32 -= 8;
        *--BOOL v19 = v45;
      }
      while (v32 != v29);
LABEL_49:
      uint64_t v28 = *(void *)(v8 + 32);
LABEL_50:
      *(void *)(v8 + 32) = v19;
      *(void *)(v8 + 40) = v22;
      uint64_t v47 = *(void *)(v8 + 48);
      *(void *)(v8 + 48) = v15;
      if (v28) {
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v8 + 56) + 40))(*(void *)(v8 + 56), v28, v47 - v28);
      }
      goto LABEL_52;
    }
  }
  if (v11) {
    *uint64_t v11 = v10;
  }
  BOOL v22 = v11 + 1;
LABEL_52:
  *(void *)(v8 + 40) = v22;
  uint64_t v74 = v10;
  uint64_t v48 = *(void *)(v8 + 120);
  if (!v48) {
    goto LABEL_89;
  }
  (*(void (**)(uint64_t, void **))(*(void *)v48 + 48))(v48, &v74);
  uint64_t v49 = (void *)v10[8];
  uint64_t v50 = *(void *)(v6 + 104);
  uint64_t v51 = *(void *)(v6 + 112);
  *uint64_t v49 = v50;
  v49[1] = 0;
  uint64_t v52 = (void *)v10[20];
  if (v51) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v51 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v53 = (std::__shared_weak_count *)v52[1];
  *uint64_t v52 = v50;
  v52[1] = v51;
  if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
  }
  uint64_t v54 = v10[8];
  uint64_t v55 = *(void *)(v6 + 120);
  uint64_t v56 = *(void *)(v6 + 128);
  *(void *)(v54 + 16) = v55;
  *(void *)(v54 + 24) = 0;
  uint64_t v57 = v10[20];
  if (v56) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v56 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v58 = *(std::__shared_weak_count **)(v57 + 24);
  *(void *)(v57 + 16) = v55;
  *(void *)(v57 + 24) = v56;
  if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
    std::__shared_weak_count::__release_weak(v58);
  }
  uint64_t v59 = **(void **)(v6 + 88);
  uint64_t v60 = v59 + 16;
  if (**(unsigned char **)a1) {
    uint64_t v60 = **(void **)(v6 + 88);
  }
  uint64_t v61 = *(void *)(v59 + 16 * (**(unsigned char **)a1 == 0));
  unint64_t v62 = *(std::__shared_weak_count **)(v60 + 8);
  if (v62) {
    atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v61 || **(void **)(v61 + 40) != v10[1])
  {
    uint64_t v63 = (std::__shared_weak_count *)v10[3];
    _DWORD v10[2] = 0;
    void v10[3] = 0;
    if (!v63) {
      goto LABEL_79;
    }
    goto LABEL_77;
  }
  uint64_t v64 = v10[2];
  if (v64 && v64 != v61) {
    ggl::PipelineSetup::resetData((uint64_t)v10);
  }
  if (v62) {
    atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v63 = (std::__shared_weak_count *)v10[3];
  _DWORD v10[2] = v61;
  void v10[3] = v62;
  if (v63)
  {
LABEL_77:
    if (!atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
LABEL_79:
  if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
    std::__shared_weak_count::__release_weak(v62);
  }
  uint64_t v65 = *(void *)(a1 + 24);
  if (v65)
  {
    uint64_t v66 = v10[8];
    *(void *)(v66 + 48) = v65;
    *(void *)(v66 + 56) = 0;
    uint64_t v67 = v10[20];
    long long v68 = *(std::__shared_weak_count **)(v67 + 56);
    *(void *)(v67 + 48) = 0;
    *(void *)(v67 + 56) = 0;
    if (v68)
    {
      if (!atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
  }
  uint64_t v69 = *(void **)(v10[8] + 32);
  unint64_t v70 = v69[1];
  uint64_t v71 = v69[9];
  *(_DWORD *)uint64_t v71 = 1065353216;
  *(void *)(v71 + 12) = 0;
  *(void *)(v71 + 4) = 0;
  *(_DWORD *)(v71 + 20) = 1065353216;
  *(void *)(v71 + 24) = 0;
  *(void *)(v71 + 32) = 0;
  *(_DWORD *)(v71 + 40) = 1065353216;
  *(void *)(v71 + 52) = 0;
  *(void *)(v71 + 44) = 0;
  *(_DWORD *)(v71 + 60) = 1065353216;
  uint64_t v72 = *(_DWORD **)(a1 + 8);
  uint64_t v73 = *(_DWORD **)(a1 + 16);
  *(_DWORD *)(v71 + 64) = *v72;
  *(_DWORD *)(v71 + 68) = v72[1];
  *(_DWORD *)(v71 + 72) = v72[2];
  *(_DWORD *)(v71 + 76) = v72[3];
  *(_OWORD *)(v71 + 80) = xmmword_1A28FCDA0;
  *(_DWORD *)(v71 + 96) = *v73;
  if (v69[8] > v70) {
    unint64_t v70 = v69[8];
  }
  v69[7] = 0;
  v69[8] = v70;
  *(_DWORD *)(a3 + 40) = *(_DWORD *)(v6 + 80);
  *(void *)(a3 + 24) = a2;
  *(void *)(a3 + 32) = v10;
  *(void *)(a3 + 64) = *(void *)(v6 + 24);
}

void md::PolygonOverlayRenderable::collectRenderItems(uint64_t a1, int a2, uint64_t a3, __n128 a4)
{
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    BOOL v7 = a2 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v77 = *(void *)(v6 + 8);
    uint64_t v78 = *(void *)(v6 + 16);
    while (v77 != v78)
    {
      uint64_t v80 = *(void **)v77;
      uint64_t v81 = *(void *)(*(void *)v77 + 1328);
      uint64_t v82 = *(void *)(*(void *)v77 + 1320);
      if (v81 != v82)
      {
        uint64_t v83 = *(void *)(*(void *)v77 + 1328);
        do
        {
          long long v85 = *(void **)(v83 - 24);
          v83 -= 24;
          uint64_t v84 = v85;
          if (v85)
          {
            *(void *)(v81 - 16) = v84;
            operator delete(v84);
          }
          uint64_t v81 = v83;
        }
        while (v83 != v82);
      }
      v80[166] = v82;
      v80[163] = v80[162];
      uint64_t v86 = (void *)v80[172];
      if (v86)
      {
        do
        {
          if (v86[1])
          {
            unint64_t v87 = 0;
            uint64_t v88 = v86 + 2;
            uint64_t v89 = v86 + 2;
            uint64_t v90 = (void (***)(void))(v86 + 2);
            do
            {
              uint64_t v91 = (void (**)(void *))*v90;
              v90 += 15;
              (*v91)(v89);
              ++v87;
              v88 += 15;
              uint64_t v89 = v90;
            }
            while (v87 < v86[1]);
          }
          v86[1] = 0;
          uint64_t v86 = (void *)*v86;
        }
        while (v86);
        uint64_t v79 = v80[172];
      }
      else
      {
        uint64_t v79 = 0;
      }
      v80[173] = v79;
      v77 += 8;
    }
  }
  unint64_t v8 = 0;
  unint64_t v92 = 0;
  while (2)
  {
    switch((char)v8)
    {
      case 0:
      case 1:
      case 12:
        uint64_t v9 = *(void *)(a1 + 8 * v8 + 136);
        char v93 = v8;
        v116[0] = v9;
        uint64_t v10 = *(void *)(a3 + 24);
        if (!v10) {
          goto LABEL_189;
        }
        (*(void (**)(uint64_t, char *, void *))(*(void *)v10 + 48))(v10, &v93, v116);
        goto LABEL_8;
      case 2:
        uint64_t v35 = *(void *)(a1 + 40);
        long long v36 = (void (**)(void *))&unk_1EF576DD0;
        v114[0] = &unk_1EF576DD0;
        v114[1] = &v92;
        v114[2] = a3;
        uint64_t v115 = v114;
        uint64_t v37 = *(char ****)(v35 + 8);
        unint64_t v38 = *(char ****)(v35 + 16);
        if (v37 == v38) {
          goto LABEL_152;
        }
        while (1)
        {
          uint64_t v39 = *v37;
          uint64_t v40 = (uint64_t)v115;
          if (v115)
          {
            if (v115 == v114)
            {
              unint64_t v117 = v116;
              a4.n128_f64[0] = (*(double (**)(void *, void *))(v114[0] + 24))(v114, v116);
              goto LABEL_69;
            }
            uint64_t v40 = (*(uint64_t (**)(void))(*v115 + 16))();
          }
          unint64_t v117 = (void *)v40;
LABEL_69:
          md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(v39, 1u, (uint64_t)v116, a4);
          if (v117 == v116)
          {
            (*(void (**)(void *))(v116[0] + 32))(v116);
          }
          else if (v117)
          {
            (*(void (**)(void))(*v117 + 40))();
          }
          if (++v37 == v38)
          {
            long long v76 = v115;
            if (v115 == v114)
            {
              long long v36 = (void (**)(void *))v114[0];
LABEL_152:
              v36[4](v114);
              goto LABEL_8;
            }
LABEL_166:
            if (v76) {
              (*(void (**)(void *))(*v76 + 40))(v76);
            }
            goto LABEL_8;
          }
        }
      case 3:
        uint64_t v17 = *(void *)(a1 + 40);
        uint64_t v18 = (void (**)(void *))&unk_1EF576E18;
        v112[0] = &unk_1EF576E18;
        v112[1] = &v92;
        v112[2] = a3;
        uint64_t v113 = v112;
        BOOL v19 = *(char ****)(v17 + 8);
        uint64_t v20 = *(char ****)(v17 + 16);
        if (v19 == v20) {
          goto LABEL_143;
        }
        while (1)
        {
          unint64_t v21 = *v19;
          uint64_t v22 = (uint64_t)v113;
          if (v113)
          {
            if (v113 == v112)
            {
              unint64_t v117 = v116;
              a4.n128_f64[0] = (*(double (**)(void *, void *))(v112[0] + 24))(v112, v116);
              goto LABEL_33;
            }
            uint64_t v22 = (*(uint64_t (**)(void))(*v113 + 16))();
          }
          unint64_t v117 = (void *)v22;
LABEL_33:
          md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(v21, 2u, (uint64_t)v116, a4);
          if (v117 == v116)
          {
            (*(void (**)(void *))(v116[0] + 32))(v116);
          }
          else if (v117)
          {
            (*(void (**)(void))(*v117 + 40))();
          }
          if (++v19 == v20)
          {
            long long v76 = v113;
            if (v113 != v112) {
              goto LABEL_166;
            }
            uint64_t v18 = (void (**)(void *))v112[0];
LABEL_143:
            v18[4](v112);
            goto LABEL_8;
          }
        }
      case 4:
        uint64_t v47 = *(void *)(a1 + 40);
        uint64_t v48 = (void (**)(void *))&unk_1EF576E60;
        v110[0] = &unk_1EF576E60;
        v110[1] = &v92;
        v110[2] = a3;
        uint64_t v111 = v110;
        uint64_t v49 = *(char ****)(v47 + 8);
        uint64_t v50 = *(char ****)(v47 + 16);
        if (v49 == v50) {
          goto LABEL_158;
        }
        while (1)
        {
          uint64_t v51 = *v49;
          uint64_t v52 = (uint64_t)v111;
          if (v111)
          {
            if (v111 == v110)
            {
              unint64_t v117 = v116;
              a4.n128_f64[0] = (*(double (**)(void *, void *))(v110[0] + 24))(v110, v116);
              goto LABEL_93;
            }
            uint64_t v52 = (*(uint64_t (**)(void))(*v111 + 16))();
          }
          unint64_t v117 = (void *)v52;
LABEL_93:
          md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(v51, 4u, (uint64_t)v116, a4);
          if (v117 == v116)
          {
            (*(void (**)(void *))(v116[0] + 32))(v116);
          }
          else if (v117)
          {
            (*(void (**)(void))(*v117 + 40))();
          }
          if (++v49 == v50)
          {
            long long v76 = v111;
            if (v111 != v110) {
              goto LABEL_166;
            }
            uint64_t v48 = (void (**)(void *))v110[0];
LABEL_158:
            v48[4](v110);
            goto LABEL_8;
          }
        }
      case 5:
        uint64_t v58 = *(void *)(a1 + 40);
        uint64_t v59 = (void (**)(void *))&unk_1EF576EA8;
        v108[0] = &unk_1EF576EA8;
        v108[1] = &v92;
        v108[2] = a3;
        unint64_t v109 = v108;
        uint64_t v60 = *(char ****)(v58 + 8);
        uint64_t v61 = *(char ****)(v58 + 16);
        if (v60 == v61) {
          goto LABEL_161;
        }
        while (1)
        {
          unint64_t v62 = *v60;
          uint64_t v63 = (uint64_t)v109;
          if (v109)
          {
            if (v109 == v108)
            {
              unint64_t v117 = v116;
              a4.n128_f64[0] = (*(double (**)(void *, void *))(v108[0] + 24))(v108, v116);
              goto LABEL_111;
            }
            uint64_t v63 = (*(uint64_t (**)(void))(*v109 + 16))();
          }
          unint64_t v117 = (void *)v63;
LABEL_111:
          md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(v62, 8u, (uint64_t)v116, a4);
          if (v117 == v116)
          {
            (*(void (**)(void *))(v116[0] + 32))(v116);
          }
          else if (v117)
          {
            (*(void (**)(void *))(*v117 + 40))(v117);
          }
          if (++v60 == v61)
          {
            long long v76 = v109;
            if (v109 != v108) {
              goto LABEL_166;
            }
            uint64_t v59 = (void (**)(void *))v108[0];
LABEL_161:
            v59[4](v108);
            goto LABEL_8;
          }
        }
      case 6:
        uint64_t v41 = *(void *)(a1 + 40);
        uint64_t v42 = (void (**)(void *))&unk_1EF576EF0;
        v106[0] = &unk_1EF576EF0;
        v106[1] = &v92;
        v106[2] = a3;
        unint64_t v107 = v106;
        uint64_t v43 = *(char ****)(v41 + 8);
        long long v44 = *(char ****)(v41 + 16);
        if (v43 == v44) {
          goto LABEL_155;
        }
        while (1)
        {
          uint64_t v45 = *v43;
          uint64_t v46 = (uint64_t)v107;
          if (v107)
          {
            if (v107 == v106)
            {
              unint64_t v117 = v116;
              a4.n128_f64[0] = (*(double (**)(void *, void *))(v106[0] + 24))(v106, v116);
              goto LABEL_81;
            }
            uint64_t v46 = (*(uint64_t (**)(void))(*v107 + 16))();
          }
          unint64_t v117 = (void *)v46;
LABEL_81:
          md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(v45, 0x10u, (uint64_t)v116, a4);
          if (v117 == v116)
          {
            (*(void (**)(void *))(v116[0] + 32))(v116);
          }
          else if (v117)
          {
            (*(void (**)(void))(*v117 + 40))();
          }
          if (++v43 == v44)
          {
            long long v76 = v107;
            if (v107 != v106) {
              goto LABEL_166;
            }
            uint64_t v42 = (void (**)(void *))v106[0];
LABEL_155:
            v42[4](v106);
            goto LABEL_8;
          }
        }
      case 7:
        uint64_t v70 = *(void *)(a1 + 40);
        uint64_t v71 = (void (**)(void *))&unk_1EF576F38;
        v104[0] = &unk_1EF576F38;
        v104[1] = &v92;
        v104[2] = a3;
        long long v105 = v104;
        uint64_t v72 = *(char ****)(v70 + 8);
        uint64_t v73 = *(char ****)(v70 + 16);
        if (v72 == v73) {
          goto LABEL_172;
        }
        do
        {
          uint64_t v74 = *v72;
          uint64_t v75 = (uint64_t)v105;
          if (!v105) {
            goto LABEL_133;
          }
          if (v105 != v104)
          {
            uint64_t v75 = (*(uint64_t (**)(void))(*v105 + 16))();
LABEL_133:
            unint64_t v117 = (void *)v75;
            goto LABEL_135;
          }
          unint64_t v117 = v116;
          a4.n128_f64[0] = (*(double (**)(void *, void *))(v104[0] + 24))(v104, v116);
LABEL_135:
          md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(v74, 0x20u, (uint64_t)v116, a4);
          if (v117 == v116)
          {
            (*(void (**)(void *))(v116[0] + 32))(v116);
          }
          else if (v117)
          {
            (*(void (**)(void *))(*v117 + 40))(v117);
          }
          ++v72;
        }
        while (v72 != v73);
        long long v76 = v105;
        if (v105 != v104) {
          goto LABEL_166;
        }
        uint64_t v71 = (void (**)(void *))v104[0];
LABEL_172:
        v71[4](v104);
LABEL_8:
        unint64_t v8 = v92 + 1;
        unint64_t v92 = v8;
        if (v8 < 0xE) {
          continue;
        }
        return;
      case 8:
        uint64_t v29 = *(void *)(a1 + 40);
        unint64_t v30 = (void (**)(void *))&unk_1EF576F80;
        v102[0] = &unk_1EF576F80;
        v102[1] = &v92;
        v102[2] = a3;
        uint64_t v103 = v102;
        uint64_t v31 = *(char ****)(v29 + 8);
        uint64_t v32 = *(char ****)(v29 + 16);
        if (v31 == v32) {
          goto LABEL_149;
        }
        while (1)
        {
          char v33 = *v31;
          uint64_t v34 = (uint64_t)v103;
          if (v103)
          {
            if (v103 == v102)
            {
              unint64_t v117 = v116;
              a4.n128_f64[0] = (*(double (**)(void *, void *))(v102[0] + 24))(v102, v116);
              goto LABEL_57;
            }
            uint64_t v34 = (*(uint64_t (**)(void))(*v103 + 16))();
          }
          unint64_t v117 = (void *)v34;
LABEL_57:
          md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(v33, 0x40u, (uint64_t)v116, a4);
          if (v117 == v116)
          {
            (*(void (**)(void *))(v116[0] + 32))(v116);
          }
          else if (v117)
          {
            (*(void (**)(void))(*v117 + 40))();
          }
          if (++v31 == v32)
          {
            long long v76 = v103;
            if (v103 != v102) {
              goto LABEL_166;
            }
            unint64_t v30 = (void (**)(void *))v102[0];
LABEL_149:
            v30[4](v102);
            goto LABEL_8;
          }
        }
      case 9:
        uint64_t v64 = *(void *)(a1 + 40);
        uint64_t v65 = (void (**)(void *))&unk_1EF576FC8;
        v100[0] = &unk_1EF576FC8;
        v100[1] = &v92;
        v100[2] = a3;
        uint64_t v101 = v100;
        uint64_t v66 = *(char ****)(v64 + 8);
        uint64_t v67 = *(char ****)(v64 + 16);
        if (v66 == v67) {
          goto LABEL_164;
        }
        while (1)
        {
          long long v68 = *v66;
          uint64_t v69 = (uint64_t)v101;
          if (v101)
          {
            if (v101 == v100)
            {
              unint64_t v117 = v116;
              a4.n128_f64[0] = (*(double (**)(void *, void *))(v100[0] + 24))(v100, v116);
              goto LABEL_123;
            }
            uint64_t v69 = (*(uint64_t (**)(void))(*v101 + 16))();
          }
          unint64_t v117 = (void *)v69;
LABEL_123:
          md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(v68, 0x80u, (uint64_t)v116, a4);
          if (v117 == v116)
          {
            (*(void (**)(void *))(v116[0] + 32))(v116);
          }
          else if (v117)
          {
            (*(void (**)(void *))(*v117 + 40))(v117);
          }
          if (++v66 == v67)
          {
            long long v76 = v101;
            if (v101 != v100) {
              goto LABEL_166;
            }
            uint64_t v65 = (void (**)(void *))v100[0];
LABEL_164:
            v65[4](v100);
            goto LABEL_8;
          }
        }
      case 10:
        uint64_t v11 = *(void *)(a1 + 40);
        unint64_t v12 = (void (**)(void *))&unk_1EF577010;
        v98[0] = &unk_1EF577010;
        v98[1] = &v92;
        v98[2] = a3;
        uint64_t v99 = v98;
        uint64_t v13 = *(char ****)(v11 + 8);
        uint64_t v14 = *(char ****)(v11 + 16);
        if (v13 == v14) {
          goto LABEL_140;
        }
        while (1)
        {
          unint64_t v15 = *v13;
          uint64_t v16 = (uint64_t)v99;
          if (v99)
          {
            if (v99 == v98)
            {
              unint64_t v117 = v116;
              a4.n128_f64[0] = (*(double (**)(void *, void *))(v98[0] + 24))(v98, v116);
              goto LABEL_21;
            }
            uint64_t v16 = (*(uint64_t (**)(void))(*v99 + 16))();
          }
          unint64_t v117 = (void *)v16;
LABEL_21:
          md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(v15, 0x100u, (uint64_t)v116, a4);
          if (v117 == v116)
          {
            (*(void (**)(void *))(v116[0] + 32))(v116);
          }
          else if (v117)
          {
            (*(void (**)(void))(*v117 + 40))();
          }
          if (++v13 == v14)
          {
            long long v76 = v99;
            if (v99 != v98) {
              goto LABEL_166;
            }
            unint64_t v12 = (void (**)(void *))v98[0];
LABEL_140:
            v12[4](v98);
            goto LABEL_8;
          }
        }
      case 11:
        uint64_t v23 = *(void *)(a1 + 40);
        uint64_t v24 = (void (**)(void *))&unk_1EF577058;
        v96[0] = &unk_1EF577058;
        v96[1] = &v92;
        v96[2] = a3;
        uint64_t v97 = v96;
        uint64_t v25 = *(char ****)(v23 + 8);
        uint64_t v26 = *(char ****)(v23 + 16);
        if (v25 == v26) {
          goto LABEL_146;
        }
        break;
      case 13:
        unint64_t v53 = *(void **)(a1 + 304);
        v94[0] = &unk_1EF5770A0;
        v94[1] = &v92;
        v94[2] = a3;
        double v95 = v94;
        uint64_t v55 = v53[8];
        uint64_t v54 = v53[9];
        if ((unint64_t)(v54 - v55) < 9) {
          goto LABEL_7;
        }
        uint64_t v56 = v53[11];
        unint64_t v57 = 1;
        do
        {
          if ((*(void *)(v56 + 8 * (v57 >> 6)) & (1 << v57)) != 0)
          {
            v116[0] = *(void *)(v55 + 8 * v57);
            if (!v95)
            {
LABEL_189:
              std::__throw_bad_function_call[abi:nn180100]();
              __break(1u);
            }
            (*(void (**)(void *, void *))(*v95 + 48))(v95, v116);
            uint64_t v56 = v53[11];
            *(void *)(v56 + 8 * (v57 >> 6)) &= ~(1 << v57);
            uint64_t v55 = v53[8];
            uint64_t v54 = v53[9];
          }
          ++v57;
        }
        while (v57 < (v54 - v55) >> 3);
        if (v95 == v94)
        {
LABEL_7:
          (*(void (**)(void *))(v94[0] + 32))(v94);
        }
        else if (v95)
        {
          (*(void (**)(void))(*v95 + 40))();
        }
        goto LABEL_8;
      default:
        goto LABEL_8;
    }
    break;
  }
  while (1)
  {
    uint64_t v27 = *v25;
    uint64_t v28 = (uint64_t)v97;
    if (v97)
    {
      if (v97 == v96)
      {
        unint64_t v117 = v116;
        a4.n128_f64[0] = (*(double (**)(void *, void *))(v96[0] + 24))(v96, v116);
        goto LABEL_45;
      }
      uint64_t v28 = (*(uint64_t (**)(void))(*v97 + 16))();
    }
    unint64_t v117 = (void *)v28;
LABEL_45:
    md::Ribbons::RibbonBatch<md::Ribbons::GradientPolylineOverlayRibbonDescriptor>::collectRenderItemsForPassesNoReset(v27, 0x200u, (uint64_t)v116, a4);
    if (v117 == v116)
    {
      (*(void (**)(void *))(v116[0] + 32))(v116);
    }
    else if (v117)
    {
      (*(void (**)(void))(*v117 + 40))();
    }
    if (++v25 == v26)
    {
      long long v76 = v97;
      if (v97 != v96) {
        goto LABEL_166;
      }
      uint64_t v24 = (void (**)(void *))v96[0];
LABEL_146:
      v24[4](v96);
      goto LABEL_8;
    }
  }
}

void sub_1A26C39D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::function<void ()(ggl::RenderItem *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A26C39F0(_Unwind_Exception *a1)
{
  std::function<void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::~function((void *)(v1 - 192));
  _Unwind_Resume(a1);
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_10,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_10>,void ()(ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = **(void **)(a1 + 8);
  uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 24);
  char v7 = v3;
  uint64_t v6 = v2;
  if (v4)
  {
    (*(void (**)(uint64_t, char *, uint64_t *))(*(void *)v4 + 48))(v4, &v7, &v6);
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_10,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_10>,void ()(ggl::RenderItem *)>::destroy_deallocate(v5);
  }
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_10,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_10>,void ()(ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5770A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_10,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_10>,void ()(ggl::RenderItem *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF5770A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_10,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_10>,void ()(ggl::RenderItem *)>::~__func()
{
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_9,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_9>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = **(void **)(a1 + 8);
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 24);
  char v8 = v4;
  uint64_t v7 = v3;
  if (v5)
  {
    (*(void (**)(uint64_t, char *, uint64_t *))(*(void *)v5 + 48))(v5, &v8, &v7);
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_9,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_9>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::destroy_deallocate(v6);
  }
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_9,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_9>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF577058;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_9,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_9>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF577058;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_9,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_9>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_8,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_8>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = **(void **)(a1 + 8);
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 24);
  char v8 = v4;
  uint64_t v7 = v3;
  if (v5)
  {
    (*(void (**)(uint64_t, char *, uint64_t *))(*(void *)v5 + 48))(v5, &v8, &v7);
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_8,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_8>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::destroy_deallocate(v6);
  }
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_8,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_8>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF577010;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_8,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_8>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF577010;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_8,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_8>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_7,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_7>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = **(void **)(a1 + 8);
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 24);
  char v8 = v4;
  uint64_t v7 = v3;
  if (v5)
  {
    (*(void (**)(uint64_t, char *, uint64_t *))(*(void *)v5 + 48))(v5, &v8, &v7);
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_7,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_7>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::destroy_deallocate(v6);
  }
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_7,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_7>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF576FC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_7,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_7>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF576FC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_7,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_7>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_6,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_6>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = **(void **)(a1 + 8);
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 24);
  char v8 = v4;
  uint64_t v7 = v3;
  if (v5)
  {
    (*(void (**)(uint64_t, char *, uint64_t *))(*(void *)v5 + 48))(v5, &v8, &v7);
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_6,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_6>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::destroy_deallocate(v6);
  }
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_6,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_6>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF576F80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_6,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_6>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF576F80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_6,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_6>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_5,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_5>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = **(void **)(a1 + 8);
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 24);
  char v8 = v4;
  uint64_t v7 = v3;
  if (v5)
  {
    (*(void (**)(uint64_t, char *, uint64_t *))(*(void *)v5 + 48))(v5, &v8, &v7);
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_5,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_5>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::destroy_deallocate(v6);
  }
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_5,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_5>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF576F38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_5,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_5>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF576F38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_5,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_5>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_4,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_4>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = **(void **)(a1 + 8);
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 24);
  char v8 = v4;
  uint64_t v7 = v3;
  if (v5)
  {
    (*(void (**)(uint64_t, char *, uint64_t *))(*(void *)v5 + 48))(v5, &v8, &v7);
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_4,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_4>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::destroy_deallocate(v6);
  }
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_4,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_4>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF576EF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_4,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_4>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF576EF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_4,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_4>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_3,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_3>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = **(void **)(a1 + 8);
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 24);
  char v8 = v4;
  uint64_t v7 = v3;
  if (v5)
  {
    (*(void (**)(uint64_t, char *, uint64_t *))(*(void *)v5 + 48))(v5, &v8, &v7);
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_3,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_3>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::destroy_deallocate(v6);
  }
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_3,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_3>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF576EA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_3,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_3>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF576EA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_3,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_3>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_2,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_2>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = **(void **)(a1 + 8);
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 24);
  char v8 = v4;
  uint64_t v7 = v3;
  if (v5)
  {
    (*(void (**)(uint64_t, char *, uint64_t *))(*(void *)v5 + 48))(v5, &v8, &v7);
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_2,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_2>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::destroy_deallocate(v6);
  }
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_2,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_2>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF576E60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_2,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_2>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF576E60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_2,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_2>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_1,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_1>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = **(void **)(a1 + 8);
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 24);
  char v8 = v4;
  uint64_t v7 = v3;
  if (v5)
  {
    (*(void (**)(uint64_t, char *, uint64_t *))(*(void *)v5 + 48))(v5, &v8, &v7);
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_1,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_1>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::destroy_deallocate(v6);
  }
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_1,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_1>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF576E18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_1,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_1>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF576E18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_1,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_1>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_0,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_0>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = **(void **)(a1 + 8);
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 24);
  char v8 = v4;
  uint64_t v7 = v3;
  if (v5)
  {
    (*(void (**)(uint64_t, char *, uint64_t *))(*(void *)v5 + 48))(v5, &v8, &v7);
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_0,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_0>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::destroy_deallocate(v6);
  }
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_0,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_0>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF576DD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_0,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_0>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF576DD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_0,std::allocator<md::PolygonOverlayRenderable::collectRenderItems(BOOL,std::function<void ()(md::PolygonOverlayRenderable::Pass,ggl::RenderItem *)>)::$_0>,void ()(md::Ribbons::PolylineOverlayRibbonDescriptor::Passes,ggl::RenderItem *)>::~__func()
{
}

uint64_t md::ARWalkingLabelLayoutDedupingGroup::getAlternateLayout(md::ARWalkingLabelLayoutDedupingGroup *this, md::LabelBase *a2)
{
  return 0;
}

void md::ARWalkingLabelLayoutDedupingGroup::onLabelRemoved(int8x8_t *this, md::LabelBase *a2)
{
  uint64_t v4 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(&this[21], (unint64_t)a2);
  if (!v4) {
    return;
  }
  int8x8_t v5 = this[17];
  if (!*(void *)&v5) {
    return;
  }
  unint64_t v6 = v4[3];
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v4[3];
    if (v6 >= *(void *)&v5) {
      unint64_t v8 = v6 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v5 - 1) & v6;
  }
  uint64_t v9 = *(void **)(*(void *)&this[16] + 8 * v8);
  if (!v9) {
    return;
  }
  uint64_t v10 = (void *)*v9;
  if (!*v9) {
    return;
  }
  if (v7.u32[0] < 2uLL)
  {
    uint64_t v11 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v13 = v10[1];
      if (v13 == v6)
      {
        if (v10[2] == v6) {
          goto LABEL_23;
        }
      }
      else if ((v13 & v11) != v8)
      {
        return;
      }
      uint64_t v10 = (void *)*v10;
      if (!v10) {
        return;
      }
    }
  }
  while (1)
  {
    unint64_t v12 = v10[1];
    if (v12 == v6) {
      break;
    }
    if (v12 >= *(void *)&v5) {
      v12 %= *(void *)&v5;
    }
    if (v12 != v8) {
      return;
    }
LABEL_12:
    uint64_t v10 = (void *)*v10;
    if (!v10) {
      return;
    }
  }
  if (v10[2] != v6) {
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v14 = (md::LabelBase **)v10[4];
  unint64_t v15 = (md::LabelBase **)v10[3];
  if (v15 != v14)
  {
    while (*v15 != a2)
    {
      if (++v15 == v14)
      {
        unint64_t v15 = (md::LabelBase **)v10[4];
        break;
      }
    }
  }
  if (v15 != v14)
  {
    uint64_t v16 = v15 + 1;
    if (v15 + 1 != v14)
    {
      do
      {
        if (*v16 != a2) {
          *v15++ = *v16;
        }
        ++v16;
      }
      while (v16 != v14);
      uint64_t v14 = (md::LabelBase **)v10[4];
    }
  }
  if (v15 != v14)
  {
    uint64_t v14 = v15;
    v10[4] = v15;
  }
  uint64_t v17 = this + 26;
  uint64_t v18 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v17, (unint64_t)a2);
  if (v18)
  {
    std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v17, v18);
    if (__p) {
      operator delete(__p);
    }
    uint64_t v14 = (md::LabelBase **)v10[4];
  }
  BOOL v19 = (unint64_t *)v10[3];
  if (v19 != (unint64_t *)v14)
  {
    unint64_t v20 = *v19;
    uint64_t v21 = *v19;
    std::__hash_table<md::LabelBase *,std::hash<md::LabelBase *>,std::equal_to<md::LabelBase *>,std::allocator<md::LabelBase *>>::__emplace_unique_key_args<md::LabelBase *,md::LabelBase *&>((uint64_t)v17, v20, v21);
  }
}

void std::__hash_table<md::LabelBase *,std::hash<md::LabelBase *>,std::equal_to<md::LabelBase *>,std::allocator<md::LabelBase *>>::__emplace_unique_key_args<md::LabelBase *,md::LabelBase *&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = v7 ^ (v7 >> 47);
  unint64_t v9 = 0x9DDFEA08EB382D69 * v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * v8;
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    unint64_t v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = (void *)*v12;
      if (v13)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == a2) {
                return;
              }
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == a2) {
              return;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_22:
  uint64_t v16 = operator new(0x18uLL);
  void *v16 = 0;
  v16[1] = v9;
  v16[2] = a3;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_34;
    }
    if (prime < v10)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v10) {
LABEL_34:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v26 = *(void *)a1;
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v3);
  if (v27)
  {
    void *v16 = *v27;
LABEL_58:
    *uint64_t v27 = v16;
    goto LABEL_59;
  }
  void *v16 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v16;
  *(void *)(v26 + 8 * v3) = a1 + 16;
  if (*v16)
  {
    unint64_t v28 = *(void *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10) {
        v28 %= v10;
      }
    }
    else
    {
      v28 &= v10 - 1;
    }
    uint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
}

void sub_1A26C4B44(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::ARWalkingLabelLayoutDedupingGroup::onLabelAdded(md::ARWalkingLabelLayoutDedupingGroup *this, unint64_t a2)
{
  unint64_t v5 = (*(uint64_t (**)(md::ARWalkingLabelLayoutDedupingGroup *))(*(void *)this + 56))(this);
  if (v5
    && (unint64_t v6 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>((void *)this + 21, v5)) != 0)
  {
    unint64_t v7 = v6[3];
  }
  else
  {
    unint64_t v7 = *((void *)this + 10) + 1;
    *((void *)this + 10) = v7;
  }
  unint64_t v8 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v9 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v8 >> 47) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  unint64_t v11 = *((void *)this + 22);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v2 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11) {
        unint64_t v2 = v10 % v11;
      }
    }
    else
    {
      unint64_t v2 = v10 & (v11 - 1);
    }
    uint64_t v13 = *(void ***)(*((void *)this + 21) + 8 * v2);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == a2) {
                goto LABEL_86;
              }
            }
            else if ((v16 & (v11 - 1)) != v2)
            {
              goto LABEL_26;
            }
            unint64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_26;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == a2) {
              goto LABEL_86;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v2) {
              break;
            }
          }
          unint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_26:
  unint64_t v14 = operator new(0x20uLL);
  void *v14 = 0;
  v14[1] = v10;
  v14[2] = a2;
  v14[3] = 0;
  float v17 = (float)(unint64_t)(*((void *)this + 24) + 1);
  float v18 = *((float *)this + 50);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *((void *)this + 22);
    }
    if (prime <= v11)
    {
      if (prime >= v11) {
        goto LABEL_63;
      }
      unint64_t v35 = vcvtps_u32_f32((float)*((unint64_t *)this + 24) / *((float *)this + 50));
      if (v11 < 3 || (uint8x8_t v36 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (prime <= v35) {
        size_t prime = v35;
      }
      if (prime >= v11)
      {
        unint64_t v11 = *((void *)this + 22);
LABEL_63:
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v10 >= v11) {
            unint64_t v2 = v10 % v11;
          }
          else {
            unint64_t v2 = v10;
          }
        }
        else
        {
          unint64_t v2 = (v11 - 1) & v10;
        }
        goto LABEL_76;
      }
      if (!prime)
      {
        uint64_t v97 = (void *)*((void *)this + 21);
        *((void *)this + 21) = 0;
        if (v97) {
          operator delete(v97);
        }
        unint64_t v11 = 0;
        *((void *)this + 22) = 0;
        goto LABEL_63;
      }
    }
    if (prime >> 61) {
      goto LABEL_208;
    }
    unint64_t v23 = operator new(8 * prime);
    uint8x8_t v24 = (void *)*((void *)this + 21);
    *((void *)this + 21) = v23;
    if (v24) {
      operator delete(v24);
    }
    uint64_t v25 = 0;
    *((void *)this + 22) = prime;
    do
      *(void *)(*((void *)this + 21) + 8 * v25++) = 0;
    while (prime != v25);
    uint64_t v27 = (char *)this + 184;
    uint64_t v26 = (void *)*((void *)this + 23);
    if (!v26)
    {
LABEL_62:
      unint64_t v11 = prime;
      goto LABEL_63;
    }
    size_t v28 = v26[1];
    size_t v29 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v30 = v28 & v29;
      *(void *)(*((void *)this + 21) + 8 * v30) = v27;
      for (unint64_t i = (void *)*v26; *v26; unint64_t i = (void *)*v26)
      {
        size_t v32 = i[1] & v29;
        if (v32 == v30)
        {
          uint64_t v26 = i;
        }
        else
        {
          uint64_t v33 = *((void *)this + 21);
          if (*(void *)(v33 + 8 * v32))
          {
            *uint64_t v26 = *i;
            uint64_t v34 = 8 * v32;
            void *i = **(void **)(*((void *)this + 21) + v34);
            **(void **)(*((void *)this + 21) + v34) = i;
          }
          else
          {
            *(void *)(v33 + 8 * v32) = v26;
            uint64_t v26 = i;
            size_t v30 = v32;
          }
        }
      }
      goto LABEL_62;
    }
    if (v28 >= prime) {
      v28 %= prime;
    }
    *(void *)(*((void *)this + 21) + 8 * v28) = v27;
    unint64_t v38 = (void *)*v26;
    if (!*v26) {
      goto LABEL_62;
    }
    while (1)
    {
      size_t v40 = v38[1];
      if (v40 >= prime) {
        v40 %= prime;
      }
      if (v40 != v28)
      {
        uint64_t v41 = *((void *)this + 21);
        if (!*(void *)(v41 + 8 * v40))
        {
          *(void *)(v41 + 8 * v40) = v26;
          goto LABEL_67;
        }
        *uint64_t v26 = *v38;
        uint64_t v39 = 8 * v40;
        void *v38 = **(void **)(*((void *)this + 21) + v39);
        **(void **)(*((void *)this + 21) + v39) = v38;
        unint64_t v38 = v26;
      }
      size_t v40 = v28;
LABEL_67:
      uint64_t v26 = v38;
      unint64_t v38 = (void *)*v38;
      size_t v28 = v40;
      if (!v38) {
        goto LABEL_62;
      }
    }
  }
LABEL_76:
  uint64_t v42 = *((void *)this + 21);
  uint64_t v43 = *(void **)(v42 + 8 * v2);
  if (v43)
  {
    void *v14 = *v43;
LABEL_84:
    *uint64_t v43 = v14;
    goto LABEL_85;
  }
  void *v14 = *((void *)this + 23);
  *((void *)this + 23) = v14;
  *(void *)(v42 + 8 * v2) = (char *)this + 184;
  if (*v14)
  {
    unint64_t v44 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v44 >= v11) {
        v44 %= v11;
      }
    }
    else
    {
      v44 &= v11 - 1;
    }
    uint64_t v43 = (void *)(*((void *)this + 21) + 8 * v44);
    goto LABEL_84;
  }
LABEL_85:
  ++*((void *)this + 24);
LABEL_86:
  v14[3] = v7;
  unint64_t v45 = *((void *)this + 17);
  if (v45)
  {
    uint8x8_t v46 = (uint8x8_t)vcnt_s8((int8x8_t)v45);
    v46.i16[0] = vaddlv_u8(v46);
    if (v46.u32[0] > 1uLL)
    {
      unint64_t v2 = v7;
      if (v7 >= v45) {
        unint64_t v2 = v7 % v45;
      }
    }
    else
    {
      unint64_t v2 = (v45 - 1) & v7;
    }
    uint64_t v47 = *(void ***)(*((void *)this + 16) + 8 * v2);
    if (v47)
    {
      uint64_t v48 = *v47;
      if (*v47)
      {
        if (v46.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v50 = v48[1];
            if (v50 == v7)
            {
              if (v48[2] == v7) {
                goto LABEL_167;
              }
            }
            else if ((v50 & (v45 - 1)) != v2)
            {
              goto LABEL_107;
            }
            uint64_t v48 = (void *)*v48;
            if (!v48) {
              goto LABEL_107;
            }
          }
        }
        do
        {
          unint64_t v49 = v48[1];
          if (v49 == v7)
          {
            if (v48[2] == v7) {
              goto LABEL_167;
            }
          }
          else
          {
            if (v49 >= v45) {
              v49 %= v45;
            }
            if (v49 != v2) {
              break;
            }
          }
          uint64_t v48 = (void *)*v48;
        }
        while (v48);
      }
    }
  }
LABEL_107:
  uint64_t v51 = (void *)((char *)this + 144);
  uint64_t v48 = operator new(0x30uLL);
  *uint64_t v48 = 0;
  v48[1] = v7;
  v48[2] = v7;
  v48[3] = 0;
  v48[4] = 0;
  v48[5] = 0;
  float v52 = (float)(unint64_t)(*((void *)this + 19) + 1);
  float v53 = *((float *)this + 40);
  if (v45 && (float)(v53 * (float)v45) >= v52)
  {
    unint64_t v7 = v2;
    goto LABEL_157;
  }
  BOOL v54 = 1;
  if (v45 >= 3) {
    BOOL v54 = (v45 & (v45 - 1)) != 0;
  }
  unint64_t v55 = v54 | (2 * v45);
  unint64_t v56 = vcvtps_u32_f32(v52 / v53);
  if (v55 <= v56) {
    size_t v57 = v56;
  }
  else {
    size_t v57 = v55;
  }
  if (v57 == 1)
  {
    size_t v57 = 2;
  }
  else if ((v57 & (v57 - 1)) != 0)
  {
    size_t v57 = std::__next_prime(v57);
    unint64_t v45 = *((void *)this + 17);
  }
  if (v57 > v45)
  {
LABEL_120:
    if (v57 >> 61) {
      goto LABEL_208;
    }
    uint64_t v58 = operator new(8 * v57);
    uint64_t v59 = (void *)*((void *)this + 16);
    *((void *)this + 16) = v58;
    if (v59) {
      operator delete(v59);
    }
    uint64_t v60 = 0;
    *((void *)this + 17) = v57;
    do
      *(void *)(*((void *)this + 16) + 8 * v60++) = 0;
    while (v57 != v60);
    uint64_t v61 = (void *)*v51;
    if (!*v51) {
      goto LABEL_144;
    }
    size_t v62 = v61[1];
    size_t v63 = v57 - 1;
    if ((v57 & (v57 - 1)) == 0)
    {
      size_t v64 = v62 & v63;
      *(void *)(*((void *)this + 16) + 8 * v64) = v51;
      for (unint64_t j = (void *)*v61; *v61; unint64_t j = (void *)*v61)
      {
        size_t v66 = j[1] & v63;
        if (v66 == v64)
        {
          uint64_t v61 = j;
        }
        else
        {
          uint64_t v67 = *((void *)this + 16);
          if (*(void *)(v67 + 8 * v66))
          {
            *uint64_t v61 = *j;
            uint64_t v68 = 8 * v66;
            *unint64_t j = **(void **)(*((void *)this + 16) + v68);
            **(void **)(*((void *)this + 16) + v68) = j;
          }
          else
          {
            *(void *)(v67 + 8 * v66) = v61;
            uint64_t v61 = j;
            size_t v64 = v66;
          }
        }
      }
LABEL_144:
      unint64_t v45 = v57;
      goto LABEL_145;
    }
    if (v62 >= v57) {
      v62 %= v57;
    }
    *(void *)(*((void *)this + 16) + 8 * v62) = v51;
    uint64_t v72 = (void *)*v61;
    if (!*v61) {
      goto LABEL_144;
    }
    while (1)
    {
      size_t v74 = v72[1];
      if (v74 >= v57) {
        v74 %= v57;
      }
      if (v74 != v62)
      {
        uint64_t v75 = *((void *)this + 16);
        if (!*(void *)(v75 + 8 * v74))
        {
          *(void *)(v75 + 8 * v74) = v61;
          goto LABEL_149;
        }
        *uint64_t v61 = *v72;
        uint64_t v73 = 8 * v74;
        *uint64_t v72 = **(void **)(*((void *)this + 16) + v73);
        **(void **)(*((void *)this + 16) + v73) = v72;
        uint64_t v72 = v61;
      }
      size_t v74 = v62;
LABEL_149:
      uint64_t v61 = v72;
      uint64_t v72 = (void *)*v72;
      size_t v62 = v74;
      if (!v72) {
        goto LABEL_144;
      }
    }
  }
  if (v57 >= v45) {
    goto LABEL_145;
  }
  unint64_t v69 = vcvtps_u32_f32((float)*((unint64_t *)this + 19) / *((float *)this + 40));
  if (v45 < 3 || (uint8x8_t v70 = (uint8x8_t)vcnt_s8((int8x8_t)v45), v70.i16[0] = vaddlv_u8(v70), v70.u32[0] > 1uLL))
  {
    unint64_t v69 = std::__next_prime(v69);
  }
  else
  {
    uint64_t v71 = 1 << -(char)__clz(v69 - 1);
    if (v69 >= 2) {
      unint64_t v69 = v71;
    }
  }
  if (v57 <= v69) {
    size_t v57 = v69;
  }
  if (v57 < v45)
  {
    if (!v57)
    {
      uint64_t v98 = (void *)*((void *)this + 16);
      *((void *)this + 16) = 0;
      if (v98) {
        operator delete(v98);
      }
      unint64_t v45 = 0;
      *((void *)this + 17) = 0;
      goto LABEL_145;
    }
    goto LABEL_120;
  }
  unint64_t v45 = *((void *)this + 17);
LABEL_145:
  if ((v45 & (v45 - 1)) != 0)
  {
    if (v7 >= v45) {
      v7 %= v45;
    }
  }
  else
  {
    v7 &= v45 - 1;
  }
LABEL_157:
  uint64_t v76 = *((void *)this + 16);
  uint64_t v77 = *(void **)(v76 + 8 * v7);
  if (v77)
  {
    *uint64_t v48 = *v77;
LABEL_165:
    *uint64_t v77 = v48;
    goto LABEL_166;
  }
  *uint64_t v48 = *v51;
  *uint64_t v51 = v48;
  *(void *)(v76 + 8 * v7) = v51;
  if (*v48)
  {
    unint64_t v78 = *(void *)(*v48 + 8);
    if ((v45 & (v45 - 1)) != 0)
    {
      if (v78 >= v45) {
        v78 %= v45;
      }
    }
    else
    {
      v78 &= v45 - 1;
    }
    uint64_t v77 = (void *)(*((void *)this + 16) + 8 * v78);
    goto LABEL_165;
  }
LABEL_166:
  ++*((void *)this + 19);
LABEL_167:
  uint64_t v80 = (unint64_t *)v48[4];
  unint64_t v79 = v48[5];
  if ((unint64_t)v80 < v79)
  {
    *uint64_t v80 = a2;
    uint64_t v81 = v80 + 1;
    goto LABEL_189;
  }
  uint64_t v82 = (char *)v48[3];
  uint64_t v83 = ((char *)v80 - v82) >> 3;
  unint64_t v84 = v83 + 1;
  if ((unint64_t)(v83 + 1) >> 61) {
    abort();
  }
  uint64_t v85 = v79 - (void)v82;
  if (v85 >> 2 > v84) {
    unint64_t v84 = v85 >> 2;
  }
  if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v86 = v84;
  }
  if (!v86)
  {
    unint64_t v87 = 0;
    goto LABEL_179;
  }
  if (v86 >> 61) {
LABEL_208:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  unint64_t v87 = (char *)operator new(8 * v86);
LABEL_179:
  uint64_t v88 = (unint64_t *)&v87[8 * v83];
  uint64_t v89 = &v87[8 * v86];
  *uint64_t v88 = a2;
  uint64_t v81 = v88 + 1;
  if (v80 != (unint64_t *)v82)
  {
    unint64_t v90 = (char *)v80 - v82 - 8;
    if (v90 < 0x58) {
      goto LABEL_212;
    }
    if ((unint64_t)(v82 - v87) < 0x20) {
      goto LABEL_212;
    }
    uint64_t v91 = (v90 >> 3) + 1;
    unint64_t v92 = &v87[8 * v83 - 16];
    char v93 = v80 - 2;
    uint64_t v94 = v91 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v95 = *(_OWORD *)v93;
      *((_OWORD *)v92 - 1) = *((_OWORD *)v93 - 1);
      *(_OWORD *)unint64_t v92 = v95;
      v92 -= 32;
      v93 -= 4;
      v94 -= 4;
    }
    while (v94);
    v88 -= v91 & 0x3FFFFFFFFFFFFFFCLL;
    v80 -= v91 & 0x3FFFFFFFFFFFFFFCLL;
    if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_212:
      do
      {
        unint64_t v96 = *--v80;
        *--uint64_t v88 = v96;
      }
      while (v80 != (unint64_t *)v82);
    }
    uint64_t v80 = (unint64_t *)v48[3];
  }
  v48[3] = v88;
  v48[4] = v81;
  v48[5] = v89;
  if (v80) {
    operator delete(v80);
  }
LABEL_189:
  v48[4] = v81;
}

void sub_1A26C5568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Registry *,std::vector<gdc::Entity>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A26C557C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::ARWalkingLabelLayoutDedupingGroup::prepareLayoutGroups(int8x8_t *this, const md::LabelLayoutContext *a2)
{
  unint64_t v2 = (void *)this[18];
  if (v2)
  {
    unint64_t v5 = this + 26;
    do
    {
      unint64_t v7 = (unint64_t *)v2[3];
      unint64_t v8 = (unint64_t *)v2[4];
      if (v7 != v8)
      {
        unint64_t v9 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v5, *v7);
        if (v9)
        {
          std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, v5, v9);
          if (__p) {
            operator delete(__p);
          }
          unint64_t v7 = (unint64_t *)v2[3];
          unint64_t v8 = (unint64_t *)v2[4];
        }
        if (v7 == v8)
        {
LABEL_15:
          int8x8_t v12 = this[12];
          if (v12)
          {
            unint64_t v13 = v2[2];
            uint8x8_t v14 = (uint8x8_t)vcnt_s8(v12);
            v14.i16[0] = vaddlv_u8(v14);
            if (v14.u32[0] > 1uLL)
            {
              unint64_t v15 = v2[2];
              if (*(void *)&v12 <= v13) {
                unint64_t v15 = v13 % *(void *)&v12;
              }
            }
            else
            {
              unint64_t v15 = (*(void *)&v12 - 1) & v13;
            }
            uint64_t v16 = *(void **)(*(void *)&this[11] + 8 * v15);
            if (v16)
            {
              float v17 = (void *)*v16;
              if (v17)
              {
                if (v14.u32[0] < 2uLL)
                {
                  uint64_t v18 = *(void *)&v12 - 1;
                  while (1)
                  {
                    uint64_t v20 = v17[1];
                    if (v20 == v13)
                    {
                      if (v17[2] == v13) {
                        goto LABEL_3;
                      }
                    }
                    else if ((v20 & v18) != v15)
                    {
                      goto LABEL_35;
                    }
                    float v17 = (void *)*v17;
                    if (!v17) {
                      goto LABEL_35;
                    }
                  }
                }
                do
                {
                  unint64_t v19 = v17[1];
                  if (v19 == v13)
                  {
                    if (v17[2] == v13) {
                      goto LABEL_3;
                    }
                  }
                  else
                  {
                    if (v19 >= *(void *)&v12) {
                      v19 %= *(void *)&v12;
                    }
                    if (v19 != v15) {
                      break;
                    }
                  }
                  float v17 = (void *)*v17;
                }
                while (v17);
              }
            }
          }
LABEL_35:
          if (v7 == v8)
          {
LABEL_49:
            unint64_t v7 = v8;
          }
          else
          {
            do
            {
              while (1)
              {
                unint64_t v21 = *v7;
                if (!*(unsigned char *)(*v7 + 1290)) {
                  break;
                }
                double v22 = *(float *)(v21 + 764);
                if (*(double *)(v21 + 792) > v22 || *(double *)(v21 + 800) < v22) {
                  break;
                }
                if (++v7 == v8) {
                  goto LABEL_49;
                }
              }
              if (v7 == --v8) {
                break;
              }
              while (1)
              {
                unint64_t v23 = *v8;
                if (*(unsigned char *)(*v8 + 1290))
                {
                  double v24 = *(float *)(v23 + 764);
                  if (*(double *)(v23 + 792) <= v24 && *(double *)(v23 + 800) >= v24) {
                    break;
                  }
                }
                if (--v8 == v7) {
                  goto LABEL_50;
                }
              }
              *v7++ = v23;
              *unint64_t v8 = v21;
            }
            while (v7 != v8);
          }
LABEL_50:
          uint64_t v25 = v2[3];
          unint64_t v26 = 126 - 2 * __clz(((uint64_t)v7 - v25) >> 3);
          if (v7 == (unint64_t *)v25) {
            uint64_t v27 = 0;
          }
          else {
            uint64_t v27 = v26;
          }
          std::__introsort<std::_ClassicAlgPolicy,md::ARWalkingLabelLayoutDedupingGroup::prepareLayoutGroups(md::LabelLayoutContext const&)::$_1 &,md::LabelBase **,false>(v25, (uint64_t *)v7, v27, 1);
          unint64_t v6 = *(void *)v2[3];
        }
        else
        {
          unint64_t v10 = (float64x2_t **)v7;
          while (1)
          {
            float64x2_t v11 = vsubq_f64(*(float64x2_t *)((char *)a2 + 136), (*v10)[37]);
            if (vaddvq_f64(vmulq_f64(v11, v11)) / ((*v10)[14].f64[0] * (*v10)[14].f64[0]) < 16.0) {
              break;
            }
            if (++v10 == (float64x2_t **)v8) {
              goto LABEL_15;
            }
          }
LABEL_3:
          unint64_t v6 = *v7;
        }
        std::__hash_table<md::LabelBase *,std::hash<md::LabelBase *>,std::equal_to<md::LabelBase *>,std::allocator<md::LabelBase *>>::__emplace_unique_key_args<md::LabelBase *,md::LabelBase * const&>((uint64_t)v5, v6, v6);
      }
      unint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
}

void std::__hash_table<md::LabelBase *,std::hash<md::LabelBase *>,std::equal_to<md::LabelBase *>,std::allocator<md::LabelBase *>>::__emplace_unique_key_args<md::LabelBase *,md::LabelBase * const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = v7 ^ (v7 >> 47);
  unint64_t v9 = 0x9DDFEA08EB382D69 * v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * v8;
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    int8x8_t v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      unint64_t v13 = (void *)*v12;
      if (v13)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == a2) {
                return;
              }
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_22;
            }
            unint64_t v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == a2) {
              return;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          unint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_22:
  uint64_t v16 = operator new(0x18uLL);
  void *v16 = 0;
  v16[1] = v9;
  v16[2] = a3;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_34;
    }
    if (prime < v10)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v10) {
LABEL_34:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v26 = *(void *)a1;
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v3);
  if (v27)
  {
    void *v16 = *v27;
LABEL_58:
    *uint64_t v27 = v16;
    goto LABEL_59;
  }
  void *v16 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v16;
  *(void *)(v26 + 8 * v3) = a1 + 16;
  if (*v16)
  {
    unint64_t v28 = *(void *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10) {
        v28 %= v10;
      }
    }
    else
    {
      v28 &= v10 - 1;
    }
    uint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
}

void sub_1A26C5B64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::ARWalkingLabelLayoutDedupingGroup::prepareLayoutGroups(md::LabelLayoutContext const&)::$_1 &,md::LabelBase **,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v9 = (uint64_t *)result;
LABEL_2:
  unint64_t v10 = a2 - 1;
  uint8x8_t v11 = v9;
  while (1)
  {
    unint64_t v9 = v11;
    uint64_t v12 = (char *)a2 - (char *)v11;
    uint64_t v13 = a2 - v11;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0:
        case 1:
          return result;
        case 2:
          uint64_t v81 = *v11;
          if (*(_DWORD *)(*v10 + 48) < *(_DWORD *)(*v11 + 48))
          {
            *uint8x8_t v11 = *v10;
            *unint64_t v10 = v81;
          }
          return result;
        case 3:
          uint64_t v82 = *v11;
          uint64_t v83 = v11[1];
          unsigned int v84 = *(_DWORD *)(v83 + 48);
          unsigned int v85 = *(_DWORD *)(*v11 + 48);
          uint64_t v86 = *v10;
          unsigned int v87 = *(_DWORD *)(*v10 + 48);
          if (v84 >= v85)
          {
            if (v87 < v84)
            {
              v11[1] = v86;
              *unint64_t v10 = v83;
              uint64_t v138 = *v11;
              uint64_t v137 = v11[1];
              if (*(_DWORD *)(v137 + 48) < *(_DWORD *)(*v11 + 48))
              {
                *uint8x8_t v11 = v137;
                v11[1] = v138;
              }
            }
          }
          else
          {
            if (v87 >= v84)
            {
              *uint8x8_t v11 = v83;
              v11[1] = v82;
              if (*(_DWORD *)(*v10 + 48) >= v85) {
                return result;
              }
              v11[1] = *v10;
            }
            else
            {
              *uint8x8_t v11 = v86;
            }
            *unint64_t v10 = v82;
          }
          return result;
        case 4:
          uint64_t v88 = v11 + 1;
          uint64_t v89 = v11[1];
          unint64_t v90 = v11 + 2;
          uint64_t v91 = v11[2];
          uint64_t v92 = *v11;
          unsigned int v93 = *(_DWORD *)(v89 + 48);
          unsigned int v94 = *(_DWORD *)(*v11 + 48);
          unsigned int v95 = *(_DWORD *)(v91 + 48);
          if (v93 >= v94)
          {
            if (v95 >= v93) {
              goto LABEL_169;
            }
            *uint64_t v88 = v91;
            uint64_t *v90 = v89;
            unint64_t v96 = v11;
            uint64_t v97 = v11 + 1;
            __n128 result = v89;
            if (v95 >= v94) {
              goto LABEL_170;
            }
          }
          else
          {
            unint64_t v96 = v11;
            uint64_t v97 = v11 + 2;
            __n128 result = *v11;
            if (v95 >= v93)
            {
              *uint8x8_t v11 = v89;
              v11[1] = v92;
              unint64_t v96 = v11 + 1;
              uint64_t v97 = v11 + 2;
              __n128 result = v92;
              if (v95 >= v94)
              {
LABEL_169:
                uint64_t v89 = v91;
LABEL_170:
                if (*(_DWORD *)(*v10 + 48) < *(_DWORD *)(v89 + 48))
                {
                  uint64_t *v90 = *v10;
                  *unint64_t v10 = v89;
                  uint64_t v142 = *v90;
                  uint64_t v143 = *v88;
                  unsigned int v144 = *(_DWORD *)(v142 + 48);
                  if (v144 < *(_DWORD *)(v143 + 48))
                  {
                    v11[1] = v142;
                    v11[2] = v143;
                    uint64_t v145 = *v11;
                    if (v144 < *(_DWORD *)(*v11 + 48))
                    {
                      *uint8x8_t v11 = v142;
                      v11[1] = v145;
                    }
                  }
                }
                return result;
              }
            }
          }
          uint64_t *v96 = v91;
          *uint64_t v97 = v92;
          uint64_t v89 = result;
          goto LABEL_170;
        case 5:
          return (uint64_t)std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabelLayoutDedupingGroup::prepareLayoutGroups(md::LabelLayoutContext const&)::$_1 &,md::LabelBase **,0>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if (v12 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v11 != a2)
      {
        int64_t v109 = (unint64_t)(v13 - 2) >> 1;
        int64_t v110 = v109;
        do
        {
          if (v109 >= v110)
          {
            uint64_t v112 = (2 * v110) | 1;
            uint64_t v113 = &v11[v112];
            uint64_t v114 = *v113;
            if (2 * v110 + 2 < v13)
            {
              __n128 result = *(unsigned int *)(v114 + 48);
              if (result < *(_DWORD *)(v113[1] + 48))
              {
                uint64_t v114 = v113[1];
                ++v113;
                uint64_t v112 = 2 * v110 + 2;
              }
            }
            uint64_t v115 = &v11[v110];
            uint64_t v116 = *v115;
            unsigned int v117 = *(_DWORD *)(*v115 + 48);
            if (*(_DWORD *)(v114 + 48) >= v117)
            {
              do
              {
                uint64_t v118 = v113;
                uint64_t *v115 = v114;
                if (v109 < v112) {
                  break;
                }
                __n128 result = (2 * v112) | 1;
                uint64_t v113 = &v11[result];
                uint64_t v119 = 2 * v112 + 2;
                uint64_t v114 = *v113;
                if (v119 < v13 && *(_DWORD *)(v114 + 48) < *(_DWORD *)(v113[1] + 48))
                {
                  uint64_t v114 = v113[1];
                  ++v113;
                  __n128 result = v119;
                }
                uint64_t v115 = v118;
                uint64_t v112 = result;
              }
              while (*(_DWORD *)(v114 + 48) >= v117);
              *uint64_t v118 = v116;
            }
          }
          BOOL v111 = v110-- <= 0;
        }
        while (!v111);
        uint64_t v120 = (unint64_t)v12 >> 3;
        do
        {
          uint64_t v121 = 0;
          uint64_t v122 = *v11;
          uint64_t v123 = v11;
          do
          {
            long long v124 = &v123[v121];
            uint64_t v127 = v124[1];
            uint64_t v125 = v124 + 1;
            uint64_t v126 = v127;
            uint64_t v128 = (2 * v121) | 1;
            uint64_t v129 = 2 * v121 + 2;
            if (v129 < v120)
            {
              __n128 result = *(unsigned int *)(v126 + 48);
              if (result < *(_DWORD *)(v125[1] + 48))
              {
                uint64_t v126 = v125[1];
                ++v125;
                uint64_t v128 = v129;
              }
            }
            uint64_t *v123 = v126;
            uint64_t v123 = v125;
            uint64_t v121 = v128;
          }
          while (v128 <= (uint64_t)((unint64_t)(v120 - 2) >> 1));
          if (v125 == --a2)
          {
            *uint64_t v125 = v122;
          }
          else
          {
            *uint64_t v125 = *a2;
            *a2 = v122;
            uint64_t v130 = (char *)v125 - (char *)v11 + 8;
            if (v130 >= 9)
            {
              unint64_t v131 = (((unint64_t)v130 >> 3) - 2) >> 1;
              uint64_t v132 = &v11[v131];
              uint64_t v133 = *v132;
              uint64_t v134 = *v125;
              unsigned int v135 = *(_DWORD *)(*v125 + 48);
              if (*(_DWORD *)(*v132 + 48) < v135)
              {
                do
                {
                  uint64_t v136 = v132;
                  *uint64_t v125 = v133;
                  if (!v131) {
                    break;
                  }
                  unint64_t v131 = (v131 - 1) >> 1;
                  uint64_t v132 = &v11[v131];
                  uint64_t v133 = *v132;
                  uint64_t v125 = v136;
                }
                while (*(_DWORD *)(*v132 + 48) < v135);
                *uint64_t v136 = v134;
              }
            }
          }
          BOOL v111 = v120-- <= 2;
        }
        while (!v111);
      }
      return result;
    }
    unint64_t v14 = (unint64_t)v13 >> 1;
    uint64_t v15 = &v11[(unint64_t)v13 >> 1];
    uint64_t v16 = *v10;
    unsigned int v17 = *(_DWORD *)(*v10 + 48);
    if ((unint64_t)v12 >= 0x401)
    {
      uint64_t v18 = *v15;
      uint64_t v19 = *v11;
      unsigned int v20 = *(_DWORD *)(*v15 + 48);
      unsigned int v21 = *(_DWORD *)(*v11 + 48);
      if (v20 >= v21)
      {
        if (v17 < v20)
        {
          uint64_t *v15 = v16;
          *unint64_t v10 = v18;
          uint64_t v26 = *v11;
          if (*(_DWORD *)(*v15 + 48) < *(_DWORD *)(*v11 + 48))
          {
            *uint8x8_t v11 = *v15;
            uint64_t *v15 = v26;
          }
        }
      }
      else
      {
        if (v17 < v20)
        {
          *uint8x8_t v11 = v16;
          goto LABEL_22;
        }
        *uint8x8_t v11 = v18;
        uint64_t *v15 = v19;
        if (*(_DWORD *)(*v10 + 48) < v21)
        {
          uint64_t *v15 = *v10;
LABEL_22:
          *unint64_t v10 = v19;
        }
      }
      unint64_t v28 = &v11[v14];
      uint64_t v31 = *(v28 - 1);
      size_t v29 = v28 - 1;
      uint64_t v30 = v31;
      uint64_t v32 = v11[1];
      unsigned int v33 = *(_DWORD *)(v31 + 48);
      unsigned int v34 = *(_DWORD *)(v32 + 48);
      uint64_t v35 = *(a2 - 2);
      unsigned int v36 = *(_DWORD *)(v35 + 48);
      if (v33 >= v34)
      {
        if (v36 < v33)
        {
          *size_t v29 = v35;
          *(a2 - 2) = v30;
          uint64_t v37 = v11[1];
          if (*(_DWORD *)(*v29 + 48) < *(_DWORD *)(v37 + 48))
          {
            v11[1] = *v29;
            *size_t v29 = v37;
          }
        }
      }
      else
      {
        if (v36 < v33)
        {
          v11[1] = v35;
          goto LABEL_34;
        }
        v11[1] = v30;
        *size_t v29 = v32;
        uint64_t v38 = *(a2 - 2);
        if (*(_DWORD *)(v38 + 48) < v34)
        {
          *size_t v29 = v38;
LABEL_34:
          *(a2 - 2) = v32;
        }
      }
      uint64_t v39 = &v11[v14];
      uint64_t v42 = v39[1];
      size_t v40 = v39 + 1;
      uint64_t v41 = v42;
      uint64_t v43 = v11[2];
      unsigned int v44 = *(_DWORD *)(v42 + 48);
      unsigned int v45 = *(_DWORD *)(v43 + 48);
      uint64_t v46 = *(a2 - 3);
      unsigned int v47 = *(_DWORD *)(v46 + 48);
      if (v44 >= v45)
      {
        if (v47 < v44)
        {
          *size_t v40 = v46;
          *(a2 - 3) = v41;
          uint64_t v48 = v11[2];
          if (*(_DWORD *)(*v40 + 48) < *(_DWORD *)(v48 + 48))
          {
            v11[2] = *v40;
            *size_t v40 = v48;
          }
        }
      }
      else
      {
        if (v47 < v44)
        {
          v11[2] = v46;
          goto LABEL_43;
        }
        v11[2] = v41;
        *size_t v40 = v43;
        uint64_t v49 = *(a2 - 3);
        if (*(_DWORD *)(v49 + 48) < v45)
        {
          *size_t v40 = v49;
LABEL_43:
          *(a2 - 3) = v43;
        }
      }
      uint64_t v50 = *v15;
      uint64_t v51 = *v29;
      unsigned int v52 = *(_DWORD *)(*v15 + 48);
      unsigned int v53 = *(_DWORD *)(*v29 + 48);
      uint64_t v54 = *v40;
      unsigned int v55 = *(_DWORD *)(*v40 + 48);
      if (v52 >= v53)
      {
        if (v55 >= v52) {
          goto LABEL_51;
        }
        uint64_t *v15 = v54;
        *size_t v40 = v50;
        size_t v40 = v15;
        uint64_t v50 = v51;
        if (v55 >= v53)
        {
          uint64_t v50 = v54;
          goto LABEL_51;
        }
      }
      else if (v55 >= v52)
      {
        *size_t v29 = v50;
        uint64_t *v15 = v51;
        size_t v29 = v15;
        uint64_t v50 = v54;
        if (v55 >= v53)
        {
          uint64_t v50 = v51;
LABEL_51:
          uint64_t v56 = *v11;
          *uint8x8_t v11 = v50;
          uint64_t *v15 = v56;
          goto LABEL_52;
        }
      }
      *size_t v29 = v54;
      *size_t v40 = v51;
      goto LABEL_51;
    }
    uint64_t v22 = *v11;
    uint64_t v23 = *v15;
    unsigned int v24 = *(_DWORD *)(*v11 + 48);
    unsigned int v25 = *(_DWORD *)(*v15 + 48);
    if (v24 >= v25)
    {
      if (v17 < v24)
      {
        *uint8x8_t v11 = v16;
        *unint64_t v10 = v22;
        uint64_t v27 = *v15;
        if (*(_DWORD *)(*v11 + 48) < *(_DWORD *)(*v15 + 48))
        {
          uint64_t *v15 = *v11;
          *uint8x8_t v11 = v27;
        }
      }
      goto LABEL_52;
    }
    if (v17 < v24)
    {
      uint64_t *v15 = v16;
LABEL_31:
      *unint64_t v10 = v23;
      goto LABEL_52;
    }
    uint64_t *v15 = v22;
    *uint8x8_t v11 = v23;
    if (*(_DWORD *)(*v10 + 48) < v25)
    {
      *uint8x8_t v11 = *v10;
      goto LABEL_31;
    }
LABEL_52:
    --a3;
    uint64_t v57 = *v11;
    if (a4)
    {
      unsigned int v58 = *(_DWORD *)(v57 + 48);
LABEL_55:
      uint64_t v59 = v11;
      do
      {
        uint64_t v60 = v59;
        uint64_t v62 = v59[1];
        ++v59;
        uint64_t v61 = v62;
      }
      while (*(_DWORD *)(v62 + 48) < v58);
      size_t v63 = a2;
      if (v60 == v11)
      {
        size_t v63 = a2;
        do
        {
          if (v59 >= v63) {
            break;
          }
          uint64_t v65 = *--v63;
        }
        while (*(_DWORD *)(v65 + 48) >= v58);
      }
      else
      {
        do
          uint64_t v64 = *--v63;
        while (*(_DWORD *)(v64 + 48) >= v58);
      }
      if (v59 < v63)
      {
        uint64_t v66 = *v63;
        uint64_t v67 = v59;
        uint64_t v68 = v63;
        do
        {
          *uint64_t v67 = v66;
          *uint64_t v68 = v61;
          do
          {
            uint64_t v60 = v67;
            uint64_t v69 = v67[1];
            ++v67;
            uint64_t v61 = v69;
          }
          while (*(_DWORD *)(v69 + 48) < v58);
          do
          {
            uint64_t v70 = *--v68;
            uint64_t v66 = v70;
          }
          while (*(_DWORD *)(v70 + 48) >= v58);
        }
        while (v67 < v68);
      }
      if (v60 != v11) {
        *uint8x8_t v11 = *v60;
      }
      *uint64_t v60 = v57;
      if (v59 < v63) {
        goto LABEL_74;
      }
      BOOL v71 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabelLayoutDedupingGroup::prepareLayoutGroups(md::LabelLayoutContext const&)::$_1 &,md::LabelBase **>(v11, v60);
      uint8x8_t v11 = v60 + 1;
      __n128 result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabelLayoutDedupingGroup::prepareLayoutGroups(md::LabelLayoutContext const&)::$_1 &,md::LabelBase **>(v60 + 1, a2);
      if (result)
      {
        a2 = v60;
        if (v71) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v71)
      {
LABEL_74:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,md::ARWalkingLabelLayoutDedupingGroup::prepareLayoutGroups(md::LabelLayoutContext const&)::$_1 &,md::LabelBase **,false>(v9, v60, a3, a4 & 1);
        a4 = 0;
        uint8x8_t v11 = v60 + 1;
      }
    }
    else
    {
      unsigned int v58 = *(_DWORD *)(v57 + 48);
      if (*(_DWORD *)(*(v11 - 1) + 48) < v58) {
        goto LABEL_55;
      }
      if (v58 < *(_DWORD *)(*v10 + 48))
      {
        do
        {
          uint64_t v72 = v11[1];
          ++v11;
        }
        while (v58 >= *(_DWORD *)(v72 + 48));
      }
      else
      {
        uint64_t v73 = v11 + 1;
        do
        {
          uint8x8_t v11 = v73;
          if (v73 >= a2) {
            break;
          }
          ++v73;
        }
        while (v58 >= *(_DWORD *)(*v11 + 48));
      }
      size_t v74 = a2;
      if (v11 < a2)
      {
        size_t v74 = a2;
        do
          uint64_t v75 = *--v74;
        while (v58 < *(_DWORD *)(v75 + 48));
      }
      if (v11 < v74)
      {
        uint64_t v76 = *v11;
        uint64_t v77 = *v74;
        do
        {
          *uint8x8_t v11 = v77;
          *size_t v74 = v76;
          do
          {
            uint64_t v78 = v11[1];
            ++v11;
            uint64_t v76 = v78;
          }
          while (v58 >= *(_DWORD *)(v78 + 48));
          do
          {
            uint64_t v79 = *--v74;
            uint64_t v77 = v79;
          }
          while (v58 < *(_DWORD *)(v79 + 48));
        }
        while (v11 < v74);
      }
      uint64_t v80 = v11 - 1;
      BOOL v4 = v11 - 1 >= v9;
      BOOL v5 = v11 - 1 == v9;
      if (v11 - 1 != v9) {
        *unint64_t v9 = *v80;
      }
      a4 = 0;
      *uint64_t v80 = v57;
    }
  }
  uint64_t v98 = v11 + 1;
  BOOL v100 = v11 == a2 || v98 == a2;
  if (a4)
  {
    if (!v100)
    {
      uint64_t v101 = 8;
      uint64_t v102 = v11;
      do
      {
        uint64_t v105 = *v102;
        uint64_t v104 = v102[1];
        uint64_t v102 = v98;
        unsigned int v106 = *(_DWORD *)(v104 + 48);
        if (v106 < *(_DWORD *)(v105 + 48))
        {
          uint64_t v107 = v101;
          do
          {
            *(uint64_t *)((char *)v11 + v107) = v105;
            uint64_t v108 = v107 - 8;
            if (v107 == 8)
            {
              uint64_t v103 = v11;
              goto LABEL_118;
            }
            uint64_t v105 = *(uint64_t *)((char *)v11 + v107 - 16);
            v107 -= 8;
          }
          while (v106 < *(_DWORD *)(v105 + 48));
          uint64_t v103 = (uint64_t *)((char *)v11 + v108);
LABEL_118:
          uint64_t *v103 = v104;
        }
        uint64_t v98 = v102 + 1;
        v101 += 8;
      }
      while (v102 + 1 != a2);
    }
  }
  else if (!v100)
  {
    do
    {
      uint64_t v140 = *v9;
      uint64_t v139 = v9[1];
      unint64_t v9 = v98;
      unsigned int v141 = *(_DWORD *)(v139 + 48);
      if (v141 < *(_DWORD *)(v140 + 48))
      {
        do
        {
          uint64_t *v98 = v140;
          uint64_t v140 = *(v98 - 2);
          --v98;
        }
        while (v141 < *(_DWORD *)(v140 + 48));
        uint64_t *v98 = v139;
      }
      uint64_t v98 = v9 + 1;
    }
    while (v9 + 1 != a2);
  }
  return result;
}

uint64_t *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabelLayoutDedupingGroup::prepareLayoutGroups(md::LabelLayoutContext const&)::$_1 &,md::LabelBase **,0>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *result;
  unsigned int v7 = *(_DWORD *)(*a2 + 48);
  unsigned int v8 = *(_DWORD *)(*result + 48);
  uint64_t v9 = *a3;
  unsigned int v10 = *(_DWORD *)(*a3 + 48);
  if (v7 >= v8)
  {
    if (v10 >= v7)
    {
      uint64_t v5 = *a3;
    }
    else
    {
      *a2 = v9;
      *a3 = v5;
      uint64_t v11 = *result;
      if (*(_DWORD *)(*a2 + 48) < *(_DWORD *)(*result + 48))
      {
        *__n128 result = *a2;
        *a2 = v11;
        uint64_t v5 = *a3;
      }
    }
  }
  else
  {
    if (v10 < v7)
    {
      *__n128 result = v9;
LABEL_9:
      *a3 = v6;
      uint64_t v5 = v6;
      goto LABEL_11;
    }
    *__n128 result = v5;
    *a2 = v6;
    uint64_t v5 = *a3;
    if (*(_DWORD *)(*a3 + 48) < v8)
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(_DWORD *)(*a4 + 48) < *(_DWORD *)(v5 + 48))
  {
    *a3 = *a4;
    *a4 = v5;
    uint64_t v12 = *a2;
    if (*(_DWORD *)(*a3 + 48) < *(_DWORD *)(*a2 + 48))
    {
      *a2 = *a3;
      *a3 = v12;
      uint64_t v13 = *result;
      if (*(_DWORD *)(*a2 + 48) < *(_DWORD *)(*result + 48))
      {
        *__n128 result = *a2;
        *a2 = v13;
      }
    }
  }
  uint64_t v14 = *a4;
  if (*(_DWORD *)(*a5 + 48) < *(_DWORD *)(*a4 + 48))
  {
    *a4 = *a5;
    *a5 = v14;
    uint64_t v15 = *a3;
    if (*(_DWORD *)(*a4 + 48) < *(_DWORD *)(*a3 + 48))
    {
      *a3 = *a4;
      *a4 = v15;
      uint64_t v16 = *a2;
      if (*(_DWORD *)(*a3 + 48) < *(_DWORD *)(*a2 + 48))
      {
        *a2 = *a3;
        *a3 = v16;
        uint64_t v17 = *result;
        if (*(_DWORD *)(*a2 + 48) < *(_DWORD *)(*result + 48))
        {
          *__n128 result = *a2;
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabelLayoutDedupingGroup::prepareLayoutGroups(md::LabelLayoutContext const&)::$_1 &,md::LabelBase **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      uint64_t v3 = *(a2 - 1);
      uint64_t v4 = *a1;
      if (*(_DWORD *)(v3 + 48) < *(_DWORD *)(*a1 + 48))
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      uint64_t v14 = *a1;
      uint64_t v15 = a1[1];
      unsigned int v16 = *(_DWORD *)(v15 + 48);
      unsigned int v17 = *(_DWORD *)(*a1 + 48);
      uint64_t v18 = *(a2 - 1);
      unsigned int v19 = *(_DWORD *)(v18 + 48);
      if (v16 >= v17)
      {
        if (v19 < v16)
        {
          a1[1] = v18;
          *(a2 - 1) = v15;
          uint64_t v41 = *a1;
          uint64_t v40 = a1[1];
          if (*(_DWORD *)(v40 + 48) < *(_DWORD *)(*a1 + 48))
          {
            *a1 = v40;
            a1[1] = v41;
          }
        }
      }
      else
      {
        if (v19 >= v16)
        {
          *a1 = v15;
          a1[1] = v14;
          uint64_t v47 = *(a2 - 1);
          if (*(_DWORD *)(v47 + 48) >= v17) {
            return 1;
          }
          a1[1] = v47;
        }
        else
        {
          *a1 = v18;
        }
        *(a2 - 1) = v14;
      }
      return 1;
    case 4:
      unsigned int v20 = a1 + 1;
      uint64_t v21 = a1[1];
      uint64_t v22 = a1 + 2;
      uint64_t v23 = a1[2];
      uint64_t v24 = *a1;
      unsigned int v25 = *(_DWORD *)(v21 + 48);
      unsigned int v26 = *(_DWORD *)(*a1 + 48);
      unsigned int v27 = *(_DWORD *)(v23 + 48);
      if (v25 < v26)
      {
        unint64_t v28 = a1;
        size_t v29 = a1 + 2;
        uint64_t v30 = *a1;
        if (v27 >= v25)
        {
          *a1 = v21;
          a1[1] = v24;
          unint64_t v28 = a1 + 1;
          size_t v29 = a1 + 2;
          uint64_t v30 = v24;
          if (v27 >= v26) {
            goto LABEL_35;
          }
        }
LABEL_34:
        *unint64_t v28 = v23;
        *size_t v29 = v24;
        uint64_t v21 = v30;
        goto LABEL_36;
      }
      if (v27 < v25)
      {
        *unsigned int v20 = v23;
        uint64_t *v22 = v21;
        unint64_t v28 = a1;
        size_t v29 = a1 + 1;
        uint64_t v30 = v21;
        if (v27 >= v26) {
          goto LABEL_36;
        }
        goto LABEL_34;
      }
LABEL_35:
      uint64_t v21 = v23;
LABEL_36:
      uint64_t v42 = *(a2 - 1);
      if (*(_DWORD *)(v42 + 48) < *(_DWORD *)(v21 + 48))
      {
        uint64_t *v22 = v42;
        *(a2 - 1) = v21;
        uint64_t v43 = *v22;
        uint64_t v44 = *v20;
        unsigned int v45 = *(_DWORD *)(v43 + 48);
        if (v45 < *(_DWORD *)(v44 + 48))
        {
          a1[1] = v43;
          a1[2] = v44;
          uint64_t v46 = *a1;
          if (v45 < *(_DWORD *)(*a1 + 48))
          {
            *a1 = v43;
            a1[1] = v46;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabelLayoutDedupingGroup::prepareLayoutGroups(md::LabelLayoutContext const&)::$_1 &,md::LabelBase **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v6 = a1 + 2;
      uint64_t v5 = a1[2];
      uint64_t v7 = a1[1];
      uint64_t v8 = *a1;
      unsigned int v9 = *(_DWORD *)(v7 + 48);
      unsigned int v10 = *(_DWORD *)(*a1 + 48);
      unsigned int v11 = *(_DWORD *)(v5 + 48);
      if (v9 >= v10)
      {
        if (v11 >= v9) {
          goto LABEL_19;
        }
        a1[1] = v5;
        *uint64_t v6 = v7;
        uint64_t v12 = a1;
        uint64_t v13 = a1 + 1;
      }
      else
      {
        uint64_t v12 = a1;
        uint64_t v13 = a1 + 2;
        if (v11 < v9) {
          goto LABEL_18;
        }
        *a1 = v7;
        a1[1] = v8;
        uint64_t v12 = a1 + 1;
        uint64_t v13 = a1 + 2;
      }
      if (v11 >= v10) {
        goto LABEL_19;
      }
LABEL_18:
      uint64_t *v12 = v5;
      uint64_t *v13 = v8;
LABEL_19:
      uint64_t v31 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v32 = 0;
      for (uint64_t i = 24; ; i += 8)
      {
        uint64_t v35 = *v31;
        uint64_t v36 = *v6;
        unsigned int v37 = *(_DWORD *)(*v31 + 48);
        if (v37 < *(_DWORD *)(v36 + 48))
        {
          uint64_t v38 = i;
          do
          {
            *(uint64_t *)((char *)a1 + v38) = v36;
            uint64_t v39 = v38 - 8;
            if (v38 == 8)
            {
              unsigned int v34 = a1;
              goto LABEL_22;
            }
            uint64_t v36 = *(uint64_t *)((char *)a1 + v38 - 16);
            v38 -= 8;
          }
          while (v37 < *(_DWORD *)(v36 + 48));
          unsigned int v34 = (uint64_t *)((char *)a1 + v39);
LABEL_22:
          uint64_t *v34 = v35;
          if (++v32 == 8) {
            break;
          }
        }
        uint64_t v6 = v31++;
        if (v31 == a2) {
          return 1;
        }
      }
      return v31 + 1 == a2;
  }
}

void md::CoalescedJunction::~CoalescedJunction(md::CoalescedJunction *this)
{
  *(void *)this = &unk_1EF536C48;
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1EF5328C0;
  uint64_t v3 = (void *)*((void *)this + 5);
  if (v3)
  {
    *((void *)this + 6) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;

  *(void *)this = &unk_1EF536C48;
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1EF5328C0;
  uint64_t v3 = (void *)*((void *)this + 5);
  if (v3)
  {
    *((void *)this + 6) = v3;
    operator delete(v3);
  }
}

void md::MuninRoadGraph::MuninRoadGraph()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1A26C97C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,void *a38,uint64_t a39)
{
  uint64_t v41 = *v39;
  *uint64_t v39 = 0;
  if (v41)
  {
    geo::Pool<md::CoalescedJunction>::disposeElements(v41);
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v41 + 8));
    MEMORY[0x1A6239270](v41, 0x1020C407A7143E5);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A26C9B94(_Unwind_Exception *a1)
{
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<md::MuninJunction const*,md::CoalescedJunction const*>,std::__unordered_map_hasher<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::CoalescedJunction const*>,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,true>,std::__unordered_map_equal<md::MuninJunction const*,std::__hash_value_type<md::MuninJunction const*,md::CoalescedJunction const*>,std::equal_to<md::MuninJunction const*>,std::hash<md::MuninJunction const*>,true>,std::allocator<std::__hash_value_type<md::MuninJunction const*,md::CoalescedJunction const*>>>::__emplace_unique_key_args<md::MuninJunction const*,std::piecewise_construct_t const&,std::tuple<md::MuninJunction const* const&>,std::tuple<>>(float *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unsigned int v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == a2) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  uint64_t v12 = operator new(0x20uLL);
  void *v12 = 0;
  v12[1] = v8;
  void v12[2] = *a3;
  v12[3] = 0;
  float v15 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *((void *)a1 + 1);
    }
    if (prime <= v9)
    {
      if (prime >= v9) {
        goto LABEL_59;
      }
      unint64_t v32 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (prime <= v32) {
        size_t prime = v32;
      }
      if (prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
LABEL_59:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v3 = v8 % v9;
          }
          else {
            unint64_t v3 = v8;
          }
        }
        else
        {
          unint64_t v3 = (v9 - 1) & v8;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        uint64_t v42 = *(void **)a1;
        *(void *)a1 = 0;
        if (v42) {
          operator delete(v42);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v21 = operator new(8 * prime);
    uint64_t v22 = *(void **)a1;
    *(void *)a1 = v21;
    if (v22) {
      operator delete(v22);
    }
    uint64_t v23 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v23++) = 0;
    while (prime != v23);
    unsigned int v25 = (uint64_t *)(a1 + 4);
    uint64_t v24 = (void *)*((void *)a1 + 2);
    if (!v24)
    {
LABEL_58:
      unint64_t v9 = prime;
      goto LABEL_59;
    }
    size_t v26 = v24[1];
    size_t v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v28 = v26 & v27;
      *(void *)(*(void *)a1 + 8 * v28) = v25;
      for (uint64_t i = (void *)*v24; *v24; uint64_t i = (void *)*v24)
      {
        size_t v30 = i[1] & v27;
        if (v30 == v28)
        {
          uint64_t v24 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v30))
        {
          *uint64_t v24 = *i;
          uint64_t v31 = 8 * v30;
          void *i = **(void **)(*(void *)a1 + v31);
          **(void **)(*(void *)a1 + v31) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v30) = v24;
          uint64_t v24 = i;
          size_t v28 = v30;
        }
      }
      goto LABEL_58;
    }
    if (v26 >= prime) {
      v26 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v26) = v25;
    uint64_t v35 = (void *)*v24;
    if (!*v24) {
      goto LABEL_58;
    }
    while (1)
    {
      size_t v37 = v35[1];
      if (v37 >= prime) {
        v37 %= prime;
      }
      if (v37 != v26)
      {
        if (!*(void *)(*(void *)a1 + 8 * v37))
        {
          *(void *)(*(void *)a1 + 8 * v37) = v24;
          goto LABEL_63;
        }
        *uint64_t v24 = *v35;
        uint64_t v36 = 8 * v37;
        void *v35 = **(void **)(*(void *)a1 + v36);
        **(void **)(*(void *)a1 + v36) = v35;
        uint64_t v35 = v24;
      }
      size_t v37 = v26;
LABEL_63:
      uint64_t v24 = v35;
      uint64_t v35 = (void *)*v35;
      size_t v26 = v37;
      if (!v35) {
        goto LABEL_58;
      }
    }
  }
LABEL_72:
  uint64_t v38 = *(void **)a1;
  uint64_t v39 = *(void **)(*(void *)a1 + 8 * v3);
  if (v39)
  {
    void *v12 = *v39;
LABEL_80:
    *uint64_t v39 = v12;
    goto LABEL_81;
  }
  void *v12 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v12;
  v38[v3] = a1 + 4;
  if (*v12)
  {
    unint64_t v40 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v40 >= v9) {
        v40 %= v9;
      }
    }
    else
    {
      v40 &= v9 - 1;
    }
    uint64_t v39 = (void *)(*(void *)a1 + 8 * v40);
    goto LABEL_80;
  }
LABEL_81:
  ++*((void *)a1 + 3);
  return v12;
}

void sub_1A26CA030(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void md::MuninRoadGraph::traverseDrivableEdges(unint64_t a1, uint64_t a2, int a3, void *a4, void *a5)
{
  uint64_t v154 = *MEMORY[0x1E4F143B8];
  if (!a4[3]) {
    return;
  }
  *(void *)&long long v132 = 0;
  long long v131 = 0u;
  memset(v130, 0, sizeof(v130));
  uint64_t v105 = a2;
  md::GraphTraversalPath::GraphTraversalPath(v106, (uint64_t)v130);
  char v111 = 1;
  uint64_t v9 = a4[3];
  if (!v9) {
    goto LABEL_5;
  }
  if ((void *)v9 != a4)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_5:
    uint64_t v145 = (void *)v9;
    goto LABEL_7;
  }
  uint64_t v145 = v144;
  (*(void (**)(void *, void *))(*a4 + 24))(a4, v144);
LABEL_7:
  uint64_t v10 = a5[3];
  if (!v10)
  {
LABEL_10:
    uint64_t v143 = (void *)v10;
    goto LABEL_12;
  }
  if ((void *)v10 != a5)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
    goto LABEL_10;
  }
  uint64_t v143 = v142;
  (*(void (**)(void *, void *))(*a5 + 24))(a5, v142);
LABEL_12:
  int v113 = a3;
  if (v145)
  {
    unint64_t v112 = a1;
    unsigned int v11 = operator new(0x20uLL);
    v11[1] = &v112;
    uint64_t v12 = v11 + 1;
    *unsigned int v11 = &unk_1EF57D7E8;
    v11[2] = &v113;
    void v11[3] = v144;
    uint64_t v151 = v11;
    unint64_t v13 = (char *)operator new(0x20uLL);
    *(void *)unint64_t v13 = &unk_1EF57D7E8;
    *(_OWORD *)(v13 + 8) = *(_OWORD *)v12;
    *((void *)v13 + 3) = v12[2];
    long long v149 = v13;
    v146[0] = &unk_1EF57D830;
    v146[1] = v142;
    float64x2x2_t v147 = v146;
    v130[0].i16[0] = 0;
    memset(&v130[1], 0, 32);
    long long v131 = 0u;
    long long v132 = 0u;
    v130[5].i32[0] = 1065353216;
    float v133 = 1.0;
    long long v134 = 0u;
    long long v135 = 0u;
    int64x2_t v136 = 0u;
    uint64_t v137 = 0;
    unint64_t v138 = a1;
    uint64_t v139 = 0;
    md::GraphTraversalContext::pushItem(v130, (size_t)&v105);
    uint64_t v102 = (void *)(a1 + 144);
    uint64_t v104 = (int8x8_t *)a1;
    while (v136.i64[1])
    {
      uint64_t v14 = *(void *)(*((void *)&v134 + 1) + 8 * (v136.i64[0] / 0x2EuLL));
      unint64_t v15 = v136.i64[0] % 0x2EuLL;
      float v16 = (MuninRoadEdge **)(v14 + 88 * (v136.i64[0] % 0x2EuLL));
      uint64_t v122 = *v16;
      md::GraphTraversalPath::GraphTraversalPath(&v123, (uint64_t)(v16 + 1));
      char v129 = *(unsigned char *)(v14 + 88 * v15 + 80);
      uint64_t v137 = (md::GraphTraversalPath *)&v123;
      uint64_t v17 = *(void *)(*((void *)&v134 + 1) + 8 * (v136.i64[0] / 0x2EuLL));
      unint64_t v18 = v136.i64[0] % 0x2EuLL;
      uint64_t v19 = v17 + 88 * (v136.i64[0] % 0x2EuLL);
      unsigned int v20 = *(void **)(v19 + 56);
      if (v20)
      {
        *(void *)(v17 + 88 * v18 + 64) = v20;
        operator delete(v20);
      }
      uint64_t v21 = *(void **)(v17 + 88 * v18 + 32);
      if (v21)
      {
        *(void *)(v17 + 88 * v18 + 40) = v21;
        operator delete(v21);
      }
      uint64_t v22 = *(void **)(v19 + 8);
      if (v22)
      {
        *(void *)(v17 + 88 * v18 + 16) = v22;
        operator delete(v22);
      }
      int64x2_t v136 = vaddq_s64(v136, (int64x2_t)xmmword_1A28FE7B0);
      if (v136.i64[0] >= 0x5CuLL)
      {
        operator delete(**((void ***)&v134 + 1));
        *((void *)&v134 + 1) += 8;
        v136.i64[0] -= 46;
      }
      if (v129 != 1)
      {
        if (v129) {
          goto LABEL_210;
        }
        uint64_t v23 = v122;
        if (v130[0].i8[0])
        {
          if (v137)
          {
            uint64_t v24 = *(MuninRoadEdge ***)v137;
            unsigned int v25 = (MuninRoadEdge **)*((void *)v137 + 1);
            if (*(MuninRoadEdge ***)v137 != v25)
            {
              while (*v24 != v122)
              {
                if (++v24 == v25)
                {
                  uint64_t v24 = (MuninRoadEdge **)*((void *)v137 + 1);
                  break;
                }
              }
            }
            if (v24 != v25) {
              goto LABEL_210;
            }
          }
        }
        else if (std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(&v130[1], (unint64_t)v122))
        {
          goto LABEL_210;
        }
        std::__hash_table<md::MuninJunction const*,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,std::allocator<md::MuninJunction const*>>::__emplace_unique_key_args<md::MuninJunction const*,md::MuninJunction const*&>((uint64_t)&v130[1], (unint64_t)v23, (uint64_t)v23);
        if (std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>((void *)(v138 + 184), (unint64_t)v23))
        {
          uint8x8_t v33 = (unint64_t *)*((void *)v23 + 9);
          for (uint64_t i = (unint64_t *)*((void *)v23 + 10); v33 != i; ++v33)
            std::__hash_table<md::MuninJunction const*,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,std::allocator<md::MuninJunction const*>>::__emplace_unique_key_args<md::MuninJunction const*,md::MuninJunction const*&>((uint64_t)&v130[1], *v33, *v33);
        }
        if (v149)
        {
          uint64_t v153 = 0;
          uint64_t v114 = v23;
          unsigned int v141 = &v123;
          int v140 = (unint64_t)(v126 - (unsigned char *)v125) >> 3;
          char v35 = (*(uint64_t (**)(void *, MuninRoadEdge **, void ***, int *))(*v149 + 48))(v149, &v114, &v141, &v140);
          if (v153 == v152)
          {
            (*(void (**)(void *))(v152[0] + 32))(v152);
            if ((v35 & 1) == 0) {
              goto LABEL_210;
            }
          }
          else
          {
            if (v153) {
              (*(void (**)(void))(*v153 + 40))();
            }
            if ((v35 & 1) == 0) {
              goto LABEL_210;
            }
          }
        }
        if (v137)
        {
          md::GraphTraversalPath::visit(v137, (const MuninJunction *)v23);
          if (v130[0].i8[1]) {
            md::GraphTraversalPath::visit(v139, (const MuninJunction *)v23);
          }
        }
        uint64_t v46 = (const MuninRoadEdge **)*((void *)v23 + 5);
        uint64_t v47 = (const MuninRoadEdge **)*((void *)v23 + 6);
        while (v46 != v47)
        {
          uint64_t v48 = *v46;
          if (!md::GraphTraversalContext::hasVisited(v130, *v46))
          {
            uint64_t v114 = (MuninRoadEdge *)v48;
            md::GraphTraversalPath::GraphTraversalPath(&v115, (uint64_t)&v123);
            char v121 = 1;
            md::GraphTraversalContext::pushItem(v130, (size_t)&v114);
            if (__p)
            {
              uint64_t v120 = __p;
              operator delete(__p);
            }
            if (v117)
            {
              uint64_t v118 = v117;
              operator delete(v117);
            }
            if (v115)
            {
              uint64_t v116 = v115;
              operator delete(v115);
            }
          }
          ++v46;
        }
        goto LABEL_210;
      }
      size_t v26 = v122;
      if (md::GraphTraversalContext::hasVisited(v130, v122)) {
        goto LABEL_210;
      }
      unint64_t v27 = 0x9DDFEA08EB382D69 * (((8 * v26) + 8) ^ ((unint64_t)v26 >> 32));
      unint64_t v28 = 0x9DDFEA08EB382D69 * (((unint64_t)v26 >> 32) ^ (v27 >> 47) ^ v27);
      unint64_t v29 = v28 ^ (v28 >> 47);
      unint64_t v30 = 0x9DDFEA08EB382D69 * v29;
      unint64_t v31 = *((void *)&v131 + 1);
      if (*((void *)&v131 + 1))
      {
        uint8x8_t v32 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v131 + 8));
        v32.i16[0] = vaddlv_u8(v32);
        if (v32.u32[0] > 1uLL)
        {
          a1 = 0x9DDFEA08EB382D69 * v29;
          if (v30 >= *((void *)&v131 + 1)) {
            a1 = v30 % *((void *)&v131 + 1);
          }
        }
        else
        {
          a1 = v30 & (*((void *)&v131 + 1) - 1);
        }
        uint64_t v36 = *(void **)(v131 + 8 * a1);
        if (v36)
        {
          size_t v37 = (void *)*v36;
          if (v37)
          {
            if (v32.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v39 = v37[1];
                if (v39 == v30)
                {
                  if ((MuninRoadEdge *)v37[2] == v26) {
                    goto LABEL_138;
                  }
                }
                else if ((v39 & (*((void *)&v131 + 1) - 1)) != a1)
                {
                  goto LABEL_64;
                }
                size_t v37 = (void *)*v37;
                if (!v37) {
                  goto LABEL_64;
                }
              }
            }
            do
            {
              unint64_t v38 = v37[1];
              if (v38 == v30)
              {
                if ((MuninRoadEdge *)v37[2] == v26) {
                  goto LABEL_138;
                }
              }
              else
              {
                if (v38 >= *((void *)&v131 + 1)) {
                  v38 %= *((void *)&v131 + 1);
                }
                if (v38 != a1) {
                  break;
                }
              }
              size_t v37 = (void *)*v37;
            }
            while (v37);
          }
        }
      }
LABEL_64:
      unint64_t v40 = operator new(0x18uLL);
      *unint64_t v40 = 0;
      v40[1] = v30;
      v40[2] = v26;
      float v41 = (float)(unint64_t)(*((void *)&v132 + 1) + 1);
      if (!v31 || (float)(v133 * (float)v31) < v41)
      {
        BOOL v42 = (v31 & (v31 - 1)) != 0;
        if (v31 < 3) {
          BOOL v42 = 1;
        }
        unint64_t v43 = v42 | (2 * v31);
        unint64_t v44 = vcvtps_u32_f32(v41 / v133);
        if (v43 <= v44) {
          size_t prime = v44;
        }
        else {
          size_t prime = v43;
        }
        if (prime == 1)
        {
          size_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(prime);
          unint64_t v31 = *((void *)&v131 + 1);
        }
        if (prime <= v31)
        {
          if (prime < v31)
          {
            unint64_t v59 = vcvtps_u32_f32((float)*((unint64_t *)&v132 + 1) / v133);
            if (v31 < 3 || (uint8x8_t v60 = (uint8x8_t)vcnt_s8((int8x8_t)v31), v60.i16[0] = vaddlv_u8(v60), v60.u32[0] > 1uLL))
            {
              unint64_t v59 = std::__next_prime(v59);
            }
            else
            {
              uint64_t v61 = 1 << -(char)__clz(v59 - 1);
              if (v59 >= 2) {
                unint64_t v59 = v61;
              }
            }
            if (prime <= v59) {
              size_t prime = v59;
            }
            if (prime >= v31)
            {
              unint64_t v31 = *((void *)&v131 + 1);
            }
            else
            {
              if (prime) {
                goto LABEL_90;
              }
              unint64_t v96 = (void *)v131;
              *(void *)&long long v131 = 0;
              if (v96) {
                operator delete(v96);
              }
              unint64_t v31 = 0;
              *((void *)&v131 + 1) = 0;
            }
          }
LABEL_115:
          if ((v31 & (v31 - 1)) != 0)
          {
            if (v30 >= v31) {
              a1 = v30 % v31;
            }
            else {
              a1 = v30;
            }
          }
          else
          {
            a1 = (v31 - 1) & v30;
          }
          goto LABEL_128;
        }
LABEL_90:
        if (prime >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v49 = operator new(8 * prime);
        uint64_t v50 = (void *)v131;
        *(void *)&long long v131 = v49;
        if (v50) {
          operator delete(v50);
        }
        uint64_t v51 = 0;
        *((void *)&v131 + 1) = prime;
        do
          *(void *)(v131 + 8 * v51++) = 0;
        while (prime != v51);
        unsigned int v52 = (void **)v132;
        if (!(void)v132) {
          goto LABEL_114;
        }
        size_t v53 = *(void *)(v132 + 8);
        size_t v54 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          size_t v55 = v53 & v54;
          *(void *)(v131 + 8 * v55) = &v132;
          for (unint64_t j = *v52; *v52; unint64_t j = *v52)
          {
            size_t v57 = j[1] & v54;
            if (v57 == v55)
            {
              unsigned int v52 = (void **)j;
            }
            else if (*(void *)(v131 + 8 * v57))
            {
              *unsigned int v52 = (void *)*j;
              uint64_t v58 = 8 * v57;
              *unint64_t j = **(void **)(v131 + v58);
              **(void **)(v131 + v58) = j;
            }
            else
            {
              *(void *)(v131 + 8 * v57) = v52;
              unsigned int v52 = (void **)j;
              size_t v55 = v57;
            }
          }
          goto LABEL_114;
        }
        if (v53 >= prime) {
          v53 %= prime;
        }
        *(void *)(v131 + 8 * v53) = &v132;
        uint64_t v62 = *v52;
        if (!*v52)
        {
LABEL_114:
          unint64_t v31 = prime;
          goto LABEL_115;
        }
        while (2)
        {
          size_t v64 = v62[1];
          if (v64 >= prime) {
            v64 %= prime;
          }
          if (v64 != v53)
          {
            if (!*(void *)(v131 + 8 * v64))
            {
              *(void *)(v131 + 8 * v64) = v52;
LABEL_119:
              unsigned int v52 = (void **)v62;
              uint64_t v62 = (void *)*v62;
              size_t v53 = v64;
              if (!v62) {
                goto LABEL_114;
              }
              continue;
            }
            *unsigned int v52 = (void *)*v62;
            uint64_t v63 = 8 * v64;
            *uint64_t v62 = **(void **)(v131 + v63);
            **(void **)(v131 + v63) = v62;
            uint64_t v62 = v52;
          }
          break;
        }
        size_t v64 = v53;
        goto LABEL_119;
      }
LABEL_128:
      uint64_t v65 = v131;
      uint64_t v66 = *(void **)(v131 + 8 * a1);
      if (v66)
      {
        *unint64_t v40 = *v66;
LABEL_136:
        *uint64_t v66 = v40;
        goto LABEL_137;
      }
      *unint64_t v40 = v132;
      *(void *)&long long v132 = v40;
      *(void *)(v65 + 8 * a1) = &v132;
      if (*v40)
      {
        unint64_t v67 = *(void *)(*v40 + 8);
        if ((v31 & (v31 - 1)) != 0)
        {
          if (v67 >= v31) {
            v67 %= v31;
          }
        }
        else
        {
          v67 &= v31 - 1;
        }
        uint64_t v66 = (void *)(v131 + 8 * v67);
        goto LABEL_136;
      }
LABEL_137:
      ++*((void *)&v132 + 1);
LABEL_138:
      a1 = (unint64_t)v104;
      if (v147)
      {
        uint64_t v114 = v26;
        unsigned int v141 = &v123;
        if (((*(uint64_t (**)(void *, MuninRoadEdge **, void ***))(*v147 + 48))(v147, &v114, &v141) & 1) == 0) {
          goto LABEL_210;
        }
      }
      if (v137)
      {
        md::GraphTraversalPath::visit(v137, v26);
        if (v130[0].i8[1]) {
          md::GraphTraversalPath::visit(v139, v26);
        }
      }
      if (v124 == v123 || !*(v124 - 1))
      {
        char v69 = 0;
        long long v68 = *((_OWORD *)v26 + 6);
      }
      else
      {
        long long v68 = (unint64_t)*(v124 - 1);
        char v69 = 1;
      }
      int8x8_t v70 = v104[24];
      if (!*(void *)&v70) {
        goto LABEL_167;
      }
      unint64_t v71 = 0x9DDFEA08EB382D69 * (((8 * v68) + 8) ^ DWORD1(v68));
      unint64_t v72 = 0x9DDFEA08EB382D69 * (DWORD1(v68) ^ (v71 >> 47) ^ v71);
      unint64_t v73 = 0x9DDFEA08EB382D69 * (v72 ^ (v72 >> 47));
      uint8x8_t v74 = (uint8x8_t)vcnt_s8(v70);
      v74.i16[0] = vaddlv_u8(v74);
      if (v74.u32[0] > 1uLL)
      {
        unint64_t v75 = v73;
        if (v73 >= *(void *)&v70) {
          unint64_t v75 = v73 % *(void *)&v70;
        }
      }
      else
      {
        unint64_t v75 = v73 & (*(void *)&v70 - 1);
      }
      uint64_t v76 = *(void **)(*(void *)&v104[23] + 8 * v75);
      if (!v76 || (uint64_t v77 = (void *)*v76) == 0)
      {
LABEL_167:
        unint64_t v81 = *((void *)v26 + 12);
        if ((void)v68 != v81) {
          goto LABEL_169;
        }
        goto LABEL_168;
      }
      if (v74.u32[0] < 2uLL)
      {
        uint64_t v78 = *(void *)&v70 - 1;
        while (1)
        {
          uint64_t v80 = v77[1];
          if (v73 == v80)
          {
            if (v77[2] == (void)v68) {
              goto LABEL_225;
            }
          }
          else if ((v80 & v78) != v75)
          {
            goto LABEL_167;
          }
          uint64_t v77 = (void *)*v77;
          if (!v77) {
            goto LABEL_167;
          }
        }
      }
      while (1)
      {
        unint64_t v79 = v77[1];
        if (v73 == v79) {
          break;
        }
        if (v79 >= *(void *)&v70) {
          v79 %= *(void *)&v70;
        }
        if (v79 != v75) {
          goto LABEL_167;
        }
LABEL_157:
        uint64_t v77 = (void *)*v77;
        if (!v77) {
          goto LABEL_167;
        }
      }
      if (v77[2] != (void)v68) {
        goto LABEL_157;
      }
LABEL_225:
      unint64_t v81 = *((void *)v26 + 12);
      uint64_t v98 = *(void **)(v68 + 72);
      uint64_t v97 = *(void **)(v68 + 80);
      if (v98 != v97)
      {
        while (*v98 != v81)
        {
          if (++v98 == v97)
          {
            uint64_t v98 = *(void **)(v68 + 80);
            break;
          }
        }
      }
      if (v98 != v97) {
LABEL_168:
      }
        unint64_t v81 = *((void *)v26 + 13);
LABEL_169:
      unint64_t v103 = *((void *)&v68 + 1);
      if (*(_DWORD *)(v81 + 64))
      {
        uint64_t v82 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v102, v81);
        if (v82) {
          unint64_t v81 = v82[3];
        }
      }
      uint64_t v114 = (MuninRoadEdge *)v81;
      md::GraphTraversalPath::GraphTraversalPath(&v115, (uint64_t)&v123);
      char v121 = 0;
      md::GraphTraversalContext::pushItem(v130, (size_t)&v114);
      if (__p)
      {
        uint64_t v120 = __p;
        operator delete(__p);
      }
      if (v117)
      {
        uint64_t v118 = v117;
        operator delete(v117);
      }
      if (v115)
      {
        uint64_t v116 = v115;
        operator delete(v115);
      }
      if ((v69 & 1) == 0)
      {
        int8x8_t v83 = v104[24];
        if (v83)
        {
          unint64_t v84 = 0x9DDFEA08EB382D69 * (((8 * v103) + 8) ^ HIDWORD(v103));
          unint64_t v85 = 0x9DDFEA08EB382D69 * (HIDWORD(v103) ^ (v84 >> 47) ^ v84);
          unint64_t v86 = 0x9DDFEA08EB382D69 * (v85 ^ (v85 >> 47));
          uint8x8_t v87 = (uint8x8_t)vcnt_s8(v83);
          v87.i16[0] = vaddlv_u8(v87);
          if (v87.u32[0] >= 2uLL)
          {
            unint64_t v88 = v86;
            if (v86 >= *(void *)&v83) {
              unint64_t v88 = v86 % *(void *)&v83;
            }
          }
          else
          {
            unint64_t v88 = v86 & (*(void *)&v83 - 1);
          }
          uint64_t v89 = *(void **)(*(void *)&v104[23] + 8 * v88);
          if (v89)
          {
            unint64_t v90 = (void *)*v89;
            if (v90)
            {
              if (v87.u32[0] < 2uLL)
              {
                uint64_t v91 = *(void *)&v83 - 1;
                while (1)
                {
                  uint64_t v93 = v90[1];
                  if (v86 == v93)
                  {
                    if (v90[2] == v103) {
                      goto LABEL_231;
                    }
                  }
                  else if ((v93 & v91) != v88)
                  {
                    goto LABEL_199;
                  }
                  unint64_t v90 = (void *)*v90;
                  if (!v90) {
                    goto LABEL_199;
                  }
                }
              }
              do
              {
                unint64_t v92 = v90[1];
                if (v86 == v92)
                {
                  if (v90[2] == v103)
                  {
LABEL_231:
                    unint64_t v94 = *((void *)v26 + 12);
                    BOOL v100 = *(void **)(v103 + 72);
                    uint64_t v99 = *(void **)(v103 + 80);
                    if (v100 != v99)
                    {
                      while (*v100 != v94)
                      {
                        if (++v100 == v99)
                        {
                          BOOL v100 = *(void **)(v103 + 80);
                          break;
                        }
                      }
                    }
                    if (v100 == v99)
                    {
LABEL_201:
                      if (*(_DWORD *)(v94 + 64))
                      {
                        unsigned int v95 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v102, v94);
                        if (v95) {
                          unint64_t v94 = v95[3];
                        }
                      }
                      uint64_t v114 = (MuninRoadEdge *)v94;
                      md::GraphTraversalPath::GraphTraversalPath(&v115, (uint64_t)&v123);
                      char v121 = 0;
                      md::GraphTraversalContext::pushItem(v130, (size_t)&v114);
                      if (__p)
                      {
                        uint64_t v120 = __p;
                        operator delete(__p);
                      }
                      if (v117)
                      {
                        uint64_t v118 = v117;
                        operator delete(v117);
                      }
                      if (v115)
                      {
                        uint64_t v116 = v115;
                        operator delete(v115);
                      }
                      goto LABEL_210;
                    }
LABEL_200:
                    unint64_t v94 = *((void *)v26 + 13);
                    goto LABEL_201;
                  }
                }
                else
                {
                  if (v92 >= *(void *)&v83) {
                    v92 %= *(void *)&v83;
                  }
                  if (v92 != v88) {
                    break;
                  }
                }
                unint64_t v90 = (void *)*v90;
              }
              while (v90);
            }
          }
        }
LABEL_199:
        unint64_t v94 = *((void *)v26 + 12);
        if (v103 != v94) {
          goto LABEL_201;
        }
        goto LABEL_200;
      }
LABEL_210:
      if (v127)
      {
        uint64_t v128 = v127;
        operator delete(v127);
      }
      if (v125)
      {
        uint64_t v126 = v125;
        operator delete(v125);
      }
      if (v123)
      {
        long long v124 = v123;
        operator delete(v123);
      }
    }
    md::GraphTraversalContext::~GraphTraversalContext((md::GraphTraversalContext *)v130);
    if (v147 == v146)
    {
      (*(void (**)(void *))(v146[0] + 32))(v146);
    }
    else if (v147)
    {
      (*(void (**)(void *))(*v147 + 40))(v147);
    }
    if (v149 == v148)
    {
      (*(void (**)(void *))(v148[0] + 32))(v148);
    }
    else if (v149)
    {
      (*(void (**)(void *))(*v149 + 40))(v149);
    }
    if (v151 == v150)
    {
      (*(void (**)(void *))(v150[0] + 32))(v150);
    }
    else if (v151)
    {
      (*(void (**)(void *))(*v151 + 40))(v151);
    }
  }
  if (v143 == v142)
  {
    (*(void (**)(void *))(v142[0] + 32))(v142);
  }
  else if (v143)
  {
    (*(void (**)(void))(*v143 + 40))();
  }
  if (v145 == v144)
  {
    (*(void (**)(void *))(v144[0] + 32))(v144);
    uint64_t v101 = v109;
    if (!v109) {
      goto LABEL_258;
    }
  }
  else
  {
    if (v145) {
      (*(void (**)(void))(*v145 + 40))();
    }
    uint64_t v101 = v109;
    if (!v109) {
      goto LABEL_258;
    }
  }
  int64_t v110 = v101;
  operator delete(v101);
LABEL_258:
  if (v107)
  {
    uint64_t v108 = v107;
    operator delete(v107);
  }
  if (v106[0])
  {
    v106[1] = v106[0];
    operator delete(v106[0]);
  }
}

void sub_1A26CB128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  md::GraphTraversalContext::~GraphTraversalContext((md::GraphTraversalContext *)&a53);
  std::function<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const*)>::~function((void *)(v53 - 232));
  std::function<BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>::~function((void *)(v53 - 200));
  std::function<BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>::~function((void *)(v53 - 168));
  std::function<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const*)>::~function(&STACK[0x218]);
  std::function<BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>::~function(&STACK[0x238]);
  md::GraphTraversalQueueItem::~GraphTraversalQueueItem((md::GraphTraversalQueueItem *)&a18);
  _Unwind_Resume(a1);
}

void md::GraphTraversalContext::~GraphTraversalContext(md::GraphTraversalContext *this)
{
  uint64_t v2 = (void **)*((void *)this + 12);
  unint64_t v3 = (void **)*((void *)this + 13);
  if (v3 == v2)
  {
    uint64_t v4 = (void *)((char *)this + 128);
    unint64_t v3 = (void **)*((void *)this + 12);
  }
  else
  {
    uint64_t v4 = (void *)((char *)this + 128);
    unint64_t v5 = *((void *)this + 15);
    unint64_t v6 = &v2[v5 / 0x2E];
    unint64_t v7 = (char *)*v6 + 88 * (v5 % 0x2E);
    unint64_t v8 = (unint64_t)v2[(*((void *)this + 16) + v5) / 0x2E] + 88 * ((*((void *)this + 16) + v5) % 0x2E);
    if (v7 != (char *)v8)
    {
      do
      {
        uint64_t v9 = (void *)*((void *)v7 + 7);
        if (v9)
        {
          *((void *)v7 + 8) = v9;
          operator delete(v9);
        }
        uint64_t v10 = (void *)*((void *)v7 + 4);
        if (v10)
        {
          *((void *)v7 + 5) = v10;
          operator delete(v10);
        }
        unsigned int v11 = (void *)*((void *)v7 + 1);
        if (v11)
        {
          *((void *)v7 + 2) = v11;
          operator delete(v11);
        }
        v7 += 88;
        if (v7 - (unsigned char *)*v6 == 4048)
        {
          uint64_t v12 = (char *)v6[1];
          ++v6;
          unint64_t v7 = v12;
        }
      }
      while (v7 != (char *)v8);
      uint64_t v2 = (void **)*((void *)this + 12);
      unint64_t v3 = (void **)*((void *)this + 13);
    }
  }
  *uint64_t v4 = 0;
  unint64_t v13 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)*((void *)this + 13);
      uint64_t v2 = (void **)(*((void *)this + 12) + 8);
      *((void *)this + 12) = v2;
      unint64_t v13 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v14 = v13 >> 3;
  if (v14 == 1)
  {
    uint64_t v15 = 23;
    goto LABEL_21;
  }
  if (v14 == 2)
  {
    uint64_t v15 = 46;
LABEL_21:
    *((void *)this + 15) = v15;
  }
  if (v2 != v3)
  {
    do
    {
      float v16 = *v2++;
      operator delete(v16);
    }
    while (v2 != v3);
    uint64_t v18 = *((void *)this + 12);
    uint64_t v17 = *((void *)this + 13);
    if (v17 != v18) {
      *((void *)this + 13) = v17 + ((v18 - v17 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  uint64_t v19 = (void *)*((void *)this + 11);
  if (v19) {
    operator delete(v19);
  }
  unsigned int v20 = (void *)*((void *)this + 8);
  if (v20)
  {
    do
    {
      uint64_t v21 = (void *)*v20;
      operator delete(v20);
      unsigned int v20 = v21;
    }
    while (v21);
  }
  uint64_t v22 = (void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v22) {
    operator delete(v22);
  }
  uint64_t v23 = (void *)*((void *)this + 3);
  if (v23)
  {
    do
    {
      uint64_t v24 = (void *)*v23;
      operator delete(v23);
      uint64_t v23 = v24;
    }
    while (v24);
  }
  unsigned int v25 = (void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v25) {
    operator delete(v25);
  }
}

uint64_t std::__function::__func<md::MuninRoadGraph::traverseDrivableEdges(md::GraphTraversalQueueItem &&,unsigned int,std::function<BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>,md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>)::$_2,std::allocator<md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>>,md::MuninRoadEdge const*>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  if (!*(unsigned char *)(*a2 + 112)) {
    return 0;
  }
  uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 24);
  if (!v4) {
    return 1;
  }
  uint64_t v6 = *a3;
  uint64_t v7 = v3;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v4 + 48))(v4, &v7, &v6);
}

uint64_t std::__function::__func<md::MuninRoadGraph::traverseDrivableEdges(md::GraphTraversalQueueItem &&,unsigned int,std::function<BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>,md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>)::$_2,std::allocator<md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>>,md::MuninRoadEdge const*>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57D830;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::MuninRoadGraph::traverseDrivableEdges(md::GraphTraversalQueueItem &&,unsigned int,std::function<BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>,md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>)::$_2,std::allocator<md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>>,md::MuninRoadEdge const*>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF57D830;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::MuninRoadGraph::traverseDrivableEdges(md::GraphTraversalQueueItem &&,unsigned int,std::function<BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>,md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>)::$_2,std::allocator<md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>>,md::MuninRoadEdge const*>::~__func()
{
}

void std::__function::__func<md::MuninRoadGraph::traverseDrivableEdges(md::GraphTraversalQueueItem &&,unsigned int,std::function<BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>,md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>)::$_1,std::allocator<md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>>,md::GraphTraversalPath const*>::operator()(uint64_t a1, unint64_t *a2, unint64_t ***a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *a2;
  unint64_t v5 = *a3;
  uint64_t v6 = **(void **)(a1 + 8);
  int v7 = *(_DWORD *)(*a2 + 64);
  if (v7 != 1
    && (v7 != 2
     || std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>((void *)(v6 + 184), *a2)))
  {
    unsigned int v8 = *(unsigned __int8 *)(v4 + 69);
    if (v8 <= 2)
    {
      if (v8 - 1 <= 1)
      {
        if (*(unsigned __int8 *)(v4 + 68) > 2u) {
          goto LABEL_5;
        }
        if (v8 == 2)
        {
          if (*(unsigned char *)(v4 + 68) == 2) {
            goto LABEL_5;
          }
        }
        else if (v8 == 1 && *(unsigned char *)(v4 + 68) == 1)
        {
          goto LABEL_5;
        }
      }
      unsigned int v11 = 0;
LABEL_26:
      if (v7 != 2
        || std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>((void *)(v6 + 184), v4))
      {
        unsigned int v12 = *(unsigned __int8 *)(v4 + 69);
        if (v12 <= 2)
        {
          if (v12 - 1 > 1) {
            return;
          }
          if (*(unsigned __int8 *)(v4 + 68) <= 2u)
          {
            if (v12 == 2)
            {
              if (*(unsigned char *)(v4 + 68) != 2) {
                return;
              }
            }
            else if (v12 != 1 || *(unsigned char *)(v4 + 68) != 1)
            {
              return;
            }
          }
        }
      }
LABEL_29:
      uint64_t v13 = *(void *)(a1 + 24);
      float v16 = v5;
      unint64_t v17 = v4;
      unsigned int v15 = v11;
      uint64_t v14 = *(void *)(v13 + 24);
      if (v14)
      {
        (*(uint64_t (**)(uint64_t, unint64_t *, unint64_t ***, unsigned int *))(*(void *)v14 + 48))(v14, &v17, &v16, &v15);
        return;
      }
      goto LABEL_39;
    }
  }
LABEL_5:
  v18[0] = &unk_1EF57D7A0;
  v18[1] = v6;
  uint64_t v19 = v18;
  uint64_t v9 = *v5;
  uint64_t v10 = v5[1];
  if (*v5 != v10)
  {
    unsigned int v11 = 0;
    while (1)
    {
      unint64_t v17 = *v9;
      if (!v19) {
        break;
      }
      v11 += (*(uint64_t (**)(void *, unint64_t *))(*v19 + 48))(v19, &v17);
      if (++v9 == v10)
      {
        if (v19 == v18) {
          goto LABEL_13;
        }
        if (v19) {
          (*(void (**)(void))(*v19 + 40))();
        }
        goto LABEL_14;
      }
    }
LABEL_39:
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
    return;
  }
  unsigned int v11 = 0;
LABEL_13:
  (*(void (**)(void *))(v18[0] + 32))(v18);
LABEL_14:
  if (v11 <= **(_DWORD **)(a1 + 16))
  {
    uint64_t v6 = **(void **)(a1 + 8);
    int v7 = *(_DWORD *)(v4 + 64);
    if (v7 == 1) {
      goto LABEL_29;
    }
    goto LABEL_26;
  }
}

void sub_1A26CB7FC(_Unwind_Exception *exception_object)
{
}

void sub_1A26CB808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15)
{
  if (a15 == &a12)
  {
    (*(void (**)(uint64_t *))(a12 + 32))(&a12);
    _Unwind_Resume(exception_object);
  }
  if (!a15) {
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(void))(*a15 + 40))();
  _Unwind_Resume(exception_object);
}

BOOL std::__function::__func<md::MuninRoadGraph::traverseDrivableEdges(md::GraphTraversalQueueItem &&,unsigned int,std::function<BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>,md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>)::$_0,std::allocator<md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>>,BOOL ()(md::MuninJunction const)>::operator()(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  int v3 = *(_DWORD *)(*a2 + 64);
  if (v3 == 1
    || v3 == 2
    && !std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>((void *)(*(void *)(a1 + 8) + 184), *a2))
  {
    return 1;
  }
  unsigned int v4 = *(unsigned __int8 *)(v2 + 69);
  if (v4 > 2) {
    return 1;
  }
  if (v4 - 1 <= 1)
  {
    if (*(unsigned __int8 *)(v2 + 68) > 2u) {
      return 1;
    }
    if (v4 != 2) {
      return v4 == 1 && *(unsigned char *)(v2 + 68) == 1;
    }
    if (*(unsigned char *)(v2 + 68) == 2) {
      return 1;
    }
  }
  return 0;
}

uint64_t std::__function::__func<md::MuninRoadGraph::traverseDrivableEdges(md::GraphTraversalQueueItem &&,unsigned int,std::function<BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>,md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>)::$_0,std::allocator<md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>>,BOOL ()(md::MuninJunction const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57D7A0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::MuninRoadGraph::traverseDrivableEdges(md::GraphTraversalQueueItem &&,unsigned int,std::function<BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>,md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>)::$_0,std::allocator<md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>>,BOOL ()(md::MuninJunction const)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF57D7A0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::MuninRoadGraph::traverseDrivableEdges(md::GraphTraversalQueueItem &&,unsigned int,std::function<BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>,md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>)::$_0,std::allocator<md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>>,BOOL ()(md::MuninJunction const)>::~__func()
{
}

__n128 std::__function::__func<md::MuninRoadGraph::traverseDrivableEdges(md::GraphTraversalQueueItem &&,unsigned int,std::function<BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>,md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>)::$_1,std::allocator<md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>>,md::GraphTraversalPath const*>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57D7E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::MuninRoadGraph::traverseDrivableEdges(md::GraphTraversalQueueItem &&,unsigned int,std::function<BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>,md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>)::$_1,std::allocator<md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>>,md::GraphTraversalPath const*>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF57D7E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<md::MuninRoadGraph::traverseDrivableEdges(md::GraphTraversalQueueItem &&,unsigned int,std::function<BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>,md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>)::$_1,std::allocator<md::GraphTraversalQueueItem &&<BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const)>>,md::GraphTraversalPath const*>::~__func()
{
}

uint64_t std::__function::__func<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_1,std::allocator<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_1>,BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = **(void **)(a1 + 8);
  uint64_t v4 = *(unsigned __int8 *)(*a2 + 39);
  size_t v5 = *(void *)(*a2 + 24);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = *(unsigned __int8 *)(*a2 + 39);
  }
  else {
    uint64_t v6 = *(void *)(*a2 + 24);
  }
  uint64_t v7 = *(unsigned __int8 *)(v3 + 39);
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(v3 + 24);
  }
  if (v6 != v7) {
    return 0;
  }
  uint64_t v10 = (const void **)(v2 + 16);
  uint64_t v13 = *(unsigned __int8 **)(v3 + 16);
  unsigned int v11 = (unsigned __int8 *)(v3 + 16);
  unsigned int v12 = v13;
  if (v8 >= 0) {
    uint64_t v14 = v11;
  }
  else {
    uint64_t v14 = v12;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v10, v14, v5)) {
      return 0;
    }
  }
  else if (v4)
  {
    while (*(unsigned __int8 *)v10 == *v14)
    {
      uint64_t v10 = (const void **)((char *)v10 + 1);
      ++v14;
      if (!--v4) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  if (!*(unsigned char *)(v2 + 112)) {
    return 0;
  }
  uint64_t v15 = *(void *)(a1 + 16);
  unint64_t v17 = *(void **)(v15 + 8);
  unint64_t v16 = *(void *)(v15 + 16);
  if ((unint64_t)v17 >= v16)
  {
    uint64_t v20 = *(unsigned char **)v15;
    uint64_t v21 = (uint64_t)v17 - *(void *)v15;
    uint64_t v22 = v21 >> 3;
    unint64_t v23 = (v21 >> 3) + 1;
    if (v23 >> 61) {
      abort();
    }
    uint64_t v24 = v16 - (void)v20;
    if (v24 >> 2 > v23) {
      unint64_t v23 = v24 >> 2;
    }
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v23;
    }
    if (v25)
    {
      if (v25 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      size_t v26 = operator new(8 * v25);
    }
    else
    {
      size_t v26 = 0;
    }
    unint64_t v27 = &v26[8 * v22];
    unint64_t v28 = &v26[8 * v25];
    *unint64_t v27 = v2;
    uint64_t v18 = v27 + 1;
    if (v17 == (void *)v20)
    {
      uint64_t v20 = v17;
    }
    else
    {
      unint64_t v29 = (char *)v17 - v20 - 8;
      if (v29 < 0x58) {
        goto LABEL_46;
      }
      if ((unint64_t)((char *)v17 - v26 - v21) < 0x20) {
        goto LABEL_46;
      }
      uint64_t v30 = (v29 >> 3) + 1;
      unint64_t v31 = &v26[8 * v22 - 16];
      uint8x8_t v32 = (long long *)(v17 - 2);
      uint64_t v33 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v34 = *v32;
        *(v31 - 1) = *(v32 - 1);
        *unint64_t v31 = v34;
        v31 -= 2;
        v32 -= 2;
        v33 -= 4;
      }
      while (v33);
      v27 -= v30 & 0x3FFFFFFFFFFFFFFCLL;
      v17 -= v30 & 0x3FFFFFFFFFFFFFFCLL;
      if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_46:
        do
        {
          uint64_t v35 = *--v17;
          *--unint64_t v27 = v35;
        }
        while (v17 != (void *)v20);
        uint64_t v20 = *(unsigned char **)v15;
      }
    }
    *(void *)uint64_t v15 = v27;
    *(void *)(v15 + 8) = v18;
    *(void *)(v15 + 16) = v28;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *unint64_t v17 = v2;
    uint64_t v18 = v17 + 1;
  }
  *(void *)(v15 + 8) = v18;
  return 1;
}

__n128 std::__function::__func<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_1,std::allocator<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_1>,BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF570CC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_1,std::allocator<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_1>,BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF570CC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_1,std::allocator<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_1>,BOOL ()(md::MuninRoadEdge const*,md::GraphTraversalPath const*)>::~__func()
{
}

uint64_t std::__function::__func<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_0,std::allocator<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_0>,BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>::operator()(uint64_t a1, uint64_t *a2, unint64_t ***a3)
{
  uint64_t v4 = *a2;
  size_t v5 = **a3;
  uint64_t v6 = (*a3)[1];
  if (v5 != v6)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    do
    {
      unint64_t v8 = *v5++;
      std::__hash_table<md::MuninJunction const*,std::hash<md::MuninJunction const*>,std::equal_to<md::MuninJunction const*>,std::allocator<md::MuninJunction const*>>::__emplace_unique_key_args<md::MuninJunction const*,md::MuninJunction const* const&>(v7, v8, v8);
    }
    while (v5 != v6);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  unsigned int v11 = *(void **)(v9 + 8);
  unint64_t v10 = *(void *)(v9 + 16);
  if ((unint64_t)v11 >= v10)
  {
    uint64_t v13 = *(unsigned char **)v9;
    uint64_t v14 = (uint64_t)v11 - *(void *)v9;
    uint64_t v15 = v14 >> 3;
    unint64_t v16 = (v14 >> 3) + 1;
    if (v16 >> 61) {
      abort();
    }
    uint64_t v17 = v10 - (void)v13;
    if (v17 >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v19 = operator new(8 * v18);
    }
    else
    {
      uint64_t v19 = 0;
    }
    uint64_t v20 = &v19[8 * v15];
    uint64_t v21 = &v19[8 * v18];
    *uint64_t v20 = v4;
    unsigned int v12 = v20 + 1;
    if (v11 == (void *)v13)
    {
      uint64_t v13 = v11;
    }
    else
    {
      unint64_t v22 = (char *)v11 - v13 - 8;
      if (v22 < 0x58) {
        goto LABEL_32;
      }
      if ((unint64_t)((char *)v11 - &v19[v14]) < 0x20) {
        goto LABEL_32;
      }
      uint64_t v23 = (v22 >> 3) + 1;
      uint64_t v24 = &v19[8 * v15 - 16];
      unint64_t v25 = (long long *)(v11 - 2);
      uint64_t v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v27 = *v25;
        *(v24 - 1) = *(v25 - 1);
        *uint64_t v24 = v27;
        v24 -= 2;
        v25 -= 2;
        v26 -= 4;
      }
      while (v26);
      v20 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
      v11 -= v23 & 0x3FFFFFFFFFFFFFFCLL;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          uint64_t v28 = *--v11;
          *--uint64_t v20 = v28;
        }
        while (v11 != (void *)v13);
        uint64_t v13 = *(unsigned char **)v9;
      }
    }
    *(void *)uint64_t v9 = v20;
    *(void *)(v9 + 8) = v12;
    *(void *)(v9 + 16) = v21;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    *unsigned int v11 = v4;
    unsigned int v12 = v11 + 1;
  }
  *(void *)(v9 + 8) = v12;
  return 1;
}

__n128 std::__function::__func<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_0,std::allocator<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_0>,BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF570C80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_0,std::allocator<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_0>,BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF570C80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_0,std::allocator<md::MuninRoadGraph::MuninRoadGraph(std::vector<std::shared_ptr<md::MuninRoadNetworkData>> const&)::$_0>,BOOL ()(md::MuninJunction const*,md::GraphTraversalPath const*,unsigned int)>::~__func()
{
}

uint64_t md::MuninRoadGraph::composedEdgeForEdge(int8x8_t *this, unint64_t a2)
{
  int8x8_t v2 = this[3];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  unint64_t v8 = *(void **)(*(void *)&this[2] + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    return 0;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v2 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v5 == v12)
      {
        if (v9[2] == a2) {
          return v9[3];
        }
      }
      else if ((v12 & v10) != v7)
      {
        return 0;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        return 0;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v5 == v11) {
      break;
    }
    if (v11 >= *(void *)&v2) {
      v11 %= *(void *)&v2;
    }
    if (v11 != v7) {
      return 0;
    }
LABEL_11:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      return 0;
    }
  }
  if (v9[2] != a2) {
    goto LABEL_11;
  }
  return v9[3];
}

uint64_t md::LineTextWithAuxLabelPart::debugCompositeClassName@<X0>(md::LineTextWithAuxLabelPart *this@<X0>, unsigned char *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v27);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)"TextWithAux\n", 12);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)"  textDirection=", 16);
  int v4 = *((unsigned __int8 *)this + 714);
  if (v4 == 2)
  {
    {
      operator new();
    }
    uint64_t v26 = mdm::Allocator::instance(void)::alloc;
    uint64_t v5 = 8;
    HIBYTE(v25) = 8;
    strcpy((char *)v24, "Reversed");
  }
  else if (v4 == 1)
  {
    {
      operator new();
    }
    uint64_t v26 = mdm::Allocator::instance(void)::alloc;
    uint64_t v5 = 6;
    HIBYTE(v25) = 6;
    strcpy((char *)v24, "Normal");
  }
  else
  {
    {
      operator new();
    }
    uint64_t v26 = mdm::Allocator::instance(void)::alloc;
    uint64_t v5 = 4;
    HIBYTE(v25) = 4;
    strcpy((char *)v24, "None");
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)v24, v5);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)"  desiredTextDirection=", 23);
  int v6 = *((unsigned __int8 *)this + 715);
  if (v6 == 2)
  {
    {
      operator new();
    }
    uint64_t v23 = mdm::Allocator::instance(void)::alloc;
    uint64_t v7 = 8;
    HIBYTE(v22) = 8;
    strcpy((char *)&__p, "Reversed");
  }
  else if (v6 == 1)
  {
    {
      operator new();
    }
    uint64_t v23 = mdm::Allocator::instance(void)::alloc;
    uint64_t v7 = 6;
    HIBYTE(v22) = 6;
    strcpy((char *)&__p, "Normal");
  }
  else
  {
    {
      operator new();
    }
    uint64_t v23 = mdm::Allocator::instance(void)::alloc;
    uint64_t v7 = 4;
    HIBYTE(v22) = 4;
    strcpy((char *)&__p, "None");
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)&__p, v7);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)"\n", 1);
  if (SHIBYTE(v22) < 0)
  {
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v23 + 40))(v23, __p, v22 & 0x7FFFFFFFFFFFFFFFLL);
    if ((SHIBYTE(v25) & 0x80000000) == 0) {
      goto LABEL_19;
    }
  }
  else if ((SHIBYTE(v25) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v26 + 40))(v26, v24[0], v25 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_19:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)"  textPartOutcome st=", 21);
  md::stringFromLabelOutcome((uint64_t)v24, *((unsigned __int8 *)this + 656));
  if (v25 >= 0) {
    unint64_t v8 = v24;
  }
  else {
    unint64_t v8 = (void **)v24[0];
  }
  if (v25 >= 0) {
    uint64_t v9 = HIBYTE(v25);
  }
  else {
    uint64_t v9 = (uint64_t)v24[1];
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)v8, v9);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)" ds=", 4);
  md::stringFromLabelOutcome((uint64_t)&__p, *((unsigned __int8 *)this + 656));
  if (v22 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = (long long *)__p;
  }
  if (v22 >= 0) {
    uint64_t v11 = HIBYTE(v22);
  }
  else {
    uint64_t v11 = *((void *)&__p + 1);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)p_p, v11);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v27, (uint64_t)"\n", 1);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v25) & 0x80000000) == 0) {
      goto LABEL_33;
    }
LABEL_39:
    operator delete(v24[0]);
    char v12 = v34;
    if ((v34 & 0x10) == 0) {
      goto LABEL_34;
    }
LABEL_40:
    unint64_t v14 = v33;
    if (v33 < v30)
    {
      unint64_t v33 = v30;
      unint64_t v14 = v30;
    }
    uint64_t v15 = (const void **)&v29;
    goto LABEL_44;
  }
  operator delete((void *)__p);
  if (SHIBYTE(v25) < 0) {
    goto LABEL_39;
  }
LABEL_33:
  char v12 = v34;
  if ((v34 & 0x10) != 0) {
    goto LABEL_40;
  }
LABEL_34:
  if ((v12 & 8) == 0)
  {
    size_t v13 = 0;
    a2[23] = 0;
    goto LABEL_52;
  }
  uint64_t v15 = (const void **)v28;
  unint64_t v14 = v28[2];
LABEL_44:
  unint64_t v16 = *v15;
  size_t v13 = v14 - (void)*v15;
  if (v13 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v13 >= 0x17)
  {
    uint64_t v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v17 = v13 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v19 = operator new(v17 + 1);
    *((void *)a2 + 1) = v13;
    *((void *)a2 + 2) = v18 | 0x8000000000000000;
    *(void *)a2 = v19;
    a2 = v19;
    goto LABEL_51;
  }
  a2[23] = v13;
  if (v13) {
LABEL_51:
  }
    memmove(a2, v16, v13);
LABEL_52:
  a2[v13] = 0;
  v27[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v27 + *(void *)(v27[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v27[1] = MEMORY[0x1E4FBA470] + 16;
  if (v32 < 0) {
    operator delete(v31);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v35);
}

void sub_1A26CC75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  std::ostringstream::~ostringstream((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void md::LineTextWithAuxLabelPart::populateDebugNode(md::LineTextWithAuxLabelPart *this, gdc::DebugTreeNode *a2)
{
  int v4 = (uint64_t *)*((void *)this + 72);
  uint64_t v5 = (uint64_t *)*((void *)this + 73);
  while (v4 != v5)
  {
    uint64_t v6 = *v4++;
    (*(void (**)(uint64_t, gdc::DebugTreeNode *))(*(void *)v6 + 800))(v6, a2);
  }
  uint64_t v7 = (char *)operator new(0x20uLL);
  *(void *)&v30[0] = v7;
  *(long long *)((char *)v30 + 8) = xmmword_1A28FD110;
  strcpy(v7, "LineTextWithAuxLabelPart");
  ChildNode = gdc::DebugTreeNode::createChildNode((uint64_t)a2, v30);
  operator delete(v7);
  BYTE7(v30[1]) = 7;
  strcpy((char *)v30, "Aux Gap");
  double v9 = *((float *)this + 166);
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v26 = 0;
  int v29 = 2;
  double v25 = v9;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v30, (uint64_t)v24);
  int v10 = *((unsigned __int8 *)this + 688);
  BYTE7(v30[1]) = 17;
  strcpy((char *)v30, "Text Part Outcome");
  md::stringFromLabelOutcome((uint64_t)v18, v10);
  long long __p = 0uLL;
  uint64_t v22 = 0;
  int v23 = 4;
  if (SHIBYTE(v19) < 0)
  {
    std::string::__assign_no_alias<true>(&__p, v18[0], (size_t)v18[1]);
  }
  else
  {
    long long __p = *(_OWORD *)v18;
    uint64_t v22 = v19;
  }
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v30, (uint64_t)v20);
  if (SHIBYTE(v22) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v19) & 0x80000000) == 0) {
      goto LABEL_8;
    }
LABEL_10:
    operator delete(v18[0]);
    goto LABEL_8;
  }
  if (SHIBYTE(v19) < 0) {
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v11 = (char *)operator new(0x20uLL);
  *(void *)&v30[0] = v11;
  *(long long *)((char *)v30 + 8) = xmmword_1A28FD190;
  strcpy(v11, "Is Layout Direction Reversed");
  uint64_t v12 = *((unsigned __int8 *)this + 689);
  int v17 = 0;
  memset(&v16[4], 0, 24);
  v16[0] = v12;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v30, (uint64_t)v16);
  operator delete(v11);
  BYTE7(v30[1]) = 15;
  strcpy((char *)v30, "Is Text Enabled");
  uint64_t v13 = *((unsigned __int8 *)this + 691);
  int v15 = 0;
  memset(&v14[4], 0, 24);
  v14[0] = v13;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v30, (uint64_t)v14);
}