BOOL ggl::FlyoverRoute::DefaultPipelineSetup::textureIsEnabled(ggl::FlyoverRoute::DefaultPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::FlyoverRoute::DefaultPipelineSetup::constantDataIsEnabled(ggl::FlyoverRoute::DefaultPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::FlyoverRoute::DefaultPipelineSetup::~DefaultPipelineSetup(ggl::FlyoverRoute::DefaultPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::FlyoverRoute::DefaultPipelineSetup::DefaultPipelineSetup(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7)
{
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    ggl::PipelineSetup::PipelineSetup((void *)a1, a2, (uint64_t)a3);
    if (!atomic_fetch_add(&a3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup((void *)a1, a2, 0);
  }
  *(void *)a1 = &unk_1EF55ACA8;
  v13 = *(uint64_t **)(a1 + 64);
  uint64_t v14 = *a4;
  uint64_t v15 = a4[1];
  uint64_t *v13 = *a4;
  v13[1] = 0;
  v16 = *(void **)(a1 + 160);
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  v17 = (std::__shared_weak_count *)v16[1];
  void *v16 = v14;
  v16[1] = v15;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  uint64_t v18 = *(void *)(a1 + 64);
  uint64_t v19 = *a5;
  uint64_t v20 = a5[1];
  *(void *)(v18 + 16) = *a5;
  *(void *)(v18 + 24) = 0;
  uint64_t v21 = *(void *)(a1 + 160);
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  v22 = *(std::__shared_weak_count **)(v21 + 24);
  *(void *)(v21 + 16) = v19;
  *(void *)(v21 + 24) = v20;
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  uint64_t v23 = *(void *)(a1 + 64);
  uint64_t v24 = *a6;
  uint64_t v25 = a6[1];
  *(void *)(v23 + 32) = *a6;
  *(void *)(v23 + 40) = 0;
  uint64_t v26 = *(void *)(a1 + 160);
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  v27 = *(std::__shared_weak_count **)(v26 + 40);
  *(void *)(v26 + 32) = v24;
  *(void *)(v26 + 40) = v25;
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  **(void **)(a1 + 96) = a7;
  return a1;
}

void sub_1A2740A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VKGlobeImageCanvas;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1A2741238(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  MEMORY[0x1A6239270](v4, 0x10A0C40FFB9CAC9);

  _Unwind_Resume(a1);
}

void sub_1A27413A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A27414B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A27414C4(_Unwind_Exception *a1)
{
  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1A27418B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A2741AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A2741C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A2742090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2742588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _Unwind_Exception *exception_object, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_1A27426D8()
{
}

void sub_1A2742CA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2742FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(v9);
  _Unwind_Resume(a1);
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2md16ARCameraPanEventENS8_19ARCameraRotateEventEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_0EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, void *a2, uint64_t a3)
{
  double result = *(double *)a3;
  *a2 = *(void *)a3;
  a2[1] = *(void *)(a3 + 8);
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2md16ARCameraPanEventENS8_19ARCameraRotateEventEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_0EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

double std::__introsort<std::_ClassicAlgPolicy,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::$_0 &,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::RoadEdgeInfo *,false>(unint64_t a1, __n128 *a2, uint64_t a3, char a4, __n128 a5)
{
  while (2)
  {
    v11 = (__n128 *)((char *)a2 - 24);
    v12 = a2 - 3;
    v13 = &a2[-5].n128_i8[8];
    unint64_t v14 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v14;
          uint64_t v15 = (uint64_t)a2 - v14;
          uint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v14) >> 3);
          if (v6 || !v5)
          {
            switch(v16)
            {
              case 0:
              case 1:
                return a5.n128_f64[0];
              case 2:
                a5.n128_u64[0] = a2[-1].n128_u64[0];
                if (a5.n128_f64[0] >= *(double *)(v14 + 8)) {
                  return a5.n128_f64[0];
                }
                goto LABEL_104;
              case 3:
                v94 = (__n128 *)(v14 + 24);
                a5.n128_u64[0] = *(void *)(v14 + 32);
                double v95 = a2[-1].n128_f64[0];
                if (a5.n128_f64[0] < *(double *)(v14 + 8))
                {
                  if (v95 >= a5.n128_f64[0])
                  {
                    uint64_t v197 = *(void *)(v14 + 16);
                    __n128 v174 = *(__n128 *)v14;
                    *(__n128 *)unint64_t v14 = *v94;
                    *(unsigned char *)(v14 + 16) = *(unsigned char *)(v14 + 40);
                    __n128 *v94 = v174;
                    *(unsigned char *)(v14 + 40) = v197;
                    a5.n128_u64[0] = a2[-1].n128_u64[0];
                    if (a5.n128_f64[0] >= *(double *)(v14 + 32)) {
                      return a5.n128_f64[0];
                    }
                    a5 = *v94;
                    uint64_t v149 = *(void *)(v14 + 40);
                    unsigned __int8 v150 = a2[-1].n128_u8[8];
                    __n128 *v94 = *v11;
                    *(unsigned char *)(v14 + 40) = v150;
                    a2[-1].n128_u8[8] = v149;
                  }
                  else
                  {
LABEL_104:
                    uint64_t v193 = *(void *)(v14 + 16);
                    __n128 v170 = *(__n128 *)v14;
                    __n128 v96 = *v11;
                    *(unsigned char *)(v14 + 16) = a2[-1].n128_u8[8];
                    *(__n128 *)unint64_t v14 = v96;
                    a5 = v170;
                    a2[-1].n128_u8[8] = v193;
                  }
                  __n128 *v11 = a5;
                  return a5.n128_f64[0];
                }
                if (v95 < a5.n128_f64[0])
                {
                  a5 = *v94;
                  uint64_t v142 = *(void *)(v14 + 40);
                  unsigned __int8 v143 = a2[-1].n128_u8[8];
                  __n128 *v94 = *v11;
                  *(unsigned char *)(v14 + 40) = v143;
                  a2[-1].n128_u8[8] = v142;
                  __n128 *v11 = a5;
                  a5.n128_u64[0] = *(void *)(v14 + 32);
                  if (a5.n128_f64[0] < *(double *)(v14 + 8))
                  {
                    uint64_t v196 = *(void *)(v14 + 16);
                    __n128 v173 = *(__n128 *)v14;
                    *(__n128 *)unint64_t v14 = *v94;
                    *(unsigned char *)(v14 + 16) = *(unsigned char *)(v14 + 40);
                    a5.n128_u64[0] = v173.n128_u64[0];
                    __n128 *v94 = v173;
                    *(unsigned char *)(v14 + 40) = v196;
                  }
                }
                break;
              case 4:
                a5.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::$_0 &,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::RoadEdgeInfo *>((__n128 *)v14, (__n128 *)(v14 + 24), (__n128 *)(v14 + 48), (__n128 *)((char *)a2 - 24), a5).n128_u64[0];
                return a5.n128_f64[0];
              case 5:
                v97 = (__n128 *)(v14 + 24);
                v98 = (__n128 *)(v14 + 48);
                v99 = (__n128 *)(v14 + 72);
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::$_0 &,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::RoadEdgeInfo *>((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a1 + 72), a5);
                a5.n128_u64[0] = a2[-1].n128_u64[0];
                if (a5.n128_f64[0] < *(double *)(a1 + 80))
                {
                  a5 = *v99;
                  uint64_t v100 = *(void *)(a1 + 88);
                  unsigned __int8 v101 = a2[-1].n128_u8[8];
                  __n128 *v99 = *v11;
                  *(unsigned char *)(a1 + 88) = v101;
                  a2[-1].n128_u8[8] = v100;
                  __n128 *v11 = a5;
                  a5.n128_u64[0] = *(void *)(a1 + 80);
                  if (a5.n128_f64[0] < *(double *)(a1 + 56))
                  {
                    uint64_t v102 = *(void *)(a1 + 64);
                    a5 = *v98;
                    __n128 *v98 = *v99;
                    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a1 + 88);
                    __n128 *v99 = a5;
                    *(unsigned char *)(a1 + 88) = v102;
                    a5.n128_u64[0] = *(void *)(a1 + 56);
                    if (a5.n128_f64[0] < *(double *)(a1 + 32))
                    {
                      uint64_t v103 = *(void *)(a1 + 40);
                      a5 = *v97;
                      __n128 *v97 = *v98;
                      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a1 + 64);
                      __n128 *v98 = a5;
                      *(unsigned char *)(a1 + 64) = v103;
                      a5.n128_u64[0] = *(void *)(a1 + 32);
                      if (a5.n128_f64[0] < *(double *)(a1 + 8))
                      {
                        uint64_t v194 = *(void *)(a1 + 16);
                        __n128 v171 = *(__n128 *)a1;
                        *(__n128 *)a1 = *v97;
                        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a1 + 40);
                        a5.n128_u64[0] = v171.n128_u64[0];
                        __n128 *v97 = v171;
                        *(unsigned char *)(a1 + 40) = v194;
                      }
                    }
                  }
                }
                return a5.n128_f64[0];
              default:
                JUMPOUT(0);
            }
            return a5.n128_f64[0];
          }
          if (v15 <= 575)
          {
            v104 = (__n128 *)(v14 + 24);
            BOOL v106 = (__n128 *)v14 == a2 || v104 == a2;
            if (a4)
            {
              if (!v106)
              {
                uint64_t v107 = 0;
                unint64_t v108 = v14;
                do
                {
                  v110 = v104;
                  a5.n128_u64[0] = *(void *)(v108 + 32);
                  if (a5.n128_f64[0] < *(double *)(v108 + 8))
                  {
                    unint64_t v111 = v104->n128_u64[0];
                    char v112 = *(unsigned char *)(v108 + 40);
                    uint64_t v113 = v107;
                    do
                    {
                      uint64_t v114 = v14 + v113;
                      *(_OWORD *)(v114 + 24) = *(_OWORD *)(v14 + v113);
                      *(unsigned char *)(v114 + 40) = *(unsigned char *)(v14 + v113 + 16);
                      if (!v113)
                      {
                        uint64_t v109 = v14;
                        goto LABEL_124;
                      }
                      v113 -= 24;
                    }
                    while (a5.n128_f64[0] < *(double *)(v114 - 16));
                    uint64_t v109 = v14 + v113 + 24;
LABEL_124:
                    *(void *)uint64_t v109 = v111;
                    *(void *)(v109 + 8) = a5.n128_u64[0];
                    *(unsigned char *)(v109 + 16) = v112;
                  }
                  v104 = (__n128 *)((char *)v110 + 24);
                  v107 += 24;
                  unint64_t v108 = (unint64_t)v110;
                }
                while (&v110[1].n128_i8[8] != (__int8 *)a2);
              }
            }
            else if (!v106)
            {
              do
              {
                v144 = v104;
                a5.n128_u64[0] = *(void *)(a1 + 32);
                if (a5.n128_f64[0] < *(double *)(a1 + 8))
                {
                  unint64_t v145 = v104->n128_u64[0];
                  uint64_t v146 = *(void *)(a1 + 40);
                  v147 = v144;
                  do
                  {
                    __n128 *v147 = *(__n128 *)((char *)v147 - 24);
                    v147[1].n128_u8[0] = v147[-1].n128_u8[8];
                    double v148 = v147[-3].n128_f64[1];
                    v147 = (__n128 *)((char *)v147 - 24);
                  }
                  while (a5.n128_f64[0] < v148);
                  v147->n128_u64[0] = v145;
                  v147->n128_u64[1] = a5.n128_u64[0];
                  v147[1].n128_u8[0] = v146;
                }
                v104 = (__n128 *)((char *)v144 + 24);
                a1 = (unint64_t)v144;
              }
              while (&v144[1].n128_i8[8] != (__int8 *)a2);
            }
            return a5.n128_f64[0];
          }
          if (!a3)
          {
            if ((__n128 *)v14 != a2)
            {
              int64_t v115 = (unint64_t)(v16 - 2) >> 1;
              int64_t v116 = v115;
              do
              {
                if (v115 >= v116)
                {
                  uint64_t v118 = (2 * v116) | 1;
                  unint64_t v119 = v14 + 24 * v118;
                  if (2 * v116 + 2 < v16 && *(double *)(v119 + 8) < *(double *)(v119 + 32))
                  {
                    v119 += 24;
                    uint64_t v118 = 2 * v116 + 2;
                  }
                  unint64_t v120 = v14 + 24 * v116;
                  double v121 = *(double *)(v120 + 8);
                  if (*(double *)(v119 + 8) >= v121)
                  {
                    uint64_t v122 = *(void *)v120;
                    char v123 = *(unsigned char *)(v120 + 16);
                    do
                    {
                      unint64_t v124 = v120;
                      unint64_t v120 = v119;
                      long long v125 = *(_OWORD *)v119;
                      *(unsigned char *)(v124 + 16) = *(unsigned char *)(v119 + 16);
                      *(_OWORD *)unint64_t v124 = v125;
                      if (v115 < v118) {
                        break;
                      }
                      uint64_t v126 = 2 * v118;
                      uint64_t v118 = (2 * v118) | 1;
                      unint64_t v119 = v14 + 24 * v118;
                      uint64_t v127 = v126 + 2;
                      if (v127 < v16 && *(double *)(v119 + 8) < *(double *)(v119 + 32))
                      {
                        v119 += 24;
                        uint64_t v118 = v127;
                      }
                    }
                    while (*(double *)(v119 + 8) >= v121);
                    *(void *)unint64_t v120 = v122;
                    *(double *)(v120 + 8) = v121;
                    *(unsigned char *)(v120 + 16) = v123;
                  }
                }
                BOOL v117 = v116-- <= 0;
              }
              while (!v117);
              int64_t v128 = v15 / 0x18uLL;
              do
              {
                uint64_t v129 = 0;
                uint64_t v195 = *(void *)(v14 + 16);
                __n128 v172 = *(__n128 *)v14;
                v130 = (__n128 *)v14;
                do
                {
                  v132 = v130;
                  v130 = (__n128 *)((char *)v130 + 24 * v129 + 24);
                  uint64_t v133 = 2 * v129;
                  uint64_t v129 = (2 * v129) | 1;
                  int64_t v134 = v133 + 2;
                  if (v134 < v128 && v130->n128_f64[1] < v130[2].n128_f64[0])
                  {
                    v130 = (__n128 *)((char *)v130 + 24);
                    uint64_t v129 = v134;
                  }
                  __n128 v131 = *v130;
                  v132[1].n128_u8[0] = v130[1].n128_u8[0];
                  __n128 *v132 = v131;
                }
                while (v129 <= (uint64_t)((unint64_t)(v128 - 2) >> 1));
                a2 = (__n128 *)((char *)a2 - 24);
                if (v130 == a2)
                {
                  a5.n128_u64[0] = v172.n128_u64[0];
                  v130[1].n128_u8[0] = v195;
                  __n128 *v130 = v172;
                }
                else
                {
                  a5 = *a2;
                  v130[1].n128_u8[0] = a2[1].n128_u8[0];
                  __n128 *v130 = a5;
                  a5.n128_u64[0] = v172.n128_u64[0];
                  a2[1].n128_u8[0] = v195;
                  *a2 = v172;
                  uint64_t v135 = (uint64_t)&v130[1].n128_i64[1] - v14;
                  if (v135 >= 25)
                  {
                    unint64_t v136 = (v135 / 0x18uLL - 2) >> 1;
                    unint64_t v137 = v14 + 24 * v136;
                    a5.n128_u64[0] = v130->n128_u64[1];
                    if (*(double *)(v137 + 8) < a5.n128_f64[0])
                    {
                      unint64_t v138 = v130->n128_u64[0];
                      unsigned __int8 v139 = v130[1].n128_u8[0];
                      do
                      {
                        v140 = v130;
                        v130 = (__n128 *)v137;
                        __n128 v141 = *(__n128 *)v137;
                        v140[1].n128_u8[0] = *(unsigned char *)(v137 + 16);
                        __n128 *v140 = v141;
                        if (!v136) {
                          break;
                        }
                        unint64_t v136 = (v136 - 1) >> 1;
                        unint64_t v137 = v14 + 24 * v136;
                      }
                      while (*(double *)(v137 + 8) < a5.n128_f64[0]);
                      v130->n128_u64[0] = v138;
                      v130->n128_u64[1] = a5.n128_u64[0];
                      v130[1].n128_u8[0] = v139;
                    }
                  }
                }
                BOOL v117 = v128-- <= 2;
              }
              while (!v117);
            }
            return a5.n128_f64[0];
          }
          unint64_t v17 = (unint64_t)v16 >> 1;
          uint64_t v18 = (__n128 *)(v14 + 24 * ((unint64_t)v16 >> 1));
          double v19 = a2[-1].n128_f64[0];
          if ((unint64_t)v15 >= 0xC01) {
            break;
          }
          double v22 = *(double *)(v14 + 8);
          if (v22 < v18->n128_f64[1])
          {
            if (v19 >= v22)
            {
              unint64_t v183 = v18[1].n128_u64[0];
              __n128 v160 = *v18;
              a5 = *(__n128 *)v14;
              v18[1].n128_u8[0] = *(unsigned char *)(v14 + 16);
              *uint64_t v18 = a5;
              a5.n128_u64[1] = v160.n128_u64[1];
              *(unsigned char *)(v14 + 16) = v183;
              *(__n128 *)unint64_t v14 = v160;
              if (a2[-1].n128_f64[0] >= *(double *)(v14 + 8)) {
                goto LABEL_32;
              }
              unint64_t v176 = *(void *)(v14 + 16);
              __n128 v153 = *(__n128 *)v14;
              __n128 v40 = *v11;
              *(unsigned char *)(v14 + 16) = a2[-1].n128_u8[8];
              *(__n128 *)unint64_t v14 = v40;
            }
            else
            {
              unint64_t v176 = v18[1].n128_u64[0];
              __n128 v153 = *v18;
              __n128 v23 = *v11;
              v18[1].n128_u8[0] = a2[-1].n128_u8[8];
              *uint64_t v18 = v23;
            }
            a5.n128_u64[1] = v153.n128_u64[1];
            a2[-1].n128_u8[8] = v176;
            __n128 *v11 = v153;
LABEL_32:
            --a3;
            if ((a4 & 1) == 0) {
              goto LABEL_56;
            }
            goto LABEL_33;
          }
          if (v19 >= v22) {
            goto LABEL_32;
          }
          uint64_t v179 = *(void *)(v14 + 16);
          __n128 v156 = *(__n128 *)v14;
          a5 = *v11;
          *(unsigned char *)(v14 + 16) = a2[-1].n128_u8[8];
          *(__n128 *)unint64_t v14 = a5;
          a5.n128_u64[1] = v156.n128_u64[1];
          a2[-1].n128_u8[8] = v179;
          __n128 *v11 = v156;
          if (*(double *)(v14 + 8) >= v18->n128_f64[1]) {
            goto LABEL_32;
          }
          unint64_t v180 = v18[1].n128_u64[0];
          __n128 v157 = *v18;
          a5 = *(__n128 *)v14;
          v18[1].n128_u8[0] = *(unsigned char *)(v14 + 16);
          *uint64_t v18 = a5;
          a5.n128_u64[1] = v157.n128_u64[1];
          *(unsigned char *)(v14 + 16) = v180;
          *(__n128 *)unint64_t v14 = v157;
          --a3;
          if (a4) {
            goto LABEL_33;
          }
LABEL_56:
          a5.n128_u64[0] = *(void *)(v14 + 8);
          if (*(double *)(v14 - 16) < a5.n128_f64[0]) {
            goto LABEL_57;
          }
          if (a5.n128_f64[0] < a2[-1].n128_f64[0])
          {
            unint64_t v81 = v14;
            do
            {
              unint64_t v14 = v81 + 24;
              double v82 = *(double *)(v81 + 32);
              v81 += 24;
            }
            while (a5.n128_f64[0] >= v82);
          }
          else
          {
            unint64_t v83 = v14 + 24;
            do
            {
              unint64_t v14 = v83;
              if (v83 >= (unint64_t)a2) {
                break;
              }
              double v84 = *(double *)(v83 + 8);
              v83 += 24;
            }
            while (a5.n128_f64[0] >= v84);
          }
          v85 = a2;
          if (v14 < (unint64_t)a2)
          {
            v86 = a2;
            do
            {
              v85 = (__n128 *)((char *)v86 - 24);
              double v87 = v86[-1].n128_f64[0];
              v86 = (__n128 *)((char *)v86 - 24);
            }
            while (a5.n128_f64[0] < v87);
          }
          uint64_t v88 = *(void *)a1;
          uint64_t v89 = *(void *)(a1 + 16);
          while (v14 < (unint64_t)v85)
          {
            uint64_t v192 = *(void *)(v14 + 16);
            __n128 v169 = *(__n128 *)v14;
            __n128 v90 = *v85;
            *(unsigned char *)(v14 + 16) = v85[1].n128_u8[0];
            *(__n128 *)unint64_t v14 = v90;
            v85[1].n128_u8[0] = v192;
            __n128 *v85 = v169;
            do
            {
              double v91 = *(double *)(v14 + 32);
              v14 += 24;
            }
            while (a5.n128_f64[0] >= v91);
            do
            {
              double v92 = v85[-1].n128_f64[0];
              v85 = (__n128 *)((char *)v85 - 24);
            }
            while (a5.n128_f64[0] < v92);
          }
          BOOL v5 = v14 - 24 >= a1;
          BOOL v6 = v14 - 24 == a1;
          if (v14 - 24 != a1)
          {
            long long v93 = *(_OWORD *)(v14 - 24);
            *(unsigned char *)(a1 + 16) = *(unsigned char *)(v14 - 8);
            *(_OWORD *)a1 = v93;
          }
          a4 = 0;
          *(void *)(v14 - 24) = v88;
          *(void *)(v14 - 16) = a5.n128_u64[0];
          *(unsigned char *)(v14 - 8) = v89;
        }
        double v20 = v18->n128_f64[1];
        if (v20 >= *(double *)(v14 + 8))
        {
          if (v19 < v20)
          {
            unint64_t v177 = v18[1].n128_u64[0];
            __n128 v154 = *v18;
            __n128 v24 = *v11;
            v18[1].n128_u8[0] = a2[-1].n128_u8[8];
            *uint64_t v18 = v24;
            a2[-1].n128_u8[8] = v177;
            __n128 *v11 = v154;
            if (v18->n128_f64[1] < *(double *)(v14 + 8))
            {
              uint64_t v178 = *(void *)(v14 + 16);
              __n128 v155 = *(__n128 *)v14;
              __n128 v25 = *v18;
              *(unsigned char *)(v14 + 16) = v18[1].n128_u8[0];
              *(__n128 *)unint64_t v14 = v25;
              v18[1].n128_u8[0] = v178;
              *uint64_t v18 = v155;
            }
          }
        }
        else
        {
          if (v19 >= v20)
          {
            uint64_t v181 = *(void *)(v14 + 16);
            __n128 v158 = *(__n128 *)v14;
            __n128 v26 = *v18;
            *(unsigned char *)(v14 + 16) = v18[1].n128_u8[0];
            *(__n128 *)unint64_t v14 = v26;
            v18[1].n128_u8[0] = v181;
            *uint64_t v18 = v158;
            if (a2[-1].n128_f64[0] >= v18->n128_f64[1]) {
              goto LABEL_23;
            }
            unint64_t v175 = v18[1].n128_u64[0];
            __n128 v152 = *v18;
            __n128 v27 = *v11;
            v18[1].n128_u8[0] = a2[-1].n128_u8[8];
            *uint64_t v18 = v27;
          }
          else
          {
            unint64_t v175 = *(void *)(v14 + 16);
            __n128 v152 = *(__n128 *)v14;
            __n128 v21 = *v11;
            *(unsigned char *)(v14 + 16) = a2[-1].n128_u8[8];
            *(__n128 *)unint64_t v14 = v21;
          }
          a2[-1].n128_u8[8] = v175;
          __n128 *v11 = v152;
        }
LABEL_23:
        v28 = (__n128 *)(v14 + 24);
        unint64_t v29 = v14 + 24 * v17;
        v30 = (__n128 *)(v29 - 24);
        double v31 = *(double *)(v29 - 16);
        double v32 = a2[-3].n128_f64[1];
        if (v31 >= *(double *)(v14 + 32))
        {
          if (v32 < v31)
          {
            uint64_t v182 = *(void *)(v29 - 8);
            __n128 v159 = *v30;
            __n128 v36 = *v12;
            *(unsigned char *)(v29 - 8) = a2[-2].n128_u8[0];
            __n128 *v30 = v36;
            a2[-2].n128_u8[0] = v182;
            __n128 *v12 = v159;
            if (*(double *)(v29 - 16) < *(double *)(v14 + 32))
            {
              __n128 v37 = *v28;
              uint64_t v38 = *(void *)(v14 + 40);
              __int8 v39 = v30[1].n128_i8[0];
              __n128 *v28 = *v30;
              *(unsigned char *)(v14 + 40) = v39;
              v30[1].n128_u8[0] = v38;
              __n128 *v30 = v37;
            }
          }
        }
        else
        {
          if (v32 >= v31)
          {
            __n128 v41 = *v28;
            uint64_t v42 = *(void *)(v14 + 40);
            __int8 v43 = v30[1].n128_i8[0];
            __n128 *v28 = *v30;
            *(unsigned char *)(v14 + 40) = v43;
            v30[1].n128_u8[0] = v42;
            __n128 *v30 = v41;
            if (a2[-3].n128_f64[1] >= v30->n128_f64[1]) {
              goto LABEL_37;
            }
            uint64_t v184 = v30[1].n128_i64[0];
            __n128 v161 = *v30;
            __n128 v44 = *v12;
            v30[1].n128_u8[0] = a2[-2].n128_u8[0];
            __n128 *v30 = v44;
            __n128 v33 = v161;
            a2[-2].n128_u8[0] = v184;
          }
          else
          {
            __n128 v33 = *v28;
            uint64_t v34 = *(void *)(v14 + 40);
            unsigned __int8 v35 = a2[-2].n128_u8[0];
            __n128 *v28 = *v12;
            *(unsigned char *)(v14 + 40) = v35;
            a2[-2].n128_u8[0] = v34;
          }
          __n128 *v12 = v33;
        }
LABEL_37:
        v45 = (__n128 *)(v14 + 48);
        unint64_t v46 = v14 + 24 * v17;
        v47 = (__n128 *)(v46 + 24);
        double v48 = *(double *)(v46 + 32);
        double v49 = a2[-4].n128_f64[0];
        if (v48 >= *(double *)(v14 + 56))
        {
          if (v49 < v48)
          {
            uint64_t v185 = *(void *)(v46 + 40);
            __n128 v162 = *v47;
            __n128 v53 = *(__n128 *)v13;
            *(unsigned char *)(v46 + 40) = a2[-4].n128_u8[8];
            __n128 *v47 = v53;
            a2[-4].n128_u8[8] = v185;
            *(__n128 *)v13 = v162;
            if (*(double *)(v46 + 32) < *(double *)(v14 + 56))
            {
              __n128 v54 = *v45;
              uint64_t v55 = *(void *)(v14 + 64);
              __int8 v56 = v47[1].n128_i8[0];
              __n128 *v45 = *v47;
              *(unsigned char *)(v14 + 64) = v56;
              v47[1].n128_u8[0] = v55;
              __n128 *v47 = v54;
            }
          }
        }
        else
        {
          if (v49 >= v48)
          {
            __n128 v57 = *v45;
            uint64_t v58 = *(void *)(v14 + 64);
            __int8 v59 = v47[1].n128_i8[0];
            __n128 *v45 = *v47;
            *(unsigned char *)(v14 + 64) = v59;
            v47[1].n128_u8[0] = v58;
            __n128 *v47 = v57;
            if (a2[-4].n128_f64[0] >= v47->n128_f64[1]) {
              goto LABEL_46;
            }
            uint64_t v186 = v47[1].n128_i64[0];
            __n128 v163 = *v47;
            __n128 v60 = *(__n128 *)v13;
            v47[1].n128_u8[0] = a2[-4].n128_u8[8];
            __n128 *v47 = v60;
            __n128 v50 = v163;
            a2[-4].n128_u8[8] = v186;
          }
          else
          {
            __n128 v50 = *v45;
            uint64_t v51 = *(void *)(v14 + 64);
            unsigned __int8 v52 = a2[-4].n128_u8[8];
            __n128 *v45 = *(__n128 *)v13;
            *(unsigned char *)(v14 + 64) = v52;
            a2[-4].n128_u8[8] = v51;
          }
          *(__n128 *)v13 = v50;
        }
LABEL_46:
        double v61 = v18->n128_f64[1];
        double v62 = v47->n128_f64[1];
        if (v61 >= v30->n128_f64[1])
        {
          if (v62 < v61)
          {
            unint64_t v188 = v18[1].n128_u64[0];
            __n128 v165 = *v18;
            *uint64_t v18 = *v47;
            v18[1].n128_u8[0] = v47[1].n128_u8[0];
            v47[1].n128_u8[0] = v188;
            __n128 *v47 = v165;
            if (v18->n128_f64[1] < v30->n128_f64[1])
            {
              uint64_t v189 = v30[1].n128_i64[0];
              __n128 v166 = *v30;
              __n128 *v30 = *v18;
              v30[1].n128_u8[0] = v18[1].n128_u8[0];
              v18[1].n128_u8[0] = v189;
              *uint64_t v18 = v166;
            }
          }
        }
        else
        {
          if (v62 >= v61)
          {
            uint64_t v190 = v30[1].n128_i64[0];
            __n128 v167 = *v30;
            __n128 *v30 = *v18;
            v30[1].n128_u8[0] = v18[1].n128_u8[0];
            v18[1].n128_u8[0] = v190;
            *uint64_t v18 = v167;
            if (v47->n128_f64[1] >= v18->n128_f64[1]) {
              goto LABEL_55;
            }
            unint64_t v187 = v18[1].n128_u64[0];
            __n128 v164 = *v18;
            *uint64_t v18 = *v47;
            v18[1].n128_u8[0] = v47[1].n128_u8[0];
          }
          else
          {
            unint64_t v187 = v30[1].n128_u64[0];
            __n128 v164 = *v30;
            __n128 *v30 = *v47;
            v30[1].n128_u8[0] = v47[1].n128_u8[0];
          }
          v47[1].n128_u8[0] = v187;
          __n128 *v47 = v164;
        }
LABEL_55:
        uint64_t v191 = *(void *)(v14 + 16);
        __n128 v168 = *(__n128 *)v14;
        a5 = *v18;
        *(unsigned char *)(v14 + 16) = v18[1].n128_u8[0];
        *(__n128 *)unint64_t v14 = a5;
        a5.n128_u64[1] = v168.n128_u64[1];
        v18[1].n128_u8[0] = v191;
        *uint64_t v18 = v168;
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_56;
        }
LABEL_33:
        a5.n128_u64[0] = *(void *)(v14 + 8);
LABEL_57:
        uint64_t v63 = *(void *)v14;
        uint64_t v64 = *(void *)(v14 + 16);
        unint64_t v65 = v14;
        do
        {
          unint64_t v66 = v65;
          v65 += 24;
        }
        while (*(double *)(v66 + 32) < a5.n128_f64[0]);
        v67 = a2;
        if (v66 == v14)
        {
          v70 = a2;
          while (v65 < (unint64_t)v70)
          {
            v68 = (__n128 *)((char *)v70 - 24);
            double v71 = v70[-1].n128_f64[0];
            v70 = (__n128 *)((char *)v70 - 24);
            if (v71 < a5.n128_f64[0]) {
              goto LABEL_66;
            }
          }
          v68 = v70;
        }
        else
        {
          do
          {
            v68 = (__n128 *)((char *)v67 - 24);
            double v69 = v67[-1].n128_f64[0];
            v67 = (__n128 *)((char *)v67 - 24);
          }
          while (v69 >= a5.n128_f64[0]);
        }
LABEL_66:
        unint64_t v14 = v65;
        if (v65 < (unint64_t)v68)
        {
          unint64_t v72 = (unint64_t)v68;
          do
          {
            __n128 v73 = *(__n128 *)v14;
            uint64_t v74 = *(void *)(v14 + 16);
            char v75 = *(unsigned char *)(v72 + 16);
            *(_OWORD *)unint64_t v14 = *(_OWORD *)v72;
            *(unsigned char *)(v14 + 16) = v75;
            *(unsigned char *)(v72 + 16) = v74;
            *(__n128 *)unint64_t v72 = v73;
            do
            {
              double v76 = *(double *)(v14 + 32);
              v14 += 24;
            }
            while (v76 < a5.n128_f64[0]);
            do
            {
              double v77 = *(double *)(v72 - 16);
              v72 -= 24;
            }
            while (v77 >= a5.n128_f64[0]);
          }
          while (v14 < v72);
        }
        if (v14 - 24 != a1)
        {
          long long v78 = *(_OWORD *)(v14 - 24);
          *(unsigned char *)(a1 + 16) = *(unsigned char *)(v14 - 8);
          *(_OWORD *)a1 = v78;
        }
        *(void *)(v14 - 24) = v63;
        *(void *)(v14 - 16) = a5.n128_u64[0];
        *(unsigned char *)(v14 - 8) = v64;
        if (v65 >= (unint64_t)v68) {
          break;
        }
LABEL_77:
        std::__introsort<std::_ClassicAlgPolicy,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::$_0 &,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::RoadEdgeInfo *,false>(a1, v14 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v79 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::$_0 &,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::RoadEdgeInfo *>(a1, v14 - 24, a5);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::$_0 &,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::RoadEdgeInfo *>(v14, (uint64_t)a2, v80))
      {
        break;
      }
      if (!v79) {
        goto LABEL_77;
      }
    }
    a2 = (__n128 *)(v14 - 24);
    if (!v79) {
      continue;
    }
    return a5.n128_f64[0];
  }
}

uint64_t std::__shared_ptr_pointer<md::MuninJunctionCrossStreet *,std::shared_ptr<md::MuninJunctionElement>::__shared_ptr_default_delete<md::MuninJunctionElement,md::MuninJunctionCrossStreet>,std::allocator<md::MuninJunctionCrossStreet>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<md::MuninJunctionCrossStreet *,std::shared_ptr<md::MuninJunctionElement>::__shared_ptr_default_delete<md::MuninJunctionElement,md::MuninJunctionCrossStreet>,std::allocator<md::MuninJunctionCrossStreet>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::$_0 &,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::RoadEdgeInfo *>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 result)
{
  double v5 = a2->n128_f64[1];
  double v6 = a3->n128_f64[1];
  if (v5 >= a1->n128_f64[1])
  {
    if (v6 < v5)
    {
      uint64_t result = *a2;
      unint64_t v9 = a2[1].n128_u64[0];
      unsigned __int8 v10 = a3[1].n128_u8[0];
      *a2 = *a3;
      a2[1].n128_u8[0] = v10;
      a3[1].n128_u8[0] = v9;
      *a3 = result;
      if (a2->n128_f64[1] < a1->n128_f64[1])
      {
        uint64_t result = *a1;
        unint64_t v11 = a1[1].n128_u64[0];
        unsigned __int8 v12 = a2[1].n128_u8[0];
        *a1 = *a2;
        a1[1].n128_u8[0] = v12;
        a2[1].n128_u8[0] = v11;
        *a2 = result;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      uint64_t result = *a1;
      unint64_t v7 = a1[1].n128_u64[0];
      unsigned __int8 v8 = a3[1].n128_u8[0];
      *a1 = *a3;
      a1[1].n128_u8[0] = v8;
LABEL_9:
      a3[1].n128_u8[0] = v7;
      *a3 = result;
      goto LABEL_10;
    }
    uint64_t result = *a1;
    unint64_t v13 = a1[1].n128_u64[0];
    unsigned __int8 v14 = a2[1].n128_u8[0];
    *a1 = *a2;
    a1[1].n128_u8[0] = v14;
    a2[1].n128_u8[0] = v13;
    *a2 = result;
    if (a3->n128_f64[1] < a2->n128_f64[1])
    {
      uint64_t result = *a2;
      unint64_t v7 = a2[1].n128_u64[0];
      unsigned __int8 v15 = a3[1].n128_u8[0];
      *a2 = *a3;
      a2[1].n128_u8[0] = v15;
      goto LABEL_9;
    }
  }
LABEL_10:
  result.n128_u64[0] = a4->n128_u64[1];
  if (result.n128_f64[0] < a3->n128_f64[1])
  {
    uint64_t result = *a3;
    unint64_t v16 = a3[1].n128_u64[0];
    unsigned __int8 v17 = a4[1].n128_u8[0];
    *a3 = *a4;
    a3[1].n128_u8[0] = v17;
    a4[1].n128_u8[0] = v16;
    *a4 = result;
    result.n128_u64[0] = a3->n128_u64[1];
    if (result.n128_f64[0] < a2->n128_f64[1])
    {
      uint64_t result = *a2;
      unint64_t v18 = a2[1].n128_u64[0];
      unsigned __int8 v19 = a3[1].n128_u8[0];
      *a2 = *a3;
      a2[1].n128_u8[0] = v19;
      a3[1].n128_u8[0] = v18;
      *a3 = result;
      result.n128_u64[0] = a2->n128_u64[1];
      if (result.n128_f64[0] < a1->n128_f64[1])
      {
        uint64_t result = *a1;
        unint64_t v20 = a1[1].n128_u64[0];
        unsigned __int8 v21 = a2[1].n128_u8[0];
        *a1 = *a2;
        a1[1].n128_u8[0] = v21;
        a2[1].n128_u8[0] = v20;
        *a2 = result;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::$_0 &,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::RoadEdgeInfo *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 16) < *(double *)(a1 + 8))
      {
        __n128 v7 = *(__n128 *)a1;
        uint64_t v8 = *(void *)(a1 + 16);
        char v9 = *(unsigned char *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(unsigned char *)(a1 + 16) = v9;
        *(unsigned char *)(a2 - 8) = v8;
        *(__n128 *)(a2 - 24) = v7;
      }
      return result;
    case 3uLL:
      unsigned __int8 v10 = (__n128 *)(a1 + 24);
      unint64_t v11 = (__n128 *)(a2 - 24);
      double v12 = *(double *)(a1 + 32);
      double v13 = *(double *)(a2 - 16);
      if (v12 >= *(double *)(a1 + 8))
      {
        if (v13 < v12)
        {
          __n128 v36 = *v10;
          uint64_t v37 = *(void *)(a1 + 40);
          char v38 = *(unsigned char *)(a2 - 8);
          *unsigned __int8 v10 = *v11;
          *(unsigned char *)(a1 + 40) = v38;
          *(unsigned char *)(a2 - 8) = v37;
          __n128 *v11 = v36;
          if (*(double *)(a1 + 32) < *(double *)(a1 + 8))
          {
            uint64_t v39 = *(void *)(a1 + 16);
            __n128 v40 = *(__n128 *)a1;
            *(__n128 *)a1 = *v10;
            *(unsigned char *)(a1 + 16) = *(unsigned char *)(a1 + 40);
            *unsigned __int8 v10 = v40;
            *(unsigned char *)(a1 + 40) = v39;
          }
        }
      }
      else if (v13 >= v12)
      {
        uint64_t v45 = *(void *)(a1 + 16);
        __n128 v46 = *(__n128 *)a1;
        *(__n128 *)a1 = *v10;
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a1 + 40);
        *unsigned __int8 v10 = v46;
        *(unsigned char *)(a1 + 40) = v45;
        if (*(double *)(a2 - 16) < *(double *)(a1 + 32))
        {
          __n128 v47 = *v10;
          uint64_t v48 = *(void *)(a1 + 40);
          char v49 = *(unsigned char *)(a2 - 8);
          *unsigned __int8 v10 = *v11;
          *(unsigned char *)(a1 + 40) = v49;
          *(unsigned char *)(a2 - 8) = v48;
          __n128 *v11 = v47;
        }
      }
      else
      {
        __n128 v14 = *(__n128 *)a1;
        uint64_t v15 = *(void *)(a1 + 16);
        char v16 = *(unsigned char *)(a2 - 8);
        *(__n128 *)a1 = *v11;
        *(unsigned char *)(a1 + 16) = v16;
        *(unsigned char *)(a2 - 8) = v15;
        __n128 *v11 = v14;
      }
      return result;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::$_0 &,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::RoadEdgeInfo *>((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      __n128 v24 = (__n128 *)(a1 + 24);
      __n128 v25 = (__n128 *)(a1 + 48);
      __n128 v26 = (__n128 *)(a1 + 72);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::$_0 &,md::MuninJunctionFeature::setupCrossStreetLabeling(md::MuninRoadLabelingContext const&)::RoadEdgeInfo *>((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a1 + 72), a3);
      if (*(double *)(a2 - 16) < *(double *)(a1 + 80))
      {
        __n128 v27 = *v26;
        uint64_t v28 = *(void *)(a1 + 88);
        char v29 = *(unsigned char *)(a2 - 8);
        *__n128 v26 = *(__n128 *)(a2 - 24);
        *(unsigned char *)(a1 + 88) = v29;
        *(unsigned char *)(a2 - 8) = v28;
        *(__n128 *)(a2 - 24) = v27;
        if (*(double *)(a1 + 80) < *(double *)(a1 + 56))
        {
          uint64_t v30 = *(void *)(a1 + 64);
          __n128 v31 = *v25;
          *__n128 v25 = *v26;
          *(unsigned char *)(a1 + 64) = *(unsigned char *)(a1 + 88);
          *__n128 v26 = v31;
          *(unsigned char *)(a1 + 88) = v30;
          if (*(double *)(a1 + 56) < *(double *)(a1 + 32))
          {
            uint64_t v32 = *(void *)(a1 + 40);
            __n128 v33 = *v24;
            *__n128 v24 = *v25;
            *(unsigned char *)(a1 + 40) = *(unsigned char *)(a1 + 64);
            *__n128 v25 = v33;
            *(unsigned char *)(a1 + 64) = v32;
            if (*(double *)(a1 + 32) < *(double *)(a1 + 8))
            {
              uint64_t v34 = *(void *)(a1 + 16);
              __n128 v35 = *(__n128 *)a1;
              *(__n128 *)a1 = *v24;
              *(unsigned char *)(a1 + 16) = *(unsigned char *)(a1 + 40);
              *__n128 v24 = v35;
              *(unsigned char *)(a1 + 40) = v34;
            }
          }
        }
      }
      return 1;
    default:
      unsigned __int8 v17 = (__n128 *)(a1 + 48);
      unint64_t v18 = (__n128 *)(a1 + 24);
      double v19 = *(double *)(a1 + 32);
      double v20 = *(double *)(a1 + 8);
      double v21 = *(double *)(a1 + 56);
      if (v19 >= v20)
      {
        if (v21 < v19)
        {
          uint64_t v41 = *(void *)(a1 + 40);
          __n128 v42 = *v18;
          *unint64_t v18 = *v17;
          *(unsigned char *)(a1 + 40) = *(unsigned char *)(a1 + 64);
          __n128 *v17 = v42;
          *(unsigned char *)(a1 + 64) = v41;
          if (*(double *)(a1 + 32) < v20)
          {
            uint64_t v43 = *(void *)(a1 + 16);
            __n128 v44 = *(__n128 *)a1;
            *(__n128 *)a1 = *v18;
            *(unsigned char *)(a1 + 16) = *(unsigned char *)(a1 + 40);
            *unint64_t v18 = v44;
            *(unsigned char *)(a1 + 40) = v43;
          }
        }
      }
      else if (v21 >= v19)
      {
        uint64_t v50 = *(void *)(a1 + 16);
        __n128 v51 = *(__n128 *)a1;
        *(__n128 *)a1 = *v18;
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a1 + 40);
        *unint64_t v18 = v51;
        *(unsigned char *)(a1 + 40) = v50;
        if (v21 < *(double *)(a1 + 32))
        {
          uint64_t v52 = *(void *)(a1 + 40);
          __n128 v53 = *v18;
          *unint64_t v18 = *v17;
          *(unsigned char *)(a1 + 40) = *(unsigned char *)(a1 + 64);
          __n128 *v17 = v53;
          *(unsigned char *)(a1 + 64) = v52;
        }
      }
      else
      {
        uint64_t v22 = *(void *)(a1 + 16);
        __n128 v23 = *(__n128 *)a1;
        *(__n128 *)a1 = *v17;
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a1 + 64);
        __n128 *v17 = v23;
        *(unsigned char *)(a1 + 64) = v22;
      }
      uint64_t v54 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v55 = 0;
      int v56 = 0;
      break;
  }
  while (1)
  {
    double v58 = *(double *)(v54 + 8);
    if (v58 < v17->n128_f64[1])
    {
      uint64_t v59 = *(void *)v54;
      char v60 = *(unsigned char *)(v54 + 16);
      uint64_t v61 = v55;
      do
      {
        uint64_t v62 = a1 + v61;
        *(_OWORD *)(v62 + 72) = *(_OWORD *)(a1 + v61 + 48);
        *(unsigned char *)(v62 + 88) = *(unsigned char *)(a1 + v61 + 64);
        if (v61 == -48)
        {
          uint64_t v57 = a1;
          goto LABEL_29;
        }
        v61 -= 24;
      }
      while (v58 < *(double *)(v62 + 32));
      uint64_t v57 = a1 + v61 + 72;
LABEL_29:
      *(void *)uint64_t v57 = v59;
      *(double *)(v57 + 8) = v58;
      *(unsigned char *)(v57 + 16) = v60;
      if (++v56 == 8) {
        return v54 + 24 == a2;
      }
    }
    unsigned __int8 v17 = (__n128 *)v54;
    v55 += 24;
    v54 += 24;
    if (v54 == a2) {
      return 1;
    }
  }
}

uint64_t std::__shared_ptr_pointer<md::MuninJunctionIntersection *,std::shared_ptr<md::MuninJunctionElement>::__shared_ptr_default_delete<md::MuninJunctionElement,md::MuninJunctionIntersection>,std::allocator<md::MuninJunctionIntersection>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<md::MuninJunctionIntersection *,std::shared_ptr<md::MuninJunctionElement>::__shared_ptr_default_delete<md::MuninJunctionElement,md::MuninJunctionIntersection>,std::allocator<md::MuninJunctionIntersection>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void md::MuninJunctionFeature::clearLabels(md::MuninJunctionFeature *this, md::MuninJunctionFeature *a2)
{
  if (this != a2)
  {
    for (i = this; i != a2; i = (md::MuninJunctionFeature *)((char *)i + 16))
    {
      uint64_t v5 = *(void *)i;
      *(unsigned char *)(v5 + 40) = 0;
      uint64_t v4 = *(void *)(v5 + 16);
      uint64_t v6 = *(void *)(v5 + 24);
      if (v4 == v6) {
        goto LABEL_4;
      }
      do
      {
        __n128 v7 = *(unsigned char **)v4;
        if (atomic_fetch_add((atomic_uchar *volatile)(*(void *)v4 + 306), 0xFFu) != 1) {
          goto LABEL_7;
        }
        int v8 = byte_1A29C6350[(char)v7[493] + 3];
        if (v8 != 255)
        {
          v7[493] = v8;
          v7[494] = 37;
          if (v8 == 2) {
            goto LABEL_12;
          }
LABEL_11:
          v7[299] = 0;
          goto LABEL_12;
        }
        if (v7[493] != 2) {
          goto LABEL_11;
        }
LABEL_12:
        unsigned __int8 v9 = atomic_load(v7 + 353);
        if ((v9 & 1) == 0) {
          v7[356] = 2 * (v7[493] == 2);
        }
LABEL_7:
        v4 += 16;
      }
      while (v4 != v6);
      uint64_t v10 = *(void *)(v5 + 16);
      uint64_t v4 = *(void *)(v5 + 24);
      if (v4 != v10)
      {
        do
        {
          unint64_t v11 = *(std::__shared_weak_count **)(v4 - 8);
          if (v11)
          {
            if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v4 -= 16;
        }
        while (v4 != v10);
        uint64_t v4 = v10;
      }
LABEL_4:
      *(void *)(v5 + 24) = v4;
    }
  }
}

void md::mun::MuninNavigation::path(void *a1, uint64_t a2, char *a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v175 = *MEMORY[0x1E4F143B8];
  char v168 = a5;
  v166[0] = 0;
  v166[1] = 0;
  unint64_t v167 = 0;
  __p = 0;
  __n128 v164 = 0;
  uint64_t v165 = 0;
  char v162 = 0;
  double v13 = operator new(0x40uLL);
  void *v13 = &unk_1EF57DE60;
  v13[1] = &v162;
  v13[2] = a3;
  v13[3] = a4;
  v13[4] = &__p;
  v13[5] = &v168;
  v13[6] = a6;
  v13[7] = a7;
  __n128 v174 = v13;
  md::mun::MuninMetadataContainer::navigationGraphAccessor(a2, (uint64_t)v173);
  (*(void (**)(void *))(*v13 + 40))(v13);
  if (!v162)
  {
    *(_OWORD *)a1 = *(_OWORD *)v166;
    a1[2] = v167;
    v166[1] = 0;
    unint64_t v167 = 0;
    v166[0] = 0;
    goto LABEL_246;
  }
  __n128 v159 = a1;
  std::vector<md::mun::CollectionPoint>::reserve((char **)v166, ((char *)v164 - (unsigned char *)__p) >> 3);
  __n128 v14 = (uint64_t *)__p;
  uint64_t v15 = v164;
  if (__p != v164)
  {
    char v16 = (char *)v166[1];
    do
    {
      uint64_t v17 = *v14;
      if ((unint64_t)v16 >= v167)
      {
        char v16 = std::vector<md::mun::CollectionPoint>::__push_back_slow_path<md::mun::CollectionPoint const&>((uint64_t *)v166, *v14);
      }
      else
      {
        *(void *)char v16 = *(void *)v17;
        long long v18 = *(_OWORD *)(v17 + 8);
        *((void *)v16 + 3) = *(void *)(v17 + 24);
        *(_OWORD *)(v16 + 8) = v18;
        uint64_t v19 = *(void *)(v17 + 32);
        *((_DWORD *)v16 + 10) = *(_DWORD *)(v17 + 40);
        *((void *)v16 + 4) = v19;
        *(void *)(v16 + 44) = *(void *)(v17 + 44);
        long long v20 = *(_OWORD *)(v17 + 56);
        long long v21 = *(_OWORD *)(v17 + 72);
        uint64_t v22 = v16 + 120;
        *((void *)v16 + 11) = v16 + 120;
        __n128 v23 = v16 + 88;
        *((_OWORD *)v23 - 2) = v20;
        *((_OWORD *)v23 - 1) = v21;
        v23[1] = v22;
        v23[2] = v22;
        v23[3] = 6;
        geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>((uint64_t)v23, *(long long **)(v17 + 88), *(long long **)(v17 + 96));
        uint64_t v24 = *(void *)(v17 + 1848);
        *(void *)((char *)v23 + 1765) = *(void *)(v17 + 1853);
        v23[220] = v24;
        char v16 = (char *)(v23 + 222);
      }
      v166[1] = v16;
      ++v14;
    }
    while (v14 != v15);
  }
  __n128 v25 = (char *)v166[0];
  if (*(void *)v166[0] == *(void *)a3)
  {
    *((_DWORD *)v166[0] + 8) = *((_DWORD *)a3 + 8);
    *((_DWORD *)v25 + 9) = *((_DWORD *)a3 + 9);
    *((_DWORD *)v25 + 10) = *((_DWORD *)a3 + 10);
    *((_DWORD *)v25 + 11) = *((_DWORD *)a3 + 11);
    *((void *)v25 + 1) = *((void *)a3 + 1);
    *((void *)v25 + 2) = *((void *)a3 + 2);
    *((void *)v25 + 3) = *((void *)a3 + 3);
    *((_DWORD *)v25 + 12) = *((_DWORD *)a3 + 12);
    *((void *)v25 + 7) = *((void *)a3 + 7);
    *((void *)v25 + 8) = *((void *)a3 + 8);
    *((void *)v25 + 9) = *((void *)a3 + 9);
    *((void *)v25 + 10) = *((void *)a3 + 10);
    if (v25 != a3)
    {
      __n128 v26 = v25 + 120;
      __n128 v27 = (void *)*((void *)v25 + 11);
      uint64_t v28 = (void *)*((void *)v25 + 12);
      if (v27 != v28)
      {
        do
        {
          char v29 = (void *)v27[31];
          if (v29 != (void *)v27[33]) {
            free(v29);
          }
          v27 += 36;
        }
        while (v27 != v28);
        __n128 v27 = (void *)*((void *)v25 + 11);
      }
      if (v27 != *((void **)v25 + 13)) {
        free(v27);
      }
      *((void *)v25 + 11) = v26;
      *((void *)v25 + 12) = v26;
      *((void *)v25 + 13) = v26;
      *((void *)v25 + 14) = 6;
      geo::small_vector_base<md::mun::PhotoInfo>::append<md::mun::PhotoInfo const*>((uint64_t)(v25 + 88), *((long long **)a3 + 11), *((long long **)a3 + 12));
    }
    uint64_t v30 = *((void *)a3 + 231);
    *(void *)(v25 + 1853) = *(void *)(a3 + 1853);
    *((void *)v25 + 231) = v30;
    __n128 v25 = (char *)v166[0];
  }
  unint64_t v31 = 0x63FB9AEB1FDCD759 * (((char *)v166[1] - (char *)v25) >> 3);
  if (v166[1] == v25)
  {
    __n128 v33 = 0;
  }
  else
  {
    if ((char *)v166[1] - (char *)v25 < 0) {
LABEL_266:
    }
      abort();
    uint64_t v32 = operator new(8 * ((v31 - 1) >> 6) + 8);
    __n128 v33 = v32;
    if (v31 >= 0x41) {
      unint64_t v34 = (v31 - 1) >> 6;
    }
    else {
      unint64_t v34 = 0;
    }
    v32[v34] = 0;
    if (v31 >= 0x40) {
      bzero(v32, 8 * (v31 >> 6));
    }
    if ((v31 & 0x3F) != 0) {
      v33[v31 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v31 & 0x3F));
    }
  }
  if (v31 - 3 > 0xFFFFFFFFFFFFFFFDLL)
  {
    __n128 v36 = 0;
LABEL_188:
    uint64_t v125 = 0;
    goto LABEL_190;
  }
  unint64_t v161 = v31;
  __n128 v35 = 0;
  __n128 v36 = 0;
  uint64_t v37 = 0;
  unint64_t v38 = 1;
  do
  {
    uint64_t v39 = (double *)&v25[1864 * v38];
    double v40 = v39[1];
    double v41 = v39[2];
    double v42 = v40 - *(v39 - 232);
    double v43 = v41 - *(v39 - 231);
    double v44 = v39[3];
    double v45 = v44 - *(v39 - 230);
    double v46 = v39[234] - v40;
    double v47 = acos(fmax(fmin((v46 * v42 + (v39[235] - v41) * v43 + (v39[236] - v44) * v45)/ sqrt((v46 * v46 + (v39[235] - v41) * (v39[235] - v41) + (v39[236] - v44) * (v39[236] - v44))* (v42 * v42 + v43 * v43 + v45 * v45)), 1.0), -1.0));
    double v48 = v47;
    if (v35 >= (double *)v37)
    {
      uint64_t v49 = ((char *)v35 - (char *)v36) >> 4;
      unint64_t v50 = v49 + 1;
      if ((unint64_t)(v49 + 1) >> 60) {
        goto LABEL_266;
      }
      if ((v37 - (char *)v36) >> 3 > v50) {
        unint64_t v50 = (v37 - (char *)v36) >> 3;
      }
      if ((unint64_t)(v37 - (char *)v36) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v50 = 0xFFFFFFFFFFFFFFFLL;
      }
      if (v50 >> 60) {
LABEL_267:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      uint64_t v51 = 16 * v50;
      uint64_t v52 = (char *)operator new(16 * v50);
      __n128 v53 = &v52[16 * v49];
      *(double *)__n128 v53 = v48;
      *((void *)v53 + 1) = v38;
      if (v35 == v36)
      {
        uint64_t v55 = (double *)&v52[16 * v49];
      }
      else
      {
        uint64_t v54 = &v52[16 * v49];
        do
        {
          uint64_t v55 = (double *)(v54 - 16);
          *((_OWORD *)v54 - 1) = *((_OWORD *)v35 - 1);
          v35 -= 2;
          v54 -= 16;
        }
        while (v35 != v36);
      }
      uint64_t v37 = &v52[v51];
      __n128 v35 = (double *)(v53 + 16);
      if (v36) {
        operator delete(v36);
      }
      __n128 v36 = v55;
    }
    else
    {
      *__n128 v35 = v47;
      *((void *)v35 + 1) = v38;
      v35 += 2;
    }
    if ((char *)v35 - (char *)v36 >= 17)
    {
      unint64_t v56 = (((unint64_t)((char *)v35 - (char *)v36) >> 4) - 2) >> 1;
      uint64_t v57 = v35 - 2;
      double v58 = *(v35 - 2);
      uint64_t v59 = &v36[2 * v56];
      double v60 = *v59;
      if (*v59 == v58) {
        int v61 = 0;
      }
      else {
        int v61 = -127;
      }
      if (*v59 > v58) {
        int v61 = 1;
      }
      if (*v59 < v58) {
        int v61 = -1;
      }
      if (!v61)
      {
        unint64_t v62 = *((void *)v59 + 1);
        unint64_t v63 = *((void *)v35 - 1);
        BOOL v64 = v62 == v63;
        LOBYTE(v61) = v62 < v63 ? -1 : 1;
        if (v64) {
          LOBYTE(v61) = 0;
        }
      }
      if (v61 != 129 && (v61 & 0x80) != 0)
      {
        unint64_t v65 = *((void *)v35 - 1);
        do
        {
          unint64_t v66 = v57;
          uint64_t v57 = v59;
          *unint64_t v66 = v60;
          v66[1] = v59[1];
          if (!v56) {
            break;
          }
          unint64_t v56 = (v56 - 1) >> 1;
          uint64_t v59 = &v36[2 * v56];
          double v60 = *v59;
          if (*v59 == v58) {
            int v67 = 0;
          }
          else {
            int v67 = -127;
          }
          if (*v59 > v58) {
            int v67 = 1;
          }
          if (*v59 < v58) {
            int v67 = -1;
          }
          if (!v67)
          {
            unint64_t v68 = *((void *)v59 + 1);
            BOOL v69 = v68 == v65;
            LOBYTE(v67) = v68 < v65 ? -1 : 1;
            if (v69) {
              LOBYTE(v67) = 0;
            }
          }
        }
        while (v67 != 129 && (v67 & 0x80) != 0);
        *uint64_t v57 = v58;
        *((void *)v57 + 1) = v65;
      }
    }
    ++v38;
    __n128 v25 = (char *)v166[0];
    unint64_t v31 = 0x63FB9AEB1FDCD759 * (((char *)v166[1] - (char *)v166[0]) >> 3);
  }
  while (v38 < v31 - 1);
  if (v36 == v35) {
    goto LABEL_188;
  }
  uint64_t v160 = 0;
  unint64_t v70 = v161 - 1;
  do
  {
    double v71 = *v36;
    unint64_t v72 = *((void *)v36 + 1);
    uint64_t v73 = (char *)v35 - (char *)v36;
    if ((char *)v35 - (char *)v36 >= 17)
    {
      uint64_t v74 = 0;
      uint64_t v75 = v73 >> 4;
      int64_t v76 = (unint64_t)((v73 >> 4) - 2) >> 1;
      double v77 = v36;
      do
      {
        uint64_t v80 = v74 + 1;
        long long v78 = &v77[2 * v74 + 2];
        uint64_t v79 = (2 * v74) | 1;
        uint64_t v81 = 2 * v74 + 2;
        if (v81 < v75)
        {
          double v82 = v78[2];
          if (*v78 == v82) {
            int v83 = 0;
          }
          else {
            int v83 = -127;
          }
          if (*v78 > v82) {
            int v83 = 1;
          }
          if (*v78 < v82) {
            int v83 = -1;
          }
          if (!v83)
          {
            double v84 = v77[2 * v80 + 1];
            unint64_t v85 = *((void *)v78 + 3);
            BOOL v86 = *(void *)&v84 == v85;
            if (*(void *)&v84 < v85) {
              char v87 = -1;
            }
            else {
              char v87 = 1;
            }
            if (v86) {
              LOBYTE(v83) = 0;
            }
            else {
              LOBYTE(v83) = v87;
            }
          }
          if (v83 != 129 && (v83 & 0x80u) != 0)
          {
            v78 += 2;
            uint64_t v79 = v81;
          }
        }
        *double v77 = *v78;
        v77[1] = v78[1];
        double v77 = v78;
        uint64_t v74 = v79;
      }
      while (v79 <= v76);
      if (v78 == v35 - 2)
      {
        *long long v78 = v71;
        *((void *)v78 + 1) = v72;
      }
      else
      {
        *long long v78 = *(v35 - 2);
        v78[1] = *(v35 - 1);
        *(v35 - 2) = v71;
        *((void *)v35 - 1) = v72;
        uint64_t v88 = (char *)v78 - (char *)v36 + 16;
        if (v88 >= 17)
        {
          unint64_t v89 = (((unint64_t)v88 >> 4) - 2) >> 1;
          __n128 v90 = &v36[2 * v89];
          double v91 = *v90;
          double v92 = *v78;
          if (*v90 == *v78) {
            int v93 = 0;
          }
          else {
            int v93 = -127;
          }
          if (*v90 > *v78) {
            int v93 = 1;
          }
          if (*v90 < *v78) {
            int v93 = -1;
          }
          if (!v93)
          {
            unint64_t v94 = *((void *)v90 + 1);
            unint64_t v95 = *((void *)v78 + 1);
            BOOL v96 = v94 == v95;
            LOBYTE(v93) = v94 < v95 ? -1 : 1;
            if (v96) {
              LOBYTE(v93) = 0;
            }
          }
          if (v93 != 129 && (v93 & 0x80) != 0)
          {
            unint64_t v97 = *((void *)v78 + 1);
            do
            {
              v98 = v78;
              long long v78 = v90;
              double *v98 = v91;
              v98[1] = v90[1];
              if (!v89) {
                break;
              }
              unint64_t v89 = (v89 - 1) >> 1;
              __n128 v90 = &v36[2 * v89];
              double v91 = *v90;
              if (*v90 == v92) {
                int v99 = 0;
              }
              else {
                int v99 = -127;
              }
              if (*v90 > v92) {
                int v99 = 1;
              }
              if (*v90 < v92) {
                int v99 = -1;
              }
              if (!v99)
              {
                unint64_t v100 = *((void *)v90 + 1);
                BOOL v101 = v100 == v97;
                LOBYTE(v99) = v100 < v97 ? -1 : 1;
                if (v101) {
                  LOBYTE(v99) = 0;
                }
              }
            }
            while (v99 != 129 && (v99 & 0x80) != 0);
            *long long v78 = v92;
            *((void *)v78 + 1) = v97;
          }
        }
      }
    }
    if ((int)v72 <= 1) {
      int v102 = 1;
    }
    else {
      int v102 = v72;
    }
    unint64_t v103 = (v102 - 1);
    if (v102 == 1)
    {
      unint64_t v103 = 0;
    }
    else
    {
      do
      {
        if (((*(void *)((char *)v33 + ((v103 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v103) & 1) == 0) {
          break;
        }
        --v103;
      }
      while (v103);
    }
    if (v70 >= v72 + 1) {
      unint64_t v104 = v72 + 1;
    }
    else {
      unint64_t v104 = v161 - 1;
    }
    if (v70 > v72 + 1)
    {
      while (((*(void *)((char *)v33 + ((v104 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v104) & 1) != 0)
      {
        if (v70 == ++v104)
        {
          unint64_t v104 = v161 - 1;
          break;
        }
      }
    }
    v105 = (double *)&v25[1864 * v103];
    BOOL v106 = (double *)&v25[1864 * v104];
    double v107 = v105[1];
    double v108 = v105[2];
    double v109 = v106[1];
    double v110 = v106[2];
    double v111 = v105[3];
    double v112 = v106[3];
    if ((int)v103 <= 1) {
      int v113 = 1;
    }
    else {
      int v113 = v103;
    }
    unint64_t v114 = (v113 - 1);
    if (v114)
    {
      do
      {
        if (((*(void *)((char *)v33 + ((v114 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v114) & 1) == 0) {
          break;
        }
        --v114;
      }
      while (v114);
    }
    else
    {
      unint64_t v114 = 0;
    }
    double v115 = 0.0;
    if (v104 != v103 && v114 != v103)
    {
      int64_t v116 = (double *)&v25[1864 * v114];
      double v117 = v107 - v116[1];
      double v118 = v108 - v116[2];
      double v115 = acos(fmax(fmin((v117 * (v109 - v107) + v118 * (v110 - v108) + (v111 - v116[3]) * (v112 - v111))/ sqrt((v117 * v117 + v118 * v118 + (v111 - v116[3]) * (v111 - v116[3]))* ((v109 - v107) * (v109 - v107) + (v110 - v108) * (v110 - v108) + (v112 - v111) * (v112 - v111))), 1.0), -1.0));
    }
    if (v70 >= v104 + 1) {
      unint64_t v119 = v104 + 1;
    }
    else {
      unint64_t v119 = v161 - 1;
    }
    if (v70 > v104 + 1)
    {
      while (((*(void *)((char *)v33 + ((v119 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v119) & 1) != 0)
      {
        if (v70 == ++v119)
        {
          unint64_t v119 = v161 - 1;
          break;
        }
      }
    }
    double v120 = 0.0;
    if (v104 != v103 && v119 != v104)
    {
      double v121 = (double *)&v25[1864 * v119];
      double v122 = v121[1] - v109;
      double v123 = v121[2] - v110;
      double v120 = acos(fmax(fmin((v122 * (v109 - v107) + v123 * (v110 - v108) + (v121[3] - v112) * (v112 - v111))/ sqrt((v122 * v122 + v123 * v123 + (v121[3] - v112) * (v121[3] - v112))* ((v109 - v107) * (v109 - v107) + (v110 - v108) * (v110 - v108) + (v112 - v111) * (v112 - v111))), 1.0), -1.0));
    }
    if (v115 + 0.436332313 < v71
      && v120 + 0.436332313 < v71
      && (v107 - v109) * (v107 - v109) + (v108 - v110) * (v108 - v110) + (v111 - v112) * (v111 - v112) < 100.0)
    {
      *(void *)((char *)v33 + ((v72 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v72;
      ++v160;
    }
    v35 -= 2;
  }
  while (v36 != v35);
  uint64_t v125 = v160;
LABEL_190:
  __n128 v170 = 0;
  __n128 v171 = 0;
  unint64_t v172 = 0;
  std::vector<md::mun::CollectionPoint>::reserve(&v170, v31 - v125);
  uint64_t v127 = v166[0];
  uint64_t v126 = v166[1];
  if (v166[1] != v166[0])
  {
    for (unint64_t i = 0; i < 0x63FB9AEB1FDCD759 * ((v126 - v127) >> 3); ++i)
    {
      if ((*(void *)((char *)v33 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i)) {
        continue;
      }
      uint64_t v130 = (uint64_t)&v127[1864 * i];
      if ((unint64_t)v171 < v172)
      {
        uint64_t v129 = (char *)(std::construct_at[abi:nn180100]<md::mun::CollectionPoint,md::mun::CollectionPoint,md::mun::CollectionPoint*>((uint64_t)v171, (uint64_t)&v127[1864 * i])+ 1864);
      }
      else
      {
        uint64_t v131 = 0x63FB9AEB1FDCD759 * ((v171 - v170) >> 3);
        unint64_t v132 = v131 + 1;
        if ((unint64_t)(v131 + 1) > 0x2328A701194538) {
          goto LABEL_266;
        }
        if (0xC7F735D63FB9AEB2 * ((uint64_t)(v172 - (void)v170) >> 3) > v132) {
          unint64_t v132 = 0xC7F735D63FB9AEB2 * ((uint64_t)(v172 - (void)v170) >> 3);
        }
        if ((unint64_t)(0x63FB9AEB1FDCD759 * ((uint64_t)(v172 - (void)v170) >> 3)) >= 0x119453808CA29CLL) {
          unint64_t v133 = 0x2328A701194538;
        }
        else {
          unint64_t v133 = v132;
        }
        if (v133)
        {
          if (v133 > 0x2328A701194538) {
            goto LABEL_267;
          }
          int64_t v134 = (char *)operator new(1864 * v133);
        }
        else
        {
          int64_t v134 = 0;
        }
        uint64_t v135 = &v134[1864 * v131];
        unint64_t v136 = &v134[1864 * v133];
        std::construct_at[abi:nn180100]<md::mun::CollectionPoint,md::mun::CollectionPoint,md::mun::CollectionPoint*>((uint64_t)v135, v130);
        unint64_t v138 = v170;
        unint64_t v137 = v171;
        if (v171 != v170)
        {
          unsigned __int8 v139 = v135;
          do
          {
            v137 -= 1864;
            unsigned __int8 v139 = (char *)std::construct_at[abi:nn180100]<md::mun::CollectionPoint,md::mun::CollectionPoint,md::mun::CollectionPoint*>((uint64_t)(v139 - 1864), (uint64_t)v137);
          }
          while (v137 != v138);
          unint64_t v137 = v170;
          v140 = v171;
          __n128 v170 = v139;
          unint64_t v172 = (unint64_t)v136;
          if (v171 != v137)
          {
            do
            {
              __n128 v141 = v140 - 1864;
              uint64_t v142 = (void *)*((void *)v140 - 222);
              unsigned __int8 v143 = (void *)*((void *)v140 - 221);
              if (v142 != v143)
              {
                do
                {
                  v144 = (void *)v142[31];
                  if (v144 != (void *)v142[33]) {
                    free(v144);
                  }
                  v142 += 36;
                }
                while (v142 != v143);
                uint64_t v142 = (void *)*((void *)v140 - 222);
              }
              if (v142 != *((void **)v140 - 220)) {
                free(v142);
              }
              v140 -= 1864;
            }
            while (v141 != v137);
          }
          uint64_t v129 = v135 + 1864;
          if (!v137) {
            goto LABEL_193;
          }
LABEL_224:
          operator delete(v137);
          goto LABEL_193;
        }
        __n128 v170 = v135;
        unint64_t v172 = (unint64_t)v136;
        uint64_t v129 = v135 + 1864;
        if (v171) {
          goto LABEL_224;
        }
      }
LABEL_193:
      __n128 v171 = v129;
      uint64_t v127 = v166[0];
      uint64_t v126 = v166[1];
    }
  }
  uint64_t v146 = v170;
  unint64_t v145 = v171;
  if ((unint64_t)(0x63FB9AEB1FDCD759 * ((v171 - v170) >> 3)) < 3 && *(void *)v170 == *((void *)v171 - 233))
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    v147 = GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A1780000, v147, OS_LOG_TYPE_INFO, "Start point same as end point.", buf, 2u);
    }
    *__n128 v159 = 0;
    v159[1] = 0;
    v159[2] = 0;
    if (v145 != v146)
    {
      do
      {
        double v148 = v145 - 1864;
        uint64_t v149 = (void *)*((void *)v145 - 222);
        unsigned __int8 v150 = (void *)*((void *)v145 - 221);
        if (v149 != v150)
        {
          do
          {
            v151 = (void *)v149[31];
            if (v151 != (void *)v149[33]) {
              free(v151);
            }
            v149 += 36;
          }
          while (v149 != v150);
          uint64_t v149 = (void *)*((void *)v145 - 222);
        }
        if (v149 != *((void **)v145 - 220)) {
          free(v149);
        }
        v145 -= 1864;
      }
      while (v148 != v146);
      unint64_t v145 = v146;
    }
    operator delete(v145);
    if (!v36) {
      goto LABEL_244;
    }
  }
  else
  {
    *__n128 v159 = v170;
    v159[1] = v145;
    v159[2] = v172;
    if (!v36) {
      goto LABEL_244;
    }
  }
  operator delete(v36);
LABEL_244:
  if (v33) {
    operator delete(v33);
  }
LABEL_246:
  if (__p)
  {
    __n128 v164 = (uint64_t *)__p;
    operator delete(__p);
  }
  __n128 v152 = (char *)v166[0];
  if (v166[0])
  {
    __n128 v153 = (char *)v166[1];
    __n128 v154 = v166[0];
    if (v166[1] != v166[0])
    {
      do
      {
        __n128 v155 = v153 - 1864;
        __n128 v156 = (void *)*((void *)v153 - 222);
        __n128 v157 = (void *)*((void *)v153 - 221);
        if (v156 != v157)
        {
          do
          {
            __n128 v158 = (void *)v156[31];
            if (v158 != (void *)v156[33]) {
              free(v158);
            }
            v156 += 36;
          }
          while (v156 != v157);
          __n128 v156 = (void *)*((void *)v153 - 222);
        }
        if (v156 != *((void **)v153 - 220)) {
          free(v156);
        }
        v153 -= 1864;
      }
      while (v155 != v152);
      __n128 v154 = v166[0];
    }
    v166[1] = v152;
    operator delete(v154);
  }
}

uint64_t std::__function::__func<md::mun::MuninNavigation::path(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&,std::function<BOOL ()(void)>)::$_0,std::allocator<md::mun::MuninNavigation::path(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&,std::function<BOOL ()(void)>)::$_0>,void ()(md::mun::MuninNavigationGraph const*)>::operator()(uint64_t a1, void *a2)
{
  uint64_t v244 = *MEMORY[0x1E4F143B8];
  v3 = (void *)*a2;
  uint64_t v4 = (void *)*a2;
  uint64_t v5 = *(double **)(a1 + 24);
  unint64_t v6 = **(void **)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = **(unsigned __int8 **)(a1 + 40);
  uint64_t v10 = *(double **)(a1 + 48);
  unsigned __int8 v9 = *(void **)(a1 + 56);
  v223 = v10;
  unint64_t v11 = (void *)v9[3];
  if (v11)
  {
    if (v11 == v9)
    {
      v241 = v240;
      (*(void (**)(void *, void *))(*v9 + 24))(v9, v240);
    }
    else
    {
      v241 = (void *)(*(uint64_t (**)(void))(*v11 + 16))(v9[3]);
    }
  }
  else
  {
    v241 = 0;
  }
  __n128 v14 = (void *)*v4;
  double v13 = v4 + 1;
  double v12 = v14;
  if (v14 == v13)
  {
LABEL_7:
    char v15 = 0;
    goto LABEL_8;
  }
  while (1)
  {
    uint64_t v17 = (void *)v12[4];
    int8x8_t v18 = (int8x8_t)v17[25];
    if (v18)
    {
      uint8x8_t v19 = (uint8x8_t)vcnt_s8(v18);
      v19.i16[0] = vaddlv_u8(v19);
      if (v19.u32[0] > 1uLL)
      {
        unint64_t v20 = v6;
        if (*(void *)&v18 <= v6) {
          unint64_t v20 = v6 % *(void *)&v18;
        }
      }
      else
      {
        unint64_t v20 = (*(void *)&v18 - 1) & v6;
      }
      long long v21 = *(uint64_t ****)(v17[24] + 8 * v20);
      if (v21)
      {
        uint64_t v22 = *v21;
        if (v22) {
          break;
        }
      }
    }
LABEL_34:
    __n128 v27 = (void *)v12[1];
    if (v27)
    {
      do
      {
        uint64_t v28 = v27;
        __n128 v27 = (void *)*v27;
      }
      while (v27);
    }
    else
    {
      do
      {
        uint64_t v28 = (void *)v12[2];
        BOOL v72 = *v28 == (void)v12;
        double v12 = v28;
      }
      while (!v72);
    }
    double v12 = v28;
    if (v28 == v13) {
      goto LABEL_7;
    }
  }
  if (v19.u32[0] < 2uLL)
  {
    uint64_t v23 = *(void *)&v18 - 1;
    while (1)
    {
      __n128 v25 = v22[1];
      if (v25 == (uint64_t *)v6)
      {
        if (v22[2] == (uint64_t *)v6) {
          goto LABEL_33;
        }
      }
      else if (((unint64_t)v25 & v23) != v20)
      {
        goto LABEL_34;
      }
      uint64_t v22 = (uint64_t **)*v22;
      if (!v22) {
        goto LABEL_34;
      }
    }
  }
  while (1)
  {
    unint64_t v24 = (unint64_t)v22[1];
    if (v24 == v6) {
      break;
    }
    if (v24 >= *(void *)&v18) {
      v24 %= *(void *)&v18;
    }
    if (v24 != v20) {
      goto LABEL_34;
    }
LABEL_22:
    uint64_t v22 = (uint64_t **)*v22;
    if (!v22) {
      goto LABEL_34;
    }
  }
  if (v22[2] != (uint64_t *)v6) {
    goto LABEL_22;
  }
LABEL_33:
  uint64_t v26 = v17[21];
  if (!v26) {
    goto LABEL_34;
  }
  unsigned int v29 = *((unsigned __int16 *)v22 + 12);
  unint64_t v30 = v26 + 1864 * *((unsigned __int16 *)v22 + 12);
  if (v241)
  {
    if (v241 == v240)
    {
      v243 = v242;
      (*(void (**)(void *, void *))(v240[0] + 24))(v240, v242);
    }
    else
    {
      v243 = (void *)(*(uint64_t (**)(void *))(*v241 + 16))(v241);
    }
  }
  else
  {
    v243 = 0;
  }
  int v214 = v8;
  uint64_t v213 = v7;
  v238 = (float64x2_t *)v30;
  *(_OWORD *)v235 = 0u;
  *(_OWORD *)v236 = 0u;
  int v237 = 1065353216;
  *(_OWORD *)v232 = 0u;
  *(_OWORD *)__p = 0u;
  int v234 = 1065353216;
  v230 = 0;
  uint64_t v231 = 0;
  v229 = &v230;
  v226 = 0;
  v227 = 0;
  uint64_t v228 = 0;
  std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)v235, v30, &v238)[3] = v30;
  std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)v232, v30, &v238)[3] = 0;
  unint64_t v31 = (double *)(v26 + 1864 * v29);
  double v32 = v31[1];
  double v33 = v31[2];
  double v34 = *v5 - v32;
  double v35 = v5[1] - v33;
  double v36 = v31[3];
  double v37 = v5[2] - v36;
  unint64_t v38 = v223;
  double v211 = sqrt(v34 * v34 + v35 * v35 + v37 * v37);
  double v39 = fmin(v223[2], v211);
  double v219 = v35 * (1.0 / v211);
  double v220 = v34 * (1.0 / v211);
  double v40 = v32 + v39 * v220;
  double v218 = v37 * (1.0 / v211);
  double v221 = v36 + v39 * v218;
  double v222 = v33 + v39 * v219;
  double v41 = v226;
  double v42 = v227;
  if (v226 != v227)
  {
    double v216 = v39 * 1.6;
    double v217 = v39;
    double v215 = fmax(v39 * 1.6, 10.0);
    v212 = v3 + 3;
    while (v243)
    {
      if ((*(uint64_t (**)(void *))(*v243 + 48))(v243)) {
        goto LABEL_222;
      }
      unint64_t v43 = *((void *)v41 + 1);
      double v44 = v41[2];
      if ((char *)v42 - (char *)v41 >= 25)
      {
        uint64_t v45 = 0;
        int64_t v46 = 0xAAAAAAAAAAAAAAABLL * (v42 - v41);
        uint64_t v47 = *(void *)v41;
        *(_OWORD *)buf = *(_OWORD *)(v41 + 1);
        uint64_t v48 = (uint64_t)v41;
        do
        {
          uint64_t v51 = v48 + 24 * v45 + 24;
          uint64_t v52 = (2 * v45) | 1;
          uint64_t v45 = 2 * v45 + 2;
          if (v45 < v46)
          {
            double v49 = *(double *)v51;
            if (*(double *)v51 <= *(double *)(v51 + 24)) {
              int v50 = -1;
            }
            else {
              int v50 = 1;
            }
            if (v50 <= 0)
            {
              uint64_t v45 = v52;
            }
            else
            {
              double v49 = *(double *)(v51 + 24);
              v51 += 24;
            }
          }
          else
          {
            double v49 = *(double *)v51;
            uint64_t v45 = v52;
          }
          *(double *)uint64_t v48 = v49;
          *(_OWORD *)(v48 + 8) = *(_OWORD *)(v51 + 8);
          uint64_t v48 = v51;
        }
        while (v45 <= (uint64_t)((unint64_t)(v46 - 2) >> 1));
        __n128 v53 = (_OWORD *)(v51 + 8);
        if ((double *)v51 == v42 - 3)
        {
          *(void *)uint64_t v51 = v47;
          *__n128 v53 = *(_OWORD *)buf;
        }
        else
        {
          *(double *)uint64_t v51 = *(v42 - 3);
          *__n128 v53 = *((_OWORD *)v42 - 1);
          *((void *)v42 - 3) = v47;
          *((_OWORD *)v42 - 1) = *(_OWORD *)buf;
          uint64_t v54 = v51 - (void)v41 + 24;
          if (v54 >= 25)
          {
            unint64_t v55 = (v54 / 0x18uLL - 2) >> 1;
            unint64_t v56 = &v41[3 * v55];
            double v57 = *v56;
            double v58 = *(double *)v51;
            uint64_t v59 = *(void *)(v51 + 8);
            int v60 = *v56 <= *(double *)v51 ? -1 : 1;
            if (v60 >= 1)
            {
              uint64_t v61 = *(void *)(v51 + 16);
              do
              {
                uint64_t v62 = v51;
                uint64_t v51 = (uint64_t)v56;
                *(double *)uint64_t v62 = v57;
                *(_OWORD *)(v62 + 8) = *(_OWORD *)(v56 + 1);
                if (!v55) {
                  break;
                }
                unint64_t v55 = (v55 - 1) >> 1;
                unint64_t v56 = &v41[3 * v55];
                double v57 = *v56;
                int v63 = *v56 <= v58 ? -1 : 1;
              }
              while (v63 > 0);
              *(double *)uint64_t v51 = v58;
              *(void *)(v51 + 8) = v59;
              *(void *)(v51 + 16) = v61;
            }
          }
        }
        double v42 = v227;
      }
      v227 = v42 - 3;
      *(void *)buf = v43;
      double v64 = *(double *)(v43 + 8);
      double v65 = *(double *)(v43 + 16);
      double v66 = v40 - v64;
      double v67 = v222 - v65;
      double v68 = *(double *)(v43 + 24);
      double v69 = v221 - v68;
      double v70 = (v40 - v64) * v220 + (v222 - v65) * v219 + (v221 - v68) * v218;
      if (v238 != (float64x2_t *)v43)
      {
        double v71 = sqrt(v66 * v66 + v67 * v67 + v69 * v69);
        if (v71 + v44 <= v215
          || sqrt((v238->f64[1] - v64) * (v238->f64[1] - v64)+ (v238[1].f64[0] - v65) * (v238[1].f64[0] - v65)+ (v238[1].f64[1] - v68) * (v238[1].f64[1] - v68)) >= v44)
        {
          BOOL v72 = v71 <= 7.4 && v214 == 0;
          BOOL v73 = v72 || v44 <= 10.0;
          BOOL v74 = !v73 && v70 < 0.0;
          BOOL v75 = !v74 && v71 <= v39;
          if (v75 && (v39 - v71) * 4.0 >= v44)
          {
            int64_t v76 = v230;
            double v77 = &v230;
LABEL_98:
            long long v78 = v77;
            if (v76)
            {
              do
              {
                double v77 = (uint64_t **)v76;
                unint64_t v79 = v76[4];
                if (v79 > v43)
                {
                  int64_t v76 = *v77;
                  goto LABEL_98;
                }
                if (v79 >= v43) {
                  goto LABEL_107;
                }
                int64_t v76 = v77[1];
              }
              while (v76);
              long long v78 = v77 + 1;
            }
            uint64_t v80 = (uint64_t *)operator new(0x28uLL);
            v80[4] = v43;
            *uint64_t v80 = 0;
            v80[1] = 0;
            v80[2] = (uint64_t)v77;
            *long long v78 = v80;
            if (*v229)
            {
              v229 = (uint64_t **)*v229;
              uint64_t v81 = *v78;
            }
            else
            {
              uint64_t v81 = v80;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v230, v81);
            ++v231;
            unint64_t v43 = *(void *)buf;
          }
        }
      }
LABEL_107:
      if (v70 >= 0.0 && v216 >= v44)
      {
        int v83 = (double *)v238;
        float64_t v84 = v238->f64[1] - *(double *)(v43 + 8);
        float64x2_t v85 = vsubq_f64(v238[1], *(float64x2_t *)(v43 + 16));
        float64x2_t v86 = vmulq_f64(v85, v85);
        if (sqrt(v86.f64[0] + v84 * v84 + v86.f64[1]) <= v38[2])
        {
          char v87 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v212, v43);
          if (v87)
          {
            uint64_t v88 = (unint64_t *)v87[3];
            unint64_t v89 = (unint64_t *)v87[4];
            while (v88 != v89)
            {
              unint64_t v90 = *v88;
              unint64_t v225 = v90;
              if (v90 == v43) {
                goto LABEL_115;
              }
              if (*(void *)v90 == *(void *)v43) {
                goto LABEL_115;
              }
              double v91 = *(double *)(v90 + 8);
              double v92 = *(double *)(v90 + 16);
              double v93 = v91 - *(double *)(v43 + 8);
              double v94 = v92 - *(double *)(v43 + 16);
              double v95 = *(double *)(v90 + 24);
              double v96 = v95 - *(double *)(v43 + 24);
              double v97 = sqrt(v93 * v93 + v94 * v94 + v96 * v96);
              if ((v94 * v67 + v96 * v69 + v93 * v66) / v97 < 0.0) {
                goto LABEL_115;
              }
              double v98 = ((v92 - v83[2]) * (v222 - v92) + (v95 - v83[3]) * (v221 - v95) + (v91 - v83[1]) * (v40 - v91))
                  / sqrt((v91 - v83[1]) * (v91 - v83[1])+ (v92 - v83[2]) * (v92 - v83[2])+ (v95 - v83[3]) * (v95 - v83[3]));
              unint64_t v99 = *(void *)(v43 + 80);
              unint64_t v100 = *(void *)(v90 + 80);
              unint64_t v101 = v100 - v99;
              BOOL v73 = v99 > v100;
              unint64_t v102 = v99 - v100;
              if (v73) {
                unint64_t v103 = v102;
              }
              else {
                unint64_t v103 = v101;
              }
              unint64_t v104 = (double *)std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)v232, v43, buf);
              BOOL v73 = v103 > 0xEA60;
              unint64_t v38 = v223;
              if (v73) {
                double v105 = *v223;
              }
              else {
                double v105 = -0.0;
              }
              double v106 = v223[7];
              double v107 = fmin(v98, v44);
              double v108 = v223[5];
              if (v107 < v108) {
                double v106 = v223[6] + fmin(fmax((v107 - v223[4]) / (v108 - v223[4]), 0.0), 1.0) * (v106 - v223[6]);
              }
              double v109 = v105 + v97;
              double v110 = v223[8] * v106;
              if (v110 + v106 >= v97)
              {
                double v112 = v106 - v110;
                if (v112 <= v97) {
                  goto LABEL_133;
                }
                double v111 = v112 - v97;
                double v106 = v97;
              }
              else
              {
                double v111 = v97 - (v110 + v106);
              }
              double v109 = v223[9] * v111 / v106 + v109;
LABEL_133:
              double v113 = v109 + v104[3];
              if (!v232[1]) {
                goto LABEL_114;
              }
              unint64_t v114 = 0x9DDFEA08EB382D69 * (((8 * v90) + 8) ^ HIDWORD(v90));
              unint64_t v115 = 0x9DDFEA08EB382D69 * (HIDWORD(v90) ^ (v114 >> 47) ^ v114);
              unint64_t v116 = 0x9DDFEA08EB382D69 * (v115 ^ (v115 >> 47));
              uint8x8_t v117 = (uint8x8_t)vcnt_s8((int8x8_t)v232[1]);
              v117.i16[0] = vaddlv_u8(v117);
              if (v117.u32[0] > 1uLL)
              {
                unint64_t v118 = v116;
                if ((void *)v116 >= v232[1]) {
                  unint64_t v118 = v116 % (unint64_t)v232[1];
                }
              }
              else
              {
                unint64_t v118 = v116 & ((unint64_t)v232[1] - 1);
              }
              unint64_t v119 = (void *)*((void *)v232[0] + v118);
              if (!v119 || (double v120 = (void *)*v119) == 0)
              {
LABEL_114:
                *((double *)std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)v232, v90, &v225)+ 3) = v113;
                std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)v235, v90, &v225)[3] = v43;
                goto LABEL_115;
              }
              if (v117.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v122 = v120[1];
                  if (v116 == v122)
                  {
                    if (v120[2] == v90) {
                      goto LABEL_154;
                    }
                  }
                  else if ((v122 & ((uint64_t)v232[1] - 1)) != v118)
                  {
                    goto LABEL_114;
                  }
                  double v120 = (void *)*v120;
                  if (!v120) {
                    goto LABEL_114;
                  }
                }
              }
              while (1)
              {
                unint64_t v121 = v120[1];
                if (v116 == v121) {
                  break;
                }
                if ((void *)v121 >= v232[1]) {
                  v121 %= (unint64_t)v232[1];
                }
                if (v121 != v118) {
                  goto LABEL_114;
                }
LABEL_143:
                double v120 = (void *)*v120;
                if (!v120) {
                  goto LABEL_114;
                }
              }
              if (v120[2] != v90) {
                goto LABEL_143;
              }
LABEL_154:
              if (v113 < *((double *)std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)v232, v90, &v225)+ 3))goto LABEL_114; {
LABEL_115:
              }
              ++v88;
            }
          }
        }
      }
      double v41 = v226;
      double v42 = v227;
      double v39 = v217;
      if (v226 == v227) {
        goto LABEL_156;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_270:
    abort();
  }
LABEL_156:
  if (v211 >= 10.0) {
    double v123 = 7.4;
  }
  else {
    double v123 = 0.0;
  }
  unint64_t v124 = (uint64_t *)v229;
  uint64_t v125 = v213;
  if (v229 == &v230) {
    goto LABEL_218;
  }
  double v126 = 1.0 / sqrt(v40 * v40 + v222 * v222 + v221 * v221);
  double v127 = v126 * v40;
  double v128 = v126 * v222;
  double v129 = v126 * v221;
  double v224 = -(v128 * v218 - v129 * v219);
  double v130 = -(v129 * v220 - v127 * v218);
  double v131 = -(v127 * v219 - v128 * v220);
  double v132 = fmin(fmax(v211 * 0.0181818182 + -0.454545455, 0.0), 1.0);
  double v133 = v132 * -4.7 + 5.0;
  double v134 = v132 * -1.5 + 5.0;
  double v135 = 1.79769313e308;
  double v136 = v40;
  do
  {
    unint64_t v137 = (double *)std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)v232, v124[4], v124 + 4);
    double v138 = v40 - *(double *)(v124[4] + 8);
    double v139 = v222 - *(double *)(v124[4] + 16);
    double v140 = v221 - *(double *)(v124[4] + 24);
    double v141 = fabs(v139 * v219 + v138 * v220 + v140 * v218);
    double v142 = (v141 - v123) * v134;
    if (v141 <= v123) {
      double v142 = -0.0;
    }
    if (v214)
    {
      double v143 = sqrt(v138 * v138 + v139 * v139 + v140 * v140);
      double v144 = (2.5 - (v140 * v218 + v139 * v219 + v138 * v220) * 2.5 / v143) * v143;
    }
    else
    {
      double v144 = 0.0;
    }
    double v145 = fabs(v138 * v224 + v139 * v130 + v140 * v131) * v133 + v137[3] + fmin(v141, v123) + v142 + v144;
    *((double *)std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)v232, v124[4], v124 + 4)+ 3) = v145;
    uint64_t v146 = (uint64_t *)v124[1];
    if (v146)
    {
      do
      {
        v147 = (uint64_t **)v146;
        uint64_t v146 = (uint64_t *)*v146;
      }
      while (v146);
    }
    else
    {
      do
      {
        v147 = (uint64_t **)v124[2];
        BOOL v72 = *v147 == v124;
        unint64_t v124 = (uint64_t *)v147;
      }
      while (!v72);
    }
    double v135 = fmin(v145, v135);
    unint64_t v124 = (uint64_t *)v147;
    double v40 = v136;
  }
  while (v147 != &v230);
  double v148 = (uint64_t *)v229;
  if (v229 == &v230) {
    goto LABEL_218;
  }
  uint64_t v149 = 0;
  int v150 = 0x80000000;
  v151 = v238;
  double v152 = 1.79769313e308;
  do
  {
    __n128 v153 = (float64x2_t **)(v148 + 4);
    __n128 v154 = (double *)std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)v232, v148[4], v148 + 4);
    double v155 = v154[3];
    if (v155 <= v38[1] + v135)
    {
      int v156 = (LODWORD((*v153)[5].f64[0]) - LODWORD(v151[5].f64[0])) / 86400000;
      if (v150 < v156 || (v150 == v156 ? (BOOL v157 = v155 < v152) : (BOOL v157 = 0), v157))
      {
        uint64_t v149 = *v153;
        int v150 = (LODWORD((*v153)[5].f64[0]) - LODWORD(v151[5].f64[0])) / 86400000;
        double v152 = v154[3];
      }
    }
    __n128 v158 = (uint64_t *)v148[1];
    if (v158)
    {
      do
      {
        __n128 v159 = (uint64_t **)v158;
        __n128 v158 = (uint64_t *)*v158;
      }
      while (v158);
    }
    else
    {
      do
      {
        __n128 v159 = (uint64_t **)v148[2];
        BOOL v72 = *v159 == v148;
        double v148 = (uint64_t *)v159;
      }
      while (!v72);
    }
    double v148 = (uint64_t *)v159;
  }
  while (v159 != &v230);
  if (!v149)
  {
LABEL_218:
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    uint64_t v179 = GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitVKDefaultLog_log, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1A1780000, v179, OS_LOG_TYPE_INFO, "NavGraph: No path found from start to the target point.", buf, 2u);
    }
LABEL_222:
    char v15 = 0;
    if (!v41) {
      goto LABEL_224;
    }
    goto LABEL_223;
  }
  *(void *)buf = v149;
  if (v149 != v151)
  {
    v151 = v149;
    while (1)
    {
      char v162 = *(float64x2_t ***)(v125 + 8);
      unint64_t v161 = *(void *)(v125 + 16);
      if ((unint64_t)v162 >= v161) {
        break;
      }
      *char v162 = v151;
      uint64_t v160 = v162 + 1;
LABEL_194:
      *(void *)(v125 + 8) = v160;
      v151 = (float64x2_t *)std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)v235, *(unint64_t *)buf, buf)[3];
      *(void *)buf = v151;
      if (v151 == v238) {
        goto LABEL_236;
      }
    }
    __n128 v163 = *(float64x2_t ***)v125;
    uint64_t v164 = (uint64_t)v162 - *(void *)v125;
    uint64_t v165 = v164 >> 3;
    unint64_t v166 = (v164 >> 3) + 1;
    if (v166 >> 61) {
      goto LABEL_270;
    }
    uint64_t v167 = v161 - (void)v163;
    if (v167 >> 2 > v166) {
      unint64_t v166 = v167 >> 2;
    }
    if ((unint64_t)v167 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v168 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v168 = v166;
    }
    if (v168)
    {
      if (v168 >> 61) {
        goto LABEL_271;
      }
      __n128 v169 = operator new(8 * v168);
    }
    else
    {
      __n128 v169 = 0;
    }
    __n128 v170 = (float64x2_t **)&v169[8 * v165];
    *__n128 v170 = v151;
    uint64_t v160 = v170 + 1;
    if (v162 == v163)
    {
      __n128 v163 = v162;
      uint64_t v125 = v213;
      goto LABEL_216;
    }
    unint64_t v171 = (char *)(v162 - 1) - (char *)v163;
    if (v171 >= 0x58)
    {
      unint64_t v172 = (char *)v162 - &v169[v164];
      uint64_t v125 = v213;
      if (v172 >= 0x20)
      {
        uint64_t v173 = (v171 >> 3) + 1;
        __n128 v174 = &v169[8 * v165 - 16];
        uint64_t v175 = v162 - 2;
        uint64_t v176 = v173 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v177 = *(_OWORD *)v175;
          *(v174 - 1) = *((_OWORD *)v175 - 1);
          *__n128 v174 = v177;
          v174 -= 2;
          v175 -= 4;
          v176 -= 4;
        }
        while (v176);
        v170 -= v173 & 0x3FFFFFFFFFFFFFFCLL;
        v162 -= v173 & 0x3FFFFFFFFFFFFFFCLL;
        if (v173 == (v173 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_216;
        }
      }
    }
    else
    {
      uint64_t v125 = v213;
    }
    do
    {
      uint64_t v178 = *--v162;
      *--__n128 v170 = v178;
    }
    while (v162 != v163);
    __n128 v163 = *(float64x2_t ***)v125;
LABEL_216:
    *(void *)uint64_t v125 = v170;
    *(void *)(v125 + 8) = v160;
    *(void *)(v125 + 16) = &v169[8 * v168];
    if (v163) {
      operator delete(v163);
    }
    goto LABEL_194;
  }
LABEL_236:
  unint64_t v187 = *(float64x2_t ***)(v125 + 8);
  unint64_t v186 = *(void *)(v125 + 16);
  if ((unint64_t)v187 >= v186)
  {
    uint64_t v189 = *(float64x2_t ***)v125;
    uint64_t v190 = (uint64_t)v187 - *(void *)v125;
    uint64_t v191 = v190 >> 3;
    unint64_t v192 = (v190 >> 3) + 1;
    if (v192 >> 61) {
      goto LABEL_270;
    }
    uint64_t v193 = v186 - (void)v189;
    if (v193 >> 2 > v192) {
      unint64_t v192 = v193 >> 2;
    }
    if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v194 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v194 = v192;
    }
    if (v194)
    {
      if (v194 >> 61) {
LABEL_271:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      uint64_t v195 = operator new(8 * v194);
    }
    else
    {
      uint64_t v195 = 0;
    }
    uint64_t v196 = (float64x2_t **)&v195[8 * v191];
    uint64_t v197 = &v195[8 * v194];
    *uint64_t v196 = v151;
    unint64_t v188 = v196 + 1;
    if (v187 == v189)
    {
      uint64_t v189 = v187;
    }
    else
    {
      unint64_t v198 = (char *)v187 - (char *)v189 - 8;
      if (v198 < 0x58) {
        goto LABEL_274;
      }
      if ((unint64_t)((char *)v187 - &v195[v190]) < 0x20) {
        goto LABEL_274;
      }
      uint64_t v199 = (v198 >> 3) + 1;
      v200 = &v195[8 * v191 - 16];
      v201 = v187 - 2;
      uint64_t v202 = v199 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v203 = *(_OWORD *)v201;
        *(v200 - 1) = *((_OWORD *)v201 - 1);
        _OWORD *v200 = v203;
        v200 -= 2;
        v201 -= 4;
        v202 -= 4;
      }
      while (v202);
      v196 -= v199 & 0x3FFFFFFFFFFFFFFCLL;
      v187 -= v199 & 0x3FFFFFFFFFFFFFFCLL;
      if (v199 != (v199 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_274:
        do
        {
          v204 = *--v187;
          *--uint64_t v196 = v204;
        }
        while (v187 != v189);
        uint64_t v189 = *(float64x2_t ***)v125;
      }
    }
    *(void *)uint64_t v125 = v196;
    *(void *)(v125 + 8) = v188;
    *(void *)(v125 + 16) = v197;
    if (v189) {
      operator delete(v189);
    }
  }
  else
  {
    *unint64_t v187 = v151;
    unint64_t v188 = v187 + 1;
  }
  *(void *)(v125 + 8) = v188;
  v205 = *(float64x2_t ***)v125;
  v206 = (float64x2_t **)(v188 - 1);
  if (*(void **)v125 != v188 && v206 > v205)
  {
    unint64_t v208 = (unint64_t)(v205 + 1);
    do
    {
      v209 = *(float64x2_t **)(v208 - 8);
      *(void *)(v208 - 8) = *v206;
      *v206-- = v209;
      BOOL v210 = v208 >= (unint64_t)v206;
      v208 += 8;
    }
    while (!v210);
  }
  char v15 = 1;
  double v41 = v226;
  if (v226) {
LABEL_223:
  }
    operator delete(v41);
LABEL_224:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v230);
  unint64_t v180 = __p[0];
  if (__p[0])
  {
    do
    {
      uint64_t v181 = (void *)*v180;
      operator delete(v180);
      unint64_t v180 = v181;
    }
    while (v181);
  }
  uint64_t v182 = v232[0];
  v232[0] = 0;
  if (v182) {
    operator delete(v182);
  }
  unint64_t v183 = v236[0];
  if (v236[0])
  {
    do
    {
      uint64_t v184 = (void *)*v183;
      operator delete(v183);
      unint64_t v183 = v184;
    }
    while (v184);
  }
  uint64_t v185 = v235[0];
  v235[0] = 0;
  if (v185) {
    operator delete(v185);
  }
  if (v243 == v242)
  {
    (*(void (**)(void *))(v242[0] + 32))(v242);
  }
  else if (v243)
  {
    (*(void (**)(void))(*v243 + 40))();
  }
LABEL_8:
  **(unsigned char **)(a1 + 8) = v15;
  uint64_t result = (uint64_t)v241;
  if (v241 == v240) {
    return (*(uint64_t (**)(void *))(v240[0] + 32))(v240);
  }
  if (v241) {
    return (*(uint64_t (**)(void))(*v241 + 40))();
  }
  return result;
}

__n128 std::__function::__func<md::mun::MuninNavigation::path(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&,std::function<BOOL ()(void)>)::$_0,std::allocator<md::mun::MuninNavigation::path(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&,std::function<BOOL ()(void)>)::$_0>,void ()(md::mun::MuninNavigationGraph const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57DE60;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::mun::MuninNavigation::path(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&,std::function<BOOL ()(void)>)::$_0,std::allocator<md::mun::MuninNavigation::path(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&,std::function<BOOL ()(void)>)::$_0>,void ()(md::mun::MuninNavigationGraph const*)>::__clone(uint64_t a1)
{
  v2 = (char *)operator new(0x40uLL);
  *(void *)v2 = &unk_1EF57DE60;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

void std::__function::__func<md::mun::MuninNavigation::path(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&,std::function<BOOL ()(void)>)::$_0,std::allocator<md::mun::MuninNavigation::path(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&,std::function<BOOL ()(void)>)::$_0>,void ()(md::mun::MuninNavigationGraph const*)>::~__func()
{
}

void std::__function::__func<md::mun::MuninNavigation::findTargetPoint(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&)::$_0,std::allocator<md::mun::MuninNavigation::findTargetPoint(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&)::$_0>,void ()(md::mun::MuninNavigationGraph const*)>::operator()(uint64_t a1, void **a2)
{
  long long v3 = *a2;
  uint64_t v5 = *(void *)(a1 + 16);
  long long v4 = *(double **)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 40);
  int v91 = **(unsigned __int8 **)(a1 + 32);
  double v94 = 0;
  double v95 = 0;
  uint64_t v96 = 0;
  unsigned __int8 v9 = (void *)*v3;
  uint64_t v7 = v3 + 1;
  int v8 = v9;
  if (v9 == v7)
  {
    __n128 v14 = 0;
    double v13 = 0;
  }
  else
  {
    do
    {
      md::mun::MuninMetadata::neighborsWithinRadius(v8[4], v4, (uint64_t)&v94, 0, 40.0);
      uint64_t v10 = (void *)v8[1];
      if (v10)
      {
        do
        {
          unint64_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          unint64_t v11 = (void *)v8[2];
          BOOL v12 = *v11 == (void)v8;
          int v8 = v11;
        }
        while (!v12);
      }
      int v8 = v11;
    }
    while (v11 != v7);
    double v13 = (unint64_t *)v94;
    __n128 v14 = v95;
  }
  *(_OWORD *)unint64_t v101 = 0u;
  *(_OWORD *)__p = 0u;
  int v103 = 1065353216;
  unint64_t v99 = 0;
  uint64_t v100 = 0;
  double v98 = &v99;
  if (v13 == v14)
  {
    uint64_t v69 = 0;
    uint64_t v68 = a1;
    goto LABEL_77;
  }
  double v15 = v4[1];
  double v16 = *(double *)(v5 + 8);
  double v17 = *(double *)(v5 + 16);
  double v18 = *v4 - v16;
  double v19 = v4[2];
  double v20 = *(double *)(v5 + 24);
  double v21 = sqrt(v18 * v18 + (v15 - v17) * (v15 - v17) + (v19 - v20) * (v19 - v20));
  double v83 = *(double *)(v6 + 8) * 5.0;
  float v22 = *(float *)(v5 + 44);
  double v23 = (float)-*(float *)(v5 + 32);
  double v24 = (float)-*(float *)(v5 + 36);
  double v25 = (float)-*(float *)(v5 + 40);
  double v26 = v22;
  double v27 = -(v17 * v23 - v16 * v24) * v23;
  double v28 = 2.0;
  double v29 = -(v17 + (v27 + -(v17 * v25 - v20 * v24) * v25 + -(v20 * v23 - v16 * v25) * v22) * 2.0);
  double v30 = v15
      - (v17
       + (v27 + -(v17 * v25 - v20 * v24) * v25 + -(v20 * v23 - v16 * v25) * v22) * 2.0)
      + (-(v15 * v25 - v19 * v24) * v25 + -(v19 * v23 - *v4 * v25) * v22 + -(v15 * v23 - *v4 * v24) * v23) * 2.0;
  double v31 = fmax(v21 * 0.05, 0.0);
  if (v31 <= 1.0) {
    double v32 = v31 * 3.0 + 1.0;
  }
  else {
    double v32 = 4.0;
  }
  float v33 = v32;
  float v84 = v33;
  double v89 = (v15 - v17) * (1.0 / v21);
  double v90 = v18 * (1.0 / v21);
  double v87 = v22;
  double v88 = (v19 - v20) * (1.0 / v21);
  double v34 = 1.79769313e308;
  double v35 = -3.0;
  double v85 = v15
      - (v17
       + (v27 + -(v17 * v25 - v20 * v24) * v25 + -(v20 * v23 - v16 * v25) * v22) * 2.0)
      + (-(v15 * v25 - v19 * v24) * v25 + -(v19 * v23 - *v4 * v25) * v22 + -(v15 * v23 - *v4 * v24) * v23) * 2.0;
  double v86 = -(v17 + (v27 + -(v17 * v25 - v20 * v24) * v25 + -(v20 * v23 - v16 * v25) * v22) * 2.0);
  do
  {
    unint64_t v37 = *v13;
    unint64_t v97 = v37;
    if (*(void *)v37 != *(void *)v5)
    {
      double v41 = *(double *)(v37 + 8);
      double v40 = *(double *)(v37 + 16);
      double v42 = *v4 - v41;
      double v43 = v4[1] - v40;
      double v44 = *(double *)(v37 + 24);
      double v45 = v4[2] - v44;
      double v46 = v42 * v42 + v43 * v43 + v45 * v45;
      double v47 = sqrt(v46);
      double v48 = sqrt((v41 - *(double *)(v5 + 8)) * (v41 - *(double *)(v5 + 8))+ (v40 - *(double *)(v5 + 16)) * (v40 - *(double *)(v5 + 16))+ (v44 - *(double *)(v5 + 24)) * (v44 - *(double *)(v5 + 24)));
      BOOL v49 = v47 <= v21 && v48 <= *(double *)(v6 + 16);
      BOOL v50 = v49 && v48 <= v21 * 1.1;
      if (v50 && v48 <= (v21 - v47) * 4.0)
      {
        double v52 = v40
            + v29
            + (-(v40 * v23 - v41 * v24) * v23 + -(v40 * v25 - v44 * v24) * v25 + -(v44 * v23 - v41 * v25) * v26) * v28;
        if (v30 <= v28)
        {
          if (v30 >= v35)
          {
            if (v52 > v28 || v52 < v35) {
              goto LABEL_20;
            }
          }
          else if (v52 > v28)
          {
            goto LABEL_20;
          }
        }
        else if (v52 < v35)
        {
          goto LABEL_20;
        }
        double v93 = v34;
        unint64_t v54 = *(void *)(v37 + 80);
        unint64_t v55 = *(void *)(v5 + 80);
        unint64_t v56 = v55 - v54;
        BOOL v49 = v54 > v55;
        unint64_t v57 = v54 - v55;
        if (!v49) {
          unint64_t v57 = v56;
        }
        float v58 = v84;
        if (v57 <= 0xEA60) {
          float v58 = 1.0;
        }
        float v92 = v58;
        float v59 = acos(fmax(fmin((v42 * v90 + v43 * v89 + v45 * v88) / sqrt(v46 * (v90 * v90 + v89 * v89 + v88 * v88)), 1.0), -1.0));
        float v60 = v59 * 12.7323954;
        if (v91) {
          float v61 = v60;
        }
        else {
          float v61 = 0.0;
        }
        uint64_t v62 = v99;
        int v63 = &v99;
        double v64 = &v99;
        if (v99)
        {
          while (1)
          {
            while (1)
            {
              double v64 = (uint64_t **)v62;
              unint64_t v65 = v62[4];
              if (v37 >= v65) {
                break;
              }
              uint64_t v62 = *v64;
              int v63 = v64;
              if (!*v64) {
                goto LABEL_57;
              }
            }
            if (v65 >= v37) {
              break;
            }
            uint64_t v62 = v64[1];
            if (!v62)
            {
              int v63 = v64 + 1;
              goto LABEL_57;
            }
          }
        }
        else
        {
LABEL_57:
          double v66 = (uint64_t *)operator new(0x28uLL);
          v66[4] = v37;
          *double v66 = 0;
          v66[1] = 0;
          v66[2] = (uint64_t)v64;
          *int v63 = v66;
          if (*v98)
          {
            double v98 = (uint64_t **)*v98;
            double v36 = *v63;
          }
          else
          {
            double v36 = v66;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v99, v36);
          ++v100;
          unint64_t v37 = v97;
        }
        float v38 = v47;
        double v39 = (float)((float)(v61 + v38) * v92);
        *((double *)std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)v101, v37, &v97)+ 3) = v39;
        double v34 = fmin(v93, v39);
        double v29 = v86;
        double v26 = v87;
        double v28 = 2.0;
        double v30 = v85;
        double v35 = -3.0;
      }
    }
LABEL_20:
    ++v13;
  }
  while (v13 != v14);
  double v67 = (uint64_t *)v98;
  uint64_t v68 = a1;
  uint64_t v69 = 0;
  if (v98 != &v99)
  {
    double v70 = v34 + v83;
    int v71 = 0x80000000;
    double v72 = 1.79769313e308;
    do
    {
      BOOL v73 = v67 + 4;
      BOOL v74 = (double *)std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,md::mun::CollectionPoint const*>>>::__emplace_unique_key_args<md::mun::CollectionPoint const*,std::piecewise_construct_t const&,std::tuple<md::mun::CollectionPoint const* const&>,std::tuple<>>((float *)v101, v67[4], v67 + 4);
      double v75 = v74[3];
      if (v75 <= v70)
      {
        int v76 = (*(_DWORD *)(*v73 + 80) - *(_DWORD *)(v5 + 80)) / 86400000;
        if (v71 < v76 || (v71 == v76 ? (BOOL v77 = v75 < v72) : (BOOL v77 = 0), v77))
        {
          uint64_t v69 = *v73;
          int v71 = (*(_DWORD *)(*v73 + 80) - *(_DWORD *)(v5 + 80)) / 86400000;
          double v72 = v74[3];
        }
      }
      long long v78 = (uint64_t *)v67[1];
      if (v78)
      {
        do
        {
          unint64_t v79 = (uint64_t **)v78;
          long long v78 = (uint64_t *)*v78;
        }
        while (v78);
      }
      else
      {
        do
        {
          unint64_t v79 = (uint64_t **)v67[2];
          BOOL v12 = *v79 == v67;
          double v67 = (uint64_t *)v79;
        }
        while (!v12);
      }
      double v67 = (uint64_t *)v79;
    }
    while (v79 != &v99);
  }
LABEL_77:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v99);
  uint64_t v80 = __p[0];
  if (__p[0])
  {
    do
    {
      uint64_t v81 = (void *)*v80;
      operator delete(v80);
      uint64_t v80 = v81;
    }
    while (v81);
  }
  double v82 = v101[0];
  v101[0] = 0;
  if (v82) {
    operator delete(v82);
  }
  if (v94) {
    operator delete(v94);
  }
  **(void **)(v68 + 8) = v69;
}

__n128 std::__function::__func<md::mun::MuninNavigation::findTargetPoint(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&)::$_0,std::allocator<md::mun::MuninNavigation::findTargetPoint(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&)::$_0>,void ()(md::mun::MuninNavigationGraph const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57DE18;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::mun::MuninNavigation::findTargetPoint(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&)::$_0,std::allocator<md::mun::MuninNavigation::findTargetPoint(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&)::$_0>,void ()(md::mun::MuninNavigationGraph const*)>::__clone(uint64_t a1)
{
  v2 = (char *)operator new(0x30uLL);
  *(void *)v2 = &unk_1EF57DE18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void std::__function::__func<md::mun::MuninNavigation::findTargetPoint(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&)::$_0,std::allocator<md::mun::MuninNavigation::findTargetPoint(md::mun::CollectionPoint const&,geo::Geocentric<double> const&,BOOL,md::MuninSettings const&)::$_0>,void ()(md::mun::MuninNavigationGraph const*)>::~__func()
{
}

void sub_1A2747738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2748CCC(_Unwind_Exception *a1)
{
  gss::FeatureAttributeSet::~FeatureAttributeSet(v1);
  _Unwind_Resume(a1);
}

void sub_1A2748EC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2749084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A27492B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A27493C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double VKTrafficFeatureDirection(void *a1, void *a2)
{
  id v3 = a2;
  LODWORD(a1) = [v3 routeCoordinateAtDistance:*a1 beforeRouteCoordinate:20.0];
  [v3 pointAt:a1];
  double v5 = v4;
  double v7 = v6;
  [v3 pointAt:(a1 + 1)];
  double v10 = vabdd_f64(v7, v9);
  if (vabdd_f64(v5, v8) < 0.00000011920929 && v10 < 0.00000011920929)
  {
    double v14 = -1.0;
  }
  else
  {
    GEOBearingFromCoordinateToCoordinate();
    long double v13 = fmod(v12, 360.0);
    double v14 = fmod(v13 + 360.0, 360.0);
  }

  return v14;
}

void sub_1A274949C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A27495E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2749900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2749AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t md::ARApplyWorldTransformUpdatesLogic::runAfterLayout(uint64_t a1)
{
  v1 = *(int8x8_t **)(a1 + 120);
  v2 = (void *)gdc::Registry::storage<arComponents::WorldTransform>(v1);
  uint64_t result = gdc::Registry::storage<arComponents::BaseWorldTransform>(v1);
  double v5 = *(unint64_t **)(result + 56);
  double v4 = *(uint64_t **)(result + 64);
  double v7 = (unint64_t *)v2[7];
  double v6 = (uint64_t *)v2[8];
  if ((char *)v4 - (char *)v5 >= (unint64_t)((char *)v6 - (char *)v7)) {
    double v8 = v2 + 4;
  }
  else {
    double v8 = (void *)(result + 32);
  }
  if (v2 + 4 == v8 && v7 != (unint64_t *)v6)
  {
    uint64_t v11 = *(void *)(result + 32);
    unint64_t v12 = (*(void *)(result + 40) - v11) >> 3;
    unint64_t v13 = ((char *)v4 - (char *)v5) >> 3;
    uint64_t v15 = *(void *)(result + 80);
    double v14 = *(_OWORD **)(result + 88);
    double v16 = (_OWORD *)(v2[10] + 32);
    do
    {
      unint64_t v21 = *((unsigned int *)v7 + 1);
      if (v21 >> 7 < v12)
      {
        uint64_t v22 = *(void *)(v11 + 8 * (v21 >> 7));
        if (v22)
        {
          unint64_t v23 = *(unsigned __int16 *)(v22 + 2 * (v21 & 0x7F));
          if (v13 > v23)
          {
            double v24 = (uint64_t *)&v5[v23];
            if (v24 != v4 && *((_DWORD *)v24 + 1) == v21)
            {
              unint64_t v26 = *v7;
              unint64_t v27 = *v7 >> 39;
              double v28 = v14;
              if (v27 < v12)
              {
                uint64_t v29 = *(void *)(v11 + 8 * v27);
                double v28 = v14;
                if (v29)
                {
                  unint64_t v30 = *(unsigned __int16 *)(v29 + 2 * (HIDWORD(v26) & 0x7F));
                  double v28 = v14;
                  if (v13 > v30)
                  {
                    double v31 = (uint64_t *)&v5[v30];
                    if (*((_DWORD *)v31 + 1) != HIDWORD(v26) || v31 == v4) {
                      double v28 = v14;
                    }
                    else {
                      double v28 = (_OWORD *)(v15 + 80 * v30);
                    }
                  }
                }
              }
              long long v17 = v28[1];
              long long v18 = v28[2];
              long long v19 = v28[3];
              long long v20 = v28[4];
              *(v16 - 2) = *v28;
              *(v16 - 1) = v17;
              _OWORD *v16 = v18;
              v16[1] = v19;
              v16[2] = v20;
            }
          }
        }
      }
      ++v7;
      v16 += 5;
    }
    while (v7 != (unint64_t *)v6);
  }
  if ((void *)(result + 32) == v8 && v5 != (unint64_t *)v4)
  {
    uint64_t v33 = v2[4];
    unint64_t v34 = (v2[5] - v33) >> 3;
    uint64_t v36 = v2[7];
    uint64_t v35 = v2[8];
    unint64_t v37 = (v35 - v36) >> 3;
    uint64_t v38 = v2[10];
    double v39 = (_OWORD *)v2[11];
    double v40 = (long long *)(*(void *)(result + 80) + 32);
    uint64_t result = 80;
    do
    {
      unint64_t v45 = *((unsigned int *)v5 + 1);
      if (v45 >> 7 < v34)
      {
        uint64_t v46 = *(void *)(v33 + 8 * (v45 >> 7));
        if (v46)
        {
          unint64_t v47 = *(unsigned __int16 *)(v46 + 2 * (v45 & 0x7F));
          if (v37 > v47)
          {
            uint64_t v48 = v36 + 8 * v47;
            if (v48 != v35 && *(_DWORD *)(v48 + 4) == v45)
            {
              unint64_t v50 = *v5;
              unint64_t v51 = *v5 >> 39;
              double v52 = v39;
              if (v51 < v34)
              {
                uint64_t v53 = *(void *)(v33 + 8 * v51);
                double v52 = v39;
                if (v53)
                {
                  unint64_t v54 = *(unsigned __int16 *)(v53 + 2 * (HIDWORD(v50) & 0x7F));
                  double v52 = v39;
                  if (v37 > v54)
                  {
                    unint64_t v55 = HIDWORD(v50);
                    uint64_t v56 = v36 + 8 * v54;
                    BOOL v57 = *(_DWORD *)(v56 + 4) != v55 || v56 == v35;
                    double v52 = (_OWORD *)(v38 + 80 * v54);
                    if (v57) {
                      double v52 = v39;
                    }
                  }
                }
              }
              long long v41 = *(v40 - 1);
              long long v42 = *v40;
              long long v43 = v40[1];
              long long v44 = v40[2];
              *double v52 = *(v40 - 2);
              v52[1] = v41;
              v52[2] = v42;
              v52[3] = v43;
              v52[4] = v44;
            }
          }
        }
      }
      ++v5;
      v40 += 5;
    }
    while (v5 != (unint64_t *)v4);
  }
  return result;
}

uint64_t gdc::Registry::storage<arComponents::BaseWorldTransform>(int8x8_t *a1)
{
  uint64_t v10 = 0x7558385A40C6FA73;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x7558385A40C6FA73;
    if (*(void *)&v1 <= 0x7558385A40C6FA73uLL) {
      uint64_t v3 = 0x7558385A40C6FA73uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x7558385A40C6FA73;
  }
  double v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (double v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x7558385A40C6FA73)
      {
        if (v5[2] == 0x7558385A40C6FA73) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      double v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x7558385A40C6FA73) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    double v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x7558385A40C6FA73) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A2749F58(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<arComponents::BaseWorldTransform>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::BaseWorldTransform>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (*(_DWORD *)(v11 + 4) != v10 || v11 == v8) {
    return 0;
  }
  double v14 = (void *)(a1[10] + 80 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = (void *)a1[11];
  v14[3] = *(v15 - 7);
  v14[4] = *(v15 - 6);
  v14[5] = *(v15 - 5);
  v14[6] = *(v15 - 4);
  uint64_t v16 = *(v15 - 10);
  v15 -= 10;
  *double v14 = v16;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[7] = v15[7];
  v14[8] = v15[8];
  v14[9] = v15[9];
  a1[11] = v15;
  long long v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    long long v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::BaseWorldTransform>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::BaseWorldTransform>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *md::ARApplyWorldTransformUpdatesLogic::runBeforeLayout(uint64_t a1)
{
  uint64_t v2 = *(int8x8_t **)(a1 + 120);
  uint64_t v3 = (void *)gdc::Registry::storage<arComponents::WorldTransform>(v2);
  uint64_t v4 = gdc::Registry::storage<arComponents::TranslationToApply>(v2);
  uint64_t v5 = (void *)v4;
  uint64_t v6 = v4 + 32;
  uint64_t v8 = v3[7];
  uint64_t v7 = v3[8];
  if (*(void *)(v4 + 64) - *(void *)(v4 + 56) >= (unint64_t)(v7 - v8)) {
    uint64_t v9 = v3 + 4;
  }
  else {
    uint64_t v9 = (void *)(v4 + 32);
  }
  if (v3 + 4 == v9 && v8 != v7)
  {
    uint64_t v68 = v3[10];
    do
    {
      unint64_t v70 = *(unsigned int *)(v8 + 4);
      uint64_t v71 = v5[4];
      unint64_t v72 = (v5[5] - v71) >> 3;
      if (v70 >> 7 < v72)
      {
        uint64_t v73 = *(void *)(v71 + 8 * (v70 >> 7));
        if (v73)
        {
          unint64_t v74 = *(unsigned __int16 *)(v73 + 2 * (v70 & 0x7F));
          uint64_t v76 = v5[7];
          uint64_t v75 = v5[8];
          unint64_t v77 = (v75 - v76) >> 3;
          if (v77 > v74)
          {
            uint64_t v78 = v76 + 8 * v74;
            if (v78 != v75 && *(_DWORD *)(v78 + 4) == v70)
            {
              unint64_t v80 = *(void *)v8;
              unint64_t v81 = *(void *)v8 >> 39;
              if (v81 < v72
                && (uint64_t v82 = *(void *)(v71 + 8 * v81)) != 0
                && (unint64_t v83 = *(unsigned __int16 *)(v82 + 2 * (HIDWORD(v80) & 0x7F)), v77 > v83)
                && ((uint64_t v84 = v76 + 8 * v83, v84 != v75) ? (v85 = *(_DWORD *)(v84 + 4) == HIDWORD(v80)) : (v85 = 0), v85))
              {
                uint64_t v69 = (double *)(v5[10] + 24 * v83);
              }
              else
              {
                uint64_t v69 = (double *)v5[11];
              }
              _ZZN2md33ARApplyWorldTransformUpdatesLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_27ARUpDirectionUpdatesContextENS_18ARAnimationContextENS_26ARRotateTowardsUserContextENS_25LabelsExternalMeshContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_35ARApplyWorldTransformUpdatesContextEENK3__0clENS5_6EntityERN12arComponents14WorldTransformERNSL_18TranslationToApplyE(a1, v80, v68, v69);
            }
          }
        }
      }
      v68 += 80;
      v8 += 8;
    }
    while (v8 != v7);
  }
  if ((void *)v6 == v9)
  {
    uint64_t v123 = v5[7];
    uint64_t v124 = v5[8];
    if (v123 != v124)
    {
      uint64_t v125 = (double *)v5[10];
      do
      {
        unint64_t v127 = *(unsigned int *)(v123 + 4);
        uint64_t v128 = v3[4];
        unint64_t v129 = (v3[5] - v128) >> 3;
        if (v127 >> 7 < v129)
        {
          uint64_t v130 = *(void *)(v128 + 8 * (v127 >> 7));
          if (v130)
          {
            unint64_t v131 = *(unsigned __int16 *)(v130 + 2 * (v127 & 0x7F));
            uint64_t v133 = v3[7];
            uint64_t v132 = v3[8];
            unint64_t v134 = (v132 - v133) >> 3;
            if (v134 > v131)
            {
              uint64_t v135 = v133 + 8 * v131;
              if (v135 != v132 && *(_DWORD *)(v135 + 4) == v127)
              {
                unint64_t v137 = *(void *)v123;
                unint64_t v138 = *(void *)v123 >> 39;
                if (v138 < v129
                  && (uint64_t v139 = *(void *)(v128 + 8 * v138)) != 0
                  && (unint64_t v140 = *(unsigned __int16 *)(v139 + 2 * (HIDWORD(v137) & 0x7F)), v134 > v140)
                  && ((uint64_t v141 = v133 + 8 * v140, v141 != v132)
                    ? (BOOL v142 = *(_DWORD *)(v141 + 4) == HIDWORD(v137))
                    : (BOOL v142 = 0),
                      v142))
                {
                  uint64_t v126 = v3[10] + 80 * v140;
                }
                else
                {
                  uint64_t v126 = v3[11];
                }
                _ZZN2md33ARApplyWorldTransformUpdatesLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_27ARUpDirectionUpdatesContextENS_18ARAnimationContextENS_26ARRotateTowardsUserContextENS_25LabelsExternalMeshContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_35ARApplyWorldTransformUpdatesContextEENK3__0clENS5_6EntityERN12arComponents14WorldTransformERNSL_18TranslationToApplyE(a1, v137, v126, v125);
              }
            }
          }
        }
        v125 += 3;
        v123 += 8;
      }
      while (v123 != v124);
    }
  }
  uint64_t v11 = *(int8x8_t **)(a1 + 120);
  unint64_t v12 = (void *)gdc::Registry::storage<arComponents::WorldTransform>(v11);
  uint64_t v13 = gdc::Registry::storage<arComponents::RotationToApply>(v11);
  double v14 = (void *)v13;
  uint64_t v15 = v13 + 32;
  uint64_t v17 = v12[7];
  uint64_t v16 = v12[8];
  if (*(void *)(v13 + 64) - *(void *)(v13 + 56) >= (unint64_t)(v16 - v17)) {
    uint64_t v18 = v12 + 4;
  }
  else {
    uint64_t v18 = (void *)(v13 + 32);
  }
  if (v12 + 4 == v18 && v17 != v16)
  {
    uint64_t v86 = v12[10];
    do
    {
      unint64_t v88 = *(unsigned int *)(v17 + 4);
      uint64_t v89 = v14[4];
      unint64_t v90 = (v14[5] - v89) >> 3;
      if (v88 >> 7 < v90)
      {
        uint64_t v91 = *(void *)(v89 + 8 * (v88 >> 7));
        if (v91)
        {
          unint64_t v92 = *(unsigned __int16 *)(v91 + 2 * (v88 & 0x7F));
          uint64_t v94 = v14[7];
          uint64_t v93 = v14[8];
          unint64_t v95 = (v93 - v94) >> 3;
          if (v95 > v92)
          {
            uint64_t v96 = v94 + 8 * v92;
            if (v96 != v93 && *(_DWORD *)(v96 + 4) == v88)
            {
              unint64_t v98 = *(void *)v17;
              unint64_t v99 = *(void *)v17 >> 39;
              if (v99 < v90
                && (uint64_t v100 = *(void *)(v89 + 8 * v99)) != 0
                && (unint64_t v101 = *(unsigned __int16 *)(v100 + 2 * (HIDWORD(v98) & 0x7F)), v95 > v101)
                && ((uint64_t v102 = v94 + 8 * v101, v102 != v93) ? (v103 = *(_DWORD *)(v102 + 4) == HIDWORD(v98)) : (v103 = 0),
                    v103))
              {
                double v87 = (float *)(v14[10] + 16 * v101);
              }
              else
              {
                double v87 = (float *)v14[11];
              }
              _ZZN2md33ARApplyWorldTransformUpdatesLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_27ARUpDirectionUpdatesContextENS_18ARAnimationContextENS_26ARRotateTowardsUserContextENS_25LabelsExternalMeshContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_35ARApplyWorldTransformUpdatesContextEENK3__1clENS5_6EntityERN12arComponents14WorldTransformERNSL_15RotationToApplyE(a1, v98, v86, v87);
            }
          }
        }
      }
      v86 += 80;
      v17 += 8;
    }
    while (v17 != v16);
  }
  if ((void *)v15 == v18)
  {
    uint64_t v143 = v14[7];
    uint64_t v144 = v14[8];
    if (v143 != v144)
    {
      double v145 = (float *)v14[10];
      do
      {
        unint64_t v147 = *(unsigned int *)(v143 + 4);
        uint64_t v148 = v12[4];
        unint64_t v149 = (v12[5] - v148) >> 3;
        if (v147 >> 7 < v149)
        {
          uint64_t v150 = *(void *)(v148 + 8 * (v147 >> 7));
          if (v150)
          {
            unint64_t v151 = *(unsigned __int16 *)(v150 + 2 * (v147 & 0x7F));
            uint64_t v153 = v12[7];
            uint64_t v152 = v12[8];
            unint64_t v154 = (v152 - v153) >> 3;
            if (v154 > v151)
            {
              uint64_t v155 = v153 + 8 * v151;
              if (v155 != v152 && *(_DWORD *)(v155 + 4) == v147)
              {
                unint64_t v157 = *(void *)v143;
                unint64_t v158 = *(void *)v143 >> 39;
                if (v158 < v149
                  && (uint64_t v159 = *(void *)(v148 + 8 * v158)) != 0
                  && (unint64_t v160 = *(unsigned __int16 *)(v159 + 2 * (HIDWORD(v157) & 0x7F)), v154 > v160)
                  && ((uint64_t v161 = v153 + 8 * v160, v161 != v152)
                    ? (BOOL v162 = *(_DWORD *)(v161 + 4) == HIDWORD(v157))
                    : (BOOL v162 = 0),
                      v162))
                {
                  uint64_t v146 = v12[10] + 80 * v160;
                }
                else
                {
                  uint64_t v146 = v12[11];
                }
                _ZZN2md33ARApplyWorldTransformUpdatesLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_27ARUpDirectionUpdatesContextENS_18ARAnimationContextENS_26ARRotateTowardsUserContextENS_25LabelsExternalMeshContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_35ARApplyWorldTransformUpdatesContextEENK3__1clENS5_6EntityERN12arComponents14WorldTransformERNSL_15RotationToApplyE(a1, v157, v146, v145);
              }
            }
          }
        }
        v145 += 4;
        v143 += 8;
      }
      while (v143 != v144);
    }
  }
  unint64_t v20 = *(int8x8_t **)(a1 + 120);
  uint64_t v21 = (void *)gdc::Registry::storage<arComponents::WorldTransform>(v20);
  uint64_t v22 = gdc::Registry::storage<arComponents::ScaleToApply>(v20);
  unint64_t v23 = (void *)v22;
  uint64_t v24 = v22 + 32;
  uint64_t v26 = v21[7];
  uint64_t v25 = v21[8];
  if (*(void *)(v22 + 64) - *(void *)(v22 + 56) >= (unint64_t)(v25 - v26)) {
    unint64_t v27 = v21 + 4;
  }
  else {
    unint64_t v27 = (void *)(v22 + 32);
  }
  if (v21 + 4 == v27 && v26 != v25)
  {
    uint64_t v104 = v21[10];
    do
    {
      unint64_t v106 = *(unsigned int *)(v26 + 4);
      uint64_t v107 = v23[4];
      unint64_t v108 = (v23[5] - v107) >> 3;
      if (v106 >> 7 < v108)
      {
        uint64_t v109 = *(void *)(v107 + 8 * (v106 >> 7));
        if (v109)
        {
          unint64_t v110 = *(unsigned __int16 *)(v109 + 2 * (v106 & 0x7F));
          uint64_t v112 = v23[7];
          uint64_t v111 = v23[8];
          unint64_t v113 = (v111 - v112) >> 3;
          if (v113 > v110)
          {
            uint64_t v114 = v112 + 8 * v110;
            if (v114 != v111 && *(_DWORD *)(v114 + 4) == v106)
            {
              unint64_t v116 = *(void *)v26;
              unint64_t v117 = *(void *)v26 >> 39;
              if (v117 < v108
                && (uint64_t v118 = *(void *)(v107 + 8 * v117)) != 0
                && (unint64_t v119 = *(unsigned __int16 *)(v118 + 2 * (HIDWORD(v116) & 0x7F)), v113 > v119)
                && ((uint64_t v120 = v112 + 8 * v119, v120 != v111)
                  ? (BOOL v121 = *(_DWORD *)(v120 + 4) == HIDWORD(v116))
                  : (BOOL v121 = 0),
                    v121))
              {
                double v105 = (double *)(v23[10] + 8 * v119);
              }
              else
              {
                double v105 = (double *)v23[11];
              }
              _ZZN2md33ARApplyWorldTransformUpdatesLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_27ARUpDirectionUpdatesContextENS_18ARAnimationContextENS_26ARRotateTowardsUserContextENS_25LabelsExternalMeshContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_35ARApplyWorldTransformUpdatesContextEENK3__2clENS5_6EntityERN12arComponents14WorldTransformERNSL_12ScaleToApplyE(a1, v116, v104, v105);
            }
          }
        }
      }
      v104 += 80;
      v26 += 8;
    }
    while (v26 != v25);
  }
  if ((void *)v24 == v27)
  {
    uint64_t v163 = v23[7];
    uint64_t v164 = v23[8];
    if (v163 != v164)
    {
      uint64_t v165 = (double *)v23[10];
      do
      {
        unint64_t v167 = *(unsigned int *)(v163 + 4);
        uint64_t v168 = v21[4];
        unint64_t v169 = (v21[5] - v168) >> 3;
        if (v167 >> 7 < v169)
        {
          uint64_t v170 = *(void *)(v168 + 8 * (v167 >> 7));
          if (v170)
          {
            unint64_t v171 = *(unsigned __int16 *)(v170 + 2 * (v167 & 0x7F));
            uint64_t v173 = v21[7];
            uint64_t v172 = v21[8];
            unint64_t v174 = (v172 - v173) >> 3;
            if (v174 > v171)
            {
              uint64_t v175 = v173 + 8 * v171;
              if (v175 != v172 && *(_DWORD *)(v175 + 4) == v167)
              {
                unint64_t v177 = *(void *)v163;
                unint64_t v178 = *(void *)v163 >> 39;
                if (v178 < v169
                  && (uint64_t v179 = *(void *)(v168 + 8 * v178)) != 0
                  && (unint64_t v180 = *(unsigned __int16 *)(v179 + 2 * (HIDWORD(v177) & 0x7F)), v174 > v180)
                  && ((uint64_t v181 = v173 + 8 * v180, v181 != v172)
                    ? (BOOL v182 = *(_DWORD *)(v181 + 4) == HIDWORD(v177))
                    : (BOOL v182 = 0),
                      v182))
                {
                  uint64_t v166 = v21[10] + 80 * v180;
                }
                else
                {
                  uint64_t v166 = v21[11];
                }
                _ZZN2md33ARApplyWorldTransformUpdatesLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_27ARUpDirectionUpdatesContextENS_18ARAnimationContextENS_26ARRotateTowardsUserContextENS_25LabelsExternalMeshContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_35ARApplyWorldTransformUpdatesContextEENK3__2clENS5_6EntityERN12arComponents14WorldTransformERNSL_12ScaleToApplyE(a1, v177, v166, v165);
              }
            }
          }
        }
        ++v165;
        v163 += 8;
      }
      while (v163 != v164);
    }
  }
  uint64_t v29 = *(int8x8_t **)(a1 + 120);
  unint64_t v30 = (void *)gdc::Registry::storage<arComponents::WorldTransform>(v29);
  double v31 = (void *)gdc::Registry::storage<arComponents::UpRelativeTranslationToApply>(v29);
  uint64_t v32 = gdc::Registry::storage<arComponents::UpDirection>(v29);
  uint64_t v33 = (void *)v32;
  uint64_t v34 = v32 + 32;
  uint64_t v36 = v30[7];
  uint64_t v35 = v30[8];
  if (v31[8] - v31[7] >= (unint64_t)(v35 - v36)) {
    unint64_t v37 = v30 + 4;
  }
  else {
    unint64_t v37 = v31 + 4;
  }
  if (*(void *)(v32 + 64) - *(void *)(v32 + 56) >= v37[4] - v37[3]) {
    uint64_t v38 = v37;
  }
  else {
    uint64_t v38 = (void *)(v32 + 32);
  }
  if (v30 + 4 == v38 && v36 != v35)
  {
    uint64_t v122 = v30[10];
    do
    {
      unint64_t v190 = *(unsigned int *)(v36 + 4);
      unint64_t v191 = v190 >> 7;
      uint64_t v192 = v31[4];
      unint64_t v193 = (v31[5] - v192) >> 3;
      if (v190 >> 7 >= v193) {
        goto LABEL_194;
      }
      uint64_t v194 = *(void *)(v192 + 8 * v191);
      if (!v194) {
        goto LABEL_194;
      }
      unint64_t v195 = *(unsigned __int16 *)(v194 + 2 * (v190 & 0x7F));
      uint64_t v197 = v31[7];
      uint64_t v196 = v31[8];
      unint64_t v198 = (v196 - v197) >> 3;
      if (v198 <= v195) {
        goto LABEL_194;
      }
      uint64_t v199 = v197 + 8 * v195;
      if (v199 == v196 || *(_DWORD *)(v199 + 4) != v190) {
        goto LABEL_194;
      }
      uint64_t v201 = v33[4];
      unint64_t v202 = (v33[5] - v201) >> 3;
      if (v191 >= v202) {
        goto LABEL_194;
      }
      uint64_t v203 = *(void *)(v201 + 8 * v191);
      if (!v203) {
        goto LABEL_194;
      }
      unint64_t v204 = *(unsigned __int16 *)(v203 + 2 * (v190 & 0x7F));
      uint64_t v206 = v33[7];
      uint64_t v205 = v33[8];
      unint64_t v207 = (v205 - v206) >> 3;
      if (v207 <= v204) {
        goto LABEL_194;
      }
      uint64_t v208 = v206 + 8 * v204;
      if (v208 == v205 || *(_DWORD *)(v208 + 4) != v190) {
        goto LABEL_194;
      }
      unint64_t v210 = *(void *)v36;
      uint64_t v211 = HIDWORD(*(void *)v36);
      unint64_t v212 = *(void *)v36 >> 39;
      if (v212 < v193
        && (uint64_t v213 = *(void *)(v192 + 8 * v212)) != 0
        && (unint64_t v214 = *(unsigned __int16 *)(v213 + 2 * (HIDWORD(v210) & 0x7F)), v198 > v214)
        && ((uint64_t v215 = v197 + 8 * v214, v215 != v196) ? (v216 = *(_DWORD *)(v215 + 4) == v211) : (v216 = 0), v216))
      {
        double v217 = (double *)(v31[10] + 8 * v214);
        if (v212 >= v202) {
          goto LABEL_192;
        }
      }
      else
      {
        double v217 = (double *)v31[11];
        if (v212 >= v202) {
          goto LABEL_192;
        }
      }
      uint64_t v218 = *(void *)(v201 + 8 * v212);
      if (v218)
      {
        unint64_t v219 = *(unsigned __int16 *)(v218 + 2 * (HIDWORD(v210) & 0x7F));
        if (v207 > v219)
        {
          uint64_t v220 = v206 + 8 * v219;
          if (v220 != v205 && *(_DWORD *)(v220 + 4) == v211)
          {
            uint64_t v189 = (float32x2_t *)(v33[10] + 12 * v219);
            goto LABEL_193;
          }
        }
      }
LABEL_192:
      uint64_t v189 = (float32x2_t *)v33[11];
LABEL_193:
      _ZZN2md33ARApplyWorldTransformUpdatesLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_27ARUpDirectionUpdatesContextENS_18ARAnimationContextENS_26ARRotateTowardsUserContextENS_25LabelsExternalMeshContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_35ARApplyWorldTransformUpdatesContextEENK3__3clENS5_6EntityERN12arComponents14WorldTransformERNSL_28UpRelativeTranslationToApplyERNSL_11UpDirectionE(a1, v210, v122, v217, v189);
LABEL_194:
      v122 += 80;
      v36 += 8;
    }
    while (v36 != v35);
  }
  if (v31 + 4 == v38)
  {
    uint64_t v183 = v31[7];
    uint64_t v184 = v31[8];
    if (v183 != v184)
    {
      uint64_t v185 = (double *)v31[10];
      do
      {
        unint64_t v223 = *(unsigned int *)(v183 + 4);
        unint64_t v224 = v223 >> 7;
        uint64_t v225 = v30[4];
        unint64_t v226 = (v30[5] - v225) >> 3;
        if (v223 >> 7 >= v226) {
          goto LABEL_231;
        }
        uint64_t v227 = *(void *)(v225 + 8 * v224);
        if (!v227) {
          goto LABEL_231;
        }
        unint64_t v228 = *(unsigned __int16 *)(v227 + 2 * (v223 & 0x7F));
        uint64_t v230 = v30[7];
        uint64_t v229 = v30[8];
        unint64_t v231 = (v229 - v230) >> 3;
        if (v231 <= v228) {
          goto LABEL_231;
        }
        uint64_t v232 = v230 + 8 * v228;
        if (v232 == v229 || *(_DWORD *)(v232 + 4) != v223) {
          goto LABEL_231;
        }
        uint64_t v234 = v33[4];
        unint64_t v235 = (v33[5] - v234) >> 3;
        if (v224 >= v235) {
          goto LABEL_231;
        }
        uint64_t v236 = *(void *)(v234 + 8 * v224);
        if (!v236) {
          goto LABEL_231;
        }
        unint64_t v237 = *(unsigned __int16 *)(v236 + 2 * (v223 & 0x7F));
        uint64_t v239 = v33[7];
        uint64_t v238 = v33[8];
        unint64_t v240 = (v238 - v239) >> 3;
        if (v240 <= v237) {
          goto LABEL_231;
        }
        uint64_t v241 = v239 + 8 * v237;
        if (v241 == v238 || *(_DWORD *)(v241 + 4) != v223) {
          goto LABEL_231;
        }
        unint64_t v243 = *(void *)v183;
        uint64_t v244 = HIDWORD(*(void *)v183);
        unint64_t v245 = *(void *)v183 >> 39;
        if (v245 < v226
          && (uint64_t v246 = *(void *)(v225 + 8 * v245)) != 0
          && (unint64_t v247 = *(unsigned __int16 *)(v246 + 2 * (HIDWORD(v243) & 0x7F)), v231 > v247)
          && ((uint64_t v248 = v230 + 8 * v247, v248 != v229) ? (v249 = *(_DWORD *)(v248 + 4) == v244) : (v249 = 0), v249))
        {
          uint64_t v250 = v30[10] + 80 * v247;
          if (v245 >= v235) {
            goto LABEL_229;
          }
        }
        else
        {
          uint64_t v250 = v30[11];
          if (v245 >= v235) {
            goto LABEL_229;
          }
        }
        uint64_t v251 = *(void *)(v234 + 8 * v245);
        if (v251)
        {
          unint64_t v252 = *(unsigned __int16 *)(v251 + 2 * (HIDWORD(v243) & 0x7F));
          if (v240 > v252)
          {
            uint64_t v253 = v239 + 8 * v252;
            if (v253 != v238 && *(_DWORD *)(v253 + 4) == v244)
            {
              double v222 = (float32x2_t *)(v33[10] + 12 * v252);
              goto LABEL_230;
            }
          }
        }
LABEL_229:
        double v222 = (float32x2_t *)v33[11];
LABEL_230:
        _ZZN2md33ARApplyWorldTransformUpdatesLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_27ARUpDirectionUpdatesContextENS_18ARAnimationContextENS_26ARRotateTowardsUserContextENS_25LabelsExternalMeshContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_35ARApplyWorldTransformUpdatesContextEENK3__3clENS5_6EntityERN12arComponents14WorldTransformERNSL_28UpRelativeTranslationToApplyERNSL_11UpDirectionE(a1, v243, v250, v185, v222);
LABEL_231:
        ++v185;
        v183 += 8;
      }
      while (v183 != v184);
    }
  }
  if ((void *)v34 == v38)
  {
    uint64_t v186 = v33[7];
    uint64_t v187 = v33[8];
    if (v186 != v187)
    {
      unint64_t v188 = (float32x2_t *)v33[10];
      do
      {
        unint64_t v256 = *(unsigned int *)(v186 + 4);
        unint64_t v257 = v256 >> 7;
        uint64_t v258 = v30[4];
        unint64_t v259 = (v30[5] - v258) >> 3;
        if (v256 >> 7 >= v259) {
          goto LABEL_268;
        }
        uint64_t v260 = *(void *)(v258 + 8 * v257);
        if (!v260) {
          goto LABEL_268;
        }
        unint64_t v261 = *(unsigned __int16 *)(v260 + 2 * (v256 & 0x7F));
        uint64_t v263 = v30[7];
        uint64_t v262 = v30[8];
        unint64_t v264 = (v262 - v263) >> 3;
        if (v264 <= v261) {
          goto LABEL_268;
        }
        uint64_t v265 = v263 + 8 * v261;
        if (v265 == v262 || *(_DWORD *)(v265 + 4) != v256) {
          goto LABEL_268;
        }
        uint64_t v267 = v31[4];
        unint64_t v268 = (v31[5] - v267) >> 3;
        if (v257 >= v268) {
          goto LABEL_268;
        }
        uint64_t v269 = *(void *)(v267 + 8 * v257);
        if (!v269) {
          goto LABEL_268;
        }
        unint64_t v270 = *(unsigned __int16 *)(v269 + 2 * (v256 & 0x7F));
        uint64_t v272 = v31[7];
        uint64_t v271 = v31[8];
        unint64_t v273 = (v271 - v272) >> 3;
        if (v273 <= v270) {
          goto LABEL_268;
        }
        uint64_t v274 = v272 + 8 * v270;
        if (v274 == v271 || *(_DWORD *)(v274 + 4) != v256) {
          goto LABEL_268;
        }
        unint64_t v276 = *(void *)v186;
        uint64_t v277 = HIDWORD(*(void *)v186);
        unint64_t v278 = *(void *)v186 >> 39;
        if (v278 < v259
          && (uint64_t v279 = *(void *)(v258 + 8 * v278)) != 0
          && (unint64_t v280 = *(unsigned __int16 *)(v279 + 2 * (HIDWORD(v276) & 0x7F)), v264 > v280)
          && ((uint64_t v281 = v263 + 8 * v280, v281 != v262) ? (v282 = *(_DWORD *)(v281 + 4) == v277) : (v282 = 0), v282))
        {
          uint64_t v283 = v30[10] + 80 * v280;
          if (v278 >= v268) {
            goto LABEL_266;
          }
        }
        else
        {
          uint64_t v283 = v30[11];
          if (v278 >= v268) {
            goto LABEL_266;
          }
        }
        uint64_t v284 = *(void *)(v267 + 8 * v278);
        if (v284)
        {
          unint64_t v285 = *(unsigned __int16 *)(v284 + 2 * (HIDWORD(v276) & 0x7F));
          if (v273 > v285)
          {
            uint64_t v286 = v272 + 8 * v285;
            if (v286 != v271 && *(_DWORD *)(v286 + 4) == v277)
            {
              v255 = (double *)(v31[10] + 8 * v285);
              goto LABEL_267;
            }
          }
        }
LABEL_266:
        v255 = (double *)v31[11];
LABEL_267:
        _ZZN2md33ARApplyWorldTransformUpdatesLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_27ARUpDirectionUpdatesContextENS_18ARAnimationContextENS_26ARRotateTowardsUserContextENS_25LabelsExternalMeshContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_35ARApplyWorldTransformUpdatesContextEENK3__3clENS5_6EntityERN12arComponents14WorldTransformERNSL_28UpRelativeTranslationToApplyERNSL_11UpDirectionE(a1, v276, v283, v255, v188);
LABEL_268:
        unint64_t v188 = (float32x2_t *)((char *)v188 + 12);
        v186 += 8;
      }
      while (v186 != v187);
    }
  }
  double v40 = (void *)gdc::Registry::storage<arComponents::TranslationToApply>(*(int8x8_t **)(a1 + 120));
  long long v41 = v40;
  if (v40[29] && (long long v42 = (void *)v40[28]) != 0)
  {
    uint64_t v43 = v40[31];
    uint64_t v44 = v40[7];
    uint64_t v45 = (v40[8] - v44) >> 3;
    while (1)
    {
      uint64_t v290 = v44;
      uint64_t v291 = v45;
      uint64_t v289 = v43;
      uint64_t v46 = v42[6];
      if (!v46) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v46 + 48))(v46, &v289, &v290);
      long long v42 = (void *)*v42;
      if (!v42) {
        goto LABEL_46;
      }
    }
  }
  else
  {
LABEL_46:
    v41[8] = v41[7];
    v41[11] = v41[10];
    unint64_t v47 = (void *)gdc::Registry::storage<arComponents::UpRelativeTranslationToApply>(*(int8x8_t **)(a1 + 120));
    uint64_t v48 = v47;
    if (v47[29] && (BOOL v49 = (void *)v47[28]) != 0)
    {
      uint64_t v50 = v47[31];
      uint64_t v51 = v47[7];
      uint64_t v52 = (v47[8] - v51) >> 3;
      while (1)
      {
        uint64_t v290 = v51;
        uint64_t v291 = v52;
        uint64_t v289 = v50;
        uint64_t v53 = v49[6];
        if (!v53) {
          break;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v53 + 48))(v53, &v289, &v290);
        BOOL v49 = (void *)*v49;
        if (!v49) {
          goto LABEL_51;
        }
      }
    }
    else
    {
LABEL_51:
      v48[8] = v48[7];
      v48[11] = v48[10];
      unint64_t v54 = (void *)gdc::Registry::storage<arComponents::RotationToApply>(*(int8x8_t **)(a1 + 120));
      unint64_t v55 = v54;
      if (v54[29] && (uint64_t v56 = (void *)v54[28]) != 0)
      {
        uint64_t v57 = v54[31];
        uint64_t v58 = v54[7];
        uint64_t v59 = (v54[8] - v58) >> 3;
        while (1)
        {
          uint64_t v290 = v58;
          uint64_t v291 = v59;
          uint64_t v289 = v57;
          uint64_t v60 = v56[6];
          if (!v60) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v60 + 48))(v60, &v289, &v290);
          uint64_t v56 = (void *)*v56;
          if (!v56) {
            goto LABEL_56;
          }
        }
      }
      else
      {
LABEL_56:
        v55[8] = v55[7];
        v55[11] = v55[10];
        uint64_t result = (void *)gdc::Registry::storage<arComponents::ScaleToApply>(*(int8x8_t **)(a1 + 120));
        uint64_t v62 = result;
        if (!result[29] || (int v63 = (void *)result[28]) == 0)
        {
LABEL_61:
          v62[8] = v62[7];
          v62[11] = v62[10];
          return result;
        }
        uint64_t v64 = result[31];
        uint64_t v65 = result[7];
        uint64_t v66 = (result[8] - v65) >> 3;
        while (1)
        {
          uint64_t v290 = v65;
          uint64_t v291 = v66;
          uint64_t v289 = v64;
          uint64_t v67 = v63[6];
          if (!v67) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v67 + 48))(v67, &v289, &v290);
          int v63 = (void *)*v63;
          if (!v63) {
            goto LABEL_61;
          }
        }
      }
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return (void *)gdc::Registry::storage<arComponents::TranslationToApply>(v288);
}

uint64_t gdc::Registry::storage<arComponents::TranslationToApply>(int8x8_t *a1)
{
  uint64_t v10 = 0x2EB7B1A523944070;
  int8x8_t v1 = a1[16];
  if (!*(void *)&v1) {
    goto LABEL_21;
  }
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] > 1uLL)
  {
    uint64_t v3 = 0x2EB7B1A523944070;
    if (*(void *)&v1 <= 0x2EB7B1A523944070uLL) {
      uint64_t v3 = 0x2EB7B1A523944070uLL % *(void *)&v1;
    }
  }
  else
  {
    uint64_t v3 = (*(void *)&v1 - 1) & 0x2EB7B1A523944070;
  }
  uint64_t v4 = *(void **)(*(void *)&a1[15] + 8 * v3);
  if (!v4 || (uint64_t v5 = (void *)*v4) == 0) {
LABEL_21:
  }
    operator new();
  if (v2.u32[0] < 2uLL)
  {
    uint64_t v6 = *(void *)&v1 - 1;
    while (1)
    {
      uint64_t v8 = v5[1];
      if (v8 == 0x2EB7B1A523944070)
      {
        if (v5[2] == 0x2EB7B1A523944070) {
          return v5[3];
        }
      }
      else if ((v8 & v6) != v3)
      {
        goto LABEL_21;
      }
      uint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v5[1];
    if (v7 == 0x2EB7B1A523944070) {
      break;
    }
    if (v7 >= *(void *)&v1) {
      v7 %= *(void *)&v1;
    }
    if (v7 != v3) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_21;
    }
  }
  if (v5[2] != 0x2EB7B1A523944070) {
    goto LABEL_11;
  }
  return v5[3];
}

void sub_1A274B094(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void _ZZN2md33ARApplyWorldTransformUpdatesLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_27ARUpDirectionUpdatesContextENS_18ARAnimationContextENS_26ARRotateTowardsUserContextENS_25LabelsExternalMeshContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_35ARApplyWorldTransformUpdatesContextEENK3__0clENS5_6EntityERN12arComponents14WorldTransformERNSL_18TranslationToApplyE(uint64_t a1, unint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v8 = (void *)gdc::Registry::storage<arComponents::BaseWorldTransform>(*(int8x8_t **)(a1 + 120));
  uint64_t v9 = v8[4];
  if (a2 >> 39 >= (v8[5] - v9) >> 3
    || (uint64_t v10 = *(void *)(v9 + 8 * (a2 >> 39))) == 0
    || (unint64_t v11 = *(unsigned __int16 *)(v10 + 2 * (HIDWORD(a2) & 0x7F)), v13 = v8[7], v12 = v8[8], v11 >= (v12 - v13) >> 3)
    || ((uint64_t v14 = v13 + 8 * v11, v14 != v12) ? (v15 = *(_DWORD *)(v14 + 4) == HIDWORD(a2)) : (v15 = 0), !v15))
  {
    uint64_t v16 = *(int8x8_t **)(a1 + 120);
    long long v20 = *(_OWORD *)a3;
    uint64_t v21 = *(void *)(a3 + 16);
    long long v22 = *(_OWORD *)(a3 + 24);
    uint64_t v23 = *(void *)(a3 + 40);
    uint64_t v24 = *(void *)(a3 + 48);
    long long v25 = *(_OWORD *)(a3 + 56);
    uint64_t v26 = *(void *)(a3 + 72);
    uint64_t v17 = (void *)gdc::Registry::storage<arComponents::BaseWorldTransform>(v16);
    gdc::ComponentStorageWrapper<arComponents::WorldTransform>::emplace(v17, a2, &v20);
  }
  double v18 = *(double *)(a3 + 8);
  *(double *)a3 = *(double *)a3 + *a4;
  *(double *)(a3 + 8) = v18 + a4[1];
  *(double *)(a3 + 16) = *(double *)(a3 + 16) + a4[2];
  uint64_t v19 = (void *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>(*(int8x8_t **)(a1 + 120));
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v19, a2);
}

void _ZZN2md33ARApplyWorldTransformUpdatesLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_27ARUpDirectionUpdatesContextENS_18ARAnimationContextENS_26ARRotateTowardsUserContextENS_25LabelsExternalMeshContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_35ARApplyWorldTransformUpdatesContextEENK3__1clENS5_6EntityERN12arComponents14WorldTransformERNSL_15RotationToApplyE(uint64_t a1, unint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v8 = (void *)gdc::Registry::storage<arComponents::BaseWorldTransform>(*(int8x8_t **)(a1 + 120));
  uint64_t v9 = v8[4];
  if (a2 >> 39 >= (v8[5] - v9) >> 3
    || (uint64_t v10 = *(void *)(v9 + 8 * (a2 >> 39))) == 0
    || (unint64_t v11 = *(unsigned __int16 *)(v10 + 2 * (HIDWORD(a2) & 0x7F)), v13 = v8[7], v12 = v8[8], v11 >= (v12 - v13) >> 3)
    || ((uint64_t v14 = v13 + 8 * v11, v14 != v12) ? (v15 = *(_DWORD *)(v14 + 4) == HIDWORD(a2)) : (v15 = 0), !v15))
  {
    uint64_t v16 = *(int8x8_t **)(a1 + 120);
    long long v27 = *(_OWORD *)a3;
    uint64_t v28 = *(void *)(a3 + 16);
    long long v29 = *(_OWORD *)(a3 + 24);
    uint64_t v30 = *(void *)(a3 + 40);
    uint64_t v31 = *(void *)(a3 + 48);
    long long v32 = *(_OWORD *)(a3 + 56);
    uint64_t v33 = *(void *)(a3 + 72);
    uint64_t v17 = (void *)gdc::Registry::storage<arComponents::BaseWorldTransform>(v16);
    gdc::ComponentStorageWrapper<arComponents::WorldTransform>::emplace(v17, a2, &v27);
  }
  double v18 = *a4;
  double v19 = a4[1];
  double v20 = a4[2];
  double v21 = a4[3];
  double v23 = *(double *)(a3 + 40);
  double v22 = *(double *)(a3 + 48);
  double v24 = *(double *)(a3 + 24);
  double v25 = *(double *)(a3 + 32);
  *(double *)(a3 + 24) = v22 * v18 + v24 * v21 + v25 * v20 - v23 * v19;
  *(double *)(a3 + 32) = v25 * v21 - (v24 * v20 - v22 * v19) + v23 * v18;
  *(double *)(a3 + 40) = v22 * v20 + v24 * v19 - v25 * v18 + v23 * v21;
  *(double *)(a3 + 48) = -(v24 * v18 + v25 * v19 + v23 * v20 - v22 * v21);
  uint64_t v26 = (void *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>(*(int8x8_t **)(a1 + 120));
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v26, a2);
}

void _ZZN2md33ARApplyWorldTransformUpdatesLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_27ARUpDirectionUpdatesContextENS_18ARAnimationContextENS_26ARRotateTowardsUserContextENS_25LabelsExternalMeshContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_35ARApplyWorldTransformUpdatesContextEENK3__2clENS5_6EntityERN12arComponents14WorldTransformERNSL_12ScaleToApplyE(uint64_t a1, unint64_t a2, uint64_t a3, double *a4)
{
  uint64_t v8 = (void *)gdc::Registry::storage<arComponents::BaseWorldTransform>(*(int8x8_t **)(a1 + 120));
  uint64_t v9 = v8[4];
  if (a2 >> 39 >= (v8[5] - v9) >> 3
    || (uint64_t v10 = *(void *)(v9 + 8 * (a2 >> 39))) == 0
    || (unint64_t v11 = *(unsigned __int16 *)(v10 + 2 * (HIDWORD(a2) & 0x7F)), v13 = v8[7], v12 = v8[8], v11 >= (v12 - v13) >> 3)
    || ((uint64_t v14 = v13 + 8 * v11, v14 != v12) ? (v15 = *(_DWORD *)(v14 + 4) == HIDWORD(a2)) : (v15 = 0), !v15))
  {
    uint64_t v16 = *(int8x8_t **)(a1 + 120);
    long long v20 = *(_OWORD *)a3;
    uint64_t v21 = *(void *)(a3 + 16);
    long long v22 = *(_OWORD *)(a3 + 24);
    uint64_t v23 = *(void *)(a3 + 40);
    uint64_t v24 = *(void *)(a3 + 48);
    long long v25 = *(_OWORD *)(a3 + 56);
    uint64_t v26 = *(void *)(a3 + 72);
    uint64_t v17 = (void *)gdc::Registry::storage<arComponents::BaseWorldTransform>(v16);
    gdc::ComponentStorageWrapper<arComponents::WorldTransform>::emplace(v17, a2, &v20);
  }
  double v18 = *(double *)(a3 + 72) * *a4;
  *(float64x2_t *)(a3 + 56) = vmulq_n_f64(*(float64x2_t *)(a3 + 56), *a4);
  *(double *)(a3 + 72) = v18;
  double v19 = (void *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>(*(int8x8_t **)(a1 + 120));
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v19, a2);
}

void _ZZN2md33ARApplyWorldTransformUpdatesLogic15runBeforeLayoutERKNS_13LayoutContextERKNS_17LogicDependenciesIJN3gdc8TypeListIJNS_27ARUpDirectionUpdatesContextENS_18ARAnimationContextENS_26ARRotateTowardsUserContextENS_25LabelsExternalMeshContextEEEENS6_IJEEEEE20ResolvedDependenciesERNS_35ARApplyWorldTransformUpdatesContextEENK3__3clENS5_6EntityERN12arComponents14WorldTransformERNSL_28UpRelativeTranslationToApplyERNSL_11UpDirectionE(uint64_t a1, unint64_t a2, uint64_t a3, double *a4, float32x2_t *a5)
{
  uint64_t v10 = (void *)gdc::Registry::storage<arComponents::BaseWorldTransform>(*(int8x8_t **)(a1 + 120));
  uint64_t v11 = v10[4];
  if (a2 >> 39 >= (v10[5] - v11) >> 3
    || (uint64_t v12 = *(void *)(v11 + 8 * (a2 >> 39))) == 0
    || (v13 = *(unsigned __int16 *)(v12 + 2 * (HIDWORD(a2) & 0x7F)), v15 = v10[7], uint64_t v14 = v10[8], v13 >= (v14 - v15) >> 3)
    || ((uint64_t v16 = v15 + 8 * v13, v16 != v14) ? (v17 = *(_DWORD *)(v16 + 4) == HIDWORD(a2)) : (v17 = 0), !v17))
  {
    double v18 = *(int8x8_t **)(a1 + 120);
    float64x2_t v23 = *(float64x2_t *)a3;
    uint64_t v24 = *(void *)(a3 + 16);
    long long v25 = *(_OWORD *)(a3 + 24);
    uint64_t v26 = *(void *)(a3 + 40);
    uint64_t v27 = *(void *)(a3 + 48);
    long long v28 = *(_OWORD *)(a3 + 56);
    uint64_t v29 = *(void *)(a3 + 72);
    double v19 = (void *)gdc::Registry::storage<arComponents::BaseWorldTransform>(v18);
    gdc::ComponentStorageWrapper<arComponents::WorldTransform>::emplace(v19, a2, (long long *)&v23);
  }
  double v20 = a5[1].f32[0];
  double v21 = *a4;
  *(float64x2_t *)a3 = vmlaq_n_f64(*(float64x2_t *)a3, vcvtq_f64_f32(*a5), *a4);
  *(double *)(a3 + 16) = *(double *)(a3 + 16) + v21 * v20;
  long long v22 = (void *)gdc::Registry::storage<arComponents::RequiresUpdateInRenderLayer<arComponents::WorldTransform>>(*(int8x8_t **)(a1 + 120));
  gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v22, a2);
}

BOOL gdc::ComponentStorageWrapper<arComponents::TranslationToApply>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<arComponents::TranslationToApply>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = (void *)(a1[10] + 24 * v7);
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  uint64_t v16 = *(void *)(v15 - 24);
  v15 -= 24;
  *uint64_t v14 = v16;
  v14[1] = *(void *)(v15 + 8);
  v14[2] = *(void *)(v15 + 16);
  a1[11] = v15;
  BOOL v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    BOOL v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<arComponents::TranslationToApply>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<arComponents::TranslationToApply>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void md::ARApplyWorldTransformUpdatesLogic::~ARApplyWorldTransformUpdatesLogic(md::ARApplyWorldTransformUpdatesLogic *this)
{
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
  JUMPOUT(0x1A6239270);
}

{
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

void md::RealisticPassList::buildFrameGraph(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  v66[4] = *MEMORY[0x1E4F143B8];
  id v8 = *(id *)(a3 + 104);
  uint64_t v9 = +[VKDebugSettings sharedSettings];
  if ([v8 supportsFramebufferFetch])
  {
    if ([v9 enableDOF])
    {
      uint64_t v10 = *a4;
      if (*a4 && *(unsigned char *)(v10 + 112) && (uint64_t v11 = *(unsigned int *)(v10 + 108), v11)) {
        uint64_t v12 = v11 | 0x100000000;
      }
      else {
        uint64_t v12 = 0;
      }
      LOWORD(v62[0]) = 1;
      *(void *)((char *)v62 + 4) = 0x3F00000000000000;
      *(void *)((char *)v62 + 12) = 0x3F00000000000000;
      *(void *)((char *)&v62[1] + 4) = v12;
      BYTE12(v62[1]) = 0;
      BYTE4(v63) = 0;
      *((void *)&v63 + 1) = 0x100000000;
      v64[0] = 1;
      LOBYTE(v64[1]) = 0;
      if (v10 && *(unsigned char *)(v10 + 112) && (uint64_t v19 = *(unsigned int *)(v10 + 108), v19)) {
        uint64_t v20 = v19 | 0x100000000;
      }
      else {
        uint64_t v20 = 0;
      }
      *(_WORD *)unint64_t v55 = 1;
      *(void *)&v55[4] = 0x3F80000000000000;
      *(void *)&v55[12] = 0x3F80000000000000;
      *(void *)&v55[20] = v20;
      v55[28] = 0;
      BYTE4(v56) = 0;
      *((void *)&v56 + 1) = 0x100000000;
      LODWORD(v57) = 1;
      BYTE4(v57) = 0;
      uint64_t v21 = a4[8];
      if (v21 && *(unsigned char *)(v21 + 112) && (uint64_t v22 = *(unsigned int *)(v21 + 108), v22)) {
        uint64_t v23 = v22 | 0x100000000;
      }
      else {
        uint64_t v23 = 0;
      }
      v46[0] = 1;
      uint64_t v47 = 0x3F80000000000000;
      uint64_t v48 = 0x3F80000000000000;
      uint64_t v49 = v23;
      LOBYTE(v50) = 0;
      char v51 = 0;
      uint64_t v52 = 0x100000000;
      int v53 = 1;
      char v54 = 1;
      LOWORD(v43[0]) = 1;
      *(void *)&v43[1] = 0x3E00000000000000;
      *(void *)&v43[3] = 0x3E00000000000000;
      *(void *)&v43[5] = 0x100000002;
      LOBYTE(v44[0]) = 0;
      LOBYTE(v44[2]) = 0;
      *(void *)&v44[3] = 0x100000000;
      v44[5] = 1;
      char v45 = 0;
      a1[4] = md::FrameGraphBuilder::createResource(a5, (uint64_t)v55, "Scene Color", 0xDC09355C0000000BLL, 0);
      a1[5] = md::FrameGraphBuilder::createResource(a5, (uint64_t)v46, "Scene Depth", 0x40FC61DC0000000BuLL, 0);
      a1[7] = md::FrameGraphBuilder::createResource(a5, (uint64_t)v62, "FG Color CoC", 0x138985420000000CuLL, 0);
      a1[8] = md::FrameGraphBuilder::createResource(a5, (uint64_t)v62, "BG Color CoC", 0x108FBE3D0000000CuLL, 0);
      a1[6] = md::FrameGraphBuilder::createResource(a5, (uint64_t)v43, "FG Color Downsampled CoC", 0x4C9E23D800000018uLL, 0);
      a1[9] = md::FrameGraphBuilder::createResource(a5, (uint64_t)v62, "FG Blur", 0xF5B8B5BC00000007, 0);
      a1[10] = md::FrameGraphBuilder::createResource(a5, (uint64_t)v62, "BG Blur", 0x1F791AF00000007uLL, 0);
      a1[11] = md::FrameGraphBuilder::createResource(a5, (uint64_t)v62, "FG Tent Blur", 0xB5780D5C0000000CLL, 0);
      a1[12] = md::FrameGraphBuilder::createResource(a5, (uint64_t)v62, "BG Tent Blur", 0xB67E36230000000CLL, 0);
      v66[0] = &unk_1EF573398;
      v66[1] = a1;
      v66[3] = v66;
      md::FrameGraphBuilder::addRenderPass<md::RealisticCommandBufferIdInfo>();
    }
    v65[0] = &unk_1EF5735D8;
    v65[1] = a4;
    v65[3] = v65;
    md::FrameGraphBuilder::addRenderPass<md::RealisticCommandBufferIdInfo>();
  }
  uint64_t v13 = [v8 finalRenderTarget];
  uint64_t v14 = [v8 linearRenderTarget];
  if (!v14)
  {
LABEL_46:
    long long v63 = 0u;
    memset(v64, 0, 25);
    memset(v62, 0, sizeof(v62));
    md::FrameGraphUtils::prepareGraphBuilderForRenderTarget((uint64_t)v62, a5, (void *)v14, "renderTarget_linearColorBuffer", 0x6F1219E0000001EuLL, "renderTarget_linearDepthStencilBuffer", 0xE3A8F65400000025, v15, "renderTarget_linearMsaaResolveBuffer", 0xEECC3D6200000024);
    long long v33 = *((_OWORD *)a4 + 3);
    long long v56 = *((_OWORD *)a4 + 2);
    long long v57 = v33;
    uint64_t v58 = a4[8];
    long long v34 = *((_OWORD *)a4 + 1);
    *(_OWORD *)unint64_t v55 = *(_OWORD *)a4;
    *(_OWORD *)&v55[16] = v34;
    char v59 = 0;
    if (*((unsigned char *)a4 + 72))
    {
      long long v60 = *(_OWORD *)((char *)a4 + 76);
      int v61 = *((_DWORD *)a4 + 23);
      char v59 = 1;
    }
    uint64_t v35 = *(unsigned int **)(v13 + 88);
    unsigned int v36 = v35[20];
    unsigned int v37 = v35[21];
    uint64_t v38 = v35[17];
    int v39 = v35[18];
    if (v38) {
      uint64_t v40 = v38 | 0x100000000;
    }
    else {
      uint64_t v40 = 0;
    }
    v46[0] = 0;
    uint64_t v47 = v36;
    uint64_t v48 = v37;
    uint64_t v49 = v40;
    uint64_t v52 = 0x100000000;
    int v53 = v39;
    char v54 = 0;
    char v51 = 1;
    uint64_t v50 = 0x200000001;
    uint64_t Resource = md::FrameGraphBuilder::createResource(a5, (uint64_t)v46, "renderTarget_colorBuffer_first", 0xE22C27790000001ELL, 0);
    *(void *)unint64_t v55 = Resource;
    if (!v59)
    {
      long long v42 = *(_OWORD *)(Resource + 88);
      int v61 = *(_DWORD *)(Resource + 104);
      long long v60 = v42;
      char v59 = 1;
    }
    *(void *)uint64_t v43 = Resource;
    operator new();
  }
  uint64_t v16 = a1[3];
  BOOL v17 = *(_DWORD **)(v14 + 336);
  if (v17)
  {
    LODWORD(v18) = v17[9];
    LODWORD(v17) = v17[10];
LABEL_45:
    *(_DWORD *)(v16 + 40) = v18;
    *(_DWORD *)(v16 + 44) = v17;
    long long v32 = *(_OWORD *)(v14 + 72);
    *(_OWORD *)(v16 + 48) = *(_OWORD *)(v14 + 56);
    *(_OWORD *)(v16 + 64) = v32;
    goto LABEL_46;
  }
  uint64_t v18 = *(void *)(v14 + 88);
  if (v18)
  {
    uint64_t v24 = (_DWORD *)(v14 + 96);
  }
  else
  {
    uint64_t v18 = *(void *)(v14 + 280);
    if (!v18) {
      goto LABEL_34;
    }
    uint64_t v24 = (_DWORD *)(v14 + 288);
  }
  uint64_t v25 = 80;
  if (*(_DWORD *)(v18 + 56) == 3) {
    uint64_t v25 = 196;
  }
  unsigned int v26 = *(_DWORD *)(v18 + v25);
  unsigned int v27 = v26 >> *v24;
  if (v27 <= 1) {
    unsigned int v27 = 1;
  }
  if (v26) {
    LODWORD(v18) = v27;
  }
  else {
    LODWORD(v18) = 0;
  }
LABEL_34:
  BOOL v17 = *(_DWORD **)(v14 + 88);
  if (v17)
  {
    long long v28 = (_DWORD *)(v14 + 96);
  }
  else
  {
    BOOL v17 = *(_DWORD **)(v14 + 280);
    if (!v17) {
      goto LABEL_45;
    }
    long long v28 = (_DWORD *)(v14 + 288);
  }
  uint64_t v29 = 21;
  if (v17[14] == 3) {
    uint64_t v29 = 49;
  }
  unsigned int v30 = v17[v29];
  unsigned int v31 = v30 >> *v28;
  if (v31 <= 1) {
    unsigned int v31 = 1;
  }
  if (v30) {
    LODWORD(v17) = v31;
  }
  else {
    LODWORD(v17) = 0;
  }
  goto LABEL_45;
}

void sub_1A274D5E4(_Unwind_Exception *a1)
{
  std::function<void ()(md::FrameGraphRenderPassBuilder &)>::~function(&STACK[0x2B8]);

  _Unwind_Resume(a1);
}

void md::FrameGraphBuilder::addRenderPass<md::RealisticCommandBufferIdInfo>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1A274DC14(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1A274DC48(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v2);
  MEMORY[0x1A6239270](v1, 0xA1C4084DA3AFDLL);
  _Unwind_Resume(a1);
}

void md::RenderQueue<md::RealisticAboveOverlaysCommandBufferIdInfo>::~RenderQueue(void *a1)
{
  *a1 = &unk_1EF535298;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    uint64_t v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  unint64_t v7 = (std::__shared_weak_count *)a1[2];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  JUMPOUT(0x1A6239270);
}

void *md::RenderQueue<md::RealisticAboveOverlaysCommandBufferIdInfo>::~RenderQueue(void *a1)
{
  *a1 = &unk_1EF535298;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    uint64_t v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  unint64_t v7 = (std::__shared_weak_count *)a1[2];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return a1;
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_13,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_13>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  HIBYTE(v10) = 14;
  strcpy((char *)&__src, "Above Overlays");
  uint64_t v4 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v4, &__src, 0xEuLL);
  }
  else
  {
    *(_OWORD *)uint64_t v4 = __src;
    *(void *)(a2 + 48) = v10;
  }
  md::FrameGraphPassBuilder::dependsOn((uint64_t *)a2, **(unsigned __int8 ***)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)v5;
  __n128 result = *(__n128 *)(v5 + 16);
  long long v7 = *(_OWORD *)(v5 + 32);
  long long v8 = *(_OWORD *)(v5 + 48);
  *(void *)(a2 + 168) = *(void *)(v5 + 64);
  *(_OWORD *)(a2 + 152) = v8;
  *(_OWORD *)(a2 + 136) = v7;
  *(__n128 *)(a2 + 120) = result;
  if (*(unsigned char *)(v5 + 72))
  {
    __n128 result = *(__n128 *)(v5 + 76);
    if (*(unsigned char *)(a2 + 176))
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
    }
    else
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
      *(unsigned char *)(a2 + 176) = 1;
    }
  }
  else if (*(unsigned char *)(a2 + 176))
  {
    *(unsigned char *)(a2 + 176) = 0;
  }
  return result;
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_13,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_13>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF573740;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_13,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_13>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF573740;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_13,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_13>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
}

void md::RenderQueue<md::RealisticOverlaysAboveCommandBufferIdInfo>::~RenderQueue(void *a1)
{
  *a1 = &unk_1EF535298;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    uint64_t v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  long long v7 = (std::__shared_weak_count *)a1[2];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  JUMPOUT(0x1A6239270);
}

void *md::RenderQueue<md::RealisticOverlaysAboveCommandBufferIdInfo>::~RenderQueue(void *a1)
{
  *a1 = &unk_1EF535298;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    uint64_t v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  long long v7 = (std::__shared_weak_count *)a1[2];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return a1;
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_12,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_12>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  BYTE7(v9[1]) = 21;
  strcpy((char *)v9, "Overlays Above Labels");
  uint64_t v4 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v4, v9, 0x15uLL);
  }
  else
  {
    *(_OWORD *)uint64_t v4 = v9[0];
    *(void *)(a2 + 48) = *(void *)&v9[1];
  }
  md::FrameGraphPassBuilder::dependsOn((uint64_t *)a2, **(unsigned __int8 ***)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)v5;
  __n128 result = *(__n128 *)(v5 + 16);
  long long v7 = *(_OWORD *)(v5 + 32);
  long long v8 = *(_OWORD *)(v5 + 48);
  *(void *)(a2 + 168) = *(void *)(v5 + 64);
  *(_OWORD *)(a2 + 152) = v8;
  *(_OWORD *)(a2 + 136) = v7;
  *(__n128 *)(a2 + 120) = result;
  if (*(unsigned char *)(v5 + 72))
  {
    __n128 result = *(__n128 *)(v5 + 76);
    if (*(unsigned char *)(a2 + 176))
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
    }
    else
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
      *(unsigned char *)(a2 + 176) = 1;
    }
  }
  else if (*(unsigned char *)(a2 + 176))
  {
    *(unsigned char *)(a2 + 176) = 0;
  }
  return result;
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_12,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_12>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5736F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_12,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_12>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF5736F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_12,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_12>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
}

void md::RenderQueue<md::RealisticBetweenOverlaysCommandBufferIdInfo>::~RenderQueue(void *a1)
{
  *a1 = &unk_1EF535298;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    uint64_t v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  long long v7 = (std::__shared_weak_count *)a1[2];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  JUMPOUT(0x1A6239270);
}

void *md::RenderQueue<md::RealisticBetweenOverlaysCommandBufferIdInfo>::~RenderQueue(void *a1)
{
  *a1 = &unk_1EF535298;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    uint64_t v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  long long v7 = (std::__shared_weak_count *)a1[2];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return a1;
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_11,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_11>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  BYTE7(v9[1]) = 16;
  strcpy((char *)v9, "Between Overlays");
  uint64_t v4 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v4, v9, 0x10uLL);
  }
  else
  {
    *(_OWORD *)uint64_t v4 = v9[0];
    *(void *)(a2 + 48) = *(void *)&v9[1];
  }
  md::FrameGraphPassBuilder::dependsOn((uint64_t *)a2, **(unsigned __int8 ***)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)v5;
  __n128 result = *(__n128 *)(v5 + 16);
  long long v7 = *(_OWORD *)(v5 + 32);
  long long v8 = *(_OWORD *)(v5 + 48);
  *(void *)(a2 + 168) = *(void *)(v5 + 64);
  *(_OWORD *)(a2 + 152) = v8;
  *(_OWORD *)(a2 + 136) = v7;
  *(__n128 *)(a2 + 120) = result;
  if (*(unsigned char *)(v5 + 72))
  {
    __n128 result = *(__n128 *)(v5 + 76);
    if (*(unsigned char *)(a2 + 176))
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
    }
    else
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
      *(unsigned char *)(a2 + 176) = 1;
    }
  }
  else if (*(unsigned char *)(a2 + 176))
  {
    *(unsigned char *)(a2 + 176) = 0;
  }
  return result;
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_11,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_11>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5736B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_11,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_11>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF5736B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_11,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_11>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
}

void md::RenderQueue<md::RealisticOverlaysBelowCommandBufferIdInfo>::~RenderQueue(void *a1)
{
  *a1 = &unk_1EF535298;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    uint64_t v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  long long v7 = (std::__shared_weak_count *)a1[2];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  JUMPOUT(0x1A6239270);
}

void *md::RenderQueue<md::RealisticOverlaysBelowCommandBufferIdInfo>::~RenderQueue(void *a1)
{
  *a1 = &unk_1EF535298;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    uint64_t v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  long long v7 = (std::__shared_weak_count *)a1[2];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return a1;
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_10,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_10>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  BYTE7(v9[1]) = 21;
  strcpy((char *)v9, "Overlays Below Labels");
  uint64_t v4 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v4, v9, 0x15uLL);
  }
  else
  {
    *(_OWORD *)uint64_t v4 = v9[0];
    *(void *)(a2 + 48) = *(void *)&v9[1];
  }
  md::FrameGraphPassBuilder::dependsOn((uint64_t *)a2, **(unsigned __int8 ***)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)v5;
  __n128 result = *(__n128 *)(v5 + 16);
  long long v7 = *(_OWORD *)(v5 + 32);
  long long v8 = *(_OWORD *)(v5 + 48);
  *(void *)(a2 + 168) = *(void *)(v5 + 64);
  *(_OWORD *)(a2 + 152) = v8;
  *(_OWORD *)(a2 + 136) = v7;
  *(__n128 *)(a2 + 120) = result;
  if (*(unsigned char *)(v5 + 72))
  {
    __n128 result = *(__n128 *)(v5 + 76);
    if (*(unsigned char *)(a2 + 176))
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
    }
    else
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
      *(unsigned char *)(a2 + 176) = 1;
    }
  }
  else if (*(unsigned char *)(a2 + 176))
  {
    *(unsigned char *)(a2 + 176) = 0;
  }
  return result;
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_10,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_10>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF573668;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_10,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_10>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF573668;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_10,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_10>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
}

void md::RenderQueue<md::RealisticBelowOverlaysCommandBufferIdInfo>::~RenderQueue(void *a1)
{
  *a1 = &unk_1EF535298;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    uint64_t v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  long long v7 = (std::__shared_weak_count *)a1[2];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  JUMPOUT(0x1A6239270);
}

void *md::RenderQueue<md::RealisticBelowOverlaysCommandBufferIdInfo>::~RenderQueue(void *a1)
{
  *a1 = &unk_1EF535298;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    uint64_t v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  long long v7 = (std::__shared_weak_count *)a1[2];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return a1;
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_9,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_9>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  HIBYTE(v10) = 14;
  strcpy((char *)&__src, "Below Overlays");
  uint64_t v4 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__assign_no_alias<false>(v4, &__src, 0xEuLL);
  }
  else
  {
    *(_OWORD *)uint64_t v4 = __src;
    *(void *)(a2 + 48) = v10;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)v5;
  __n128 result = *(__n128 *)(v5 + 16);
  long long v7 = *(_OWORD *)(v5 + 32);
  long long v8 = *(_OWORD *)(v5 + 48);
  *(void *)(a2 + 168) = *(void *)(v5 + 64);
  *(_OWORD *)(a2 + 152) = v8;
  *(_OWORD *)(a2 + 136) = v7;
  *(__n128 *)(a2 + 120) = result;
  if (*(unsigned char *)(v5 + 72))
  {
    __n128 result = *(__n128 *)(v5 + 76);
    if (*(unsigned char *)(a2 + 176))
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
    }
    else
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v5 + 92);
      *(__n128 *)(a2 + 180) = result;
      *(unsigned char *)(a2 + 176) = 1;
    }
  }
  else if (*(unsigned char *)(a2 + 176))
  {
    *(unsigned char *)(a2 + 176) = 0;
  }
  return result;
}

uint64_t std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_9,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_9>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF573620;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_9,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_9>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF573620;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_9,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_9>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_8,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_8>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)v2;
  __n128 result = *(__n128 *)(v2 + 16);
  long long v4 = *(_OWORD *)(v2 + 32);
  long long v5 = *(_OWORD *)(v2 + 48);
  *(void *)(a2 + 168) = *(void *)(v2 + 64);
  *(_OWORD *)(a2 + 152) = v5;
  *(_OWORD *)(a2 + 136) = v4;
  *(__n128 *)(a2 + 120) = result;
  if (*(unsigned char *)(v2 + 72))
  {
    __n128 result = *(__n128 *)(v2 + 76);
    if (*(unsigned char *)(a2 + 176))
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v2 + 92);
      *(__n128 *)(a2 + 180) = result;
    }
    else
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v2 + 92);
      *(__n128 *)(a2 + 180) = result;
      *(unsigned char *)(a2 + 176) = 1;
    }
  }
  else if (*(unsigned char *)(a2 + 176))
  {
    *(unsigned char *)(a2 + 176) = 0;
  }
  return result;
}

uint64_t std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_8,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_8>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5735D8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_8,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_8>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF5735D8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_8,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_8>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_7,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_7>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)v2;
  __n128 result = *(__n128 *)(v2 + 16);
  long long v4 = *(_OWORD *)(v2 + 32);
  long long v5 = *(_OWORD *)(v2 + 48);
  *(void *)(a2 + 168) = *(void *)(v2 + 64);
  *(_OWORD *)(a2 + 152) = v5;
  *(_OWORD *)(a2 + 136) = v4;
  *(__n128 *)(a2 + 120) = result;
  if (*(unsigned char *)(v2 + 72))
  {
    __n128 result = *(__n128 *)(v2 + 76);
    if (*(unsigned char *)(a2 + 176))
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v2 + 92);
      *(__n128 *)(a2 + 180) = result;
    }
    else
    {
      *(_DWORD *)(a2 + 196) = *(_DWORD *)(v2 + 92);
      *(__n128 *)(a2 + 180) = result;
      *(unsigned char *)(a2 + 176) = 1;
    }
  }
  else if (*(unsigned char *)(a2 + 176))
  {
    *(unsigned char *)(a2 + 176) = 0;
  }
  return result;
}

uint64_t std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_7,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_7>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF573590;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_7,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_7>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF573590;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_7,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_7>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_6,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_6>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 96);
  *(void *)(a2 + 104) = v2;
  if (!*(unsigned char *)(a2 + 176))
  {
    __n128 result = *(__n128 *)(v2 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v2 + 104);
    *(__n128 *)(a2 + 180) = result;
    *(unsigned char *)(a2 + 176) = 1;
  }
  return result;
}

uint64_t std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_6,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_6>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF573548;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_6,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_6>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF573548;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_6,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_6>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 88);
  *(void *)(a2 + 104) = v2;
  if (!*(unsigned char *)(a2 + 176))
  {
    __n128 result = *(__n128 *)(v2 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v2 + 104);
    *(__n128 *)(a2 + 180) = result;
    *(unsigned char *)(a2 + 176) = 1;
  }
  return result;
}

uint64_t std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF573500;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF573500;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_5>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 80);
  *(void *)(a2 + 104) = v2;
  if (!*(unsigned char *)(a2 + 176))
  {
    __n128 result = *(__n128 *)(v2 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v2 + 104);
    *(__n128 *)(a2 + 180) = result;
    *(unsigned char *)(a2 + 176) = 1;
  }
  return result;
}

uint64_t std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5734B8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF5734B8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_4>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 72);
  *(void *)(a2 + 104) = v2;
  if (!*(unsigned char *)(a2 + 176))
  {
    __n128 result = *(__n128 *)(v2 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v2 + 104);
    *(__n128 *)(a2 + 180) = result;
    *(unsigned char *)(a2 + 176) = 1;
  }
  return result;
}

uint64_t std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF573470;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF573470;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_3>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
}

__n128 std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 48);
  *(void *)(a2 + 104) = v2;
  if (!*(unsigned char *)(a2 + 176))
  {
    __n128 result = *(__n128 *)(v2 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v2 + 104);
    *(__n128 *)(a2 + 180) = result;
    *(unsigned char *)(a2 + 176) = 1;
  }
  return result;
}

uint64_t std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF573428;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF573428;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_2>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
}

uint64_t std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = *(void *)(v2 + 56);
  *(void *)(a2 + 104) = v3;
  if (!*(unsigned char *)(a2 + 176))
  {
    long long v4 = *(_OWORD *)(v3 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v3 + 104);
    *(_OWORD *)(a2 + 180) = v4;
    *(unsigned char *)(a2 + 176) = 1;
  }
  *(void *)(a2 + 112) = *(void *)(v2 + 64);
  return result;
}

uint64_t std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF5733E0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF5733E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_1>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
}

void md::RenderQueue<md::RealisticCommandBufferIdInfo>::~RenderQueue(void *a1)
{
  *a1 = &unk_1EF535298;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    long long v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      long long v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  long long v7 = (std::__shared_weak_count *)a1[2];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  JUMPOUT(0x1A6239270);
}

void *md::RenderQueue<md::RealisticCommandBufferIdInfo>::~RenderQueue(void *a1)
{
  *a1 = &unk_1EF535298;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    long long v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      long long v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  long long v7 = (std::__shared_weak_count *)a1[2];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return a1;
}

uint64_t std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = *(void *)(v2 + 32);
  *(void *)(a2 + 104) = v3;
  if (!*(unsigned char *)(a2 + 176))
  {
    long long v4 = *(_OWORD *)(v3 + 88);
    *(_DWORD *)(a2 + 196) = *(_DWORD *)(v3 + 104);
    *(_OWORD *)(a2 + 180) = v4;
    *(unsigned char *)(a2 + 176) = 1;
  }
  *(void *)(a2 + 168) = *(void *)(v2 + 40);
  return result;
}

uint64_t std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF573398;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF573398;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0,std::allocator<md::RealisticPassList::buildFrameGraph(md::LayoutContext const&,md::Renderer &,md::FrameGraphRenderTarget const&,md::FrameGraphBuilder *)::$_0>,void ()(md::FrameGraphRenderPassBuilder &)>::~__func()
{
}

void md::RealisticPassList::~RealisticPassList(md::RealisticPassList *this)
{
  *(void *)this = &unk_1EF537848;
  uint64_t v2 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)this = &unk_1EF553DD8;
  uint64_t v3 = (ggl::RenderQueue *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    ggl::RenderQueue::~RenderQueue(v3);
    MEMORY[0x1A6239270]();
  }
  long long v4 = (md::FrameGraph *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    md::FrameGraph::~FrameGraph(v4);
    MEMORY[0x1A6239270]();
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  ggl::RenderQueue *v3;
  md::FrameGraph *v4;

  *(void *)this = &unk_1EF537848;
  uint64_t v2 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)this = &unk_1EF553DD8;
  uint64_t v3 = (ggl::RenderQueue *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    ggl::RenderQueue::~RenderQueue(v3);
    MEMORY[0x1A6239270]();
  }
  long long v4 = (md::FrameGraph *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    md::FrameGraph::~FrameGraph(v4);
    MEMORY[0x1A6239270]();
  }
}

void sub_1A274FA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A274FB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A274FC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A274FDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  objc_destroyWeak(v15);
  objc_destroyWeak((id *)(v16 - 88));

  _Unwind_Resume(a1);
}

void sub_1A274FEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A274FF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VKAttachedNavGestureCameraBehavior;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1A274FFF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A27504C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A27504D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2750970(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2750980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2750AD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2750AE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A27515F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2751608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A275163C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2751AA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2751FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2751FD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2752260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,char a25)
{
  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a25, 8);

  _Unwind_Resume(a1);
}

void sub_1A2752378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2752410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VKDetachedNavGestureCameraBehavior;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1A27524D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t md::LiveTileFetcher::tileKey(uint64_t a1, void *a2)
{
  id v2 = a2;
  [v2 size];
  [v2 scale];
  [v2 style];
  uint64_t v3 = GEOLiveTileKeyMake();

  return v3;
}

void sub_1A2752584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::LiveTileFetcher::~LiveTileFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A6239270);
}

void ggl::FlyoverRoadStrokeTextured::DefaultPipelineState::~DefaultPipelineState(ggl::FlyoverRoadStrokeTextured::DefaultPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  id v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  id v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::FlyoverRoadStrokeTextured::DefaultPipelineSetup::textureIsEnabled(ggl::FlyoverRoadStrokeTextured::DefaultPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::FlyoverRoadStrokeTextured::DefaultPipelineSetup::constantDataIsEnabled(ggl::FlyoverRoadStrokeTextured::DefaultPipelineSetup *this, unint64_t a2)
{
  return a2 < 5;
}

void ggl::FlyoverRoadStrokeTextured::DefaultPipelineSetup::~DefaultPipelineSetup(ggl::FlyoverRoadStrokeTextured::DefaultPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::FlyoverRoadStrokeTextured::DefaultPipelineSetup::DefaultPipelineSetup(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9)
{
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    ggl::PipelineSetup::PipelineSetup((void *)a1, a2, (uint64_t)a3);
    if (!atomic_fetch_add(&a3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  else
  {
    ggl::PipelineSetup::PipelineSetup((void *)a1, a2, 0);
  }
  *(void *)a1 = &unk_1EF55FE28;
  uint64_t v16 = *(uint64_t **)(a1 + 64);
  uint64_t v17 = *a4;
  uint64_t v18 = a4[1];
  uint64_t *v16 = *a4;
  v16[1] = 0;
  uint64_t v19 = *(void **)(a1 + 160);
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = (std::__shared_weak_count *)v19[1];
  *uint64_t v19 = v17;
  v19[1] = v18;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  uint64_t v21 = *(void *)(a1 + 64);
  uint64_t v22 = *a5;
  uint64_t v23 = a5[1];
  *(void *)(v21 + 16) = *a5;
  *(void *)(v21 + 24) = 0;
  uint64_t v24 = *(void *)(a1 + 160);
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v24 + 24);
  *(void *)(v24 + 16) = v22;
  *(void *)(v24 + 24) = v23;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  uint64_t v26 = *(void *)(a1 + 64);
  uint64_t v27 = *a6;
  uint64_t v28 = a6[1];
  *(void *)(v26 + 32) = *a6;
  *(void *)(v26 + 40) = 0;
  uint64_t v29 = *(void *)(a1 + 160);
  if (v28) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v30 = *(std::__shared_weak_count **)(v29 + 40);
  *(void *)(v29 + 32) = v27;
  *(void *)(v29 + 40) = v28;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  uint64_t v31 = *(void *)(a1 + 64);
  uint64_t v32 = *a7;
  uint64_t v33 = a7[1];
  *(void *)(v31 + 48) = *a7;
  *(void *)(v31 + 56) = 0;
  uint64_t v34 = *(void *)(a1 + 160);
  if (v33) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v35 = *(std::__shared_weak_count **)(v34 + 56);
  *(void *)(v34 + 48) = v32;
  *(void *)(v34 + 56) = v33;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  uint64_t v36 = *(void *)(a1 + 64);
  uint64_t v37 = *a8;
  uint64_t v38 = a8[1];
  *(void *)(v36 + 64) = *a8;
  *(void *)(v36 + 72) = 0;
  uint64_t v39 = *(void *)(a1 + 160);
  if (v38) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v40 = *(std::__shared_weak_count **)(v39 + 72);
  *(void *)(v39 + 64) = v37;
  *(void *)(v39 + 72) = v38;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  **(void **)(a1 + 96) = a9;
  return a1;
}

void md::ita::CreateMainRenderItems::operator()(uint64_t a1, uint64_t a2, uint64_t a3, char a4, unsigned __int8 *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a4 == 4)
  {
    int v7 = *a5;
    if (v7 != 1 && v7 != 3)
    {
      if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
        dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
      }
      long long v8 = (id)GEOGetVectorKitVKDefaultLog_log;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        int v9 = *a5;
        LODWORD(buf) = 67109890;
        HIDWORD(buf) = v9;
        *(_WORD *)buf_8 = 2080;
        *(void *)&buf_8[2] = "false";
        *(_WORD *)&buf_8[10] = 2080;
        *(void *)&long long v22 = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/CreateRenderItems.mm";
        WORD4(v22) = 1024;
        *(_DWORD *)((char *)&v22 + 10) = 153;
        _os_log_impl(&dword_1A1780000, v8, OS_LOG_TYPE_ERROR, "Unexpected SceneLayer (%d) for MeshLayer::Flyover renderItem: Assertion with expression - %s : Failed in file - %s line - %i", (uint8_t *)&buf, 0x22u);
      }
    }
  }
  uint64_t v10 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  uint64_t v11 = HIDWORD(*v10);
  uint64_t v12 = *v10 << 32;
  v17[0] = &unk_1EF522DC0;
  v17[1] = v12;
  int v18 = v11;
  *(void *)((char *)&v22 + 4) = &buf;
  uint64_t v19 = v17;
  buf = &unk_1EF522DC0;
  *(void *)buf_8 = v12;
  *(_DWORD *)&buf_8[8] = v11;
  HIDWORD(v22) = 0;
  ecs2::Runtime::queueCommand(v13, (uint64_t)&buf);
  if (HIDWORD(v22) != -1) {
    ((void (*)(char *, void **))off_1EF591178[HIDWORD(v22)])(&v16, &buf);
  }
  HIDWORD(v22) = -1;
  if (v19 == v17)
  {
    (*(void (**)(void *))(v17[0] + 32))(v17);
  }
  else if (v19)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*v19 + 40))(v19, v14, v15);
  }
  gdc::Registry::create(*(gdc::Registry **)(*(void *)a1 + 8));
}

void sub_1A2756EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ecs2::addComponent<md::ls::RenderItemID>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v6 = &unk_1EF521C98;
  *(_OWORD *)(v6 + 8) = *(_OWORD *)a3;
  *((void *)v6 + 3) = *(void *)(a3 + 16);
  *((void *)v6 + 4) = a2;
  int v9 = v6;
  int v10 = 0;
  ecs2::Runtime::queueCommand(a1, (uint64_t)v8);
  if (v10 != -1) {
    ((void (*)(char *, unsigned char *))off_1EF591178[v10])(&v7, v8);
  }
}

void ecs2::addComponent<md::ls::RenderItemTypeID>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v6 = &unk_1EF522700;
  *(_OWORD *)(v6 + 8) = *(_OWORD *)a3;
  *((void *)v6 + 3) = *(void *)(a3 + 16);
  *((void *)v6 + 4) = a2;
  int v9 = v6;
  int v10 = 0;
  ecs2::Runtime::queueCommand(a1, (uint64_t)v8);
  if (v10 != -1) {
    ((void (*)(char *, unsigned char *))off_1EF591178[v10])(&v7, v8);
  }
}

void ecs2::addComponent<md::ls::DataForCommandBuffer>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v6 = &unk_1EF5231B0;
  *(_OWORD *)(v6 + 8) = *(_OWORD *)a3;
  *((void *)v6 + 3) = *(void *)(a3 + 16);
  *((void *)v6 + 4) = a2;
  int v9 = v6;
  int v10 = 0;
  ecs2::Runtime::queueCommand(a1, (uint64_t)v8);
  if (v10 != -1) {
    ((void (*)(char *, unsigned char *))off_1EF591178[v10])(&v7, v8);
  }
}

uint64_t (***addIntendedSceneLayer<ecs2::Runtime>(uint64_t (***result)(), unint64_t a2, int a3))()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  switch(a3)
  {
    case 0:
      unint64_t v3 = HIDWORD(a2);
      uint64_t v4 = a2 << 32;
      char v7 = &off_1EF523990;
      uint64_t v8 = a2 << 32;
      int v9 = HIDWORD(a2);
      uint64_t v13 = v11;
      uint64_t v5 = &off_1EF523990;
      goto LABEL_7;
    case 1:
      unint64_t v3 = HIDWORD(a2);
      uint64_t v4 = a2 << 32;
      char v7 = (uint64_t (**)())&unk_1EF5239D8;
      uint64_t v8 = a2 << 32;
      int v9 = HIDWORD(a2);
      uint64_t v13 = v11;
      uint64_t v5 = (uint64_t (**)())&unk_1EF5239D8;
      goto LABEL_7;
    case 2:
      unint64_t v3 = HIDWORD(a2);
      uint64_t v4 = a2 << 32;
      char v7 = (uint64_t (**)())&unk_1EF523A20;
      uint64_t v8 = a2 << 32;
      int v9 = HIDWORD(a2);
      uint64_t v13 = v11;
      uint64_t v5 = (uint64_t (**)())&unk_1EF523A20;
      goto LABEL_7;
    case 3:
      unint64_t v3 = HIDWORD(a2);
      uint64_t v4 = a2 << 32;
      char v7 = (uint64_t (**)())&unk_1EF523A68;
      uint64_t v8 = a2 << 32;
      int v9 = HIDWORD(a2);
      uint64_t v13 = v11;
      uint64_t v5 = (uint64_t (**)())&unk_1EF523A68;
      goto LABEL_7;
    case 4:
      unint64_t v3 = HIDWORD(a2);
      uint64_t v4 = a2 << 32;
      char v7 = (uint64_t (**)())&unk_1EF523AB0;
      uint64_t v8 = a2 << 32;
      int v9 = HIDWORD(a2);
      uint64_t v13 = v11;
      uint64_t v5 = (uint64_t (**)())&unk_1EF523AB0;
LABEL_7:
      int v10 = &v7;
      v11[0] = v5;
      v11[1] = v4;
      int v12 = v3;
      int v14 = 0;
      ecs2::Runtime::queueCommand(result, (uint64_t)v11);
      if (v14 != -1) {
        ((void (*)(char *, void *))off_1EF591178[v14])(&v6, v11);
      }
      int v14 = -1;
      __n128 result = v10;
      if (v10 == &v7)
      {
        __n128 result = (uint64_t (***)())((uint64_t (*)(uint64_t (***)()))v7[4])(&v7);
      }
      else if (v10)
      {
        __n128 result = (uint64_t (***)())(*v10)[5]();
      }
      break;
    default:
      return result;
  }
  return result;
}

void ecs2::addComponent<md::ls::FunctionConstants>(void *a1, uint64_t a2, long long *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v5 = a3[1];
  long long v9 = *a3;
  long long v10 = v5;
  LOBYTE(v11) = *((unsigned char *)a3 + 32);
  char v6 = (char *)operator new(0x38uLL);
  *(void *)char v6 = &unk_1EF522BC8;
  long long v7 = v10;
  *(_OWORD *)(v6 + 8) = v9;
  *(_OWORD *)(v6 + 24) = v7;
  *((_DWORD *)v6 + 10) = v11;
  *(void *)(v6 + 44) = a2;
  *((void *)&v10 + 1) = v6;
  int v11 = 0;
  ecs2::Runtime::queueCommand(a1, (uint64_t)&v9);
  if (v11 != -1) {
    ((void (*)(char *, long long *))off_1EF591178[v11])(&v8, &v9);
  }
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleGroundOcclusionConstantDataHandle>(gdc::Entity,md::ls::StyleGroundOcclusionConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::StyleGroundOcclusionConstantDataHandle>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  char v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(8 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      long long v22 = &v20[8 * v19];
      *uint64_t v21 = v5;
      int v14 = v21 + 1;
      if (v13 == v15)
      {
        uint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          uint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      int v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    char v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *char v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      long long v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          long long v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  unsigned int v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      unsigned int v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleGroundOcclusionConstantDataHandle>(gdc::Entity,md::ls::StyleGroundOcclusionConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF525E68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleGroundOcclusionConstantDataHandle>(gdc::Entity,md::ls::StyleGroundOcclusionConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  id v2 = (char *)operator new(0x18uLL);
  *(void *)id v2 = &unk_1EF525E68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::StyleGroundOcclusionConstantDataHandle>(gdc::Entity,md::ls::StyleGroundOcclusionConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::LandCoverSettingsConstantDataHandle>(gdc::Entity,md::ls::LandCoverSettingsConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::LandCoverSettingsConstantDataHandle>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  char v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(8 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      long long v22 = &v20[8 * v19];
      *uint64_t v21 = v5;
      int v14 = v21 + 1;
      if (v13 == v15)
      {
        uint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          uint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      int v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    char v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *char v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      long long v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          long long v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  unsigned int v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      unsigned int v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::LandCoverSettingsConstantDataHandle>(gdc::Entity,md::ls::LandCoverSettingsConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_1EF525D48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::LandCoverSettingsConstantDataHandle>(gdc::Entity,md::ls::LandCoverSettingsConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  id v2 = (char *)operator new(0x18uLL);
  *(void *)id v2 = &off_1EF525D48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::LandCoverSettingsConstantDataHandle>(gdc::Entity,md::ls::LandCoverSettingsConstantDataHandle &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderOrderToUse>(gdc::Entity,md::ls::RenderOrderToUse &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::RenderOrderToUse>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  char v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_34;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = operator new(8 * v19);
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      long long v22 = &v20[8 * v19];
      *uint64_t v21 = v5;
      int v14 = v21 + 1;
      if (v13 != v15)
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_38;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_38;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        uint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      int v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    char v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *char v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      long long v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          long long v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  unsigned int v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      unsigned int v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_33;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderOrderToUse>(gdc::Entity,md::ls::RenderOrderToUse &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF522790;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderOrderToUse>(gdc::Entity,md::ls::RenderOrderToUse &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  id v2 = (char *)operator new(0x18uLL);
  *(void *)id v2 = &unk_1EF522790;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderOrderToUse>(gdc::Entity,md::ls::RenderOrderToUse &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UseGlobeLighting>(gdc::Entity,md::ls::UseGlobeLighting &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::UseGlobeLighting>(a2);
  uint64_t v22 = v2;
  uint64_t v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if (v5)
  {
    long long v10 = (unsigned char *)v3[11];
    unint64_t v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      unint64_t v12 = (char *)v3[10];
      uint64_t v13 = v10 - v12;
      uint64_t v14 = v10 - v12 + 1;
      if (v14 < 0) {
        goto LABEL_28;
      }
      unint64_t v15 = v9 - (void)v12;
      if (2 * v15 > v14) {
        uint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16) {
        unint64_t v17 = (char *)operator new(v16);
      }
      else {
        unint64_t v17 = 0;
      }
      uint64_t v18 = &v17[v16];
      uint64_t v11 = (uint64_t)&v17[v13 + 1];
      unint64_t v19 = (char *)(v12 - v10);
      if (v12 == v10) {
        unint64_t v19 = 0;
      }
      v3[10] = &v17[v13 + (void)v19];
      v3[11] = v11;
      v3[12] = v18;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    uint64_t v6 = v3[31];
  }
  else
  {
    uint64_t v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      char v7 = (void *)v3[16];
      if (v7)
      {
        while (1)
        {
          uint64_t v24 = &v22;
          uint64_t v25 = 1;
          uint64_t v23 = v6;
          uint64_t v8 = v7[6];
          if (!v8) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v8 + 48))(v8, &v23, &v24);
          char v7 = (void *)*v7;
          if (!v7) {
            return;
          }
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  uint64_t v20 = (void *)v3[22];
  if (v20)
  {
    while (1)
    {
      uint64_t v24 = &v22;
      uint64_t v25 = 1;
      uint64_t v23 = v6;
      uint64_t v21 = v20[6];
      if (!v21) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v21 + 48))(v21, &v23, &v24);
      uint64_t v20 = (void *)*v20;
      if (!v20) {
        return;
      }
    }
    goto LABEL_27;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UseGlobeLighting>(gdc::Entity,md::ls::UseGlobeLighting &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF522AA8;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UseGlobeLighting>(gdc::Entity,md::ls::UseGlobeLighting &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF522AA8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UseGlobeLighting>(gdc::Entity,md::ls::UseGlobeLighting &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FunctionConstants>(gdc::Entity,md::ls::FunctionConstants &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 44);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::FunctionConstants>(a2);
  long long v24 = *(_OWORD *)(a1 + 8);
  long long v25 = *(_OWORD *)(a1 + 24);
  char v26 = *(unsigned char *)(a1 + 40);
  uint64_t v27 = v3;
  char v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v27);
  if (v6)
  {
    unint64_t v12 = (char *)v4[11];
    unint64_t v11 = v4[12];
    if ((unint64_t)v12 >= v11)
    {
      uint64_t v14 = (char *)v4[10];
      unint64_t v15 = 0xF83E0F83E0F83E1 * (v12 - v14) + 1;
      if (v15 > 0x7C1F07C1F07C1F0) {
        goto LABEL_30;
      }
      unint64_t v16 = 0xF83E0F83E0F83E1 * (v11 - (void)v14);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x3E0F83E0F83E0F8) {
        unint64_t v17 = 0x7C1F07C1F07C1F0;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        if (v17 > 0x7C1F07C1F07C1F0) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v18 = (char *)operator new(33 * v17);
      }
      else
      {
        uint64_t v18 = 0;
      }
      unint64_t v19 = &v18[v12 - v14];
      *(_OWORD *)unint64_t v19 = v24;
      *((_OWORD *)v19 + 1) = v25;
      v19[32] = v26;
      uint64_t v13 = v19 + 33;
      if (v12 != v14)
      {
        do
        {
          long long v20 = *(_OWORD *)(v12 - 33);
          long long v21 = *(_OWORD *)(v12 - 17);
          *(v19 - 1) = *(v12 - 1);
          *(_OWORD *)(v19 - 17) = v21;
          *(_OWORD *)(v19 - 33) = v20;
          v19 -= 33;
          v12 -= 33;
        }
        while (v12 != v14);
        unint64_t v12 = (char *)v4[10];
      }
      v4[10] = v19;
      v4[11] = v13;
      v4[12] = &v18[33 * v17];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v12 = v24;
      *((_OWORD *)v12 + 1) = v25;
      v12[32] = v26;
      uint64_t v13 = v12 + 33;
    }
    v4[11] = v13;
    uint64_t v8 = v4[31];
  }
  else
  {
    uint64_t v7 = v4[10] + 4 * ((void)v5 - v4[7]) + (((uint64_t)v5 - v4[7]) >> 3);
    *(_OWORD *)uint64_t v7 = v24;
    *(_OWORD *)(v7 + 16) = v25;
    *(unsigned char *)(v7 + 32) = v26;
    uint64_t v8 = v4[31];
    if (v7 != v4[11])
    {
      unint64_t v9 = (void *)v4[16];
      if (v9)
      {
        while (1)
        {
          uint64_t v29 = &v27;
          uint64_t v30 = 1;
          uint64_t v28 = v8;
          uint64_t v10 = v9[6];
          if (!v10) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v10 + 48))(v10, &v28, &v29);
          unint64_t v9 = (void *)*v9;
          if (!v9) {
            return;
          }
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  uint64_t v22 = (void *)v4[22];
  if (v22)
  {
    while (1)
    {
      uint64_t v29 = &v27;
      uint64_t v30 = 1;
      uint64_t v28 = v8;
      uint64_t v23 = v22[6];
      if (!v23) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v23 + 48))(v23, &v28, &v29);
      uint64_t v22 = (void *)*v22;
      if (!v22) {
        return;
      }
    }
    goto LABEL_29;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FunctionConstants>(gdc::Entity,md::ls::FunctionConstants &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF522BC8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 36) = *(_OWORD *)(a1 + 36);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FunctionConstants>(gdc::Entity,md::ls::FunctionConstants &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_1EF522BC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 36);
  *(__n128 *)(v2 + 36) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FunctionConstants>(gdc::Entity,md::ls::FunctionConstants &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UsesShadow>(gdc::Entity,md::ls::UsesShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  long long v3 = (void *)gdc::Registry::storage<md::ls::UsesShadow>(a2);
  uint64_t v22 = v2;
  uint64_t v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if (v5)
  {
    uint64_t v10 = (unsigned char *)v3[11];
    unint64_t v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      unint64_t v12 = (char *)v3[10];
      uint64_t v13 = v10 - v12;
      uint64_t v14 = v10 - v12 + 1;
      if (v14 < 0) {
        goto LABEL_28;
      }
      unint64_t v15 = v9 - (void)v12;
      if (2 * v15 > v14) {
        uint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16) {
        unint64_t v17 = (char *)operator new(v16);
      }
      else {
        unint64_t v17 = 0;
      }
      uint64_t v18 = &v17[v16];
      uint64_t v11 = (uint64_t)&v17[v13 + 1];
      unint64_t v19 = (char *)(v12 - v10);
      if (v12 == v10) {
        unint64_t v19 = 0;
      }
      v3[10] = &v17[v13 + (void)v19];
      v3[11] = v11;
      v3[12] = v18;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    uint64_t v6 = v3[31];
  }
  else
  {
    uint64_t v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      uint64_t v7 = (void *)v3[16];
      if (v7)
      {
        while (1)
        {
          long long v24 = &v22;
          uint64_t v25 = 1;
          uint64_t v23 = v6;
          uint64_t v8 = v7[6];
          if (!v8) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v8 + 48))(v8, &v23, &v24);
          uint64_t v7 = (void *)*v7;
          if (!v7) {
            return;
          }
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  long long v20 = (void *)v3[22];
  if (v20)
  {
    while (1)
    {
      long long v24 = &v22;
      uint64_t v25 = 1;
      uint64_t v23 = v6;
      uint64_t v21 = v20[6];
      if (!v21) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v21 + 48))(v21, &v23, &v24);
      long long v20 = (void *)*v20;
      if (!v20) {
        return;
      }
    }
    goto LABEL_27;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UsesShadow>(gdc::Entity,md::ls::UsesShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF521938;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UsesShadow>(gdc::Entity,md::ls::UsesShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF521938;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UsesShadow>(gdc::Entity,md::ls::UsesShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsS2>(gdc::Entity,md::ls::IsS2 &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 12);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::IsS2>(a2);
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t v36 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if (v7)
  {
    uint64_t v13 = (unsigned char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      unsigned char *v13 = v5;
      uint64_t v14 = (uint64_t)(v13 + 1);
LABEL_39:
      v4[11] = v14;
      uint64_t v9 = v4[31];
      goto LABEL_40;
    }
    unint64_t v15 = (unsigned char *)v4[10];
    unint64_t v16 = v13 - v15;
    uint64_t v17 = v13 - v15 + 1;
    if (v17 < 0) {
      goto LABEL_45;
    }
    unint64_t v18 = v12 - (void)v15;
    if (2 * v18 > v17) {
      uint64_t v17 = 2 * v18;
    }
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v19 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v19 = v17;
    }
    if (v19) {
      long long v20 = operator new(v19);
    }
    else {
      long long v20 = 0;
    }
    uint64_t v21 = (char *)v20 + v16;
    uint64_t v22 = (char *)v20 + v19;
    *((unsigned char *)v20 + v16) = v5;
    uint64_t v14 = (uint64_t)v20 + v16 + 1;
    if (v13 == v15)
    {
      long long v20 = (char *)v20 + v16;
      goto LABEL_37;
    }
    if (v16 >= 8 && (unint64_t)(v15 - (unsigned char *)v20) >= 0x20)
    {
      if (v16 >= 0x20)
      {
        unint64_t v23 = v16 & 0xFFFFFFFFFFFFFFE0;
        long long v24 = (long long *)(v13 - 16);
        uint64_t v25 = (char *)v20 + v13 - 16 - v15;
        unint64_t v26 = v16 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v27 = *v24;
          *(v25 - 1) = *(v24 - 1);
          *uint64_t v25 = v27;
          v25 -= 2;
          v24 -= 2;
          v26 -= 32;
        }
        while (v26);
        if (v16 == v23) {
          goto LABEL_31;
        }
        if ((v16 & 0x18) == 0)
        {
          v21 -= v23;
          v13 -= v23;
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v23 = 0;
      }
      unint64_t v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v29 = &v13[-v23 - 8];
      uint64_t v30 = (char *)(v29 - v15);
      do
      {
        uint64_t v31 = *(void *)v29;
        v29 -= 8;
        *(void *)&v30[(void)v20] = v31;
        v30 -= 8;
        v28 += 8;
      }
      while (v28);
      if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_31:
        uint64_t v13 = v15;
LABEL_37:
        v4[10] = v20;
        v4[11] = v14;
        v4[12] = v22;
        if (v13) {
          operator delete(v13);
        }
        goto LABEL_39;
      }
      v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
      v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
    }
LABEL_34:
    uint64_t v32 = v21 - 1;
    do
    {
      char v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
    uint64_t v13 = (unsigned char *)v4[10];
    goto LABEL_37;
  }
  uint64_t v8 = (unsigned char *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *uint64_t v8 = v5;
  uint64_t v9 = v4[31];
  if (v8 != (unsigned char *)v4[11])
  {
    uint64_t v10 = (void *)v4[16];
    if (v10)
    {
      while (1)
      {
        uint64_t v38 = &v36;
        uint64_t v39 = 1;
        uint64_t v37 = v9;
        uint64_t v11 = v10[6];
        if (!v11) {
          break;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v37, &v38);
        uint64_t v10 = (void *)*v10;
        if (!v10) {
          return;
        }
      }
LABEL_44:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_45:
      abort();
    }
    return;
  }
LABEL_40:
  uint64_t v34 = (void *)v4[22];
  if (v34)
  {
    while (1)
    {
      uint64_t v38 = &v36;
      uint64_t v39 = 1;
      uint64_t v37 = v9;
      uint64_t v35 = v34[6];
      if (!v35) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v35 + 48))(v35, &v37, &v38);
      uint64_t v34 = (void *)*v34;
      if (!v34) {
        return;
      }
    }
    goto LABEL_44;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsS2>(gdc::Entity,md::ls::IsS2 &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF525F40;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsS2>(gdc::Entity,md::ls::IsS2 &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF525F40;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsS2>(gdc::Entity,md::ls::IsS2 &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsNotMercator>(gdc::Entity,md::ls::IsNotMercator &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  IsNot = (void *)gdc::Registry::storage<md::ls::IsNotMercator>(a2);
  uint64_t v22 = v2;
  uint64_t v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(IsNot + 4, (uint64_t)&v22);
  if (v5)
  {
    uint64_t v10 = (unsigned char *)IsNot[11];
    unint64_t v9 = IsNot[12];
    if ((unint64_t)v10 >= v9)
    {
      unint64_t v12 = (char *)IsNot[10];
      uint64_t v13 = v10 - v12;
      uint64_t v14 = v10 - v12 + 1;
      if (v14 < 0) {
        goto LABEL_28;
      }
      unint64_t v15 = v9 - (void)v12;
      if (2 * v15 > v14) {
        uint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16) {
        uint64_t v17 = (char *)operator new(v16);
      }
      else {
        uint64_t v17 = 0;
      }
      unint64_t v18 = &v17[v16];
      uint64_t v11 = (uint64_t)&v17[v13 + 1];
      size_t v19 = (char *)(v12 - v10);
      if (v12 == v10) {
        size_t v19 = 0;
      }
      IsNot[10] = &v17[v13 + (void)v19];
      IsNot[11] = v11;
      IsNot[12] = v18;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t v11 = (uint64_t)(v10 + 1);
    }
    IsNot[11] = v11;
    uint64_t v6 = IsNot[31];
  }
  else
  {
    uint64_t v6 = IsNot[31];
    if (IsNot[10] + (((uint64_t)v4 - IsNot[7]) >> 3) != IsNot[11])
    {
      char v7 = (void *)IsNot[16];
      if (v7)
      {
        while (1)
        {
          long long v24 = &v22;
          uint64_t v25 = 1;
          uint64_t v23 = v6;
          uint64_t v8 = v7[6];
          if (!v8) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v8 + 48))(v8, &v23, &v24);
          char v7 = (void *)*v7;
          if (!v7) {
            return;
          }
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  long long v20 = (void *)IsNot[22];
  if (v20)
  {
    while (1)
    {
      long long v24 = &v22;
      uint64_t v25 = 1;
      uint64_t v23 = v6;
      uint64_t v21 = v20[6];
      if (!v21) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v21 + 48))(v21, &v23, &v24);
      long long v20 = (void *)*v20;
      if (!v20) {
        return;
      }
    }
    goto LABEL_27;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsNotMercator>(gdc::Entity,md::ls::IsNotMercator &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF521E90;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsNotMercator>(gdc::Entity,md::ls::IsNotMercator &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF521E90;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsNotMercator>(gdc::Entity,md::ls::IsNotMercator &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NeedsRenderState>(gdc::Entity,md::ls::NeedsRenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::NeedsRenderState>(a2);
  uint64_t v22 = v2;
  uint64_t v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if (v5)
  {
    uint64_t v10 = (unsigned char *)v3[11];
    unint64_t v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      unint64_t v12 = (char *)v3[10];
      uint64_t v13 = v10 - v12;
      uint64_t v14 = v10 - v12 + 1;
      if (v14 < 0) {
        goto LABEL_28;
      }
      unint64_t v15 = v9 - (void)v12;
      if (2 * v15 > v14) {
        uint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16) {
        uint64_t v17 = (char *)operator new(v16);
      }
      else {
        uint64_t v17 = 0;
      }
      unint64_t v18 = &v17[v16];
      uint64_t v11 = (uint64_t)&v17[v13 + 1];
      size_t v19 = (char *)(v12 - v10);
      if (v12 == v10) {
        size_t v19 = 0;
      }
      v3[10] = &v17[v13 + (void)v19];
      v3[11] = v11;
      v3[12] = v18;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    uint64_t v6 = v3[31];
  }
  else
  {
    uint64_t v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      char v7 = (void *)v3[16];
      if (v7)
      {
        while (1)
        {
          long long v24 = &v22;
          uint64_t v25 = 1;
          uint64_t v23 = v6;
          uint64_t v8 = v7[6];
          if (!v8) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v8 + 48))(v8, &v23, &v24);
          char v7 = (void *)*v7;
          if (!v7) {
            return;
          }
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  long long v20 = (void *)v3[22];
  if (v20)
  {
    while (1)
    {
      long long v24 = &v22;
      uint64_t v25 = 1;
      uint64_t v23 = v6;
      uint64_t v21 = v20[6];
      if (!v21) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v21 + 48))(v21, &v23, &v24);
      long long v20 = (void *)*v20;
      if (!v20) {
        return;
      }
    }
    goto LABEL_27;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NeedsRenderState>(gdc::Entity,md::ls::NeedsRenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF522670;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NeedsRenderState>(gdc::Entity,md::ls::NeedsRenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF522670;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::NeedsRenderState>(gdc::Entity,md::ls::NeedsRenderState &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsElevated>(gdc::Entity,md::ls::IsElevated &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::IsElevated>(a2);
  uint64_t v22 = v2;
  uint64_t v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if (v5)
  {
    uint64_t v10 = (unsigned char *)v3[11];
    unint64_t v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      unint64_t v12 = (char *)v3[10];
      uint64_t v13 = v10 - v12;
      uint64_t v14 = v10 - v12 + 1;
      if (v14 < 0) {
        goto LABEL_28;
      }
      unint64_t v15 = v9 - (void)v12;
      if (2 * v15 > v14) {
        uint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16) {
        uint64_t v17 = (char *)operator new(v16);
      }
      else {
        uint64_t v17 = 0;
      }
      unint64_t v18 = &v17[v16];
      uint64_t v11 = (uint64_t)&v17[v13 + 1];
      size_t v19 = (char *)(v12 - v10);
      if (v12 == v10) {
        size_t v19 = 0;
      }
      v3[10] = &v17[v13 + (void)v19];
      v3[11] = v11;
      v3[12] = v18;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    uint64_t v6 = v3[31];
  }
  else
  {
    uint64_t v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      char v7 = (void *)v3[16];
      if (v7)
      {
        while (1)
        {
          long long v24 = &v22;
          uint64_t v25 = 1;
          uint64_t v23 = v6;
          uint64_t v8 = v7[6];
          if (!v8) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v8 + 48))(v8, &v23, &v24);
          char v7 = (void *)*v7;
          if (!v7) {
            return;
          }
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  long long v20 = (void *)v3[22];
  if (v20)
  {
    while (1)
    {
      long long v24 = &v22;
      uint64_t v25 = 1;
      uint64_t v23 = v6;
      uint64_t v21 = v20[6];
      if (!v21) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v21 + 48))(v21, &v23, &v24);
      long long v20 = (void *)*v20;
      if (!v20) {
        return;
      }
    }
    goto LABEL_27;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsElevated>(gdc::Entity,md::ls::IsElevated &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF521740;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsElevated>(gdc::Entity,md::ls::IsElevated &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF521740;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IsElevated>(gdc::Entity,md::ls::IsElevated &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::VisibilityGroupTest>(gdc::Entity,md::ls::VisibilityGroupTest &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::VisibilityGroupTest>(a2);
  unint64_t v5 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  uint64_t v26 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v26);
  if (v7)
  {
    uint64_t v13 = (unsigned char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (unsigned char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_30;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        long long v20 = (char *)operator new(8 * v19);
      }
      else
      {
        long long v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      *(void *)uint64_t v21 = v5;
      uint64_t v14 = v21 + 8;
      if (v13 != v15)
      {
        do
        {
          int v22 = *((_DWORD *)v13 - 2);
          v13 -= 8;
          char v23 = v13[4];
          *((_DWORD *)v21 - 2) = v22;
          v21 -= 8;
          v21[4] = v23;
        }
        while (v13 != v15);
        uint64_t v13 = (unsigned char *)v4[10];
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = &v20[8 * v19];
      if (v13) {
        operator delete(v13);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (char *)v6 + v4[10] - v4[7];
    v8[4] = BYTE4(v5);
    *(_DWORD *)uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (char *)v4[11])
    {
      uint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          unint64_t v28 = &v26;
          uint64_t v29 = 1;
          uint64_t v27 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v27, &v28);
          uint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  long long v24 = (void *)v4[22];
  if (v24)
  {
    while (1)
    {
      unint64_t v28 = &v26;
      uint64_t v29 = 1;
      uint64_t v27 = v9;
      uint64_t v25 = v24[6];
      if (!v25) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v25 + 48))(v25, &v27, &v28);
      long long v24 = (void *)*v24;
      if (!v24) {
        return;
      }
    }
    goto LABEL_29;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::VisibilityGroupTest>(gdc::Entity,md::ls::VisibilityGroupTest &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_1EF523168;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::VisibilityGroupTest>(gdc::Entity,md::ls::VisibilityGroupTest &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_1EF523168;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::VisibilityGroupTest>(gdc::Entity,md::ls::VisibilityGroupTest &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiredPipelinePoolID>(gdc::Entity,md::ls::RequiredPipelinePoolID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 12);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::RequiredPipelinePoolID>(a2);
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t v36 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if (v7)
  {
    uint64_t v13 = (unsigned char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      unsigned char *v13 = v5;
      uint64_t v14 = (uint64_t)(v13 + 1);
LABEL_37:
      v4[11] = v14;
      uint64_t v9 = v4[31];
      goto LABEL_38;
    }
    unint64_t v15 = (unsigned char *)v4[10];
    unint64_t v16 = v13 - v15;
    uint64_t v17 = v13 - v15 + 1;
    if (v17 < 0) {
      goto LABEL_43;
    }
    unint64_t v18 = v12 - (void)v15;
    if (2 * v18 > v17) {
      uint64_t v17 = 2 * v18;
    }
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v19 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v19 = v17;
    }
    if (v19) {
      long long v20 = (char *)operator new(v19);
    }
    else {
      long long v20 = 0;
    }
    uint64_t v21 = &v20[v16];
    int v22 = &v20[v19];
    v20[v16] = v5;
    uint64_t v14 = (uint64_t)&v20[v16 + 1];
    if (v13 == v15)
    {
LABEL_35:
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
      goto LABEL_37;
    }
    if (v16 < 8 || (unint64_t)(v15 - v20) < 0x20) {
      goto LABEL_32;
    }
    if (v16 >= 0x20)
    {
      unint64_t v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      long long v24 = (long long *)(v13 - 16);
      uint64_t v25 = &v20[v13 - 16 - v15];
      unint64_t v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v27 = *v24;
        *((_OWORD *)v25 - 1) = *(v24 - 1);
        *(_OWORD *)uint64_t v25 = v27;
        v25 -= 32;
        v24 -= 2;
        v26 -= 32;
      }
      while (v26);
      if (v16 == v23) {
        goto LABEL_34;
      }
      if ((v16 & 0x18) == 0)
      {
        v21 -= v23;
        v13 -= v23;
        goto LABEL_32;
      }
    }
    else
    {
      unint64_t v23 = 0;
    }
    unint64_t v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v29 = &v13[-v23 - 8];
    int64_t v30 = v29 - v15;
    do
    {
      uint64_t v31 = *(void *)v29;
      v29 -= 8;
      *(void *)&v20[v30] = v31;
      v30 -= 8;
      v28 += 8;
    }
    while (v28);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_34;
    }
    v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
LABEL_32:
    uint64_t v32 = v21 - 1;
    do
    {
      char v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
LABEL_34:
    uint64_t v21 = v20;
    goto LABEL_35;
  }
  uint64_t v8 = (unsigned char *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *uint64_t v8 = v5;
  uint64_t v9 = v4[31];
  if (v8 != (unsigned char *)v4[11])
  {
    uint64_t v10 = (void *)v4[16];
    if (v10)
    {
      while (1)
      {
        uint64_t v38 = &v36;
        uint64_t v39 = 1;
        uint64_t v37 = v9;
        uint64_t v11 = v10[6];
        if (!v11) {
          break;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v37, &v38);
        uint64_t v10 = (void *)*v10;
        if (!v10) {
          return;
        }
      }
LABEL_42:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
      abort();
    }
    return;
  }
LABEL_38:
  uint64_t v34 = (void *)v4[22];
  if (v34)
  {
    while (1)
    {
      uint64_t v38 = &v36;
      uint64_t v39 = 1;
      uint64_t v37 = v9;
      uint64_t v35 = v34[6];
      if (!v35) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v35 + 48))(v35, &v37, &v38);
      uint64_t v34 = (void *)*v34;
      if (!v34) {
        return;
      }
    }
    goto LABEL_42;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiredPipelinePoolID>(gdc::Entity,md::ls::RequiredPipelinePoolID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF523BD0;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiredPipelinePoolID>(gdc::Entity,md::ls::RequiredPipelinePoolID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF523BD0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiredPipelinePoolID>(gdc::Entity,md::ls::RequiredPipelinePoolID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)4>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)4> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::IntendedSceneLayerType<(md::SceneLayer)4>>(a2);
  uint64_t v22 = v2;
  uint64_t v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if (v5)
  {
    uint64_t v10 = (unsigned char *)v3[11];
    unint64_t v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      unint64_t v12 = (char *)v3[10];
      uint64_t v13 = v10 - v12;
      uint64_t v14 = v10 - v12 + 1;
      if (v14 < 0) {
        goto LABEL_28;
      }
      unint64_t v15 = v9 - (void)v12;
      if (2 * v15 > v14) {
        uint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16) {
        uint64_t v17 = (char *)operator new(v16);
      }
      else {
        uint64_t v17 = 0;
      }
      unint64_t v18 = &v17[v16];
      uint64_t v11 = (uint64_t)&v17[v13 + 1];
      size_t v19 = (char *)(v12 - v10);
      if (v12 == v10) {
        size_t v19 = 0;
      }
      v3[10] = &v17[v13 + (void)v19];
      v3[11] = v11;
      v3[12] = v18;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    uint64_t v6 = v3[31];
  }
  else
  {
    uint64_t v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      char v7 = (void *)v3[16];
      if (v7)
      {
        while (1)
        {
          long long v24 = &v22;
          uint64_t v25 = 1;
          uint64_t v23 = v6;
          uint64_t v8 = v7[6];
          if (!v8) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v8 + 48))(v8, &v23, &v24);
          char v7 = (void *)*v7;
          if (!v7) {
            return;
          }
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  long long v20 = (void *)v3[22];
  if (v20)
  {
    while (1)
    {
      long long v24 = &v22;
      uint64_t v25 = 1;
      uint64_t v23 = v6;
      uint64_t v21 = v20[6];
      if (!v21) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v21 + 48))(v21, &v23, &v24);
      long long v20 = (void *)*v20;
      if (!v20) {
        return;
      }
    }
    goto LABEL_27;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)4>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)4> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF523AB0;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)4>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)4> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF523AB0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)4>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)4> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)3>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)3> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::IntendedSceneLayerType<(md::SceneLayer)3>>(a2);
  uint64_t v22 = v2;
  uint64_t v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if (v5)
  {
    uint64_t v10 = (unsigned char *)v3[11];
    unint64_t v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      unint64_t v12 = (char *)v3[10];
      uint64_t v13 = v10 - v12;
      uint64_t v14 = v10 - v12 + 1;
      if (v14 < 0) {
        goto LABEL_28;
      }
      unint64_t v15 = v9 - (void)v12;
      if (2 * v15 > v14) {
        uint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16) {
        uint64_t v17 = (char *)operator new(v16);
      }
      else {
        uint64_t v17 = 0;
      }
      unint64_t v18 = &v17[v16];
      uint64_t v11 = (uint64_t)&v17[v13 + 1];
      size_t v19 = (char *)(v12 - v10);
      if (v12 == v10) {
        size_t v19 = 0;
      }
      v3[10] = &v17[v13 + (void)v19];
      v3[11] = v11;
      v3[12] = v18;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    uint64_t v6 = v3[31];
  }
  else
  {
    uint64_t v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      char v7 = (void *)v3[16];
      if (v7)
      {
        while (1)
        {
          long long v24 = &v22;
          uint64_t v25 = 1;
          uint64_t v23 = v6;
          uint64_t v8 = v7[6];
          if (!v8) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v8 + 48))(v8, &v23, &v24);
          char v7 = (void *)*v7;
          if (!v7) {
            return;
          }
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  long long v20 = (void *)v3[22];
  if (v20)
  {
    while (1)
    {
      long long v24 = &v22;
      uint64_t v25 = 1;
      uint64_t v23 = v6;
      uint64_t v21 = v20[6];
      if (!v21) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v21 + 48))(v21, &v23, &v24);
      long long v20 = (void *)*v20;
      if (!v20) {
        return;
      }
    }
    goto LABEL_27;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)3>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)3> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF523A68;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)3>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)3> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF523A68;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)3>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)3> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)2>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)2> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  unint64_t v33 = 0xB62F599CC8566C3BLL;
  int8x8_t v3 = a2[16];
  if (!*(void *)&v3) {
    goto LABEL_21;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = 0xB62F599CC8566C3BLL;
    if (*(void *)&v3 <= 0xB62F599CC8566C3BLL) {
      unint64_t v5 = 0xB62F599CC8566C3BLL % *(void *)&v3;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v3 - 1) & 0xB62F599CC8566C3BLL;
  }
  uint64_t v6 = *(void **)(*(void *)&a2[15] + 8 * v5);
  if (!v6 || (char v7 = (void *)*v6) == 0) {
LABEL_21:
  }
    operator new();
  if (v4.u32[0] < 2uLL)
  {
    uint64_t v8 = *(void *)&v3 - 1;
    while (1)
    {
      uint64_t v10 = v7[1];
      if (v10 == 0xB62F599CC8566C3BLL)
      {
        if (v7[2] == 0xB62F599CC8566C3BLL) {
          goto LABEL_48;
        }
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_21;
      }
      char v7 = (void *)*v7;
      if (!v7) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v7[1];
    if (v9 == 0xB62F599CC8566C3BLL) {
      break;
    }
    if (v9 >= *(void *)&v3) {
      v9 %= *(void *)&v3;
    }
    if (v9 != v5) {
      goto LABEL_21;
    }
LABEL_11:
    char v7 = (void *)*v7;
    if (!v7) {
      goto LABEL_21;
    }
  }
  if (v7[2] != 0xB62F599CC8566C3BLL) {
    goto LABEL_11;
  }
LABEL_48:
  uint64_t v29 = (void *)v7[3];
  uint64_t v32 = v2;
  uint64_t v11 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v29 + 4, (uint64_t)&v32);
  if (v12)
  {
    uint64_t v17 = (unsigned char *)v29[11];
    unint64_t v16 = v29[12];
    if ((unint64_t)v17 >= v16)
    {
      size_t v19 = (char *)v29[10];
      uint64_t v20 = v17 - v19;
      uint64_t v21 = v17 - v19 + 1;
      if (v21 < 0) {
        goto LABEL_50;
      }
      unint64_t v22 = v16 - (void)v19;
      if (2 * v22 > v21) {
        uint64_t v21 = 2 * v22;
      }
      if (v22 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v23 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v23 = v21;
      }
      if (v23) {
        long long v24 = (char *)operator new(v23);
      }
      else {
        long long v24 = 0;
      }
      uint64_t v25 = &v24[v23];
      uint64_t v18 = (uint64_t)&v24[v20 + 1];
      unint64_t v26 = (char *)(v19 - v17);
      if (v19 == v17) {
        unint64_t v26 = 0;
      }
      v29[10] = &v24[v20 + (void)v26];
      v29[11] = v18;
      v29[12] = v25;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      uint64_t v18 = (uint64_t)(v17 + 1);
    }
    v29[11] = v18;
    unint64_t v13 = v29[31];
LABEL_44:
    long long v27 = (void *)v29[22];
    if (!v27) {
      return;
    }
    while (1)
    {
      int64_t v30 = &v32;
      uint64_t v31 = 1;
      unint64_t v33 = v13;
      uint64_t v28 = v27[6];
      if (!v28) {
        break;
      }
      (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(void *)v28 + 48))(v28, &v33, &v30);
      long long v27 = (void *)*v27;
      if (!v27) {
        return;
      }
    }
LABEL_49:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_50:
    abort();
  }
  unint64_t v13 = v29[31];
  if (v29[10] + (((uint64_t)v11 - v29[7]) >> 3) == v29[11]) {
    goto LABEL_44;
  }
  uint64_t v14 = (void *)v29[16];
  if (v14)
  {
    while (1)
    {
      int64_t v30 = &v32;
      uint64_t v31 = 1;
      unint64_t v33 = v13;
      uint64_t v15 = v14[6];
      if (!v15) {
        break;
      }
      (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(void *)v15 + 48))(v15, &v33, &v30);
      uint64_t v14 = (void *)*v14;
      if (!v14) {
        return;
      }
    }
    goto LABEL_49;
  }
}

void sub_1A2759E50(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)2>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)2>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)2>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)2>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)2>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)2> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF523A20;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)2>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)2> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF523A20;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)2>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)2> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)1>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)1> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  unint64_t v33 = 0x9E3C294C9F37A685;
  int8x8_t v3 = a2[16];
  if (!*(void *)&v3) {
    goto LABEL_21;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = 0x9E3C294C9F37A685;
    if (*(void *)&v3 <= 0x9E3C294C9F37A685) {
      unint64_t v5 = 0x9E3C294C9F37A685 % *(void *)&v3;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v3 - 1) & 0x9E3C294C9F37A685;
  }
  uint64_t v6 = *(void **)(*(void *)&a2[15] + 8 * v5);
  if (!v6 || (unint64_t v7 = (void *)*v6) == 0) {
LABEL_21:
  }
    operator new();
  if (v4.u32[0] < 2uLL)
  {
    uint64_t v8 = *(void *)&v3 - 1;
    while (1)
    {
      uint64_t v10 = v7[1];
      if (v10 == 0x9E3C294C9F37A685)
      {
        if (v7[2] == 0x9E3C294C9F37A685) {
          goto LABEL_48;
        }
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_21;
      }
      unint64_t v7 = (void *)*v7;
      if (!v7) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v7[1];
    if (v9 == 0x9E3C294C9F37A685) {
      break;
    }
    if (v9 >= *(void *)&v3) {
      v9 %= *(void *)&v3;
    }
    if (v9 != v5) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v7 = (void *)*v7;
    if (!v7) {
      goto LABEL_21;
    }
  }
  if (v7[2] != 0x9E3C294C9F37A685) {
    goto LABEL_11;
  }
LABEL_48:
  uint64_t v29 = (void *)v7[3];
  uint64_t v32 = v2;
  uint64_t v11 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v29 + 4, (uint64_t)&v32);
  if (v12)
  {
    unint64_t v17 = (unsigned char *)v29[11];
    unint64_t v16 = v29[12];
    if ((unint64_t)v17 >= v16)
    {
      size_t v19 = (char *)v29[10];
      uint64_t v20 = v17 - v19;
      uint64_t v21 = v17 - v19 + 1;
      if (v21 < 0) {
        goto LABEL_50;
      }
      unint64_t v22 = v16 - (void)v19;
      if (2 * v22 > v21) {
        uint64_t v21 = 2 * v22;
      }
      if (v22 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v23 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v23 = v21;
      }
      if (v23) {
        long long v24 = (char *)operator new(v23);
      }
      else {
        long long v24 = 0;
      }
      uint64_t v25 = &v24[v23];
      uint64_t v18 = (uint64_t)&v24[v20 + 1];
      unint64_t v26 = (char *)(v19 - v17);
      if (v19 == v17) {
        unint64_t v26 = 0;
      }
      v29[10] = &v24[v20 + (void)v26];
      v29[11] = v18;
      v29[12] = v25;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      uint64_t v18 = (uint64_t)(v17 + 1);
    }
    v29[11] = v18;
    unint64_t v13 = v29[31];
LABEL_44:
    long long v27 = (void *)v29[22];
    if (!v27) {
      return;
    }
    while (1)
    {
      int64_t v30 = &v32;
      uint64_t v31 = 1;
      unint64_t v33 = v13;
      uint64_t v28 = v27[6];
      if (!v28) {
        break;
      }
      (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(void *)v28 + 48))(v28, &v33, &v30);
      long long v27 = (void *)*v27;
      if (!v27) {
        return;
      }
    }
LABEL_49:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_50:
    abort();
  }
  unint64_t v13 = v29[31];
  if (v29[10] + (((uint64_t)v11 - v29[7]) >> 3) == v29[11]) {
    goto LABEL_44;
  }
  uint64_t v14 = (void *)v29[16];
  if (v14)
  {
    while (1)
    {
      int64_t v30 = &v32;
      uint64_t v31 = 1;
      unint64_t v33 = v13;
      uint64_t v15 = v14[6];
      if (!v15) {
        break;
      }
      (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(void *)v15 + 48))(v15, &v33, &v30);
      uint64_t v14 = (void *)*v14;
      if (!v14) {
        return;
      }
    }
    goto LABEL_49;
  }
}

void sub_1A275A464(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)1>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)1>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)1>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)1>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)1>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)1> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5239D8;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)1>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)1> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF5239D8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)1>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)1> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)0>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)0> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  uint64_t v33 = 0x2636D6B46908A08CLL;
  int8x8_t v3 = a2[16];
  if (!*(void *)&v3) {
    goto LABEL_21;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    uint64_t v5 = 0x2636D6B46908A08CLL;
    if (*(void *)&v3 <= 0x2636D6B46908A08CuLL) {
      uint64_t v5 = 0x2636D6B46908A08CuLL % *(void *)&v3;
    }
  }
  else
  {
    uint64_t v5 = (*(void *)&v3 - 1) & 0x2636D6B46908A08CLL;
  }
  uint64_t v6 = *(void **)(*(void *)&a2[15] + 8 * v5);
  if (!v6 || (unint64_t v7 = (void *)*v6) == 0) {
LABEL_21:
  }
    operator new();
  if (v4.u32[0] < 2uLL)
  {
    uint64_t v8 = *(void *)&v3 - 1;
    while (1)
    {
      uint64_t v10 = v7[1];
      if (v10 == 0x2636D6B46908A08CLL)
      {
        if (v7[2] == 0x2636D6B46908A08CLL) {
          goto LABEL_48;
        }
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_21;
      }
      unint64_t v7 = (void *)*v7;
      if (!v7) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v7[1];
    if (v9 == 0x2636D6B46908A08CLL) {
      break;
    }
    if (v9 >= *(void *)&v3) {
      v9 %= *(void *)&v3;
    }
    if (v9 != v5) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v7 = (void *)*v7;
    if (!v7) {
      goto LABEL_21;
    }
  }
  if (v7[2] != 0x2636D6B46908A08CLL) {
    goto LABEL_11;
  }
LABEL_48:
  uint64_t v29 = (void *)v7[3];
  uint64_t v32 = v2;
  uint64_t v11 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v29 + 4, (uint64_t)&v32);
  if (v12)
  {
    unint64_t v17 = (unsigned char *)v29[11];
    unint64_t v16 = v29[12];
    if ((unint64_t)v17 >= v16)
    {
      size_t v19 = (char *)v29[10];
      uint64_t v20 = v17 - v19;
      uint64_t v21 = v17 - v19 + 1;
      if (v21 < 0) {
        goto LABEL_50;
      }
      unint64_t v22 = v16 - (void)v19;
      if (2 * v22 > v21) {
        uint64_t v21 = 2 * v22;
      }
      if (v22 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v23 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v23 = v21;
      }
      if (v23) {
        long long v24 = (char *)operator new(v23);
      }
      else {
        long long v24 = 0;
      }
      uint64_t v25 = &v24[v23];
      uint64_t v18 = (uint64_t)&v24[v20 + 1];
      unint64_t v26 = (char *)(v19 - v17);
      if (v19 == v17) {
        unint64_t v26 = 0;
      }
      v29[10] = &v24[v20 + (void)v26];
      v29[11] = v18;
      v29[12] = v25;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      uint64_t v18 = (uint64_t)(v17 + 1);
    }
    v29[11] = v18;
    uint64_t v13 = v29[31];
LABEL_44:
    long long v27 = (void *)v29[22];
    if (!v27) {
      return;
    }
    while (1)
    {
      int64_t v30 = &v32;
      uint64_t v31 = 1;
      uint64_t v33 = v13;
      uint64_t v28 = v27[6];
      if (!v28) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v28 + 48))(v28, &v33, &v30);
      long long v27 = (void *)*v27;
      if (!v27) {
        return;
      }
    }
LABEL_49:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_50:
    abort();
  }
  uint64_t v13 = v29[31];
  if (v29[10] + (((uint64_t)v11 - v29[7]) >> 3) == v29[11]) {
    goto LABEL_44;
  }
  uint64_t v14 = (void *)v29[16];
  if (v14)
  {
    while (1)
    {
      int64_t v30 = &v32;
      uint64_t v31 = 1;
      uint64_t v33 = v13;
      uint64_t v15 = v14[6];
      if (!v15) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v15 + 48))(v15, &v33, &v30);
      uint64_t v14 = (void *)*v14;
      if (!v14) {
        return;
      }
    }
    goto LABEL_49;
  }
}

void sub_1A275AA78(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)0>>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)0>>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)0>>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::IntendedSceneLayerType<(md::SceneLayer)0>>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)0>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)0> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &off_1EF523990;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)0>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)0> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &off_1EF523990;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedSceneLayerType<(md::SceneLayer)0>>(gdc::Entity,md::ls::IntendedSceneLayerType<(md::SceneLayer)0> &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DataForCommandBuffer>(gdc::Entity,md::ls::DataForCommandBuffer &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::DataForCommandBuffer>(a2);
  long long v23 = *(_OWORD *)(a1 + 8);
  uint64_t v24 = *(void *)(a1 + 24);
  uint64_t v25 = v3;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v25);
  if (v6)
  {
    char v12 = (void *)v4[11];
    unint64_t v11 = v4[12];
    if ((unint64_t)v12 >= v11)
    {
      uint64_t v14 = (void *)v4[10];
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v12 - v14) + 1;
      if (v15 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_30;
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)v14) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        if (v17 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v18 = (char *)operator new(24 * v17);
      }
      else
      {
        uint64_t v18 = 0;
      }
      size_t v19 = &v18[8 * (v12 - v14)];
      *(_OWORD *)size_t v19 = v23;
      *((void *)v19 + 2) = v24;
      uint64_t v13 = v19 + 24;
      if (v12 != v14)
      {
        do
        {
          long long v20 = *(_OWORD *)(v12 - 3);
          *((void *)v19 - 1) = *(v12 - 1);
          *(_OWORD *)(v19 - 24) = v20;
          v19 -= 24;
          v12 -= 3;
        }
        while (v12 != v14);
        char v12 = (void *)v4[10];
      }
      v4[10] = v19;
      v4[11] = v13;
      v4[12] = &v18[24 * v17];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(_OWORD *)char v12 = v23;
      v12[2] = v24;
      uint64_t v13 = v12 + 3;
    }
    v4[11] = v13;
    uint64_t v8 = v4[31];
  }
  else
  {
    uint64_t v7 = v4[10] + 24 * (((uint64_t)v5 - v4[7]) >> 3);
    *(_OWORD *)uint64_t v7 = v23;
    *(void *)(v7 + 16) = v24;
    uint64_t v8 = v4[31];
    if (v7 != v4[11])
    {
      uint64_t v9 = (void *)v4[16];
      if (v9)
      {
        while (1)
        {
          long long v27 = &v25;
          uint64_t v28 = 1;
          uint64_t v26 = v8;
          uint64_t v10 = v9[6];
          if (!v10) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v10 + 48))(v10, &v26, &v27);
          uint64_t v9 = (void *)*v9;
          if (!v9) {
            return;
          }
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  uint64_t v21 = (void *)v4[22];
  if (v21)
  {
    while (1)
    {
      long long v27 = &v25;
      uint64_t v28 = 1;
      uint64_t v26 = v8;
      uint64_t v22 = v21[6];
      if (!v22) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v22 + 48))(v22, &v26, &v27);
      uint64_t v21 = (void *)*v21;
      if (!v21) {
        return;
      }
    }
    goto LABEL_29;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DataForCommandBuffer>(gdc::Entity,md::ls::DataForCommandBuffer &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5231B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DataForCommandBuffer>(gdc::Entity,md::ls::DataForCommandBuffer &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF5231B0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DataForCommandBuffer>(gdc::Entity,md::ls::DataForCommandBuffer &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderItemTypeID>(gdc::Entity,md::ls::RenderItemTypeID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v34 = (uint64_t *)0xCC7861782DE34E23;
  int8x8_t v3 = a2[16];
  if (!*(void *)&v3) {
    goto LABEL_21;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = 0xCC7861782DE34E23;
    if (*(void *)&v3 <= 0xCC7861782DE34E23) {
      unint64_t v5 = 0xCC7861782DE34E23 % *(void *)&v3;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v3 - 1) & 0xCC7861782DE34E23;
  }
  char v6 = *(void **)(*(void *)&a2[15] + 8 * v5);
  if (!v6 || (uint64_t v7 = (void *)*v6) == 0) {
LABEL_21:
  }
    operator new();
  if (v4.u32[0] < 2uLL)
  {
    uint64_t v8 = *(void *)&v3 - 1;
    while (1)
    {
      uint64_t v10 = v7[1];
      if (v10 == 0xCC7861782DE34E23)
      {
        if (v7[2] == 0xCC7861782DE34E23) {
          goto LABEL_50;
        }
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_21;
      }
      uint64_t v7 = (void *)*v7;
      if (!v7) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v7[1];
    if (v9 == 0xCC7861782DE34E23) {
      break;
    }
    if (v9 >= *(void *)&v3) {
      v9 %= *(void *)&v3;
    }
    if (v9 != v5) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v7 = (void *)*v7;
    if (!v7) {
      goto LABEL_21;
    }
  }
  if (v7[2] != 0xCC7861782DE34E23) {
    goto LABEL_11;
  }
LABEL_50:
  uint64_t v29 = (void *)v7[3];
  long long v30 = *(_OWORD *)(a1 + 8);
  uint64_t v31 = *(void *)(a1 + 24);
  uint64_t v32 = v2;
  unint64_t v11 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v29 + 4, (uint64_t)&v32);
  if (v12)
  {
    uint64_t v18 = (void *)v29[11];
    unint64_t v17 = v29[12];
    if ((unint64_t)v18 >= v17)
    {
      long long v20 = (void *)v29[10];
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (v18 - v20) + 1;
      if (v21 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_52;
      }
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (void)v20) >> 3);
      if (2 * v22 > v21) {
        unint64_t v21 = 2 * v22;
      }
      if (v22 >= 0x555555555555555) {
        unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        if (v23 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v24 = (char *)operator new(24 * v23);
      }
      else
      {
        uint64_t v24 = 0;
      }
      uint64_t v25 = &v24[8 * (v18 - v20)];
      *(_OWORD *)uint64_t v25 = v30;
      *((void *)v25 + 2) = v31;
      size_t v19 = v25 + 24;
      if (v18 != v20)
      {
        do
        {
          long long v26 = *(_OWORD *)(v18 - 3);
          *((void *)v25 - 1) = *(v18 - 1);
          *(_OWORD *)(v25 - 24) = v26;
          v25 -= 24;
          v18 -= 3;
        }
        while (v18 != v20);
        uint64_t v18 = (void *)v29[10];
      }
      v29[10] = v25;
      v29[11] = v19;
      v29[12] = &v24[24 * v23];
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *(_OWORD *)uint64_t v18 = v30;
      v18[2] = v31;
      size_t v19 = v18 + 3;
    }
    v29[11] = v19;
    uint64_t v14 = v29[31];
LABEL_46:
    long long v27 = (void *)v29[22];
    if (!v27) {
      return;
    }
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v14;
      uint64_t v28 = v27[6];
      if (!v28) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v28 + 48))(v28, &v33, &v34);
      long long v27 = (void *)*v27;
      if (!v27) {
        return;
      }
    }
LABEL_51:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_52:
    abort();
  }
  uint64_t v13 = v29[10] + 24 * (((uint64_t)v11 - v29[7]) >> 3);
  *(_OWORD *)uint64_t v13 = v30;
  *(void *)(v13 + 16) = v31;
  uint64_t v14 = v29[31];
  if (v13 == v29[11]) {
    goto LABEL_46;
  }
  unint64_t v15 = (void *)v29[16];
  if (v15)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v14;
      uint64_t v16 = v15[6];
      if (!v16) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v16 + 48))(v16, &v33, &v34);
      unint64_t v15 = (void *)*v15;
      if (!v15) {
        return;
      }
    }
    goto LABEL_51;
  }
}

void sub_1A275B448(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<md::ls::RenderItemTypeID>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::RenderItemTypeID>::remove(void *a1, unint64_t a2)
{
  unint64_t v20 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10] + 24 * v7;
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  uint64_t v16 = *(void *)(v15 - 8);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)(v15 - 24);
  *(void *)(v14 + 16) = v16;
  a1[11] -= 24;
  unint64_t v17 = (void *)a1[28];
  if (!v17) {
    return 1;
  }
  uint64_t v18 = a1[31];
  while (1)
  {
    v22[0] = &v20;
    v22[1] = 1;
    uint64_t v21 = v18;
    uint64_t v19 = v17[6];
    if (!v19) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v19 + 48))(v19, &v21, v22);
    unint64_t v17 = (void *)*v17;
    if (!v17) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::RenderItemTypeID>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::RenderItemTypeID>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderItemTypeID>(gdc::Entity,md::ls::RenderItemTypeID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF522700;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderItemTypeID>(gdc::Entity,md::ls::RenderItemTypeID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF522700;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderItemTypeID>(gdc::Entity,md::ls::RenderItemTypeID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MainPassItem>(gdc::Entity,md::ls::MainPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::MainPassItem>(a2);
  uint64_t v22 = v2;
  uint64_t v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if (v5)
  {
    unint64_t v10 = (unsigned char *)v3[11];
    unint64_t v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      char v12 = (char *)v3[10];
      uint64_t v13 = v10 - v12;
      uint64_t v14 = v10 - v12 + 1;
      if (v14 < 0) {
        goto LABEL_28;
      }
      unint64_t v15 = v9 - (void)v12;
      if (2 * v15 > v14) {
        uint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16) {
        unint64_t v17 = (char *)operator new(v16);
      }
      else {
        unint64_t v17 = 0;
      }
      uint64_t v18 = &v17[v16];
      uint64_t v11 = (uint64_t)&v17[v13 + 1];
      uint64_t v19 = (char *)(v12 - v10);
      if (v12 == v10) {
        uint64_t v19 = 0;
      }
      v3[10] = &v17[v13 + (void)v19];
      v3[11] = v11;
      v3[12] = v18;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    uint64_t v6 = v3[31];
  }
  else
  {
    uint64_t v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      unint64_t v7 = (void *)v3[16];
      if (v7)
      {
        while (1)
        {
          uint64_t v24 = &v22;
          uint64_t v25 = 1;
          uint64_t v23 = v6;
          uint64_t v8 = v7[6];
          if (!v8) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v8 + 48))(v8, &v23, &v24);
          unint64_t v7 = (void *)*v7;
          if (!v7) {
            return;
          }
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  unint64_t v20 = (void *)v3[22];
  if (v20)
  {
    while (1)
    {
      uint64_t v24 = &v22;
      uint64_t v25 = 1;
      uint64_t v23 = v6;
      uint64_t v21 = v20[6];
      if (!v21) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v21 + 48))(v21, &v23, &v24);
      unint64_t v20 = (void *)*v20;
      if (!v20) {
        return;
      }
    }
    goto LABEL_27;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MainPassItem>(gdc::Entity,md::ls::MainPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF521C50;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MainPassItem>(gdc::Entity,md::ls::MainPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF521C50;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::MainPassItem>(gdc::Entity,md::ls::MainPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueRenderArrayID>(gdc::Entity,md::ls::UniqueRenderArrayID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::UniqueRenderArrayID>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_34;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v20 = operator new(8 * v19);
      }
      else
      {
        unint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      uint64_t v22 = &v20[8 * v19];
      *uint64_t v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 != v15)
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_38;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_38;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        long long v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      unint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          unint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  long long v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      long long v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_33;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueRenderArrayID>(gdc::Entity,md::ls::UniqueRenderArrayID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF523120;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueRenderArrayID>(gdc::Entity,md::ls::UniqueRenderArrayID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF523120;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UniqueRenderArrayID>(gdc::Entity,md::ls::UniqueRenderArrayID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasMaterialRasterRenderItem>(gdc::Entity,md::ls::HasMaterialRasterRenderItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  HasMaterialRasterRender = (void *)gdc::Registry::storage<md::ls::HasMaterialRasterRenderItem>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(HasMaterialRasterRender + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)HasMaterialRasterRender[11];
    unint64_t v12 = HasMaterialRasterRender[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)HasMaterialRasterRender[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v20 = operator new(8 * v19);
      }
      else
      {
        unint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      uint64_t v22 = &v20[8 * v19];
      *uint64_t v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        unint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        long long v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          unint64_t v15 = (char *)HasMaterialRasterRender[10];
        }
      }
      HasMaterialRasterRender[10] = v21;
      HasMaterialRasterRender[11] = v14;
      HasMaterialRasterRender[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    HasMaterialRasterRender[11] = v14;
    uint64_t v9 = HasMaterialRasterRender[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + HasMaterialRasterRender[10] - HasMaterialRasterRender[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = HasMaterialRasterRender[31];
    if (v8 != (void *)HasMaterialRasterRender[11])
    {
      unint64_t v10 = (void *)HasMaterialRasterRender[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          unint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  long long v30 = (void *)HasMaterialRasterRender[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      long long v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasMaterialRasterRenderItem>(gdc::Entity,md::ls::HasMaterialRasterRenderItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF524A70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasMaterialRasterRenderItem>(gdc::Entity,md::ls::HasMaterialRasterRenderItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF524A70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::HasMaterialRasterRenderItem>(gdc::Entity,md::ls::HasMaterialRasterRenderItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderItemUpdate>(gdc::Entity,md::ls::RenderItemUpdate &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::RenderItemUpdate>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_34;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v20 = operator new(8 * v19);
      }
      else
      {
        unint64_t v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      uint64_t v22 = &v20[8 * v19];
      *uint64_t v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 != v15)
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_38;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_38;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        long long v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      unint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          unint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_33:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_34:
        abort();
      }
      return;
    }
  }
  long long v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      long long v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_33;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderItemUpdate>(gdc::Entity,md::ls::RenderItemUpdate &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_1EF522748;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderItemUpdate>(gdc::Entity,md::ls::RenderItemUpdate &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_1EF522748;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderItemUpdate>(gdc::Entity,md::ls::RenderItemUpdate &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderItemID>(gdc::Entity,md::ls::RenderItemID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::RenderItemID>(a2);
  long long v23 = *(_OWORD *)(a1 + 8);
  uint64_t v24 = *(void *)(a1 + 24);
  uint64_t v25 = v3;
  uint64_t v5 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v25);
  if (v6)
  {
    unint64_t v12 = (void *)v4[11];
    unint64_t v11 = v4[12];
    if ((unint64_t)v12 >= v11)
    {
      uint64_t v14 = (void *)v4[10];
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v12 - v14) + 1;
      if (v15 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_30;
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)v14) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        if (v17 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v18 = (char *)operator new(24 * v17);
      }
      else
      {
        uint64_t v18 = 0;
      }
      unint64_t v19 = &v18[8 * (v12 - v14)];
      *(_OWORD *)unint64_t v19 = v23;
      *((void *)v19 + 2) = v24;
      uint64_t v13 = v19 + 24;
      if (v12 != v14)
      {
        do
        {
          long long v20 = *(_OWORD *)(v12 - 3);
          *((void *)v19 - 1) = *(v12 - 1);
          *(_OWORD *)(v19 - 24) = v20;
          v19 -= 24;
          v12 -= 3;
        }
        while (v12 != v14);
        unint64_t v12 = (void *)v4[10];
      }
      v4[10] = v19;
      v4[11] = v13;
      v4[12] = &v18[24 * v17];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v12 = v23;
      v12[2] = v24;
      uint64_t v13 = v12 + 3;
    }
    v4[11] = v13;
    uint64_t v8 = v4[31];
  }
  else
  {
    uint64_t v7 = v4[10] + 24 * (((uint64_t)v5 - v4[7]) >> 3);
    *(_OWORD *)uint64_t v7 = v23;
    *(void *)(v7 + 16) = v24;
    uint64_t v8 = v4[31];
    if (v7 != v4[11])
    {
      uint64_t v9 = (void *)v4[16];
      if (v9)
      {
        while (1)
        {
          uint64_t v27 = &v25;
          uint64_t v28 = 1;
          uint64_t v26 = v8;
          uint64_t v10 = v9[6];
          if (!v10) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v10 + 48))(v10, &v26, &v27);
          uint64_t v9 = (void *)*v9;
          if (!v9) {
            return;
          }
        }
LABEL_29:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_30:
        abort();
      }
      return;
    }
  }
  uint64_t v21 = (void *)v4[22];
  if (v21)
  {
    while (1)
    {
      uint64_t v27 = &v25;
      uint64_t v28 = 1;
      uint64_t v26 = v8;
      uint64_t v22 = v21[6];
      if (!v22) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v22 + 48))(v22, &v26, &v27);
      uint64_t v21 = (void *)*v21;
      if (!v21) {
        return;
      }
    }
    goto LABEL_29;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderItemID>(gdc::Entity,md::ls::RenderItemID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF521C98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderItemID>(gdc::Entity,md::ls::RenderItemID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF521C98;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RenderItemID>(gdc::Entity,md::ls::RenderItemID &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FinishedProcessing>(gdc::Entity,md::ls::FinishedProcessing &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::FinishedProcessing>(a2);
  uint64_t v22 = v2;
  uint64_t v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if (v5)
  {
    uint64_t v10 = (unsigned char *)v3[11];
    unint64_t v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      unint64_t v12 = (char *)v3[10];
      uint64_t v13 = v10 - v12;
      uint64_t v14 = v10 - v12 + 1;
      if (v14 < 0) {
        goto LABEL_28;
      }
      unint64_t v15 = v9 - (void)v12;
      if (2 * v15 > v14) {
        uint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16) {
        unint64_t v17 = (char *)operator new(v16);
      }
      else {
        unint64_t v17 = 0;
      }
      uint64_t v18 = &v17[v16];
      uint64_t v11 = (uint64_t)&v17[v13 + 1];
      unint64_t v19 = (char *)(v12 - v10);
      if (v12 == v10) {
        unint64_t v19 = 0;
      }
      v3[10] = &v17[v13 + (void)v19];
      v3[11] = v11;
      v3[12] = v18;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    uint64_t v6 = v3[31];
  }
  else
  {
    uint64_t v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      uint64_t v7 = (void *)v3[16];
      if (v7)
      {
        while (1)
        {
          uint64_t v24 = &v22;
          uint64_t v25 = 1;
          uint64_t v23 = v6;
          uint64_t v8 = v7[6];
          if (!v8) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v8 + 48))(v8, &v23, &v24);
          uint64_t v7 = (void *)*v7;
          if (!v7) {
            return;
          }
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  long long v20 = (void *)v3[22];
  if (v20)
  {
    while (1)
    {
      uint64_t v24 = &v22;
      uint64_t v25 = 1;
      uint64_t v23 = v6;
      uint64_t v21 = v20[6];
      if (!v21) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v21 + 48))(v21, &v23, &v24);
      long long v20 = (void *)*v20;
      if (!v20) {
        return;
      }
    }
    goto LABEL_27;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FinishedProcessing>(gdc::Entity,md::ls::FinishedProcessing &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF522DC0;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FinishedProcessing>(gdc::Entity,md::ls::FinishedProcessing &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF522DC0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FinishedProcessing>(gdc::Entity,md::ls::FinishedProcessing &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::VisibilityTestResult>(gdc::Entity,md::ls::VisibilityTestResult &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 12);
  uint64_t v4 = (void *)gdc::Registry::storage<md::ls::VisibilityTestResult>(a2);
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t v36 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if (v7)
  {
    uint64_t v13 = (unsigned char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      unsigned char *v13 = v5;
      uint64_t v14 = (uint64_t)(v13 + 1);
LABEL_37:
      v4[11] = v14;
      uint64_t v9 = v4[31];
      goto LABEL_38;
    }
    unint64_t v15 = (unsigned char *)v4[10];
    unint64_t v16 = v13 - v15;
    uint64_t v17 = v13 - v15 + 1;
    if (v17 < 0) {
      goto LABEL_43;
    }
    unint64_t v18 = v12 - (void)v15;
    if (2 * v18 > v17) {
      uint64_t v17 = 2 * v18;
    }
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v19 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v19 = v17;
    }
    if (v19) {
      long long v20 = (char *)operator new(v19);
    }
    else {
      long long v20 = 0;
    }
    uint64_t v21 = &v20[v16];
    uint64_t v22 = &v20[v19];
    v20[v16] = v5;
    uint64_t v14 = (uint64_t)&v20[v16 + 1];
    if (v13 == v15)
    {
LABEL_35:
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
      goto LABEL_37;
    }
    if (v16 < 8 || (unint64_t)(v15 - v20) < 0x20) {
      goto LABEL_32;
    }
    if (v16 >= 0x20)
    {
      unint64_t v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v24 = (long long *)(v13 - 16);
      uint64_t v25 = &v20[v13 - 16 - v15];
      unint64_t v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v27 = *v24;
        *((_OWORD *)v25 - 1) = *(v24 - 1);
        *(_OWORD *)uint64_t v25 = v27;
        v25 -= 32;
        v24 -= 2;
        v26 -= 32;
      }
      while (v26);
      if (v16 == v23) {
        goto LABEL_34;
      }
      if ((v16 & 0x18) == 0)
      {
        v21 -= v23;
        v13 -= v23;
        goto LABEL_32;
      }
    }
    else
    {
      unint64_t v23 = 0;
    }
    unint64_t v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v29 = &v13[-v23 - 8];
    int64_t v30 = v29 - v15;
    do
    {
      uint64_t v31 = *(void *)v29;
      v29 -= 8;
      *(void *)&v20[v30] = v31;
      v30 -= 8;
      v28 += 8;
    }
    while (v28);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_34;
    }
    v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
LABEL_32:
    uint64_t v32 = v21 - 1;
    do
    {
      char v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
LABEL_34:
    uint64_t v21 = v20;
    goto LABEL_35;
  }
  uint64_t v8 = (unsigned char *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *uint64_t v8 = v5;
  uint64_t v9 = v4[31];
  if (v8 != (unsigned char *)v4[11])
  {
    uint64_t v10 = (void *)v4[16];
    if (v10)
    {
      while (1)
      {
        uint64_t v38 = &v36;
        uint64_t v39 = 1;
        uint64_t v37 = v9;
        uint64_t v11 = v10[6];
        if (!v11) {
          break;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v37, &v38);
        uint64_t v10 = (void *)*v10;
        if (!v10) {
          return;
        }
      }
LABEL_42:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
      abort();
    }
    return;
  }
LABEL_38:
  uint64_t v34 = (void *)v4[22];
  if (v34)
  {
    while (1)
    {
      uint64_t v38 = &v36;
      uint64_t v39 = 1;
      uint64_t v37 = v9;
      uint64_t v35 = v34[6];
      if (!v35) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v35 + 48))(v35, &v37, &v38);
      uint64_t v34 = (void *)*v34;
      if (!v34) {
        return;
      }
    }
    goto LABEL_42;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::VisibilityTestResult>(gdc::Entity,md::ls::VisibilityTestResult &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF523678;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::VisibilityTestResult>(gdc::Entity,md::ls::VisibilityTestResult &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF523678;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::VisibilityTestResult>(gdc::Entity,md::ls::VisibilityTestResult &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::CommandBufferRef>(gdc::Entity,std::type_identity<md::ls::CommandBufferRef>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::CommandBufferRef>(gdc::Entity,std::type_identity<md::ls::CommandBufferRef>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::CommandBufferRef>(a2);
  unint64_t v4 = *(void *)(a1 + 8);
  gdc::ComponentStorageWrapper<md::ls::CommandBufferRef>::remove(v3, v4);
}

uint64_t std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::CommandBufferRef>(gdc::Entity,std::type_identity<md::ls::CommandBufferRef>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::CommandBufferRef>(gdc::Entity,std::type_identity<md::ls::CommandBufferRef>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EF5267F8;
  a2[1] = *(void *)(result + 8);
  return result;
}

void *std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::CommandBufferRef>(gdc::Entity,std::type_identity<md::ls::CommandBufferRef>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::CommandBufferRef>(gdc::Entity,std::type_identity<md::ls::CommandBufferRef>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF5267F8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::CommandBufferRef>(gdc::Entity,std::type_identity<md::ls::CommandBufferRef>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::CommandBufferRef>(gdc::Entity,std::type_identity<md::ls::CommandBufferRef>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CommandBufferRef>(gdc::Entity,md::ls::CommandBufferRef &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = (void *)gdc::Registry::storage<md::ls::CommandBufferRef>(a2);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v32 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v32);
  if (v7)
  {
    uint64_t v13 = (char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 >= v12)
    {
      unint64_t v15 = (char *)v4[10];
      uint64_t v16 = (v13 - v15) >> 3;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61) {
        goto LABEL_36;
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        long long v20 = operator new(8 * v19);
      }
      else
      {
        long long v20 = 0;
      }
      uint64_t v21 = &v20[8 * v16];
      uint64_t v22 = &v20[8 * v19];
      *uint64_t v21 = v5;
      uint64_t v14 = v21 + 1;
      if (v13 == v15)
      {
        unint64_t v15 = v13;
      }
      else
      {
        unint64_t v23 = v13 - v15 - 8;
        if (v23 < 0x58) {
          goto LABEL_40;
        }
        if ((unint64_t)(v15 - v20) < 0x20) {
          goto LABEL_40;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        uint64_t v25 = &v20[8 * v16 - 16];
        unint64_t v26 = v13 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *uint64_t v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v21 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v13 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_40:
          do
          {
            uint64_t v29 = *((void *)v13 - 1);
            v13 -= 8;
            *--uint64_t v21 = v29;
          }
          while (v13 != v15);
          unint64_t v15 = (char *)v4[10];
        }
      }
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *(void *)uint64_t v13 = v5;
      uint64_t v14 = v13 + 8;
    }
    v4[11] = v14;
    uint64_t v9 = v4[31];
  }
  else
  {
    uint64_t v8 = (void *)((char *)v6 + v4[10] - v4[7]);
    *uint64_t v8 = v5;
    uint64_t v9 = v4[31];
    if (v8 != (void *)v4[11])
    {
      uint64_t v10 = (void *)v4[16];
      if (v10)
      {
        while (1)
        {
          uint64_t v34 = &v32;
          uint64_t v35 = 1;
          uint64_t v33 = v9;
          uint64_t v11 = v10[6];
          if (!v11) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v33, &v34);
          uint64_t v10 = (void *)*v10;
          if (!v10) {
            return;
          }
        }
LABEL_35:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_36:
        abort();
      }
      return;
    }
  }
  int64_t v30 = (void *)v4[22];
  if (v30)
  {
    while (1)
    {
      uint64_t v34 = &v32;
      uint64_t v35 = 1;
      uint64_t v33 = v9;
      uint64_t v31 = v30[6];
      if (!v31) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v31 + 48))(v31, &v33, &v34);
      int64_t v30 = (void *)*v30;
      if (!v30) {
        return;
      }
    }
    goto LABEL_35;
  }
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CommandBufferRef>(gdc::Entity,md::ls::CommandBufferRef &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF522508;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CommandBufferRef>(gdc::Entity,md::ls::CommandBufferRef &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF522508;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::CommandBufferRef>(gdc::Entity,md::ls::CommandBufferRef &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DepthPeeledPassItem>(gdc::Entity,md::ls::DepthPeeledPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  unint64_t v33 = 0xB1EC8A230021F56BLL;
  int8x8_t v3 = a2[16];
  if (!*(void *)&v3) {
    goto LABEL_21;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = 0xB1EC8A230021F56BLL;
    if (*(void *)&v3 <= 0xB1EC8A230021F56BLL) {
      unint64_t v5 = 0xB1EC8A230021F56BLL % *(void *)&v3;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v3 - 1) & 0xB1EC8A230021F56BLL;
  }
  uint64_t v6 = *(void **)(*(void *)&a2[15] + 8 * v5);
  if (!v6 || (char v7 = (void *)*v6) == 0) {
LABEL_21:
  }
    operator new();
  if (v4.u32[0] < 2uLL)
  {
    uint64_t v8 = *(void *)&v3 - 1;
    while (1)
    {
      uint64_t v10 = v7[1];
      if (v10 == 0xB1EC8A230021F56BLL)
      {
        if (v7[2] == 0xB1EC8A230021F56BLL) {
          goto LABEL_48;
        }
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_21;
      }
      char v7 = (void *)*v7;
      if (!v7) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v7[1];
    if (v9 == 0xB1EC8A230021F56BLL) {
      break;
    }
    if (v9 >= *(void *)&v3) {
      v9 %= *(void *)&v3;
    }
    if (v9 != v5) {
      goto LABEL_21;
    }
LABEL_11:
    char v7 = (void *)*v7;
    if (!v7) {
      goto LABEL_21;
    }
  }
  if (v7[2] != 0xB1EC8A230021F56BLL) {
    goto LABEL_11;
  }
LABEL_48:
  uint64_t v29 = (void *)v7[3];
  uint64_t v32 = v2;
  uint64_t v11 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v29 + 4, (uint64_t)&v32);
  if (v12)
  {
    unint64_t v17 = (unsigned char *)v29[11];
    unint64_t v16 = v29[12];
    if ((unint64_t)v17 >= v16)
    {
      unint64_t v19 = (char *)v29[10];
      uint64_t v20 = v17 - v19;
      uint64_t v21 = v17 - v19 + 1;
      if (v21 < 0) {
        goto LABEL_50;
      }
      unint64_t v22 = v16 - (void)v19;
      if (2 * v22 > v21) {
        uint64_t v21 = 2 * v22;
      }
      if (v22 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v23 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v23 = v21;
      }
      if (v23) {
        uint64_t v24 = (char *)operator new(v23);
      }
      else {
        uint64_t v24 = 0;
      }
      uint64_t v25 = &v24[v23];
      uint64_t v18 = (uint64_t)&v24[v20 + 1];
      unint64_t v26 = (char *)(v19 - v17);
      if (v19 == v17) {
        unint64_t v26 = 0;
      }
      v29[10] = &v24[v20 + (void)v26];
      v29[11] = v18;
      v29[12] = v25;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      uint64_t v18 = (uint64_t)(v17 + 1);
    }
    v29[11] = v18;
    unint64_t v13 = v29[31];
LABEL_44:
    uint64_t v27 = (void *)v29[22];
    if (!v27) {
      return;
    }
    while (1)
    {
      int64_t v30 = &v32;
      uint64_t v31 = 1;
      unint64_t v33 = v13;
      uint64_t v28 = v27[6];
      if (!v28) {
        break;
      }
      (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(void *)v28 + 48))(v28, &v33, &v30);
      uint64_t v27 = (void *)*v27;
      if (!v27) {
        return;
      }
    }
LABEL_49:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_50:
    abort();
  }
  unint64_t v13 = v29[31];
  if (v29[10] + (((uint64_t)v11 - v29[7]) >> 3) == v29[11]) {
    goto LABEL_44;
  }
  uint64_t v14 = (void *)v29[16];
  if (v14)
  {
    while (1)
    {
      int64_t v30 = &v32;
      uint64_t v31 = 1;
      unint64_t v33 = v13;
      uint64_t v15 = v14[6];
      if (!v15) {
        break;
      }
      (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(void *)v15 + 48))(v15, &v33, &v30);
      uint64_t v14 = (void *)*v14;
      if (!v14) {
        return;
      }
    }
    goto LABEL_49;
  }
}

void sub_1A275D214(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<md::ls::DepthPeeledPassItem>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::DepthPeeledPassItem>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::DepthPeeledPassItem>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::DepthPeeledPassItem>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DepthPeeledPassItem>(gdc::Entity,md::ls::DepthPeeledPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF523000;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DepthPeeledPassItem>(gdc::Entity,md::ls::DepthPeeledPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF523000;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DepthPeeledPassItem>(gdc::Entity,md::ls::DepthPeeledPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void md::ita::CreateUnflattenedRenderItems::operator()(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  uint64_t v3 = HIDWORD(*v2);
  uint64_t v4 = *v2 << 32;
  v7[0] = &unk_1EF522DC0;
  v7[1] = v4;
  int v8 = v3;
  char v12 = v10;
  uint64_t v9 = v7;
  v10[0] = &unk_1EF522DC0;
  v10[1] = v4;
  int v11 = v3;
  int v13 = 0;
  ecs2::Runtime::queueCommand(v5, (uint64_t)v10);
  if (v13 != -1) {
    ((void (*)(char *, void *))off_1EF591178[v13])(&v6, v10);
  }
  int v13 = -1;
  if (v9 == v7)
  {
    (*(void (**)(void *))(v7[0] + 32))(v7);
  }
  else if (v9)
  {
    (*(void (**)(void))(*v9 + 40))();
  }
  gdc::Registry::create(*(gdc::Registry **)(*(void *)a1 + 8));
}

void sub_1A2760B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UnflattenedPassItem>(gdc::Entity,md::ls::UnflattenedPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  uint64_t v33 = 0x525987C8040ACB5FLL;
  int8x8_t v3 = a2[16];
  if (!*(void *)&v3) {
    goto LABEL_21;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    uint64_t v5 = 0x525987C8040ACB5FLL;
    if (*(void *)&v3 <= 0x525987C8040ACB5FuLL) {
      uint64_t v5 = 0x525987C8040ACB5FuLL % *(void *)&v3;
    }
  }
  else
  {
    uint64_t v5 = (*(void *)&v3 - 1) & 0x525987C8040ACB5FLL;
  }
  char v6 = *(void **)(*(void *)&a2[15] + 8 * v5);
  if (!v6 || (unint64_t v7 = (void *)*v6) == 0) {
LABEL_21:
  }
    operator new();
  if (v4.u32[0] < 2uLL)
  {
    uint64_t v8 = *(void *)&v3 - 1;
    while (1)
    {
      uint64_t v10 = v7[1];
      if (v10 == 0x525987C8040ACB5FLL)
      {
        if (v7[2] == 0x525987C8040ACB5FLL) {
          goto LABEL_48;
        }
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_21;
      }
      unint64_t v7 = (void *)*v7;
      if (!v7) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v7[1];
    if (v9 == 0x525987C8040ACB5FLL) {
      break;
    }
    if (v9 >= *(void *)&v3) {
      v9 %= *(void *)&v3;
    }
    if (v9 != v5) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v7 = (void *)*v7;
    if (!v7) {
      goto LABEL_21;
    }
  }
  if (v7[2] != 0x525987C8040ACB5FLL) {
    goto LABEL_11;
  }
LABEL_48:
  uint64_t v29 = (void *)v7[3];
  uint64_t v32 = v2;
  int v11 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v29 + 4, (uint64_t)&v32);
  if (v12)
  {
    unint64_t v17 = (unsigned char *)v29[11];
    unint64_t v16 = v29[12];
    if ((unint64_t)v17 >= v16)
    {
      unint64_t v19 = (char *)v29[10];
      uint64_t v20 = v17 - v19;
      uint64_t v21 = v17 - v19 + 1;
      if (v21 < 0) {
        goto LABEL_50;
      }
      unint64_t v22 = v16 - (void)v19;
      if (2 * v22 > v21) {
        uint64_t v21 = 2 * v22;
      }
      if (v22 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v23 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v23 = v21;
      }
      if (v23) {
        uint64_t v24 = (char *)operator new(v23);
      }
      else {
        uint64_t v24 = 0;
      }
      uint64_t v25 = &v24[v23];
      uint64_t v18 = (uint64_t)&v24[v20 + 1];
      unint64_t v26 = (char *)(v19 - v17);
      if (v19 == v17) {
        unint64_t v26 = 0;
      }
      v29[10] = &v24[v20 + (void)v26];
      v29[11] = v18;
      v29[12] = v25;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      uint64_t v18 = (uint64_t)(v17 + 1);
    }
    v29[11] = v18;
    uint64_t v13 = v29[31];
LABEL_44:
    uint64_t v27 = (void *)v29[22];
    if (!v27) {
      return;
    }
    while (1)
    {
      int64_t v30 = &v32;
      uint64_t v31 = 1;
      uint64_t v33 = v13;
      uint64_t v28 = v27[6];
      if (!v28) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v28 + 48))(v28, &v33, &v30);
      uint64_t v27 = (void *)*v27;
      if (!v27) {
        return;
      }
    }
LABEL_49:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_50:
    abort();
  }
  uint64_t v13 = v29[31];
  if (v29[10] + (((uint64_t)v11 - v29[7]) >> 3) == v29[11]) {
    goto LABEL_44;
  }
  uint64_t v14 = (void *)v29[16];
  if (v14)
  {
    while (1)
    {
      int64_t v30 = &v32;
      uint64_t v31 = 1;
      uint64_t v33 = v13;
      uint64_t v15 = v14[6];
      if (!v15) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v15 + 48))(v15, &v33, &v30);
      uint64_t v14 = (void *)*v14;
      if (!v14) {
        return;
      }
    }
    goto LABEL_49;
  }
}

void sub_1A2760ED4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<md::ls::UnflattenedPassItem>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::UnflattenedPassItem>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::UnflattenedPassItem>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::UnflattenedPassItem>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UnflattenedPassItem>(gdc::Entity,md::ls::UnflattenedPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5230D8;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UnflattenedPassItem>(gdc::Entity,md::ls::UnflattenedPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF5230D8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UnflattenedPassItem>(gdc::Entity,md::ls::UnflattenedPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedStandardPassSceneDepth>(gdc::Entity,md::ls::IntendedStandardPassSceneDepth &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::IntendedStandardPassSceneDepth>(a2);
  uint64_t v22 = v2;
  uint64_t v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if (v5)
  {
    unint64_t v10 = (unsigned char *)v3[11];
    unint64_t v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      char v12 = (char *)v3[10];
      uint64_t v13 = v10 - v12;
      uint64_t v14 = v10 - v12 + 1;
      if (v14 < 0) {
        goto LABEL_28;
      }
      unint64_t v15 = v9 - (void)v12;
      if (2 * v15 > v14) {
        uint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16) {
        unint64_t v17 = (char *)operator new(v16);
      }
      else {
        unint64_t v17 = 0;
      }
      uint64_t v18 = &v17[v16];
      uint64_t v11 = (uint64_t)&v17[v13 + 1];
      unint64_t v19 = (char *)(v12 - v10);
      if (v12 == v10) {
        unint64_t v19 = 0;
      }
      v3[10] = &v17[v13 + (void)v19];
      v3[11] = v11;
      v3[12] = v18;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    uint64_t v6 = v3[31];
  }
  else
  {
    uint64_t v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      unint64_t v7 = (void *)v3[16];
      if (v7)
      {
        while (1)
        {
          uint64_t v24 = &v22;
          uint64_t v25 = 1;
          uint64_t v23 = v6;
          uint64_t v8 = v7[6];
          if (!v8) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v8 + 48))(v8, &v23, &v24);
          unint64_t v7 = (void *)*v7;
          if (!v7) {
            return;
          }
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  uint64_t v20 = (void *)v3[22];
  if (v20)
  {
    while (1)
    {
      uint64_t v24 = &v22;
      uint64_t v25 = 1;
      uint64_t v23 = v6;
      uint64_t v21 = v20[6];
      if (!v21) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v21 + 48))(v21, &v23, &v24);
      uint64_t v20 = (void *)*v20;
      if (!v20) {
        return;
      }
    }
    goto LABEL_27;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedStandardPassSceneDepth>(gdc::Entity,md::ls::IntendedStandardPassSceneDepth &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF525958;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedStandardPassSceneDepth>(gdc::Entity,md::ls::IntendedStandardPassSceneDepth &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF525958;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedStandardPassSceneDepth>(gdc::Entity,md::ls::IntendedStandardPassSceneDepth &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DepthPrePassItem>(gdc::Entity,md::ls::DepthPrePassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  uint64_t v33 = 0x1B35410F914DF9B5;
  int8x8_t v3 = a2[16];
  if (!*(void *)&v3) {
    goto LABEL_21;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    uint64_t v5 = 0x1B35410F914DF9B5;
    if (*(void *)&v3 <= 0x1B35410F914DF9B5uLL) {
      uint64_t v5 = 0x1B35410F914DF9B5uLL % *(void *)&v3;
    }
  }
  else
  {
    uint64_t v5 = (*(void *)&v3 - 1) & 0x1B35410F914DF9B5;
  }
  uint64_t v6 = *(void **)(*(void *)&a2[15] + 8 * v5);
  if (!v6 || (unint64_t v7 = (void *)*v6) == 0) {
LABEL_21:
  }
    operator new();
  if (v4.u32[0] < 2uLL)
  {
    uint64_t v8 = *(void *)&v3 - 1;
    while (1)
    {
      uint64_t v10 = v7[1];
      if (v10 == 0x1B35410F914DF9B5)
      {
        if (v7[2] == 0x1B35410F914DF9B5) {
          goto LABEL_48;
        }
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_21;
      }
      unint64_t v7 = (void *)*v7;
      if (!v7) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v7[1];
    if (v9 == 0x1B35410F914DF9B5) {
      break;
    }
    if (v9 >= *(void *)&v3) {
      v9 %= *(void *)&v3;
    }
    if (v9 != v5) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v7 = (void *)*v7;
    if (!v7) {
      goto LABEL_21;
    }
  }
  if (v7[2] != 0x1B35410F914DF9B5) {
    goto LABEL_11;
  }
LABEL_48:
  uint64_t v29 = (void *)v7[3];
  uint64_t v32 = v2;
  uint64_t v11 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v29 + 4, (uint64_t)&v32);
  if (v12)
  {
    unint64_t v17 = (unsigned char *)v29[11];
    unint64_t v16 = v29[12];
    if ((unint64_t)v17 >= v16)
    {
      unint64_t v19 = (char *)v29[10];
      uint64_t v20 = v17 - v19;
      uint64_t v21 = v17 - v19 + 1;
      if (v21 < 0) {
        goto LABEL_50;
      }
      unint64_t v22 = v16 - (void)v19;
      if (2 * v22 > v21) {
        uint64_t v21 = 2 * v22;
      }
      if (v22 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v23 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v23 = v21;
      }
      if (v23) {
        uint64_t v24 = (char *)operator new(v23);
      }
      else {
        uint64_t v24 = 0;
      }
      uint64_t v25 = &v24[v23];
      uint64_t v18 = (uint64_t)&v24[v20 + 1];
      unint64_t v26 = (char *)(v19 - v17);
      if (v19 == v17) {
        unint64_t v26 = 0;
      }
      v29[10] = &v24[v20 + (void)v26];
      v29[11] = v18;
      v29[12] = v25;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      uint64_t v18 = (uint64_t)(v17 + 1);
    }
    v29[11] = v18;
    uint64_t v13 = v29[31];
LABEL_44:
    uint64_t v27 = (void *)v29[22];
    if (!v27) {
      return;
    }
    while (1)
    {
      int64_t v30 = &v32;
      uint64_t v31 = 1;
      uint64_t v33 = v13;
      uint64_t v28 = v27[6];
      if (!v28) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v28 + 48))(v28, &v33, &v30);
      uint64_t v27 = (void *)*v27;
      if (!v27) {
        return;
      }
    }
LABEL_49:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_50:
    abort();
  }
  uint64_t v13 = v29[31];
  if (v29[10] + (((uint64_t)v11 - v29[7]) >> 3) == v29[11]) {
    goto LABEL_44;
  }
  uint64_t v14 = (void *)v29[16];
  if (v14)
  {
    while (1)
    {
      int64_t v30 = &v32;
      uint64_t v31 = 1;
      uint64_t v33 = v13;
      uint64_t v15 = v14[6];
      if (!v15) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v15 + 48))(v15, &v33, &v30);
      uint64_t v14 = (void *)*v14;
      if (!v14) {
        return;
      }
    }
    goto LABEL_49;
  }
}

void sub_1A276173C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<md::ls::DepthPrePassItem>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::DepthPrePassItem>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::DepthPrePassItem>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::DepthPrePassItem>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DepthPrePassItem>(gdc::Entity,md::ls::DepthPrePassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF522550;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DepthPrePassItem>(gdc::Entity,md::ls::DepthPrePassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF522550;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DepthPrePassItem>(gdc::Entity,md::ls::DepthPrePassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FinishedProcessingDepthPrePass>(gdc::Entity,md::ls::FinishedProcessingDepthPrePass &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::FinishedProcessingDepthPrePass>(a2);
  uint64_t v22 = v2;
  uint64_t v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if (v5)
  {
    unint64_t v10 = (unsigned char *)v3[11];
    unint64_t v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      char v12 = (char *)v3[10];
      uint64_t v13 = v10 - v12;
      uint64_t v14 = v10 - v12 + 1;
      if (v14 < 0) {
        goto LABEL_28;
      }
      unint64_t v15 = v9 - (void)v12;
      if (2 * v15 > v14) {
        uint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16) {
        unint64_t v17 = (char *)operator new(v16);
      }
      else {
        unint64_t v17 = 0;
      }
      uint64_t v18 = &v17[v16];
      uint64_t v11 = (uint64_t)&v17[v13 + 1];
      unint64_t v19 = (char *)(v12 - v10);
      if (v12 == v10) {
        unint64_t v19 = 0;
      }
      v3[10] = &v17[v13 + (void)v19];
      v3[11] = v11;
      v3[12] = v18;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    uint64_t v6 = v3[31];
  }
  else
  {
    uint64_t v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      unint64_t v7 = (void *)v3[16];
      if (v7)
      {
        while (1)
        {
          uint64_t v24 = &v22;
          uint64_t v25 = 1;
          uint64_t v23 = v6;
          uint64_t v8 = v7[6];
          if (!v8) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v8 + 48))(v8, &v23, &v24);
          unint64_t v7 = (void *)*v7;
          if (!v7) {
            return;
          }
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  uint64_t v20 = (void *)v3[22];
  if (v20)
  {
    while (1)
    {
      uint64_t v24 = &v22;
      uint64_t v25 = 1;
      uint64_t v23 = v6;
      uint64_t v21 = v20[6];
      if (!v21) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v21 + 48))(v21, &v23, &v24);
      uint64_t v20 = (void *)*v20;
      if (!v20) {
        return;
      }
    }
    goto LABEL_27;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FinishedProcessingDepthPrePass>(gdc::Entity,md::ls::FinishedProcessingDepthPrePass &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5258C8;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FinishedProcessingDepthPrePass>(gdc::Entity,md::ls::FinishedProcessingDepthPrePass &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF5258C8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FinishedProcessingDepthPrePass>(gdc::Entity,md::ls::FinishedProcessingDepthPrePass &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedStandardPassShadow>(gdc::Entity,md::ls::IntendedStandardPassShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::IntendedStandardPassShadow>(a2);
  uint64_t v22 = v2;
  uint64_t v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if (v5)
  {
    unint64_t v10 = (unsigned char *)v3[11];
    unint64_t v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      char v12 = (char *)v3[10];
      uint64_t v13 = v10 - v12;
      uint64_t v14 = v10 - v12 + 1;
      if (v14 < 0) {
        goto LABEL_28;
      }
      unint64_t v15 = v9 - (void)v12;
      if (2 * v15 > v14) {
        uint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16) {
        unint64_t v17 = (char *)operator new(v16);
      }
      else {
        unint64_t v17 = 0;
      }
      uint64_t v18 = &v17[v16];
      uint64_t v11 = (uint64_t)&v17[v13 + 1];
      unint64_t v19 = (char *)(v12 - v10);
      if (v12 == v10) {
        unint64_t v19 = 0;
      }
      v3[10] = &v17[v13 + (void)v19];
      v3[11] = v11;
      v3[12] = v18;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    uint64_t v6 = v3[31];
  }
  else
  {
    uint64_t v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      unint64_t v7 = (void *)v3[16];
      if (v7)
      {
        while (1)
        {
          uint64_t v24 = &v22;
          uint64_t v25 = 1;
          uint64_t v23 = v6;
          uint64_t v8 = v7[6];
          if (!v8) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v8 + 48))(v8, &v23, &v24);
          unint64_t v7 = (void *)*v7;
          if (!v7) {
            return;
          }
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  uint64_t v20 = (void *)v3[22];
  if (v20)
  {
    while (1)
    {
      uint64_t v24 = &v22;
      uint64_t v25 = 1;
      uint64_t v23 = v6;
      uint64_t v21 = v20[6];
      if (!v21) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v21 + 48))(v21, &v23, &v24);
      uint64_t v20 = (void *)*v20;
      if (!v20) {
        return;
      }
    }
    goto LABEL_27;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedStandardPassShadow>(gdc::Entity,md::ls::IntendedStandardPassShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5246C8;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedStandardPassShadow>(gdc::Entity,md::ls::IntendedStandardPassShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF5246C8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::IntendedStandardPassShadow>(gdc::Entity,md::ls::IntendedStandardPassShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ShadowPassItem>(gdc::Entity,md::ls::ShadowPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  uint64_t v33 = 0x9E1F385137C59FBLL;
  int8x8_t v3 = a2[16];
  if (!*(void *)&v3) {
    goto LABEL_21;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    uint64_t v5 = 0x9E1F385137C59FBLL;
    if (*(void *)&v3 <= 0x9E1F385137C59FBuLL) {
      uint64_t v5 = 0x9E1F385137C59FBuLL % *(void *)&v3;
    }
  }
  else
  {
    uint64_t v5 = (*(void *)&v3 - 1) & 0x9E1F385137C59FBLL;
  }
  uint64_t v6 = *(void **)(*(void *)&a2[15] + 8 * v5);
  if (!v6 || (unint64_t v7 = (void *)*v6) == 0) {
LABEL_21:
  }
    operator new();
  if (v4.u32[0] < 2uLL)
  {
    uint64_t v8 = *(void *)&v3 - 1;
    while (1)
    {
      uint64_t v10 = v7[1];
      if (v10 == 0x9E1F385137C59FBLL)
      {
        if (v7[2] == 0x9E1F385137C59FBLL) {
          goto LABEL_48;
        }
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_21;
      }
      unint64_t v7 = (void *)*v7;
      if (!v7) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v7[1];
    if (v9 == 0x9E1F385137C59FBLL) {
      break;
    }
    if (v9 >= *(void *)&v3) {
      v9 %= *(void *)&v3;
    }
    if (v9 != v5) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v7 = (void *)*v7;
    if (!v7) {
      goto LABEL_21;
    }
  }
  if (v7[2] != 0x9E1F385137C59FBLL) {
    goto LABEL_11;
  }
LABEL_48:
  uint64_t v29 = (void *)v7[3];
  uint64_t v32 = v2;
  uint64_t v11 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v29 + 4, (uint64_t)&v32);
  if (v12)
  {
    unint64_t v17 = (unsigned char *)v29[11];
    unint64_t v16 = v29[12];
    if ((unint64_t)v17 >= v16)
    {
      unint64_t v19 = (char *)v29[10];
      uint64_t v20 = v17 - v19;
      uint64_t v21 = v17 - v19 + 1;
      if (v21 < 0) {
        goto LABEL_50;
      }
      unint64_t v22 = v16 - (void)v19;
      if (2 * v22 > v21) {
        uint64_t v21 = 2 * v22;
      }
      if (v22 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v23 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v23 = v21;
      }
      if (v23) {
        uint64_t v24 = (char *)operator new(v23);
      }
      else {
        uint64_t v24 = 0;
      }
      uint64_t v25 = &v24[v23];
      uint64_t v18 = (uint64_t)&v24[v20 + 1];
      unint64_t v26 = (char *)(v19 - v17);
      if (v19 == v17) {
        unint64_t v26 = 0;
      }
      v29[10] = &v24[v20 + (void)v26];
      v29[11] = v18;
      v29[12] = v25;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      uint64_t v18 = (uint64_t)(v17 + 1);
    }
    v29[11] = v18;
    uint64_t v13 = v29[31];
LABEL_44:
    uint64_t v27 = (void *)v29[22];
    if (!v27) {
      return;
    }
    while (1)
    {
      int64_t v30 = &v32;
      uint64_t v31 = 1;
      uint64_t v33 = v13;
      uint64_t v28 = v27[6];
      if (!v28) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v28 + 48))(v28, &v33, &v30);
      uint64_t v27 = (void *)*v27;
      if (!v27) {
        return;
      }
    }
LABEL_49:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_50:
    abort();
  }
  uint64_t v13 = v29[31];
  if (v29[10] + (((uint64_t)v11 - v29[7]) >> 3) == v29[11]) {
    goto LABEL_44;
  }
  uint64_t v14 = (void *)v29[16];
  if (v14)
  {
    while (1)
    {
      int64_t v30 = &v32;
      uint64_t v31 = 1;
      uint64_t v33 = v13;
      uint64_t v15 = v14[6];
      if (!v15) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v15 + 48))(v15, &v33, &v30);
      uint64_t v14 = (void *)*v14;
      if (!v14) {
        return;
      }
    }
    goto LABEL_49;
  }
}

void sub_1A27621F8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ShadowPassItem>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::ShadowPassItem>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::ShadowPassItem>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::ShadowPassItem>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ShadowPassItem>(gdc::Entity,md::ls::ShadowPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5221F0;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ShadowPassItem>(gdc::Entity,md::ls::ShadowPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF5221F0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ShadowPassItem>(gdc::Entity,md::ls::ShadowPassItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FinishedProcessingShadow>(gdc::Entity,md::ls::FinishedProcessingShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::FinishedProcessingShadow>(a2);
  uint64_t v22 = v2;
  uint64_t v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if (v5)
  {
    unint64_t v10 = (unsigned char *)v3[11];
    unint64_t v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      char v12 = (char *)v3[10];
      uint64_t v13 = v10 - v12;
      uint64_t v14 = v10 - v12 + 1;
      if (v14 < 0) {
        goto LABEL_28;
      }
      unint64_t v15 = v9 - (void)v12;
      if (2 * v15 > v14) {
        uint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16) {
        unint64_t v17 = (char *)operator new(v16);
      }
      else {
        unint64_t v17 = 0;
      }
      uint64_t v18 = &v17[v16];
      uint64_t v11 = (uint64_t)&v17[v13 + 1];
      unint64_t v19 = (char *)(v12 - v10);
      if (v12 == v10) {
        unint64_t v19 = 0;
      }
      v3[10] = &v17[v13 + (void)v19];
      v3[11] = v11;
      v3[12] = v18;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    uint64_t v6 = v3[31];
  }
  else
  {
    uint64_t v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      unint64_t v7 = (void *)v3[16];
      if (v7)
      {
        while (1)
        {
          uint64_t v24 = &v22;
          uint64_t v25 = 1;
          uint64_t v23 = v6;
          uint64_t v8 = v7[6];
          if (!v8) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v8 + 48))(v8, &v23, &v24);
          unint64_t v7 = (void *)*v7;
          if (!v7) {
            return;
          }
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  uint64_t v20 = (void *)v3[22];
  if (v20)
  {
    while (1)
    {
      uint64_t v24 = &v22;
      uint64_t v25 = 1;
      uint64_t v23 = v6;
      uint64_t v21 = v20[6];
      if (!v21) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v21 + 48))(v21, &v23, &v24);
      uint64_t v20 = (void *)*v20;
      if (!v20) {
        return;
      }
    }
    goto LABEL_27;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FinishedProcessingShadow>(gdc::Entity,md::ls::FinishedProcessingShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF524368;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FinishedProcessingShadow>(gdc::Entity,md::ls::FinishedProcessingShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF524368;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FinishedProcessingShadow>(gdc::Entity,md::ls::FinishedProcessingShadow &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void *std::function<void ()(md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__func<md::ita::CreateTileClearRenderItemsForDepthPrePass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>)::$_0,std::allocator<md::ita::CreateTileClearRenderItemsForDepthPrePass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>)::$_0>,void ()(md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&)>::operator()(uint64_t result, unsigned char *a2, uint64_t a3, _WORD *a4)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (*a4) {
    BOOL v4 = *a2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    gdc::Registry::create(*(gdc::Registry **)(**(void **)(result + 8) + 8));
  }
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UseIdentityMatrix>(gdc::Entity,md::ls::UseIdentityMatrix &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::UseIdentityMatrix>(a2);
  uint64_t v22 = v2;
  BOOL v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if (v5)
  {
    unint64_t v10 = (unsigned char *)v3[11];
    unint64_t v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      char v12 = (char *)v3[10];
      uint64_t v13 = v10 - v12;
      uint64_t v14 = v10 - v12 + 1;
      if (v14 < 0) {
        goto LABEL_28;
      }
      unint64_t v15 = v9 - (void)v12;
      if (2 * v15 > v14) {
        uint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16) {
        unint64_t v17 = (char *)operator new(v16);
      }
      else {
        unint64_t v17 = 0;
      }
      uint64_t v18 = &v17[v16];
      uint64_t v11 = (uint64_t)&v17[v13 + 1];
      unint64_t v19 = (char *)(v12 - v10);
      if (v12 == v10) {
        unint64_t v19 = 0;
      }
      v3[10] = &v17[v13 + (void)v19];
      v3[11] = v11;
      v3[12] = v18;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    uint64_t v6 = v3[31];
  }
  else
  {
    uint64_t v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      unint64_t v7 = (void *)v3[16];
      if (v7)
      {
        while (1)
        {
          uint64_t v24 = &v22;
          uint64_t v25 = 1;
          uint64_t v23 = v6;
          uint64_t v8 = v7[6];
          if (!v8) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v8 + 48))(v8, &v23, &v24);
          unint64_t v7 = (void *)*v7;
          if (!v7) {
            return;
          }
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  uint64_t v20 = (void *)v3[22];
  if (v20)
  {
    while (1)
    {
      uint64_t v24 = &v22;
      uint64_t v25 = 1;
      uint64_t v23 = v6;
      uint64_t v21 = v20[6];
      if (!v21) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v21 + 48))(v21, &v23, &v24);
      uint64_t v20 = (void *)*v20;
      if (!v20) {
        return;
      }
    }
    goto LABEL_27;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UseIdentityMatrix>(gdc::Entity,md::ls::UseIdentityMatrix &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF522CE8;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UseIdentityMatrix>(gdc::Entity,md::ls::UseIdentityMatrix &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF522CE8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::UseIdentityMatrix>(gdc::Entity,md::ls::UseIdentityMatrix &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DepthPrePassTileClearItem>(gdc::Entity,md::ls::DepthPrePassTileClearItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  unint64_t v33 = 0xF23B9817A178C71CLL;
  int8x8_t v3 = a2[16];
  if (!*(void *)&v3) {
    goto LABEL_21;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = 0xF23B9817A178C71CLL;
    if (*(void *)&v3 <= 0xF23B9817A178C71CLL) {
      unint64_t v5 = 0xF23B9817A178C71CLL % *(void *)&v3;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v3 - 1) & 0xF23B9817A178C71CLL;
  }
  uint64_t v6 = *(void **)(*(void *)&a2[15] + 8 * v5);
  if (!v6 || (unint64_t v7 = (void *)*v6) == 0) {
LABEL_21:
  }
    operator new();
  if (v4.u32[0] < 2uLL)
  {
    uint64_t v8 = *(void *)&v3 - 1;
    while (1)
    {
      uint64_t v10 = v7[1];
      if (v10 == 0xF23B9817A178C71CLL)
      {
        if (v7[2] == 0xF23B9817A178C71CLL) {
          goto LABEL_48;
        }
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_21;
      }
      unint64_t v7 = (void *)*v7;
      if (!v7) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v7[1];
    if (v9 == 0xF23B9817A178C71CLL) {
      break;
    }
    if (v9 >= *(void *)&v3) {
      v9 %= *(void *)&v3;
    }
    if (v9 != v5) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v7 = (void *)*v7;
    if (!v7) {
      goto LABEL_21;
    }
  }
  if (v7[2] != 0xF23B9817A178C71CLL) {
    goto LABEL_11;
  }
LABEL_48:
  uint64_t v29 = (void *)v7[3];
  uint64_t v32 = v2;
  uint64_t v11 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v29 + 4, (uint64_t)&v32);
  if (v12)
  {
    unint64_t v17 = (unsigned char *)v29[11];
    unint64_t v16 = v29[12];
    if ((unint64_t)v17 >= v16)
    {
      unint64_t v19 = (char *)v29[10];
      uint64_t v20 = v17 - v19;
      uint64_t v21 = v17 - v19 + 1;
      if (v21 < 0) {
        goto LABEL_50;
      }
      unint64_t v22 = v16 - (void)v19;
      if (2 * v22 > v21) {
        uint64_t v21 = 2 * v22;
      }
      if (v22 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v23 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v23 = v21;
      }
      if (v23) {
        uint64_t v24 = (char *)operator new(v23);
      }
      else {
        uint64_t v24 = 0;
      }
      uint64_t v25 = &v24[v23];
      uint64_t v18 = (uint64_t)&v24[v20 + 1];
      unint64_t v26 = (char *)(v19 - v17);
      if (v19 == v17) {
        unint64_t v26 = 0;
      }
      v29[10] = &v24[v20 + (void)v26];
      v29[11] = v18;
      v29[12] = v25;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      uint64_t v18 = (uint64_t)(v17 + 1);
    }
    v29[11] = v18;
    unint64_t v13 = v29[31];
LABEL_44:
    uint64_t v27 = (void *)v29[22];
    if (!v27) {
      return;
    }
    while (1)
    {
      int64_t v30 = &v32;
      uint64_t v31 = 1;
      unint64_t v33 = v13;
      uint64_t v28 = v27[6];
      if (!v28) {
        break;
      }
      (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(void *)v28 + 48))(v28, &v33, &v30);
      uint64_t v27 = (void *)*v27;
      if (!v27) {
        return;
      }
    }
LABEL_49:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_50:
    abort();
  }
  unint64_t v13 = v29[31];
  if (v29[10] + (((uint64_t)v11 - v29[7]) >> 3) == v29[11]) {
    goto LABEL_44;
  }
  uint64_t v14 = (void *)v29[16];
  if (v14)
  {
    while (1)
    {
      int64_t v30 = &v32;
      uint64_t v31 = 1;
      unint64_t v33 = v13;
      uint64_t v15 = v14[6];
      if (!v15) {
        break;
      }
      (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(void *)v15 + 48))(v15, &v33, &v30);
      uint64_t v14 = (void *)*v14;
      if (!v14) {
        return;
      }
    }
    goto LABEL_49;
  }
}

void sub_1A276416C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<md::ls::DepthPrePassTileClearItem>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::DepthPrePassTileClearItem>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::DepthPrePassTileClearItem>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::DepthPrePassTileClearItem>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DepthPrePassTileClearItem>(gdc::Entity,md::ls::DepthPrePassTileClearItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF524518;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DepthPrePassTileClearItem>(gdc::Entity,md::ls::DepthPrePassTileClearItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF524518;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::DepthPrePassTileClearItem>(gdc::Entity,md::ls::DepthPrePassTileClearItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

__n128 std::__function::__func<md::ita::CreateTileClearRenderItemsForDepthPrePass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>)::$_0,std::allocator<md::ita::CreateTileClearRenderItemsForDepthPrePass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>)::$_0>,void ()(md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5911A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::CreateTileClearRenderItemsForDepthPrePass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>)::$_0,std::allocator<md::ita::CreateTileClearRenderItemsForDepthPrePass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>)::$_0>,void ()(md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF5911A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<md::ita::CreateTileClearRenderItemsForDepthPrePass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>)::$_0,std::allocator<md::ita::CreateTileClearRenderItemsForDepthPrePass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&>)::$_0>,void ()(md::ls::EnteringView const&,md::ls::SupportsDepthPrePass const&,md::ls::RenderablesCount const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TilePrepassShadowConstantDataHandle const&,md::ls::TilePrepassConstantDataHandle const&)>::~__func()
{
}

void *std::function<void ()(md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<md::ita::CreateTileClearRenderItemsForShadowPass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&>)::$_0,std::allocator<md::ita::CreateTileClearRenderItemsForShadowPass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&>)::$_0>,void ()(md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  gdc::Registry::create(*(gdc::Registry **)(**(void **)(a1 + 8) + 8));
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ShadowTileClearItem>(gdc::Entity,md::ls::ShadowTileClearItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  unint64_t v33 = 0x92A64D0A32DD2051;
  int8x8_t v3 = a2[16];
  if (!*(void *)&v3) {
    goto LABEL_21;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = 0x92A64D0A32DD2051;
    if (*(void *)&v3 <= 0x92A64D0A32DD2051) {
      unint64_t v5 = 0x92A64D0A32DD2051 % *(void *)&v3;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v3 - 1) & 0x92A64D0A32DD2051;
  }
  uint64_t v6 = *(void **)(*(void *)&a2[15] + 8 * v5);
  if (!v6 || (unint64_t v7 = (void *)*v6) == 0) {
LABEL_21:
  }
    operator new();
  if (v4.u32[0] < 2uLL)
  {
    uint64_t v8 = *(void *)&v3 - 1;
    while (1)
    {
      uint64_t v10 = v7[1];
      if (v10 == 0x92A64D0A32DD2051)
      {
        if (v7[2] == 0x92A64D0A32DD2051) {
          goto LABEL_48;
        }
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_21;
      }
      unint64_t v7 = (void *)*v7;
      if (!v7) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v7[1];
    if (v9 == 0x92A64D0A32DD2051) {
      break;
    }
    if (v9 >= *(void *)&v3) {
      v9 %= *(void *)&v3;
    }
    if (v9 != v5) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v7 = (void *)*v7;
    if (!v7) {
      goto LABEL_21;
    }
  }
  if (v7[2] != 0x92A64D0A32DD2051) {
    goto LABEL_11;
  }
LABEL_48:
  uint64_t v29 = (void *)v7[3];
  uint64_t v32 = v2;
  uint64_t v11 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v29 + 4, (uint64_t)&v32);
  if (v12)
  {
    unint64_t v17 = (unsigned char *)v29[11];
    unint64_t v16 = v29[12];
    if ((unint64_t)v17 >= v16)
    {
      unint64_t v19 = (char *)v29[10];
      uint64_t v20 = v17 - v19;
      uint64_t v21 = v17 - v19 + 1;
      if (v21 < 0) {
        goto LABEL_50;
      }
      unint64_t v22 = v16 - (void)v19;
      if (2 * v22 > v21) {
        uint64_t v21 = 2 * v22;
      }
      if (v22 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v23 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v23 = v21;
      }
      if (v23) {
        uint64_t v24 = (char *)operator new(v23);
      }
      else {
        uint64_t v24 = 0;
      }
      uint64_t v25 = &v24[v23];
      uint64_t v18 = (uint64_t)&v24[v20 + 1];
      unint64_t v26 = (char *)(v19 - v17);
      if (v19 == v17) {
        unint64_t v26 = 0;
      }
      v29[10] = &v24[v20 + (void)v26];
      v29[11] = v18;
      v29[12] = v25;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      uint64_t v18 = (uint64_t)(v17 + 1);
    }
    v29[11] = v18;
    unint64_t v13 = v29[31];
LABEL_44:
    uint64_t v27 = (void *)v29[22];
    if (!v27) {
      return;
    }
    while (1)
    {
      int64_t v30 = &v32;
      uint64_t v31 = 1;
      unint64_t v33 = v13;
      uint64_t v28 = v27[6];
      if (!v28) {
        break;
      }
      (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(void *)v28 + 48))(v28, &v33, &v30);
      uint64_t v27 = (void *)*v27;
      if (!v27) {
        return;
      }
    }
LABEL_49:
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_50:
    abort();
  }
  unint64_t v13 = v29[31];
  if (v29[10] + (((uint64_t)v11 - v29[7]) >> 3) == v29[11]) {
    goto LABEL_44;
  }
  uint64_t v14 = (void *)v29[16];
  if (v14)
  {
    while (1)
    {
      int64_t v30 = &v32;
      uint64_t v31 = 1;
      unint64_t v33 = v13;
      uint64_t v15 = v14[6];
      if (!v15) {
        break;
      }
      (*(void (**)(uint64_t, unint64_t *, uint64_t **))(*(void *)v15 + 48))(v15, &v33, &v30);
      uint64_t v14 = (void *)*v14;
      if (!v14) {
        return;
      }
    }
    goto LABEL_49;
  }
}

void sub_1A2765CE0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL gdc::ComponentStorageWrapper<md::ls::ShadowTileClearItem>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::ShadowTileClearItem>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::ShadowTileClearItem>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::ShadowTileClearItem>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ShadowTileClearItem>(gdc::Entity,md::ls::ShadowTileClearItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF523090;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ShadowTileClearItem>(gdc::Entity,md::ls::ShadowTileClearItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF523090;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::ShadowTileClearItem>(gdc::Entity,md::ls::ShadowTileClearItem &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

__n128 std::__function::__func<md::ita::CreateTileClearRenderItemsForShadowPass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&>)::$_0,std::allocator<md::ita::CreateTileClearRenderItemsForShadowPass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&>)::$_0>,void ()(md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF520930;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::CreateTileClearRenderItemsForShadowPass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&>)::$_0,std::allocator<md::ita::CreateTileClearRenderItemsForShadowPass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&>)::$_0>,void ()(md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF520930;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<md::ita::CreateTileClearRenderItemsForShadowPass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&>)::$_0,std::allocator<md::ita::CreateTileClearRenderItemsForShadowPass::operator()(ecs2::Query<md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&>)::$_0>,void ()(md::ls::EnteringView const&,md::ls::SupportsShadows const&,md::ls::AssociationTileHandle const&,md::ls::BaseMapTileHandle const&,md::ls::TileViewConstantDataHandle const&,md::ls::TileTransformConstantDataHandle const&,md::ls::TileMatrix const&,md::ls::TileShadowConstantDataHandle const&)>::~__func()
{
}

uint64_t altitude::GlobeTileRenderEffect::occludesGrid(altitude::GlobeTileRenderEffect *this)
{
  return 1;
}

uint64_t altitude::HideMeshEffect::occludesGrid(altitude::HideMeshEffect *this)
{
  return 0;
}

uint64_t altitude::HideMeshEffect::collectRenderItems(uint64_t this, md::PassList *a2, md::RealisticCommandBufferSelector *a3)
{
  uint64_t v5 = this;
  float v6 = *(float *)(this + 56);
  if (v6 > 0.0)
  {
    unint64_t v7 = (void *)*((void *)a2 + 1);
    uint64_t v9 = v7[3];
    uint64_t v8 = v7[4];
    uint64_t v10 = v8 - v9;
    if (v8 == v9) {
      goto LABEL_9;
    }
    uint64_t v11 = 0;
    uint64_t v12 = *((void *)a3 + 1);
    unint64_t v13 = v10 >> 3;
    while (1)
    {
      uint64_t v14 = *(unsigned __int8 **)(v9 + 8 * v11);
      if (*v14 == *(unsigned __int8 *)(v12 + 10))
      {
        unint64_t v15 = *((void *)v14 + 1);
        uint64_t v16 = v7[15];
        if (v15 < (v7[16] - v16) >> 3) {
          break;
        }
      }
      if (++v11 >= v13) {
        goto LABEL_9;
      }
    }
    uint64_t v17 = *(void *)(v16 + 8 * v15);
    if (!v17) {
LABEL_9:
    }
      uint64_t v18 = 0;
    else {
      uint64_t v18 = *(void *)(*(void *)(v17 + 24) + 8 * *(unsigned __int8 *)(v12 + 11));
    }
    uint64_t v19 = *(void *)(this + 64);
    uint64_t v20 = *(void *)(v19 + 48);
    uint64_t v21 = *(void *)(v19 + 56);
    if (v20 != v21)
    {
      do
      {
        if (*(unsigned char *)(*(void *)v20 + 180)) {
          this = ggl::CommandBuffer::pushRenderItem(v18, *(void *)(*(void *)v20 + 184));
        }
        v20 += 8;
      }
      while (v20 != v21);
      float v6 = *(float *)(v5 + 56);
    }
  }
  if (v6 < 1.0)
  {
    uint64_t v22 = *(void *)(*(void *)(v5 + 16) + 136);
    if (v22)
    {
      size_t v23 = (void *)*((void *)a2 + 1);
      uint64_t v25 = v23[3];
      uint64_t v24 = v23[4];
      uint64_t v26 = v24 - v25;
      if (v24 == v25) {
        goto LABEL_25;
      }
      uint64_t v27 = 0;
      uint64_t v28 = *((void *)a3 + 1);
      unint64_t v29 = v26 >> 3;
      while (1)
      {
        int64_t v30 = *(unsigned __int8 **)(v25 + 8 * v27);
        if (*v30 == *(unsigned __int8 *)(v28 + 6))
        {
          unint64_t v31 = *((void *)v30 + 1);
          uint64_t v32 = v23[15];
          if (v31 < (v23[16] - v32) >> 3) {
            break;
          }
        }
        if (++v27 >= v29) {
          goto LABEL_25;
        }
      }
      uint64_t v33 = *(void *)(v32 + 8 * v31);
      if (!v33) {
LABEL_25:
      }
        uint64_t v34 = 0;
      else {
        uint64_t v34 = *(void *)(*(void *)(v33 + 24) + 8 * *(unsigned __int8 *)(v28 + 7));
      }
      uint64_t v35 = *(void *)(v22 + 48);
      uint64_t v36 = *(void *)(v22 + 56);
      while (v35 != v36)
      {
        if (*(unsigned char *)(*(void *)v35 + 180)) {
          this = ggl::CommandBuffer::pushRenderItem(v34, *(void *)(*(void *)v35 + 184));
        }
        v35 += 8;
      }
    }
  }
  return this;
}

void altitude::HideMeshEffect::willBeDrawn(altitude::HideMeshEffect *this, karo::graphics::Viewport *a2, uint64_t a3)
{
  float v4 = *((float *)this + 14);
  if (v4 > 0.0)
  {
    altitude::GlobeTileComponent::setupGlobeElement(a3, *((altitude::View **)this + 3), *((void *)this + 8), v4);
    float v4 = *((float *)this + 14);
  }
  if (v4 < 1.0) {
    altitude::GlobeTileComponent::setupSurfaceElement(*(altitude::GlobeTileComponent **)(*((void *)this + 2) + 136), *((altitude::View **)this + 3));
  }
  uint64_t v5 = *(void *)(*(void *)(*((void *)this + 2) + 16) + 336);
  if (v5)
  {
    float v6 = *((float *)this + 14);
    *(unsigned char *)(v5 + 122) = v6 > 0.0;
    if (*(float *)(v5 + 124) != v6 && v6 > 0.0)
    {
      uint64_t v7 = *(void *)(v5 + 88);
      if (v7)
      {
        *(float *)(v5 + 124) = v6;
        if (v6 >= 1.0)
        {
          char v8 = 0;
        }
        else
        {
          *(float *)(v7 + 164) = v6;
          char v8 = 1;
        }
        *(unsigned char *)(v7 + 160) = v8;
      }
    }
  }
}

void altitude::HideMeshEffect::update(altitude::HideMeshEffect *this, float a2)
{
  uint64_t v4 = *((void *)this + 2);
  uint64_t v5 = *(void *)(v4 + 120);
  float v6 = *(std::__shared_weak_count **)(v4 + 128);
  uint64_t v26 = v5;
  uint64_t v27 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v5)
  {
    uint64_t v17 = *((void *)this + 2);
    uint64_t v19 = *(void *)(v17 + 208);
    uint64_t v18 = *(std::__shared_weak_count **)(v17 + 216);
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v26 = v19;
    uint64_t v27 = v18;
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  int v7 = *((unsigned __int8 *)this + 273);
  if (*((unsigned char *)this + 273) && *((float *)this + 14) == 0.0)
  {
    char v8 = (std::__shared_weak_count *)*((void *)this + 9);
    *((void *)this + 8) = 0;
    *((void *)this + 9) = 0;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    *((unsigned char *)this + 273) = 0;
  }
  if (*((void *)this + 8)) {
    goto LABEL_11;
  }
  if (!v26)
  {
    *((float *)this + 13) = fmaxf(*((float *)this + 13) - a2, 0.0);
    *((_DWORD *)this + 14) = 0;
    goto LABEL_17;
  }
  if (!*((unsigned char *)this + 272))
  {
    size_t v23 = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v22 = (std::__shared_weak_count *)*((void *)this + 9);
    *((void *)this + 8) = v26;
    *((void *)this + 9) = v23;
    if (!v22)
    {
LABEL_11:
      float v9 = fmaxf(*((float *)this + 13) - a2, 0.0);
      *((float *)this + 13) = v9;
      goto LABEL_12;
    }
    goto LABEL_46;
  }
  altitude::util::createFallbackElement(&v25, &v26, (double *)this + 10);
  long long v20 = v25;
  long long v25 = 0uLL;
  uint64_t v21 = (std::__shared_weak_count *)*((void *)this + 9);
  *((_OWORD *)this + 4) = v20;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = (std::__shared_weak_count *)*((void *)&v25 + 1);
  if (*((void *)&v25 + 1))
  {
LABEL_46:
    if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  uint64_t v24 = *((void *)this + 8);
  float v9 = fmaxf(*((float *)this + 13) - a2, 0.0);
  *((float *)this + 13) = v9;
  if (!v24)
  {
    *((_DWORD *)this + 14) = 0;
    goto LABEL_17;
  }
LABEL_12:
  float v10 = *((float *)this + 14);
  float v11 = *((float *)this + 15);
  if (v7 || v9 > 0.0) {
    float v12 = fmaxf(v10 - (float)(v11 * a2), 0.0);
  }
  else {
    float v12 = fminf(v10 + (float)(v11 * a2), 1.0);
  }
  *((float *)this + 14) = v12;
LABEL_17:
  if ((altitude::GlobeTileRenderEffect::isAcceptedByView(*(altitude::GlobeTileRenderEffect **)(*((void *)this + 2) + 16), *((void *)this + 3)) & 1) == 0)
  {
    *(void *)((char *)this + 52) = 0x3F80000000000000;
LABEL_25:
    BOOL v15 = 1;
    goto LABEL_26;
  }
  float v13 = *((float *)this + 13);
  float v14 = *((float *)this + 14);
  if (v13 == 0.0 && v14 == 1.0) {
    goto LABEL_25;
  }
  BOOL v15 = 0;
  if (v14 == 0.0 && *((unsigned char *)this + 274) && v13 <= 0.0) {
    BOOL v15 = *((void *)this + 8) == 0;
  }
LABEL_26:
  *((unsigned char *)this + 48) = v15;
  uint64_t v16 = v27;
  if (v27)
  {
    if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

uint64_t altitude::GlobeTileRenderEffect::isAcceptedByView(altitude::GlobeTileRenderEffect *this, uint64_t a2)
{
  unint64_t v5 = *((void *)this + 20);
  uint64_t v3 = (char *)this + 160;
  unint64_t v4 = v5;
  if (!v5) {
    goto LABEL_10;
  }
  if (v4 < 3)
  {
    if (*((void *)this + 23) == a2)
    {
      unsigned int v13 = 0;
    }
    else
    {
      if (v4 == 1 || *((void *)this + 29) != a2)
      {
LABEL_10:
        v15[0] = &unk_1EF56B5B8;
        v15[1] = this;
        v15[2] = a2;
        v15[3] = 1065353216;
        char v16 = 1;
        int v17 = 0;
        char v18 = 0;
        int v19 = 0;
        karo::SizedArray<altitude::TileView,2>::push_back(v3, (uint64_t)v15);
        unint64_t v9 = *((void *)this + 20);
        unint64_t v10 = v9 - 1;
        if (v9 >= 3)
        {
          uint64_t v11 = *((void *)this + 33) + 48 * v10;
          return *(unsigned __int8 *)(v11 + 40);
        }
        float v12 = (char *)this + 48 * v10;
LABEL_17:
        uint64_t v11 = (uint64_t)(v12 + 168);
        return *(unsigned __int8 *)(v11 + 40);
      }
      unsigned int v13 = 1;
    }
    float v12 = (char *)this + 48 * v13;
    goto LABEL_17;
  }
  uint64_t v6 = 0;
  uint64_t v7 = *((void *)this + 33);
  char v8 = (void *)(v7 + 16);
  while (*v8 != a2)
  {
    ++v6;
    v8 += 6;
    if (v4 == v6) {
      goto LABEL_10;
    }
  }
  uint64_t v11 = v7 + 48 * v6;
  return *(unsigned __int8 *)(v11 + 40);
}

void altitude::HideMeshEffect::~HideMeshEffect(altitude::HideMeshEffect *this)
{
  *(void *)this = &unk_1EF568E38;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EF568E38;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t altitude::BlendEffect::collectRenderItems(uint64_t this, md::PassList *a2, md::RealisticCommandBufferSelector *a3)
{
  uint64_t v5 = this;
  float v6 = *(float *)(this + 120);
  if (v6 >= 0.5) {
    uint64_t v7 = 5;
  }
  else {
    uint64_t v7 = 4;
  }
  uint64_t v8 = *((void *)a3 + 1);
  unint64_t v9 = (void *)*((void *)a2 + 1);
  uint64_t v10 = v9[3];
  uint64_t v11 = v9[4];
  if (v11 == v10) {
    goto LABEL_11;
  }
  uint64_t v12 = 0;
  while (1)
  {
    unsigned int v13 = *(unsigned __int8 **)(v10 + 8 * v12);
    if (*v13 == *(unsigned __int8 *)(v8 + 2 * v7))
    {
      unint64_t v14 = *((void *)v13 + 1);
      uint64_t v15 = v9[15];
      this = v9[16] - v15;
      if (v14 < this >> 3) {
        break;
      }
    }
    if (++v12 >= (unint64_t)((v11 - v10) >> 3)) {
      goto LABEL_11;
    }
  }
  uint64_t v16 = *(void *)(v15 + 8 * v14);
  if (!v16) {
LABEL_11:
  }
    uint64_t v17 = 0;
  else {
    uint64_t v17 = *(void *)(*(void *)(v16 + 24) + 8 * *(unsigned __int8 *)(v8 + 2 * v7 + 1));
  }
  uint64_t v18 = *(void *)(v5 + 56);
  uint64_t v19 = *(void *)(v18 + 48);
  uint64_t v20 = *(void *)(v18 + 56);
  if (v19 != v20)
  {
    do
    {
      if (*(unsigned char *)(*(void *)v19 + 180)) {
        this = ggl::CommandBuffer::pushRenderItem(v17, *(void *)(*(void *)v19 + 184));
      }
      v19 += 8;
    }
    while (v19 != v20);
    float v6 = *(float *)(v5 + 120);
    uint64_t v8 = *((void *)a3 + 1);
    unint64_t v9 = (void *)*((void *)a2 + 1);
    uint64_t v10 = v9[3];
    uint64_t v11 = v9[4];
  }
  uint64_t v21 = 4;
  if (v6 < 0.5) {
    uint64_t v21 = 5;
  }
  uint64_t v22 = v11 - v10;
  if (v11 == v10) {
    goto LABEL_27;
  }
  uint64_t v23 = 0;
  unint64_t v24 = v22 >> 3;
  while (1)
  {
    long long v25 = *(unsigned __int8 **)(v10 + 8 * v23);
    if (*v25 == *(unsigned __int8 *)(v8 + 2 * v21))
    {
      unint64_t v26 = *((void *)v25 + 1);
      uint64_t v27 = v9[15];
      if (v26 < (v9[16] - v27) >> 3) {
        break;
      }
    }
    if (++v23 >= v24) {
      goto LABEL_27;
    }
  }
  uint64_t v28 = *(void *)(v27 + 8 * v26);
  if (!v28) {
LABEL_27:
  }
    uint64_t v29 = 0;
  else {
    uint64_t v29 = *(void *)(*(void *)(v28 + 24) + 8 * *(unsigned __int8 *)(v8 + 2 * v21 + 1));
  }
  uint64_t v30 = *(void *)(v5 + 72);
  uint64_t v31 = *(void *)(v30 + 48);
  uint64_t v32 = *(void *)(v30 + 56);
  while (v31 != v32)
  {
    if (*(unsigned char *)(*(void *)v31 + 180)) {
      this = ggl::CommandBuffer::pushRenderItem(v29, *(void *)(*(void *)v31 + 184));
    }
    v31 += 8;
  }
  return this;
}

void altitude::BlendEffect::willBeDrawn(altitude::BlendEffect *this, karo::graphics::Viewport *a2, uint64_t a3)
{
  float v5 = *((float *)this + 30) + *((float *)this + 30);
  float v6 = fmaxf(2.0 - v5, 0.0);
  float v7 = fmaxf(v5, 0.0);
  uint64_t v8 = *((void *)this + 7);
  unint64_t v9 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float v10 = fminf(v6, 1.0);
  float v11 = fminf(v7, 1.0);
  uint64_t v13 = *((void *)this + 9);
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v12)
  {
    altitude::GlobeTileComponent::setupGlobeElement(a3, *((altitude::View **)this + 3), v8, v10);
    altitude::GlobeTileComponent::setupGlobeElement(a3, *((altitude::View **)this + 3), v13, v11);
    if (!v9) {
      return;
    }
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  altitude::GlobeTileComponent::setupGlobeElement(a3, *((altitude::View **)this + 3), v8, v10);
  altitude::GlobeTileComponent::setupGlobeElement(a3, *((altitude::View **)this + 3), v13, v11);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (v9)
  {
LABEL_9:
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

uint64_t altitude::BlendEffect::update(uint64_t this, float a2)
{
  uint64_t v2 = this;
  float v3 = fminf(*(float *)(this + 120) + (float)(*(float *)(this + 124) * a2), 1.0);
  *(float *)(this + 120) = v3;
  if (v3 == 1.0)
  {
    char v4 = 1;
  }
  else
  {
    this = altitude::GlobeTileRenderEffect::isAcceptedByView(*(altitude::GlobeTileRenderEffect **)(*(void *)(this + 16) + 16), *(void *)(this + 24));
    char v4 = this ^ 1;
  }
  *(unsigned char *)(v2 + 48) = v4;
  return this;
}

void altitude::BlendEffect::~BlendEffect(altitude::BlendEffect *this)
{
  *(void *)this = &unk_1EF5685E0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    float v3 = (std::__shared_weak_count *)*((void *)this + 8);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    float v3 = (std::__shared_weak_count *)*((void *)this + 8);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1EF5685E0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    float v3 = (std::__shared_weak_count *)*((void *)this + 8);
    if (!v3) {
      return;
    }
  }
  else
  {
    float v3 = (std::__shared_weak_count *)*((void *)this + 8);
    if (!v3) {
      return;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t altitude::MorphEffect::collectRenderItems(uint64_t this, md::PassList *a2, md::RealisticCommandBufferSelector *a3)
{
  float v3 = (void *)*((void *)a2 + 1);
  uint64_t v5 = v3[3];
  uint64_t v4 = v3[4];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    goto LABEL_8;
  }
  uint64_t v7 = 0;
  uint64_t v8 = *((void *)a3 + 1);
  unint64_t v9 = v6 >> 3;
  while (1)
  {
    float v10 = *(unsigned __int8 **)(v5 + 8 * v7);
    if (*v10 == *(unsigned __int8 *)(v8 + 8))
    {
      unint64_t v11 = *((void *)v10 + 1);
      uint64_t v12 = v3[15];
      if (v11 < (v3[16] - v12) >> 3) {
        break;
      }
    }
    if (++v7 >= v9) {
      goto LABEL_8;
    }
  }
  uint64_t v13 = *(void *)(v12 + 8 * v11);
  if (!v13) {
LABEL_8:
  }
    uint64_t v14 = 0;
  else {
    uint64_t v14 = *(void *)(*(void *)(v13 + 24) + 8 * *(unsigned __int8 *)(v8 + 9));
  }
  uint64_t v15 = *(void *)(this + 56);
  uint64_t v16 = *(void *)(v15 + 48);
  uint64_t v17 = *(void *)(v15 + 56);
  while (v16 != v17)
  {
    if (*(unsigned char *)(*(void *)v16 + 180)) {
      this = ggl::CommandBuffer::pushRenderItem(v14, *(void *)(*(void *)v16 + 184));
    }
    v16 += 8;
  }
  return this;
}

void altitude::MorphEffect::willBeDrawn(altitude::MorphEffect *this, karo::graphics::Viewport *a2, uint64_t a3)
{
  uint64_t v3 = *((void *)this + 7);
  uint64_t v4 = *(uint64_t **)(v3 + 48);
  uint64_t v5 = *(uint64_t **)(v3 + 56);
  if (v4 != v5)
  {
    while (1)
    {
      uint64_t v9 = *v4;
      int v10 = *(_DWORD *)(*v4 + 160);
      if (v10 == 6) {
        break;
      }
      if (v10 == 5)
      {
        uint64_t v16 = (double *)*((void *)this + 3);
        float v12 = *((float *)this + 26);
        uint64_t v17 = *(ggl::PipelineSetup **)(v9 + 192);
        if (*(unsigned char *)(v9 + 312))
        {
          uint64_t v18 = *(void *)(v9 + 296);
          uint64_t v19 = *(std::__shared_weak_count **)(v9 + 304);
          goto LABEL_19;
        }
        uint64_t v18 = *(void *)(v9 + 280);
        if (*((void *)v17 + 2) != v18)
        {
          uint64_t v19 = *(std::__shared_weak_count **)(v9 + 288);
LABEL_19:
          ggl::Flyover::FlyoverPipelineSetup::setState(v17, v18, v19);
        }
        double v24 = v16[10];
        double v25 = v16[11];
        double v26 = v16[12];
        double v28 = v16[8];
        double v27 = v16[9];
        double v30 = v16[6];
        double v29 = v16[7];
        double v31 = -(v28 * v24 - v29 * v25) - (v28 * v24 - v29 * v25);
        double v32 = -(v30 * v25 - v28 * v27) - (v30 * v25 - v28 * v27);
        double v33 = -(v29 * v27 - v30 * v24) - (v29 * v27 - v30 * v24);
        double v34 = -(v33 * v27 - (-(v29 - v31 * v25) - v32 * v26));
        double v35 = -(v30 + v31 * v26 + v32 * v25 - v33 * v24);
        double v36 = -(v28 + v31 * v24 + v33 * v26 - v32 * v27);
        double v37 = v24 * -2.0;
        double v38 = -(v24 * (v24 * -2.0));
        double v39 = 1.0 - (v38 - v25 * (v25 * -2.0));
        double v40 = v27 * -2.0;
        double v41 = -(v24 * (v27 * -2.0));
        double v42 = v25 * -2.0 * v26;
        double v43 = v41 - v42;
        double v44 = -(v25 * (v27 * -2.0));
        double v45 = v26 * v37;
        double v46 = v26 * v37 - v25 * (v27 * -2.0);
        double v47 = v42 + v41;
        double v48 = v27 * -2.0 * v27 + 1.0;
        double v49 = v48 - -(v25 * (v25 * -2.0));
        double v50 = -(v25 * v37);
        double v51 = v26 * v40;
        v280.f64[0] = v39;
        v280.f64[1] = v47;
        v282.f64[0] = v43;
        v282.f64[1] = v49;
        v284.f64[0] = v46;
        v284.f64[1] = v50 - v51;
        v281.f64[0] = v44 - v45;
        float64x2_t v283 = (float64x2_t)COERCE_UNSIGNED_INT64(v51 + v50);
        v285.f64[0] = v48 - v38;
        v281.f64[1] = 0.0;
        v285.f64[1] = 0.0;
        v286.f64[0] = v35;
        v286.f64[1] = v34;
        v287.f64[0] = v36;
        v287.f64[1] = 1.0;
        uint64_t v52 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
        long long v317 = 0u;
        long long v318 = 0u;
        long long v315 = 0u;
        long long v316 = 0u;
        long long v313 = 0u;
        long long v314 = 0u;
        long long v312 = 0u;
        uint64_t v319 = 0x3FF0000000000000;
        uint64_t v53 = *(void *)(v9 + 240);
        uint64_t v311 = *(void *)(v9 + 232);
        *(void *)&long long v314 = v53;
        *((void *)&v316 + 1) = *(void *)(v9 + 248);
        double v54 = *(double *)(v52 + 24);
        double v55 = *(double *)(v52 + 32);
        double v56 = *(double *)(v52 + 40);
        double v57 = *(double *)(v52 + 48);
        double v58 = v55 + v55;
        double v59 = (v55 + v55) * v55;
        double v60 = (v56 + v56) * v56;
        double v61 = v54 + v54;
        double v62 = (v54 + v54) * v55;
        double v63 = (v56 + v56) * v57;
        double v64 = v56 * (v54 + v54);
        double v65 = v57 * v58;
        double v66 = v57 * v58 + v64;
        double v67 = 1.0 - (v54 + v54) * v54;
        double v68 = v58 * v56;
        double v69 = v57 * v61;
        double v296 = 1.0 - (v59 + v60);
        double v297 = v63 + v62;
        double v300 = v62 - v63;
        double v301 = v67 - v60;
        double v304 = v66;
        double v305 = v68 - v69;
        double v298 = v64 - v65;
        double v302 = v69 + v68;
        double v306 = v67 - v59;
        uint64_t v299 = 0;
        uint64_t v303 = 0;
        uint64_t v307 = 0;
        long long v308 = *(_OWORD *)v52;
        uint64_t v309 = *(void *)(v52 + 16);
        uint64_t v310 = 0x3FF0000000000000;
        gm::operator*<double,4,4,4>(v279, &v296, (double *)&v311);
        gm::operator*<double,4,4,4>(v288.f64, v280.f64, v279);
        if (*(unsigned char *)(v9 + 312)) {
          *(void *)(*(void *)(v9 + 184) + 48) = (unint64_t)((v295.f64[0] + v16[118] * -0.1)
        }
                                                                       * 1.84467441e19
                                                                       / (v16[118]
                                                                        * 1.6)
                                                                       + 1.84467441e19);
        unint64_t v70 = *(void **)(*(void *)(*(void *)(v9 + 192) + 64) + 16);
        unint64_t v71 = v70[1];
        if (v71) {
          unint64_t v72 = (float32x4_t *)v70[9];
        }
        else {
          unint64_t v72 = 0;
        }
        float32x4_t v73 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v290), v291);
        *unint64_t v72 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v288), v289);
        v72[1] = v73;
        float32x4_t v74 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v294), v295);
        v72[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v292), v293);
        v72[3] = v74;
        uint64_t v75 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
        long long v317 = 0u;
        long long v318 = 0u;
        long long v315 = 0u;
        long long v316 = 0u;
        long long v313 = 0u;
        long long v314 = 0u;
        long long v312 = 0u;
        uint64_t v319 = 0x3FF0000000000000;
        uint64_t v76 = *(void *)(v9 + 240);
        uint64_t v311 = *(void *)(v9 + 232);
        *(void *)&long long v314 = v76;
        *((void *)&v316 + 1) = *(void *)(v9 + 248);
        double v77 = *(double *)(v75 + 24);
        double v78 = *(double *)(v75 + 32);
        double v79 = *(double *)(v75 + 40);
        double v80 = *(double *)(v75 + 48);
        double v81 = v78 + v78;
        double v82 = (v78 + v78) * v78;
        double v83 = (v79 + v79) * v79;
        double v84 = v77 + v77;
        double v85 = (v77 + v77) * v78;
        double v86 = (v79 + v79) * v80;
        double v87 = v79 * (v77 + v77);
        double v88 = v80 * v81;
        double v89 = v80 * v81 + v87;
        double v90 = 1.0 - (v77 + v77) * v77;
        double v91 = v81 * v79;
        double v92 = v80 * v84;
        double v296 = 1.0 - (v82 + v83);
        double v297 = v86 + v85;
        double v300 = v85 - v86;
        double v301 = v90 - v83;
        double v304 = v89;
        double v305 = v91 - v92;
        double v298 = v87 - v88;
        double v302 = v92 + v91;
        double v306 = v90 - v82;
        uint64_t v299 = 0;
        uint64_t v303 = 0;
        uint64_t v307 = 0;
        long long v308 = *(_OWORD *)v75;
        uint64_t v309 = *(void *)(v75 + 16);
        uint64_t v310 = 0x3FF0000000000000;
        gm::operator*<double,4,4,4>(v280.f64, &v296, (double *)&v311);
        float32x4_t v93 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v282), v283);
        v72[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v280), v281);
        v72[5] = v93;
        v72[6] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v284), v285);
        v72[7] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v286), v287);
        if (v71)
        {
          unint64_t v94 = v70[8];
          if (v94 <= v71) {
            unint64_t v94 = v71;
          }
          v70[7] = 0;
          v70[8] = v94;
        }
        uint64_t v95 = *(void *)(v9 + 192);
        uint64_t v96 = *(void *)(*(void *)(v95 + 64) + 48);
        unint64_t v97 = *(void *)(v96 + 8);
        **(_DWORD **)(v96 + 72) = 1065353216;
        if (*(void *)(v96 + 64) > v97) {
          unint64_t v97 = *(void *)(v96 + 64);
        }
        *(void *)(v96 + 56) = 0;
        *(void *)(v96 + 64) = v97;
        unint64_t v98 = *(char **)(v9 + 256);
        unint64_t v99 = *(char **)(v9 + 264);
        if (v98 != v99)
        {
          unint64_t v100 = v99 - v98 - 8;
          unint64_t v101 = *(char **)(v9 + 256);
          if (v100 < 8)
          {
            do
            {
LABEL_37:
              uint64_t v106 = *(void *)v101;
              v101 += 8;
              *(void *)(v106 + 88) = a3;
            }
            while (v101 != v99);
          }
          else
          {
            uint64_t v102 = (v100 >> 3) + 1;
            BOOL v103 = (uint64_t *)(v98 + 8);
            uint64_t v104 = v102 & 0x3FFFFFFFFFFFFFFELL;
            do
            {
              uint64_t v105 = *v103;
              *(void *)(*(v103 - 1) + 88) = a3;
              *(void *)(v105 + 88) = a3;
              v103 += 2;
              v104 -= 2;
            }
            while (v104);
            if (v102 != (v102 & 0x3FFFFFFFFFFFFFFELL))
            {
              unint64_t v101 = &v98[8 * (v102 & 0x3FFFFFFFFFFFFFFELL)];
              goto LABEL_37;
            }
          }
        }
        *(void *)(*(void *)(v95 + 96) + 8) = *(void *)(*(void *)v98 + 16);
        *(void *)(*(void *)(*(void *)(v9 + 192) + 96) + 16) = *(void *)(*(void *)(*(void *)(v9 + 256)
                                                                                              + 8)
                                                                                  + 16);
        *(void *)(*(void *)(*(void *)(v9 + 192) + 96) + 24) = *(void *)(*(void *)(*(void *)(v9 + 256)
                                                                                              + 16)
                                                                                  + 16);
        *(void *)(*(void *)(*(void *)(v9 + 192) + 96) + 32) = *(void *)(*(void *)(*(void *)(v9 + 256)
                                                                                              + 24)
                                                                                  + 16);
        uint64_t v107 = *(void **)(*(void *)(*(void *)(v9 + 192) + 64) + 80);
        int v108 = *(unsigned __int8 *)(v9 + 313);
        unint64_t v109 = v107[1];
        float v8 = 1.0 - v12;
        if (!v109) {
          goto LABEL_4;
        }
        uint64_t v110 = v107[9];
        goto LABEL_86;
      }
      if (v10 == 4)
      {
        unint64_t v11 = (double *)*((void *)this + 3);
        float v12 = *((float *)this + 26);
        uint64_t v13 = *(ggl::PipelineSetup **)(v9 + 192);
        if (*(unsigned char *)(v9 + 312))
        {
          uint64_t v14 = *(void *)(v9 + 296);
          uint64_t v15 = *(std::__shared_weak_count **)(v9 + 304);
          goto LABEL_42;
        }
        uint64_t v14 = *(void *)(v9 + 280);
        if (*((void *)v13 + 2) != v14)
        {
          uint64_t v15 = *(std::__shared_weak_count **)(v9 + 288);
LABEL_42:
          ggl::Flyover::FlyoverPipelineSetup::setState(v13, v14, v15);
        }
        double v111 = v11[10];
        double v112 = v11[11];
        double v113 = v11[12];
        double v115 = v11[8];
        double v114 = v11[9];
        double v117 = v11[6];
        double v116 = v11[7];
        double v118 = -(v115 * v111 - v116 * v112) - (v115 * v111 - v116 * v112);
        double v119 = -(v117 * v112 - v115 * v114) - (v117 * v112 - v115 * v114);
        double v120 = -(v116 * v114 - v117 * v111) - (v116 * v114 - v117 * v111);
        double v121 = -(v120 * v114 - (-(v116 - v118 * v112) - v119 * v113));
        double v122 = -(v117 + v118 * v113 + v119 * v112 - v120 * v111);
        double v123 = -(v115 + v118 * v111 + v120 * v113 - v119 * v114);
        double v124 = v111 * -2.0;
        double v125 = -(v111 * (v111 * -2.0));
        double v126 = 1.0 - (v125 - v112 * (v112 * -2.0));
        double v127 = v114 * -2.0;
        double v128 = -(v111 * (v114 * -2.0));
        double v129 = v112 * -2.0 * v113;
        double v130 = v128 - v129;
        double v131 = -(v112 * (v114 * -2.0));
        double v132 = v113 * v124;
        double v133 = v113 * v124 - v112 * (v114 * -2.0);
        double v134 = v129 + v128;
        double v135 = v114 * -2.0 * v114 + 1.0;
        double v136 = v135 - -(v112 * (v112 * -2.0));
        double v137 = -(v112 * v124);
        double v138 = v113 * v127;
        v280.f64[0] = v126;
        v280.f64[1] = v134;
        v282.f64[0] = v130;
        v282.f64[1] = v136;
        v284.f64[0] = v133;
        v284.f64[1] = v137 - v138;
        v281.f64[0] = v131 - v132;
        float64x2_t v283 = (float64x2_t)COERCE_UNSIGNED_INT64(v138 + v137);
        v285.f64[0] = v135 - v125;
        v281.f64[1] = 0.0;
        v285.f64[1] = 0.0;
        v286.f64[0] = v122;
        v286.f64[1] = v121;
        v287.f64[0] = v123;
        v287.f64[1] = 1.0;
        uint64_t v139 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
        long long v317 = 0u;
        long long v318 = 0u;
        long long v315 = 0u;
        long long v316 = 0u;
        long long v313 = 0u;
        long long v314 = 0u;
        long long v312 = 0u;
        uint64_t v319 = 0x3FF0000000000000;
        uint64_t v140 = *(void *)(v9 + 240);
        uint64_t v311 = *(void *)(v9 + 232);
        *(void *)&long long v314 = v140;
        *((void *)&v316 + 1) = *(void *)(v9 + 248);
        double v141 = *(double *)(v139 + 24);
        double v142 = *(double *)(v139 + 32);
        double v143 = *(double *)(v139 + 40);
        double v144 = *(double *)(v139 + 48);
        double v145 = v142 + v142;
        double v146 = (v142 + v142) * v142;
        double v147 = (v143 + v143) * v143;
        double v148 = v141 + v141;
        double v149 = (v141 + v141) * v142;
        double v150 = (v143 + v143) * v144;
        double v151 = v143 * (v141 + v141);
        double v152 = v144 * v145;
        double v153 = v144 * v145 + v151;
        double v154 = 1.0 - (v141 + v141) * v141;
        double v155 = v145 * v143;
        double v156 = v144 * v148;
        double v296 = 1.0 - (v146 + v147);
        double v297 = v150 + v149;
        double v300 = v149 - v150;
        double v301 = v154 - v147;
        double v304 = v153;
        double v305 = v155 - v156;
        double v298 = v151 - v152;
        double v302 = v156 + v155;
        double v306 = v154 - v146;
        uint64_t v299 = 0;
        uint64_t v303 = 0;
        uint64_t v307 = 0;
        long long v308 = *(_OWORD *)v139;
        uint64_t v309 = *(void *)(v139 + 16);
        uint64_t v310 = 0x3FF0000000000000;
        gm::operator*<double,4,4,4>(v279, &v296, (double *)&v311);
        gm::operator*<double,4,4,4>(v288.f64, v280.f64, v279);
        if (*(unsigned char *)(v9 + 312)) {
          *(void *)(*(void *)(v9 + 184) + 48) = (unint64_t)((v295.f64[0] + v11[118] * -0.1)
        }
                                                                       * 1.84467441e19
                                                                       / (v11[118]
                                                                        * 1.6)
                                                                       + 1.84467441e19);
        unint64_t v157 = *(void **)(*(void *)(*(void *)(v9 + 192) + 64) + 16);
        unint64_t v158 = v157[1];
        if (v158) {
          uint64_t v159 = (float32x4_t *)v157[9];
        }
        else {
          uint64_t v159 = 0;
        }
        float32x4_t v209 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v290), v291);
        *uint64_t v159 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v288), v289);
        v159[1] = v209;
        float32x4_t v210 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v294), v295);
        v159[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v292), v293);
        v159[3] = v210;
        uint64_t v211 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
        long long v317 = 0u;
        long long v318 = 0u;
        long long v315 = 0u;
        long long v316 = 0u;
        long long v313 = 0u;
        long long v314 = 0u;
        long long v312 = 0u;
        uint64_t v319 = 0x3FF0000000000000;
        uint64_t v212 = *(void *)(v9 + 240);
        uint64_t v311 = *(void *)(v9 + 232);
        *(void *)&long long v314 = v212;
        *((void *)&v316 + 1) = *(void *)(v9 + 248);
        double v213 = *(double *)(v211 + 24);
        double v214 = *(double *)(v211 + 32);
        double v215 = *(double *)(v211 + 40);
        double v216 = *(double *)(v211 + 48);
        double v217 = v214 + v214;
        double v218 = (v214 + v214) * v214;
        double v219 = (v215 + v215) * v215;
        double v220 = v213 + v213;
        double v221 = (v213 + v213) * v214;
        double v222 = (v215 + v215) * v216;
        double v223 = v215 * (v213 + v213);
        double v224 = v216 * v217;
        double v225 = v216 * v217 + v223;
        double v226 = 1.0 - (v213 + v213) * v213;
        double v227 = v217 * v215;
        double v228 = v216 * v220;
        double v296 = 1.0 - (v218 + v219);
        double v297 = v222 + v221;
        double v300 = v221 - v222;
        double v301 = v226 - v219;
        double v304 = v225;
        double v305 = v227 - v228;
        double v298 = v223 - v224;
        double v302 = v228 + v227;
        double v306 = v226 - v218;
        uint64_t v299 = 0;
        uint64_t v303 = 0;
        uint64_t v307 = 0;
        long long v308 = *(_OWORD *)v211;
        uint64_t v309 = *(void *)(v211 + 16);
        uint64_t v310 = 0x3FF0000000000000;
        gm::operator*<double,4,4,4>(v280.f64, &v296, (double *)&v311);
        float32x4_t v229 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v282), v283);
        v159[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v280), v281);
        v159[5] = v229;
        v159[6] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v284), v285);
        v159[7] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v286), v287);
        if (v158)
        {
          unint64_t v230 = v157[8];
          if (v230 <= v158) {
            unint64_t v230 = v158;
          }
          v157[7] = 0;
          v157[8] = v230;
        }
        uint64_t v231 = *(void *)(v9 + 192);
        uint64_t v232 = *(void *)(*(void *)(v231 + 64) + 48);
        unint64_t v233 = *(void *)(v232 + 8);
        **(_DWORD **)(v232 + 72) = 1065353216;
        if (*(void *)(v232 + 64) > v233) {
          unint64_t v233 = *(void *)(v232 + 64);
        }
        *(void *)(v232 + 56) = 0;
        *(void *)(v232 + 64) = v233;
        uint64_t v234 = *(char **)(v9 + 256);
        unint64_t v235 = *(char **)(v9 + 264);
        if (v234 != v235)
        {
          unint64_t v236 = v235 - v234 - 8;
          unint64_t v237 = *(char **)(v9 + 256);
          if (v236 < 8)
          {
            do
            {
LABEL_67:
              uint64_t v242 = *(void *)v237;
              v237 += 8;
              *(void *)(v242 + 88) = a3;
            }
            while (v237 != v235);
          }
          else
          {
            uint64_t v238 = (v236 >> 3) + 1;
            uint64_t v239 = (uint64_t *)(v234 + 8);
            uint64_t v240 = v238 & 0x3FFFFFFFFFFFFFFELL;
            do
            {
              uint64_t v241 = *v239;
              *(void *)(*(v239 - 1) + 88) = a3;
              *(void *)(v241 + 88) = a3;
              v239 += 2;
              v240 -= 2;
            }
            while (v240);
            if (v238 != (v238 & 0x3FFFFFFFFFFFFFFELL))
            {
              unint64_t v237 = &v234[8 * (v238 & 0x3FFFFFFFFFFFFFFELL)];
              goto LABEL_67;
            }
          }
        }
        *(void *)(*(void *)(v231 + 96) + 8) = *(void *)(*(void *)v234 + 16);
        *(void *)(*(void *)(*(void *)(v9 + 192) + 96) + 16) = *(void *)(*(void *)(*(void *)(v9 + 256)
                                                                                              + 8)
                                                                                  + 16);
LABEL_84:
        uint64_t v107 = *(void **)(*(void *)(*(void *)(v9 + 192) + 64) + 80);
        int v108 = *(unsigned __int8 *)(v9 + 313);
        unint64_t v109 = v107[1];
        if (!v109)
        {
          float v8 = 1.0 - v12;
LABEL_4:
          MEMORY[0x10] = LODWORD(v8);
          if (!v108) {
            float v8 = v12;
          }
          MEMORY[0x14] = LODWORD(v8);
          goto LABEL_7;
        }
        uint64_t v110 = v107[9];
        float v8 = 1.0 - v12;
LABEL_86:
        if (v108) {
          float v277 = v8;
        }
        else {
          float v277 = v12;
        }
        *(float *)(v110 + 16) = v8;
        *(float *)(v110 + 20) = v277;
        if (v110) {
          BOOL v278 = v109 == 0;
        }
        else {
          BOOL v278 = 1;
        }
        if (!v278)
        {
          if (v107[8] > v109) {
            unint64_t v109 = v107[8];
          }
          v107[7] = 0;
          v107[8] = v109;
        }
      }
LABEL_7:
      if (++v4 == v5) {
        return;
      }
    }
    uint64_t v20 = (double *)*((void *)this + 3);
    float v12 = *((float *)this + 26);
    uint64_t v21 = *(ggl::PipelineSetup **)(v9 + 192);
    if (*(unsigned char *)(v9 + 312))
    {
      uint64_t v22 = *(void *)(v9 + 296);
      uint64_t v23 = *(std::__shared_weak_count **)(v9 + 304);
    }
    else
    {
      uint64_t v22 = *(void *)(v9 + 280);
      if (*((void *)v21 + 2) == v22) {
        goto LABEL_50;
      }
      uint64_t v23 = *(std::__shared_weak_count **)(v9 + 288);
    }
    ggl::Flyover::FlyoverPipelineSetup::setState(v21, v22, v23);
LABEL_50:
    double v160 = v20[10];
    double v161 = v20[11];
    double v162 = v20[12];
    double v164 = v20[8];
    double v163 = v20[9];
    double v166 = v20[6];
    double v165 = v20[7];
    double v167 = -(v164 * v160 - v165 * v161) - (v164 * v160 - v165 * v161);
    double v168 = -(v166 * v161 - v164 * v163) - (v166 * v161 - v164 * v163);
    double v169 = -(v165 * v163 - v166 * v160) - (v165 * v163 - v166 * v160);
    double v170 = -(v169 * v163 - (-(v165 - v167 * v161) - v168 * v162));
    double v171 = -(v166 + v167 * v162 + v168 * v161 - v169 * v160);
    double v172 = -(v164 + v167 * v160 + v169 * v162 - v168 * v163);
    double v173 = v160 * -2.0;
    double v174 = -(v160 * (v160 * -2.0));
    double v175 = 1.0 - (v174 - v161 * (v161 * -2.0));
    double v176 = v163 * -2.0;
    double v177 = -(v160 * (v163 * -2.0));
    double v178 = v161 * -2.0 * v162;
    double v179 = v177 - v178;
    double v180 = -(v161 * (v163 * -2.0));
    double v181 = v162 * v173;
    double v182 = v162 * v173 - v161 * (v163 * -2.0);
    double v183 = v178 + v177;
    double v184 = v163 * -2.0 * v163 + 1.0;
    double v185 = v184 - -(v161 * (v161 * -2.0));
    double v186 = -(v161 * v173);
    double v187 = v162 * v176;
    v280.f64[0] = v175;
    v280.f64[1] = v183;
    v282.f64[0] = v179;
    v282.f64[1] = v185;
    v284.f64[0] = v182;
    v284.f64[1] = v186 - v187;
    v281.f64[0] = v180 - v181;
    float64x2_t v283 = (float64x2_t)COERCE_UNSIGNED_INT64(v187 + v186);
    v285.f64[0] = v184 - v174;
    v281.f64[1] = 0.0;
    v285.f64[1] = 0.0;
    v286.f64[0] = v171;
    v286.f64[1] = v170;
    v287.f64[0] = v172;
    v287.f64[1] = 1.0;
    uint64_t v188 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
    long long v317 = 0u;
    long long v318 = 0u;
    long long v315 = 0u;
    long long v316 = 0u;
    long long v313 = 0u;
    long long v314 = 0u;
    long long v312 = 0u;
    uint64_t v319 = 0x3FF0000000000000;
    uint64_t v189 = *(void *)(v9 + 240);
    uint64_t v311 = *(void *)(v9 + 232);
    *(void *)&long long v314 = v189;
    *((void *)&v316 + 1) = *(void *)(v9 + 248);
    double v190 = *(double *)(v188 + 24);
    double v191 = *(double *)(v188 + 32);
    double v192 = *(double *)(v188 + 40);
    double v193 = *(double *)(v188 + 48);
    double v194 = v191 + v191;
    double v195 = (v191 + v191) * v191;
    double v196 = (v192 + v192) * v192;
    double v197 = v190 + v190;
    double v198 = (v190 + v190) * v191;
    double v199 = (v192 + v192) * v193;
    double v200 = v192 * (v190 + v190);
    double v201 = v193 * v194;
    double v202 = v193 * v194 + v200;
    double v203 = 1.0 - (v190 + v190) * v190;
    double v204 = v194 * v192;
    double v205 = v193 * v197;
    double v296 = 1.0 - (v195 + v196);
    double v297 = v199 + v198;
    double v300 = v198 - v199;
    double v301 = v203 - v196;
    double v304 = v202;
    double v305 = v204 - v205;
    double v298 = v200 - v201;
    double v302 = v205 + v204;
    double v306 = v203 - v195;
    uint64_t v299 = 0;
    uint64_t v303 = 0;
    uint64_t v307 = 0;
    long long v308 = *(_OWORD *)v188;
    uint64_t v309 = *(void *)(v188 + 16);
    uint64_t v310 = 0x3FF0000000000000;
    gm::operator*<double,4,4,4>(v279, &v296, (double *)&v311);
    gm::operator*<double,4,4,4>(v288.f64, v280.f64, v279);
    if (*(unsigned char *)(v9 + 312)) {
      *(void *)(*(void *)(v9 + 184) + 48) = (unint64_t)((v295.f64[0] + v20[118] * -0.1)
    }
                                                                   * 1.84467441e19
                                                                   / (v20[118]
                                                                    * 1.6)
                                                                   + 1.84467441e19);
    uint64_t v206 = *(void **)(*(void *)(*(void *)(v9 + 192) + 64) + 16);
    unint64_t v207 = v206[1];
    if (v207) {
      uint64_t v208 = (float32x4_t *)v206[9];
    }
    else {
      uint64_t v208 = 0;
    }
    float32x4_t v243 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v290), v291);
    *uint64_t v208 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v288), v289);
    v208[1] = v243;
    float32x4_t v244 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v294), v295);
    v208[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v292), v293);
    v208[3] = v244;
    uint64_t v245 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
    long long v317 = 0u;
    long long v318 = 0u;
    long long v315 = 0u;
    long long v316 = 0u;
    long long v313 = 0u;
    long long v314 = 0u;
    long long v312 = 0u;
    uint64_t v319 = 0x3FF0000000000000;
    uint64_t v246 = *(void *)(v9 + 240);
    uint64_t v311 = *(void *)(v9 + 232);
    *(void *)&long long v314 = v246;
    *((void *)&v316 + 1) = *(void *)(v9 + 248);
    double v247 = *(double *)(v245 + 24);
    double v248 = *(double *)(v245 + 32);
    double v249 = *(double *)(v245 + 40);
    double v250 = *(double *)(v245 + 48);
    double v251 = v248 + v248;
    double v252 = (v248 + v248) * v248;
    double v253 = (v249 + v249) * v249;
    double v254 = v247 + v247;
    double v255 = (v247 + v247) * v248;
    double v256 = (v249 + v249) * v250;
    double v257 = v249 * (v247 + v247);
    double v258 = v250 * v251;
    double v259 = v250 * v251 + v257;
    double v260 = 1.0 - (v247 + v247) * v247;
    double v261 = v251 * v249;
    double v262 = v250 * v254;
    double v296 = 1.0 - (v252 + v253);
    double v297 = v256 + v255;
    double v300 = v255 - v256;
    double v301 = v260 - v253;
    double v304 = v259;
    double v305 = v261 - v262;
    double v298 = v257 - v258;
    double v302 = v262 + v261;
    double v306 = v260 - v252;
    uint64_t v299 = 0;
    uint64_t v303 = 0;
    uint64_t v307 = 0;
    long long v308 = *(_OWORD *)v245;
    uint64_t v309 = *(void *)(v245 + 16);
    uint64_t v310 = 0x3FF0000000000000;
    gm::operator*<double,4,4,4>(v280.f64, &v296, (double *)&v311);
    float32x4_t v263 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v282), v283);
    v208[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v280), v281);
    v208[5] = v263;
    v208[6] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v284), v285);
    v208[7] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v286), v287);
    if (v207)
    {
      unint64_t v264 = v206[8];
      if (v264 <= v207) {
        unint64_t v264 = v207;
      }
      v206[7] = 0;
      v206[8] = v264;
    }
    uint64_t v265 = *(void *)(v9 + 192);
    uint64_t v266 = *(void *)(*(void *)(v265 + 64) + 48);
    unint64_t v267 = *(void *)(v266 + 8);
    **(_DWORD **)(v266 + 72) = 1065353216;
    if (*(void *)(v266 + 64) > v267) {
      unint64_t v267 = *(void *)(v266 + 64);
    }
    *(void *)(v266 + 56) = 0;
    *(void *)(v266 + 64) = v267;
    unint64_t v268 = *(char **)(v9 + 256);
    uint64_t v269 = *(char **)(v9 + 264);
    if (v268 == v269) {
      goto LABEL_83;
    }
    unint64_t v270 = v269 - v268 - 8;
    uint64_t v271 = *(char **)(v9 + 256);
    if (v270 >= 8)
    {
      uint64_t v272 = (v270 >> 3) + 1;
      unint64_t v273 = (uint64_t *)(v268 + 8);
      uint64_t v274 = v272 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        uint64_t v275 = *v273;
        *(void *)(*(v273 - 1) + 88) = a3;
        *(void *)(v275 + 88) = a3;
        v273 += 2;
        v274 -= 2;
      }
      while (v274);
      if (v272 == (v272 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_83;
      }
      uint64_t v271 = &v268[8 * (v272 & 0x3FFFFFFFFFFFFFFELL)];
    }
    do
    {
      uint64_t v276 = *(void *)v271;
      v271 += 8;
      *(void *)(v276 + 88) = a3;
    }
    while (v271 != v269);
LABEL_83:
    *(void *)(*(void *)(v265 + 96) + 8) = *(void *)(*(void *)v268 + 16);
    *(void *)(*(void *)(*(void *)(v9 + 192) + 96) + 16) = *(void *)(*(void *)(*(void *)(v9 + 256) + 8)
                                                                              + 16);
    *(void *)(*(void *)(*(void *)(v9 + 192) + 96) + 24) = *(void *)(*(void *)(*(void *)(v9 + 256) + 16)
                                                                              + 16);
    *(void *)(*(void *)(*(void *)(v9 + 192) + 96) + 32) = *(void *)(*(void *)(*(void *)(v9 + 256) + 24)
                                                                              + 16);
    goto LABEL_84;
  }
}

uint64_t altitude::MorphEffect::update(uint64_t this, float a2)
{
  uint64_t v2 = this;
  float v3 = fminf(*(float *)(this + 104) + (float)(*(float *)(this + 108) * a2), 1.0);
  *(float *)(this + 104) = v3;
  if (v3 == 1.0)
  {
    char v4 = 1;
  }
  else
  {
    this = altitude::GlobeTileRenderEffect::isAcceptedByView(*(altitude::GlobeTileRenderEffect **)(*(void *)(this + 16) + 16), *(void *)(this + 24));
    char v4 = this ^ 1;
  }
  *(unsigned char *)(v2 + 48) = v4;
  return this;
}

void altitude::MorphEffect::~MorphEffect(altitude::MorphEffect *this)
{
  *(void *)this = &unk_1EF5686D0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EF5686D0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t altitude::CoarsenEffect::occludesGrid(altitude::CoarsenEffect *this)
{
  uint64_t v1 = *((void *)this + 7);
  uint64_t v2 = *((void *)this + 8);
  if (v1 == v2) {
    return 1;
  }
  uint64_t v3 = v1 + 24;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v3 - 8) + 40))(*(void *)(v3 - 8));
    if (result) {
      BOOL v5 = v3 == v2;
    }
    else {
      BOOL v5 = 1;
    }
    v3 += 24;
  }
  while (!v5);
  return result;
}

uint64_t altitude::CoarsenEffect::collectRenderItems(uint64_t this, md::PassList *a2, md::RealisticCommandBufferSelector *a3)
{
  uint64_t v3 = *(void *)(this + 56);
  for (uint64_t i = *(void *)(this + 64); v3 != i; v3 += 24)
    this = (*(uint64_t (**)(void, md::PassList *, md::RealisticCommandBufferSelector *))(**(void **)(v3 + 16) + 32))(*(void *)(v3 + 16), a2, a3);
  return this;
}

uint64_t altitude::CoarsenEffect::willBeDrawn(uint64_t this, karo::graphics::Viewport *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(this + 56);
  for (uint64_t i = *(void *)(this + 64); v3 != i; v3 += 24)
    this = (*(uint64_t (**)(void, karo::graphics::Viewport *, uint64_t))(**(void **)(v3 + 16) + 24))(*(void *)(v3 + 16), a2, a3);
  return this;
}

uint64_t altitude::CoarsenEffect::update(altitude::CoarsenEffect *this, float a2)
{
  *((unsigned char *)this + 48) = 1;
  uint64_t result = altitude::GlobeTileRenderEffect::isAcceptedByView(*(altitude::GlobeTileRenderEffect **)(*((void *)this + 2) + 16), *((void *)this + 3));
  if (result)
  {
    uint64_t v5 = *((void *)this + 7);
    uint64_t v6 = *((void *)this + 8);
    while (v5 != v6)
    {
      uint64_t v7 = *(unsigned char **)(v5 + 16);
      uint64_t result = (*(uint64_t (**)(unsigned char *, float))(*(void *)v7 + 16))(v7, a2);
      if (!v7[48]) {
        *((unsigned char *)this + 48) = 0;
      }
      v5 += 24;
    }
  }
  return result;
}

void altitude::CoarsenEffect::~CoarsenEffect(altitude::CoarsenEffect *this)
{
  *(void *)this = &unk_1EF568BD0;
  uint64_t v2 = (altitude::GlobeTileRenderEffect **)*((void *)this + 7);
  uint64_t v3 = (altitude::GlobeTileRenderEffect **)*((void *)this + 8);
  if (v2 != v3)
  {
    do
    {
      altitude::GlobeTileRenderManager::destroyEffect(*((void *)this + 5), v2[2]);
      v2 += 3;
    }
    while (v2 != v3);
    uint64_t v2 = (altitude::GlobeTileRenderEffect **)*((void *)this + 7);
  }
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1A6239270);
}

{
  altitude::GlobeTileRenderEffect **v2;
  altitude::GlobeTileRenderEffect **v3;

  *(void *)this = &unk_1EF568BD0;
  uint64_t v2 = (altitude::GlobeTileRenderEffect **)*((void *)this + 7);
  uint64_t v3 = (altitude::GlobeTileRenderEffect **)*((void *)this + 8);
  if (v2 != v3)
  {
    do
    {
      altitude::GlobeTileRenderManager::destroyEffect(*((void *)this + 5), v2[2]);
      v2 += 3;
    }
    while (v2 != v3);
    uint64_t v2 = (altitude::GlobeTileRenderEffect **)*((void *)this + 7);
  }
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
}

uint64_t altitude::RefineEffect::occludesGrid(altitude::RefineEffect *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7) + 40))();
}

uint64_t altitude::RefineEffect::collectRenderItems(altitude::RefineEffect *this, md::PassList *a2, md::RealisticCommandBufferSelector *a3)
{
  return (*(uint64_t (**)(void, md::PassList *, md::RealisticCommandBufferSelector *))(**((void **)this + 7)
                                                                                                 + 32))(*((void *)this + 7), a2, a3);
}

uint64_t altitude::RefineEffect::willBeDrawn(altitude::RefineEffect *this, karo::graphics::Viewport *a2)
{
  return (*(uint64_t (**)(void, karo::graphics::Viewport *))(**((void **)this + 7) + 24))(*((void *)this + 7), a2);
}

uint64_t altitude::RefineEffect::update(altitude::RefineEffect *this, float a2)
{
  uint64_t result = (*(uint64_t (**)(void, float))(**((void **)this + 7) + 16))(*((void *)this + 7), a2);
  *((unsigned char *)this + 48) = *(unsigned char *)(*((void *)this + 7) + 48);
  return result;
}

void altitude::RefineEffect::~RefineEffect(altitude::RefineEffect *this)
{
  *(void *)this = &unk_1EF568A80;
  altitude::GlobeTileRenderManager::destroyEffect(*((void *)this + 5), *((altitude::GlobeTileRenderEffect **)this + 7));
  JUMPOUT(0x1A6239270);
}

{
  *(void *)this = &unk_1EF568A80;
  altitude::GlobeTileRenderManager::destroyEffect(*((void *)this + 5), *((altitude::GlobeTileRenderEffect **)this + 7));
}

__n128 altitude::CoarsenEffect::addChildEffect(void *a1, __n128 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)a1[8];
  unint64_t v6 = a1[9];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (void *)a1[7];
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v7 - v9) + 1;
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v9) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v13 = (char *)operator new(24 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * (v7 - v9)];
    *(void *)uint64_t v14 = 0;
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    float v8 = v14 + 24;
    if (v7 != v9)
    {
      do
      {
        long long v15 = *(_OWORD *)(v7 - 3);
        *((void *)v14 - 1) = *(v7 - 1);
        *(_OWORD *)(v14 - 24) = v15;
        v14 -= 24;
        v7 -= 3;
      }
      while (v7 != v9);
      uint64_t v7 = (void *)a1[7];
    }
    a1[7] = v14;
    a1[8] = v8;
    a1[9] = &v13[24 * v12];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    float v8 = v7 + 3;
    void v7[2] = 0;
  }
  a1[8] = v8;
  __n128 result = *a2;
  *(__n128 *)(v8 - 3) = *a2;
  *(void *)(a1[8] - 8) = a3;
  return result;
}

void non-virtual thunk to'altitude::FlyoverTour::tagRead(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void altitude::FlyoverTour::tagRead(uint64_t a1, uint64_t a2, uint64_t a3)
{
  HIBYTE(__p[2]) = 7;
  strcpy((char *)__p, "trigger");
  if (*(void *)a3 && (uint64_t v3 = *(void *)(*(void *)a3 + 24)) != 0)
  {
    while (1)
    {
      char v4 = SHIBYTE(__p[2]) >= 0 ? (const xmlChar *)__p : (const xmlChar *)__p[0];
      int v5 = SHIBYTE(__p[2]) >= 0 ? HIBYTE(__p[2]) : LODWORD(__p[1]);
      if (!xmlStrncmp(*(const xmlChar **)(v3 + 16), v4, v5)) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 48);
      if (!v3) {
        goto LABEL_11;
      }
    }
    memset((char *)v148 + 8, 0, 40);
    *(void *)&v148[0] = v3;
    if (SHIBYTE(__p[2]) < 0)
    {
LABEL_15:
      operator delete(__p[0]);
      uint64_t v3 = *(void *)&v148[0];
      if (*(void *)&v148[0]) {
        goto LABEL_16;
      }
      goto LABEL_247;
    }
  }
  else
  {
LABEL_11:
    uint64_t v3 = 0;
    memset(v148, 0, 48);
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_15;
    }
  }
  if (v3)
  {
LABEL_16:
    uint64_t v107 = *(std::locale::__imp **)(MEMORY[0x1E4FBA410] + 16);
    int v108 = *(std::locale::__imp **)(MEMORY[0x1E4FBA410] + 8);
    double v115 = (std::locale::__imp *)*MEMORY[0x1E4FBA410];
    double v116 = *(std::locale::__imp **)(MEMORY[0x1E4FBA410] + 24);
    uint64_t v110 = (void *)*MEMORY[0x1E4FBA408];
    double v111 = *(void **)(MEMORY[0x1E4FBA408] + 64);
    double v112 = *(void **)(MEMORY[0x1E4FBA408] + 72);
    uint64_t v105 = (int *)(a1 + 72);
    do
    {
      HIBYTE(__p[2]) = 11;
      strcpy((char *)__p, "flyovertour");
      uint64_t v6 = *(void *)(v3 + 24);
      if (v6)
      {
        while (1)
        {
          uint64_t v7 = SHIBYTE(__p[2]) >= 0 ? (const xmlChar *)__p : (const xmlChar *)__p[0];
          int v8 = SHIBYTE(__p[2]) >= 0 ? HIBYTE(__p[2]) : LODWORD(__p[1]);
          if (!xmlStrncmp(*(const xmlChar **)(v6 + 16), v7, v8)) {
            break;
          }
          uint64_t v6 = *(void *)(v6 + 48);
          if (!v6) {
            goto LABEL_27;
          }
        }
        *(void *)&v147[0] = v6;
        memset((char *)v147 + 8, 0, 40);
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        {
LABEL_28:
          if (v6) {
            goto LABEL_39;
          }
          goto LABEL_32;
        }
      }
      else
      {
LABEL_27:
        uint64_t v6 = 0;
        memset(v147, 0, sizeof(v147));
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
          goto LABEL_28;
        }
      }
      operator delete(__p[0]);
      if (!*(void *)&v147[0]) {
        goto LABEL_32;
      }
      do
      {
LABEL_39:
        unint64_t v146 = 0;
        uint64_t v14 = XmlNode::Attribute((const xmlNode **)v147, (const xmlChar *)"tourid");
        if (!v14) {
          goto LABEL_199;
        }
        long long v15 = v14;
        size_t v16 = strlen((const char *)v14);
        if (v16 > 0x7FFFFFFFFFFFFFF7) {
          abort();
        }
        size_t v17 = v16;
        if (v16 >= 0x17)
        {
          uint64_t v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v16 | 7) != 0x17) {
            uint64_t v19 = v16 | 7;
          }
          uint64_t v20 = v19 + 1;
          uint64_t v18 = (long long *)operator new(v19 + 1);
          *(void *)&__dst[1] = v20 | 0x8000000000000000;
          *(void *)&__dst[0] = v18;
          *((void *)&__dst[0] + 1) = v17;
LABEL_49:
          memmove(v18, v15, v17);
          goto LABEL_50;
        }
        BYTE7(__dst[1]) = v16;
        uint64_t v18 = __dst;
        if (v16) {
          goto LABEL_49;
        }
LABEL_50:
        *((unsigned char *)v18 + v17) = 0;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)__p, __dst);
        if (SBYTE7(__dst[1]) < 0) {
          operator delete(*(void **)&__dst[0]);
        }
        uint64_t v21 = (void *)MEMORY[0x1A6238CC0](__p, &v146);
        if ((*((unsigned char *)v21 + *(void *)(*v21 - 24) + 32) & 5) != 0) {
          goto LABEL_196;
        }
        int v142 = -1;
        XmlNode::Attribute((const xmlNode **)v148, (const xmlChar *)"region", &v142);
        if (*(void *)&v147[0] && (uint64_t v22 = *(void *)(*(void *)&v147[0] + 24), *(_DWORD *)(v22 + 8) == 3)) {
          uint64_t v23 = *(const char **)(v22 + 80);
        }
        else {
          uint64_t v23 = 0;
        }
        size_t v24 = strlen(v23);
        if (v24 > 0x7FFFFFFFFFFFFFF7) {
          abort();
        }
        double v25 = (std::locale::__imp *)v24;
        if (v24 >= 0x17)
        {
          uint64_t v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v24 | 7) != 0x17) {
            uint64_t v27 = v24 | 7;
          }
          uint64_t v28 = v27 + 1;
          double v26 = (std::locale::__imp *)operator new(v27 + 1);
          v126[0] = v28 | 0x8000000000000000;
          v125[0].__locale_ = v26;
          v125[1].__locale_ = v25;
LABEL_64:
          memmove(v26, v23, (size_t)v25);
          goto LABEL_65;
        }
        HIBYTE(v126[0]) = v24;
        double v26 = (std::locale::__imp *)v125;
        if (v24) {
          goto LABEL_64;
        }
LABEL_65:
        *((unsigned char *)v25 + (void)v26) = 0;
        uint64_t v29 = MEMORY[0x1E4FBA490] + 64;
        v141[0] = MEMORY[0x1E4FBA490] + 64;
        *(void *)&__dst[0] = v108;
        *(void *)((char *)__dst + *((void *)v108 - 3)) = v107;
        *((void *)&__dst[0] + 1) = 0;
        double v30 = (std::ios_base *)((char *)__dst + *(void *)(*(void *)&__dst[0] - 24));
        std::ios_base::init(v30, &__dst[1]);
        uint64_t v31 = MEMORY[0x1E4FBA490] + 24;
        v30[1].__vftable = 0;
        v30[1].__fmtflags_ = -1;
        *(void *)&__dst[0] = v31;
        v141[0] = v29;
        std::streambuf::basic_streambuf();
        uint64_t v138 = v126[0];
        long long v137 = *(_OWORD *)&v125[0].__locale_;
        int v140 = 8;
        uint64_t v32 = HIBYTE(v126[0]);
        if (v126[0] >= 0)
        {
          double v33 = &v137;
        }
        else
        {
          uint64_t v32 = *((void *)&v137 + 1);
          double v33 = (long long *)v137;
        }
        uint64_t v139 = (char *)v33 + v32;
        uint64_t v109 = MEMORY[0x1E4FBA470] + 16;
        *(void *)&__dst[1] = MEMORY[0x1E4FBA470] + 16;
        *(void *)&__dst[2] = v33;
        *((void *)&__dst[2] + 1) = v33;
        double v136 = (char *)v33 + v32;
        id obj = objc_alloc_init(MEMORY[0x1E4F647D0]);
        long long v133 = 0uLL;
        unint64_t v134 = 0;
        while (2)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)__dst + *(void *)(*(void *)&__dst[0] - 24)));
          double v34 = std::locale::use_facet(v125, MEMORY[0x1E4FBA258]);
          char v35 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
          std::locale::~locale(v125);
          MEMORY[0x1A6238C70](v125, __dst, 1);
          if (!LOBYTE(v125[0].__locale_)) {
            goto LABEL_108;
          }
          if (SHIBYTE(v134) < 0)
          {
            *(unsigned char *)long long v133 = 0;
            *((void *)&v133 + 1) = 0;
          }
          else
          {
            LOBYTE(v133) = 0;
            HIBYTE(v134) = 0;
          }
          uint64_t v36 = 0;
          while (1)
          {
            double v37 = *(void **)((char *)&__dst[2] + *(void *)(*(void *)&__dst[0] - 24) + 8);
            double v38 = (char *)v37[3];
            if (v38 != (char *)v37[4])
            {
              v37[3] = v38 + 1;
              char v39 = *v38;
              goto LABEL_78;
            }
            int v40 = (*(uint64_t (**)(void *))(*v37 + 80))(v37);
            char v39 = v40;
            if (v40 == -1) {
              break;
            }
LABEL_78:
            if (v35 == v39)
            {
              int v49 = 0;
              goto LABEL_107;
            }
            if ((SHIBYTE(v134) & 0x80000000) == 0)
            {
              if (HIBYTE(v134) != 22)
              {
                size_t v42 = HIBYTE(v134);
                HIBYTE(v134) = (HIBYTE(v134) + 1) & 0x7F;
                double v47 = &v133;
                goto LABEL_100;
              }
              double v41 = &v133;
              size_t v42 = 22;
LABEL_85:
              if (v42 + 1 > 2 * v42) {
                unint64_t v44 = v42 + 1;
              }
              else {
                unint64_t v44 = 2 * v42;
              }
              uint64_t v45 = (v44 & 0x7FFFFFFFFFFFFFF8) + 8;
              if ((v44 | 7) != 0x17) {
                uint64_t v45 = v44 | 7;
              }
              if (v44 >= 0x17) {
                size_t v43 = v45 + 1;
              }
              else {
                size_t v43 = 23;
              }
LABEL_93:
              double v46 = (long long *)operator new(v43);
              double v47 = v46;
              if (!v42 || (memmove(v46, v41, v42), v42 != 22)) {
                operator delete(v41);
              }
              *(void *)&long long v133 = v47;
              unint64_t v134 = v43 | 0x8000000000000000;
              goto LABEL_99;
            }
            size_t v42 = (v134 & 0x7FFFFFFFFFFFFFFFLL) - 1;
            if (*((void *)&v133 + 1) == v42)
            {
              if ((v134 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8) {
                abort();
              }
              double v41 = (long long *)v133;
              size_t v43 = 0x7FFFFFFFFFFFFFF7;
              if (v42 < 0x3FFFFFFFFFFFFFF3) {
                goto LABEL_85;
              }
              goto LABEL_93;
            }
            size_t v42 = *((void *)&v133 + 1);
            double v47 = (long long *)v133;
LABEL_99:
            *((void *)&v133 + 1) = v42 + 1;
LABEL_100:
            double v48 = (char *)v47 + v42;
            *double v48 = v39;
            v48[1] = 0;
            ++v36;
            if (SHIBYTE(v134) < 0 && *((void *)&v133 + 1) == 0x7FFFFFFFFFFFFFF7)
            {
              int v49 = 4;
              goto LABEL_107;
            }
          }
          if (v36) {
            int v49 = 2;
          }
          else {
            int v49 = 6;
          }
LABEL_107:
          std::ios_base::clear((std::ios_base *)((char *)__dst + *(void *)(*(void *)&__dst[0] - 24)), *(_DWORD *)((char *)&__dst[2] + *(void *)(*(void *)&__dst[0] - 24)) | v49);
LABEL_108:
          if ((*((unsigned char *)&__dst[2] + *(void *)(*(void *)&__dst[0] - 24)) & 5) == 0)
          {
            uint64_t v50 = MEMORY[0x1E4FBA490] + 64;
            v132[0] = MEMORY[0x1E4FBA490] + 64;
            v125[0].__locale_ = v108;
            *(std::locale::__imp **)((char *)&v125[0].__locale_ + *((void *)v108 - 3)) = v107;
            v125[1].__locale_ = 0;
            double v51 = (std::ios_base *)((char *)v125 + *((void *)v125[0].__locale_ - 3));
            std::ios_base::init(v51, v126);
            uint64_t v52 = (std::locale::__imp *)(MEMORY[0x1E4FBA490] + 24);
            v51[1].__vftable = 0;
            v51[1].__fmtflags_ = -1;
            v125[0].__locale_ = v52;
            v132[0] = v50;
            std::streambuf::basic_streambuf();
            uint64_t v53 = MEMORY[0x1E4FBA470] + 16;
            v126[0] = MEMORY[0x1E4FBA470] + 16;
            double v54 = (char *)&v129;
            long long v129 = 0u;
            long long v130 = 0u;
            int v131 = 8;
            if (SHIBYTE(v134) < 0)
            {
              double v54 = (char *)std::string::__assign_no_alias<true>(&v129, (void *)v133, *((size_t *)&v133 + 1));
              char v55 = v131;
            }
            else
            {
              long long v129 = v133;
              *(void *)&long long v130 = v134;
              char v55 = 8;
            }
            *((void *)&v130 + 1) = 0;
            LOBYTE(v56) = BYTE7(v130);
            uint64_t v57 = *((void *)&v129 + 1);
            double v58 = (long long *)v129;
            if ((SBYTE7(v130) & 0x80u) == 0) {
              double v59 = v54;
            }
            else {
              double v59 = (char *)v129;
            }
            if ((SBYTE7(v130) & 0x80u) == 0) {
              unint64_t v60 = BYTE7(v130);
            }
            else {
              unint64_t v60 = *((void *)&v129 + 1);
            }
            if ((v55 & 8) != 0)
            {
              v126[2] = v59;
              v126[3] = v59;
              *((void *)&v130 + 1) = &v59[v60];
              v126[4] = &v59[v60];
            }
            if ((v55 & 0x10) == 0) {
              goto LABEL_169;
            }
            *((void *)&v130 + 1) = &v59[v60];
            if (SBYTE7(v130) < 0)
            {
              unint64_t v62 = (v130 & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if (*((void *)&v129 + 1) < v62)
              {
                unint64_t v56 = BYTE7(v130);
                size_t v61 = v62 - *((void *)&v129 + 1);
                if (v62 == *((void *)&v129 + 1)) {
                  goto LABEL_162;
                }
                goto LABEL_127;
              }
              *((void *)&v129 + 1) = (v130 & 0x7FFFFFFFFFFFFFFFLL) - 1;
            }
            else
            {
              if (SBYTE7(v130) <= 0x15)
              {
                size_t v61 = 22 - BYTE7(v130);
                if (BYTE7(v130) == 22)
                {
LABEL_162:
                  if ((v56 & 0x80u) == 0) {
                    uint64_t v57 = v56;
                  }
                  double v127 = v59;
                  v126[5] = v59;
                  double v128 = &v59[v57];
                  if ((v55 & 3) != 0)
                  {
                    if (v60 >> 31)
                    {
                      uint64_t v75 = ((v60 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
                      unint64_t v76 = 0x7FFFFFFF * ((v75 + ((v60 - 0x80000000 - v75) >> 1)) >> 30);
                      v59 += v76 + 0x7FFFFFFF;
                      unint64_t v60 = v60 - v76 - 0x7FFFFFFF;
                      double v127 = v59;
                    }
                    if (v60) {
                      double v127 = &v59[v60];
                    }
                  }
LABEL_169:
                  uint64_t v124 = 0;
                  long long v122 = 0u;
                  long long v123 = 0u;
                  long long v120 = 0u;
                  long long v121 = 0u;
                  long long v119 = 0u;
                  uint64_t v77 = MEMORY[0x1A6238C90](v125, (char *)&v120 + 8);
                  uint64_t v78 = MEMORY[0x1A6238C90](v77, &v121);
                  uint64_t v79 = MEMORY[0x1A6238C90](v78, &v120);
                  uint64_t v80 = MEMORY[0x1A6238C90](v79, (char *)&v123 + 8);
                  uint64_t v81 = MEMORY[0x1A6238C90](v80, &v123);
                  uint64_t v82 = MEMORY[0x1A6238C90](v81, &v122);
                  double v83 = (void *)MEMORY[0x1A6238C90](v82, (char *)&v121 + 8);
                  if ((*((unsigned char *)v83 + *(void *)(*v83 - 24) + 32) & 5) == 0)
                  {
                    double v84 = (void *)MEMORY[0x1A6238C90](v125, (char *)&v122 + 8);
                    if ((*((unsigned char *)v84 + *(void *)(*v84 - 24) + 32) & 5) != 0) {
                      *((void *)&v122 + 1) = 0;
                    }
                    double v85 = (void *)MEMORY[0x1A6238CA0](v125, &v119);
                    if ((*((unsigned char *)v85 + *(void *)(*v85 - 24) + 32) & 5) != 0) {
                      LODWORD(v119) = 0;
                    }
                    double v86 = (void *)MEMORY[0x1A6238CA0](v125, (char *)&v119 + 4);
                    if ((*((unsigned char *)v86 + *(void *)(*v86 - 24) + 32) & 5) != 0) {
                      DWORD1(v119) = 1065353216;
                    }
                    v117[2] = v121;
                    v117[3] = v122;
                    v117[4] = v123;
                    uint64_t v118 = v124;
                    v117[0] = v119;
                    v117[1] = v120;
                    objc_msgSend(obj, "addCameraPath:", v117, v105);
                  }
                  v125[0].__locale_ = v115;
                  *(std::locale::__imp **)((char *)&v125[0].__locale_ + *((void *)v115 - 3)) = v116;
                  v126[0] = v53;
                  if (SBYTE7(v130) < 0) {
                    operator delete((void *)v129);
                  }
                  std::streambuf::~streambuf();
                  std::istream::~istream();
                  MEMORY[0x1A62391A0](v132);
                  continue;
                }
LABEL_127:
                if ((v56 & 0x80u) == 0) {
                  unint64_t v63 = 22;
                }
                else {
                  unint64_t v63 = (v130 & 0x7FFFFFFFFFFFFFFFLL) - 1;
                }
                if ((v56 & 0x80u) == 0) {
                  size_t v64 = v56;
                }
                else {
                  size_t v64 = *((void *)&v129 + 1);
                }
                if (v63 - v64 >= v61)
                {
                  double v69 = &v129;
                  if ((v56 & 0x80) != 0)
                  {
                    double v69 = &v129;
                    if ((v130 & 0x8000000000000000) != 0) {
                      goto LABEL_156;
                    }
                  }
                }
                else
                {
                  if (0x7FFFFFFFFFFFFFF7 - v63 < v64 + v61 - v63) {
                    abort();
                  }
                  double v65 = &v129;
                  if ((v56 & 0x80u) != 0) {
                    double v65 = (long long *)v129;
                  }
                  long long __src = v65;
                  size_t v66 = 0x7FFFFFFFFFFFFFF7;
                  if (v63 < 0x3FFFFFFFFFFFFFF3)
                  {
                    unint64_t v67 = 2 * v63;
                    if (v64 + v61 > 2 * v63) {
                      unint64_t v67 = v64 + v61;
                    }
                    if (v67 >= 0x17)
                    {
                      unint64_t v70 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
                      uint64_t v71 = v67 | 7;
                      if (v71 == 23) {
                        uint64_t v71 = v70;
                      }
                      size_t v66 = v71 + 1;
                    }
                    else
                    {
                      size_t v66 = 23;
                    }
                  }
                  size_t v72 = v66;
                  float32x4_t v73 = (long long *)operator new(v66);
                  double v58 = v73;
                  if (v64) {
                    memmove(v73, __src, v64);
                  }
                  if (v63 != 22) {
                    operator delete(__src);
                  }
                  *(void *)&long long v130 = v72 | 0x8000000000000000;
                  *(void *)&long long v129 = v58;
                  *((void *)&v129 + 1) = v64;
LABEL_156:
                  double v69 = v58;
                }
                bzero((char *)v69 + v64, v61);
                size_t v74 = v64 + v61;
                if (SBYTE7(v130) < 0) {
                  *((void *)&v129 + 1) = v64 + v61;
                }
                else {
                  BYTE7(v130) = v74 & 0x7F;
                }
                double v68 = (char *)v69 + v74;
LABEL_161:
                unsigned char *v68 = 0;
                LOBYTE(v56) = BYTE7(v130);
                uint64_t v57 = *((void *)&v129 + 1);
                char v55 = v131;
                goto LABEL_162;
              }
              BYTE7(v130) = 22;
              unint64_t v62 = 22;
              double v58 = &v129;
            }
            double v68 = (char *)v58 + v62;
            goto LABEL_161;
          }
          break;
        }
        double v87 = XmlNode::Attribute((const xmlNode **)v147, (const xmlChar *)"usesplines");
        if (v87) {
          BOOL v88 = strncmp((const char *)v87, "yes", 3uLL) == 0;
        }
        else {
          BOOL v88 = 0;
        }
        objc_msgSend(obj, "setUseSplines:", v88, v105);
        if ([obj cameraPathsCount])
        {
          double v89 = *(id **)(*(void *)(a1 + 48) + 8);
          if (!v89) {
LABEL_249:
          }
            abort();
          while (1)
          {
            while (1)
            {
              unint64_t v90 = (unint64_t)v89[4];
              if (v146 >= v90) {
                break;
              }
              double v89 = (id *)*v89;
              if (!v89) {
                goto LABEL_249;
              }
            }
            if (v90 >= v146) {
              break;
            }
            double v89 = (id *)v89[1];
            if (!v89) {
              goto LABEL_249;
            }
          }
          objc_storeStrong(v89 + 5, obj);
        }
        if (SHIBYTE(v134) < 0) {
          operator delete((void *)v133);
        }

        *(void *)&__dst[0] = v115;
        *(void *)((char *)__dst + *((void *)v115 - 3)) = v116;
        *(void *)&__dst[1] = v109;
        if (SHIBYTE(v138) < 0) {
          operator delete((void *)v137);
        }
        std::streambuf::~streambuf();
        std::istream::~istream();
        MEMORY[0x1A62391A0](v141);
LABEL_196:
        __p[0] = v110;
        *(void **)((char *)__p + *((void *)v110 - 3)) = v111;
        __p[2] = v112;
        __p[3] = (void *)(MEMORY[0x1E4FBA470] + 16);
        if (v144 < 0) {
          operator delete(__p[11]);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1A62391A0](&v145);
LABEL_199:
        HIBYTE(v126[0]) = 11;
        strcpy((char *)v125, "flyovertour");
        unint64_t v91 = *(void *)&v147[0];
        if (*(void *)&v147[0])
        {
          while (1)
          {
            unint64_t v91 = *(void *)(v91 + 48);
            if (!v91) {
              break;
            }
            if (v126[0] >= 0) {
              locale = (const xmlChar *)v125;
            }
            else {
              locale = (const xmlChar *)v125[0].__locale_;
            }
            if (v126[0] >= 0) {
              int v93 = HIBYTE(v126[0]);
            }
            else {
              int v93 = (int)v125[1].__locale_;
            }
            if (!xmlStrncmp(*(const xmlChar **)(v91 + 16), locale, v93))
            {
              *(void *)&__dst[0] = v91;
              long long v94 = 0uLL;
              memset((char *)__dst + 8, 0, 40);
              goto LABEL_210;
            }
          }
        }
        unint64_t v91 = 0;
        long long v94 = 0uLL;
        memset(__dst, 0, sizeof(__dst));
LABEL_210:
        __p[0] = (void *)v91;
        *(_OWORD *)&__p[1] = v94;
        *(_OWORD *)&__p[3] = v94;
        __p[5] = 0;
        uint64_t v95 = *(std::__shared_weak_count **)&v147[1];
        *(void *)&v147[1] = 0;
        v147[0] = v91;
        if (v95 && !atomic_fetch_add(&v95->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
        std::vector<std::shared_ptr<unsigned char>>::__assign_with_size[abi:nn180100]<std::shared_ptr<unsigned char>*,std::shared_ptr<unsigned char>*>((uint64_t)&v147[1] + 8, (uint64_t *)__p[3], (uint64_t *)__p[4], ((char *)__p[4] - (char *)__p[3]) >> 4);
        XmlNode::~XmlNode((XmlNode *)__p);
        XmlNode::~XmlNode((XmlNode *)__dst);
        if ((SHIBYTE(v126[0]) & 0x80000000) == 0)
        {
          if (!*(void *)&v147[0]) {
            break;
          }
          goto LABEL_39;
        }
        operator delete(v125[0].__locale_);
      }
      while (*(void *)&v147[0]);
LABEL_32:
      XmlNode::~XmlNode((XmlNode *)v147);
      uint64_t v9 = XmlNode::Attribute((const xmlNode **)v148, (const xmlChar *)"type");
      if (!v9) {
        goto LABEL_234;
      }
      unint64_t v10 = v9;
      size_t v11 = strlen((const char *)v9);
      if (v11 > 0x7FFFFFFFFFFFFFF7) {
        abort();
      }
      unint64_t v12 = (void *)v11;
      if (v11 >= 0x17)
      {
        uint64_t v96 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17) {
          uint64_t v96 = v11 | 7;
        }
        uint64_t v97 = v96 + 1;
        uint64_t v13 = operator new(v96 + 1);
        __p[2] = (void *)(v97 | 0x8000000000000000);
        __p[0] = v13;
        __p[1] = v12;
LABEL_216:
        memmove(v13, v10, (size_t)v12);
        goto LABEL_217;
      }
      HIBYTE(__p[2]) = v11;
      uint64_t v13 = __p;
      if (v11) {
        goto LABEL_216;
      }
LABEL_217:
      BOOL v98 = 0;
      *((unsigned char *)v12 + (void)v13) = 0;
      unint64_t v99 = (void *)HIBYTE(__p[2]);
      if (SHIBYTE(__p[2]) < 0) {
        unint64_t v99 = __p[1];
      }
      if (v99 != (void *)4)
      {
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_223;
        }
LABEL_226:
        if (v98) {
          goto LABEL_227;
        }
        goto LABEL_234;
      }
      unint64_t v100 = (void **)__p[0];
      if (SHIBYTE(__p[2]) >= 0) {
        unint64_t v100 = __p;
      }
      BOOL v98 = *(_DWORD *)v100 == 1920298868;
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
        goto LABEL_226;
      }
LABEL_223:
      operator delete(__p[0]);
      if (v98)
      {
LABEL_227:
        if (!XmlNode::Attribute((const xmlNode **)v148, (const xmlChar *)"source")
          && !XmlNode::Attribute((const xmlNode **)v148, (const xmlChar *)"region", v105))
        {
          if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
            dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
          }
          unint64_t v101 = (id)GEOGetVectorKitVKDefaultLog_log;
          if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl(&dword_1A1780000, v101, OS_LOG_TYPE_ERROR, "Missing tour_region in tour trigger specification", (uint8_t *)__p, 2u);
          }
        }
      }
LABEL_234:
      BYTE7(__dst[1]) = 7;
      strcpy((char *)__dst, "trigger");
      uint64_t v102 = *(void *)&v148[0];
      if (*(void *)&v148[0])
      {
        while (1)
        {
          uint64_t v102 = *(void *)(v102 + 48);
          if (!v102) {
            break;
          }
          if ((SBYTE7(__dst[1]) & 0x80u) == 0) {
            BOOL v103 = (const xmlChar *)__dst;
          }
          else {
            BOOL v103 = *(const xmlChar **)&__dst[0];
          }
          if ((SBYTE7(__dst[1]) & 0x80u) == 0) {
            int v104 = BYTE7(__dst[1]);
          }
          else {
            int v104 = DWORD2(__dst[0]);
          }
          if (!xmlStrncmp(*(const xmlChar **)(v102 + 16), v103, v104))
          {
            __p[0] = (void *)v102;
            memset(&__p[1], 0, 40);
            goto LABEL_245;
          }
        }
      }
      uint64_t v102 = 0;
      memset(__p, 0, 48);
LABEL_245:
      XmlNodeWrapper::operator=((uint64_t *)v148, v102);
      XmlNode::~XmlNode((XmlNode *)__p);
      if (SBYTE7(__dst[1]) < 0) {
        operator delete(*(void **)&__dst[0]);
      }
      uint64_t v3 = *(void *)&v148[0];
    }
    while (*(void *)&v148[0]);
  }
LABEL_247:
  XmlNode::~XmlNode((XmlNode *)v148);
}

void sub_1A2769AF4(_Unwind_Exception *a1)
{
  XmlNode::~XmlNode((XmlNode *)(v1 - 144));
  _Unwind_Resume(a1);
}

void non-virtual thunk to'altitude::FlyoverTour::loadBegin(altitude::FlyoverTour *this)
{
  uint64_t v1 = *((void *)this + 1);
  std::__tree<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>>>::destroy(*(void **)(v1 + 8));
  *(void *)uint64_t v1 = v1 + 8;
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 8) = 0;
}

void non-virtual thunk to'altitude::FlyoverTour::~FlyoverTour(altitude::FlyoverTour *this)
{
  altitude::FlyoverTour::~FlyoverTour((altitude::FlyoverTour *)((char *)this - 40));
  JUMPOUT(0x1A6239270);
}

{
  altitude::FlyoverTour::~FlyoverTour((altitude::FlyoverTour *)((char *)this - 40));
}

void altitude::FlyoverTour::~FlyoverTour(altitude::FlyoverTour *this)
{
  *(void *)this = &unk_1EF568620;
  uint64_t v2 = (char *)this + 40;
  *((void *)this + 5) = &unk_1EF568660;
  uint64_t v3 = *((void *)this + 7);
  if (v3)
  {
    char v10 = 8;
    strcpy((char *)v9, "triggers");
    altitude::ManifestManager::unregisterListener(v3, v9, (unint64_t)v2);
  }
  *((void *)this + 7) = 0;
  uint64_t v4 = *((void *)this + 10);
  if (v4)
  {
    int v5 = *(md::AnimationData **)(v4 + 8);
    if (v5)
    {
      md::AnimationData::~AnimationData(v5);
      MEMORY[0x1A6239270]();
    }

    MEMORY[0x1A6239270](v4, 0x10E0C402FD04164);
  }
  uint64_t v6 = (altitude::FlyoverTour *)*((void *)this + 22);
  if (v6 == (altitude::FlyoverTour *)((char *)this + 152))
  {
    (*(void (**)(char *))(*((void *)this + 19) + 32))((char *)this + 152);
  }
  else if (v6)
  {
    (*(void (**)(altitude::FlyoverTour *))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = (altitude::FlyoverTour *)*((void *)this + 18);
  if (v7 == (altitude::FlyoverTour *)((char *)this + 120))
  {
    (*(void (**)(char *))(*((void *)this + 15) + 32))((char *)this + 120);
  }
  else if (v7)
  {
    (*(void (**)(altitude::FlyoverTour *))(*(void *)v7 + 40))(v7);
  }
  uint64_t v8 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v8)
  {
    std::__tree<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>>>::destroy(*(void **)(v8 + 8));
    MEMORY[0x1A6239270](v8, 0x1020C4062D53EE8);
  }
  *(void *)this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  altitude::FlyoverTour::~FlyoverTour(this);
  JUMPOUT(0x1A6239270);
}

void altitude::FlyoverTour::loadBegin(altitude::FlyoverTour *this)
{
  uint64_t v1 = *((void *)this + 6);
  std::__tree<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,GEOPDFlyover const* {__strong}>>>::destroy(*(void **)(v1 + 8));
  *(void *)uint64_t v1 = v1 + 8;
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 8) = 0;
}

double altitude::AnimationData::interpolateFrames(altitude::AnimationData *this, double a2, uint64_t a3, unsigned int a4)
{
  *(int64x2_t *)this = vdupq_n_s64(0xC00921FB54442D18);
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 6) = 0;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  if (v6 > a4 + 1) {
    unsigned int v7 = a4 + 1;
  }
  else {
    unsigned int v7 = v6 - 1;
  }
  uint64_t v8 = a4;
  if (v7 == a4)
  {
    LODWORD(a2) = 1.0;
  }
  else
  {
    a2 = (a2 / *(double *)(a3 + 144) - *(double *)(*(void *)(a3 + 72) + 8 * a4))
       / (*(double *)(*(void *)(a3 + 72) + 8 * v7) - *(double *)(*(void *)(a3 + 72) + 8 * a4));
    *(float *)&a2 = a2;
  }
  [*(id *)(*(void *)(a3 + 96) + 24 * a4 + 8) _solveForInput:a2];
  double v10 = v9;
  if (*(unsigned char *)(a3 + 152))
  {
    double v11 = *(double *)(*(void *)(a3 + 72) + 8 * v8)
        + (*(double *)(*(void *)(a3 + 72) + 8 * v7) - *(double *)(*(void *)(a3 + 72) + 8 * v8)) * v10;
    double v12 = altitude::interpolateSpline(a3, (char **)(a3 + 72), v11).n128_f64[0];
    long double v14 = v13;
    long double v16 = v15;
    *(void *)&double v17 = altitude::interpolateSpline(a3 + 48, (char **)(a3 + 72), v11).n128_u64[0];
    double v19 = v18;
    double v21 = v20;
    *(void *)&double v48 = altitude::interpolateSpline(a3 + 24, (char **)(a3 + 72), v11).n128_u64[0];
    double v22 = sqrt(v12 * v12 + v14 * v14);
    double v23 = atan2(v16, v22 * 0.996647189);
    double v24 = atan2(v14, v12);
    __double2 v25 = __sincos_stret(v23);
    double v26 = atan2(v16 + v25.__sinval * v25.__sinval * 42841.3115 * v25.__sinval, v22 + v25.__cosval * v25.__cosval * -42697.6727 * v25.__cosval);
    __double2 v27 = __sincos_stret(v26);
    double v28 = v22 / v27.__cosval + -6378137.0 / sqrt(v27.__sinval * v27.__sinval * -0.00669437999 + 1.0);
  }
  else
  {
    uint64_t v29 = 24 * v8;
    double v30 = (double *)(*(void *)a3 + v29);
    double v31 = *v30;
    uint64_t v32 = (double *)(*(void *)a3 + 24 * v7);
    long double v33 = fmod(3.14159265 - *v30 + *v32, 6.28318531);
    long double v34 = fmod(v33 + 6.28318531, 6.28318531);
    long double v35 = fmod(v31 + 3.14159265 + (v34 + -3.14159265) * v10, 6.28318531);
    double v26 = fmod(v35 + 6.28318531, 6.28318531) + -3.14159265;
    double v36 = v30[1];
    long double v37 = fmod(3.14159265 - v36 + v32[1], 6.28318531);
    long double v38 = fmod(v37 + 6.28318531, 6.28318531);
    long double v39 = fmod(v36 + 3.14159265 + (v38 + -3.14159265) * v10, 6.28318531);
    double v24 = fmod(v39 + 6.28318531, 6.28318531) + -3.14159265;
    double v28 = v30[2] + (v32[2] - v30[2]) * v10;
    double v48 = *(double *)(*(void *)(a3 + 24) + v29)
        + (*(double *)(*(void *)(a3 + 24) + 24 * v7) - *(double *)(*(void *)(a3 + 24) + v29)) * v10;
    uint64_t v40 = *(void *)(a3 + 48);
    uint64_t v41 = v40 + v29;
    double v42 = *(double *)(v40 + v29);
    size_t v43 = (double *)(v40 + 24 * v7);
    long double v44 = fmod(3.14159265 - v42 + *v43, 6.28318531);
    long double v45 = fmod(v44 + 6.28318531, 6.28318531);
    long double v46 = fmod(v42 + 3.14159265 + (v45 + -3.14159265) * v10, 6.28318531);
    double v17 = fmod(v46 + 6.28318531, 6.28318531) + -3.14159265;
    double v19 = *(double *)(v41 + 8) + (v43[1] - *(double *)(v41 + 8)) * v10;
    double v21 = *(double *)(v41 + 16) + (v43[2] - *(double *)(v41 + 16)) * v10;
  }
  *(double *)this = v26;
  *((double *)this + 1) = v24;
  double result = v48;
  *((double *)this + 2) = v28;
  *((double *)this + 3) = v48;
  *((double *)this + 4) = v19;
  *((double *)this + 5) = v17;
  *((double *)this + 6) = v21;
  return result;
}

_DWORD *altitude::FlyoverTour::stopTour(_DWORD *this)
{
  if (this[29] != 2)
  {
    uint64_t v1 = this;
    this[29] = 2;
    uint64_t v2 = *((void *)this + 23);
    if (v2) {
      *(void *)(v2 + 264) = 0;
    }
    this = (_DWORD *)*((void *)this + 18);
    if (this)
    {
      uint64_t v3 = v1 + 30;
      uint64_t v4 = *((void *)v1 + 10);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5) {
          double v6 = *(double *)(v5 + 144);
        }
        else {
          double v6 = 0.0;
        }
        if (v6 > *((float *)v1 + 22)) {
          int v7 = 3;
        }
        else {
          int v7 = 5;
        }
      }
      else
      {
        int v7 = 5;
      }
      int v9 = v7;
      (*(void (**)(_DWORD *, int *))(*(void *)this + 48))(this, &v9);
      uint64_t v8 = (_DWORD *)*((void *)v1 + 18);
      *((void *)v1 + 18) = 0;
      if (v8 == v3)
      {
        (*(void (**)(_DWORD *))(*(void *)v3 + 32))(v1 + 30);
      }
      else if (v8)
      {
        (*(void (**)(_DWORD *))(*(void *)v8 + 40))(v8);
      }
      this = (_DWORD *)*((void *)v1 + 22);
      *((void *)v1 + 22) = 0;
      if (this == v1 + 38)
      {
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*((void *)v1 + 19) + 32))(v1 + 38);
      }
      else if (this)
      {
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)this + 40))(this);
      }
    }
  }
  return this;
}

__n128 altitude::interpolateSpline(uint64_t a1, char **a2, double a3)
{
  double v228 = &unk_1EF56A200;
  long long v234 = 0u;
  long long v235 = 0u;
  long long v236 = 0u;
  long long v237 = 0u;
  long long v238 = 0u;
  uint64_t v242 = 0;
  float64x2_t v241 = 0uLL;
  __int16 v239 = 256;
  char v240 = 1;
  float32x4_t v229 = (double *)operator new(0x18uLL);
  unint64_t v230 = v229;
  uint64_t v231 = v229 + 3;
  uint64_t v232 = (char *)operator new(0x48uLL);
  unint64_t v233 = v232;
  *(void *)&long long v234 = v232 + 72;
  if (&v232 != (char **)a1) {
    std::vector<gm::Matrix<double,3,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,3,1>*,gm::Matrix<double,3,1>*>((uint64_t)&v232, *(void *)a1, *(char **)(a1 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3));
  }
  char v240 = 1;
  if (&v229 != (double **)a2) {
    std::vector<gdc::Entity>::__assign_with_size[abi:nn180100]<gdc::Entity*,gdc::Entity*>(&v229, *a2, a2[1], (a2[1] - *a2) >> 3);
  }
  char v240 = 0;
  unint64_t v6 = (unint64_t)((char *)v230 - (char *)v229) >> 3;
  int v7 = -1431655765 * ((unint64_t)(v233 - v232) >> 3);
  if ((int)v6 >= v7) {
    *(void *)&float64_t v8 = v7;
  }
  else {
    *(void *)&float64_t v8 = v6;
  }
  uint64_t v222 = (LODWORD(v8) - 2);
  if (SLODWORD(v8) < 2) {
    goto LABEL_300;
  }
  unint64_t v9 = (LODWORD(v8) - 1);
  double v10 = (float64x2_t *)operator new(24 * v9);
  double v11 = (float64x2_t *)operator new(8 * v9);
  double v12 = (char *)v10 + 24 * v9;
  uint64_t v13 = 1;
  long double v14 = v10;
  double v15 = (double *)v11;
  unint64_t v224 = v9;
  long double v16 = &v11->f64[v9];
  v227.f64[0] = v8;
  do
  {
    double v18 = (float64x2_t *)&v232[24 * v13];
    float64x2_t v19 = vsubq_f64(*v18, *(float64x2_t *)((char *)v18 - 24));
    double v20 = v18[1].f64[0] - v18[-1].f64[1];
    if (v14 >= (float64x2_t *)v12)
    {
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)v10) >> 3) + 1;
      if (v21 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      if (0x5555555555555556 * ((v12 - (char *)v10) >> 3) > v21) {
        unint64_t v21 = 0x5555555555555556 * ((v12 - (char *)v10) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v12 - (char *)v10) >> 3) >= 0x555555555555555) {
        unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v22 = v21;
      }
      float64x2_t v225 = v19;
      if (v22)
      {
        if (v22 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_320;
        }
        double v23 = (char *)operator new(24 * v22);
        float64x2_t v19 = v225;
      }
      else
      {
        double v23 = 0;
      }
      double v24 = (float64x2_t *)&v23[8 * (((char *)v14 - (char *)v10) >> 3)];
      *double v24 = v19;
      v24[1].f64[0] = v20;
      if (v14 == v10)
      {
        double v26 = &v23[8 * (((char *)v14 - (char *)v10) >> 3)];
      }
      else
      {
        __double2 v25 = &v23[8 * (((char *)v14 - (char *)v10) >> 3)];
        do
        {
          double v26 = v25 - 24;
          long long v27 = *(long long *)((char *)&v14[-2] + 8);
          *((void *)v25 - 1) = *(void *)&v14[-1].f64[1];
          *(_OWORD *)(v25 - 24) = v27;
          long double v14 = (float64x2_t *)((char *)v14 - 24);
          v25 -= 24;
        }
        while (v14 != v10);
      }
      double v12 = &v23[24 * v22];
      long double v14 = (float64x2_t *)((char *)v24 + 24);
      if (v10)
      {
        operator delete(v10);
        float64x2_t v19 = v225;
      }
      double v10 = (float64x2_t *)v26;
      float64_t v8 = v227.f64[0];
    }
    else
    {
      *long double v14 = v19;
      v14[1].f64[0] = v20;
      long double v14 = (float64x2_t *)((char *)v14 + 24);
    }
    double v28 = sqrt(vaddvq_f64(vmulq_f64(v19, v19)) + v20 * v20);
    if (v15 < v16)
    {
      *double v15 = v28;
      double v17 = v15 + 1;
      goto LABEL_11;
    }
    int64_t v29 = (char *)v15 - (char *)v11;
    uint64_t v30 = ((char *)v15 - (char *)v11) >> 3;
    unint64_t v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 61) {
      abort();
    }
    if (((char *)v16 - (char *)v11) >> 2 > v31) {
      unint64_t v31 = ((char *)v16 - (char *)v11) >> 2;
    }
    if ((unint64_t)((char *)v16 - (char *)v11) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v32 = v31;
    }
    if (v32)
    {
      if (v32 >> 61) {
LABEL_320:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      long double v33 = operator new(8 * v32);
    }
    else
    {
      long double v33 = 0;
    }
    long double v34 = (double *)&v33[8 * v30];
    *long double v34 = v28;
    double v17 = v34 + 1;
    if (v15 != (double *)v11)
    {
      unint64_t v35 = (char *)(v15 - 1) - (char *)v11;
      if (v35 >= 0x168)
      {
        if (&v33[v29 - 8 - (v35 & 0xFFFFFFFFFFFFFFF8)] > &v33[v29 - 8])
        {
          double v36 = v15;
        }
        else if ((double *)((char *)v15 - (v35 & 0xFFFFFFFFFFFFFFF8) - 8) > v15 - 1)
        {
          double v36 = v15;
        }
        else if ((unint64_t)((char *)v11 - v33) >= 0x20)
        {
          uint64_t v38 = (v35 >> 3) + 1;
          double v36 = &v15[-(v38 & 0x3FFFFFFFFFFFFFFCLL)];
          long double v39 = &v33[v29 - 16];
          uint64_t v40 = v15 - 2;
          uint64_t v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v42 = *(_OWORD *)v40;
            *(v39 - 1) = *((_OWORD *)v40 - 1);
            *long double v39 = v42;
            v39 -= 2;
            v40 -= 4;
            v41 -= 4;
          }
          while (v41);
          v34 -= v38 & 0x3FFFFFFFFFFFFFFCLL;
          if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_47;
          }
        }
        else
        {
          double v36 = v15;
        }
      }
      else
      {
        double v36 = v15;
      }
      do
      {
        uint64_t v37 = *((void *)v36-- - 1);
        *((void *)v34-- - 1) = v37;
      }
      while (v36 != (double *)v11);
    }
LABEL_47:
    long double v16 = (double *)&v33[8 * v32];
    if (v11) {
      operator delete(v11);
    }
    double v11 = (float64x2_t *)v34;
    float64_t v8 = v227.f64[0];
LABEL_11:
    ++v13;
    double v15 = v17;
  }
  while (v13 != *(void *)&v8);
  int v226 = HIBYTE(v239);
  if (HIBYTE(v239))
  {
    if (LODWORD(v8) > 4)
    {
      unint64_t v47 = (*(void *)&v8 - 1) & 0xFFFFFFFFFFFFFFFCLL;
      double v48 = v11 + 1;
      float64x2_t v49 = 0uLL;
      unint64_t v50 = v47;
      float64x2_t v51 = 0uLL;
      do
      {
        float64x2_t v49 = vaddq_f64(v48[-1], v49);
        float64x2_t v51 = vaddq_f64(*v48, v51);
        v48 += 2;
        v50 -= 4;
      }
      while (v50);
      double v43 = vaddvq_f64(vaddq_f64(v51, v49));
      unint64_t v45 = v224;
      if (*(void *)&v8 - 1 != v47)
      {
        uint64_t v44 = v47 | 1;
        goto LABEL_68;
      }
    }
    else
    {
      double v43 = 0.0;
      uint64_t v44 = 1;
      unint64_t v45 = v224;
LABEL_68:
      uint64_t v52 = *(void *)&v8 - v44;
      uint64_t v53 = &v11->f64[v44 - 1];
      do
      {
        double v54 = *v53++;
        double v43 = v54 + v43;
        --v52;
      }
      while (v52);
    }
    double v46 = v43 / (double)(int)v45;
  }
  else
  {
    double v46 = 0.0;
    unint64_t v45 = v224;
  }
  unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v238 - *((void *)&v237 + 1)) >> 3);
  if (*(void *)&v8 <= v55)
  {
    if (*(void *)&v8 < v55) {
      *(void *)&long long v238 = *((void *)&v237 + 1) + 24 * LODWORD(v8);
    }
  }
  else
  {
    std::vector<gm::Matrix<double,3,1>>::__append((void **)&v237 + 1, *(void *)&v8 - v55);
  }
  unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v236 + 1) - v236) >> 3);
  if (*(void *)&v8 <= v56)
  {
    if (*(void *)&v8 < v56) {
      *((void *)&v236 + 1) = v236 + 24 * LODWORD(v8);
    }
  }
  else
  {
    std::vector<gm::Matrix<double,3,1>>::__append((void **)&v236, *(void *)&v8 - v56);
  }
  int v57 = v239;
  double v58 = (float64x2_t *)operator new(24 * *(void *)&v8);
  double v59 = v58;
  unint64_t v60 = (char *)v58 + 24 * LODWORD(v8);
  size_t v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v235 - *((void *)&v234 + 1)) >> 3);
  if (v61 == 0xAAAAAAAAAAAAAAABLL * ((v233 - v232) >> 3))
  {
    if (v226)
    {
      uint64_t v62 = 0;
      unint64_t v63 = (double *)v58;
      while (1)
      {
        double v65 = (double *)(*((void *)&v234 + 1) + 24 * v62);
        double v66 = *v65;
        double v67 = v65[1];
        double v68 = v65[2];
        float v69 = sqrt(v66 * v66 + v67 * v67 + v68 * v68);
        double v70 = v69;
        if (v70 <= 1.0e-20) {
          double v70 = 1.0;
        }
        double v71 = v46 / v70;
        double v72 = v71 * v66;
        double v73 = v71 * v67;
        double v74 = v71 * v68;
        if (v63 < (double *)v60)
        {
          *unint64_t v63 = v72;
          v63[1] = v73;
          size_t v64 = v63 + 3;
          v63[2] = v74;
        }
        else
        {
          unint64_t v75 = 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (char *)v59) >> 3) + 1;
          if (v75 > 0xAAAAAAAAAAAAAAALL) {
            abort();
          }
          if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v75) {
            unint64_t v75 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555) {
            unint64_t v76 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v76 = v75;
          }
          if (v76)
          {
            if (v76 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_320;
            }
            uint64_t v77 = (char *)operator new(24 * v76);
          }
          else
          {
            uint64_t v77 = 0;
          }
          uint64_t v78 = (double *)&v77[8 * (((char *)v63 - (char *)v59) >> 3)];
          unint64_t v60 = &v77[24 * v76];
          *uint64_t v78 = v72;
          v78[1] = v73;
          v78[2] = v74;
          size_t v64 = v78 + 3;
          if (v63 == (double *)v59) {
            goto LABEL_100;
          }
          do
          {
            long long v79 = *(_OWORD *)(v63 - 3);
            *(v78 - 1) = *(v63 - 1);
            *(_OWORD *)(v78 - 3) = v79;
            v78 -= 3;
            v63 -= 3;
          }
          while (v63 != (double *)v59);
          if (v59) {
LABEL_100:
          }
            operator delete(v59);
          double v59 = (float64x2_t *)v78;
        }
        ++v62;
        unint64_t v63 = v64;
        if (v62 == *(void *)&v227.f64[0]) {
          goto LABEL_278;
        }
      }
    }
    uint64_t v167 = 0;
    double v168 = v58;
    do
    {
      uint64_t v171 = *((void *)&v234 + 1) + 24 * v167;
      if (v168 < (float64x2_t *)v60)
      {
        float64x2_t v169 = *(float64x2_t *)v171;
        v168[1].f64[0] = *(float64_t *)(v171 + 16);
        *double v168 = v169;
        double v170 = (float64x2_t *)((char *)v168 + 24);
      }
      else
      {
        unint64_t v172 = 0xAAAAAAAAAAAAAAABLL * (((char *)v168 - (char *)v59) >> 3) + 1;
        if (v172 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v172) {
          unint64_t v172 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555) {
          unint64_t v173 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v173 = v172;
        }
        if (v173)
        {
          if (v173 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_320;
          }
          double v174 = (char *)operator new(24 * v173);
        }
        else
        {
          double v174 = 0;
        }
        double v175 = &v174[8 * (((char *)v168 - (char *)v59) >> 3)];
        float64x2_t v176 = *(float64x2_t *)v171;
        unint64_t v60 = &v174[24 * v173];
        *((void *)v175 + 2) = *(void *)(v171 + 16);
        *(float64x2_t *)double v175 = v176;
        double v170 = (float64x2_t *)(v175 + 24);
        if (v168 == v59) {
          goto LABEL_276;
        }
        do
        {
          long long v177 = *(long long *)((char *)&v168[-2] + 8);
          *((void *)v175 - 1) = *(void *)&v168[-1].f64[1];
          *(_OWORD *)(v175 - 24) = v177;
          v175 -= 24;
          double v168 = (float64x2_t *)((char *)v168 - 24);
        }
        while (v168 != v59);
        if (v59) {
LABEL_276:
        }
          operator delete(v59);
        double v59 = (float64x2_t *)v175;
      }
      ++v167;
      double v168 = v170;
    }
    while (v167 != *(void *)&v227.f64[0]);
LABEL_278:
    double v162 = (float64x2_t *)v236;
    double v163 = (float64x2_t *)*((void *)&v237 + 1);
    float64_t v8 = v227.f64[0];
    unint64_t v45 = v224;
    double v164 = &qword_1A28FC000;
    goto LABEL_279;
  }
  float32x4_t v243 = 0;
  float32x4_t v244 = 0;
  uint64_t v245 = 0;
  if ((void)v235 - *((void *)&v234 + 1) == 48) {
    std::vector<gm::Matrix<double,3,1>>::__assign_with_size[abi:nn180100]<gm::Matrix<double,3,1>*,gm::Matrix<double,3,1>*>((uint64_t)&v243, *((unint64_t *)&v234 + 1), (char *)v235, v61);
  }
  BOOL v80 = 0;
  if (SLODWORD(v8) >= 3 && v57)
  {
    uint64_t v81 = &v232[24 * v45];
    uint64_t v82 = *(void *)v81;
    uint64_t v83 = *((void *)v81 + 1);
    uint64_t v84 = *((void *)v81 + 2);
    BOOL v80 = *(void *)v232 == v82 && *((void *)v232 + 1) == v83 && *((void *)v232 + 2) == v84;
  }
  unint64_t v87 = 0;
  if (v243 != v244) {
    BOOL v80 = 1;
  }
  BOOL v218 = v80;
  float64x2_t v223 = (float64x2_t)vdupq_n_s64(0x3BC79CA10C924223uLL);
  BOOL v88 = (double *)v59;
  while (2)
  {
    if (v87 || (uint64_t v118 = v243, v243 == v244))
    {
      if (v87 == v45 && v243 != v244)
      {
        if (v226)
        {
          unint64_t v90 = &v232[24 * v45];
          unint64_t v91 = &v232[24 * v222];
          float64x2_t v92 = vsubq_f64(*(float64x2_t *)(v90 + 8), *(float64x2_t *)(v91 + 8));
          float64x2_t v93 = vmulq_f64(v92, v92);
          double v94 = v243[3];
          double v95 = v243[5];
          v96.f64[0] = v243[4];
          v96.f64[1] = *(double *)v90 - *(double *)v91;
          float64x2_t v97 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v93.f64[0], 0);
          v97.f64[0] = v94 * v94;
          v93.f64[0] = v95 * v95;
          float64x2_t v98 = vcvtq_f64_f32(vcvt_f32_f64(vsqrtq_f64(vaddq_f64(vmlaq_f64(v97, v96, v96), v93))));
          int32x2_t v99 = vmovn_s64(vcgtq_f64(v98, v223));
          double v100 = v98.f64[1];
          if ((v99.i8[4] & 1) == 0) {
            double v100 = 1.0;
          }
          if ((v99.i8[0] & 1) == 0) {
            v98.f64[0] = 1.0;
          }
          double v101 = v100 / v98.f64[0];
          double v102 = v101 * v94;
          double v103 = v101 * v243[4];
          double v104 = v101 * v95;
          if (v88 >= (double *)v60)
          {
            unint64_t v105 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v59) >> 3) + 1;
            if (v105 > 0xAAAAAAAAAAAAAAALL) {
              abort();
            }
            if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v105) {
              unint64_t v105 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555) {
              unint64_t v106 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v106 = v105;
            }
            if (v106)
            {
              if (v106 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_320;
              }
              uint64_t v107 = (char *)operator new(24 * v106);
            }
            else
            {
              uint64_t v107 = 0;
            }
            double v151 = (double *)&v107[8 * (((char *)v88 - (char *)v59) >> 3)];
            unint64_t v60 = &v107[24 * v106];
            double *v151 = v102;
            v151[1] = v103;
            v151[2] = v104;
            double v89 = v151 + 3;
            if (v88 != (double *)v59)
            {
              unint64_t v45 = v224;
              do
              {
                long long v155 = *(_OWORD *)(v88 - 3);
                *(v151 - 1) = *(v88 - 1);
                *(_OWORD *)(v151 - 3) = v155;
                v151 -= 3;
                v88 -= 3;
              }
              while (v88 != (double *)v59);
              goto LABEL_236;
            }
            goto LABEL_238;
          }
LABEL_118:
          *BOOL v88 = v102;
          v88[1] = v103;
          double v89 = v88 + 3;
          v88[2] = v104;
          goto LABEL_119;
        }
        uint64_t v118 = v243 + 3;
        if (v88 < (double *)v60)
        {
LABEL_184:
          float64x2_t v141 = *(float64x2_t *)v118;
          v88[2] = v118[2];
          *(float64x2_t *)BOOL v88 = v141;
          double v89 = v88 + 3;
          goto LABEL_119;
        }
        unint64_t v138 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v59) >> 3) + 1;
        if (v138 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_326;
        }
        if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v138) {
          unint64_t v138 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555) {
          unint64_t v139 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v139 = v138;
        }
        if (v139)
        {
          if (v139 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_320;
          }
          int v140 = (char *)operator new(24 * v139);
        }
        else
        {
          int v140 = 0;
        }
        unint64_t v157 = (float64x2_t *)&v140[8 * (((char *)v88 - (char *)v59) >> 3)];
        float64x2_t v158 = *(float64x2_t *)v118;
        unint64_t v60 = &v140[24 * v139];
        v157[1].f64[0] = v118[2];
        *unint64_t v157 = v158;
        double v89 = &v157[1].f64[1];
        if (v88 != (double *)v59)
        {
          float64_t v8 = v227.f64[0];
          do
          {
            float64x2_t v159 = *(float64x2_t *)(v88 - 3);
            v157[-1].f64[1] = *(v88 - 1);
            *(float64x2_t *)((char *)v157 - 24) = v159;
            unint64_t v157 = (float64x2_t *)((char *)v157 - 24);
            v88 -= 3;
          }
          while (v88 != (double *)v59);
          goto LABEL_250;
        }
        goto LABEL_252;
      }
      if (v87)
      {
        unint64_t v108 = v87 - 1;
        if (v87 < v45)
        {
          double v109 = v11->f64[v108];
          double v110 = v11->f64[v87];
          double v111 = 1.0 / (v110 + v109);
          if (fabs(v110 + v109) <= 1.0e-20) {
            double v111 = 0.0;
          }
          double v112 = (float64x2_t *)((char *)v10 + 24 * v108);
          double v113 = v111 * v110;
          double v114 = (float64x2_t *)((char *)v10 + 24 * v87);
          double v115 = v111 * v109;
          float64x2_t v116 = vmlaq_n_f64(vmulq_n_f64(*v112, v113), *v114, v115);
          double v117 = v113 * v112[1].f64[0] + v114[1].f64[0] * v115;
          if (v88 >= (double *)v60)
          {
            unint64_t v142 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v59) >> 3) + 1;
            if (v142 > 0xAAAAAAAAAAAAAAALL) {
              abort();
            }
            if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v142) {
              unint64_t v142 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555) {
              unint64_t v143 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v143 = v142;
            }
            if (v143)
            {
              float64x2_t v220 = v116;
              if (v143 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_320;
              }
              char v144 = (char *)operator new(24 * v143);
              float64x2_t v116 = v220;
            }
            else
            {
              char v144 = 0;
            }
            double v151 = (double *)&v144[8 * (((char *)v88 - (char *)v59) >> 3)];
            unint64_t v60 = &v144[24 * v143];
            *(float64x2_t *)double v151 = v116;
            v151[2] = v117;
            double v89 = v151 + 3;
            if (v88 != (double *)v59)
            {
              unint64_t v45 = v224;
              do
              {
                long long v153 = *(_OWORD *)(v88 - 3);
                *(v151 - 1) = *(v88 - 1);
                *(_OWORD *)(v151 - 3) = v153;
                v151 -= 3;
                v88 -= 3;
              }
              while (v88 != (double *)v59);
              goto LABEL_236;
            }
            goto LABEL_238;
          }
          *(float64x2_t *)BOOL v88 = v116;
LABEL_172:
          v88[2] = v117;
          double v89 = v88 + 3;
          goto LABEL_119;
        }
        double v136 = (float64x2_t *)&v232[24 * v87];
        long long v137 = (float64x2_t *)&v232[24 * v108];
        float64x2_t v132 = vsubq_f64(*v136, *v137);
        double v117 = v136[1].f64[0] - v137[1].f64[0];
        if (v88 >= (double *)v60)
        {
          unint64_t v145 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v59) >> 3) + 1;
          if (v145 > 0xAAAAAAAAAAAAAAALL) {
            abort();
          }
          if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v145) {
            unint64_t v145 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555) {
            unint64_t v146 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v146 = v145;
          }
          if (v146)
          {
            float64x2_t v221 = v132;
            if (v146 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_320;
            }
            double v147 = (char *)operator new(24 * v146);
            float64x2_t v132 = v221;
          }
          else
          {
            double v147 = 0;
          }
          double v151 = (double *)&v147[8 * (((char *)v88 - (char *)v59) >> 3)];
          unint64_t v60 = &v147[24 * v146];
          *(float64x2_t *)double v151 = v132;
          v151[2] = v117;
          double v89 = v151 + 3;
          if (v88 != (double *)v59)
          {
            unint64_t v45 = v224;
            do
            {
              long long v154 = *(_OWORD *)(v88 - 3);
              *(v151 - 1) = *(v88 - 1);
              *(_OWORD *)(v151 - 3) = v154;
              v151 -= 3;
              v88 -= 3;
            }
            while (v88 != (double *)v59);
            goto LABEL_236;
          }
          goto LABEL_238;
        }
      }
      else
      {
        float64x2_t v132 = vsubq_f64(*(float64x2_t *)(v232 + 24), *(float64x2_t *)v232);
        double v117 = *((double *)v232 + 5) - *((double *)v232 + 2);
        if (v88 >= (double *)v60)
        {
          unint64_t v133 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v59) >> 3) + 1;
          if (v133 > 0xAAAAAAAAAAAAAAALL) {
            abort();
          }
          if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v133) {
            unint64_t v133 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555) {
            unint64_t v134 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v134 = v133;
          }
          if (v134)
          {
            float64x2_t v219 = v132;
            if (v134 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_320;
            }
            double v135 = (char *)operator new(24 * v134);
            float64x2_t v132 = v219;
          }
          else
          {
            double v135 = 0;
          }
          double v151 = (double *)&v135[8 * (((char *)v88 - (char *)v59) >> 3)];
          unint64_t v60 = &v135[24 * v134];
          *(float64x2_t *)double v151 = v132;
          v151[2] = v117;
          double v89 = v151 + 3;
          if (v88 != (double *)v59)
          {
            unint64_t v45 = v224;
            do
            {
              long long v152 = *(_OWORD *)(v88 - 3);
              *(v151 - 1) = *(v88 - 1);
              *(_OWORD *)(v151 - 3) = v152;
              v151 -= 3;
              v88 -= 3;
            }
            while (v88 != (double *)v59);
            goto LABEL_236;
          }
          goto LABEL_238;
        }
      }
      *(float64x2_t *)BOOL v88 = v132;
      goto LABEL_172;
    }
    if (v226)
    {
      float64x2_t v119 = vsubq_f64(*(float64x2_t *)(v232 + 8), *((float64x2_t *)v232 + 2));
      float64x2_t v120 = vmulq_f64(v119, v119);
      double v121 = *v243;
      double v122 = v243[2];
      v123.f64[0] = v243[1];
      v123.f64[1] = *(double *)v232 - *((double *)v232 + 3);
      float64x2_t v124 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v120.f64[0], 0);
      v124.f64[0] = v121 * v121;
      v120.f64[0] = v122 * v122;
      float64x2_t v125 = vcvtq_f64_f32(vcvt_f32_f64(vsqrtq_f64(vaddq_f64(vmlaq_f64(v124, v123, v123), v120))));
      int32x2_t v126 = vmovn_s64(vcgtq_f64(v125, v223));
      double v127 = v125.f64[1];
      if ((v126.i8[4] & 1) == 0) {
        double v127 = 1.0;
      }
      if ((v126.i8[0] & 1) == 0) {
        v125.f64[0] = 1.0;
      }
      double v128 = v127 / v125.f64[0];
      double v102 = v128 * v121;
      double v103 = v128 * v243[1];
      double v104 = v128 * v122;
      if (v88 >= (double *)v60)
      {
        unint64_t v129 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v59) >> 3) + 1;
        if (v129 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v129) {
          unint64_t v129 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555) {
          unint64_t v130 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v130 = v129;
        }
        if (v130)
        {
          if (v130 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_320;
          }
          int v131 = (char *)operator new(24 * v130);
        }
        else
        {
          int v131 = 0;
        }
        double v151 = (double *)&v131[8 * (((char *)v88 - (char *)v59) >> 3)];
        unint64_t v60 = &v131[24 * v130];
        double *v151 = v102;
        v151[1] = v103;
        v151[2] = v104;
        double v89 = v151 + 3;
        if (v88 != (double *)v59)
        {
          unint64_t v45 = v224;
          do
          {
            long long v156 = *(_OWORD *)(v88 - 3);
            *(v151 - 1) = *(v88 - 1);
            *(_OWORD *)(v151 - 3) = v156;
            v151 -= 3;
            v88 -= 3;
          }
          while (v88 != (double *)v59);
LABEL_236:
          if (!v59)
          {
LABEL_240:
            double v59 = (float64x2_t *)v151;
            goto LABEL_119;
          }
LABEL_239:
          operator delete(v59);
          goto LABEL_240;
        }
LABEL_238:
        unint64_t v45 = v224;
        goto LABEL_239;
      }
      goto LABEL_118;
    }
    if (v88 < (double *)v60) {
      goto LABEL_184;
    }
    unint64_t v148 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (char *)v59) >> 3) + 1;
    if (v148 > 0xAAAAAAAAAAAAAAALL) {
LABEL_326:
    }
      abort();
    if (0x5555555555555556 * ((v60 - (char *)v59) >> 3) > v148) {
      unint64_t v148 = 0x5555555555555556 * ((v60 - (char *)v59) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((v60 - (char *)v59) >> 3) >= 0x555555555555555) {
      unint64_t v149 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v149 = v148;
    }
    if (v149)
    {
      if (v149 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_320;
      }
      double v150 = (char *)operator new(24 * v149);
    }
    else
    {
      double v150 = 0;
    }
    unint64_t v157 = (float64x2_t *)&v150[8 * (((char *)v88 - (char *)v59) >> 3)];
    float64x2_t v160 = *(float64x2_t *)v118;
    unint64_t v60 = &v150[24 * v149];
    v157[1].f64[0] = v118[2];
    *unint64_t v157 = v160;
    double v89 = &v157[1].f64[1];
    if (v88 == (double *)v59)
    {
LABEL_252:
      float64_t v8 = v227.f64[0];
LABEL_253:
      operator delete(v59);
      goto LABEL_254;
    }
    float64_t v8 = v227.f64[0];
    do
    {
      float64x2_t v161 = *(float64x2_t *)(v88 - 3);
      v157[-1].f64[1] = *(v88 - 1);
      *(float64x2_t *)((char *)v157 - 24) = v161;
      unint64_t v157 = (float64x2_t *)((char *)v157 - 24);
      v88 -= 3;
    }
    while (v88 != (double *)v59);
LABEL_250:
    if (v59) {
      goto LABEL_253;
    }
LABEL_254:
    double v59 = v157;
    unint64_t v45 = v224;
LABEL_119:
    ++v87;
    BOOL v88 = v89;
    if (v87 != *(void *)&v8) {
      continue;
    }
    break;
  }
  if (v243) {
    operator delete(v243);
  }
  double v162 = (float64x2_t *)v236;
  double v163 = (float64x2_t *)*((void *)&v237 + 1);
  double v164 = &qword_1A28FC000;
  if (v218)
  {
LABEL_279:
    double v178 = v229[v222];
    double v179 = v229[1] + 1.0 - v178;
    if (v179 <= *((double *)v164 + 136)) {
      double v166 = 0.0;
    }
    else {
      double v166 = (1.0 - v178 + *v229 + 1.0 - v178 + *v229) / v179;
    }
    char v165 = 1;
    goto LABEL_283;
  }
  char v165 = 0;
  double v166 = 0.0;
LABEL_283:
  unint64_t v180 = 0;
  uint64_t v181 = 0;
  float64_t v182 = v59[1].f64[0] * v166;
  *double v162 = vmulq_n_f64(*v59, v166);
  v162[1].f64[0] = v182;
  float64_t v183 = v59[1].f64[0] * v166;
  *double v163 = vmulq_n_f64(*v59, v166);
  v163[1].f64[0] = v183;
  unint64_t v184 = 1;
  double v185 = v229;
  char v186 = v165 ^ 1;
  double v187 = *((double *)v164 + 136);
  do
  {
    unint64_t v192 = v184 + 1;
    double v193 = 0.0;
    if (v45 == v184) {
      char v194 = v186;
    }
    else {
      char v194 = 0;
    }
    if ((v194 & 1) == 0)
    {
      uint64_t v195 = (v184 + 1);
      double v193 = 0.0;
      if (v184 >= v45) {
        double v196 = 1.0;
      }
      else {
        double v196 = 0.0;
      }
      if (v184 >= v45) {
        uint64_t v195 = 1;
      }
      double v197 = *(double *)((char *)v185 + (v181 >> 29));
      double v198 = v196 + v185[v195] - v197;
      if (v198 > v187) {
        double v193 = (v185[v184] - v197 + v185[v184] - v197) / v198;
      }
    }
    float64_t v188 = v59[2].f64[v180 / 8 + 1] * v193;
    uint64_t v189 = (char *)v162 + v180;
    *(float64x2_t *)(v189 + 24) = vmulq_n_f64(*(float64x2_t *)((char *)v59 + v180 + 24), v193);
    *((float64_t *)v189 + 5) = v188;
    float64_t v190 = v59[2].f64[v180 / 8 + 1] * v193;
    double v191 = (char *)v163 + v180;
    *(float64x2_t *)(v191 + 24) = vmulq_n_f64(*(float64x2_t *)((char *)v59 + v180 + 24), v193);
    *((float64_t *)v191 + 5) = v190;
    v181 += 0x100000000;
    v180 += 24;
    ++v184;
  }
  while (*(void *)&v8 != v192);
  operator delete(v59);
  if (v11) {
    operator delete(v11);
  }
  if (v10) {
    operator delete(v10);
  }
LABEL_300:
  if (v230 - v229 >= 0xAAAAAAAAAAAAAAABLL * ((v233 - v232) >> 3)) {
    uint64_t v199 = 0xAAAAAAAAAAAAAAABLL * ((v233 - v232) >> 3);
  }
  else {
    uint64_t v199 = v230 - v229;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v236 + 1) - v236) >> 3) == v199
    && v199
    && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v238 - *((void *)&v237 + 1)) >> 3) == v199)
  {
    uint64_t v202 = 0;
    while (v229[v202] <= a3)
    {
      if (v199 == ++v202)
      {
        uint64_t v202 = v199;
        break;
      }
    }
    if (v202)
    {
      if (v202 == v199)
      {
        float64x2_t v227 = *(float64x2_t *)&v232[24 * v199 - 24];
      }
      else
      {
        uint64_t v203 = v202 - 1;
        double v204 = v229[v202 - 1];
        double v205 = v229[v202] - v204;
        double v206 = 0.0;
        if (v205 != 0.0) {
          double v206 = (a3 - v204) / v205;
        }
        uint64_t v207 = 24 * v203;
        uint64_t v208 = (float64x2_t *)&v232[24 * v203];
        uint64_t v209 = 24 * v202;
        float32x4_t v210 = (float64x2_t *)(v236 + v207);
        __asm { FMOV            V17.2D, #2.0 }
        float64x2_t v215 = vmlaq_f64(v241, _Q17, *v208);
        __asm
        {
          FMOV            V17.2D, #-3.0
          FMOV            V4.2D, #3.0
        }
        float64x2_t v227 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*v208, *v210, v206), vaddq_f64(vaddq_f64(*(float64x2_t *)(*((void *)&v237 + 1) + v209), *v210), vsubq_f64(v215, vaddq_f64(*(float64x2_t *)&v232[v209], *(float64x2_t *)&v232[v209]))), v206 * v206 * v206), vsubq_f64(vsubq_f64(vmlaq_f64(vmlaq_f64(v241, _Q17, *v208), _Q4, *(float64x2_t *)&v232[v209]), vaddq_f64(*v210, *v210)), *(float64x2_t *)(*((void *)&v237 + 1) + v209)), v206 * v206);
      }
    }
    else
    {
      float64x2_t v227 = *(float64x2_t *)v232;
    }
  }
  altitude::SplineInterpolator<gm::Matrix<double,3,1>>::~SplineInterpolator(&v228);
  return (__n128)v227;
}

void sub_1A276BB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v30 = *(void **)(v28 - 176);
  if (v30)
  {
    operator delete(v30);
    if (!v27)
    {
LABEL_3:
      if (!v25) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if (!v27)
  {
    goto LABEL_3;
  }
  operator delete(v27);
  if (!v25)
  {
LABEL_4:
    if (!v26)
    {
LABEL_10:
      altitude::SplineInterpolator<gm::Matrix<double,3,1>>::~SplineInterpolator(&a23);
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(v26);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(v25);
  if (!v26) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void *altitude::SplineInterpolator<gm::Matrix<double,3,1>>::~SplineInterpolator(void *a1)
{
  *a1 = &unk_1EF56A200;
  uint64_t v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[4];
  if (v5)
  {
    a1[5] = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)a1[1];
  if (v6)
  {
    a1[2] = v6;
    operator delete(v6);
  }
  return a1;
}

void altitude::SplineInterpolator<gm::Matrix<double,3,1>>::~SplineInterpolator(void *a1)
{
  altitude::SplineInterpolator<gm::Matrix<double,3,1>>::~SplineInterpolator(a1);
  JUMPOUT(0x1A6239270);
}

char *std::vector<altitude::AnimationData::LabelEntry>::__push_back_slow_path<altitude::AnimationData::LabelEntry const&>(char **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = (v3 - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    abort();
  }
  uint64_t v8 = a1[2] - v2;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 59) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    double v10 = (char *)operator new(32 * v9);
  }
  else
  {
    double v10 = 0;
  }
  double v11 = &v10[32 * v4];
  double v20 = v11;
  unint64_t v21 = v11;
  unint64_t v22 = &v10[32 * v9];
  *(void *)double v11 = *(void *)a2;
  double v12 = (std::string *)(v11 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
    uint64_t v2 = *a1;
    uint64_t v3 = a1[1];
    double v11 = v20;
    uint64_t v13 = v21;
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 8);
    *((void *)v11 + 3) = *(void *)(a2 + 24);
    uint64_t v13 = v11;
  }
  long double v14 = v13 + 32;
  if (v3 == v2)
  {
    double v17 = v2;
  }
  else
  {
    do
    {
      uint64_t v15 = *((void *)v3 - 4);
      v3 -= 32;
      *((void *)v11 - 4) = v15;
      v11 -= 32;
      long long v16 = *(_OWORD *)(v3 + 8);
      *((void *)v11 + 3) = *((void *)v3 + 3);
      *(_OWORD *)(v11 + 8) = v16;
      *((void *)v3 + 2) = 0;
      *((void *)v3 + 3) = 0;
      *((void *)v3 + 1) = 0;
    }
    while (v3 != v2);
    double v17 = *a1;
    uint64_t v2 = a1[1];
    long double v14 = v13 + 32;
  }
  *a1 = v11;
  a1[1] = v14;
  a1[2] = v22;
  if (v2 == v17)
  {
    if (v2) {
LABEL_20:
    }
      operator delete(v2);
  }
  else
  {
    do
    {
      float64x2_t v19 = v2 - 32;
      if (*(v2 - 1) < 0) {
        operator delete(*((void **)v2 - 3));
      }
      v2 -= 32;
    }
    while (v19 != v17);
    uint64_t v2 = v17;
    if (v17) {
      goto LABEL_20;
    }
  }
  return v14;
}

void sub_1A276BED0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<md::AnimationData::LabelEntry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void altitude::FlyoverTour::checkLoading(uint64_t a1, long long *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4) {
    return;
  }
  (*(void (**)(void *__return_ptr))(*(void *)v4 + 104))(&v22);
  int Status = karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v22);
  if ((Status & 3) == 0)
  {
    if (Status == 4
      && (double v11 = v25,
          pthread_mutex_lock(v25[19]),
          int v12 = *((_DWORD *)v11 + 40),
          pthread_mutex_unlock(v11[19]),
          (v12 & 1) != 0)
      && (uint64_t v13 = (*(uint64_t (**)(pthread_mutex_t **))&(*v25)->__opaque[48])(v25)) != 0)
    {
      uint64_t v14 = v13;
      id v15 = objc_alloc(MEMORY[0x1E4F1C9B8]);
      long long v16 = (void *)[v15 initWithBytes:v14 length:(*(uint64_t (**)(pthread_mutex_t **))&(*v25)->__opaque[40])(v25)];
      if (v16) {
        double v17 = (void *)[objc_alloc(MEMORY[0x1E4F647D0]) initWithData:v16];
      }
      else {
        double v17 = 0;
      }
    }
    else
    {
      double v17 = 0;
    }
    id v18 = v17;
    id v27 = v18;
    uint64_t v19 = a3[3];
    if (!v19)
    {
      std::__throw_bad_function_call[abi:nn180100]();
      __break(1u);
      return;
    }
    (*(void (**)(uint64_t, id *))(*(void *)v19 + 48))(v19, &v27);

    goto LABEL_20;
  }
  uint64_t v8 = **(id **)(*(void *)(*(void *)(a1 + 184) + 856) + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3321888768;
  long long v9 = a2[1];
  long long v31 = *a2;
  block[2] = ___ZNK8altitude11FlyoverTour12checkLoadingENS_7TileKeyENSt3__18functionIFvPK12GEOPDFlyoverEEE_block_invoke;
  block[3] = &__block_descriptor_104_ea8_40c42_ZTSNSt3__18functionIFvPK12GEOPDFlyoverEEE72c24_ZTSKN8altitude7TileKeyE_e5_v8__0l;
  block[4] = a1;
  long long v32 = v9;
  uint64_t v10 = a3[3];
  if (!v10) {
    goto LABEL_6;
  }
  if ((void *)v10 != a3)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
LABEL_6:
    uint64_t v30 = (void *)v10;
    goto LABEL_16;
  }
  uint64_t v30 = v29;
  (*(void (**)(void *, void *))(*a3 + 24))(a3, v29);
LABEL_16:
  dispatch_async(v8, block);

  if (v30 == v29)
  {
    (*(void (**)(void *))(v29[0] + 32))(v29);
  }
  else if (v30)
  {
    (*(void (**)(void))(*v30 + 40))();
  }
LABEL_20:
  unint64_t v22 = off_1EF5676C0;
  double v20 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  unint64_t v22 = off_1EF5677B0;
  if (v23) {
    atomic_fetch_add((atomic_uint *volatile)(v23 + 128), 0xFFFFFFFF);
  }
  unint64_t v21 = v24;
  if (v24)
  {
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1A276C2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  karo::AsyncFileLoader::FileObject::~FileObject((karo::AsyncFileLoader::FileObject *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK8altitude11FlyoverTour12checkLoadingENS_7TileKeyENSt3__18functionIFvPK12GEOPDFlyoverEEE_block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a1 + 88);
  v9[0] = *(_OWORD *)(a1 + 72);
  v9[1] = v3;
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4)
  {
    if (v4 == a1 + 40)
    {
      double v11 = v10;
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 24))(v4, v10);
    }
    else
    {
      double v11 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    double v11 = 0;
  }
  altitude::FlyoverTour::checkLoading(v2, v9, v10);
  uint64_t result = (uint64_t)v11;
  if (v11 == v10) {
    return (*(uint64_t (**)(void *))(v10[0] + 32))(v10);
  }
  if (v11) {
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v11 + 40))(v11, v5, v6, v7);
  }
  return result;
}

void sub_1A276C48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::function<void ()(GEOPDFlyover const*)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_ea8_40c42_ZTSNSt3__18functionIFvPK12GEOPDFlyoverEEE72(uint64_t a1)
{
  uint64_t v1 = a1 + 40;
  uint64_t result = *(void *)(a1 + 64);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

__n128 __copy_helper_block_ea8_40c42_ZTSNSt3__18functionIFvPK12GEOPDFlyoverEEE72c24_ZTSKN8altitude7TileKeyE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 64);
  if (v4)
  {
    if (v4 == a2 + 40)
    {
      *(void *)(a1 + 64) = a1 + 40;
      (*(void (**)(void))(**(void **)(a2 + 64) + 24))(*(void *)(a2 + 64));
    }
    else
    {
      *(void *)(a1 + 64) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    *(void *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  __n128 result = *(__n128 *)(a2 + 88);
  *(__n128 *)(a1 + 88) = result;
  return result;
}

uint64_t altitude::FlyoverTour::loadTourAnimation(unsigned long long,std::function<void ()(GEOPDFlyover const*)>)const::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

void std::__function::__func<altitude::FlyoverTour::loadTourAnimation(unsigned long long,std::function<void ()(GEOPDFlyover const*)>)::$_0,std::allocator<altitude::FlyoverTour::loadTourAnimation(unsigned long long,std::function<void ()(GEOPDFlyover const*)>)::$_0>,void ()(GEOPDFlyover const*)>::operator()(void *a1, id *a2)
{
  id v3 = *a2;
  id v4 = *a2;
  uint64_t v5 = *(id **)(*(void *)(a1[1] + 48) + 8);
  if (!v5) {
LABEL_7:
  }
    abort();
  unint64_t v6 = a1[2];
  while (1)
  {
    while (1)
    {
      unint64_t v7 = (unint64_t)v5[4];
      if (v6 >= v7) {
        break;
      }
      uint64_t v5 = (id *)*v5;
      if (!v5) {
        goto LABEL_7;
      }
    }
    if (v7 >= v6) {
      break;
    }
    uint64_t v5 = (id *)v5[1];
    if (!v5) {
      goto LABEL_7;
    }
  }
  objc_storeStrong(v5 + 5, v3);
  id v8 = v4;
  id v10 = v8;
  uint64_t v9 = a1[6];
  if (v9)
  {
    (*(void (**)(uint64_t, id *))(*(void *)v9 + 48))(v9, &v10);
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
}

void sub_1A276C714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<altitude::FlyoverTour::loadTourAnimation(unsigned long long,std::function<void ()(GEOPDFlyover const*)>)::$_0,std::allocator<altitude::FlyoverTour::loadTourAnimation(unsigned long long,std::function<void ()(GEOPDFlyover const*)>)::$_0>,void ()(GEOPDFlyover const*)>::destroy_deallocate(char *__p)
{
  uint64_t v2 = __p + 24;
  id v3 = (char *)*((void *)__p + 6);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  operator delete(__p);
}

uint64_t std::__function::__func<altitude::FlyoverTour::loadTourAnimation(unsigned long long,std::function<void ()(GEOPDFlyover const*)>)::$_0,std::allocator<altitude::FlyoverTour::loadTourAnimation(unsigned long long,std::function<void ()(GEOPDFlyover const*)>)::$_0>,void ()(GEOPDFlyover const*)>::destroy(uint64_t a1)
{
  uint64_t v1 = a1 + 24;
  uint64_t result = *(void *)(a1 + 48);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t std::__function::__func<altitude::FlyoverTour::loadTourAnimation(unsigned long long,std::function<void ()(GEOPDFlyover const*)>)::$_0,std::allocator<altitude::FlyoverTour::loadTourAnimation(unsigned long long,std::function<void ()(GEOPDFlyover const*)>)::$_0>,void ()(GEOPDFlyover const*)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57DFC8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v3 = *(void *)(result + 48);
  if (v3)
  {
    if (v3 == result + 24)
    {
      *(void *)(a2 + 48) = a2 + 24;
      id v4 = *(uint64_t (**)(void))(**(void **)(result + 48) + 24);
      return v4();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v3 + 16))(*(void *)(result + 48));
      *(void *)(a2 + 48) = result;
    }
  }
  else
  {
    *(void *)(a2 + 48) = 0;
  }
  return result;
}

char *std::__function::__func<altitude::FlyoverTour::loadTourAnimation(unsigned long long,std::function<void ()(GEOPDFlyover const*)>)::$_0,std::allocator<altitude::FlyoverTour::loadTourAnimation(unsigned long long,std::function<void ()(GEOPDFlyover const*)>)::$_0>,void ()(GEOPDFlyover const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_1EF57DFC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    if (v3 == a1 + 24)
    {
      *((void *)v2 + 6) = v2 + 24;
      (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
      return v2;
    }
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  *((void *)v2 + 6) = v3;
  return v2;
}

void sub_1A276C9C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<altitude::FlyoverTour::loadTourAnimation(unsigned long long,std::function<void ()(GEOPDFlyover const*)>)::$_0,std::allocator<altitude::FlyoverTour::loadTourAnimation(unsigned long long,std::function<void ()(GEOPDFlyover const*)>)::$_0>,void ()(GEOPDFlyover const*)>::~__func(void *a1)
{
  *a1 = &unk_1EF57DFC8;
  uint64_t v1 = a1 + 3;
  uint64_t v2 = (void *)a1[6];
  if (v2 == v1)
  {
    (*(void (**)(void *))(*v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<altitude::FlyoverTour::loadTourAnimation(unsigned long long,std::function<void ()(GEOPDFlyover const*)>)::$_0,std::allocator<altitude::FlyoverTour::loadTourAnimation(unsigned long long,std::function<void ()(GEOPDFlyover const*)>)::$_0>,void ()(GEOPDFlyover const*)>::~__func(void *a1)
{
  *a1 = &unk_1EF57DFC8;
  uint64_t v2 = a1 + 3;
  uint64_t v3 = (void *)a1[6];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

void ggl::DaVinci::GroundPipelineState::~GroundPipelineState(ggl::DaVinci::GroundPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  id v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  id v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void ggl::DaVinci::GroundPipelineSetup::~GroundPipelineSetup(ggl::DaVinci::GroundPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::DaVinci::GroundNonCompressedPipelineState::~GroundNonCompressedPipelineState(ggl::DaVinci::GroundNonCompressedPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  id v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  id v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::DaVinci::GroundNonCompressedPipelineSetup::textureIsEnabled(ggl::DaVinci::GroundNonCompressedPipelineSetup *this, uint64_t a2)
{
  BOOL result = 1;
  switch(a2)
  {
    case 0:
    case 2:
    case 3:
      return result;
    case 1:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 309);
      goto LABEL_11;
    case 4:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 315);
      goto LABEL_11;
    case 5:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 327);
      goto LABEL_11;
    case 6:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 324);
      goto LABEL_11;
    case 7:
    case 8:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 314);
      goto LABEL_11;
    case 9:
    case 10:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 338);
      goto LABEL_11;
    case 11:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 310);
      goto LABEL_11;
    case 12:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 311);
LABEL_11:
      BOOL result = v4 != 0;
      break;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

BOOL ggl::DaVinci::GroundNonCompressedPipelineSetup::constantDataIsEnabled(ggl::DaVinci::GroundNonCompressedPipelineSetup *this, uint64_t a2)
{
  BOOL result = 1;
  switch(a2)
  {
    case 0:
    case 1:
    case 3:
    case 5:
    case 8:
    case 10:
    case 13:
    case 28:
      return result;
    case 2:
    case 18:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 309);
      goto LABEL_20;
    case 4:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 329);
      goto LABEL_20;
    case 6:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 330);
      goto LABEL_20;
    case 7:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 331);
      goto LABEL_20;
    case 9:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 335);
      goto LABEL_20;
    case 11:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 336);
      goto LABEL_20;
    case 12:
    case 21:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 326);
      goto LABEL_20;
    case 14:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 317);
      goto LABEL_20;
    case 15:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 318);
      goto LABEL_20;
    case 16:
    case 25:
    case 26:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 324);
      goto LABEL_20;
    case 17:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 343);
      goto LABEL_20;
    case 19:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 327);
      goto LABEL_20;
    case 20:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 320);
      goto LABEL_20;
    case 22:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 310);
      goto LABEL_20;
    case 23:
    case 24:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 311);
      goto LABEL_20;
    case 27:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 325);
      goto LABEL_20;
    case 29:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 315);
LABEL_20:
      BOOL result = v4 != 0;
      break;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

void ggl::DaVinci::GroundNonCompressedPipelineSetup::~GroundNonCompressedPipelineSetup(ggl::DaVinci::GroundNonCompressedPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void *md::SkyRenderLayer::layout(md::SkyRenderLayer *this, const md::LayoutContext *a2)
{
  uint64_t v152 = *MEMORY[0x1E4F143B8];
  v148[0] = &unk_1EF570D10;
  v148[1] = a2;
  v146[0] = &unk_1EF570D58;
  v146[1] = a2;
  double v147 = v146;
  double v151 = v150;
  unint64_t v149 = v148;
  v150[0] = &unk_1EF570D58;
  v150[1] = a2;
  std::__function::__func<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()((uint64_t)v148);
  if (v147 == v146)
  {
    (*(void (**)(void *))(v146[0] + 32))(v146);
  }
  else if (v147)
  {
    (*(void (**)(void *))(*v147 + 40))(v147);
  }
  if (v149 == v148)
  {
    (*(void (**)(void *))(v148[0] + 32))(v148);
  }
  else if (v149)
  {
    (*(void (**)(void *))(*v149 + 40))(v149);
  }
  int v4 = (uint64_t *)*((void *)a2 + 1);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_133;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    uint64_t v7 = 0x7C7EC6C7C111B0D0;
    if (*(void *)&v5 <= 0x7C7EC6C7C111B0D0uLL) {
      uint64_t v7 = 0x7C7EC6C7C111B0D0uLL % *(void *)&v5;
    }
  }
  else
  {
    uint64_t v7 = (*(void *)&v5 - 1) & 0x7C7EC6C7C111B0D0;
  }
  uint64_t v8 = *v4;
  uint64_t v9 = *(void **)(*v4 + 8 * v7);
  if (!v9) {
    goto LABEL_133;
  }
  id v10 = (void *)*v9;
  if (!*v9) {
    goto LABEL_133;
  }
  uint64_t v11 = *(void *)&v5 - 1;
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v12 = v10[1];
      if (v12 == 0x7C7EC6C7C111B0D0)
      {
        if (v10[2] == 0x7C7EC6C7C111B0D0) {
          goto LABEL_30;
        }
      }
      else if ((v12 & v11) != v7)
      {
        goto LABEL_133;
      }
      id v10 = (void *)*v10;
      if (!v10) {
        goto LABEL_133;
      }
    }
  }
  while (1)
  {
    unint64_t v13 = v10[1];
    if (v13 == 0x7C7EC6C7C111B0D0) {
      break;
    }
    if (v13 >= *(void *)&v5) {
      v13 %= *(void *)&v5;
    }
    if (v13 != v7) {
      goto LABEL_133;
    }
LABEL_24:
    id v10 = (void *)*v10;
    if (!v10) {
      goto LABEL_133;
    }
  }
  if (v10[2] != 0x7C7EC6C7C111B0D0) {
    goto LABEL_24;
  }
LABEL_30:
  uint64_t v14 = v10[5];
  if (*(void *)(v14 + 8) != 0x7C7EC6C7C111B0D0) {
    goto LABEL_133;
  }
  uint64_t v15 = *(void *)(v14 + 32);
  if (!v15) {
    goto LABEL_133;
  }
  if (v6.u32[0] > 1uLL)
  {
    uint64_t v16 = 0x3070CB6B3C7F21D3;
    if (*(void *)&v5 <= 0x3070CB6B3C7F21D3uLL) {
      uint64_t v16 = 0x3070CB6B3C7F21D3uLL % *(void *)&v5;
    }
  }
  else
  {
    uint64_t v16 = v11 & 0x3070CB6B3C7F21D3;
  }
  double v17 = *(void **)(v8 + 8 * v16);
  if (!v17) {
    goto LABEL_133;
  }
  id v18 = (void *)*v17;
  if (!v18) {
    goto LABEL_133;
  }
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v19 = v18[1];
      if (v19 == 0x3070CB6B3C7F21D3)
      {
        if (v18[2] == 0x3070CB6B3C7F21D3) {
          goto LABEL_52;
        }
      }
      else if ((v19 & v11) != v16)
      {
        goto LABEL_133;
      }
      id v18 = (void *)*v18;
      if (!v18) {
        goto LABEL_133;
      }
    }
  }
  while (2)
  {
    unint64_t v20 = v18[1];
    if (v20 != 0x3070CB6B3C7F21D3)
    {
      if (v20 >= *(void *)&v5) {
        v20 %= *(void *)&v5;
      }
      if (v20 != v16) {
        goto LABEL_133;
      }
      goto LABEL_46;
    }
    if (v18[2] != 0x3070CB6B3C7F21D3)
    {
LABEL_46:
      id v18 = (void *)*v18;
      if (!v18) {
        goto LABEL_133;
      }
      continue;
    }
    break;
  }
LABEL_52:
  uint64_t v21 = v18[5];
  if (*(void *)(v21 + 8) != 0x3070CB6B3C7F21D3) {
    goto LABEL_133;
  }
  uint64_t v22 = *(void *)(v21 + 32);
  if (!v22) {
    goto LABEL_133;
  }
  if (v6.u32[0] > 1uLL)
  {
    uint64_t v23 = 0x1AF456233693CD46;
    if (*(void *)&v5 <= 0x1AF456233693CD46uLL) {
      uint64_t v23 = 0x1AF456233693CD46uLL % *(void *)&v5;
    }
  }
  else
  {
    uint64_t v23 = v11 & 0x1AF456233693CD46;
  }
  double v24 = *(void **)(v8 + 8 * v23);
  if (!v24) {
    goto LABEL_76;
  }
  __double2 v25 = (void *)*v24;
  if (!v25) {
    goto LABEL_76;
  }
  if (v6.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v26 = v25[1];
      if (v26 == 0x1AF456233693CD46)
      {
        if (v25[2] == 0x1AF456233693CD46) {
          goto LABEL_74;
        }
      }
      else if ((v26 & v11) != v23)
      {
        goto LABEL_76;
      }
      __double2 v25 = (void *)*v25;
      if (!v25) {
        goto LABEL_76;
      }
    }
  }
  while (2)
  {
    unint64_t v27 = v25[1];
    if (v27 != 0x1AF456233693CD46)
    {
      if (v27 >= *(void *)&v5) {
        v27 %= *(void *)&v5;
      }
      if (v27 != v23) {
        goto LABEL_76;
      }
      goto LABEL_68;
    }
    if (v25[2] != 0x1AF456233693CD46)
    {
LABEL_68:
      __double2 v25 = (void *)*v25;
      if (!v25) {
        goto LABEL_76;
      }
      continue;
    }
    break;
  }
LABEL_74:
  uint64_t v28 = v25[5];
  if (*(void *)(v28 + 8) == 0x1AF456233693CD46)
  {
    int64_t v29 = *(double **)(v28 + 32);
    goto LABEL_77;
  }
LABEL_76:
  int64_t v29 = 0;
LABEL_77:
  float v30 = v29[380];
  uint64_t v31 = *((void *)this + 6);
  *(float *)uint64_t v31 = v30;
  long long v32 = *(void **)(*(void *)(*((void *)this + 5) + 24) + 8);
  uint64_t v33 = md::PassList::commandBufferForId(v32, *((unsigned char *)this + 56), *((unsigned char *)this + 57));
  uint64_t v34 = md::PassList::commandBufferForId(v32, *((unsigned char *)this + 58), *((unsigned char *)this + 59));
  int v35 = *(unsigned __int8 *)(v15 + 32);
  if (v30 < 1.0)
  {
    if (!*(void *)(v31 + 8))
    {
      double v36 = operator new(0xE8uLL);
      v36[1] = 0;
      v36[2] = 0;
      *double v36 = &unk_1EF586C68;
      uint64_t v37 = v36 + 3;
      uint64_t v38 = v36;
      ggl::BufferData::BufferData((uint64_t)(v36 + 3), qword_1E9565DA0, 2, 1, 6, 1);
      v38[28] = ggl::Sky::Style::reflection(void)::reflection;
      v38[3] = &unk_1EF55E178;
      uint64_t v39 = *((void *)this + 6);
      uint64_t v40 = *(atomic_ullong **)(v39 + 16);
      *(void *)(v39 + 8) = v37;
      *(void *)(v39 + 16) = v38;
      if (v40 && !atomic_fetch_add(v40 + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v41 = (std::__shared_weak_count *)v40;
        (*(void (**)(atomic_ullong *))(*v40 + 16))(v40);
        std::__shared_weak_count::__release_weak(v41);
      }
      uint64_t v42 = *((void *)this + 6);
      double v43 = operator new(0x100uLL);
      uint64_t v44 = (uint64_t *)(v42 + 8);
      v43[1] = 0;
      v43[2] = 0;
      *double v43 = &unk_1EF588CC8;
      unint64_t v45 = v43 + 3;
      uint64_t v46 = *(void *)(v42 + 40);
      unint64_t v47 = *(std::__shared_weak_count **)(v42 + 48);
      double v48 = v43;
      ggl::Sky::SkyPipelineSetup::SkyPipelineSetup(v43 + 3, v46, v47, v44);
      uint64_t v49 = *((void *)this + 6);
      unint64_t v50 = *(atomic_ullong **)(v49 + 32);
      *(void *)(v49 + 24) = v45;
      *(void *)(v49 + 32) = v48;
      if (v50 && !atomic_fetch_add(v50 + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        float64x2_t v51 = (std::__shared_weak_count *)v50;
        (*(void (**)(atomic_ullong *))(*v50 + 16))(v50);
        std::__shared_weak_count::__release_weak(v51);
      }
      uint64_t v52 = operator new(0xA8uLL);
      v52[1] = 0;
      v52[2] = 0;
      *uint64_t v52 = &unk_1EF5830E8;
      uint64_t v53 = v52 + 3;
      double v54 = v52;
      ggl::CommonMesh::Pos2Mesh::Pos2Mesh((ggl::CommonMesh::Pos2Mesh *)(v52 + 3), "/SkyMesh");
      uint64_t v55 = *((void *)this + 6);
      unint64_t v56 = *(atomic_ullong **)(v55 + 64);
      *(void *)(v55 + 56) = v53;
      *(void *)(v55 + 64) = v54;
      if (v56 && !atomic_fetch_add(v56 + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        int v57 = (std::__shared_weak_count *)v56;
        (*(void (**)(atomic_ullong *))(*v56 + 16))(v56);
        std::__shared_weak_count::__release_weak(v57);
      }
      ggl::BufferData::resize(**(ggl::BufferData ***)(*(void *)(*((void *)this + 6) + 56) + 64), 4);
      unint64_t v58 = **(void **)(*(void *)(*((void *)this + 6) + 56) + 64);
      v123.f64[1] = 0.0;
      v122[0] = 0uLL;
      uint64_t v59 = 4 * *(void *)(v58 + 8);
      double v129 = 0.0;
      long long v130 = v58;
      *(void *)&long long v131 = v59;
      WORD4(v131) = 1;
      if (v59) {
        uint64_t v60 = *(void *)(v58 + 72);
      }
      else {
        uint64_t v60 = 0;
      }
      *(void *)&long long v132 = v60;
      ggl::BufferMemory::operator=((uint64_t *)v122, (uint64_t)&v129);
      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v129);
      float64_t v61 = v123.f64[1];
      **(_OWORD **)&v123.f64[1] = xmmword_1A28FCE90;
      *(_OWORD *)(*(void *)&v61 + 16) = xmmword_1A28FD270;
      uint64_t v62 = operator new(0xF8uLL);
      v62[1] = 0;
      _OWORD v62[2] = 0;
      *uint64_t v62 = &unk_1EF583D28;
      unint64_t v63 = v62 + 3;
      size_t v64 = v62;
      ggl::IndexData::IndexData((uint64_t)(v62 + 3), (uint64_t)"/SkyIndexData", 6, 6, 0);
      v64[3] = &unk_1EF55B630;
      v64[28] = &unk_1EF55B650;
      uint64_t v65 = *((void *)this + 6);
      double v66 = *(atomic_ullong **)(v65 + 80);
      *(void *)(v65 + 72) = v63;
      *(void *)(v65 + 80) = v64;
      if (v66 && !atomic_fetch_add(v66 + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        double v67 = (std::__shared_weak_count *)v66;
        (*(void (**)(atomic_ullong *))(*v66 + 16))(v66);
        std::__shared_weak_count::__release_weak(v67);
      }
      unint64_t v68 = *(void *)(*((void *)this + 6) + 72);
      unint64_t v145 = 0;
      uint64_t v140 = 0;
      uint64_t v141 = 0;
      uint64_t v69 = 6 * *(void *)(v68 + 8);
      double v129 = 0.0;
      long long v130 = v68;
      *(void *)&long long v131 = v69;
      WORD4(v131) = 1;
      if (v69) {
        uint64_t v70 = *(void *)(v68 + 72);
      }
      else {
        uint64_t v70 = 0;
      }
      *(void *)&long long v132 = v70;
      ggl::BufferMemory::operator=(&v140, (uint64_t)&v129);
      ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v129);
      double v71 = v145;
      *unint64_t v145 = 0x2000200010000;
      *((_DWORD *)v71 + 2) = 3;
      double v72 = (void *)*((void *)this + 6);
      uint64_t v73 = v72[7];
      uint64_t v74 = v72[9];
      unint64_t v75 = (std::__shared_weak_count *)v72[10];
      if (v75)
      {
        atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v76 = *(atomic_ullong **)(v73 + 104);
      *(void *)(v73 + 96) = v74;
      *(void *)(v73 + 104) = v75;
      if (v76 && !atomic_fetch_add(v76 + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v77 = v75;
        uint64_t v78 = (std::__shared_weak_count *)v76;
        (*(void (**)(atomic_ullong *))(*v76 + 16))(v76);
        std::__shared_weak_count::__release_weak(v78);
        unint64_t v75 = v77;
      }
      if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
      long long v79 = operator new(0xF0uLL);
      v79[1] = 0;
      v79[2] = 0;
      *long long v79 = &unk_1EF583548;
      v79[5] = 0;
      v79[6] = 0;
      *((_DWORD *)v79 + 14) = 0;
      v79[3] = &unk_1EF55A890;
      v79[4] = 0;
      *(void *)((char *)v79 + 60) = 65537;
      *((_DWORD *)v79 + 17) = 0;
      v79[9] = 1;
      *((_WORD *)v79 + 40) = 0;
      *((unsigned char *)v79 + 82) = 3;
      *(void *)((char *)v79 + 91) = 0;
      *(void *)((char *)v79 + 83) = 0;
      *((unsigned char *)v79 + 99) = 0;
      *(void *)((char *)v79 + 156) = 0;
      *(void *)((char *)v79 + 148) = 0;
      *((_WORD *)v79 + 106) = 257;
      v79[27] = 0;
      v79[28] = 0;
      *((unsigned char *)v79 + 232) = 0;
      uint64_t v80 = *((void *)this + 6);
      uint64_t v81 = *(std::__shared_weak_count **)(v80 + 96);
      *(void *)(v80 + 88) = v79 + 3;
      *(void *)(v80 + 96) = v79;
      if (v81 && !atomic_fetch_add(&v81->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
      *(unsigned char *)(*(void *)(*((void *)this + 6) + 88) + 58) = 3;
      operator new();
    }
    ggl::CommandBuffer::pushRenderItem(v33, *(void *)(v31 + 104));
    unint64_t v82 = *(void *)(*((void *)this + 6) + 8);
    v123.f64[1] = 0.0;
    v122[0] = 0uLL;
    uint64_t v83 = *(void *)(v82 + 8);
    double v129 = 0.0;
    long long v130 = v82;
    *(void *)&long long v131 = v83;
    WORD4(v131) = 1;
    if (v83) {
      uint64_t v84 = *(void *)(v82 + 72);
    }
    else {
      uint64_t v84 = 0;
    }
    *(void *)&long long v132 = v84;
    ggl::BufferMemory::operator=((uint64_t *)v122, (uint64_t)&v129);
    ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v129);
    float64_t v85 = v123.f64[1];
    *(_DWORD *)(*(void *)&v123.f64[1] + 32) = *(_DWORD *)v15;
    *(_DWORD *)(*(void *)&v85 + 36) = *(_DWORD *)(v15 + 4);
    *(_DWORD *)(*(void *)&v85 + 40) = *(_DWORD *)(v15 + 8);
    *(_DWORD *)(*(void *)&v85 + 44) = *(_DWORD *)(v15 + 12);
    *(_DWORD *)(*(void *)&v85 + 16) = *(_DWORD *)(v15 + 16);
    *(_DWORD *)(*(void *)&v85 + 20) = *(_DWORD *)(v15 + 20);
    *(_DWORD *)(*(void *)&v85 + 24) = *(_DWORD *)(v15 + 24);
    *(_DWORD *)(*(void *)&v85 + 28) = *(_DWORD *)(v15 + 28);
    id v86 = *(id *)a2;
    [v86 sizeInPixels];
    float v88 = v87;
    *(float *)(*(void *)&v123.f64[1] + 48) = v88;

    float v89 = **((float **)this + 6);
    unint64_t v90 = +[VKDebugSettings sharedSettings];
    [v90 skyOffsetAdjustment];
    **(float **)&v123.f64[1] = v89 - v91;

    ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)v122);
  }
  if (v35)
  {
    if (!*(void *)(*((void *)this + 6) + 112))
    {
      int32x2_t v99 = operator new(0xE8uLL);
      v99[1] = 0;
      v99[2] = 0;
      void *v99 = &unk_1EF586DB8;
      uint64_t v100 = ggl::BufferData::BufferData((uint64_t)(v99 + 3), qword_1E9552208, 2, 1, 6, 1);
      v99[28] = ggl::Tile::View::reflection(void)::reflection;
      v99[3] = &unk_1EF55E258;
      uint64_t v101 = *((void *)this + 6);
      double v102 = *(atomic_ullong **)(v101 + 120);
      *(void *)(v101 + 112) = v100;
      *(void *)(v101 + 120) = v99;
      if (v102)
      {
        if (!atomic_fetch_add(v102 + 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          double v103 = (std::__shared_weak_count *)v102;
          (*(void (**)(atomic_ullong *))(*v102 + 16))(v102);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
    }
    double v92 = v29[366];
    double v93 = v29[367];
    double v94 = v29[368];
    double v95 = v29[369];
    long long v132 = 0u;
    uint64_t v134 = 0;
    long long v130 = 0u;
    long long v131 = 0u;
    long long v133 = 0u;
    uint64_t v136 = 0;
    double v129 = v94 - v92;
    *(double *)&long long v132 = v95 - v93;
    double v135 = v94 - v92;
    double v137 = v92;
    double v138 = v93;
    long long v139 = xmmword_1A28FCCC0;
    gm::operator*<double,4,4,4>(v122[0].f64, v29 + 101, &v129);
    md::FogInfo::updateFogUniformsWithLayoutContext((uint64_t *)(*((void *)this + 6) + 160), (uint64_t)a2, &v129);
    *(void *)(*(void *)(*((void *)this + 6) + 208) + 24) = *(void *)(*((void *)this + 6) + 200);
    float32x4_t v119 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v122[0]), v122[1]);
    float32x4_t v118 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v123), v124);
    float32x4_t v117 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v125), v126);
    float32x4_t v116 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v127), v128);
    uint64_t v96 = *(void *)(*((void *)this + 6) + 112);
    double v121 = 0;
    v120[0] = 0;
    v120[1] = 0;
    uint64_t v97 = *(void *)(v96 + 8);
    uint64_t v140 = 0;
    uint64_t v141 = v96;
    uint64_t v142 = 0;
    uint64_t v143 = v97;
    __int16 v144 = 1;
    if (v97) {
      float64x2_t v98 = *(void **)(v96 + 72);
    }
    else {
      float64x2_t v98 = 0;
    }
    unint64_t v145 = v98;
    ggl::BufferMemory::operator=(v120, (uint64_t)&v140);
    ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)&v140);
    double v104 = v121;
    *double v121 = v119;
    v104[1] = v118;
    v104[2] = v117;
    v104[3] = v116;
    ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)v120);
    ggl::GlobeAtmosphere::BasePipelineSetup::setLightConfigConstantData(*(void *)(*(void *)(*((void *)this + 6) + 192) + 64), *(void *)(*(void *)(*((void *)this + 6) + 192) + 160), *(void *)(*((void *)this + 6) + 112), *(void *)(*((void *)this + 6) + 120));
    unint64_t v105 = (void *)*((void *)this + 6);
    uint64_t v106 = v105[24];
    uint64_t v107 = v105[20];
    unint64_t v108 = (std::__shared_weak_count *)v105[21];
    if (v108)
    {
      atomic_fetch_add_explicit(&v108->__shared_owners_, 1uLL, memory_order_relaxed);
      ggl::GlobeAtmosphere::BasePipelineSetup::setConstantsConstantData(*(void **)(v106 + 64), *(void **)(v106 + 160), v107, (uint64_t)v108);
      if (!atomic_fetch_add(&v108->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
        std::__shared_weak_count::__release_weak(v108);
      }
    }
    else
    {
      ggl::GlobeAtmosphere::BasePipelineSetup::setConstantsConstantData(*(void **)(v106 + 64), *(void **)(v106 + 160), v107, 0);
    }
    uint64_t v109 = v22 + 144;
    uint64_t v110 = 144;
    if (*(unsigned __int8 *)(v22 + 320) - 1 >= 3)
    {
      uint64_t v110 = 128;
      uint64_t v109 = v22 + 128;
    }
    uint64_t v111 = *((void *)this + 6);
    uint64_t v112 = *(void *)(v22 + v110);
    uint64_t v113 = *(void *)(v109 + 8);
    if (v113) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v113 + 8), 1uLL, memory_order_relaxed);
    }
    double v114 = *(std::__shared_weak_count **)(v111 + 184);
    *(void *)(v111 + 176) = v112;
    *(void *)(v111 + 184) = v113;
    if (v114 && !atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
    *(void *)(*(void *)(*((void *)this + 6) + 208) + 64) = *(void *)(*((void *)this + 6) + 176);
    ggl::CommandBuffer::pushRenderItem(v34, *(void *)(*((void *)this + 6) + 208));
  }
LABEL_133:
  if (!v151)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  (*(void (**)(void *))(*v151 + 48))(v151);
  BOOL result = v151;
  if (v151 == v150) {
    return (void *)(*(uint64_t (**)(void *))(v150[0] + 32))(v150);
  }
  if (v151) {
    return (void *)(*(uint64_t (**)(void))(*v151 + 40))();
  }
  return result;
}

void sub_1A276E38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)(v16 - 248));
  ggl::BufferMemory::~BufferMemory((ggl::BufferMemory *)va);
  geo::ScopedFunctions::~ScopedFunctions((geo::ScopedFunctions *)(v16 - 136));
  _Unwind_Resume(a1);
}

void sub_1A276E3F8(_Unwind_Exception *exception_object)
{
}

void sub_1A276E404(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v2 - 112);
  if (v4 == v1)
  {
    (*(void (**)(uint64_t))(*(void *)(v2 - 136) + 32))(v2 - 136);
  }
  else if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  std::function<void ()(void)>::~function((void *)(v2 - 200));
  std::function<void ()(void)>::~function((void *)(v2 - 168));
  _Unwind_Resume(a1);
}

void sub_1A276E484(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 112);
  if (v3 == v1 - 136)
  {
    (*(void (**)(uint64_t))(*(void *)(v1 - 136) + 32))(v1 - 136);
    _Unwind_Resume(exception_object);
  }
  if (!v3) {
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int8x8_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SkyLayout", "", v5, 2u);
  }
}

uint64_t std::__shared_ptr_emplace<ggl::Sky::SkyPipelineSetup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::Sky::SkyPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588CC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::Sky::SkyPipelineSetup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588CC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::Sky::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::Sky::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Sky::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Sky::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586C68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::Sky::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586C68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  uint64_t v2 = (id)GEOGetVectorKitPerformanceLog_log;
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)int8x8_t v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v3, OS_SIGNPOST_INTERVAL_END, v4, "SkyLayout", "", v5, 2u);
  }
}

uint64_t std::__function::__func<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF570D58;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EF570D58;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_1,std::allocator<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_1>,void ()(void)>::~__func()
{
}

uint64_t std::__function::__func<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF570D10;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EF570D10;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_0,std::allocator<md::SkyRenderLayer::layout(md::LayoutContext const&)::$_0>,void ()(void)>::~__func()
{
}

void md::SkyRenderLayer::~SkyRenderLayer(md::SkyRenderLayer *this)
{
  *(void *)this = &unk_1EF534598;
  uint64_t v2 = (md::SkyRenderResources *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2)
  {
    md::SkyRenderResources::~SkyRenderResources(v2);
    MEMORY[0x1A6239270]();
  }
  *(void *)this = &unk_1EF530C60;
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  md::SkyRenderResources *v2;
  void *v3;

  *(void *)this = &unk_1EF534598;
  uint64_t v2 = (md::SkyRenderResources *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2)
  {
    md::SkyRenderResources::~SkyRenderResources(v2);
    MEMORY[0x1A6239270]();
  }
  *(void *)this = &unk_1EF530C60;
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

void md::ARWalkingManeuverLabelFeature::populateStyleQueries(unsigned char *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v63 = 0;
  if ((*(uint64_t (**)(unsigned char *))(*(void *)a1 + 488))(a1)
    && (*(uint64_t (**)(unsigned char *, void))(*(void *)a1 + 480))(a1, 0))
  {
    operator new();
  }
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v6 = (uint64_t)&md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    operator new();
  }
  uint64_t v62 = mdm::Allocator::instance(void)::alloc;
  _ZNSt3__115allocate_sharedB8nn180100I22FeatureStyleAttributesNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v57);
  char v7 = 0;
  uint64_t v8 = 0;
  __int16 v56 = 256;
  do
  {
    char v9 = v7;
    uint64_t v10 = *((unsigned __int8 *)&v56 + v8);
    if (a1[808]) {
      BOOL v11 = 0;
    }
    else {
      BOOL v11 = v10 == 1;
    }
    if (v11) {
      goto LABEL_6;
    }
    uint64_t v60 = v59;
    unint64_t v12 = v6 & 0xFFFFFFFFFFFF0000 | v10;
    uint64_t v6 = v12 | 0x100;
    md::ARWalkingManeuverLabelFeature::attributesForFeature((uint64_t)&v59, v12 | 0x100);
    (*(void (**)(unsigned char *, uint64_t *))(*(void *)a1 + 544))(a1, &v59);
    uint64_t v13 = v57;
    uint64_t v14 = v59;
    if (((v60 - v59) & 0x7FFFFFFF8) != 0)
    {
      uint64_t v15 = 0;
      char v16 = 0;
      uint64_t v17 = ((unint64_t)(v60 - v59) >> 3);
      unsigned __int8 v18 = *(unsigned char *)(v57 + 33);
      while (1)
      {
        size_t v19 = v18;
        unint64_t v20 = *(void **)v13;
        if (v18) {
          break;
        }
LABEL_13:
        v20[v19] = *(void *)(v14 + 8 * v15);
        unsigned __int8 v18 = *(unsigned char *)(v13 + 33) + 1;
        *(unsigned char *)(v13 + 33) = v18;
        ++v15;
        char v16 = 1;
        if (v15 == v17)
        {
          unint64_t v20 = *(void **)v13;
          size_t v19 = v18;
LABEL_30:
          qsort(v20, v19, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
          goto LABEL_31;
        }
      }
      if (v18 > 0x1Fu)
      {
        do
        {
          uint64_t v24 = 0;
          __double2 v25 = (int *)v20;
          while (1)
          {
            int v26 = *v25;
            v25 += 2;
            if (v26 == *(_DWORD *)(v14 + 8 * v15)) {
              break;
            }
            if (v19 == ++v24) {
              goto LABEL_24;
            }
          }
          HIDWORD(v20[v24]) = *(_DWORD *)(v14 + 8 * v15 + 4);
LABEL_24:
          ++v15;
        }
        while (v15 != v17);
      }
      else
      {
        do
        {
          uint64_t v21 = 0;
          uint64_t v22 = (int *)v20;
          while (1)
          {
            int v23 = *v22;
            v22 += 2;
            if (v23 == *(_DWORD *)(v14 + 8 * v15)) {
              break;
            }
            if (v19 == ++v21) {
              goto LABEL_13;
            }
          }
          HIDWORD(v20[v21]) = *(_DWORD *)(v14 + 8 * v15++ + 4);
        }
        while (v15 != v17);
      }
      if (v16) {
        goto LABEL_30;
      }
    }
LABEL_31:
    unint64_t v27 = v58;
    *(void *)&long long v54 = v13;
    *((void *)&v54 + 1) = v58;
    if (v58) {
      atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v28 = v63;
    md::createFeatureAttributeSet((gss::Allocator *)&v64, (uint64_t *)&v54);
    md::LabelStyleCache::styleQueryForFeatureAttributes((uint64_t)&v55, a3, &v64, v28);
    if (v64)
    {
      uint64_t v65 = v64;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v67 + 40))(v67, v64, v66 - v64);
    }
    if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    int64_t v29 = *(void **)(a2 + 8);
    if ((unint64_t)v29 >= *(void *)(a2 + 16))
    {
      uint64_t v31 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(a2, &v55);
    }
    else
    {
      if (v29)
      {
        *int64_t v29 = v55;
        uint64_t v30 = *((void *)&v55 + 1);
        v29[1] = *((void *)&v55 + 1);
        if (v30) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
        }
      }
      uint64_t v31 = v29 + 2;
    }
    *(void *)(a2 + 8) = v31;
    uint64_t v32 = v57;
    uint64_t v33 = *(unsigned __int8 *)(v57 + 33);
    uint64_t v34 = *(int **)v57;
    if (*(unsigned char *)(v57 + 33))
    {
      if (v33 >= 0x20)
      {
        uint64_t v35 = 0;
        uint64_t v39 = *(int **)v57;
        while (1)
        {
          int v40 = *v39;
          v39 += 2;
          if (v40 == 65594) {
            break;
          }
          if (v33 == ++v35) {
            goto LABEL_55;
          }
        }
      }
      else
      {
        uint64_t v35 = 0;
        double v36 = *(int **)v57;
        while (1)
        {
          int v37 = *v36;
          v36 += 2;
          if (v37 == 65594) {
            break;
          }
          if (v33 == ++v35) {
            goto LABEL_49;
          }
        }
      }
      v34[2 * v35 + 1] = 1;
    }
    else
    {
LABEL_49:
      *(void *)&v34[2 * v33] = 0x10001003ALL;
      unsigned __int8 v38 = *(unsigned char *)(v32 + 33) + 1;
      *(unsigned char *)(v32 + 33) = v38;
      qsort(*(void **)v32, v38, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
    }
LABEL_55:
    uint64_t v52 = v32;
    uint64_t v53 = v58;
    if (v58) {
      atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v41 = v63;
    md::createFeatureAttributeSet((gss::Allocator *)&v64, &v52);
    md::LabelStyleCache::styleQueryForFeatureAttributes((uint64_t)&v54, a3, &v64, v41);
    if (v64)
    {
      uint64_t v65 = v64;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v67 + 40))(v67, v64, v66 - v64);
    }
    long long v42 = v54;
    long long v54 = 0uLL;
    double v43 = (std::__shared_weak_count *)*((void *)&v55 + 1);
    long long v55 = v42;
    if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
      uint64_t v44 = (std::__shared_weak_count *)*((void *)&v54 + 1);
      if (*((void *)&v54 + 1))
      {
LABEL_62:
        if (!atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
    }
    else
    {
      uint64_t v44 = (std::__shared_weak_count *)*((void *)&v54 + 1);
      if (*((void *)&v54 + 1)) {
        goto LABEL_62;
      }
    }
    unint64_t v45 = v53;
    if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
    uint64_t v46 = *(void **)(a2 + 8);
    if ((unint64_t)v46 >= *(void *)(a2 + 16))
    {
      double v48 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(a2, &v55);
    }
    else
    {
      if (v46)
      {
        *uint64_t v46 = v55;
        uint64_t v47 = *((void *)&v55 + 1);
        v46[1] = *((void *)&v55 + 1);
        if (v47) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v47 + 8), 1uLL, memory_order_relaxed);
        }
      }
      double v48 = v46 + 2;
    }
    *(void *)(a2 + 8) = v48;
    uint64_t v49 = (std::__shared_weak_count *)*((void *)&v55 + 1);
    if (*((void *)&v55 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v55 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
LABEL_6:
    char v7 = 1;
    uint64_t v8 = 1;
  }
  while ((v9 & 1) == 0);
  unint64_t v50 = v58;
  if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
  if (v59)
  {
    uint64_t v60 = v59;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v62 + 40))(v62, v59, v61 - v59);
  }
  float64x2_t v51 = v63;
  if (v63)
  {
    if (*((char *)v63 + 23) < 0) {
      (*(void (**)(void, void, uint64_t))(*(void *)v63[3] + 40))(v63[3], *v63, v63[2] & 0x7FFFFFFFFFFFFFFFLL);
    }
    MEMORY[0x1A6239270](v51, 0x1032C402ED93987);
  }
}

void sub_1A276F388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x1A6239270](v14, 0x1032C402ED93987);
  std::unique_ptr<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t md::ARWalkingManeuverLabelFeature::attributesForFeature(uint64_t result, __int16 a2)
{
  uint64_t v3 = result;
  os_signpost_id_t v4 = *(void **)(result + 8);
  unint64_t v5 = *(void *)(result + 16);
  if ((unint64_t)v4 < v5)
  {
    if (v4) {
      *os_signpost_id_t v4 = 65632;
    }
    uint64_t v6 = v4 + 1;
    goto LABEL_27;
  }
  uint64_t v7 = ((uint64_t)v4 - *(void *)result) >> 3;
  unint64_t v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) >> 61) {
    goto LABEL_78;
  }
  uint64_t v9 = v5 - *(void *)result;
  if (v9 >> 2 > v8) {
    unint64_t v8 = v9 >> 2;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  if (v8)
  {
    uint64_t v10 = 8 * v8;
    BOOL result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 8 * v8, 4);
    BOOL v11 = (void *)(result + 8 * v7);
    unint64_t v8 = result + v10;
    if (result) {
      void *v11 = 65632;
    }
  }
  else
  {
    BOOL v11 = (void *)(8 * v7);
  }
  uint64_t v6 = v11 + 1;
  uint64_t v13 = *(void *)v3;
  uint64_t v12 = *(void *)(v3 + 8);
  if (v12 != *(void *)v3)
  {
    unint64_t v14 = v12 - *(void *)v3 - 8;
    if (v14 < 0x38)
    {
      uint64_t v16 = *(void *)(v3 + 8);
    }
    else if ((unint64_t)(v12 - (void)v11) < 0x20)
    {
      uint64_t v16 = *(void *)(v3 + 8);
    }
    else
    {
      uint64_t v15 = (v14 >> 3) + 1;
      uint64_t v16 = v12 - 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v17 = v11 - 2;
      unsigned __int8 v18 = (long long *)(v12 - 16);
      uint64_t v19 = v15 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v20 = *v18;
        *(v17 - 1) = *(v18 - 1);
        _OWORD *v17 = v20;
        v17 -= 2;
        v18 -= 2;
        v19 -= 4;
      }
      while (v19);
      v11 -= v15 & 0x3FFFFFFFFFFFFFFCLL;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_24;
      }
    }
    do
    {
      uint64_t v21 = *(void *)(v16 - 8);
      v16 -= 8;
      *--BOOL v11 = v21;
    }
    while (v16 != v13);
LABEL_24:
    uint64_t v12 = *(void *)v3;
  }
  *(void *)uint64_t v3 = v11;
  *(void *)(v3 + 8) = v6;
  uint64_t v22 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = v8;
  if (v12) {
    BOOL result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v12, v22 - v12);
  }
LABEL_27:
  *(void *)(v3 + 8) = v6;
  unint64_t v23 = *(void *)(v3 + 16);
  if ((unint64_t)v6 < v23)
  {
    *uint64_t v6 = 65594;
    uint64_t v24 = v6 + 1;
    goto LABEL_51;
  }
  uint64_t v25 = ((uint64_t)v6 - *(void *)v3) >> 3;
  if ((unint64_t)(v25 + 1) >> 61) {
    goto LABEL_78;
  }
  uint64_t v26 = v23 - *(void *)v3;
  uint64_t v27 = v26 >> 2;
  if (v26 >> 2 <= (unint64_t)(v25 + 1)) {
    uint64_t v27 = v25 + 1;
  }
  BOOL v28 = (unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8;
  uint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v28) {
    uint64_t v29 = v27;
  }
  if (v29)
  {
    uint64_t v30 = 8 * v29;
    BOOL result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 16))(*(void *)(v3 + 24), 8 * v29, 4);
    uint64_t v31 = (void *)(result + 8 * v25);
    uint64_t v29 = result + v30;
    if (result) {
      *uint64_t v31 = 65594;
    }
  }
  else
  {
    uint64_t v31 = (void *)(8 * v25);
  }
  uint64_t v24 = v31 + 1;
  uint64_t v33 = *(void *)v3;
  uint64_t v32 = *(void *)(v3 + 8);
  if (v32 != *(void *)v3)
  {
    unint64_t v34 = v32 - *(void *)v3 - 8;
    if (v34 < 0x38)
    {
      uint64_t v36 = *(void *)(v3 + 8);
    }
    else if ((unint64_t)(v32 - (void)v31) < 0x20)
    {
      uint64_t v36 = *(void *)(v3 + 8);
    }
    else
    {
      uint64_t v35 = (v34 >> 3) + 1;
      uint64_t v36 = v32 - 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
      int v37 = v31 - 2;
      unsigned __int8 v38 = (long long *)(v32 - 16);
      uint64_t v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v40 = *v38;
        *(v37 - 1) = *(v38 - 1);
        *int v37 = v40;
        v37 -= 2;
        v38 -= 2;
        v39 -= 4;
      }
      while (v39);
      v31 -= v35 & 0x3FFFFFFFFFFFFFFCLL;
      if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_48;
      }
    }
    do
    {
      uint64_t v41 = *(void *)(v36 - 8);
      v36 -= 8;
      *--uint64_t v31 = v41;
    }
    while (v36 != v33);
LABEL_48:
    uint64_t v32 = *(void *)v3;
  }
  *(void *)uint64_t v3 = v31;
  *(void *)(v3 + 8) = v24;
  uint64_t v42 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = v29;
  if (v32) {
    BOOL result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v32, v42 - v32);
  }
LABEL_51:
  *(void *)(v3 + 8) = v24;
  if ((a2 & 0xFF00) == 0) {
    return result;
  }
  unint64_t v43 = *(void *)(v3 + 16);
  if ((unint64_t)v24 >= v43)
  {
    uint64_t v45 = ((uint64_t)v24 - *(void *)v3) >> 3;
    if (!((unint64_t)(v45 + 1) >> 61))
    {
      uint64_t v46 = v43 - *(void *)v3;
      uint64_t v47 = v46 >> 2;
      if (v46 >> 2 <= (unint64_t)(v45 + 1)) {
        uint64_t v47 = v45 + 1;
      }
      BOOL v28 = (unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8;
      uint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v28) {
        uint64_t v48 = v47;
      }
      if (v48)
      {
        uint64_t v49 = 8 * v48;
        BOOL result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 16))(*(void *)(v3 + 24), 8 * v48, 4);
        unint64_t v50 = (void *)(result + 8 * v45);
        uint64_t v48 = result + v49;
        if (result) {
          *unint64_t v50 = (((unint64_t)a2 << 32) | 0x1003A) + 51;
        }
      }
      else
      {
        unint64_t v50 = (void *)(8 * v45);
      }
      uint64_t v44 = v50 + 1;
      uint64_t v52 = *(void *)v3;
      uint64_t v51 = *(void *)(v3 + 8);
      if (v51 == *(void *)v3) {
        goto LABEL_74;
      }
      unint64_t v53 = v51 - *(void *)v3 - 8;
      if (v53 < 0x38)
      {
        uint64_t v55 = *(void *)(v3 + 8);
      }
      else if ((unint64_t)(v51 - (void)v50) < 0x20)
      {
        uint64_t v55 = *(void *)(v3 + 8);
      }
      else
      {
        uint64_t v54 = (v53 >> 3) + 1;
        uint64_t v55 = v51 - 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
        __int16 v56 = v50 - 2;
        uint64_t v57 = (long long *)(v51 - 16);
        uint64_t v58 = v54 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v59 = *v57;
          *(v56 - 1) = *(v57 - 1);
          *__int16 v56 = v59;
          v56 -= 2;
          v57 -= 2;
          v58 -= 4;
        }
        while (v58);
        v50 -= v54 & 0x3FFFFFFFFFFFFFFCLL;
        if (v54 == (v54 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_73;
        }
      }
      do
      {
        uint64_t v60 = *(void *)(v55 - 8);
        v55 -= 8;
        *--unint64_t v50 = v60;
      }
      while (v55 != v52);
LABEL_73:
      uint64_t v51 = *(void *)v3;
LABEL_74:
      *(void *)uint64_t v3 = v50;
      *(void *)(v3 + 8) = v44;
      uint64_t v61 = *(void *)(v3 + 16);
      *(void *)(v3 + 16) = v48;
      if (v51) {
        BOOL result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v51, v61 - v51);
      }
      goto LABEL_76;
    }
LABEL_78:
    abort();
  }
  *uint64_t v24 = (((unint64_t)a2 << 32) | 0x1003A) + 51;
  uint64_t v44 = v24 + 1;
LABEL_76:
  *(void *)(v3 + 8) = v44;
  return result;
}

uint64_t md::ARWalkingManeuverLabelFeature::style(void *a1, unsigned int a2)
{
  uint64_t v2 = a1[58];
  if (!v2) {
    return (uint64_t)(a1 + 10);
  }
  uint64_t v3 = a1 + 58;
  do
  {
    unsigned int v4 = *(_DWORD *)(v2 + 32);
    BOOL v5 = v4 >= a2;
    if (v4 >= a2) {
      uint64_t v6 = (uint64_t *)v2;
    }
    else {
      uint64_t v6 = (uint64_t *)(v2 + 8);
    }
    if (v5) {
      uint64_t v3 = (void *)v2;
    }
    uint64_t v2 = *v6;
  }
  while (*v6);
  if (v3 == a1 + 58 || *((_DWORD *)v3 + 8) > a2) {
    return (uint64_t)(a1 + 10);
  }
  uint64_t v8 = a1[103];
  if (!v8) {
    goto LABEL_24;
  }
  uint64_t v9 = a1 + 103;
  do
  {
    unsigned int v10 = *(_DWORD *)(v8 + 28);
    BOOL v11 = v10 >= a2;
    if (v10 >= a2) {
      uint64_t v12 = (uint64_t *)v8;
    }
    else {
      uint64_t v12 = (uint64_t *)(v8 + 8);
    }
    if (v11) {
      uint64_t v9 = (void *)v8;
    }
    uint64_t v8 = *v12;
  }
  while (*v12);
  if (v9 != a1 + 103 && *((_DWORD *)v9 + 7) <= a2)
  {
    unsigned int v13 = *((unsigned __int8 *)v9 + 32);
    int v14 = *((unsigned __int8 *)v3 + 121);
    if (v14) {
      return a1[12] + 16 * (v13 + v14 + 1);
    }
  }
  else
  {
LABEL_24:
    unsigned int v13 = 0;
    int v14 = *((unsigned __int8 *)v3 + 121);
    if (v14) {
      return a1[12] + 16 * (v13 + v14 + 1);
    }
  }
  return a1[12] + 16 * v13;
}

void md::ARWalkingManeuverLabelFeature::populateDebugNode(id *this, gdc::DebugTreeNode *a2, const md::LabelManager *a3)
{
  md::LabelFeature::populateDebugNode((md::LabelFeature *)this, a2, (unint64_t)a3);
  id v5 = this[85];
  uint64_t v6 = [v5 description];

  uint64_t v42 = v6;
  if (v6)
  {
    v64[23] = 18;
    strcpy(v64, "VKARWalkingFeature");
    uint64_t v7 = (const std::string::value_type *)[v6 UTF8String];
    memset(&v112, 0, sizeof(v112));
    int v113 = 4;
    if (v7)
    {
      std::string::__assign_external(&v112, v7);
    }
    else
    {
      *((unsigned char *)&v112.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&v112, "<null>");
    }
    gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v64, (uint64_t)v111);
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v112.__r_.__value_.__l.__data_);
    }
  }
  v64[23] = 4;
  strcpy(v64, "Text");
  uint64_t v8 = (const std::string::value_type *)(this + 87);
  if (*((char *)this + 719) < 0)
  {
    uint64_t v9 = *(const std::string::value_type **)v8;
    memset(&v109, 0, sizeof(v109));
    int v110 = 4;
    if (v9)
    {
      std::string::__assign_external(&v109, v9);
    }
    else
    {
      *((unsigned char *)&v109.__r_.__value_.__s + 23) = 6;
      qmemcpy(&v109, "<null>", 6);
    }
  }
  else
  {
    memset(&v109, 0, sizeof(v109));
    int v110 = 4;
    std::string::__assign_external(&v109, v8);
  }
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v64, (uint64_t)v108);
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v109.__r_.__value_.__l.__data_);
  }
  id v10 = this[85];
  v64[23] = 7;
  strcpy(v64, "Bearing");
  id v11 = v10;
  [v11 maneuverHeading];
  uint64_t v105 = 0;
  uint64_t v104 = 0;
  uint64_t v106 = 0;
  int v107 = 2;
  uint64_t v103 = v12;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v64, (uint64_t)v102);

  v64[23] = 15;
  strcpy(v64, "RouteCoordinate");
  ChildNode = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (long long *)v64);
  uint64_t v14 = *((unsigned int *)this + 196);
  v64[23] = 5;
  strcpy(v64, "index");
  uint64_t v100 = 0;
  uint64_t v99 = 0;
  int v101 = 1;
  uint64_t v98 = 0;
  uint64_t v97 = v14;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v64, (uint64_t)v96);
  float v15 = *((float *)this + 197);
  v64[23] = 6;
  strcpy(v64, "offset");
  uint64_t v94 = 0;
  uint64_t v92 = 0;
  uint64_t v93 = 0;
  int v95 = 2;
  double v91 = v15;
  gdc::DebugTreeNode::addProperty((uint64_t)ChildNode, (uint64_t)v64, (uint64_t)v90);
  if (*((unsigned char *)this + 740))
  {
    v64[23] = 10;
    strcpy(v64, "FaceVector");
    uint64_t v16 = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (long long *)v64);
    int v17 = *((unsigned __int8 *)this + 740);
    v64[23] = 1;
    strcpy(v64, "x");
    if (!v17) {
      goto LABEL_46;
    }
    uint64_t v18 = (uint64_t)v16;
    float v19 = *((float *)this + 182);
    uint64_t v88 = 0;
    uint64_t v86 = 0;
    uint64_t v87 = 0;
    int v89 = 2;
    double v85 = v19;
    gdc::DebugTreeNode::addProperty((uint64_t)v16, (uint64_t)v64, (uint64_t)v84);
    int v20 = *((unsigned __int8 *)this + 740);
    v64[23] = 1;
    strcpy(v64, "y");
    if (!v20) {
      goto LABEL_46;
    }
    float v21 = *((float *)this + 183);
    uint64_t v82 = 0;
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    int v83 = 2;
    double v79 = v21;
    gdc::DebugTreeNode::addProperty(v18, (uint64_t)v64, (uint64_t)v78);
    int v22 = *((unsigned __int8 *)this + 740);
    v64[23] = 1;
    strcpy(v64, "z");
    if (!v22) {
      goto LABEL_46;
    }
    float v23 = *((float *)this + 184);
    uint64_t v76 = 0;
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    int v77 = 2;
    double v73 = v23;
    gdc::DebugTreeNode::addProperty(v18, (uint64_t)v64, (uint64_t)v72);
  }
  if (!*((unsigned char *)this + 776)) {
    goto LABEL_29;
  }
  uint64_t v24 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v64 = v24;
  *(_OWORD *)&v64[8] = xmmword_1A28FD150;
  strcpy(v24, "HighPrecisionAltitudeRequestIsSet");
  int v71 = 0;
  memset(&v70[4], 0, 24);
  v70[0] = 1;
  gdc::DebugTreeNode::addProperty((uint64_t)a2, (uint64_t)v64, (uint64_t)v70);
  operator delete(v24);
  if (!*((unsigned char *)this + 776))
  {
LABEL_46:
    std::__throw_bad_optional_access[abi:nn180100]();
    __break(1u);
    return;
  }
  uint64_t v25 = (uint64_t *)this[95];
  if (v25)
  {
    md::HighPrecisionAltitudeRequest::createDebugNode((md::HighPrecisionAltitudeRequest *)v64, v25);
    gdc::DebugTreeNode::addChildNode(a2, (long long *)v64);
    uint64_t v26 = __p;
    if (__p)
    {
      uint64_t v27 = (uint64_t)v69;
      BOOL v28 = __p;
      if (v69 != __p)
      {
        do
        {
          v27 -= 80;
          std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v27);
        }
        while ((void *)v27 != v26);
        BOOL v28 = __p;
      }
      uint64_t v69 = v26;
      operator delete(v28);
    }
    std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v67);
    if (v66 < 0)
    {
      operator delete(v65);
      if ((v64[23] & 0x80000000) == 0) {
        goto LABEL_29;
      }
    }
    else if ((v64[23] & 0x80000000) == 0)
    {
      goto LABEL_29;
    }
    operator delete(*(void **)v64);
  }
LABEL_29:
  LODWORD(v63.__r_.__value_.__l.__data_) = 1;
  uint64_t v29 = (*((uint64_t (**)(id *, std::string *))*this + 14))(this, &v63);
  md::LabelPoint::coordinate((md::LabelPoint *)v64, v29);
  *((unsigned char *)&v63.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&v63, "LabelPoint");
  uint64_t v30 = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (long long *)&v63);
  *((unsigned char *)&v63.__r_.__value_.__s + 23) = 3;
  LODWORD(v63.__r_.__value_.__l.__data_) = 7627116;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v59 = 0;
  int v62 = 2;
  uint64_t v58 = *(void *)v64;
  gdc::DebugTreeNode::addProperty((uint64_t)v30, (uint64_t)&v63, (uint64_t)v57);
  *((unsigned char *)&v63.__r_.__value_.__s + 23) = 3;
  LODWORD(v63.__r_.__value_.__l.__data_) = 7237484;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v53 = 0;
  int v56 = 2;
  uint64_t v52 = *(void *)&v64[8];
  gdc::DebugTreeNode::addProperty((uint64_t)v30, (uint64_t)&v63, (uint64_t)v51);
  *((unsigned char *)&v63.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&v63, "altitude");
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v47 = 0;
  int v50 = 2;
  uint64_t v46 = *(void *)&v64[16];
  gdc::DebugTreeNode::addProperty((uint64_t)v30, (uint64_t)&v63, (uint64_t)v45);
  uint64_t v31 = (char *)operator new(0x20uLL);
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  *(_OWORD *)&v63.__r_.__value_.__r.__words[1] = xmmword_1A28FD110;
  strcpy(v31, "FallbackOcclusionStyling");
  uint64_t v32 = gdc::DebugTreeNode::createChildNode((uint64_t)a2, (long long *)&v63);
  operator delete(v31);
  uint64_t v33 = (id *)this[102];
  unint64_t v34 = (id **)(this + 103);
  if (v33 != this + 103)
  {
    do
    {
      unsigned int v35 = *((_DWORD *)v33 + 7);
      if (v35)
      {
        std::to_string(&v63, v35);
      }
      else
      {
        *((unsigned char *)&v63.__r_.__value_.__s + 23) = 7;
        strcpy((char *)&v63, "UNKNOWN");
      }
      uint64_t v36 = gdc::DebugTreeNode::createChildNode((uint64_t)v32, (long long *)&v63);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      int v37 = (char *)operator new(0x20uLL);
      v63.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
      *(_OWORD *)&v63.__r_.__value_.__r.__words[1] = xmmword_1A28FD110;
      strcpy(v37, "FallbackOcclusionStyling");
      uint64_t v38 = *((unsigned __int8 *)v33 + 32);
      memset(&v43[4], 0, 24);
      int v44 = 0;
      v43[0] = v38;
      gdc::DebugTreeNode::addProperty((uint64_t)v36, (uint64_t)&v63, (uint64_t)v43);
      operator delete(v37);
      uint64_t v39 = (id *)v33[1];
      if (v39)
      {
        do
        {
          long long v40 = (id **)v39;
          uint64_t v39 = (id *)*v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          long long v40 = (id **)v33[2];
          BOOL v41 = *v40 == v33;
          uint64_t v33 = (id *)v40;
        }
        while (!v41);
      }
      uint64_t v33 = (id *)v40;
    }
    while (v40 != v34);
  }
}

void sub_1A27701B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t md::ARWalkingManeuverLabelFeature::isRouteFeature(md::ARWalkingManeuverLabelFeature *this)
{
  return 1;
}

uint64_t md::ARWalkingManeuverLabelFeature::routeCoordinate(uint64_t a1)
{
  return *(void *)(a1 + 784);
}

uint64_t md::ARWalkingManeuverLabelFeature::dedupingGroup@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 800);
  *a2 = *(void *)(this + 792);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t md::ARWalkingManeuverLabelFeature::labelFeatureType(md::ARWalkingManeuverLabelFeature *this)
{
  return 24;
}

id md::ARWalkingManeuverLabelFeature::arWalkingFeature(id *this)
{
  return this[85];
}

uint64_t md::ARWalkingManeuverLabelFeature::skewOffsettingLimits@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, int8x8_t *a3@<X8>, int8x8_t a4@<D1>)
{
  uint64_t v4 = *(void *)(result + 464);
  int8x8_t v5 = 0;
  if (v4)
  {
    unsigned int v6 = *a2;
    uint64_t v7 = result + 464;
    do
    {
      unsigned int v8 = *(_DWORD *)(v4 + 32);
      BOOL v9 = v8 >= v6;
      if (v8 >= v6) {
        id v10 = (uint64_t *)v4;
      }
      else {
        id v10 = (uint64_t *)(v4 + 8);
      }
      if (v9) {
        uint64_t v7 = v4;
      }
      uint64_t v4 = *v10;
    }
    while (*v10);
    if (v7 != result + 464 && v6 >= *(_DWORD *)(v7 + 32))
    {
      v5.i8[0] = *(unsigned char *)(v7 + 121);
      a4.i32[0] = 1;
      int8x8_t v5 = vbic_s8((int8x8_t)0x4000000040000000, vdup_lane_s8(vceq_s8(v5, a4), 0));
    }
  }
  *a3 = v5;
  return result;
}

unint64_t md::ARWalkingManeuverLabelFeature::skewOffsettingVector(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 464);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 464;
  do
  {
    unsigned int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      uint64_t v7 = (uint64_t *)v2;
    }
    else {
      uint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 464 || v3 < *(_DWORD *)(v4 + 32) || *(unsigned char *)(v4 + 121) == 1) {
    return 0;
  }
  else {
    return *(void *)(a1 + 744) & 0xFFFFFFFFFFFFFF00 | *(void *)(a1 + 744);
  }
}

uint64_t md::ARWalkingManeuverLabelFeature::facingVector(uint64_t a1)
{
  return *(void *)(a1 + 728);
}

BOOL md::ARWalkingManeuverLabelFeature::updateDynamicStyling(md::ARWalkingManeuverLabelFeature *this, LabelManager *a2, md::Label *a3)
{
  uint64_t v4 = (uint64_t **)((char *)this + 824);
  unsigned int v5 = (char *)*((void *)this + 103);
  if (v5)
  {
    unsigned int v6 = *((_DWORD *)a3 + 12);
    uint64_t v7 = (uint64_t **)((char *)this + 824);
    unsigned int v8 = (char *)*((void *)this + 103);
    do
    {
      unsigned int v9 = *((_DWORD *)v8 + 7);
      BOOL v10 = v9 >= v6;
      if (v9 >= v6) {
        id v11 = (char **)v8;
      }
      else {
        id v11 = (char **)(v8 + 8);
      }
      if (v10) {
        uint64_t v7 = (uint64_t **)v8;
      }
      unsigned int v8 = *v11;
    }
    while (*v11);
    BOOL v12 = v7 != v4 && v6 >= *((_DWORD *)v7 + 7) && *((unsigned __int8 *)v7 + 32) != *((unsigned __int8 *)this + 809);
    char v13 = *((unsigned char *)this + 809);
    do
    {
      while (1)
      {
        uint64_t v14 = v5;
        unsigned int v15 = *((_DWORD *)v5 + 7);
        if (v6 < v15) {
          break;
        }
        if (v15 >= v6) {
          goto LABEL_25;
        }
        unsigned int v5 = (char *)*((void *)v14 + 1);
        if (!v5)
        {
          uint64_t v4 = (uint64_t **)(v14 + 8);
          goto LABEL_22;
        }
      }
      unsigned int v5 = *(char **)v14;
    }
    while (*(void *)v14);
    uint64_t v4 = (uint64_t **)v14;
  }
  else
  {
    BOOL v12 = 0;
    char v13 = *((unsigned char *)this + 809);
    unsigned int v6 = *((_DWORD *)a3 + 12);
    uint64_t v14 = (char *)this + 824;
  }
LABEL_22:
  uint64_t v16 = v14;
  uint64_t v14 = (char *)operator new(0x28uLL);
  *((_DWORD *)v14 + 7) = v6;
  v14[32] = 0;
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = v16;
  *uint64_t v4 = (uint64_t *)v14;
  uint64_t v17 = **((void **)this + 102);
  uint64_t v18 = (uint64_t *)v14;
  if (v17)
  {
    *((void *)this + 102) = v17;
    uint64_t v18 = *v4;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 103), v18);
  ++*((void *)this + 104);
LABEL_25:
  v14[32] = v13;
  return v12;
}

uint64_t md::ARWalkingManeuverLabelFeature::newRootPart(void *a1, md::LabelManager *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1[58];
  if (!v7) {
    goto LABEL_12;
  }
  unsigned int v8 = *(_DWORD *)(a3 + 48);
  unsigned int v9 = a1 + 58;
  do
  {
    unsigned int v10 = *(_DWORD *)(v7 + 32);
    BOOL v11 = v10 >= v8;
    if (v10 >= v8) {
      BOOL v12 = (uint64_t *)v7;
    }
    else {
      BOOL v12 = (uint64_t *)(v7 + 8);
    }
    if (v11) {
      unsigned int v9 = (void *)v7;
    }
    uint64_t v7 = *v12;
  }
  while (*v12);
  if (v9 != a1 + 58 && v8 >= *((_DWORD *)v9 + 8)) {
    int v13 = *((unsigned __int8 *)v9 + 121);
  }
  else {
LABEL_12:
  }
    int v13 = 0;
  uint64_t v14 = (uint64_t)(a1 + 87);
  unsigned int v15 = (long long *)(*(uint64_t (**)(void *, void))(*a1 + 480))(a1, 0);
  unsigned int v16 = *(unsigned __int8 *)(a4 + 250);
  if (v13 == 1)
  {
    return md::ARWalkingPerpendicularManeuverLabelPart::createPart(a2, (float *)a3, a4, v14, (v16 >> 4) & 1, v15);
  }
  else if (v13)
  {
    return 0;
  }
  else
  {
    return md::ARWalkingFaceAlignedManeuverLabelPart::createPart(a2, (float *)a3, a4, v14, (v16 >> 4) & 1, v15);
  }
}

uint64_t md::ARWalkingManeuverLabelFeature::labelTypeAtPosition()
{
  return 13;
}

void md::ARWalkingManeuverLabelFeature::~ARWalkingManeuverLabelFeature(md::ARWalkingManeuverLabelFeature *this)
{
  md::ARWalkingManeuverLabelFeature::~ARWalkingManeuverLabelFeature(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF54AF60;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 103));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 100);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!*((unsigned char *)this + 776)) {
      goto LABEL_8;
    }
  }
  else if (!*((unsigned char *)this + 776))
  {
    goto LABEL_8;
  }
  unsigned int v3 = (std::__shared_weak_count *)*((void *)this + 96);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_8:
  if (*((char *)this + 719) < 0) {
    (*(void (**)(void, void, uint64_t))(**((void **)this + 90) + 40))(*((void *)this + 90), *((void *)this + 87), *((void *)this + 89) & 0x7FFFFFFFFFFFFFFFLL);
  }
  *((void *)this + 84) = &unk_1EF559C38;

  md::PointLabelFeature::~PointLabelFeature(this);
}

void geo::_retain_ptr<VKARWalkingManeuverFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559C38;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<VKARWalkingManeuverFeature * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559C38;

  return a1;
}

uint64_t std::__shared_ptr_pointer<ARWalkingManeuverFeatureDedupingGroup *,std::shared_ptr<md::LabelDedupingGroup>::__shared_ptr_default_delete<md::LabelDedupingGroup,ARWalkingManeuverFeatureDedupingGroup>,std::allocator<ARWalkingManeuverFeatureDedupingGroup>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ARWalkingManeuverFeatureDedupingGroup *,std::shared_ptr<md::LabelDedupingGroup>::__shared_ptr_default_delete<md::LabelDedupingGroup,ARWalkingManeuverFeatureDedupingGroup>,std::allocator<ARWalkingManeuverFeatureDedupingGroup>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t ARWalkingManeuverFeatureDedupingGroup::getAlternateLayout(ARWalkingManeuverFeatureDedupingGroup *this, md::LabelBase *a2)
{
  uint64_t v2 = (void *)*((void *)this + 1);
  if (*((void *)this + 2) - (void)v2 == 16) {
    return v2[*v2 == (void)a2];
  }
  else {
    return 0;
  }
}

BOOL ARWalkingManeuverFeatureDedupingGroup::isResolved(ARWalkingManeuverFeatureDedupingGroup *this)
{
  return *((void *)this + 6) != *((void *)this + 5);
}

void ARWalkingManeuverFeatureDedupingGroup::prepareForCollision(int8x8_t *this, const md::LabelLayoutContext **a2)
{
  this[6] = this[5];
  this[9] = 0;
  md::ARWalkingLabelLayoutDedupingGroup::prepareLayoutGroups(this, a2[54]);
  unsigned int v3 = (unint64_t *)this[1];
  for (i = (unint64_t *)this[2]; v3 != i; unint64_t *i = v5)
  {
    while (1)
    {
      unint64_t v5 = *v3;
      if (!*(unsigned char *)(*v3 + 1290)
        || !std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(&this[26], *v3))
      {
        break;
      }
      if (++v3 == i) {
        goto LABEL_12;
      }
    }
    if (v3 == --i) {
      break;
    }
    while (1)
    {
      unint64_t v6 = *i;
      if (*(unsigned char *)(*i + 1290))
      {
        if (std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(&this[26], *i))
        {
          break;
        }
      }
      if (--i == v3) {
        goto LABEL_12;
      }
    }
    *v3++ = v6;
  }
LABEL_12:
  uint64_t v7 = (int8x8_t *)this[1];
  unsigned int v8 = (int8x8_t *)this[2];
  if (v7 != v8)
  {
    unint64_t v9 = (char *)v8 - (char *)v7 - 8;
    if (v9 > 7)
    {
      uint64_t v12 = 0;
      uint64_t v13 = (v9 >> 3) + 1;
      uint64_t v10 = v13 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        uint64_t v14 = &v7[v12];
        int8x8_t v16 = *v14;
        int8x8_t v15 = v14[1];
        *(_DWORD *)(*(void *)&v16 + 32) = v12;
        *(_DWORD *)(*(void *)&v15 + 32) = v12 + 1;
        v12 += 2;
      }
      while (v10 != v12);
      if (v13 == v10) {
        goto LABEL_20;
      }
      BOOL v11 = &v7[v13 & 0x3FFFFFFFFFFFFFFELL];
    }
    else
    {
      LODWORD(v10) = 0;
      BOOL v11 = (int8x8_t *)this[1];
    }
    do
    {
      uint64_t v17 = (uint64_t)*v11++;
      *(_DWORD *)(v17 + 32) = v10;
      LODWORD(v10) = v10 + 1;
    }
    while (v11 != v8);
LABEL_20:
    this[9] = *v7;
  }
}

void ARWalkingManeuverFeatureDedupingGroup::~ARWalkingManeuverFeatureDedupingGroup(ARWalkingManeuverFeatureDedupingGroup *this)
{
  md::ARWalkingLabelLayoutDedupingGroup::~ARWalkingLabelLayoutDedupingGroup(this);
  JUMPOUT(0x1A6239270);
}

void md::ARWalkingManeuverLabelFeature::updateWithHighPrecisionAltitude(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*((unsigned char *)a1 + 776))
  {
    if (a4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a4 + 8), 1uLL, memory_order_relaxed);
    }
    a1[95] = a3;
    unint64_t v6 = (std::__shared_weak_count *)a1[96];
    a1[96] = a4;
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (!*(unsigned char *)(a2 + 8)) {
      return;
    }
  }
  else
  {
    a1[95] = a3;
    a1[96] = a4;
    if (a4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a4 + 8), 1uLL, memory_order_relaxed);
    }
    *((unsigned char *)a1 + 776) = 1;
    if (!*(unsigned char *)(a2 + 8)) {
      return;
    }
  }
  uint64_t v7 = (void *)a1[57];
  if (v7 != a1 + 58)
  {
    while (1)
    {
      uint64_t v8 = (*(uint64_t (**)(void *, void *))(*a1 + 112))(a1, v7 + 4);
      long long v9 = *(_OWORD *)v8;
      uint64_t v19 = *(void *)(v8 + 16);
      long long v18 = v9;
      long long v20 = *(_OWORD *)(v8 + 24);
      int v10 = *(_DWORD *)(v8 + 43);
      v21[0] = *(float *)(v8 + 40);
      *(_DWORD *)((char *)v21 + 3) = v10;
      if (!*(unsigned char *)(a2 + 8)) {
        break;
      }
      float v11 = *(double *)a2;
      v21[0] = v11;
      (*(void (**)(void *, void *, long long *))(*a1 + 104))(a1, v7 + 4, &v18);
      uint64_t v12 = (void *)v7[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v7[2];
          BOOL v14 = *v13 == (void)v7;
          uint64_t v7 = v13;
        }
        while (!v14);
      }
      uint64_t v7 = v13;
      if (v13 == a1 + 58) {
        return;
      }
    }
    int8x8_t v15 = (void **)std::__throw_bad_optional_access[abi:nn180100]();
    altitude::FlyoverTrafficTile::append(v15, v16, v17);
  }
}

void altitude::FlyoverTrafficTile::append(void **a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v6 = (uint64_t)a1[7];
  md::TrafficStyleAttributes((gss::Allocator *)&v34, 0);
  *(void *)((char *)&v42 + 7) = 0;
  *(void *)&long long v42 = 0;
  HIBYTE(v42) = 1;
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes(&v40, v6, (gss::FeatureAttributeSet *)&v34, (gss::QueryOverrides *)&v42);
  if (v34)
  {
    uint64_t v35 = v34;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v37 + 40))(v37, v34, v36 - v34);
  }
  uint64_t v7 = (uint64_t)a1[7];
  md::createFeatureAttributeSet((gss::Allocator *)&v34, (uint64_t *)(*(void *)(**(void **)a2 + 80 * *(unsigned int *)(a2 + 8)) + 24));
  *(void *)((char *)&v42 + 7) = 0;
  *(void *)&long long v42 = 0;
  HIBYTE(v42) = 1;
  gss::StylesheetManager<gss::PropertyID>::styleQueryForFeatureAttributes((uint64_t **)&v39, v7, (gss::FeatureAttributeSet *)&v34, (gss::QueryOverrides *)&v42);
  if (v34)
  {
    uint64_t v35 = v34;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v37 + 40))(v37, v34, v36 - v34);
  }
  long long v8 = v39;
  long long v42 = v39;
  if (*((void *)&v39 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v39 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  gss::QueryableLocker<gss::PropertyID>::QueryableLocker(&v34, v8, *((uint64_t *)&v8 + 1));
  if (*((void *)&v8 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v8 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v8 + 1) + 16))(*((void *)&v8 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v8 + 1));
    if (v38) {
      goto LABEL_10;
    }
LABEL_14:
    uint64_t v11 = *(unsigned int *)(*(void *)(**(void **)a2 + 80 * *(unsigned int *)(a2 + 8) + 64) + 16);
    goto LABEL_15;
  }
  if (!v38) {
    goto LABEL_14;
  }
LABEL_10:
  uint64_t v9 = *(void *)(v34 + 24);
  uint64_t v11 = *(void *)(v9 + 16);
  int v10 = *(std::__shared_weak_count **)(v9 + 24);
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_15:
  uint64_t v12 = a1[4];
  unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[5] - v12) >> 3);
  a1[1] = (void *)v13;
  unint64_t v14 = v13 - (void)*a1;
  if ((int)v14 > 1)
  {
    {
      operator new();
    }
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 136, 8);
    uint64_t v19 = v18;
    *(_OWORD *)(v18 + 64) = 0u;
    *(_OWORD *)(v18 + 80) = 0u;
    *(_OWORD *)(v18 + 32) = 0u;
    *(_OWORD *)(v18 + 48) = 0u;
    *(_OWORD *)uint64_t v18 = 0u;
    *(_OWORD *)(v18 + 16) = 0u;
    *(_DWORD *)(v18 + 88) = -1;
    *(void *)(v18 + 96) = 0x7FEFFFFFFFFFFFFFLL;
    *(_OWORD *)(v18 + 104) = 0u;
    *(_OWORD *)(v18 + 120) = 0u;
    *(void *)&long long v42 = v18;
    long long v20 = *a1;
    *(void *)(v18 + 56) = *a1;
    *(void *)(v18 + 48) = (unsigned char *)a1[1] - v20;
    float v21 = (void *)(**(void **)a2 + 80 * *(unsigned int *)(a2 + 8));
    uint64_t v22 = v21[9];
    *(_DWORD *)(v18 + 72) = *(float *)(v22 + 12) <= 0.0;
    *(_DWORD *)(v18 + 80) = *(unsigned __int8 *)(*v21 + 153);
    if (*(_DWORD *)(v22 + 24) == 1) {
      int v23 = -1;
    }
    else {
      int v23 = 1;
    }
    *(_DWORD *)(v18 + 76) = v23;
    uint64_t v24 = *a3;
    uint64_t v25 = a3[1];
    if (*a3 == v25) {
LABEL_28:
    }
      operator new();
    while (1)
    {
      uint64_t v26 = *v24;
      if (*(void *)(*v24 + 280) == v11
        && *(void *)(v26 + 288) == *(_DWORD *)(*(void *)(**(void **)a2 + 80 * *(unsigned int *)(a2 + 8) + 64)
                                               + 16))
      {
        break;
      }
      if (++v24 == v25) {
        goto LABEL_28;
      }
    }
    uint64_t v27 = *(void *)(*(void *)(v26 + 248) + 8 * (void)a1[2]);
    *(void *)&long long v42 = 0;
    uint64_t v33 = v18;
    BOOL v28 = *(uint64_t **)(v27 + 184);
    if ((unint64_t)v28 >= *(void *)(v27 + 192))
    {
      uint64_t v29 = std::vector<std::unique_ptr<md::FlyoverTraffic,mdm::TypeDeleter<md::FlyoverTraffic>>,geo::StdAllocator<std::unique_ptr<md::FlyoverTraffic,mdm::TypeDeleter<md::FlyoverTraffic>>,mdm::Allocator>>::__push_back_slow_path<std::unique_ptr<md::FlyoverTraffic,mdm::TypeDeleter<md::FlyoverTraffic>>>(v27 + 176, &v33);
      uint64_t v19 = v33;
    }
    else
    {
      if (v28)
      {
        uint64_t *v28 = v18;
        uint64_t v19 = 0;
      }
      uint64_t v29 = v28 + 1;
    }
    *(void *)(v27 + 184) = v29;
    uint64_t v33 = 0;
    if (v19)
    {
      {
        operator new();
      }
      (*(void (**)(uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc);
      uint64_t v30 = v42;
      *a1 = a1[1];
      if (v30)
      {
        {
          operator new();
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v30, 136);
      }
    }
    else
    {
      *a1 = a1[1];
    }
  }
  else
  {
    uint64_t v15 = (int)v14;
    BOOL v16 = v13 >= (int)v14;
    unint64_t v17 = v13 - (int)v14;
    if (v16)
    {
      if (v13 > v17) {
        a1[5] = &v12[24 * v17];
      }
      a1[1] = (void *)v17;
    }
    else
    {
      std::vector<gm::Matrix<double,3,1>>::__append(a1 + 4, -v15);
      a1[1] = (char *)a1[1] - v15;
    }
  }
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)&v34);
  uint64_t v31 = (std::__shared_weak_count *)*((void *)&v39 + 1);
  if (*((void *)&v39 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v39 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  uint64_t v32 = v41;
  if (v41)
  {
    if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_1A27713E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_1A27714A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  gss::QueryOverrides::~QueryOverrides((gss::QueryOverrides *)va);
  if (a3)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a6 + 40))(a6, a3, a5 - a3);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1A277149CLL);
}

uint64_t *std::unique_ptr<md::FlyoverTraffic,mdm::TypeDeleter<md::FlyoverTraffic>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
    {
      uint64_t v3 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
      if (v5) {
        operator new();
      }
    }
    (*(void (**)(void))(**((void **)v3 + 91) + 40))(*((void *)v3 + 91));
  }
  return a1;
}

uint64_t md::S2RasterTileResourceFetcher::tileKey(uint64_t a1, void *a2)
{
  id v2 = a2;
  [v2 size];
  [v2 scale];
  [v2 style];
  uint64_t v3 = GEOS2TileKeyMake();

  return v3;
}

void sub_1A2771670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::S2RasterTileResourceFetcher::~S2RasterTileResourceFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A6239270);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<md::MapEngineSetting,std::function<void ()(long long)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::MapEngineSetting,std::function<void ()(long long)>>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  id v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (void *)v2[6];
      if (v3 == v2 + 3)
      {
        (*(void (**)(void *))(v2[3] + 32))(v2 + 3);
      }
      else if (v3)
      {
        (*(void (**)(void *))(*v3 + 40))(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanUpFrameGraphResources>(md::ita::CleanUpFrameGraphResources &&)::{lambda(void)#2},std::allocator<md::ita::CleanUpFrameGraphResources &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanUpFrameGraphResources>(md::ita::CleanUpFrameGraphResources &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF529C90;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanUpFrameGraphResources>(md::ita::CleanUpFrameGraphResources &&)::{lambda(void)#2},std::allocator<md::ita::CleanUpFrameGraphResources &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanUpFrameGraphResources>(md::ita::CleanUpFrameGraphResources &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanUpFrameGraphResources>(md::ita::CleanUpFrameGraphResources &&)::{lambda(void)#1},std::allocator<md::ita::CleanUpFrameGraphResources &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanUpFrameGraphResources>(md::ita::CleanUpFrameGraphResources &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF529CD8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanUpFrameGraphResources>(md::ita::CleanUpFrameGraphResources &&)::{lambda(void)#1},std::allocator<md::ita::CleanUpFrameGraphResources &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::CleanUpFrameGraphResources>(md::ita::CleanUpFrameGraphResources &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphRenderTarget>(gdc::Entity,std::type_identity<md::ls::FrameGraphRenderTarget>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphRenderTarget>(gdc::Entity,std::type_identity<md::ls::FrameGraphRenderTarget>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF5269A8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphRenderTarget>(gdc::Entity,std::type_identity<md::ls::FrameGraphRenderTarget>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphRenderTarget>(gdc::Entity,std::type_identity<md::ls::FrameGraphRenderTarget>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
}

void *std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphBuilder>(gdc::Entity,std::type_identity<md::ls::FrameGraphBuilder>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphBuilder>(gdc::Entity,std::type_identity<md::ls::FrameGraphBuilder>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF526888;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphBuilder>(gdc::Entity,std::type_identity<md::ls::FrameGraphBuilder>)::{lambda(gdc::Registry &)#1},std::allocator<ecs2::RemoveComponent::RemoveComponent<md::ls::FrameGraphBuilder>(gdc::Entity,std::type_identity<md::ls::FrameGraphBuilder>)::{lambda(gdc::Registry &)#1}>,void ()(gdc::Registry &)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::FrameGraphRenderTarget>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::FrameGraphRenderTarget>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FrameGraphBuilder>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::FrameGraphBuilder>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::CleanUpFrameGraphResources>,std::allocator<ecs2::ForwardToExecute<md::ita::CleanUpFrameGraphResources>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF51B878;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::CleanUpFrameGraphResources>,std::allocator<ecs2::ForwardToExecute<md::ita::CleanUpFrameGraphResources>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::EndFrameGraphPreparation>(md::ita::EndFrameGraphPreparation &&)::{lambda(void)#2},std::allocator<md::ita::EndFrameGraphPreparation &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::EndFrameGraphPreparation>(md::ita::EndFrameGraphPreparation &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF529420;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::EndFrameGraphPreparation>(md::ita::EndFrameGraphPreparation &&)::{lambda(void)#2},std::allocator<md::ita::EndFrameGraphPreparation &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::EndFrameGraphPreparation>(md::ita::EndFrameGraphPreparation &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::EndFrameGraphPreparation>(md::ita::EndFrameGraphPreparation &&)::{lambda(void)#1},std::allocator<md::ita::EndFrameGraphPreparation &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::EndFrameGraphPreparation>(md::ita::EndFrameGraphPreparation &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF529468;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::EndFrameGraphPreparation>(md::ita::EndFrameGraphPreparation &&)::{lambda(void)#1},std::allocator<md::ita::EndFrameGraphPreparation &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::EndFrameGraphPreparation>(md::ita::EndFrameGraphPreparation &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassCount>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::PassCount>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PreviousResourceStamp>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::PreviousResourceStamp>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::EndFrameGraphPreparation>,std::allocator<ecs2::ForwardToExecute<md::ita::EndFrameGraphPreparation>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF51B440;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::EndFrameGraphPreparation>,std::allocator<ecs2::ForwardToExecute<md::ita::EndFrameGraphPreparation>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildRouteLineFrameGraph>(md::ita::BuildRouteLineFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildRouteLineFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildRouteLineFrameGraph>(md::ita::BuildRouteLineFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF529390;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildRouteLineFrameGraph>(md::ita::BuildRouteLineFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildRouteLineFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildRouteLineFrameGraph>(md::ita::BuildRouteLineFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildRouteLineFrameGraph>(md::ita::BuildRouteLineFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildRouteLineFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildRouteLineFrameGraph>(md::ita::BuildRouteLineFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF5293D8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildRouteLineFrameGraph>(md::ita::BuildRouteLineFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildRouteLineFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildRouteLineFrameGraph>(md::ita::BuildRouteLineFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassRouteLineDescriptor>(gdc::Entity,md::ls::PassRouteLineDescriptor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::PassRouteLineDescriptor>(a2);
  uint64_t v22 = v2;
  unint64_t v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if (v5)
  {
    int v10 = (unsigned char *)v3[11];
    unint64_t v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      uint64_t v12 = (char *)v3[10];
      uint64_t v13 = v10 - v12;
      uint64_t v14 = v10 - v12 + 1;
      if (v14 < 0) {
        goto LABEL_28;
      }
      unint64_t v15 = v9 - (void)v12;
      if (2 * v15 > v14) {
        uint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16) {
        unint64_t v17 = (char *)operator new(v16);
      }
      else {
        unint64_t v17 = 0;
      }
      uint64_t v18 = &v17[v16];
      uint64_t v11 = (uint64_t)&v17[v13 + 1];
      uint64_t v19 = (char *)(v12 - v10);
      if (v12 == v10) {
        uint64_t v19 = 0;
      }
      v3[10] = &v17[v13 + (void)v19];
      v3[11] = v11;
      v3[12] = v18;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    uint64_t v6 = v3[31];
  }
  else
  {
    uint64_t v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      uint64_t v7 = (void *)v3[16];
      if (v7)
      {
        while (1)
        {
          uint64_t v24 = &v22;
          uint64_t v25 = 1;
          uint64_t v23 = v6;
          uint64_t v8 = v7[6];
          if (!v8) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v8 + 48))(v8, &v23, &v24);
          uint64_t v7 = (void *)*v7;
          if (!v7) {
            return;
          }
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  long long v20 = (void *)v3[22];
  if (v20)
  {
    while (1)
    {
      uint64_t v24 = &v22;
      uint64_t v25 = 1;
      uint64_t v23 = v6;
      uint64_t v21 = v20[6];
      if (!v21) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v21 + 48))(v21, &v23, &v24);
      long long v20 = (void *)*v20;
      if (!v20) {
        return;
      }
    }
    goto LABEL_27;
  }
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassRouteLineDescriptor>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::PassRouteLineDescriptor>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PassRouteLineDescriptor>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::PassRouteLineDescriptor>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassRouteLineDescriptor>(gdc::Entity,md::ls::PassRouteLineDescriptor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF523CF0;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassRouteLineDescriptor>(gdc::Entity,md::ls::PassRouteLineDescriptor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF523CF0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassRouteLineDescriptor>(gdc::Entity,md::ls::PassRouteLineDescriptor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassDeviceCapabilities>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::PassDeviceCapabilities>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassRoutelineMaskConfiguration>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::PassRoutelineMaskConfiguration>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::FrameBufferDesc>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::FrameBufferDesc>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildRouteLineFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildRouteLineFrameGraph>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF51B3F8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildRouteLineFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildRouteLineFrameGraph>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildPrimaryFrameGraph>(md::ita::BuildPrimaryFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildPrimaryFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildPrimaryFrameGraph>(md::ita::BuildPrimaryFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF528850;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildPrimaryFrameGraph>(md::ita::BuildPrimaryFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildPrimaryFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildPrimaryFrameGraph>(md::ita::BuildPrimaryFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildPrimaryFrameGraph>(md::ita::BuildPrimaryFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildPrimaryFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildPrimaryFrameGraph>(md::ita::BuildPrimaryFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF528898;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildPrimaryFrameGraph>(md::ita::BuildPrimaryFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildPrimaryFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildPrimaryFrameGraph>(md::ita::BuildPrimaryFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassShadowDescriptor>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::PassShadowDescriptor>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PassShadowDescriptor>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::PassShadowDescriptor>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassSSAODescriptor>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::PassSSAODescriptor>::remove(void *a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  --a1[11];
  uint64_t v14 = (void *)a1[28];
  if (!v14) {
    return 1;
  }
  uint64_t v15 = a1[31];
  while (1)
  {
    v19[0] = &v17;
    v19[1] = 1;
    uint64_t v18 = v15;
    uint64_t v16 = v14[6];
    if (!v16) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v16 + 48))(v16, &v18, v19);
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PassSSAODescriptor>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::PassSSAODescriptor>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildPrimaryFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildPrimaryFrameGraph>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF51AE58;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildPrimaryFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildPrimaryFrameGraph>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildShadowFrameGraph>(md::ita::BuildShadowFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildShadowFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildShadowFrameGraph>(md::ita::BuildShadowFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF528190;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildShadowFrameGraph>(md::ita::BuildShadowFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildShadowFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildShadowFrameGraph>(md::ita::BuildShadowFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildShadowFrameGraph>(md::ita::BuildShadowFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildShadowFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildShadowFrameGraph>(md::ita::BuildShadowFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF5281D8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildShadowFrameGraph>(md::ita::BuildShadowFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildShadowFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildShadowFrameGraph>(md::ita::BuildShadowFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassShadowDescriptor>(gdc::Entity,md::ls::PassShadowDescriptor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::PassShadowDescriptor>(a2);
  uint64_t v22 = v2;
  uint64_t v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if (v5)
  {
    unint64_t v10 = (unsigned char *)v3[11];
    unint64_t v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      uint64_t v12 = (char *)v3[10];
      uint64_t v13 = v10 - v12;
      uint64_t v14 = v10 - v12 + 1;
      if (v14 < 0) {
        goto LABEL_28;
      }
      unint64_t v15 = v9 - (void)v12;
      if (2 * v15 > v14) {
        uint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16) {
        unint64_t v17 = (char *)operator new(v16);
      }
      else {
        unint64_t v17 = 0;
      }
      uint64_t v18 = &v17[v16];
      uint64_t v11 = (uint64_t)&v17[v13 + 1];
      uint64_t v19 = (char *)(v12 - v10);
      if (v12 == v10) {
        uint64_t v19 = 0;
      }
      v3[10] = &v17[v13 + (void)v19];
      v3[11] = v11;
      v3[12] = v18;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    uint64_t v6 = v3[31];
  }
  else
  {
    uint64_t v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      unint64_t v7 = (void *)v3[16];
      if (v7)
      {
        while (1)
        {
          uint64_t v24 = &v22;
          uint64_t v25 = 1;
          uint64_t v23 = v6;
          uint64_t v8 = v7[6];
          if (!v8) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v8 + 48))(v8, &v23, &v24);
          unint64_t v7 = (void *)*v7;
          if (!v7) {
            return;
          }
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  long long v20 = (void *)v3[22];
  if (v20)
  {
    while (1)
    {
      uint64_t v24 = &v22;
      uint64_t v25 = 1;
      uint64_t v23 = v6;
      uint64_t v21 = v20[6];
      if (!v21) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v21 + 48))(v21, &v23, &v24);
      long long v20 = (void *)*v20;
      if (!v20) {
        return;
      }
    }
    goto LABEL_27;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassShadowDescriptor>(gdc::Entity,md::ls::PassShadowDescriptor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF5232D0;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassShadowDescriptor>(gdc::Entity,md::ls::PassShadowDescriptor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF5232D0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassShadowDescriptor>(gdc::Entity,md::ls::PassShadowDescriptor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassShadowConfiguration>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

uint64_t gdc::ComponentStorageWrapper<md::ls::PassShadowConfiguration>::remove(void *a1, unint64_t a2)
{
  unint64_t v19 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v3 = a1 + 4;
  if (a2 >> 39 >= (v5 - v4) >> 3) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 8 * (a2 >> 39));
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *(unsigned __int16 *)(v6 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v9 = a1[7];
  uint64_t v8 = a1[8];
  if (v7 >= (v8 - v9) >> 3) {
    return 0;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = v9 + 8 * v7;
  if (v11 == v8 || *(_DWORD *)(v11 + 4) != v10) {
    return 0;
  }
  uint64_t v14 = a1[10];
  geo::sparse_set<gdc::Entity,unsigned short,256ul>::erase(v3, (void *)v11);
  uint64_t v15 = a1[11];
  *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 - 1);
  a1[11] = v15 - 1;
  size_t v16 = (void *)a1[28];
  if (!v16) {
    return 1;
  }
  uint64_t v17 = a1[31];
  while (1)
  {
    v21[0] = &v19;
    v21[1] = 1;
    uint64_t v20 = v17;
    uint64_t v18 = v16[6];
    if (!v18) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v18 + 48))(v18, &v20, v21);
    size_t v16 = (void *)*v16;
    if (!v16) {
      return 1;
    }
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return gdc::ComponentStorageWrapper<md::ls::PassShadowConfiguration>::~ComponentStorageWrapper();
}

void gdc::ComponentStorageWrapper<md::ls::PassShadowConfiguration>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildShadowFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildShadowFrameGraph>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF51AAF8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildShadowFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildShadowFrameGraph>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAOFrameGraph>(md::ita::BuildSSAOFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildSSAOFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAOFrameGraph>(md::ita::BuildSSAOFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF527B60;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAOFrameGraph>(md::ita::BuildSSAOFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildSSAOFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAOFrameGraph>(md::ita::BuildSSAOFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAOFrameGraph>(md::ita::BuildSSAOFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildSSAOFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAOFrameGraph>(md::ita::BuildSSAOFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF527BA8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAOFrameGraph>(md::ita::BuildSSAOFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildSSAOFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAOFrameGraph>(md::ita::BuildSSAOFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassSSAODescriptor>(gdc::Entity,md::ls::PassSSAODescriptor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 12);
  uint64_t v3 = (void *)gdc::Registry::storage<md::ls::PassSSAODescriptor>(a2);
  uint64_t v22 = v2;
  uint64_t v4 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v3 + 4, (uint64_t)&v22);
  if (v5)
  {
    unint64_t v10 = (unsigned char *)v3[11];
    unint64_t v9 = v3[12];
    if ((unint64_t)v10 >= v9)
    {
      uint64_t v12 = (char *)v3[10];
      uint64_t v13 = v10 - v12;
      uint64_t v14 = v10 - v12 + 1;
      if (v14 < 0) {
        goto LABEL_28;
      }
      unint64_t v15 = v9 - (void)v12;
      if (2 * v15 > v14) {
        uint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16) {
        uint64_t v17 = (char *)operator new(v16);
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = &v17[v16];
      uint64_t v11 = (uint64_t)&v17[v13 + 1];
      unint64_t v19 = (char *)(v12 - v10);
      if (v12 == v10) {
        unint64_t v19 = 0;
      }
      v3[10] = &v17[v13 + (void)v19];
      v3[11] = v11;
      v3[12] = v18;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t v11 = (uint64_t)(v10 + 1);
    }
    v3[11] = v11;
    uint64_t v6 = v3[31];
  }
  else
  {
    uint64_t v6 = v3[31];
    if (v3[10] + (((uint64_t)v4 - v3[7]) >> 3) != v3[11])
    {
      unint64_t v7 = (void *)v3[16];
      if (v7)
      {
        while (1)
        {
          uint64_t v24 = &v22;
          uint64_t v25 = 1;
          uint64_t v23 = v6;
          uint64_t v8 = v7[6];
          if (!v8) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v8 + 48))(v8, &v23, &v24);
          unint64_t v7 = (void *)*v7;
          if (!v7) {
            return;
          }
        }
LABEL_27:
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_28:
        abort();
      }
      return;
    }
  }
  uint64_t v20 = (void *)v3[22];
  if (v20)
  {
    while (1)
    {
      uint64_t v24 = &v22;
      uint64_t v25 = 1;
      uint64_t v23 = v6;
      uint64_t v21 = v20[6];
      if (!v21) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v21 + 48))(v21, &v23, &v24);
      uint64_t v20 = (void *)*v20;
      if (!v20) {
        return;
      }
    }
    goto LABEL_27;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassSSAODescriptor>(gdc::Entity,md::ls::PassSSAODescriptor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF522E98;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassSSAODescriptor>(gdc::Entity,md::ls::PassSSAODescriptor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF522E98;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassSSAODescriptor>(gdc::Entity,md::ls::PassSSAODescriptor &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassMapEngineCapabilities>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::PassMapEngineCapabilities>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassSSAOConfiguration>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::PassSSAOConfiguration>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildSSAOFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildSSAOFrameGraph>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF51A7E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildSSAOFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildSSAOFrameGraph>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildSSAODOFCommonFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF52A740;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::BuildSSAODOFCommonFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildSSAODOFCommonFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF52A788;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::BuildSSAODOFCommonFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::BuildSSAODOFCommonFrameGraph>(md::ita::BuildSSAODOFCommonFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildSSAODOFCommonFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildSSAODOFCommonFrameGraph>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF51BDD0;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::BuildSSAODOFCommonFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::BuildSSAODOFCommonFrameGraph>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::DetermineIfLegacy>,std::allocator<ecs2::ForwardToExecute<md::DetermineIfLegacy>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF51A0D8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::DetermineIfLegacy>,std::allocator<ecs2::ForwardToExecute<md::DetermineIfLegacy>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBuildFrameGraph>(md::ita::PrepareBuildFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::PrepareBuildFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBuildFrameGraph>(md::ita::PrepareBuildFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF528970;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBuildFrameGraph>(md::ita::PrepareBuildFrameGraph &&)::{lambda(void)#2},std::allocator<md::ita::PrepareBuildFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBuildFrameGraph>(md::ita::PrepareBuildFrameGraph &&)::{lambda(void)#2}<gdc>> ()(void)>::~__func()
{
}

void *std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBuildFrameGraph>(md::ita::PrepareBuildFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::PrepareBuildFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBuildFrameGraph>(md::ita::PrepareBuildFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF5289B8;
  return result;
}

void std::__function::__func<ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBuildFrameGraph>(md::ita::PrepareBuildFrameGraph &&)::{lambda(void)#1},std::allocator<md::ita::PrepareBuildFrameGraph &&>,std::vector<gdc::TypeInfo,ecs2::ExecutionTaskFunction::ExecutionTaskFunction<md::ita::PrepareBuildFrameGraph>(md::ita::PrepareBuildFrameGraph &&)::{lambda(void)#1}<gdc>> ()(void)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::RequiresStencilReserve>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::RequiresStencilReserve>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresStencilReserve>(gdc::Entity,md::ls::RequiresStencilReserve &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF523C18;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::RequiresStencilReserve>(gdc::Entity,md::ls::RequiresStencilReserve &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassCount>(gdc::Entity,md::ls::PassCount &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF5260F0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassCount>(gdc::Entity,md::ls::PassCount &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameBufferDesc>(gdc::Entity,md::ls::FrameBufferDesc &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF5223A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameBufferDesc>(gdc::Entity,md::ls::FrameBufferDesc &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassMapEngineCapabilities>(gdc::Entity,md::ls::PassMapEngineCapabilities &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF5245A8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassMapEngineCapabilities>(gdc::Entity,md::ls::PassMapEngineCapabilities &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassDeviceCapabilities>(gdc::Entity,md::ls::PassDeviceCapabilities &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF523B40;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassDeviceCapabilities>(gdc::Entity,md::ls::PassDeviceCapabilities &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassRoutelineMaskConfiguration>(gdc::Entity,md::ls::PassRoutelineMaskConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &off_1EF5259A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassRoutelineMaskConfiguration>(gdc::Entity,md::ls::PassRoutelineMaskConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassShadowConfiguration>(gdc::Entity,md::ls::PassShadowConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::operator()(uint64_t a1, int8x8_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 12);
  unint64_t v4 = (void *)gdc::Registry::storage<md::ls::PassShadowConfiguration>(a2);
  char v5 = *(unsigned char *)(a1 + 8);
  uint64_t v36 = v3;
  uint64_t v6 = geo::sparse_set<gdc::Entity,unsigned short,256ul>::insert(v4 + 4, (uint64_t)&v36);
  if (v7)
  {
    uint64_t v13 = (unsigned char *)v4[11];
    unint64_t v12 = v4[12];
    if ((unint64_t)v13 < v12)
    {
      unsigned char *v13 = v5;
      uint64_t v14 = (uint64_t)(v13 + 1);
LABEL_37:
      v4[11] = v14;
      uint64_t v9 = v4[31];
      goto LABEL_38;
    }
    unint64_t v15 = (unsigned char *)v4[10];
    unint64_t v16 = v13 - v15;
    uint64_t v17 = v13 - v15 + 1;
    if (v17 < 0) {
      goto LABEL_43;
    }
    unint64_t v18 = v12 - (void)v15;
    if (2 * v18 > v17) {
      uint64_t v17 = 2 * v18;
    }
    if (v18 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v19 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v19 = v17;
    }
    if (v19) {
      uint64_t v20 = (char *)operator new(v19);
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = &v20[v16];
    uint64_t v22 = &v20[v19];
    v20[v16] = v5;
    uint64_t v14 = (uint64_t)&v20[v16 + 1];
    if (v13 == v15)
    {
LABEL_35:
      v4[10] = v21;
      v4[11] = v14;
      v4[12] = v22;
      if (v15) {
        operator delete(v15);
      }
      goto LABEL_37;
    }
    if (v16 < 8 || (unint64_t)(v15 - v20) < 0x20) {
      goto LABEL_32;
    }
    if (v16 >= 0x20)
    {
      unint64_t v23 = v16 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v24 = (long long *)(v13 - 16);
      uint64_t v25 = &v20[v13 - 16 - v15];
      unint64_t v26 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v27 = *v24;
        *((_OWORD *)v25 - 1) = *(v24 - 1);
        *(_OWORD *)uint64_t v25 = v27;
        v25 -= 32;
        v24 -= 2;
        v26 -= 32;
      }
      while (v26);
      if (v16 == v23) {
        goto LABEL_34;
      }
      if ((v16 & 0x18) == 0)
      {
        v21 -= v23;
        v13 -= v23;
        goto LABEL_32;
      }
    }
    else
    {
      unint64_t v23 = 0;
    }
    unint64_t v28 = v23 - (v16 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v29 = &v13[-v23 - 8];
    int64_t v30 = v29 - v15;
    do
    {
      uint64_t v31 = *(void *)v29;
      v29 -= 8;
      *(void *)&v20[v30] = v31;
      v30 -= 8;
      v28 += 8;
    }
    while (v28);
    if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_34;
    }
    v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
    v13 -= v16 & 0xFFFFFFFFFFFFFFF8;
LABEL_32:
    uint64_t v32 = v21 - 1;
    do
    {
      char v33 = *--v13;
      *v32-- = v33;
    }
    while (v13 != v15);
LABEL_34:
    uint64_t v21 = v20;
    goto LABEL_35;
  }
  uint64_t v8 = (unsigned char *)(v4[10] + (((uint64_t)v6 - v4[7]) >> 3));
  *uint64_t v8 = v5;
  uint64_t v9 = v4[31];
  if (v8 != (unsigned char *)v4[11])
  {
    unint64_t v10 = (void *)v4[16];
    if (v10)
    {
      while (1)
      {
        char v38 = &v36;
        uint64_t v39 = 1;
        uint64_t v37 = v9;
        uint64_t v11 = v10[6];
        if (!v11) {
          break;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v11 + 48))(v11, &v37, &v38);
        unint64_t v10 = (void *)*v10;
        if (!v10) {
          return;
        }
      }
LABEL_42:
      std::__throw_bad_function_call[abi:nn180100]();
LABEL_43:
      abort();
    }
    return;
  }
LABEL_38:
  uint64_t v34 = (void *)v4[22];
  if (v34)
  {
    while (1)
    {
      char v38 = &v36;
      uint64_t v39 = 1;
      uint64_t v37 = v9;
      uint64_t v35 = v34[6];
      if (!v35) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t **))(*(void *)v35 + 48))(v35, &v37, &v38);
      uint64_t v34 = (void *)*v34;
      if (!v34) {
        return;
      }
    }
    goto LABEL_42;
  }
}

uint64_t std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassShadowConfiguration>(gdc::Entity,md::ls::PassShadowConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EF523D38;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassShadowConfiguration>(gdc::Entity,md::ls::PassShadowConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF523D38;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassShadowConfiguration>(gdc::Entity,md::ls::PassShadowConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::PassDOFConfiguration>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::PassDOFConfiguration>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassDOFConfiguration>(gdc::Entity,md::ls::PassDOFConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF523288;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassDOFConfiguration>(gdc::Entity,md::ls::PassDOFConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassSSAOConfiguration>(gdc::Entity,md::ls::PassSSAOConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF523750;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PassSSAOConfiguration>(gdc::Entity,md::ls::PassSSAOConfiguration &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

BOOL gdc::ComponentStorageWrapper<md::ls::FrameGraphRenderResourcesRegistry>::contains(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[4];
  if (a2 >> 39 >= (a1[5] - v2) >> 3 || (uint64_t v3 = *(void *)(v2 + 8 * (a2 >> 39))) == 0)
  {
    uint64_t v5 = a1[8];
    goto LABEL_8;
  }
  unint64_t v4 = *(unsigned __int16 *)(v3 + 2 * (HIDWORD(a2) & 0x7F));
  uint64_t v6 = a1[7];
  uint64_t v5 = a1[8];
  if (v4 >= (v5 - v6) >> 3)
  {
LABEL_8:
    uint64_t v7 = v5;
    return v7 != v5;
  }
  uint64_t v7 = v6 + 8 * v4;
  if (*(_DWORD *)(v7 + 4) != HIDWORD(a2)) {
    uint64_t v7 = a1[8];
  }
  return v7 != v5;
}

void gdc::ComponentStorageWrapper<md::ls::FrameGraphRenderResourcesRegistry>::~ComponentStorageWrapper(void *a1)
{
  gdc::ComponentStorageWrapper<md::overlayComponents::TileIsInView>::~ComponentStorageWrapper(a1);
  JUMPOUT(0x1A6239270);
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameGraphRenderResourcesRegistry>(gdc::Entity,md::ls::FrameGraphRenderResourcesRegistry &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF525CB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameGraphRenderResourcesRegistry>(gdc::Entity,md::ls::FrameGraphRenderResourcesRegistry &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameGraphRenderTarget>(gdc::Entity,md::ls::FrameGraphRenderTarget &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF523948;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameGraphRenderTarget>(gdc::Entity,md::ls::FrameGraphRenderTarget &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameGraphBuilder>(gdc::Entity,md::ls::FrameGraphBuilder &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF522B80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::FrameGraphBuilder>(gdc::Entity,md::ls::FrameGraphBuilder &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

__n128 std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PreviousResourceStamp>(gdc::Entity,md::ls::PreviousResourceStamp &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF5237E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<ecs2::AddComponent::AddComponent<md::ls::PreviousResourceStamp>(gdc::Entity,md::ls::PreviousResourceStamp &&)::{lambda(gdc::Registry &)#1},std::allocator<gdc::Registry &>,void ()(gdc::Registry)>::~__func()
{
}

void *std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareBuildFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareBuildFrameGraph>>,void ()(ecs2::Runtime &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF51AEE8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ecs2::ForwardToExecute<md::ita::PrepareBuildFrameGraph>,std::allocator<ecs2::ForwardToExecute<md::ita::PrepareBuildFrameGraph>>,void ()(ecs2::Runtime &)>::~__func()
{
}

void std::__shared_ptr_emplace<md::GEOVectorTileResource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581210;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::GEOVectorTileResource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581210;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::GEOVectorTileResourceDecoder::~GEOVectorTileResourceDecoder(md::GEOVectorTileResourceDecoder *this)
{
  *(void *)this = &unk_1EF54A240;
  *((void *)this + 1) = &unk_1EF5598F8;

  JUMPOUT(0x1A6239270);
}

{
  *(void *)this = &unk_1EF54A240;
  *((void *)this + 1) = &unk_1EF5598F8;
}

unint64_t md::TrafficDynamicResourceFetcher::tileKey(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 size];
  [v3 scale];
  unsigned int v4 = *(_DWORD *)(a1 + 556);
  uint64_t v5 = GEOTileKeyMake();
  unint64_t v6 = 128;
  if (v4 > 0x19 || ((1 << v4) & 0x200101C) == 0) {
    unint64_t v6 = (unint64_t)(v4 == 26) << 7;
  }
  unint64_t v8 = v6 | v5 & 0xFFFFFFFFFFFFFF7FLL;

  return v8;
}

void sub_1A2773FD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void md::TrafficDynamicResourceFetcher::~TrafficDynamicResourceFetcher(id *this)
{
  md::TiledGEOResourceFetcher::~TiledGEOResourceFetcher(this);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<md::TrafficDynamicTileDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::TrafficDynamicTileDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581E18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::TrafficDynamicTileDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581E18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL md::RouteAnnotationDedupingGroup::isResolved(md::RouteAnnotationDedupingGroup *this)
{
  return *((unsigned char *)this + 84)
      && *((unsigned int *)this + 20) <= (unint64_t)((uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 3);
}

void md::RouteAnnotationDedupingGroup::prepareForCollision(md::RouteAnnotationDedupingGroup *this, md::LabelManager *a2)
{
  *((void *)this + 6) = *((void *)this + 5);
  *((void *)this + 9) = 0;
  unsigned int v4 = (unint64_t *)*((void *)this + 1);
  uint64_t v5 = (unint64_t *)*((void *)this + 2);
  if (v4 != v5)
  {
    while (((*(uint64_t (**)(void))(*(void *)*v4 + 16))() & 1) != 0)
    {
      ++v4;
LABEL_4:
      if (v4 == v5) {
        goto LABEL_11;
      }
    }
    unint64_t v6 = v5 - 1;
    while (v6 != v4)
    {
      uint64_t v5 = v6;
      uint64_t v7 = *v6--;
      if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7))
      {
        unint64_t v8 = *v4;
        *v4++ = *v5;
        *uint64_t v5 = v8;
        goto LABEL_4;
      }
    }
  }
  uint64_t v5 = v4;
LABEL_11:
  uint64_t v9 = (int8x16_t *)*((void *)this + 1);
  int v10 = (*(uint64_t (**)(void))(**(void **)(*((void *)a2 + 21) + 32) + 8))(*(void *)(*((void *)a2 + 21) + 32));
  unint64_t v11 = 126 - 2 * __clz(((char *)v5 - (char *)v9) >> 3);
  if (!v10)
  {
    if (v5 == (unint64_t *)v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = v11;
    }
    std::__introsort<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **,false>((uint64_t)v9, v5, v28, 1);
    goto LABEL_111;
  }
  if (v5 == (unint64_t *)v9) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v11;
  }
  uint64_t v68 = v12;
  v69[0] = a2;
  std::__introsort<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **,false>(v9->i64, (uint64_t *)v5, (uint64_t)v69, v12, 1);
  *(_OWORD *)uint64_t v69 = 0u;
  *(_OWORD *)__p = 0u;
  int v71 = 1065353216;
  if (v5 != (unint64_t *)v9)
  {
    uint64_t v13 = (uint64_t *)v9;
    do
    {
      unint64_t v14 = *v13;
      if (v69[1])
      {
        unint64_t v15 = 0x9DDFEA08EB382D69 * (((8 * v14) + 8) ^ HIDWORD(v14));
        unint64_t v16 = 0x9DDFEA08EB382D69 * (HIDWORD(v14) ^ (v15 >> 47) ^ v15);
        unint64_t v17 = 0x9DDFEA08EB382D69 * (v16 ^ (v16 >> 47));
        uint8x8_t v18 = (uint8x8_t)vcnt_s8((int8x8_t)v69[1]);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          unint64_t v19 = v17;
          if ((void *)v17 >= v69[1]) {
            unint64_t v19 = v17 % (unint64_t)v69[1];
          }
        }
        else
        {
          unint64_t v19 = v17 & ((unint64_t)v69[1] - 1);
        }
        uint64_t v20 = (void *)*((void *)v69[0] + v19);
        if (v20)
        {
          uint64_t v21 = (void *)*v20;
          if (v21)
          {
            if (v18.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v23 = v21[1];
                if (v17 == v23)
                {
                  if (v21[2] == v14) {
                    goto LABEL_17;
                  }
                }
                else if ((v23 & ((uint64_t)v69[1] - 1)) != v19)
                {
                  goto LABEL_38;
                }
                uint64_t v21 = (void *)*v21;
                if (!v21) {
                  goto LABEL_38;
                }
              }
            }
            do
            {
              unint64_t v22 = v21[1];
              if (v17 == v22)
              {
                if (v21[2] == v14) {
                  goto LABEL_17;
                }
              }
              else
              {
                if ((void *)v22 >= v69[1]) {
                  v22 %= (unint64_t)v69[1];
                }
                if (v22 != v19) {
                  break;
                }
              }
              uint64_t v21 = (void *)*v21;
            }
            while (v21);
          }
        }
      }
LABEL_38:
      for (uint64_t i = (unint64_t *)(v13 + 1); i != v5; ++i)
      {
        unint64_t v25 = *i;
        unint64_t v26 = (float *)(*(uint64_t (**)(unint64_t))(*(void *)v14 + 24))(v14);
        long long v27 = (float *)(*(uint64_t (**)(unint64_t))(*(void *)v25 + 24))(v25);
        if (v26[2] > *v27 && *v26 < v27[2] && v26[3] > v27[1] && v26[1] < v27[3]) {
          std::__hash_table<md::LabelBase *,std::hash<md::LabelBase *>,std::equal_to<md::LabelBase *>,std::allocator<md::LabelBase *>>::__emplace_unique_key_args<md::LabelBase *,md::LabelBase *&>((uint64_t)v69, v25, v25);
        }
      }
LABEL_17:
      ++v13;
    }
    while (v13 != (uint64_t *)v5);
  }
  double v72 = (void **)a2;
  std::__introsort<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **,false>(v9->i64, (uint64_t *)v5, (uint64_t)&v72, v68, 1);
  double v72 = v69;
  if (v5 == (unint64_t *)v9) {
    goto LABEL_107;
  }
  uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v69[1]);
  v29.i16[0] = vaddlv_u8(v29);
  unint64_t v30 = (unint64_t)v69[1] - 1;
  while (1)
  {
    if (v69[1])
    {
      uint64_t v31 = v9->i64[0];
      unint64_t v32 = HIDWORD(v9->i64[0]);
      unint64_t v33 = 0x9DDFEA08EB382D69 * ((8 * v9->i64[0] + 8) ^ v32);
      unint64_t v34 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v32 ^ (v33 >> 47) ^ v33)) ^ ((0x9DDFEA08EB382D69 * (v32 ^ (v33 >> 47) ^ v33)) >> 47));
      if (v29.u32[0] > 1uLL)
      {
        unint64_t v35 = v34;
        if ((void *)v34 >= v69[1]) {
          unint64_t v35 = v34 % (unint64_t)v69[1];
        }
      }
      else
      {
        unint64_t v35 = v34 & v30;
      }
      uint64_t v36 = (void *)*((void *)v69[0] + v35);
      if (v36)
      {
        uint64_t v37 = (void *)*v36;
        if (v37) {
          break;
        }
      }
    }
LABEL_52:
    uint64_t v9 = (int8x16_t *)((char *)v9 + 8);
    if (v9 == (int8x16_t *)v5) {
      goto LABEL_107;
    }
  }
  if (v29.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v38 = v37[1];
      if (v34 == v38)
      {
        if (v37[2] == v31) {
          goto LABEL_94;
        }
      }
      else if ((v38 & v30) != v35)
      {
        goto LABEL_52;
      }
      uint64_t v37 = (void *)*v37;
      if (!v37) {
        goto LABEL_52;
      }
    }
  }
  while (1)
  {
    unint64_t v39 = v37[1];
    if (v34 == v39) {
      break;
    }
    if ((void *)v39 >= v69[1]) {
      v39 %= (unint64_t)v69[1];
    }
    if (v39 != v35) {
      goto LABEL_52;
    }
LABEL_68:
    uint64_t v37 = (void *)*v37;
    if (!v37) {
      goto LABEL_52;
    }
  }
  if (v37[2] != v31) {
    goto LABEL_68;
  }
LABEL_94:
  if (v9 != (int8x16_t *)--v5)
  {
    unint64_t v40 = *v5;
    unint64_t v41 = HIDWORD(*v5);
    unint64_t v42 = 0x9DDFEA08EB382D69 * ((8 * *v5 + 8) ^ v41);
    unint64_t v43 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v41 ^ (v42 >> 47) ^ v42)) ^ ((0x9DDFEA08EB382D69 * (v41 ^ (v42 >> 47) ^ v42)) >> 47));
    if (v29.u32[0] > 1uLL)
    {
      unint64_t v44 = v43;
      if ((void *)v43 >= v69[1]) {
        unint64_t v44 = v43 % (unint64_t)v69[1];
      }
    }
    else
    {
      unint64_t v44 = v43 & v30;
    }
    uint64_t v45 = (void *)*((void *)v69[0] + v44);
    if (v45)
    {
      uint64_t v46 = (void *)*v45;
      if (v46)
      {
        if (v29.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v47 = v46[1];
            if (v43 == v47)
            {
              if (v46[2] == v40) {
                goto LABEL_94;
              }
            }
            else if ((v47 & v30) != v44)
            {
              goto LABEL_96;
            }
            uint64_t v46 = (void *)*v46;
            if (!v46) {
              goto LABEL_96;
            }
          }
        }
        do
        {
          unint64_t v48 = v46[1];
          if (v43 == v48)
          {
            if (v46[2] == v40) {
              goto LABEL_94;
            }
          }
          else
          {
            if ((void *)v48 >= v69[1]) {
              v48 %= (unint64_t)v69[1];
            }
            if (v48 != v44) {
              break;
            }
          }
          uint64_t v46 = (void *)*v46;
        }
        while (v46);
      }
    }
LABEL_96:
    if ((char *)v5 - (char *)v9 < 17)
    {
LABEL_103:
      uint64_t v53 = 0;
      unint64_t v49 = 0;
    }
    else
    {
      if ((((char *)v5 - (char *)v9) >> 3) + 1 >= 0xFFFFFFFFFFFFFFFLL) {
        unint64_t v49 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v49 = (((char *)v5 - (char *)v9) >> 3) + 1;
      }
      int v50 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
      while (1)
      {
        uint64_t v51 = operator new(8 * v49, v50);
        if (v51) {
          break;
        }
        BOOL v52 = v49 > 1;
        v49 >>= 1;
        if (!v52) {
          goto LABEL_103;
        }
      }
      uint64_t v53 = v51;
    }
    std::__stable_partition_impl<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,std::__wrap_iter<md::LabelBase **>,long,std::pair<md::LabelBase **,long>>(v9, v5, &v72, (((char *)v5 - (char *)v9) >> 3) + 1, v53, v49);
    if (v53) {
      operator delete(v53);
    }
  }
LABEL_107:
  uint64_t v54 = __p[0];
  if (__p[0])
  {
    do
    {
      uint64_t v55 = (void *)*v54;
      operator delete(v54);
      uint64_t v54 = v55;
    }
    while (v55);
  }
  int v56 = v69[0];
  v69[0] = 0;
  if (v56) {
    operator delete(v56);
  }
LABEL_111:
  uint64_t v57 = (char *)*((void *)this + 1);
  uint64_t v58 = (char *)*((void *)this + 2);
  if (v57 != v58)
  {
    unint64_t v59 = v58 - v57 - 8;
    if (v59 > 7)
    {
      uint64_t v62 = 0;
      uint64_t v63 = (v59 >> 3) + 1;
      uint64_t v60 = v63 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        uint64_t v64 = &v57[8 * v62];
        uint64_t v66 = *(void *)v64;
        uint64_t v65 = *((void *)v64 + 1);
        *(_DWORD *)(v66 + 32) = v62;
        *(_DWORD *)(v65 + 32) = v62 + 1;
        v62 += 2;
      }
      while (v60 != v62);
      if (v63 != v60)
      {
        uint64_t v61 = &v57[8 * (v63 & 0x3FFFFFFFFFFFFFFELL)];
        goto LABEL_118;
      }
    }
    else
    {
      LODWORD(v60) = 0;
      uint64_t v61 = (char *)*((void *)this + 1);
      do
      {
LABEL_118:
        uint64_t v67 = *(void *)v61;
        v61 += 8;
        *(_DWORD *)(v67 + 32) = v60;
        LODWORD(v60) = v60 + 1;
      }
      while (v61 != v58);
    }
    *((void *)this + 9) = *(void *)v57;
  }
}

void sub_1A277478C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
void std::__introsort<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    uint64_t v241 = a2 - 1;
    unsigned int v244 = a2;
    uint64_t v236 = a2 - 3;
    int v237 = a2 - 2;
    unint64_t v11 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v12 = v11;
          uint64_t v13 = (char *)a2 - (char *)v11;
          uint64_t v14 = a2 - v11;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return;
              case 2:
                uint64_t v123 = *(void *)(*v241 + 8);
                uint64_t v124 = *(void *)(*v12 + 8);
                uint64_t v125 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
                double v126 = (*(double (**)(uint64_t))(*(void *)v125 + 72))(v125);
                LODWORD(v123) = vabdd_f64(v126, (*(double (**)(uint64_t))(*(void *)v123 + 632))(v123));
                uint64_t v127 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
                double v128 = (*(double (**)(uint64_t))(*(void *)v127 + 72))(v127);
                if (v123 < vabdd_f64(v128, (*(double (**)(uint64_t))(*(void *)v124 + 632))(v124)))
                {
                  uint64_t v129 = *v12;
                  uint64_t *v12 = *v241;
                  uint64_t *v241 = v129;
                }
                break;
              case 3:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(v12, v12 + 1, v241, a3);
                break;
              case 4:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(v12, v12 + 1, v12 + 2, v241, a3);
                break;
              case 5:
                std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **,0>(v12, v12 + 1, v12 + 2, v12 + 3, v241, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v13 <= 191)
          {
            unsigned int v130 = v12 + 1;
            BOOL v132 = v12 == a2 || v130 == a2;
            if (a5)
            {
              if (!v132)
              {
                uint64_t v133 = 0;
                int v134 = v12;
                do
                {
                  uint64_t v137 = *v134;
                  uint64_t v136 = v134[1];
                  int v134 = v130;
                  uint64_t v138 = *(void *)(v136 + 8);
                  uint64_t v139 = *(void *)(v137 + 8);
                  uint64_t v140 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
                  double v141 = (*(double (**)(uint64_t))(*(void *)v140 + 72))(v140);
                  unsigned int v142 = vabdd_f64(v141, (*(double (**)(uint64_t))(*(void *)v138 + 632))(v138));
                  uint64_t v143 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
                  double v144 = (*(double (**)(uint64_t))(*(void *)v143 + 72))(v143);
                  if (v142 < vabdd_f64(v144, (*(double (**)(uint64_t))(*(void *)v139 + 632))(v139)))
                  {
                    uint64_t v145 = *v134;
                    uint64_t v146 = v133;
                    do
                    {
                      *(uint64_t *)((char *)v12 + v146 + 8) = *(uint64_t *)((char *)v12 + v146);
                      if (!v146)
                      {
                        uint64_t v135 = v12;
                        goto LABEL_74;
                      }
                      uint64_t v147 = *(void *)(v145 + 8);
                      uint64_t v148 = *(void *)(*(uint64_t *)((char *)v12 + v146 - 8) + 8);
                      uint64_t v149 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
                      double v150 = (*(double (**)(uint64_t))(*(void *)v149 + 72))(v149);
                      LODWORD(v147) = vabdd_f64(v150, (*(double (**)(uint64_t))(*(void *)v147 + 632))(v147));
                      uint64_t v151 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
                      double v152 = (*(double (**)(uint64_t))(*(void *)v151 + 72))(v151);
                      v146 -= 8;
                    }
                    while (v147 < vabdd_f64(v152, (*(double (**)(uint64_t))(*(void *)v148 + 632))(v148)));
                    uint64_t v135 = (uint64_t *)((char *)v12 + v146 + 8);
LABEL_74:
                    *uint64_t v135 = v145;
                  }
                  unsigned int v130 = v134 + 1;
                  v133 += 8;
                }
                while (v134 + 1 != a2);
              }
            }
            else if (!v132)
            {
              do
              {
                uint64_t v217 = *v12;
                uint64_t v218 = v12[1];
                uint64_t v12 = v130;
                uint64_t v219 = *(void *)(v218 + 8);
                uint64_t v220 = *(void *)(v217 + 8);
                uint64_t v221 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
                double v222 = (*(double (**)(uint64_t))(*(void *)v221 + 72))(v221);
                unsigned int v223 = vabdd_f64(v222, (*(double (**)(uint64_t))(*(void *)v219 + 632))(v219));
                uint64_t v224 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
                double v225 = (*(double (**)(uint64_t))(*(void *)v224 + 72))(v224);
                if (v223 < vabdd_f64(v225, (*(double (**)(uint64_t))(*(void *)v220 + 632))(v220)))
                {
                  uint64_t v226 = *v12;
                  uint64_t v227 = v12;
                  do
                  {
                    double v228 = v227;
                    uint64_t v229 = *--v227;
                    *double v228 = v229;
                    uint64_t v230 = *(void *)(v226 + 8);
                    uint64_t v231 = *(void *)(*(v228 - 2) + 8);
                    uint64_t v232 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
                    double v233 = (*(double (**)(uint64_t))(*(void *)v232 + 72))(v232);
                    LODWORD(v230) = vabdd_f64(v233, (*(double (**)(uint64_t))(*(void *)v230 + 632))(v230));
                    uint64_t v234 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
                    double v235 = (*(double (**)(uint64_t))(*(void *)v234 + 72))(v234);
                  }
                  while (v230 < vabdd_f64(v235, (*(double (**)(uint64_t))(*(void *)v231+ 632))(v231)));
                  uint64_t *v227 = v226;
                }
                unsigned int v130 = v12 + 1;
              }
              while (v12 + 1 != a2);
            }
            return;
          }
          uint64_t v247 = v12;
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v153 = (unint64_t)(v14 - 2) >> 1;
              int64_t v242 = v153;
              do
              {
                int64_t v154 = v153;
                if (v242 >= v153)
                {
                  uint64_t v155 = (2 * v153) | 1;
                  long long v156 = &v247[v155];
                  if (2 * v153 + 2 < v14)
                  {
                    uint64_t v157 = *(void *)(*v156 + 8);
                    uint64_t v158 = *(void *)(v156[1] + 8);
                    uint64_t v159 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
                    double v160 = (*(double (**)(uint64_t))(*(void *)v159 + 72))(v159);
                    LODWORD(v157) = vabdd_f64(v160, (*(double (**)(uint64_t))(*(void *)v157 + 632))(v157));
                    uint64_t v161 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
                    double v162 = (*(double (**)(uint64_t))(*(void *)v161 + 72))(v161);
                    if (v157 < vabdd_f64(v162, (*(double (**)(uint64_t))(*(void *)v158 + 632))(v158)))
                    {
                      ++v156;
                      uint64_t v155 = 2 * v154 + 2;
                    }
                  }
                  unsigned int v163 = &v247[v154];
                  uint64_t v164 = *(void *)(*v156 + 8);
                  uint64_t v165 = *(void *)(*v163 + 8);
                  uint64_t v166 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
                  double v167 = (*(double (**)(uint64_t))(*(void *)v166 + 72))(v166);
                  unsigned int v168 = vabdd_f64(v167, (*(double (**)(uint64_t))(*(void *)v164 + 632))(v164));
                  uint64_t v169 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
                  double v170 = (*(double (**)(uint64_t))(*(void *)v169 + 72))(v169);
                  if (v168 >= vabdd_f64(v170, (*(double (**)(uint64_t))(*(void *)v165 + 632))(v165)))
                  {
                    int64_t v238 = v154;
                    uint64_t v240 = *v163;
                    do
                    {
                      uint64_t v177 = v156;
                      *unsigned int v163 = *v156;
                      if (v242 < v155) {
                        break;
                      }
                      uint64_t v178 = (2 * v155) | 1;
                      long long v156 = &v247[v178];
                      if (2 * v155 + 2 < v14)
                      {
                        uint64_t v179 = *(void *)(*v156 + 8);
                        uint64_t v180 = *(void *)(v156[1] + 8);
                        uint64_t v181 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
                        double v182 = (*(double (**)(uint64_t))(*(void *)v181 + 72))(v181);
                        LODWORD(v179) = vabdd_f64(v182, (*(double (**)(uint64_t))(*(void *)v179 + 632))(v179));
                        uint64_t v183 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
                        double v184 = (*(double (**)(uint64_t))(*(void *)v183 + 72))(v183);
                        if (v179 < vabdd_f64(v184, (*(double (**)(uint64_t))(*(void *)v180 + 632))(v180)))
                        {
                          ++v156;
                          uint64_t v178 = 2 * v155 + 2;
                        }
                      }
                      uint64_t v171 = *(void *)(*v156 + 8);
                      uint64_t v172 = *(void *)(v240 + 8);
                      uint64_t v173 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
                      double v174 = (*(double (**)(uint64_t))(*(void *)v173 + 72))(v173);
                      LODWORD(v171) = vabdd_f64(v174, (*(double (**)(uint64_t))(*(void *)v171 + 632))(v171));
                      uint64_t v175 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
                      double v176 = (*(double (**)(uint64_t))(*(void *)v175 + 72))(v175);
                      unsigned int v163 = v177;
                      uint64_t v155 = v178;
                    }
                    while (v171 >= vabdd_f64(v176, (*(double (**)(uint64_t))(*(void *)v172 + 632))(v172)));
                    *uint64_t v177 = v240;
                    int64_t v154 = v238;
                  }
                }
                int64_t v153 = v154 - 1;
              }
              while (v154);
              uint64_t v185 = (unint64_t)v13 >> 3;
              uint64_t v186 = v244;
              uint64_t v187 = v247;
              do
              {
                uint64_t v189 = 0;
                uint64_t v243 = *v187;
                unsigned int v245 = v186;
                double v190 = v187;
                do
                {
                  uint64_t v191 = (uint64_t)&v190[v189 + 1];
                  uint64_t v192 = (2 * v189) | 1;
                  uint64_t v193 = 2 * v189 + 2;
                  if (v193 < v185)
                  {
                    uint64_t v194 = *(void *)(*(void *)v191 + 8);
                    uint64_t v195 = *(void *)(v190[v189 + 2] + 8);
                    uint64_t v196 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
                    double v197 = (*(double (**)(uint64_t))(*(void *)v196 + 72))(v196);
                    LODWORD(v194) = vabdd_f64(v197, (*(double (**)(uint64_t))(*(void *)v194 + 632))(v194));
                    uint64_t v198 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
                    double v199 = (*(double (**)(uint64_t))(*(void *)v198 + 72))(v198);
                    if (v194 < vabdd_f64(v199, (*(double (**)(uint64_t))(*(void *)v195 + 632))(v195)))
                    {
                      v191 += 8;
                      uint64_t v192 = v193;
                    }
                  }
                  *double v190 = *(void *)v191;
                  double v190 = (void *)v191;
                  uint64_t v189 = v192;
                }
                while (v192 <= (uint64_t)((unint64_t)(v185 - 2) >> 1));
                uint64_t v186 = v245 - 1;
                if ((uint64_t *)v191 == v245 - 1)
                {
                  *(void *)uint64_t v191 = v243;
                  uint64_t v187 = v247;
                }
                else
                {
                  *(void *)uint64_t v191 = *v186;
                  *uint64_t v186 = v243;
                  uint64_t v187 = v247;
                  uint64_t v200 = v191 - (void)v247 + 8;
                  if (v200 >= 9)
                  {
                    unint64_t v201 = (((unint64_t)v200 >> 3) - 2) >> 1;
                    uint64_t v202 = &v247[v201];
                    uint64_t v203 = *(void *)(*v202 + 8);
                    uint64_t v204 = *(void *)(*(void *)v191 + 8);
                    uint64_t v205 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
                    double v206 = (*(double (**)(uint64_t))(*(void *)v205 + 72))(v205);
                    LODWORD(v203) = vabdd_f64(v206, (*(double (**)(uint64_t))(*(void *)v203 + 632))(v203));
                    uint64_t v207 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
                    double v208 = (*(double (**)(uint64_t))(*(void *)v207 + 72))(v207);
                    if (v203 < vabdd_f64(v208, (*(double (**)(uint64_t))(*(void *)v204 + 632))(v204)))
                    {
                      uint64_t v246 = v245 - 1;
                      uint64_t v209 = *(void *)v191;
                      do
                      {
                        uint64_t v210 = v202;
                        *(void *)uint64_t v191 = *v202;
                        if (!v201) {
                          break;
                        }
                        unint64_t v201 = (v201 - 1) >> 1;
                        uint64_t v202 = &v247[v201];
                        uint64_t v211 = *(void *)(*v202 + 8);
                        uint64_t v212 = *(void *)(v209 + 8);
                        uint64_t v213 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
                        double v214 = (*(double (**)(uint64_t))(*(void *)v213 + 72))(v213);
                        LODWORD(v211) = vabdd_f64(v214, (*(double (**)(uint64_t))(*(void *)v211 + 632))(v211));
                        uint64_t v215 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
                        double v216 = (*(double (**)(uint64_t))(*(void *)v215 + 72))(v215);
                        uint64_t v191 = (uint64_t)v210;
                      }
                      while (v211 < vabdd_f64(v216, (*(double (**)(uint64_t))(*(void *)v212 + 632))(v212)));
                      *uint64_t v210 = v209;
                      uint64_t v186 = v246;
                    }
                  }
                }
              }
              while (v185-- > 2);
            }
            return;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          uint64_t v16 = &v12[(unint64_t)v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(v16, v12, v241, a3);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(v12, v16, v241, a3);
            uint64_t v17 = v15;
            uint64_t v18 = &v12[v15];
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(v12 + 1, v18 - 1, v237, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(v12 + 2, &v12[v17 + 1], v236, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(v18 - 1, v16, &v12[v17 + 1], a3);
            uint64_t v19 = *v12;
            uint64_t *v12 = *v18;
            *uint64_t v18 = v19;
          }
          --a4;
          if (a5) {
            break;
          }
          uint64_t v20 = *(void *)(*(v12 - 1) + 8);
          uint64_t v21 = *(void *)(*v12 + 8);
          uint64_t v22 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
          double v23 = (*(double (**)(uint64_t))(*(void *)v22 + 72))(v22);
          unsigned int v24 = vabdd_f64(v23, (*(double (**)(uint64_t))(*(void *)v20 + 632))(v20));
          uint64_t v25 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
          double v26 = (*(double (**)(uint64_t))(*(void *)v25 + 72))(v25);
          if (v24 < vabdd_f64(v26, (*(double (**)(uint64_t))(*(void *)v21 + 632))(v21))) {
            break;
          }
          unint64_t v11 = v12;
          uint64_t v72 = *v12;
          uint64_t v73 = *(void *)(v72 + 8);
          uint64_t v74 = *(void *)(*v241 + 8);
          uint64_t v75 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
          double v76 = (*(double (**)(uint64_t))(*(void *)v75 + 72))(v75);
          unsigned int v77 = vabdd_f64(v76, (*(double (**)(uint64_t))(*(void *)v73 + 632))(v73));
          uint64_t v78 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
          double v79 = (*(double (**)(uint64_t))(*(void *)v78 + 72))(v78);
          if (v77 >= vabdd_f64(v79, (*(double (**)(uint64_t))(*(void *)v74 + 632))(v74)))
          {
            unsigned int v88 = v11 + 1;
            do
            {
              unint64_t v11 = v88;
              if (v88 >= v244) {
                break;
              }
              ++v88;
              uint64_t v89 = *(void *)(v72 + 8);
              uint64_t v90 = *(void *)(*v11 + 8);
              uint64_t v91 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
              double v92 = (*(double (**)(uint64_t))(*(void *)v91 + 72))(v91);
              unsigned int v93 = vabdd_f64(v92, (*(double (**)(uint64_t))(*(void *)v89 + 632))(v89));
              uint64_t v94 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
              double v95 = (*(double (**)(uint64_t))(*(void *)v94 + 72))(v94);
            }
            while (v93 >= vabdd_f64(v95, (*(double (**)(uint64_t))(*(void *)v90 + 632))(v90)));
          }
          else
          {
            do
            {
              uint64_t v80 = v11[1];
              ++v11;
              uint64_t v81 = *(void *)(v72 + 8);
              uint64_t v82 = *(void *)(v80 + 8);
              uint64_t v83 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
              double v84 = (*(double (**)(uint64_t))(*(void *)v83 + 72))(v83);
              unsigned int v85 = vabdd_f64(v84, (*(double (**)(uint64_t))(*(void *)v81 + 632))(v81));
              uint64_t v86 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
              double v87 = (*(double (**)(uint64_t))(*(void *)v86 + 72))(v86);
            }
            while (v85 >= vabdd_f64(v87, (*(double (**)(uint64_t))(*(void *)v82 + 632))(v82)));
          }
          double v96 = v244;
          if (v11 < v244)
          {
            double v96 = v244;
            do
            {
              uint64_t v97 = *--v96;
              uint64_t v98 = *(void *)(v72 + 8);
              uint64_t v99 = *(void *)(v97 + 8);
              uint64_t v100 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
              double v101 = (*(double (**)(uint64_t))(*(void *)v100 + 72))(v100);
              unsigned int v102 = vabdd_f64(v101, (*(double (**)(uint64_t))(*(void *)v98 + 632))(v98));
              uint64_t v103 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
              double v104 = (*(double (**)(uint64_t))(*(void *)v103 + 72))(v103);
            }
            while (v102 < vabdd_f64(v104, (*(double (**)(uint64_t))(*(void *)v99 + 632))(v99)));
          }
          while (v11 < v96)
          {
            uint64_t v105 = *v11;
            uint64_t *v11 = *v96;
            *double v96 = v105;
            do
            {
              uint64_t v106 = v11[1];
              ++v11;
              uint64_t v107 = *(void *)(v72 + 8);
              uint64_t v108 = *(void *)(v106 + 8);
              uint64_t v109 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
              double v110 = (*(double (**)(uint64_t))(*(void *)v109 + 72))(v109);
              unsigned int v111 = vabdd_f64(v110, (*(double (**)(uint64_t))(*(void *)v107 + 632))(v107));
              uint64_t v112 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
              double v113 = (*(double (**)(uint64_t))(*(void *)v112 + 72))(v112);
            }
            while (v111 >= vabdd_f64(v113, (*(double (**)(uint64_t))(*(void *)v108 + 632))(v108)));
            do
            {
              uint64_t v114 = *--v96;
              uint64_t v115 = *(void *)(v72 + 8);
              uint64_t v116 = *(void *)(v114 + 8);
              uint64_t v117 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
              double v118 = (*(double (**)(uint64_t))(*(void *)v117 + 72))(v117);
              unsigned int v119 = vabdd_f64(v118, (*(double (**)(uint64_t))(*(void *)v115 + 632))(v115));
              uint64_t v120 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
              double v121 = (*(double (**)(uint64_t))(*(void *)v120 + 72))(v120);
            }
            while (v119 < vabdd_f64(v121, (*(double (**)(uint64_t))(*(void *)v116 + 632))(v116)));
          }
          uint64_t v122 = v11 - 1;
          BOOL v5 = v11 - 1 >= v247;
          BOOL v6 = v11 - 1 == v247;
          if (v11 - 1 != v247) {
            *uint64_t v247 = *v122;
          }
          a5 = 0;
          *uint64_t v122 = v72;
          a2 = v244;
        }
        uint64_t v27 = *v12;
        int v28 = v12;
        do
        {
          uint64_t v29 = v28;
          uint64_t v30 = v28[1];
          ++v28;
          uint64_t v31 = *(void *)(v30 + 8);
          uint64_t v32 = *(void *)(v27 + 8);
          uint64_t v33 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
          double v34 = (*(double (**)(uint64_t))(*(void *)v33 + 72))(v33);
          unsigned int v35 = vabdd_f64(v34, (*(double (**)(uint64_t))(*(void *)v31 + 632))(v31));
          uint64_t v36 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
          double v37 = (*(double (**)(uint64_t))(*(void *)v36 + 72))(v36);
        }
        while (v35 < vabdd_f64(v37, (*(double (**)(uint64_t))(*(void *)v32 + 632))(v32)));
        if (v29 == v12)
        {
          a2 = v244;
          do
          {
            if (v28 >= a2) {
              break;
            }
            uint64_t v46 = *--a2;
            uint64_t v47 = *(void *)(v46 + 8);
            uint64_t v48 = *(void *)(v27 + 8);
            uint64_t v49 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
            double v50 = (*(double (**)(uint64_t))(*(void *)v49 + 72))(v49);
            unsigned int v51 = vabdd_f64(v50, (*(double (**)(uint64_t))(*(void *)v47 + 632))(v47));
            uint64_t v52 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
            double v53 = (*(double (**)(uint64_t))(*(void *)v52 + 72))(v52);
          }
          while (v51 >= vabdd_f64(v53, (*(double (**)(uint64_t))(*(void *)v48 + 632))(v48)));
        }
        else
        {
          do
          {
            uint64_t v38 = *--a2;
            uint64_t v39 = *(void *)(v38 + 8);
            uint64_t v40 = *(void *)(v27 + 8);
            uint64_t v41 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
            double v42 = (*(double (**)(uint64_t))(*(void *)v41 + 72))(v41);
            unsigned int v43 = vabdd_f64(v42, (*(double (**)(uint64_t))(*(void *)v39 + 632))(v39));
            uint64_t v44 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
            double v45 = (*(double (**)(uint64_t))(*(void *)v44 + 72))(v44);
          }
          while (v43 >= vabdd_f64(v45, (*(double (**)(uint64_t))(*(void *)v40 + 632))(v40)));
        }
        if (v28 < a2)
        {
          uint64_t v54 = v28;
          double v55 = a2;
          do
          {
            uint64_t v56 = *v54;
            *uint64_t v54 = *v55;
            *double v55 = v56;
            do
            {
              uint64_t v29 = v54;
              uint64_t v57 = v54[1];
              ++v54;
              uint64_t v58 = *(void *)(v57 + 8);
              uint64_t v59 = *(void *)(v27 + 8);
              uint64_t v60 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
              double v61 = (*(double (**)(uint64_t))(*(void *)v60 + 72))(v60);
              LODWORD(v58) = vabdd_f64(v61, (*(double (**)(uint64_t))(*(void *)v58 + 632))(v58));
              uint64_t v62 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
              double v63 = (*(double (**)(uint64_t))(*(void *)v62 + 72))(v62);
            }
            while (v58 < vabdd_f64(v63, (*(double (**)(uint64_t))(*(void *)v59 + 632))(v59)));
            do
            {
              uint64_t v64 = *--v55;
              uint64_t v65 = *(void *)(v64 + 8);
              uint64_t v66 = *(void *)(v27 + 8);
              uint64_t v67 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
              double v68 = (*(double (**)(uint64_t))(*(void *)v67 + 72))(v67);
              LODWORD(v65) = vabdd_f64(v68, (*(double (**)(uint64_t))(*(void *)v65 + 632))(v65));
              uint64_t v69 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
              double v70 = (*(double (**)(uint64_t))(*(void *)v69 + 72))(v69);
            }
            while (v65 >= vabdd_f64(v70, (*(double (**)(uint64_t))(*(void *)v66 + 632))(v66)));
          }
          while (v54 < v55);
        }
        a1 = v247;
        if (v29 != v247) {
          *uint64_t v247 = *v29;
        }
        *uint64_t v29 = v27;
        BOOL v5 = v28 >= a2;
        a2 = v244;
        if (v5) {
          break;
        }
LABEL_31:
        std::__introsort<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **,false>(v247, v29, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t v11 = v29 + 1;
      }
      BOOL v71 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(v247, v29, a3);
      unint64_t v11 = v29 + 1;
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(v29 + 1, v244, a3))
      {
        break;
      }
      if (!v71) {
        goto LABEL_31;
      }
    }
    a2 = v29;
    if (!v71) {
      continue;
    }
    break;
  }
}

uint64_t *std::__stable_partition_impl<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,std::__wrap_iter<md::LabelBase **>,long,std::pair<md::LabelBase **,long>>(int8x16_t *a1, unint64_t *a2, void **a3, uint64_t a4, void *a5, uint64_t a6)
{
  if (a4 == 3)
  {
    unint64_t v11 = &a1->i64[1];
    unint64_t v12 = a1->u64[1];
    if (!std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(*a3, v12))
    {
      uint64_t v10 = a1->i64[0];
      a1->i64[0] = v12;
      a1->i64[1] = v10;
      a1->i64[1] = *a2;
      goto LABEL_21;
    }
    a1->i64[1] = *a2;
    *a2 = v12;
    *a1 = vextq_s8(*a1, *a1, 8uLL);
  }
  else
  {
    if (a4 == 2)
    {
      uint64_t v10 = a1->i64[0];
      a1->i64[0] = *a2;
LABEL_21:
      *a2 = v10;
      return (uint64_t *)a2;
    }
    uint64_t v14 = (char *)a5;
    if (a6 >= a4)
    {
      uint64_t v20 = &a1->u64[1];
      *a5 = a1->i64[0];
      uint64_t v21 = a5 + 1;
      if (&a1->u64[1] == a2)
      {
        a1->i64[0] = *a2;
        unint64_t v11 = (uint64_t *)a2;
      }
      else
      {
        uint64_t v22 = (unint64_t *)a1;
        do
        {
          unint64_t v23 = *v20;
          if (std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(*a3, *v20))
          {
            *v21++ = v23;
          }
          else
          {
            *v22++ = v23;
          }
          ++v20;
        }
        while (v20 != a2);
        unint64_t *v22 = *a2;
        unint64_t v11 = (uint64_t *)(v22 + 1);
        if (v21 <= (unint64_t *)v14) {
          return v11;
        }
      }
      double v34 = (unint64_t *)(v14 + 8);
      if (v21 > (unint64_t *)v14 + 1) {
        double v34 = v21;
      }
      unint64_t v35 = (unint64_t)v34 + ~(unint64_t)v14;
      if (v35 < 0x18)
      {
        uint64_t v36 = v11;
      }
      else
      {
        uint64_t v36 = v11;
        if ((unint64_t)((char *)v11 - v14) >= 0x20)
        {
          uint64_t v37 = 0;
          uint64_t v38 = (v35 >> 3) + 1;
          uint64_t v39 = v38 & 0x3FFFFFFFFFFFFFFCLL;
          uint64_t v40 = v38 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            uint64_t v41 = &v11[v37];
            long long v42 = *(_OWORD *)&v14[v37 * 8 + 16];
            *(_OWORD *)uint64_t v41 = *(_OWORD *)&v14[v37 * 8];
            *((_OWORD *)v41 + 1) = v42;
            v37 += 4;
            v40 -= 4;
          }
          while (v40);
          if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL)) {
            return v11;
          }
          uint64_t v36 = &v11[v39];
          v14 += v39 * 8;
        }
      }
      do
      {
        uint64_t v43 = *(void *)v14;
        v14 += 8;
        *v36++ = v43;
      }
      while (v14 < (char *)v21);
      return v11;
    }
    if (a4 >= 0) {
      uint64_t v15 = a4;
    }
    else {
      uint64_t v15 = a4 + 1;
    }
    uint64_t v16 = v15 >> 1;
    uint64_t v17 = v15 >> 1;
    uint64_t v61 = v16;
    long long __src = &a1->i64[v17];
    uint64_t v18 = *a3;
    for (uint64_t i = v17 * 8 - 8; ; i -= 8)
    {
      if (!std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v18, *(unint64_t *)((char *)a1->u64 + i)))
      {
        uint64_t v25 = (uint64_t *)std::__stable_partition_impl<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,std::__wrap_iter<md::LabelBase **>,long,std::pair<md::LabelBase **,long>>(a1, &a1->i8[i], a3, v16, v14, a6);
        uint64_t v18 = *a3;
        goto LABEL_27;
      }
      if (!i) {
        break;
      }
      --v16;
    }
    uint64_t v25 = (uint64_t *)a1;
LABEL_27:
    unint64_t v11 = (uint64_t *)(a2 + 1);
    double v26 = (unint64_t *)__src;
    uint64_t v27 = a4 - v61;
    while (!std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v18, *v26))
    {
      if (++v26 == a2) {
        goto LABEL_32;
      }
      --v27;
    }
    unint64_t v11 = (uint64_t *)std::__stable_partition_impl<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_4 &,std::__wrap_iter<md::LabelBase **>,long,std::pair<md::LabelBase **,long>>(v26, a2, a3, v27, v14, a6);
LABEL_32:
    if (v25 != __src)
    {
      if (__src == v11)
      {
        return v25;
      }
      else if (v25 + 1 == __src)
      {
        uint64_t v44 = *v25;
        size_t v45 = (char *)v11 - (char *)__src;
        memmove(v25, __src, v45);
        unint64_t v11 = (uint64_t *)((char *)v25 + v45);
        uint64_t *v11 = v44;
      }
      else if (__src + 1 == v11)
      {
        uint64_t v46 = v11 - 1;
        uint64_t v47 = *(v11 - 1);
        unint64_t v11 = v25 + 1;
        if (v46 != v25) {
          memmove(v25 + 1, v25, (char *)v46 - (char *)v25);
        }
        *uint64_t v25 = v47;
      }
      else
      {
        uint64_t v28 = __src - v25;
        uint64_t v29 = v11 - __src;
        if (v28 == v29)
        {
          uint64_t v30 = v25 + 1;
          uint64_t v31 = (uint64_t)&a1->i64[v61 + 1];
          do
          {
            uint64_t v32 = *(v30 - 1);
            *(v30 - 1) = *(void *)(v31 - 8);
            *(void *)(v31 - 8) = v32;
            if (v30 == __src) {
              break;
            }
            ++v30;
            BOOL v33 = v31 == (void)v11;
            v31 += 8;
          }
          while (!v33);
          return __src;
        }
        else
        {
          uint64_t v48 = v11 - __src;
          uint64_t v49 = __src - v25;
          do
          {
            uint64_t v50 = v49;
            uint64_t v49 = v48;
            uint64_t v48 = v50 % v48;
          }
          while (v48);
          if (v49)
          {
            unsigned int v51 = &v25[v49];
            do
            {
              uint64_t v53 = *--v51;
              uint64_t v52 = v53;
              uint64_t v54 = &v51[v28];
              double v55 = v51;
              do
              {
                uint64_t v56 = v54;
                *double v55 = *v54;
                uint64_t v57 = v11 - v54;
                BOOL v58 = __OFSUB__(v28, v57);
                uint64_t v60 = v28 - v57;
                char v59 = (v60 < 0) ^ v58;
                uint64_t v54 = &v25[v60];
                if (v59) {
                  uint64_t v54 = &v56[v28];
                }
                double v55 = v56;
              }
              while (v54 != v51);
              *uint64_t v56 = v52;
            }
            while (v51 != v25);
          }
          return &v25[v29];
        }
      }
    }
  }
  return v11;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **,false>(uint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v7 = (unint64_t *)result;
LABEL_2:
  unint64_t v8 = a2;
  uint64_t v9 = a2 - 1;
  uint64_t i = v7;
  while (1)
  {
    unint64_t v11 = i;
    uint64_t v12 = (char *)v8 - (char *)i;
    unint64_t v13 = v8 - i;
    v379 = i;
    if (v5 || !v4) {
      break;
    }
    if (v12 <= 191)
    {
      uint64_t v212 = i + 1;
      BOOL v214 = i == v8 || v212 == v8;
      if (a4)
      {
        if (v214) {
          return result;
        }
        uint64_t v215 = 0;
        while (2)
        {
          uint64_t v217 = i;
          uint64_t i = v212;
          unint64_t v218 = *v217;
          unint64_t v219 = v217[1];
          uint64_t v220 = *(void *)(v219 + 8);
          uint64_t v221 = *(void *)(*v217 + 8);
          if (v220 != v221)
          {
            int v222 = (*(uint64_t (**)(void))(*(void *)v220 + 640))(*(void *)(v219 + 8));
            if (v222 == (*(unsigned int (**)(uint64_t))(*(void *)v221 + 640))(v221))
            {
              __n128 result = md::Label::collisionPriorityCmp(v219, 0, v218, 0, 0);
              unint64_t v11 = v379;
              if ((result & 1) == 0) {
                goto LABEL_324;
              }
              goto LABEL_332;
            }
            unint64_t v11 = v379;
          }
          unsigned int v223 = (*(uint64_t (**)(uint64_t))(*(void *)v220 + 640))(v220);
          __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)v221 + 640))(v221);
          if (v223 <= result) {
            goto LABEL_324;
          }
LABEL_332:
          unint64_t v224 = v217[1];
          v217[1] = *v217;
          double v216 = v11;
          if (v217 == v11) {
            goto LABEL_323;
          }
          v386 = i;
          uint64_t v225 = v215;
LABEL_336:
          uint64_t v226 = (unint64_t *)((char *)v11 + v225);
          unint64_t v227 = *(unint64_t *)((char *)v11 + v225 - 8);
          uint64_t v228 = *(void *)(v224 + 8);
          uint64_t v229 = *(void *)(v227 + 8);
          if (v228 == v229)
          {
LABEL_339:
            unsigned int v231 = (*(uint64_t (**)(uint64_t))(*(void *)v228 + 640))(v228);
            __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)v229 + 640))(v229);
            if (v231 <= result)
            {
              double v216 = v217;
              goto LABEL_322;
            }
          }
          else
          {
            int v230 = (*(uint64_t (**)(void))(*(void *)v228 + 640))(*(void *)(v224 + 8));
            if (v230 != (*(unsigned int (**)(uint64_t))(*(void *)v229 + 640))(v229))
            {
              unint64_t v11 = v379;
              goto LABEL_339;
            }
            __n128 result = md::Label::collisionPriorityCmp(v224, 0, v227, 0, 0);
            unint64_t v11 = v379;
            if ((result & 1) == 0)
            {
              double v216 = (unint64_t *)((char *)v379 + v225);
LABEL_322:
              uint64_t i = v386;
LABEL_323:
              *double v216 = v224;
LABEL_324:
              uint64_t v212 = i + 1;
              v215 += 8;
              if (i + 1 == a2) {
                return result;
              }
              continue;
            }
          }
          break;
        }
        --v217;
        void *v226 = *(v226 - 1);
        v225 -= 8;
        if (!v225)
        {
          double v216 = v11;
          goto LABEL_322;
        }
        goto LABEL_336;
      }
      if (v214) {
        return result;
      }
      while (2)
      {
        v328 = v11;
        unint64_t v11 = v212;
        unint64_t v329 = *v328;
        unint64_t v330 = v328[1];
        uint64_t v331 = *(void *)(v330 + 8);
        uint64_t v332 = *(void *)(*v328 + 8);
        if (v331 != v332)
        {
          v333 = v212;
          int v334 = (*(uint64_t (**)(void))(*(void *)v331 + 640))(*(void *)(v330 + 8));
          if (v334 == (*(unsigned int (**)(uint64_t))(*(void *)v332 + 640))(v332))
          {
            __n128 result = md::Label::collisionPriorityCmp(v330, 0, v329, 0, 0);
            unint64_t v11 = v333;
            if (result) {
              break;
            }
            goto LABEL_463;
          }
          unint64_t v11 = v333;
        }
        unsigned int v335 = (*(uint64_t (**)(uint64_t))(*(void *)v331 + 640))(v331);
        __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)v332 + 640))(v332);
        if (v335 <= result)
        {
LABEL_463:
          uint64_t v212 = v11 + 1;
          if (v11 + 1 == a2) {
            return result;
          }
          continue;
        }
        break;
      }
      v336 = v11;
      unint64_t v337 = *v11;
      while (1)
      {
        while (1)
        {
          while (1)
          {
            while (1)
            {
              while (1)
              {
                while (1)
                {
                  while (1)
                  {
                    while (1)
                    {
LABEL_473:
                      while (1)
                      {
                        v339 = v328;
                        v328[1] = *v328;
                        unint64_t v341 = *--v328;
                        unint64_t v340 = v341;
                        uint64_t v342 = *(void *)(v337 + 8);
                        uint64_t v343 = *(void *)(v341 + 8);
                        if (v342 != v343)
                        {
                          int v344 = (*(uint64_t (**)(void))(*(void *)v342 + 640))(*(void *)(v337 + 8));
                          __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)v343 + 640))(v343);
                          if (v344 == result) {
                            break;
                          }
                        }
                        unsigned int v338 = (*(uint64_t (**)(uint64_t))(*(void *)v342 + 640))(v342);
                        __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)v343 + 640))(v343);
                        if (v338 <= result) {
                          goto LABEL_462;
                        }
                      }
                      unsigned __int8 v345 = atomic_load((unsigned __int8 *)(v337 + 1240));
                      unsigned __int8 v346 = atomic_load((unsigned __int8 *)(v340 + 1240));
                      if ((v345 & 1) == (v346 & 1)) {
                        break;
                      }
                      unsigned __int8 v347 = atomic_load((unsigned __int8 *)(v337 + 1240));
                      if ((v347 & 1) == 0) {
                        goto LABEL_462;
                      }
                    }
                    uint64_t v348 = *(unsigned char *)(v337 + 1248) ? 724 : 720;
                    int v349 = *(_DWORD *)(v337 + v348);
                    uint64_t v350 = *(unsigned char *)(v340 + 1248) ? 724 : 720;
                    int v351 = *(_DWORD *)(v340 + v350);
                    if (v349 == v351) {
                      break;
                    }
                    if (v349 >= v351) {
                      goto LABEL_462;
                    }
                  }
                  float v352 = *(float *)(v337 + 728);
                  float v353 = *(float *)(v340 + 728);
                  if (v352 == v353) {
                    break;
                  }
                  if (v352 >= v353) {
                    goto LABEL_462;
                  }
                }
                float v354 = *(float *)(v337 + 740);
                float v355 = *(float *)(v340 + 740);
                if (v354 == v355) {
                  break;
                }
                if (v354 >= v355) {
                  goto LABEL_462;
                }
              }
              int v356 = *(_DWORD *)(v337 + 60);
              int v357 = *(_DWORD *)(v340 + 60);
              if (v356 == v357) {
                break;
              }
              if (v356 >= v357) {
                goto LABEL_462;
              }
            }
            unsigned int v358 = *(unsigned __int8 *)(v337 + 1222);
            unsigned int v359 = *(unsigned __int8 *)(v340 + 1222);
            if (v358 == v359) {
              break;
            }
            if (v358 <= v359) {
              goto LABEL_462;
            }
          }
          float v360 = *(float *)(v337 + 196);
          float v361 = *(float *)(v340 + 196);
          if (v360 == v361) {
            break;
          }
          if (v360 >= v361) {
            goto LABEL_462;
          }
        }
        uint64_t v362 = (*(uint64_t (**)(void, void))(**(void **)(v337 + 8) + 472))(*(void *)(v337 + 8), 0);
        __n128 result = (*(uint64_t (**)(void))(**(void **)(v340 + 8) + 472))();
        LOBYTE(v363) = v362 != 0;
        if (v362 | result)
        {
          if (!v362 || !result) {
            goto LABEL_524;
          }
          if (*(char *)(v362 + 23) < 0)
          {
            uint64_t v365 = v362;
            uint64_t v362 = *(void *)v362;
            size_t v364 = *(void *)(v365 + 8);
          }
          else
          {
            size_t v364 = *(unsigned __int8 *)(v362 + 23);
          }
          int v366 = *(char *)(result + 23);
          if (v366 >= 0) {
            size_t v367 = *(unsigned __int8 *)(result + 23);
          }
          else {
            size_t v367 = *(void *)(result + 8);
          }
          if (v366 >= 0) {
            v368 = (const void *)result;
          }
          else {
            v368 = *(const void **)result;
          }
          if (v367 >= v364) {
            size_t v369 = v364;
          }
          else {
            size_t v369 = v367;
          }
          __n128 result = memcmp((const void *)v362, v368, v369);
          unsigned int v370 = v367 < v364;
          if (v364 < v367) {
            unsigned int v370 = -1;
          }
          if (result) {
            unsigned int v370 = result;
          }
          if (v370) {
            break;
          }
        }
        if (v337 >= v340)
        {
LABEL_462:
          unint64_t *v339 = v337;
          unint64_t v11 = v336;
          goto LABEL_463;
        }
      }
      unsigned int v363 = v370 >> 31;
LABEL_524:
      if ((v363 & 1) == 0) {
        goto LABEL_462;
      }
      goto LABEL_473;
    }
    if (!a3)
    {
      if (i == v8) {
        return result;
      }
      unint64_t v374 = (char *)v8 - (char *)i;
      int64_t v232 = (v13 - 2) >> 1;
      int64_t v233 = v232;
      unint64_t v373 = v13;
      int64_t v376 = v232;
      while (2)
      {
        int64_t v235 = v233;
        if (v232 < v233) {
          goto LABEL_346;
        }
        uint64_t v236 = (2 * v233) | 1;
        int v237 = &v11[v236];
        if (2 * v233 + 2 < (uint64_t)v13)
        {
          unint64_t v238 = *v237;
          v387 = &v11[v236];
          uint64_t v240 = v237 + 1;
          unint64_t v239 = v237[1];
          uint64_t v241 = *(void *)(*v237 + 8);
          uint64_t v242 = *(void *)(v239 + 8);
          if (v241 == v242) {
            goto LABEL_354;
          }
          int v243 = (*(uint64_t (**)(void))(*(void *)v241 + 640))(*(void *)(v238 + 8));
          if (v243 == (*(unsigned int (**)(uint64_t))(*(void *)v242 + 640))(v242))
          {
            BOOL v244 = md::Label::collisionPriorityCmp(v238, 0, v239, 0, 0);
            unint64_t v11 = v379;
            int v237 = v387;
            if (v244) {
              goto LABEL_355;
            }
          }
          else
          {
            unint64_t v11 = v379;
LABEL_354:
            unsigned int v245 = (*(uint64_t (**)(uint64_t))(*(void *)v241 + 640))(v241);
            unsigned int v246 = (*(uint64_t (**)(uint64_t))(*(void *)v242 + 640))(v242);
            int v237 = v387;
            if (v245 > v246)
            {
LABEL_355:
              int v237 = v240;
              uint64_t v236 = 2 * v235 + 2;
            }
          }
        }
        int64_t v380 = v235;
        unint64_t v247 = v11[v235];
        v388 = v237;
        unint64_t v248 = *v237;
        uint64_t v249 = *(void *)(*v237 + 8);
        uint64_t v250 = *(void *)(v247 + 8);
        if (v249 == v250)
        {
          int64_t v232 = v376;
          goto LABEL_362;
        }
        int v251 = (*(uint64_t (**)(uint64_t))(*(void *)v249 + 640))(v249);
        int64_t v232 = v376;
        if (v251 == (*(unsigned int (**)(uint64_t))(*(void *)v250 + 640))(v250))
        {
          __n128 result = md::Label::collisionPriorityCmp(v248, 0, v247, 0, 0);
          unint64_t v11 = v379;
          if ((result & 1) == 0) {
            goto LABEL_363;
          }
        }
        else
        {
          unint64_t v11 = v379;
LABEL_362:
          unsigned int v252 = (*(uint64_t (**)(uint64_t))(*(void *)v249 + 640))(v249);
          __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)v250 + 640))(v250);
          if (v252 <= result)
          {
LABEL_363:
            unint64_t v383 = v11[v235];
            int v253 = v388;
            v11[v235] = *v388;
            if (v232 < v236)
            {
              uint64_t v234 = v388;
LABEL_345:
              int64_t v235 = v380;
              *uint64_t v234 = v383;
              goto LABEL_346;
            }
            while (2)
            {
              uint64_t v254 = 2 * v236;
              uint64_t v236 = (2 * v236) | 1;
              uint64_t v234 = &v11[v236];
              uint64_t v255 = v254 + 2;
              v389 = v253;
              if (v254 + 2 < (uint64_t)v13)
              {
                unint64_t v256 = v234[1];
                unint64_t v257 = *v234;
                uint64_t v258 = *(void *)(*v234 + 8);
                uint64_t v259 = *(void *)(v256 + 8);
                if (v258 != v259)
                {
                  int v260 = (*(uint64_t (**)(void))(*(void *)v258 + 640))(*(void *)(*v234 + 8));
                  if (v260 == (*(unsigned int (**)(uint64_t))(*(void *)v259 + 640))(v259))
                  {
                    BOOL v261 = md::Label::collisionPriorityCmp(v257, 0, v256, 0, 0);
                    unint64_t v11 = v379;
                    unint64_t v13 = v373;
                    int64_t v232 = v376;
                    if (!v261) {
                      goto LABEL_376;
                    }
LABEL_375:
                    ++v234;
                    uint64_t v236 = v255;
                    goto LABEL_376;
                  }
                  int64_t v232 = v376;
                }
                unsigned int v262 = (*(uint64_t (**)(uint64_t))(*(void *)v258 + 640))(v258);
                unsigned int v263 = (*(uint64_t (**)(uint64_t))(*(void *)v259 + 640))(v259);
                unint64_t v11 = v379;
                unint64_t v13 = v373;
                if (v262 <= v263) {
                  goto LABEL_376;
                }
                goto LABEL_375;
              }
LABEL_376:
              unint64_t v264 = *v234;
              uint64_t v265 = *(void *)(*v234 + 8);
              uint64_t v266 = *(void *)(v383 + 8);
              if (v265 == v266)
              {
LABEL_379:
                unsigned int v268 = (*(uint64_t (**)(uint64_t))(*(void *)v265 + 640))(v265);
                __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)v266 + 640))(v266);
                if (v268 > result)
                {
LABEL_344:
                  uint64_t v234 = v389;
                  goto LABEL_345;
                }
              }
              else
              {
                int v267 = (*(uint64_t (**)(void))(*(void *)v265 + 640))(*(void *)(*v234 + 8));
                if (v267 != (*(unsigned int (**)(uint64_t))(*(void *)v266 + 640))(v266))
                {
                  unint64_t v11 = v379;
                  goto LABEL_379;
                }
                __n128 result = md::Label::collisionPriorityCmp(v264, 0, v383, 0, 0);
                unint64_t v11 = v379;
                if (result) {
                  goto LABEL_344;
                }
              }
              unint64_t *v389 = *v234;
              int v253 = v234;
              if (v232 < v236) {
                goto LABEL_345;
              }
              continue;
            }
          }
        }
LABEL_346:
        int64_t v233 = v235 - 1;
        if (v235) {
          continue;
        }
        break;
      }
      uint64_t v269 = v374 >> 3;
      while (2)
      {
        uint64_t v270 = v11;
        uint64_t v271 = 0;
        unint64_t v377 = *v270;
        int64_t v272 = (unint64_t)(v269 - 2) >> 1;
        uint64_t v381 = v269;
        int64_t v384 = v272;
LABEL_387:
        unsigned int v273 = v270;
        v270 += v271 + 1;
        uint64_t v274 = 2 * v271;
        uint64_t v271 = (2 * v271) | 1;
        uint64_t v275 = v274 + 2;
        if (v274 + 2 >= v269) {
          goto LABEL_386;
        }
        unint64_t v276 = v270[1];
        unint64_t v277 = *v270;
        uint64_t v278 = *(void *)(*v270 + 8);
        uint64_t v279 = *(void *)(v276 + 8);
        if (v278 != v279)
        {
          int v280 = (*(uint64_t (**)(void))(*(void *)v278 + 640))(*(void *)(*v270 + 8));
          __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)v279 + 640))(v279);
          if (v280 == result)
          {
            unsigned __int8 v281 = atomic_load((unsigned __int8 *)(v277 + 1240));
            unsigned __int8 v282 = atomic_load((unsigned __int8 *)(v276 + 1240));
            uint64_t v269 = v381;
            if ((v281 & 1) != (v282 & 1))
            {
              LOBYTE(v283) = atomic_load((unsigned __int8 *)(v277 + 1240));
              goto LABEL_392;
            }
            if (*(unsigned char *)(v277 + 1248)) {
              uint64_t v285 = 724;
            }
            else {
              uint64_t v285 = 720;
            }
            int v286 = *(_DWORD *)(v277 + v285);
            if (*(unsigned char *)(v276 + 1248)) {
              uint64_t v287 = 724;
            }
            else {
              uint64_t v287 = 720;
            }
            int v288 = *(_DWORD *)(v276 + v287);
            BOOL v289 = v286 < v288;
            if (v286 != v288) {
              goto LABEL_410;
            }
            float v290 = *(float *)(v277 + 728);
            float v291 = *(float *)(v276 + 728);
            BOOL v289 = v290 < v291;
            if (v290 != v291) {
              goto LABEL_410;
            }
            float v292 = *(float *)(v277 + 740);
            float v293 = *(float *)(v276 + 740);
            BOOL v289 = v292 < v293;
            if (v292 == v293
              && (v294 = *(_DWORD *)(v277 + 60), v295 = *(_DWORD *)(v276 + 60), BOOL v289 = v294 < v295, v294 == v295))
            {
              unsigned int v296 = *(unsigned __int8 *)(v277 + 1222);
              unsigned int v297 = *(unsigned __int8 *)(v276 + 1222);
              if (v296 == v297)
              {
                float v298 = *(float *)(v277 + 196);
                float v299 = *(float *)(v276 + 196);
                BOOL v289 = v298 < v299;
                if (v298 != v299) {
                  goto LABEL_410;
                }
                uint64_t v300 = (*(uint64_t (**)(void, void))(**(void **)(v277 + 8) + 472))(*(void *)(v277 + 8), 0);
                __n128 result = (*(uint64_t (**)(void))(**(void **)(v276 + 8) + 472))();
                LOBYTE(v283) = v300 != 0;
                if (!(v300 | result)) {
                  goto LABEL_438;
                }
                if (v300) {
                  BOOL v301 = result == 0;
                }
                else {
                  BOOL v301 = 1;
                }
                if (v301)
                {
LABEL_392:
                  int64_t v272 = v384;
                  if (v283) {
                    goto LABEL_385;
                  }
                }
                else
                {
                  if (*(char *)(v300 + 23) < 0)
                  {
                    uint64_t v303 = v300;
                    uint64_t v300 = *(void *)v300;
                    size_t v302 = *(void *)(v303 + 8);
                  }
                  else
                  {
                    size_t v302 = *(unsigned __int8 *)(v300 + 23);
                  }
                  int v304 = *(char *)(result + 23);
                  if (v304 >= 0) {
                    size_t v305 = *(unsigned __int8 *)(result + 23);
                  }
                  else {
                    size_t v305 = *(void *)(result + 8);
                  }
                  if (v304 >= 0) {
                    int64_t v306 = (const void *)result;
                  }
                  else {
                    int64_t v306 = *(const void **)result;
                  }
                  if (v305 >= v302) {
                    size_t v307 = v302;
                  }
                  else {
                    size_t v307 = v305;
                  }
                  __n128 result = memcmp((const void *)v300, v306, v307);
                  if (v302 < v305) {
                    unsigned int v308 = -1;
                  }
                  else {
                    unsigned int v308 = v305 < v302;
                  }
                  if (result) {
                    unsigned int v308 = result;
                  }
                  uint64_t v269 = v381;
                  if (v308)
                  {
                    unsigned int v283 = v308 >> 31;
                    goto LABEL_392;
                  }
LABEL_438:
                  BOOL v4 = v277 >= v276;
                  int64_t v272 = v384;
                  if (!v4)
                  {
LABEL_385:
                    ++v270;
                    uint64_t v271 = v275;
                  }
                }
              }
              else
              {
                int64_t v272 = v384;
                if (v296 > v297) {
                  goto LABEL_385;
                }
              }
            }
            else
            {
LABEL_410:
              int64_t v272 = v384;
              if (v289) {
                goto LABEL_385;
              }
            }
LABEL_386:
            *unsigned int v273 = *v270;
            if (v271 > v272)
            {
              uint64_t v309 = a2 - 1;
              BOOL v5 = v270 == --a2;
              if (v5)
              {
                *uint64_t v270 = v377;
                unint64_t v11 = v379;
                goto LABEL_383;
              }
              *uint64_t v270 = *v309;
              *uint64_t v309 = v377;
              unint64_t v11 = v379;
              uint64_t v310 = (char *)v270 - (char *)v379 + 8;
              if (v310 >= 9)
              {
                unint64_t v311 = ((unint64_t)v310 >> 3) - 2;
                unint64_t v312 = v311 >> 1;
                long long v313 = &v379[v311 >> 1];
                unint64_t v314 = *v313;
                unint64_t v315 = *v270;
                uint64_t v316 = *(void *)(*v313 + 8);
                uint64_t v317 = *(void *)(*v270 + 8);
                if (v316 != v317)
                {
                  int v318 = (*(uint64_t (**)(void))(*(void *)v316 + 640))(*(void *)(*v313 + 8));
                  if (v318 == (*(unsigned int (**)(uint64_t))(*(void *)v317 + 640))(v317))
                  {
                    __n128 result = md::Label::collisionPriorityCmp(v314, 0, v315, 0, 0);
                    unint64_t v11 = v379;
                    uint64_t v269 = v381;
                    if ((result & 1) == 0) {
                      goto LABEL_383;
                    }
LABEL_450:
                    unint64_t v320 = *v270;
                    *uint64_t v270 = *v313;
                    if (v311 < 2)
                    {
LABEL_458:
                      v322 = v313;
LABEL_459:
                      unint64_t *v322 = v320;
                      uint64_t v269 = v381;
                      goto LABEL_383;
                    }
                    while (2)
                    {
                      unint64_t v321 = v312 - 1;
                      unint64_t v312 = (v312 - 1) >> 1;
                      v322 = &v11[v312];
                      unint64_t v323 = *v322;
                      uint64_t v324 = *(void *)(*v322 + 8);
                      uint64_t v325 = *(void *)(v320 + 8);
                      if (v324 == v325)
                      {
LABEL_457:
                        unsigned int v327 = (*(uint64_t (**)(uint64_t))(*(void *)v324 + 640))(v324);
                        __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)v325 + 640))(v325);
                        if (v327 <= result) {
                          goto LABEL_458;
                        }
                      }
                      else
                      {
                        int v326 = (*(uint64_t (**)(void))(*(void *)v324 + 640))(*(void *)(*v322 + 8));
                        if (v326 != (*(unsigned int (**)(uint64_t))(*(void *)v325 + 640))(v325))
                        {
                          unint64_t v11 = v379;
                          goto LABEL_457;
                        }
                        __n128 result = md::Label::collisionPriorityCmp(v323, 0, v320, 0, 0);
                        unint64_t v11 = v379;
                        if ((result & 1) == 0) {
                          goto LABEL_458;
                        }
                      }
                      *long long v313 = *v322;
                      long long v313 = v322;
                      if (v321 <= 1) {
                        goto LABEL_459;
                      }
                      continue;
                    }
                  }
                  unint64_t v11 = v379;
                }
                unsigned int v319 = (*(uint64_t (**)(uint64_t))(*(void *)v316 + 640))(v316);
                __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)v317 + 640))(v317);
                uint64_t v269 = v381;
                if (v319 > result) {
                  goto LABEL_450;
                }
              }
LABEL_383:
              BOOL v55 = v269-- <= 2;
              if (v55) {
                return result;
              }
              continue;
            }
            goto LABEL_387;
          }
          uint64_t v269 = v381;
        }
        break;
      }
      int64_t v272 = v384;
      unsigned int v284 = (*(uint64_t (**)(uint64_t))(*(void *)v278 + 640))(v278);
      __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)v279 + 640))(v279);
      if (v284 > result) {
        goto LABEL_385;
      }
      goto LABEL_386;
    }
    if ((unint64_t)v12 >= 0x401)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(i, &i[v13 >> 1], v9);
      uint64_t v14 = v13 >> 1;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(i + 1, &i[v14 - 1], a2 - 2);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(i + 2, &i[v14 + 1], a2 - 3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(&i[v14 - 1], &i[v14], &i[v14 + 1]);
      unint64_t v15 = *i;
      unint64_t *i = i[v14];
      i[v14] = v15;
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(&i[v13 >> 1], i, v9);
    }
    uint64_t v382 = a3 - 1;
    if ((a4 & 1) == 0)
    {
      unint64_t v17 = *(i - 1);
      unint64_t v16 = *i;
      uint64_t v18 = *(void *)(v17 + 8);
      uint64_t v19 = *(void *)(*v11 + 8);
      if (v18 == v19
        || (int v20 = (*(uint64_t (**)(void))(*(void *)v18 + 640))(*(void *)(v17 + 8)),
            v20 != (*(unsigned int (**)(uint64_t))(*(void *)v19 + 640))(v19)))
      {
        unsigned int v26 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 640))(v18);
        if (v26 <= (*(unsigned int (**)(uint64_t))(*(void *)v19 + 640))(v19)) {
          goto LABEL_14;
        }
      }
      else if (!md::Label::collisionPriorityCmp(v17, 0, v16, 0, 0))
      {
LABEL_14:
        unint64_t v21 = *v11;
        unint64_t v22 = *v9;
        uint64_t v23 = *(void *)(*v11 + 8);
        uint64_t v24 = *(void *)(*v9 + 8);
        if (v23 == v24
          || (int v25 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 640))(v23),
              v25 != (*(unsigned int (**)(uint64_t))(*(void *)v24 + 640))(v24)))
        {
          unsigned int v126 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 640))(v23);
          __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 640))(v24);
          if (v126 > result)
          {
LABEL_170:
            for (uint64_t i = v379 + 1; ; ++i)
            {
              unint64_t v127 = *i;
              uint64_t v128 = *(void *)(v21 + 8);
              uint64_t v129 = *(void *)(*i + 8);
              if (v128 != v129
                && (int v130 = (*(uint64_t (**)(void))(*(void *)v128 + 640))(*(void *)(v21 + 8)),
                    v130 == (*(unsigned int (**)(uint64_t))(*(void *)v129 + 640))(v129)))
              {
                __n128 result = md::Label::collisionPriorityCmp(v21, 0, v127, 0, 0);
                if (result) {
                  goto LABEL_176;
                }
              }
              else
              {
                unsigned int v131 = (*(uint64_t (**)(uint64_t))(*(void *)v128 + 640))(v128);
                __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)v129 + 640))(v129);
                if (v131 > result) {
                  goto LABEL_176;
                }
              }
            }
          }
        }
        else
        {
          __n128 result = md::Label::collisionPriorityCmp(v21, 0, v22, 0, 0);
          if (result) {
            goto LABEL_170;
          }
        }
        for (uint64_t i = v379 + 1; i < a2; ++i)
        {
          unint64_t v121 = *i;
          uint64_t v122 = *(void *)(v21 + 8);
          uint64_t v123 = *(void *)(*i + 8);
          if (v122 != v123
            && (int v124 = (*(uint64_t (**)(void))(*(void *)v122 + 640))(*(void *)(v21 + 8)),
                v124 == (*(unsigned int (**)(uint64_t))(*(void *)v123 + 640))(v123)))
          {
            __n128 result = md::Label::collisionPriorityCmp(v21, 0, v121, 0, 0);
            if (result) {
              break;
            }
          }
          else
          {
            unsigned int v125 = (*(uint64_t (**)(uint64_t))(*(void *)v122 + 640))(v122);
            __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)v123 + 640))(v123);
            if (v125 > result) {
              break;
            }
          }
        }
LABEL_176:
        j = a2;
        if (i < a2)
        {
          for (j = v9; ; --j)
          {
            unint64_t v133 = *j;
            uint64_t v134 = *(void *)(v21 + 8);
            uint64_t v135 = *(void *)(*j + 8);
            if (v134 != v135
              && (int v136 = (*(uint64_t (**)(void))(*(void *)v134 + 640))(*(void *)(v21 + 8)),
                  v136 == (*(unsigned int (**)(uint64_t))(*(void *)v135 + 640))(v135)))
            {
              __n128 result = md::Label::collisionPriorityCmp(v21, 0, v133, 0, 0);
              if ((result & 1) == 0) {
                break;
              }
            }
            else
            {
              unsigned int v137 = (*(uint64_t (**)(uint64_t))(*(void *)v134 + 640))(v134);
              __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)v135 + 640))(v135);
              if (v137 <= result) {
                break;
              }
            }
          }
        }
LABEL_292:
        while (2)
        {
          if (i < j)
          {
            unint64_t v138 = *i;
            *i++ = *j;
            unint64_t *j = v138;
            while (2)
            {
              unint64_t v140 = *i;
              uint64_t v141 = *(void *)(v21 + 8);
              uint64_t v142 = *(void *)(*i + 8);
              if (v141 != v142)
              {
                int v143 = (*(uint64_t (**)(void))(*(void *)v141 + 640))(*(void *)(v21 + 8));
                if (v143 == (*(unsigned int (**)(uint64_t))(*(void *)v142 + 640))(v142))
                {
                  unsigned __int8 v144 = atomic_load((unsigned __int8 *)(v21 + 1240));
                  unsigned __int8 v145 = atomic_load((unsigned __int8 *)(v140 + 1240));
                  if ((v144 & 1) != (v145 & 1))
                  {
                    unsigned __int8 v146 = atomic_load((unsigned __int8 *)(v21 + 1240));
                    if (v146) {
                      goto LABEL_237;
                    }
                    goto LABEL_186;
                  }
                  if (*(unsigned char *)(v21 + 1248)) {
                    uint64_t v147 = 724;
                  }
                  else {
                    uint64_t v147 = 720;
                  }
                  int v148 = *(_DWORD *)(v21 + v147);
                  if (*(unsigned char *)(v140 + 1248)) {
                    uint64_t v149 = 724;
                  }
                  else {
                    uint64_t v149 = 720;
                  }
                  int v150 = *(_DWORD *)(v140 + v149);
                  BOOL v151 = v148 < v150;
                  if (v148 != v150) {
                    goto LABEL_205;
                  }
                  float v152 = *(float *)(v21 + 728);
                  float v153 = *(float *)(v140 + 728);
                  BOOL v151 = v152 < v153;
                  if (v152 != v153) {
                    goto LABEL_205;
                  }
                  float v154 = *(float *)(v21 + 740);
                  float v155 = *(float *)(v140 + 740);
                  BOOL v151 = v154 < v155;
                  if (v154 == v155
                    && (int v156 = *(_DWORD *)(v21 + 60), v157 = *(_DWORD *)(v140 + 60), v151 = v156 < v157, v156 == v157))
                  {
                    unsigned int v158 = *(unsigned __int8 *)(v21 + 1222);
                    unsigned int v159 = *(unsigned __int8 *)(v140 + 1222);
                    if (v158 == v159)
                    {
                      float v160 = *(float *)(v21 + 196);
                      float v161 = *(float *)(v140 + 196);
                      BOOL v151 = v160 < v161;
                      if (v160 != v161) {
                        goto LABEL_205;
                      }
                      uint64_t v162 = (*(uint64_t (**)(void, void))(**(void **)(v21 + 8) + 472))(*(void *)(v21 + 8), 0);
                      uint64_t v163 = (*(uint64_t (**)(void))(**(void **)(v140 + 8) + 472))();
                      LOBYTE(v164) = v162 != 0;
                      if (!(v162 | v163)) {
                        goto LABEL_234;
                      }
                      if (!v162 || !v163) {
                        goto LABEL_232;
                      }
                      if (*(char *)(v162 + 23) < 0)
                      {
                        uint64_t v166 = v162;
                        uint64_t v162 = *(void *)v162;
                        size_t v165 = *(void *)(v166 + 8);
                      }
                      else
                      {
                        size_t v165 = *(unsigned __int8 *)(v162 + 23);
                      }
                      int v167 = *(char *)(v163 + 23);
                      if (v167 >= 0) {
                        size_t v168 = *(unsigned __int8 *)(v163 + 23);
                      }
                      else {
                        size_t v168 = *(void *)(v163 + 8);
                      }
                      if (v167 >= 0) {
                        uint64_t v169 = (const void *)v163;
                      }
                      else {
                        uint64_t v169 = *(const void **)v163;
                      }
                      if (v168 >= v165) {
                        size_t v170 = v165;
                      }
                      else {
                        size_t v170 = v168;
                      }
                      int v171 = memcmp((const void *)v162, v169, v170);
                      if (v165 < v168) {
                        unsigned int v172 = -1;
                      }
                      else {
                        unsigned int v172 = v168 < v165;
                      }
                      if (v171) {
                        unsigned int v172 = v171;
                      }
                      uint64_t v9 = a2 - 1;
                      if (v172)
                      {
                        unsigned int v164 = v172 >> 31;
LABEL_232:
                        if (v164) {
                          goto LABEL_237;
                        }
                      }
                      else
                      {
LABEL_234:
                        if (v21 < v140) {
                          goto LABEL_237;
                        }
                      }
                    }
                    else if (v158 > v159)
                    {
                      goto LABEL_237;
                    }
                  }
                  else
                  {
LABEL_205:
                    if (v151) {
                      goto LABEL_237;
                    }
                  }
LABEL_186:
                  ++i;
                  continue;
                }
              }
              break;
            }
            unsigned int v139 = (*(uint64_t (**)(uint64_t))(*(void *)v141 + 640))(v141);
            if (v139 <= (*(unsigned int (**)(uint64_t))(*(void *)v142 + 640))(v142)) {
              goto LABEL_186;
            }
            while (1)
            {
              while (1)
              {
                while (1)
                {
                  while (1)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        while (1)
                        {
                          while (1)
                          {
LABEL_237:
                            while (1)
                            {
                              unint64_t v175 = *--j;
                              unint64_t v174 = v175;
                              uint64_t v176 = *(void *)(v21 + 8);
                              uint64_t v177 = *(void *)(v175 + 8);
                              if (v176 != v177)
                              {
                                int v178 = (*(uint64_t (**)(void))(*(void *)v176 + 640))(*(void *)(v21 + 8));
                                __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)v177 + 640))(v177);
                                if (v178 == result) {
                                  break;
                                }
                              }
                              unsigned int v173 = (*(uint64_t (**)(uint64_t))(*(void *)v176 + 640))(v176);
                              __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)v177 + 640))(v177);
                              if (v173 <= result) {
                                goto LABEL_292;
                              }
                            }
                            unsigned __int8 v179 = atomic_load((unsigned __int8 *)(v21 + 1240));
                            unsigned __int8 v180 = atomic_load((unsigned __int8 *)(v174 + 1240));
                            if ((v179 & 1) == (v180 & 1)) {
                              break;
                            }
                            unsigned __int8 v181 = atomic_load((unsigned __int8 *)(v21 + 1240));
                            if ((v181 & 1) == 0) {
                              goto LABEL_292;
                            }
                          }
                          uint64_t v182 = *(unsigned char *)(v21 + 1248) ? 724 : 720;
                          int v183 = *(_DWORD *)(v21 + v182);
                          uint64_t v184 = *(unsigned char *)(v174 + 1248) ? 724 : 720;
                          int v185 = *(_DWORD *)(v174 + v184);
                          if (v183 == v185) {
                            break;
                          }
                          if (v183 >= v185) {
                            goto LABEL_292;
                          }
                        }
                        float v186 = *(float *)(v21 + 728);
                        float v187 = *(float *)(v174 + 728);
                        if (v186 == v187) {
                          break;
                        }
                        if (v186 >= v187) {
                          goto LABEL_292;
                        }
                      }
                      float v188 = *(float *)(v21 + 740);
                      float v189 = *(float *)(v174 + 740);
                      if (v188 == v189) {
                        break;
                      }
                      if (v188 >= v189) {
                        goto LABEL_292;
                      }
                    }
                    int v190 = *(_DWORD *)(v21 + 60);
                    int v191 = *(_DWORD *)(v174 + 60);
                    if (v190 == v191) {
                      break;
                    }
                    if (v190 >= v191) {
                      goto LABEL_292;
                    }
                  }
                  unsigned int v192 = *(unsigned __int8 *)(v21 + 1222);
                  unsigned int v193 = *(unsigned __int8 *)(v174 + 1222);
                  if (v192 == v193) {
                    break;
                  }
                  if (v192 <= v193) {
                    goto LABEL_292;
                  }
                }
                float v194 = *(float *)(v21 + 196);
                float v195 = *(float *)(v174 + 196);
                if (v194 == v195) {
                  break;
                }
                if (v194 >= v195) {
                  goto LABEL_292;
                }
              }
              uint64_t v196 = (*(uint64_t (**)(void, void))(**(void **)(v21 + 8) + 472))(*(void *)(v21 + 8), 0);
              __n128 result = (*(uint64_t (**)(void))(**(void **)(v174 + 8) + 472))();
              BOOL v197 = v196 != 0;
              if (v196 | result)
              {
                if (!v196 || !result) {
                  goto LABEL_289;
                }
                if (*(char *)(v196 + 23) < 0)
                {
                  uint64_t v199 = v196;
                  uint64_t v196 = *(void *)v196;
                  size_t v198 = *(void *)(v199 + 8);
                }
                else
                {
                  size_t v198 = *(unsigned __int8 *)(v196 + 23);
                }
                int v200 = *(char *)(result + 23);
                if (v200 >= 0) {
                  size_t v201 = *(unsigned __int8 *)(result + 23);
                }
                else {
                  size_t v201 = *(void *)(result + 8);
                }
                if (v200 >= 0) {
                  uint64_t v202 = (const void *)result;
                }
                else {
                  uint64_t v202 = *(const void **)result;
                }
                if (v201 >= v198) {
                  size_t v203 = v198;
                }
                else {
                  size_t v203 = v201;
                }
                __n128 result = memcmp((const void *)v196, v202, v203);
                if (v198 < v201) {
                  unsigned int v204 = -1;
                }
                else {
                  unsigned int v204 = v201 < v198;
                }
                if (result) {
                  unsigned int v204 = result;
                }
                uint64_t v9 = a2 - 1;
                if (v204) {
                  break;
                }
              }
              if (v21 >= v174) {
                goto LABEL_292;
              }
            }
            BOOL v197 = v204 >> 31;
LABEL_289:
            if (!v197) {
              continue;
            }
            goto LABEL_237;
          }
          break;
        }
        uint64_t v205 = i - 1;
        BOOL v4 = i - 1 >= v379;
        BOOL v5 = i - 1 == v379;
        if (i - 1 != v379) {
          unint64_t *v379 = *v205;
        }
        a4 = 0;
        *uint64_t v205 = v21;
        unint64_t v8 = a2;
        a3 = v382;
        continue;
      }
    }
    uint64_t v27 = v11 + 1;
    unint64_t v28 = *v11;
    while (1)
    {
      unint64_t v29 = *v27;
      uint64_t v30 = *(void *)(*v27 + 8);
      uint64_t v31 = *(void *)(v28 + 8);
      if (v30 == v31) {
        break;
      }
      int v32 = (*(uint64_t (**)(void))(*(void *)v30 + 640))(*(void *)(*v27 + 8));
      if (v32 != (*(unsigned int (**)(uint64_t))(*(void *)v31 + 640))(v31)) {
        break;
      }
      if (!md::Label::collisionPriorityCmp(v29, 0, v28, 0, 0)) {
        goto LABEL_25;
      }
LABEL_21:
      ++v27;
    }
    unsigned int v33 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 640))(v30);
    if (v33 > (*(unsigned int (**)(uint64_t))(*(void *)v31 + 640))(v31)) {
      goto LABEL_21;
    }
LABEL_25:
    k = v9;
    v385 = v27 - 1;
    if (v27 - 1 != v11)
    {
      while (1)
      {
        unint64_t v35 = *k;
        uint64_t v36 = *(void *)(*k + 8);
        uint64_t v37 = *(void *)(v28 + 8);
        if (v36 != v37
          && (int v38 = (*(uint64_t (**)(void))(*(void *)v36 + 640))(*(void *)(*k + 8)),
              v38 == (*(unsigned int (**)(uint64_t))(*(void *)v37 + 640))(v37)))
        {
          if (md::Label::collisionPriorityCmp(v35, 0, v28, 0, 0)) {
            goto LABEL_33;
          }
        }
        else
        {
          unsigned int v39 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 640))(v36);
          if (v39 > (*(unsigned int (**)(uint64_t))(*(void *)v37 + 640))(v37)) {
            goto LABEL_33;
          }
        }
        --k;
      }
    }
    k = a2;
    if (v27 < a2)
    {
      for (k = a2 - 1; ; --k)
      {
        unint64_t v113 = *k;
        uint64_t v114 = *(void *)(*k + 8);
        uint64_t v115 = *(void *)(v28 + 8);
        if (v114 == v115
          || (int v116 = (*(uint64_t (**)(void))(*(void *)v114 + 640))(*(void *)(*k + 8)),
              v116 != (*(unsigned int (**)(uint64_t))(*(void *)v115 + 640))(v115)))
        {
          unsigned int v118 = (*(uint64_t (**)(uint64_t))(*(void *)v114 + 640))(v114);
          unsigned int v119 = (*(uint64_t (**)(uint64_t))(*(void *)v115 + 640))(v115);
          if (v27 >= k || v118 > v119) {
            break;
          }
        }
        else
        {
          BOOL v117 = md::Label::collisionPriorityCmp(v113, 0, v28, 0, 0);
          if (v27 >= k || v117) {
            break;
          }
        }
      }
    }
LABEL_33:
    if (v27 < k)
    {
      unint64_t v40 = (unint64_t)v27;
      uint64_t v41 = k;
      while (1)
      {
        unint64_t v42 = *(void *)v40;
        *(void *)unint64_t v40 = *v41;
        v40 += 8;
        *uint64_t v41 = v42;
        while (1)
        {
          unint64_t v44 = *(void *)v40;
          uint64_t v45 = *(void *)(*(void *)v40 + 8);
          uint64_t v46 = *(void *)(v28 + 8);
          if (v45 == v46
            || (int v47 = (*(uint64_t (**)(void))(*(void *)v45 + 640))(*(void *)(*(void *)v40 + 8)),
                v47 != (*(unsigned int (**)(uint64_t))(*(void *)v46 + 640))(v46)))
          {
            unsigned int v43 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 640))(v45);
            if (v43 <= (*(unsigned int (**)(uint64_t))(*(void *)v46 + 640))(v46)) {
              goto LABEL_87;
            }
            goto LABEL_38;
          }
          unsigned __int8 v48 = atomic_load((unsigned __int8 *)(v44 + 1240));
          unsigned __int8 v49 = atomic_load((unsigned __int8 *)(v28 + 1240));
          if ((v48 & 1) != (v49 & 1))
          {
            unsigned __int8 v50 = atomic_load((unsigned __int8 *)(v44 + 1240));
            if ((v50 & 1) == 0) {
              goto LABEL_87;
            }
            goto LABEL_38;
          }
          if (*(unsigned char *)(v44 + 1248)) {
            uint64_t v51 = 724;
          }
          else {
            uint64_t v51 = 720;
          }
          int v52 = *(_DWORD *)(v44 + v51);
          if (*(unsigned char *)(v28 + 1248)) {
            uint64_t v53 = 724;
          }
          else {
            uint64_t v53 = 720;
          }
          int v54 = *(_DWORD *)(v28 + v53);
          BOOL v55 = v52 < v54;
          if (v52 != v54) {
            goto LABEL_57;
          }
          float v56 = *(float *)(v44 + 728);
          float v57 = *(float *)(v28 + 728);
          BOOL v55 = v56 < v57;
          if (v56 != v57
            || (v58 = *(float *)(v44 + 740), v59 = *(float *)(v28 + 740), BOOL v55 = v58 < v59, v58 != v59)
            || (v60 = *(_DWORD *)(v44 + 60), v61 = *(_DWORD *)(v28 + 60), BOOL v55 = v60 < v61, v60 != v61))
          {
LABEL_57:
            if (!v55) {
              goto LABEL_87;
            }
            goto LABEL_38;
          }
          unsigned int v62 = *(unsigned __int8 *)(v44 + 1222);
          unsigned int v63 = *(unsigned __int8 *)(v28 + 1222);
          if (v62 != v63)
          {
            if (v62 <= v63) {
              goto LABEL_87;
            }
            goto LABEL_38;
          }
          float v64 = *(float *)(v44 + 196);
          float v65 = *(float *)(v28 + 196);
          BOOL v55 = v64 < v65;
          if (v64 != v65) {
            goto LABEL_57;
          }
          uint64_t v66 = (*(uint64_t (**)(void, void))(**(void **)(v44 + 8) + 472))(*(void *)(v44 + 8), 0);
          uint64_t v67 = (*(uint64_t (**)(void))(**(void **)(v28 + 8) + 472))();
          BOOL v68 = v66 != 0;
          if (!(v66 | v67)) {
            goto LABEL_86;
          }
          if (v66 && v67 != 0) {
            break;
          }
LABEL_84:
          if (!v68) {
            goto LABEL_87;
          }
LABEL_38:
          v40 += 8;
        }
        if (*(char *)(v66 + 23) < 0)
        {
          uint64_t v71 = v66;
          uint64_t v66 = *(void *)v66;
          size_t v70 = *(void *)(v71 + 8);
        }
        else
        {
          size_t v70 = *(unsigned __int8 *)(v66 + 23);
        }
        int v72 = *(char *)(v67 + 23);
        if (v72 >= 0) {
          size_t v73 = *(unsigned __int8 *)(v67 + 23);
        }
        else {
          size_t v73 = *(void *)(v67 + 8);
        }
        if (v72 >= 0) {
          uint64_t v74 = (const void *)v67;
        }
        else {
          uint64_t v74 = *(const void **)v67;
        }
        if (v73 >= v70) {
          size_t v75 = v70;
        }
        else {
          size_t v75 = v73;
        }
        int v76 = memcmp((const void *)v66, v74, v75);
        unsigned int v77 = v73 < v70;
        if (v70 < v73) {
          unsigned int v77 = -1;
        }
        if (v76) {
          unsigned int v77 = v76;
        }
        if (v77) {
          break;
        }
LABEL_86:
        if (v44 < v28) {
          goto LABEL_38;
        }
LABEL_87:
        v385 = (unint64_t *)(v40 - 8);
        while (1)
        {
          while (1)
          {
            while (1)
            {
              while (1)
              {
                while (1)
                {
                  while (1)
                  {
                    while (1)
                    {
                      while (1)
                      {
LABEL_89:
                        while (1)
                        {
                          unint64_t v80 = *--v41;
                          unint64_t v79 = v80;
                          uint64_t v81 = *(void *)(v80 + 8);
                          uint64_t v82 = *(void *)(v28 + 8);
                          if (v81 != v82)
                          {
                            int v83 = (*(uint64_t (**)(uint64_t))(*(void *)v81 + 640))(v81);
                            if (v83 == (*(unsigned int (**)(uint64_t))(*(void *)v82 + 640))(v82)) {
                              break;
                            }
                          }
                          unsigned int v78 = (*(uint64_t (**)(uint64_t))(*(void *)v81 + 640))(v81);
                          if (v78 > (*(unsigned int (**)(uint64_t))(*(void *)v82 + 640))(v82)) {
                            goto LABEL_35;
                          }
                        }
                        unsigned __int8 v84 = atomic_load((unsigned __int8 *)(v79 + 1240));
                        unsigned __int8 v85 = atomic_load((unsigned __int8 *)(v28 + 1240));
                        if ((v84 & 1) == (v85 & 1)) {
                          break;
                        }
                        unsigned __int8 v86 = atomic_load((unsigned __int8 *)(v79 + 1240));
                        if (v86) {
                          goto LABEL_35;
                        }
                      }
                      uint64_t v87 = *(unsigned char *)(v79 + 1248) ? 724 : 720;
                      int v88 = *(_DWORD *)(v79 + v87);
                      uint64_t v89 = *(unsigned char *)(v28 + 1248) ? 724 : 720;
                      int v90 = *(_DWORD *)(v28 + v89);
                      if (v88 == v90) {
                        break;
                      }
                      if (v88 < v90) {
                        goto LABEL_35;
                      }
                    }
                    float v91 = *(float *)(v79 + 728);
                    float v92 = *(float *)(v28 + 728);
                    if (v91 == v92) {
                      break;
                    }
                    if (v91 < v92) {
                      goto LABEL_35;
                    }
                  }
                  float v93 = *(float *)(v79 + 740);
                  float v94 = *(float *)(v28 + 740);
                  if (v93 == v94) {
                    break;
                  }
                  if (v93 < v94) {
                    goto LABEL_35;
                  }
                }
                int v95 = *(_DWORD *)(v79 + 60);
                int v96 = *(_DWORD *)(v28 + 60);
                if (v95 == v96) {
                  break;
                }
                if (v95 < v96) {
                  goto LABEL_35;
                }
              }
              unsigned int v97 = *(unsigned __int8 *)(v79 + 1222);
              unsigned int v98 = *(unsigned __int8 *)(v28 + 1222);
              if (v97 == v98) {
                break;
              }
              if (v97 > v98) {
                goto LABEL_35;
              }
            }
            float v99 = *(float *)(v79 + 196);
            float v100 = *(float *)(v28 + 196);
            if (v99 == v100) {
              break;
            }
            if (v99 < v100) {
              goto LABEL_35;
            }
          }
          uint64_t v101 = (*(uint64_t (**)(void, void))(**(void **)(v79 + 8) + 472))(*(void *)(v79 + 8), 0);
          uint64_t v102 = (*(uint64_t (**)(void))(**(void **)(v28 + 8) + 472))();
          LOBYTE(v103) = v101 != 0;
          if (!(v101 | v102)) {
            break;
          }
          if (v101) {
            BOOL v104 = v102 == 0;
          }
          else {
            BOOL v104 = 1;
          }
          if (!v104)
          {
            if (*(char *)(v101 + 23) < 0)
            {
              uint64_t v106 = v101;
              uint64_t v101 = *(void *)v101;
              size_t v105 = *(void *)(v106 + 8);
            }
            else
            {
              size_t v105 = *(unsigned __int8 *)(v101 + 23);
            }
            int v107 = *(char *)(v102 + 23);
            if (v107 >= 0) {
              size_t v108 = *(unsigned __int8 *)(v102 + 23);
            }
            else {
              size_t v108 = *(void *)(v102 + 8);
            }
            if (v107 >= 0) {
              uint64_t v109 = (const void *)v102;
            }
            else {
              uint64_t v109 = *(const void **)v102;
            }
            if (v108 >= v105) {
              size_t v110 = v105;
            }
            else {
              size_t v110 = v108;
            }
            int v111 = memcmp((const void *)v101, v109, v110);
            unsigned int v112 = v108 < v105;
            if (v105 < v108) {
              unsigned int v112 = -1;
            }
            if (v111) {
              unsigned int v112 = v111;
            }
            if (!v112) {
              break;
            }
            unsigned int v103 = v112 >> 31;
          }
          if (v103) {
            goto LABEL_35;
          }
        }
        if (v79 >= v28) {
          goto LABEL_89;
        }
LABEL_35:
        if (v40 >= (unint64_t)v41) {
          goto LABEL_155;
        }
      }
      BOOL v68 = v77 >> 31;
      goto LABEL_84;
    }
LABEL_155:
    uint64_t v7 = v379;
    if (v385 != v379) {
      unint64_t *v379 = *v385;
    }
    unint64_t *v385 = v28;
    BOOL v4 = v27 >= k;
    unint64_t v8 = a2;
    uint64_t v9 = a2 - 1;
    a3 = v382;
    if (v4)
    {
      BOOL v120 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(v379, v385);
      uint64_t i = v385 + 1;
      __n128 result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(v385 + 1, a2);
      if (result)
      {
        a2 = v385;
        if (v120) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v120) {
        goto LABEL_161;
      }
    }
    else
    {
LABEL_161:
      __n128 result = std::__introsort<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **,false>(v379, v385, v382, a4 & 1);
      a4 = 0;
      uint64_t i = v385 + 1;
    }
  }
  switch(v13)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v206 = *v9;
      unint64_t v207 = *i;
      uint64_t v208 = *(void *)(*v9 + 8);
      uint64_t v209 = *(void *)(*i + 8);
      if (v208 == v209) {
        goto LABEL_530;
      }
      int v210 = (*(uint64_t (**)(uint64_t))(*(void *)v208 + 640))(v208);
      if (v210 == (*(unsigned int (**)(uint64_t))(*(void *)v209 + 640))(v209))
      {
        __n128 result = md::Label::collisionPriorityCmp(v206, 0, v207, 0, 0);
        unint64_t v11 = i;
        uint64_t v211 = a2 - 1;
        if ((result & 1) == 0) {
          return result;
        }
        goto LABEL_531;
      }
      unint64_t v11 = i;
LABEL_530:
      unsigned int v371 = (*(uint64_t (**)(uint64_t))(*(void *)v208 + 640))(v208);
      __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)v209 + 640))(v209);
      uint64_t v211 = a2 - 1;
      if (v371 > result)
      {
LABEL_531:
        unint64_t v372 = *v11;
        unint64_t *v11 = *v211;
        *uint64_t v211 = v372;
        return result;
      }
      break;
    case 3uLL:
      return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(i, i + 1, v9);
    case 4uLL:
      return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(i, i + 1, i + 2, v9);
    case 5uLL:
      return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **,0>(i, i + 1, i + 2, i + 3, v9);
    default:
      JUMPOUT(0);
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  BOOL v4 = a2;
  BOOL v5 = a1;
  unint64_t v6 = *a2;
  unint64_t v7 = *a1;
  uint64_t v8 = *(void *)(*a2 + 8);
  uint64_t v9 = *(void *)(*a1 + 8);
  if (v8 == v9
    || (int v10 = (*(uint64_t (**)(void))(*(void *)v8 + 640))(*(void *)(*a2 + 8)),
        v10 != (*(unsigned int (**)(uint64_t))(*(void *)v9 + 640))(v9)))
  {
    unsigned int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 640))(v8);
    if (v17 <= (*(unsigned int (**)(uint64_t))(*(void *)v9 + 640))(v9))
    {
LABEL_4:
      unint64_t v11 = *a3;
      unint64_t v12 = *v4;
      uint64_t v13 = *(void *)(*a3 + 8);
      uint64_t v14 = *(void *)(*v4 + 8);
      if (v13 == v14
        || (int v15 = (*(uint64_t (**)(void))(*(void *)v13 + 640))(*(void *)(*a3 + 8)),
            v15 != (*(unsigned int (**)(uint64_t))(*(void *)v14 + 640))(v14)))
      {
        unsigned int v28 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 640))(v13);
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 640))(v14);
        if (v28 <= result) {
          return result;
        }
      }
      else
      {
        uint64_t result = md::Label::collisionPriorityCmp(v11, 0, v12, 0, 0);
        if ((result & 1) == 0) {
          return result;
        }
      }
      unint64_t v29 = *v4;
      *BOOL v4 = *a3;
      *a3 = v29;
      unint64_t v30 = *v4;
      unint64_t v31 = *v5;
      uint64_t v32 = *(void *)(*v4 + 8);
      uint64_t v33 = *(void *)(*v5 + 8);
      if (v32 == v33
        || (int v34 = (*(uint64_t (**)(void))(*(void *)v32 + 640))(*(void *)(*v4 + 8)),
            v34 != (*(unsigned int (**)(uint64_t))(*(void *)v33 + 640))(v33)))
      {
        unsigned int v38 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 640))(v32);
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 640))(v33);
        if (v38 <= result) {
          return result;
        }
      }
      else
      {
        uint64_t result = md::Label::collisionPriorityCmp(v30, 0, v31, 0, 0);
        if ((result & 1) == 0) {
          return result;
        }
      }
      goto LABEL_28;
    }
  }
  else if (!md::Label::collisionPriorityCmp(v6, 0, v7, 0, 0))
  {
    goto LABEL_4;
  }
  unint64_t v18 = *a3;
  unint64_t v19 = *v4;
  uint64_t v20 = *(void *)(*a3 + 8);
  uint64_t v21 = *(void *)(*v4 + 8);
  if (v20 == v21
    || (int v22 = (*(uint64_t (**)(void))(*(void *)v20 + 640))(*(void *)(*a3 + 8)),
        v22 != (*(unsigned int (**)(uint64_t))(*(void *)v21 + 640))(v21)))
  {
    unsigned int v35 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 640))(v20);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 640))(v21);
    if (v35 <= result) {
      goto LABEL_12;
    }
LABEL_24:
    BOOL v4 = a3;
    goto LABEL_28;
  }
  uint64_t result = md::Label::collisionPriorityCmp(v18, 0, v19, 0, 0);
  if (result) {
    goto LABEL_24;
  }
LABEL_12:
  unint64_t v23 = *v5;
  *BOOL v5 = *v4;
  *BOOL v4 = v23;
  unint64_t v24 = *a3;
  uint64_t v25 = *(void *)(*a3 + 8);
  uint64_t v26 = *(void *)(v23 + 8);
  if (v25 == v26
    || (int v27 = (*(uint64_t (**)(void))(*(void *)v25 + 640))(*(void *)(*a3 + 8)),
        v27 != (*(unsigned int (**)(uint64_t))(*(void *)v26 + 640))(v26)))
  {
    unsigned int v36 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 640))(v25);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 640))(v26);
    BOOL v5 = v4;
    BOOL v4 = a3;
    if (v36 <= result) {
      return result;
    }
  }
  else
  {
    uint64_t result = md::Label::collisionPriorityCmp(v24, 0, v23, 0, 0);
    BOOL v5 = v4;
    BOOL v4 = a3;
    if ((result & 1) == 0) {
      return result;
    }
  }
LABEL_28:
  unint64_t v37 = *v5;
  *BOOL v5 = *v4;
  *BOOL v4 = v37;
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(a1, a2, a3);
  unint64_t v8 = *a4;
  unint64_t v9 = *a3;
  uint64_t v10 = *(void *)(*a4 + 8);
  uint64_t v11 = *(void *)(*a3 + 8);
  if (v10 == v11
    || (int v12 = (*(uint64_t (**)(void))(*(void *)v10 + 640))(*(void *)(*a4 + 8)),
        v12 != (*(unsigned int (**)(uint64_t))(*(void *)v11 + 640))(v11)))
  {
    unsigned int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 640))(v10);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 640))(v11);
    if (v14 <= result) {
      return result;
    }
  }
  else
  {
    uint64_t result = md::Label::collisionPriorityCmp(v8, 0, v9, 0, 0);
    if ((result & 1) == 0) {
      return result;
    }
  }
  unint64_t v15 = *a3;
  *a3 = *a4;
  *a4 = v15;
  unint64_t v16 = *a3;
  unint64_t v17 = *a2;
  uint64_t v18 = *(void *)(*a3 + 8);
  uint64_t v19 = *(void *)(*a2 + 8);
  if (v18 == v19
    || (int v20 = (*(uint64_t (**)(void))(*(void *)v18 + 640))(*(void *)(*a3 + 8)),
        v20 != (*(unsigned int (**)(uint64_t))(*(void *)v19 + 640))(v19)))
  {
    unsigned int v21 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 640))(v18);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 640))(v19);
    if (v21 <= result) {
      return result;
    }
  }
  else
  {
    uint64_t result = md::Label::collisionPriorityCmp(v16, 0, v17, 0, 0);
    if ((result & 1) == 0) {
      return result;
    }
  }
  unint64_t v22 = *a2;
  *a2 = *a3;
  *a3 = v22;
  unint64_t v23 = *a2;
  unint64_t v24 = *a1;
  uint64_t v25 = *(void *)(*a2 + 8);
  uint64_t v26 = *(void *)(*a1 + 8);
  if (v25 == v26
    || (int v27 = (*(uint64_t (**)(void))(*(void *)v25 + 640))(*(void *)(*a2 + 8)),
        v27 != (*(unsigned int (**)(uint64_t))(*(void *)v26 + 640))(v26)))
  {
    unsigned int v28 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 640))(v25);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 640))(v26);
    if (v28 <= result) {
      return result;
    }
    goto LABEL_16;
  }
  uint64_t result = md::Label::collisionPriorityCmp(v23, 0, v24, 0, 0);
  if (result)
  {
LABEL_16:
    unint64_t v29 = *a1;
    *a1 = *a2;
    *a2 = v29;
  }
  return result;
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **,0>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(a1, a2, a3, a4);
  unint64_t v10 = *a5;
  unint64_t v11 = *a4;
  uint64_t v12 = *(void *)(*a5 + 8);
  uint64_t v13 = *(void *)(*a4 + 8);
  if (v12 == v13
    || (int v14 = (*(uint64_t (**)(void))(*(void *)v12 + 640))(*(void *)(*a5 + 8)),
        v14 != (*(unsigned int (**)(uint64_t))(*(void *)v13 + 640))(v13)))
  {
    unsigned int v16 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 640))(v12);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 640))(v13);
    if (v16 <= result) {
      return result;
    }
  }
  else
  {
    uint64_t result = md::Label::collisionPriorityCmp(v10, 0, v11, 0, 0);
    if ((result & 1) == 0) {
      return result;
    }
  }
  unint64_t v17 = *a4;
  *a4 = *a5;
  *a5 = v17;
  unint64_t v18 = *a4;
  unint64_t v19 = *a3;
  uint64_t v20 = *(void *)(*a4 + 8);
  uint64_t v21 = *(void *)(*a3 + 8);
  if (v20 == v21
    || (int v22 = (*(uint64_t (**)(void))(*(void *)v20 + 640))(*(void *)(*a4 + 8)),
        v22 != (*(unsigned int (**)(uint64_t))(*(void *)v21 + 640))(v21)))
  {
    unsigned int v23 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 640))(v20);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 640))(v21);
    if (v23 <= result) {
      return result;
    }
  }
  else
  {
    uint64_t result = md::Label::collisionPriorityCmp(v18, 0, v19, 0, 0);
    if ((result & 1) == 0) {
      return result;
    }
  }
  unint64_t v24 = *a3;
  *a3 = *a4;
  *a4 = v24;
  unint64_t v25 = *a3;
  unint64_t v26 = *a2;
  uint64_t v27 = *(void *)(*a3 + 8);
  uint64_t v28 = *(void *)(*a2 + 8);
  if (v27 == v28
    || (int v29 = (*(uint64_t (**)(void))(*(void *)v27 + 640))(*(void *)(*a3 + 8)),
        v29 != (*(unsigned int (**)(uint64_t))(*(void *)v28 + 640))(v28)))
  {
    unsigned int v30 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 640))(v27);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 640))(v28);
    if (v30 <= result) {
      return result;
    }
  }
  else
  {
    uint64_t result = md::Label::collisionPriorityCmp(v25, 0, v26, 0, 0);
    if ((result & 1) == 0) {
      return result;
    }
  }
  unint64_t v31 = *a2;
  *a2 = *a3;
  *a3 = v31;
  unint64_t v32 = *a2;
  unint64_t v33 = *a1;
  uint64_t v34 = *(void *)(*a2 + 8);
  uint64_t v35 = *(void *)(*a1 + 8);
  if (v34 == v35
    || (int v36 = (*(uint64_t (**)(void))(*(void *)v34 + 640))(*(void *)(*a2 + 8)),
        v36 != (*(unsigned int (**)(uint64_t))(*(void *)v35 + 640))(v35)))
  {
    unsigned int v37 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 640))(v34);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 640))(v35);
    if (v37 <= result) {
      return result;
    }
    goto LABEL_21;
  }
  uint64_t result = md::Label::collisionPriorityCmp(v32, 0, v33, 0, 0);
  if (result)
  {
LABEL_21:
    unint64_t v38 = *a1;
    *a1 = *a2;
    *a2 = v38;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a2 - a1;
  BOOL result = 1;
  switch(v3)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v5 = *(a2 - 1);
      unint64_t v6 = *a1;
      uint64_t v7 = *(void *)(v5 + 8);
      uint64_t v8 = *(void *)(*a1 + 8);
      if (v7 == v8
        || (int v9 = (*(uint64_t (**)(void))(*(void *)v7 + 640))(*(void *)(v5 + 8)),
            v9 != (*(unsigned int (**)(uint64_t))(*(void *)v8 + 640))(v8)))
      {
        unsigned int v26 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 640))(v7);
        if (v26 <= (*(unsigned int (**)(uint64_t))(*(void *)v8 + 640))(v8)) {
          return 1;
        }
      }
      else if (!md::Label::collisionPriorityCmp(v5, 0, v6, 0, 0))
      {
        return 1;
      }
      unint64_t v27 = *a1;
      *a1 = *(v2 - 1);
      *(v2 - 1) = v27;
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unint64_t v10 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_3 &,md::LabelBase **>(a1, a1 + 1, a1 + 2);
      unint64_t v11 = a1 + 3;
      if (a1 + 3 == v2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v30 = 0;
      uint64_t v28 = v2;
      break;
  }
  while (2)
  {
    unint64_t v14 = *v11;
    unint64_t v15 = *v10;
    uint64_t v16 = *(void *)(*v11 + 8);
    uint64_t v17 = *(void *)(*v10 + 8);
    if (v16 == v17
      || (int v18 = (*(uint64_t (**)(void))(*(void *)v16 + 640))(*(void *)(*v11 + 8)),
          v18 != (*(unsigned int (**)(uint64_t))(*(void *)v17 + 640))(v17)))
    {
      unsigned int v19 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 640))(v16);
      if (v19 <= (*(unsigned int (**)(uint64_t))(*(void *)v17 + 640))(v17)) {
        goto LABEL_11;
      }
    }
    else if (!md::Label::collisionPriorityCmp(v14, 0, v15, 0, 0))
    {
      goto LABEL_11;
    }
    unint64_t v20 = *v11;
    unint64_t *v11 = *v10;
    uint64_t v13 = a1;
    if (v10 == a1) {
      goto LABEL_10;
    }
    uint64_t v29 = v12;
    while (1)
    {
      unint64_t v21 = *(unint64_t *)((char *)a1 + v12 + 8);
      uint64_t v22 = *(void *)(v20 + 8);
      uint64_t v23 = *(void *)(v21 + 8);
      if (v22 != v23)
      {
        int v24 = (*(uint64_t (**)(void))(*(void *)v22 + 640))(*(void *)(v20 + 8));
        if (v24 == (*(unsigned int (**)(uint64_t))(*(void *)v23 + 640))(v23)) {
          break;
        }
      }
      unsigned int v25 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 640))(v22);
      if (v25 <= (*(unsigned int (**)(uint64_t))(*(void *)v23 + 640))(v23))
      {
        uint64_t v13 = (unint64_t *)((char *)a1 + v12 + 16);
        goto LABEL_9;
      }
LABEL_20:
      --v10;
      *(unint64_t *)((char *)a1 + v12 + 16) = *(unint64_t *)((char *)a1 + v12 + 8);
      v12 -= 8;
      if (v12 == -16)
      {
        uint64_t v13 = a1;
        goto LABEL_9;
      }
    }
    if (md::Label::collisionPriorityCmp(v20, 0, v21, 0, 0)) {
      goto LABEL_20;
    }
    uint64_t v13 = v10;
LABEL_9:
    uint64_t v2 = v28;
    uint64_t v12 = v29;
LABEL_10:
    unint64_t *v13 = v20;
    if (++v30 == 8) {
      return v11 + 1 == v2;
    }
LABEL_11:
    unint64_t v10 = v11;
    v12 += 8;
    if (++v11 != v2) {
      continue;
    }
    return 1;
  }
}

void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(*a2 + 8);
  uint64_t v9 = *(void *)(*a1 + 8);
  uint64_t v10 = *(void *)(*(void *)(*(void *)a4 + 168) + 32);
  double v11 = (*(double (**)(uint64_t))(*(void *)v10 + 72))(v10);
  unsigned int v12 = vabdd_f64(v11, (*(double (**)(uint64_t))(*(void *)v8 + 632))(v8));
  uint64_t v13 = *(void *)(*(void *)(*(void *)a4 + 168) + 32);
  double v14 = (*(double (**)(uint64_t))(*(void *)v13 + 72))(v13);
  unsigned int v15 = vabdd_f64(v14, (*(double (**)(uint64_t))(*(void *)v9 + 632))(v9));
  uint64_t v16 = *(void *)(*a3 + 8);
  uint64_t v17 = *(void *)(*a2 + 8);
  uint64_t v18 = *(void *)(*(void *)(*(void *)a4 + 168) + 32);
  double v19 = (*(double (**)(uint64_t))(*(void *)v18 + 72))(v18);
  unsigned int v20 = vabdd_f64(v19, (*(double (**)(uint64_t))(*(void *)v16 + 632))(v16));
  uint64_t v21 = *(void *)(*(void *)(*(void *)a4 + 168) + 32);
  double v22 = (*(double (**)(uint64_t))(*(void *)v21 + 72))(v21);
  unsigned int v23 = vabdd_f64(v22, (*(double (**)(uint64_t))(*(void *)v17 + 632))(v17));
  if (v12 >= v15)
  {
    if (v20 < v23)
    {
      uint64_t v25 = *a2;
      *a2 = *a3;
      *a3 = v25;
      uint64_t v26 = *(void *)(*a2 + 8);
      uint64_t v27 = *(void *)(*a1 + 8);
      uint64_t v28 = *(void *)(*(void *)(*(void *)a4 + 168) + 32);
      double v29 = (*(double (**)(uint64_t))(*(void *)v28 + 72))(v28);
      LODWORD(v26) = vabdd_f64(v29, (*(double (**)(uint64_t))(*(void *)v26 + 632))(v26));
      uint64_t v30 = *(void *)(*(void *)(*(void *)a4 + 168) + 32);
      double v31 = (*(double (**)(uint64_t))(*(void *)v30 + 72))(v30);
      if (v26 < vabdd_f64(v31, (*(double (**)(uint64_t))(*(void *)v27 + 632))(v27)))
      {
        uint64_t v32 = *a1;
        *a1 = *a2;
        *a2 = v32;
      }
    }
  }
  else
  {
    uint64_t v24 = *a1;
    if (v20 >= v23)
    {
      *a1 = *a2;
      *a2 = v24;
      uint64_t v33 = *(void *)(*a3 + 8);
      uint64_t v34 = *(void *)(v24 + 8);
      uint64_t v35 = *(void *)(*(void *)(*(void *)a4 + 168) + 32);
      double v36 = (*(double (**)(uint64_t))(*(void *)v35 + 72))(v35);
      LODWORD(v33) = vabdd_f64(v36, (*(double (**)(uint64_t))(*(void *)v33 + 632))(v33));
      uint64_t v37 = *(void *)(*(void *)(*(void *)a4 + 168) + 32);
      double v38 = (*(double (**)(uint64_t))(*(void *)v37 + 72))(v37);
      if (v33 >= vabdd_f64(v38, (*(double (**)(uint64_t))(*(void *)v34 + 632))(v34)))return; {
      uint64_t v24 = *a2;
      }
      *a2 = *a3;
    }
    else
    {
      *a1 = *a3;
    }
    *a3 = v24;
  }
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(a1, a2, a3, a5);
  uint64_t v10 = *(void *)(*a4 + 8);
  uint64_t v11 = *(void *)(*a3 + 8);
  uint64_t v12 = *(void *)(*(void *)(*(void *)a5 + 168) + 32);
  double v13 = (*(double (**)(uint64_t))(*(void *)v12 + 72))(v12);
  LODWORD(v10) = vabdd_f64(v13, (*(double (**)(uint64_t))(*(void *)v10 + 632))(v10));
  uint64_t v14 = *(void *)(*(void *)(*(void *)a5 + 168) + 32);
  double v15 = (*(double (**)(uint64_t))(*(void *)v14 + 72))(v14);
  if (v10 < vabdd_f64(v15, (*(double (**)(uint64_t))(*(void *)v11 + 632))(v11)))
  {
    uint64_t v16 = *a3;
    *a3 = *a4;
    *a4 = v16;
    uint64_t v17 = *(void *)(*a3 + 8);
    uint64_t v18 = *(void *)(*a2 + 8);
    uint64_t v19 = *(void *)(*(void *)(*(void *)a5 + 168) + 32);
    double v20 = (*(double (**)(uint64_t))(*(void *)v19 + 72))(v19);
    LODWORD(v17) = vabdd_f64(v20, (*(double (**)(uint64_t))(*(void *)v17 + 632))(v17));
    uint64_t v21 = *(void *)(*(void *)(*(void *)a5 + 168) + 32);
    double v22 = (*(double (**)(uint64_t))(*(void *)v21 + 72))(v21);
    if (v17 < vabdd_f64(v22, (*(double (**)(uint64_t))(*(void *)v18 + 632))(v18)))
    {
      uint64_t v23 = *a2;
      *a2 = *a3;
      *a3 = v23;
      uint64_t v24 = *(void *)(*a2 + 8);
      uint64_t v25 = *(void *)(*a1 + 8);
      uint64_t v26 = *(void *)(*(void *)(*(void *)a5 + 168) + 32);
      double v27 = (*(double (**)(uint64_t))(*(void *)v26 + 72))(v26);
      LODWORD(v24) = vabdd_f64(v27, (*(double (**)(uint64_t))(*(void *)v24 + 632))(v24));
      uint64_t v28 = *(void *)(*(void *)(*(void *)a5 + 168) + 32);
      double v29 = (*(double (**)(uint64_t))(*(void *)v28 + 72))(v28);
      if (v24 < vabdd_f64(v29, (*(double (**)(uint64_t))(*(void *)v25 + 632))(v25)))
      {
        uint64_t v30 = *a1;
        *a1 = *a2;
        *a2 = v30;
      }
    }
  }
}

void std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(a1, a2, a3, a4, a6);
  uint64_t v12 = *(void *)(*a5 + 8);
  uint64_t v13 = *(void *)(*a4 + 8);
  uint64_t v14 = *(void *)(*(void *)(*(void *)a6 + 168) + 32);
  double v15 = (*(double (**)(uint64_t))(*(void *)v14 + 72))(v14);
  LODWORD(v12) = vabdd_f64(v15, (*(double (**)(uint64_t))(*(void *)v12 + 632))(v12));
  uint64_t v16 = *(void *)(*(void *)(*(void *)a6 + 168) + 32);
  double v17 = (*(double (**)(uint64_t))(*(void *)v16 + 72))(v16);
  if (v12 < vabdd_f64(v17, (*(double (**)(uint64_t))(*(void *)v13 + 632))(v13)))
  {
    uint64_t v18 = *a4;
    *a4 = *a5;
    *a5 = v18;
    uint64_t v19 = *(void *)(*a4 + 8);
    uint64_t v20 = *(void *)(*a3 + 8);
    uint64_t v21 = *(void *)(*(void *)(*(void *)a6 + 168) + 32);
    double v22 = (*(double (**)(uint64_t))(*(void *)v21 + 72))(v21);
    LODWORD(v19) = vabdd_f64(v22, (*(double (**)(uint64_t))(*(void *)v19 + 632))(v19));
    uint64_t v23 = *(void *)(*(void *)(*(void *)a6 + 168) + 32);
    double v24 = (*(double (**)(uint64_t))(*(void *)v23 + 72))(v23);
    if (v19 < vabdd_f64(v24, (*(double (**)(uint64_t))(*(void *)v20 + 632))(v20)))
    {
      uint64_t v25 = *a3;
      *a3 = *a4;
      *a4 = v25;
      uint64_t v26 = *(void *)(*a3 + 8);
      uint64_t v27 = *(void *)(*a2 + 8);
      uint64_t v28 = *(void *)(*(void *)(*(void *)a6 + 168) + 32);
      double v29 = (*(double (**)(uint64_t))(*(void *)v28 + 72))(v28);
      LODWORD(v26) = vabdd_f64(v29, (*(double (**)(uint64_t))(*(void *)v26 + 632))(v26));
      uint64_t v30 = *(void *)(*(void *)(*(void *)a6 + 168) + 32);
      double v31 = (*(double (**)(uint64_t))(*(void *)v30 + 72))(v30);
      if (v26 < vabdd_f64(v31, (*(double (**)(uint64_t))(*(void *)v27 + 632))(v27)))
      {
        uint64_t v32 = *a2;
        *a2 = *a3;
        *a3 = v32;
        uint64_t v33 = *(void *)(*a2 + 8);
        uint64_t v34 = *(void *)(*a1 + 8);
        uint64_t v35 = *(void *)(*(void *)(*(void *)a6 + 168) + 32);
        double v36 = (*(double (**)(uint64_t))(*(void *)v35 + 72))(v35);
        LODWORD(v33) = vabdd_f64(v36, (*(double (**)(uint64_t))(*(void *)v33 + 632))(v33));
        uint64_t v37 = *(void *)(*(void *)(*(void *)a6 + 168) + 32);
        double v38 = (*(double (**)(uint64_t))(*(void *)v37 + 72))(v37);
        if (v33 < vabdd_f64(v38, (*(double (**)(uint64_t))(*(void *)v34 + 632))(v34)))
        {
          uint64_t v39 = *a1;
          *a1 = *a2;
          *a2 = v39;
        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(void *)(*(a2 - 1) + 8);
      uint64_t v9 = *(void *)(*a1 + 8);
      uint64_t v10 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
      double v11 = (*(double (**)(uint64_t))(*(void *)v10 + 72))(v10);
      LODWORD(v8) = vabdd_f64(v11, (*(double (**)(uint64_t))(*(void *)v8 + 632))(v8));
      uint64_t v12 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
      double v13 = (*(double (**)(uint64_t))(*(void *)v12 + 72))(v12);
      if (v8 < vabdd_f64(v13, (*(double (**)(uint64_t))(*(void *)v9 + 632))(v9)))
      {
        uint64_t v14 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v14;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      double v15 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_2 &,md::LabelBase **>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v16 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v17 = 0;
      int v18 = 0;
      break;
  }
  while (1)
  {
    uint64_t v20 = *v15;
    uint64_t v21 = *(void *)(*v16 + 8);
    uint64_t v22 = *(void *)(v20 + 8);
    uint64_t v23 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
    double v24 = (*(double (**)(uint64_t))(*(void *)v23 + 72))(v23);
    LODWORD(v21) = vabdd_f64(v24, (*(double (**)(uint64_t))(*(void *)v21 + 632))(v21));
    uint64_t v25 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
    double v26 = (*(double (**)(uint64_t))(*(void *)v25 + 72))(v25);
    if (v21 < vabdd_f64(v26, (*(double (**)(uint64_t))(*(void *)v22 + 632))(v22)))
    {
      uint64_t v27 = *v16;
      uint64_t v28 = v17;
      do
      {
        *(uint64_t *)((char *)a1 + v28 + 24) = *(uint64_t *)((char *)a1 + v28 + 16);
        if (v28 == -16)
        {
          uint64_t v19 = a1;
          goto LABEL_7;
        }
        uint64_t v29 = *(void *)(v27 + 8);
        uint64_t v30 = *(void *)(*(uint64_t *)((char *)a1 + v28 + 8) + 8);
        uint64_t v31 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
        double v32 = (*(double (**)(uint64_t))(*(void *)v31 + 72))(v31);
        LODWORD(v29) = vabdd_f64(v32, (*(double (**)(uint64_t))(*(void *)v29 + 632))(v29));
        uint64_t v33 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
        double v34 = (*(double (**)(uint64_t))(*(void *)v33 + 72))(v33);
        v28 -= 8;
      }
      while (v29 < vabdd_f64(v34, (*(double (**)(uint64_t))(*(void *)v30 + 632))(v30)));
      uint64_t v19 = (uint64_t *)((char *)a1 + v28 + 24);
LABEL_7:
      *uint64_t v19 = v27;
      if (++v18 == 8) {
        return v16 + 1 == a2;
      }
    }
    double v15 = v16;
    v17 += 8;
    if (++v16 == a2) {
      return 1;
    }
  }
}

void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = *(void *)(*a2 + 8);
  uint64_t v9 = *(void *)(*a1 + 8);
  int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 640))(v8);
  if (v10 == (*(unsigned int (**)(uint64_t))(*(void *)v9 + 640))(v9))
  {
    uint64_t v11 = *(void *)(*(void *)(*(void *)a4 + 168) + 32);
    double v12 = (*(double (**)(uint64_t))(*(void *)v11 + 72))(v11);
    unsigned int v13 = vabdd_f64(v12, (*(double (**)(uint64_t))(*(void *)v8 + 632))(v8));
    uint64_t v14 = *(void *)(*(void *)(*(void *)a4 + 168) + 32);
    double v15 = (*(double (**)(uint64_t))(*(void *)v14 + 72))(v14);
    if (v13 >= vabdd_f64(v15, (*(double (**)(uint64_t))(*(void *)v9 + 632))(v9))) {
      goto LABEL_3;
    }
  }
  else
  {
    unsigned int v24 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 640))(v8);
    if (v24 <= (*(unsigned int (**)(uint64_t))(*(void *)v9 + 640))(v9))
    {
LABEL_3:
      uint64_t v16 = *(void *)(*a3 + 8);
      uint64_t v17 = *(void *)(*v6 + 8);
      int v18 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 640))(v16);
      if (v18 == (*(unsigned int (**)(uint64_t))(*(void *)v17 + 640))(v17))
      {
        uint64_t v19 = *(void *)(*(void *)(*(void *)a4 + 168) + 32);
        double v20 = (*(double (**)(uint64_t))(*(void *)v19 + 72))(v19);
        unsigned int v21 = vabdd_f64(v20, (*(double (**)(uint64_t))(*(void *)v16 + 632))(v16));
        uint64_t v22 = *(void *)(*(void *)(*(void *)a4 + 168) + 32);
        double v23 = (*(double (**)(uint64_t))(*(void *)v22 + 72))(v22);
        if (v21 >= vabdd_f64(v23, (*(double (**)(uint64_t))(*(void *)v17 + 632))(v17))) {
          return;
        }
      }
      else
      {
        unsigned int v33 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 640))(v16);
        if (v33 <= (*(unsigned int (**)(uint64_t))(*(void *)v17 + 640))(v17)) {
          return;
        }
      }
      uint64_t v34 = *v6;
      *uint64_t v6 = *a3;
      *a3 = v34;
      uint64_t v35 = *(void *)(*v6 + 8);
      uint64_t v36 = *(void *)(*v7 + 8);
      int v37 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 640))(v35);
      if (v37 == (*(unsigned int (**)(uint64_t))(*(void *)v36 + 640))(v36))
      {
        uint64_t v38 = *(void *)(*(void *)(*(void *)a4 + 168) + 32);
        double v39 = (*(double (**)(uint64_t))(*(void *)v38 + 72))(v38);
        unsigned int v40 = vabdd_f64(v39, (*(double (**)(uint64_t))(*(void *)v35 + 632))(v35));
        uint64_t v41 = *(void *)(*(void *)(*(void *)a4 + 168) + 32);
        double v42 = (*(double (**)(uint64_t))(*(void *)v41 + 72))(v41);
        unsigned int v43 = vabdd_f64(v42, (*(double (**)(uint64_t))(*(void *)v36 + 632))(v36));
        goto LABEL_16;
      }
      unsigned int v54 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 640))(v35);
      if (v54 <= (*(unsigned int (**)(uint64_t))(*(void *)v36 + 640))(v36)) {
        return;
      }
LABEL_17:
      uint64_t v53 = *v7;
      *uint64_t v7 = *v6;
      *uint64_t v6 = v53;
      return;
    }
  }
  uint64_t v25 = *(void *)(*a3 + 8);
  uint64_t v26 = *(void *)(*v6 + 8);
  int v27 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 640))(v25);
  if (v27 == (*(unsigned int (**)(uint64_t))(*(void *)v26 + 640))(v26))
  {
    uint64_t v28 = *(void *)(*(void *)(*(void *)a4 + 168) + 32);
    double v29 = (*(double (**)(uint64_t))(*(void *)v28 + 72))(v28);
    unsigned int v30 = vabdd_f64(v29, (*(double (**)(uint64_t))(*(void *)v25 + 632))(v25));
    uint64_t v31 = *(void *)(*(void *)(*(void *)a4 + 168) + 32);
    double v32 = (*(double (**)(uint64_t))(*(void *)v31 + 72))(v31);
    if (v30 < vabdd_f64(v32, (*(double (**)(uint64_t))(*(void *)v26 + 632))(v26)))
    {
LABEL_9:
      uint64_t v6 = a3;
      goto LABEL_17;
    }
  }
  else
  {
    unsigned int v44 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 640))(v25);
    if (v44 > (*(unsigned int (**)(uint64_t))(*(void *)v26 + 640))(v26)) {
      goto LABEL_9;
    }
  }
  uint64_t v45 = *v7;
  *uint64_t v7 = *v6;
  *uint64_t v6 = v45;
  uint64_t v46 = *(void *)(*a3 + 8);
  uint64_t v47 = *(void *)(v45 + 8);
  int v48 = (*(uint64_t (**)(uint64_t))(*(void *)v46 + 640))(v46);
  if (v48 == (*(unsigned int (**)(uint64_t))(*(void *)v47 + 640))(v47))
  {
    uint64_t v49 = *(void *)(*(void *)(*(void *)a4 + 168) + 32);
    double v50 = (*(double (**)(uint64_t))(*(void *)v49 + 72))(v49);
    unsigned int v40 = vabdd_f64(v50, (*(double (**)(uint64_t))(*(void *)v46 + 632))(v46));
    uint64_t v51 = *(void *)(*(void *)(*(void *)a4 + 168) + 32);
    double v52 = (*(double (**)(uint64_t))(*(void *)v51 + 72))(v51);
    unsigned int v43 = vabdd_f64(v52, (*(double (**)(uint64_t))(*(void *)v47 + 632))(v47));
    uint64_t v7 = v6;
    uint64_t v6 = a3;
LABEL_16:
    if (v40 >= v43) {
      return;
    }
    goto LABEL_17;
  }
  unsigned int v55 = (*(uint64_t (**)(uint64_t))(*(void *)v46 + 640))(v46);
  unsigned int v56 = (*(uint64_t (**)(uint64_t))(*(void *)v47 + 640))(v47);
  uint64_t v7 = v6;
  uint64_t v6 = a3;
  if (v55 > v56) {
    goto LABEL_17;
  }
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(a1, a2, a3, a5);
  uint64_t v10 = *(void *)(*a4 + 8);
  uint64_t v11 = *(void *)(*a3 + 8);
  int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 640))(v10);
  if (v12 == (*(unsigned int (**)(uint64_t))(*(void *)v11 + 640))(v11))
  {
    uint64_t v13 = *(void *)(*(void *)(*(void *)a5 + 168) + 32);
    double v14 = (*(double (**)(uint64_t))(*(void *)v13 + 72))(v13);
    unsigned int v15 = vabdd_f64(v14, (*(double (**)(uint64_t))(*(void *)v10 + 632))(v10));
    uint64_t v16 = *(void *)(*(void *)(*(void *)a5 + 168) + 32);
    double v17 = (*(double (**)(uint64_t))(*(void *)v16 + 72))(v16);
    if (v15 >= vabdd_f64(v17, (*(double (**)(uint64_t))(*(void *)v11 + 632))(v11))) {
      return;
    }
  }
  else
  {
    unsigned int v18 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 640))(v10);
    if (v18 <= (*(unsigned int (**)(uint64_t))(*(void *)v11 + 640))(v11)) {
      return;
    }
  }
  uint64_t v19 = *a3;
  *a3 = *a4;
  *a4 = v19;
  uint64_t v20 = *(void *)(*a3 + 8);
  uint64_t v21 = *(void *)(*a2 + 8);
  int v22 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 640))(v20);
  if (v22 == (*(unsigned int (**)(uint64_t))(*(void *)v21 + 640))(v21))
  {
    uint64_t v23 = *(void *)(*(void *)(*(void *)a5 + 168) + 32);
    double v24 = (*(double (**)(uint64_t))(*(void *)v23 + 72))(v23);
    unsigned int v25 = vabdd_f64(v24, (*(double (**)(uint64_t))(*(void *)v20 + 632))(v20));
    uint64_t v26 = *(void *)(*(void *)(*(void *)a5 + 168) + 32);
    double v27 = (*(double (**)(uint64_t))(*(void *)v26 + 72))(v26);
    if (v25 >= vabdd_f64(v27, (*(double (**)(uint64_t))(*(void *)v21 + 632))(v21))) {
      return;
    }
  }
  else
  {
    unsigned int v28 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 640))(v20);
    if (v28 <= (*(unsigned int (**)(uint64_t))(*(void *)v21 + 640))(v21)) {
      return;
    }
  }
  uint64_t v29 = *a2;
  *a2 = *a3;
  *a3 = v29;
  uint64_t v30 = *(void *)(*a2 + 8);
  uint64_t v31 = *(void *)(*a1 + 8);
  int v32 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 640))(v30);
  if (v32 != (*(unsigned int (**)(uint64_t))(*(void *)v31 + 640))(v31))
  {
    unsigned int v38 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 640))(v30);
    if (v38 <= (*(unsigned int (**)(uint64_t))(*(void *)v31 + 640))(v31)) {
      return;
    }
    goto LABEL_13;
  }
  uint64_t v33 = *(void *)(*(void *)(*(void *)a5 + 168) + 32);
  double v34 = (*(double (**)(uint64_t))(*(void *)v33 + 72))(v33);
  unsigned int v35 = vabdd_f64(v34, (*(double (**)(uint64_t))(*(void *)v30 + 632))(v30));
  uint64_t v36 = *(void *)(*(void *)(*(void *)a5 + 168) + 32);
  double v37 = (*(double (**)(uint64_t))(*(void *)v36 + 72))(v36);
  if (v35 < vabdd_f64(v37, (*(double (**)(uint64_t))(*(void *)v31 + 632))(v31)))
  {
LABEL_13:
    uint64_t v39 = *a1;
    *a1 = *a2;
    *a2 = v39;
  }
}

void std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(a1, a2, a3, a4, a6);
  uint64_t v12 = *(void *)(*a5 + 8);
  uint64_t v13 = *(void *)(*a4 + 8);
  int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 640))(v12);
  if (v14 == (*(unsigned int (**)(uint64_t))(*(void *)v13 + 640))(v13))
  {
    uint64_t v15 = *(void *)(*(void *)(*(void *)a6 + 168) + 32);
    double v16 = (*(double (**)(uint64_t))(*(void *)v15 + 72))(v15);
    unsigned int v17 = vabdd_f64(v16, (*(double (**)(uint64_t))(*(void *)v12 + 632))(v12));
    uint64_t v18 = *(void *)(*(void *)(*(void *)a6 + 168) + 32);
    double v19 = (*(double (**)(uint64_t))(*(void *)v18 + 72))(v18);
    if (v17 >= vabdd_f64(v19, (*(double (**)(uint64_t))(*(void *)v13 + 632))(v13))) {
      return;
    }
  }
  else
  {
    unsigned int v20 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 640))(v12);
    if (v20 <= (*(unsigned int (**)(uint64_t))(*(void *)v13 + 640))(v13)) {
      return;
    }
  }
  uint64_t v21 = *a4;
  *a4 = *a5;
  *a5 = v21;
  uint64_t v22 = *(void *)(*a4 + 8);
  uint64_t v23 = *(void *)(*a3 + 8);
  int v24 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 640))(v22);
  if (v24 == (*(unsigned int (**)(uint64_t))(*(void *)v23 + 640))(v23))
  {
    uint64_t v25 = *(void *)(*(void *)(*(void *)a6 + 168) + 32);
    double v26 = (*(double (**)(uint64_t))(*(void *)v25 + 72))(v25);
    unsigned int v27 = vabdd_f64(v26, (*(double (**)(uint64_t))(*(void *)v22 + 632))(v22));
    uint64_t v28 = *(void *)(*(void *)(*(void *)a6 + 168) + 32);
    double v29 = (*(double (**)(uint64_t))(*(void *)v28 + 72))(v28);
    if (v27 >= vabdd_f64(v29, (*(double (**)(uint64_t))(*(void *)v23 + 632))(v23))) {
      return;
    }
  }
  else
  {
    unsigned int v30 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 640))(v22);
    if (v30 <= (*(unsigned int (**)(uint64_t))(*(void *)v23 + 640))(v23)) {
      return;
    }
  }
  uint64_t v31 = *a3;
  *a3 = *a4;
  *a4 = v31;
  uint64_t v32 = *(void *)(*a3 + 8);
  uint64_t v33 = *(void *)(*a2 + 8);
  int v34 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 640))(v32);
  if (v34 == (*(unsigned int (**)(uint64_t))(*(void *)v33 + 640))(v33))
  {
    uint64_t v35 = *(void *)(*(void *)(*(void *)a6 + 168) + 32);
    double v36 = (*(double (**)(uint64_t))(*(void *)v35 + 72))(v35);
    unsigned int v37 = vabdd_f64(v36, (*(double (**)(uint64_t))(*(void *)v32 + 632))(v32));
    uint64_t v38 = *(void *)(*(void *)(*(void *)a6 + 168) + 32);
    double v39 = (*(double (**)(uint64_t))(*(void *)v38 + 72))(v38);
    if (v37 >= vabdd_f64(v39, (*(double (**)(uint64_t))(*(void *)v33 + 632))(v33))) {
      return;
    }
  }
  else
  {
    unsigned int v40 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 640))(v32);
    if (v40 <= (*(unsigned int (**)(uint64_t))(*(void *)v33 + 640))(v33)) {
      return;
    }
  }
  uint64_t v41 = *a2;
  *a2 = *a3;
  *a3 = v41;
  uint64_t v42 = *(void *)(*a2 + 8);
  uint64_t v43 = *(void *)(*a1 + 8);
  int v44 = (*(uint64_t (**)(uint64_t))(*(void *)v42 + 640))(v42);
  if (v44 != (*(unsigned int (**)(uint64_t))(*(void *)v43 + 640))(v43))
  {
    unsigned int v50 = (*(uint64_t (**)(uint64_t))(*(void *)v42 + 640))(v42);
    if (v50 <= (*(unsigned int (**)(uint64_t))(*(void *)v43 + 640))(v43)) {
      return;
    }
    goto LABEL_17;
  }
  uint64_t v45 = *(void *)(*(void *)(*(void *)a6 + 168) + 32);
  double v46 = (*(double (**)(uint64_t))(*(void *)v45 + 72))(v45);
  unsigned int v47 = vabdd_f64(v46, (*(double (**)(uint64_t))(*(void *)v42 + 632))(v42));
  uint64_t v48 = *(void *)(*(void *)(*(void *)a6 + 168) + 32);
  double v49 = (*(double (**)(uint64_t))(*(void *)v48 + 72))(v48);
  if (v47 < vabdd_f64(v49, (*(double (**)(uint64_t))(*(void *)v43 + 632))(v43)))
  {
LABEL_17:
    uint64_t v51 = *a1;
    *a1 = *a2;
    *a2 = v51;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v5 = a2 - a1;
  BOOL result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v7 = *(void *)(*(a2 - 1) + 8);
      uint64_t v8 = *(void *)(*a1 + 8);
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 640))(v7);
      if (v9 == (*(unsigned int (**)(uint64_t))(*(void *)v8 + 640))(v8))
      {
        uint64_t v10 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
        double v11 = (*(double (**)(uint64_t))(*(void *)v10 + 72))(v10);
        unsigned int v12 = vabdd_f64(v11, (*(double (**)(uint64_t))(*(void *)v7 + 632))(v7));
        uint64_t v13 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
        double v14 = (*(double (**)(uint64_t))(*(void *)v13 + 72))(v13);
        if (v12 >= vabdd_f64(v14, (*(double (**)(uint64_t))(*(void *)v8 + 632))(v8))) {
          return 1;
        }
      }
      else
      {
        unsigned int v39 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 640))(v7);
        if (v39 <= (*(unsigned int (**)(uint64_t))(*(void *)v8 + 640))(v8)) {
          return 1;
        }
      }
      uint64_t v40 = *a1;
      *a1 = *(v3 - 1);
      *(v3 - 1) = v40;
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v15 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::RouteAnnotationDedupingGroup::prepareForCollision(md::LabelManager *)::$_1 &,md::LabelBase **>(a1, a1 + 1, a1 + 2, a3);
      double v16 = a1 + 3;
      if (a1 + 3 == v3) {
        return 1;
      }
      uint64_t v17 = 0;
      int v42 = 0;
      uint64_t v41 = v3;
      break;
  }
  while (2)
  {
    uint64_t v19 = *(void *)(*v16 + 8);
    uint64_t v20 = *(void *)(*v15 + 8);
    int v21 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 640))(v19);
    if (v21 == (*(unsigned int (**)(uint64_t))(*(void *)v20 + 640))(v20))
    {
      uint64_t v22 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
      double v23 = (*(double (**)(uint64_t))(*(void *)v22 + 72))(v22);
      unsigned int v24 = vabdd_f64(v23, (*(double (**)(uint64_t))(*(void *)v19 + 632))(v19));
      uint64_t v25 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
      double v26 = (*(double (**)(uint64_t))(*(void *)v25 + 72))(v25);
      if (v24 >= vabdd_f64(v26, (*(double (**)(uint64_t))(*(void *)v20 + 632))(v20))) {
        goto LABEL_10;
      }
    }
    else
    {
      unsigned int v27 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 640))(v19);
      if (v27 <= (*(unsigned int (**)(uint64_t))(*(void *)v20 + 640))(v20)) {
        goto LABEL_10;
      }
    }
    uint64_t v28 = *v16;
    uint64_t *v16 = *v15;
    uint64_t v18 = a1;
    if (v15 == a1) {
      goto LABEL_9;
    }
    uint64_t v29 = v17;
    while (1)
    {
      uint64_t v31 = *(void *)(v28 + 8);
      uint64_t v32 = *(void *)(*(uint64_t *)((char *)a1 + v29 + 8) + 8);
      int v33 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 640))(v31);
      if (v33 != (*(unsigned int (**)(uint64_t))(*(void *)v32 + 640))(v32)) {
        break;
      }
      uint64_t v34 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
      double v35 = (*(double (**)(uint64_t))(*(void *)v34 + 72))(v34);
      unsigned int v36 = vabdd_f64(v35, (*(double (**)(uint64_t))(*(void *)v31 + 632))(v31));
      uint64_t v37 = *(void *)(*(void *)(*(void *)a3 + 168) + 32);
      double v38 = (*(double (**)(uint64_t))(*(void *)v37 + 72))(v37);
      if (v36 >= vabdd_f64(v38, (*(double (**)(uint64_t))(*(void *)v32 + 632))(v32)))
      {
        uint64_t v18 = v15;
        goto LABEL_8;
      }
LABEL_18:
      --v15;
      *(uint64_t *)((char *)a1 + v29 + 16) = *(uint64_t *)((char *)a1 + v29 + 8);
      v29 -= 8;
      if (v29 == -16)
      {
        uint64_t v18 = a1;
        goto LABEL_8;
      }
    }
    unsigned int v30 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 640))(v31);
    if (v30 > (*(unsigned int (**)(uint64_t))(*(void *)v32 + 640))(v32)) {
      goto LABEL_18;
    }
    uint64_t v18 = (uint64_t *)((char *)a1 + v29 + 16);
LABEL_8:
    uint64_t v3 = v41;
LABEL_9:
    *uint64_t v18 = v28;
    if (++v42 == 8) {
      return v16 + 1 == v3;
    }
LABEL_10:
    uint64_t v15 = v16;
    v17 += 8;
    if (++v16 != v3) {
      continue;
    }
    return 1;
  }
}

void md::RouteAnnotationDedupingGroup::~RouteAnnotationDedupingGroup(md::RouteAnnotationDedupingGroup *this)
{
  *(void *)this = &unk_1EF539178;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 8) + 40))(*((void *)this + 8), v2, *((void *)this + 7) - v2);
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 4) + 40))(*((void *)this + 4), v3, *((void *)this + 3) - v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_1EF539178;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 8) + 40))(*((void *)this + 8), v2, *((void *)this + 7) - v2);
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 4) + 40))(*((void *)this + 4), v3, *((void *)this + 3) - v3);
  }
}

void ggl::FlyoverOverlay::P3T2PipelineState::~P3T2PipelineState(ggl::FlyoverOverlay::P3T2PipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::FlyoverOverlay::P3T2PipelineState::P3T2PipelineState(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, char a5)
{
  {
    unsigned __int8 v84 = a4;
    unsigned __int8 v86 = a2;
    uint64_t v87 = a3;
    a2 = v86;
    a3 = v87;
    a4 = v84;
    if (v85)
    {
      {
        if (v85)
        {
          {
            {
              ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos4UVReflection;
            }
            ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::attributesReflection(void)::r;
            unk_1E958CB20 = 1;
          }
          ggl::FlyoverOverlay::P3T2PipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos4UV>::typedReflection(void)::r;
          *(void *)algn_1E957E748 = &ggl::FlyoverOverlay::pipelineDataP3T2PipelineDeviceStructs(void)::ref;
          qword_1E957E750 = 0;
          {
            ggl::FlyoverOverlay::pipelineDataP3T2PipelineConstantStructs(void)::ref = (uint64_t)ggl::FlyoverOverlay::Shared::reflection(void)::reflection;
            unk_1E957E780 = ggl::FlyoverOverlay::Transform::reflection(void)::reflection;
            qword_1E957E788 = (uint64_t)ggl::FlyoverOverlay::UVScalar::reflection(void)::reflection;
            unk_1E957E790 = ggl::Blending::SRGBBlendStyle::reflection(void)::reflection;
            qword_1E957E798 = (uint64_t)ggl::OverlayOcclusion::AlphaTint::reflection(void)::reflection;
          }
          qword_1E957E758 = (uint64_t)&ggl::FlyoverOverlay::pipelineDataP3T2PipelineConstantStructs(void)::ref;
          unk_1E957E760 = xmmword_1A28FC940;
        }
      }
      ggl::FlyoverOverlay::P3T2PipelineState::typedReflection(void)::ref = (uint64_t)&ggl::FlyoverOverlay::P3T2PipelineSetup::typedReflection(void)::ref;
      ggl::FlyoverOverlayShader::typedReflection(v85);
      qword_1E95945B0 = (uint64_t)&ggl::FlyoverOverlayShader::typedReflection(void)::ref;
      {
        ggl::FlyoverOverlay::pipelineStateP3T2PipelineAttributeStructBinding(void)::attr = 0;
        unk_1E9594610 = 0;
        qword_1E9594618 = (uint64_t)"";
        dword_1E9594620 = 0;
        qword_1E9594628 = (uint64_t)&ggl::FlyoverOverlay::pipelineStateP3T2PipelineAttributeBinding_0(void)::attr;
        unk_1E9594630 = 2;
      }
      qword_1E95945B8 = (uint64_t)&ggl::FlyoverOverlay::pipelineStateP3T2PipelineAttributeStructBinding(void)::attr;
      unk_1E95945C0 = 1;
      qword_1E95945C8 = 0;
      unk_1E95945D0 = 1;
      qword_1E95945D8 = (uint64_t)&ggl::FlyoverOverlay::pipelineStateP3T2PipelineDeviceStructBinding(void)::ref;
      unk_1E95945E0 = 0;
      {
        ggl::FlyoverOverlay::pipelineStateP3T2PipelineConstantStructBinding(void)::ref = 0;
        unk_1E9594650 = 0;
        qword_1E9594658 = (uint64_t)"sharedConstants";
        dword_1E9594660 = 3;
        qword_1E9594668 = (uint64_t)&ggl::FlyoverOverlay::pipelineStateP3T2PipelineConstantSharedConstantsBinding(void)::reflection;
        *(_OWORD *)algn_1E9594670 = xmmword_1A28FCEB0;
        qword_1E9594680 = 1;
        unk_1E9594688 = "transform";
        dword_1E9594690 = 3;
        qword_1E9594698 = (uint64_t)&ggl::FlyoverOverlay::pipelineStateP3T2PipelineConstantTransformBinding(void)::reflection;
        unk_1E95946A0 = xmmword_1A28FC6E0;
        qword_1E95946B0 = 2;
        unk_1E95946B8 = "uvScalar";
        dword_1E95946C0 = 3;
        qword_1E95946C8 = (uint64_t)&ggl::FlyoverOverlay::pipelineStateP3T2PipelineConstantUvScalarBinding(void)::reflection;
        *(_OWORD *)algn_1E95946D0 = xmmword_1A28FD040;
        qword_1E95946E0 = 3;
        unk_1E95946E8 = "style";
        dword_1E95946F0 = 3;
        qword_1E95946F8 = (uint64_t)&ggl::FlyoverOverlay::pipelineStateP3T2PipelineConstantStyleBinding(void)::reflection;
        unk_1E9594700 = xmmword_1A28FCD60;
        qword_1E9594710 = 4;
        unk_1E9594718 = "alphaTint";
        dword_1E9594720 = 3;
        qword_1E9594728 = (uint64_t)&ggl::FlyoverOverlay::pipelineStateP3T2PipelineConstantAlphaTintBinding(void)::reflection;
        unk_1E9594730 = 1;
      }
      qword_1E95945E8 = (uint64_t)&ggl::FlyoverOverlay::pipelineStateP3T2PipelineConstantStructBinding(void)::ref;
      unk_1E95945F0 = 5;
      a4 = v84;
      a2 = v86;
      a3 = v87;
    }
  }
  uint64_t v7 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)int v90 = *(_OWORD *)a3;
  *(_OWORD *)&v90[12] = *(_OWORD *)(a3 + 12);
  long long v9 = *(_OWORD *)(a3 + 28);
  char v10 = *(unsigned char *)(a3 + 44);
  long long v88 = *a4;
  long long v89 = a4[1];
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EF55B208;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = &ggl::FlyoverOverlay::P3T2PipelineState::typedReflection(void)::ref;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_1A28FC970;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 164) = xmmword_1A28FC970;
  *(void *)(a1 + 180) = 0;
  *(void *)(a1 + 196) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 212) = xmmword_1A28FC970;
  *(void *)(a1 + 228) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 236) = 0;
  *(_OWORD *)(a1 + 256) = v88;
  *(_OWORD *)(a1 + 272) = v89;
  *(unsigned char *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x100000001;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v90;
  *(_OWORD *)(a1 + 76) = *(_OWORD *)&v90[12];
  *(_OWORD *)(a1 + 92) = v9;
  *(unsigned char *)(a1 + 108) = v10;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(unsigned char *)(a1 + 304) = a5;
  *(unsigned char *)(a1 + 305) = 0;
  int8x16_t v11 = *(int8x16_t *)(a1 + 320);
  int8x16_t v12 = vceqzq_s8(*(int8x16_t *)(a1 + 304));
  int16x8_t v13 = vmovl_high_s8(v12);
  int32x4_t v14 = vmovl_s16(*(int16x4_t *)v13.i8);
  v15.i64[0] = v14.u32[0];
  v15.i64[1] = v14.u32[1];
  int8x16_t v16 = v15;
  int16x8_t v17 = vmovl_s8(*(int8x8_t *)v12.i8);
  int32x4_t v18 = vmovl_s16(*(int16x4_t *)v17.i8);
  v15.i64[0] = v18.u32[0];
  v15.i64[1] = v18.u32[1];
  int8x16_t v19 = v15;
  *(void *)a1 = &unk_1EF55B580;
  int32x4_t v20 = vmovl_high_s16(v13);
  v15.i64[0] = v20.u32[0];
  v15.i64[1] = v20.u32[1];
  int8x16_t v21 = v15;
  int32x4_t v22 = vmovl_high_s16(v17);
  v15.i64[0] = v22.u32[0];
  v15.i64[1] = v22.u32[1];
  int8x16_t v23 = v15;
  v15.i64[0] = v14.u32[2];
  v15.i64[1] = v14.u32[3];
  int8x16_t v24 = v15;
  v15.i64[0] = v18.u32[2];
  v15.i64[1] = v18.u32[3];
  int8x16_t v25 = v15;
  v15.i64[0] = v20.u32[2];
  v15.i64[1] = v20.u32[3];
  int8x16_t v26 = v15;
  v15.i64[0] = v22.u32[2];
  v15.i64[1] = v22.u32[3];
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v15);
  int8x16_t v28 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v26);
  int8x16_t v29 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v25);
  int8x16_t v30 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v21);
  int8x16_t v31 = vceqzq_s8(v11);
  int16x8_t v32 = vmovl_high_s8(v31);
  int32x4_t v33 = vmovl_s16(*(int16x4_t *)v32.i8);
  v15.i64[0] = v33.u32[0];
  v15.i64[1] = v33.u32[1];
  int8x16_t v34 = v15;
  int16x8_t v35 = vmovl_s8(*(int8x8_t *)v31.i8);
  int32x4_t v36 = vmovl_s16(*(int16x4_t *)v35.i8);
  v15.i64[0] = v36.u32[0];
  v15.i64[1] = v36.u32[1];
  int8x16_t v37 = v15;
  int32x4_t v38 = vmovl_high_s16(v32);
  v15.i64[0] = v38.u32[0];
  v15.i64[1] = v38.u32[1];
  int8x16_t v39 = v15;
  int32x4_t v40 = vmovl_high_s16(v35);
  v15.i64[0] = v40.u32[0];
  v15.i64[1] = v40.u32[1];
  int8x16_t v41 = v15;
  v15.i64[0] = v33.u32[2];
  v15.i64[1] = v33.u32[3];
  int8x16_t v42 = v15;
  v15.i64[0] = v36.u32[2];
  v15.i64[1] = v36.u32[3];
  int8x16_t v43 = v15;
  v15.i64[0] = v38.u32[2];
  v15.i64[1] = v38.u32[3];
  int8x16_t v44 = v15;
  v15.i64[0] = v40.u32[2];
  v15.i64[1] = v40.u32[3];
  int8x16_t v45 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v44);
  int8x16_t v46 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v34), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v16));
  int8x16_t v47 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v37), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v19));
  int8x16_t v48 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v39), v30);
  int8x16_t v49 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v41), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v23));
  int8x16_t v50 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v42), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v24));
  int8x16_t v51 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v43), v29);
  int8x16_t v52 = vorrq_s8(v45, v28);
  int8x16_t v53 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v15), v27);
  int8x16_t v54 = vceqzq_s8(*(int8x16_t *)(a1 + 336));
  int16x8_t v55 = vmovl_s8(*(int8x8_t *)v54.i8);
  int32x4_t v56 = vmovl_high_s16(v55);
  v15.i64[0] = v56.i32[2];
  v15.i64[1] = v56.i32[3];
  int8x16_t v57 = v15;
  int16x8_t v58 = vmovl_high_s8(v54);
  int32x4_t v59 = vmovl_high_s16(v58);
  v15.i64[0] = v59.i32[2];
  v15.i64[1] = v59.i32[3];
  int8x16_t v60 = v15;
  int32x4_t v61 = vmovl_s16(*(int16x4_t *)v55.i8);
  v15.i64[0] = v61.i32[2];
  v15.i64[1] = v61.i32[3];
  int8x16_t v62 = v15;
  int32x4_t v63 = vmovl_s16(*(int16x4_t *)v58.i8);
  v15.i64[0] = v63.i32[2];
  v15.i64[1] = v63.i32[3];
  int8x16_t v64 = v15;
  v15.i64[0] = v56.i32[0];
  v15.i64[1] = v56.i32[1];
  int8x16_t v65 = v15;
  v15.i64[0] = v59.i32[0];
  v15.i64[1] = v59.i32[1];
  int8x16_t v66 = v15;
  v15.i64[0] = v61.i32[0];
  v15.i64[1] = v61.i32[1];
  int8x16_t v67 = v15;
  v15.i64[0] = v63.i32[0];
  v15.i64[1] = v63.i32[1];
  int8x16_t v68 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v15);
  int8x16_t v69 = vceqzq_s8(*(int8x16_t *)(a1 + 352));
  int16x8_t v70 = vmovl_high_s8(v69);
  int32x4_t v71 = vmovl_s16(*(int16x4_t *)v70.i8);
  v15.i64[0] = v71.i32[0];
  v15.i64[1] = v71.i32[1];
  int8x16_t v72 = v15;
  int16x8_t v73 = vmovl_s8(*(int8x8_t *)v69.i8);
  int32x4_t v74 = vmovl_s16(*(int16x4_t *)v73.i8);
  v15.i64[0] = v74.i32[0];
  v15.i64[1] = v74.i32[1];
  int8x16_t v75 = v15;
  int32x4_t v76 = vmovl_high_s16(v70);
  v15.i64[0] = v76.i32[0];
  v15.i64[1] = v76.i32[1];
  int8x16_t v77 = v15;
  int32x4_t v78 = vmovl_high_s16(v73);
  v15.i64[0] = v78.i32[0];
  v15.i64[1] = v78.i32[1];
  int8x16_t v79 = v15;
  v15.i64[0] = v71.i32[2];
  v15.i64[1] = v71.i32[3];
  int8x16_t v80 = v15;
  v15.i64[0] = v74.i32[2];
  v15.i64[1] = v74.i32[3];
  int8x16_t v81 = v15;
  v15.i64[0] = v76.i32[2];
  v15.i64[1] = v76.i32[3];
  int8x16_t v82 = v15;
  v15.i64[0] = v78.i32[2];
  v15.i64[1] = v78.i32[3];
  *(void *)(a1 + 296) = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v75), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v67)), v47), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v72), v68), v46)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v79), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v65)), v49), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB40, v77), vbicq_s8((int8x16_t)xmmword_1A28FCA90, v66)),
                                               v48))),
                              (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v81), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v62)), v51), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v80), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v64)), v50)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v15), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v57)), v53), vorrq_s8(vorrq_s8(
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCB00, v82),
                                                 vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v60)),
                                               v52)))));
  *(unsigned char *)(a1 + 288) = 1;
  return a1;
}

BOOL ggl::FlyoverOverlay::P3T2PipelineSetup::textureIsEnabled(ggl::FlyoverOverlay::P3T2PipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::FlyoverOverlay::P3T2PipelineSetup::constantDataIsEnabled(ggl::FlyoverOverlay::P3T2PipelineSetup *this, uint64_t a2)
{
  BOOL result = 1;
  switch(a2)
  {
    case 0:
    case 1:
    case 3:
      return result;
    case 2:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 305);
      goto LABEL_5;
    case 4:
      int v4 = *(unsigned __int8 *)(*((void *)this + 2) + 304);
LABEL_5:
      BOOL result = v4 != 0;
      break;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

void ggl::FlyoverOverlay::P3T2PipelineSetup::~P3T2PipelineSetup(ggl::FlyoverOverlay::P3T2PipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::Landmark::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::Landmark::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::Landmark::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Landmark::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Landmark::DefaultVbo>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 256);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Landmark::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Landmark::DefaultVbo>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Landmark::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Landmark::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5852D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::Landmark::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::Landmark::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5852D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'ggl::Landmark::LandmarkMesh::~LandmarkMesh(ggl::Landmark::LandmarkMesh *this)
{
  ggl::Mesh::~Mesh((ggl::Landmark::LandmarkMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Landmark::LandmarkMesh *)((char *)this - 16));
}

void ggl::Landmark::LandmarkMesh::~LandmarkMesh(ggl::Landmark::LandmarkMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::Landmark::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::Landmark::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

void md::LogicManager::~LogicManager(md::LogicManager *this)
{
  md::LogicManager::~LogicManager(this);
  JUMPOUT(0x1A6239270);
}

{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  int v8;
  md::LogicManager *v9;
  uint64_t v10;

  char v10 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EF5316D8;
  if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
  }
  uint64_t v2 = (id)GEOGetVectorKitVKDefaultLog_log;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = 134217984;
    long long v9 = this;
    _os_log_impl(&dword_1A1780000, v2, OS_LOG_TYPE_INFO, "Destroy LogicManager:%p", (uint8_t *)&v8, 0xCu);
  }

  if (*((unsigned char *)this + 72))
  {
    uint64_t v3 = (void *)*((void *)this + 6);
    if (v3)
    {
      *((void *)this + 7) = v3;
      operator delete(v3);
    }
  }
  int v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    do
    {
      uint64_t v6 = (void *)*v4;
      uint64_t v7 = v4[5];
      v4[5] = 0;
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
      operator delete(v4);
      int v4 = v6;
    }
    while (v6);
  }
  uint64_t v5 = (void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    operator delete(v5);
  }
}

uint64_t std::vector<md::LogicBase *>::~vector[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t std::__function::__func<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_2,std::allocator<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_2>,void ()(md::LogicBase *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56F600;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_2,std::allocator<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_2>,void ()(md::LogicBase *)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EF56F600;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_2,std::allocator<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_2>,void ()(md::LogicBase *)>::~__func()
{
}

uint64_t std::__function::__func<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_1,std::allocator<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56F5B8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_1,std::allocator<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EF56F5B8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_1,std::allocator<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_1>,void ()(void)>::~__func()
{
}

uint64_t std::__function::__func<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_0,std::allocator<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56F570;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_0,std::allocator<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EF56F570;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_0,std::allocator<md::LogicManager::runLogicBefore(md::LayoutContext const&,gdc::Context &)::$_0>,void ()(void)>::~__func()
{
}

void md::LogicManager::toggleVLR(md::LogicManager *this, int a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*((unsigned __int8 *)this + 82) != a2)
  {
    if (GEOGetVectorKitVKDefaultLog_onceToken != -1) {
      dispatch_once(&GEOGetVectorKitVKDefaultLog_onceToken, &__block_literal_global_5_16469);
    }
    int v4 = (id)GEOGetVectorKitVKDefaultLog_log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v5 = *((unsigned __int8 *)this + 82);
      v6[0] = 67109376;
      v6[1] = v5;
      __int16 v7 = 1024;
      int v8 = a2;
      _os_log_impl(&dword_1A1780000, v4, OS_LOG_TYPE_INFO, "[VLR] Toggle VLR change from %d to %d", (uint8_t *)v6, 0xEu);
    }

    *((unsigned char *)this + 82) = a2;
  }
}

uint64_t std::__function::__func<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_1,std::allocator<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56F4E0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_1,std::allocator<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EF56F4E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_1,std::allocator<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_1>,void ()(void)>::~__func()
{
}

uint64_t std::__function::__func<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_0,std::allocator<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF56F498;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_0,std::allocator<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EF56F498;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_0,std::allocator<md::LogicManager::runLogicAfter(md::LayoutContext const&,gdc::Context &)::$_0>,void ()(void)>::~__func()
{
}

uint64_t std::__function::__func<md::LogicManager::pruneAllLogics(md::PruneLevel)::$_0,std::allocator<md::LogicManager::pruneAllLogics(md::PruneLevel)::$_0>,void ()(md::LogicBase *)>::__clone(uint64_t result, uint64_t a2)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)a2 = &unk_1EF56F528;
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

unsigned char *std::__function::__func<md::LogicManager::pruneAllLogics(md::PruneLevel)::$_0,std::allocator<md::LogicManager::pruneAllLogics(md::PruneLevel)::$_0>,void ()(md::LogicBase *)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  char v3 = *(unsigned char *)(a1 + 8);
  *(void *)BOOL result = &unk_1EF56F528;
  result[8] = v3;
  return result;
}

void std::__function::__func<md::LogicManager::pruneAllLogics(md::PruneLevel)::$_0,std::allocator<md::LogicManager::pruneAllLogics(md::PruneLevel)::$_0>,void ()(md::LogicBase *)>::~__func()
{
}

void std::__function::__func<md::LogicManager::resetAllLogic(void)::$_0,std::allocator<md::LogicManager::resetAllLogic(void)::$_0>,void ()(md::LogicBase *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF56F450;
}

void *std::__function::__func<md::LogicManager::resetAllLogic(void)::$_0,std::allocator<md::LogicManager::resetAllLogic(void)::$_0>,void ()(md::LogicBase *)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1EF56F450;
  return result;
}

void std::__function::__func<md::LogicManager::resetAllLogic(void)::$_0,std::allocator<md::LogicManager::resetAllLogic(void)::$_0>,void ()(md::LogicBase *)>::~__func()
{
}

void *std::function<void ()(md::LogicBase const*)>::~function(void *a1)
{
  char v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<md::LogicManager::createDebugNode(std::bitset<4ul> const&)::$_0,std::allocator<md::LogicManager::createDebugNode(std::bitset<4ul> const&)::$_0>,void ()(md::LogicBase const*)>::operator()(uint64_t a1, void **a2)
{
  char v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = a1;
    (*(void (**)(void **__return_ptr, void *, void))(*v2 + 56))(v49, v2, *(void *)(a1 + 8));
    int v4 = *(void ***)(v3 + 16);
    int v5 = (void **)*v4;
    uint64_t v6 = (void **)v4[1];
    __int16 v7 = v4;
    if (v6 != *v4)
    {
      do
      {
        if (*((char *)v6 - 9) < 0) {
          operator delete(*(v6 - 4));
        }
        v6 -= 8;
      }
      while (v6 != v5);
      __int16 v7 = *(void ***)(v3 + 16);
    }
    v4[1] = v5;
    int v8 = (void *)v2[9];
    uint64_t v9 = v2 + 10;
    uint64_t v48 = v3;
    if (v8 != v2 + 10)
    {
      int8x16_t v47 = v2;
      while (1)
      {
        size_t v10 = v8[6];
        if (v10 > 0x7FFFFFFFFFFFFFF7) {
LABEL_77:
        }
          abort();
        int8x16_t v11 = (const void *)v8[5];
        if (v10 >= 0x17) {
          break;
        }
        HIBYTE(v61) = v8[6];
        p_dst = &__dst;
        if (v10) {
          goto LABEL_18;
        }
LABEL_19:
        *((unsigned char *)p_dst + v10) = 0;
        long long __p = 0uLL;
        unint64_t v58 = 0;
        int v59 = 4;
        if (SHIBYTE(v61) < 0)
        {
          int8x16_t v15 = (void *)__dst;
          std::string::__assign_no_alias<true>(&__p, (void *)__dst, *((size_t *)&__dst + 1));
          operator delete(v15);
        }
        else
        {
          long long __p = __dst;
          unint64_t v58 = v61;
        }
        int8x16_t v16 = (char *)v7[1];
        if (v16 >= v7[2])
        {
          int32x4_t v20 = std::vector<gdc::DebugTreeValue>::__push_back_slow_path<gdc::DebugTreeValue>(v7, (uint64_t)v56);
          int v21 = SHIBYTE(v58);
          v7[1] = v20;
          if (v21 < 0)
          {
            operator delete((void *)__p);
            int8x16_t v19 = (void *)v8[1];
            if (v19)
            {
              do
              {
LABEL_27:
                int32x4_t v22 = v19;
                int8x16_t v19 = (void *)*v19;
              }
              while (v19);
              goto LABEL_10;
            }
          }
          else
          {
            int8x16_t v19 = (void *)v8[1];
            if (v19) {
              goto LABEL_27;
            }
          }
        }
        else
        {
          long long v17 = *(_OWORD *)v56;
          *(_OWORD *)(v16 + 9) = *(_OWORD *)&v56[9];
          *(_OWORD *)int8x16_t v16 = v17;
          long long v18 = __p;
          *((void *)v16 + 6) = v58;
          *((_OWORD *)v16 + 2) = v18;
          *((_DWORD *)v16 + 14) = v59;
          v7[1] = v16 + 64;
          int8x16_t v19 = (void *)v8[1];
          if (v19) {
            goto LABEL_27;
          }
        }
        do
        {
          int32x4_t v22 = (void *)v8[2];
          BOOL v23 = *v22 == (void)v8;
          int v8 = v22;
        }
        while (!v23);
LABEL_10:
        int v8 = v22;
        if (v22 == v9)
        {
          char v2 = v47;
          uint64_t v3 = v48;
          __int16 v7 = *(void ***)(v48 + 16);
          goto LABEL_34;
        }
      }
      uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v13 = v10 | 7;
      }
      uint64_t v14 = v13 + 1;
      p_dst = (long long *)operator new(v13 + 1);
      *((void *)&__dst + 1) = v10;
      unint64_t v61 = v14 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
LABEL_18:
      memmove(p_dst, v11, v10);
      goto LABEL_19;
    }
LABEL_34:
    v56[23] = 20;
    strcpy(v56, "RequiredDependencies");
    gdc::DebugTreeNode::addProperty((uint64_t)v49, (uint64_t)v56, (uint64_t *)v7);
    int8x16_t v24 = *(void ***)(v3 + 16);
    int8x16_t v25 = (void **)*v24;
    int8x16_t v26 = (void **)v24[1];
    int8x16_t v27 = v24;
    if (v26 != *v24)
    {
      do
      {
        if (*((char *)v26 - 9) < 0) {
          operator delete(*(v26 - 4));
        }
        v26 -= 8;
      }
      while (v26 != v25);
      int8x16_t v27 = *(void ***)(v3 + 16);
    }
    v24[1] = v25;
    int8x16_t v28 = (void *)v2[12];
    int8x16_t v29 = v2 + 13;
    if (v28 != v2 + 13)
    {
      while (1)
      {
        size_t v30 = v28[6];
        if (v30 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_77;
        }
        int8x16_t v31 = (const void *)v28[5];
        if (v30 >= 0x17) {
          break;
        }
        HIBYTE(v61) = v28[6];
        int16x8_t v32 = &__dst;
        if (v30) {
          goto LABEL_50;
        }
LABEL_51:
        *((unsigned char *)v32 + v30) = 0;
        long long __p = 0uLL;
        unint64_t v58 = 0;
        int v59 = 4;
        if (SHIBYTE(v61) < 0)
        {
          int16x8_t v35 = (void *)__dst;
          std::string::__assign_no_alias<true>(&__p, (void *)__dst, *((size_t *)&__dst + 1));
          operator delete(v35);
        }
        else
        {
          long long __p = __dst;
          unint64_t v58 = v61;
        }
        int32x4_t v36 = (char *)v27[1];
        if (v36 >= v27[2])
        {
          int32x4_t v40 = std::vector<gdc::DebugTreeValue>::__push_back_slow_path<gdc::DebugTreeValue>(v27, (uint64_t)v56);
          int v41 = SHIBYTE(v58);
          v27[1] = v40;
          if (v41 < 0)
          {
            operator delete((void *)__p);
            int8x16_t v39 = (void *)v28[1];
            if (v39)
            {
              do
              {
LABEL_59:
                int8x16_t v42 = v39;
                int8x16_t v39 = (void *)*v39;
              }
              while (v39);
              goto LABEL_42;
            }
          }
          else
          {
            int8x16_t v39 = (void *)v28[1];
            if (v39) {
              goto LABEL_59;
            }
          }
        }
        else
        {
          long long v37 = *(_OWORD *)v56;
          *(_OWORD *)(v36 + 9) = *(_OWORD *)&v56[9];
          *(_OWORD *)int32x4_t v36 = v37;
          long long v38 = __p;
          *((void *)v36 + 6) = v58;
          *((_OWORD *)v36 + 2) = v38;
          *((_DWORD *)v36 + 14) = v59;
          v27[1] = v36 + 64;
          int8x16_t v39 = (void *)v28[1];
          if (v39) {
            goto LABEL_59;
          }
        }
        do
        {
          int8x16_t v42 = (void *)v28[2];
          BOOL v23 = *v42 == (void)v28;
          int8x16_t v28 = v42;
        }
        while (!v23);
LABEL_42:
        int8x16_t v28 = v42;
        if (v42 == v29)
        {
          uint64_t v43 = v48;
          int8x16_t v27 = *(void ***)(v48 + 16);
          goto LABEL_67;
        }
      }
      uint64_t v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17) {
        uint64_t v33 = v30 | 7;
      }
      uint64_t v34 = v33 + 1;
      int16x8_t v32 = (long long *)operator new(v33 + 1);
      *((void *)&__dst + 1) = v30;
      unint64_t v61 = v34 | 0x8000000000000000;
      *(void *)&long long __dst = v32;
LABEL_50:
      memmove(v32, v31, v30);
      goto LABEL_51;
    }
    uint64_t v43 = v48;
LABEL_67:
    v56[23] = 20;
    strcpy(v56, "OptionalDependencies");
    gdc::DebugTreeNode::addProperty((uint64_t)v49, (uint64_t)v56, (uint64_t *)v27);
    gdc::DebugTreeNode::addChildNode(*(void **)(v43 + 24), (long long *)v49);
    int8x16_t v44 = v54;
    if (v54)
    {
      uint64_t v45 = (uint64_t)v55;
      int8x16_t v46 = v54;
      if (v55 != v54)
      {
        do
        {
          v45 -= 80;
          std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v45);
        }
        while ((void *)v45 != v44);
        int8x16_t v46 = v54;
      }
      int16x8_t v55 = v44;
      operator delete(v46);
    }
    std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v53);
    if ((v52 & 0x80000000) == 0)
    {
      if ((v50 & 0x80000000) == 0) {
        return;
      }
LABEL_76:
      operator delete(v49[0]);
      return;
    }
    operator delete(v51);
    if (v50 < 0) {
      goto LABEL_76;
    }
  }
}

void sub_1A2783034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  int8x16_t v39 = __p;
  if (__p)
  {
    uint64_t v40 = (uint64_t)a27;
    int v41 = __p;
    if (a27 != __p)
    {
      do
      {
        v40 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v40);
      }
      while ((void *)v40 != v39);
      int v41 = __p;
    }
    a27 = v39;
    operator delete(v41);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100]((void ***)&a23);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((a16 & 0x80000000) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if ((a16 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(a11);
  _Unwind_Resume(a1);
}

char *std::vector<gdc::DebugTreeValue>::__push_back_slow_path<gdc::DebugTreeValue>(void **a1, uint64_t a2)
{
  uint64_t v2 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 6;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 58) {
    abort();
  }
  uint64_t v5 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v5 >> 5 > v3) {
    unint64_t v3 = v5 >> 5;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFC0;
  unint64_t v7 = 0x3FFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v3;
  }
  if (v7 >> 58) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  unint64_t v9 = v7 << 6;
  size_t v10 = (char *)operator new(v7 << 6);
  int8x16_t v11 = &v10[64 * v2];
  *(_OWORD *)int8x16_t v11 = *(_OWORD *)a2;
  int8x16_t v12 = &v10[v9];
  *(_OWORD *)(v11 + 9) = *(_OWORD *)(a2 + 9);
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *((_DWORD *)v11 + 14) = *(_DWORD *)(a2 + 56);
  uint64_t v13 = v11 + 64;
  uint64_t v14 = (void **)*a1;
  int8x16_t v15 = (void **)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 4);
      *(_OWORD *)(v11 - 55) = *(_OWORD *)((char *)v15 - 55);
      *((_OWORD *)v11 - 4) = v16;
      long long v17 = *((_OWORD *)v15 - 2);
      *((void *)v11 - 2) = *(v15 - 2);
      *((_OWORD *)v11 - 2) = v17;
      *(v15 - 3) = 0;
      *(v15 - 2) = 0;
      *(v15 - 4) = 0;
      *((_DWORD *)v11 - 2) = *((_DWORD *)v15 - 2);
      v11 -= 64;
      v15 -= 8;
    }
    while (v15 != v14);
    int8x16_t v15 = (void **)*a1;
    long long v18 = (void **)a1[1];
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    while (v18 != v15)
    {
      if (*((char *)v18 - 9) < 0) {
        operator delete(*(v18 - 4));
      }
      v18 -= 8;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

__n128 std::__function::__func<md::LogicManager::createDebugNode(std::bitset<4ul> const&)::$_0,std::allocator<md::LogicManager::createDebugNode(std::bitset<4ul> const&)::$_0>,void ()(md::LogicBase const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57D680;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::LogicManager::createDebugNode(std::bitset<4ul> const&)::$_0,std::allocator<md::LogicManager::createDebugNode(std::bitset<4ul> const&)::$_0>,void ()(md::LogicBase const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF57D680;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<md::LogicManager::createDebugNode(std::bitset<4ul> const&)::$_0,std::allocator<md::LogicManager::createDebugNode(std::bitset<4ul> const&)::$_0>,void ()(md::LogicBase const*)>::~__func()
{
}

void md::ElevatedStrokeTileData::~ElevatedStrokeTileData(md::ElevatedStrokeTileData *this)
{
  md::ElevatedStrokeTileData::~ElevatedStrokeTileData(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t vars8;

  *(void *)this = &unk_1EF541408;
  *((void *)this + 79) = &unk_1EF541448;
  md::ElevatedStrokeTileData::clearEntities(this);
  uint64_t v2 = (void *)*((void *)this + 99);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  int v4 = (void *)*((void *)this + 97);
  *((void *)this + 97) = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = *((void *)this + 94);
  if (v5)
  {
    BOOL v6 = *((void *)this + 95);
    unint64_t v7 = (void *)*((void *)this + 94);
    if (v6 != v5)
    {
      do
        md::ElevatedStrokeGroup::~ElevatedStrokeGroup((md::ElevatedStrokeGroup *)(v6 - 160));
      while (v6 != v5);
      unint64_t v7 = (void *)*((void *)this + 94);
    }
    *((void *)this + 95) = v5;
    operator delete(v7);
  }
  int v8 = (void *)*((void *)this + 91);
  if (v8)
  {
    *((void *)this + 92) = v8;
    operator delete(v8);
  }
  md::MapTileData::~MapTileData(this);
}

void sub_1A27833F0(_Unwind_Exception *a1)
{
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100](v1 + 776);
  std::vector<md::ElevatedStrokeGroup>::~vector[abi:nn180100]((void **)(v1 + 752));
  unint64_t v3 = *(void **)(v1 + 728);
  if (v3)
  {
    *(void *)(v1 + 736) = v3;
    operator delete(v3);
  }
  md::MapTileData::~MapTileData((md::MapTileData *)v1);
  _Unwind_Resume(a1);
}

void md::ElevatedStrokeTileData::clearEntities(md::ElevatedStrokeTileData *this)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 91);
  unint64_t v3 = (uint64_t *)*((void *)this + 92);
  if (v2 != v3)
  {
    int v4 = (int8x8_t *)*((void *)this + 90);
    do
    {
      uint64_t v5 = *v2;
      BOOL v6 = (void *)gdc::Registry::storage<md::components::QueuedForDestruction<>>(v4);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v6, v5);
      uint64_t v7 = *v2++;
      int v8 = (void *)gdc::Registry::storage<md::components::QueuedForDestruction<md::DrapingLogic>>(v4);
      gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v8, v7);
    }
    while (v2 != v3);
    uint64_t v2 = (uint64_t *)*((void *)this + 91);
    unint64_t v9 = (uint64_t *)*((void *)this + 92);
    if (v2 != v9)
    {
      size_t v10 = (int8x8_t *)*((void *)this + 90);
      do
      {
        int8x16_t v11 = (void *)gdc::Registry::storage<md::overlayComponents::VectorOverlay>(v10);
        unint64_t v12 = *v2++;
        gdc::ComponentStorageWrapper<md::overlayComponents::VectorOverlay>::remove(v11, v12);
      }
      while (v2 != v9);
      uint64_t v2 = (uint64_t *)*((void *)this + 91);
    }
  }
  *((void *)this + 92) = v2;
}

void md::ElevatedStrokeGroup::~ElevatedStrokeGroup(md::ElevatedStrokeGroup *this)
{
  uint64_t v2 = (void *)*((void *)this + 17);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  int v4 = (void *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    BOOL v6 = (std::__shared_weak_count *)*((void *)this + 12);
    if (!v6) {
      goto LABEL_11;
    }
  }
  else
  {
    BOOL v6 = (std::__shared_weak_count *)*((void *)this + 12);
    if (!v6) {
      goto LABEL_11;
    }
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_11:
  uint64_t v7 = *((void *)this + 8);
  if (v7)
  {
    uint64_t v8 = *((void *)this + 9);
    unint64_t v9 = (void *)*((void *)this + 8);
    if (v8 != v7)
    {
      do
      {
        size_t v10 = *(void **)(v8 - 64);
        if (v10)
        {
          *(void *)(v8 - 56) = v10;
          operator delete(v10);
        }
        int8x16_t v11 = *(void **)(v8 - 88);
        if (v11)
        {
          *(void *)(v8 - 80) = v11;
          operator delete(v11);
        }
        v8 -= 88;
      }
      while (v8 != v7);
      unint64_t v9 = (void *)*((void *)this + 8);
    }
    *((void *)this + 9) = v7;
    operator delete(v9);
  }
  uint64_t v12 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v13)
  {
    uint64_t v14 = *(std::__shared_weak_count **)(v13 + 72);
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    int8x16_t v15 = *(std::__shared_weak_count **)(v13 + 8);
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    MEMORY[0x1A6239270](v13, 0x1020C408635837CLL);
  }
  long long v16 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    uint64_t v17 = *(void *)this;
    if (!*(void *)this) {
      return;
    }
  }
  else
  {
    uint64_t v17 = *(void *)this;
    if (!*(void *)this) {
      return;
    }
  }
  *((void *)this + 1) = v17;
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 3) + 40))(*((void *)this + 3), v17, *((void *)this + 2) - v17);
}

void **std::vector<md::ElevatedStrokeGroup>::~vector[abi:nn180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    unint64_t v3 = (char *)a1[1];
    int v4 = v2;
    if (v3 != v2)
    {
      do
        md::ElevatedStrokeGroup::~ElevatedStrokeGroup((md::ElevatedStrokeGroup *)(v3 - 160));
      while (v3 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

int8x8_t *md::ElevatedStrokeTileData::groupContainingFeature(int8x8_t *this, int8x8_t *a2, unint64_t a3)
{
  while (this != a2)
  {
    int8x8_t v3 = this[16];
    if (v3)
    {
      uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
      v4.i16[0] = vaddlv_u8(v4);
      if (v4.u32[0] > 1uLL)
      {
        unint64_t v5 = a3;
        if (*(void *)&v3 <= a3) {
          unint64_t v5 = a3 % *(void *)&v3;
        }
      }
      else
      {
        unint64_t v5 = (*(void *)&v3 - 1) & a3;
      }
      BOOL v6 = *(void **)(*(void *)&this[15] + 8 * v5);
      if (v6)
      {
        uint64_t v7 = (void *)*v6;
        if (v7)
        {
          if (v4.u32[0] < 2uLL)
          {
            uint64_t v8 = *(void *)&v3 - 1;
            while (1)
            {
              uint64_t v10 = v7[1];
              if (v10 == a3)
              {
                if (v7[2] == a3) {
                  return this;
                }
              }
              else if ((v10 & v8) != v5)
              {
                goto LABEL_2;
              }
              uint64_t v7 = (void *)*v7;
              if (!v7) {
                goto LABEL_2;
              }
            }
          }
          do
          {
            unint64_t v9 = v7[1];
            if (v9 == a3)
            {
              if (v7[2] == a3) {
                return this;
              }
            }
            else
            {
              if (v9 >= *(void *)&v3) {
                v9 %= *(void *)&v3;
              }
              if (v9 != v5) {
                break;
              }
            }
            uint64_t v7 = (void *)*v7;
          }
          while (v7);
        }
      }
    }
LABEL_2:
    this += 20;
  }
  return 0;
}

uint64_t karo::media::ArchiveLoader::saveArchiveToChunk()
{
  return 0;
}

uint64_t karo::media::ArchiveLoader::saveArchiveToFile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  karo::util::Path::getFileSuffix((uint64_t)&__p, a3);
  if (v5 < 0) {
    operator delete(__p);
  }
  return 0;
}

uint64_t karo::media::ArchiveLoader::loadFromChunk(uint64_t a1, uint64_t a2, unint64_t a3, unsigned __int16 *a4, uint64_t a5)
{
  uint64_t v5 = *((unsigned __int8 *)a4 + 23);
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *((void *)a4 + 1);
  }
  if (v5 == 3
    && (v6 >= 0 ? (uint64_t v7 = a4) : (uint64_t v7 = *(unsigned __int16 **)a4),
        *v7 == 27002 ? (BOOL v8 = *((unsigned char *)v7 + 2) == 112) : (BOOL v8 = 0),
        v8 || ((int v9 = *v7, v10 = *((unsigned __int8 *)v7 + 2), v9 == 18778) ? (v11 = v10 == 80) : (v11 = 0), v11)))
  {
    return karo::media::ZipLoader::loadFromChunk(a1, a2, a3, a5);
  }
  else
  {
    return 0;
  }
}

uint64_t karo::media::ArchiveLoader::loadFromFile(uint64_t a1, uint64_t a2)
{
  karo::util::Path::getFileSuffix((uint64_t)__p, a2);
  unint64_t v2 = v11;
  if ((v11 & 0x80u) != 0) {
    unint64_t v2 = (unint64_t)__p[1];
  }
  if (v2 == 3)
  {
    int8x8_t v3 = (void **)__p[0];
    if ((v11 & 0x80u) == 0) {
      int8x8_t v3 = __p;
    }
    BOOL v4 = *(_WORD *)v3 == 27002 && *((unsigned char *)v3 + 2) == 112;
    if (v4
      || ((int v5 = *(unsigned __int16 *)v3, v6 = *((unsigned __int8 *)v3 + 2), v5 == 18778) ? (v7 = v6 == 80) : (v7 = 0), v7))
    {
      uint64_t v8 = 1;
      if (((char)v11 & 0x80000000) == 0) {
        return v8;
      }
      goto LABEL_15;
    }
  }
  uint64_t v8 = 0;
  if ((char)v11 < 0) {
LABEL_15:
  }
    operator delete(__p[0]);
  return v8;
}

void karo::media::ArchiveLoader::~ArchiveLoader(karo::media::ArchiveLoader *this)
{
}

void ___ZL32GEOGetVectorKitVKMapViewMuninLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "VKMapViewMunin");
  uint64_t v1 = (void *)GEOGetVectorKitVKMapViewMuninLog(void)::log;
  GEOGetVectorKitVKMapViewMuninLog(void)::log = (uint64_t)v0;
}

void sub_1A2784108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,pthread_rwlock_t *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Unwind_Resume(a1);
}

void sub_1A27845DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A27848EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  objc_destroyWeak(v28);

  objc_destroyWeak(&location);
  md::mun::CollectionPoint::~CollectionPoint((md::mun::CollectionPoint *)&a25);

  _Unwind_Resume(a1);
}

void anonymous namespace'::collectionPointFromStorefrontImagery(uint64_t a1, void *a2)
{
  uint64_t v180 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  *(void *)(a1 + 88) = a1 + 120;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0x3F80000000000000;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 96) = a1 + 120;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 6;
  unsigned int v131 = (void **)(a1 + 88);
  *(unsigned char *)(a1 + 1860) = 0;
  unsigned int v137 = v3;
  uint64_t v126 = a1;
  *(void *)a1 = [v3 identifier];
  if (v3)
  {
    [v3 position];
    float v5 = *((float *)&v150 + 3);
    float v4 = *((float *)&v150 + 2);
    float v6 = *(float *)&v151;
    double v7 = *(double *)&v150;
    float64x2_t v8 = v149;
  }
  else
  {
    float v6 = 0.0;
    double v7 = 0.0;
    float v5 = 0.0;
    float v4 = 0.0;
    float64x2_t v8 = 0uLL;
  }
  float64x2_t __x = v8;
  __float2 v9 = __sincosf_stret(v4 * 0.5);
  __float2 v10 = __sincosf_stret(v5 * 0.5);
  __float2 v11 = __sincosf_stret(v6 * 0.5);
  float v12 = (float)((float)(v10.__cosval * v9.__cosval) * v11.__cosval)
      + (float)((float)(v10.__sinval * v9.__sinval) * v11.__sinval);
  float v134 = -(float)((float)((float)(v10.__sinval * v9.__sinval) * v11.__cosval)
                - (float)((float)(v10.__cosval * v9.__cosval) * v11.__sinval));
  float v135 = v12;
  float v132 = -(float)((float)((float)(v10.__sinval * v9.__cosval) * v11.__sinval)
                - (float)((float)(v10.__cosval * v9.__sinval) * v11.__cosval));
  float v133 = (float)((float)(v10.__sinval * v9.__cosval) * v11.__cosval)
       + (float)((float)(v10.__cosval * v9.__sinval) * v11.__sinval);
  float v13 = (float)((float)((float)(v134 * 0.5) + (float)(v12 * -0.5)) + (float)(v133 * 0.5)) - (float)(v132 * -0.5);
  float v14 = (float)((float)(v12 * -0.5) - (float)(v134 * 0.5)) + (float)((float)(v133 * 0.5) + (float)(v132 * -0.5));
  float v15 = (float)((float)(v134 * -0.5) + (float)(v12 * 0.5)) + (float)((float)(v133 * 0.5) + (float)(v132 * 0.5));
  float v16 = (float)((float)(v12 * 0.5) + (float)(v133 * 0.5)) - (float)((float)(v134 * -0.5) + (float)(v132 * 0.5));
  *(float *)(a1 + 32) = v13;
  *(float *)(a1 + 36) = v14;
  *(float *)(a1 + 40) = v15;
  *(float *)(a1 + 44) = v16;
  *(float64x2_t *)(a1 + 8) = __x;
  *(double *)(a1 + 24) = v7;
  _D8 = __x.f64[1];
  __asm { FMLA            D0, D8, V1.D[1] }
  double v23 = sqrt(_D0);
  double v24 = atan2(v7, v23 * 0.996647189);
  long double objb = atan2(__x.f64[1], __x.f64[0]);
  __double2 v25 = __sincos_stret(v24);
  double v130 = v7;
  double v26 = atan2(v7 + v25.__sinval * v25.__sinval * 42841.3115 * v25.__sinval, v23 + v25.__cosval * v25.__cosval * -42697.6727 * v25.__cosval);
  __double2 v27 = __sincos_stret(v26);
  long double v28 = tan(v26 * 0.5 + 0.785398163);
  long double v29 = log(v28);
  v30.f64[0] = objb;
  v30.f64[1] = v29;
  __asm { FMOV            V1.2D, #0.5 }
  *(float64x2_t *)objc = _Q1;
  *(float64x2_t *)(a1 + 56) = vmlaq_f64(_Q1, (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL), v30);
  *(double *)(a1 + 72) = v23 / v27.__cosval + -6378137.0 / sqrt(v27.__sinval * v27.__sinval * -0.00669437999 + 1.0);
  long long v173 = *(_OWORD *)(a1 + 8);
  uint64_t v174 = *(void *)(a1 + 24);
  double v175 = v13;
  double v176 = v14;
  double v177 = v15;
  double v178 = v16;
  gdc::CameraFrame<geo::Radians,double>::fromRigidTransformEcefNoOffset((uint64_t)v171, (double *)&v173);
  float v32 = v172 * 0.318309886;
  *(float *)(a1 + 48) = v32 * 3.1416;
  *(void *)(a1 + 80) = [v3 timestamp];
  *(_WORD *)(a1 + 1856) = [v3 bucketId];
  *(_DWORD *)(a1 + 1852) = [v3 buildId];
  long double v33 = *(double *)(a1 + 8);
  long double v34 = *(double *)(a1 + 16);
  long double v35 = *(double *)(a1 + 24);
  double v36 = sqrt(v33 * v33 + v34 * v34);
  double v37 = atan2(v35, v36 * 0.996647189);
  long double v139 = atan2(v34, v33);
  __double2 v38 = __sincos_stret(v37);
  double v39 = atan2(v35 + v38.__sinval * v38.__sinval * 42841.3115 * v38.__sinval, v36 + v38.__cosval * v38.__cosval * -42697.6727 * v38.__cosval);
  __double2 v40 = __sincos_stret(v39);
  long double v41 = tan(v39 * 0.5 + 0.785398163);
  long double v42 = log(v41);
  v43.f64[0] = v139;
  v43.f64[1] = v42;
  *(float64x2_t *)(a1 + 56) = vmlaq_f64(*(float64x2_t *)objc, (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL), v43);
  *(double *)(a1 + 72) = v36 / v40.__cosval + -6378137.0 / sqrt(v40.__sinval * v40.__sinval * -0.00669437999 + 1.0);
  *(_DWORD *)(a1 + 1848) = 1077936128;
  *(unsigned char *)(a1 + 1858) = 1;
  *(unsigned char *)(a1 + 1859) = [v3 dataFormatVersion] != 0;
  int8x16_t v44 = [v3 cameras];
  unint64_t v45 = [v44 count];
  unint64_t v46 = v45;
  uint64_t v47 = *(void *)(a1 + 88);
  uint64_t v48 = *(void *)(a1 + 96);
  unint64_t v49 = 0x8E38E38E38E38E39 * ((v48 - v47) >> 5);
  if (v49 > v45)
  {
    uint64_t v50 = v47 + 288 * v45;
    if (v50 != v48)
    {
      uint64_t v51 = v47 + 288 * v45;
      do
      {
        char v52 = *(void **)(v51 + 248);
        if (v52 != *(void **)(v51 + 264)) {
          free(v52);
        }
        v51 += 288;
      }
      while (v51 != v48);
      uint64_t v48 = v50;
    }
LABEL_17:
    *(void *)(v126 + 96) = v48;
    goto LABEL_18;
  }
  if (v49 < v45)
  {
    if (*(void *)(a1 + 112) < v45)
    {
      geo::small_vector_base<md::mun::PhotoInfo>::grow(v131, v45);
      uint64_t v47 = *(void *)(a1 + 88);
      uint64_t v48 = *(void *)(a1 + 96);
    }
    uint64_t v53 = v47 + 288 * v46;
    if (v48 != v53)
    {
      do
      {
        *(_OWORD *)(v48 + 256) = 0uLL;
        *(_OWORD *)(v48 + 272) = 0uLL;
        *(_OWORD *)(v48 + 224) = 0uLL;
        *(_OWORD *)(v48 + 240) = 0uLL;
        *(_OWORD *)(v48 + 192) = 0uLL;
        *(_OWORD *)(v48 + 208) = 0uLL;
        *(_OWORD *)(v48 + 160) = 0uLL;
        *(_OWORD *)(v48 + 176) = 0uLL;
        *(_OWORD *)(v48 + 128) = 0uLL;
        *(_OWORD *)(v48 + 144) = 0uLL;
        *(_OWORD *)(v48 + 96) = 0uLL;
        *(_OWORD *)(v48 + 112) = 0uLL;
        *(_OWORD *)(v48 + 64) = 0uLL;
        *(_OWORD *)(v48 + 80) = 0uLL;
        *(_OWORD *)(v48 + 32) = 0uLL;
        *(_OWORD *)(v48 + 48) = 0uLL;
        *(_OWORD *)uint64_t v48 = 0uLL;
        *(_OWORD *)(v48 + 16) = 0uLL;
        *(_DWORD *)(v48 + 36) = 1065353216;
        *(void *)(v48 + 248) = v48 + 280;
        *(void *)(v48 + 256) = v48 + 280;
        *(void *)(v48 + 264) = v48 + 280;
        *(void *)(v48 + 272) = 2;
        v48 += 288;
      }
      while (v48 != v53);
      uint64_t v48 = v53;
    }
    goto LABEL_17;
  }
LABEL_18:

  unint64_t v54 = 0;
  double v127 = v133;
  double v55 = v132;
  double v128 = v135;
  double v129 = v134;
  while (1)
  {
    int32x4_t v56 = [v137 cameras];
    BOOL v57 = v54 < [v56 count];

    if (!v57) {
      break;
    }
    unint64_t v58 = *v131;
    int v59 = [v137 cameras];
    unint64_t v140 = [v59 objectAtIndex:v54];

    v58[288 * v54 + 240] = [v140 cameraNumber];
    if (v140)
    {
      [v140 position];
      float v61 = *((float *)&v150 + 3);
      float v60 = *((float *)&v150 + 2);
      float v62 = *(float *)&v151;
      double v63 = *(double *)&v150;
      *(float64x2_t *)id obj = v149;
    }
    else
    {
      float v62 = 0.0;
      double v63 = 0.0;
      *(_OWORD *)id obj = 0u;
      float v61 = 0.0;
      float v60 = 0.0;
    }
    int8x16_t v64 = &v58[288 * v54];
    __float2 v65 = __sincosf_stret(v60 * 0.5);
    __float2 v66 = __sincosf_stret(v61 * 0.5);
    __float2 v67 = __sincosf_stret(v62 * 0.5);
    float v68 = (float)((float)(v66.__cosval * v65.__cosval) * v67.__cosval)
        + (float)((float)(v66.__sinval * v65.__sinval) * v67.__sinval);
    float v69 = -(float)((float)((float)(v66.__sinval * v65.__sinval) * v67.__cosval)
                 - (float)((float)(v66.__cosval * v65.__cosval) * v67.__sinval));
    float v70 = (float)((float)(v66.__sinval * v65.__cosval) * v67.__cosval)
        + (float)((float)(v66.__cosval * v65.__sinval) * v67.__sinval);
    float v71 = -(float)((float)((float)(v66.__sinval * v65.__cosval) * v67.__sinval)
                 - (float)((float)(v66.__cosval * v65.__sinval) * v67.__cosval));
    float v72 = (float)((float)((float)(v69 * v135) + (float)(v134 * v68)) + (float)(v133 * v71)) - (float)(v132 * v70);
    float v73 = (float)((float)(v133 * v68) - (float)((float)(v134 * v71) - (float)(v70 * v135))) + (float)(v132 * v69);
    float v74 = (float)((float)((float)(v71 * v135) + (float)(v134 * v70)) - (float)(v133 * v69)) + (float)(v132 * v68);
    float v75 = -(float)((float)((float)((float)(v134 * v69) + (float)(v133 * v70)) + (float)(v132 * v71))
                 - (float)(v68 * v135));
    _V17.D[1] = obj[1];
    double v77 = vmuld_lane_f64(v55, *(float64x2_t *)obj, 1);
    _D18 = v134;
    double v79 = vmlad_n_f64(-(v63 * v129), v55, *(double *)obj);
    __asm { FMLA            D7, D18, V17.D[1] }
    double v81 = -(v77 - v63 * v127) - (v77 - v63 * v127);
    double v82 = v79 + v79;
    double v83 = _D7 + _D7;
    float64_t v84 = vaddq_f64(__x, *(float64x2_t *)obj).f64[0] + v81 * v128 + v83 * v127 - v82 * v55;
    float64_t v85 = __x.f64[1] + *(double *)&obj[1] + v81 * v55 + v82 * v128 - v83 * v129;
    double v86 = v130 + v63 - v81 * v127 + v82 * v129 + v83 * v128;
    *(float *)&double v82 = v75 * -0.5;
    float v87 = v75 * 0.5;
    *(float *)&double v83 = v72 * 0.5;
    float v88 = v73 * 0.5;
    float v89 = v74 * 0.5;
    float v90 = v74 * -0.5;
    float v91 = v72 * -0.5;
    *((float *)v64 + 6) = (float)((float)(*(float *)&v83 + *(float *)&v82) + v88) - v90;
    *((float *)v64 + 7) = (float)(*(float *)&v82 - *(float *)&v83) + (float)(v88 + v90);
    *((float *)v64 + 8) = (float)(v91 + v87) + (float)(v88 + v89);
    *((float *)v64 + 9) = (float)(v87 + v88) - (float)(v91 + v89);
    *(float64_t *)int8x16_t v64 = v84;
    *((float64_t *)v64 + 1) = v85;
    *((double *)v64 + 2) = v86;
    long long v167 = *(_OWORD *)v64;
    uint64_t v168 = *((void *)v64 + 2);
    float32x2_t v92 = *(float32x2_t *)(v64 + 32);
    float64x2_t v169 = vcvtq_f64_f32(*(float32x2_t *)(v64 + 24));
    float64x2_t v170 = vcvtq_f64_f32(v92);
    gdc::CameraFrame<geo::Radians,double>::fromRigidTransformEcefNoOffset((uint64_t)v165, (double *)&v167);
    float v93 = v166 * 0.318309886;
    *((float *)v64 + 10) = v93 * 3.1416;
    if (v140)
    {
      [v140 projection];
      *(_DWORD *)&v58[288 * v54 + 236] = LODWORD(v149.f64[0]);
      [v140 projection];
      LODWORD(v162) = LODWORD(v149.f64[0]);
      [v140 projection];
      DWORD1(v162) = HIDWORD(v149.f64[0]);
      [v140 projection];
      DWORD2(v162) = LODWORD(v149.f64[1]);
      [v140 projection];
      HIDWORD(v162) = HIDWORD(v149.f64[1]);
      [v140 projection];
      LODWORD(v163) = v150;
      [v140 projection];
      DWORD1(v163) = DWORD1(v150);
      [v140 projection];
      DWORD2(v163) = DWORD2(v150);
      [v140 projection];
      HIDWORD(v163) = HIDWORD(v150);
      [v140 projection];
      int v94 = v151;
      long long v95 = 0uLL;
    }
    else
    {
      *(_DWORD *)&v58[288 * v54 + 236] = 0;
      long long v95 = 0uLL;
      long long v162 = 0u;
      long long v163 = 0u;
      int v94 = 0;
    }
    int v164 = v94;
    v161[4] = v95;
    v161[5] = v95;
    v161[2] = v95;
    v161[3] = v95;
    v161[0] = v95;
    v161[1] = v95;
    [v140 lensType];
    GEOMuninFrustumFromLensModel();
    md::mun::frustumFromGEOFrustumCorners((uint64_t)&v149, v161);
    int v96 = &v58[288 * v54];
    *(float64x2_t *)(v96 + 44) = v149;
    *(_OWORD *)(v96 + 60) = v150;
    *(_OWORD *)(v96 + 76) = v151;
    *(_OWORD *)(v96 + 92) = v152;
    *(_OWORD *)(v96 + 108) = v153;
    *(_OWORD *)(v96 + 124) = v154;
    *(_OWORD *)(v96 + 140) = v155;
    *(_OWORD *)(v96 + 156) = v156;
    *(_OWORD *)(v96 + 172) = v157;
    *(_OWORD *)(v96 + 188) = v158;
    *(_OWORD *)(v96 + 204) = v159;
    *(_OWORD *)(v96 + 220) = v160;
    long long v145 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v148 = 0u;
    [v140 textureIds];
    obja = unint64_t v138 = v54;
    uint64_t v97 = [obja countByEnumeratingWithState:&v145 objects:v179 count:16];
    if (v97)
    {
      uint64_t v98 = *(void *)v146;
      uint64_t v99 = (uint64_t)&v58[288 * v54 + 248];
      do
      {
        for (uint64_t i = 0; i != v97; ++i)
        {
          if (*(void *)v146 != v98) {
            objc_enumerationMutation(obja);
          }
          char v102 = [*(id *)(*((void *)&v145 + 1) + 8 * i) unsignedIntegerValue];
          unsigned int v103 = *(char **)v99;
          uint64_t v101 = *(unsigned char **)(v99 + 8);
          BOOL v104 = &v101[-*(void *)v99];
          unint64_t v105 = *(void *)(v99 + 24);
          if (v105 < (unint64_t)(v104 + 1))
          {
            uint64_t v106 = *(char **)(v99 + 16);
            unint64_t v107 = (1 << -(char)__clz(v105 + 1));
            if (v105 >= 0xFFFFFFFFFFFFFFFELL) {
              unint64_t v107 = 1;
            }
            if (v107 <= (unint64_t)(v104 + 1)) {
              size_t v108 = (size_t)(v104 + 1);
            }
            else {
              size_t v108 = v107;
            }
            uint64_t v109 = (char *)malloc_type_malloc(v108, 0x100004077774924uLL);
            size_t v110 = v109;
            int v111 = *(char **)v99;
            unsigned int v112 = *(char **)(v99 + 8);
            if (*(char **)v99 == v112) {
              goto LABEL_55;
            }
            unint64_t v113 = v112 - v111;
            if ((unint64_t)(v112 - v111) < 8)
            {
              uint64_t v114 = v109;
            }
            else
            {
              uint64_t v114 = v109;
              if ((unint64_t)(v109 - v111) >= 0x20)
              {
                if (v113 < 0x20)
                {
                  uint64_t v115 = 0;
LABEL_49:
                  unint64_t v120 = v113 & 0xFFFFFFFFFFFFFFF8;
                  uint64_t v114 = &v109[v113 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v121 = v115 - (v113 & 0xFFFFFFFFFFFFFFF8);
                  uint64_t v122 = (uint64_t *)&v111[v115];
                  uint64_t v123 = &v109[v115];
                  do
                  {
                    uint64_t v124 = *v122++;
                    *(void *)uint64_t v123 = v124;
                    v123 += 8;
                    v121 += 8;
                  }
                  while (v121);
                  if (v113 != v120)
                  {
                    v111 += v120;
                    goto LABEL_54;
                  }
LABEL_55:
                  if (v103 != v106) {
                    free(*(void **)v99);
                  }
                  uint64_t v101 = &v104[(void)v110];
                  *(void *)uint64_t v99 = v110;
                  *(void *)(v99 + 8) = &v104[(void)v110];
                  *(void *)(v99 + 24) = v108;
                  goto LABEL_30;
                }
                uint64_t v115 = v113 & 0xFFFFFFFFFFFFFFE0;
                int v116 = (long long *)(v111 + 16);
                BOOL v117 = v109 + 16;
                unint64_t v118 = v113 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v119 = *v116;
                  *(v117 - 1) = *(v116 - 1);
                  *BOOL v117 = v119;
                  v116 += 2;
                  v117 += 2;
                  v118 -= 32;
                }
                while (v118);
                if (v113 == v115) {
                  goto LABEL_55;
                }
                if ((v113 & 0x18) != 0) {
                  goto LABEL_49;
                }
                v111 += v115;
                uint64_t v114 = &v109[v115];
              }
            }
            do
            {
LABEL_54:
              char v125 = *v111++;
              *v114++ = v125;
            }
            while (v111 != v112);
            goto LABEL_55;
          }
LABEL_30:
          *uint64_t v101 = v102;
          ++*(void *)(v99 + 8);
        }
        uint64_t v97 = [obja countByEnumeratingWithState:&v145 objects:v179 count:16];
      }
      while (v97);
    }

    unint64_t v54 = v138 + 1;
  }
}

void sub_1A2785514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  double v23 = (void *)a9[11];
  int32x4_t v22 = (void *)a9[12];
  if (v23 != v22)
  {
    do
    {
      double v24 = (void *)v23[31];
      if (v24 != (void *)v23[33]) {
        free(v24);
      }
      v23 += 36;
    }
    while (v23 != v22);
    double v23 = *a16;
  }
  if (v23 != (void *)a9[13]) {
    free(v23);
  }

  _Unwind_Resume(a1);
}

void sub_1A27856C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A2785E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  operator delete(v18);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1A2786438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::unordered_set<gdc::LayerDataRequestKey,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,std::allocator<gdc::LayerDataRequestKey>>::~unordered_set[abi:nn180100]((uint64_t)&a23);
  std::unordered_set<md::MuninJunction const*>::~unordered_set[abi:nn180100]((uint64_t)&a29);

  _Unwind_Resume(a1);
}

void sub_1A278694C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  operator delete(v28);
  if (__p) {
    operator delete(__p);
  }
  std::__tree<gdc::LayerDataWithWorld>::destroy(*(void **)(v30 - 104));
  _Unwind_Resume(a1);
}

void sub_1A2786E20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A27872A0(_Unwind_Exception *a1)
{
  md::mun::CollectionPoint::~CollectionPoint((md::mun::CollectionPoint *)&STACK[0x7C0]);
  _Unwind_Resume(a1);
}

char *calcHuffmanEncodeTableInt(int a1, int a2, int a3, unsigned int a4)
{
  unsigned int v4 = a4;
  size_t v8 = 8 * a4;
  __float2 v9 = malloc_type_malloc(v8, 0x2004093837F09uLL);
  __float2 v10 = v9;
  if (!v4)
  {
    free(v9);
    return 0;
  }
  uint64_t v11 = 0;
  do
  {
    unsigned int v12 = 0xFFFFFFFF / (a3 + a2 * (int)v11);
    float v13 = malloc_type_malloc(0x30uLL, 0x102004089A409D2uLL);
    v13[3] = 0;
    v13[4] = 0;
    v13[2] = 0;
    *((unsigned char *)v13 + 40) = 0;
    v10[v11] = v13;
    *(_WORD *)float v13 = v11++;
    a2 += a1;
    *((_DWORD *)v13 + 1) = v12;
    *((_DWORD *)v13 + 2) = 0;
  }
  while (v4 != v11);
  uint64_t v14 = v4 - 1;
  if (v4 != 1)
  {
    do
    {
      uint64_t v15 = v10[v14];
      uint64_t v16 = v10[v4 - 2];
      uint64_t v17 = malloc_type_malloc(0x30uLL, 0x102004089A409D2uLL);
      v17[4] = 0;
      *(_WORD *)uint64_t v17 = -1;
      unsigned int v18 = *(_DWORD *)(v16 + 4) + *(_DWORD *)(v15 + 4);
      *(void *)(v15 + 32) = v17;
      void v17[2] = v15;
      v17[3] = v16;
      *(void *)(v16 + 32) = v17;
      *(void *)((char *)v17 + 4) = v18;
      *((unsigned char *)v17 + 40) = 0;
      unsigned int v4 = v14;
      int v19 = v14;
      do
      {
        int v20 = v19 - 1;
        uint64_t v21 = v10[v19 - 1];
        if (v18 <= *(_DWORD *)(v21 + 4)) {
          break;
        }
        v10[v19--] = v21;
      }
      while (v20);
      v10[v19] = v17;
      --v14;
    }
    while (v14);
  }
  int32x4_t v22 = (void *)*v10;
  free(v10);
  if (!v22) {
    return 0;
  }
  double v23 = (char *)malloc_type_malloc(v8, 0x100004090D0E795uLL);
  bzero(v23, v8);
  double v24 = malloc_type_malloc(0xA0uLL, 0x2004093837F09uLL);
  __double2 v25 = v24;
  *double v24 = v22;
  LODWORD(v26) = 1;
  while (1)
  {
    uint64_t v27 = (int)v26;
    uint64_t v26 = (int)v26 - 1;
    long double v28 = (__int16 *)v24[v26];
    if (!v28) {
      break;
    }
    if (*v28 < 0)
    {
      v24[v26] = *((void *)v28 + 2);
      LODWORD(v26) = v27 + 1;
      v24[v27] = *((void *)v28 + 3);
      uint64_t v30 = *((void *)v28 + 2);
      if (!v30) {
        goto LABEL_18;
      }
LABEL_17:
      *(_DWORD *)(v30 + 8) = 2 * *((_DWORD *)v28 + 2);
      *(unsigned char *)(v30 + 40) = *((unsigned char *)v28 + 40) + 1;
      goto LABEL_18;
    }
    long double v29 = &v23[8 * (unsigned __int16)*v28];
    *(_DWORD *)long double v29 = *((_DWORD *)v28 + 2);
    v29[4] = *((unsigned char *)v28 + 40);
    uint64_t v30 = *((void *)v28 + 2);
    if (v30) {
      goto LABEL_17;
    }
LABEL_18:
    uint64_t v31 = *((void *)v28 + 3);
    if (v31)
    {
      *(_DWORD *)(v31 + 8) = (2 * *((_DWORD *)v28 + 2)) | 1;
      *(unsigned char *)(v31 + 40) = *((unsigned char *)v28 + 40) + 1;
    }
    if (!v26) {
      goto LABEL_25;
    }
  }
  free(v23);
  double v23 = 0;
LABEL_25:
  freeHuffmanTreeInt(v22);
  free(v25);
  return v23;
}

void freeHuffmanTreeInt(void *a1)
{
  if (a1)
  {
    freeHuffmanTreeInt(a1[2]);
    freeHuffmanTreeInt(a1[3]);
    free(a1);
  }
}

void *calcHuffmanDecodeTable(uint64_t a1, unsigned int a2)
{
  unsigned int v4 = malloc_type_malloc(0x10001uLL, 0xC1B39415uLL);
  float v5 = (unsigned __int16 *)malloc_type_malloc(0x20000uLL, 0x1000040BDFB0063uLL);
  bzero(v4, 0x10001uLL);
  bzero(v5, 0x20000uLL);
  if (a2)
  {
    uint64_t v6 = a2;
    double v7 = (char *)(a1 + 4);
    unsigned int v8 = 1;
    do
    {
      int v9 = *v7;
      if (v9 >= 17)
      {
        unsigned __int8 v10 = v9 - 16;
        unsigned __int16 v11 = v5[(unsigned __int16)(*((_DWORD *)v7 - 1) >> v10)];
        if (!v11)
        {
          v5[(unsigned __int16)(*((_DWORD *)v7 - 1) >> v10)] = v8;
          unsigned __int16 v11 = v8++;
        }
        if (v4[v11] < v10) {
          v4[v11] = v10;
        }
      }
      v7 += 8;
      --v6;
    }
    while (v6);
  }
  else
  {
    unsigned int v8 = 1;
  }
  *unsigned int v4 = 16;
  unsigned int v12 = malloc_type_malloc(8 * (v8 + 1), 0x2004093837F09uLL);
  float v13 = v12;
  if (v8)
  {
    uint64_t v14 = 0;
    uint64_t v15 = v8;
    do
    {
      unsigned int v16 = 1;
      uint64_t v17 = malloc_type_malloc(8 * (1 << v4[v14]), 0x100004090D0E795uLL);
      v13[v14] = v17;
      do
        v17[2 * v16 - 2] = 0xFFFF;
      while (!(v16++ >> v4[v14]));
      ++v14;
    }
    while (v14 != v8);
    v13[v8] = 0;
    if (!a2) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v15 = 0;
    void *v12 = 0;
    if (!a2) {
      goto LABEL_23;
    }
  }
  uint64_t v19 = 0;
  int v20 = (unsigned char *)(a1 + 4);
  do
  {
    LODWORD(v24) = (char)*v20;
    unsigned int v25 = *((_DWORD *)v20 - 1);
    char v26 = v24 - 16;
    if ((int)v24 > 16)
    {
      unsigned int v21 = v25 >> v26;
      uint64_t v22 = v5[v25 >> v26];
      uint64_t v24 = *v13 + 8 * v21;
      *(_DWORD *)uint64_t v24 = v22;
      *(unsigned char *)(v24 + 4) = -v4[v22];
      uint64_t v23 = v13[v22] + 8 * ((*((_DWORD *)v20 - 1) & ~(-1 << v26)) << (v4[v22] - v26));
      *(_DWORD *)uint64_t v23 = v19;
      LOBYTE(v24) = *v20;
    }
    else
    {
      uint64_t v23 = *v13 + 8 * (v25 << (16 - v24));
      *(_DWORD *)uint64_t v23 = v19;
    }
    *(unsigned char *)(v23 + 4) = v24;
    ++v19;
    v20 += 8;
  }
  while (a2 != v19);
LABEL_23:
  if (v8)
  {
    uint64_t v27 = 0;
    do
    {
      char v28 = v4[v27];
      if (v28)
      {
        uint64_t v29 = *(void *)v13[v27];
        unsigned int v30 = 2;
        do
        {
          float v32 = (uint64_t *)(v13[v27] + 8 * (v30 - 1));
          if (*(_DWORD *)v32 == 0xFFFF)
          {
            *float v32 = v29;
            char v28 = v4[v27];
          }
          else
          {
            uint64_t v29 = *v32;
          }
        }
        while (!(v30++ >> v28));
      }
      ++v27;
    }
    while (v27 != v15);
  }
  free(v4);
  free(v5);
  return v13;
}

unsigned int *huffmanDecode(unsigned int *result, int a2, _WORD *a3, unsigned int a4, uint64_t *a5)
{
  if (a4)
  {
    uint64_t v5 = 0;
    int v6 = 0;
    uint64_t v7 = *a5;
    unsigned int v8 = result;
    uint64_t v9 = a4;
    do
    {
      if (v6 <= 0)
      {
        unsigned int v14 = *v8++;
        v5 |= (unint64_t)bswap32(v14) << (32 - v6);
        v6 += 32;
      }
      int v15 = v6 - 1;
      unint64_t v16 = 2 * v5;
      unsigned int v17 = v6 - 1 + 8 * (result - v8 + a2);
      if (v17 > 0xF)
      {
        if (v6 <= 16)
        {
          unsigned int v20 = *v8++;
          v16 |= (unint64_t)bswap32(v20) << (33 - v6);
          int v15 = v6 + 31;
        }
        unint64_t v19 = HIWORD(v16);
      }
      else
      {
        if (v6 <= (int)v17)
        {
          unsigned int v18 = *v8++;
          v16 |= (unint64_t)bswap32(v18) << (33 - v6);
          int v15 = v6 + 31;
        }
        LODWORD(v19) = (v16 >> -(char)v17) << (16 - v17);
      }
      uint64_t v21 = v19;
      int v22 = *(char *)(v7 + 8 * v19 + 4);
      int v23 = *(unsigned __int8 *)(v7 + 8 * v19 + 4);
      if (v22 < 1)
      {
        if (v15 <= 15)
        {
          unsigned int v25 = *v8++;
          v16 |= (unint64_t)bswap32(v25) << (32 - v15);
          v15 += 32;
        }
        int v26 = -v23;
        int v27 = v15 - 16;
        unint64_t v28 = v16 << 16;
        if (v15 - 16 < (char)v26)
        {
          unsigned int v29 = *v8++;
          v28 |= (unint64_t)bswap32(v29) << (48 - v15);
          int v27 = v15 + 16;
        }
        uint64_t v30 = *(unsigned __int16 *)(v7 + 8 * v21);
        unint64_t v31 = v28 >> -(char)v26;
        uint64_t v32 = a5[v30];
        int v33 = *(char *)(v32 + 8 * v31 + 4) - 16;
        if (v27 < v33)
        {
          unsigned int v34 = *v8++;
          v28 |= (unint64_t)bswap32(v34) << (32 - v27);
          v27 += 32;
        }
        int v6 = v27 - v33;
        uint64_t v10 = v28 << v33;
        unsigned __int16 v11 = (int *)(v32 + 8 * v31);
      }
      else
      {
        if (v15 < v23)
        {
          unsigned int v24 = *v8++;
          v16 |= (unint64_t)bswap32(v24) << (32 - v15);
          v15 += 32;
        }
        int v6 = v15 - v23;
        uint64_t v10 = v16 << v22;
        unsigned __int16 v11 = (int *)(v7 + 8 * v21);
      }
      int v12 = *v11;
      if (v5 >= 0) {
        LOWORD(v13) = v12;
      }
      else {
        int v13 = -v12;
      }
      *a3++ = v13;
      uint64_t v5 = v10;
      --v9;
    }
    while (v9);
  }
  return result;
}

void *std::function<void ()(md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__func<md::ita::ProcessRenderableForStyleGroundOcclusion::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&>)::$_0,std::allocator<md::ita::ProcessRenderableForStyleGroundOcclusion::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&)>::operator()(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v166 = *MEMORY[0x1E4F143B8];
  float v3 = fmax(*(double *)(**(void **)(result + 8) + 32) * 0.5, 250.0)
     * (float)(fmaxf((float)(**(float **)(result + 24) * 0.125) + -0.875, 0.0)
             * (float)(**(float **)(result + 16) * *(float *)(a3 + 8)));
  if (v3 < 0.001) {
    return result;
  }
  v4.f32[0] = v3;
  v4.i32[1] = **(_DWORD **)(result + 32);
  uint64_t v5 = **(void **)(result + 40);
  unint64_t v6 = v5 + 7256;
  int32x2_t v157 = vcvt_s32_f32(vmul_f32(v4, (float32x2_t)vdup_n_s32(0x447A0000u)));
  uint64_t v7 = std::__hash_table<std::__hash_value_type<md::StyleGroundOcclusionCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,std::__unordered_map_hasher<md::StyleGroundOcclusionCacheKey,std::__hash_value_type<md::StyleGroundOcclusionCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,md::StyleGroundOcclusionCacheKeyHasher,std::equal_to<md::StyleGroundOcclusionCacheKey>,true>,std::__unordered_map_equal<md::StyleGroundOcclusionCacheKey,std::__hash_value_type<md::StyleGroundOcclusionCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>,std::equal_to<md::StyleGroundOcclusionCacheKey>,md::StyleGroundOcclusionCacheKeyHasher,true>,std::allocator<std::__hash_value_type<md::StyleGroundOcclusionCacheKey,geo::handle<md::ConstantDataResource<ggl::DaVinci::StyleGroundOcclusion>>>>>::find<md::StyleGroundOcclusionCacheKey>((void *)(v5 + 7256), v157.i32[0], v157.i32[1]);
  if (!v7 || !v7[3])
  {
    uint64_t v10 = *(void *)(v5 + 7128);
    if (*(void *)(v5 + 7120) == v10)
    {
      uint64_t v13 = (-1431655765 * ((*(void *)(v5 + 7176) - *(void *)(v5 + 7168)) >> 3)) | 0x100000000;
      unsigned int v14 = *(uint64_t **)(v5 + 7152);
      unint64_t v15 = *(void *)(v5 + 7160);
      if ((unint64_t)v14 >= v15)
      {
        unsigned int v17 = *(char **)(v5 + 7144);
        uint64_t v18 = ((char *)v14 - v17) >> 3;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 61) {
          goto LABEL_319;
        }
        uint64_t v20 = v15 - (void)v17;
        if (v20 >> 2 > v19) {
          unint64_t v19 = v20 >> 2;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21)
        {
          if (v21 >> 61) {
            goto LABEL_318;
          }
          int v22 = (char *)operator new(8 * v21);
        }
        else
        {
          int v22 = 0;
        }
        int v23 = (uint64_t *)&v22[8 * v18];
        unsigned int v24 = &v22[8 * v21];
        *int v23 = v13;
        unint64_t v16 = v23 + 1;
        if (v14 != (uint64_t *)v17)
        {
          unint64_t v25 = (char *)v14 - v17 - 8;
          if (v25 < 0x58) {
            goto LABEL_322;
          }
          if ((unint64_t)(v17 - v22) < 0x20) {
            goto LABEL_322;
          }
          uint64_t v26 = (v25 >> 3) + 1;
          int v27 = &v22[8 * v18 - 16];
          unint64_t v28 = v14 - 2;
          uint64_t v29 = v26 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v30 = *(_OWORD *)v28;
            *((_OWORD *)v27 - 1) = *((_OWORD *)v28 - 1);
            *(_OWORD *)int v27 = v30;
            v27 -= 32;
            v28 -= 4;
            v29 -= 4;
          }
          while (v29);
          v23 -= v26 & 0x3FFFFFFFFFFFFFFCLL;
          v14 -= v26 & 0x3FFFFFFFFFFFFFFCLL;
          if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_322:
            do
            {
              uint64_t v31 = *--v14;
              *--int v23 = v31;
            }
            while (v14 != (uint64_t *)v17);
          }
          unsigned int v14 = *(uint64_t **)(v5 + 7144);
        }
        *(void *)(v5 + 7144) = v23;
        *(void *)(v5 + 7152) = v16;
        *(void *)(v5 + 7160) = v24;
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *unsigned int v14 = v13;
        unint64_t v16 = v14 + 1;
      }
      *(void *)(v5 + 7152) = v16;
      unint64_t v12 = *(v16 - 1);
    }
    else
    {
      uint64_t v11 = *(void *)(v10 - 8);
      *(void *)(v5 + 7128) = v10 - 8;
      *(_DWORD *)(*(void *)(v5 + 7144) + 8 * v11) = -1431655765
                                                    * ((*(void *)(v5 + 7176) - *(void *)(v5 + 7168)) >> 3);
      *(_DWORD *)(*(void *)(v5 + 7144) + 8 * v11 + 4) = (((unint64_t)*(unsigned int *)(*(void *)(v5 + 7144)
                                                                                              + 8 * v11
                                                                                              + 4) << 32)
                                                         + 0x100000000) >> 32;
      unint64_t v12 = v11 | ((unint64_t)*(unsigned int *)(*(void *)(v5 + 7144) + 8 * v11 + 4) << 32);
    }
    uint64_t v32 = *(void **)(v5 + 7176);
    unint64_t v33 = *(void *)(v5 + 7184);
    if ((unint64_t)v32 >= v33)
    {
      long double v35 = *(void **)(v5 + 7168);
      unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * (v32 - v35) + 1;
      if (v36 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_319;
      }
      unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (void)v35) >> 3);
      if (2 * v37 > v36) {
        unint64_t v36 = 2 * v37;
      }
      if (v37 >= 0x555555555555555) {
        unint64_t v38 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v38 = v36;
      }
      if (v38 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_318;
      }
      double v39 = (char *)operator new(24 * v38);
      __double2 v40 = &v39[8 * (v32 - v35)];
      long double v41 = &v39[24 * v38];
      *(void *)__double2 v40 = 0;
      *((void *)v40 + 1) = 0;
      *((void *)v40 + 2) = 0;
      unsigned int v34 = v40 + 24;
      if (v32 == v35)
      {
        *(void *)(v5 + 7168) = v40;
        *(void *)(v5 + 7176) = v34;
        *(void *)(v5 + 7184) = v41;
      }
      else
      {
        do
        {
          long long v42 = *(_OWORD *)(v32 - 3);
          v32 -= 3;
          *(_OWORD *)(v40 - 24) = v42;
          v40 -= 24;
          *((void *)v40 + 2) = v32[2];
          v32[1] = 0;
          v32[2] = 0;
        }
        while (v32 != v35);
        uint64_t v32 = *(void **)(v5 + 7168);
        float64x2_t v43 = *(void **)(v5 + 7176);
        *(void *)(v5 + 7168) = v40;
        *(void *)(v5 + 7176) = v34;
        for (*(void *)(v5 + 7184) = v41; v43 != v32; v43 -= 3)
        {
          int8x16_t v44 = (std::__shared_weak_count *)*(v43 - 1);
          if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
      }
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      *uint64_t v32 = 0;
      v32[1] = 0;
      unsigned int v34 = v32 + 3;
      v32[2] = 0;
    }
    *(void *)(v5 + 7176) = v34;
    unint64_t v45 = *(char **)(v5 + 7200);
    unint64_t v46 = *(void *)(v5 + 7208);
    if ((unint64_t)v45 < v46)
    {
      *(void *)unint64_t v45 = v12;
      unint64_t v47 = (unint64_t)(v45 + 8);
      goto LABEL_71;
    }
    uint64_t v48 = *(char **)(v5 + 7192);
    uint64_t v49 = (v45 - v48) >> 3;
    unint64_t v50 = v49 + 1;
    if (!((unint64_t)(v49 + 1) >> 61))
    {
      uint64_t v51 = v46 - (void)v48;
      if (v51 >> 2 > v50) {
        unint64_t v50 = v51 >> 2;
      }
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v52 = v50;
      }
      if (v52)
      {
        if (v52 >> 61) {
          goto LABEL_318;
        }
        uint64_t v53 = operator new(8 * v52);
      }
      else
      {
        uint64_t v53 = 0;
      }
      unint64_t v54 = &v53[8 * v49];
      double v55 = &v53[8 * v52];
      *unint64_t v54 = v12;
      unint64_t v47 = (unint64_t)(v54 + 1);
      if (v45 != v48)
      {
        unint64_t v56 = v45 - v48 - 8;
        if (v56 < 0x58) {
          goto LABEL_323;
        }
        if ((unint64_t)(v48 - v53) < 0x20) {
          goto LABEL_323;
        }
        uint64_t v57 = (v56 >> 3) + 1;
        unint64_t v58 = &v53[8 * v49 - 16];
        int v59 = v45 - 16;
        uint64_t v60 = v57 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v61 = *(_OWORD *)v59;
          *(v58 - 1) = *((_OWORD *)v59 - 1);
          *unint64_t v58 = v61;
          v58 -= 2;
          v59 -= 32;
          v60 -= 4;
        }
        while (v60);
        v54 -= v57 & 0x3FFFFFFFFFFFFFFCLL;
        v45 -= 8 * (v57 & 0x3FFFFFFFFFFFFFFCLL);
        if (v57 != (v57 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_323:
          do
          {
            uint64_t v62 = *((void *)v45 - 1);
            v45 -= 8;
            *--unint64_t v54 = v62;
          }
          while (v45 != v48);
        }
      }
      *(void *)(v5 + 7192) = v54;
      *(void *)(v5 + 7200) = v47;
      *(void *)(v5 + 7208) = v55;
      if (v48) {
        operator delete(v48);
      }
LABEL_71:
      *(void *)(v5 + 7200) = v47;
      double v63 = (uint64_t *)(v5 + 7080);
      unint64_t v64 = *(void *)(v5 + 7088);
      if (v64)
      {
        uint8x8_t v65 = (uint8x8_t)vcnt_s8((int8x8_t)v64);
        v65.i16[0] = vaddlv_u8(v65);
        if (v65.u32[0] > 1uLL)
        {
          unint64_t v47 = v12;
          if (v12 >= v64) {
            unint64_t v47 = v12 % v64;
          }
        }
        else
        {
          unint64_t v47 = (v64 - 1) & v12;
        }
        __float2 v66 = *(void **)(*v63 + 8 * v47);
        if (v66)
        {
          __float2 v67 = (void *)*v66;
          if (v67)
          {
            if (v65.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v69 = v67[1];
                if (v69 == v12)
                {
                  if (v67[2] == v12) {
                    goto LABEL_129;
                  }
                }
                else if ((v69 & (v64 - 1)) != v47)
                {
                  goto LABEL_92;
                }
                __float2 v67 = (void *)*v67;
                if (!v67) {
                  goto LABEL_92;
                }
              }
            }
            do
            {
              unint64_t v68 = v67[1];
              if (v68 == v12)
              {
                if (v67[2] == v12) {
                  goto LABEL_129;
                }
              }
              else
              {
                if (v68 >= v64) {
                  v68 %= v64;
                }
                if (v68 != v47) {
                  break;
                }
              }
              __float2 v67 = (void *)*v67;
            }
            while (v67);
          }
        }
      }
LABEL_92:
      float v70 = (char *)operator new(0x30uLL);
      *(void *)float v70 = 0;
      *((void *)v70 + 1) = v12;
      *((void *)v70 + 2) = v12;
      *(int64x2_t *)(v70 + 24) = vdupq_n_s64(1uLL);
      v70[40] = 0;
      float v71 = (float)(unint64_t)(*(void *)(v5 + 7104) + 1);
      float v72 = *(float *)(v5 + 7112);
      if ((((float)(v72 * (float)v64) >= v71) & ~(v64 == 0)) == 0)
      {
        BOOL v73 = 1;
        if (v64 >= 3) {
          BOOL v73 = (v64 & (v64 - 1)) != 0;
        }
        unint64_t v74 = v73 | (2 * v64);
        unint64_t v75 = vcvtps_u32_f32(v71 / v72);
        if (v74 <= v75) {
          size_t prime = v75;
        }
        else {
          size_t prime = v74;
        }
        if (prime == 1)
        {
          size_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(prime);
          unint64_t v64 = *(void *)(v5 + 7088);
        }
        if (prime > v64) {
          goto LABEL_103;
        }
        if (prime < v64)
        {
          unint64_t v77 = vcvtps_u32_f32((float)*(unint64_t *)(v5 + 7104) / *(float *)(v5 + 7112));
          if (v64 < 3 || (uint8x8_t v78 = (uint8x8_t)vcnt_s8((int8x8_t)v64), v78.i16[0] = vaddlv_u8(v78), v78.u32[0] > 1uLL))
          {
            unint64_t v77 = std::__next_prime(v77);
          }
          else
          {
            uint64_t v79 = 1 << -(char)__clz(v77 - 1);
            if (v77 >= 2) {
              unint64_t v77 = v79;
            }
          }
          if (prime <= v77) {
            size_t prime = v77;
          }
          if (prime < v64) {
LABEL_103:
          }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(v5 + 7080, prime);
        }
        unint64_t v64 = *(void *)(v5 + 7088);
        if ((v64 & (v64 - 1)) != 0)
        {
          if (v12 >= v64) {
            unint64_t v47 = v12 % v64;
          }
          else {
            unint64_t v47 = v12;
          }
        }
        else
        {
          unint64_t v47 = (v64 - 1) & v12;
        }
      }
      uint64_t v80 = *v63;
      double v81 = *(void **)(*v63 + 8 * v47);
      if (v81)
      {
        *(void *)float v70 = *v81;
      }
      else
      {
        *(void *)float v70 = *(void *)(v5 + 7096);
        *(void *)(v5 + 7096) = v70;
        *(void *)(v80 + 8 * v47) = v5 + 7096;
        if (!*(void *)v70)
        {
LABEL_128:
          ++*(void *)(v5 + 7104);
LABEL_129:
          unint64_t v83 = *(void *)(v5 + 7264);
          unint64_t v84 = v157.i32[0] - 0x61C8864680B583EBLL;
          unint64_t v85 = (v84 << 6) + v157.i32[1] + (v84 >> 2);
          unint64_t v86 = (v85 - 0x61C8864680B583EBLL) ^ v84;
          if (v83)
          {
            uint8x8_t v87 = (uint8x8_t)vcnt_s8((int8x8_t)v83);
            v87.i16[0] = vaddlv_u8(v87);
            if (v87.u32[0] > 1uLL)
            {
              unint64_t v64 = (v85 - 0x61C8864680B583EBLL) ^ v84;
              if (v86 >= v83) {
                unint64_t v64 = v86 % v83;
              }
            }
            else
            {
              unint64_t v64 = v86 & (v83 - 1);
            }
            float v88 = *(void ***)(*(void *)v6 + 8 * v64);
            if (v88)
            {
              float v89 = *v88;
              if (*v88)
              {
                if (v87.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v91 = v89[1];
                    if (v91 == v86)
                    {
                      if (*((_DWORD *)v89 + 4) == v157.i32[0] && *((_DWORD *)v89 + 5) == v157.i32[1]) {
                        goto LABEL_223;
                      }
                    }
                    else if ((v91 & (v83 - 1)) != v64)
                    {
                      goto LABEL_157;
                    }
                    float v89 = (void *)*v89;
                    if (!v89) {
                      goto LABEL_157;
                    }
                  }
                }
                do
                {
                  unint64_t v93 = v89[1];
                  if (v93 == v86)
                  {
                    if (*((_DWORD *)v89 + 4) == v157.i32[0] && *((_DWORD *)v89 + 5) == v157.i32[1]) {
                      goto LABEL_223;
                    }
                  }
                  else
                  {
                    if (v93 >= v83) {
                      v93 %= v83;
                    }
                    if (v93 != v64) {
                      break;
                    }
                  }
                  float v89 = (void *)*v89;
                }
                while (v89);
              }
            }
          }
LABEL_157:
          float v89 = operator new(0x20uLL);
          *float v89 = 0;
          v89[1] = v86;
          *((_OWORD *)v89 + 1) = (unint64_t)v157;
          float v94 = (float)(unint64_t)(*(void *)(v5 + 7280) + 1);
          float v95 = *(float *)(v5 + 7288);
          if ((((float)(v95 * (float)v83) >= v94) & ~(v83 == 0)) != 0)
          {
LABEL_213:
            unint64_t v118 = *(void **)v6;
            long long v119 = *(void **)(*(void *)v6 + 8 * v64);
            if (v119)
            {
              *float v89 = *v119;
            }
            else
            {
              *float v89 = *(void *)(v5 + 7272);
              *(void *)(v5 + 7272) = v89;
              v118[v64] = v5 + 7272;
              if (!*v89) {
                goto LABEL_222;
              }
              unint64_t v120 = *(void *)(*v89 + 8);
              if ((v83 & (v83 - 1)) != 0)
              {
                if (v120 >= v83) {
                  v120 %= v83;
                }
              }
              else
              {
                v120 &= v83 - 1;
              }
              long long v119 = (void *)(*(void *)v6 + 8 * v120);
            }
            *long long v119 = v89;
LABEL_222:
            ++*(void *)(v5 + 7280);
LABEL_223:
            v89[3] = v12;
            unint64_t v121 = *(void *)(v5 + 7304);
            if (v121)
            {
              uint8x8_t v122 = (uint8x8_t)vcnt_s8((int8x8_t)v121);
              v122.i16[0] = vaddlv_u8(v122);
              if (v122.u32[0] > 1uLL)
              {
                unint64_t v6 = v12;
                if (v12 >= v121) {
                  unint64_t v6 = v12 % v121;
                }
              }
              else
              {
                unint64_t v6 = (v121 - 1) & v12;
              }
              uint64_t v123 = *(void ***)(*(void *)(v5 + 7296) + 8 * v6);
              if (v123)
              {
                uint64_t v124 = *v123;
                if (*v123)
                {
                  if (v122.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      uint64_t v126 = v124[1];
                      if (v126 == v12)
                      {
                        if (v124[2] == v12) {
                          goto LABEL_310;
                        }
                      }
                      else if ((v126 & (v121 - 1)) != v6)
                      {
                        goto LABEL_244;
                      }
                      uint64_t v124 = (void *)*v124;
                      if (!v124) {
                        goto LABEL_244;
                      }
                    }
                  }
                  do
                  {
                    unint64_t v125 = v124[1];
                    if (v125 == v12)
                    {
                      if (v124[2] == v12) {
                        goto LABEL_310;
                      }
                    }
                    else
                    {
                      if (v125 >= v121) {
                        v125 %= v121;
                      }
                      if (v125 != v6) {
                        break;
                      }
                    }
                    uint64_t v124 = (void *)*v124;
                  }
                  while (v124);
                }
              }
            }
LABEL_244:
            uint64_t v124 = operator new(0x20uLL);
            *uint64_t v124 = 0;
            v124[1] = v12;
            v124[2] = v12;
            v124[3] = 0;
            float v127 = (float)(unint64_t)(*(void *)(v5 + 7320) + 1);
            float v128 = *(float *)(v5 + 7328);
            if ((((float)(v128 * (float)v121) >= v127) & ~(v121 == 0)) != 0)
            {
LABEL_300:
              uint64_t v153 = *(void *)(v5 + 7296);
              long long v154 = *(void **)(v153 + 8 * v6);
              if (v154)
              {
                *uint64_t v124 = *v154;
              }
              else
              {
                *uint64_t v124 = *(void *)(v5 + 7312);
                *(void *)(v5 + 7312) = v124;
                *(void *)(v153 + 8 * v6) = v5 + 7312;
                if (!*v124)
                {
LABEL_309:
                  ++*(void *)(v5 + 7320);
LABEL_310:
                  v124[3] = v157;
                  long long v162 = (void *)v12;
                  operator new();
                }
                unint64_t v155 = *(void *)(*v124 + 8);
                if ((v121 & (v121 - 1)) != 0)
                {
                  if (v155 >= v121) {
                    v155 %= v121;
                  }
                }
                else
                {
                  v155 &= v121 - 1;
                }
                long long v154 = (void *)(*(void *)(v5 + 7296) + 8 * v155);
              }
              *long long v154 = v124;
              goto LABEL_309;
            }
            BOOL v129 = 1;
            if (v121 >= 3) {
              BOOL v129 = (v121 & (v121 - 1)) != 0;
            }
            unint64_t v130 = v129 | (2 * v121);
            unint64_t v131 = vcvtps_u32_f32(v127 / v128);
            if (v130 <= v131) {
              size_t v132 = v131;
            }
            else {
              size_t v132 = v130;
            }
            if (v132 == 1)
            {
              size_t v132 = 2;
            }
            else if ((v132 & (v132 - 1)) != 0)
            {
              size_t v132 = std::__next_prime(v132);
              unint64_t v121 = *(void *)(v5 + 7304);
            }
            if (v132 <= v121)
            {
              if (v132 >= v121) {
                goto LABEL_295;
              }
              unint64_t v145 = vcvtps_u32_f32((float)*(unint64_t *)(v5 + 7320) / *(float *)(v5 + 7328));
              if (v121 < 3
                || (uint8x8_t v146 = (uint8x8_t)vcnt_s8((int8x8_t)v121), v146.i16[0] = vaddlv_u8(v146), v146.u32[0] > 1uLL))
              {
                unint64_t v145 = std::__next_prime(v145);
              }
              else
              {
                uint64_t v147 = 1 << -(char)__clz(v145 - 1);
                if (v145 >= 2) {
                  unint64_t v145 = v147;
                }
              }
              if (v132 <= v145) {
                size_t v132 = v145;
              }
              if (v132 >= v121) {
                goto LABEL_295;
              }
              if (!v132)
              {
                long long v152 = *(void **)(v5 + 7296);
                *(void *)(v5 + 7296) = 0;
                if (v152) {
                  operator delete(v152);
                }
                *(void *)(v5 + 7304) = 0;
                goto LABEL_295;
              }
            }
            if (!(v132 >> 61))
            {
              float v133 = operator new(8 * v132);
              float v134 = *(void **)(v5 + 7296);
              *(void *)(v5 + 7296) = v133;
              if (v134) {
                operator delete(v134);
              }
              uint64_t v135 = 0;
              *(void *)(v5 + 7304) = v132;
              do
                *(void *)(*(void *)(v5 + 7296) + 8 * v135++) = 0;
              while (v132 != v135);
              int v136 = *(void **)(v5 + 7312);
              if (!v136) {
                goto LABEL_295;
              }
              uint64_t v137 = v5 + 7312;
              size_t v138 = v136[1];
              size_t v139 = v132 - 1;
              if ((v132 & (v132 - 1)) == 0)
              {
                size_t v140 = v138 & v139;
                *(void *)(*(void *)(v5 + 7296) + 8 * v140) = v137;
                while (1)
                {
                  uint64_t v141 = (void *)*v136;
                  if (!*v136) {
                    break;
                  }
                  size_t v142 = v141[1] & v139;
                  if (v142 == v140)
                  {
                    int v136 = (void *)*v136;
                  }
                  else
                  {
                    uint64_t v143 = *(void *)(v5 + 7296);
                    if (*(void *)(v143 + 8 * v142))
                    {
                      *int v136 = *v141;
                      uint64_t v144 = 8 * v142;
                      *uint64_t v141 = **(void **)(*(void *)(v5 + 7296) + v144);
                      **(void **)(*(void *)(v5 + 7296) + v144) = v141;
                    }
                    else
                    {
                      *(void *)(v143 + 8 * v142) = v136;
                      int v136 = v141;
                      size_t v140 = v142;
                    }
                  }
                }
LABEL_295:
                unint64_t v121 = *(void *)(v5 + 7304);
                if ((v121 & (v121 - 1)) != 0)
                {
                  if (v12 >= v121) {
                    unint64_t v6 = v12 % v121;
                  }
                  else {
                    unint64_t v6 = v12;
                  }
                }
                else
                {
                  unint64_t v6 = (v121 - 1) & v12;
                }
                goto LABEL_300;
              }
              if (v138 >= v132) {
                v138 %= v132;
              }
              *(void *)(*(void *)(v5 + 7296) + 8 * v138) = v137;
              long long v148 = (void *)*v136;
              if (!*v136) {
                goto LABEL_295;
              }
              while (1)
              {
                size_t v150 = v148[1];
                if (v150 >= v132) {
                  v150 %= v132;
                }
                if (v150 != v138)
                {
                  uint64_t v151 = *(void *)(v5 + 7296);
                  if (!*(void *)(v151 + 8 * v150))
                  {
                    *(void *)(v151 + 8 * v150) = v136;
                    goto LABEL_281;
                  }
                  *int v136 = *v148;
                  uint64_t v149 = 8 * v150;
                  *long long v148 = **(void **)(*(void *)(v5 + 7296) + v149);
                  **(void **)(*(void *)(v5 + 7296) + v149) = v148;
                  long long v148 = v136;
                }
                size_t v150 = v138;
LABEL_281:
                int v136 = v148;
                long long v148 = (void *)*v148;
                size_t v138 = v150;
                if (!v148) {
                  goto LABEL_295;
                }
              }
            }
LABEL_318:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          BOOL v96 = 1;
          if (v83 >= 3) {
            BOOL v96 = (v83 & (v83 - 1)) != 0;
          }
          unint64_t v97 = v96 | (2 * v83);
          unint64_t v98 = vcvtps_u32_f32(v94 / v95);
          if (v97 <= v98) {
            size_t v99 = v98;
          }
          else {
            size_t v99 = v97;
          }
          if (v99 == 1)
          {
            size_t v99 = 2;
          }
          else if ((v99 & (v99 - 1)) != 0)
          {
            size_t v99 = std::__next_prime(v99);
            unint64_t v83 = *(void *)(v5 + 7264);
          }
          if (v99 <= v83)
          {
            if (v99 >= v83) {
              goto LABEL_208;
            }
            unint64_t v111 = vcvtps_u32_f32((float)*(unint64_t *)(v5 + 7280) / *(float *)(v5 + 7288));
            if (v83 < 3
              || (uint8x8_t v112 = (uint8x8_t)vcnt_s8((int8x8_t)v83), v112.i16[0] = vaddlv_u8(v112), v112.u32[0] > 1uLL))
            {
              unint64_t v111 = std::__next_prime(v111);
            }
            else
            {
              uint64_t v113 = 1 << -(char)__clz(v111 - 1);
              if (v111 >= 2) {
                unint64_t v111 = v113;
              }
            }
            if (v99 <= v111) {
              size_t v99 = v111;
            }
            if (v99 >= v83) {
              goto LABEL_208;
            }
            if (!v99)
            {
              BOOL v117 = *(void **)v6;
              *(void *)unint64_t v6 = 0;
              if (v117) {
                operator delete(v117);
              }
              *(void *)(v5 + 7264) = 0;
              goto LABEL_208;
            }
          }
          if (v99 >> 61) {
            goto LABEL_318;
          }
          float v100 = operator new(8 * v99);
          uint64_t v101 = *(void **)v6;
          *(void *)unint64_t v6 = v100;
          if (v101) {
            operator delete(v101);
          }
          uint64_t v102 = 0;
          *(void *)(v5 + 7264) = v99;
          do
            *(void *)(*(void *)v6 + 8 * v102++) = 0;
          while (v99 != v102);
          unsigned int v103 = *(void **)(v5 + 7272);
          if (!v103) {
            goto LABEL_208;
          }
          uint64_t v104 = v5 + 7272;
          size_t v105 = v103[1];
          size_t v106 = v99 - 1;
          if ((v99 & (v99 - 1)) == 0)
          {
            size_t v107 = v105 & v106;
            *(void *)(*(void *)v6 + 8 * v107) = v104;
            while (1)
            {
              size_t v108 = (void *)*v103;
              if (!*v103) {
                break;
              }
              size_t v109 = v108[1] & v106;
              if (v109 == v107)
              {
                unsigned int v103 = (void *)*v103;
              }
              else if (*(void *)(*(void *)v6 + 8 * v109))
              {
                *unsigned int v103 = *v108;
                uint64_t v110 = 8 * v109;
                *size_t v108 = **(void **)(*(void *)v6 + v110);
                **(void **)(*(void *)v6 + v110) = v108;
              }
              else
              {
                *(void *)(*(void *)v6 + 8 * v109) = v103;
                unsigned int v103 = v108;
                size_t v107 = v109;
              }
            }
LABEL_208:
            unint64_t v83 = *(void *)(v5 + 7264);
            if ((v83 & (v83 - 1)) != 0)
            {
              if (v86 >= v83) {
                unint64_t v64 = v86 % v83;
              }
              else {
                unint64_t v64 = v86;
              }
            }
            else
            {
              unint64_t v64 = (v83 - 1) & v86;
            }
            goto LABEL_213;
          }
          if (v105 >= v99) {
            v105 %= v99;
          }
          *(void *)(*(void *)v6 + 8 * v105) = v104;
          uint64_t v114 = (void *)*v103;
          if (!*v103) {
            goto LABEL_208;
          }
          while (1)
          {
            size_t v116 = v114[1];
            if (v116 >= v99) {
              v116 %= v99;
            }
            if (v116 != v105)
            {
              if (!*(void *)(*(void *)v6 + 8 * v116))
              {
                *(void *)(*(void *)v6 + 8 * v116) = v103;
                goto LABEL_194;
              }
              *unsigned int v103 = *v114;
              uint64_t v115 = 8 * v116;
              *uint64_t v114 = **(void **)(*(void *)v6 + v115);
              **(void **)(*(void *)v6 + v115) = v114;
              uint64_t v114 = v103;
            }
            size_t v116 = v105;
LABEL_194:
            unsigned int v103 = v114;
            uint64_t v114 = (void *)*v114;
            size_t v105 = v116;
            if (!v114) {
              goto LABEL_208;
            }
          }
        }
        unint64_t v82 = *(void *)(*(void *)v70 + 8);
        if ((v64 & (v64 - 1)) != 0)
        {
          if (v82 >= v64) {
            v82 %= v64;
          }
        }
        else
        {
          v82 &= v64 - 1;
        }
        double v81 = (void *)(*v63 + 8 * v82);
      }
      *double v81 = v70;
      goto LABEL_128;
    }
LABEL_319:
    abort();
  }
  uint64_t v8 = *(void *)ecs2::Runtime::_localEntity(&ecs2::Runtime::_localEntity);
  long long v159 = (uint64_t (**)(void **))&unk_1EF525E68;
  *(void *)&long long v160 = v9;
  *((void *)&v160 + 1) = v8;
  float v161 = (void **)&v159;
  int v164 = &v162;
  long long v162 = &unk_1EF525E68;
  long long v163 = v160;
  int v165 = 0;
  ecs2::Runtime::queueCommand(v156, (uint64_t)&v162);
  if (v165 != -1) {
    ((void (*)(char *, void **))off_1EF591178[v165])(&v158, &v162);
  }
  int v165 = -1;
  __n128 result = (uint64_t)v161;
  if (v161 == (void **)&v159) {
    return v159[4]((void **)&v159);
  }
  if (v161) {
    return (*((uint64_t (**)(void))*v161 + 5))();
  }
  return result;
}

void sub_1A2789210(_Unwind_Exception *a1)
{
  uint64_t v3 = v1[3];
  v1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<md::ita::ProcessRenderableForStyleGroundOcclusion::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&>)::$_0,std::allocator<md::ita::ProcessRenderableForStyleGroundOcclusion::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF520A98;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ita::ProcessRenderableForStyleGroundOcclusion::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&>)::$_0,std::allocator<md::ita::ProcessRenderableForStyleGroundOcclusion::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)unint64_t v2 = &unk_1EF520A98;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

void std::__function::__func<md::ita::ProcessRenderableForStyleGroundOcclusion::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&>)::$_0,std::allocator<md::ita::ProcessRenderableForStyleGroundOcclusion::operator()(ecs2::Query<md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&>)::$_0>,void ()(md::ls::MeshRenderableID const&,md::ls::UnitsPerMeter const&,md::ls::InView const&)>::~__func()
{
}

double *std::__introsort<std::_ClassicAlgPolicy,md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_0 &,std::pair<md::ARBuildingTileData *,double> *,false>(double *result, double *a2, uint64_t a3, char a4)
{
  unint64_t v9 = (unint64_t)result;
LABEL_2:
  uint64_t v10 = (double *)v9;
  while (1)
  {
    unint64_t v9 = (unint64_t)v10;
    uint64_t v11 = (char *)a2 - (char *)v10;
    uint64_t v12 = ((char *)a2 - (char *)v10) >> 4;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return result;
        case 2:
          double v88 = *(a2 - 1);
          double v89 = v10[1];
          if (v88 < v89)
          {
            double v90 = *v10;
            *uint64_t v10 = *(a2 - 2);
            *(a2 - 2) = v90;
            v10[1] = v88;
            *(a2 - 1) = v89;
          }
          return result;
        case 3:
          double v91 = v10[3];
          double v92 = v10[1];
          double v93 = *(a2 - 1);
          if (v91 >= v92)
          {
            if (v93 < v91)
            {
              uint64_t v141 = *((void *)v10 + 2);
              void v10[2] = *(a2 - 2);
              *((void *)a2 - 2) = v141;
              void v10[3] = v93;
              *(a2 - 1) = v91;
              double v98 = v10[3];
              double v104 = v10[1];
              if (v98 < v104)
              {
                uint64_t v142 = *(void *)v10;
                *uint64_t v10 = v10[2];
                *((void *)v10 + 2) = v142;
LABEL_165:
                v10[1] = v98;
                void v10[3] = v104;
              }
            }
          }
          else
          {
            uint64_t v94 = *(void *)v10;
            if (v93 >= v91)
            {
              *uint64_t v10 = v10[2];
              *((void *)v10 + 2) = v94;
              v10[1] = v91;
              void v10[3] = v92;
              double v149 = *(a2 - 1);
              if (v149 >= v92) {
                return result;
              }
              void v10[2] = *(a2 - 2);
              *((void *)a2 - 2) = v94;
              void v10[3] = v149;
            }
            else
            {
              *uint64_t v10 = *(a2 - 2);
              *((void *)a2 - 2) = v94;
              v10[1] = v93;
            }
            *(a2 - 1) = v92;
          }
          break;
        case 4:
          return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_0 &,std::pair<md::ARBuildingTileData *,double> *>(v10, v10 + 2, v10 + 4, a2 - 2);
        case 5:
          __n128 result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_0 &,std::pair<md::ARBuildingTileData *,double> *>(v10, v10 + 2, v10 + 4, v10 + 6);
          double v95 = *(a2 - 1);
          double v96 = v10[7];
          if (v95 >= v96) {
            return result;
          }
          uint64_t v97 = *((void *)v10 + 6);
          v10[6] = *(a2 - 2);
          *((void *)a2 - 2) = v97;
          v10[7] = v95;
          *(a2 - 1) = v96;
          double v98 = v10[7];
          double v99 = v10[5];
          if (v98 >= v99) {
            return result;
          }
          uint64_t v100 = *((void *)v10 + 4);
          uint64_t v101 = *((void *)v10 + 6);
          *((void *)v10 + 4) = v101;
          *((void *)v10 + 6) = v100;
          v10[5] = v98;
          v10[7] = v99;
          double v102 = v10[3];
          if (v98 >= v102) {
            return result;
          }
          uint64_t v103 = *((void *)v10 + 2);
          *((void *)v10 + 2) = v101;
          *((void *)v10 + 4) = v103;
          void v10[3] = v98;
          v10[5] = v102;
          double v104 = v10[1];
          if (v98 >= v104) {
            return result;
          }
          double v105 = *v10;
          *(void *)uint64_t v10 = v101;
          void v10[2] = v105;
          goto LABEL_165;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 383) {
      break;
    }
    if (!a3)
    {
      if (v10 == a2) {
        return result;
      }
      int64_t v117 = (unint64_t)(v12 - 2) >> 1;
      int64_t v118 = v117;
      do
      {
        if (v117 >= v118)
        {
          uint64_t v120 = (2 * v118) | 1;
          unint64_t v121 = &v10[2 * v120];
          if (2 * v118 + 2 < v12 && v121[1] < v121[3])
          {
            v121 += 2;
            uint64_t v120 = 2 * v118 + 2;
          }
          uint8x8_t v122 = &v10[2 * v118];
          double v123 = v122[1];
          if (v121[1] >= v123)
          {
            uint64_t v124 = *(void *)v122;
            do
            {
              unint64_t v125 = v122;
              uint8x8_t v122 = v121;
              *unint64_t v125 = *v121;
              v125[1] = v121[1];
              if (v117 < v120) {
                break;
              }
              uint64_t v126 = 2 * v120;
              uint64_t v120 = (2 * v120) | 1;
              unint64_t v121 = &v10[2 * v120];
              uint64_t v127 = v126 + 2;
              if (v127 < v12 && v121[1] < v121[3])
              {
                v121 += 2;
                uint64_t v120 = v127;
              }
            }
            while (v121[1] >= v123);
            *(void *)uint8x8_t v122 = v124;
            v122[1] = v123;
          }
        }
        BOOL v119 = v118-- <= 0;
      }
      while (!v119);
      uint64_t v128 = (unint64_t)v11 >> 4;
      while (2)
      {
        uint64_t v129 = 0;
        double v130 = *v10;
        double v131 = v10[1];
        size_t v132 = v10;
        do
        {
          float v133 = v132;
          v132 += 2 * v129 + 2;
          uint64_t v134 = 2 * v129;
          uint64_t v129 = (2 * v129) | 1;
          uint64_t v135 = v134 + 2;
          if (v135 < v128 && v132[1] < v132[3])
          {
            v132 += 2;
            uint64_t v129 = v135;
          }
          *float v133 = *v132;
          v133[1] = v132[1];
        }
        while (v129 <= (uint64_t)((unint64_t)(v128 - 2) >> 1));
        if (v132 == a2 - 2)
        {
          double *v132 = v130;
          goto LABEL_147;
        }
        double *v132 = *(a2 - 2);
        v132[1] = *(a2 - 1);
        *(a2 - 2) = v130;
        *(a2 - 1) = v131;
        uint64_t v136 = (char *)v132 - (char *)v10 + 16;
        if (v136 >= 17)
        {
          unint64_t v137 = (((unint64_t)v136 >> 4) - 2) >> 1;
          size_t v138 = &v10[2 * v137];
          double v131 = v132[1];
          if (v138[1] < v131)
          {
            uint64_t v139 = *(void *)v132;
            do
            {
              size_t v140 = v132;
              size_t v132 = v138;
              double *v140 = *v138;
              v140[1] = v138[1];
              if (!v137) {
                break;
              }
              unint64_t v137 = (v137 - 1) >> 1;
              size_t v138 = &v10[2 * v137];
            }
            while (v138[1] < v131);
            *(void *)size_t v132 = v139;
LABEL_147:
            v132[1] = v131;
          }
        }
        a2 -= 2;
        BOOL v119 = v128-- <= 2;
        if (v119) {
          return result;
        }
        continue;
      }
    }
    unint64_t v13 = (unint64_t)v12 >> 1;
    unsigned int v14 = &v10[2 * ((unint64_t)v12 >> 1)];
    double v15 = *(a2 - 1);
    if ((unint64_t)v11 < 0x801)
    {
      double v19 = v10[1];
      double v20 = v14[1];
      if (v19 < v20)
      {
        double v21 = *v14;
        if (v15 < v19)
        {
          *unsigned int v14 = *(a2 - 2);
          *(a2 - 2) = v21;
          v14[1] = v15;
          goto LABEL_32;
        }
        *unsigned int v14 = *v10;
        *uint64_t v10 = v21;
        v14[1] = v19;
        v10[1] = v20;
        double v41 = *(a2 - 1);
        if (v41 < v20)
        {
          *uint64_t v10 = *(a2 - 2);
          *(a2 - 2) = v21;
          v10[1] = v41;
LABEL_32:
          *(a2 - 1) = v20;
        }
LABEL_33:
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_58;
        }
        goto LABEL_34;
      }
      if (v15 >= v19) {
        goto LABEL_33;
      }
      double v26 = *v10;
      *uint64_t v10 = *(a2 - 2);
      *(a2 - 2) = v26;
      v10[1] = v15;
      *(a2 - 1) = v19;
      double v27 = v10[1];
      double v28 = v14[1];
      if (v27 >= v28) {
        goto LABEL_33;
      }
      uint64_t v29 = *(void *)v14;
      *unsigned int v14 = *v10;
      *(void *)uint64_t v10 = v29;
      v14[1] = v27;
      v10[1] = v28;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_58;
      }
LABEL_34:
      double v42 = *v10;
      double v43 = v10[1];
LABEL_59:
      unint64_t v64 = v10;
      do
      {
        uint8x8_t v65 = v64;
        v64 += 2;
      }
      while (v65[3] < v43);
      __float2 v66 = a2;
      if (v65 == v10)
      {
        uint64_t v69 = a2;
        while (v64 < v69)
        {
          __float2 v67 = v69 - 2;
          double v70 = *(v69 - 1);
          v69 -= 2;
          if (v70 < v43) {
            goto LABEL_68;
          }
        }
        __float2 v67 = v69;
      }
      else
      {
        do
        {
          __float2 v67 = v66 - 2;
          double v68 = *(v66 - 1);
          v66 -= 2;
        }
        while (v68 >= v43);
      }
LABEL_68:
      uint64_t v10 = v64;
      if (v64 < v67)
      {
        float v71 = v67;
        do
        {
          double v72 = *v10;
          *uint64_t v10 = *v71;
          *float v71 = v72;
          uint64_t v73 = *((void *)v10 + 1);
          v10[1] = v71[1];
          *((void *)v71 + 1) = v73;
          do
          {
            double v74 = v10[3];
            v10 += 2;
          }
          while (v74 < v43);
          do
          {
            double v75 = *(v71 - 1);
            v71 -= 2;
          }
          while (v75 >= v43);
        }
        while (v10 < v71);
      }
      if (v10 - 2 != (double *)v9)
      {
        *(double *)unint64_t v9 = *(v10 - 2);
        *(double *)(v9 + 8) = *(v10 - 1);
      }
      *(v10 - 2) = v42;
      *(v10 - 1) = v43;
      if (v64 < v67) {
        goto LABEL_79;
      }
      BOOL v76 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_0 &,std::pair<md::ARBuildingTileData *,double> *>((double *)v9, v10 - 2);
      __n128 result = (double *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_0 &,std::pair<md::ARBuildingTileData *,double> *>(v10, a2);
      if (result)
      {
        a2 = v10 - 2;
        if (v76) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v76)
      {
LABEL_79:
        __n128 result = (double *)std::__introsort<std::_ClassicAlgPolicy,md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_0 &,std::pair<md::ARBuildingTileData *,double> *,false>(v9, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      double v16 = v14[1];
      double v17 = v10[1];
      if (v16 >= v17)
      {
        if (v15 < v16)
        {
          uint64_t v22 = *(void *)v14;
          *unsigned int v14 = *(a2 - 2);
          *((void *)a2 - 2) = v22;
          v14[1] = v15;
          *(a2 - 1) = v16;
          double v23 = v14[1];
          double v24 = v10[1];
          if (v23 < v24)
          {
            double v25 = *v10;
            *uint64_t v10 = *v14;
            *unsigned int v14 = v25;
            v10[1] = v23;
            v14[1] = v24;
          }
        }
      }
      else
      {
        double v18 = *v10;
        if (v15 >= v16)
        {
          *uint64_t v10 = *v14;
          *unsigned int v14 = v18;
          v10[1] = v16;
          v14[1] = v17;
          double v30 = *(a2 - 1);
          if (v30 >= v17) {
            goto LABEL_24;
          }
          *unsigned int v14 = *(a2 - 2);
          *(a2 - 2) = v18;
          v14[1] = v30;
        }
        else
        {
          *uint64_t v10 = *(a2 - 2);
          *(a2 - 2) = v18;
          v10[1] = v15;
        }
        *(a2 - 1) = v17;
      }
LABEL_24:
      uint64_t v31 = &v10[2 * v13];
      uint64_t v32 = v31 - 2;
      double v33 = *(v31 - 1);
      double v34 = v10[3];
      double v35 = *(a2 - 3);
      if (v33 >= v34)
      {
        if (v35 < v33)
        {
          double v37 = *v32;
          *uint64_t v32 = *(a2 - 4);
          *(a2 - 4) = v37;
          v32[1] = v35;
          *(a2 - 3) = v33;
          double v38 = v32[1];
          double v39 = v10[3];
          if (v38 < v39)
          {
            uint64_t v40 = *((void *)v10 + 2);
            void v10[2] = *v32;
            *(void *)uint64_t v32 = v40;
            void v10[3] = v38;
            v32[1] = v39;
          }
        }
      }
      else
      {
        uint64_t v36 = *((void *)v10 + 2);
        if (v35 >= v33)
        {
          void v10[2] = *v32;
          *(void *)uint64_t v32 = v36;
          void v10[3] = v33;
          v32[1] = v34;
          double v44 = *(a2 - 3);
          if (v44 >= v34) {
            goto LABEL_38;
          }
          *uint64_t v32 = *(a2 - 4);
          *((void *)a2 - 4) = v36;
          v32[1] = v44;
        }
        else
        {
          void v10[2] = *(a2 - 4);
          *((void *)a2 - 4) = v36;
          void v10[3] = v35;
        }
        *(a2 - 3) = v34;
      }
LABEL_38:
      unint64_t v45 = &v10[2 * v13];
      unint64_t v46 = v45 + 2;
      double v47 = v45[3];
      double v48 = v10[5];
      double v49 = *(a2 - 5);
      if (v47 >= v48)
      {
        if (v49 < v47)
        {
          double v51 = *v46;
          *unint64_t v46 = *(a2 - 6);
          *(a2 - 6) = v51;
          v46[1] = v49;
          *(a2 - 5) = v47;
          double v52 = v46[1];
          double v53 = v10[5];
          if (v52 < v53)
          {
            uint64_t v54 = *((void *)v10 + 4);
            v10[4] = *v46;
            *(void *)unint64_t v46 = v54;
            v10[5] = v52;
            v46[1] = v53;
          }
        }
      }
      else
      {
        uint64_t v50 = *((void *)v10 + 4);
        if (v49 >= v47)
        {
          v10[4] = *v46;
          *(void *)unint64_t v46 = v50;
          v10[5] = v47;
          v46[1] = v48;
          double v55 = *(a2 - 5);
          if (v55 >= v48) {
            goto LABEL_47;
          }
          *unint64_t v46 = *(a2 - 6);
          *((void *)a2 - 6) = v50;
          v46[1] = v55;
        }
        else
        {
          v10[4] = *(a2 - 6);
          *((void *)a2 - 6) = v50;
          v10[5] = v49;
        }
        *(a2 - 5) = v48;
      }
LABEL_47:
      double v56 = v14[1];
      double v57 = v32[1];
      double v58 = v46[1];
      if (v56 >= v57)
      {
        double v59 = *v14;
        if (v58 < v56)
        {
          double v60 = *v46;
          *unsigned int v14 = *v46;
          *unint64_t v46 = v59;
          v14[1] = v58;
          v46[1] = v56;
          if (v58 < v57)
          {
            double v59 = *v32;
            *uint64_t v32 = v60;
            *unsigned int v14 = v59;
            v32[1] = v58;
            v14[1] = v57;
          }
          else
          {
            double v57 = v58;
            double v59 = v60;
          }
        }
        else
        {
          double v57 = v14[1];
        }
      }
      else
      {
        double v59 = *v32;
        if (v58 >= v56)
        {
          *uint64_t v32 = *v14;
          *unsigned int v14 = v59;
          v32[1] = v56;
          v14[1] = v57;
          if (v58 < v57)
          {
            double v61 = *v46;
            *unsigned int v14 = *v46;
            *unint64_t v46 = v59;
            v14[1] = v58;
            v46[1] = v57;
            double v57 = v58;
            double v59 = v61;
          }
        }
        else
        {
          *uint64_t v32 = *v46;
          *unint64_t v46 = v59;
          v32[1] = v58;
          v46[1] = v57;
          double v59 = *v14;
          double v57 = v56;
        }
      }
      double v62 = *v10;
      *uint64_t v10 = v59;
      *unsigned int v14 = v62;
      double v63 = v10[1];
      v10[1] = v57;
      v10[2 * v13 + 1] = v63;
      --a3;
      if (a4) {
        goto LABEL_34;
      }
LABEL_58:
      double v43 = v10[1];
      double v42 = *v10;
      if (*(v10 - 1) < v43) {
        goto LABEL_59;
      }
      if (v43 < *(a2 - 1))
      {
        unint64_t v77 = v10;
        do
        {
          uint64_t v10 = v77 + 2;
          double v78 = v77[3];
          v77 += 2;
        }
        while (v43 >= v78);
      }
      else
      {
        uint64_t v79 = v10 + 2;
        do
        {
          uint64_t v10 = v79;
          if (v79 >= a2) {
            break;
          }
          double v80 = v79[1];
          v79 += 2;
        }
        while (v43 >= v80);
      }
      double v81 = a2;
      if (v10 < a2)
      {
        unint64_t v82 = a2;
        do
        {
          double v81 = v82 - 2;
          double v83 = *(v82 - 1);
          v82 -= 2;
        }
        while (v43 < v83);
      }
      while (v10 < v81)
      {
        double v84 = *v10;
        *uint64_t v10 = *v81;
        *double v81 = v84;
        uint64_t v85 = *((void *)v10 + 1);
        v10[1] = v81[1];
        *((void *)v81 + 1) = v85;
        do
        {
          double v86 = v10[3];
          v10 += 2;
        }
        while (v43 >= v86);
        do
        {
          double v87 = *(v81 - 1);
          v81 -= 2;
        }
        while (v43 < v87);
      }
      BOOL v4 = (unint64_t)(v10 - 2) >= v9;
      BOOL v5 = v10 - 2 == (double *)v9;
      if (v10 - 2 != (double *)v9)
      {
        *(double *)unint64_t v9 = *(v10 - 2);
        *(double *)(v9 + 8) = *(v10 - 1);
      }
      a4 = 0;
      *(v10 - 2) = v42;
      *(v10 - 1) = v43;
    }
  }
  size_t v106 = v10 + 2;
  BOOL v108 = v10 == a2 || v106 == a2;
  if (a4)
  {
    if (!v108)
    {
      uint64_t v109 = 0;
      uint64_t v110 = v10;
      do
      {
        double v112 = v110[3];
        double v113 = v110[1];
        uint64_t v110 = v106;
        if (v112 < v113)
        {
          uint64_t v114 = *(void *)v106;
          uint64_t v115 = v109;
          do
          {
            size_t v116 = (double *)((char *)v10 + v115);
            v116[2] = *(double *)((char *)v10 + v115);
            v116[3] = *(double *)((char *)v10 + v115 + 8);
            if (!v115)
            {
              uint64_t v111 = (uint64_t)v10;
              goto LABEL_124;
            }
            v115 -= 16;
          }
          while (v112 < *(v116 - 1));
          uint64_t v111 = (uint64_t)v10 + v115 + 16;
LABEL_124:
          *(void *)uint64_t v111 = v114;
          *(double *)(v111 + 8) = v112;
        }
        size_t v106 = v110 + 2;
        v109 += 16;
      }
      while (v110 + 2 != a2);
    }
  }
  else if (!v108)
  {
    uint64_t v143 = v10 + 1;
    do
    {
      double v144 = *(double *)(v9 + 24);
      double v145 = *(double *)(v9 + 8);
      unint64_t v9 = (unint64_t)v106;
      if (v144 < v145)
      {
        uint64_t v146 = *(void *)v106;
        uint64_t v147 = v143;
        do
        {
          v147[1] = *(v147 - 1);
          v147[2] = *v147;
          double v148 = *(v147 - 2);
          v147 -= 2;
        }
        while (v144 < v148);
        *((void *)v147 + 1) = v146;
        v147[2] = v144;
      }
      size_t v106 = (double *)(v9 + 16);
      v143 += 2;
    }
    while ((double *)(v9 + 16) != a2);
  }
  return result;
}

uint64_t md::ARWorldIntersector::visitReferencedAssetOcclusionVolumes(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(void *)(a4 + 24)) {
    return result;
  }
  uint64_t v181 = result;
  BOOL v4 = *(int8x8_t **)(a2 + 784);
  BOOL v5 = (uint64_t *)gdc::Registry::storage<arComponents::AssetDataReference>(v4);
  uint64_t v6 = gdc::Registry::storage<arComponents::LocalTransform>(v4);
  uint64_t v7 = v6;
  uint64_t v8 = (uint64_t *)(v6 + 32);
  uint64_t v9 = *(void *)(v6 + 64) - *(void *)(v6 + 56) >= (unint64_t)(v5[8] - v5[7]) ? (uint64_t)(v5 + 4) : v6 + 32;
  gdc::RegistryView<md::components::DynamicMeshInstance,md::components::Material>::RegistryViewIterator::RegistryViewIterator(&v192, v9, v5 + 4, v8, *(void *)(v9 + 24));
  uint64_t v10 = (uint64_t)(*(void *)(v7 + 64) - *(void *)(v7 + 56) >= (unint64_t)(v5[8] - v5[7]) ? v5 + 4 : v8);
  __n128 result = (uint64_t)gdc::RegistryView<md::components::DynamicMeshInstance,md::components::Material>::RegistryViewIterator::RegistryViewIterator(v190, v10, v5 + 4, v8, *(void *)(v10 + 32));
  uint64_t v11 = v195;
  if (v191 == v195) {
    return result;
  }
  uint64_t v12 = (void *)(v181 + 32);
  double v177 = (void *)(v181 + 64);
  while (1)
  {
    unint64_t v13 = *v11;
    __n128 result = gdc::Registry::storage<arComponents::AssetDataReference>(v4);
    unint64_t v14 = v13 >> 39;
    uint64_t v15 = *(void *)(result + 32);
    if (v13 >> 39 < (*(void *)(result + 40) - v15) >> 3)
    {
      uint64_t v16 = *(void *)(v15 + 8 * v14);
      if (v16)
      {
        uint64_t v17 = HIDWORD(v13) & 0x7F;
        unint64_t v18 = *(unsigned __int16 *)(v16 + 2 * v17);
        uint64_t v20 = *(void *)(result + 56);
        uint64_t v19 = *(void *)(result + 64);
        if (v18 < (v19 - v20) >> 3)
        {
          uint64_t v21 = v20 + 8 * v18;
          BOOL v22 = v21 != v19 && *(_DWORD *)(v21 + 4) == HIDWORD(v13);
          if (v22)
          {
            uint64_t v23 = *(void *)(result + 80);
            double v24 = (unint64_t *)(v23 + 40 * v18);
            if (v24 != *(unint64_t **)(result + 88) && v23 != 0)
            {
              double v26 = (void *)*v12;
              if (*v12)
              {
                unint64_t v27 = *v24;
                double v28 = v12;
                do
                {
                  unint64_t v29 = v26[4];
                  BOOL v30 = v29 >= v27;
                  if (v29 >= v27) {
                    uint64_t v31 = v26;
                  }
                  else {
                    uint64_t v31 = v26 + 1;
                  }
                  if (v30) {
                    double v28 = v26;
                  }
                  double v26 = (void *)*v31;
                }
                while (*v31);
                if (v28 != v12 && v27 >= v28[4])
                {
                  uint64_t v176 = v28[5];
                  if (!*(unsigned char *)(v23 + 40 * v18 + 32)) {
                    break;
                  }
                  unint64_t v32 = *(void *)(v23 + 40 * v18 + 24);
                  __n128 result = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(a3, v32, v32);
                  if (result) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_176:
    uint64_t v114 = v195;
    uint64_t v11 = *(unint64_t **)(v192 + 32);
    if (++v195 != v11)
    {
      uint64_t v115 = *v193;
      unint64_t v116 = (v193[1] - *v193) >> 3;
      int64_t v117 = v114 + 2;
      while (1)
      {
        unint64_t v118 = *((unsigned int *)v117 - 1);
        unint64_t v119 = v118 >> 7;
        if (v118 >> 7 < v116)
        {
          uint64_t v120 = *(void *)(v115 + 8 * v119);
          if (v120)
          {
            unint64_t v121 = *(unsigned __int16 *)(v120 + 2 * (v118 & 0x7F));
            uint64_t v122 = v193[3];
            __n128 result = v193[4];
            if (v121 < (result - v122) >> 3)
            {
              uint64_t v123 = v122 + 8 * v121;
              if (v123 != result && *(_DWORD *)(v123 + 4) == v118)
              {
                __n128 result = v194[1] - *v194;
                if (v119 < result >> 3)
                {
                  uint64_t v125 = *(void *)(*v194 + 8 * v119);
                  if (v125)
                  {
                    unint64_t v126 = *(unsigned __int16 *)(v125 + 2 * (v118 & 0x7F));
                    uint64_t v128 = v194[3];
                    uint64_t v127 = v194[4];
                    __n128 result = v127 - v128;
                    if (v126 < (v127 - v128) >> 3)
                    {
                      uint64_t v129 = v128 + 8 * v126;
                      if (v129 != v127 && *(_DWORD *)(v129 + 4) == v118) {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        float v195 = v117;
        BOOL v22 = v117++ == v11;
        if (v22) {
          goto LABEL_10;
        }
      }
      uint64_t v11 = v117 - 1;
    }
LABEL_10:
    if (v191 == v11) {
      return result;
    }
  }
  double v33 = (void *)gdc::Registry::storage<arComponents::LocalTransform>(v4);
  uint64_t v34 = v33[4];
  if (v14 < (v33[5] - v34) >> 3
    && (uint64_t v35 = *(void *)(v34 + 8 * v14)) != 0
    && (unint64_t v36 = *(unsigned __int16 *)(v35 + 2 * v17), v38 = v33[7], v37 = v33[8], v36 < (v37 - v38) >> 3)
    && ((uint64_t v39 = v38 + 8 * v36, v39 != v37) ? (v40 = *(_DWORD *)(v39 + 4) == HIDWORD(v13)) : (v40 = 0), v40))
  {
    uint64_t v41 = v33[11];
    uint64_t v42 = v33[10] + 48 * v36;
  }
  else
  {
    uint64_t v41 = v33[11];
    uint64_t v42 = v41;
  }
  if (v42 == v41) {
    uint64_t v42 = 0;
  }
  float v182 = *(float *)v42;
  float v43 = *(float *)(v42 + 12);
  float v44 = *(float *)(v42 + 24);
  float v45 = *(float *)(v42 + 36);
  float32x2_t v46 = *(float32x2_t *)(v42 + 4);
  float32x2_t v47 = *(float32x2_t *)(v42 + 16);
  float32x2_t v48 = *(float32x2_t *)(v42 + 28);
  float32x2_t v49 = *(float32x2_t *)(v42 + 40);
  unint64_t v50 = *(void *)(v181 + 56);
  double v175 = v12;
  if (v50)
  {
    uint8x8_t v51 = (uint8x8_t)vcnt_s8((int8x8_t)v50);
    v51.i16[0] = vaddlv_u8(v51);
    if (v51.u32[0] > 1uLL)
    {
      unint64_t v52 = v13;
      uint64_t v53 = v181;
      if (v13 >= v50) {
        unint64_t v52 = v13 % v50;
      }
    }
    else
    {
      unint64_t v52 = (v50 - 1) & v13;
      uint64_t v53 = v181;
    }
    uint64_t v54 = *(uint64_t ***)(*(void *)(v53 + 48) + 8 * v52);
    if (v54)
    {
      double v55 = *v54;
      if (v55)
      {
        if (v51.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v57 = v55[1];
            if (v57 == v13)
            {
              if (__PAIR64__(*((unsigned __int16 *)v55 + 9), *((unsigned __int16 *)v55 + 8)) == __PAIR64__(WORD1(v13), (unsigned __int16)v13)&& *((_DWORD *)v55 + 5) == HIDWORD(v13))
              {
                goto LABEL_68;
              }
            }
            else if ((v57 & (v50 - 1)) != v52)
            {
              goto LABEL_69;
            }
            double v55 = (uint64_t *)*v55;
            if (!v55) {
              goto LABEL_69;
            }
          }
        }
        do
        {
          unint64_t v56 = v55[1];
          if (v56 == v13)
          {
            if (__PAIR64__(*((unsigned __int16 *)v55 + 9), *((unsigned __int16 *)v55 + 8)) == __PAIR64__(WORD1(v13), (unsigned __int16)v13)&& *((_DWORD *)v55 + 5) == HIDWORD(v13))
            {
LABEL_68:
              uint64_t v180 = (void **)(v55 + 3);
              uint64_t v58 = a4;
              goto LABEL_174;
            }
          }
          else
          {
            if (v56 >= v50) {
              v56 %= v50;
            }
            if (v56 != v52) {
              break;
            }
          }
          double v55 = (uint64_t *)*v55;
        }
        while (v55);
      }
    }
LABEL_69:
    if (v51.u32[0] > 1uLL)
    {
      unint64_t v14 = v13;
      if (v13 >= v50) {
        unint64_t v14 = v13 % v50;
      }
    }
    else
    {
      unint64_t v14 = (v50 - 1) & v13;
    }
    double v59 = *(void ***)(*(void *)(v181 + 48) + 8 * v14);
    if (v59)
    {
      double v60 = *v59;
      if (*v59)
      {
        if (v51.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v62 = v60[1];
            if (v62 == v13)
            {
              if (__PAIR64__(*((unsigned __int16 *)v60 + 9), *((unsigned __int16 *)v60 + 8)) == __PAIR64__(WORD1(v13), (unsigned __int16)v13)&& *((_DWORD *)v60 + 5) == HIDWORD(v13))
              {
                goto LABEL_151;
              }
            }
            else if ((v62 & (v50 - 1)) != v14)
            {
              goto LABEL_91;
            }
            double v60 = (void *)*v60;
            if (!v60) {
              goto LABEL_91;
            }
          }
        }
        do
        {
          unint64_t v61 = v60[1];
          if (v61 == v13)
          {
            if (__PAIR64__(*((unsigned __int16 *)v60 + 9), *((unsigned __int16 *)v60 + 8)) == __PAIR64__(WORD1(v13), (unsigned __int16)v13)&& *((_DWORD *)v60 + 5) == HIDWORD(v13))
            {
              goto LABEL_151;
            }
          }
          else
          {
            if (v61 >= v50) {
              v61 %= v50;
            }
            if (v61 != v14) {
              break;
            }
          }
          double v60 = (void *)*v60;
        }
        while (v60);
      }
    }
  }
LABEL_91:
  double v60 = operator new(0x30uLL);
  *(void *)&long long v196 = v60;
  *((void *)&v196 + 1) = v181 + 64;
  *double v60 = 0;
  v60[1] = v13;
  v60[2] = v13;
  v60[3] = 0;
  v60[4] = 0;
  v60[5] = 0;
  LOBYTE(v197) = 1;
  float v63 = (float)(unint64_t)(*(void *)(v181 + 72) + 1);
  float v64 = *(float *)(v181 + 80);
  if (!v50 || (float)(v64 * (float)v50) < v63)
  {
    BOOL v65 = (v50 & (v50 - 1)) != 0;
    if (v50 < 3) {
      BOOL v65 = 1;
    }
    unint64_t v66 = v65 | (2 * v50);
    unint64_t v67 = vcvtps_u32_f32(v63 / v64);
    if (v66 <= v67) {
      size_t prime = v67;
    }
    else {
      size_t prime = v66;
    }
    if (prime == 1)
    {
      size_t prime = 2;
      uint64_t v69 = v181;
    }
    else
    {
      uint64_t v69 = v181;
      if ((prime & (prime - 1)) != 0)
      {
        size_t prime = std::__next_prime(prime);
        unint64_t v50 = *(void *)(v181 + 56);
      }
    }
    if (prime <= v50)
    {
      if (prime >= v50) {
        goto LABEL_128;
      }
      unint64_t v81 = vcvtps_u32_f32((float)*(unint64_t *)(v69 + 72) / *(float *)(v69 + 80));
      if (v50 < 3 || (uint8x8_t v82 = (uint8x8_t)vcnt_s8((int8x8_t)v50), v82.i16[0] = vaddlv_u8(v82), v82.u32[0] > 1uLL))
      {
        unint64_t v81 = std::__next_prime(v81);
      }
      else
      {
        uint64_t v83 = 1 << -(char)__clz(v81 - 1);
        if (v81 >= 2) {
          unint64_t v81 = v83;
        }
      }
      if (prime <= v81) {
        size_t prime = v81;
      }
      if (prime >= v50)
      {
        unint64_t v50 = *(void *)(v69 + 56);
LABEL_128:
        if ((v50 & (v50 - 1)) != 0)
        {
          if (v13 >= v50) {
            unint64_t v14 = v13 % v50;
          }
          else {
            unint64_t v14 = v13;
          }
        }
        else
        {
          unint64_t v14 = (v50 - 1) & v13;
        }
        goto LABEL_141;
      }
      if (!prime)
      {
        int v171 = *(void **)(v69 + 48);
        *(void *)(v69 + 48) = 0;
        if (v171) {
          operator delete(v171);
        }
        unint64_t v50 = 0;
        *(void *)(v69 + 56) = 0;
        goto LABEL_128;
      }
    }
    if (prime >> 61) {
LABEL_241:
    }
      std::__throw_bad_array_new_length[abi:nn180100]();
    double v70 = operator new(8 * prime);
    float v71 = *(void **)(v69 + 48);
    *(void *)(v69 + 48) = v70;
    if (v71) {
      operator delete(v71);
    }
    uint64_t v72 = 0;
    *(void *)(v69 + 56) = prime;
    do
      *(void *)(*(void *)(v69 + 48) + 8 * v72++) = 0;
    while (prime != v72);
    uint64_t v73 = (void *)*v177;
    if (!*v177)
    {
LABEL_127:
      unint64_t v50 = prime;
      goto LABEL_128;
    }
    size_t v74 = v73[1];
    size_t v75 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v76 = v74 & v75;
      *(void *)(*(void *)(v69 + 48) + 8 * v76) = v177;
      for (uint64_t i = (void *)*v73; *v73; uint64_t i = (void *)*v73)
      {
        size_t v78 = i[1] & v75;
        if (v78 == v76)
        {
          uint64_t v73 = i;
        }
        else
        {
          uint64_t v79 = *(void *)(v69 + 48);
          if (*(void *)(v79 + 8 * v78))
          {
            *uint64_t v73 = *i;
            uint64_t v80 = 8 * v78;
            void *i = **(void **)(*(void *)(v69 + 48) + v80);
            **(void **)(*(void *)(v69 + 48) + v80) = i;
          }
          else
          {
            *(void *)(v79 + 8 * v78) = v73;
            uint64_t v73 = i;
            size_t v76 = v78;
          }
        }
      }
      goto LABEL_127;
    }
    if (v74 >= prime) {
      v74 %= prime;
    }
    *(void *)(*(void *)(v69 + 48) + 8 * v74) = v177;
    double v84 = (void *)*v73;
    if (!*v73) {
      goto LABEL_127;
    }
    while (1)
    {
      size_t v86 = v84[1];
      if (v86 >= prime) {
        v86 %= prime;
      }
      if (v86 != v74)
      {
        uint64_t v87 = *(void *)(v69 + 48);
        if (!*(void *)(v87 + 8 * v86))
        {
          *(void *)(v87 + 8 * v86) = v73;
          goto LABEL_132;
        }
        *uint64_t v73 = *v84;
        uint64_t v85 = 8 * v86;
        *double v84 = **(void **)(*(void *)(v69 + 48) + v85);
        **(void **)(*(void *)(v69 + 48) + v85) = v84;
        double v84 = v73;
      }
      size_t v86 = v74;
LABEL_132:
      uint64_t v73 = v84;
      double v84 = (void *)*v84;
      size_t v74 = v86;
      if (!v84) {
        goto LABEL_127;
      }
    }
  }
LABEL_141:
  uint64_t v88 = *(void *)(v181 + 48);
  double v89 = *(void **)(v88 + 8 * v14);
  if (v89)
  {
    *double v60 = *v89;
    uint64_t v90 = v181;
  }
  else
  {
    *double v60 = *v177;
    *double v177 = v60;
    *(void *)(v88 + 8 * v14) = v177;
    uint64_t v90 = v181;
    if (!*v60) {
      goto LABEL_150;
    }
    unint64_t v91 = *(void *)(*v60 + 8);
    if ((v50 & (v50 - 1)) != 0)
    {
      if (v91 >= v50) {
        v91 %= v50;
      }
    }
    else
    {
      v91 &= v50 - 1;
    }
    double v89 = (void *)(*(void *)(v181 + 48) + 8 * v91);
  }
  *double v89 = v60;
LABEL_150:
  ++*(void *)(v90 + 72);
LABEL_151:
  uint64_t v174 = v4;
  double v92 = (char *)v60[3];
  unint64_t v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v176 + 184) - *(void *)(v176 + 176)) >> 3);
  uint64_t v180 = (void **)(v60 + 3);
  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v60[5] - (void)v92) >> 3) < v93)
  {
    if (v93 > 0x186186186186186) {
LABEL_240:
    }
      abort();
    uint64_t v94 = (unsigned char *)v60[4];
    size_t v95 = 56 * ((uint64_t)(*(void *)(v176 + 184) - *(void *)(v176 + 176)) >> 3);
    double v96 = (char *)operator new(v95);
    uint64_t v97 = &v96[v95];
    double v98 = &v96[v94 - v92];
    if (v94 == v92)
    {
      v60[3] = v98;
      v60[4] = v98;
      v60[5] = v97;
    }
    else
    {
      uint64_t v99 = 0;
      do
      {
        uint64_t v100 = &v98[v99];
        uint64_t v101 = &v94[v99];
        long long v102 = *(_OWORD *)&v94[v99 - 168];
        long long v103 = *(_OWORD *)&v94[v99 - 152];
        *(_OWORD *)(v100 - 136) = *(_OWORD *)&v94[v99 - 136];
        *(_OWORD *)(v100 - 152) = v103;
        *(_OWORD *)(v100 - 168) = v102;
        long long v104 = *(_OWORD *)&v94[v99 - 120];
        long long v105 = *(_OWORD *)&v94[v99 - 104];
        long long v106 = *(_OWORD *)&v94[v99 - 88];
        *((void *)v100 - 9) = *(void *)&v94[v99 - 72];
        *(_OWORD *)(v100 - 88) = v106;
        *(_OWORD *)(v100 - 104) = v105;
        *(_OWORD *)(v100 - 120) = v104;
        *(v100 - 64) = 0;
        *(v100 - 40) = 0;
        if (v94[v99 - 40])
        {
          *((_OWORD *)v100 - 4) = *((_OWORD *)v101 - 4);
          *((void *)v100 - 6) = *((void *)v101 - 6);
          *((void *)v101 - 8) = 0;
          *((void *)v101 - 7) = 0;
          *((void *)v101 - 6) = 0;
          *(v100 - 40) = 1;
        }
        *(v100 - 32) = 0;
        *(v100 - 8) = 0;
        if (*(v101 - 8))
        {
          size_t v107 = &v94[v99];
          *((_OWORD *)v100 - 2) = *(_OWORD *)&v94[v99 - 32];
          *(void *)&v98[v99 - 16] = *(void *)&v94[v99 - 16];
          *((void *)v107 - 4) = 0;
          *((void *)v107 - 3) = 0;
          *((void *)v107 - 2) = 0;
          *(v100 - 8) = 1;
        }
        v99 -= 168;
      }
      while (&v94[v99] != v92);
      double v92 = (char *)v60[3];
      BOOL v108 = (char *)v60[4];
      v60[3] = &v98[v99];
      v60[4] = v98;
      v60[5] = v97;
      while (v108 != v92)
      {
        if (*(v108 - 8))
        {
          uint64_t v109 = (void *)*((void *)v108 - 4);
          if (v109)
          {
            *((void *)v108 - 3) = v109;
            operator delete(v109);
          }
        }
        if (*(v108 - 40))
        {
          uint64_t v110 = (void *)*((void *)v108 - 8);
          if (v110)
          {
            *((void *)v108 - 7) = v110;
            operator delete(v110);
          }
        }
        v108 -= 168;
      }
    }
    if (v92) {
      operator delete(v92);
    }
  }
  uint64_t v111 = *(float ***)(v176 + 176);
  for (j = *(float ***)(v176 + 184); v111 != j; v111 += 3)
  {
    long long v183 = xmmword_1A28FF1B0;
    long long v184 = xmmword_1A28FF1B0;
    long long v185 = xmmword_1A28FF1B0;
    long long v186 = xmmword_1A28FF1B0;
    long long v187 = xmmword_1A28FF1B0;
    long long v188 = xmmword_1A28FF1B0;
    unint64_t v189 = 0xFF7FFFFF7F7FFFFFLL;
    uint64_t v135 = *v111;
    uint64_t v136 = v111[1];
    if (*v111 != v136)
    {
      do
      {
        uint64_t v137 = 0;
        float v138 = v135[1];
        float v139 = v135[2];
        float v140 = (float)((float)(v45 + (float)(*v135 * v182)) + (float)(v138 * v43)) + (float)(v139 * v44);
        float32x2_t v141 = vmla_n_f32(vmla_n_f32(vmla_n_f32(v49, v46, *v135), v47, v138), v48, v139);
        uint64_t v142 = (float *)&v183 + 1;
        do
        {
          long long v196 = xmmword_1A28FCEA0;
          long long v197 = xmmword_1A28FCEA0;
          long long v198 = xmmword_1A28FCFB0;
          long long v199 = xmmword_1A28FCFC0;
          long long v200 = xmmword_1A28FCFD0;
          long long v201 = xmmword_1A28FCFE0;
          long long v202 = xmmword_1A28FCFF0;
          long long v203 = xmmword_1A28FD000;
          long long v204 = xmmword_1A28FD010;
          uint64_t v205 = 0x3E8483EDBF7746EDLL;
          int v206 = 0;
          float32x2_t v143 = vmul_f32(*(float32x2_t *)((char *)&v196 + v137 + 4), v141);
          float v144 = (float)(v143.f32[0] + (float)(*(float *)((char *)&v196 + v137) * v140)) + v143.f32[1];
          *(v142 - 1) = fminf(v144, *(v142 - 1));
          *uint64_t v142 = fmaxf(*v142, v144);
          v142 += 2;
          v137 += 12;
        }
        while (v137 != 156);
        v135 += 3;
      }
      while (v135 != v136);
    }
    uint64_t v146 = (long long *)v60[4];
    unint64_t v145 = v60[5];
    if ((unint64_t)v146 < v145)
    {
      long long v131 = v188;
      v146[4] = v187;
      v146[5] = v131;
      *((void *)v146 + 12) = v189;
      long long v132 = v184;
      *uint64_t v146 = v183;
      v146[1] = v132;
      long long v133 = v186;
      v146[2] = v185;
      void v146[3] = v133;
      *((unsigned char *)v146 + 104) = 0;
      *((unsigned char *)v146 + 128) = 0;
      *((unsigned char *)v146 + 136) = 0;
      uint64_t v134 = (char *)v146 + 168;
      *((unsigned char *)v146 + 160) = 0;
    }
    else
    {
      uint64_t v147 = (long long *)*v180;
      unint64_t v148 = 0xCF3CF3CF3CF3CF3DLL * (((char *)v146 - (unsigned char *)*v180) >> 3);
      unint64_t v149 = v148 + 1;
      if (v148 + 1 > 0x186186186186186) {
        goto LABEL_240;
      }
      unint64_t v150 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v145 - (void)v147) >> 3);
      if (2 * v150 > v149) {
        unint64_t v149 = 2 * v150;
      }
      if (v150 >= 0xC30C30C30C30C3) {
        unint64_t v151 = 0x186186186186186;
      }
      else {
        unint64_t v151 = v149;
      }
      if (v151 > 0x186186186186186) {
        goto LABEL_241;
      }
      uint64_t v152 = 168 * v151;
      uint64_t v153 = (char *)operator new(168 * v151);
      long long v154 = v188;
      unint64_t v155 = &v153[168 * v148];
      long long v156 = &v153[v152];
      *((_OWORD *)v155 + 4) = v187;
      *((_OWORD *)v155 + 5) = v154;
      *((void *)v155 + 12) = v189;
      long long v157 = v184;
      *(_OWORD *)unint64_t v155 = v183;
      *((_OWORD *)v155 + 1) = v157;
      long long v158 = v186;
      *((_OWORD *)v155 + 2) = v185;
      *((_OWORD *)v155 + 3) = v158;
      v155[104] = 0;
      v155[128] = 0;
      v155[136] = 0;
      uint64_t v134 = v155 + 168;
      v155[160] = 0;
      if (v146 == v147)
      {
        v60[3] = v155;
        v60[4] = v134;
        v60[5] = v156;
      }
      else
      {
        uint64_t v159 = 0;
        do
        {
          long long v160 = &v155[v159];
          float v161 = (char *)v146 + v159;
          long long v162 = *(long long *)((char *)v146 + v159 - 168);
          long long v163 = *(long long *)((char *)v146 + v159 - 152);
          *(_OWORD *)(v160 - 136) = *(long long *)((char *)v146 + v159 - 136);
          *(_OWORD *)(v160 - 152) = v163;
          *(_OWORD *)(v160 - 168) = v162;
          long long v164 = *(long long *)((char *)v146 + v159 - 120);
          long long v165 = *(long long *)((char *)v146 + v159 - 104);
          long long v166 = *(long long *)((char *)v146 + v159 - 88);
          *((void *)v160 - 9) = *(void *)((char *)v146 + v159 - 72);
          *(_OWORD *)(v160 - 88) = v166;
          *(_OWORD *)(v160 - 104) = v165;
          *(_OWORD *)(v160 - 120) = v164;
          *(v160 - 64) = 0;
          *(v160 - 40) = 0;
          if (*((unsigned char *)v146 + v159 - 40))
          {
            *((_OWORD *)v160 - 4) = *((_OWORD *)v161 - 4);
            *((void *)v160 - 6) = *((void *)v161 - 6);
            *((void *)v161 - 8) = 0;
            *((void *)v161 - 7) = 0;
            *((void *)v161 - 6) = 0;
            *(v160 - 40) = 1;
          }
          *(v160 - 32) = 0;
          *(v160 - 8) = 0;
          if (*(v161 - 8))
          {
            long long v167 = (char *)v146 + v159;
            *((_OWORD *)v160 - 2) = *(long long *)((char *)v146 + v159 - 32);
            *(void *)&v155[v159 - 16] = *(void *)((char *)v146 + v159 - 16);
            *((void *)v167 - 4) = 0;
            *((void *)v167 - 3) = 0;
            *((void *)v167 - 2) = 0;
            *(v160 - 8) = 1;
          }
          v159 -= 168;
        }
        while ((long long *)((char *)v146 + v159) != v147);
        uint64_t v146 = (long long *)v60[3];
        uint64_t v168 = (long long *)v60[4];
        v60[3] = &v155[v159];
        v60[4] = v134;
        v60[5] = v156;
        while (v168 != v146)
        {
          if (*((unsigned char *)v168 - 8))
          {
            float64x2_t v169 = (void *)*((void *)v168 - 4);
            if (v169)
            {
              *((void *)v168 - 3) = v169;
              operator delete(v169);
            }
          }
          if (*((unsigned char *)v168 - 40))
          {
            float64x2_t v170 = (void *)*((void *)v168 - 8);
            if (v170)
            {
              *((void *)v168 - 7) = v170;
              operator delete(v170);
            }
          }
          uint64_t v168 = (long long *)((char *)v168 - 168);
        }
      }
      if (v146) {
        operator delete(v146);
      }
    }
    v60[4] = v134;
  }
  uint64_t v58 = a4;
  BOOL v4 = v174;
  uint64_t v12 = v175;
LABEL_174:
  *(void *)&long long v196 = v176;
  uint64_t v113 = *(void *)(v58 + 24);
  if (!v113)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    long long v173 = v172;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Entity,std::vector<arComponents::LocalBounds>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Entity,std::vector<arComponents::LocalBounds>>,void *>>>>::reset[abi:nn180100]((uint64_t)&v196);
    _Unwind_Resume(v173);
  }
  __n128 result = (*(uint64_t (**)(uint64_t, long long *, void **))(*(void *)v113 + 48))(v113, &v196, v180);
  if (result) {
    goto LABEL_176;
  }
  return result;
}

void *std::function<BOOL ()(md::ARAssetOcclusionMeshData const*,std::vector<arComponents::LocalBounds> const&)>::~function(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<gdc::Entity,std::vector<arComponents::LocalBounds>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gdc::Entity,std::vector<arComponents::LocalBounds>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v2 = v1[3];
      if (v2)
      {
        uint64_t v3 = v1[4];
        BOOL v4 = (void *)v1[3];
        if (v3 != v2)
        {
          do
          {
            if (*(unsigned char *)(v3 - 8))
            {
              BOOL v5 = *(void **)(v3 - 32);
              if (v5)
              {
                *(void *)(v3 - 24) = v5;
                operator delete(v5);
              }
            }
            if (*(unsigned char *)(v3 - 40))
            {
              uint64_t v6 = *(void **)(v3 - 64);
              if (v6)
              {
                *(void *)(v3 - 56) = v6;
                operator delete(v6);
              }
            }
            v3 -= 168;
          }
          while (v3 != v2);
          BOOL v4 = (void *)v1[3];
        }
        v1[4] = v2;
        operator delete(v4);
      }
    }
    operator delete(v1);
  }
}

BOOL std::__function::__func<md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_1,std::allocator<md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_1>,BOOL ()(md::ARAssetOcclusionMeshData const*,std::vector<arComponents::LocalBounds> const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  if (*a3 != v4)
  {
    BOOL v5 = *(float **)(a1 + 8);
    float v6 = v5[4];
    float v7 = v5[5];
    float v8 = *v5;
    float v9 = v5[1];
    float v11 = v5[2];
    float v10 = v5[3];
    uint64_t v12 = (int *)(v3 + 4);
LABEL_4:
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = v12;
    do
    {
      long long v32 = xmmword_1A28FCEA0;
      long long v33 = xmmword_1A28FCEA0;
      long long v34 = xmmword_1A28FCFB0;
      long long v35 = xmmword_1A28FCFC0;
      long long v36 = xmmword_1A28FCFD0;
      long long v37 = xmmword_1A28FCFE0;
      long long v38 = xmmword_1A28FCFF0;
      long long v39 = xmmword_1A28FD000;
      long long v40 = xmmword_1A28FD010;
      uint64_t v41 = 0x3E8483EDBF7746EDLL;
      int v42 = 0;
      uint64_t v16 = &v31[v13];
      uint64_t v17 = *(void *)((char *)&v32 + v14);
      v18.i32[0] = *(v15 - 1);
      int v19 = *v15;
      *((_DWORD *)v16 + 2) = *(_DWORD *)((char *)&v32 + v14 + 8);
      *(void *)uint64_t v16 = v17;
      long long v32 = xmmword_1A28FCEA0;
      long long v33 = xmmword_1A28FCEA0;
      long long v34 = xmmword_1A28FCFB0;
      long long v35 = xmmword_1A28FCFC0;
      long long v36 = xmmword_1A28FCFD0;
      long long v37 = xmmword_1A28FCFE0;
      long long v38 = xmmword_1A28FCFF0;
      long long v39 = xmmword_1A28FD000;
      long long v40 = xmmword_1A28FD010;
      uint64_t v41 = 0x3E8483EDBF7746EDLL;
      int v42 = 0;
      v18.i32[1] = *(_DWORD *)((char *)&v32 + v14);
      v18.i64[1] = *(void *)((char *)&v32 + v14 + 4);
      *(float32x4_t *)(v16 + 12) = vnegq_f32(v18);
      *((_DWORD *)v16 + 7) = v19;
      v14 += 12;
      v13 += 32;
      v15 += 2;
    }
    while (v14 != 156);
    uint64_t v20 = 0;
    float v21 = 0.0;
    float v22 = 1.0;
    while (1)
    {
      float v23 = *(float *)&v31[v20];
      float v24 = *(float *)&v31[v20 + 4];
      float v25 = *(float *)&v31[v20 + 8];
      float v26 = (float)((float)(v23 * v10) + (float)(v24 * v6)) + (float)(v25 * v7);
      float v27 = (float)((float)(*(float *)&v31[v20 + 12] + (float)(v23 * v8)) + (float)(v24 * v9)) + (float)(v25 * v11);
      BOOL v28 = v26 <= 0.0;
      if (v26 == 0.0)
      {
        if (v27 < 0.0) {
          goto LABEL_3;
        }
      }
      else
      {
        float v29 = (float)-v27 / v26;
        if (v28)
        {
          float v22 = fminf(v29, v22);
          if (v21 > v22)
          {
LABEL_3:
            v3 += 168;
            v12 += 42;
            if (v3 == v4) {
              return **(unsigned char **)(a1 + 16) == 0;
            }
            goto LABEL_4;
          }
          goto LABEL_13;
        }
        float v21 = fmaxf(v21, v29);
      }
      if (v21 > v22) {
        goto LABEL_3;
      }
LABEL_13:
      v20 += 16;
      if (v20 == 416)
      {
        **(unsigned char **)(a1 + 16) = 1;
        return **(unsigned char **)(a1 + 16) == 0;
      }
    }
  }
  return **(unsigned char **)(a1 + 16) == 0;
}

__n128 std::__function::__func<md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_1,std::allocator<md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_1>,BOOL ()(md::ARAssetOcclusionMeshData const*,std::vector<arComponents::LocalBounds> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57DBD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_1,std::allocator<md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_1>,BOOL ()(md::ARAssetOcclusionMeshData const*,std::vector<arComponents::LocalBounds> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF57DBD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_1,std::allocator<md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_1>,BOOL ()(md::ARAssetOcclusionMeshData const*,std::vector<arComponents::LocalBounds> const&)>::~__func()
{
}

double *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_0 &,std::pair<md::ARBuildingTileData *,double> *>(double *result, double *a2, double *a3, double *a4)
{
  double v4 = a2[1];
  double v5 = result[1];
  double v6 = a3[1];
  if (v4 >= v5)
  {
    if (v6 >= v4)
    {
      double v4 = a3[1];
    }
    else
    {
      double v8 = *a2;
      *a2 = *a3;
      *a3 = v8;
      a2[1] = v6;
      a3[1] = v4;
      double v9 = a2[1];
      double v10 = result[1];
      if (v9 < v10)
      {
        double v11 = *result;
        *__n128 result = *a2;
        *a2 = v11;
        result[1] = v9;
        a2[1] = v10;
        double v4 = a3[1];
      }
    }
  }
  else
  {
    double v7 = *result;
    if (v6 < v4)
    {
      *__n128 result = *a3;
      *a3 = v7;
      result[1] = v6;
LABEL_9:
      a3[1] = v5;
      double v4 = v5;
      goto LABEL_11;
    }
    *__n128 result = *a2;
    *a2 = v7;
    result[1] = v4;
    a2[1] = v5;
    double v4 = a3[1];
    if (v4 < v5)
    {
      *a2 = *a3;
      *a3 = v7;
      a2[1] = v4;
      goto LABEL_9;
    }
  }
LABEL_11:
  double v12 = a4[1];
  if (v12 < v4)
  {
    double v13 = *a3;
    *a3 = *a4;
    *a4 = v13;
    a3[1] = v12;
    a4[1] = v4;
    double v14 = a3[1];
    double v15 = a2[1];
    if (v14 < v15)
    {
      double v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      a2[1] = v14;
      a3[1] = v15;
      double v17 = a2[1];
      double v18 = result[1];
      if (v17 < v18)
      {
        double v19 = *result;
        *__n128 result = *a2;
        *a2 = v19;
        result[1] = v17;
        a2[1] = v18;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_0 &,std::pair<md::ARBuildingTileData *,double> *>(double *a1, double *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v6 = *(a2 - 1);
      double v7 = a1[1];
      if (v6 < v7)
      {
        double v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      double v9 = a1[3];
      double v10 = a1[1];
      double v11 = *(a2 - 1);
      if (v9 >= v10)
      {
        if (v11 < v9)
        {
          uint64_t v30 = *((void *)a1 + 2);
          a1[2] = *(a2 - 2);
          *((void *)a2 - 2) = v30;
          a1[3] = v11;
          *(a2 - 1) = v9;
          double v31 = a1[3];
          double v32 = a1[1];
          if (v31 < v32)
          {
            uint64_t v33 = *(void *)a1;
            *a1 = a1[2];
            *((void *)a1 + 2) = v33;
            a1[1] = v31;
            a1[3] = v32;
          }
        }
      }
      else
      {
        uint64_t v12 = *(void *)a1;
        if (v11 >= v9)
        {
          *a1 = a1[2];
          *((void *)a1 + 2) = v12;
          a1[1] = v9;
          a1[3] = v10;
          double v37 = *(a2 - 1);
          if (v37 < v10)
          {
            a1[2] = *(a2 - 2);
            *((void *)a2 - 2) = v12;
            a1[3] = v37;
            *(a2 - 1) = v10;
          }
        }
        else
        {
          *a1 = *(a2 - 2);
          *((void *)a2 - 2) = v12;
          a1[1] = v11;
          *(a2 - 1) = v10;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_0 &,std::pair<md::ARBuildingTileData *,double> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_0 &,std::pair<md::ARBuildingTileData *,double> *>(a1, a1 + 2, a1 + 4, a1 + 6);
      double v19 = *(a2 - 1);
      double v20 = a1[7];
      if (v19 < v20)
      {
        uint64_t v21 = *((void *)a1 + 6);
        a1[6] = *(a2 - 2);
        *((void *)a2 - 2) = v21;
        a1[7] = v19;
        *(a2 - 1) = v20;
        double v22 = a1[7];
        double v23 = a1[5];
        if (v22 < v23)
        {
          uint64_t v24 = *((void *)a1 + 4);
          uint64_t v25 = *((void *)a1 + 6);
          *((void *)a1 + 4) = v25;
          *((void *)a1 + 6) = v24;
          a1[5] = v22;
          a1[7] = v23;
          double v26 = a1[3];
          if (v22 < v26)
          {
            uint64_t v27 = *((void *)a1 + 2);
            *((void *)a1 + 2) = v25;
            *((void *)a1 + 4) = v27;
            a1[3] = v22;
            a1[5] = v26;
            double v28 = a1[1];
            if (v22 < v28)
            {
              double v29 = *a1;
              *(void *)a1 = v25;
              a1[2] = v29;
              a1[1] = v22;
              a1[3] = v28;
            }
          }
        }
      }
      return 1;
    default:
      double v13 = a1[1];
      double v14 = a1 + 3;
      double v15 = a1[3];
      double v16 = a1[5];
      if (v15 < v13)
      {
        double v17 = *a1;
        if (v16 >= v15)
        {
          *a1 = a1[2];
          a1[2] = v17;
          a1[1] = v15;
          a1[3] = v13;
          if (v16 >= v13) {
            goto LABEL_28;
          }
          a1[2] = a1[4];
          a1[4] = v17;
          double v18 = a1 + 3;
        }
        else
        {
          *a1 = a1[4];
          a1[4] = v17;
          double v18 = a1 + 1;
        }
        double v14 = a1 + 5;
        goto LABEL_27;
      }
      if (v16 < v15)
      {
        uint64_t v34 = *((void *)a1 + 2);
        uint64_t v35 = *((void *)a1 + 4);
        *((void *)a1 + 2) = v35;
        *((void *)a1 + 4) = v34;
        a1[3] = v16;
        a1[5] = v15;
        if (v16 < v13)
        {
          double v36 = *a1;
          *(void *)a1 = v35;
          a1[2] = v36;
          double v18 = a1 + 1;
LABEL_27:
          *double v18 = v16;
          *double v14 = v13;
        }
      }
LABEL_28:
      long long v38 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v39 = 0;
      int v40 = 0;
      uint64_t v41 = a1 + 4;
      while (1)
      {
        double v43 = v38[1];
        if (v43 < v41[1])
        {
          uint64_t v44 = *(void *)v38;
          uint64_t v45 = v39;
          do
          {
            float32x2_t v46 = (double *)((char *)a1 + v45);
            v46[6] = *(double *)((char *)a1 + v45 + 32);
            v46[7] = *(double *)((char *)a1 + v45 + 40);
            if (v45 == -32)
            {
              uint64_t v42 = (uint64_t)a1;
              goto LABEL_31;
            }
            v45 -= 16;
          }
          while (v43 < v46[3]);
          uint64_t v42 = (uint64_t)a1 + v45 + 48;
LABEL_31:
          *(void *)uint64_t v42 = v44;
          *(double *)(v42 + 8) = v43;
          if (++v40 == 8) {
            return v38 + 2 == a2;
          }
        }
        uint64_t v41 = v38;
        v39 += 16;
        v38 += 2;
        if (v38 == a2) {
          return 1;
        }
      }
  }
}

void md::ARWorldIntersector::resolveWorldPoint(void *a1, long long *a2)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  long long v86 = *a2;
  uint64_t v87 = *((void *)a2 + 2);
  unint64_t v3 = a1[2];
  if (v3)
  {
    if (v3 >> 61) {
      abort();
    }
    uint64_t v4 = 8 * v3;
    double v5 = (char *)operator new(8 * v3);
    double v6 = &v5[v4];
  }
  else
  {
    double v6 = 0;
    double v5 = 0;
  }
  double v7 = (void *)*a1;
  if ((void *)*a1 == a1 + 1)
  {
LABEL_95:
    if (!v5) {
      return;
    }
    goto LABEL_96;
  }
  double v8 = v5;
  do
  {
    uint64_t v9 = v7[4];
    double v10 = *(void **)(v9 + 784);
    int8x8_t v11 = (int8x8_t)v10[1];
    if (!*(void *)&v11) {
      goto LABEL_31;
    }
    uint8x8_t v12 = (uint8x8_t)vcnt_s8(v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      uint64_t v13 = 0x64A448A5CD5D38DBLL;
      if (*(void *)&v11 <= 0x64A448A5CD5D38DBuLL) {
        uint64_t v13 = 0x64A448A5CD5D38DBuLL % *(void *)&v11;
      }
    }
    else
    {
      uint64_t v13 = (*(void *)&v11 - 1) & 0x64A448A5CD5D38DBLL;
    }
    double v14 = *(void **)(*v10 + 8 * v13);
    if (!v14 || (double v15 = (void *)*v14) == 0)
    {
LABEL_31:
      double v20 = 0;
      goto LABEL_32;
    }
    if (v12.u32[0] < 2uLL)
    {
      uint64_t v16 = *(void *)&v11 - 1;
      while (1)
      {
        uint64_t v18 = v15[1];
        if (v18 == 0x64A448A5CD5D38DBLL)
        {
          if (v15[2] == 0x64A448A5CD5D38DBLL) {
            goto LABEL_29;
          }
        }
        else if ((v18 & v16) != v13)
        {
          goto LABEL_31;
        }
        double v15 = (void *)*v15;
        if (!v15) {
          goto LABEL_31;
        }
      }
    }
    while (1)
    {
      unint64_t v17 = v15[1];
      if (v17 == 0x64A448A5CD5D38DBLL) {
        break;
      }
      if (v17 >= *(void *)&v11) {
        v17 %= *(void *)&v11;
      }
      if (v17 != v13) {
        goto LABEL_31;
      }
LABEL_18:
      double v15 = (void *)*v15;
      if (!v15) {
        goto LABEL_31;
      }
    }
    if (v15[2] != 0x64A448A5CD5D38DBLL) {
      goto LABEL_18;
    }
LABEL_29:
    uint64_t v19 = v15[5];
    if (*(void *)(v19 + 8) != 0x64A448A5CD5D38DBLL) {
      goto LABEL_31;
    }
    double v20 = *(double **)(v19 + 32);
LABEL_32:
    if (*(double *)a2 < v20[16]
      || *(double *)a2 >= v20[19]
      || (double v21 = *((double *)a2 + 1), v21 < v20[17])
      || v21 >= v20[20]
      || (double v22 = *((double *)a2 + 2), v22 < v20[18])
      || v22 >= v20[21])
    {
LABEL_40:
      double v23 = (void *)v7[1];
      if (!v23) {
        goto LABEL_60;
      }
      do
      {
LABEL_41:
        uint64_t v24 = v23;
        double v23 = (void *)*v23;
      }
      while (v23);
      goto LABEL_7;
    }
    if (v8 < v6)
    {
      *(void *)double v8 = v9;
      v8 += 8;
      goto LABEL_40;
    }
    int64_t v25 = v8 - v5;
    uint64_t v26 = (v8 - v5) >> 3;
    unint64_t v27 = v26 + 1;
    long long __p = v5;
    if ((unint64_t)(v26 + 1) >> 61) {
      abort();
    }
    if ((v6 - v5) >> 2 > v27) {
      unint64_t v27 = (v6 - v5) >> 2;
    }
    if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v28 = v27;
    }
    if (v28)
    {
      if (v28 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      double v29 = (char *)operator new(8 * v28);
      uint64_t v30 = v8;
    }
    else
    {
      uint64_t v30 = v8;
      double v29 = 0;
    }
    double v5 = &v29[8 * v26];
    *(void *)double v5 = v9;
    double v8 = v5 + 8;
    double v31 = __p;
    if (v30 != __p)
    {
      double v32 = v30;
      uint64_t v33 = v30 - 8;
      unint64_t v34 = v30 - 8 - __p;
      if (v34 < 0x168
        || &v29[v25 - 8 - (v34 & 0xFFFFFFFFFFFFFFF8)] > &v29[v25 - 8]
        || &v33[-(v34 & 0xFFFFFFFFFFFFFFF8)] > v33
        || (unint64_t)(v33 - &v29[v25] + 8) < 0x20)
      {
        uint64_t v35 = v32;
        double v31 = __p;
      }
      else
      {
        uint64_t v38 = (v34 >> 3) + 1;
        uint64_t v35 = &v32[-8 * (v38 & 0x3FFFFFFFFFFFFFFCLL)];
        uint64_t v39 = &v29[8 * v26 - 16];
        int v40 = v32 - 16;
        uint64_t v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
        double v31 = __p;
        do
        {
          long long v42 = *(_OWORD *)v40;
          *((_OWORD *)v39 - 1) = *((_OWORD *)v40 - 1);
          *(_OWORD *)uint64_t v39 = v42;
          v39 -= 32;
          v40 -= 32;
          v41 -= 4;
        }
        while (v41);
        v5 -= 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
        if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_57;
        }
      }
      do
      {
        uint64_t v36 = *((void *)v35 - 1);
        v35 -= 8;
        *((void *)v5 - 1) = v36;
        v5 -= 8;
      }
      while (v35 != v31);
    }
LABEL_57:
    double v6 = &v29[8 * v28];
    if (v31) {
      operator delete(v31);
    }
    double v23 = (void *)v7[1];
    if (v23) {
      goto LABEL_41;
    }
    do
    {
LABEL_60:
      uint64_t v24 = (void *)v7[2];
      BOOL v37 = *v24 == (void)v7;
      double v7 = v24;
    }
    while (!v37);
LABEL_7:
    double v7 = v24;
  }
  while (v24 != a1 + 1);
  *(_OWORD *)uint64_t v83 = 0u;
  *(_OWORD *)double v84 = 0u;
  int v85 = 1065353216;
  if (v5 != v8)
  {
    __pa = v5;
    double v43 = (uint64_t *)v5;
    do
    {
      uint64_t v44 = *(int8x8_t **)(*v43 + 784);
      uint64_t v82 = 0;
      unint64_t v45 = (unint64_t)v44[1];
      if ((v45 & (v45 - 1)) != 0)
      {
        unint64_t v48 = 0x64A448A5CD5D38DBLL;
        if (v45 <= 0x64A448A5CD5D38DBLL) {
          unint64_t v48 = 0x64A448A5CD5D38DBLL % v45;
        }
        float32x2_t v46 = v8;
        float32x2_t v47 = *(void **)(*(void *)v44 + 8 * v48);
        do
        {
          do
            float32x2_t v47 = (void *)*v47;
          while (v47[1] != 0x64A448A5CD5D38DBLL);
        }
        while (v47[2] != 0x64A448A5CD5D38DBLL);
      }
      else
      {
        float32x2_t v46 = v8;
        float32x2_t v47 = *(void **)(*(void *)v44 + 8 * ((v45 - 1) & 0x64A448A5CD5D38DBLL));
        do
        {
          do
            float32x2_t v47 = (void *)*v47;
          while (v47[1] != 0x64A448A5CD5D38DBLL);
        }
        while (v47[2] != 0x64A448A5CD5D38DBLL);
      }
      uint64_t v49 = *(void *)(v47[5] + 32);
      uint64_t v82 = v49;
      char v50 = *(unsigned char *)(v49 + 1);
      double v51 = (double)(1 << v50);
      double v52 = (double)((1 << v50) + ~*(_DWORD *)(v49 + 4));
      long double v53 = exp(1.0 / v51 * 6.28318531 * (v52 + 0.5) + -3.14159265);
      long double v54 = atan(v53) * 114.591559 + -90.0;
      long double v55 = cos(v54 * 0.034906585) * -559.82 + 111132.92;
      long double v56 = v55 + cos(v54 * 0.0698131701) * 1.175;
      long double v57 = v56 + cos(v54 * 0.104719755) * -0.0023;
      long double v58 = v54 * 0.00872664626;
      long double v59 = tan(v54 * 0.00872664626 + 0.78103484);
      double v60 = log(v59);
      long double v61 = tan(v58 + 0.789761487);
      long double v62 = fabs((log(v61) - v60) * 0.159154943) / (v57 * (1.0 / v51));
      __powidf2();
      float v63 = v62;
      float v81 = v63;
      float v64 = (*(double *)a2 - 1.0 / v51 * (double)*(int *)(v49 + 8)) * v51;
      float v65 = (*((double *)a2 + 1) - 1.0 / v51 * v52) * v51;
      float v66 = *((double *)a2 + 2) * 40075017.0;
      *(float *)uint64_t v80 = v64;
      *(float *)&v80[1] = v65;
      *(float *)&double v67 = v67 * (0.0000000249532021 * v66);
      v80[2] = LODWORD(v67);
      v79[0] = v80;
      v79[1] = &v81;
      v79[2] = &v86;
      v79[3] = &v82;
      uint64_t v68 = *v43;
      v88[0] = &unk_1EF57DB90;
      v88[1] = v79;
      double v89 = v88;
      md::ARWorldIntersector::visitReferencedAssetOcclusionVolumes((uint64_t)a1, v68, (uint64_t)v83, (uint64_t)v88);
      if (v89 == v88)
      {
        (*(void (**)(void *))(v88[0] + 32))(v88);
      }
      else if (v89)
      {
        (*(void (**)(void))(*v89 + 40))();
      }
      uint64_t v69 = (void *)gdc::Registry::storage<arComponents::LocalBounds>(v44);
      uint64_t v70 = v69[7];
      uint64_t v71 = v69[8];
      if (v70 != v71)
      {
        uint64_t v72 = v69[10];
        do
        {
          md::ARWorldIntersector::resolveWorldPoint(gm::Matrix<double,3,1> const&)const::$_0::operator()((uint64_t)v79, v72);
          v72 += 168;
          v70 += 8;
        }
        while (v70 != v71);
      }
      ++v43;
      double v8 = v46;
    }
    while (v43 != (uint64_t *)v46);
    uint64_t v73 = v84[0];
    if (v84[0])
    {
      do
      {
        size_t v74 = (void *)*v73;
        operator delete(v73);
        uint64_t v73 = v74;
      }
      while (v74);
    }
    size_t v75 = v83[0];
    v83[0] = 0;
    double v5 = __pa;
    if (v75) {
      operator delete(v75);
    }
    goto LABEL_95;
  }
  double v5 = v8;
  if (v8) {
LABEL_96:
  }
    operator delete(v5);
}

void sub_1A278BDC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float64x2_t md::ARWorldIntersector::resolveWorldPoint(gm::Matrix<double,3,1> const&)const::$_0::operator()(uint64_t a1, uint64_t a2)
{
  BOOL v2 = 0;
  unint64_t v3 = 0;
  LODWORD(result.f64[0]) = **(_DWORD **)a1;
  float32x2_t v5 = *(float32x2_t *)(*(void *)a1 + 4);
  double v6 = (float *)(a2 + 4);
  float v7 = 1.0;
  float v8 = 0.86602;
  float v9 = 0.70711;
  float v10 = 0.0;
  int8x8_t v11 = (float32x2_t *)((char *)v45 + 4);
  do
  {
    v45[0] = xmmword_1A28FCEA0;
    v45[1] = xmmword_1A28FCEA0;
    v45[2] = xmmword_1A28FCFB0;
    v45[3] = xmmword_1A28FCFC0;
    v45[4] = xmmword_1A28FCFD0;
    v45[5] = xmmword_1A28FCFE0;
    v45[6] = xmmword_1A28FCFF0;
    v45[7] = xmmword_1A28FD000;
    v45[8] = xmmword_1A28FD010;
    uint64_t v46 = 0x3E8483EDBF7746EDLL;
    int v47 = 0;
    float32x2_t v12 = vmul_f32(v5, *v11);
    float v13 = (float)(v12.f32[0] + (float)(*(float *)result.f64 * v11[-1].f32[1])) + v12.f32[1];
    if ((float)(v13 - *(v6 - 1)) < 0.0) {
      break;
    }
    if ((float)(v13 - *v6) > 0.0) {
      break;
    }
    BOOL v2 = v3 > 0xB;
    v6 += 2;
    int8x8_t v11 = (float32x2_t *)((char *)v11 + 12);
    ++v3;
  }
  while (v3 != 13);
  if (v2)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = (int *)(a2 + 4);
    do
    {
      long long v48 = xmmword_1A28FCEA0;
      long long v49 = xmmword_1A28FCEA0;
      long long v50 = xmmword_1A28FCFB0;
      long long v51 = xmmword_1A28FCFC0;
      long long v52 = xmmword_1A28FCFD0;
      long long v53 = xmmword_1A28FCFE0;
      long long v54 = xmmword_1A28FCFF0;
      long long v55 = xmmword_1A28FD000;
      long long v56 = xmmword_1A28FD010;
      uint64_t v57 = 0x3E8483EDBF7746EDLL;
      int v58 = 0;
      unint64_t v17 = &v45[v14];
      uint64_t v18 = *(void *)((char *)&v48 + v15);
      v19.i32[0] = *(v16 - 1);
      int v20 = *v16;
      *((_DWORD *)v17 + 2) = *(_DWORD *)((char *)&v48 + v15 + 8);
      *(void *)unint64_t v17 = v18;
      long long v48 = xmmword_1A28FCEA0;
      long long v49 = xmmword_1A28FCEA0;
      long long v50 = xmmword_1A28FCFB0;
      long long v51 = xmmword_1A28FCFC0;
      long long v52 = xmmword_1A28FCFD0;
      long long v53 = xmmword_1A28FCFE0;
      long long v54 = xmmword_1A28FCFF0;
      long long v55 = xmmword_1A28FD000;
      long long v56 = xmmword_1A28FD010;
      uint64_t v57 = 0x3E8483EDBF7746EDLL;
      int v58 = 0;
      v19.i32[1] = *(_DWORD *)((char *)&v48 + v15);
      v19.i64[1] = *(void *)((char *)&v48 + v15 + 4);
      *(float32x4_t *)((char *)v17 + 12) = vnegq_f32(v19);
      *((_DWORD *)v17 + 7) = v20;
      v15 += 12;
      v14 += 2;
      v16 += 2;
    }
    while (v15 != 156);
    uint64_t v21 = 0;
    float v22 = v5.f32[1];
    float v23 = 3.4028e38;
    do
    {
      float v24 = *(float *)&v45[v21];
      float v25 = *((float *)&v45[v21] + 1);
      float v26 = *((float *)&v45[v21] + 2);
      float v27 = sqrtf((float)((float)(v24 * v24) + (float)(v25 * v25)) + (float)(v26 * v26));
      float v28 = fabsf(fabsf(v26 / v27) + -1.0);
      float v29 = (float)((float)((float)(*((float *)&v45[v21] + 3) + (float)(*(float *)result.f64 * v24))
                          + (float)(v5.f32[0] * v25))
                  + (float)(v5.f32[1] * v26))
          / v27;
      if (v28 >= 0.01 && v29 < v23)
      {
        float v9 = *(float *)&v45[v21];
        float v8 = *((float *)&v45[v21] + 1);
        float v7 = *((float *)&v45[v21] + 2);
        float v10 = *((float *)&v45[v21] + 3);
        float v23 = v29;
      }
      ++v21;
    }
    while (v21 != 26);
    if (v23 != 3.4028e38)
    {
      float v31 = 1.0 / sqrtf((float)(v9 * v9) + (float)(v8 * v8));
      float v32 = v31 * v9;
      float v33 = v31 * v8;
      float v34 = (float)(v32 * v9) + (float)(v33 * v8);
      float v35 = 0.0;
      if (fabsf(v34) <= 0.00000011921
        || (float v35 = (float)-(float)((float)((float)(v10 + (float)(*(float *)result.f64 * v9)) + (float)(v5.f32[0] * v8))
                                + (float)(v5.f32[1] * v7))
                / v34,
            v35 <= 0.0))
      {
        float v36 = -**(float **)(a1 + 8);
      }
      else
      {
        float v36 = **(float **)(a1 + 8);
      }
      float v37 = v36 + v35;
      uint64_t v38 = *(float64x2_t **)(a1 + 16);
      uint64_t v39 = **(float64x2_t ***)(a1 + 24);
      double v40 = (float)(*(float *)result.f64 + (float)(v37 * v32));
      double v41 = (float)(v5.f32[0] + (float)(v37 * v33));
      double v42 = v22;
      double v43 = 1.0 / (v39[26].f64[1] + v39[20].f64[1] * v40 + v39[22].f64[1] * v41 + v39[24].f64[1] * v42);
      double v44 = v43 * (v39[26].f64[0] + v39[20].f64[0] * v40 + v39[22].f64[0] * v41 + v39[24].f64[0] * v42);
      float64x2_t result = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v39[25], v39[19], v40), v39[21], v41), v39[23], v42), v43);
      *uint64_t v38 = result;
      v38[1].f64[0] = v44;
    }
  }
  return result;
}

uint64_t std::__function::__func<md::ARWorldIntersector::resolveWorldPoint(gm::Matrix<double,3,1> const&)::$_1,std::allocator<md::ARWorldIntersector::resolveWorldPoint(gm::Matrix<double,3,1> const&)::$_1>,BOOL ()(md::ARAssetOcclusionMeshData const*,std::vector<arComponents::LocalBounds> const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  if (*a3 != v4)
  {
    do
    {
      md::ARWorldIntersector::resolveWorldPoint(gm::Matrix<double,3,1> const&)const::$_0::operator()(*(void *)(a1 + 8), v3);
      v3 += 168;
    }
    while (v3 != v4);
  }
  return 1;
}

uint64_t std::__function::__func<md::ARWorldIntersector::resolveWorldPoint(gm::Matrix<double,3,1> const&)::$_1,std::allocator<md::ARWorldIntersector::resolveWorldPoint(gm::Matrix<double,3,1> const&)::$_1>,BOOL ()(md::ARAssetOcclusionMeshData const*,std::vector<arComponents::LocalBounds> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF57DB90;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::ARWorldIntersector::resolveWorldPoint(gm::Matrix<double,3,1> const&)::$_1,std::allocator<md::ARWorldIntersector::resolveWorldPoint(gm::Matrix<double,3,1> const&)::$_1>,BOOL ()(md::ARAssetOcclusionMeshData const*,std::vector<arComponents::LocalBounds> const&)>::__clone(uint64_t a1)
{
  float64x2_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float64x2_t result = &unk_1EF57DB90;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::ARWorldIntersector::resolveWorldPoint(gm::Matrix<double,3,1> const&)::$_1,std::allocator<md::ARWorldIntersector::resolveWorldPoint(gm::Matrix<double,3,1> const&)::$_1>,BOOL ()(md::ARAssetOcclusionMeshData const*,std::vector<arComponents::LocalBounds> const&)>::~__func()
{
}

void std::__function::__func<md::ARWorldIntersector::visitBuildingBoundingVolumes(std::function<BOOL ()(gm::Box<double,3> const&)>,std::function<void ()(gm::Matrix<double,4,4> const&,arComponents::LocalBounds const&)>)::$_0,std::allocator<md::ARWorldIntersector::visitBuildingBoundingVolumes(std::function<BOOL ()(gm::Box<double,3> const&)>,std::function<void ()(gm::Matrix<double,4,4> const&,arComponents::LocalBounds const&)>)::$_0>,BOOL ()(md::ARAssetOcclusionMeshData const*,std::vector<arComponents::LocalBounds> const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  if (*a3 != v4)
  {
    while (1)
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 24);
      if (!v6) {
        break;
      }
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)v6 + 48))(v6, *(void *)(a1 + 16), v3);
      v3 += 168;
      if (v3 == v4) {
        return;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
    std::__function::__func<md::ARWorldIntersector::visitBuildingBoundingVolumes(std::function<BOOL ()(gm::Box<double,3> const&)>,std::function<void ()(gm::Matrix<double,4,4> const&,arComponents::LocalBounds const&)>)::$_0,std::allocator<md::ARWorldIntersector::visitBuildingBoundingVolumes(std::function<BOOL ()(gm::Box<double,3> const&)>,std::function<void ()(gm::Matrix<double,4,4> const&,arComponents::LocalBounds const&)>)::$_0>,BOOL ()(md::ARAssetOcclusionMeshData const*,std::vector<arComponents::LocalBounds> const&)>::destroy_deallocate(v7);
  }
}

__n128 std::__function::__func<md::ARWorldIntersector::visitBuildingBoundingVolumes(std::function<BOOL ()(gm::Box<double,3> const&)>,std::function<void ()(gm::Matrix<double,4,4> const&,arComponents::LocalBounds const&)>)::$_0,std::allocator<md::ARWorldIntersector::visitBuildingBoundingVolumes(std::function<BOOL ()(gm::Box<double,3> const&)>,std::function<void ()(gm::Matrix<double,4,4> const&,arComponents::LocalBounds const&)>)::$_0>,BOOL ()(md::ARAssetOcclusionMeshData const*,std::vector<arComponents::LocalBounds> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF57DC20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<md::ARWorldIntersector::visitBuildingBoundingVolumes(std::function<BOOL ()(gm::Box<double,3> const&)>,std::function<void ()(gm::Matrix<double,4,4> const&,arComponents::LocalBounds const&)>)::$_0,std::allocator<md::ARWorldIntersector::visitBuildingBoundingVolumes(std::function<BOOL ()(gm::Box<double,3> const&)>,std::function<void ()(gm::Matrix<double,4,4> const&,arComponents::LocalBounds const&)>)::$_0>,BOOL ()(md::ARAssetOcclusionMeshData const*,std::vector<arComponents::LocalBounds> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF57DC20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<md::ARWorldIntersector::visitBuildingBoundingVolumes(std::function<BOOL ()(gm::Box<double,3> const&)>,std::function<void ()(gm::Matrix<double,4,4> const&,arComponents::LocalBounds const&)>)::$_0,std::allocator<md::ARWorldIntersector::visitBuildingBoundingVolumes(std::function<BOOL ()(gm::Box<double,3> const&)>,std::function<void ()(gm::Matrix<double,4,4> const&,arComponents::LocalBounds const&)>)::$_0>,BOOL ()(md::ARAssetOcclusionMeshData const*,std::vector<arComponents::LocalBounds> const&)>::~__func()
{
}

void sub_1A278C650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  os_unfair_lock_unlock(v9);

  _Unwind_Resume(a1);
}

void sub_1A278C754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{
  _Unwind_Resume(a1);
}

void sub_1A278C818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  os_unfair_lock_unlock(v9);

  _Unwind_Resume(a1);
}

void sub_1A278C9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{
  _Unwind_Resume(a1);
}

void sub_1A278CA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  os_unfair_lock_unlock(v9);

  _Unwind_Resume(a1);
}

void sub_1A278CC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a11);
  os_unfair_lock_unlock(v11);

  _Unwind_Resume(a1);
}

void sub_1A278D028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, id a11, char a12, uint64_t a13, char a14)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_1A278D184(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1A278D2E4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1A278D438(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1A278D54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A278D604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A278D6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A278D738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A278D7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A278D838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A278D8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A278D91C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A278D994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A278DA00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A278DA50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A278DAA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A278DB00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A278DB60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A278DFB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  std::function<void ()(void)>::~function((uint64_t *)va2);

  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1A278E170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A278E25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  float v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VKOverlay;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1A278E408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<md::RasterTileOverlayStyle>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581670;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::RasterTileOverlayStyle>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581670;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1A278E678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A278E710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A278E778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A278E7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  float v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)VKRasterTileOverlayProviderData;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1A278E9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A278EA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A278EA84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A278EAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id VKRasterTileOverlayTileLoader()
{
  if (VKRasterTileOverlayTileLoader::onceToken != -1) {
    dispatch_once(&VKRasterTileOverlayTileLoader::onceToken, &__block_literal_global_49938);
  }
  os_log_t v0 = (void *)VKRasterTileOverlayTileLoader::_loader;
  return v0;
}

void md::DaVinciMetaTileData::~DaVinciMetaTileData(md::DaVinciMetaTileData *this)
{
  *(void *)this = &unk_1EF53B800;
  *((void *)this + 79) = &unk_1EF53B840;
  uint64_t v2 = (void *)*((void *)this + 97);
  if (v2)
  {
    *((void *)this + 98) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 94);
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 91);
  if (v4) {
    operator delete(v4);
  }
  md::MapTileData::~MapTileData(this);
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EF53B800;
  *((void *)this + 79) = &unk_1EF53B840;
  uint64_t v2 = (void *)*((void *)this + 97);
  if (v2)
  {
    *((void *)this + 98) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 94);
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 91);
  if (v4) {
    operator delete(v4);
  }
  md::MapTileData::~MapTileData(this);
}

void *geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>::~fast_shared_ptr(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    if ((*v2)-- == 1)
    {
      uint64_t v4 = (std::__shared_weak_count *)v2[3];
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      {
        operator new();
      }
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *a1, 152);
      *a1 = 0;
    }
  }
  return a1;
}

uint64_t std::__split_buffer<md::LabelFeaturePlacementInfo,geo::StdAllocator<md::LabelFeaturePlacementInfo,mdm::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = v2 - 32;
        uint64_t v4 = *(void **)(v2 - 32);
        *(void *)(a1 + 16) = v2 - 32;
        if (!v4) {
          break;
        }
        *(void *)(v2 - 24) = v4;
        operator delete(v4);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 32;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    (*(void (**)(void, void, void))(***(void ***)(a1 + 32) + 40))(**(void **)(a1 + 32), *(void *)a1, *(void *)(a1 + 24) - *(void *)a1);
  }
  return a1;
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  if (*a2) {
    uint64_t v5 = *a2 + 8;
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v6 = *(void *)(v5 + 72);
  uint64_t v7 = v4 + 8;
  if (!v4) {
    uint64_t v7 = 0;
  }
  unint64_t v8 = *(void *)(v7 + 72);
  if (v6 != v8)
  {
    if (v6 <= v8) {
      goto LABEL_8;
    }
LABEL_15:
    if (*a3) {
      uint64_t v11 = *a3 + 8;
    }
    else {
      uint64_t v11 = 0;
    }
    unint64_t v12 = *(void *)(v11 + 72);
    if (v12 == v6)
    {
      if (*(unsigned __int8 *)(v11 + 129) >= *(unsigned __int8 *)(v5 + 129)) {
        goto LABEL_20;
      }
    }
    else if (v12 <= v6)
    {
LABEL_20:
      *__n128 result = 0;
      *__n128 result = *a2;
      *a2 = v4;
      if (*a3) {
        uint64_t v13 = *a3 + 8;
      }
      else {
        uint64_t v13 = 0;
      }
      unint64_t v14 = *(void *)(v13 + 72);
      if (v14 == v8)
      {
        if (*(unsigned __int8 *)(v13 + 129) >= *(unsigned __int8 *)(v7 + 129)) {
          return result;
        }
      }
      else if (v14 <= v8)
      {
        return result;
      }
      *a2 = 0;
      *a2 = *a3;
      *a3 = v4;
      return result;
    }
    *__n128 result = 0;
    *__n128 result = *a3;
    *a3 = v4;
    return result;
  }
  if (*(unsigned __int8 *)(v5 + 129) < *(unsigned __int8 *)(v7 + 129)) {
    goto LABEL_15;
  }
LABEL_8:
  if (*a3) {
    uint64_t v9 = *a3 + 8;
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = *(void *)(v9 + 72);
  if (v10 == v6)
  {
    if (*(unsigned __int8 *)(v9 + 129) >= *(unsigned __int8 *)(v5 + 129)) {
      return result;
    }
  }
  else if (v10 <= v6)
  {
    return result;
  }
  *a2 = 0;
  *a2 = *a3;
  *a3 = v3;
  uint64_t v15 = *result;
  if (*a2) {
    uint64_t v16 = *a2 + 8;
  }
  else {
    uint64_t v16 = 0;
  }
  unint64_t v17 = *(void *)(v16 + 72);
  uint64_t v18 = v15 + 8;
  if (!v15) {
    uint64_t v18 = 0;
  }
  unint64_t v19 = *(void *)(v18 + 72);
  if (v17 != v19)
  {
    if (v17 <= v19) {
      return result;
    }
    goto LABEL_40;
  }
  if (*(unsigned __int8 *)(v16 + 129) < *(unsigned __int8 *)(v18 + 129))
  {
LABEL_40:
    *__n128 result = 0;
    *__n128 result = *a2;
    *a2 = v15;
  }
  return result;
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  __n128 result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*>(a1, a2, a3);
  uint64_t v9 = *a3;
  if (*a4) {
    uint64_t v10 = *a4 + 8;
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = *(void *)(v10 + 72);
  uint64_t v12 = v9 + 8;
  if (!v9) {
    uint64_t v12 = 0;
  }
  unint64_t v13 = *(void *)(v12 + 72);
  if (v11 == v13)
  {
    if (*(unsigned __int8 *)(v10 + 129) >= *(unsigned __int8 *)(v12 + 129)) {
      return result;
    }
  }
  else if (v11 <= v13)
  {
    return result;
  }
  *a3 = 0;
  *a3 = *a4;
  *a4 = v9;
  uint64_t v14 = *a2;
  if (*a3) {
    uint64_t v15 = *a3 + 8;
  }
  else {
    uint64_t v15 = 0;
  }
  unint64_t v16 = *(void *)(v15 + 72);
  uint64_t v17 = v14 + 8;
  if (!v14) {
    uint64_t v17 = 0;
  }
  unint64_t v18 = *(void *)(v17 + 72);
  if (v16 == v18)
  {
    if (*(unsigned __int8 *)(v15 + 129) >= *(unsigned __int8 *)(v17 + 129)) {
      return result;
    }
  }
  else if (v16 <= v18)
  {
    return result;
  }
  *a2 = 0;
  *a2 = *a3;
  *a3 = v14;
  uint64_t v19 = *a1;
  if (*a2) {
    uint64_t v20 = *a2 + 8;
  }
  else {
    uint64_t v20 = 0;
  }
  unint64_t v21 = *(void *)(v20 + 72);
  uint64_t v22 = v19 + 8;
  if (!v19) {
    uint64_t v22 = 0;
  }
  unint64_t v23 = *(void *)(v22 + 72);
  if (v21 != v23)
  {
    if (v21 <= v23) {
      return result;
    }
    goto LABEL_28;
  }
  if (*(unsigned __int8 *)(v20 + 129) < *(unsigned __int8 *)(v22 + 129))
  {
LABEL_28:
    *a1 = 0;
    *a1 = *a2;
    *a2 = v19;
  }
  return result;
}

uint64_t *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  __n128 result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*>(a1, a2, a3, a4);
  uint64_t v11 = *a4;
  if (*a5) {
    uint64_t v12 = *a5 + 8;
  }
  else {
    uint64_t v12 = 0;
  }
  unint64_t v13 = *(void *)(v12 + 72);
  uint64_t v14 = v11 + 8;
  if (!v11) {
    uint64_t v14 = 0;
  }
  unint64_t v15 = *(void *)(v14 + 72);
  if (v13 == v15)
  {
    if (*(unsigned __int8 *)(v12 + 129) >= *(unsigned __int8 *)(v14 + 129)) {
      return result;
    }
  }
  else if (v13 <= v15)
  {
    return result;
  }
  *a4 = 0;
  *a4 = *a5;
  *a5 = v11;
  uint64_t v16 = *a3;
  if (*a4) {
    uint64_t v17 = *a4 + 8;
  }
  else {
    uint64_t v17 = 0;
  }
  unint64_t v18 = *(void *)(v17 + 72);
  uint64_t v19 = v16 + 8;
  if (!v16) {
    uint64_t v19 = 0;
  }
  unint64_t v20 = *(void *)(v19 + 72);
  if (v18 == v20)
  {
    if (*(unsigned __int8 *)(v17 + 129) >= *(unsigned __int8 *)(v19 + 129)) {
      return result;
    }
  }
  else if (v18 <= v20)
  {
    return result;
  }
  *a3 = 0;
  *a3 = *a4;
  *a4 = v16;
  uint64_t v21 = *a2;
  if (*a3) {
    uint64_t v22 = *a3 + 8;
  }
  else {
    uint64_t v22 = 0;
  }
  unint64_t v23 = *(void *)(v22 + 72);
  uint64_t v24 = v21 + 8;
  if (!v21) {
    uint64_t v24 = 0;
  }
  unint64_t v25 = *(void *)(v24 + 72);
  if (v23 == v25)
  {
    if (*(unsigned __int8 *)(v22 + 129) >= *(unsigned __int8 *)(v24 + 129)) {
      return result;
    }
  }
  else if (v23 <= v25)
  {
    return result;
  }
  *a2 = 0;
  *a2 = *a3;
  *a3 = v21;
  uint64_t v26 = *a1;
  if (*a2) {
    uint64_t v27 = *a2 + 8;
  }
  else {
    uint64_t v27 = 0;
  }
  unint64_t v28 = *(void *)(v27 + 72);
  uint64_t v29 = v26 + 8;
  if (!v26) {
    uint64_t v29 = 0;
  }
  unint64_t v30 = *(void *)(v29 + 72);
  if (v28 != v30)
  {
    if (v28 <= v30) {
      return result;
    }
    goto LABEL_37;
  }
  if (*(unsigned __int8 *)(v27 + 129) < *(unsigned __int8 *)(v29 + 129))
  {
LABEL_37:
    *a1 = 0;
    *a1 = *a2;
    *a2 = v26;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (v6) {
        uint64_t v8 = v6 + 8;
      }
      else {
        uint64_t v8 = 0;
      }
      unint64_t v9 = *(void *)(v8 + 72);
      uint64_t v10 = v7 + 8;
      if (!v7) {
        uint64_t v10 = 0;
      }
      unint64_t v11 = *(void *)(v10 + 72);
      if (v9 == v11)
      {
        if (*(unsigned __int8 *)(v8 + 129) >= *(unsigned __int8 *)(v10 + 129)) {
          return result;
        }
      }
      else if (v9 <= v11)
      {
        return result;
      }
      *a1 = 0;
      *a1 = *(a2 - 1);
      *(a2 - 1) = v7;
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v12 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::PointPosition::addElement(geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator> const&)::$_1 &,geo::fast_shared_ptr<md::PointLabelFeatureElement,mdm::MDAllocator>*>(a1, a1 + 1, a1 + 2);
      unint64_t v13 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v14 = 0;
      uint64_t v15 = 16;
      break;
  }
  while (1)
  {
    uint64_t v17 = *v13;
    uint64_t v18 = *v12;
    uint64_t v19 = *v13 + 8;
    if (!*v13) {
      uint64_t v19 = 0;
    }
    unint64_t v20 = *(void *)(v19 + 72);
    uint64_t v21 = v18 + 8;
    if (!v18) {
      uint64_t v21 = 0;
    }
    unint64_t v22 = *(void *)(v21 + 72);
    if (v20 != v22) {
      break;
    }
    if (*(unsigned __int8 *)(v19 + 129) < *(unsigned __int8 *)(v21 + 129)) {
      goto LABEL_23;
    }
LABEL_14:
    uint64_t v12 = v13;
    v15 += 8;
    if (++v13 == a2) {
      return 1;
    }
  }
  if (v20 <= v22) {
    goto LABEL_14;
  }
LABEL_23:
  uint64_t *v13 = v18;
  uint64_t *v12 = 0;
  uint64_t v23 = v15;
  uint64_t v16 = a1;
  if (v12 != a1)
  {
    while (1)
    {
      uint64_t v24 = (uint64_t *)((char *)a1 + v23);
      uint64_t v25 = *(uint64_t *)((char *)a1 + v23 - 8);
      uint64_t v26 = v25 + 8;
      if (!v25) {
        uint64_t v26 = 0;
      }
      unint64_t v27 = *(void *)(v26 + 72);
      if (v20 == v27)
      {
        if (*(unsigned __int8 *)(v19 + 129) >= *(unsigned __int8 *)(v26 + 129))
        {
          uint64_t v16 = v12;
          break;
        }
      }
      else if (v20 <= v27)
      {
        uint64_t v16 = (uint64_t *)((char *)a1 + v23);
        break;
      }
      --v12;
      *(v24 - 1) = 0;
      *uint64_t v24 = v25;
      v23 -= 8;
      if (!v23)
      {
        uint64_t v16 = a1;
        break;
      }
    }
  }
  uint64_t *v16 = v17;
  if (++v14 != 8) {
    goto LABEL_14;
  }
  return v13 + 1 == a2;
}

md::LabelPart *md::PointLabelFeature::newLabeledImageAnnotationPart(uint64_t *a1, uint64_t *a2, int a3)
{
  uint64_t v135 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (void *)a2[8];
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)(*a2 + 3392));
  md::PointLabelFeatureElement::getSummaryIconInfos((uint64_t)v127, v6, 1, v7 & 1);
  if (!v127[0]) {
    return 0;
  }
  uint64_t v8 = v128;
  uint64_t v94 = v129;
  if (v128 == v129)
  {
    unint64_t v13 = 0;
    if (!v128) {
      return v13;
    }
    goto LABEL_185;
  }
  {
    operator new();
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 696, 8);
  unint64_t v126 = (md::LabelPart *)md::StackLabelPart::StackLabelPart(v9, 0, 5, 0, 0);
  (*(void (**)(md::LabelPart *, uint64_t))(*(void *)v126 + 176))(v126, 8);
  *((unsigned char *)v126 + 630) = 1;
  uint64_t v125 = &v126;
  uint64_t v10 = a2[2];
  int v11 = *(_DWORD *)(v10 + 160);
  if (v11 < 0) {
    int v11 = -v11;
  }
  int v91 = v11;
  uint64_t v12 = *(float **)(v10 + 288);
  if (v12)
  {
    if (vabds_f32(v12[2], *(float *)(v10 + 104)) >= 0.01)
    {
      md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>((unsigned __int8 *)v10, (uint64_t)v12, 6);
      uint64_t v12 = *(float **)(v10 + 288);
    }
  }
  else
  {
    uint64_t v12 = (float *)md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(v10, 6);
    *(void *)(v10 + 288) = v12;
  }
  int v14 = *(unsigned __int8 *)(*(void *)v12 + 60);
  if ((v14 - 5) > 1u)
  {
    LOBYTE(v120) = 0;
    char v124 = 0;
  }
  else
  {
    md::PointLabelFeature::iconPackColor((uint64_t)&v120, a1, (uint64_t)a2, v14);
  }
  uint64_t v15 = a2[2];
  uint64_t v16 = *(void *)(v15 + 280);
  int v88 = a3;
  if (v16)
  {
    if (vabds_f32(*(float *)(v16 + 8), *(float *)(v15 + 104)) >= 0.01)
    {
      md::LabelStyle::updateStyleGroup<md::LabelTextStyleGroup>((unsigned __int8 *)v15, v16, 0);
      uint64_t v16 = *(void *)(v15 + 280);
    }
  }
  else
  {
    uint64_t v16 = md::LabelStyle::prepareStyleGroup<md::LabelTextStyleGroup>(v15, 0);
    *(void *)(v15 + 280) = v16;
  }
  char v90 = 0;
  int v93 = 0;
  double v89 = a1 + 68;
  uint64_t v92 = *(void *)v16 + 72;
  while (1)
  {
    if (*(char *)(v8 + 31) < 0)
    {
      if (!*(void *)(v8 + 16)) {
        goto LABEL_21;
      }
    }
    else if (!*(unsigned char *)(v8 + 31))
    {
      goto LABEL_21;
    }
    uint64_t v18 = (std::__shared_count *)a2[1];
    uint64_t v17 = (md::LabelStyle *)a2[2];
    uint64_t v19 = *a2;
    int v20 = *(_DWORD *)v8;
    int v21 = *(_DWORD *)(v8 + 4);
    uint64_t v22 = *((void *)v17 + 37);
    uint64_t v23 = (uint64_t)v17;
    if (v22)
    {
      uint64_t v24 = *((void *)v17 + 39);
      if (!v24) {
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v25 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a2[2], 0);
      uint64_t v22 = *v25;
      *((void *)v17 + 37) = *v25;
      uint64_t v23 = a2[2];
      uint64_t v24 = *(void *)(v23 + 312);
      if (!v24)
      {
LABEL_30:
        uint64_t v26 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(v23);
        uint64_t v24 = *v26;
        *(void *)(v23 + 312) = *v26;
      }
    }
    int v27 = *(unsigned __int8 *)(v24 + 45);
    if ((v27 - 5) <= 1u
      && (md::PointLabelFeature::iconPackColor((uint64_t)__src, a1, (uint64_t)a2, v27), BYTE2(__src[1])))
    {
      LOBYTE(v116) = 0;
      char v117 = 0;
      if (BYTE4(__src[0]))
      {
        int v116 = (int)__src[0];
        char v117 = 1;
      }
    }
    else
    {
      LOBYTE(v116) = 0;
      char v117 = 0;
    }
    md::PointLabelFeature::customImageData(&v132, a1);
    md::LabelStyle::createIcon(&v118, v17, v19, v18, a1 + 82, 0, v20, v21, 1, v22, (char *)&v116, (const md::CustomImageData *)&v132);
    if (v134 != v133) {
      break;
    }
    (*(void (**)(void *))(v133[0] + 32))(v133);
    if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_45;
    }
LABEL_40:
    if (v118) {
      goto LABEL_41;
    }
LABEL_46:
    int v28 = 3;
    uint64_t v29 = v119;
    if (v119) {
      goto LABEL_111;
    }
LABEL_112:
    if (v28 != 3) {
      goto LABEL_113;
    }
LABEL_21:
    v8 += 56;
    if (v8 == v94) {
      goto LABEL_147;
    }
  }
  if (v134) {
    (*(void (**)(void *))(*v134 + 40))(v134);
  }
  if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_40;
  }
LABEL_45:
  operator delete(v132.__r_.__value_.__l.__data_);
  if (!v118) {
    goto LABEL_46;
  }
LABEL_41:
  if (v93 == v91)
  {
    char v90 = 1;
    int v28 = 2;
    int v93 = v91;
    uint64_t v29 = v119;
    if (v119) {
      goto LABEL_111;
    }
    goto LABEL_112;
  }
  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp((uint64_t)__src, " … ", 0);
  unint64_t v30 = (void *)HIBYTE(v111);
  int v31 = SHIBYTE(v111);
  float v32 = __src[1];
  if (v111 < 0) {
    unint64_t v30 = __src[1];
  }
  if (!v30)
  {
    unsigned __int8 v35 = -1;
    goto LABEL_59;
  }
  float v33 = (unsigned __int8 *)a1[68];
  unint64_t v34 = a1[69];
  if (v33 == (unsigned __int8 *)v34)
  {
    unsigned __int8 v35 = 0;
    unint64_t v34 = a1[68];
LABEL_118:
    if (v34 >= a1[70])
    {
      uint64_t v62 = std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::__emplace_back_slow_path<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>> const&>(v89, (long long *)__src);
    }
    else
    {
      if (v34)
      {
        *(void *)(v34 + 24) = v112;
        if (v31 < 0)
        {
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v34, __src[0], (unint64_t)v32);
        }
        else
        {
          long long v60 = *(_OWORD *)__src;
          *(void *)(v34 + 16) = v111;
          *(_OWORD *)unint64_t v34 = v60;
        }
        float v64 = (void **)(v34 + 32);
        *(void *)(v34 + 56) = v115;
        if (SHIBYTE(v114) < 0)
        {
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external(v64, (void *)v113, *((unint64_t *)&v113 + 1));
        }
        else
        {
          long long v65 = v113;
          *(void *)(v34 + 48) = v114;
          *(_OWORD *)float v64 = v65;
        }
      }
      uint64_t v62 = v34 + 64;
      a1[69] = v34 + 64;
    }
    a1[69] = v62;
    if ((SHIBYTE(v114) & 0x80000000) == 0) {
      goto LABEL_60;
    }
LABEL_135:
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v115 + 40))(v115, v113, v114 & 0x7FFFFFFFFFFFFFFFLL);
    if (SHIBYTE(v111) < 0) {
      goto LABEL_136;
    }
    goto LABEL_61;
  }
  unsigned __int8 v35 = 0;
  while ((md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==(v33, (unsigned __int8 *)__src) & 1) == 0)
  {
    ++v35;
    v33 += 64;
    if (v33 == (unsigned __int8 *)v34)
    {
      if (v35 <= 0x64u) {
        goto LABEL_118;
      }
      unsigned __int8 v35 = -1;
      if ((SHIBYTE(v114) & 0x80000000) == 0) {
        goto LABEL_60;
      }
      goto LABEL_135;
    }
  }
LABEL_59:
  if (SHIBYTE(v114) < 0) {
    goto LABEL_135;
  }
LABEL_60:
  if ((SHIBYTE(v111) & 0x80000000) == 0) {
    goto LABEL_61;
  }
LABEL_136:
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v112 + 40))(v112, __src[0], v111 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_61:
  float v36 = (const char *)(v8 + 8);
  if (*(char *)(v8 + 31) < 0) {
    float v36 = *(const char **)v36;
  }
  float v37 = (const char *)(v8 + 32);
  if (*(char *)(v8 + 55) < 0) {
    float v37 = *(const char **)v37;
  }
  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp((uint64_t)__src, v36, v37);
  uint64_t v38 = (void *)HIBYTE(v111);
  int v39 = SHIBYTE(v111);
  double v40 = __src[1];
  if (v111 < 0) {
    uint64_t v38 = __src[1];
  }
  if (!v38)
  {
    unsigned __int8 v43 = -1;
    goto LABEL_76;
  }
  double v41 = (unsigned __int8 *)a1[68];
  unint64_t v42 = a1[69];
  if (v41 == (unsigned __int8 *)v42)
  {
    unsigned __int8 v43 = 0;
    unint64_t v42 = a1[68];
LABEL_123:
    if (v42 >= a1[70])
    {
      uint64_t v63 = std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::__emplace_back_slow_path<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>> const&>(v89, (long long *)__src);
    }
    else
    {
      if (v42)
      {
        *(void *)(v42 + 24) = v112;
        if (v39 < 0)
        {
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v42, __src[0], (unint64_t)v40);
        }
        else
        {
          long long v61 = *(_OWORD *)__src;
          *(void *)(v42 + 16) = v111;
          *(_OWORD *)unint64_t v42 = v61;
        }
        float v66 = (void **)(v42 + 32);
        *(void *)(v42 + 56) = v115;
        if (SHIBYTE(v114) < 0)
        {
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external(v66, (void *)v113, *((unint64_t *)&v113 + 1));
        }
        else
        {
          long long v67 = v113;
          *(void *)(v42 + 48) = v114;
          *(_OWORD *)float v66 = v67;
        }
      }
      uint64_t v63 = v42 + 64;
      a1[69] = v42 + 64;
    }
    a1[69] = v63;
    if ((SHIBYTE(v114) & 0x80000000) == 0) {
      goto LABEL_77;
    }
LABEL_143:
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v115 + 40))(v115, v113, v114 & 0x7FFFFFFFFFFFFFFFLL);
    if (SHIBYTE(v111) < 0) {
      goto LABEL_144;
    }
    goto LABEL_78;
  }
  unsigned __int8 v43 = 0;
  while ((md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==(v41, (unsigned __int8 *)__src) & 1) == 0)
  {
    ++v43;
    v41 += 64;
    if (v41 == (unsigned __int8 *)v42)
    {
      if (v43 <= 0x64u) {
        goto LABEL_123;
      }
      unsigned __int8 v43 = -1;
      if ((SHIBYTE(v114) & 0x80000000) == 0) {
        goto LABEL_77;
      }
      goto LABEL_143;
    }
  }
LABEL_76:
  if (SHIBYTE(v114) < 0) {
    goto LABEL_143;
  }
LABEL_77:
  if ((SHIBYTE(v111) & 0x80000000) == 0) {
    goto LABEL_78;
  }
LABEL_144:
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v112 + 40))(v112, __src[0], v111 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_78:
  char v44 = *(unsigned char *)(a2[1] + 404);
  unint64_t v45 = (*(uint64_t (**)(uint64_t *))(*a1 + 488))(a1);
  uint64_t v46 = (unsigned __int8 *)a1[20];
  int v47 = (unsigned __int8 *)a1[21];
  if (v45 > 0x6DB6DB6DB6DB6DB7 * ((v47 - v46) >> 3))
  {
    md::LabelFeature::updateTextVector((md::LabelFeature *)a1);
    uint64_t v46 = (unsigned __int8 *)a1[20];
    int v47 = (unsigned __int8 *)a1[21];
  }
  md::TextDataStore::textDataForZoom(__src, v46, v47, v35, v92);
  unint64_t v48 = (*(uint64_t (**)(uint64_t *))(*a1 + 488))(a1);
  long long v49 = (unsigned __int8 *)a1[20];
  long long v50 = (unsigned __int8 *)a1[21];
  if (v48 > 0x6DB6DB6DB6DB6DB7 * ((v50 - v49) >> 3))
  {
    md::LabelFeature::updateTextVector((md::LabelFeature *)a1);
    long long v49 = (unsigned __int8 *)a1[20];
    long long v50 = (unsigned __int8 *)a1[21];
  }
  md::TextDataStore::textDataForZoom(&GraphicAnnotationPart, v49, v50, v43, v92);
  uint64_t v106 = 0;
  size_t v107 = 0;
  long long v51 = GraphicAnnotationPart;
  if (GraphicAnnotationPart) {
    BOOL v52 = __src[0] == 0;
  }
  else {
    BOOL v52 = 1;
  }
  char v53 = !v52;
  if (!v52)
  {
    long long v54 = (std::__shared_weak_count *)operator new(0xB0uLL);
    v54->__shared_owners_ = 0;
    v54->__shared_weak_owners_ = 0;
    v54->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582A90;
    uint64_t v106 = md::LabelText::LabelText((uint64_t)&v54[1], (uint64_t)v51, (uint64_t)v109, __src, v44);
    size_t v107 = v54;
    char v55 = v53 ^ 1;
    if (!v118) {
      char v55 = 1;
    }
    if (v55) {
      goto LABEL_212;
    }
    {
      operator new();
    }
    uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
    md::IconLabelPart::IconLabelPart(v56, &v118);
    long long v105 = v57;
    LOBYTE(v100) = 0;
    char v104 = 0;
    if (v124)
    {
      char v101 = 0;
      if (v121)
      {
        int v100 = v120;
        char v101 = 1;
      }
      LOBYTE(v102) = 0;
      char v103 = 0;
      if (v123)
      {
        int v102 = v122;
        char v103 = 1;
      }
      char v104 = 1;
    }
    md::PointLabelFeature::newLabeledImageAnnotationPart(md::PartCreationContext const&,md::AnnotationID)::$_0::operator()((uint64_t **)&v125, &v105, &v106, &v100);
    if (v105) {
      (*(void (**)(md::LabelPart *))(*(void *)v105 + 8))(v105);
    }
    ++v93;
    long long v54 = v107;
    if (v107)
    {
LABEL_212:
      if (!atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
  }
  int v58 = v109;
  if (v109 && !atomic_fetch_add(&v109->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
    std::__shared_weak_count::__release_weak(v58);
  }
  long double v59 = (std::__shared_weak_count *)__src[1];
  if (__src[1] && !atomic_fetch_add((atomic_ullong *volatile)__src[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
  }
  int v28 = 0;
  uint64_t v29 = v119;
  if (!v119) {
    goto LABEL_112;
  }
LABEL_111:
  if (atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_112;
  }
  ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
  std::__shared_weak_count::__release_weak(v29);
  if (v28 == 3) {
    goto LABEL_21;
  }
LABEL_113:
  if (!v28) {
    goto LABEL_21;
  }
LABEL_147:
  if ((v90 & 1) == 0)
  {
    if (!v93)
    {
      size_t v74 = v126;
      unint64_t v126 = 0;
      if (v74) {
        goto LABEL_182;
      }
    }
    goto LABEL_183;
  }
  GraphicAnnotationPart = (md::LabelPart *)md::PointLabelFeature::createGraphicAnnotationPart(a1, a2, v88, 2);
  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp((uint64_t)__src, " … ", 0);
  uint64_t v68 = (void *)HIBYTE(v111);
  int v69 = SHIBYTE(v111);
  uint64_t v70 = __src[1];
  if (v111 < 0) {
    uint64_t v68 = __src[1];
  }
  if (!v68)
  {
    unsigned __int8 v73 = -1;
    goto LABEL_162;
  }
  uint64_t v71 = (unsigned __int8 *)a1[68];
  unint64_t v72 = a1[69];
  if (v71 == (unsigned __int8 *)v72)
  {
    unsigned __int8 v73 = 0;
    unint64_t v72 = a1[68];
LABEL_195:
    if (v72 >= a1[70])
    {
      uint64_t v85 = std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::__emplace_back_slow_path<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>> const&>(v89, (long long *)__src);
    }
    else
    {
      if (v72)
      {
        *(void *)(v72 + 24) = v112;
        if (v69 < 0)
        {
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v72, __src[0], (unint64_t)v70);
        }
        else
        {
          long long v84 = *(_OWORD *)__src;
          *(void *)(v72 + 16) = v111;
          *(_OWORD *)unint64_t v72 = v84;
        }
        long long v86 = (void **)(v72 + 32);
        *(void *)(v72 + 56) = v115;
        if (SHIBYTE(v114) < 0)
        {
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external(v86, (void *)v113, *((unint64_t *)&v113 + 1));
        }
        else
        {
          long long v87 = v113;
          *(void *)(v72 + 48) = v114;
          *(_OWORD *)long long v86 = v87;
        }
      }
      uint64_t v85 = v72 + 64;
      a1[69] = v72 + 64;
    }
    a1[69] = v85;
    if ((SHIBYTE(v114) & 0x80000000) == 0) {
      goto LABEL_163;
    }
LABEL_206:
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v115 + 40))(v115, v113, v114 & 0x7FFFFFFFFFFFFFFFLL);
    if (SHIBYTE(v111) < 0) {
      goto LABEL_207;
    }
    goto LABEL_164;
  }
  unsigned __int8 v73 = 0;
  while ((md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==(v71, (unsigned __int8 *)__src) & 1) == 0)
  {
    ++v73;
    v71 += 64;
    if (v71 == (unsigned __int8 *)v72)
    {
      if (v73 <= 0x64u) {
        goto LABEL_195;
      }
      unsigned __int8 v73 = -1;
      if ((SHIBYTE(v114) & 0x80000000) == 0) {
        goto LABEL_163;
      }
      goto LABEL_206;
    }
  }
LABEL_162:
  if (SHIBYTE(v114) < 0) {
    goto LABEL_206;
  }
LABEL_163:
  if ((SHIBYTE(v111) & 0x80000000) == 0) {
    goto LABEL_164;
  }
LABEL_207:
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v112 + 40))(v112, __src[0], v111 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_164:
  char v75 = *(unsigned char *)(a2[1] + 404);
  unint64_t v76 = (*(uint64_t (**)(uint64_t *))(*a1 + 488))(a1);
  unint64_t v77 = (unsigned __int8 *)a1[20];
  size_t v78 = (unsigned __int8 *)a1[21];
  if (v76 > 0x6DB6DB6DB6DB6DB7 * ((v78 - v77) >> 3))
  {
    md::LabelFeature::updateTextVector((md::LabelFeature *)a1);
    unint64_t v77 = (unsigned __int8 *)a1[20];
    size_t v78 = (unsigned __int8 *)a1[21];
  }
  md::TextDataStore::textDataForZoom(__src, v77, v78, v73, v92);
  uint64_t v118 = 0;
  unint64_t v119 = 0;
  uint64_t v79 = __src[0];
  if (__src[0])
  {
    uint64_t v80 = (std::__shared_weak_count *)operator new(0xB0uLL);
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582A90;
    uint64_t v118 = md::LabelText::LabelText((uint64_t)&v80[1], (uint64_t)v79, (uint64_t)__src[1], v75);
    unint64_t v119 = v80;
    if (GraphicAnnotationPart && v79)
    {
      LOBYTE(v95) = 0;
      char v99 = 0;
      if (v124)
      {
        char v96 = 0;
        if (v121)
        {
          int v95 = v120;
          char v96 = 1;
        }
        LOBYTE(v97) = 0;
        char v98 = 0;
        if (v123)
        {
          int v97 = v122;
          char v98 = 1;
        }
        char v99 = 1;
      }
      md::PointLabelFeature::newLabeledImageAnnotationPart(md::PartCreationContext const&,md::AnnotationID)::$_0::operator()((uint64_t **)&v125, &GraphicAnnotationPart, &v118, &v95);
    }
    if (!atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  float v81 = (std::__shared_weak_count *)__src[1];
  if (__src[1] && !atomic_fetch_add((atomic_ullong *volatile)__src[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
    std::__shared_weak_count::__release_weak(v81);
  }
  size_t v74 = GraphicAnnotationPart;
  if (GraphicAnnotationPart) {
LABEL_182:
  }
    (*(void (**)(md::LabelPart *))(*(void *)v74 + 8))(v74);
LABEL_183:
  unint64_t v13 = v126;
  if (v127[0])
  {
    uint64_t v8 = v128;
    if (v128)
    {
LABEL_185:
      for (uint64_t i = v129; ; i -= 56)
      {
        if (i == v8)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v131 + 40))(v131, v8, v130 - v8);
          return v13;
        }
        if (*(char *)(i - 1) < 0)
        {
          operator delete(*(void **)(i - 24));
          if ((*(char *)(i - 25) & 0x80000000) == 0) {
            continue;
          }
        }
        else if ((*(char *)(i - 25) & 0x80000000) == 0)
        {
          continue;
        }
        operator delete(*(void **)(i - 48));
      }
    }
  }
  return v13;
}

void sub_1A27905E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (*(char *)(v31 + 23) < 0) {
    (*(void (**)(void, void, uint64_t))(**(void **)(v31 + 24) + 40))(*(void *)(v31 + 24), *(void *)v31, *(void *)(v31 + 16) & 0x7FFFFFFFFFFFFFFFLL);
  }
  *(void *)(v30 + 552) = v31;
  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~StringWithLocaleImp((uint64_t)&a30);
  if (a28) {
    (*(void (**)(uint64_t))(*(void *)a28 + 8))(a28);
  }
  uint64_t v34 = *(void *)(v32 - 200);
  *(void *)(v32 - 200) = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  geo::optional<std::vector<md::PointLabelSummaryIconInfo,geo::StdAllocator<md::PointLabelSummaryIconInfo,mdm::Allocator>>>::~optional(v32 - 192);
  _Unwind_Resume(a1);
}

void md::PointLabelFeatureElement::getSummaryIconInfos(uint64_t a1, void *a2, int a3, int a4)
{
  uint64_t v4 = *a2;
  if (!*a2)
  {
    *(unsigned char *)a1 = 0;
    return;
  }
  if (a3)
  {
    if (a3 == 2)
    {
      unint64_t v6 = *(unsigned char *)(v4 + 208) != 0;
    }
    else
    {
      if (a3 != 1)
      {
        unint64_t v6 = 0;
        unsigned int v7 = 0;
        int v8 = 0;
        goto LABEL_11;
      }
      unint64_t v6 = *(unsigned __int8 *)(v4 + 208);
    }
    unsigned int v7 = *(_DWORD *)(v4 + 196);
    int v8 = 1;
  }
  else
  {
    int v8 = 0;
    unint64_t v6 = *(unsigned __int8 *)(v4 + 207);
    unsigned int v7 = *(_DWORD *)(v4 + 192);
  }
LABEL_11:
  long long v60 = 0uLL;
  unint64_t v61 = 0;
  {
    operator new();
  }
  uint64_t v62 = mdm::Allocator::instance(void)::alloc;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v61 - v60) >> 3) < v6)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                       + 16))(mdm::Allocator::instance(void)::alloc, 56 * v6, 8);
    uint64_t v10 = v9 + *((void *)&v60 + 1) - v60;
    uint64_t v12 = *((void *)&v60 + 1);
    uint64_t v11 = v60;
    if (*((void *)&v60 + 1) != (void)v60)
    {
      uint64_t v13 = v9 + *((void *)&v60 + 1) - v60;
      do
      {
        uint64_t v14 = *(void *)(v12 - 56);
        v12 -= 56;
        *(void *)(v13 - 56) = v14;
        v13 -= 56;
        long long v15 = *(_OWORD *)(v12 + 8);
        *(void *)(v13 + 24) = *(void *)(v12 + 24);
        *(_OWORD *)(v13 + 8) = v15;
        *(void *)(v12 + 16) = 0;
        *(void *)(v12 + 24) = 0;
        *(void *)(v12 + 8) = 0;
        long long v16 = *(_OWORD *)(v12 + 32);
        *(void *)(v13 + 48) = *(void *)(v12 + 48);
        *(_OWORD *)(v13 + 32) = v16;
        *(void *)(v12 + 40) = 0;
        *(void *)(v12 + 48) = 0;
        *(void *)(v12 + 32) = 0;
      }
      while (v12 != v11);
      uint64_t v17 = *((void *)&v60 + 1);
      uint64_t v12 = v60;
      *(void *)&long long v60 = v13;
      *((void *)&v60 + 1) = v10;
      unint64_t v18 = v61;
      unint64_t v61 = v9 + 56 * v6;
      while (1)
      {
        if (v17 == v12) {
          goto LABEL_25;
        }
        if (*(char *)(v17 - 1) < 0)
        {
          operator delete(*(void **)(v17 - 24));
          if ((*(char *)(v17 - 25) & 0x80000000) == 0) {
            goto LABEL_17;
          }
        }
        else if ((*(char *)(v17 - 25) & 0x80000000) == 0)
        {
          goto LABEL_17;
        }
        operator delete(*(void **)(v17 - 48));
LABEL_17:
        v17 -= 56;
      }
    }
    *(void *)&long long v60 = v9 + *((void *)&v60 + 1) - v60;
    *((void *)&v60 + 1) = v10;
    unint64_t v18 = v61;
    unint64_t v61 = v9 + 56 * v6;
LABEL_25:
    if (v12) {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v62 + 40))(v62, v12, v18 - v12);
    }
  }
  int v58 = 0;
  long double v59 = 0;
  uint64_t v19 = *(std::__shared_weak_count **)(v4 + 8);
  if (v19)
  {
    uint64_t v19 = std::__shared_weak_count::lock(v19);
    int v20 = v19;
    long double v59 = v19;
    if (v19)
    {
      uint64_t v19 = *(std::__shared_weak_count **)v4;
      int v58 = *(std::__shared_weak_count **)v4;
    }
  }
  else
  {
    int v20 = 0;
  }
  long long v50 = v20;
  uint64_t v21 = geo::codec::VectorTile::labelSummaryIcons((geo::codec::VectorTile *)v19);
  if (v6)
  {
    uint64_t v22 = 0;
    uint64_t v23 = v21 + 12 * v7;
    char v53 = (void **)(a2 + 1);
    int v54 = v8;
    do
    {
      memset(v57, 0, sizeof(v57));
      uint64_t v56 = *(void *)v23;
      if (v8)
      {
        uint64_t v24 = *(unsigned int *)(v23 + 8);
        if (v24 != -1)
        {
          if ((uint64_t v63 = 0, __s = 0, a4)
            && (geo::codec::tileGetLocalizedLabel(v53, v24, (unint64_t *)&v63, (unint64_t *)&__s),
                (uint64_t v25 = v63) != 0)
            && *v63
            || (geo::codec::tileGetNativeLabel((uint64_t)v53, *(unsigned int *)(v23 + 8), &v63, &__s), (uint64_t v25 = v63) != 0)
            && *v63)
          {
            std::string::__assign_external(v57, v25);
            std::string::__assign_external(&v57[1], __s);
          }
        }
      }
      uint64_t v26 = *((void *)&v60 + 1);
      if (*((void *)&v60 + 1) >= v61)
      {
        uint64_t v28 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)&v60 + 1) - v60) >> 3);
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) > 0x492492492492492) {
          abort();
        }
        if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v61 - v60) >> 3) > v29) {
          unint64_t v29 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v61 - v60) >> 3);
        }
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v61 - v60) >> 3)) >= 0x249249249249249) {
          uint64_t v30 = 0x492492492492492;
        }
        else {
          uint64_t v30 = v29;
        }
        long long v67 = &v62;
        if (v30) {
          uint64_t v31 = (const std::string::value_type *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v62 + 16))(v62, 56 * v30, 8);
        }
        else {
          uint64_t v31 = 0;
        }
        uint64_t v63 = v31;
        float v64 = &v31[56 * v28];
        long long v65 = v64;
        float v66 = &v31[56 * v30];
        if (v31)
        {
          *(void *)&v31[56 * v28] = v56;
          if (SHIBYTE(v57[0].__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v31[56 * v28 + 8], v57[0].__r_.__value_.__l.__data_, v57[0].__r_.__value_.__l.__size_);
          }
          else
          {
            long long v32 = *(_OWORD *)&v57[0].__r_.__value_.__l.__data_;
            *(void *)&v31[56 * v28 + 24] = *((void *)&v57[0].__r_.__value_.__l + 2);
            *(_OWORD *)&v31[56 * v28 + 8] = v32;
          }
          float v36 = (std::string *)&v31[56 * v28 + 32];
          if (SHIBYTE(v57[1].__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v36, v57[1].__r_.__value_.__l.__data_, v57[1].__r_.__value_.__l.__size_);
          }
          else
          {
            long long v37 = *(_OWORD *)&v57[1].__r_.__value_.__l.__data_;
            *(void *)&v31[56 * v28 + 48] = *((void *)&v57[1].__r_.__value_.__l + 2);
            *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
          }
        }
        uint64_t v38 = v64;
        unsigned __int8 v35 = v65 + 56;
        uint64_t v40 = *((void *)&v60 + 1);
        uint64_t v39 = v60;
        if (*((void *)&v60 + 1) != (void)v60)
        {
          do
          {
            uint64_t v41 = *(void *)(v40 - 56);
            v40 -= 56;
            *((void *)v38 - 7) = v41;
            v38 -= 56;
            long long v42 = *(_OWORD *)(v40 + 8);
            *((void *)v38 + 3) = *(void *)(v40 + 24);
            *(_OWORD *)(v38 + 8) = v42;
            *(void *)(v40 + 16) = 0;
            *(void *)(v40 + 24) = 0;
            *(void *)(v40 + 8) = 0;
            long long v43 = *(_OWORD *)(v40 + 32);
            *((void *)v38 + 6) = *(void *)(v40 + 48);
            *((_OWORD *)v38 + 2) = v43;
            *(void *)(v40 + 40) = 0;
            *(void *)(v40 + 48) = 0;
            *(void *)(v40 + 32) = 0;
          }
          while (v40 != v39);
          uint64_t v44 = *((void *)&v60 + 1);
          uint64_t v40 = v60;
          *(void *)&long long v60 = v38;
          *((void *)&v60 + 1) = v35;
          unint64_t v45 = v61;
          unint64_t v61 = (unint64_t)v66;
          while (2)
          {
            if (v44 == v40) {
              goto LABEL_78;
            }
            if (*(char *)(v44 - 1) < 0)
            {
              operator delete(*(void **)(v44 - 24));
              if (*(char *)(v44 - 25) < 0) {
                goto LABEL_76;
              }
            }
            else if (*(char *)(v44 - 25) < 0)
            {
LABEL_76:
              operator delete(*(void **)(v44 - 48));
            }
            v44 -= 56;
            continue;
          }
        }
        *(void *)&long long v60 = v64;
        *((void *)&v60 + 1) = v65 + 56;
        unint64_t v45 = v61;
        unint64_t v61 = (unint64_t)v66;
LABEL_78:
        int v8 = v54;
        if (v40) {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)*v67 + 40))(*v67, v40, v45 - v40);
        }
      }
      else
      {
        if (*((void *)&v60 + 1))
        {
          **((void **)&v60 + 1) = v56;
          if (SHIBYTE(v57[0].__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)(v26 + 8), v57[0].__r_.__value_.__l.__data_, v57[0].__r_.__value_.__l.__size_);
          }
          else
          {
            long long v27 = *(_OWORD *)&v57[0].__r_.__value_.__l.__data_;
            *(void *)(v26 + 24) = *((void *)&v57[0].__r_.__value_.__l + 2);
            *(_OWORD *)(v26 + 8) = v27;
          }
          float v33 = (std::string *)(v26 + 32);
          if (SHIBYTE(v57[1].__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v33, v57[1].__r_.__value_.__l.__data_, v57[1].__r_.__value_.__l.__size_);
          }
          else
          {
            long long v34 = *(_OWORD *)&v57[1].__r_.__value_.__l.__data_;
            *(void *)(v26 + 48) = *((void *)&v57[1].__r_.__value_.__l + 2);
            *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
          }
        }
        unsigned __int8 v35 = (unsigned char *)(v26 + 56);
      }
      *((void *)&v60 + 1) = v35;
      if (SHIBYTE(v57[1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v57[1].__r_.__value_.__l.__data_);
        if (SHIBYTE(v57[0].__r_.__value_.__r.__words[2]) < 0) {
LABEL_84:
        }
          operator delete(v57[0].__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v57[0].__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_84;
      }
      ++v22;
      v23 += 12;
    }
    while (v22 != v6);
  }
  *(unsigned char *)a1 = 1;
  *(_OWORD *)(a1 + 8) = v60;
  uint64_t v46 = v62;
  *(void *)(a1 + 24) = v61;
  *(void *)(a1 + 32) = v46;
  long long v60 = 0uLL;
  unint64_t v61 = 0;
  if (v50)
  {
    if (!atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
    uint64_t v47 = v60;
    if ((void)v60)
    {
      uint64_t v48 = *((void *)&v60 + 1);
      uint64_t v49 = v60;
      if (*((void *)&v60 + 1) == (void)v60)
      {
LABEL_98:
        *((void *)&v60 + 1) = v47;
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v62 + 40))(v62, v49, v61 - v49);
        return;
      }
      while (1)
      {
        if (*(char *)(v48 - 1) < 0)
        {
          operator delete(*(void **)(v48 - 24));
          if (*(char *)(v48 - 25) < 0) {
LABEL_96:
          }
            operator delete(*(void **)(v48 - 48));
        }
        else if (*(char *)(v48 - 25) < 0)
        {
          goto LABEL_96;
        }
        v48 -= 56;
        if (v48 == v47)
        {
          uint64_t v49 = v60;
          goto LABEL_98;
        }
      }
    }
  }
}

void sub_1A2790F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  std::vector<md::PointLabelSummaryIconInfo,geo::StdAllocator<md::PointLabelSummaryIconInfo,mdm::Allocator>>::~vector[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t md::PointLabelFeature::newLabeledImageAnnotationPart(md::PartCreationContext const&,md::AnnotationID)::$_0::operator()(uint64_t **a1, md::LabelPart **a2, void *a3, int *a4)
{
  (*(void (**)(md::LabelPart *, uint64_t))(*(void *)*a2 + 176))(*a2, 10);
  {
    operator new();
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 1168, 8);
  uint64_t v9 = (md::LabelPart *)v8;
  LOBYTE(v15) = 0;
  char v19 = 0;
  if (*((unsigned char *)a4 + 10))
  {
    char v16 = 0;
    if (*((unsigned char *)a4 + 4))
    {
      int v15 = *a4;
      char v16 = 1;
    }
    LOBYTE(v17) = 0;
    char v18 = 0;
    if (*((unsigned char *)a4 + 9))
    {
      int v17 = *(int *)((char *)a4 + 5);
      char v18 = 1;
    }
    char v19 = 1;
  }
  md::HorizontalTextLabelPart::HorizontalTextLabelPart(v8, a3, (uint64_t)&v15, 1);
  (*(void (**)(md::LabelPart *, uint64_t))(*(void *)v9 + 176))(v9, 11);
  {
    operator new();
  }
  uint64_t v10 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                              + 16))(mdm::Allocator::instance(void)::alloc, 696, 8);
  uint64_t v11 = md::StackLabelPart::StackLabelPart((uint64_t)v10, 1, 0, 1, 0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 176))(v11, 12);
  *((unsigned char *)v10 + 630) = 1;
  uint64_t v12 = *a2;
  *a2 = 0;
  md::CompositeLabelPart::addLabelPart((uint64_t)v10, v12);
  md::CompositeLabelPart::addLabelPart((uint64_t)v10, v9);
  uint64_t v13 = **a1;
  return md::CompositeLabelPart::addLabelPart(v13, v10);
}

void sub_1A279128C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t md::PointLabelFeature::createGraphicAnnotationPart(uint64_t *a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (a3 == 1)
  {
    uint64_t v6 = a2[2];
    uint64_t v7 = *(void *)(v6 + 312);
    if (a4 == 1)
    {
      if (!v7)
      {
        uint64_t v8 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(a2[2]);
        uint64_t v7 = *v8;
        *(void *)(v6 + 312) = *v8;
      }
      uint64_t v9 = (unsigned char *)(v7 + 48);
    }
    else
    {
      if (!v7)
      {
        uint64_t v13 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(a2[2]);
        uint64_t v7 = *v13;
        *(void *)(v6 + 312) = *v13;
      }
      uint64_t v9 = (unsigned char *)(v7 + 50);
    }
  }
  else
  {
    uint64_t v10 = a2[2];
    uint64_t v11 = *(void *)(v10 + 312);
    if (!v11)
    {
      uint64_t v12 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(a2[2]);
      uint64_t v11 = *v12;
      *(void *)(v10 + 312) = *v12;
    }
    uint64_t v9 = (unsigned char *)(v11 + 53);
  }
  uint64_t v14 = 0;
  switch(*v9)
  {
    case 0:
    case 2:
      int v15 = *(uint64_t (**)(uint64_t *, uint64_t *))(*a1 + 728);
      return v15(a1, a2);
    case 1:
    case 6:
      return v14;
    case 3:
      uint64_t v17 = a2[2];
      uint64_t v18 = *(void *)(v17 + 272);
      if (!v18)
      {
        char v19 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(a2[2]);
        uint64_t v18 = *v19;
        *(void *)(v17 + 272) = *v19;
      }
      uint64_t v14 = v18 + 80;
      int v20 = *(char *)(v18 + 103);
      if (v20 < 0) {
        goto LABEL_38;
      }
      goto LABEL_23;
    case 4:
      uint64_t v21 = a2[2];
      uint64_t v22 = *(void *)(v21 + 272);
      if (!v22)
      {
        uint64_t v23 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(a2[2]);
        uint64_t v22 = *v23;
        *(void *)(v21 + 272) = *v23;
      }
      uint64_t v14 = v22 + 112;
      int v20 = *(char *)(v22 + 135);
      if ((v20 & 0x80000000) == 0) {
        goto LABEL_23;
      }
      goto LABEL_38;
    case 5:
      uint64_t v24 = a2[2];
      uint64_t v25 = *(void *)(v24 + 296);
      if (!v25)
      {
        uint64_t v26 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a2[2], 0);
        uint64_t v25 = *v26;
        *(void *)(v24 + 296) = *v26;
      }
      uint64_t v27 = a1[82];
      if (!v27) {
        return 0;
      }
      unint64_t v28 = *(unsigned __int8 *)(v27 + 33);
      if (!*(unsigned char *)(v27 + 33)) {
        return 0;
      }
      int v29 = *(_DWORD *)(v25 + 64);
      uint64_t v30 = *(_DWORD **)v27;
      if (**(_DWORD **)v27 == v29)
      {
        unint64_t v31 = 0;
LABEL_31:
        int v32 = v30[2 * v31 + 1];
        uint64_t v33 = a2[2];
        uint64_t v34 = *(void *)(v33 + 296);
        if (!v34)
        {
          unsigned __int8 v35 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a2[2], 0);
          uint64_t v34 = *v35;
          *(void *)(v33 + 296) = *v35;
        }
        int v36 = *(_DWORD *)(v34 + 64);
        if (v36)
        {
          uint64_t v14 = 0;
          goto LABEL_40;
        }
        return 0;
      }
      unint64_t v31 = 0;
      char v53 = v30 + 2;
      do
      {
        if (v28 - 1 == v31) {
          return 0;
        }
        int v54 = *v53;
        v53 += 2;
        ++v31;
      }
      while (v54 != v29);
      if (v31 < v28) {
        goto LABEL_31;
      }
      return 0;
    case 7:
      uint64_t v37 = a2[2];
      uint64_t v38 = *(void *)(v37 + 272);
      if (!v38)
      {
        uint64_t v39 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(a2[2]);
        uint64_t v38 = *v39;
        *(void *)(v37 + 272) = *v39;
      }
      uint64_t v14 = v38 + 144;
      int v20 = *(char *)(v38 + 167);
      if (v20 < 0)
      {
LABEL_38:
        if (!*(void *)(v14 + 8)) {
          return 0;
        }
      }
      else
      {
LABEL_23:
        if (!(_BYTE)v20) {
          return 0;
        }
      }
      LOWORD(v32) = 0;
      int v36 = 0;
LABEL_40:
      uint64_t v41 = (std::__shared_count *)a2[1];
      uint64_t v40 = (md::LabelStyle *)a2[2];
      uint64_t v42 = *a2;
      uint64_t v43 = *((void *)v40 + 37);
      uint64_t v44 = (uint64_t)v40;
      if (v43)
      {
        uint64_t v45 = *((void *)v40 + 39);
        if (v45) {
          goto LABEL_42;
        }
      }
      else
      {
        long long v51 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(a2[2], 0);
        uint64_t v43 = *v51;
        *((void *)v40 + 37) = *v51;
        uint64_t v44 = a2[2];
        uint64_t v45 = *(void *)(v44 + 312);
        if (v45) {
          goto LABEL_42;
        }
      }
      BOOL v52 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(v44);
      uint64_t v45 = *v52;
      *(void *)(v44 + 312) = *v52;
LABEL_42:
      int v46 = *(unsigned __int8 *)(v45 + 45);
      if ((v46 - 5) <= 1u
        && (md::PointLabelFeature::iconPackColor((uint64_t)&v59, a1, (uint64_t)a2, v46), v61))
      {
        LOBYTE(v55) = 0;
        char v56 = 0;
        if (v60)
        {
          int v55 = v59;
          char v56 = 1;
        }
      }
      else
      {
        LOBYTE(v55) = 0;
        char v56 = 0;
      }
      md::PointLabelFeature::customImageData(&__p, a1);
      md::LabelStyle::createIcon(&v57, v40, v42, v41, a1 + 82, (void **)v14, v36, v32, 1, v43, (char *)&v55, (const md::CustomImageData *)&__p);
      if (v64 == v63)
      {
        (*(void (**)(void *))(v63[0] + 32))(v63);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_51;
        }
LABEL_58:
        operator delete(__p.__r_.__value_.__l.__data_);
        uint64_t v47 = v57;
        if (v57) {
          goto LABEL_52;
        }
LABEL_59:
        long long v50 = v58;
        if (!v58) {
          goto LABEL_62;
        }
        goto LABEL_60;
      }
      if (v64) {
        (*(void (**)(void))(*v64 + 40))();
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_58;
      }
LABEL_51:
      uint64_t v47 = v57;
      if (!v57) {
        goto LABEL_59;
      }
LABEL_52:
      {
        operator new();
      }
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
      double v48 = md::IconLabelPart::IconLabelPart(v14, &v57);
      (*(void (**)(uint64_t, uint64_t, double))(*(void *)v49 + 176))(v49, 10, v48);
      long long v50 = v58;
      if (v58)
      {
LABEL_60:
        if (!atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
LABEL_62:
      if (!v47) {
        return 0;
      }
      return v14;
    default:
      return 0;
  }
}

void sub_1A27918B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  md::CustomImageData::~CustomImageData((md::CustomImageData *)va);
  _Unwind_Resume(a1);
}

void sub_1A27918CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t geo::optional<std::vector<md::PointLabelSummaryIconInfo,geo::StdAllocator<md::PointLabelSummaryIconInfo,mdm::Allocator>>>::~optional(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (!v2)
    {
LABEL_13:
      *(unsigned char *)a1 = 0;
      return a1;
    }
    uint64_t v3 = *(void *)(a1 + 16);
    uint64_t v4 = *(void *)(a1 + 8);
    if (v3 == v2)
    {
LABEL_12:
      *(void *)(a1 + 16) = v2;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32), v4, *(void *)(a1 + 24) - v4);
      goto LABEL_13;
    }
    while (1)
    {
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if (*(char *)(v3 - 25) < 0) {
LABEL_10:
        }
          operator delete(*(void **)(v3 - 48));
      }
      else if (*(char *)(v3 - 25) < 0)
      {
        goto LABEL_10;
      }
      v3 -= 56;
      if (v3 == v2)
      {
        uint64_t v4 = *(void *)(a1 + 8);
        goto LABEL_12;
      }
    }
  }
  return a1;
}

uint64_t *std::vector<md::PointLabelSummaryIconInfo,geo::StdAllocator<md::PointLabelSummaryIconInfo,mdm::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
      return a1;
    }
    while (1)
    {
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if (*(char *)(v3 - 25) < 0) {
LABEL_9:
        }
          operator delete(*(void **)(v3 - 48));
      }
      else if (*(char *)(v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 56;
      if (v3 == v2)
      {
        uint64_t v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

uint64_t std::__split_buffer<md::PointLabelSummaryIconInfo,geo::StdAllocator<md::PointLabelSummaryIconInfo,mdm::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if ((*(char *)(i - 25) & 0x80000000) == 0) {
        continue;
      }
    }
    else if ((*(char *)(i - 25) & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(*(void **)(i - 48));
  }
  if (*(void *)a1) {
    (*(void (**)(void, void, void))(***(void ***)(a1 + 32) + 40))(**(void **)(a1 + 32), *(void *)a1, *(void *)(a1 + 24) - *(void *)a1);
  }
  return a1;
}

md::CompositeLabelPart *md::PointLabelFeature::newGraphicAnnotationPart(md::PointLabelFeature *this, const md::PartCreationContext *a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  md::PointLabelFeatureElement::getSummaryIconInfos((uint64_t)v41, *((void **)a2 + 8), 0, 0);
  if (!v41[0]) {
    return 0;
  }
  uint64_t v3 = v42;
  uint64_t v34 = v43;
  if (v42 == v43) {
    goto LABEL_48;
  }
  {
    operator new();
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 696, 8);
  uint64_t v5 = md::StackLabelPart::StackLabelPart(v4, 1);
  *(void *)uint64_t v5 = &unk_1EF536E68;
  *(unsigned char *)(v5 + 694) = 1;
  md::LabelPart::setContentType(v5, 7);
  int v36 = 0;
  int v32 = (md::CompositeLabelPart *)v4;
  *(unsigned char *)(v4 + 630) = 1;
  int v6 = *(_DWORD *)(*((void *)a2 + 2) + 160);
  if (v6 >= 0) {
    int v7 = *(_DWORD *)(*((void *)a2 + 2) + 160);
  }
  else {
    int v7 = -v6;
  }
  int v33 = v7;
  if (v6 <= 0) {
    int v8 = 0;
  }
  else {
    int v8 = v7;
  }
  int v31 = v8;
  do
  {
    uint64_t v11 = (std::__shared_count *)*((void *)a2 + 1);
    uint64_t v10 = (md::LabelStyle *)*((void *)a2 + 2);
    uint64_t v12 = *(void **)a2;
    int v14 = *v3;
    int v13 = v3[1];
    uint64_t v15 = *((void *)v10 + 37);
    uint64_t v16 = (uint64_t)v10;
    if (v15)
    {
      uint64_t v17 = *((void *)v10 + 39);
      if (!v17) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v18 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*((void *)a2 + 2), 0);
      uint64_t v15 = *v18;
      *((void *)v10 + 37) = *v18;
      uint64_t v16 = *((void *)a2 + 2);
      uint64_t v17 = *(void *)(v16 + 312);
      if (!v17)
      {
LABEL_19:
        char v19 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(v16);
        uint64_t v17 = *v19;
        *(void *)(v16 + 312) = *v19;
      }
    }
    int v20 = *(unsigned __int8 *)(v17 + 45);
    if ((v20 - 5) <= 1u
      && (md::PointLabelFeature::iconPackColor((uint64_t)&v46, (uint64_t *)this, (uint64_t)a2, v20), v48))
    {
      LOBYTE(v37) = 0;
      char v38 = 0;
      if (v47)
      {
        int v37 = v46;
        char v38 = 1;
      }
    }
    else
    {
      LOBYTE(v37) = 0;
      char v38 = 0;
    }
    md::PointLabelFeature::customImageData(&v49, this);
    md::LabelStyle::createIcon(&v39, v10, (uint64_t)v12, v11, (uint64_t *)this + 82, 0, v14, v13, 1, v15, (char *)&v37, (const md::CustomImageData *)&v49);
    if (v51 == v50)
    {
      (*(void (**)(void *))(v50[0] + 32))(v50);
      if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_29;
      }
    }
    else
    {
      if (v51) {
        (*(void (**)(void *))(*v51 + 40))(v51);
      }
      if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_29:
        if (!v39) {
          goto LABEL_34;
        }
        goto LABEL_30;
      }
    }
    operator delete(v49.__r_.__value_.__l.__data_);
    if (!v39)
    {
LABEL_34:
      char v21 = 0;
      uint64_t v23 = v40;
      if (!v40) {
        goto LABEL_11;
      }
LABEL_39:
      if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
      goto LABEL_11;
    }
LABEL_30:
    if (v36 == v33)
    {
      char v21 = 1;
      int v22 = v31;
    }
    else
    {
      {
        operator new();
      }
      uint64_t v24 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                  + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
      double v25 = md::IconLabelPart::IconLabelPart((uint64_t)v24, &v39);
      (*(void (**)(uint64_t, uint64_t, double))(*(void *)v26 + 176))(v26, 10, v25);
      md::CompositeLabelPart::addLabelPart((uint64_t)v32, v24);
      char v21 = 0;
      int v22 = v36 + 1;
    }
    int v36 = v22;
    uint64_t v23 = v40;
    if (v40) {
      goto LABEL_39;
    }
LABEL_11:
    v3 += 14;
    if (v3 == v34) {
      char v9 = 1;
    }
    else {
      char v9 = v21;
    }
  }
  while ((v9 & 1) == 0);
  if (!v36)
  {
    (*(void (**)(md::CompositeLabelPart *))(*(void *)v32 + 8))(v32);
LABEL_48:
    uint64_t v27 = 0;
    if (v41[0]) {
      goto LABEL_49;
    }
    return v27;
  }
  uint64_t v27 = v32;
  if (!v41[0]) {
    return v27;
  }
LABEL_49:
  unint64_t v28 = v42;
  if (v42)
  {
    for (uint64_t i = v43; ; i -= 14)
    {
      if (i == v28)
      {
        (*(void (**)(uint64_t, int *, uint64_t))(*(void *)v45 + 40))(v45, v28, v44 - (void)v28);
        return v27;
      }
      if (*((char *)i - 1) < 0)
      {
        operator delete(*((void **)i - 3));
        if ((*((char *)i - 25) & 0x80000000) == 0) {
          continue;
        }
      }
      else if ((*((char *)i - 25) & 0x80000000) == 0)
      {
        continue;
      }
      operator delete(*((void **)i - 6));
    }
  }
  return v27;
}

void sub_1A27920A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  geo::optional<std::vector<md::PointLabelSummaryIconInfo,geo::StdAllocator<md::PointLabelSummaryIconInfo,mdm::Allocator>>>::~optional((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::PointLabelFeature::externalFeatureTextIndex(void *a1, int a2, uint64_t a3)
{
  uint64_t v3 = a1[63];
  if (!v3) {
    return -1;
  }
  uint64_t v4 = *(void *)(v3 + 48);
  uint64_t v5 = *(void *)(v3 + 56);
  if (v4 == v5) {
    return -1;
  }
  int v7 = a1 + 68;
  while (*(unsigned __int8 *)(v4 + 1) != a2)
  {
    v4 += 104;
    if (v4 == v5) {
      return -1;
    }
  }
  unsigned __int8 v10 = atomic_load((unsigned __int8 *)(a3 + 3392));
  if ((v10 & 1) == 0)
  {
LABEL_9:
    md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp<std::string>(__src, (void *)(v4 + 8));
    uint64_t v11 = (void *)HIBYTE(v26);
    int v12 = SHIBYTE(v26);
    int v13 = __src[1];
    if (v26 < 0) {
      uint64_t v11 = __src[1];
    }
    if (v11)
    {
      int v14 = (unsigned __int8 *)a1[68];
      unint64_t v15 = a1[69];
      if (v14 != (unsigned __int8 *)v15)
      {
        unsigned __int8 v8 = 0;
        while ((md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==(v14, (unsigned __int8 *)__src) & 1) == 0)
        {
          ++v8;
          v14 += 64;
          if (v14 == (unsigned __int8 *)v15)
          {
            if (v8 > 0x64u) {
              goto LABEL_30;
            }
            goto LABEL_35;
          }
        }
        goto LABEL_31;
      }
      unsigned __int8 v8 = 0;
      unint64_t v15 = a1[68];
LABEL_35:
      if (v15 < a1[70])
      {
        if (v15)
        {
          *(void *)(v15 + 24) = v27;
          if (v12 < 0)
          {
            std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v15, __src[0], (unint64_t)v13);
          }
          else
          {
            long long v20 = *(_OWORD *)__src;
            *(void *)(v15 + 16) = v26;
            *(_OWORD *)unint64_t v15 = v20;
          }
          unint64_t v23 = v15 + 32;
          *(void *)(v15 + 56) = v30;
          if (SHIBYTE(v29) < 0)
          {
LABEL_48:
            std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v23, (void *)v28, *((unint64_t *)&v28 + 1));
            goto LABEL_52;
          }
LABEL_51:
          long long v24 = v28;
          *(void *)(v23 + 16) = v29;
          *(_OWORD *)unint64_t v23 = v24;
          goto LABEL_52;
        }
        goto LABEL_52;
      }
LABEL_39:
      uint64_t v21 = std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::__emplace_back_slow_path<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>> const&>(v7, (long long *)__src);
      goto LABEL_53;
    }
LABEL_30:
    unsigned __int8 v8 = -1;
    goto LABEL_31;
  }
  if (*(char *)(v4 + 79) < 0)
  {
    if (!*(void *)(v4 + 64)) {
      goto LABEL_9;
    }
  }
  else if (!*(unsigned char *)(v4 + 79))
  {
    goto LABEL_9;
  }
  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp<std::string>(__src, (void *)(v4 + 56));
  uint64_t v16 = (void *)HIBYTE(v26);
  int v17 = SHIBYTE(v26);
  uint64_t v18 = __src[1];
  if (v26 < 0) {
    uint64_t v16 = __src[1];
  }
  if (!v16) {
    goto LABEL_30;
  }
  char v19 = (unsigned __int8 *)a1[68];
  unint64_t v15 = a1[69];
  if (v19 != (unsigned __int8 *)v15)
  {
    unsigned __int8 v8 = 0;
    while ((md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==(v19, (unsigned __int8 *)__src) & 1) == 0)
    {
      ++v8;
      v19 += 64;
      if (v19 == (unsigned __int8 *)v15)
      {
        if (v8 <= 0x64u) {
          goto LABEL_41;
        }
        goto LABEL_30;
      }
    }
LABEL_31:
    if ((SHIBYTE(v29) & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_54;
  }
  unsigned __int8 v8 = 0;
  unint64_t v15 = a1[68];
LABEL_41:
  if (v15 >= a1[70]) {
    goto LABEL_39;
  }
  if (v15)
  {
    *(void *)(v15 + 24) = v27;
    if (v17 < 0)
    {
      std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v15, __src[0], (unint64_t)v18);
    }
    else
    {
      long long v22 = *(_OWORD *)__src;
      *(void *)(v15 + 16) = v26;
      *(_OWORD *)unint64_t v15 = v22;
    }
    unint64_t v23 = v15 + 32;
    *(void *)(v15 + 56) = v30;
    if (SHIBYTE(v29) < 0) {
      goto LABEL_48;
    }
    goto LABEL_51;
  }
LABEL_52:
  uint64_t v21 = v15 + 64;
  a1[69] = v15 + 64;
LABEL_53:
  a1[69] = v21;
  if ((SHIBYTE(v29) & 0x80000000) == 0)
  {
LABEL_32:
    if (SHIBYTE(v26) < 0) {
      goto LABEL_55;
    }
    return v8;
  }
LABEL_54:
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)v30 + 40))(v30, v28, v29 & 0x7FFFFFFFFFFFFFFFLL);
  if (SHIBYTE(v26) < 0) {
LABEL_55:
  }
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v27 + 40))(v27, __src[0], v26 & 0x7FFFFFFFFFFFFFFFLL);
  return v8;
}

void sub_1A279241C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v10 + 23) < 0) {
    (*(void (**)(void, void, uint64_t))(**(void **)(v10 + 24) + 40))(*(void *)(v10 + 24), *(void *)v10, *(void *)(v10 + 16) & 0x7FFFFFFFFFFFFFFFLL);
  }
  *(void *)(v9 + 552) = v10;
  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~StringWithLocaleImp((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t md::PointLabelFeature::annotationTextIndex(uint64_t a1, uint64_t a2, int a3, __n128 a4)
{
  if (a3 != 8)
  {
    if ((a3 & 0xFE) != 0xA) {
      goto LABEL_30;
    }
    uint64_t v20 = *(void *)(a2 + 16);
    uint64_t v21 = *(void *)(v20 + 312);
    if (!v21)
    {
      long long v22 = md::LabelStyle::prepareStyleGroup<md::LabelAnnotationStyleGroup>(*(void *)(a2 + 16));
      uint64_t v21 = *v22;
      *(void *)(v20 + 312) = *v22;
    }
    uint64_t v23 = 60;
    if (a3 == 10) {
      uint64_t v23 = 56;
    }
    uint64_t v24 = 54;
    if (a3 != 10) {
      uint64_t v24 = 55;
    }
    unsigned int v25 = *(unsigned __int8 *)(v21 + v24);
    int v26 = *(_DWORD *)(v21 + v23);
    LOBYTE(__dst) = 0;
    char v92 = 0;
    if (v26 - 1 < 2) {
      goto LABEL_23;
    }
    if (v26 != 3)
    {
      if (v26 != 4) {
        return -1;
      }
LABEL_23:
      uint64_t v27 = **(void **)(a2 + 64);
      if (v27)
      {
        long long v79 = 0uLL;
        long long v28 = *(std::__shared_weak_count **)(v27 + 8);
        if (v28)
        {
          *((void *)&v79 + 1) = std::__shared_weak_count::lock(v28);
          if (*((void *)&v79 + 1)) {
            *(void *)&long long v79 = *(void *)v27;
          }
        }
        md::LabelFeature::tileAnnotationText(__src, (geo::codec::VectorTile **)&v79, *(_DWORD *)(v27 + 200), *(unsigned __int8 *)(v27 + 204), v26, v25);
        uint64_t v29 = (std::__shared_weak_count *)*((void *)&v79 + 1);
        if (*((void *)&v79 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v79 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      else
      {
        LOBYTE(__src[0]) = 0;
        char v101 = 0;
      }
      a4 = std::__optional_storage_base<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,false>>((uint64_t)&__dst, (long long *)__src);
      if (v101)
      {
        if (SHIBYTE(v99) < 0) {
          (*(void (**)(uint64_t, void, uint64_t, __n128))(*(void *)v100 + 40))(v100, v98, v99 & 0x7FFFFFFFFFFFFFFFLL, a4);
        }
        if (SHIBYTE(v96) < 0)
        {
          uint64_t v39 = __src[0];
          uint64_t v41 = v96;
          uint64_t v40 = v97;
LABEL_170:
          (*(void (**)(uint64_t, void *, uint64_t, __n128))(*(void *)v40 + 40))(v40, v39, v41 & 0x7FFFFFFFFFFFFFFFLL, a4);
          goto LABEL_171;
        }
      }
      goto LABEL_171;
    }
    LOBYTE(v79) = 0;
    char v85 = 0;
    uint64_t v43 = *(void **)(*(void *)a2 + 3472);
    if (v26 != 3 || v43 == 0)
    {
LABEL_165:
      if (v85)
      {
        if (SHIBYTE(v83) < 0) {
          (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)v84 + 40))(v84, v82.n128_u64[0], v83 & 0x7FFFFFFFFFFFFFFFLL);
        }
        if (SHIBYTE(v80) < 0)
        {
          uint64_t v39 = (void *)v79;
          uint64_t v41 = v80;
          uint64_t v40 = v81;
          goto LABEL_170;
        }
      }
LABEL_171:
      if (v92)
      {
        uint64_t v69 = HIBYTE(v87);
        int v70 = SHIBYTE(v87);
        unint64_t v71 = *((void *)&__dst + 1);
        if (v87 < 0) {
          uint64_t v69 = *((void *)&__dst + 1);
        }
        if (v69)
        {
          unint64_t v72 = *(unsigned __int8 **)(a1 + 544);
          unint64_t v73 = *(void *)(a1 + 552);
          if (v72 == (unsigned __int8 *)v73)
          {
            unsigned __int8 v18 = 0;
            unint64_t v73 = *(void *)(a1 + 544);
LABEL_184:
            if (v73 >= *(void *)(a1 + 560))
            {
              uint64_t v76 = std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::__emplace_back_slow_path<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>> const&>((uint64_t *)(a1 + 544), &__dst);
            }
            else
            {
              if (v73)
              {
                *(void *)(v73 + 24) = v88;
                if (v70 < 0)
                {
                  std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v73, (void *)__dst, v71);
                }
                else
                {
                  long long v75 = __dst;
                  *(void *)(v73 + 16) = v87;
                  *(_OWORD *)unint64_t v73 = v75;
                }
                unint64_t v77 = (__n128 *)(v73 + 32);
                *(void *)(v73 + 56) = v91;
                if (SHIBYTE(v90) < 0)
                {
                  std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external(v77, (void *)v89.n128_u64[0], v89.n128_u64[1]);
                }
                else
                {
                  __n128 v78 = v89;
                  *(void *)(v73 + 48) = v90;
                  *unint64_t v77 = v78;
                }
              }
              uint64_t v76 = v73 + 64;
              *(void *)(a1 + 552) = v73 + 64;
            }
            *(void *)(a1 + 552) = v76;
            if (!v92) {
              return v18;
            }
          }
          else
          {
            unsigned __int8 v18 = 0;
            while ((md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==(v72, (unsigned __int8 *)&__dst) & 1) == 0)
            {
              ++v18;
              v72 += 64;
              if (v72 == (unsigned __int8 *)v73)
              {
                if (v18 <= 0x64u) {
                  goto LABEL_184;
                }
                goto LABEL_180;
              }
            }
          }
        }
        else
        {
LABEL_180:
          unsigned __int8 v18 = -1;
        }
        if (SHIBYTE(v90) < 0) {
          (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)v91 + 40))(v91, v89.n128_u64[0], v90 & 0x7FFFFFFFFFFFFFFFLL);
        }
        if (SHIBYTE(v87) < 0) {
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)v88 + 40))(v88, __dst, v87 & 0x7FFFFFFFFFFFFFFFLL);
        }
        return v18;
      }
      return -1;
    }
    if (*(unsigned char *)(a1 + 655))
    {
      int v45 = *(unsigned __int8 *)(a1 + 654);
      switch(v45)
      {
        case 1:
          id v56 = v43;
          if (*(unsigned char *)(a1 + 408)) {
            unint64_t v57 = (unint64_t)*(float *)(a1 + 404);
          }
          else {
            unint64_t v57 = 0;
          }
          uint64_t v102 = 0;
          uint64_t v103 = 0;
          int v58 = (id *)&v102;
          int v59 = (id *)&v103;
          [v56 getAnnotationTextForChargersNoStatus:v57 text:&v103 locale:&v102];
          goto LABEL_122;
        case 2:
          uint64_t v104 = 0;
          uint64_t v105 = 0;
          int v58 = (id *)&v104;
          int v59 = (id *)&v105;
          [v43 getAnnotationTextForChargersNoneAvailable:&v105 locale:&v104];
LABEL_122:
          id v51 = *v59;
          id v52 = *v58;

          goto LABEL_123;
        case 3:
          id v46 = v43;
          if (*(unsigned char *)(a1 + 400)) {
            unint64_t v47 = (unint64_t)*(float *)(a1 + 396);
          }
          else {
            unint64_t v47 = 0;
          }
          if (*(unsigned char *)(a1 + 408)) {
            unint64_t v60 = (unint64_t)*(float *)(a1 + 404);
          }
          else {
            unint64_t v60 = 0;
          }
          uint64_t v106 = 0;
          uint64_t v107 = 0;
          int v58 = (id *)&v106;
          int v59 = (id *)&v107;
          [v46 getAnnotationTextForChargersAvailable:v47 total:v60 text:&v107 locale:&v106];
          goto LABEL_122;
      }
    }
    id v51 = 0;
    id v52 = 0;
LABEL_123:
    id v61 = v51;
    uint64_t v62 = (const char *)[v61 UTF8String];
    id v63 = v52;
    md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp((uint64_t)__src, v62, (const char *)[v63 UTF8String]);
    char v101 = 1;
    __n128 v64 = std::__optional_storage_base<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,false>>((uint64_t)&v79, (long long *)__src);
    if (v101)
    {
      if (SHIBYTE(v99) < 0) {
        (*(void (**)(uint64_t, void, uint64_t, __n128))(*(void *)v100 + 40))(v100, v98, v99 & 0x7FFFFFFFFFFFFFFFLL, v64);
      }
      if (SHIBYTE(v96) < 0) {
        (*(void (**)(uint64_t, void *, uint64_t, __n128))(*(void *)v97 + 40))(v97, __src[0], v96 & 0x7FFFFFFFFFFFFFFFLL, v64);
      }
    }

    if (v92 == v85)
    {
      if (v92)
      {
        if (SHIBYTE(v87) < 0)
        {
          if (v80 >= 0) {
            uint64_t v65 = &v79;
          }
          else {
            uint64_t v65 = (long long *)v79;
          }
          if (v80 >= 0) {
            size_t v66 = HIBYTE(v80);
          }
          else {
            size_t v66 = *((void *)&v79 + 1);
          }
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>((void **)&__dst, v65, v66);
        }
        else if (v80 < 0)
        {
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>((void **)&__dst, (void *)v79, *((size_t *)&v79 + 1));
        }
        else
        {
          long long __dst = v79;
          uint64_t v87 = v80;
        }
        if (SHIBYTE(v90) < 0)
        {
          if (v83 >= 0) {
            long long v67 = &v82;
          }
          else {
            long long v67 = (__n128 *)v82.n128_u64[0];
          }
          if (v83 >= 0) {
            size_t v68 = HIBYTE(v83);
          }
          else {
            size_t v68 = v82.n128_u64[1];
          }
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<false>((void **)&v89, v67, v68);
        }
        else if (v83 < 0)
        {
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__assign_no_alias<true>(&v89, (void *)v82.n128_u64[0], v82.n128_u64[1]);
        }
        else
        {
          a4 = v82;
          __n128 v89 = v82;
          uint64_t v90 = v83;
        }
      }
    }
    else if (v92)
    {
      if (SHIBYTE(v90) < 0) {
        (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)v91 + 40))(v91, v89.n128_u64[0], v90 & 0x7FFFFFFFFFFFFFFFLL);
      }
      if (SHIBYTE(v87) < 0) {
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)v88 + 40))(v88, __dst, v87 & 0x7FFFFFFFFFFFFFFFLL);
      }
      char v92 = 0;
    }
    else
    {
      uint64_t v88 = v81;
      if (SHIBYTE(v80) < 0)
      {
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)&__dst, (void *)v79, *((unint64_t *)&v79 + 1));
      }
      else
      {
        long long __dst = v79;
        uint64_t v87 = v80;
      }
      uint64_t v91 = v84;
      if (SHIBYTE(v83) < 0)
      {
        std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external(&v89, (void *)v82.n128_u64[0], v82.n128_u64[1]);
      }
      else
      {
        a4 = v82;
        __n128 v89 = v82;
        uint64_t v90 = v83;
      }
      char v92 = 1;
    }
    goto LABEL_165;
  }
  int v6 = *(void **)(*(void *)a2 + 3472);
  if (v6)
  {
    id v7 = v6;
    id v93 = 0;
    id v94 = 0;
    [v7 getTextForKey:&unk_1EF5BB430 text:&v94 locale:&v93];
    id v8 = v94;
    id v9 = v93;

    id v10 = v8;
    uint64_t v11 = (const char *)[v10 UTF8String];
    id v12 = v9;
    md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp((uint64_t)__src, v11, (const char *)[v12 UTF8String]);
    int v13 = (void *)HIBYTE(v96);
    int v14 = SHIBYTE(v96);
    unint64_t v15 = __src[1];
    if (v96 < 0) {
      int v13 = __src[1];
    }
    if (v13)
    {
      uint64_t v16 = *(unsigned __int8 **)(a1 + 544);
      unint64_t v17 = *(void *)(a1 + 552);
      if (v16 == (unsigned __int8 *)v17)
      {
        unsigned __int8 v18 = 0;
        unint64_t v17 = *(void *)(a1 + 544);
LABEL_53:
        if (v17 >= *(void *)(a1 + 560))
        {
          uint64_t v42 = std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::__emplace_back_slow_path<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>> const&>((uint64_t *)(a1 + 544), (long long *)__src);
        }
        else
        {
          if (v17)
          {
            *(void *)(v17 + 24) = v97;
            if (v14 < 0)
            {
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v17, __src[0], (unint64_t)v15);
            }
            else
            {
              long long v38 = *(_OWORD *)__src;
              *(void *)(v17 + 16) = v96;
              *(_OWORD *)unint64_t v17 = v38;
            }
            char v53 = (void **)(v17 + 32);
            *(void *)(v17 + 56) = v100;
            if (SHIBYTE(v99) < 0)
            {
              std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external(v53, (void *)v98, *((unint64_t *)&v98 + 1));
            }
            else
            {
              long long v54 = v98;
              *(void *)(v17 + 48) = v99;
              *(_OWORD *)char v53 = v54;
            }
          }
          uint64_t v42 = v17 + 64;
          *(void *)(a1 + 552) = v17 + 64;
        }
        *(void *)(a1 + 552) = v42;
        if ((SHIBYTE(v99) & 0x80000000) == 0)
        {
LABEL_50:
          if ((SHIBYTE(v96) & 0x80000000) == 0)
          {
LABEL_51:

            return v18;
          }
LABEL_105:
          (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v97 + 40))(v97, __src[0], v96 & 0x7FFFFFFFFFFFFFFFLL);
          goto LABEL_51;
        }
LABEL_104:
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)v100 + 40))(v100, v98, v99 & 0x7FFFFFFFFFFFFFFFLL);
        if ((SHIBYTE(v96) & 0x80000000) == 0) {
          goto LABEL_51;
        }
        goto LABEL_105;
      }
      unsigned __int8 v18 = 0;
      while ((md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==(v16, (unsigned __int8 *)__src) & 1) == 0)
      {
        ++v18;
        v16 += 64;
        if (v16 == (unsigned __int8 *)v17)
        {
          if (v18 <= 0x64u) {
            goto LABEL_53;
          }
          unsigned __int8 v18 = -1;
          if ((SHIBYTE(v99) & 0x80000000) == 0) {
            goto LABEL_50;
          }
          goto LABEL_104;
        }
      }
    }
    else
    {
      unsigned __int8 v18 = -1;
    }
    if ((SHIBYTE(v99) & 0x80000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_104;
  }
LABEL_30:
  if (!(*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1)) {
    return -1;
  }
  uint64_t v30 = *(void *)(a1 + 504);
  int v31 = *(unsigned __int8 **)(v30 + 48);
  int v32 = *(unsigned __int8 **)(v30 + 56);
  if (v31 == v32) {
    return -1;
  }
  int v33 = 0;
  do
  {
    if (*v31 > (int)*(float *)(*(void *)(a2 + 8) + 392)) {
      break;
    }
    if (v31[1] == 2) {
      int v33 = v31;
    }
    v31 += 104;
  }
  while (v31 != v32);
  if (!v33) {
    return -1;
  }
  unsigned __int8 v34 = atomic_load((unsigned __int8 *)(*(void *)a2 + 3392));
  if (v34)
  {
    if ((char)v33[79] < 0)
    {
      if (!*((void *)v33 + 8)) {
        goto LABEL_39;
      }
    }
    else if (!v33[79])
    {
      goto LABEL_39;
    }
    md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp<std::string>(__src, (void *)v33 + 7);
    char v48 = (void *)HIBYTE(v96);
    if (v96 < 0) {
      char v48 = __src[1];
    }
    if (v48)
    {
      std::string v49 = *(unsigned __int8 **)(a1 + 544);
      int v37 = *(unsigned __int8 **)(a1 + 552);
      if (v49 != v37)
      {
        unsigned __int8 v18 = 0;
        while ((md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==(v49, (unsigned __int8 *)__src) & 1) == 0)
        {
          ++v18;
          v49 += 64;
          if (v49 == v37)
          {
            if (v18 <= 0x64u) {
              goto LABEL_107;
            }
            goto LABEL_86;
          }
        }
LABEL_87:
        if ((SHIBYTE(v99) & 0x80000000) == 0) {
          goto LABEL_89;
        }
        goto LABEL_88;
      }
      unsigned __int8 v18 = 0;
LABEL_107:
      long long v50 = (uint64_t *)(a1 + 544);
      if ((unint64_t)v37 < *(void *)(a1 + 560)) {
        goto LABEL_108;
      }
      goto LABEL_109;
    }
LABEL_86:
    unsigned __int8 v18 = -1;
    goto LABEL_87;
  }
LABEL_39:
  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp<std::string>(__src, (void *)v33 + 1);
  unsigned __int8 v35 = (void *)HIBYTE(v96);
  if (v96 < 0) {
    unsigned __int8 v35 = __src[1];
  }
  if (!v35) {
    goto LABEL_86;
  }
  int v36 = *(unsigned __int8 **)(a1 + 544);
  int v37 = *(unsigned __int8 **)(a1 + 552);
  if (v36 != v37)
  {
    unsigned __int8 v18 = 0;
    while ((md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==(v36, (unsigned __int8 *)__src) & 1) == 0)
    {
      ++v18;
      v36 += 64;
      if (v36 == v37)
      {
        if (v18 > 0x64u) {
          goto LABEL_86;
        }
        goto LABEL_94;
      }
    }
    goto LABEL_87;
  }
  unsigned __int8 v18 = 0;
  int v37 = *(unsigned __int8 **)(a1 + 544);
LABEL_94:
  long long v50 = (uint64_t *)(a1 + 544);
  if ((unint64_t)v37 < *(void *)(a1 + 560))
  {
LABEL_108:
    std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::__construct_one_at_end[abi:nn180100]<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>> const&>(v50, (long long *)__src);
    uint64_t v55 = (uint64_t)(v37 + 64);
    goto LABEL_110;
  }
LABEL_109:
  uint64_t v55 = std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::__emplace_back_slow_path<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>> const&>(v50, (long long *)__src);
LABEL_110:
  *(void *)(a1 + 552) = v55;
  if (SHIBYTE(v99) < 0) {
LABEL_88:
  }
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v100 + 40))(v100, v98, v99 & 0x7FFFFFFFFFFFFFFFLL);
LABEL_89:
  if (SHIBYTE(v96) < 0) {
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v97 + 40))(v97, __src[0], v96 & 0x7FFFFFFFFFFFFFFFLL);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 688))(a1, a2) == v18) {
    return -1;
  }
  return v18;
}

void sub_1A2793080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (SHIBYTE(a21) < 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a22 + 40))(a22, a19, a21 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::optional<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>>::~optional((uint64_t)&a10);
  std::optional<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>>::~optional((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_1A27931FC()
{
}

__n128 std::__optional_storage_base<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,false>>(uint64_t a1, long long *a2)
{
  if (*(unsigned __int8 *)(a1 + 64) != *((unsigned __int8 *)a2 + 64))
  {
    if (!*(unsigned char *)(a1 + 64))
    {
      long long v6 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v6;
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
      *(void *)a2 = 0;
      __n128 result = (__n128)a2[2];
      long long v7 = a2[3];
      *(__n128 *)(a1 + 32) = result;
      *(_OWORD *)(a1 + 48) = v7;
      *((void *)a2 + 5) = 0;
      *((void *)a2 + 6) = 0;
      *((void *)a2 + 4) = 0;
      *(unsigned char *)(a1 + 64) = 1;
      return result;
    }
    if (*(char *)(a1 + 55) < 0)
    {
      (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), *(void *)(a1 + 32), *(void *)(a1 + 48) & 0x7FFFFFFFFFFFFFFFLL);
      if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
        goto LABEL_11;
      }
    }
    else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    {
LABEL_11:
      *(unsigned char *)(a1 + 64) = 0;
      return result;
    }
    (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *(void *)a1, *(void *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFLL);
    goto LABEL_11;
  }
  if (*(unsigned char *)(a1 + 64))
  {
    if (*(char *)(a1 + 23) < 0) {
      (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *(void *)a1, *(void *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFLL);
    }
    long long v4 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((unsigned char *)a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
    if (*(char *)(a1 + 55) < 0) {
      (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), *(void *)(a1 + 32), *(void *)(a1 + 48) & 0x7FFFFFFFFFFFFFFFLL);
    }
    __n128 result = (__n128)a2[2];
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    *(__n128 *)(a1 + 32) = result;
    *((unsigned char *)a2 + 55) = 0;
    *((unsigned char *)a2 + 32) = 0;
  }
  return result;
}

uint64_t md::PointLabelFeature::indexForTextEntry(void *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (v2)
  {
    uint64_t v5 = (unsigned __int8 *)a1[68];
    long long v6 = (unsigned __int8 *)a1[69];
    if (v5 == v6)
    {
      unsigned __int8 v7 = 0;
LABEL_11:
      id v8 = a1 + 68;
      if ((unint64_t)v6 >= a1[70])
      {
        uint64_t v9 = std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::__emplace_back_slow_path<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>> const&>(v8, (long long *)a2);
      }
      else
      {
        std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::__construct_one_at_end[abi:nn180100]<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>> const&>(v8, (long long *)a2);
        uint64_t v9 = (uint64_t)(v6 + 64);
      }
      a1[69] = v9;
    }
    else
    {
      unsigned __int8 v7 = 0;
      while ((md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==(v5, (unsigned __int8 *)a2) & 1) == 0)
      {
        ++v7;
        v5 += 64;
        if (v5 == v6)
        {
          if (v7 <= 0x64u) {
            goto LABEL_11;
          }
          return -1;
        }
      }
    }
  }
  else
  {
    return -1;
  }
  return v7;
}

uint64_t md::PointLabelFeature::imageTextIndex(md::PointLabelFeature *this, const md::PartCreationContext *a2)
{
  if (!(*(uint64_t (**)(md::PointLabelFeature *))(*(void *)this + 64))(this)) {
    return 255;
  }
  uint64_t v4 = *(void *)a2;
  return md::PointLabelFeature::externalFeatureTextIndex(this, 3, v4);
}

uint64_t md::PointLabelFeature::primaryChildTextIndex(md::PointLabelFeature *this, const md::PartCreationContext *a2)
{
  uint64_t v3 = (void *)*((void *)a2 + 8);
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(*(void *)a2 + 3392));
  md::PointLabelFeatureElement::getSummaryIconInfos((uint64_t)v26, v3, 2, v4 & 1);
  if (!v26[0]) {
    return -1;
  }
  uint64_t v5 = v27;
  if (v27 == v28)
  {
    unsigned __int8 v7 = -1;
    if (!v27) {
      return v7;
    }
    goto LABEL_44;
  }
  long long v6 = (const char *)(v27 + 8);
  if (*(char *)(v27 + 31) < 0)
  {
    if (!*(void *)(v27 + 16))
    {
LABEL_23:
      unsigned __int8 v7 = -1;
LABEL_44:
      for (uint64_t i = v28; ; i -= 56)
      {
        if (i == v5)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v30 + 40))(v30, v5, v29 - v5);
          return v7;
        }
        if (*(char *)(i - 1) < 0)
        {
          operator delete(*(void **)(i - 24));
          if ((*(char *)(i - 25) & 0x80000000) == 0) {
            continue;
          }
        }
        else if ((*(char *)(i - 25) & 0x80000000) == 0)
        {
          continue;
        }
        operator delete(*(void **)(i - 48));
      }
    }
    long long v6 = *(const char **)v6;
  }
  else if (!*(unsigned char *)(v27 + 31))
  {
    goto LABEL_23;
  }
  id v8 = (const char *)(v27 + 32);
  if (*(char *)(v27 + 55) < 0) {
    id v8 = *(const char **)v8;
  }
  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::StringWithLocaleImp((uint64_t)__src, v6, v8);
  uint64_t v9 = (void *)HIBYTE(v21);
  int v10 = SHIBYTE(v21);
  uint64_t v11 = __src[1];
  if (v21 < 0) {
    uint64_t v9 = __src[1];
  }
  if (v9)
  {
    id v12 = (unsigned __int8 *)*((void *)this + 68);
    unint64_t v13 = *((void *)this + 69);
    if (v12 == (unsigned __int8 *)v13)
    {
      unsigned __int8 v7 = 0;
      unint64_t v13 = *((void *)this + 68);
    }
    else
    {
      unsigned __int8 v7 = 0;
      do
      {
        if (md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::operator==(v12, (unsigned __int8 *)__src))goto LABEL_25; {
        ++v7;
        }
        v12 += 64;
      }
      while (v12 != (unsigned __int8 *)v13);
      if (v7 > 0x64u)
      {
        unsigned __int8 v7 = -1;
        if (SHIBYTE(v24) < 0) {
          goto LABEL_41;
        }
LABEL_26:
        if (SHIBYTE(v21) < 0) {
          goto LABEL_42;
        }
        goto LABEL_27;
      }
    }
    if (v13 >= *((void *)this + 70))
    {
      uint64_t v15 = std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::__emplace_back_slow_path<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>> const&>((uint64_t *)this + 68, (long long *)__src);
    }
    else
    {
      if (v13)
      {
        *(void *)(v13 + 24) = v22;
        if (v10 < 0)
        {
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external((void **)v13, __src[0], (unint64_t)v11);
        }
        else
        {
          long long v14 = *(_OWORD *)__src;
          *(void *)(v13 + 16) = v21;
          *(_OWORD *)unint64_t v13 = v14;
        }
        uint64_t v16 = (void **)(v13 + 32);
        *(void *)(v13 + 56) = v25;
        if (SHIBYTE(v24) < 0)
        {
          std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>::__init_copy_ctor_external(v16, (void *)v23, *((unint64_t *)&v23 + 1));
        }
        else
        {
          long long v17 = v23;
          *(void *)(v13 + 48) = v24;
          *(_OWORD *)uint64_t v16 = v17;
        }
      }
      uint64_t v15 = v13 + 64;
      *((void *)this + 69) = v13 + 64;
    }
    *((void *)this + 69) = v15;
    if ((SHIBYTE(v24) & 0x80000000) == 0) {
      goto LABEL_26;
    }
  }
  else
  {
    unsigned __int8 v7 = -1;
LABEL_25:
    if ((SHIBYTE(v24) & 0x80000000) == 0) {
      goto LABEL_26;
    }
  }
LABEL_41:
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)v25 + 40))(v25, v23, v24 & 0x7FFFFFFFFFFFFFFFLL);
  if (SHIBYTE(v21) < 0)
  {
LABEL_42:
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v22 + 40))(v22, __src[0], v21 & 0x7FFFFFFFFFFFFFFFLL);
    if (!v26[0]) {
      return v7;
    }
    goto LABEL_43;
  }
LABEL_27:
  if (!v26[0]) {
    return v7;
  }
LABEL_43:
  uint64_t v5 = v27;
  if (v27) {
    goto LABEL_44;
  }
  return v7;
}

void sub_1A27937C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  if (*(char *)(v3 + 23) < 0) {
    (*(void (**)(void, void, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), *(void *)v3, *(void *)(v3 + 16) & 0x7FFFFFFFFFFFFFFFLL);
  }
  *(void *)(v2 + 552) = v3;
  md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>::~StringWithLocaleImp((uint64_t)va);
  geo::optional<std::vector<md::PointLabelSummaryIconInfo,geo::StdAllocator<md::PointLabelSummaryIconInfo,mdm::Allocator>>>::~optional((uint64_t)va1);
  _Unwind_Resume(a1);
}

md::CompositeLabelPart *md::PointLabelFeature::newMultiPoiIconPart(md::PointLabelFeature *this, const md::PartCreationContext *a2)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(void *)(v4 + 296);
  if (!v5)
  {
    long long v6 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(*((void *)a2 + 2), 0);
    uint64_t v5 = *v6;
    *(void *)(v4 + 296) = *v6;
  }
  uint64_t v7 = *(unsigned int *)(v5 + 68);
  long long v50 = 0;
  while (v7)
  {
    _ZNSt3__115allocate_sharedB8nn180100I22FeatureStyleAttributesNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v59);
    uint64_t v55 = 0;
    id v56 = 0;
    unint64_t v57 = 0;
    {
      operator new();
    }
    uint64_t v8 = 0;
    uint64_t v58 = mdm::Allocator::instance(void)::alloc;
    while (1)
    {
      uint64_t v53 = v59;
      long long v54 = (std::__shared_weak_count *)v60;
      if (v60) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v60 + 8), 1uLL, memory_order_relaxed);
      }
      char v9 = (*(uint64_t (**)(md::PointLabelFeature *, uint64_t, uint64_t, uint64_t *))(*(void *)this + 744))(this, v7, v8, &v53);
      uint64_t v10 = v54;
      if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      if ((v9 & 1) == 0) {
        break;
      }
      uint64_t v11 = *((void *)a2 + 1);
      uint64_t v12 = (md::LabelStyle *)*((void *)a2 + 2);
      uint64_t v13 = *(void *)a2;
      long long v14 = (std::__shared_weak_count *)v60;
      v51[0] = v59;
      v51[1] = v60;
      if (v60) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v60 + 8), 1uLL, memory_order_relaxed);
      }
      if (!(*(uint64_t (**)(md::PointLabelFeature *))(*(void *)this + 64))(this))
      {
        uint64_t v62 = 0;
        memset(v61, 0, sizeof(v61));
        goto LABEL_27;
      }
      uint64_t v15 = *((void *)this + 63);
      if (*(char *)(v15 + 143) < 0) {
        std::string::__init_copy_ctor_external(v61, *(const std::string::value_type **)(v15 + 120), *(void *)(v15 + 128));
      }
      else {
        v61[0] = *(std::string *)(v15 + 120);
      }
      uint64_t v16 = *(void *)(v15 + 168);
      if (!v16) {
        goto LABEL_25;
      }
      if (v16 != v15 + 144)
      {
        uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16);
LABEL_25:
        uint64_t v62 = (std::string *)v16;
        goto LABEL_27;
      }
      uint64_t v62 = &v61[1];
      (*(void (**)(uint64_t))(*(void *)v16 + 24))(v16);
LABEL_27:
      md::LabelStyle::pointIcon((uint64_t *)&v52, v12, v13, v11, v51, 0, 0, v7, 0, 255, 0, (uint64_t)v61);
      if (v62 == &v61[1])
      {
        (*(void (**)(std::string *))(v61[1].__r_.__value_.__r.__words[0] + 32))(&v61[1]);
        if ((SHIBYTE(v61[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_31;
        }
      }
      else
      {
        if (v62) {
          (*(void (**)(void))(v62->__r_.__value_.__r.__words[0] + 40))();
        }
        if ((SHIBYTE(v61[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_31:
          if (!v14) {
            goto LABEL_36;
          }
          goto LABEL_35;
        }
      }
      operator delete(v61[0].__r_.__value_.__l.__data_);
      if (!v14) {
        goto LABEL_36;
      }
LABEL_35:
      if (atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_36:
        uint64_t v17 = v52;
        if (!(void)v52) {
          goto LABEL_66;
        }
LABEL_37:
        char v19 = v56;
        unint64_t v18 = v57;
        if ((unint64_t)v56 < v57)
        {
          if (v56)
          {
            *id v56 = v17;
            uint64_t v20 = *((void *)&v52 + 1);
            v19[1] = *((void *)&v52 + 1);
            if (v20) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
            }
          }
          uint64_t v21 = v19 + 2;
          goto LABEL_65;
        }
        uint64_t v22 = v55;
        uint64_t v23 = ((char *)v56 - (char *)v55) >> 4;
        unint64_t v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 60) {
          abort();
        }
        if ((uint64_t)(v57 - (void)v55) >> 3 > v24) {
          unint64_t v24 = (uint64_t)(v57 - (void)v55) >> 3;
        }
        if (v57 - (unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0) {
          uint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v25 = v24;
        }
        if (v25)
        {
          uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v58 + 16))(v58, 16 * v25, 8);
          uint64_t v27 = (_OWORD *)(v26 + 16 * v23);
          uint64_t v28 = v26 + 16 * v25;
          if (v26)
          {
            uint64_t v29 = *((void *)&v52 + 1);
            _OWORD *v27 = v52;
            if (v29) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
            }
          }
        }
        else
        {
          uint64_t v28 = 0;
          uint64_t v27 = (_OWORD *)(16 * v23);
        }
        uint64_t v21 = v27 + 1;
        if (v19 == v22)
        {
          uint64_t v55 = v27;
          unint64_t v57 = v28;
          if (v19) {
            goto LABEL_64;
          }
        }
        else
        {
          uint64_t v30 = v19;
          do
          {
            long long v31 = *((_OWORD *)v30 - 1);
            v30 -= 2;
            *--uint64_t v27 = v31;
            void *v30 = 0;
            v30[1] = 0;
          }
          while (v30 != v22);
          uint64_t v55 = v27;
          id v56 = v21;
          unint64_t v57 = v28;
          do
          {
            int v32 = (std::__shared_weak_count *)*(v19 - 1);
            if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
            v19 -= 2;
          }
          while (v19 != v22);
          char v19 = v22;
          if (!v22) {
            goto LABEL_65;
          }
LABEL_64:
          (*(void (**)(uint64_t, void *, unint64_t))(*(void *)v58 + 40))(v58, v19, v18 - (void)v19);
        }
LABEL_65:
        id v56 = v21;
        goto LABEL_66;
      }
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      uint64_t v17 = v52;
      if ((void)v52) {
        goto LABEL_37;
      }
LABEL_66:
      int v33 = (std::__shared_weak_count *)*((void *)&v52 + 1);
      if (*((void *)&v52 + 1))
      {
        if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v52 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      uint64_t v8 = (v8 + 1);
    }
    unsigned __int8 v34 = (char *)v55;
    unsigned __int8 v35 = (char *)v56;
    if (v55 == v56)
    {
      uint64_t v7 = (*(uint64_t (**)(md::PointLabelFeature *, uint64_t))(*(void *)this + 752))(this, v7);
      int v37 = v34;
      if (v34) {
        goto LABEL_91;
      }
    }
    else
    {
      if (v35 - v34 == 16)
      {
          operator new();
        long long v50 = (md::CompositeLabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                             + 16))(mdm::Allocator::instance(void)::alloc, 840, 8);
        md::PointIconLabelPart::PointIconLabelPart((uint64_t)v50, v34, *(void *)a2, *((void *)a2 + 1), *((md::LabelStyle **)a2 + 2), v7);
        goto LABEL_85;
      }
        operator new();
      uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 760, 8);
      uint64_t v39 = *((void *)a2 + 2);
      uint64_t v40 = v38;
      uint64_t v41 = (void *)md::StackLabelPart::StackLabelPart(v38, 1);
      *uint64_t v41 = &unk_1EF53FAC8;
      md::LabelIconStyleMonitor::LabelIconStyleMonitor((uint64_t)(v41 + 87), v39);
      *(_DWORD *)(v40 + 752) = v7;
      *(unsigned char *)(v40 + 756) = 1;
      uint64_t v42 = v34;
      long long v50 = (md::CompositeLabelPart *)v40;
      *(unsigned char *)(v40 + 630) = 1;
      do
      {
        {
          operator new();
        }
        uint64_t v43 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                    + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
        double v44 = md::IconLabelPart::IconLabelPart((uint64_t)v43, v42);
        (*(void (**)(uint64_t, uint64_t, double))(*(void *)v45 + 176))(v45, 4, v44);
        md::CompositeLabelPart::addLabelPart(v40, v43);
        v42 += 16;
      }
      while (v42 != v35);
      if (v34)
      {
LABEL_85:
        id v46 = v35;
        do
        {
          unint64_t v47 = (std::__shared_weak_count *)*((void *)v46 - 1);
          if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
          v46 -= 16;
        }
        while (v46 != v34);
        int v37 = (char *)v55;
LABEL_91:
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v58 + 40))(v58, v37, v57 - (void)v37);
      }
    }
    char v48 = (std::__shared_weak_count *)v60;
    if (v60 && !atomic_fetch_add((atomic_ullong *volatile)(v60 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, char *))v48->__on_zero_shared)(v48, v37);
      std::__shared_weak_count::__release_weak(v48);
    }
    if (v34 != v35) {
      return v50;
    }
  }
  return v50;
}

void sub_1A27941E0(mdm::Allocator *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v31 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v31 + 40))(v31, a11, 840);
  std::vector<std::shared_ptr<ggl::VertexData>,geo::StdAllocator<std::shared_ptr<ggl::VertexData>,ggl::Allocator>>::~vector[abi:nn180100](&a19);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a23);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

float32x4_t md::PointLabelFeature::updateZoomRanks(float32x4_t *this)
{
  uint64_t v1 = this[31].i64[1];
  if (v1)
  {
    this[23].i32[0] = *(_DWORD *)(v1 + 80);
    uint64_t v2 = 76;
    if (!*(unsigned char *)(v1 + 112)) {
      uint64_t v2 = 72;
    }
    uint64_t v3 = (const float *)(v1 + v2);
    float32x4_t result = vld1q_dup_f32(v3);
    this[22] = result;
  }
  return result;
}

uint64_t md::PointLabelFeature::debugString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, char a4@<W3>, void *a5@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v226);
  uint64_t v213 = a3;
  LODWORD(v225.__r_.__value_.__l.__data_) = *a3;
  HIDWORD(v225.__r_.__value_.__r.__words[1]) = -1;
  *(std::string::size_type *)((char *)v225.__r_.__value_.__r.__words + 4) = -1;
  v225.__r_.__value_.__r.__words[2] = 0;
  uint64_t v217 = (uint64_t *)a1;
  md::LabelFeature::debugString((unsigned char *)a1, a2, (unsigned int *)&v225, a4, __p);
  if (SHIBYTE(__p[2]) >= 0) {
    char v9 = __p;
  }
  else {
    char v9 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v10 = HIBYTE(__p[2]);
  }
  else {
    uint64_t v10 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)v9, v10);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)" Point:\n", 8);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)"  layoutZ:", 10);
  std::ostream::operator<<();
  if (*(unsigned __int8 *)(a1 + 244) != 255)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)" flexZone=", 10);
    std::ostream::operator<<();
  }
  if (atomic_load((unsigned __int8 *)(a1 + 653)))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)" MZR Default=", 13);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)" Active(", 8);
    atomic_load((unsigned __int8 *)(a1 + 653));
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)")=", 2);
    (*(void (**)(uint64_t))(*(void *)a1 + 240))(a1);
    std::ostream::operator<<();
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)"\n", 1);
  if (*(unsigned char *)(a1 + 648))
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)"  venueID=", 10);
    uint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)" bldg=", 6);
    long long v14 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)" level=", 7);
    uint64_t v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)" floor=", 7);
    uint64_t v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n", 1);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)" positions=", 11);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)" Versions update=", 17);
  uint64_t v17 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)" remove=", 8);
  unint64_t v18 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)" [text]\n", 8);
  uint64_t v19 = *(void *)(a1 + 544);
  uint64_t v20 = *(void *)(a1 + 552);
  if (v19 != v20)
  {
    int v21 = 0;
    uint64_t v22 = v19 + 32;
    do
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)"   ", 3);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)": ", 2);
      int v23 = *(char *)(v22 - 9);
      if (v23 >= 0) {
        uint64_t v24 = v22 - 32;
      }
      else {
        uint64_t v24 = *(void *)(v22 - 32);
      }
      if (v23 >= 0) {
        uint64_t v25 = *(unsigned __int8 *)(v22 - 9);
      }
      else {
        uint64_t v25 = *(void *)(v22 - 24);
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, v24, v25);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)"(", 1);
      int v26 = *(char *)(v22 + 23);
      if (v26 >= 0) {
        uint64_t v27 = v22;
      }
      else {
        uint64_t v27 = *(void *)v22;
      }
      if (v26 >= 0) {
        uint64_t v28 = *(unsigned __int8 *)(v22 + 23);
      }
      else {
        uint64_t v28 = *(void *)(v22 + 8);
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, v27, v28);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)")\n", 2);
      ++v21;
      uint64_t v29 = v22 + 32;
      v22 += 64;
    }
    while (v29 != v20);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)" [placement]\n", 13);
  uint64_t v30 = *(void *)(a1 + 576);
  uint64_t v218 = *(void *)(a1 + 584);
  if (v30 != v218)
  {
    int v31 = 0;
    do
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)"   ", 3);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)": ", 2);
      if (*(void *)v30 == *(void *)(v30 + 8))
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)"<none>", 6);
      }
      else
      {
        LODWORD(v222) = v31;
        memset(__p, 0, sizeof(__p));
        {
          operator new();
        }
        uint64_t v224 = mdm::Allocator::instance(void)::alloc;
        int v32 = *(unsigned char **)v30;
        int v33 = *(unsigned char **)(v30 + 8);
        uint64_t v220 = v30;
        if (*(unsigned char **)v30 != v33)
        {
          char v34 = 1;
          while (2)
          {
            if (v34) {
              goto LABEL_73;
            }
            unsigned __int8 v35 = (char *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) >= 0) {
              size_t v36 = 22;
            }
            else {
              size_t v36 = ((unint64_t)__p[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
            }
            if (SHIBYTE(__p[2]) < 0) {
              unsigned __int8 v35 = (char *)__p[1];
            }
            if ((char *)v36 == v35)
            {
              if (v36 == 0x7FFFFFFFFFFFFFF6) {
                abort();
              }
              if (SHIBYTE(__p[2]) >= 0) {
                int v37 = __p;
              }
              else {
                int v37 = (void **)__p[0];
              }
              if (v36 + 1 > 2 * v36) {
                unint64_t v38 = v36 + 1;
              }
              else {
                unint64_t v38 = 2 * v36;
              }
              uint64_t v39 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v38 | 7) != 0x17) {
                uint64_t v39 = v38 | 7;
              }
              BOOL v69 = v38 >= 0x17;
              uint64_t v40 = 23;
              if (v69) {
                uint64_t v40 = v39 + 1;
              }
              if (v36 < 0x3FFFFFFFFFFFFFF3) {
                uint64_t v41 = v40;
              }
              else {
                uint64_t v41 = 0x7FFFFFFFFFFFFFF7;
              }
              uint64_t v42 = (unsigned char *)(*(uint64_t (**)(void))(*(void *)v224 + 16))();
              uint64_t v43 = v42;
              if (v36)
              {
                memmove(v42, v37, v36);
                v43[v36] = 32;
                uint64_t v44 = v36 + 1;
                if (v44 == 23)
                {
LABEL_71:
                  __p[1] = (void *)v44;
                  __p[2] = (void *)(v41 | 0x8000000000000000);
                  __p[0] = v43;
                  unint64_t v47 = &v43[v44];
                  goto LABEL_72;
                }
              }
              else
              {
                *uint64_t v42 = 32;
                uint64_t v44 = 1;
              }
              (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v224 + 40))(v224, v37, v44);
              goto LABEL_71;
            }
            if (SHIBYTE(__p[2]) >= 0) {
              uint64_t v45 = __p;
            }
            else {
              uint64_t v45 = (void **)__p[0];
            }
            v35[(void)v45] = 32;
            id v46 = v35 + 1;
            if (SHIBYTE(__p[2]) < 0) {
              __p[1] = v46;
            }
            else {
              HIBYTE(__p[2]) = v46 & 0x7F;
            }
            unint64_t v47 = &v46[(void)v45];
LABEL_72:
            char *v47 = 0;
LABEL_73:
            LabelPlacementToShortString(&v225, v32);
            char v48 = HIBYTE(v225.__r_.__value_.__r.__words[2]);
            if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string v49 = &v225;
            }
            else {
              std::string v49 = (std::string *)v225.__r_.__value_.__r.__words[0];
            }
            if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t size = HIBYTE(v225.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t size = v225.__r_.__value_.__l.__size_;
            }
            if (SHIBYTE(__p[2]) >= 0) {
              unint64_t v51 = 22;
            }
            else {
              unint64_t v51 = ((unint64_t)__p[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
            }
            if (SHIBYTE(__p[2]) >= 0) {
              size_t v52 = HIBYTE(__p[2]);
            }
            else {
              size_t v52 = (size_t)__p[1];
            }
            if (v51 - v52 < size)
            {
              unint64_t v53 = v52 + size;
              if (0x7FFFFFFFFFFFFFF6 - v51 < v52 + size - v51) {
                abort();
              }
              if (SHIBYTE(__p[2]) >= 0) {
                long long v54 = __p;
              }
              else {
                long long v54 = (void **)__p[0];
              }
              uint64_t v55 = 0x7FFFFFFFFFFFFFF7;
              if (v51 < 0x3FFFFFFFFFFFFFF3)
              {
                unint64_t v56 = 2 * v51;
                if (v53 > 2 * v51) {
                  unint64_t v56 = v52 + size;
                }
                uint64_t v57 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v56 | 7) != 0x17) {
                  uint64_t v57 = v56 | 7;
                }
                if (v56 >= 0x17) {
                  uint64_t v55 = v57 + 1;
                }
                else {
                  uint64_t v55 = 23;
                }
              }
              uint64_t v58 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v224 + 16))(v224, v55, 1);
              uint64_t v59 = v58;
              if (v52) {
                memmove(v58, v54, v52);
              }
              memmove(&v59[v52], v49, size);
              if (v51 != 22) {
                (*(void (**)(uint64_t, void **))(*(void *)v224 + 40))(v224, v54);
              }
              __p[1] = (void *)(v52 + size);
              __p[2] = (void *)(v55 | 0x8000000000000000);
              __p[0] = v59;
              uint64_t v60 = &v59[v53];
              goto LABEL_111;
            }
            if (size)
            {
              if (SHIBYTE(__p[2]) >= 0) {
                id v61 = __p;
              }
              else {
                id v61 = (void **)__p[0];
              }
              memmove((char *)v61 + v52, v49, size);
              size_t v62 = v52 + size;
              if (SHIBYTE(__p[2]) < 0) {
                __p[1] = (void *)(v52 + size);
              }
              else {
                HIBYTE(__p[2]) = v62 & 0x7F;
              }
              uint64_t v60 = (char *)v61 + v62;
LABEL_111:
              *uint64_t v60 = 0;
              char v48 = HIBYTE(v225.__r_.__value_.__r.__words[2]);
            }
            if (v48 < 0) {
              operator delete(v225.__r_.__value_.__l.__data_);
            }
            char v34 = 0;
            v32 += 5;
            if (v32 == v33) {
              break;
            }
            continue;
          }
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)"<", 1);
        int v31 = v222;
        if (SHIBYTE(__p[2]) >= 0) {
          uint64_t v63 = __p;
        }
        else {
          uint64_t v63 = (void **)__p[0];
        }
        if (SHIBYTE(__p[2]) >= 0) {
          uint64_t v64 = HIBYTE(__p[2]);
        }
        else {
          uint64_t v64 = (uint64_t)__p[1];
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)v63, v64);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)">", 1);
        uint64_t v30 = v220;
        if (SHIBYTE(__p[2]) < 0) {
          (*(void (**)(uint64_t, void *, unint64_t))(*(void *)v224 + 40))(v224, __p[0], (unint64_t)__p[2] & 0x7FFFFFFFFFFFFFFFLL);
        }
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)" clientAlternates:", 18);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)"\n", 1);
      ++v31;
      v30 += 32;
    }
    while (v30 != v218);
  }
  uint64_t v65 = v217[58];
  if (v65)
  {
    unsigned int v66 = *v213;
    long long v67 = v217 + 58;
    do
    {
      unsigned int v68 = *(_DWORD *)(v65 + 32);
      BOOL v69 = v68 >= v66;
      if (v68 >= v66) {
        int v70 = (uint64_t *)v65;
      }
      else {
        int v70 = (uint64_t *)(v65 + 8);
      }
      if (v69) {
        long long v67 = (uint64_t *)v65;
      }
      uint64_t v65 = *v70;
    }
    while (*v70);
    if (v67 != v217 + 58 && v66 >= *((_DWORD *)v67 + 8))
    {
      uint64_t v72 = v67[5];
      uint64_t v71 = v67[6];
      uint64_t v73 = v226[0];
      *(_DWORD *)((char *)&v226[1] + *(void *)(v226[0] - 24)) = *(_DWORD *)((unsigned char *)&v226[1]
                                                                              + *(void *)(v226[0] - 24)) & 0xFFFFFEFB | 4;
      *(void *)((char *)&v226[2] + *(void *)(v73 - 24)) = 2;
      if (!*((unsigned char *)v67 + 122))
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)" demElevation(", 14);
        size_t v74 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v74, (uint64_t)")=", 2);
        std::ostream::operator<<();
      }
      uint64_t v75 = v67[6];
      if (v67[5] != v75)
      {
        uint64_t v76 = *(void *)(v75 - 8);
        uint64_t v77 = v76 ? v76 + 8 : 0;
        if (*(float *)(v77 + 64) != 3.4028e38
          || *(unsigned char *)(v77 + 100)
          || *(unsigned char *)(v77 + 108)
          || *(float *)(v77 + 112) != 0.0)
        {
          operator new();
        }
      }
      uint64_t v78 = 0;
      unint64_t v79 = 0;
      unint64_t v80 = (v71 - v72) >> 3;
      while (1)
      {
        {
          operator new();
        }
        if (v79 >= v80) {
          break;
        }
        uint64_t v81 = *(void *)(v67[5] + 8 * v79);
        uint64_t v82 = v81 + 8;
        if (v81) {
          uint64_t v83 = v81 + 8;
        }
        else {
          uint64_t v83 = 0;
        }
        int v84 = *(unsigned __int8 *)(v83 + 130);
        if (*(unsigned __int8 *)(v81 + 138) == v84)
        {
          unint64_t v221 = v80;
          uint64_t v207 = v78;
          unint64_t v85 = 0;
          long long v86 = 0;
          uint64_t v87 = 0;
          uint64_t v211 = mdm::Allocator::instance(void)::alloc;
          int v88 = *(unsigned __int8 *)(v83 + 131);
          uint64_t v89 = *(void *)(v83 + 72);
          BOOL v219 = 1;
          uint64_t v208 = v217[54];
          int v210 = v88;
          uint64_t v214 = v89;
          while (*(void *)(v82 + 72) == v89)
          {
            unint64_t v222 = (unint64_t)v87;
            char v90 = *(unsigned char *)(v82 + 129);
            if ((unint64_t)v86 < v85)
            {
              if (v86) {
                unsigned char *v86 = v90;
              }
              uint64_t v87 = (unsigned char *)v222;
              goto LABEL_179;
            }
            unint64_t v91 = (unint64_t)&v86[-v222];
            uint64_t v92 = (uint64_t)&v86[-v222 + 1];
            if (v92 < 0) {
              abort();
            }
            unint64_t v93 = v85 - v222;
            if (2 * (v85 - v222) > v92) {
              uint64_t v92 = 2 * (v85 - v222);
            }
            if (v93 >= 0x3FFFFFFFFFFFFFFFLL) {
              uint64_t v94 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v94 = v92;
            }
            if (v94)
            {
              uint64_t v95 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v211 + 16))(v211, v94, 1);
              uint64_t v96 = (unsigned char *)(v95 + v91);
              uint64_t v97 = v95 + v94;
              if (v95) {
                *uint64_t v96 = v90;
              }
            }
            else
            {
              uint64_t v97 = 0;
              uint64_t v96 = &v86[-v222];
            }
            uint64_t v87 = v96;
            unint64_t v98 = v222;
            if (v86 != (unsigned char *)v222)
            {
              if (v91 < 0x30
                || &v96[v222 - (void)v86] > v96 - 1
                || v222 > (unint64_t)(v86 - 1)
                || (unint64_t)(v86 - v96) < 0x20)
              {
                uint64_t v99 = v86;
                uint64_t v87 = v96;
              }
              else
              {
                uint64_t v99 = &v86[-(v91 & 0xFFFFFFFFFFFFFFE0)];
                uint64_t v103 = v96 - 16;
                uint64_t v104 = (long long *)(v86 - 16);
                unint64_t v105 = v91 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v106 = *v104;
                  *(v103 - 1) = *(v104 - 1);
                  *uint64_t v103 = v106;
                  v103 -= 2;
                  v104 -= 2;
                  v105 -= 32;
                }
                while (v105);
                uint64_t v87 = &v96[-(v91 & 0xFFFFFFFFFFFFFFE0)];
                if (v91 == (v91 & 0xFFFFFFFFFFFFFFE0)) {
                  goto LABEL_176;
                }
              }
              do
              {
                char v100 = *--v99;
                *--uint64_t v87 = v100;
              }
              while (v99 != (unsigned char *)v98);
            }
LABEL_176:
            if (v98) {
              (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v211 + 40))(v211, v98, v93);
            }
            long long v86 = v96;
            unint64_t v85 = v97;
            int v88 = v210;
            uint64_t v89 = v214;
LABEL_179:
            ++v86;
            BOOL v219 = ++v79 < v221;
            if (v79 == v221)
            {
              unint64_t v79 = v221;
              break;
            }
            uint64_t v101 = *(void *)(v67[5] + 8 * v79);
            uint64_t v82 = v101 + 8;
            if (v101) {
              uint64_t v102 = v101 + 8;
            }
            else {
              uint64_t v102 = 0;
            }
            if (v88 != *(unsigned __int8 *)(v102 + 131) || *(unsigned __int8 *)(v101 + 138) != v84) {
              break;
            }
          }
          if (v87 != v86)
          {
            unint64_t v222 = (unint64_t)v87;
            unint64_t v206 = v85;
            if (v89 != v208)
            {
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)" [expired] vers=", 16);
              std::ostream::operator<<();
            }
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)" [element] Z:", 13);
            std::ostream::operator<<();
            uint64_t v107 = v87 + 1;
            unint64_t v212 = v79;
            for (uint64_t i = v86; v107 != v86; ++v107)
            {
              MEMORY[0x1A6238CF0](&v225, v226);
              if (v225.__r_.__value_.__s.__data_[0])
              {
                BOOL v108 = (char *)v226 + *(void *)(v226[0] - 24);
                uint64_t v109 = *((void *)v108 + 5);
                int v110 = *((_DWORD *)v108 + 2);
                int v111 = *((_DWORD *)v108 + 36);
                if (v111 == -1)
                {
                  std::ios_base::getloc((const std::ios_base *)((char *)v226 + *(void *)(v226[0] - 24)));
                  uint64_t v112 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
                  int v111 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v112->__vftable[2].~facet_0)(v112, 32);
                  std::locale::~locale((std::locale *)__p);
                  *((_DWORD *)v108 + 36) = v111;
                  long long v86 = i;
                }
                if ((v110 & 0xB0) == 0x20) {
                  long long v113 = "";
                }
                else {
                  long long v113 = ",";
                }
                if (!v109) {
                  goto LABEL_227;
                }
                uint64_t v114 = *((void *)v108 + 3);
                BOOL v115 = v114 <= 1;
                uint64_t v116 = v114 - 1;
                size_t v117 = v115 ? 0 : v116;
                uint64_t v118 = v113 - ",";
                if (v113 - "," >= 1)
                {
                  unint64_t v119 = v113;
                  uint64_t v120 = (*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(void *)v109 + 96))(v109, ",", v118);
                  long long v113 = v119;
                  long long v86 = i;
                  if (v120 != v118) {
                    goto LABEL_227;
                  }
                }
                if ((uint64_t)v117 >= 1)
                {
                  if (v117 > 0x7FFFFFFFFFFFFFF7) {
                    abort();
                  }
                  uint64_t v209 = v113;
                  if (v117 >= 0x17)
                  {
                    uint64_t v122 = (v117 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v117 | 7) != 0x17) {
                      uint64_t v122 = v117 | 7;
                    }
                    uint64_t v123 = v122 + 1;
                    char v121 = operator new(v122 + 1);
                    __p[1] = (void *)v117;
                    __p[2] = (void *)(v123 | 0x8000000000000000);
                    __p[0] = v121;
                    long long v86 = i;
                  }
                  else
                  {
                    HIBYTE(__p[2]) = v117;
                    char v121 = __p;
                  }
                  memset(v121, v111, v117);
                  *((unsigned char *)v121 + v117) = 0;
                  if (SHIBYTE(__p[2]) >= 0) {
                    char v124 = __p;
                  }
                  else {
                    char v124 = (void **)__p[0];
                  }
                  uint64_t v125 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(void *)v109 + 96))(v109, v124, v117);
                  uint64_t v126 = v125;
                  long long v113 = v209;
                  if (SHIBYTE(__p[2]) < 0)
                  {
                    operator delete(__p[0]);
                    long long v113 = v209;
                    if (v126 != v117) {
                      goto LABEL_227;
                    }
                  }
                  else if (v125 != v117)
                  {
                    goto LABEL_227;
                  }
                }
                uint64_t v127 = "," - v113 + 1;
                if (v127 >= 1)
                {
                  long long v86 = i;
                  if ((*(uint64_t (**)(uint64_t))(*(void *)v109 + 96))(v109) != v127)
                  {
LABEL_227:
                    uint64_t v87 = (unsigned char *)v222;
                    std::ios_base::clear((std::ios_base *)((char *)v226 + *(void *)(v226[0] - 24)), *(_DWORD *)((char *)&v227[1] + *(void *)(v226[0] - 24)) | 5);
                    unint64_t v79 = v212;
                    goto LABEL_228;
                  }
                }
                *((void *)v108 + 3) = 0;
                uint64_t v87 = (unsigned char *)v222;
                unint64_t v79 = v212;
              }
LABEL_228:
              MEMORY[0x1A6238D00](&v225);
              std::ostream::operator<<();
            }
            unint64_t v85 = v206;
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)" text:", 6);
            std::ostream::operator<<();
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)" placement:", 11);
            std::ostream::operator<<();
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)"\n", 1);
          }
          if (v87) {
            (*(void (**)(uint64_t, unsigned char *, unint64_t))(*(void *)v211 + 40))(v211, v87, v85 - (void)v87);
          }
          uint64_t v78 = v207;
          unint64_t v80 = v221;
          if (!v219) {
            break;
          }
        }
      }
    }
  }
  uint64_t v128 = v217[10];
  if (v128 && *(unsigned char *)(v128 + 125) && *(unsigned __int8 *)(v128 + 136) != 255)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)" [style]", 8);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)" <icon>", 7);
    uint64_t v129 = v217[10];
    uint64_t v130 = *(void *)(v129 + 296);
    if (!v130)
    {
      uint64_t v131 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v217[10], 0);
      uint64_t v130 = *v131;
      *(void *)(v129 + 296) = *v131;
    }
    switch(*(unsigned char *)(v130 + 88))
    {
      case 0:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 5;
        strcpy((char *)&v225, "Basic");
        break;
      case 1:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 9;
        LOWORD(v225.__r_.__value_.__r.__words[1]) = 101;
        std::string v132 = "POICircle";
        goto LABEL_251;
      case 2:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 8;
        std::string::size_type v134 = 0x6B72616D646E614CLL;
        goto LABEL_249;
      case 3:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 19;
        strcpy((char *)&v225, "POISmall_DEPRECATED");
        break;
      case 4:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 9;
        LOWORD(v225.__r_.__value_.__r.__words[1]) = 101;
        std::string v132 = "POISquare";
LABEL_251:
        v225.__r_.__value_.__r.__words[0] = *(void *)v132;
        break;
      case 5:
        v225.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
        *(_OWORD *)&v225.__r_.__value_.__r.__words[1] = xmmword_1A28FCDB0;
        strcpy(v225.__r_.__value_.__l.__data_, "POIRectangle_DEPRECATED");
        break;
      case 6:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 11;
        *(_DWORD *)((char *)v225.__r_.__value_.__r.__words + 7) = 1819044176;
        long long v133 = "TransitPill";
        goto LABEL_254;
      case 7:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 8;
        std::string::size_type v134 = 0x494F5069746C754DLL;
LABEL_249:
        v225.__r_.__value_.__r.__words[0] = v134;
        v225.__r_.__value_.__s.__data_[8] = 0;
        break;
      case 8:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 10;
        strcpy((char *)&v225, "POIBalloon");
        break;
      case 9:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 11;
        *(_DWORD *)((char *)v225.__r_.__value_.__r.__words + 7) = 1852798068;
        long long v133 = "VenueButton";
LABEL_254:
        v225.__r_.__value_.__r.__words[0] = *(void *)v133;
        v225.__r_.__value_.__s.__data_[11] = 0;
        break;
      case 0xA:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 16;
        strcpy((char *)&v225, "SelectionBalloon");
        break;
      case 0xB:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 4;
        strcpy((char *)&v225, "Ring");
        break;
      default:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 0;
        v225.__r_.__value_.__s.__data_[0] = 0;
        break;
    }
    uint64_t v135 = std::string::insert(&v225, 0, " style:", 7uLL);
    long long v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
    __p[2] = (void *)v135->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v136;
    v135->__r_.__value_.__l.__size_ = 0;
    v135->__r_.__value_.__r.__words[2] = 0;
    v135->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) >= 0) {
      uint64_t v137 = __p;
    }
    else {
      uint64_t v137 = (void **)__p[0];
    }
    if (SHIBYTE(__p[2]) >= 0) {
      uint64_t v138 = HIBYTE(__p[2]);
    }
    else {
      uint64_t v138 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)v137, v138);
    if (SHIBYTE(__p[2]) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v225.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_266;
      }
    }
    else if ((SHIBYTE(v225.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_266;
    }
    operator delete(v225.__r_.__value_.__l.__data_);
LABEL_266:
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)" textSource:", 12);
    uint64_t v139 = v217[10];
    uint64_t v140 = *(void *)(v139 + 296);
    if (!v140)
    {
      float32x2_t v141 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v217[10], 0);
      uint64_t v140 = *v141;
      *(void *)(v139 + 296) = *v141;
    }
    switch(*(unsigned char *)(v140 + 90))
    {
      case 0:
        uint64_t v142 = 7;
        HIBYTE(__p[2]) = 7;
        strcpy((char *)__p, "Default");
        break;
      case 1:
        uint64_t v142 = 4;
        HIBYTE(__p[2]) = 4;
        strcpy((char *)__p, "None");
        break;
      case 2:
        uint64_t v142 = 8;
        HIBYTE(__p[2]) = 8;
        strcpy((char *)__p, "TypeMain");
        break;
      case 3:
        uint64_t v142 = 11;
        HIBYTE(__p[2]) = 11;
        *(_DWORD *)((char *)__p + 7) = 1701734732;
        float v144 = "TransitLine";
        goto LABEL_284;
      case 4:
        uint64_t v142 = 13;
        HIBYTE(__p[2]) = 13;
        strcpy((char *)__p, "TransitSystem");
        break;
      case 5:
        uint64_t v142 = 14;
        HIBYTE(__p[2]) = 14;
        strcpy((char *)__p, "TextAnnotation");
        break;
      case 6:
        uint64_t v142 = 17;
        HIBYTE(__p[2]) = 17;
        strcpy((char *)__p, "GraphicAnnotation");
        break;
      case 7:
        uint64_t v142 = 9;
        HIBYTE(__p[2]) = 9;
        strcpy((char *)__p, "ImageText");
        break;
      case 8:
        uint64_t v142 = 11;
        HIBYTE(__p[2]) = 11;
        *(_DWORD *)((char *)__p + 7) = 1852798068;
        float v144 = "VenueButton";
LABEL_284:
        __p[0] = *(void **)v144;
        BYTE3(__p[1]) = 0;
        break;
      case 9:
        uint64_t v142 = 12;
        HIBYTE(__p[2]) = 12;
        strcpy((char *)__p, "PrimaryChild");
        break;
      case 0xA:
        uint64_t v142 = 18;
        HIBYTE(__p[2]) = 18;
        LOWORD(__p[2]) = 12654;
        float32x2_t v143 = "FeatureAnnotation1";
        goto LABEL_282;
      case 0xB:
        uint64_t v142 = 18;
        HIBYTE(__p[2]) = 18;
        LOWORD(__p[2]) = 12910;
        float32x2_t v143 = "FeatureAnnotation2";
LABEL_282:
        *(_OWORD *)std::string __p = *(_OWORD *)v143;
        BYTE2(__p[2]) = 0;
        break;
      default:
        uint64_t v142 = 0;
        HIBYTE(__p[2]) = 0;
        LOBYTE(__p[0]) = 0;
        break;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)__p, v142);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v145 = v217[10];
    uint64_t v146 = *(void *)(v145 + 296);
    if (!v146)
    {
      uint64_t v147 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v217[10], 0);
      uint64_t v146 = *v147;
      *(void *)(v145 + 296) = *v147;
    }
    switch(*(unsigned char *)(v146 + 92))
    {
      case 0:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 7;
        LODWORD(v225.__r_.__value_.__l.__data_) = 1634100548;
        int v148 = 1953264993;
        goto LABEL_303;
      case 1:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 5;
        strcpy((char *)&v225, "Small");
        break;
      case 2:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 5;
        strcpy((char *)&v225, "Large");
        break;
      case 3:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 6;
        LODWORD(v225.__r_.__value_.__l.__data_) = 1634554712;
        __int16 v149 = 27756;
        goto LABEL_305;
      case 4:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 6;
        LODWORD(v225.__r_.__value_.__l.__data_) = 1918979160;
        __int16 v149 = 25959;
        goto LABEL_305;
      case 5:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 7;
        LODWORD(v225.__r_.__value_.__l.__data_) = 1834178648;
        int v148 = 1819042157;
        goto LABEL_303;
      case 6:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 7;
        LODWORD(v225.__r_.__value_.__l.__data_) = 1632393304;
        int v148 = 1701278305;
LABEL_303:
        *(_DWORD *)((char *)v225.__r_.__value_.__r.__words + 3) = v148;
        v225.__r_.__value_.__s.__data_[7] = 0;
        break;
      case 7:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 8;
        std::string::size_type v150 = 0x656772614C585858;
        goto LABEL_299;
      case 8:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 6;
        LODWORD(v225.__r_.__value_.__l.__data_) = 1768187213;
        __int16 v149 = 28021;
LABEL_305:
        WORD2(v225.__r_.__value_.__r.__words[0]) = v149;
        v225.__r_.__value_.__s.__data_[6] = 0;
        break;
      case 9:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 8;
        std::string::size_type v150 = 0x6C6C616D53585858;
LABEL_299:
        v225.__r_.__value_.__r.__words[0] = v150;
        v225.__r_.__value_.__s.__data_[8] = 0;
        break;
      default:
        if (*(unsigned __int8 *)(v146 + 92) == 255)
        {
          *((unsigned char *)&v225.__r_.__value_.__s + 23) = 4;
          strcpy((char *)&v225, "None");
        }
        else
        {
          *((unsigned char *)&v225.__r_.__value_.__s + 23) = 0;
          v225.__r_.__value_.__s.__data_[0] = 0;
        }
        break;
    }
    unint64_t v151 = std::string::insert(&v225, 0, " size:", 6uLL);
    long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
    __p[2] = (void *)v151->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v152;
    v151->__r_.__value_.__l.__size_ = 0;
    v151->__r_.__value_.__r.__words[2] = 0;
    v151->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) >= 0) {
      uint64_t v153 = __p;
    }
    else {
      uint64_t v153 = (void **)__p[0];
    }
    if (SHIBYTE(__p[2]) >= 0) {
      uint64_t v154 = HIBYTE(__p[2]);
    }
    else {
      uint64_t v154 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)v153, v154);
    if (SHIBYTE(__p[2]) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v225.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_315;
      }
    }
    else if ((SHIBYTE(v225.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_315;
    }
    operator delete(v225.__r_.__value_.__l.__data_);
LABEL_315:
    float v155 = md::LabelStyle::iconContentScale((md::LabelStyle *)v217[10]);
    uint64_t v156 = v217[10];
    if (v155 != *(float *)(v156 + 88))
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)" scale:", 7);
      uint64_t v157 = v226[0];
      *(_DWORD *)((char *)&v226[1] + *(void *)(v226[0] - 24)) = *(_DWORD *)((unsigned char *)&v226[1]
                                                                              + *(void *)(v226[0] - 24)) & 0xFFFFFEFB | 4;
      *(void *)((char *)&v226[2] + *(void *)(v157 - 24)) = 1;
      md::LabelStyle::iconContentScale((md::LabelStyle *)v217[10]);
      std::ostream::operator<<();
      uint64_t v156 = v217[10];
    }
    uint64_t v158 = *(void *)(v156 + 296);
    if (v158)
    {
      if (!*(_DWORD *)(v158 + 68)) {
        goto LABEL_326;
      }
    }
    else
    {
      uint64_t v159 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v156, 0);
      uint64_t v160 = *v159;
      *(void *)(v156 + 296) = *v159;
      if (!*(_DWORD *)(v160 + 68)) {
        goto LABEL_326;
      }
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)" MSrcKey:", 9);
    uint64_t v161 = v217[10];
    if (!*(void *)(v161 + 296)) {
      *(void *)(v161 + 296) = *(void *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v217[10], 0);
    }
    std::ostream::operator<<();
LABEL_326:
    uint64_t v162 = v217[10];
    uint64_t v163 = *(void *)(v162 + 296);
    if (v163)
    {
      if (!*(_DWORD *)(v163 + 64)) {
        goto LABEL_333;
      }
    }
    else
    {
      long long v164 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v217[10], 0);
      uint64_t v165 = *v164;
      *(void *)(v162 + 296) = *v164;
      if (!*(_DWORD *)(v165 + 64)) {
        goto LABEL_333;
      }
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)" srcKey:", 8);
    uint64_t v166 = v217[10];
    if (!*(void *)(v166 + 296)) {
      *(void *)(v166 + 296) = *(void *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v217[10], 0);
    }
    std::ostream::operator<<();
LABEL_333:
    uint64_t v167 = v217[10];
    uint64_t v168 = *(void *)(v167 + 272);
    if (v168)
    {
      int v169 = *(char *)(v168 + 103);
      if ((v169 & 0x80000000) == 0) {
        goto LABEL_335;
      }
    }
    else
    {
      float64x2_t v170 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(v217[10]);
      uint64_t v168 = *v170;
      *(void *)(v167 + 272) = *v170;
      int v169 = *(char *)(v168 + 103);
      if ((v169 & 0x80000000) == 0)
      {
LABEL_335:
        if (!(_BYTE)v169) {
          goto LABEL_348;
        }
        goto LABEL_339;
      }
    }
    if (!*(void *)(v168 + 88)) {
      goto LABEL_348;
    }
LABEL_339:
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)" name:", 6);
    uint64_t v171 = v217[10];
    uint64_t v172 = *(void *)(v171 + 272);
    if (!v172)
    {
      long long v173 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(v217[10]);
      uint64_t v172 = *v173;
      *(void *)(v171 + 272) = *v173;
    }
    uint64_t v176 = *(void *)(v172 + 80);
    uint64_t v174 = v172 + 80;
    uint64_t v175 = v176;
    int v177 = *(char *)(v174 + 23);
    if (v177 >= 0) {
      uint64_t v178 = v174;
    }
    else {
      uint64_t v178 = v175;
    }
    if (v177 >= 0) {
      uint64_t v179 = *(unsigned __int8 *)(v174 + 23);
    }
    else {
      uint64_t v179 = *(void *)(v174 + 8);
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, v178, v179);
LABEL_348:
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)"\n", 1);
    int v180 = *(unsigned __int8 *)(v217[10] + 144);
    switch(*(unsigned char *)(v217[10] + 144))
    {
      case 0:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 7;
        strcpy((char *)&v225, "Default");
        break;
      case 1:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 4;
        strcpy((char *)&v225, "None");
        break;
      case 2:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 8;
        strcpy((char *)&v225, "TypeMain");
        break;
      case 3:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 11;
        *(_DWORD *)((char *)v225.__r_.__value_.__r.__words + 7) = 1701734732;
        float v182 = "TransitLine";
        goto LABEL_362;
      case 4:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 13;
        strcpy((char *)&v225, "TransitSystem");
        break;
      case 5:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 14;
        strcpy((char *)&v225, "TextAnnotation");
        break;
      case 6:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 17;
        strcpy((char *)&v225, "GraphicAnnotation");
        break;
      case 7:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 9;
        strcpy((char *)&v225, "ImageText");
        break;
      case 8:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 11;
        *(_DWORD *)((char *)v225.__r_.__value_.__r.__words + 7) = 1852798068;
        float v182 = "VenueButton";
LABEL_362:
        v225.__r_.__value_.__r.__words[0] = *(void *)v182;
        v225.__r_.__value_.__s.__data_[11] = 0;
        break;
      case 9:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 12;
        strcpy((char *)&v225, "PrimaryChild");
        break;
      case 0xA:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 18;
        LOWORD(v225.__r_.__value_.__r.__words[2]) = 12654;
        uint64_t v181 = "FeatureAnnotation1";
        goto LABEL_360;
      case 0xB:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 18;
        LOWORD(v225.__r_.__value_.__r.__words[2]) = 12910;
        uint64_t v181 = "FeatureAnnotation2";
LABEL_360:
        *(_OWORD *)&v225.__r_.__value_.__l.__data_ = *(_OWORD *)v181;
        v225.__r_.__value_.__s.__data_[18] = 0;
        break;
      default:
        *((unsigned char *)&v225.__r_.__value_.__s + 23) = 0;
        v225.__r_.__value_.__s.__data_[0] = 0;
        break;
    }
    long long v183 = std::string::insert(&v225, 0, "  <text> source:", 0x10uLL);
    long long v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
    __p[2] = (void *)v183->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v184;
    v183->__r_.__value_.__l.__size_ = 0;
    v183->__r_.__value_.__r.__words[2] = 0;
    v183->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) >= 0) {
      long long v185 = __p;
    }
    else {
      long long v185 = (void **)__p[0];
    }
    if (SHIBYTE(__p[2]) >= 0) {
      uint64_t v186 = HIBYTE(__p[2]);
    }
    else {
      uint64_t v186 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)v185, v186);
    if (SHIBYTE(__p[2]) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v225.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_372;
      }
    }
    else if ((SHIBYTE(v225.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_372:
      BOOL v188 = (*(unsigned char *)(v217[10] + 250) & 0x10) == 0 && v180 != 6;
      if ((*(unsigned char *)(v217[10] + 250) & 8) != 0 || !v188)
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)" shieldThreshold:", 17);
        std::ostream::operator<<();
        if (!v188)
        {
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)" icon-size:", 11);
          uint64_t v189 = v217[10];
          uint64_t v190 = *(void *)(v189 + 296);
          if (!v190)
          {
            int v191 = (uint64_t *)md::LabelStyle::prepareStyleGroup<md::LabelIconStyleGroup>(v217[10], 0);
            uint64_t v190 = *v191;
            *(void *)(v189 + 296) = *v191;
          }
          switch(*(unsigned char *)(v190 + 93))
          {
            case 0:
              uint64_t v192 = 7;
              HIBYTE(__p[2]) = 7;
              LODWORD(__p[0]) = 1634100548;
              int v193 = 1953264993;
              goto LABEL_398;
            case 1:
              uint64_t v192 = 5;
              HIBYTE(__p[2]) = 5;
              strcpy((char *)__p, "Small");
              break;
            case 2:
              uint64_t v192 = 5;
              HIBYTE(__p[2]) = 5;
              strcpy((char *)__p, "Large");
              break;
            case 3:
              uint64_t v192 = 6;
              HIBYTE(__p[2]) = 6;
              LODWORD(__p[0]) = 1634554712;
              __int16 v194 = 27756;
              goto LABEL_400;
            case 4:
              uint64_t v192 = 6;
              HIBYTE(__p[2]) = 6;
              LODWORD(__p[0]) = 1918979160;
              __int16 v194 = 25959;
              goto LABEL_400;
            case 5:
              uint64_t v192 = 7;
              HIBYTE(__p[2]) = 7;
              LODWORD(__p[0]) = 1834178648;
              int v193 = 1819042157;
              goto LABEL_398;
            case 6:
              uint64_t v192 = 7;
              HIBYTE(__p[2]) = 7;
              LODWORD(__p[0]) = 1632393304;
              int v193 = 1701278305;
LABEL_398:
              *(_DWORD *)((char *)__p + 3) = v193;
              HIBYTE(__p[0]) = 0;
              break;
            case 7:
              uint64_t v192 = 8;
              HIBYTE(__p[2]) = 8;
              uint64_t v195 = 0x656772614C585858;
              goto LABEL_394;
            case 8:
              uint64_t v192 = 6;
              HIBYTE(__p[2]) = 6;
              LODWORD(__p[0]) = 1768187213;
              __int16 v194 = 28021;
LABEL_400:
              WORD2(__p[0]) = v194;
              BYTE6(__p[0]) = 0;
              break;
            case 9:
              uint64_t v192 = 8;
              HIBYTE(__p[2]) = 8;
              uint64_t v195 = 0x6C6C616D53585858;
LABEL_394:
              __p[0] = (void *)v195;
              LOBYTE(__p[1]) = 0;
              break;
            default:
              if (*(unsigned __int8 *)(v190 + 93) == 255)
              {
                uint64_t v192 = 4;
                HIBYTE(__p[2]) = 4;
                strcpy((char *)__p, "None");
              }
              else
              {
                uint64_t v192 = 0;
                HIBYTE(__p[2]) = 0;
                LOBYTE(__p[0]) = 0;
              }
              break;
          }
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)__p, v192);
          if (SHIBYTE(__p[2]) < 0) {
            operator delete(__p[0]);
          }
        }
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v226, (uint64_t)"\n", 1);
      goto LABEL_405;
    }
    operator delete(v225.__r_.__value_.__l.__data_);
    goto LABEL_372;
  }
LABEL_405:
  if ((v233 & 0x10) != 0)
  {
    unint64_t v198 = v232;
    if (v232 < v229)
    {
      unint64_t v232 = v229;
      unint64_t v198 = v229;
    }
    long long v199 = (const void **)&v228;
  }
  else
  {
    if ((v233 & 8) == 0)
    {
      size_t v196 = 0;
      long long v197 = a5;
      *((unsigned char *)a5 + 23) = 0;
      goto LABEL_420;
    }
    long long v199 = (const void **)v227;
    unint64_t v198 = v227[2];
  }
  long long v200 = *v199;
  size_t v196 = v198 - (void)*v199;
  if (v196 > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  if (v196 >= 0x17)
  {
    uint64_t v201 = (v196 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v196 | 7) != 0x17) {
      uint64_t v201 = v196 | 7;
    }
    uint64_t v202 = v201 + 1;
    long long v197 = operator new(v201 + 1);
    a5[1] = v196;
    a5[2] = v202 | 0x8000000000000000;
    *a5 = v197;
    goto LABEL_419;
  }
  long long v197 = a5;
  *((unsigned char *)a5 + 23) = v196;
  if (v196)
  {
LABEL_419:
    long long v203 = v200;
    long long v204 = v197;
    memmove(v197, v203, v196);
    long long v197 = v204;
  }
LABEL_420:
  *((unsigned char *)v197 + v196) = 0;
  v226[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v226 + *(void *)(v226[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v226[1] = MEMORY[0x1E4FBA470] + 16;
  if (v231 < 0) {
    operator delete(v230);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v234);
}

void sub_1A2796610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35)
{
}

uint64_t md::PointLabelFeature::newPoint(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 464);
  if (!v3) {
    return 0;
  }
  unsigned int v4 = *a2;
  uint64_t v5 = a1 + 464;
  do
  {
    unsigned int v6 = *(_DWORD *)(v3 + 32);
    BOOL v7 = v6 >= v4;
    if (v6 >= v4) {
      uint64_t v8 = (uint64_t *)v3;
    }
    else {
      uint64_t v8 = (uint64_t *)(v3 + 8);
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 == a1 + 464 || v4 < *(_DWORD *)(v5 + 32)) {
    return 0;
  }
  if (*(unsigned char *)(v5 + 122))
  {
    *(void *)(v5 + 72) = *(void *)a3;
    *(void *)(v5 + 80) = *(void *)(a3 + 8);
    *(void *)(v5 + 88) = *(void *)(a3 + 16);
    *(void *)(v5 + 96) = *(void *)(a3 + 24);
    *(void *)(v5 + 104) = *(void *)(a3 + 32);
    int v10 = *(_DWORD *)(a3 + 40);
    *(_DWORD *)(v5 + 115) = *(_DWORD *)(a3 + 43);
    *(_DWORD *)(v5 + 112) = v10;
  }
  else
  {
    int v11 = *(_DWORD *)(v5 + 112);
    *(void *)(v5 + 72) = *(void *)a3;
    *(void *)(v5 + 80) = *(void *)(a3 + 8);
    *(void *)(v5 + 88) = *(void *)(a3 + 16);
    *(void *)(v5 + 96) = *(void *)(a3 + 24);
    *(void *)(v5 + 104) = *(void *)(a3 + 32);
    int v12 = *(_DWORD *)(a3 + 40);
    *(_DWORD *)(v5 + 115) = *(_DWORD *)(a3 + 43);
    *(_DWORD *)(v5 + 112) = v12;
    *(_DWORD *)(v5 + 112) = v11;
  }
  return 1;
}

void md::PointLabelFeature::updateText(md::PointLabelFeature **this, const void *a2, char a3)
{
  md::PointLabelFeature::updatePositions((md::PointLabelFeature *)this);
  *((unsigned char *)this + 649) = a3;
  uint64_t v5 = this[69];
  unsigned int v6 = this[68];
  while (v5 != v6)
  {
    if (*((char *)v5 - 9) < 0)
    {
      (*(void (**)(void, void, uint64_t))(**((void **)v5 - 1) + 40))(*((void *)v5 - 1), *((void *)v5 - 4), *((void *)v5 - 2) & 0x7FFFFFFFFFFFFFFFLL);
      if ((*((char *)v5 - 41) & 0x80000000) == 0) {
        goto LABEL_2;
      }
    }
    else if ((*((char *)v5 - 41) & 0x80000000) == 0)
    {
      goto LABEL_2;
    }
    (*(void (**)(void, void, uint64_t))(**((void **)v5 - 5) + 40))(*((void *)v5 - 5), *((void *)v5 - 8), *((void *)v5 - 6) & 0x7FFFFFFFFFFFFFFFLL);
LABEL_2:
    uint64_t v5 = (md::PointLabelFeature *)((char *)v5 - 64);
  }
  this[69] = v6;
  BOOL v7 = this[57];
  if (v7 != (md::PointLabelFeature *)(this + 58))
  {
    do
    {
      uint64_t v8 = (uint64_t *)*((void *)v7 + 5);
      char v9 = (uint64_t *)*((void *)v7 + 6);
      if (v8 != v9)
      {
        int v10 = *((unsigned __int8 *)this + 649);
        do
        {
          uint64_t v11 = *v8++;
          unint64_t v12 = v11 + 8;
          if (v11) {
            unint64_t v13 = v12;
          }
          else {
            unint64_t v13 = 0;
          }
          md::PointLabelFeatureElement::updateText(v13, (const md::PointLabelFeature *)this, v10 != 0);
        }
        while (v8 != v9);
      }
      long long v14 = (md::PointLabelFeature *)*((void *)v7 + 1);
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          long long v14 = *(md::PointLabelFeature **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (md::PointLabelFeature *)*((void *)v7 + 2);
          BOOL v16 = *(void *)v15 == (void)v7;
          BOOL v7 = v15;
        }
        while (!v16);
      }
      BOOL v7 = v15;
    }
    while (v15 != (md::PointLabelFeature *)(this + 58));
  }
}

void geo::StdAllocator<md::PointLabelFeature::WorkUnit,mdm::Allocator>::destroy(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    uint64_t v3 = *(void **)(a1 + 8);
    if (v3)
    {
      if ((*v3)-- == 1)
      {
        uint64_t v5 = (std::__shared_weak_count *)v3[3];
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        {
            operator new();
        }
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, *(void *)(a1 + 8), 152);
        *(void *)(a1 + 8) = 0;
      }
    }
  }
}

uint64_t *std::vector<md::PointLabelFeature::WorkUnit,geo::StdAllocator<md::PointLabelFeature::WorkUnit,mdm::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v3 -= 48;
        geo::StdAllocator<md::PointLabelFeature::WorkUnit,mdm::Allocator>::destroy(v3);
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

uint64_t *std::vector<md::LabelFeaturePlacementInfo,geo::StdAllocator<md::LabelFeaturePlacementInfo,mdm::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = a1[1];
      do
      {
        BOOL v7 = *(void **)(v5 - 32);
        v5 -= 32;
        unsigned int v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 24) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

uint64_t *std::vector<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,geo::StdAllocator<md::StringWithLocaleImp<std::basic_string<char,std::char_traits<char>,geo::StdAllocator<char,mdm::Allocator>>>,mdm::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
      return a1;
    }
    while (1)
    {
      if (*(char *)(v3 - 9) < 0)
      {
        (*(void (**)(void, void, uint64_t))(**(void **)(v3 - 8) + 40))(*(void *)(v3 - 8), *(void *)(v3 - 32), *(void *)(v3 - 16) & 0x7FFFFFFFFFFFFFFFLL);
        if (*(char *)(v3 - 41) < 0) {
LABEL_9:
        }
          (*(void (**)(void, void, uint64_t))(**(void **)(v3 - 40) + 40))(*(void *)(v3 - 40), *(void *)(v3 - 64), *(void *)(v3 - 48) & 0x7FFFFFFFFFFFFFFFLL);
      }
      else if (*(char *)(v3 - 41) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 64;
      if (v3 == v2)
      {
        uint64_t v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void md::PointLabelFeature::setPOIUpdateRemoveVersion(md::PointLabelFeature *this, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)((char *)this + 248);
  std::mutex::lock((std::mutex *)((char *)this + 248));
  unint64_t v5 = *((void *)this + 41);
  unint64_t v6 = *((void *)this + 42);
  if (v5 < v6)
  {
    if (v5)
    {
      *(unsigned char *)unint64_t v5 = 2;
      *(void *)(v5 + 16) = 0;
      *(void *)(v5 + 24) = 0;
      *(void *)(v5 + 8) = 0;
      *(unsigned char *)(v5 + 32) = 0;
      *(void *)(v5 + 40) = a2;
    }
    uint64_t v7 = v5 + 48;
    goto LABEL_22;
  }
  uint64_t v8 = *((void *)this + 40);
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v8) >> 4);
  unint64_t v10 = v9 + 1;
  if (v9 + 1 > 0x555555555555555) {
    abort();
  }
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v8) >> 4);
  if (2 * v11 > v10) {
    unint64_t v10 = 2 * v11;
  }
  if (v11 >= 0x2AAAAAAAAAAAAAALL) {
    uint64_t v12 = 0x555555555555555;
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    uint64_t v13 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 43) + 16))(*((void *)this + 43), 48 * v12, 8);
    uint64_t v14 = v13 + 48 * v9;
    uint64_t v15 = v13 + 48 * v12;
    if (v13)
    {
      *(unsigned char *)uint64_t v14 = 2;
      unint64_t v16 = v13 + 48 * v9;
      *(void *)(v16 + 16) = 0;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 8) = 0;
      *(unsigned char *)(v16 + 32) = 0;
      *(void *)(v16 + 40) = a2;
    }
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v14 = 48 * v9;
  }
  uint64_t v7 = v14 + 48;
  uint64_t v17 = *((void *)this + 40);
  uint64_t v18 = *((void *)this + 41);
  if (v18 == v17)
  {
    *((void *)this + 40) = v14;
    *((void *)this + 41) = v7;
    uint64_t v23 = *((void *)this + 42);
    *((void *)this + 42) = v15;
    if (!v18) {
      goto LABEL_22;
    }
LABEL_21:
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 43) + 40))(*((void *)this + 43), v18, v23 - v18);
    goto LABEL_22;
  }
  uint64_t v19 = 0;
  do
  {
    uint64_t v20 = v14 + v19;
    uint64_t v21 = v18 + v19;
    *(unsigned char *)(v20 - 48) = *(unsigned char *)(v18 + v19 - 48);
    *(void *)(v20 - 40) = 0;
    *(_OWORD *)(v20 - 40) = *(_OWORD *)(v18 + v19 - 40);
    *(void *)(v20 - 24) = *(void *)(v18 + v19 - 24);
    *(void *)(v21 - 32) = 0;
    *(void *)(v21 - 24) = 0;
    *(void *)(v21 - 40) = 0;
    *(_OWORD *)(v20 - 16) = *(_OWORD *)(v18 + v19 - 16);
    v19 -= 48;
  }
  while (v18 + v19 != v17);
  uint64_t v18 = *((void *)this + 40);
  uint64_t v22 = *((void *)this + 41);
  *((void *)this + 40) = v14 + v19;
  *((void *)this + 41) = v7;
  uint64_t v23 = *((void *)this + 42);
  *((void *)this + 42) = v15;
  while (v22 != v18)
  {
    v22 -= 48;
    geo::StdAllocator<md::PointLabelFeature::WorkUnit,mdm::Allocator>::destroy(v22);
  }
  if (v18) {
    goto LABEL_21;
  }
LABEL_22:
  *((void *)this + 41) = v7;
  atomic_store(1u, (unsigned __int8 *)this + 312);
  std::mutex::unlock(v4);
}

void sub_1A279719C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1A279734C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A2797454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double md::GeocentricFrame::_updateMatrix(md::GeocentricFrame *this)
{
  double v2 = *((double *)this + 1);
  double v3 = *((double *)this + 2) - *(double *)this;
  double v4 = *((double *)this + 3) - v2;
  double v5 = -*(double *)this;
  memset(&v53[40], 0, 40);
  memset(&v53[8], 0, 32);
  *(void *)unint64_t v53 = 0x3FF0000000000000;
  *(void *)&v53[40] = 0x3FF0000000000000;
  long long v54 = 0x3FF0000000000000uLL;
  *(double *)&long long v55 = v5;
  *((double *)&v55 + 1) = -v2;
  long long v56 = xmmword_1A28FF900;
  long long v46 = 0u;
  uint64_t v48 = 0;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  uint64_t v52 = 0x3FF0000000000000;
  double v43 = 1.0 / sqrt(v3 * v3 + v4 * v4);
  *(double *)&long long v46 = v43;
  double v49 = v43;
  v32[0] = v3 * v43;
  v32[1] = -(v4 * v43);
  v32[2] = 0.0;
  v32[3] = 0.0;
  v32[4] = v4 * v43;
  v32[5] = v3 * v43;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v35 = 0x3FF0000000000000;
  uint64_t v38 = 0x3FF0000000000000;
  gm::operator*<double,4,4,4>(v39, &v43, v32);
  gm::operator*<double,4,4,4>(v31, v39, (double *)v53);
  double v6 = *((double *)this + 4);
  double v7 = *((double *)this + 5);
  double v8 = *((double *)this + 6);
  double v9 = 1.0 / sqrt(v6 * v6 + v7 * v7 + v8 * v8);
  double v10 = v9 * v6;
  double v11 = v9 * v7;
  double v12 = v9 * v8;
  double v13 = *((double *)this + 7) - v6;
  double v14 = *((double *)this + 8) - v7;
  double v15 = *((double *)this + 9) - v8;
  double v16 = sqrt(v13 * v13 + v14 * v14 + v15 * v15);
  double v17 = v13 * (1.0 / v16);
  double v18 = v14 * (1.0 / v16);
  double v19 = v15 * (1.0 / v16);
  double v20 = -(v18 * v12 - v19 * v11);
  double v21 = -(v19 * v10 - v17 * v12);
  double v22 = -(v17 * v11 - v18 * v10);
  double v23 = 1.0 / sqrt(v20 * v20 + v21 * v21 + v22 * v22);
  memset(&v53[40], 0, 40);
  memset(&v53[8], 0, 32);
  double v24 = v23 * v22;
  *(void *)unint64_t v53 = 0x3FF0000000000000;
  *(void *)&v53[40] = 0x3FF0000000000000;
  long long v54 = 0x3FF0000000000000uLL;
  *((void *)&v56 + 1) = 0x3FF0000000000000;
  *(double *)&long long v55 = v6;
  *((double *)&v55 + 1) = v7;
  *(double *)&long long v56 = v8;
  long long v46 = 0u;
  uint64_t v48 = 0;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  uint64_t v52 = 0x3FF0000000000000;
  double v43 = v16;
  *(double *)&long long v46 = v16;
  double v49 = v16;
  v39[0] = v17;
  v39[1] = v18;
  v39[4] = v23 * v20;
  v39[5] = v23 * v21;
  v39[8] = -(v23 * v21 * v19 - v24 * v18);
  v39[9] = -(v24 * v17 - v23 * v20 * v19);
  v39[2] = v19;
  v39[6] = v24;
  v39[10] = -(v23 * v20 * v18 - v23 * v21 * v17);
  v39[3] = 0.0;
  v39[7] = 0.0;
  long long v40 = 0u;
  long long v41 = 0u;
  uint64_t v42 = 0x3FF0000000000000;
  gm::operator*<double,4,4,4>(v32, (double *)v53, v39);
  gm::operator*<double,4,4,4>(v30, v32, &v43);
  gm::operator*<double,4,4,4>((double *)v53, v30, v31);
  long long v25 = *(_OWORD *)&v53[16];
  *((_OWORD *)this + 5) = *(_OWORD *)v53;
  *((_OWORD *)this + 6) = v25;
  long long v26 = *(_OWORD *)&v53[48];
  *((_OWORD *)this + 7) = *(_OWORD *)&v53[32];
  *((_OWORD *)this + 8) = v26;
  long long v27 = v54;
  *((_OWORD *)this + 9) = *(_OWORD *)&v53[64];
  *((_OWORD *)this + 10) = v27;
  double result = *(double *)&v55;
  long long v29 = v56;
  *((_OWORD *)this + 11) = v55;
  *((_OWORD *)this + 12) = v29;
  *((unsigned char *)this + 208) = 1;
  return result;
}

void *md::FlyoverLabelMapTile::assignWorldPointToLabel(md::FlyoverLabelMapTile *this, md::Label *a2)
{
  double v44 = (*((double *)this + 7) - *((double *)this + 5)) * 0.200000003;
  double v4 = (md::LabelPoint *)(*(uint64_t (**)(void, char *))(**((void **)a2 + 1) + 112))(*((void *)a2 + 1), (char *)a2 + 48);
  long long v47 = *(_OWORD *)md::LabelPoint::mercatorPoint(v4);
  double v5 = (*(double (**)(md::FlyoverLabelMapTile *, long long *))(*(void *)this + 16))(this, &v47);
  long double v7 = v6;
  double v9 = v8;
  double v10 = sqrt(v5 * v5 + v6 * v6);
  double v11 = atan2(v8, v10 * 0.996647189);
  double v12 = atan2(v7, v5);
  __double2 v13 = __sincos_stret(v11);
  double v14 = atan2(v9 + v13.__sinval * v13.__sinval * 42841.3115 * v13.__sinval, v10 + v13.__cosval * v13.__cosval * -42697.6727 * v13.__cosval);
  __double2 v15 = __sincos_stret(v14);
  double v16 = v10 / v15.__cosval - 6378137.0 / sqrt(1.0 - v15.__sinval * v15.__sinval * 0.00669437999);
  long double v17 = tan(v14 * 0.5 + 0.785398163);
  if (v16 == 1.79769313e308)
  {
    float v19 = 3.4028e38;
  }
  else
  {
    float v18 = v16;
    float v19 = v18;
  }
  double v20 = atan(v17) * 2.0 + -1.57079633;
  long double v21 = fmod(v12 + 3.14159265, 6.28318531);
  double v22 = fmod(v21 + 6.28318531, 6.28318531) + -3.14159265;
  __double2 v23 = __sincos_stret(v20);
  double v24 = 6378137.0 / sqrt(1.0 - v23.__sinval * v23.__sinval * 0.00669437999);
  __double2 v25 = __sincos_stret(v22);
  double v26 = v24 * v23.__cosval * v25.__cosval;
  double v27 = v24 * v23.__cosval * v25.__sinval;
  double v28 = v23.__sinval * 0.99330562 * v24;
  double v29 = 1.0
      / sqrt(v26 * 2.45817226e-14 * (v26 * 2.45817226e-14)+ v27 * 2.45817226e-14 * (v27 * 2.45817226e-14)+ v28 * 2.4747391e-14 * (v28 * 2.4747391e-14));
  v32.f64[0] = v29 * (v26 * 2.45817226e-14);
  double v30 = v29 * (v27 * 2.45817226e-14);
  double v31 = v29 * (v28 * 2.4747391e-14);
  *((void *)a2 + 65) = *(void *)&v32.f64[0];
  v32.f64[1] = v30;
  BOOL v33 = v19 != 3.4028e38;
  float v34 = 0.0;
  if (v19 != 3.4028e38) {
    float v34 = v19;
  }
  *((float *)a2 + 47) = v34;
  *((unsigned char *)a2 + 192) = v33;
  *((unsigned char *)a2 + 835) = v33;
  *((double *)a2 + 62) = v26;
  *((double *)a2 + 63) = v27;
  *((double *)a2 + 64) = v28;
  double v35 = 0.0;
  if (v19 != 3.4028e38) {
    double v35 = v34;
  }
  double v36 = *((double *)a2 + 29) * v35;
  *((double *)a2 + 82) = v36;
  *((float64x2_t *)a2 + 34) = vmulq_n_f64(v32, v36);
  *((double *)a2 + 70) = v31 * v36;
  *((double *)a2 + 66) = v30;
  *((double *)a2 + 67) = v31;
  double result = (*(void *(**)(void *__return_ptr, double))(**((void **)a2 + 1) + 128))(v45, v44);
  if (v46)
  {
    uint64_t v38 = (double *)md::LabelPoint::mercatorPoint((md::LabelPoint *)v45);
    long double v39 = *v38 * 6.28318531;
    long double v40 = exp(v38[1] * 6.28318531 + -3.14159265);
    double v41 = atan(v40) * 2.0 + -1.57079633;
    long double v42 = fmod(v39, 6.28318531);
    double v43 = fmod(v42 + 6.28318531, 6.28318531) + -3.14159265;
    __sincos_stret(v41);
    __sincos_stret(v43);
    operator new();
  }
  return result;
}

double md::FlyoverLabelMapTile::worldPointFromMercatorPoint(uint64_t a1, double *a2)
{
  long double v4 = *a2 * 6.28318531;
  long double v5 = exp(a2[1] * 6.28318531 + -3.14159265);
  double v6 = atan(v5) * 2.0 + -1.57079633;
  long double v7 = fmod(v4, 6.28318531);
  double v8 = fmod(v7 + 6.28318531, 6.28318531) + -3.14159265;
  __double2 v9 = __sincos_stret(v6);
  double v10 = 6378137.0 / sqrt(v9.__sinval * v9.__sinval * -0.00669437999 + 1.0);
  __double2 v11 = __sincos_stret(v8);
  double v12 = v10 * v9.__cosval * v11.__cosval;
  uint64_t v13 = *(void *)(a1 + 504);
  if (v13)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 64))(v13))
    {
      long long v16 = *(_OWORD *)a2;
      uint64_t v17 = 0;
      uint64_t v14 = (*(uint64_t (**)(void, long long *, uint64_t))(**(void **)(a1 + 504) + 56))(*(void *)(a1 + 504), &v16, 1);
      if ((v14 & 0xFF00000000) != 0) {
        return v12
      }
             + *(float *)&v14
             / sqrt(v9.__sinval * 0.99330562 * v10 * 2.4747391e-14 * (v9.__sinval * 0.99330562 * v10 * 2.4747391e-14)+ v12 * 2.45817226e-14 * (v12 * 2.45817226e-14)+ v10 * v9.__cosval * v11.__sinval * 2.45817226e-14 * (v10 * v9.__cosval * v11.__sinval * 2.45817226e-14))* (v12* 2.45817226e-14);
    }
  }
  return v12;
}

void md::FlyoverLabelMapTile::~FlyoverLabelMapTile(md::FlyoverLabelMapTile *this)
{
  *(void *)this = &unk_1EF53ED68;
  double v2 = (std::__shared_weak_count *)*((void *)this + 64);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::LabelMapTile::~LabelMapTile(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF53ED68;
  double v2 = (std::__shared_weak_count *)*((void *)this + 64);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::LabelMapTile::~LabelMapTile(this);
}

void ggl::PolygonFill::MeshPipelineState::~MeshPipelineState(ggl::PolygonFill::MeshPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  double v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  long double v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  double v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  long double v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::PolygonFill::MeshPipelineSetup::textureIsEnabled(ggl::PolygonFill::MeshPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::PolygonFill::MeshPipelineSetup::constantDataIsEnabled(ggl::PolygonFill::MeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::PolygonFill::MeshPipelineSetup::~MeshPipelineSetup(ggl::PolygonFill::MeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void ggl::PolygonFill::CompressedMeshPipelineState::~CompressedMeshPipelineState(ggl::PolygonFill::CompressedMeshPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  double v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  long double v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  double v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  long double v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::PolygonFill::CompressedMeshPipelineSetup::textureIsEnabled(ggl::PolygonFill::CompressedMeshPipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::PolygonFill::CompressedMeshPipelineSetup::constantDataIsEnabled(ggl::PolygonFill::CompressedMeshPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::PolygonFill::CompressedMeshPipelineSetup::~CompressedMeshPipelineSetup(ggl::PolygonFill::CompressedMeshPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void md::TrafficLayerDataSource::resourceKeyForType(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8 = *(_WORD *)(a1 + 584);
  if (*(unsigned char *)a5) {
    int v9 = *(_DWORD *)(a5 + 4);
  }
  else {
    int v9 = 2147483646;
  }
  uint64_t v10 = *(void *)(a3 + 4);
  int v18 = v10;
  int v11 = a3[1];
  int v12 = *a3;
  *(unsigned char *)a6 = a2;
  *(_WORD *)(a6 + 2) = v8;
  *(_DWORD *)(a6 + 4) = v9;
  *(void *)(a6 + 8) = a6 + 40;
  *(void *)(a6 + 16) = a6 + 40;
  *(void *)(a6 + 24) = a6 + 40;
  *(void *)(a6 + 32) = 32;
  *(void *)(a6 + 72) = 0;
  int v19 = HIDWORD(v10);
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v18;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v11;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  int v19 = v12;
  geo::small_vector_base<unsigned char>::insert<unsigned char *>((void **)(a6 + 8), *(char **)(a6 + 16), (char *)&v19, (char *)&v20);
  uint64_t v13 = *(unsigned __int8 **)(a6 + 16);
  uint64_t v14 = *(unsigned __int8 **)(a6 + 8);
  unint64_t v15 = v13 - v14;
  if (v13 == v14)
  {
    unint64_t v16 = 0;
  }
  else
  {
    unint64_t v16 = 0;
    if (v15 <= 1) {
      unint64_t v15 = 1;
    }
    do
    {
      unsigned int v17 = *v14++;
      v16 ^= (v16 << 6) + (v16 >> 2) - 0x61C8864680B583EBLL + v17;
      --v15;
    }
    while (v15);
  }
  *(void *)(a6 + 72) = v16;
  *(void *)(a6 + 88) = a4;
}

BOOL md::TrafficLayerDataSource::updateRequest(uint64_t a1, char **a2, uint64_t a3, void *a4)
{
  if (!*(unsigned char *)(a1 + 752)) {
    return 0;
  }
  long double v4 = a2;
  if (*(unsigned __int8 *)(*((void *)*a2 + 2) + 8) < 7u) {
    return 0;
  }
  int v9 = (_WORD *)*a4;
  uint64_t v10 = (_WORD *)a4[1];
  if ((_WORD *)*a4 != v10)
  {
    while (*v9 != 9)
    {
      v9 += 24;
      if (v9 == v10) {
        goto LABEL_14;
      }
    }
  }
  if (v9 == v10 || *((void *)v9 + 4) != 1)
  {
LABEL_14:
    uint64_t v12 = 0;
    goto LABEL_15;
  }
  uint64_t v11 = *((void *)v9 + 3);
  uint64_t v12 = *(void *)(v11 + 112);
  uint64_t v13 = *(std::__shared_weak_count **)(v11 + 120);
  if (!v13)
  {
LABEL_15:
    uint64_t v80 = v12;
    uint64_t v81 = 0;
    goto LABEL_16;
  }
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v80 = v12;
  uint64_t v81 = v13;
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_16:
  uint64_t v14 = (_WORD *)*a4;
  unint64_t v15 = (_WORD *)a4[1];
  if ((_WORD *)*a4 != v15)
  {
    while (*v14 != 17)
    {
      v14 += 24;
      if (v14 == v15) {
        goto LABEL_25;
      }
    }
  }
  if (v14 == v15 || *((void *)v14 + 4) != 1)
  {
LABEL_25:
    uint64_t v17 = 0;
    goto LABEL_26;
  }
  uint64_t v16 = *((void *)v14 + 3);
  uint64_t v17 = *(void *)(v16 + 112);
  int v18 = *(std::__shared_weak_count **)(v16 + 120);
  if (!v18)
  {
LABEL_26:
    uint64_t v78 = v17;
    unint64_t v79 = 0;
    goto LABEL_27;
  }
  atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v78 = v17;
  unint64_t v79 = v18;
  atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_27:
  int v19 = (_WORD *)*a4;
  uint64_t v20 = (_WORD *)a4[1];
  if ((_WORD *)*a4 != v20)
  {
    while (*v19 != 16)
    {
      v19 += 24;
      if (v19 == v20) {
        goto LABEL_33;
      }
    }
  }
  if (v19 == v20 || !v78)
  {
LABEL_33:
    int v21 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
    double v22 = *v4;
    if (v21 && !v22[210])
    {
      __double2 v23 = v22 + 144;
      int v61 = 1;
    }
    else
    {
      int v61 = 0;
      __double2 v23 = v22 + 120;
    }
    double v24 = (_WORD *)*v23;
    __double2 v25 = (_WORD *)v23[1];
    if (v24 == v25) {
      goto LABEL_57;
    }
    double v26 = v24;
    while (*v26 != 17)
    {
      v26 += 24;
      if (v26 == v25) {
        goto LABEL_57;
      }
    }
    if (v26 == v25) {
      goto LABEL_57;
    }
    double v27 = v24;
    while (*v27 != 17)
    {
      v27 += 24;
      if (v27 == v25)
      {
        double v27 = v25;
        break;
      }
    }
    if (!*((void *)v27 + 4)) {
      goto LABEL_57;
    }
    double v28 = v24;
    while (*v28 != 16)
    {
      v28 += 24;
      if (v28 == v25) {
        goto LABEL_57;
      }
    }
    if (v28 == v25) {
      goto LABEL_57;
    }
    while (*v24 != 16)
    {
      v24 += 24;
      if (v24 == v25)
      {
        double v24 = v25;
        break;
      }
    }
    if (!*((void *)v24 + 4))
    {
LABEL_57:
      uint64_t v29 = *(void *)(a1 + 24);
      if (v29)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v29 + 24))(&v77);
        BOOL v5 = (_BYTE)v77 != 0;
        if ((_BYTE)v77)
        {
          unsigned int v58 = HIDWORD(v77);
          double v30 = *(int32x2_t **)(v80 + 8);
          __int32 v31 = v30[1].i32[0];
          int v32 = v31;
          v75[0] = v30[1].i32[1];
          int v33 = v75[0];
          v75[1] = v31;
          int32x2_t v34 = *v30;
          int v63 = HIDWORD(*(unint64_t *)v30);
          int32x2_t v76 = vrev64_s32(*v30);
          double v35 = *v4;
          uint64_t v36 = *((void *)*v4 + 14);
          char v60 = **v4;
          LOBYTE(v67) = v60;
          WORD1(v67) = 17;
          HIDWORD(v67) = 2147483646;
          unsigned int v68 = v72;
          BOOL v69 = v72;
          int v70 = v72;
          uint64_t v71 = 32;
          unint64_t v73 = 0;
          LODWORD(v64) = v34.i32[0];
          geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v68, v72, (char *)&v64, (char *)&v64 + 4);
          LODWORD(v64) = v63;
          geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v68, v69, (char *)&v64, (char *)&v64 + 4);
          LODWORD(v64) = v32;
          geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v68, v69, (char *)&v64, (char *)&v64 + 4);
          LODWORD(v64) = v33;
          geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v68, v69, (char *)&v64, (char *)&v64 + 4);
          long long v37 = (unsigned __int8 *)v68;
          unint64_t v38 = v69 - (unsigned char *)v68;
          if (v69 == v68)
          {
            unint64_t v39 = 0;
          }
          else
          {
            unint64_t v39 = 0;
            if (v38 <= 1) {
              unint64_t v38 = 1;
            }
            do
            {
              unsigned int v40 = *v37++;
              v39 ^= (v39 << 6) - 0x61C8864680B583EBLL + (v39 >> 2) + v40;
              --v38;
            }
            while (v38);
          }
          unint64_t v73 = v39;
          uint64_t v74 = v36;
          gdc::LayerDataRequest::request(v35, (uint64_t)&v67, v61);
          if (v68 != v70) {
            free(v68);
          }
          (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 24) + 32))(&v67);
          unint64_t v41 = HIDWORD(v67);
          uint64_t v64 = 0;
          uint64_t v65 = 0;
          uint64_t v66 = 0;
          (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 24) + 32))(&v67);
          int v42 = 0;
          if (v41)
          {
            unint64_t v43 = HIDWORD(v67);
            if (HIDWORD(v67))
            {
              if (v41 >= HIDWORD(v67))
              {
                int v42 = 0;
              }
              else
              {
                int v42 = 0;
                do
                {
                  ++v42;
                  v41 *= 2;
                }
                while (v41 < HIDWORD(v67));
              }
              while (v41 > v43)
              {
                --v42;
                v43 *= 2;
              }
            }
          }
          if (v42 + v32 >= v58) {
            int v44 = -v42;
          }
          else {
            int v44 = v32 - v58;
          }
          md::TileAdjustmentHelpers::enumerateResourceTilesWithZAdjustment(v44, 16, *(void *)(a1 + 24), v75, 0, (unint64_t *)&v64);
          long long v45 = v64;
          uint64_t v59 = v65;
          if (v64 != v65)
          {
            do
            {
              char v46 = v4;
              long long v47 = *v4;
              uint64_t v48 = *((void *)*v4 + 14);
              uint64_t v49 = *(void *)(v45 + 4);
              int v62 = v49;
              int v50 = v45[1];
              int v51 = *v45;
              LOBYTE(v67) = v60;
              WORD1(v67) = 16;
              HIDWORD(v67) = 2147483646;
              unsigned int v68 = v72;
              BOOL v69 = v72;
              int v70 = v72;
              uint64_t v71 = 32;
              unint64_t v73 = 0;
              int v82 = HIDWORD(v49);
              geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v68, v72, (char *)&v82, v83);
              int v82 = v62;
              geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v68, v69, (char *)&v82, v83);
              int v82 = v50;
              geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v68, v69, (char *)&v82, v83);
              int v82 = v51;
              geo::small_vector_base<unsigned char>::insert<unsigned char *>(&v68, v69, (char *)&v82, v83);
              uint64_t v52 = (unsigned __int8 *)v68;
              unint64_t v53 = v69 - (unsigned char *)v68;
              if (v69 == v68)
              {
                unint64_t v54 = 0;
              }
              else
              {
                unint64_t v54 = 0;
                if (v53 <= 1) {
                  unint64_t v53 = 1;
                }
                do
                {
                  unsigned int v55 = *v52++;
                  v54 ^= (v54 << 6) - 0x61C8864680B583EBLL + (v54 >> 2) + v55;
                  --v53;
                }
                while (v53);
              }
              unint64_t v73 = v54;
              uint64_t v74 = v48;
              gdc::LayerDataRequest::request(v47, (uint64_t)&v67, v61);
              long double v4 = v46;
              if (v68 != v70) {
                free(v68);
              }
              v45 += 24;
            }
            while (v45 != v59);
            long long v45 = v64;
          }
          BOOL v5 = 1;
          if (v45)
          {
            uint64_t v65 = v45;
            operator delete(v45);
          }
        }
        goto LABEL_94;
      }
    }
  }
  BOOL v5 = 0;
LABEL_94:
  long long v56 = v79;
  if (v79 && !atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
  uint64_t v57 = v81;
  if (v81 && !atomic_fetch_add(&v81->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
  }
  return v5;
}

void sub_1A2798D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v16 - 128);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v16 - 112);
  _Unwind_Resume(a1);
}

uint64_t md::TrafficLayerDataSource::isReadyToDecode(md::TrafficLayerDataSource *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(*(void *)(*((void *)this + 95) + 16) + 2786));
  return v1 & 1;
}

uint64_t md::mun::MetadataResourceDecoder::decode(md::mun::MetadataResourceDecoder *this, const gdc::ResourceKey *a2, const gdc::RawResourceSourceData *a3)
{
  MEMORY[0x1F4188790](this);
  uint64_t v4 = v3;
  uint64_t v309 = v5;
  long double v7 = v6;
  *(void *)&v382[3] = *MEMORY[0x1E4F143B8];
  (*(void (**)(void))(**(void **)v3 + 32))();
  (*(void (**)(void))(**(void **)v4 + 24))();
  __int16 v8 = (void *)GEOMuninMetadataTileCreate();
  unint64_t v330 = 0;
  uint64_t v331 = 0;
  if (!v8) {
    goto LABEL_282;
  }
  std::string __p = 0;
  v333 = 0;
  uint64_t v334 = 0;
  __int16 BOOL = GEOConfigGetBOOL();
  geo::linear_map<md::mun::RigType,BOOL,std::equal_to<md::mun::RigType>,std::allocator<std::pair<md::mun::RigType,BOOL>>,std::vector<std::pair<md::mun::RigType,BOOL>>>::emplace<md::mun::RigType,BOOL>((char **)&__p, 0, BOOL);
  __int16 v10 = GEOConfigGetBOOL();
  geo::linear_map<md::mun::RigType,BOOL,std::equal_to<md::mun::RigType>,std::allocator<std::pair<md::mun::RigType,BOOL>>,std::vector<std::pair<md::mun::RigType,BOOL>>>::emplace<md::mun::RigType,BOOL>((char **)&__p, 1u, v10);
  __int16 v11 = GEOConfigGetBOOL();
  geo::linear_map<md::mun::RigType,BOOL,std::equal_to<md::mun::RigType>,std::allocator<std::pair<md::mun::RigType,BOOL>>,std::vector<std::pair<md::mun::RigType,BOOL>>>::emplace<md::mun::RigType,BOOL>((char **)&__p, 2u, v11);
  unsigned int v308 = v7;
  long long v328 = 0uLL;
  unint64_t v329 = 0;
  std::vector<md::mun::CollectionPoint>::reserve((char **)&v328, v8[3]);
  unint64_t v12 = v8[7];
  unsigned int v327 = v8;
  if (!v12) {
    goto LABEL_204;
  }
  unint64_t v13 = 0;
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  int8x16_t v16 = (int8x16_t)vdupq_n_s64(0x3FC45F306DC9C883uLL);
  __asm { FMOV            V0.2D, #0.5 }
  float64x2_t v306 = _Q0;
  float64x2_t v307 = (float64x2_t)v16;
  do
  {
    unint64_t v21 = *(unsigned __int16 *)(v8[6] + 8 * v13 + 4);
    for (uint64_t i = v15; v13 < v12; i += 4)
    {
      uint64_t v23 = v8[6] + 8 * v13;
      if (*(unsigned __int16 *)(v23 + 4) != v21) {
        break;
      }
      if (i < v14)
      {
        *(_DWORD *)uint64_t i = *(_DWORD *)v23;
        goto LABEL_8;
      }
      uint64_t v24 = (i - v15) >> 2;
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 62) {
        abort();
      }
      if ((v14 - v15) >> 1 > v25) {
        unint64_t v25 = (v14 - v15) >> 1;
      }
      if ((unint64_t)(v14 - v15) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v25;
      }
      if (v26)
      {
        if (v26 >> 62) {
          goto LABEL_287;
        }
        double v27 = operator new(4 * v26);
      }
      else
      {
        double v27 = 0;
      }
      double v28 = &v27[4 * v24];
      *(_DWORD *)double v28 = *(_DWORD *)v23;
      uint64_t v29 = v28;
      if (i != v15)
      {
        unint64_t v30 = i - 4 - v15;
        if (v30 < 0xBC
          || &v27[i - v15 - 4 - (v30 & 0xFFFFFFFFFFFFFFFCLL)] > &v27[i - v15 - 4]
          || &i[-(v30 & 0xFFFFFFFFFFFFFFFCLL) - 4] > i - 4
          || (unint64_t)(v15 - v27) < 0x20)
        {
          __int32 v31 = i;
          uint64_t v29 = &v27[4 * v24];
        }
        else
        {
          uint64_t v33 = (v30 >> 2) + 1;
          __int32 v31 = &i[-4 * (v33 & 0x7FFFFFFFFFFFFFF8)];
          int32x2_t v34 = (int8x16_t *)&v27[4 * v24 - 16];
          double v35 = (int8x16_t *)(i - 16);
          uint64_t v36 = v33 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            int8x16_t v16 = v35[-1];
            int8x16_t v37 = *v35;
            v34[-1] = v16;
            *int32x2_t v34 = v37;
            v34 -= 2;
            v35 -= 2;
            v36 -= 8;
          }
          while (v36);
          uint64_t v29 = &v28[-4 * (v33 & 0x7FFFFFFFFFFFFFF8)];
          if (v33 == (v33 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_26;
          }
        }
        do
        {
          int v32 = *((_DWORD *)v31 - 1);
          v31 -= 4;
          *((_DWORD *)v29 - 1) = v32;
          v29 -= 4;
        }
        while (v31 != v15);
      }
LABEL_26:
      uint64_t v14 = &v27[4 * v26];
      if (v15)
      {
        operator delete(v15);
        __int16 v8 = v327;
        unint64_t v12 = v327[7];
        unint64_t v15 = v29;
        uint64_t i = v28;
      }
      else
      {
        unint64_t v15 = v29;
        uint64_t i = &v27[4 * v24];
        __int16 v8 = v327;
      }
LABEL_8:
      ++v13;
    }
    if (v8[3] <= v21)
    {
      if (GEOGetGeoDisplayCoreDefaultLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoDisplayCoreDefaultLog::onceToken, &__block_literal_global_55048);
      }
      long long v47 = (id)GEOGetGeoDisplayCoreDefaultLog::log;
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "false";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/MuninMetadataResourceDecoder.mm";
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v366) = 69;
        _os_log_impl(&dword_1A1780000, v47, OS_LOG_TYPE_ERROR, "Invalid point index: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
      }

      goto LABEL_5;
    }
    uint64_t v38 = v8[2];
    float v367 = 0.0;
    uint64_t v39 = v38 + (v21 << 6);
    *(_OWORD *)&uint8_t buf[8] = 0u;
    long long v366 = 0u;
    float v368 = 1.0;
    double v371 = 0.0;
    float64x2_t v370 = 0uLL;
    unint64_t v373 = v377;
    unint64_t v374 = (char *)v377;
    v375 = (char *)v377;
    unint64_t v376 = 6;
    char v381 = 0;
    unint64_t v40 = *(unsigned __int16 *)(v39 + 56);
    unint64_t v321 = v14;
    if (v8[1] <= v40)
    {
      if (GEOGetGeoDisplayCoreDefaultLog::onceToken != -1) {
        dispatch_once(&GEOGetGeoDisplayCoreDefaultLog::onceToken, &__block_literal_global_55048);
      }
      uint64_t v48 = (id)GEOGetGeoDisplayCoreDefaultLog::log;
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)float v354 = 136315650;
        *(void *)&v354[4] = "false";
        *(_WORD *)&v354[12] = 2080;
        *(void *)&v354[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/MuninMetadataResourceDecoder.mm";
        *(_WORD *)&v354[22] = 1024;
        *(_DWORD *)&v354[24] = 78;
        _os_log_impl(&dword_1A1780000, v48, OS_LOG_TYPE_ERROR, "Invalid build index for point: Assertion with expression - %s : Failed in file - %s line - %i", v354, 0x1Cu);
      }
LABEL_54:
    }
    else
    {
      uint64_t v41 = *v8;
      uint64_t v42 = *v8 + 40 * *(unsigned __int16 *)(v39 + 56);
      unsigned int v43 = *(_DWORD *)(v42 + 12);
      if (v43 < 3)
      {
        unsigned int v44 = *(unsigned __int8 *)(v41 + 40 * *(unsigned __int16 *)(v39 + 56) + 16);
        if (v44 >= 4) {
          unsigned __int8 v45 = 0;
        }
        else {
          unsigned __int8 v45 = 0x1020100u >> (8 * v44);
        }
        unsigned __int8 v379 = v45;
        char v46 = (unsigned __int8 *)__p;
        if (__p != v333)
        {
          while (*v46 != v45)
          {
            v46 += 2;
            if (v46 == v333) {
              goto LABEL_55;
            }
          }
        }
        if (v46 != v333 && v46[1])
        {
          BOOL v380 = v43 != 0;
          char v381 = 0;
          unint64_t v57 = *(void *)(v41 + 40 * v40 + 24);
          if (v57)
          {
            if (v57 < 8
              || ((unint64_t v58 = v41 + 32 + 40 * v40, (unint64_t)&v381 < v58 + v57)
                ? (_CF = v58 >= (unint64_t)v382)
                : (_CF = 1),
                  !_CF))
            {
              unint64_t v61 = 0;
              int v60 = 0;
              goto LABEL_114;
            }
            if (v57 >= 0x20)
            {
              unint64_t v61 = v57 & 0xFFFFFFFFFFFFFFE0;
              long long v199 = (int8x16_t *)(v41 + 40 * v40 + 48);
              int8x16_t v200 = 0uLL;
              unint64_t v201 = v57 & 0xFFFFFFFFFFFFFFE0;
              int8x16_t v202 = 0uLL;
              v203.i64[0] = 0x100000001;
              v203.i64[1] = 0x100000001;
              do
              {
                int8x16_t v204 = v199[-1];
                v384.val[3] = (int8x16_t)vshlq_u32(v203, (uint32x4_t)vqtbl1q_s8(v204, (int8x16_t)xmmword_1A28FD070));
                v384.val[2] = (int8x16_t)vshlq_u32(v203, (uint32x4_t)vqtbl1q_s8(v204, (int8x16_t)xmmword_1A28FD080));
                v384.val[1] = (int8x16_t)vshlq_u32(v203, (uint32x4_t)vqtbl1q_s8(v204, (int8x16_t)xmmword_1A28FD090));
                v384.val[0] = (int8x16_t)vshlq_u32(v203, (uint32x4_t)vqtbl1q_s8(v204, (int8x16_t)xmmword_1A28FD0A0));
                v385.val[3] = (int8x16_t)vshlq_u32(v203, (uint32x4_t)vqtbl1q_s8(*v199, (int8x16_t)xmmword_1A28FD070));
                v385.val[2] = (int8x16_t)vshlq_u32(v203, (uint32x4_t)vqtbl1q_s8(*v199, (int8x16_t)xmmword_1A28FD080));
                v385.val[1] = (int8x16_t)vshlq_u32(v203, (uint32x4_t)vqtbl1q_s8(*v199, (int8x16_t)xmmword_1A28FD090));
                v385.val[0] = (int8x16_t)vshlq_u32(v203, (uint32x4_t)vqtbl1q_s8(*v199, (int8x16_t)xmmword_1A28FD0A0));
                int8x16_t v200 = vorrq_s8(v200, vqtbl4q_s8(v384, (int8x16_t)xmmword_1A28FE720));
                int8x16_t v202 = vorrq_s8(v202, vqtbl4q_s8(v385, (int8x16_t)xmmword_1A28FE720));
                v199 += 2;
                v201 -= 32;
              }
              while (v201);
              int8x16_t v205 = vorrq_s8(v202, v200);
              int8x16_t v16 = vextq_s8(v205, v205, 8uLL);
              *(int8x8_t *)v205.i8 = vorr_s8(*(int8x8_t *)v205.i8, *(int8x8_t *)v16.i8);
              unint64_t v206 = v205.i64[0] | HIDWORD(v205.i64[0]) | ((unint64_t)(v205.i64[0] | HIDWORD(v205.i64[0])) >> 16);
              int v60 = v206 | (v206 >> 8);
              char v381 = v60;
              if (v57 != v61)
              {
                if ((v57 & 0x18) == 0) {
                  goto LABEL_114;
                }
                goto LABEL_198;
              }
            }
            else
            {
              LOBYTE(v60) = 0;
              unint64_t v61 = 0;
LABEL_198:
              unint64_t v207 = v61;
              unint64_t v61 = v57 & 0xFFFFFFFFFFFFFFF8;
              int8x8_t v208 = (int8x8_t)v60;
              unint64_t v209 = v207 - (v57 & 0xFFFFFFFFFFFFFFF8);
              int v210 = (uint64_t *)(v41 + v207 + 40 * v40 + 32);
              v211.i64[0] = 0x100000001;
              v211.i64[1] = 0x100000001;
              do
              {
                uint64_t v212 = *v210++;
                v16.i64[0] = v212;
                v383.val[1] = (int8x16_t)vshlq_u32(v211, (uint32x4_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_1A28FD090));
                v383.val[0] = (int8x16_t)vshlq_u32(v211, (uint32x4_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_1A28FD0A0));
                int8x16_t v16 = vqtbl2q_s8(v383, (int8x16_t)xmmword_1A28FF670);
                int8x8_t v208 = vorr_s8(v208, *(int8x8_t *)v16.i8);
                v209 += 8;
              }
              while (v209);
              unint64_t v213 = *(void *)&v208 | HIDWORD(*(void *)&v208) | ((*(void *)&v208 | HIDWORD(*(void *)&v208)) >> 16);
              int v60 = v213 | (v213 >> 8);
              char v381 = v60;
              if (v57 != v61)
              {
LABEL_114:
                unint64_t v74 = v57 - v61;
                uint64_t v75 = (char *)(v41 + v61 + 40 * v40 + 32);
                do
                {
                  char v76 = *v75++;
                  v60 |= 1 << v76;
                  char v381 = v60;
                  --v74;
                }
                while (v74);
              }
            }
          }
          uint64_t v77 = v41 + 40 * v40;
          v377[432] = *(_DWORD *)(v77 + 20);
          v377[433] = *(_DWORD *)(v77 + 4);
          __int16 v378 = *(_WORD *)v42;
          uint64_t v78 = v38 + (v21 << 6);
          *(void *)buf = *(void *)(v78 + 48);
          uint64_t v372 = *(void *)(v78 + 40);
          float v79 = *(float *)(v39 + 28);
          float v80 = *(float *)(v39 + 32);
          __float2 v81 = __sincosf_stret(*(float *)(v39 + 24) * 0.5);
          __float2 v82 = __sincosf_stret(v79 * 0.5);
          __float2 v83 = __sincosf_stret(v80 * 0.5);
          long double v84 = *(double *)(v39 + 16);
          _Q17 = *(float64x2_t *)v39;
          float v317 = -(float)((float)((float)(v82.__sinval * v81.__sinval) * v83.__cosval)
                        - (float)((float)(v82.__cosval * v81.__cosval) * v83.__sinval));
          float v318 = (float)((float)(v82.__cosval * v81.__cosval) * v83.__cosval)
               + (float)((float)(v82.__sinval * v81.__sinval) * v83.__sinval);
          float v315 = -(float)((float)((float)(v82.__sinval * v81.__cosval) * v83.__sinval)
                        - (float)((float)(v82.__cosval * v81.__sinval) * v83.__cosval));
          float v316 = (float)((float)(v82.__sinval * v81.__cosval) * v83.__cosval)
               + (float)((float)(v82.__cosval * v81.__sinval) * v83.__sinval);
          float v86 = (float)((float)((float)(v317 * 0.5) + (float)(v318 * -0.5)) + (float)(v316 * 0.5))
              - (float)(v315 * -0.5);
          float v87 = (float)((float)(v318 * -0.5) - (float)(v317 * 0.5))
              + (float)((float)(v316 * 0.5) + (float)(v315 * -0.5));
          float v88 = (float)((float)(v317 * -0.5) + (float)(v318 * 0.5)) + (float)((float)(v316 * 0.5) + (float)(v315 * 0.5));
          float v89 = (float)((float)(v318 * 0.5) + (float)(v316 * 0.5)) - (float)((float)(v317 * -0.5) + (float)(v315 * 0.5));
          *((float *)&v366 + 2) = v86;
          *((float *)&v366 + 3) = v87;
          float v367 = v88;
          float v368 = v89;
          float64x2_t __x = _Q17;
          *(float64x2_t *)&uint8_t buf[8] = _Q17;
          *(long double *)&long long v366 = v84;
          _D15 = _Q17.f64[1];
          __asm { FMLA            D0, D15, V17.D[1] }
          double v92 = sqrt(_D0);
          double v93 = atan2(v84, v92 * 0.996647189);
          double v313 = _D15;
          long double v324 = atan2(_D15, __x.f64[0]);
          __double2 v94 = __sincos_stret(v93);
          double v314 = v84;
          double v95 = atan2(v84 + v94.__sinval * v94.__sinval * 42841.3115 * v94.__sinval, v92 + v94.__cosval * v94.__cosval * -42697.6727 * v94.__cosval);
          __double2 v96 = __sincos_stret(v95);
          long double v97 = tan(v95 * 0.5 + 0.785398163);
          long double v98 = log(v97);
          v99.f64[0] = v324;
          v99.f64[1] = v98;
          float64x2_t v370 = vmlaq_f64(v306, v307, v99);
          double v371 = v92 / v96.__cosval + -6378137.0 / sqrt(v96.__sinval * v96.__sinval * -0.00669437999 + 1.0);
          long long v343 = *(_OWORD *)&buf[8];
          uint64_t v344 = v366;
          double v345 = v86;
          double v346 = v87;
          double v347 = v88;
          double v348 = v89;
          gdc::CameraFrame<geo::Radians,double>::fromRigidTransformEcefNoOffset((uint64_t)v341, (double *)&v343);
          float v100 = v342 * 0.318309886;
          float v369 = v100 * 3.1416;
          unint64_t v101 = (i - v15) >> 2;
          uint64_t v102 = v374;
          uint64_t v103 = (char *)v373;
          unint64_t v104 = 0x8E38E38E38E38E39 * ((v374 - (unsigned char *)v373) >> 5);
          if (v104 > v101)
          {
            unint64_t v105 = (char *)v373 + 288 * v101;
            if (v105 != v374)
            {
              long long v106 = (char *)v373 + 288 * v101;
              do
              {
                uint64_t v107 = (void *)*((void *)v106 + 31);
                if (v107 != *((void **)v106 + 33)) {
                  free(v107);
                }
                v106 += 288;
              }
              while (v106 != v102);
              uint64_t v102 = v105;
            }
            goto LABEL_129;
          }
          if (v104 < v101)
          {
            if (v376 < v101)
            {
              geo::small_vector_base<md::mun::PhotoInfo>::grow(&v373, (i - v15) >> 2);
              uint64_t v102 = v374;
              uint64_t v103 = (char *)v373;
            }
            BOOL v108 = &v103[288 * v101];
            if (v102 != v108)
            {
              do
              {
                *((_OWORD *)v102 + 16) = 0uLL;
                *((_OWORD *)v102 + 17) = 0uLL;
                *((_OWORD *)v102 + 14) = 0uLL;
                *((_OWORD *)v102 + 15) = 0uLL;
                *((_OWORD *)v102 + 12) = 0uLL;
                *((_OWORD *)v102 + 13) = 0uLL;
                *((_OWORD *)v102 + 10) = 0uLL;
                *((_OWORD *)v102 + 11) = 0uLL;
                *((_OWORD *)v102 + 8) = 0uLL;
                *((_OWORD *)v102 + 9) = 0uLL;
                *((_OWORD *)v102 + 6) = 0uLL;
                *((_OWORD *)v102 + 7) = 0uLL;
                *((_OWORD *)v102 + 4) = 0uLL;
                *((_OWORD *)v102 + 5) = 0uLL;
                *((_OWORD *)v102 + 2) = 0uLL;
                *((_OWORD *)v102 + 3) = 0uLL;
                *(_OWORD *)uint64_t v102 = 0uLL;
                *((_OWORD *)v102 + 1) = 0uLL;
                *((_DWORD *)v102 + 9) = 1065353216;
                *((void *)v102 + 31) = v102 + 280;
                *((void *)v102 + 32) = v102 + 280;
                *((void *)v102 + 33) = v102 + 280;
                *((void *)v102 + 34) = 2;
                v102 += 288;
              }
              while (v102 != v108);
              uint64_t v102 = v108;
            }
LABEL_129:
            unint64_t v374 = v102;
            __int16 v8 = v327;
          }
          if (i != v15)
          {
            uint64_t v109 = 0;
            if (v101 <= 1) {
              uint64_t v110 = 1;
            }
            else {
              uint64_t v110 = (i - v15) >> 2;
            }
            uint64_t v310 = v110;
            double v111 = v316;
            double v112 = v315;
            double v311 = v318;
            double v312 = v317;
            while (1)
            {
              unint64_t v113 = *(unsigned int *)&v15[4 * v109];
              if (v8[5] <= v113)
              {
                if (GEOGetGeoDisplayCoreDefaultLog::onceToken != -1) {
                  dispatch_once(&GEOGetGeoDisplayCoreDefaultLog::onceToken, &__block_literal_global_55048);
                }
                uint64_t v48 = (id)GEOGetGeoDisplayCoreDefaultLog::log;
                if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)float v354 = 136315650;
                  *(void *)&v354[4] = "false";
                  *(_WORD *)&v354[12] = 2080;
                  *(void *)&v354[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/MuninMetadataResourceDecoder.mm";
                  *(_WORD *)&v354[22] = 1024;
                  *(_DWORD *)&v354[24] = 128;
                  _os_log_impl(&dword_1A1780000, v48, OS_LOG_TYPE_ERROR, "Invalid photo index for point: Assertion with expression - %s : Failed in file - %s line - %i", v354, 0x1Cu);
                }
                goto LABEL_54;
              }
              uint64_t v114 = v8[4];
              uint64_t v115 = v114 + 152 * v113;
              uint64_t v116 = (char *)v373 + 288 * v109;
              v116[240] = *(unsigned char *)(v115 + 144);
              float v117 = *(float *)(v115 + 28);
              float v118 = *(float *)(v115 + 32);
              __float2 v119 = __sincosf_stret(*(float *)(v115 + 24) * 0.5);
              __float2 v120 = __sincosf_stret(v117 * 0.5);
              __float2 v121 = __sincosf_stret(v118 * 0.5);
              float v122 = (float)((float)(v120.__cosval * v119.__cosval) * v121.__cosval)
                   + (float)((float)(v120.__sinval * v119.__sinval) * v121.__sinval);
              float v123 = -(float)((float)((float)(v120.__sinval * v119.__sinval) * v121.__cosval)
                            - (float)((float)(v120.__cosval * v119.__cosval) * v121.__sinval));
              float v124 = (float)((float)(v120.__sinval * v119.__cosval) * v121.__cosval)
                   + (float)((float)(v120.__cosval * v119.__sinval) * v121.__sinval);
              float v125 = -(float)((float)((float)(v120.__sinval * v119.__cosval) * v121.__sinval)
                            - (float)((float)(v120.__cosval * v119.__sinval) * v121.__cosval));
              double v126 = *(double *)(v115 + 16);
              _Q3 = *(float64x2_t *)v115;
              float v128 = (float)((float)((float)(v123 * v318) + (float)(v317 * v122)) + (float)(v316 * v125))
                   - (float)(v315 * v124);
              float v129 = (float)((float)(v316 * v122) - (float)((float)(v317 * v125) - (float)(v124 * v318)))
                   + (float)(v315 * v123);
              float v130 = (float)((float)((float)(v125 * v318) + (float)(v317 * v124)) - (float)(v316 * v123))
                   + (float)(v315 * v122);
              float v131 = -(float)((float)((float)((float)(v317 * v123) + (float)(v316 * v124)) + (float)(v315 * v125))
                            - (float)(v122 * v318));
              double v132 = vmuld_lane_f64(v112, *(float64x2_t *)v115, 1);
              _D19 = v317;
              double v134 = vmlad_n_f64(-(v126 * v312), v112, *(double *)v115);
              __asm { FMLA            D17, D19, V3.D[1] }
              double v136 = -(v132 - v126 * v111) - (v132 - v126 * v111);
              double v137 = v134 + v134;
              double v138 = _D17 + _D17;
              _Q3.f64[0] = vaddq_f64(__x, *(float64x2_t *)v115).f64[0] + v136 * v311 + v138 * v111 - v137 * v112;
              double v139 = v313 + *(double *)(v115 + 8) + v136 * v112 + v137 * v311 - v138 * v312;
              double v140 = v314 + v126 - v136 * v111 + v137 * v312 + v138 * v311;
              *(float *)&double v136 = v131 * -0.5;
              float v141 = v131 * 0.5;
              *(float *)&double v137 = v128 * 0.5;
              float v142 = v129 * 0.5;
              *(float *)&double v138 = v130 * 0.5;
              float v143 = v130 * -0.5;
              float v144 = v128 * -0.5;
              *((float *)v116 + 6) = (float)((float)(*(float *)&v137 + *(float *)&v136) + v142) - v143;
              *((float *)v116 + 7) = (float)(*(float *)&v136 - *(float *)&v137) + (float)(v142 + v143);
              *((float *)v116 + 8) = (float)(v144 + v141) + (float)(v142 + *(float *)&v138);
              *((float *)v116 + 9) = (float)(v141 + v142) - (float)(v144 + *(float *)&v138);
              *(float64_t *)uint64_t v116 = _Q3.f64[0];
              *((double *)v116 + 1) = v139;
              *((double *)v116 + 2) = v140;
              long long v337 = *(_OWORD *)v116;
              uint64_t v338 = *((void *)v116 + 2);
              float32x2_t v145 = *(float32x2_t *)(v116 + 32);
              float64x2_t v339 = vcvtq_f64_f32(*(float32x2_t *)(v116 + 24));
              float64x2_t v340 = vcvtq_f64_f32(v145);
              gdc::CameraFrame<geo::Radians,double>::fromRigidTransformEcefNoOffset((uint64_t)v335, (double *)&v337);
              float v146 = v336 * 0.318309886;
              *((float *)v116 + 10) = v146 * 3.1416;
              *((_DWORD *)v116 + 59) = *(_DWORD *)(v115 + 140);
              md::mun::frustumFromGEOFrustumCorners((uint64_t)v354, (_OWORD *)(v115 + 40));
              *(_OWORD *)(v116 + 44) = *(_OWORD *)v354;
              *(_OWORD *)(v116 + 60) = *(_OWORD *)&v354[16];
              *(_OWORD *)(v116 + 76) = v355;
              *(_OWORD *)(v116 + 92) = v356;
              *(_OWORD *)(v116 + 108) = v357;
              *(_OWORD *)(v116 + 124) = v358;
              *(_OWORD *)(v116 + 140) = v359;
              *(_OWORD *)(v116 + 156) = v360;
              *(_OWORD *)(v116 + 172) = v361;
              *(_OWORD *)(v116 + 188) = v362;
              *(_OWORD *)(v116 + 204) = v363;
              *(_OWORD *)(v116 + 220) = v364;
              uint64_t v147 = v116 + 248;
              unsigned int v150 = *(unsigned __int8 *)(v115 + 149);
              __int16 v149 = (unsigned __int8 *)(v115 + 149);
              size_t v148 = v150;
              unint64_t v151 = *((void *)v116 + 34);
              uint64_t v322 = v114;
              int v325 = v113;
              if (v151 < v150) {
                break;
              }
LABEL_160:
              uint64_t v320 = v109;
              if (v148)
              {
                uint64_t v174 = 0;
                uint64_t v175 = (unsigned char *)*((void *)v147 + 1);
                while (1)
                {
                  uint64_t v176 = *(char **)v147;
                  int v177 = &v175[-*(void *)v147];
                  unint64_t v178 = *((void *)v147 + 3);
                  if (v178 < (unint64_t)(v177 + 1)) {
                    break;
                  }
LABEL_163:
                  *uint64_t v175 = *(unsigned char *)(v114 + 152 * v113 + v174 + 145);
                  uint64_t v175 = (unsigned char *)(*((void *)v147 + 1) + 1);
                  *((void *)v147 + 1) = v175;
                  if (++v174 >= (unint64_t)*v149) {
                    goto LABEL_135;
                  }
                }
                uint64_t v179 = (char *)*((void *)v147 + 2);
                unint64_t v180 = (1 << -(char)__clz(v178 + 1));
                if (v178 >= 0xFFFFFFFFFFFFFFFELL) {
                  unint64_t v180 = 1;
                }
                if (v180 <= (unint64_t)(v177 + 1)) {
                  size_t v181 = (size_t)(v177 + 1);
                }
                else {
                  size_t v181 = v180;
                }
                float v182 = (char *)malloc_type_malloc(v181, 0x100004077774924uLL);
                long long v183 = v182;
                long long v184 = *(char **)v147;
                long long v185 = (char *)*((void *)v147 + 1);
                if (*(char **)v147 == v185) {
                  goto LABEL_186;
                }
                unint64_t v186 = v185 - v184;
                if ((unint64_t)(v185 - v184) < 8)
                {
                  long long v187 = v182;
                }
                else
                {
                  long long v187 = v182;
                  if ((unint64_t)(v182 - v184) >= 0x20)
                  {
                    if (v186 < 0x20)
                    {
                      uint64_t v188 = 0;
LABEL_180:
                      unint64_t v193 = v186 & 0xFFFFFFFFFFFFFFF8;
                      long long v187 = &v182[v186 & 0xFFFFFFFFFFFFFFF8];
                      uint64_t v194 = v188 - (v186 & 0xFFFFFFFFFFFFFFF8);
                      uint64_t v195 = (uint64_t *)&v184[v188];
                      size_t v196 = &v182[v188];
                      do
                      {
                        uint64_t v197 = *v195++;
                        *(void *)size_t v196 = v197;
                        v196 += 8;
                        v194 += 8;
                      }
                      while (v194);
                      if (v186 != v193)
                      {
                        v184 += v193;
                        goto LABEL_185;
                      }
LABEL_186:
                      if (v176 != v179) {
                        free(*(void **)v147);
                      }
                      uint64_t v175 = &v177[(void)v183];
                      *(void *)uint64_t v147 = v183;
                      *((void *)v147 + 1) = &v177[(void)v183];
                      *((void *)v147 + 3) = v181;
                      uint64_t v114 = v322;
                      LODWORD(v113) = v325;
                      goto LABEL_163;
                    }
                    uint64_t v188 = v186 & 0xFFFFFFFFFFFFFFE0;
                    uint64_t v189 = (long long *)(v184 + 16);
                    uint64_t v190 = v182 + 16;
                    unint64_t v191 = v186 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      long long v192 = *v189;
                      *(v190 - 1) = *(v189 - 1);
                      *uint64_t v190 = v192;
                      v189 += 2;
                      v190 += 2;
                      v191 -= 32;
                    }
                    while (v191);
                    if (v186 == v188) {
                      goto LABEL_186;
                    }
                    if ((v186 & 0x18) != 0) {
                      goto LABEL_180;
                    }
                    v184 += v188;
                    long long v187 = &v182[v188];
                  }
                }
                do
                {
LABEL_185:
                  char v198 = *v184++;
                  *v187++ = v198;
                }
                while (v184 != v185);
                goto LABEL_186;
              }
LABEL_135:
              uint64_t v14 = v321;
              uint64_t v109 = v320 + 1;
              __int16 v8 = v327;
              if (v320 + 1 == v310) {
                goto LABEL_188;
              }
            }
            uint64_t v153 = *((void *)v116 + 32);
            long long v152 = (char *)*((void *)v116 + 33);
            uint64_t v154 = *(char **)v147;
            size_t v155 = (1 << -(char)__clz(v151 + 1));
            if (v155 <= v148) {
              size_t v156 = v148;
            }
            else {
              size_t v156 = v155;
            }
            uint64_t v157 = (char *)malloc_type_malloc(v156, 0x100004077774924uLL);
            uint64_t v158 = v157;
            uint64_t v159 = *(char **)v147;
            uint64_t v160 = (char *)*((void *)v147 + 1);
            if (*(char **)v147 == v160) {
              goto LABEL_157;
            }
            unint64_t v161 = v160 - v159;
            if ((unint64_t)(v160 - v159) < 8)
            {
              uint64_t v162 = v157;
            }
            else
            {
              uint64_t v162 = v157;
              if ((unint64_t)(v157 - v159) >= 0x20)
              {
                if (v161 < 0x20)
                {
                  uint64_t v163 = 0;
LABEL_151:
                  unint64_t v168 = v161 & 0xFFFFFFFFFFFFFFF8;
                  uint64_t v162 = &v157[v161 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v169 = v163 - (v161 & 0xFFFFFFFFFFFFFFF8);
                  float64x2_t v170 = (uint64_t *)&v159[v163];
                  uint64_t v171 = &v157[v163];
                  do
                  {
                    uint64_t v172 = *v170++;
                    *(void *)uint64_t v171 = v172;
                    v171 += 8;
                    v169 += 8;
                  }
                  while (v169);
                  if (v161 != v168)
                  {
                    v159 += v168;
                    goto LABEL_156;
                  }
LABEL_157:
                  if (v154 != v152) {
                    free(*(void **)v147);
                  }
                  *(void *)uint64_t v147 = v158;
                  *((void *)v147 + 1) = &v158[v153 - (void)v154];
                  *((void *)v147 + 3) = v156;
                  LODWORD(v148) = *v149;
                  uint64_t v114 = v322;
                  LODWORD(v113) = v325;
                  goto LABEL_160;
                }
                uint64_t v163 = v161 & 0xFFFFFFFFFFFFFFE0;
                long long v164 = (long long *)(v159 + 16);
                uint64_t v165 = v157 + 16;
                unint64_t v166 = v161 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v167 = *v164;
                  *(v165 - 1) = *(v164 - 1);
                  *uint64_t v165 = v167;
                  v164 += 2;
                  v165 += 2;
                  v166 -= 32;
                }
                while (v166);
                if (v161 == v163) {
                  goto LABEL_157;
                }
                if ((v161 & 0x18) != 0) {
                  goto LABEL_151;
                }
                v159 += v163;
                uint64_t v162 = &v157[v163];
              }
            }
            do
            {
LABEL_156:
              char v173 = *v159++;
              *v162++ = v173;
            }
            while (v159 != v160);
            goto LABEL_157;
          }
LABEL_188:
          geo::optional<md::mun::CollectionPoint>::optional((uint64_t)v349, (uint64_t)buf);
          goto LABEL_56;
        }
      }
    }
LABEL_55:
    LOBYTE(v349[0]) = 0;
LABEL_56:
    uint64_t v49 = (char *)v373;
    int v50 = v374;
    if (v373 != v374)
    {
      do
      {
        int v51 = (void *)*((void *)v49 + 31);
        if (v51 != *((void **)v49 + 33)) {
          free(v51);
        }
        v49 += 288;
      }
      while (v49 != v50);
      uint64_t v49 = (char *)v373;
    }
    if (v49 != v375) {
      free(v49);
    }
    if (LOBYTE(v349[0]))
    {
      if (*((void *)&v328 + 1) >= (unint64_t)v329)
      {
        uint64_t v53 = 0x63FB9AEB1FDCD759 * ((uint64_t)(*((void *)&v328 + 1) - v328) >> 3);
        unint64_t v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) > 0x2328A701194538) {
          abort();
        }
        if (0xC7F735D63FB9AEB2 * ((uint64_t)&v329[-v328] >> 3) > v54) {
          unint64_t v54 = 0xC7F735D63FB9AEB2 * ((uint64_t)&v329[-v328] >> 3);
        }
        if ((unint64_t)(0x63FB9AEB1FDCD759 * ((uint64_t)&v329[-v328] >> 3)) >= 0x119453808CA29CLL) {
          unint64_t v55 = 0x2328A701194538;
        }
        else {
          unint64_t v55 = v54;
        }
        if (v55)
        {
          if (v55 > 0x2328A701194538) {
LABEL_287:
          }
            std::__throw_bad_array_new_length[abi:nn180100]();
          long long v56 = (char *)operator new(1864 * v55);
        }
        else
        {
          long long v56 = 0;
        }
        int v62 = &v56[1864 * v55];
        uint64_t v63 = std::construct_at[abi:nn180100]<md::mun::CollectionPoint,md::mun::CollectionPoint,md::mun::CollectionPoint*>((uint64_t)&v56[1864 * v53], (uint64_t)&v349[1]);
        uint64_t v52 = v63 + 1864;
        uint64_t v65 = (char *)*((void *)&v328 + 1);
        uint64_t v64 = (char *)v328;
        if (*((void *)&v328 + 1) == (void)v328)
        {
          *(void *)&long long v328 = v63;
          *((void *)&v328 + 1) = v63 + 1864;
          unint64_t v329 = v62;
        }
        else
        {
          do
          {
            v65 -= 1864;
            uint64_t v63 = std::construct_at[abi:nn180100]<md::mun::CollectionPoint,md::mun::CollectionPoint,md::mun::CollectionPoint*>(v63 - 1864, (uint64_t)v65);
          }
          while (v65 != v64);
          uint64_t v66 = (char *)*((void *)&v328 + 1);
          uint64_t v65 = (char *)v328;
          *(void *)&long long v328 = v63;
          *((void *)&v328 + 1) = v52;
          unint64_t v329 = v62;
          if (v66 != v65)
          {
            do
            {
              uint64_t v67 = v66 - 1864;
              unsigned int v68 = (void *)*((void *)v66 - 222);
              BOOL v69 = (void *)*((void *)v66 - 221);
              if (v68 != v69)
              {
                do
                {
                  int v70 = (void *)v68[31];
                  if (v70 != (void *)v68[33]) {
                    free(v70);
                  }
                  v68 += 36;
                }
                while (v68 != v69);
                unsigned int v68 = (void *)*((void *)v66 - 222);
              }
              uint64_t v14 = v321;
              if (v68 != *((void **)v66 - 220)) {
                free(v68);
              }
              v66 -= 1864;
            }
            while (v67 != v65);
          }
        }
        __int16 v8 = v327;
        if (v65) {
          operator delete(v65);
        }
      }
      else
      {
        uint64_t v52 = std::construct_at[abi:nn180100]<md::mun::CollectionPoint,md::mun::CollectionPoint,md::mun::CollectionPoint*>(*((uint64_t *)&v328 + 1), (uint64_t)&v349[1])+ 1864;
      }
      *((void *)&v328 + 1) = v52;
      if (LOBYTE(v349[0]))
      {
        uint64_t v71 = v351;
        uint64_t v72 = v352;
        if (v351 != v352)
        {
          do
          {
            unint64_t v73 = (void *)v71[31];
            if (v73 != (void *)v71[33]) {
              free(v73);
            }
            v71 += 36;
          }
          while (v71 != v72);
          uint64_t v71 = v351;
        }
        if (v71 != v353) {
          free(v71);
        }
      }
    }
LABEL_5:
    unint64_t v12 = v8[7];
  }
  while (v13 < v12);
  if (v15) {
    operator delete(v15);
  }
LABEL_204:
  if (__p) {
    operator delete(__p);
  }
  v349[1] = 0;
  v349[0] = 0;
  uint64_t v350 = 0;
  unint64_t v214 = v8[9];
  if (v214)
  {
    if (v214 >= 0x186186186186187) {
      abort();
    }
    uint64_t v215 = (char *)operator new(168 * v214);
    double v216 = v215;
    uint64_t v217 = &v215[168 * v214];
    uint64_t v218 = v215;
    do
    {
      *((_OWORD *)v218 + 6) = 0uLL;
      *((_OWORD *)v218 + 7) = 0uLL;
      *((void *)v218 + 20) = 0;
      *((_OWORD *)v218 + 8) = 0uLL;
      *((_OWORD *)v218 + 9) = 0uLL;
      *((_OWORD *)v218 + 4) = 0uLL;
      *((_OWORD *)v218 + 5) = 0uLL;
      *((_OWORD *)v218 + 2) = 0uLL;
      *((_OWORD *)v218 + 3) = 0uLL;
      *(_OWORD *)uint64_t v218 = 0uLL;
      *((_OWORD *)v218 + 1) = 0uLL;
      *((void *)v218 + 11) = v218 + 120;
      *((void *)v218 + 12) = v218 + 120;
      *((void *)v218 + 13) = v218 + 120;
      *((void *)v218 + 14) = 1;
      v218 += 168;
    }
    while (v218 != v217);
    unint64_t v219 = 0;
    v349[0] = v215;
    v349[1] = v217;
    uint64_t v350 = v217;
    unint64_t v323 = v215;
    do
    {
      uint64_t v220 = v8[8];
      unint64_t v221 = (void *)(v220 + 40 * v219);
      *(void *)&v216[168 * v219] = *v221;
      uint64_t v222 = v221[1];
      if (v222 != -1)
      {
        uint64_t v223 = v327[10] + 48 * v222;
        uint64_t v224 = *(void *)v223;
        uint64_t v225 = *(void *)(v223 + 24);
        long long v226 = *(_OWORD *)(v223 + 8);
        unint64_t v227 = &v216[168 * v219];
        *((void *)v227 + 2) = v224;
        uint64_t v228 = v227 + 16;
        if (*(v228 - 8))
        {
          unint64_t v229 = &v216[168 * v219];
          *(_OWORD *)(v229 + 24) = v226;
          *((void *)v229 + 5) = v225;
        }
        else
        {
          *(_OWORD *)(v228 + 8) = v226;
          *((void *)v228 + 3) = v225;
          *(v228 - 8) = 1;
        }
      }
      uint64_t v230 = *(void *)(v220 + 40 * v219 + 16);
      if (v230 != -1)
      {
        uint64_t v231 = v327[12] + 48 * v230;
        uint64_t v232 = *(void *)v231;
        uint64_t v233 = *(void *)(v231 + 24);
        long long v234 = *(_OWORD *)(v231 + 8);
        int64_t v235 = &v216[168 * v219];
        *((void *)v235 + 7) = v232;
        uint64_t v236 = v235 + 56;
        if (*(v236 - 8))
        {
          int v237 = &v216[168 * v219];
          *((_OWORD *)v237 + 4) = v234;
          *((void *)v237 + 10) = v233;
        }
        else
        {
          *(_OWORD *)(v236 + 8) = v234;
          *((void *)v236 + 3) = v233;
          *(v236 - 8) = 1;
        }
      }
      unint64_t v238 = &v216[168 * v219];
      unint64_t v239 = v238 + 88;
      uint64_t v240 = v220 + 40 * v219;
      unint64_t v243 = *(void *)(v240 + 32);
      uint64_t v242 = (unint64_t *)(v240 + 32);
      unint64_t v241 = v243;
      unint64_t v244 = *((void *)v238 + 14);
      if (v244 < v243)
      {
        uint64_t v245 = *((void *)v239 + 1);
        unsigned int v246 = (void *)*((void *)v239 + 2);
        unint64_t v247 = *(void **)v239;
        unint64_t v248 = (1 << -(char)__clz(v244 + 1));
        if (v244 >= 0xFFFFFFFFFFFFFFFELL) {
          unint64_t v249 = 1;
        }
        else {
          unint64_t v249 = v248;
        }
        if (v249 <= v241) {
          unint64_t v250 = v241;
        }
        else {
          unint64_t v250 = v249;
        }
        int v251 = (char *)malloc_type_malloc(48 * v250, 0x1000040EED21634uLL);
        unsigned int v252 = v251;
        int v253 = *(void **)v239;
        uint64_t v254 = (void *)*((void *)v239 + 1);
        if (*(void **)v239 != v254)
        {
          uint64_t v255 = v251;
          do
          {
            long long v256 = *(_OWORD *)v253;
            *((void *)v255 + 2) = v253[2];
            *(_OWORD *)uint64_t v255 = v256;
            uint64_t v257 = v253[3];
            *((_DWORD *)v255 + 8) = *((_DWORD *)v253 + 8);
            *((void *)v255 + 3) = v257;
            *((_DWORD *)v255 + 9) = *((_DWORD *)v253 + 9);
            *((void *)v255 + 5) = v253[5];
            v253 += 6;
            v255 += 48;
          }
          while (v253 != v254);
        }
        if (v247 != v246) {
          free(*(void **)v239);
        }
        *(void *)unint64_t v239 = v252;
        *((void *)v239 + 1) = &v252[v245 - (void)v247];
        *((void *)v239 + 3) = v250;
        unint64_t v241 = *v242;
      }
      uint64_t v258 = v220 + 40 * v219;
      unint64_t v261 = *(void *)(v258 + 24);
      int v260 = (void *)(v258 + 24);
      unint64_t v259 = v261;
      if (v261 < v261 + v241)
      {
        uint64_t v262 = *((void *)v239 + 1);
        do
        {
          uint64_t v265 = v327[14] + 56 * v259;
          float v266 = *(float *)(v265 + 28);
          float v267 = *(float *)(v265 + 32);
          __float2 v268 = __sincosf_stret(*(float *)(v265 + 24) * 0.5);
          __float2 v269 = __sincosf_stret(v266 * 0.5);
          __float2 v270 = __sincosf_stret(v267 * 0.5);
          uint64_t v271 = *(void *)(v265 + 16);
          long long v263 = *(_OWORD *)v265;
          uint64_t v272 = *(void *)(v265 + 40);
          unsigned int v273 = *(void **)v239;
          unint64_t v274 = 0xAAAAAAAAAAAAAAABLL * ((v262 - *(void *)v239) >> 4);
          unint64_t v275 = *((void *)v239 + 3);
          if (v275 < v274 + 1)
          {
            long long v326 = *(_OWORD *)v265;
            unint64_t v276 = (void *)*((void *)v239 + 2);
            unint64_t v277 = (1 << -(char)__clz(v275 + 1));
            if (v275 >= 0xFFFFFFFFFFFFFFFELL) {
              unint64_t v278 = 1;
            }
            else {
              unint64_t v278 = v277;
            }
            if (v278 <= v274 + 1) {
              unint64_t v279 = v274 + 1;
            }
            else {
              unint64_t v279 = v278;
            }
            int v280 = malloc_type_malloc(48 * v279, 0x1000040EED21634uLL);
            unsigned __int8 v281 = v280;
            unsigned __int8 v282 = *(void **)v239;
            unsigned int v283 = (void *)*((void *)v239 + 1);
            if (*(void **)v239 != v283)
            {
              unsigned int v284 = v280;
              do
              {
                long long v285 = *(_OWORD *)v282;
                v284[2] = v282[2];
                *(_OWORD *)unsigned int v284 = v285;
                uint64_t v286 = v282[3];
                *((_DWORD *)v284 + 8) = *((_DWORD *)v282 + 8);
                v284[3] = v286;
                *((_DWORD *)v284 + 9) = *((_DWORD *)v282 + 9);
                v284[5] = v282[5];
                v282 += 6;
                v284 += 6;
              }
              while (v282 != v283);
            }
            if (v273 != v276) {
              free(*(void **)v239);
            }
            uint64_t v262 = (uint64_t)v281 + 48 * v274;
            *(void *)unint64_t v239 = v281;
            *((void *)v239 + 1) = v262;
            *((void *)v239 + 3) = v279;
            long long v263 = v326;
          }
          *(float *)&long long v264 = -(float)((float)((float)(v269.__sinval * v268.__sinval) * v270.__cosval)
                                   - (float)((float)(v269.__cosval * v268.__cosval) * v270.__sinval));
          *((float *)&v264 + 1) = (float)((float)(v269.__sinval * v268.__cosval) * v270.__cosval)
                                + (float)((float)(v269.__cosval * v268.__sinval) * v270.__sinval);
          *((float *)&v264 + 2) = -(float)((float)((float)(v269.__sinval * v268.__cosval) * v270.__sinval)
                                         - (float)((float)(v269.__cosval * v268.__sinval) * v270.__cosval));
          *((float *)&v264 + 3) = (float)((float)(v269.__cosval * v268.__cosval) * v270.__cosval)
                                + (float)((float)(v269.__sinval * v268.__sinval) * v270.__sinval);
          *(_OWORD *)uint64_t v262 = v263;
          *(void *)(v262 + 16) = v271;
          *(_OWORD *)(v262 + 24) = v264;
          *(void *)(v262 + 40) = v272;
          uint64_t v262 = *((void *)v239 + 1) + 48;
          *((void *)v239 + 1) = v262;
          ++v259;
        }
        while (v259 < *v242 + *v260);
      }
      ++v219;
      __int16 v8 = v327;
      double v216 = v323;
    }
    while (v219 < v327[9]);
  }
  uint64_t v287 = (char *)operator new(0x108uLL);
  *((void *)v287 + 1) = 0;
  *((void *)v287 + 2) = 0;
  *(void *)uint64_t v287 = &unk_1EF582860;
  gdc::Resource::Resource((uint64_t)(v287 + 32), v309);
  *(_OWORD *)(v287 + 200) = 0u;
  *((void *)v287 + 3) = &unk_1EF550320;
  long long v288 = v328;
  *((_OWORD *)v287 + 11) = v328;
  *((void *)v287 + 24) = v329;
  long long v328 = 0uLL;
  unint64_t v329 = 0;
  *(_OWORD *)(v287 + 216) = 0u;
  *((_DWORD *)v287 + 58) = 1065353216;
  *((_OWORD *)v287 + 15) = *(_OWORD *)v349;
  *((void *)v287 + 32) = v350;
  v349[0] = 0;
  v349[1] = 0;
  uint64_t v350 = 0;
  BOOL v289 = (unint64_t *)*((void *)&v288 + 1);
  float v290 = (unint64_t *)v288;
  if ((void)v288 != *((void *)&v288 + 1))
  {
    uint64_t v291 = 0;
    do
    {
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v287 + 200), *v290, v290)[3] = v291++;
      v290 += 233;
    }
    while (v290 != v289);
  }
  float v292 = v331;
  unint64_t v330 = v287 + 24;
  uint64_t v331 = (std::__shared_weak_count *)v287;
  if (v292 && !atomic_fetch_add(&v292->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
    std::__shared_weak_count::__release_weak(v292);
  }
  float v293 = (char *)v349[0];
  if (v349[0])
  {
    int v294 = (char *)v349[1];
    if (v349[1] != v349[0])
    {
      do
      {
        int v295 = (void *)*((void *)v294 - 10);
        if (v295 != *((void **)v294 - 8)) {
          free(v295);
        }
        if (*(v294 - 120)) {
          *(v294 - 120) = 0;
        }
        if (*(v294 - 160)) {
          *(v294 - 160) = 0;
        }
        v294 -= 168;
      }
      while (v294 != v293);
      float v293 = (char *)v349[0];
    }
    operator delete(v293);
  }
  uint64_t v296 = v328;
  if ((void)v328)
  {
    uint64_t v297 = *((void *)&v328 + 1);
    float v298 = (void *)v328;
    if (*((void *)&v328 + 1) != (void)v328)
    {
      do
      {
        uint64_t v299 = v297 - 1864;
        uint64_t v300 = *(void **)(v297 - 1776);
        BOOL v301 = *(void **)(v297 - 1768);
        if (v300 != v301)
        {
          do
          {
            size_t v302 = (void *)v300[31];
            if (v302 != (void *)v300[33]) {
              free(v302);
            }
            v300 += 36;
          }
          while (v300 != v301);
          uint64_t v300 = *(void **)(v297 - 1776);
        }
        if (v300 != *(void **)(v297 - 1760)) {
          free(v300);
        }
        v297 -= 1864;
      }
      while (v299 != v296);
      float v298 = (void *)v328;
    }
    *((void *)&v328 + 1) = v296;
    operator delete(v298);
  }
  long double v7 = v308;
LABEL_282:
  uint64_t result = GEOMuninMetadataTileDestroy();
  int v304 = v331;
  if (v330) {
    size_t v305 = v330 + 8;
  }
  else {
    size_t v305 = 0;
  }
  *long double v7 = v305;
  v7[1] = (char *)v304;
  return result;
}

void sub_1A279A838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,void *__p)
{
  md::mun::CollectionPoint::~CollectionPoint((md::mun::CollectionPoint *)&STACK[0xA70]);
  if (v53) {
    operator delete(v53);
  }
  std::vector<md::mun::CollectionPoint>::~vector[abi:nn180100](&a47);
  if (__p) {
    operator delete(__p);
  }
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void geo::linear_map<md::mun::RigType,BOOL,std::equal_to<md::mun::RigType>,std::allocator<std::pair<md::mun::RigType,BOOL>>,std::vector<std::pair<md::mun::RigType,BOOL>>>::emplace<md::mun::RigType,BOOL>(char **a1, unsigned __int8 a2, __int16 a3)
{
  __int16 v5 = a2;
  double v6 = *a1;
  long double v7 = a1[1];
  __int16 v8 = *a1;
  if (*a1 != v7)
  {
    __int16 v8 = *a1;
    while (*v8 != a2)
    {
      v8 += 2;
      if (v8 == v7) {
        goto LABEL_7;
      }
    }
  }
  if (v8 == v7)
  {
LABEL_7:
    unint64_t v9 = (unint64_t)a1[2];
    if ((unint64_t)v7 >= v9)
    {
      uint64_t v11 = v7 - v6;
      if (v7 - v6 <= -3) {
        abort();
      }
      uint64_t v12 = v11 >> 1;
      unint64_t v13 = v9 - (void)v6;
      if (v13 <= (v11 >> 1) + 1) {
        unint64_t v14 = v12 + 1;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v13 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v15 = v14;
      }
      if (v15)
      {
        if (v15 < 0) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        int8x16_t v16 = operator new(2 * v15);
      }
      else
      {
        int8x16_t v16 = 0;
      }
      uint64_t v17 = &v16[2 * v12];
      _WORD *v17 = v5 | (a3 << 8);
      __int16 v10 = (unsigned __int8 *)(v17 + 1);
      if (v6 != v7)
      {
        if ((unint64_t)(v11 - 2) < 0x1E) {
          goto LABEL_36;
        }
        if (v7 - v16 - (v11 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
          goto LABEL_36;
        }
        unint64_t v18 = ((unint64_t)(v11 - 2) >> 1) + 1;
        int v19 = &v16[2 * v12 - 16];
        uint64_t v20 = v7 - 16;
        unint64_t v21 = v18 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          long long v22 = *(_OWORD *)v20;
          *(v19 - 1) = *((_OWORD *)v20 - 1);
          *int v19 = v22;
          v19 -= 2;
          v20 -= 32;
          v21 -= 16;
        }
        while (v21);
        v17 -= v18 & 0xFFFFFFFFFFFFFFF0;
        v7 -= 2 * (v18 & 0xFFFFFFFFFFFFFFF0);
        if (v18 != (v18 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_36:
          do
          {
            __int16 v23 = *((_WORD *)v7 - 1);
            v7 -= 2;
            *--uint64_t v17 = v23;
          }
          while (v7 != v6);
          double v6 = *a1;
        }
      }
      *a1 = (char *)v17;
      a1[1] = (char *)v10;
      a1[2] = &v16[2 * v15];
      if (v6) {
        operator delete(v6);
      }
    }
    else
    {
      *(_WORD *)long double v7 = a2 | (unsigned __int16)(a3 << 8);
      __int16 v10 = (unsigned __int8 *)(v7 + 2);
    }
    a1[1] = (char *)v10;
  }
}

uint64_t std::__shared_ptr_emplace<md::mun::MetadataResource>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::mun::MetadataResource>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582860;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::mun::MetadataResource>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582860;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::mun::MetadataResourceDecoder::~MetadataResourceDecoder(md::mun::MetadataResourceDecoder *this)
{
}

void sub_1A279ACF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A279AD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t karo::graphics::BasicViewportNode::getViewport(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

void karo::graphics::BasicViewportNode::~BasicViewportNode(void **this)
{
  *this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1A6239270);
}

{
  *this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

char *md::ARWalkingPerpendicularManeuverLabelPart::debugCompositeClassName@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1A28FD6D0;
  strcpy(result, "ARWalkingPerpendicularManeuverLabelPart");
  return result;
}

uint64_t md::ARWalkingPerpendicularManeuverLabelPart::modelMatrix(md::ARWalkingPerpendicularManeuverLabelPart *this)
{
  return (uint64_t)this + 1272;
}

uint64_t md::ARWalkingPerpendicularManeuverLabelPart::stagingModelMatrix(md::ARWalkingPerpendicularManeuverLabelPart *this)
{
  return (uint64_t)this + 680;
}

uint64_t md::ARWalkingPerpendicularManeuverLabelPart::layoutForDisplay(uint64_t a1, uint64_t a2, md::LabelAnimator *a3, _DWORD *a4)
{
  v8.n128_f64[0] = md::ARWalkingPerpendicularManeuverLabelPart::updateLocalState(a1, a1 + 1224, a2 + 440, (double *)(*(void *)(a1 + 16) + 408), (double *)(*(void *)(a1 + 16) + 960), (double *)(*(void *)(a1 + 16) + 864), *(double *)(a1 + 1256), *(double *)(a1 + 1264), *(float *)(*(void *)(a1 + 32) + 72), *(float *)(*(void *)(a1 + 32) + 68));
  uint64_t v22 = 0;
  uint64_t v11 = md::CompositeLabelPart::layoutForDisplay((void *)a1, a2, a3, a4, &v22, v8, v9, v10);
  if (v11 == 37)
  {
    float v12 = *(float *)(*(void *)(a1 + 32) + 68);
    *(float *)(a1 + 416) = v12;
    *(_DWORD *)(a1 + 352) = *a4;
    *(_DWORD *)(a1 + 356) = a4[1];
    *(unsigned char *)(a1 + 510) = fabsf(v12 + -1.0) > 0.000001;
    float v13 = *(float *)(a2 + 904);
    *(float *)(a1 + 536) = v13;
    float v14 = *(float *)(a2 + 908);
    *(float *)(a1 + 540) = v14;
    float v15 = *(float *)(a1 + 528);
    float v16 = v15 * v14;
    float v17 = *(float *)(a1 + 532);
    float v18 = -(float)((float)(v17 * v14) - (float)(v15 * v13));
    *(float *)(a1 + 328) = v18;
    *(float *)(a1 + 332) = v16 + (float)(v17 * v13);
    *(unsigned char *)(a1 + 508) = fabsf(v18 + -1.0) > 0.000001;
    *(void *)(a1 + 424) = a1 + 1272;
    int v19 = *(void (**)(void))(***(void ***)(**(void **)(a1 + 576) + 576) + 824);
    if (*(float *)(*(void *)(a1 + 16) + 764) >= 0.0)
    {
      v19();
      (*(void (**)(void))(**(void **)(*(void *)(**(void **)(a1 + 576) + 576) + 8) + 824))();
      if (*(unsigned char *)(a1 + 1816))
      {
        uint64_t v20 = *(void (**)(void))(**(void **)(*(void *)(a1 + 576) + 16) + 824);
        goto LABEL_7;
      }
    }
    else
    {
      v19();
      (*(void (**)(void))(**(void **)(*(void *)(**(void **)(a1 + 576) + 576) + 8) + 824))();
      if (*(unsigned char *)(a1 + 1816))
      {
        uint64_t v20 = *(void (**)(void))(**(void **)(*(void *)(a1 + 576) + 16) + 824);
LABEL_7:
        v20();
      }
    }
  }
  return v11;
}

double md::ARWalkingPerpendicularManeuverLabelPart::updateLocalState(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, double *a5, double *a6, double a7, double a8, double a9, double a10)
{
  uint64_t v10 = *(void *)(a1 + 16);
  if (*(unsigned char *)(v10 + 164))
  {
    double v126 = a10 * a9;
    double v133 = a10 * a9 * *(double *)(a3 + 320);
    double v134 = *(float *)(v10 + 156);
    double v135 = *(float *)(v10 + 160);
    double v136 = *(float *)(v10 + 152);
    double v17 = *a6;
    double v18 = a6[1];
    double v19 = a6[2];
    double v20 = -(v19 * v134 - v18 * v135);
    double v141 = -(*a6 * v135 - v19 * v136);
    double v128 = -(v18 * v136 - *a6 * v134);
    double v21 = -(v128 * v18 - v141 * v19);
    double v22 = -(v20 * v19 - v128 * *a6);
    double v23 = -(v141 * *a6 - v20 * v18);
    __double2 v24 = __sincos_stret(*(double *)(a2 + 8) * -0.00872664626);
    double v25 = v24.__sinval / sqrt(v128 * v128 + v20 * v20 + v141 * v141);
    double v130 = v20;
    double v26 = v25 * v20;
    double v27 = v25 * v141;
    double v28 = v25 * v128;
    double v29 = -(v28 * v18 - v27 * v19) - (v28 * v18 - v27 * v19);
    double v30 = -(v26 * v19 - v28 * v17) - (v26 * v19 - v28 * v17);
    double v31 = -(v27 * v17 - v26 * v18) - (v27 * v17 - v26 * v18);
    double v32 = v17 + v29 * v24.__cosval + v31 * v27 - v30 * v28;
    double v33 = v18 + v29 * v28 + v30 * v24.__cosval - v31 * v26;
    double v34 = v19 + v30 * v26 + v31 * v24.__cosval - v29 * v27;
    double v35 = -(v28 * v22 - v27 * v23) - (v28 * v22 - v27 * v23);
    double v36 = -(v26 * v23 - v28 * v21) - (v26 * v23 - v28 * v21);
    double v37 = -(v27 * v21 - v26 * v22) - (v27 * v21 - v26 * v22);
    double v38 = v35 * v24.__cosval - (v128 * v18 - v141 * v19) + v37 * v27 - v36 * v28;
    double v39 = v22 + v35 * v28 + v36 * v24.__cosval - v37 * v26;
    double v40 = v23 + v36 * v26 + v37 * v24.__cosval - v35 * v27;
    double v41 = *(float *)(a2 + 4);
    double v42 = -(v38 * v41 - a8 * -0.5 * v21);
    double v43 = -(v39 * v41 - a8 * -0.5 * v22);
    double v44 = -(v40 * v41 - a8 * -0.5 * v23);
    double v45 = v21 * (a8 * 0.5) + v38 * v41;
    double v46 = v22 * (a8 * 0.5) + v39 * v41;
    double v47 = v23 * (a8 * 0.5) + v40 * v41;
    if (*(unsigned char *)(a2 + 28) == 6)
    {
      double v42 = v45;
      double v43 = v46;
    }
    else
    {
      double v47 = v44;
    }
    double v48 = v47 + a7 * -0.5 - *(float *)(a2 + 24) + (v42 * v21 + v43 * v22 + v47 * v23) * *(double *)(a1 + 1240);
    double v49 = *(float *)a2;
    double v129 = v32;
    double v50 = *a4;
    double v51 = a4[1];
    double v52 = a4[2];
    double v144 = v38;
    *(double *)&long long v145 = v39;
    *((double *)&v146 + 1) = v20;
    *(double *)&long long v147 = v141;
    double v53 = v34;
    *((double *)&v148 + 1) = v32;
    double v149 = v33;
    double v54 = v33;
    *((double *)&v145 + 1) = v40;
    double v131 = v50 + v42 * v133;
    double v132 = v51 + v43 * v133;
    *((double *)&v147 + 1) = v128;
    double v150 = v34;
    *(void *)&long long v146 = 0;
    *(void *)&long long v148 = 0;
    *(void *)&long long v151 = 0;
    double v138 = v50 + (v42 + v32 * v49) * v133;
    double v140 = v51 + (v43 + v33 * v49) * v133;
    *((double *)&v151 + 1) = v138;
    *(double *)&long long v152 = v140;
    double v127 = v52 + (v48 + v34 * v49) * v133;
    *((double *)&v152 + 1) = v127;
    uint64_t v153 = 0x3FF0000000000000;
    memset(&v143[8], 0, 32);
    memset(&v142[56], 0, 24);
    memset(&v142[8], 0, 32);
    *(void *)&v143[40] = 0x3FF0000000000000;
    *(double *)float v142 = v133;
    double v55 = v52 + v48 * v133;
    *(_OWORD *)&v142[40] = *(unint64_t *)&v133;
    *(double *)float v143 = v133;
    gm::operator*<double,4,4,4>((double *)&v154, &v144, (double *)v142);
    long long v56 = v155;
    *(_OWORD *)(a2 + 176) = v154;
    *(_OWORD *)(a2 + 192) = v56;
    long long v57 = v157;
    *(_OWORD *)(a2 + 208) = v156;
    *(_OWORD *)(a2 + 224) = v57;
    long long v58 = v159;
    *(_OWORD *)(a2 + 240) = v158;
    *(_OWORD *)(a2 + 256) = v58;
    long long v59 = v161;
    *(_OWORD *)(a2 + 272) = v160;
    *(_OWORD *)(a2 + 288) = v59;
    double v144 = v38;
    *(double *)&long long v145 = v39;
    *((double *)&v146 + 1) = v130;
    *(double *)&long long v147 = v141;
    *((double *)&v148 + 1) = v129;
    double v149 = v54;
    *((double *)&v145 + 1) = v40;
    *((double *)&v147 + 1) = v128;
    double v150 = v53;
    *(void *)&long long v146 = 0;
    *(void *)&long long v148 = 0;
    *(void *)&long long v151 = 0;
    *((double *)&v151 + 1) = v131;
    *(double *)&long long v152 = v132;
    *((double *)&v152 + 1) = v55;
    uint64_t v153 = 0x3FF0000000000000;
    memset(&v143[8], 0, 32);
    memset(&v142[56], 0, 24);
    memset(&v142[8], 0, 32);
    *(void *)&v143[40] = 0x3FF0000000000000;
    *(double *)float v142 = v133;
    *(_OWORD *)&v142[40] = *(unint64_t *)&v133;
    *(double *)float v143 = v133;
    gm::operator*<double,4,4,4>((double *)&v154, &v144, (double *)v142);
    long long v60 = v155;
    *(_OWORD *)(a2 + 304) = v154;
    *(_OWORD *)(a2 + 320) = v60;
    long long v61 = v157;
    *(_OWORD *)(a2 + 336) = v156;
    *(_OWORD *)(a2 + 352) = v61;
    long long v62 = v159;
    *(_OWORD *)(a2 + 368) = v158;
    *(_OWORD *)(a2 + 384) = v62;
    long long v63 = v161;
    *(_OWORD *)(a2 + 400) = v160;
    *(_OWORD *)(a2 + 416) = v63;
    double v64 = *a6;
    double v65 = a6[1];
    double v66 = a6[2];
    double v67 = -(v66 * v134 - v65 * v135);
    double v68 = -(*a6 * v135 - v66 * v136);
    double v69 = -(v65 * v136 - *a6 * v134);
    double v70 = -(v68 * v66 - v69 * v65);
    double v71 = -(v69 * *a6 - v67 * v66);
    double v72 = -(v67 * v65 - v68 * *a6);
    double v73 = v67 - (v69 * *a6 - v67 * v66);
    if (v73 + v66 <= 0.0)
    {
      if (v67 <= v71 || v67 <= v66)
      {
        double v82 = sqrt(v66 + 1.0 - v73);
        double v83 = 1.0 / (v82 + v82);
        double v84 = (v64 - (v65 * v136 - *a6 * v134)) * v83;
        double v85 = v65 - (v67 * v65 - v68 * *a6);
        double v86 = v85 * v83;
        double v87 = v82 * 0.5;
        double v88 = (v68 - v70) * v83;
        double v89 = sqrt(1.0 - (v66 - (v66 * v134 - v65 * v135)) - (v69 * *a6 - v67 * v66));
        double v90 = v70 - (*a6 * v135 - v66 * v136);
        double v91 = 1.0 / (v89 + v89);
        double v92 = v90 * v91;
        double v93 = v89 * 0.5;
        double v94 = v85 * v91;
        double v95 = (v64 - v69) * v91;
        if (v71 > v66) {
          double v75 = v92;
        }
        else {
          double v75 = v84;
        }
        if (v71 > v66) {
          double v76 = v93;
        }
        else {
          double v76 = v86;
        }
        if (v71 > v66) {
          double v77 = v94;
        }
        else {
          double v77 = v87;
        }
        if (v71 > v66) {
          double v78 = v95;
        }
        else {
          double v78 = v88;
        }
      }
      else
      {
        double v79 = sqrt(1.0 - (v66 * v134 - v65 * v135) - (v66 - (v69 * *a6 - v67 * v66)));
        double v75 = v79 * 0.5;
        double v80 = v70 - (*a6 * v135 - v66 * v136);
        double v81 = 1.0 / (v79 + v79);
        double v76 = v80 * v81;
        double v77 = (v64 - (v65 * v136 - *a6 * v134)) * v81;
        double v78 = (v72 - v65) * v81;
      }
    }
    else
    {
      double v74 = 0.5 / sqrt(v73 + v66 + 1.0);
      double v75 = v74 * (v72 - v65);
      double v76 = v74 * (v64 - v69);
      double v77 = v74 * (v68 - v70);
      double v78 = 0.25 / v74;
    }
    double v97 = v138;
    double v96 = v140;
    if (!*(unsigned char *)(a1 + 1816))
    {
      long long v110 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a2 + 64) = v110;
      long long v111 = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a2 + 96) = v111;
      long long v112 = *(_OWORD *)(a2 + 256);
      *(_OWORD *)(a2 + 112) = *(_OWORD *)(a2 + 240);
      *(_OWORD *)(a2 + 128) = v112;
      long long v113 = *(_OWORD *)(a2 + 288);
      *(_OWORD *)(a2 + 144) = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a2 + 160) = v113;
      goto LABEL_32;
    }
    generateRotationMatrixMeshPositioningMode((double *)&v162, *(void *)(a1 + 16) + 152, a3, a4, 6, 1, *(unsigned __int8 *)(a1 + 1817));
    double v98 = v126 * *(double *)(a3 + 320);
    long long v154 = v162;
    long long v156 = v164;
    long long v158 = v166;
    long long v155 = v163;
    long long v157 = v165;
    long long v159 = v167;
    long long v160 = *(_OWORD *)a4;
    *(double *)&long long v161 = a4[2];
    *((void *)&v161 + 1) = 0x3FF0000000000000;
    long long v147 = 0u;
    double v149 = 0.0;
    long long v152 = 0u;
    long long v151 = 0u;
    long long v148 = 0u;
    long long v146 = 0u;
    long long v145 = 0u;
    uint64_t v153 = 0x3FF0000000000000;
    double v144 = v98;
    *(double *)&long long v147 = v98;
    double v150 = v98;
    gm::operator*<double,4,4,4>((double *)v142, (double *)&v154, &v144);
    long long v99 = *(_OWORD *)&v142[16];
    *(_OWORD *)(a2 + 48) = *(_OWORD *)v142;
    *(_OWORD *)(a2 + 64) = v99;
    long long v100 = *(_OWORD *)&v142[48];
    *(_OWORD *)(a2 + 80) = *(_OWORD *)&v142[32];
    *(_OWORD *)(a2 + 96) = v100;
    long long v101 = *(_OWORD *)v143;
    *(_OWORD *)(a2 + 112) = *(_OWORD *)&v142[64];
    *(_OWORD *)(a2 + 128) = v101;
    long long v102 = *(_OWORD *)&v143[32];
    *(_OWORD *)(a2 + 144) = *(_OWORD *)&v143[16];
    *(_OWORD *)(a2 + 160) = v102;
    double v103 = *a4;
    double v104 = a4[1];
    double v105 = a4[2];
    double v106 = *a6;
    double v107 = a6[1];
    if (fabs(*a6) >= 0.0001)
    {
      double v108 = a6[2];
    }
    else
    {
      double v108 = a6[2];
      if (fabs(v107) < 0.0001)
      {
        double v97 = v138;
        double v96 = v140;
        if (fabs(v108 + -1.0) < 0.0001)
        {
          double v109 = a5[2];
LABEL_31:
          *(double *)(a2 + 536) = v75;
          *(double *)(a2 + 544) = v76;
          *(double *)(a2 + 552) = v77;
          *(double *)(a2 + 560) = v78;
          *(double *)(a2 + 512) = v103;
          *(double *)(a2 + 520) = v104;
          *(double *)(a2 + 528) = v109;
          *(double *)(a2 + 568) = v133;
          *(double *)(a2 + 576) = v133;
          *(double *)(a2 + 584) = v133;
LABEL_32:
          double v115 = *a6;
          double v116 = a6[1];
          if (fabs(*a6) >= 0.0001)
          {
            double v117 = a6[2];
          }
          else
          {
            double v117 = a6[2];
            if (fabs(v116) < 0.0001 && fabs(v117 + -1.0) < 0.0001)
            {
              double v118 = a5[2];
LABEL_38:
              double v120 = 0.707106781 / sqrt(v64 * v64 + v65 * v65 + v66 * v66);
              double v121 = v120 * v64;
              double v122 = v120 * v65;
              double v123 = v120 * v66;
              *(double *)(a2 + 464) = v77 * v121 - (v75 * v123 - v76 * 0.707106781) + v78 * v122;
              *(double *)(a2 + 472) = v77 * 0.707106781 - (v76 * v121 - v75 * v122) + v78 * v123;
              *(double *)(a2 + 432) = v97;
              *(double *)(a2 + 440) = v96;
              *(double *)(a2 + 448) = v118;
              *(double *)(a2 + 456) = v75 * 0.707106781 + v76 * v123 - v77 * v122 + v78 * v121;
              double result = -(v75 * v121 + v76 * v122 + v77 * v123 - v78 * 0.707106781);
              *(double *)(a2 + 480) = result;
              *(double *)(a2 + 488) = v133;
              *(double *)(a2 + 496) = v133;
              *(double *)(a2 + 504) = v133;
              return result;
            }
          }
          double v119 = (*a5 - v97) * v115 + v116 * (a5[1] - v96) + v117 * (a5[2] - v127);
          double v97 = v97 + v119 * v115;
          double v96 = v96 + v119 * v116;
          double v118 = v127 + v119 * v117;
          goto LABEL_38;
        }
LABEL_30:
        double v114 = (*a5 - v103) * v106 + v107 * (a5[1] - v104) + v108 * (a5[2] - v105);
        double v103 = v103 + v114 * v106;
        double v104 = v104 + v114 * v107;
        double v109 = v105 + v114 * v108;
        goto LABEL_31;
      }
    }
    double v97 = v138;
    double v96 = v140;
    goto LABEL_30;
  }
  float v125 = (md::ARWalkingPerpendicularManeuverLabelPart *)std::__throw_bad_optional_access[abi:nn180100]();
  return md::ARWalkingPerpendicularManeuverLabelPart::updateForDisplay(v125);
}

double md::ARWalkingPerpendicularManeuverLabelPart::updateForDisplay(md::ARWalkingPerpendicularManeuverLabelPart *this)
{
  double v2 = (uint64_t *)*((void *)this + 72);
  uint64_t v3 = (uint64_t *)*((void *)this + 73);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = *v2++;
      (*(void (**)(uint64_t))(*(void *)v4 + 112))(v4);
    }
    while (v2 != v3);
    double v2 = (uint64_t *)*((void *)this + 72);
  }
  *((void *)this + 153) = *((void *)this + 79);
  *((void *)this + 154) = *((void *)this + 80);
  *((_DWORD *)this + 312) = *((_DWORD *)this + 164);
  double v5 = 0.0;
  if (*((unsigned char *)this + 1816))
  {
    double v6 = *(float **)(v2[2] + 24);
    if (v6[20] >= v6[18])
    {
      float v7 = v6[21];
      float v8 = v6[19];
      BOOL v9 = v7 < v8;
      double v5 = (float)(v7 - v8);
      if (v9) {
        double v5 = 0.0;
      }
    }
  }
  *((double *)this + 157) = v5;
  *((unsigned char *)this + 1252) = *((unsigned char *)this + 660);
  uint64_t v10 = *(void *)(**(void **)(*v2 + 576) + 24);
  *((double *)this + 158) = (float)(*(float *)(v10 + 80) - *(float *)(v10 + 72));
  double result = *((double *)this + 81);
  *((double *)this + 155) = result;
  return result;
}

uint64_t md::ARWalkingPerpendicularManeuverLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (!*(unsigned char *)(a1 + 1816)) {
    goto LABEL_23;
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 576) + 16);
  uint64_t v45 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t *))(*(void *)v6 + 80))(v6, a2, a3, &v45);
  if (result == 37)
  {
    uint64_t v8 = *(void *)(a1 + 576);
    BOOL v9 = *(_DWORD **)(v8 + 24);
    uint64_t v10 = *(_DWORD **)(*(void *)(v8 + 16) + 24);
    v9[164] = v10[18];
    v9[165] = v10[19];
    v9[166] = v10[20];
    v9[167] = v10[21];
    uint64_t v45 = 0;
    uint64_t result = (*(uint64_t (**)(_DWORD *, uint64_t, _DWORD *, uint64_t *))(*(void *)v9 + 80))(v9, a2, a3, &v45);
    if (result == 37)
    {
LABEL_23:
      uint64_t v11 = **(void **)(a1 + 576);
      uint64_t v45 = 0;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t *))(*(void *)v11 + 80))(v11, a2, a3, &v45);
      if (result == 37)
      {
        float v12 = *(void **)(a1 + 576);
        float v13 = (_DWORD *)v12[1];
        float v14 = *(_DWORD **)(**(void **)(*v12 + 576) + 24);
        v13[164] = v14[18];
        v13[165] = v14[19];
        v13[166] = v14[20];
        v13[167] = v14[21];
        uint64_t v45 = 0;
        uint64_t result = (*(uint64_t (**)(_DWORD *, uint64_t, _DWORD *, uint64_t *))(*(void *)v13 + 80))(v13, a2, a3, &v45);
        if (result == 37)
        {
          float v15 = *(float *)(*(void *)(a1 + 32) + 20);
          *(float *)(a1 + 176) = v15;
          *(_DWORD *)(a1 + 112) = *a3;
          *(_DWORD *)(a1 + 116) = a3[1];
          *(unsigned char *)(a1 + 270) = fabsf(v15 + -1.0) > 0.000001;
          uint64_t v16 = *(void *)(a2 + 432);
          float v17 = *(float *)(v16 + 464);
          *(float *)(a1 + 296) = v17;
          float v18 = *(float *)(v16 + 468);
          *(float *)(a1 + 300) = v18;
          float v19 = *(float *)(a1 + 288);
          float v20 = v19 * v18;
          float v21 = *(float *)(a1 + 292);
          float v22 = -(float)((float)(v21 * v18) - (float)(v19 * v17));
          *(float *)(a1 + 88) = v22;
          *(float *)(a1 + 92) = v20 + (float)(v21 * v17);
          *(unsigned char *)(a1 + 268) = fabsf(v22 + -1.0) > 0.000001;
          double v23 = *(void ***)(a1 + 576);
          __double2 v24 = *(void ***)(a1 + 584);
          int8x16_t v25 = (int8x16_t)xmmword_1A28FC750;
          for (int8x16_t i = (int8x16_t)xmmword_1A28FC750;
                v23 != v24;
                int8x16_t v25 = vbslq_s8((int8x16_t)vcgtq_f32(v30, v29), *(int8x16_t *)(v31 + 72), v43))
          {
            int8x16_t v41 = i;
            int8x16_t v43 = v25;
            double v27 = *v23++;
            double v28 = (int8x16_t *)(*(uint64_t (**)(void *))(*v27 + 248))(v27);
            v29.i64[0] = v28->i64[0];
            v29.i64[1] = v41.i64[1];
            v30.i64[0] = v41.i64[0];
            v30.i64[1] = v28->i64[1];
            int8x16_t i = vbslq_s8((int8x16_t)vcgtq_f32(v30, v29), *v28, v41);
            uint64_t v31 = v27[3];
            v29.i64[0] = *(void *)(v31 + 72);
            v29.i64[1] = v43.i64[1];
            v30.i64[0] = v43.i64[0];
            v30.i64[1] = *(void *)(v31 + 80);
          }
          double v32 = *(void **)(a1 + 232);
          int8x16_t v42 = i;
          int8x16_t v44 = v25;
          if (v32)
          {
            free(v32);
            int8x16_t i = v42;
            int8x16_t v25 = v44;
            *(void *)(a1 + 232) = 0;
          }
          double v33 = *(void **)(a1 + 240);
          if (v33)
          {
            free(v33);
            int8x16_t i = v42;
            int8x16_t v25 = v44;
            *(void *)(a1 + 240) = 0;
          }
          *(int8x16_t *)(a1 + 72) = v25;
          *(int8x16_t *)(a1 + 152) = i;
          if (*(unsigned char *)(a1 + 565)) {
            *(void *)(a1 + 184) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
          }
          if (*(unsigned char *)(a1 + 566))
          {
            double v34 = *(void **)(a1 + 576);
            double v35 = 0.0;
            if (*(unsigned char *)(a1 + 1816))
            {
              double v36 = *(float **)(v34[2] + 24);
              if (v36[20] >= v36[18])
              {
                float v37 = v36[21];
                float v38 = v36[19];
                BOOL v39 = v37 < v38;
                double v35 = (float)(v37 - v38);
                if (v39) {
                  double v35 = 0.0;
                }
              }
            }
            uint64_t v40 = *(void *)(**(void **)(*v34 + 576) + 24);
            md::ARWalkingPerpendicularManeuverLabelPart::updateLocalState(a1, a1 + 632, *(void *)(a2 + 432), (double *)(*(void *)(a1 + 16) + 592), (double *)(*(void *)(a1 + 16) + 616), (double *)(*(void *)(a1 + 16) + 520), v35, (float)(*(float *)(v40 + 80) - *(float *)(v40 + 72)), *(float *)(*(void *)(a1 + 32) + 24), *(float *)(*(void *)(a1 + 32) + 20));
            *(void *)(a1 + 184) = a1 + 680;
          }
          return 37;
        }
      }
    }
  }
  return result;
}

uint64_t *md::ARWalkingPerpendicularManeuverLabelPart::updateWithStyle(md::ARWalkingPerpendicularManeuverLabelPart *this, md::LabelManager *a2)
{
  uint64_t v3 = (uint64_t *)*((void *)this + 72);
  uint64_t v4 = (uint64_t *)*((void *)this + 73);
  if (v3 == v4)
  {
    uint64_t v8 = (uint64_t *)*((void *)this + 4);
    uint64_t v9 = *v8;
    float v6 = *(float *)(*v8 + 172);
  }
  else
  {
    float v6 = -3.4028e38;
    do
    {
      uint64_t v7 = *v3++;
      (*(void (**)(uint64_t, md::LabelManager *))(*(void *)v7 + 72))(v7, a2);
      float v6 = fmaxf(v6, (*(float (**)(uint64_t))(*(void *)v7 + 240))(v7));
    }
    while (v3 != v4);
    uint64_t v8 = (uint64_t *)*((void *)this + 4);
    uint64_t v9 = *v8;
  }
  *((float *)this + 42) = v6;
  *((_DWORD *)this + 158) = *(_DWORD *)(*md::LabelStyle::prepareStyleGroup<md::LabelComponentStyleGroup>(v9) + 8);
  *((_DWORD *)this + 159) = *(_DWORD *)(*md::LabelStyle::prepareStyleGroup<md::LabelComponentStyleGroup>(*v8) + 12);
  double v10 = *(float *)(*md::LabelStyle::prepareStyleGroup<md::LabelComponentStyleGroup>(*v8) + 16);
  *((double *)this + 80) = v10;
  uint64_t v11 = *v8;
  uint64_t v12 = *(void *)(*v8 + 272);
  if (!v12)
  {
    float v13 = md::LabelStyle::prepareStyleGroup<md::LabelPointStyleGroup>(*v8);
    uint64_t v12 = *v13;
    *(void *)(v11 + 272) = *v13;
    double v10 = *((double *)this + 80);
    uint64_t v11 = *v8;
  }
  *((_DWORD *)this + 164) = *(_DWORD *)(v12 + 32);
  *((long double *)this + 81) = tan(v10 * 0.0174532925);
  uint64_t result = md::LabelStyle::prepareStyleGroup<md::LabelComponentStyleGroup>(v11);
  *((unsigned char *)this + 660) = *(unsigned char *)(*result + 20);
  return result;
}

void md::ARWalkingPerpendicularManeuverLabelPart::~ARWalkingPerpendicularManeuverLabelPart(md::ARWalkingPerpendicularManeuverLabelPart *this)
{
  md::CompositeLabelPart::~CompositeLabelPart(this);
  unsigned __int8 v1 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
  {
    unsigned __int8 v1 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
    if (v3) {
      operator new();
    }
  }
  double v2 = *(void (**)(void))(**((void **)v1 + 91) + 40);
  v2();
}

uint64_t md::ARWalkingPerpendicularManeuverLabelPart::createPart(md::LabelManager *a1, float *a2, uint64_t a3, uint64_t a4, int a5, long long *a6)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  uint64_t v62 = mdm::Allocator::instance(void)::alloc;
  HIBYTE(v61) = 3;
  LODWORD(v60) = 9602786;
  float v12 = a2[98];
  getTextDataString(&v58, a3, a4, a6);
  getTextDataString(&v56, a3, (uint64_t)&v60, a6);
  if (v56)
  {
    float v13 = (char *)operator new(0x58uLL);
    uint64_t v14 = 0;
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 2) = 0;
    *(void *)float v13 = &unk_1EF583858;
    *((void *)v13 + 5) = 0;
    *((void *)v13 + 6) = 0;
    *((_DWORD *)v13 + 14) = 0;
    *((void *)v13 + 3) = &unk_1EF55AE58;
    *((void *)v13 + 4) = 0;
    *(void *)&long long v15 = 0x100000001;
    *((void *)&v15 + 1) = 0x100000001;
    *(_OWORD *)(v13 + 60) = v15;
    *(void *)(v13 + 76) = 0x100000001;
    *((_DWORD *)v13 + 21) = 0;
    double v54 = v13 + 24;
    double v55 = (std::__shared_weak_count *)v13;
    if (a5) {
      uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 21) + 40) + 48))(*(void *)(*((void *)a1 + 21) + 40));
    }
    {
      operator new();
    }
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 1824, 8);
    float v17 = (std::__shared_weak_count *)operator new(0xB0uLL);
    v17->__shared_owners_ = 0;
    v17->__shared_weak_owners_ = 0;
    v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582A90;
    uint64_t v52 = md::LabelText::LabelText((uint64_t)&v17[1], v56, (uint64_t)v57, (int)v12);
    double v53 = v17;
    uint64_t v18 = v58;
    if (v58)
    {
      float v19 = (std::__shared_weak_count *)operator new(0xB0uLL);
      v19->__shared_owners_ = 0;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582A90;
      uint64_t v50 = md::LabelText::LabelText((uint64_t)&v19[1], v18, (uint64_t)v59, (int)v12);
      double v51 = v19;
    }
    else
    {
      uint64_t v50 = 0;
      double v51 = 0;
    }
    int v49 = *(_DWORD *)(a3 + 168);
    *(_DWORD *)(v16 + 8) = 1065353216;
    *(void *)(v16 + 16) = 0;
    *(void *)(v16 + 24) = v16;
    long long v20 = 0uLL;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(_OWORD *)(v16 + 72) = xmmword_1A28FC750;
    *(void *)(v16 + 64) = 0;
    *(void *)(v16 + 88) = 1065353216;
    *(_DWORD *)(v16 + 96) = 1065353216;
    *(_OWORD *)(v16 + 100) = 0u;
    *(_DWORD *)(v16 + 116) = 0;
    *(_OWORD *)(v16 + 120) = xmmword_1A28FC750;
    *(_OWORD *)(v16 + 136) = xmmword_1A28FC750;
    *(_OWORD *)(v16 + 152) = xmmword_1A28FC750;
    *(_OWORD *)(v16 + 168) = xmmword_1A28FCDA0;
    *(unsigned char *)(v16 + 224) = 0;
    *(_OWORD *)(v16 + 184) = 0u;
    *(unsigned char *)(v16 + 200) = 0;
    *(_OWORD *)(v16 + 248) = 0u;
    *(_OWORD *)(v16 + 232) = 0u;
    *(_OWORD *)(v16 + 257) = 0u;
    *(_OWORD *)(v16 + 280) = xmmword_1A28FCE90;
    *(_OWORD *)(v16 + 296) = xmmword_1A28FCEA0;
    *(_OWORD *)(v16 + 312) = xmmword_1A28FC750;
    *(void *)(v16 + 328) = 1065353216;
    *(_DWORD *)(v16 + 336) = 1065353216;
    *(_DWORD *)(v16 + 356) = 0;
    *(_OWORD *)(v16 + 340) = 0u;
    *(_OWORD *)(v16 + 360) = xmmword_1A28FC750;
    *(_OWORD *)(v16 + 376) = xmmword_1A28FC750;
    *(_OWORD *)(v16 + 392) = xmmword_1A28FC750;
    *(_OWORD *)(v16 + 408) = xmmword_1A28FCDA0;
    *(unsigned char *)(v16 + 464) = 0;
    *(_OWORD *)(v16 + 424) = 0u;
    *(unsigned char *)(v16 + 440) = 0;
    *(_OWORD *)(v16 + 472) = 0u;
    *(_OWORD *)(v16 + 488) = 0u;
    *(_OWORD *)(v16 + 497) = 0u;
    *(_OWORD *)(v16 + 520) = xmmword_1A28FCE90;
    *(_DWORD *)(v16 + 536) = 1065353216;
    *(_OWORD *)(v16 + 540) = 0u;
    *(_WORD *)(v16 + 556) = 512;
    *(unsigned char *)(v16 + 562) = 0;
    *(_DWORD *)(v16 + 558) = 0;
    *(_WORD *)(v16 + 563) = -1;
    *(_DWORD *)(v16 + 565) = 0;
    *(void *)uint64_t v16 = &unk_1EF538820;
    *(_OWORD *)(v16 + 576) = 0u;
    *(void *)(v16 + 592) = 0;
    {
      long long v20 = 0uLL;
      if (v47) {
        operator new();
      }
    }
    *(void *)(v16 + 600) = mdm::Allocator::instance(void)::alloc;
    *(unsigned char *)(v16 + 608) = 0;
    *(unsigned char *)(v16 + 616) = 0;
    *(_WORD *)(v16 + 628) = 1;
    *(unsigned char *)(v16 + 630) = 0;
    *(void *)uint64_t v16 = &unk_1EF54FCE8;
    *(void *)(v16 + 632) = 0;
    *(_OWORD *)(v16 + 640) = v20;
    *(_DWORD *)(v16 + 656) = 0;
    *(unsigned char *)(v16 + 660) = 6;
    *(_OWORD *)(v16 + 1064) = v20;
    *(_OWORD *)(v16 + 1080) = v20;
    *(_OWORD *)(v16 + 1096) = v20;
    *(_OWORD *)(v16 + 664) = v20;
    *(void *)(v16 + 1112) = 0x3FF0000000000000;
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)(v16 + 1120) = _Q0;
    *(void *)(v16 + 1136) = 0x3FF0000000000000;
    *(_OWORD *)(v16 + 1160) = v20;
    *(_OWORD *)(v16 + 1176) = v20;
    *(_OWORD *)(v16 + 1144) = v20;
    *(void *)(v16 + 1192) = 0x3FF0000000000000;
    *(_OWORD *)(v16 + 1200) = _Q0;
    *(void *)(v16 + 1216) = 0x3FF0000000000000;
    *(void *)(v16 + 1240) = 0;
    *(_DWORD *)(v16 + 1248) = 0;
    *(_OWORD *)(v16 + 1224) = v20;
    *(unsigned char *)(v16 + 1252) = 6;
    *(_OWORD *)(v16 + 1656) = v20;
    *(_OWORD *)(v16 + 1672) = v20;
    *(_OWORD *)(v16 + 1688) = v20;
    *(void *)(v16 + 1256) = 0;
    *(void *)(v16 + 1264) = 0;
    *(void *)(v16 + 1704) = 0x3FF0000000000000;
    *(_OWORD *)(v16 + 1712) = _Q0;
    *(void *)(v16 + 1728) = 0x3FF0000000000000;
    *(_OWORD *)(v16 + 1752) = v20;
    *(_OWORD *)(v16 + 1768) = v20;
    *(_OWORD *)(v16 + 1736) = v20;
    *(void *)(v16 + 1784) = 0x3FF0000000000000;
    long long v48 = _Q0;
    *(_OWORD *)(v16 + 1792) = _Q0;
    *(void *)(v16 + 1808) = 0x3FF0000000000000;
    *(_WORD *)(v16 + 1816) = 1280;
    if (v14)
    {
      {
          operator new();
      }
      uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 792, 8);
      md::AnimatedTextureLabelPart::AnimatedTextureLabelPart(v26, a1, (md::Label *)a2, v14);
    }
    {
      operator new();
    }
    double v27 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 736, 8);
    md::ARWalkingManeuverArrowLabelPart::ARWalkingManeuverArrowLabelPart((uint64_t)v27, a1, (md::Label *)a2, &v52, 0, 1);
    md::CompositeLabelPart::addLabelPart(v16, v27);
    (*(void (**)(md::LabelPart *, uint64_t))(*(void *)v27 + 32))(v27, v16 + 808);
    (*(void (**)(md::LabelPart *, uint64_t))(*(void *)v27 + 40))(v27, v16 + 1400);
    double v28 = (char *)operator new(0xD0uLL);
    *((void *)v28 + 1) = 0;
    *(void *)double v28 = &unk_1EF5827B8;
    memset(v68, 0, sizeof(v68));
    long long v67 = 0u;
    *((void *)v28 + 2) = 0;
    *((void *)v28 + 3) = &unk_1EF5451F8;
    *((_DWORD *)v28 + 8) = atomic_fetch_add(&md::LabelExternalMeshRequest::nextId(void)::next, 1u) + 1;
    v28[36] = 1;
    *(_OWORD *)(v28 + 40) = v67;
    uint64_t v29 = *((void *)&v68[1] + 1);
    *((void *)v28 + 7) = *(void *)&v68[0];
    *((_OWORD *)v28 + 4) = *(_OWORD *)((char *)v68 + 8);
    *((void *)v28 + 10) = v29;
    *(_OWORD *)(v28 + 88) = v48;
    *(_OWORD *)(v28 + 104) = v48;
    *((void *)v28 + 15) = 850045863;
    *((_OWORD *)v28 + 8) = 0u;
    *((_OWORD *)v28 + 9) = 0u;
    *((_OWORD *)v28 + 10) = 0u;
    *((_OWORD *)v28 + 11) = 0u;
    *((void *)v28 + 24) = 0;
    v28[200] = 1;
    *((void *)v28 + 3) = &unk_1EF54E028;
    *(_DWORD *)(v28 + 201) = v49;
    double v65 = v28 + 24;
    double v66 = (std::__shared_weak_count *)v28;
    uint64_t v30 = (*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 21) + 64) + 24))(*(void *)(*((void *)a1 + 21) + 64));
    *(void *)&long long v67 = v28 + 24;
    *((void *)&v67 + 1) = v28;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v28 + 1, 1uLL, memory_order_relaxed);
    md::LabelExternalMeshModerator::requestExternalMesh(v30, &v67);
    if (!atomic_fetch_add((atomic_ullong *volatile)v28 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(char *))(*(void *)v28 + 16))(v28);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v28);
    }
    {
      operator new();
    }
    uint64_t v31 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                + 16))(mdm::Allocator::instance(void)::alloc, 952, 8);
    md::ARFeatureShadowExternalMeshLabelPart::ARFeatureShadowExternalMeshLabelPart((uint64_t)v31, (uint64_t)v65, v66);
    md::CompositeLabelPart::addLabelPart(v16, v31);
    (*(void (**)(md::LabelPart *, uint64_t))(*(void *)v31 + 48))(v31, v16 + 1064);
    (*(void (**)(md::LabelPart *, uint64_t))(*(void *)v31 + 56))(v31, v16 + 1656);
    if (v50)
    {
      {
        operator new();
      }
      double v32 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                  + 16))(mdm::Allocator::instance(void)::alloc, 632, 8);
      md::ARWalkingManeuverTextLabelPart::ARWalkingManeuverTextLabelPart((uint64_t)v32, &v50, 0, 1);
      md::CompositeLabelPart::addLabelPart(v16, v32);
      (*(void (**)(md::LabelPart *, uint64_t))(*(void *)v32 + 32))(v32, v16 + 680);
      (*(void (**)(md::LabelPart *, uint64_t))(*(void *)v32 + 40))(v32, v16 + 1272);
      *(unsigned char *)(v16 + 1816) = 1;
      double v33 = (char *)operator new(0xD0uLL);
      *((void *)v33 + 1) = 0;
      *(void *)double v33 = &unk_1EF5827B8;
      memset(v68, 0, sizeof(v68));
      long long v67 = 0u;
      *((void *)v33 + 2) = 0;
      *((void *)v33 + 3) = &unk_1EF5451F8;
      *((_DWORD *)v33 + 8) = atomic_fetch_add(&md::LabelExternalMeshRequest::nextId(void)::next, 1u) + 1;
      v33[36] = 1;
      *(_OWORD *)(v33 + 40) = v67;
      uint64_t v34 = *((void *)&v68[1] + 1);
      *((void *)v33 + 7) = *(void *)&v68[0];
      *((_OWORD *)v33 + 4) = *(_OWORD *)((char *)v68 + 8);
      *((void *)v33 + 10) = v34;
      *(_OWORD *)(v33 + 88) = v48;
      *(_OWORD *)(v33 + 104) = v48;
      *((void *)v33 + 15) = 850045863;
      *((_OWORD *)v33 + 8) = 0u;
      *((_OWORD *)v33 + 9) = 0u;
      *((_OWORD *)v33 + 10) = 0u;
      *((_OWORD *)v33 + 11) = 0u;
      *((void *)v33 + 24) = 0;
      v33[200] = 1;
      *((void *)v33 + 3) = &unk_1EF54E028;
      *(_DWORD *)(v33 + 201) = v49;
      long long v63 = v33 + 24;
      double v64 = (std::__shared_weak_count *)v33;
      uint64_t v35 = (*(uint64_t (**)(void))(**(void **)(*((void *)a1 + 21) + 64) + 24))(*(void *)(*((void *)a1 + 21) + 64));
      *(void *)&long long v67 = v33 + 24;
      *((void *)&v67 + 1) = v33;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v33 + 1, 1uLL, memory_order_relaxed);
      md::LabelExternalMeshModerator::requestExternalMesh(v35, &v67);
      if (!atomic_fetch_add((atomic_ullong *volatile)v33 + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(char *))(*(void *)v33 + 16))(v33);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v33);
      }
      {
        operator new();
      }
      double v36 = (md::LabelPart *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                                  + 16))(mdm::Allocator::instance(void)::alloc, 952, 8);
      float v37 = v64;
      md::ARFeatureShadowExternalMeshLabelPart::ARFeatureShadowExternalMeshLabelPart((uint64_t)v36, (uint64_t)v63, v64);
      md::CompositeLabelPart::addLabelPart(v16, v36);
      (*(void (**)(md::LabelPart *, uint64_t))(*(void *)v36 + 48))(v36, v16 + 1144);
      (*(void (**)(md::LabelPart *, uint64_t))(*(void *)v36 + 56))(v36, v16 + 1736);
      if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    *(_WORD *)(v16 + 565) = 257;
    float v38 = *(void **)(v16 + 576);
    for (int8x16_t i = *(void **)(v16 + 584); v38 != i; ++v38)
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v38 + 64))(*v38, 1, 1);
    uint64_t v40 = v66;
    if (v66 && !atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
    int8x16_t v41 = v51;
    if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
    int8x16_t v42 = v53;
    if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
    int8x16_t v43 = v55;
    if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  int8x16_t v44 = v57;
  if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
    uint64_t v45 = v59;
    if (!v59) {
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v45 = v59;
    if (!v59) {
      goto LABEL_44;
    }
  }
  if (!atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
    if ((SHIBYTE(v61) & 0x80000000) == 0) {
      return v16;
    }
    goto LABEL_45;
  }
LABEL_44:
  if (SHIBYTE(v61) < 0) {
LABEL_45:
  }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v62 + 40))(v62, v60, v61 & 0x7FFFFFFFFFFFFFFFLL);
  return v16;
}

void sub_1A279D15C(mdm::Allocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  uint64_t v34 = mdm::Allocator::instance(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v34 + 40))(v34, v32, 952);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a29);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a31);
  md::CompositeLabelPart::~CompositeLabelPart(v31);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a15);
  uint64_t v35 = (mdm::Allocator *)std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a17);
  uint64_t v36 = mdm::Allocator::instance(v35);
  (*(void (**)(uint64_t, md::CompositeLabelPart *, uint64_t))(*(void *)v36 + 40))(v36, v31, 1824);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a19);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a21);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a23);
  if (SHIBYTE(a27) < 0) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a28 + 40))(a28, a25, a27 & 0x7FFFFFFFFFFFFFFFLL);
  }
  _Unwind_Resume((_Unwind_Exception *)a1);
}

void sub_1A279D56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  md::TextDataStore::~TextDataStore((md::TextDataStore *)va);
  _Unwind_Resume(a1);
}

md::JunctionLayoutContext *md::JunctionLayoutContext::JunctionLayoutContext(md::JunctionLayoutContext *this, const md::LayoutContext *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = a2;
  *(void *)((char *)this + 28) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  int v3 = (uint64_t *)*((void *)a2 + 1);
  int8x8_t v4 = (int8x8_t)v3[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v6 = 0x1AF456233693CD46uLL % *(void *)&v4;
    if (*(void *)&v4 > 0x1AF456233693CD46uLL) {
      uint64_t v6 = 0x1AF456233693CD46;
    }
  }
  else
  {
    uint64_t v6 = (*(void *)&v4 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v7 = *v3;
  uint64_t v8 = *(void **)(v7 + 8 * v6);
  if (!v8) {
    goto LABEL_23;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_23;
  }
  if (v5.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v11 = v9[1];
      if (v11 == 0x1AF456233693CD46)
      {
        if (v9[2] == 0x1AF456233693CD46) {
          goto LABEL_21;
        }
      }
      else if ((v11 & (*(void *)&v4 - 1)) != v6)
      {
        goto LABEL_23;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_23;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v9[1];
    if (v10 == 0x1AF456233693CD46) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v6) {
      goto LABEL_23;
    }
LABEL_10:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_23;
    }
  }
  if (v9[2] != 0x1AF456233693CD46) {
    goto LABEL_10;
  }
LABEL_21:
  uint64_t v12 = v9[5];
  if (*(void *)(v12 + 8) == 0x1AF456233693CD46)
  {
    uint64_t v13 = *(void *)(v12 + 32);
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v13 = 0;
LABEL_24:
  if (v5.u32[0] >= 2uLL)
  {
    unint64_t v15 = 0x3070CB6B3C7F21D3;
    if (*(void *)&v4 <= 0x3070CB6B3C7F21D3uLL) {
      unint64_t v15 = 0x3070CB6B3C7F21D3uLL % *(void *)&v4;
    }
    uint64_t v14 = *(void **)(v7 + 8 * v15);
    do
    {
      do
        uint64_t v14 = (void *)*v14;
      while (v14[1] != 0x3070CB6B3C7F21D3);
    }
    while (v14[2] != 0x3070CB6B3C7F21D3);
  }
  else
  {
    uint64_t v14 = *(void **)(v7 + 8 * ((*(void *)&v4 - 1) & 0x3070CB6B3C7F21D3));
    do
    {
      do
        uint64_t v14 = (void *)*v14;
      while (v14[1] != 0x3070CB6B3C7F21D3);
    }
    while (v14[2] != 0x3070CB6B3C7F21D3);
  }
  uint64_t v16 = *(uint64_t **)(v14[5] + 32);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  if (v17)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    float v19 = (std::__shared_weak_count *)*((void *)this + 2);
    *((void *)this + 1) = v18;
    *((void *)this + 2) = v17;
    if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  else
  {
    *((void *)this + 1) = v18;
    *((void *)this + 2) = 0;
  }
  *((float *)this + 6) = fmaxf(*(float *)(v13 + 3080) + *(float *)(v13 + 3076), 1.0);
  return this;
}

uint64_t std::__shared_ptr_emplace<ggl::CircleMultiStroke::FillPipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::CircleMultiStroke::FillPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585928;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::CircleMultiStroke::FillPipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585928;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_pointer<ggl::CircleMultiStroke::FillPipelineSetup  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<ggl::CircleMultiStroke::FillPipelineSetup  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void ggl::ConstantDataTyped<ggl::CircleMultiStroke::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::CircleMultiStroke::Style>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::CircleMultiStroke::Style>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::CircleMultiStroke::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5866B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::CircleMultiStroke::Style>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5866B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::CircleMultiStroke::CirclePositionAndScale>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::CircleMultiStroke::CirclePositionAndScale>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::CircleMultiStroke::CirclePositionAndScale>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::CircleMultiStroke::CirclePositionAndScale>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586680;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::CircleMultiStroke::CirclePositionAndScale>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF586680;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::TrailJunctionRenderable::TrailJunctionRenderable(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  int8x8_t v4 = operator new(0xE8uLL);
  v4[1] = 0;
  v4[2] = 0;
  *int8x8_t v4 = &unk_1EF586680;
  uint64_t v5 = ggl::BufferData::BufferData((uint64_t)(v4 + 3), qword_1E954E940, 2, 1, 6, 1);
  v4[28] = ggl::CircleMultiStroke::CirclePositionAndScale::reflection(void)::reflection;
  v4[3] = &unk_1EF55DE18;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v4;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = operator new(0xE8uLL);
  v7[1] = 0;
  void v7[2] = 0;
  *uint64_t v7 = &unk_1EF586680;
  uint64_t v8 = ggl::BufferData::BufferData((uint64_t)(v7 + 3), qword_1E954E940, 2, 1, 6, 1);
  v7[28] = ggl::CircleMultiStroke::CirclePositionAndScale::reflection(void)::reflection;
  v7[3] = &unk_1EF55DE18;
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = v7;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  unint64_t v10 = operator new(0xE8uLL);
  v10[1] = 0;
  void v10[2] = 0;
  *unint64_t v10 = &unk_1EF5866B8;
  uint64_t v11 = ggl::BufferData::BufferData((uint64_t)(v10 + 3), qword_1E954E8C0, 2, 1, 6, 1);
  v10[28] = ggl::CircleMultiStroke::Style::reflection(void)::reflection;
  void v10[3] = &unk_1EF55DE38;
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 24) = v10;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v13 = operator new(0xE8uLL);
  v13[1] = 0;
  v13[2] = 0;
  void *v13 = &unk_1EF5866B8;
  uint64_t v14 = ggl::BufferData::BufferData((uint64_t)(v13 + 3), qword_1E954E8C0, 2, 1, 6, 1);
  v13[28] = ggl::CircleMultiStroke::Style::reflection(void)::reflection;
  v13[3] = &unk_1EF55DE38;
  unint64_t v15 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v14;
  *(void *)(a1 + 40) = v13;
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator new();
}

void sub_1A279E318(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  uint64_t v5 = v1[15];
  v1[15] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = v1[14];
  v1[14] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)v1[13];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)v1[11];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)v1[9];
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  unint64_t v10 = (std::__shared_weak_count *)v1[7];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)v1[5];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)v1[3];
  if (v12)
  {
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  _Unwind_Resume(a1);
}

void md::TrailJunctionRenderable::writePass(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a2;
  uint64_t v10 = a1 + 8 * a2;
  *(void *)(*(void *)(v10 + 112) + 24) = *(void *)a5;
  *(void *)(*(void *)(v10 + 112) + 64) = *(void *)(a3 + 8);
  float v11 = (float)(*(float *)(a4 + 20) + *(float *)a4) + (float)(*(float *)(a4 + 40) + *(float *)(a4 + 60));
  uint64_t v12 = *(void *)(a3 + 40);
  if ((*(unsigned char *)(v12 + 16) & 2) == 0
    && atomic_load_explicit((atomic_ullong *volatile)&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, memory_order_acquire) != -1)
  {
    *(void *)&long long v179 = &v177;
    *(void *)&v181[0] = &v179;
    std::__call_once(&ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::flag, v181, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<ggl::ResourceAccessor::accessBuffer(ggl::ResourceAccessor*,ggl::BufferData const*,gm::Range<unsigned long>,ggl::BufferAccess,ggl::BufferSync)::$_0 &&>>);
  }
  float v13 = *(float *)(*(void *)(v12 + 72) + 64) * v11;
  uint64_t v14 = (void *)(a1 + 16 * v9);
  unint64_t v15 = (void *)v14[6];
  uint64_t v16 = (std::__shared_weak_count *)v14[7];
  int v177 = v15;
  unint64_t v178 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v17 = v15[1];
  uint64_t v18 = v15[9];
  *(void *)uint64_t v18 = *(void *)a1;
  unint64_t v19 = v15[8];
  if (v19 <= v17) {
    unint64_t v19 = v17;
  }
  v15[7] = 0;
  if (v19 <= v17) {
    unint64_t v19 = v17;
  }
  *(_DWORD *)(v18 + 8) = *(_DWORD *)(a1 + 8);
  *(float *)(v18 + 12) = v13;
  if (v19 > v17) {
    unint64_t v17 = v19;
  }
  v15[8] = v17;
  long long v20 = (void *)v14[2];
  float v21 = (std::__shared_weak_count *)v14[3];
  uint64_t v175 = v20;
  uint64_t v176 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v22 = v20[1];
  double v23 = (_DWORD *)v20[9];
  *double v23 = *(_DWORD *)(a4 + 4);
  v23[1] = *(_DWORD *)(a4 + 8);
  v23[2] = *(_DWORD *)(a4 + 12);
  v23[3] = *(_DWORD *)(a4 + 16);
  unint64_t v24 = v20[8];
  if (v24 <= v22) {
    unint64_t v24 = v22;
  }
  v20[7] = 0;
  v23[4] = *(_DWORD *)(a4 + 24);
  v23[5] = *(_DWORD *)(a4 + 28);
  v23[6] = *(_DWORD *)(a4 + 32);
  v23[7] = *(_DWORD *)(a4 + 36);
  if (v24 <= v22) {
    unint64_t v25 = v22;
  }
  else {
    unint64_t v25 = v24;
  }
  v20[8] = v25;
  *(float *)(v20[9] + 64) = (float)(*(float *)(a4 + 20) * 0.5) / v11;
  if (v25 <= v22) {
    unint64_t v25 = v22;
  }
  v20[8] = v25;
  uint64_t v26 = (_DWORD *)v20[9];
  v26[12] = *(_DWORD *)(a4 + 44);
  v26[13] = *(_DWORD *)(a4 + 48);
  v26[14] = *(_DWORD *)(a4 + 52);
  v26[15] = *(_DWORD *)(a4 + 56);
  if (v25 <= v22) {
    unint64_t v25 = v22;
  }
  v20[8] = v25;
  *(float *)(v20[9] + 68) = (float)(*(float *)(a4 + 40) * 0.5) / v11;
  if (v25 > v22) {
    unint64_t v22 = v25;
  }
  v20[8] = v22;
  unint64_t v27 = v20[1];
  if (v27) {
    double v28 = (_DWORD *)v20[9];
  }
  else {
    double v28 = 0;
  }
  v28[8] = *(_DWORD *)(a4 + 64);
  v28[9] = *(_DWORD *)(a4 + 68);
  v28[10] = *(_DWORD *)(a4 + 72);
  v28[11] = *(_DWORD *)(a4 + 76);
  if (v28 && v27)
  {
    unint64_t v29 = v20[8];
    if (v29 <= v27) {
      unint64_t v29 = v27;
    }
    v20[7] = 0;
    v20[8] = v29;
  }
  uint64_t v30 = v20[9];
  *(float *)(v30 + 72) = (float)(*(float *)(a4 + 60) * 0.5) / v11;
  unint64_t v31 = v20[8];
  if (v31 <= v27) {
    unint64_t v31 = v27;
  }
  v20[7] = 0;
  *(_DWORD *)(v30 + 76) = *(_DWORD *)(a4 + 80);
  if (v31 > v27) {
    unint64_t v27 = v31;
  }
  v20[8] = v27;
  uint64_t v32 = *(void **)(a1 + 16 * v9 + 80);
  unsigned __int8 v33 = *(unsigned char *)(a3 + 35);
  unint64_t v34 = v33;
  unsigned __int8 v35 = *(unsigned char *)(a3 + 34);
  *(_DWORD *)((char *)&v34 + 1) = v35;
  int8x16_t v36 = vceqzq_s8((int8x16_t)v34);
  int16x8_t v37 = vmovl_s8(*(int8x8_t *)v36.i8);
  int32x4_t v38 = vmovl_high_s16(v37);
  v39.i64[0] = v38.u32[2];
  v39.i64[1] = v38.u32[3];
  int8x16_t v40 = v39;
  int16x8_t v41 = vmovl_high_s8(v36);
  int32x4_t v42 = vmovl_high_s16(v41);
  v39.i64[0] = v42.u32[2];
  v39.i64[1] = v42.u32[3];
  int8x16_t v43 = v39;
  int32x4_t v44 = vmovl_s16(*(int16x4_t *)v37.i8);
  v39.i64[0] = v44.u32[2];
  v39.i64[1] = v44.u32[3];
  int8x16_t v45 = v39;
  int32x4_t v46 = vmovl_s16(*(int16x4_t *)v41.i8);
  v39.i64[0] = v46.u32[2];
  v39.i64[1] = v46.u32[3];
  int8x16_t v47 = v39;
  v39.i64[0] = v38.u32[0];
  v39.i64[1] = v38.u32[1];
  int8x16_t v48 = v39;
  v39.i64[0] = v42.u32[0];
  v39.i64[1] = v42.u32[1];
  int8x16_t v49 = v39;
  v39.i64[0] = v44.u32[0];
  v39.i64[1] = v44.u32[1];
  int8x16_t v50 = v39;
  v39.i64[0] = v46.u32[0];
  v39.i64[1] = v46.u32[1];
  unint64_t v51 = vaddvq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v50), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v39)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v48), vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v49))), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v45), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v47)), vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC980, v40), vbicq_s8((int8x16_t)xmmword_1A28FC990, v43)))));
  unint64_t v52 = v51;
  double v54 = (uint64_t **)(a5 + 120);
  double v53 = *(void **)(a5 + 120);
  if (!v53) {
    goto LABEL_48;
  }
  double v55 = (uint64_t **)(a5 + 120);
  do
  {
    unint64_t v56 = v53[4];
    BOOL v57 = v56 >= v51;
    if (v56 >= v51) {
      uint64_t v58 = v53;
    }
    else {
      uint64_t v58 = v53 + 1;
    }
    if (v57) {
      double v55 = (uint64_t **)v53;
    }
    double v53 = (void *)*v58;
  }
  while (*v58);
  if (v55 == v54 || v51 < (unint64_t)v55[4])
  {
LABEL_48:
    long long v59 = (std::__shared_weak_count *)operator new(0x198uLL);
    unsigned __int8 v173 = v33;
    v59->__shared_owners_ = 0;
    v59->__shared_weak_owners_ = 0;
    v59->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585928;
    uint64_t v60 = v59 + 1;
    long long v61 = *(_OWORD *)(a5 + 40);
    long long v179 = *(_OWORD *)(a5 + 24);
    long long v180 = v61;
    char v62 = *(unsigned char *)(a5 + 104);
    {
      char v171 = v62;
      char v62 = v171;
      if (v172)
      {
        {
          if (v172)
          {
            {
              {
                ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r = (uint64_t)&ggl::CommonMesh::bufferPos2Reflection;
              }
              ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::attributesReflection(void)::r;
              unk_1EB32B400 = 1;
            }
            ggl::CircleMultiStroke::FillPipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::CommonMesh::BufferPos2>::typedReflection(void)::r;
            *(void *)algn_1EB317A28 = &ggl::CircleMultiStroke::pipelineDataFillPipelineDeviceStructs(void)::ref;
            qword_1EB317A30 = 0;
            {
              ggl::CircleMultiStroke::pipelineDataFillPipelineConstantStructs(void)::ref = (uint64_t)ggl::CircleMultiStroke::Style::reflection(void)::reflection;
              unk_1EB317A60 = ggl::Tile::View::reflection(void)::reflection;
              qword_1EB317A68 = (uint64_t)ggl::Tile::Transform::reflection(void)::reflection;
              unk_1EB317A70 = ggl::CircleMultiStroke::CirclePositionAndScale::reflection(void)::reflection;
            }
            qword_1EB317A38 = (uint64_t)&ggl::CircleMultiStroke::pipelineDataFillPipelineConstantStructs(void)::ref;
            unk_1EB317A40 = xmmword_1A28FCFA0;
          }
        }
        ggl::CircleMultiStroke::FillPipelineState::typedReflection(void)::ref = (uint64_t)&ggl::CircleMultiStroke::FillPipelineSetup::typedReflection(void)::ref;
        ggl::CircleMultiStrokeShader::typedReflection(v172);
        qword_1E958ED00 = (uint64_t)&ggl::CircleMultiStrokeShader::typedReflection(void)::ref;
        {
          ggl::CircleMultiStroke::pipelineStateFillPipelineAttributeStructBinding(void)::attr = 0;
          unk_1E958ED70 = 0;
          qword_1E958ED78 = (uint64_t)"";
          dword_1E958ED80 = 0;
          qword_1E958ED88 = (uint64_t)&ggl::CircleMultiStroke::pipelineStateFillPipelineAttributeBinding_0(void)::attr;
          unk_1E958ED90 = 1;
        }
        qword_1E958ED08 = (uint64_t)&ggl::CircleMultiStroke::pipelineStateFillPipelineAttributeStructBinding(void)::attr;
        unk_1E958ED10 = 1;
        qword_1E958ED18 = 0;
        unk_1E958ED20 = 0;
        qword_1E958ED28 = (uint64_t)&ggl::CircleMultiStroke::pipelineStateFillPipelineDeviceStructBinding(void)::ref;
        unk_1E958ED30 = 0;
        {
          ggl::CircleMultiStroke::pipelineStateFillPipelineConstantStructBinding(void)::ref = 0;
          unk_1E958EDB0 = 0;
          qword_1E958EDB8 = (uint64_t)"style";
          dword_1E958EDC0 = 3;
          qword_1E958EDC8 = (uint64_t)&ggl::CircleMultiStroke::pipelineStateFillPipelineConstantStyleBinding(void)::reflection;
          *(_OWORD *)algn_1E958EDD0 = xmmword_1A28FF910;
          qword_1E958EDE0 = 1;
          unk_1E958EDE8 = "view";
          dword_1E958EDF0 = 3;
          qword_1E958EDF8 = (uint64_t)&ggl::CircleMultiStroke::pipelineStateFillPipelineConstantViewBinding(void)::reflection;
          unk_1E958EE00 = vdupq_n_s64(2uLL);
          qword_1E958EE10 = 2;
          unk_1E958EE18 = "transform";
          dword_1E958EE20 = 3;
          qword_1E958EE28 = (uint64_t)&ggl::CircleMultiStroke::pipelineStateFillPipelineConstantTransformBinding(void)::reflection;
          *(_OWORD *)algn_1E958EE30 = xmmword_1A28FE470;
          qword_1E958EE40 = 3;
          unk_1E958EE48 = "positionScaleInfo";
          dword_1E958EE50 = 3;
          qword_1E958EE58 = (uint64_t)&ggl::CircleMultiStroke::pipelineStateFillPipelineConstantPositionScaleInfoBinding(void)::reflection;
          unk_1E958EE60 = 3;
        }
        qword_1E958ED38 = (uint64_t)&ggl::CircleMultiStroke::pipelineStateFillPipelineConstantStructBinding(void)::ref;
        unk_1E958ED40 = 4;
        char v62 = v171;
      }
    }
    long long v63 = *(std::__shared_weak_count_vtbl **)(a5 + 8);
    double v64 = *(std::__shared_weak_count **)(a5 + 16);
    if (v64) {
      atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v181[0] = *(_OWORD *)(a5 + 56);
    *(_OWORD *)((char *)v181 + 12) = *(_OWORD *)(a5 + 68);
    long long v65 = *(_OWORD *)(a5 + 84);
    char v66 = *(unsigned char *)(a5 + 100);
    v59[1].__shared_weak_owners_ = 0;
    v59[2].__vftable = 0;
    LODWORD(v59[2].__shared_owners_) = 0;
    v59[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55B208;
    v59[1].__shared_owners_ = 0;
    v59[2].__shared_weak_owners_ = (uint64_t)&ggl::CircleMultiStroke::FillPipelineState::typedReflection(void)::ref;
    v59[3].__vftable = v63;
    v59[3].__shared_owners_ = (uint64_t)v64;
    if (v64) {
      atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LOBYTE(v59[5].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v59[5].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v59[6].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v59[7].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v59[6].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v59[7].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v59[7].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v59[8].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v59[9].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v59[8].__shared_weak_owners_ + 4) = 0;
    LOBYTE(v59[9].__shared_weak_owners_) = 0;
    *(_OWORD *)((char *)&v59[9].__shared_weak_owners_ + 4) = xmmword_1A28FC970;
    *(uint64_t *)((char *)&v59[10].__shared_owners_ + 4) = 0;
    *(std::__shared_weak_count_vtbl **)((char *)&v59[11].__vftable + 4) = 0;
    *(uint64_t *)((char *)&v59[10].__shared_weak_owners_ + 4) = 0;
    long long v67 = v180;
    *(_OWORD *)&v59[11].__shared_weak_owners_ = v179;
    *(_OWORD *)&v59[12].__shared_owners_ = v67;
    LOBYTE(v59[13].__vftable) = 0;
    v59[16].__vftable = 0;
    *(_OWORD *)&v59[14].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v59[15].__shared_owners_ = 0u;
    *(_OWORD *)&v59[13].__shared_owners_ = 0u;
    v59[14].std::__shared_count = 0u;
    v59[16].__shared_owners_ = 0x100000001;
    LOBYTE(v59[16].__shared_weak_owners_) = 0;
    *(std::__shared_count *)((char *)&v59[4].std::__shared_count + 4) = *(std::__shared_count *)((char *)v181 + 12);
    *(_OWORD *)&v59[3].__shared_weak_owners_ = v181[0];
    *(_OWORD *)((char *)&v59[4].__shared_weak_owners_ + 4) = v65;
    BYTE4(v59[5].__shared_owners_) = v66;
    if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      unsigned __int8 v68 = v35;
      char v69 = v62;
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
      char v62 = v69;
      unsigned __int8 v35 = v68;
      uint64_t v60 = v59 + 1;
    }
    LOBYTE(v59[13].__shared_weak_owners_) = v62;
    BYTE1(v59[13].__shared_weak_owners_) = v173;
    BYTE2(v59[13].__shared_weak_owners_) = v35;
    int8x16_t v70 = *(int8x16_t *)&v59[14].__shared_owners_;
    int8x16_t v71 = vceqzq_s8(*(int8x16_t *)&v59[13].__shared_weak_owners_);
    int16x8_t v72 = vmovl_high_s8(v71);
    int32x4_t v73 = vmovl_s16(*(int16x4_t *)v72.i8);
    v74.i64[0] = v73.u32[0];
    v74.i64[1] = v73.u32[1];
    int8x16_t v75 = v74;
    int16x8_t v76 = vmovl_s8(*(int8x8_t *)v71.i8);
    int32x4_t v77 = vmovl_s16(*(int16x4_t *)v76.i8);
    v74.i64[0] = v77.u32[0];
    v74.i64[1] = v77.u32[1];
    int8x16_t v78 = v74;
    int32x4_t v79 = vmovl_high_s16(v72);
    v74.i64[0] = v79.u32[0];
    v74.i64[1] = v79.u32[1];
    int8x16_t v80 = v74;
    v59[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF55D618;
    int32x4_t v81 = vmovl_high_s16(v76);
    v74.i64[0] = v81.u32[0];
    v74.i64[1] = v81.u32[1];
    int8x16_t v82 = v74;
    v74.i64[0] = v73.u32[2];
    v74.i64[1] = v73.u32[3];
    int8x16_t v83 = v74;
    v74.i64[0] = v77.u32[2];
    v74.i64[1] = v77.u32[3];
    int8x16_t v84 = v74;
    v74.i64[0] = v79.u32[2];
    v74.i64[1] = v79.u32[3];
    int8x16_t v85 = v74;
    v74.i64[0] = v81.u32[2];
    v74.i64[1] = v81.u32[3];
    int8x16_t v86 = vbicq_s8((int8x16_t)xmmword_1A28FC980, v74);
    int8x16_t v87 = vbicq_s8((int8x16_t)xmmword_1A28FC990, v85);
    int8x16_t v88 = vbicq_s8((int8x16_t)xmmword_1A28FC9A0, v84);
    int8x16_t v89 = vbicq_s8((int8x16_t)xmmword_1A28FC9D0, v80);
    int8x16_t v90 = vceqzq_s8(v70);
    int16x8_t v91 = vmovl_high_s8(v90);
    int32x4_t v92 = vmovl_s16(*(int16x4_t *)v91.i8);
    v74.i64[0] = v92.u32[0];
    v74.i64[1] = v92.u32[1];
    int8x16_t v93 = v74;
    int16x8_t v94 = vmovl_s8(*(int8x8_t *)v90.i8);
    int32x4_t v95 = vmovl_s16(*(int16x4_t *)v94.i8);
    v74.i64[0] = v95.u32[0];
    v74.i64[1] = v95.u32[1];
    int8x16_t v96 = v74;
    int32x4_t v97 = vmovl_high_s16(v91);
    v74.i64[0] = v97.u32[0];
    v74.i64[1] = v97.u32[1];
    int8x16_t v98 = v74;
    int32x4_t v99 = vmovl_high_s16(v94);
    v74.i64[0] = v99.u32[0];
    v74.i64[1] = v99.u32[1];
    int8x16_t v100 = v74;
    v74.i64[0] = v92.u32[2];
    v74.i64[1] = v92.u32[3];
    int8x16_t v101 = v74;
    v74.i64[0] = v95.u32[2];
    v74.i64[1] = v95.u32[3];
    int8x16_t v102 = v74;
    v74.i64[0] = v97.u32[2];
    v74.i64[1] = v97.u32[3];
    int8x16_t v103 = v74;
    v74.i64[0] = v99.u32[2];
    v74.i64[1] = v99.u32[3];
    int8x16_t v104 = vbicq_s8((int8x16_t)xmmword_1A28FCA00, v103);
    int8x16_t v105 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA60, v93), vbicq_s8((int8x16_t)xmmword_1A28FC9E0, v75));
    int8x16_t v106 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA50, v96), vbicq_s8((int8x16_t)xmmword_1A28FC6E0, v78));
    int8x16_t v107 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA40, v98), v89);
    int8x16_t v108 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA30, v100), vbicq_s8((int8x16_t)xmmword_1A28FC9C0, v82));
    int8x16_t v109 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA20, v101), vbicq_s8((int8x16_t)xmmword_1A28FC9B0, v83));
    int8x16_t v110 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCA10, v102), v88);
    int8x16_t v111 = vorrq_s8(v104, v87);
    int8x16_t v112 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FC9F0, v74), v86);
    int8x16_t v113 = vceqzq_s8((int8x16_t)v59[15].std::__shared_count);
    int16x8_t v114 = vmovl_s8(*(int8x8_t *)v113.i8);
    int32x4_t v115 = vmovl_high_s16(v114);
    v74.i64[0] = v115.i32[2];
    v74.i64[1] = v115.i32[3];
    int8x16_t v116 = v74;
    int16x8_t v117 = vmovl_high_s8(v113);
    int32x4_t v118 = vmovl_high_s16(v117);
    v74.i64[0] = v118.i32[2];
    v74.i64[1] = v118.i32[3];
    int8x16_t v119 = v74;
    int32x4_t v120 = vmovl_s16(*(int16x4_t *)v114.i8);
    v74.i64[0] = v120.i32[2];
    v74.i64[1] = v120.i32[3];
    int8x16_t v121 = v74;
    int32x4_t v122 = vmovl_s16(*(int16x4_t *)v117.i8);
    v74.i64[0] = v122.i32[2];
    v74.i64[1] = v122.i32[3];
    int8x16_t v123 = v74;
    v74.i64[0] = v115.i32[0];
    v74.i64[1] = v115.i32[1];
    int8x16_t v124 = v74;
    v74.i64[0] = v118.i32[0];
    v74.i64[1] = v118.i32[1];
    int8x16_t v125 = v74;
    v74.i64[0] = v120.i32[0];
    v74.i64[1] = v120.i32[1];
    int8x16_t v126 = v74;
    v74.i64[0] = v122.i32[0];
    v74.i64[1] = v122.i32[1];
    int8x16_t v127 = vbicq_s8((int8x16_t)xmmword_1A28FCA70, v74);
    int8x16_t v128 = vceqzq_s8(*(int8x16_t *)&v59[15].__shared_weak_owners_);
    int16x8_t v129 = vmovl_high_s8(v128);
    int32x4_t v130 = vmovl_s16(*(int16x4_t *)v129.i8);
    v74.i64[0] = v130.i32[0];
    v74.i64[1] = v130.i32[1];
    int8x16_t v131 = v74;
    int16x8_t v132 = vmovl_s8(*(int8x8_t *)v128.i8);
    int32x4_t v133 = vmovl_s16(*(int16x4_t *)v132.i8);
    v74.i64[0] = v133.i32[0];
    v74.i64[1] = v133.i32[1];
    int8x16_t v134 = v74;
    int32x4_t v135 = vmovl_high_s16(v129);
    v74.i64[0] = v135.i32[0];
    v74.i64[1] = v135.i32[1];
    int8x16_t v136 = v74;
    int32x4_t v137 = vmovl_high_s16(v132);
    v74.i64[0] = v137.i32[0];
    v74.i64[1] = v137.i32[1];
    int8x16_t v138 = v74;
    v74.i64[0] = v130.i32[2];
    v74.i64[1] = v130.i32[3];
    int8x16_t v139 = v74;
    v74.i64[0] = v133.i32[2];
    v74.i64[1] = v133.i32[3];
    int8x16_t v140 = v74;
    v74.i64[0] = v135.i32[2];
    v74.i64[1] = v135.i32[3];
    int8x16_t v141 = v74;
    v74.i64[0] = v137.i32[2];
    v74.i64[1] = v137.i32[3];
    v59[13].__shared_owners_ = vaddvq_s64(vaddq_s64((int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB50, v134), vbicq_s8((int8x16_t)xmmword_1A28FCA80, v126)), v106), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB60, v131), v127), v105)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB30, v138), vbicq_s8((int8x16_t)xmmword_1A28FCAA0, v124)), v108), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB40, v136),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCA90, v125)),
                                                    v107))),
                                   (int64x2_t)vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB10, v140), vbicq_s8((int8x16_t)xmmword_1A28FCAC0, v121)), v110), vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCB20, v139), vbicq_s8((int8x16_t)xmmword_1A28FCAB0, v123)), v109)), vorrq_s8(vorrq_s8(vorrq_s8(vbicq_s8((int8x16_t)xmmword_1A28FCAF0, v74), vbicq_s8((int8x16_t)xmmword_1A28FCAE0, v116)), v112), vorrq_s8(vorrq_s8(
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCB00, v141),
                                                      vbicq_s8((int8x16_t)xmmword_1A28FCAD0, v119)),
                                                    v111)))));
    LOBYTE(v59[13].__vftable) = 1;
    uint64_t v174 = v59;
    *(void *)&long long v179 = v52;
    *((void *)&v179 + 1) = v60;
    *(void *)&long long v180 = v59;
    atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
    float v142 = *v54;
    float v143 = (uint64_t **)(a5 + 120);
    if (*v54)
    {
      while (1)
      {
        while (1)
        {
          float v143 = (uint64_t **)v142;
          unint64_t v144 = v142[4];
          if (v52 >= v144) {
            break;
          }
          float v142 = *v143;
          double v54 = v143;
          if (!*v143) {
            goto LABEL_63;
          }
        }
        if (v144 >= v52) {
          break;
        }
        float v142 = v143[1];
        if (!v142)
        {
          double v54 = v143 + 1;
          goto LABEL_63;
        }
      }
    }
    else
    {
LABEL_63:
      long long v145 = (uint64_t *)operator new(0x38uLL);
      v145[4] = v52;
      v145[5] = (uint64_t)v60;
      v145[6] = (uint64_t)v59;
      *((void *)&v179 + 1) = 0;
      *(void *)&long long v180 = 0;
      *long long v145 = 0;
      v145[1] = 0;
      v145[2] = (uint64_t)v143;
      *double v54 = v145;
      uint64_t v146 = **(void **)(a5 + 112);
      if (v146)
      {
        *(void *)(a5 + 112) = v146;
        long long v145 = *v54;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a5 + 120), v145);
      ++*(void *)(a5 + 128);
      long long v59 = (std::__shared_weak_count *)v180;
      if (!(void)v180)
      {
LABEL_68:
        long long v148 = v60;
        long long v147 = v174;
        BOOL v149 = v174 == 0;
        if (!v174) {
          goto LABEL_70;
        }
        goto LABEL_69;
      }
    }
    if (!atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
    goto LABEL_68;
  }
  long long v148 = (std::__shared_weak_count *)v55[5];
  long long v147 = (std::__shared_weak_count *)v55[6];
  uint64_t v174 = v147;
  if (v147)
  {
    atomic_fetch_add_explicit(&v147->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v149 = 0;
LABEL_69:
    atomic_fetch_add_explicit(&v147->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_70:
    if (!v148) {
      goto LABEL_72;
    }
    goto LABEL_71;
  }
  BOOL v149 = 1;
  if (!v148)
  {
LABEL_72:
    double v150 = (std::__shared_weak_count *)v32[3];
    v32[2] = 0;
    v32[3] = 0;
    if (!v150) {
      goto LABEL_81;
    }
    goto LABEL_80;
  }
LABEL_71:
  if (*(void *)v148[1].__shared_weak_owners_ != v32[1]) {
    goto LABEL_72;
  }
  long long v151 = (std::__shared_weak_count *)v32[2];
  if (v151 && v151 != v148) {
    ggl::PipelineSetup::resetData((uint64_t)v32);
  }
  if (!v149) {
    atomic_fetch_add_explicit(&v147->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v150 = (std::__shared_weak_count *)v32[3];
  v32[2] = v148;
  v32[3] = v147;
  if (!v150)
  {
LABEL_81:
    if (v149) {
      goto LABEL_85;
    }
    goto LABEL_82;
  }
LABEL_80:
  if (atomic_fetch_add(&v150->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_81;
  }
  ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
  std::__shared_weak_count::__release_weak(v150);
  if (v149) {
    goto LABEL_85;
  }
LABEL_82:
  if (!atomic_fetch_add(&v147->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
    std::__shared_weak_count::__release_weak(v147);
  }
LABEL_85:
  if (v174 && !atomic_fetch_add(&v174->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
    std::__shared_weak_count::__release_weak(v174);
  }
  uint64_t v152 = v32[8];
  *(void *)(v152 + 40) = 0;
  uint64_t v153 = *(void *)(a3 + 56);
  *(void *)(v152 + 32) = v153;
  uint64_t v154 = v32[20];
  uint64_t v155 = *(void *)(a3 + 64);
  if (v155) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v155 + 8), 1uLL, memory_order_relaxed);
  }
  long long v156 = *(std::__shared_weak_count **)(v154 + 40);
  *(void *)(v154 + 32) = v153;
  *(void *)(v154 + 40) = v155;
  if (v156 && !atomic_fetch_add(&v156->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
    std::__shared_weak_count::__release_weak(v156);
  }
  uint64_t v157 = v32[8];
  *(void *)(v157 + 24) = 0;
  uint64_t v158 = *(void *)(a3 + 40);
  *(void *)(v157 + 16) = v158;
  uint64_t v159 = v32[20];
  uint64_t v160 = *(void *)(a3 + 48);
  if (v160) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v160 + 8), 1uLL, memory_order_relaxed);
  }
  long long v161 = *(std::__shared_weak_count **)(v159 + 24);
  *(void *)(v159 + 16) = v158;
  *(void *)(v159 + 24) = v160;
  if (v161 && !atomic_fetch_add(&v161->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
    std::__shared_weak_count::__release_weak(v161);
  }
  uint64_t v162 = v32[8];
  unint64_t v163 = v177;
  long long v164 = v178;
  *(void *)(v162 + 48) = v177;
  *(void *)(v162 + 56) = 0;
  uint64_t v165 = v32[20];
  if (v164) {
    atomic_fetch_add_explicit(&v164->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v166 = *(std::__shared_weak_count **)(v165 + 56);
  *(void *)(v165 + 48) = v163;
  *(void *)(v165 + 56) = v164;
  if (v166 && !atomic_fetch_add(&v166->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
    std::__shared_weak_count::__release_weak(v166);
  }
  unint64_t v167 = (void *)v32[8];
  *unint64_t v167 = v175;
  v167[1] = 0;
  unint64_t v168 = (void *)v32[20];
  if (v176) {
    atomic_fetch_add_explicit(&v176->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v169 = (std::__shared_weak_count *)v168[1];
  *unint64_t v168 = v175;
  v168[1] = v176;
  if (v169 && !atomic_fetch_add(&v169->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
    std::__shared_weak_count::__release_weak(v169);
  }
  if (v176 && !atomic_fetch_add(&v176->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
    std::__shared_weak_count::__release_weak(v176);
  }
  float64x2_t v170 = v178;
  if (v178)
  {
    if (!atomic_fetch_add(&v178->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
}

void sub_1A279F618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  md::components::Material::~Material((md::components::Material *)(v31 - 176));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a27);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a29);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void karo::Mutex::~Mutex(pthread_mutex_t **this)
{
  if (*this) {
    MEMORY[0x1A6239270](*this, 0x1000C40FA0F61DDLL);
  }
  *this = 0;
}

void non-virtual thunk to'altitude::GlobeTileRenderManager::onChildTileRemoved(altitude::GlobeTileRenderManager *this, altitude::Tile *a2, altitude::Tile *a3)
{
  uint64_t v3 = (altitude::GlobeTileComponent *)*((void *)a3 + 41);
  if (v3) {
    altitude::GlobeTileRenderManager::clearEffects((altitude::GlobeTileRenderManager *)((char *)this - 40), v3);
  }
}

void altitude::GlobeTileRenderManager::clearEffects(altitude::GlobeTileRenderManager *this, altitude::GlobeTileComponent *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, altitude::GlobeTileRenderManager *, uint64_t))(**((void **)this + 9) + 24))(*((void *)this + 9), this, 0xFFFFFFFFLL);
  uint64_t v5 = *((void *)a2 + 29);
  if (v5)
  {
    if (v5 == 1)
    {
      uint64_t v6 = *((void *)a2 + 30);
      if (*(void *)(v6 + 8) != v4) {
        return;
      }
    }
    else
    {
      for (int8x16_t i = (uint64_t *)*((void *)a2 + 31); ; ++i)
      {
        uint64_t v6 = *i;
        if (*(void *)(*i + 8) == v4) {
          break;
        }
        if (!--v5) {
          return;
        }
      }
    }
    uint64_t v7 = *(void *)(v6 + 24);
    if (v7)
    {
      uint64_t v8 = *((void *)this + 27);
      uint64_t v9 = *((void *)this + 28) - v8;
      unint64_t v10 = v9 >> 3;
      unint64_t v11 = (v9 >> 3);
      if ((v9 & 0x7FFFFFFF8) == 0) {
        goto LABEL_16;
      }
      uint64_t v12 = 0;
      while (*(void *)(v8 + 8 * v12) != v7)
      {
        if (v11 == ++v12) {
          goto LABEL_16;
        }
      }
      unint64_t v11 = (v10 - 1);
      *(void *)(v8 + 8 * v12) = *(void *)(v8 + 8 * v11);
      uint64_t v8 = *((void *)this + 27);
      unint64_t v10 = (*((void *)this + 28) - v8) >> 3;
      if (v11 > v10)
      {
        std::vector<altitude::TextureMap *>::__append((uint64_t)this + 216, v11 - v10);
      }
      else
      {
LABEL_16:
        if (v10 > v11) {
          *((void *)this + 28) = v8 + 8 * v11;
        }
      }
      uint64_t v14 = *(void *)(v6 + 24);
      if (v14)
      {
        unint64_t v15 = (char *)this + 416;
        uint64_t v16 = (char *)this + 336;
        unint64_t v17 = (char *)this + 296;
        uint64_t v18 = (char *)this + 376;
        unint64_t v19 = (char *)this + 496;
        long long v20 = (char *)this + 456;
        do
        {
          uint64_t v22 = *(void *)(v14 + 32);
          float v21 = v20;
          switch(*(_DWORD *)(v14 + 8))
          {
            case 1:
              float v21 = v17;
              goto LABEL_21;
            case 2:
              float v21 = v16;
              goto LABEL_21;
            case 3:
              goto LABEL_21;
            case 4:
              float v21 = v19;
              goto LABEL_21;
            case 5:
              float v21 = v15;
              goto LABEL_21;
            case 6:
              float v21 = v18;
LABEL_21:
              (**(void (***)(uint64_t))v14)(v14);
              *(void *)uint64_t v14 = *v21;
              *float v21 = v14;
              break;
            default:
              break;
          }
          *(void *)(v6 + 24) = v22;
          uint64_t v14 = v22;
        }
        while (v22);
      }
    }
  }
}

void non-virtual thunk to'altitude::GlobeTileRenderManager::onTileComponentDataRelease(altitude::GlobeTileRenderManager *this, altitude::Tile *a2, altitude::TileComponent *a3, void *a4)
{
  if (!*((_DWORD *)a3 + 2)) {
    altitude::GlobeTileRenderManager::clearEffects((altitude::GlobeTileRenderManager *)((char *)this - 40), a3);
  }
}

void non-virtual thunk to'altitude::GlobeTileRenderManager::onTileComponentDataLoaded(altitude::GlobeTileRenderManager *this, altitude::Tile *a2, altitude::TileComponent *a3, void *a4)
{
}

void altitude::GlobeTileRenderManager::onTileComponentDataLoaded(altitude::GlobeTileRenderManager *this, altitude::Tile *a2, altitude::TileComponent *a3, void *a4)
{
  if (*(unsigned char *)(*((void *)this + 4) + 69)
    || *((_DWORD *)a3 + 2)
    || *((void **)a3 + 15) != a4
    || !*((void *)a3 + 26))
  {
    return;
  }
  uint64_t v7 = (*(uint64_t (**)(void, altitude::GlobeTileRenderManager *, uint64_t))(**((void **)this + 9) + 24))(*((void *)this + 9), this, 0xFFFFFFFFLL);
  uint64_t v8 = v7;
  int v9 = *(_DWORD *)(*((void *)this + 4) + 60);
  uint64_t v10 = *((void *)a3 + 29);
  if (!v10) {
    goto LABEL_13;
  }
  if (v10 != 1)
  {
    uint64_t v12 = (uint64_t *)*((void *)a3 + 31);
    while (1)
    {
      uint64_t v11 = *v12;
      if (*(void *)(*v12 + 8) == v7) {
        goto LABEL_14;
      }
      ++v12;
      if (!--v10) {
        goto LABEL_13;
      }
    }
  }
  uint64_t v11 = *((void *)a3 + 30);
  if (*(void *)(v11 + 8) != v7) {
LABEL_13:
  }
    operator new();
LABEL_14:
  uint64_t v13 = *(void *)(v11 + 24);
  if (v13) {
    BOOL v14 = (*(_DWORD *)(v13 + 8) - 1) < 4;
  }
  else {
    BOOL v14 = 0;
  }
  uint64_t v15 = *((void *)this + 47);
  if (v15)
  {
    uint64_t v16 = *(char **)v15;
  }
  else
  {
    unint64_t v17 = (char *)malloc_type_malloc(*((unsigned int *)this + 93), 0xF0B72BE0uLL);
    uint64_t v18 = v17;
    unint64_t v19 = (uint64_t *)*((void *)this + 44);
    if (v19)
    {
      while (1)
      {
        while (1)
        {
          float v21 = (uint64_t **)v19;
          unint64_t v22 = v19[4];
          if ((unint64_t)v17 >= v22) {
            break;
          }
          unint64_t v19 = *v21;
          long long v20 = v21;
          if (!*v21) {
            goto LABEL_26;
          }
        }
        if (v22 >= (unint64_t)v17) {
          break;
        }
        unint64_t v19 = v21[1];
        if (!v19)
        {
          long long v20 = v21 + 1;
          goto LABEL_26;
        }
      }
    }
    else
    {
      long long v20 = (uint64_t **)((char *)this + 352);
      float v21 = (uint64_t **)((char *)this + 352);
LABEL_26:
      double v23 = (uint64_t *)operator new(0x28uLL);
      v23[4] = (uint64_t)v18;
      *double v23 = 0;
      v23[1] = 0;
      v23[2] = (uint64_t)v21;
      *long long v20 = v23;
      uint64_t v24 = **((void **)this + 43);
      if (v24)
      {
        *((void *)this + 43) = v24;
        unint64_t v25 = *v20;
      }
      else
      {
        unint64_t v25 = v23;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 44), v25);
      ++*((void *)this + 45);
    }
    uint64_t v26 = &v18[136 * *((_DWORD *)this + 92) - 136];
    unint64_t v27 = (char *)*((void *)this + 47);
    do
    {
      uint64_t v16 = v27;
      unint64_t v27 = v26;
      *(void *)uint64_t v26 = v16;
      v26 -= 136;
    }
    while (v26 >= v18);
    uint64_t v15 = (uint64_t)(v26 + 136);
  }
  *((void *)this + 47) = v16;
  *(_DWORD *)(v15 + 8) = 6;
  *(void *)(v15 + 16) = a3;
  *(void *)(v15 + 24) = v8;
  *(void *)(v15 + 32) = 0;
  *(void *)(v15 + 40) = this;
  *(unsigned char *)(v15 + 48) = 0;
  *(void *)uint64_t v15 = &unk_1EF5685E0;
  uint64_t v28 = *((void *)a3 + 27);
  *(void *)(v15 + 56) = *((void *)a3 + 26);
  *(void *)(v15 + 64) = v28;
  if (v28) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v29 = (_OWORD *)((char *)a2 + 392);
  uint64_t v30 = *((void *)a3 + 16);
  *(void *)(v15 + 72) = *((void *)a3 + 15);
  *(void *)(v15 + 80) = v30;
  if (v30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(v15 + 88) = *v29;
  *(_OWORD *)(v15 + 104) = *v29;
  *(_DWORD *)(v15 + 120) = 0;
  *(_DWORD *)(v15 + 124) = v9;
  *(void *)(v15 + 128) = 0;
  if (v14)
  {
    *(void *)(*(void *)(v11 + 24) + 32) = v15;
  }
  else
  {
    *(void *)(v11 + 24) = v15;
    altitude::SphereCulling<altitude::TriggerManager::Trigger>::collectLeaf((uint64_t)this + 216, v15);
  }
}

void non-virtual thunk to'altitude::GlobeTileRenderManager::~GlobeTileRenderManager(altitude::GlobeTileRenderManager *this)
{
  altitude::GlobeTileRenderManager::~GlobeTileRenderManager((altitude::GlobeTileRenderManager *)((char *)this - 40));
  JUMPOUT(0x1A6239270);
}

{
  altitude::GlobeTileRenderManager::~GlobeTileRenderManager((altitude::GlobeTileRenderManager *)((char *)this - 40));
}

void altitude::GlobeTileRenderManager::~GlobeTileRenderManager(altitude::GlobeTileRenderManager *this)
{
  *(void *)this = &unk_1EF56AA70;
  uint64_t v2 = (char *)this + 40;
  *((void *)this + 5) = &unk_1EF56AAC8;
  uint64_t v3 = *((void *)this + 14);
  if (v3) {
    altitude::TileManager::unregisterTileListener(v3, (uint64_t)v2);
  }
  uint64_t v4 = *((void *)this + 10);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 10) = 0;
  long long v180 = 0;
  uint64_t v181 = 0;
  uint64_t v174 = &v180;
  uint64_t v5 = (void *)*((void *)this + 62);
  if (v5)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v8 = v180;
      int v9 = &v180;
      uint64_t v10 = &v180;
      if (v180)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v10 = (uint64_t **)v8;
            unint64_t v11 = v8[4];
            if ((unint64_t)v5 >= v11) {
              break;
            }
            uint64_t v8 = *v10;
            int v9 = v10;
            if (!*v10) {
              goto LABEL_17;
            }
          }
          if (v11 >= (unint64_t)v5) {
            break;
          }
          uint64_t v8 = v10[1];
          if (!v8)
          {
            int v9 = v10 + 1;
            goto LABEL_17;
          }
        }
      }
      else
      {
LABEL_17:
        uint64_t v12 = (uint64_t *)operator new(0x28uLL);
        v12[4] = (uint64_t)v5;
        uint64_t *v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v10;
        std::__shared_weak_count *v9 = v12;
        if (*v174)
        {
          uint64_t v174 = (uint64_t **)*v174;
          uint64_t v7 = *v9;
        }
        else
        {
          uint64_t v7 = v12;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v180, v7);
        uint64_t v6 = ++v181;
        uint64_t v5 = (void *)*((void *)this + 62);
      }
      uint64_t v5 = (void *)*v5;
      *((void *)this + 62) = v5;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = 0;
  }
  unint64_t v13 = *((unsigned int *)this + 122);
  BOOL v14 = (char *)*((void *)this + 58);
  uint64_t v15 = (char *)this + 472;
  BOOL v16 = v6 == *((void *)this + 60) * v13 || v14 == v15;
  if (v16 || v13 == 0)
  {
    if (v14 == v15) {
      goto LABEL_52;
    }
    goto LABEL_55;
  }
  uint64_t v18 = 1;
  do
  {
    if (v18)
    {
      unint64_t v19 = 0;
      uint64_t v20 = *((void *)v14 + 4);
      do
      {
        float v21 = (void (***)(void))(v20 + (v19 << 6));
        unint64_t v22 = v180;
        if (!v180) {
          goto LABEL_33;
        }
        double v23 = &v180;
        do
        {
          uint64_t v24 = v22;
          unint64_t v25 = v23;
          unint64_t v26 = v22[4];
          unint64_t v27 = (uint64_t **)(v22 + 1);
          if (v26 >= (unint64_t)v21)
          {
            unint64_t v27 = (uint64_t **)v24;
            double v23 = (uint64_t **)v24;
          }
          unint64_t v22 = *v27;
        }
        while (v22);
        if (v23 == &v180) {
          goto LABEL_33;
        }
        if (v26 < (unint64_t)v21) {
          uint64_t v24 = (uint64_t *)v25;
        }
        if ((unint64_t)v21 < v24[4])
        {
LABEL_33:
          (**v21)(v21);
          unint64_t v13 = *((unsigned int *)this + 122);
        }
        ++v19;
        uint64_t v18 = v13;
      }
      while (v19 < v13);
    }
    uint64_t v28 = (char *)*((void *)v14 + 1);
    if (v28)
    {
      do
      {
        unint64_t v29 = v28;
        uint64_t v28 = *(char **)v28;
      }
      while (v28);
    }
    else
    {
      do
      {
        unint64_t v29 = (char *)*((void *)v14 + 2);
        BOOL v16 = *(void *)v29 == (void)v14;
        BOOL v14 = v29;
      }
      while (!v16);
    }
    BOOL v14 = v29;
  }
  while (v29 != v15);
  BOOL v14 = (char *)*((void *)this + 58);
  if (v14 != v15)
  {
    do
    {
LABEL_55:
      free(*((void **)v14 + 4));
      uint64_t v32 = (char *)*((void *)v14 + 1);
      if (v32)
      {
        do
        {
          unsigned __int8 v33 = v32;
          uint64_t v32 = *(char **)v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          unsigned __int8 v33 = (char *)*((void *)v14 + 2);
          BOOL v16 = *(void *)v33 == (void)v14;
          BOOL v14 = v33;
        }
        while (!v16);
      }
      BOOL v14 = v33;
    }
    while (v33 != v15);
  }
LABEL_52:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 59));
  *((void *)this + 59) = 0;
  *((void *)this + 60) = 0;
  *((void *)this + 58) = v15;
  *((void *)this + 62) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v180);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 59));
  long long v180 = 0;
  uint64_t v181 = 0;
  uint64_t v175 = &v180;
  uint64_t v30 = (void *)*((void *)this + 57);
  if (v30)
  {
    uint64_t v31 = 0;
    do
    {
      unsigned __int8 v35 = v180;
      int8x16_t v36 = &v180;
      int16x8_t v37 = &v180;
      if (v180)
      {
        while (1)
        {
          while (1)
          {
            int16x8_t v37 = (uint64_t **)v35;
            unint64_t v38 = v35[4];
            if ((unint64_t)v30 >= v38) {
              break;
            }
            unsigned __int8 v35 = *v37;
            int8x16_t v36 = v37;
            if (!*v37) {
              goto LABEL_71;
            }
          }
          if (v38 >= (unint64_t)v30) {
            break;
          }
          unsigned __int8 v35 = v37[1];
          if (!v35)
          {
            int8x16_t v36 = v37 + 1;
            goto LABEL_71;
          }
        }
      }
      else
      {
LABEL_71:
        int8x16_t v39 = (uint64_t *)operator new(0x28uLL);
        v39[4] = (uint64_t)v30;
        *int8x16_t v39 = 0;
        v39[1] = 0;
        v39[2] = (uint64_t)v37;
        *int8x16_t v36 = v39;
        if (*v175)
        {
          uint64_t v175 = (uint64_t **)*v175;
          unint64_t v34 = *v36;
        }
        else
        {
          unint64_t v34 = v39;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v180, v34);
        uint64_t v31 = ++v181;
        uint64_t v30 = (void *)*((void *)this + 57);
      }
      uint64_t v30 = (void *)*v30;
      *((void *)this + 57) = v30;
    }
    while (v30);
  }
  else
  {
    uint64_t v31 = 0;
  }
  unint64_t v40 = *((unsigned int *)this + 112);
  int16x8_t v41 = (char *)*((void *)this + 53);
  int32x4_t v42 = (char *)this + 432;
  if (v31 == *((void *)this + 55) * v40 || v41 == v42 || v40 == 0)
  {
    if (v41 == v42) {
      goto LABEL_106;
    }
    goto LABEL_109;
  }
  uint64_t v45 = 1;
  do
  {
    if (v45)
    {
      unint64_t v46 = 0;
      uint64_t v47 = *((void *)v41 + 4);
      do
      {
        int8x16_t v48 = (void (***)(void))(v47 + (80 * v46));
        int8x16_t v49 = v180;
        if (!v180) {
          goto LABEL_87;
        }
        int8x16_t v50 = &v180;
        do
        {
          unint64_t v51 = v49;
          unint64_t v52 = v50;
          unint64_t v53 = v49[4];
          double v54 = (uint64_t **)(v49 + 1);
          if (v53 >= (unint64_t)v48)
          {
            double v54 = (uint64_t **)v51;
            int8x16_t v50 = (uint64_t **)v51;
          }
          int8x16_t v49 = *v54;
        }
        while (v49);
        if (v50 == &v180) {
          goto LABEL_87;
        }
        if (v53 < (unint64_t)v48) {
          unint64_t v51 = (uint64_t *)v52;
        }
        if ((unint64_t)v48 < v51[4])
        {
LABEL_87:
          (**v48)(v48);
          unint64_t v40 = *((unsigned int *)this + 112);
        }
        ++v46;
        uint64_t v45 = v40;
      }
      while (v46 < v40);
    }
    double v55 = (char *)*((void *)v41 + 1);
    if (v55)
    {
      do
      {
        unint64_t v56 = v55;
        double v55 = *(char **)v55;
      }
      while (v55);
    }
    else
    {
      do
      {
        unint64_t v56 = (char *)*((void *)v41 + 2);
        BOOL v16 = *(void *)v56 == (void)v41;
        int16x8_t v41 = v56;
      }
      while (!v16);
    }
    int16x8_t v41 = v56;
  }
  while (v56 != v42);
  int16x8_t v41 = (char *)*((void *)this + 53);
  if (v41 != v42)
  {
    do
    {
LABEL_109:
      free(*((void **)v41 + 4));
      long long v59 = (char *)*((void *)v41 + 1);
      if (v59)
      {
        do
        {
          uint64_t v60 = v59;
          long long v59 = *(char **)v59;
        }
        while (v59);
      }
      else
      {
        do
        {
          uint64_t v60 = (char *)*((void *)v41 + 2);
          BOOL v16 = *(void *)v60 == (void)v41;
          int16x8_t v41 = v60;
        }
        while (!v16);
      }
      int16x8_t v41 = v60;
    }
    while (v60 != v42);
  }
LABEL_106:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 54));
  *((void *)this + 54) = 0;
  *((void *)this + 55) = 0;
  *((void *)this + 53) = v42;
  *((void *)this + 57) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v180);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 54));
  long long v180 = 0;
  uint64_t v181 = 0;
  uint64_t v176 = &v180;
  BOOL v57 = (void *)*((void *)this + 52);
  if (v57)
  {
    uint64_t v58 = 0;
    do
    {
      char v62 = v180;
      long long v63 = &v180;
      double v64 = &v180;
      if (v180)
      {
        while (1)
        {
          while (1)
          {
            double v64 = (uint64_t **)v62;
            unint64_t v65 = v62[4];
            if ((unint64_t)v57 >= v65) {
              break;
            }
            char v62 = *v64;
            long long v63 = v64;
            if (!*v64) {
              goto LABEL_125;
            }
          }
          if (v65 >= (unint64_t)v57) {
            break;
          }
          char v62 = v64[1];
          if (!v62)
          {
            long long v63 = v64 + 1;
            goto LABEL_125;
          }
        }
      }
      else
      {
LABEL_125:
        char v66 = (uint64_t *)operator new(0x28uLL);
        v66[4] = (uint64_t)v57;
        *char v66 = 0;
        v66[1] = 0;
        v66[2] = (uint64_t)v64;
        *long long v63 = v66;
        if (*v176)
        {
          uint64_t v176 = (uint64_t **)*v176;
          long long v61 = *v63;
        }
        else
        {
          long long v61 = v66;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v180, v61);
        uint64_t v58 = ++v181;
        BOOL v57 = (void *)*((void *)this + 52);
      }
      BOOL v57 = (void *)*v57;
      *((void *)this + 52) = v57;
    }
    while (v57);
  }
  else
  {
    uint64_t v58 = 0;
  }
  unint64_t v67 = *((unsigned int *)this + 102);
  unsigned __int8 v68 = (char *)*((void *)this + 48);
  char v69 = (char *)this + 392;
  if (v58 == *((void *)this + 50) * v67 || v68 == v69 || v67 == 0)
  {
    if (v68 == v69) {
      goto LABEL_160;
    }
    goto LABEL_163;
  }
  uint64_t v72 = 1;
  do
  {
    if (v72)
    {
      unint64_t v73 = 0;
      uint64_t v74 = *((void *)v68 + 4);
      do
      {
        int8x16_t v75 = (void (***)(void))(v74 + (112 * v73));
        int16x8_t v76 = v180;
        if (!v180) {
          goto LABEL_141;
        }
        int32x4_t v77 = &v180;
        do
        {
          int8x16_t v78 = v76;
          int32x4_t v79 = v77;
          unint64_t v80 = v76[4];
          int32x4_t v81 = (uint64_t **)(v76 + 1);
          if (v80 >= (unint64_t)v75)
          {
            int32x4_t v81 = (uint64_t **)v78;
            int32x4_t v77 = (uint64_t **)v78;
          }
          int16x8_t v76 = *v81;
        }
        while (v76);
        if (v77 == &v180) {
          goto LABEL_141;
        }
        if (v80 < (unint64_t)v75) {
          int8x16_t v78 = (uint64_t *)v79;
        }
        if ((unint64_t)v75 < v78[4])
        {
LABEL_141:
          (**v75)(v75);
          unint64_t v67 = *((unsigned int *)this + 102);
        }
        ++v73;
        uint64_t v72 = v67;
      }
      while (v73 < v67);
    }
    int8x16_t v82 = (char *)*((void *)v68 + 1);
    if (v82)
    {
      do
      {
        int8x16_t v83 = v82;
        int8x16_t v82 = *(char **)v82;
      }
      while (v82);
    }
    else
    {
      do
      {
        int8x16_t v83 = (char *)*((void *)v68 + 2);
        BOOL v16 = *(void *)v83 == (void)v68;
        unsigned __int8 v68 = v83;
      }
      while (!v16);
    }
    unsigned __int8 v68 = v83;
  }
  while (v83 != v69);
  unsigned __int8 v68 = (char *)*((void *)this + 48);
  if (v68 != v69)
  {
    do
    {
LABEL_163:
      free(*((void **)v68 + 4));
      int8x16_t v86 = (char *)*((void *)v68 + 1);
      if (v86)
      {
        do
        {
          int8x16_t v87 = v86;
          int8x16_t v86 = *(char **)v86;
        }
        while (v86);
      }
      else
      {
        do
        {
          int8x16_t v87 = (char *)*((void *)v68 + 2);
          BOOL v16 = *(void *)v87 == (void)v68;
          unsigned __int8 v68 = v87;
        }
        while (!v16);
      }
      unsigned __int8 v68 = v87;
    }
    while (v87 != v69);
  }
LABEL_160:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 49));
  *((void *)this + 49) = 0;
  *((void *)this + 50) = 0;
  *((void *)this + 48) = v69;
  *((void *)this + 52) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v180);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 49));
  long long v180 = 0;
  uint64_t v181 = 0;
  int v177 = &v180;
  int8x16_t v84 = (void *)*((void *)this + 47);
  if (v84)
  {
    uint64_t v85 = 0;
    do
    {
      int8x16_t v89 = v180;
      int8x16_t v90 = &v180;
      int16x8_t v91 = &v180;
      if (v180)
      {
        while (1)
        {
          while (1)
          {
            int16x8_t v91 = (uint64_t **)v89;
            unint64_t v92 = v89[4];
            if ((unint64_t)v84 >= v92) {
              break;
            }
            int8x16_t v89 = *v91;
            int8x16_t v90 = v91;
            if (!*v91) {
              goto LABEL_179;
            }
          }
          if (v92 >= (unint64_t)v84) {
            break;
          }
          int8x16_t v89 = v91[1];
          if (!v89)
          {
            int8x16_t v90 = v91 + 1;
            goto LABEL_179;
          }
        }
      }
      else
      {
LABEL_179:
        int8x16_t v93 = (uint64_t *)operator new(0x28uLL);
        v93[4] = (uint64_t)v84;
        *int8x16_t v93 = 0;
        v93[1] = 0;
        v93[2] = (uint64_t)v91;
        *int8x16_t v90 = v93;
        if (*v177)
        {
          int v177 = (uint64_t **)*v177;
          int8x16_t v88 = *v90;
        }
        else
        {
          int8x16_t v88 = v93;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v180, v88);
        uint64_t v85 = ++v181;
        int8x16_t v84 = (void *)*((void *)this + 47);
      }
      int8x16_t v84 = (void *)*v84;
      *((void *)this + 47) = v84;
    }
    while (v84);
  }
  else
  {
    uint64_t v85 = 0;
  }
  unint64_t v94 = *((unsigned int *)this + 92);
  int32x4_t v95 = (char *)*((void *)this + 43);
  int8x16_t v96 = (char *)this + 352;
  if (v85 == *((void *)this + 45) * v94 || v95 == v96 || v94 == 0)
  {
    if (v95 == v96) {
      goto LABEL_214;
    }
    goto LABEL_217;
  }
  uint64_t v99 = 1;
  do
  {
    if (v99)
    {
      unint64_t v100 = 0;
      uint64_t v101 = *((void *)v95 + 4);
      do
      {
        int8x16_t v102 = (void (***)(void))(v101 + (136 * v100));
        int8x16_t v103 = v180;
        if (!v180) {
          goto LABEL_195;
        }
        int8x16_t v104 = &v180;
        do
        {
          int8x16_t v105 = v103;
          int8x16_t v106 = v104;
          unint64_t v107 = v103[4];
          int8x16_t v108 = (uint64_t **)(v103 + 1);
          if (v107 >= (unint64_t)v102)
          {
            int8x16_t v108 = (uint64_t **)v105;
            int8x16_t v104 = (uint64_t **)v105;
          }
          int8x16_t v103 = *v108;
        }
        while (v103);
        if (v104 == &v180) {
          goto LABEL_195;
        }
        if (v107 < (unint64_t)v102) {
          int8x16_t v105 = (uint64_t *)v106;
        }
        if ((unint64_t)v102 < v105[4])
        {
LABEL_195:
          (**v102)(v102);
          unint64_t v94 = *((unsigned int *)this + 92);
        }
        ++v100;
        uint64_t v99 = v94;
      }
      while (v100 < v94);
    }
    int8x16_t v109 = (char *)*((void *)v95 + 1);
    if (v109)
    {
      do
      {
        int8x16_t v110 = v109;
        int8x16_t v109 = *(char **)v109;
      }
      while (v109);
    }
    else
    {
      do
      {
        int8x16_t v110 = (char *)*((void *)v95 + 2);
        BOOL v16 = *(void *)v110 == (void)v95;
        int32x4_t v95 = v110;
      }
      while (!v16);
    }
    int32x4_t v95 = v110;
  }
  while (v110 != v96);
  int32x4_t v95 = (char *)*((void *)this + 43);
  if (v95 != v96)
  {
    do
    {
LABEL_217:
      free(*((void **)v95 + 4));
      int8x16_t v113 = (char *)*((void *)v95 + 1);
      if (v113)
      {
        do
        {
          int16x8_t v114 = v113;
          int8x16_t v113 = *(char **)v113;
        }
        while (v113);
      }
      else
      {
        do
        {
          int16x8_t v114 = (char *)*((void *)v95 + 2);
          BOOL v16 = *(void *)v114 == (void)v95;
          int32x4_t v95 = v114;
        }
        while (!v16);
      }
      int32x4_t v95 = v114;
    }
    while (v114 != v96);
  }
LABEL_214:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 44));
  *((void *)this + 44) = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 43) = v96;
  *((void *)this + 47) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v180);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 44));
  long long v180 = 0;
  uint64_t v181 = 0;
  unint64_t v178 = &v180;
  int8x16_t v111 = (void *)*((void *)this + 42);
  if (v111)
  {
    uint64_t v112 = 0;
    do
    {
      int8x16_t v116 = v180;
      int16x8_t v117 = &v180;
      int32x4_t v118 = &v180;
      if (v180)
      {
        while (1)
        {
          while (1)
          {
            int32x4_t v118 = (uint64_t **)v116;
            unint64_t v119 = v116[4];
            if ((unint64_t)v111 >= v119) {
              break;
            }
            int8x16_t v116 = *v118;
            int16x8_t v117 = v118;
            if (!*v118) {
              goto LABEL_233;
            }
          }
          if (v119 >= (unint64_t)v111) {
            break;
          }
          int8x16_t v116 = v118[1];
          if (!v116)
          {
            int16x8_t v117 = v118 + 1;
            goto LABEL_233;
          }
        }
      }
      else
      {
LABEL_233:
        int32x4_t v120 = (uint64_t *)operator new(0x28uLL);
        uint64_t v120[4] = (uint64_t)v111;
        *int32x4_t v120 = 0;
        v120[1] = 0;
        v120[2] = (uint64_t)v118;
        *int16x8_t v117 = v120;
        if (*v178)
        {
          unint64_t v178 = (uint64_t **)*v178;
          int32x4_t v115 = *v117;
        }
        else
        {
          int32x4_t v115 = v120;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v180, v115);
        uint64_t v112 = ++v181;
        int8x16_t v111 = (void *)*((void *)this + 42);
      }
      int8x16_t v111 = (void *)*v111;
      *((void *)this + 42) = v111;
    }
    while (v111);
  }
  else
  {
    uint64_t v112 = 0;
  }
  unint64_t v121 = *((unsigned int *)this + 82);
  int32x4_t v122 = (char *)*((void *)this + 38);
  int8x16_t v123 = (char *)this + 312;
  if (v112 == *((void *)this + 40) * v121 || v122 == v123 || v121 == 0)
  {
    if (v122 == v123) {
      goto LABEL_268;
    }
    goto LABEL_271;
  }
  uint64_t v126 = 1;
  do
  {
    if (v126)
    {
      unint64_t v127 = 0;
      uint64_t v128 = *((void *)v122 + 4);
      do
      {
        int16x8_t v129 = (void (***)(void))(v128 + (80 * v127));
        int32x4_t v130 = v180;
        if (!v180) {
          goto LABEL_249;
        }
        int8x16_t v131 = &v180;
        do
        {
          int16x8_t v132 = v130;
          int32x4_t v133 = v131;
          unint64_t v134 = v130[4];
          int32x4_t v135 = (uint64_t **)(v130 + 1);
          if (v134 >= (unint64_t)v129)
          {
            int32x4_t v135 = (uint64_t **)v132;
            int8x16_t v131 = (uint64_t **)v132;
          }
          int32x4_t v130 = *v135;
        }
        while (v130);
        if (v131 == &v180) {
          goto LABEL_249;
        }
        if (v134 < (unint64_t)v129) {
          int16x8_t v132 = (uint64_t *)v133;
        }
        if ((unint64_t)v129 < v132[4])
        {
LABEL_249:
          (**v129)(v129);
          unint64_t v121 = *((unsigned int *)this + 82);
        }
        ++v127;
        uint64_t v126 = v121;
      }
      while (v127 < v121);
    }
    int8x16_t v136 = (char *)*((void *)v122 + 1);
    if (v136)
    {
      do
      {
        int32x4_t v137 = v136;
        int8x16_t v136 = *(char **)v136;
      }
      while (v136);
    }
    else
    {
      do
      {
        int32x4_t v137 = (char *)*((void *)v122 + 2);
        BOOL v16 = *(void *)v137 == (void)v122;
        int32x4_t v122 = v137;
      }
      while (!v16);
    }
    int32x4_t v122 = v137;
  }
  while (v137 != v123);
  int32x4_t v122 = (char *)*((void *)this + 38);
  if (v122 != v123)
  {
    do
    {
LABEL_271:
      free(*((void **)v122 + 4));
      int8x16_t v140 = (char *)*((void *)v122 + 1);
      if (v140)
      {
        do
        {
          int8x16_t v141 = v140;
          int8x16_t v140 = *(char **)v140;
        }
        while (v140);
      }
      else
      {
        do
        {
          int8x16_t v141 = (char *)*((void *)v122 + 2);
          BOOL v16 = *(void *)v141 == (void)v122;
          int32x4_t v122 = v141;
        }
        while (!v16);
      }
      int32x4_t v122 = v141;
    }
    while (v141 != v123);
  }
LABEL_268:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 39));
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 38) = v123;
  *((void *)this + 42) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v180);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 39));
  long long v180 = 0;
  uint64_t v181 = 0;
  long long v179 = &v180;
  int8x16_t v138 = (void *)*((void *)this + 37);
  if (v138)
  {
    uint64_t v139 = 0;
    do
    {
      float v143 = v180;
      unint64_t v144 = &v180;
      long long v145 = &v180;
      if (v180)
      {
        while (1)
        {
          while (1)
          {
            long long v145 = (uint64_t **)v143;
            unint64_t v146 = v143[4];
            if ((unint64_t)v138 >= v146) {
              break;
            }
            float v143 = *v145;
            unint64_t v144 = v145;
            if (!*v145) {
              goto LABEL_287;
            }
          }
          if (v146 >= (unint64_t)v138) {
            break;
          }
          float v143 = v145[1];
          if (!v143)
          {
            unint64_t v144 = v145 + 1;
            goto LABEL_287;
          }
        }
      }
      else
      {
LABEL_287:
        long long v147 = (uint64_t *)operator new(0x28uLL);
        v147[4] = (uint64_t)v138;
        uint64_t *v147 = 0;
        v147[1] = 0;
        v147[2] = (uint64_t)v145;
        const char *v144 = v147;
        if (*v179)
        {
          long long v179 = (uint64_t **)*v179;
          float v142 = *v144;
        }
        else
        {
          float v142 = v147;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v180, v142);
        uint64_t v139 = ++v181;
        int8x16_t v138 = (void *)*((void *)this + 37);
      }
      int8x16_t v138 = (void *)*v138;
      *((void *)this + 37) = v138;
    }
    while (v138);
  }
  else
  {
    uint64_t v139 = 0;
  }
  unint64_t v148 = *((unsigned int *)this + 72);
  BOOL v149 = (char *)*((void *)this + 33);
  double v150 = (char *)this + 272;
  if (v139 == *((void *)this + 35) * v148 || v149 == v150 || v148 == 0)
  {
    if (v149 == v150) {
      goto LABEL_322;
    }
    goto LABEL_341;
  }
  uint64_t v153 = 1;
  do
  {
    if (v153)
    {
      unint64_t v154 = 0;
      uint64_t v155 = *((void *)v149 + 4);
      do
      {
        long long v156 = (void (***)(void))(v155 + (280 * v154));
        uint64_t v157 = v180;
        if (!v180) {
          goto LABEL_303;
        }
        uint64_t v158 = &v180;
        do
        {
          uint64_t v159 = v157;
          uint64_t v160 = v158;
          unint64_t v161 = v157[4];
          uint64_t v162 = (uint64_t **)(v157 + 1);
          if (v161 >= (unint64_t)v156)
          {
            uint64_t v162 = (uint64_t **)v159;
            uint64_t v158 = (uint64_t **)v159;
          }
          uint64_t v157 = *v162;
        }
        while (v157);
        if (v158 == &v180) {
          goto LABEL_303;
        }
        if (v161 < (unint64_t)v156) {
          uint64_t v159 = (uint64_t *)v160;
        }
        if ((unint64_t)v156 < v159[4])
        {
LABEL_303:
          (**v156)(v156);
          unint64_t v148 = *((unsigned int *)this + 72);
        }
        ++v154;
        uint64_t v153 = v148;
      }
      while (v154 < v148);
    }
    unint64_t v163 = (char *)*((void *)v149 + 1);
    if (v163)
    {
      do
      {
        long long v164 = v163;
        unint64_t v163 = *(char **)v163;
      }
      while (v163);
    }
    else
    {
      do
      {
        long long v164 = (char *)*((void *)v149 + 2);
        BOOL v16 = *(void *)v164 == (void)v149;
        BOOL v149 = v164;
      }
      while (!v16);
    }
    BOOL v149 = v164;
  }
  while (v164 != v150);
  BOOL v149 = (char *)*((void *)this + 33);
  if (v149 != v150)
  {
    do
    {
LABEL_341:
      free(*((void **)v149 + 4));
      uint64_t v172 = (char *)*((void *)v149 + 1);
      if (v172)
      {
        do
        {
          unsigned __int8 v173 = v172;
          uint64_t v172 = *(char **)v172;
        }
        while (v172);
      }
      else
      {
        do
        {
          unsigned __int8 v173 = (char *)*((void *)v149 + 2);
          BOOL v16 = *(void *)v173 == (void)v149;
          BOOL v149 = v173;
        }
        while (!v16);
      }
      BOOL v149 = v173;
    }
    while (v173 != v150);
  }
LABEL_322:
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 34));
  *((void *)this + 34) = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 33) = v150;
  *((void *)this + 37) = 0;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v180);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 34));
  uint64_t v165 = (void *)*((void *)this + 30);
  if (v165)
  {
    *((void *)this + 31) = v165;
    operator delete(v165);
  }
  long long v166 = (void *)*((void *)this + 27);
  if (v166)
  {
    *((void *)this + 28) = v166;
    operator delete(v166);
  }
  unint64_t v167 = (void *)*((void *)this + 24);
  if (v167)
  {
    *((void *)this + 25) = v167;
    operator delete(v167);
  }
  unint64_t v168 = (void *)*((void *)this + 21);
  if (v168)
  {
    *((void *)this + 22) = v168;
    operator delete(v168);
  }
  uint64_t v169 = (void *)*((void *)this + 18);
  if (v169)
  {
    *((void *)this + 19) = v169;
    operator delete(v169);
  }
  float64x2_t v170 = (void *)*((void *)this + 15);
  if (v170)
  {
    *((void *)this + 16) = v170;
    operator delete(v170);
  }
  char v171 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v171 && !atomic_fetch_add(&v171->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
    std::__shared_weak_count::__release_weak(v171);
  }
  *(void *)this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  altitude::GlobeTileRenderManager::~GlobeTileRenderManager(this);
  JUMPOUT(0x1A6239270);
}

void altitude::GlobeTileRenderManager::onTileSetOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a2;
  uint64_t v319 = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 == 1)
  {
    LOBYTE(v294) = 0;
    memset(&__p, 0, sizeof(__p));
    if (altitude::GlobeTileRenderManager::prepareCoarsenOperation(a1, (void *)a2, &__p, &v294)
      && !(_BYTE)v294)
    {
      goto LABEL_337;
    }
    uint64_t v292 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 72) + 24))(*(void *)(a1 + 72), a1, 0xFFFFFFFFLL);
    int v151 = *(_DWORD *)(*(void *)(a1 + 32) + 60);
    uint64_t v152 = v2[5];
    uint64_t v153 = *(void **)(v152 + 328);
    if (!v153) {
      operator new();
    }
    uint64_t v154 = v153[29];
    if (v154)
    {
      if (v154 != 1)
      {
        uint64_t v157 = (uint64_t *)v153[31];
        while (1)
        {
          uint64_t v155 = *v157;
          if (*(void *)(*v157 + 8) == v292) {
            goto LABEL_206;
          }
          ++v157;
          if (!--v154) {
            goto LABEL_205;
          }
        }
      }
      uint64_t v155 = v153[30];
      if (*(void *)(v155 + 8) == v292)
      {
LABEL_206:
        uint64_t v158 = v153 + 15;
        uint64_t v159 = 15;
        if (!v153[15])
        {
          uint64_t v159 = 26;
          uint64_t v158 = v153 + 26;
        }
        uint64_t v160 = v158[1];
        *(void *)&long long v305 = v153[v159];
        *((void *)&v305 + 1) = v160;
        if (v160) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v160 + 8), 1uLL, memory_order_relaxed);
        }
        long long v304 = *(_OWORD *)(v152 + 392);
        unint64_t v161 = *(char ***)(a1 + 456);
        uint64_t v275 = v155;
        if (v161)
        {
          uint64_t v162 = *v161;
        }
        else
        {
          unint64_t v163 = (char *)malloc_type_malloc(*(unsigned int *)(a1 + 452), 0xF0B72BE0uLL);
          long long v164 = v163;
          uint64_t v165 = *(uint64_t **)(a1 + 432);
          if (v165)
          {
            while (1)
            {
              while (1)
              {
                unint64_t v167 = (uint64_t **)v165;
                unint64_t v168 = v165[4];
                if ((unint64_t)v163 >= v168) {
                  break;
                }
                uint64_t v165 = *v167;
                long long v166 = v167;
                if (!*v167) {
                  goto LABEL_219;
                }
              }
              if (v168 >= (unint64_t)v163) {
                break;
              }
              uint64_t v165 = v167[1];
              if (!v165)
              {
                long long v166 = v167 + 1;
                goto LABEL_219;
              }
            }
          }
          else
          {
            long long v166 = (uint64_t **)(a1 + 432);
            unint64_t v167 = (uint64_t **)(a1 + 432);
LABEL_219:
            uint64_t v169 = (uint64_t *)operator new(0x28uLL);
            v169[4] = (uint64_t)v164;
            *uint64_t v169 = 0;
            v169[1] = 0;
            v169[2] = (uint64_t)v167;
            *long long v166 = v169;
            uint64_t v170 = **(void **)(a1 + 424);
            if (v170)
            {
              *(void *)(a1 + 424) = v170;
              char v171 = *v166;
            }
            else
            {
              char v171 = v169;
            }
            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 432), v171);
            ++*(void *)(a1 + 440);
          }
          uint64_t v172 = &v164[80 * *(_DWORD *)(a1 + 448) - 80];
          unsigned __int8 v173 = *(char **)(a1 + 456);
          do
          {
            uint64_t v162 = v173;
            unsigned __int8 v173 = v172;
            *(void *)uint64_t v172 = v162;
            v172 -= 80;
          }
          while (v172 >= v164);
          unint64_t v161 = (char **)(v172 + 80);
          uint64_t v2 = (void *)a2;
        }
        *(void *)(a1 + 456) = v162;
        *((_DWORD *)v161 + 2) = 3;
        float v290 = v153;
        v161[2] = (char *)v153;
        v161[3] = (char *)v292;
        v161[4] = 0;
        v161[5] = (char *)a1;
        *((unsigned char *)v161 + 48) = 0;
        *unint64_t v161 = (char *)&unk_1EF568BD0;
        v161[8] = 0;
        v161[9] = 0;
        v161[7] = 0;
        uint64_t v174 = v2[2];
        if (v2[3] != v174)
        {
          uint64_t v175 = 0;
          unsigned int v176 = 0;
          while (1)
          {
            uint64_t v177 = *(void *)(v174 + 8 * v175);
            unint64_t v178 = *(altitude::GlobeTileComponent **)(v177 + 328);
            long long v179 = (void *)((char *)v178 + 120);
            uint64_t v180 = 120;
            if (!*((void *)v178 + 15))
            {
              uint64_t v180 = 208;
              long long v179 = (void *)((char *)v178 + 208);
            }
            uint64_t v181 = *(void *)((char *)v178 + v180);
            float v182 = (std::__shared_weak_count *)v179[1];
            if (v182) {
              atomic_fetch_add_explicit(&v182->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            altitude::GlobeTileRenderManager::clearEffects((altitude::GlobeTileRenderManager *)a1, v178);
            __n128 v183 = *(__n128 *)(v177 + 392);
            __n128 v303 = v183;
            unsigned int v184 = __p.__begin_[v175];
            if (v184 != 6) {
              break;
            }
            uint64_t v196 = (*(uint64_t (**)(uint64_t))(*(void *)v152 + 56))(v152);
            long long v278 = *(_OWORD *)v196;
            float64x2_t v197 = vsubq_f64(*(float64x2_t *)(v196 + 32), *(float64x2_t *)(v196 + 8));
            int64x2_t v282 = (int64x2_t)vmulq_f64(v197, v197);
            long long v286 = *(_OWORD *)(v196 + 24);
            uint64_t v198 = (*(uint64_t (**)(uint64_t))(*(void *)v177 + 56))(v177);
            *(void *)&v199.f64[0] = v278;
            v199.f64[1] = *(float64_t *)v198;
            float64x2_t v200 = vsubq_f64(*(float64x2_t *)(v198 + 32), *(float64x2_t *)(v198 + 8));
            int64x2_t v201 = (int64x2_t)vmulq_f64(v200, v200);
            *(void *)&v202.f64[0] = v286;
            v202.f64[1] = *(float64_t *)(v198 + 24);
            float64x2_t v203 = vsubq_f64(v202, v199);
            float64x2_t v204 = vmulq_f64(vsqrtq_f64(vaddq_f64(vmlaq_f64((float64x2_t)vzip1q_s64(v282, v201), v203, v203), (float64x2_t)vzip2q_s64(v282, v201))), (float64x2_t)xmmword_1A28FD0C0);
            altitude::Tile::createClipPlanes(v177, (double *)&v307, fmin(fmax(vdivq_f64(v204, (float64x2_t)vdupq_laneq_s64((int64x2_t)v204, 1)).f64[0] + 1.0, 1.0), 1.5));
            altitude::util::createFallbackElement(&v296, (uint64_t *)&v305, (double *)&v307);
            uint64_t v205 = *(void *)(a1 + 376);
            if (v205)
            {
              unint64_t v206 = *(char **)v205;
            }
            else
            {
              uint64_t v223 = (char *)malloc_type_malloc(*(unsigned int *)(a1 + 372), 0xF0B72BE0uLL);
              uint64_t v224 = v223;
              uint64_t v225 = *(uint64_t **)(a1 + 352);
              long long v226 = (uint64_t **)(a1 + 352);
LABEL_257:
              unint64_t v227 = v226;
              if (v225)
              {
                do
                {
                  long long v226 = (uint64_t **)v225;
                  unint64_t v228 = v225[4];
                  if ((unint64_t)v223 < v228)
                  {
                    uint64_t v225 = *v226;
                    goto LABEL_257;
                  }
                  if (v228 >= (unint64_t)v223) {
                    goto LABEL_289;
                  }
                  uint64_t v225 = v226[1];
                }
                while (v225);
                unint64_t v227 = v226 + 1;
              }
              unint64_t v229 = (uint64_t *)operator new(0x28uLL);
              v229[4] = (uint64_t)v224;
              *unint64_t v229 = 0;
              v229[1] = 0;
              v229[2] = (uint64_t)v226;
              char *v227 = v229;
              uint64_t v230 = **(void **)(a1 + 344);
              if (v230)
              {
                *(void *)(a1 + 344) = v230;
                uint64_t v231 = *v227;
              }
              else
              {
                uint64_t v231 = v229;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 352), v231);
              ++*(void *)(a1 + 360);
LABEL_289:
              unint64_t v249 = &v224[136 * *(_DWORD *)(a1 + 368) - 136];
              unint64_t v250 = *(char **)(a1 + 376);
              do
              {
                unint64_t v206 = v250;
                unint64_t v250 = v249;
                *(void *)unint64_t v249 = v206;
                v249 -= 136;
              }
              while (v249 >= v224);
              uint64_t v205 = (uint64_t)(v249 + 136);
              uint64_t v2 = (void *)a2;
            }
            *(void *)(a1 + 376) = v206;
            *(_DWORD *)(v205 + 8) = 6;
            *(void *)(v205 + 16) = v290;
            *(void *)(v205 + 24) = v292;
            *(void *)(v205 + 32) = 0;
            *(void *)(v205 + 40) = a1;
            *(unsigned char *)(v205 + 48) = 0;
            *(void *)uint64_t v205 = &unk_1EF5685E0;
            *(void *)(v205 + 56) = v181;
            *(void *)(v205 + 64) = v182;
            if (v182) {
              atomic_fetch_add_explicit(&v182->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v251 = v297;
            *(void *)(v205 + 72) = v296;
            *(void *)(v205 + 80) = v251;
            if (v251) {
              atomic_fetch_add_explicit(&v251->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(__n128 *)(v205 + 88) = v303;
            *(_OWORD *)(v205 + 104) = v304;
            *(_DWORD *)(v205 + 120) = 0;
            *(_DWORD *)(v205 + 124) = v151;
            *(void *)(v205 + 128) = 0;
            __n128 v183 = altitude::CoarsenEffect::addChildEffect(v161, &v303, v205);
            unsigned int v252 = v297;
            if (!v297) {
              goto LABEL_308;
            }
LABEL_306:
            if (!atomic_fetch_add(&v252->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *, __n128))v252->__on_zero_shared)(v252, v183);
              std::__shared_weak_count::__release_weak(v252);
            }
LABEL_308:
            if (v182 && !atomic_fetch_add(&v182->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *, __n128))v182->__on_zero_shared)(v182, v183);
              std::__shared_weak_count::__release_weak(v182);
            }
            uint64_t v174 = v2[2];
            uint64_t v175 = ++v176;
            if (v176 >= (unint64_t)((v2[3] - v174) >> 3)) {
              goto LABEL_311;
            }
          }
          if (v184 != 5)
          {
            if (v184 == 1)
            {
              uint64_t v185 = (*(uint64_t (**)(uint64_t))(*(void *)v152 + 56))(v152);
              long long v277 = *(_OWORD *)v185;
              float64x2_t v186 = vsubq_f64(*(float64x2_t *)(v185 + 32), *(float64x2_t *)(v185 + 8));
              int64x2_t v281 = (int64x2_t)vmulq_f64(v186, v186);
              long long v285 = *(_OWORD *)(v185 + 24);
              uint64_t v187 = (*(uint64_t (**)(uint64_t))(*(void *)v177 + 56))(v177);
              *(void *)&v188.f64[0] = v277;
              v188.f64[1] = *(float64_t *)v187;
              float64x2_t v189 = vsubq_f64(*(float64x2_t *)(v187 + 32), *(float64x2_t *)(v187 + 8));
              int64x2_t v190 = (int64x2_t)vmulq_f64(v189, v189);
              *(void *)&v191.f64[0] = v285;
              v191.f64[1] = *(float64_t *)(v187 + 24);
              float64x2_t v192 = vsubq_f64(v191, v188);
              float64x2_t v193 = vmulq_f64(vsqrtq_f64(vaddq_f64(vmlaq_f64((float64x2_t)vzip1q_s64(v281, v190), v192, v192), (float64x2_t)vzip2q_s64(v281, v190))), (float64x2_t)xmmword_1A28FD0C0);
              altitude::Tile::createClipPlanes(v177, (double *)&v307, fmin(fmax(vdivq_f64(v193, (float64x2_t)vdupq_laneq_s64((int64x2_t)v193, 1)).f64[0] + 1.0, 1.0), 1.5));
              uint64_t v194 = *(void *)(a1 + 296);
              if (v194)
              {
                uint64_t v195 = *(char **)v194;
              }
              else
              {
                unint64_t v214 = (char *)malloc_type_malloc(*(unsigned int *)(a1 + 292), 0xF0B72BE0uLL);
                uint64_t v215 = v214;
                double v216 = *(uint64_t **)(a1 + 272);
                uint64_t v217 = (uint64_t **)(a1 + 272);
LABEL_248:
                uint64_t v218 = v217;
                if (v216)
                {
                  do
                  {
                    uint64_t v217 = (uint64_t **)v216;
                    unint64_t v219 = v216[4];
                    if ((unint64_t)v214 < v219)
                    {
                      double v216 = *v217;
                      goto LABEL_248;
                    }
                    if (v219 >= (unint64_t)v214) {
                      goto LABEL_276;
                    }
                    double v216 = v217[1];
                  }
                  while (v216);
                  uint64_t v218 = v217 + 1;
                }
                uint64_t v220 = (uint64_t *)operator new(0x28uLL);
                v220[4] = (uint64_t)v215;
                *uint64_t v220 = 0;
                v220[1] = 0;
                v220[2] = (uint64_t)v217;
                *uint64_t v218 = v220;
                uint64_t v221 = **(void **)(a1 + 264);
                if (v221)
                {
                  *(void *)(a1 + 264) = v221;
                  uint64_t v222 = *v218;
                }
                else
                {
                  uint64_t v222 = v220;
                }
                std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 272), v222);
                ++*(void *)(a1 + 280);
LABEL_276:
                unint64_t v241 = &v215[280 * *(_DWORD *)(a1 + 288) - 280];
                uint64_t v242 = *(char **)(a1 + 296);
                do
                {
                  uint64_t v195 = v242;
                  uint64_t v242 = v241;
                  *(void *)unint64_t v241 = v195;
                  v241 -= 280;
                }
                while (v241 >= v215);
                uint64_t v194 = (uint64_t)(v241 + 280);
                uint64_t v2 = (void *)a2;
              }
              *(void *)(a1 + 296) = v195;
              if (v182) {
                atomic_fetch_add_explicit(&v182->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              *(_DWORD *)(v194 + 8) = 1;
              *(void *)(v194 + 16) = v290;
              *(void *)(v194 + 24) = v292;
              *(void *)(v194 + 32) = 0;
              *(void *)(v194 + 40) = a1;
              *(unsigned char *)(v194 + 48) = 0;
              *(void *)uint64_t v194 = &unk_1EF568E38;
              *(_DWORD *)(v194 + 52) = 0;
              *(_DWORD *)(v194 + 56) = 0;
              *(_DWORD *)(v194 + 60) = v151;
              *(void *)(v194 + 64) = v181;
              *(void *)(v194 + 72) = v182;
              if (v182) {
                atomic_fetch_add_explicit(&v182->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              *(unsigned char *)(v194 + 274) = 1;
              long long v243 = v308;
              *(_OWORD *)(v194 + 80) = v307;
              *(_OWORD *)(v194 + 96) = v243;
              long long v244 = v310;
              *(_OWORD *)(v194 + 112) = v309;
              *(_OWORD *)(v194 + 128) = v244;
              long long v245 = v312;
              *(_OWORD *)(v194 + 144) = v311;
              *(_OWORD *)(v194 + 160) = v245;
              long long v246 = v314;
              *(_OWORD *)(v194 + 176) = v313;
              *(_OWORD *)(v194 + 192) = v246;
              long long v247 = v316;
              *(_OWORD *)(v194 + 208) = v315;
              *(_OWORD *)(v194 + 224) = v247;
              long long v248 = v318;
              *(_OWORD *)(v194 + 240) = v317;
              *(_OWORD *)(v194 + 256) = v248;
              *(unsigned char *)(v194 + 272) = 1;
              *(unsigned char *)(v194 + 273) = v181 != 0;
              if (v182 && !atomic_fetch_add(&v182->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                std::__shared_weak_count::__release_weak(v182);
              }
              __n128 v183 = altitude::CoarsenEffect::addChildEffect(v161, &v303, v194);
            }
            goto LABEL_308;
          }
          uint64_t v207 = *(void *)(v2[2] + 8 * v175);
          uint64_t v208 = *(void *)(a1 + 104);
          uint64_t v296 = (unsigned int *)v152;
          uint64_t v297 = (std::__shared_weak_count *)v207;
          long long v298 = *(_OWORD *)(v152 + 392);
          long long v299 = *(_OWORD *)(v207 + 392);
          unint64_t v209 = v290;
          int v210 = (std::__shared_weak_count *)v290[16];
          uint64_t v300 = v290[15];
          BOOL v301 = v210;
          if (v210) {
            atomic_fetch_add_explicit(&v210->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(__n128 *__return_ptr))(*(void *)v208 + 120))(&v302);
          uint32x4_t v211 = v301;
          if (v301 && !atomic_fetch_add(&v301->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
            std::__shared_weak_count::__release_weak(v211);
            uint64_t v212 = *(void *)(a1 + 416);
            if (v212) {
              goto LABEL_245;
            }
          }
          else
          {
            uint64_t v212 = *(void *)(a1 + 416);
            if (v212)
            {
LABEL_245:
              unint64_t v213 = *(char **)v212;
              goto LABEL_303;
            }
          }
          uint64_t v232 = (char *)malloc_type_malloc(*(unsigned int *)(a1 + 412), 0xF0B72BE0uLL);
          uint64_t v233 = v232;
          long long v234 = *(uint64_t **)(a1 + 392);
          int64_t v235 = (uint64_t **)(a1 + 392);
LABEL_267:
          uint64_t v236 = v235;
          if (v234)
          {
            do
            {
              int64_t v235 = (uint64_t **)v234;
              unint64_t v237 = v234[4];
              if ((unint64_t)v232 < v237)
              {
                long long v234 = *v235;
                goto LABEL_267;
              }
              if (v237 >= (unint64_t)v232) {
                goto LABEL_300;
              }
              long long v234 = v235[1];
            }
            while (v234);
            uint64_t v236 = v235 + 1;
          }
          unint64_t v238 = (uint64_t *)operator new(0x28uLL);
          v238[4] = (uint64_t)v233;
          uint64_t *v238 = 0;
          v238[1] = 0;
          v238[2] = (uint64_t)v235;
          *uint64_t v236 = v238;
          uint64_t v239 = **(void **)(a1 + 384);
          if (v239)
          {
            *(void *)(a1 + 384) = v239;
            uint64_t v240 = *v236;
          }
          else
          {
            uint64_t v240 = v238;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 392), v240);
          ++*(void *)(a1 + 400);
LABEL_300:
          int v253 = &v233[112 * *(_DWORD *)(a1 + 408) - 112];
          uint64_t v254 = *(char **)(a1 + 416);
          do
          {
            unint64_t v213 = v254;
            uint64_t v254 = v253;
            *(void *)int v253 = v213;
            v253 -= 112;
          }
          while (v253 >= v233);
          uint64_t v212 = (uint64_t)(v253 + 112);
          uint64_t v2 = (void *)a2;
          unint64_t v209 = v290;
LABEL_303:
          *(void *)(a1 + 416) = v213;
          *(_DWORD *)(v212 + 8) = 5;
          *(void *)(v212 + 16) = v209;
          *(void *)(v212 + 24) = v292;
          *(void *)(v212 + 32) = 0;
          *(void *)(v212 + 40) = a1;
          *(unsigned char *)(v212 + 48) = 0;
          *(void *)uint64_t v212 = &unk_1EF5686D0;
          unint64_t v255 = v302.n128_u64[1];
          *(void *)(v212 + 56) = v302.n128_u64[0];
          *(void *)(v212 + 64) = v255;
          if (v255) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v255 + 8), 1uLL, memory_order_relaxed);
          }
          *(__n128 *)(v212 + 72) = v303;
          *(_OWORD *)(v212 + 88) = v304;
          *(_DWORD *)(v212 + 104) = 0;
          *(_DWORD *)(v212 + 108) = v151;
          __n128 v183 = altitude::CoarsenEffect::addChildEffect(v161, &v303, v212);
          unsigned int v252 = (std::__shared_weak_count *)v302.n128_u64[1];
          if (!v302.n128_u64[1]) {
            goto LABEL_308;
          }
          goto LABEL_306;
        }
LABEL_311:
        *(void *)(v275 + 24) = v161;
        uint64_t v257 = *(char **)(a1 + 224);
        unint64_t v256 = *(void *)(a1 + 232);
        if ((unint64_t)v257 >= v256)
        {
          unint64_t v259 = *(char **)(a1 + 216);
          uint64_t v260 = (v257 - v259) >> 3;
          unint64_t v261 = v260 + 1;
          if ((unint64_t)(v260 + 1) >> 61) {
LABEL_340:
          }
            abort();
          uint64_t v262 = v256 - (void)v259;
          if (v262 >> 2 > v261) {
            unint64_t v261 = v262 >> 2;
          }
          if ((unint64_t)v262 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v263 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v263 = v261;
          }
          if (v263)
          {
            if (v263 >> 61) {
LABEL_341:
            }
              std::__throw_bad_array_new_length[abi:nn180100]();
            long long v264 = operator new(8 * v263);
          }
          else
          {
            long long v264 = 0;
          }
          uint64_t v265 = (char ***)&v264[8 * v260];
          float v266 = &v264[8 * v263];
          *uint64_t v265 = v161;
          uint64_t v258 = v265 + 1;
          if (v257 == v259)
          {
            unint64_t v259 = v257;
          }
          else
          {
            unint64_t v267 = v257 - v259 - 8;
            if (v267 < 0x58) {
              goto LABEL_344;
            }
            if ((unint64_t)(v259 - v264) < 0x20) {
              goto LABEL_344;
            }
            uint64_t v268 = (v267 >> 3) + 1;
            __float2 v269 = &v264[8 * v260 - 16];
            __float2 v270 = v257 - 16;
            uint64_t v271 = v268 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v272 = *(_OWORD *)v270;
              *(v269 - 1) = *((_OWORD *)v270 - 1);
              *__float2 v269 = v272;
              v269 -= 2;
              v270 -= 32;
              v271 -= 4;
            }
            while (v271);
            v265 -= v268 & 0x3FFFFFFFFFFFFFFCLL;
            v257 -= 8 * (v268 & 0x3FFFFFFFFFFFFFFCLL);
            if (v268 != (v268 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_344:
              do
              {
                unsigned int v273 = (char **)*((void *)v257 - 1);
                v257 -= 8;
                *--uint64_t v265 = v273;
              }
              while (v257 != v259);
              unint64_t v259 = *(char **)(a1 + 216);
            }
          }
          *(void *)(a1 + 216) = v265;
          *(void *)(a1 + 224) = v258;
          *(void *)(a1 + 232) = v266;
          if (v259) {
            operator delete(v259);
          }
        }
        else
        {
          *(void *)uint64_t v257 = v161;
          uint64_t v258 = v257 + 8;
        }
        *(void *)(a1 + 224) = v258;
        unint64_t v274 = (std::__shared_weak_count *)*((void *)&v305 + 1);
        if (*((void *)&v305 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v305 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
          std::__shared_weak_count::__release_weak(v274);
        }
LABEL_337:
        std::vector<unsigned int>::pointer begin = __p.__begin_;
        if (!__p.__begin_) {
          return;
        }
        goto LABEL_338;
      }
    }
LABEL_205:
    operator new();
  }
  if (!v4)
  {
    char v295 = 0;
    std::vector<unsigned int>::value_type v294 = 0;
    uint64_t v296 = 0;
    uint64_t v297 = 0;
    *(void *)&long long v298 = 0;
    if (!altitude::GlobeTileRenderManager::prepareRefineOperation(a1, (void *)a2, (std::vector<unsigned int> *)&v296, &v294, &v295)|| v295)
    {
      uint64_t v5 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 72) + 24))(*(void *)(a1 + 72), a1, 0xFFFFFFFFLL);
      uint64_t v6 = v2[2];
      uint64_t v7 = *(altitude::GlobeTileComponent **)(v6 + 328);
      if (!v7) {
        operator new();
      }
      unsigned __int32 v8 = *(_DWORD *)(*(void *)(a1 + 32) + 60);
      altitude::GlobeTileRenderManager::clearEffects((altitude::GlobeTileRenderManager *)a1, v7);
      int v9 = (void *)((char *)v7 + 120);
      uint64_t v10 = 120;
      if (!*((void *)v7 + 15))
      {
        uint64_t v10 = 208;
        int v9 = (void *)((char *)v7 + 208);
      }
      unint64_t v11 = *(unsigned int **)((char *)v7 + v10);
      std::vector<unsigned int>::pointer end = (std::vector<unsigned int>::pointer)v9[1];
      __p.__begin_ = v11;
      __p.__end_ = end;
      if (end) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)end + 1, 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = v2[3];
      if (v2[4] != v13)
      {
        uint64_t v14 = 0;
        uint64_t v276 = v6;
        uint64_t v15 = (long long *)(v6 + 392);
        unsigned int v16 = 0;
        BOOL v289 = v15;
        while (2)
        {
          uint64_t v18 = *(void *)(v13 + 8 * v14);
          unint64_t v19 = *(void **)(v18 + 328);
          uint64_t v20 = v19[29];
          if (!v20) {
LABEL_23:
          }
            operator new();
          if (v20 == 1)
          {
            uint64_t v21 = v19[30];
            if (*(void *)(v21 + 8) != v5) {
              goto LABEL_23;
            }
          }
          else
          {
            unint64_t v22 = (uint64_t *)v19[31];
            while (1)
            {
              uint64_t v21 = *v22;
              if (*(void *)(*v22 + 8) == v5) {
                break;
              }
              ++v22;
              if (!--v20) {
                goto LABEL_23;
              }
            }
          }
          long long v23 = *v289;
          long long v304 = *(_OWORD *)(v18 + 392);
          long long v305 = v23;
          float v24 = 0.0;
          switch(v296[v14])
          {
            case 1u:
              unsigned int v291 = v16;
              std::vector<unsigned int>::value_type v25 = v294;
              long long v26 = *(_OWORD *)&__p.__begin_;
              __n128 v303 = *(__n128 *)&__p.__begin_;
              if (__p.__end_) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)__p.__end_ + 1, 1uLL, memory_order_relaxed);
              }
              if (!(void)v26) {
                goto LABEL_33;
              }
              uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v276 + 56))(v276);
              long long v279 = *(_OWORD *)v27;
              float64x2_t v28 = vsubq_f64(*(float64x2_t *)(v27 + 32), *(float64x2_t *)(v27 + 8));
              int64x2_t v283 = (int64x2_t)vmulq_f64(v28, v28);
              long long v287 = *(_OWORD *)(v27 + 24);
              uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 56))(v18);
              *(void *)&v30.f64[0] = v279;
              v30.f64[1] = *(float64_t *)v29;
              float64x2_t v31 = vsubq_f64(*(float64x2_t *)(v29 + 32), *(float64x2_t *)(v29 + 8));
              int64x2_t v32 = (int64x2_t)vmulq_f64(v31, v31);
              *(void *)&v33.f64[0] = v287;
              v33.f64[1] = *(float64_t *)(v29 + 24);
              float64x2_t v34 = vsubq_f64(v33, v30);
              float64x2_t v35 = vmulq_f64(vsqrtq_f64(vaddq_f64(vmlaq_f64((float64x2_t)vzip1q_s64(v283, v32), v34, v34), (float64x2_t)vzip2q_s64(v283, v32))), (float64x2_t)xmmword_1A28FD0C0);
              altitude::Tile::createClipPlanes(v18, (double *)&v307, fmin(fmax(vdivq_f64(v35, (float64x2_t)vdupq_laneq_s64((int64x2_t)v35, 1)).f64[0] + 1.0, 1.0), 1.5));
              altitude::util::createFallbackElement(&v302, (uint64_t *)&v303, (double *)&v307);
              __n128 v36 = v302;
              __n128 v302 = 0uLL;
              __n128 v303 = v36;
              if (*((void *)&v26 + 1)
                && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v26 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                (*(void (**)(void))(**((void **)&v26 + 1) + 16))(*((void *)&v26 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
              }
              int16x8_t v37 = (std::__shared_weak_count *)v302.n128_u64[1];
              if (v302.n128_u64[1]
                && !atomic_fetch_add((atomic_ullong *volatile)(v302.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
                unint64_t v38 = *(__n128 **)(a1 + 296);
                if (v38)
                {
LABEL_34:
                  int8x16_t v39 = (char *)v38->n128_u64[0];
                  goto LABEL_130;
                }
              }
              else
              {
LABEL_33:
                unint64_t v38 = *(__n128 **)(a1 + 296);
                if (v38) {
                  goto LABEL_34;
                }
              }
              int32x4_t v95 = (char *)malloc_type_malloc(*(unsigned int *)(a1 + 292), 0xF0B72BE0uLL);
              int8x16_t v96 = v95;
              int32x4_t v97 = *(uint64_t **)(a1 + 272);
              int8x16_t v98 = (uint64_t **)(a1 + 272);
LABEL_100:
              uint64_t v99 = v98;
              if (v97)
              {
                do
                {
                  int8x16_t v98 = (uint64_t **)v97;
                  unint64_t v100 = v97[4];
                  if ((unint64_t)v95 < v100)
                  {
                    int32x4_t v97 = *v98;
                    goto LABEL_100;
                  }
                  if (v100 >= (unint64_t)v95) {
                    goto LABEL_127;
                  }
                  int32x4_t v97 = v98[1];
                }
                while (v97);
                uint64_t v99 = v98 + 1;
              }
              uint64_t v101 = (uint64_t *)operator new(0x28uLL);
              v101[4] = (uint64_t)v96;
              *uint64_t v101 = 0;
              v101[1] = 0;
              v101[2] = (uint64_t)v98;
              unsigned char *v99 = v101;
              uint64_t v102 = **(void **)(a1 + 264);
              if (v102)
              {
                *(void *)(a1 + 264) = v102;
                int8x16_t v103 = *v99;
              }
              else
              {
                int8x16_t v103 = v101;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 272), v103);
              ++*(void *)(a1 + 280);
LABEL_127:
              int16x8_t v117 = &v96[280 * *(_DWORD *)(a1 + 288) - 280];
              int32x4_t v118 = *(char **)(a1 + 296);
              do
              {
                int8x16_t v39 = v118;
                int32x4_t v118 = v117;
                *(void *)int16x8_t v117 = v39;
                v117 -= 280;
              }
              while (v117 >= v96);
              unint64_t v38 = (__n128 *)(v117 + 280);
              uint64_t v2 = (void *)a2;
LABEL_130:
              *(void *)(a1 + 296) = v39;
              __n128 v119 = v303;
              if (v303.n128_u64[1]) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v303.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
              }
              v38->n128_u32[2] = 1;
              v38[1].n128_u64[0] = (unint64_t)v19;
              v38[1].n128_u64[1] = v5;
              v38[2].n128_u64[0] = 0;
              v38[2].n128_u64[1] = a1;
              v38[3].n128_u8[0] = 0;
              v38->n128_u64[0] = (unint64_t)&unk_1EF568E38;
              v38[3].n128_u32[1] = 0;
              if (v25 == 1) {
                float v120 = 0.0;
              }
              else {
                float v120 = 1.0;
              }
              v38[3].n128_f32[2] = v120;
              v38[3].n128_u32[3] = v8;
              v38[4] = v119;
              if (v119.n128_u64[1])
              {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v119.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
                v38[17].n128_u8[0] = 0;
                v38[17].n128_u8[2] = 1;
                v38[17].n128_u8[1] = v119.n128_u64[0] != 0;
                if (!atomic_fetch_add((atomic_ullong *volatile)(v119.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
                {
                  (*(void (**)(unint64_t))(*(void *)v119.n128_u64[1] + 16))(v119.n128_u64[1]);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v119.n128_u64[1]);
                }
                int32x4_t v81 = *(char ***)(a1 + 496);
                if (v81)
                {
LABEL_139:
                  unint64_t v121 = *v81;
                  goto LABEL_161;
                }
              }
              else
              {
                v38[17].n128_u8[0] = 0;
                v38[17].n128_u8[2] = 1;
                v38[17].n128_u8[1] = v119.n128_u64[0] != 0;
                int32x4_t v81 = *(char ***)(a1 + 496);
                if (v81) {
                  goto LABEL_139;
                }
              }
              int32x4_t v122 = (char *)malloc_type_malloc(*(unsigned int *)(a1 + 492), 0xF0B72BE0uLL);
              int8x16_t v123 = v122;
              int8x16_t v124 = *(uint64_t **)(a1 + 472);
              int8x16_t v125 = (uint64_t **)(a1 + 472);
LABEL_143:
              uint64_t v126 = v125;
              if (v124)
              {
                do
                {
                  int8x16_t v125 = (uint64_t **)v124;
                  unint64_t v127 = v124[4];
                  if ((unint64_t)v122 < v127)
                  {
                    int8x16_t v124 = *v125;
                    goto LABEL_143;
                  }
                  if (v127 >= (unint64_t)v122) {
                    goto LABEL_158;
                  }
                  int8x16_t v124 = v125[1];
                }
                while (v124);
                uint64_t v126 = v125 + 1;
              }
              uint64_t v128 = (uint64_t *)operator new(0x28uLL);
              v128[4] = (uint64_t)v123;
              *uint64_t v128 = 0;
              v128[1] = 0;
              v128[2] = (uint64_t)v125;
              *uint64_t v126 = v128;
              uint64_t v129 = **(void **)(a1 + 464);
              if (v129)
              {
                *(void *)(a1 + 464) = v129;
                int32x4_t v130 = *v126;
              }
              else
              {
                int32x4_t v130 = v128;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 472), v130);
              ++*(void *)(a1 + 480);
LABEL_158:
              int32x4_t v133 = &v123[(*(_DWORD *)(a1 + 488) << 6) - 64];
              unint64_t v134 = *(char **)(a1 + 496);
              do
              {
                unint64_t v121 = v134;
                unint64_t v134 = v133;
                *(void *)int32x4_t v133 = v121;
                v133 -= 64;
              }
              while (v133 >= v123);
              int32x4_t v81 = (char **)(v133 + 64);
              uint64_t v2 = (void *)a2;
LABEL_161:
              *(void *)(a1 + 496) = v121;
              *((_DWORD *)v81 + 2) = 4;
              v81[2] = (char *)v19;
              v81[3] = (char *)v5;
              v81[4] = 0;
              v81[5] = (char *)a1;
              *((unsigned char *)v81 + 48) = 0;
              *int32x4_t v81 = (char *)&unk_1EF568A80;
              v81[7] = (char *)v38;
LABEL_162:
              int8x16_t v43 = (std::__shared_weak_count *)v303.n128_u64[1];
              if (v303.n128_u64[1])
              {
LABEL_163:
                if (!atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                  std::__shared_weak_count::__release_weak(v43);
                }
              }
LABEL_165:
              *(void *)(v21 + 24) = v81;
              int8x16_t v136 = *(char **)(a1 + 224);
              unint64_t v135 = *(void *)(a1 + 232);
              if ((unint64_t)v136 < v135)
              {
                *(void *)int8x16_t v136 = v81;
                unint64_t v17 = v136 + 8;
                unsigned int v16 = v291;
                goto LABEL_14;
              }
              int32x4_t v137 = *(char **)(a1 + 216);
              uint64_t v138 = (v136 - v137) >> 3;
              unint64_t v139 = v138 + 1;
              if ((unint64_t)(v138 + 1) >> 61) {
                goto LABEL_340;
              }
              uint64_t v140 = v135 - (void)v137;
              if (v140 >> 2 > v139) {
                unint64_t v139 = v140 >> 2;
              }
              if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v141 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v141 = v139;
              }
              if (v141)
              {
                if (v141 >> 61) {
                  goto LABEL_341;
                }
                float v142 = operator new(8 * v141);
              }
              else
              {
                float v142 = 0;
              }
              float v143 = (char ***)&v142[8 * v138];
              *float v143 = v81;
              unint64_t v17 = v143 + 1;
              if (v136 == v137)
              {
                int32x4_t v137 = v136;
                uint64_t v2 = (void *)a2;
                unsigned int v16 = v291;
                goto LABEL_186;
              }
              unint64_t v144 = v136 - 8 - v137;
              unsigned int v16 = v291;
              if (v144 >= 0x58)
              {
                uint64_t v2 = (void *)a2;
                if ((unint64_t)(v137 - v142) >= 0x20)
                {
                  uint64_t v145 = (v144 >> 3) + 1;
                  unint64_t v146 = &v142[8 * v138 - 16];
                  long long v147 = v136 - 16;
                  uint64_t v148 = v145 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v149 = *(_OWORD *)v147;
                    *(v146 - 1) = *((_OWORD *)v147 - 1);
                    *unint64_t v146 = v149;
                    v146 -= 2;
                    v147 -= 32;
                    v148 -= 4;
                  }
                  while (v148);
                  v143 -= v145 & 0x3FFFFFFFFFFFFFFCLL;
                  v136 -= 8 * (v145 & 0x3FFFFFFFFFFFFFFCLL);
                  if (v145 == (v145 & 0x3FFFFFFFFFFFFFFCLL)) {
                    goto LABEL_186;
                  }
                }
              }
              else
              {
                uint64_t v2 = (void *)a2;
              }
              do
              {
                double v150 = (char **)*((void *)v136 - 1);
                v136 -= 8;
                *--float v143 = v150;
              }
              while (v136 != v137);
              int32x4_t v137 = *(char **)(a1 + 216);
LABEL_186:
              *(void *)(a1 + 216) = v143;
              *(void *)(a1 + 224) = v17;
              *(void *)(a1 + 232) = &v142[8 * v141];
              if (v137) {
                operator delete(v137);
              }
LABEL_14:
              *(void *)(a1 + 224) = v17;
LABEL_15:
              uint64_t v13 = v2[3];
              uint64_t v14 = ++v16;
              if (v16 < (unint64_t)((v2[4] - v13) >> 3)) {
                continue;
              }
              std::vector<unsigned int>::pointer end = __p.__end_;
              break;
            case 2u:
              float v24 = 1.0;
              goto LABEL_36;
            case 5u:
              uint64_t v55 = *(void *)(a1 + 104);
              *(void *)&long long v307 = *(void *)(v2[3] + 8 * v14);
              *((void *)&v307 + 1) = v276;
              long long v308 = *(_OWORD *)(v307 + 392);
              long long v309 = *v289;
              uint64_t v56 = v19[16];
              *(void *)&long long v310 = v19[15];
              *((void *)&v310 + 1) = v56;
              if (v56) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v56 + 8), 1uLL, memory_order_relaxed);
              }
              (*(void (**)(__n128 *__return_ptr))(*(void *)v55 + 120))(&v303);
              BOOL v57 = (std::__shared_weak_count *)*((void *)&v310 + 1);
              if (*((void *)&v310 + 1)
                && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v310 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                std::__shared_weak_count::__release_weak(v57);
                uint64_t v58 = *(void **)(a1 + 416);
                if (v58)
                {
LABEL_47:
                  long long v59 = (char *)*v58;
                  goto LABEL_112;
                }
              }
              else
              {
                uint64_t v58 = *(void **)(a1 + 416);
                if (v58) {
                  goto LABEL_47;
                }
              }
              char v69 = (char *)malloc_type_malloc(*(unsigned int *)(a1 + 412), 0xF0B72BE0uLL);
              int8x16_t v70 = v69;
              int8x16_t v71 = *(uint64_t **)(a1 + 392);
              uint64_t v72 = (uint64_t **)(a1 + 392);
LABEL_60:
              unint64_t v73 = v72;
              if (v71)
              {
                do
                {
                  uint64_t v72 = (uint64_t **)v71;
                  unint64_t v74 = v71[4];
                  if ((unint64_t)v69 < v74)
                  {
                    int8x16_t v71 = *v72;
                    goto LABEL_60;
                  }
                  if (v74 >= (unint64_t)v69) {
                    goto LABEL_109;
                  }
                  int8x16_t v71 = v72[1];
                }
                while (v71);
                unint64_t v73 = v72 + 1;
              }
              int8x16_t v75 = (uint64_t *)operator new(0x28uLL);
              unsigned __int8 v75[4] = (uint64_t)v70;
              *int8x16_t v75 = 0;
              v75[1] = 0;
              v75[2] = (uint64_t)v72;
              *unint64_t v73 = v75;
              uint64_t v76 = **(void **)(a1 + 384);
              if (v76)
              {
                *(void *)(a1 + 384) = v76;
                int32x4_t v77 = *v73;
              }
              else
              {
                int32x4_t v77 = v75;
              }
              std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 392), v77);
              ++*(void *)(a1 + 400);
LABEL_109:
              int8x16_t v104 = &v70[112 * *(_DWORD *)(a1 + 408) - 112];
              int8x16_t v105 = *(char **)(a1 + 416);
              do
              {
                long long v59 = v105;
                int8x16_t v105 = v104;
                *(void *)int8x16_t v104 = v59;
                v104 -= 112;
              }
              while (v104 >= v70);
              uint64_t v58 = v104 + 112;
              uint64_t v2 = (void *)a2;
LABEL_112:
              unsigned int v291 = v16;
              *(void *)(a1 + 416) = v59;
              *((_DWORD *)v58 + 2) = 5;
              v58[2] = v19;
              v58[3] = v5;
              v58[4] = 0;
              v58[5] = a1;
              *((unsigned char *)v58 + 48) = 0;
              *uint64_t v58 = &unk_1EF5686D0;
              unint64_t v106 = v303.n128_u64[1];
              v58[7] = v303.n128_u64[0];
              v58[8] = v106;
              if (v106) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v106 + 8), 1uLL, memory_order_relaxed);
              }
              *(_OWORD *)(v58 + 9) = v305;
              *(_OWORD *)(v58 + 11) = v304;
              *((_DWORD *)v58 + 26) = 0;
              *((_DWORD *)v58 + 27) = v8;
              int32x4_t v81 = *(char ***)(a1 + 496);
              if (v81)
              {
                unint64_t v107 = *v81;
              }
              else
              {
                int8x16_t v108 = (char *)malloc_type_malloc(*(unsigned int *)(a1 + 492), 0xF0B72BE0uLL);
                int8x16_t v109 = v108;
                int8x16_t v110 = *(uint64_t **)(a1 + 472);
                int8x16_t v111 = (uint64_t **)(a1 + 472);
LABEL_118:
                uint64_t v112 = v111;
                if (v110)
                {
                  do
                  {
                    int8x16_t v111 = (uint64_t **)v110;
                    unint64_t v113 = v110[4];
                    if ((unint64_t)v108 < v113)
                    {
                      int8x16_t v110 = *v111;
                      goto LABEL_118;
                    }
                    if (v113 >= (unint64_t)v108) {
                      goto LABEL_152;
                    }
                    int8x16_t v110 = v111[1];
                  }
                  while (v110);
                  uint64_t v112 = v111 + 1;
                }
                int16x8_t v114 = (uint64_t *)operator new(0x28uLL);
                v114[4] = (uint64_t)v109;
                *int16x8_t v114 = 0;
                v114[1] = 0;
                v114[2] = (uint64_t)v111;
                *uint64_t v112 = v114;
                uint64_t v115 = **(void **)(a1 + 464);
                if (v115)
                {
                  *(void *)(a1 + 464) = v115;
                  int8x16_t v116 = *v112;
                }
                else
                {
                  int8x16_t v116 = v114;
                }
                std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 472), v116);
                ++*(void *)(a1 + 480);
LABEL_152:
                int8x16_t v131 = &v109[(*(_DWORD *)(a1 + 488) << 6) - 64];
                int16x8_t v132 = *(char **)(a1 + 496);
                do
                {
                  unint64_t v107 = v132;
                  int16x8_t v132 = v131;
                  *(void *)int8x16_t v131 = v107;
                  v131 -= 64;
                }
                while (v131 >= v109);
                int32x4_t v81 = (char **)(v131 + 64);
                uint64_t v2 = (void *)a2;
              }
              *(void *)(a1 + 496) = v107;
              *((_DWORD *)v81 + 2) = 4;
              v81[2] = (char *)v19;
              v81[3] = (char *)v5;
              v81[4] = 0;
              v81[5] = (char *)a1;
              *((unsigned char *)v81 + 48) = 0;
              *int32x4_t v81 = (char *)&unk_1EF568A80;
              v81[7] = (char *)v58;
              goto LABEL_162;
            case 6u:
LABEL_36:
              unsigned int v291 = v16;
              unint64_t v40 = v19 + 15;
              uint64_t v41 = 15;
              if (!v19[15])
              {
                uint64_t v41 = 26;
                unint64_t v40 = v19 + 26;
              }
              uint64_t v42 = v19[v41];
              int8x16_t v43 = (std::__shared_weak_count *)v40[1];
              if (v43) {
                atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v44 = (*(uint64_t (**)(uint64_t))(*(void *)v276 + 56))(v276);
              long long v280 = *(_OWORD *)v44;
              float64x2_t v45 = vsubq_f64(*(float64x2_t *)(v44 + 32), *(float64x2_t *)(v44 + 8));
              int64x2_t v284 = (int64x2_t)vmulq_f64(v45, v45);
              long long v288 = *(_OWORD *)(v44 + 24);
              uint64_t v46 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 56))(v18);
              *(void *)&v47.f64[0] = v280;
              v47.f64[1] = *(float64_t *)v46;
              float64x2_t v48 = vsubq_f64(*(float64x2_t *)(v46 + 32), *(float64x2_t *)(v46 + 8));
              int64x2_t v49 = (int64x2_t)vmulq_f64(v48, v48);
              *(void *)&v50.f64[0] = v288;
              v50.f64[1] = *(float64_t *)(v46 + 24);
              float64x2_t v51 = vsubq_f64(v50, v47);
              float64x2_t v52 = vmulq_f64(vsqrtq_f64(vaddq_f64(vmlaq_f64((float64x2_t)vzip1q_s64(v284, v49), v51, v51), (float64x2_t)vzip2q_s64(v284, v49))), (float64x2_t)xmmword_1A28FD0C0);
              altitude::Tile::createClipPlanes(v18, (double *)&v307, fmin(fmax(vdivq_f64(v52, (float64x2_t)vdupq_laneq_s64((int64x2_t)v52, 1)).f64[0] + 1.0, 1.0), 1.5));
              altitude::util::createFallbackElement(&v303, (uint64_t *)&__p, (double *)&v307);
              unint64_t v53 = *(void **)(a1 + 376);
              if (v53)
              {
                double v54 = (char *)*v53;
                goto LABEL_72;
              }
              uint64_t v60 = (char *)malloc_type_malloc(*(unsigned int *)(a1 + 372), 0xF0B72BE0uLL);
              long long v61 = v60;
              char v62 = *(uint64_t **)(a1 + 352);
              long long v63 = (uint64_t **)(a1 + 352);
LABEL_50:
              double v64 = v63;
              if (!v62) {
                goto LABEL_55;
              }
              while (1)
              {
                long long v63 = (uint64_t **)v62;
                unint64_t v65 = v62[4];
                if ((unint64_t)v60 < v65)
                {
                  char v62 = *v63;
                  goto LABEL_50;
                }
                if (v65 >= (unint64_t)v60) {
                  break;
                }
                char v62 = v63[1];
                if (!v62)
                {
                  double v64 = v63 + 1;
LABEL_55:
                  char v66 = (uint64_t *)operator new(0x28uLL);
                  v66[4] = (uint64_t)v61;
                  *char v66 = 0;
                  v66[1] = 0;
                  v66[2] = (uint64_t)v63;
                  *double v64 = v66;
                  uint64_t v67 = **(void **)(a1 + 344);
                  if (v67)
                  {
                    *(void *)(a1 + 344) = v67;
                    unsigned __int8 v68 = *v64;
                  }
                  else
                  {
                    unsigned __int8 v68 = v66;
                  }
                  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 352), v68);
                  ++*(void *)(a1 + 360);
                  break;
                }
              }
              int8x16_t v78 = &v61[136 * *(_DWORD *)(a1 + 368) - 136];
              int32x4_t v79 = *(char **)(a1 + 376);
              do
              {
                double v54 = v79;
                int32x4_t v79 = v78;
                *(void *)int8x16_t v78 = v54;
                v78 -= 136;
              }
              while (v78 >= v61);
              unint64_t v53 = v78 + 136;
              uint64_t v2 = (void *)a2;
LABEL_72:
              *(void *)(a1 + 376) = v54;
              *((_DWORD *)v53 + 2) = 6;
              v53[2] = v19;
              v53[3] = v5;
              v53[4] = 0;
              v53[5] = a1;
              *((unsigned char *)v53 + 48) = 0;
              *unint64_t v53 = &unk_1EF5685E0;
              unint64_t v80 = v303.n128_u64[1];
              v53[7] = v303.n128_u64[0];
              v53[8] = v80;
              if (v80) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v80 + 8), 1uLL, memory_order_relaxed);
              }
              v53[9] = v42;
              v53[10] = v43;
              if (v43) {
                atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              *(_OWORD *)(v53 + 11) = v305;
              *(_OWORD *)(v53 + 13) = v304;
              *((_DWORD *)v53 + 30) = 0;
              *((_DWORD *)v53 + 31) = v8;
              *((float *)v53 + 32) = v24;
              *((_DWORD *)v53 + 33) = 0;
              int32x4_t v81 = *(char ***)(a1 + 496);
              if (v81)
              {
                int8x16_t v82 = *v81;
              }
              else
              {
                int8x16_t v83 = (char *)malloc_type_malloc(*(unsigned int *)(a1 + 492), 0xF0B72BE0uLL);
                int8x16_t v84 = v83;
                uint64_t v85 = *(uint64_t **)(a1 + 472);
                int8x16_t v86 = (uint64_t **)(a1 + 472);
LABEL_80:
                int8x16_t v87 = v86;
                if (v85)
                {
                  do
                  {
                    int8x16_t v86 = (uint64_t **)v85;
                    unint64_t v88 = v85[4];
                    if ((unint64_t)v83 < v88)
                    {
                      uint64_t v85 = *v86;
                      goto LABEL_80;
                    }
                    if (v88 >= (unint64_t)v83) {
                      goto LABEL_89;
                    }
                    uint64_t v85 = v86[1];
                  }
                  while (v85);
                  int8x16_t v87 = v86 + 1;
                }
                int8x16_t v89 = (uint64_t *)operator new(0x28uLL);
                v89[4] = (uint64_t)v84;
                *int8x16_t v89 = 0;
                v89[1] = 0;
                v89[2] = (uint64_t)v86;
                *int8x16_t v87 = v89;
                uint64_t v90 = **(void **)(a1 + 464);
                if (v90)
                {
                  *(void *)(a1 + 464) = v90;
                  int16x8_t v91 = *v87;
                }
                else
                {
                  int16x8_t v91 = v89;
                }
                std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 472), v91);
                ++*(void *)(a1 + 480);
LABEL_89:
                unint64_t v92 = &v84[(*(_DWORD *)(a1 + 488) << 6) - 64];
                int8x16_t v93 = *(char **)(a1 + 496);
                do
                {
                  int8x16_t v82 = v93;
                  int8x16_t v93 = v92;
                  *(void *)unint64_t v92 = v82;
                  v92 -= 64;
                }
                while (v92 >= v84);
                int32x4_t v81 = (char **)(v92 + 64);
                uint64_t v2 = (void *)a2;
              }
              *(void *)(a1 + 496) = v82;
              *((_DWORD *)v81 + 2) = 4;
              v81[2] = (char *)v19;
              v81[3] = (char *)v5;
              v81[4] = 0;
              v81[5] = (char *)a1;
              *((unsigned char *)v81 + 48) = 0;
              *int32x4_t v81 = (char *)&unk_1EF568A80;
              v81[7] = (char *)v53;
              unint64_t v94 = (std::__shared_weak_count *)v303.n128_u64[1];
              if (v303.n128_u64[1]
                && !atomic_fetch_add((atomic_ullong *volatile)(v303.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                std::__shared_weak_count::__release_weak(v94);
              }
              if (!v43) {
                goto LABEL_165;
              }
              goto LABEL_163;
            default:
              goto LABEL_15;
          }
          break;
        }
      }
      if (end)
      {
        if (!atomic_fetch_add((atomic_ullong *volatile)end + 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          (*(void (**)(std::vector<unsigned int>::pointer))(*(void *)end + 16))(end);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)end);
        }
      }
    }
    std::vector<unsigned int>::pointer begin = v296;
    if (v296) {
LABEL_338:
    }
      operator delete(begin);
  }
}

uint64_t altitude::GlobeTileRenderManager::prepareCoarsenOperation(uint64_t a1, void *a2, std::vector<unsigned int> *a3, unsigned char *a4)
{
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 24))(*(void *)(a1 + 72));
  uint64_t v8 = a2[5];
  uint64_t v9 = *(void *)(v8 + 328);
  if (!v9) {
    operator new();
  }
  uint64_t v10 = *(void *)(v8 + 328);
  uint64_t v63 = v10;
  if ((*(uint64_t (**)(void))(*(void *)v9 + 48))()) {
    int v62 = 1;
  }
  else {
    int v62 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 56))(v10);
  }
  uint64_t v11 = a2[2];
  uint64_t v12 = a2[3];
  unint64_t v13 = (v12 - v11) >> 3;
  __x[0] = 0;
  unint64_t v14 = a3->__end_ - a3->__begin_;
  if (v13 <= v14)
  {
    if (v13 < v14) {
      a3->__end_ = &a3->__begin_[v13];
    }
  }
  else
  {
    std::vector<unsigned int>::__append(a3, v13 - v14, __x);
    uint64_t v11 = a2[2];
    uint64_t v12 = a2[3];
  }
  uint64_t v61 = v8;
  if (v12 == v11)
  {
    char v38 = 0;
    char v17 = 0;
    uint64_t v18 = v11;
    goto LABEL_59;
  }
  long long v59 = a4;
  uint64_t v15 = 0;
  unsigned int v16 = 0;
  char v17 = 0;
  char v64 = 0;
  do
  {
    unint64_t v19 = *(unint64_t **)(v11 + 8 * v15);
    unint64_t v20 = v19[20];
    if (!v20) {
      goto LABEL_24;
    }
    if (v20 < 3)
    {
      if (v19[23] == v7)
      {
        unsigned int v28 = 0;
      }
      else
      {
        if (v20 == 1 || v19[29] != v7)
        {
LABEL_24:
          *(void *)float64x2_t __x = &unk_1EF56B5B8;
          *(void *)&__x[2] = v19;
          *(void *)&long long v69 = v7;
          *((void *)&v69 + 1) = 1065353216;
          LOBYTE(v70) = 1;
          DWORD1(v70) = 0;
          BYTE8(v70) = 0;
          HIDWORD(v70) = 0;
          karo::SizedArray<altitude::TileView,2>::push_back((char *)v19 + 160, (uint64_t)__x);
          unint64_t v24 = v19[20];
          unint64_t v25 = v24 - 1;
          if (v24 >= 3)
          {
            uint64_t v26 = v19[33] + 48 * v25;
            goto LABEL_32;
          }
          uint64_t v27 = &v19[6 * v25];
          goto LABEL_31;
        }
        unsigned int v28 = 1;
      }
      uint64_t v27 = &v19[6 * v28];
LABEL_31:
      uint64_t v26 = (uint64_t)(v27 + 21);
      goto LABEL_32;
    }
    uint64_t v21 = 0;
    unint64_t v22 = v19[33];
    long long v23 = (void *)(v22 + 16);
    while (*v23 != v7)
    {
      ++v21;
      v23 += 6;
      if (v20 == v21) {
        goto LABEL_24;
      }
    }
    uint64_t v26 = v22 + 48 * v21;
LABEL_32:
    uint64_t v29 = (void *)v19[41];
    if (!v29) {
      operator new();
    }
    uint64_t v30 = v29[29];
    if (!v30) {
LABEL_41:
    }
      operator new();
    if (v30 == 1)
    {
      uint64_t v31 = v29[30];
      if (*(void *)(v31 + 8) != v7) {
        goto LABEL_41;
      }
    }
    else
    {
      int64x2_t v32 = (uint64_t *)v29[31];
      while (1)
      {
        uint64_t v31 = *v32;
        if (*(void *)(*v32 + 8) == v7) {
          break;
        }
        ++v32;
        if (!--v30) {
          goto LABEL_41;
        }
      }
    }
    if ((*(uint64_t (**)(void *))(*v29 + 48))(v29)) {
      int v33 = 1;
    }
    else {
      int v33 = (*(uint64_t (**)(void *))(*v29 + 56))(v29);
    }
    BOOL v34 = *(unsigned char *)(v26 + 40) != 0;
    uint64_t v35 = *(void *)(v31 + 24);
    if (v35)
    {
      switch(*(_DWORD *)(v35 + 8))
      {
        case 1:
          if (*(float *)(v35 + 56) == 0.0) {
            goto LABEL_13;
          }
          goto LABEL_47;
        case 2:
        case 3:
        case 4:
        case 6:
LABEL_47:
          char v64 = 1;
          break;
        default:
          break;
      }
    }
    else if (v62 & v33)
    {
      if (*(unsigned char *)(v63 + 296) && *(_DWORD *)(v61 + 392) >= 2u && v29[15] && *(void *)(v63 + 120))
      {
        std::vector<unsigned int>::pointer begin = a3->__begin_;
        int v37 = 5;
      }
      else
      {
        std::vector<unsigned int>::pointer begin = a3->__begin_;
        int v37 = 6;
      }
      begin[v15] = v37;
    }
    else
    {
LABEL_13:
      a3->__begin_[v15] = 1;
    }
    v17 |= v34;
    uint64_t v11 = a2[2];
    uint64_t v18 = a2[3];
    uint64_t v15 = ++v16;
  }
  while (v16 < (unint64_t)((v18 - v11) >> 3));
  char v38 = v64;
  a4 = v59;
  if ((v64 & 1) == 0)
  {
LABEL_59:
    if (v17) {
      goto LABEL_61;
    }
    *a4 = 0;
    char v39 = 1;
    return v39 & 1;
  }
LABEL_61:
  char v40 = 1;
  *a4 = 1;
  if (v18 != v11)
  {
    unint64_t v41 = 0;
    uint64_t v42 = v61;
    unsigned int v43 = 1;
    do
    {
      unsigned int v44 = a3->__begin_[v41];
      if (v44 != 5)
      {
        if (!v44) {
          char v40 = 0;
        }
        goto LABEL_64;
      }
      uint64_t v45 = *(void *)(v11 + 8 * v41);
      *(void *)float64x2_t __x = v42;
      *(void *)&__x[2] = v45;
      long long v69 = *(_OWORD *)(v61 + 392);
      long long v70 = *(_OWORD *)(v45 + 392);
      uint64_t v46 = *(std::__shared_weak_count **)(v63 + 128);
      uint64_t v71 = *(void *)(v63 + 120);
      uint64_t v72 = v46;
      if (v46)
      {
        atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v11 = a2[2];
      }
      float64x2_t v47 = (double *)(*(uint64_t (**)(void))(**(void **)(v11 + 8 * v41) + 24))(*(void *)(v11 + 8 * v41));
      altitude::TileLoader::computeBasePriorityFromPosition(v7, v47);
      (*(void (**)(void *__return_ptr))(**(void **)(a1 + 104) + 104))(&v65);
      if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v65) != 4) {
        v40 &= karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v65) == 0;
      }
      unint64_t v65 = off_1EF5677B0;
      if (v66) {
        atomic_fetch_add((atomic_uint *volatile)(v66 + 128), 0xFFFFFFFF);
      }
      float64x2_t v48 = v67;
      if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
        int64x2_t v49 = v72;
        if (v72)
        {
LABEL_77:
          if (!atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
      }
      else
      {
        int64x2_t v49 = v72;
        if (v72) {
          goto LABEL_77;
        }
      }
      uint64_t v11 = a2[2];
      uint64_t v18 = a2[3];
      uint64_t v42 = v61;
LABEL_64:
      unint64_t v41 = v43++;
    }
    while (v41 < (v18 - v11) >> 3);
  }
  uint64_t v50 = *(unsigned int *)(*(void *)(a1 + 32) + 88);
  uint64_t v51 = *(void *)(v63 + 120);
  if (v51 || (uint64_t v51 = *(void *)(v63 + 208)) != 0)
  {
    uint64_t v52 = *(void *)(v51 + 48);
    uint64_t v53 = *(void *)(v51 + 56);
    LOBYTE(v54) = 1;
    while (v52 != v53)
    {
      uint64_t v55 = *(void **)(*(void *)v52 + 256);
      for (int8x16_t i = *(void **)(*(void *)v52 + 264); v55 != i; ++v55)
      {
        while (1)
        {
          BOOL v57 = (void *)*v55;
          if (*v55) {
            break;
          }
LABEL_88:
          if (++v55 == i) {
            goto LABEL_84;
          }
        }
        v57[11] = v50;
        if (v54)
        {
          uint64_t v54 = v57[2];
          if (v54) {
            LOBYTE(v54) = v54 != v57[3];
          }
          goto LABEL_88;
        }
        LOBYTE(v54) = 0;
      }
LABEL_84:
      v52 += 8;
    }
    v40 &= v54;
  }
  char v39 = v40 & (v38 ^ 1);
  return v39 & 1;
}

uint64_t altitude::GlobeTileRenderManager::prepareRefineOperation(uint64_t a1, void *a2, std::vector<unsigned int> *a3, std::vector<unsigned int>::value_type *a4, unsigned char *a5)
{
  uint64_t v9 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 72) + 24))(*(void *)(a1 + 72), a1, 0xFFFFFFFFLL);
  uint64_t v10 = (_DWORD *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 64) + 24))(*(void *)(a1 + 64), a1);
  uint64_t v11 = a2[2];
  uint64_t v12 = *(void *)(v11 + 328);
  if (!v12) {
    operator new();
  }
  uint64_t v13 = *(void *)(v12 + 232);
  if (!v13) {
    goto LABEL_10;
  }
  if (v13 == 1)
  {
    uint64_t v14 = *(void *)(v12 + 240);
    if (*(void *)(v14 + 8) == v9) {
      goto LABEL_11;
    }
LABEL_10:
    operator new();
  }
  uint64_t v15 = *(uint64_t **)(v12 + 248);
  while (1)
  {
    uint64_t v14 = *v15;
    if (*(void *)(*v15 + 8) == v9) {
      break;
    }
    ++v15;
    if (!--v13) {
      goto LABEL_10;
    }
  }
LABEL_11:
  if ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 48))(v12))
  {
    *a4 = 0;
    uint64_t v16 = *(void *)(v14 + 24);
    if (!v16) {
      goto LABEL_18;
    }
  }
  else
  {
    char v17 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 56))(v12);
    *a4 = 0;
    uint64_t v16 = *(void *)(v14 + 24);
    if (!v16)
    {
      if ((v17 & 1) == 0)
      {
        int v18 = 0;
        int v19 = 1;
LABEL_27:
        *a4 = v19;
        goto LABEL_28;
      }
LABEL_18:
      if (*(unsigned char *)(v12 + 296) && *(_DWORD *)(v11 + 392) >= 2u)
      {
        int v18 = 0;
        int v19 = 5;
      }
      else
      {
        int v18 = 0;
        int v19 = 6;
      }
      goto LABEL_27;
    }
  }
  int v18 = 0;
  switch(*(_DWORD *)(v16 + 8))
  {
    case 1:
      int v18 = 1;
      if (*(float *)(v16 + 56) == 0.0)
      {
        *a4 = 1;
        int v18 = 0;
      }
      break;
    case 2:
      if (*(float *)(v16 + 56) != 1.0) {
        goto LABEL_16;
      }
      int v18 = 0;
      int v19 = 2;
      goto LABEL_27;
    case 3:
    case 4:
    case 6:
LABEL_16:
      int v18 = 1;
      break;
    default:
      break;
  }
LABEL_28:
  uint64_t v20 = a2[3];
  uint64_t v21 = a2[4];
  unint64_t v22 = (v21 - v20) >> 3;
  unint64_t v23 = a3->__end_ - a3->__begin_;
  if (v22 <= v23)
  {
    if (v22 < v23) {
      a3->__end_ = &a3->__begin_[v22];
    }
  }
  else
  {
    std::vector<unsigned int>::__append(a3, v22 - v23, a4);
    uint64_t v20 = a2[3];
    uint64_t v21 = a2[4];
  }
  int v53 = v18;
  if (v21 != v20)
  {
    uint64_t v54 = v11;
    uint64_t v24 = v9;
    unint64_t v25 = 0;
    int v26 = 0;
    unsigned int v27 = 1;
    do
    {
      uint64_t v30 = *(void *)(*(void *)(v20 + 8 * v25) + 328);
      if ((*(uint64_t (**)(uint64_t))(*(void *)v30 + 48))(v30)) {
        char v31 = 1;
      }
      else {
        char v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 56))(v30);
      }
      LODWORD(v60[0]) = 1065353216;
      LOBYTE(v57) = 0;
      altitude::Tile::computeTileViewRelation(*(void *)(a1 + 80), v10, *(void *)(a2[3] + 8 * v25), *(_DWORD *)(*(void *)(a1 + 112) + 208), &v57, (float *)v60, *(_DWORD *)(*(void *)(a1 + 32) + 88), 0, *(float *)(*(void *)(a1 + 112) + 200));
      if ((_BYTE)v57 || (v31 & 1) == 0)
      {
        BOOL v28 = v57 == 0;
        v26 |= v28;
        a3->__begin_[v25] = v28;
      }
      else
      {
        int v26 = 1;
      }
      unint64_t v25 = v27;
      uint64_t v20 = a2[3];
      uint64_t v29 = a2[4];
      ++v27;
    }
    while (v25 < (v29 - v20) >> 3);
    uint64_t v9 = v24;
    uint64_t v11 = v54;
    if ((v18 | v26)) {
      goto LABEL_43;
    }
LABEL_78:
    *a5 = 0;
    return 1;
  }
  uint64_t v29 = v20;
  if ((v18 & 1) == 0) {
    goto LABEL_78;
  }
LABEL_43:
  int v32 = 1;
  *a5 = 1;
  if (v29 != v20)
  {
    uint64_t v56 = v9;
    uint64_t v33 = 0;
    unsigned int v34 = 0;
    uint64_t v35 = (long long *)(v11 + 392);
    while (1)
    {
      uint64_t v37 = *(void *)(v20 + 8 * v33);
      char v38 = *(void **)(v37 + 328);
      if (a3->__begin_[v33] == 5) {
        break;
      }
LABEL_61:
      uint64_t v44 = *(unsigned int *)(*(void *)(a1 + 32) + 88);
      uint64_t v45 = v38[15];
      if (v45 || (uint64_t v45 = v38[26]) != 0)
      {
        uint64_t v46 = *(void *)(v45 + 48);
        uint64_t v47 = *(void *)(v45 + 56);
        LOBYTE(v48) = 1;
        while (v46 != v47)
        {
          int64x2_t v49 = *(void **)(*(void *)v46 + 256);
          for (int8x16_t i = *(void **)(*(void *)v46 + 264); v49 != i; ++v49)
          {
            while (1)
            {
              uint64_t v51 = (void *)*v49;
              if (*v49) {
                break;
              }
LABEL_68:
              if (++v49 == i) {
                goto LABEL_64;
              }
            }
            v51[11] = v44;
            if (v48)
            {
              uint64_t v48 = v51[2];
              if (v48) {
                LOBYTE(v48) = v48 != v51[3];
              }
              goto LABEL_68;
            }
            LOBYTE(v48) = 0;
          }
LABEL_64:
          v46 += 8;
        }
        int v36 = v48 & 1;
      }
      else
      {
        int v36 = 1;
      }
      v32 &= v36;
      uint64_t v20 = a2[3];
      uint64_t v33 = ++v34;
      if (v34 >= (unint64_t)((a2[4] - v20) >> 3)) {
        return v32 & (v53 ^ 1u);
      }
    }
    v60[0] = *(void *)(v20 + 8 * v33);
    v60[1] = v11;
    long long v61 = *(_OWORD *)(v37 + 392);
    long long v62 = *v35;
    char v39 = (std::__shared_weak_count *)v38[16];
    uint64_t v63 = v38[15];
    char v64 = v39;
    if (v39)
    {
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v20 = a2[3];
    }
    char v40 = (double *)(*(uint64_t (**)(void))(**(void **)(v20 + 8 * v33) + 24))(*(void *)(v20 + 8 * v33));
    altitude::TileLoader::computeBasePriorityFromPosition(v56, v40);
    (*(void (**)(void *__return_ptr))(**(void **)(a1 + 104) + 104))(&v57);
    if (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v57) != 4) {
      int v32 = (karo::AsyncRequestManager::RequestHandle::getStatus((karo::AsyncRequestManager::RequestHandle *)&v57) == 0) & v32;
    }
    uint64_t v41 = v11;
    BOOL v57 = off_1EF5677B0;
    if (v58) {
      atomic_fetch_add((atomic_uint *volatile)(v58 + 128), 0xFFFFFFFF);
    }
    uint64_t v42 = v59;
    if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
      unsigned int v43 = v64;
      if (v64)
      {
LABEL_57:
        if (!atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
    }
    else
    {
      unsigned int v43 = v64;
      if (v64) {
        goto LABEL_57;
      }
    }
    uint64_t v11 = v41;
    goto LABEL_61;
  }
  return v32 & (v53 ^ 1u);
}

uint64_t altitude::GlobeTileRenderManager::prepareTileSetOperation(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 8);
  if (v3 != 1)
  {
    if (v3) {
      return v2 & 1;
    }
    if (*(unsigned char *)(a1 + 520))
    {
      std::vector<unsigned int>::value_type v6 = 0;
      memset(&__p, 0, sizeof(__p));
      char v4 = altitude::GlobeTileRenderManager::prepareRefineOperation(a1, (void *)a2, &__p, &v6, &v7);
      goto LABEL_7;
    }
LABEL_9:
    char v2 = 1;
    return v2 & 1;
  }
  if (!*(unsigned char *)(a1 + 520)) {
    goto LABEL_9;
  }
  memset(&__p, 0, sizeof(__p));
  char v4 = altitude::GlobeTileRenderManager::prepareCoarsenOperation(a1, (void *)a2, &__p, &v6);
LABEL_7:
  char v2 = v4;
  if (__p.__begin_) {
    operator delete(__p.__begin_);
  }
  return v2 & 1;
}

void altitude::GlobeTileRenderManager::onChildTileRemoved(altitude::GlobeTileRenderManager *this, altitude::Tile *a2, altitude::Tile *a3)
{
  int v3 = (altitude::GlobeTileComponent *)*((void *)a3 + 41);
  if (v3) {
    altitude::GlobeTileRenderManager::clearEffects(this, v3);
  }
}

void altitude::GlobeTileRenderManager::onTileComponentDataRelease(altitude::GlobeTileRenderManager *this, altitude::Tile *a2, altitude::TileComponent *a3, void *a4)
{
  if (!*((_DWORD *)a3 + 2)) {
    altitude::GlobeTileRenderManager::clearEffects(this, a3);
  }
}

uint64_t altitude::GlobeTileRenderManager::destroyEffect(uint64_t this, altitude::GlobeTileRenderEffect *a2)
{
  uint64_t v3 = this;
  switch(*((_DWORD *)a2 + 2))
  {
    case 1:
      this = (**(uint64_t (***)(altitude::GlobeTileRenderEffect *))a2)(a2);
      char v4 = (void *)(v3 + 296);
      goto LABEL_8;
    case 2:
      this = (**(uint64_t (***)(altitude::GlobeTileRenderEffect *))a2)(a2);
      char v4 = (void *)(v3 + 336);
      goto LABEL_8;
    case 3:
      this = (**(uint64_t (***)(altitude::GlobeTileRenderEffect *))a2)(a2);
      char v4 = (void *)(v3 + 456);
      goto LABEL_8;
    case 4:
      this = (**(uint64_t (***)(altitude::GlobeTileRenderEffect *))a2)(a2);
      char v4 = (void *)(v3 + 496);
      goto LABEL_8;
    case 5:
      this = (**(uint64_t (***)(altitude::GlobeTileRenderEffect *))a2)(a2);
      char v4 = (void *)(v3 + 416);
      goto LABEL_8;
    case 6:
      this = (**(uint64_t (***)(altitude::GlobeTileRenderEffect *))a2)(a2);
      char v4 = (void *)(v3 + 376);
LABEL_8:
      *(void *)a2 = *v4;
      *char v4 = a2;
      break;
    default:
      return this;
  }
  return this;
}

void altitude::GlobeTileRenderManager::update(altitude::GlobeTileRenderManager *this)
{
  if (!*((unsigned char *)this + 520)) {
    return;
  }
  uint64_t v2 = *((void *)this + 24);
  if (*((void *)this + 25) != v2) {
    *((void *)this + 25) = v2;
  }
  *(_WORD *)((char *)this + 521) = 0;
  uint64_t v3 = (uint64_t *)*((void *)this + 4);
  uint64_t v4 = *v3;
  unsigned int v497 = *((_DWORD *)v3 + 22);
  float v5 = *((float *)v3 + 13);
  int v6 = *((_DWORD *)v3 + 14);
  int v7 = *((_DWORD *)v3 + 15);
  v505 = (void *)(*(uint64_t (**)(void, altitude::GlobeTileRenderManager *, uint64_t))(**((void **)this + 9)
                                                                                                  + 24))(*((void *)this + 9), this, 0xFFFFFFFFLL);
  v499 = (_DWORD *)(*(uint64_t (**)(void, altitude::GlobeTileRenderManager *))(**((void **)this + 8) + 24))(*((void *)this + 8), this);
  float v8 = *(double *)(*(void *)(v4 + 72) + 32);
  float v9 = 8.0;
  if (v8 <= 8.0)
  {
    int v12 = 1;
  }
  else
  {
    unsigned int v10 = 0;
    int v11 = 8;
    do
    {
      int v12 = v11;
      v11 *= 8;
      float v9 = (float)v11;
      BOOL v13 = (float)v11 >= v8 || v10++ >= 0xE;
    }
    while (!v13);
  }
  float v14 = (float)v12;
  float v15 = (float)(fminf(fmaxf((float)v12, v8), v9) - (float)v12) / (float)(v9 - (float)v12);
  BOOL v16 = (float)v12 <= v8;
  float v17 = 0.0;
  if (v16) {
    float v17 = 1.0;
  }
  if (v9 != v14) {
    float v17 = v15;
  }
  float v18 = (float)(v17 * v17) * (float)((float)(v17 * -2.0) + 3.0);
  uint64_t v19 = *(void *)(*(void *)(v3[1] + 40) + 8);
  uint64_t v20 = *(void **)(v19 + 168);
  uint64_t v21 = *(std::__shared_weak_count **)(v19 + 176);
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v22 = v20[1];
  *(float *)(v20[9] + 64) = v18;
  if (v20[8] > v22) {
    unint64_t v22 = v20[8];
  }
  v20[7] = 0;
  v20[8] = v22;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  unint64_t v23 = *(uint64_t **)(*(uint64_t (**)(void))(**((void **)this + 7) + 56))(*((void *)this + 7));
  if (v23 != *(uint64_t **)((*(uint64_t (**)(void))(**((void **)this + 7) + 56))(*((void *)this + 7))
                          + 8))
  {
    float v24 = 1.0 / v14;
    while (1)
    {
      uint64_t v25 = *v23;
      int v26 = (char *)(*v23 + 160);
      unint64_t v27 = *(void *)v26;
      BOOL v28 = v505;
      if (!*(void *)v26) {
        break;
      }
      if (v27 >= 3)
      {
        uint64_t v29 = 0;
        uint64_t v30 = *(void *)(v25 + 264);
        char v31 = (void *)(v30 + 16);
        while ((void *)*v31 != v505)
        {
          ++v29;
          v31 += 6;
          if (v27 == v29) {
            goto LABEL_36;
          }
        }
        uint64_t v501 = v30 + 48 * v29;
        goto LABEL_40;
      }
      if (*(void **)(v25 + 184) == v505)
      {
        unsigned int v63 = 0;
      }
      else
      {
        if (v27 == 1 || *(void **)(v25 + 232) != v505) {
          break;
        }
        unsigned int v63 = 1;
      }
      uint64_t v501 = v25 + 48 * v63 + 168;
LABEL_40:
      uint64_t v35 = *(uint64_t **)(v25 + 328);
      uint64_t v37 = v35 + 29;
      uint64_t v36 = v35[29];
      if (!v36) {
        goto LABEL_47;
      }
      if (v36 == 1)
      {
        uint64_t v38 = v35[30];
        if (*(void **)(v38 + 8) != v28) {
LABEL_47:
        }
          operator new();
      }
      else
      {
        char v39 = (uint64_t *)v35[31];
        while (1)
        {
          uint64_t v38 = *v39;
          if (*(void **)(*v39 + 8) == v28) {
            break;
          }
          ++v39;
          if (!--v36) {
            goto LABEL_47;
          }
        }
      }
      if ((*(uint64_t (**)(uint64_t *))(*v35 + 48))(v35)) {
        int v503 = 1;
      }
      else {
        int v503 = (*(uint64_t (**)(uint64_t *))(*v35 + 56))(v35);
      }
      uint64_t v41 = *((void *)this + 14);
      uint64_t v42 = *(uint64_t **)(v25 + 328);
      uint64_t v44 = v42 + 29;
      uint64_t v43 = v42[29];
      if (!v43) {
LABEL_58:
      }
        operator new();
      if (v43 == 1)
      {
        uint64_t v45 = v42[30];
        if (*(void **)(v45 + 8) != v505) {
          goto LABEL_58;
        }
      }
      else
      {
        uint64_t v46 = (uint64_t *)v42[31];
        while (1)
        {
          uint64_t v45 = *v46;
          if (*(void **)(*v46 + 8) == v505) {
            break;
          }
          ++v46;
          if (!--v43) {
            goto LABEL_58;
          }
        }
      }
      for (uint64_t i = *(void *)(v45 + 24); i; uint64_t i = *(void *)(i + 32))
      {
        unsigned int v53 = *(_DWORD *)(i + 8) - 2;
        if (v53 < 5 && ((0x17u >> v53) & 1) != 0) {
          goto LABEL_152;
        }
      }
      char v48 = (*(uint64_t (**)(uint64_t *))(*v42 + 48))(v42);
      uint64_t v49 = (uint64_t)v505;
      if ((v48 & 1) != 0 || (v50 = (*(uint64_t (**)(uint64_t *))(*v42 + 56))(v42), uint64_t v49 = (uint64_t)v505, v50))
      {
        uint64_t v51 = *v44;
        if (!*v44) {
          goto LABEL_73;
        }
        if (v51 == 1)
        {
          uint64_t v52 = v42[30];
          if (*(void *)(v52 + 8) != v49) {
LABEL_73:
          }
            operator new();
        }
        else
        {
          uint64_t v54 = (uint64_t *)v42[31];
          while (1)
          {
            uint64_t v52 = *v54;
            if (*(void *)(*v54 + 8) == v49) {
              break;
            }
            ++v54;
            if (!--v51) {
              goto LABEL_73;
            }
          }
        }
        for (uint64_t j = *(void *)(v52 + 24); j; uint64_t j = *(void *)(j + 32))
        {
          unsigned int v62 = *(_DWORD *)(j + 8) - 2;
          if (v62 < 5 && ((0x17u >> v62) & 1) != 0) {
            goto LABEL_152;
          }
        }
        LODWORD(v507[0]) = 1065353216;
        char v506 = 0;
        int v56 = *(_DWORD *)(v41 + 208);
        float v57 = *(float *)(v41 + 200);
        uint64_t v58 = *(void *)(v25 + 328);
        altitude::Tile::computeTileViewRelation(v49, v499, v25, v56, &v506, (float *)v507, v497, 0, v57);
        if (!v506 && !*(void *)(v58 + 120) && *(void *)(v58 + 208))
        {
          uint64_t v59 = *(unsigned int *)(v58 + 224);
          uint64_t v60 = v59;
          uint64_t v61 = v25;
          if (v59)
          {
            while (1)
            {
              uint64_t v61 = *(void *)(v61 + 296);
              if (!v61) {
                break;
              }
              if (!--v60) {
                goto LABEL_81;
              }
            }
            double v64 = *(float *)v507;
            *(float *)v40.i32 = exp2(-(double)v59) * v64;
            LODWORD(v507[0]) = v40.i32[0];
          }
          else
          {
LABEL_81:
            LOBYTE(v512[0]) = 0;
            altitude::Tile::computeTileViewRelation((uint64_t)v505, v499, v61, v56, v512, (float *)v507, v497, 0, v57);
          }
        }
        if (*(float *)v507 < v5
          && *(void *)(v25 + 304) != *(void *)(v25 + 312)
          && *(_DWORD *)(v25 + 392) < 0x7FFFFFFFu)
        {
          uint64_t v65 = *v37;
          uint64_t v66 = v505;
          if (!*v37) {
            goto LABEL_101;
          }
          if (v65 == 1)
          {
            uint64_t v67 = v35[30];
            if (*(void **)(v67 + 8) != v505) {
LABEL_101:
            }
              operator new();
          }
          else
          {
            unsigned __int8 v68 = (uint64_t *)v35[31];
            while (1)
            {
              uint64_t v67 = *v68;
              if (*(void **)(*v68 + 8) == v505) {
                break;
              }
              ++v68;
              if (!--v65) {
                goto LABEL_101;
              }
            }
          }
          long long v69 = *(void **)(v67 + 24);
          if (v69)
          {
            while (*((_DWORD *)v69 + 2) != 1)
            {
              long long v69 = (void *)v69[4];
              if (!v69) {
                goto LABEL_105;
              }
            }
            goto LABEL_151;
          }
LABEL_105:
          if (v503)
          {
            if (*(unsigned char *)(v501 + 40))
            {
              BOOL v70 = *(_DWORD *)(v501 + 44) == v497;
              long long v69 = (void *)*((void *)this + 37);
              if (!v69)
              {
LABEL_108:
                uint64_t v71 = (char *)malloc_type_malloc(*((unsigned int *)this + 73), 0xF0B72BE0uLL);
                uint64_t v66 = v505;
                uint64_t v72 = v71;
                unint64_t v73 = (uint64_t *)*((void *)this + 34);
                unint64_t v74 = (uint64_t **)((char *)this + 272);
LABEL_110:
                int8x16_t v75 = v74;
                if (v73)
                {
                  do
                  {
                    unint64_t v74 = (uint64_t **)v73;
                    unint64_t v76 = v73[4];
                    if ((unint64_t)v71 < v76)
                    {
                      unint64_t v73 = *v74;
                      goto LABEL_110;
                    }
                    if (v76 >= (unint64_t)v71) {
                      goto LABEL_123;
                    }
                    unint64_t v73 = v74[1];
                  }
                  while (v73);
                  int8x16_t v75 = v74 + 1;
                }
                int32x4_t v77 = (uint64_t *)operator new(0x28uLL);
                v77[4] = (uint64_t)v72;
                *int32x4_t v77 = 0;
                v77[1] = 0;
                v77[2] = (uint64_t)v74;
                *int8x16_t v75 = v77;
                uint64_t v78 = **((void **)this + 33);
                if (v78)
                {
                  *((void *)this + 33) = v78;
                  int32x4_t v79 = *v75;
                }
                else
                {
                  int32x4_t v79 = v77;
                }
                std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 34), v79);
                ++*((void *)this + 35);
                uint64_t v66 = v505;
LABEL_123:
                int32x4_t v81 = &v72[280 * *((_DWORD *)this + 72) - 280];
                int8x16_t v82 = (char *)*((void *)this + 37);
                do
                {
                  unint64_t v80 = v82;
                  int8x16_t v82 = v81;
                  *(void *)int32x4_t v81 = v80;
                  v81 -= 280;
                }
                while (v81 >= v72);
                long long v69 = v81 + 280;
                goto LABEL_126;
              }
            }
            else
            {
              BOOL v70 = 0;
              long long v69 = (void *)*((void *)this + 37);
              if (!v69) {
                goto LABEL_108;
              }
            }
          }
          else
          {
            BOOL v70 = 1;
            long long v69 = (void *)*((void *)this + 37);
            if (!v69) {
              goto LABEL_108;
            }
          }
          unint64_t v80 = (char *)*v69;
LABEL_126:
          *((void *)this + 37) = v80;
          *((_DWORD *)v69 + 2) = 1;
          v69[2] = v35;
          v69[3] = v66;
          v69[4] = 0;
          v69[5] = this;
          *((unsigned char *)v69 + 48) = 0;
          *long long v69 = &unk_1EF568E38;
          *((_DWORD *)v69 + 13) = 0;
          float v83 = 0.0;
          if (!v70) {
            float v83 = 1.0;
          }
          *((float *)v69 + 14) = v83;
          *((_DWORD *)v69 + 15) = v7;
          v69[8] = 0;
          v69[9] = 0;
          *((_WORD *)v69 + 136) = 0;
          *((unsigned char *)v69 + 274) = 1;
          int8x16_t v84 = (char *)*((void *)this + 28);
          *(void *)(v38 + 24) = v69;
          unint64_t v85 = *((void *)this + 29);
          if ((unint64_t)v84 >= v85)
          {
            int8x16_t v87 = (char *)*((void *)this + 27);
            uint64_t v88 = (v84 - v87) >> 3;
            unint64_t v89 = v88 + 1;
            if ((unint64_t)(v88 + 1) >> 61) {
              goto LABEL_693;
            }
            uint64_t v90 = v85 - (void)v87;
            if (v90 >> 2 > v89) {
              unint64_t v89 = v90 >> 2;
            }
            if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
            }
            unint64_t v502 = v89;
            if (v89)
            {
              if (v89 >> 61) {
                goto LABEL_694;
              }
              int16x8_t v91 = operator new(8 * v89);
            }
            else
            {
              int16x8_t v91 = 0;
            }
            unint64_t v92 = &v91[8 * v88];
            *unint64_t v92 = v69;
            int8x16_t v86 = v92 + 1;
            if (v84 == v87)
            {
              int8x16_t v87 = v84;
              unint64_t v94 = v502;
            }
            else
            {
              unint64_t v93 = v84 - 8 - v87;
              unint64_t v94 = v502;
              if (v93 < 0x58) {
                goto LABEL_697;
              }
              if ((unint64_t)(v87 - v91) < 0x20) {
                goto LABEL_697;
              }
              uint64_t v95 = (v93 >> 3) + 1;
              int8x16_t v96 = (int32x4_t *)&v91[8 * v88 - 16];
              int32x4_t v97 = (int32x4_t *)(v84 - 16);
              uint64_t v98 = v95 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                int32x4_t v40 = *v97;
                v96[-1] = v97[-1];
                *int8x16_t v96 = v40;
                v96 -= 2;
                v97 -= 2;
                v98 -= 4;
              }
              while (v98);
              v92 -= v95 & 0x3FFFFFFFFFFFFFFCLL;
              v84 -= 8 * (v95 & 0x3FFFFFFFFFFFFFFCLL);
              if (v95 != (v95 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_697:
                do
                {
                  uint64_t v99 = *((void *)v84 - 1);
                  v84 -= 8;
                  *--unint64_t v92 = v99;
                }
                while (v84 != v87);
                int8x16_t v87 = (char *)*((void *)this + 27);
              }
            }
            *((void *)this + 27) = v92;
            *((void *)this + 28) = v86;
            *((void *)this + 29) = &v91[8 * v94];
            if (v87) {
              operator delete(v87);
            }
          }
          else
          {
            *(void *)int8x16_t v84 = v69;
            int8x16_t v86 = v84 + 8;
          }
          *((void *)this + 28) = v86;
LABEL_151:
          *((_DWORD *)v69 + 13) = v6;
        }
      }
LABEL_152:
      if ((v503 & 1) == 0 && !*(_DWORD *)(v25 + 404))
      {
        uint64_t v101 = (uint64_t *)*((void *)this + 25);
        unint64_t v100 = *((void *)this + 26);
        if ((unint64_t)v101 >= v100)
        {
          int8x16_t v103 = (uint64_t *)*((void *)this + 24);
          uint64_t v104 = v101 - v103;
          unint64_t v105 = v104 + 1;
          if ((unint64_t)(v104 + 1) >> 61) {
            goto LABEL_693;
          }
          uint64_t v106 = v100 - (void)v103;
          if (v106 >> 2 > v105) {
            unint64_t v105 = v106 >> 2;
          }
          if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v107 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v107 = v105;
          }
          if (v107)
          {
            if (v107 >> 61) {
              goto LABEL_694;
            }
            int8x16_t v108 = operator new(8 * v107);
          }
          else
          {
            int8x16_t v108 = 0;
          }
          int8x16_t v109 = (uint64_t *)&v108[8 * v104];
          *int8x16_t v109 = v25;
          uint64_t v102 = v109 + 1;
          if (v101 == v103)
          {
            int8x16_t v103 = v101;
          }
          else
          {
            unint64_t v110 = (char *)(v101 - 1) - (char *)v103;
            if (v110 < 0x58) {
              goto LABEL_698;
            }
            if ((unint64_t)((char *)v103 - v108) < 0x20) {
              goto LABEL_698;
            }
            uint64_t v111 = (v110 >> 3) + 1;
            uint64_t v112 = (int32x4_t *)&v108[8 * v104 - 16];
            unint64_t v113 = (int32x4_t *)(v101 - 2);
            uint64_t v114 = v111 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              int32x4_t v40 = *v113;
              v112[-1] = v113[-1];
              *uint64_t v112 = v40;
              v112 -= 2;
              v113 -= 2;
              v114 -= 4;
            }
            while (v114);
            v109 -= v111 & 0x3FFFFFFFFFFFFFFCLL;
            v101 -= v111 & 0x3FFFFFFFFFFFFFFCLL;
            if (v111 != (v111 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_698:
              do
              {
                uint64_t v115 = *--v101;
                *--int8x16_t v109 = v115;
              }
              while (v101 != v103);
              int8x16_t v103 = (uint64_t *)*((void *)this + 24);
            }
          }
          *((void *)this + 24) = v109;
          *((void *)this + 25) = v102;
          *((void *)this + 26) = &v108[8 * v107];
          if (v103) {
            operator delete(v103);
          }
        }
        else
        {
          *uint64_t v101 = v25;
          uint64_t v102 = v101 + 1;
        }
        *((void *)this + 25) = v102;
      }
      if (v35[17])
      {
        if (25 - *(_DWORD *)(v25 + 392) < 1) {
          unsigned int v116 = 1;
        }
        else {
          unsigned int v116 = 1 << (25 - *(unsigned char *)(v25 + 392));
        }
        float v117 = (float)((float)v116 * 4.0) * v24;
        uint64_t v118 = *(void *)(v25 + 328);
        if (!v118) {
          operator new();
        }
        uint64_t v119 = *(void *)(v118 + 136);
        uint64_t v120 = *(void *)(v119 + 48);
        uint64_t v121 = *(void *)(v119 + 56);
        if (v120 != v121)
        {
          *(int8x8_t *)v40.i8 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v117 > 16384.0), 0x1FuLL)), (int8x8_t)0x3D00000000000000, (int8x8_t)LODWORD(v117));
          int32x4_t v122 = vzip1q_s32(v40, v40);
          do
          {
            int8x16_t v123 = **(void ***)(*(void *)(*(void *)(*(void *)v120 + 184) + 32) + 64);
            unint64_t v124 = v123[1];
            if (v124)
            {
              int8x16_t v125 = (int32x4_t *)v123[9];
              v125[4] = v122;
              if (v125) {
                BOOL v126 = v124 == 0;
              }
              else {
                BOOL v126 = 1;
              }
              if (!v126)
              {
                if (v123[8] > v124) {
                  unint64_t v124 = v123[8];
                }
                v123[7] = 0;
                v123[8] = v124;
              }
            }
            else
            {
              MEMORY[0x40] = v122;
            }
            v120 += 8;
          }
          while (v120 != v121);
        }
      }
      if (++v23 == *(uint64_t **)((*(uint64_t (**)(void))(**((void **)this + 7) + 56))(*((void *)this + 7))
                                + 8))
        goto LABEL_196;
    }
LABEL_36:
    v507[0] = &unk_1EF56B5B8;
    v507[1] = (void *)v25;
    v508[0] = v505;
    v508[1] = (void *)1065353216;
    LOBYTE(v509) = 1;
    DWORD1(v509) = 0;
    BYTE8(v509) = 0;
    HIDWORD(v509) = 0;
    karo::SizedArray<altitude::TileView,2>::push_back(v26, (uint64_t)v507);
    unint64_t v32 = *(void *)(v25 + 160);
    unint64_t v33 = v32 - 1;
    if (v32 < 3) {
      uint64_t v34 = v25 + 48 * v33 + 168;
    }
    else {
      uint64_t v34 = *(void *)(v25 + 264) + 48 * v33;
    }
    uint64_t v501 = v34;
    BOOL v28 = v505;
    goto LABEL_40;
  }
LABEL_196:
  double v127 = *(double *)(*((void *)this + 4) + 96);
  uint64_t v128 = (uint64_t)v505;
  if (*((unsigned char *)this + 522)) {
    BOOL v129 = 1;
  }
  else {
    BOOL v129 = *((void *)this + 27) != *((void *)this + 28);
  }
  *((unsigned char *)this + 522) = v129;
  uint64_t v130 = *((void *)this + 27);
  uint64_t v131 = *((void *)this + 28);
  if (*((unsigned char *)this + 521)) {
    BOOL v132 = 1;
  }
  else {
    BOOL v132 = v130 != v131;
  }
  *((unsigned char *)this + 521) = v132;
  unint64_t v133 = (v131 - v130) >> 3;
  if (ggl::Performance::Counters::instance(void)::onceToken[0] != -1)
  {
    dispatch_once(ggl::Performance::Counters::instance(void)::onceToken, &__block_literal_global_53878);
    uint64_t v128 = (uint64_t)v505;
  }
  atomic_store(v133, (unint64_t *)(*(void *)(ggl::Performance::Counters::instance(void)::counters + 32) + 192));
  uint64_t v134 = *((void *)this + 27);
  if (*((void *)this + 28) != v134)
  {
    unint64_t v135 = 0;
    float v136 = v127;
    float v137 = fminf(v136, 0.066667);
    v504 = (void *)((char *)this + 216);
    do
    {
      uint64_t v138 = *(void *)(v134 + 8 * v135);
      (*(void (**)(uint64_t, float))(*(void *)v138 + 16))(v138, v137);
      if (((*(uint64_t (**)(uint64_t))(*(void *)v138 + 40))(v138) & 1) != 0
        || (uint64_t v139 = *(void *)(*(void *)(v138 + 16) + 16), *(_DWORD *)(v139 + 404)))
      {
        if (*(unsigned char *)(v138 + 48)) {
          goto LABEL_209;
        }
      }
      else
      {
        uint64_t v153 = (char *)*((void *)this + 25);
        unint64_t v152 = *((void *)this + 26);
        if ((unint64_t)v153 >= v152)
        {
          uint64_t v155 = (char *)*((void *)this + 24);
          uint64_t v156 = (v153 - v155) >> 3;
          unint64_t v157 = v156 + 1;
          if ((unint64_t)(v156 + 1) >> 61) {
            goto LABEL_693;
          }
          uint64_t v158 = v152 - (void)v155;
          if (v158 >> 2 > v157) {
            unint64_t v157 = v158 >> 2;
          }
          if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v159 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v159 = v157;
          }
          if (v159)
          {
            if (v159 >> 61) {
              goto LABEL_694;
            }
            uint64_t v160 = operator new(8 * v159);
          }
          else
          {
            uint64_t v160 = 0;
          }
          uint64_t v175 = &v160[8 * v156];
          *uint64_t v175 = v139;
          uint64_t v154 = v175 + 1;
          if (v153 == v155)
          {
            uint64_t v155 = v153;
          }
          else
          {
            unint64_t v176 = v153 - 8 - v155;
            if (v176 < 0x58) {
              goto LABEL_699;
            }
            if ((unint64_t)(v155 - v160) < 0x20) {
              goto LABEL_699;
            }
            uint64_t v177 = (v176 >> 3) + 1;
            unint64_t v178 = &v160[8 * v156 - 16];
            long long v179 = v153 - 16;
            uint64_t v180 = v177 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v181 = *(_OWORD *)v179;
              *(v178 - 1) = *((_OWORD *)v179 - 1);
              *unint64_t v178 = v181;
              v178 -= 2;
              v179 -= 32;
              v180 -= 4;
            }
            while (v180);
            v175 -= v177 & 0x3FFFFFFFFFFFFFFCLL;
            v153 -= 8 * (v177 & 0x3FFFFFFFFFFFFFFCLL);
            if (v177 != (v177 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_699:
              do
              {
                uint64_t v182 = *((void *)v153 - 1);
                v153 -= 8;
                *--uint64_t v175 = v182;
              }
              while (v153 != v155);
              uint64_t v155 = (char *)*((void *)this + 24);
            }
          }
          *((void *)this + 24) = v175;
          *((void *)this + 25) = v154;
          *((void *)this + 26) = &v160[8 * v159];
          if (v155) {
            operator delete(v155);
          }
        }
        else
        {
          *(void *)uint64_t v153 = v139;
          uint64_t v154 = v153 + 8;
        }
        *((void *)this + 25) = v154;
        if (*(unsigned char *)(v138 + 48))
        {
LABEL_209:
          *(void *)(*((void *)this + 27) + 8 * v135) = *(void *)(*((void *)this + 28) - 8);
          uint64_t v140 = *((void *)this + 28);
          if (v140 == *((void *)this + 27)) {
            std::vector<altitude::TextureMap *>::__append((uint64_t)v504, 0xFFFFFFFFFFFFFFFFLL);
          }
          else {
            *((void *)this + 28) = v140 - 8;
          }
          uint64_t v141 = *(void *)(v138 + 32);
          uint64_t v128 = (uint64_t)v505;
          if (!v141) {
            goto LABEL_248;
          }
          float v143 = (void *)*((void *)this + 28);
          unint64_t v142 = *((void *)this + 29);
          if ((unint64_t)v143 < v142)
          {
            *float v143 = v141;
            unint64_t v144 = v143 + 1;
            goto LABEL_247;
          }
          uint64_t v145 = (unsigned char *)*v504;
          uint64_t v146 = (uint64_t)v143 - *v504;
          uint64_t v147 = v146 >> 3;
          unint64_t v148 = (v146 >> 3) + 1;
          if (!(v148 >> 61))
          {
            uint64_t v149 = v142 - (void)v145;
            if (v149 >> 2 > v148) {
              unint64_t v148 = v149 >> 2;
            }
            if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v150 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v150 = v148;
            }
            if (!v150)
            {
              int v151 = 0;
              goto LABEL_236;
            }
            if (!(v150 >> 61))
            {
              int v151 = operator new(8 * v150);
              uint64_t v128 = (uint64_t)v505;
LABEL_236:
              unint64_t v161 = &v151[8 * v147];
              *unint64_t v161 = v141;
              unint64_t v144 = v161 + 1;
              if (v143 == (void *)v145)
              {
                uint64_t v145 = v143;
              }
              else
              {
                unint64_t v162 = (char *)(v143 - 1) - v145;
                if (v162 < 0x58) {
                  goto LABEL_700;
                }
                if ((unint64_t)((char *)v143 - &v151[v146]) < 0x20) {
                  goto LABEL_700;
                }
                uint64_t v163 = (v162 >> 3) + 1;
                long long v164 = &v151[8 * v147 - 16];
                uint64_t v165 = (long long *)(v143 - 2);
                uint64_t v166 = v163 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v167 = *v165;
                  *(v164 - 1) = *(v165 - 1);
                  *long long v164 = v167;
                  v164 -= 2;
                  v165 -= 2;
                  v166 -= 4;
                }
                while (v166);
                v161 -= v163 & 0x3FFFFFFFFFFFFFFCLL;
                v143 -= v163 & 0x3FFFFFFFFFFFFFFCLL;
                if (v163 != (v163 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_700:
                  do
                  {
                    uint64_t v168 = *--v143;
                    *--unint64_t v161 = v168;
                  }
                  while (v143 != (void *)v145);
                  uint64_t v145 = (unsigned char *)*v504;
                }
              }
              *((void *)this + 27) = v161;
              *((void *)this + 28) = v144;
              *((void *)this + 29) = &v151[8 * v150];
              if (v145)
              {
                operator delete(v145);
                uint64_t v128 = (uint64_t)v505;
              }
LABEL_247:
              *((void *)this + 28) = v144;
LABEL_248:
              uint64_t v170 = *(void **)(v138 + 16);
              uint64_t v169 = *(void *)(v138 + 24);
              uint64_t v171 = v170[29] - 1;
              if (v170[29] == 1)
              {
                if (*(void *)(v170[30] + 8) == v169) {
                  uint64_t v172 = v170[30];
                }
                else {
                  uint64_t v172 = 0;
                }
              }
              else
              {
                for (k = (uint64_t *)v170[31]; ; ++k)
                {
                  uint64_t v172 = *k;
                  if (*(void *)(*k + 8) == v169) {
                    break;
                  }
                  --v171;
                }
              }
              *(void *)(v172 + 24) = *(void *)(v138 + 32);
              unsigned __int8 v173 = (char *)this + 456;
              switch(*(_DWORD *)(v138 + 8))
              {
                case 1:
                  unsigned __int8 v173 = (char *)this + 296;
                  goto LABEL_261;
                case 2:
                  unsigned __int8 v173 = (char *)this + 336;
                  goto LABEL_261;
                case 3:
                  goto LABEL_261;
                case 4:
                  unsigned __int8 v173 = (char *)this + 496;
                  goto LABEL_261;
                case 5:
                  unsigned __int8 v173 = (char *)this + 416;
                  goto LABEL_261;
                case 6:
                  unsigned __int8 v173 = (char *)this + 376;
LABEL_261:
                  (**(void (***)(uint64_t))v138)(v138);
                  *(void *)uint64_t v138 = *(void *)v173;
                  *(void *)unsigned __int8 v173 = v138;
                  goto LABEL_276;
                default:
                  goto LABEL_277;
              }
            }
LABEL_694:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
LABEL_693:
          abort();
        }
      }
      ++v135;
LABEL_276:
      uint64_t v128 = (uint64_t)v505;
LABEL_277:
      uint64_t v134 = *((void *)this + 27);
    }
    while (v135 < (*((void *)this + 28) - v134) >> 3);
  }
  __n128 v183 = (unsigned char *)*((void *)this + 4);
  if (!v183[69] || *(unsigned char *)(*(void *)(*(void *)v183 + 704) + 64))
  {
    uint64_t v184 = *((void *)this + 6);
    uint64_t v185 = *(void *)(v184 + 40);
    uint64_t v186 = *(void *)(v184 + 48);
    if (v185 != v186)
    {
      while (1)
      {
        uint64_t v187 = *(void **)(*(void *)v185 + 328);
        uint64_t v188 = v187[29];
        if (!v188) {
          break;
        }
        if (v188 == 1)
        {
          uint64_t v189 = v187[30];
          if (*(void *)(v189 + 8) != v128) {
            break;
          }
        }
        else
        {
          int64x2_t v190 = (uint64_t *)v187[31];
          while (1)
          {
            uint64_t v189 = *v190;
            if (*(void *)(*v190 + 8) == v128) {
              break;
            }
            ++v190;
            if (!--v188) {
              goto LABEL_290;
            }
          }
        }
        *(unsigned char *)(v189 + 32) = 0;
        v185 += 8;
        if (v185 == v186) {
          goto LABEL_448;
        }
      }
LABEL_290:
      operator new();
    }
    goto LABEL_448;
  }
  uint64_t v191 = *((void *)this + 15);
  if (*((void *)this + 16) != v191) {
    *((void *)this + 16) = v191;
  }
  uint64_t v192 = *((void *)this + 18);
  if (*((void *)this + 19) != v192) {
    *((void *)this + 19) = v192;
  }
  uint64_t v193 = *((void *)this + 21);
  if (*((void *)this + 22) != v193) {
    *((void *)this + 22) = v193;
  }
  uint64_t v194 = *((void *)this + 6);
  uint64_t v195 = *(uint64_t **)(v194 + 40);
  if (v195 != *(uint64_t **)(v194 + 48))
  {
    do
    {
      uint64_t v196 = *v195;
      float64x2_t v197 = *(void **)(*v195 + 328);
      uint64_t v198 = v197[29];
      if (!v198) {
LABEL_308:
      }
        operator new();
      if (v198 == 1)
      {
        uint64_t v199 = v197[30];
        if (*(void *)(v199 + 8) != v128) {
          goto LABEL_308;
        }
      }
      else
      {
        float64x2_t v200 = (uint64_t *)v197[31];
        while (1)
        {
          uint64_t v199 = *v200;
          if (*(void *)(*v200 + 8) == v128) {
            break;
          }
          ++v200;
          if (!--v198) {
            goto LABEL_308;
          }
        }
      }
      *(unsigned char *)(v199 + 32) = 0;
      if (*(unsigned char *)(*(void *)(v196 + 288) + 164) && !*(_DWORD *)(v196 + 404))
      {
        LODWORD(v507[0]) = 1065353216;
        LOBYTE(v512[0]) = 0;
        altitude::Tile::computeTileViewRelation(v128, v499, v196, *(_DWORD *)(*((void *)this + 14) + 208), v512, (float *)v507, v497, 0, *(float *)(*((void *)this + 14) + 200));
        if (!LOBYTE(v512[0])) {
          altitude::GlobeTileRenderManager::LevelTiles::add((altitude::GlobeTileRenderManager *)((char *)this + 120), (altitude::Tile *)v196);
        }
        uint64_t v128 = (uint64_t)v505;
      }
      ++v195;
    }
    while (v195 != *(uint64_t **)(*((void *)this + 6) + 48));
  }
  if ((altitude::GlobeTileRenderManager::LevelTiles::setup((altitude::GlobeTileRenderManager *)((char *)this + 120)) & 1) == 0)
  {
    uint64_t v296 = *((void *)this + 15);
    if (*((void *)this + 16) != v296) {
      *((void *)this + 16) = v296;
    }
    uint64_t v297 = *((void *)this + 18);
    uint64_t v128 = (uint64_t)v505;
    if (*((void *)this + 19) != v297) {
      *((void *)this + 19) = v297;
    }
    uint64_t v298 = *((void *)this + 21);
    if (*((void *)this + 22) != v298) {
      *((void *)this + 22) = v298;
    }
    uint64_t v299 = *((void *)this + 6);
    uint64_t v300 = *(void *)(v299 + 40);
    uint64_t v301 = *(void *)(v299 + 48);
    if (v300 != v301)
    {
      while (1)
      {
        __n128 v302 = *(void **)(*(void *)v300 + 328);
        uint64_t v303 = v302[29];
        if (!v303) {
          break;
        }
        if (v303 == 1)
        {
          uint64_t v304 = v302[30];
          if (*(void **)(v304 + 8) != v505) {
            break;
          }
        }
        else
        {
          long long v305 = (uint64_t *)v302[31];
          while (1)
          {
            uint64_t v304 = *v305;
            if (*(void **)(*v305 + 8) == v505) {
              break;
            }
            ++v305;
            if (!--v303) {
              goto LABEL_447;
            }
          }
        }
        *(unsigned char *)(v304 + 32) = 1;
        v300 += 8;
        if (v300 == v301) {
          goto LABEL_448;
        }
      }
LABEL_447:
      operator new();
    }
    goto LABEL_448;
  }
  int64x2_t v201 = (uint64_t *)*((void *)this + 24);
  v495 = (uint64_t *)*((void *)this + 25);
  uint64_t v128 = (uint64_t)v505;
  if (v201 != v495)
  {
    while (1)
    {
      v496 = v201;
      uint64_t v498 = *v201;
      float64x2_t v202 = *(void **)(*v201 + 328);
      uint64_t v203 = v202[29];
      if (!v203) {
LABEL_324:
      }
        operator new();
      if (v203 == 1)
      {
        uint64_t v204 = v202[30];
        if (*(void **)(v204 + 8) != v505) {
          goto LABEL_324;
        }
      }
      else
      {
        uint64_t v205 = (uint64_t *)v202[31];
        while (1)
        {
          uint64_t v204 = *v205;
          if (*(void **)(*v205 + 8) == v505) {
            break;
          }
          ++v205;
          if (!--v203) {
            goto LABEL_324;
          }
        }
      }
      *(unsigned char *)(v204 + 32) = 1;
      if (*(unsigned char *)(*(void *)(v498 + 288) + 164)) {
        break;
      }
LABEL_316:
      int64x2_t v201 = v496 + 1;
      if (v496 + 1 == v495) {
        goto LABEL_448;
      }
    }
    uint64_t v206 = 0;
    while (1)
    {
      unint64_t v207 = *(unsigned int *)(v498 + 392);
      uint64_t v208 = &dword_1A29C67A8[2 * v206];
      int v209 = (1 << v207) - 1;
      int v210 = ((1 << v207) + *(_DWORD *)(v498 + 396) + *v208) & v209;
      int v211 = (*(_DWORD *)(v498 + 400) + (1 << v207) + v208[1]) & v209;
      uint64_t v212 = *((void *)this + 21);
      unint64_t v213 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 22) - v212) >> 3);
      uint64_t v500 = v206;
      if (v213 <= v207) {
        goto LABEL_337;
      }
      unint64_t v214 = (_DWORD *)(v212 + 40 * v207);
      unsigned int v215 = v214[5] + v210;
      unsigned int v216 = v214[1];
      BOOL v13 = v215 >= v216;
      unsigned int v217 = v215 - v216;
      if (!v13
        || (unsigned int v218 = *(_DWORD *)(v212 + 40 * v207 + 28), v217 >= v218)
        || (uint64_t v219 = v212 + 40 * v207,
            unsigned int v220 = *(_DWORD *)(v219 + 24) + v211,
            LODWORD(v219) = *(_DWORD *)(v219 + 8),
            BOOL v13 = v220 >= v219,
            unsigned int v221 = v220 - v219,
            !v13)
        || v221 >= *(_DWORD *)(v212 + 40 * v207 + 32)
        || (uint64_t v222 = *(void *)(*((void *)this + 18) + 8 * (v217 + v221 * v218 + *v214))) == 0)
      {
LABEL_337:
        if (!v207)
        {
LABEL_352:
          unint64_t v238 = (v207 + 1);
          if (v213 > v238)
          {
            int v239 = 0;
            unsigned int v240 = 0;
            int v241 = (1 << (v207 + 1)) - 1;
            do
            {
              int v242 = 0;
              do
              {
                uint64_t v243 = *((void *)this + 21);
                if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 22) - v243) >> 3) > v238)
                {
                  long long v244 = (_DWORD *)(v243 + 40 * v238);
                  unsigned int v245 = v244[5] + (((1 << (v207 + 1)) + 2 * v210 + v239) & v241);
                  unsigned int v246 = v244[1];
                  BOOL v13 = v245 >= v246;
                  unsigned int v247 = v245 - v246;
                  if (v13)
                  {
                    unsigned int v248 = *(_DWORD *)(v243 + 40 * v238 + 28);
                    if (v247 < v248)
                    {
                      uint64_t v249 = v243 + 40 * v238;
                      unsigned int v250 = *(_DWORD *)(v249 + 24) + (((1 << (v207 + 1)) + 2 * v211 + v242) & v241);
                      LODWORD(v249) = *(_DWORD *)(v249 + 8);
                      BOOL v13 = v250 >= v249;
                      unsigned int v251 = v250 - v249;
                      if (v13 && v251 < *(_DWORD *)(v243 + 40 * v238 + 32))
                      {
                        uint64_t v252 = *(void *)(*((void *)this + 18) + 8 * (v247 + v251 * v248 + *v244));
                        if (v252)
                        {
                          int v253 = *(void **)(v252 + 328);
                          uint64_t v254 = v253[29];
                          if (!v254) {
                            goto LABEL_370;
                          }
                          if (v254 == 1)
                          {
                            uint64_t v255 = v253[30];
                            if (*(void **)(v255 + 8) != v505) {
LABEL_370:
                            }
                              operator new();
                          }
                          else
                          {
                            unint64_t v256 = (uint64_t *)v253[31];
                            while (1)
                            {
                              uint64_t v255 = *v256;
                              if (*(void **)(*v256 + 8) == v505) {
                                break;
                              }
                              ++v256;
                              if (!--v254) {
                                goto LABEL_370;
                              }
                            }
                          }
                          *(unsigned char *)(v255 + 32) = 1;
                          ++v240;
                        }
                      }
                    }
                  }
                }
                if (v242) {
                  break;
                }
                int v242 = 1;
              }
              while (v240 < 4);
              if (v239) {
                break;
              }
              int v239 = 1;
            }
            while (v240 < 4);
            if (v240 <= 3)
            {
              unint64_t v257 = (v207 + 2);
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 22) - *((void *)this + 21)) >> 3) > v257)
              {
                unsigned int v258 = 0;
                unsigned int v259 = 4 * v240;
                int v260 = (1 << (v207 + 2)) - 1;
                do
                {
                  unsigned int v261 = 0;
                  do
                  {
                    uint64_t v262 = *((void *)this + 21);
                    if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 22) - v262) >> 3) > v257)
                    {
                      unint64_t v263 = (_DWORD *)(v262 + 40 * v257);
                      unsigned int v264 = v263[5] + (((1 << (v207 + 2)) + 4 * v210 + v258) & v260);
                      unsigned int v265 = v263[1];
                      BOOL v13 = v264 >= v265;
                      unsigned int v266 = v264 - v265;
                      if (v13)
                      {
                        unsigned int v267 = *(_DWORD *)(v262 + 40 * v257 + 28);
                        if (v266 < v267)
                        {
                          uint64_t v268 = v262 + 40 * v257;
                          unsigned int v269 = *(_DWORD *)(v268 + 24) + (((1 << (v207 + 2)) + 4 * v211 + v261) & v260);
                          LODWORD(v268) = *(_DWORD *)(v268 + 8);
                          BOOL v13 = v269 >= v268;
                          unsigned int v270 = v269 - v268;
                          if (v13 && v270 < *(_DWORD *)(v262 + 40 * v257 + 32))
                          {
                            uint64_t v271 = *(void *)(*((void *)this + 18) + 8 * (v266 + v270 * v267 + *v263));
                            if (v271)
                            {
                              long long v272 = *(void **)(v271 + 328);
                              uint64_t v273 = v272[29];
                              if (!v273) {
                                goto LABEL_395;
                              }
                              if (v273 == 1)
                              {
                                uint64_t v274 = v272[30];
                                if (*(void **)(v274 + 8) != v505) {
LABEL_395:
                                }
                                  operator new();
                              }
                              else
                              {
                                uint64_t v275 = (uint64_t *)v272[31];
                                while (1)
                                {
                                  uint64_t v274 = *v275;
                                  if (*(void **)(*v275 + 8) == v505) {
                                    break;
                                  }
                                  ++v275;
                                  if (!--v273) {
                                    goto LABEL_395;
                                  }
                                }
                              }
                              *(unsigned char *)(v274 + 32) = 1;
                              ++v259;
                            }
                          }
                        }
                      }
                    }
                    if (v261 > 2) {
                      break;
                    }
                    ++v261;
                  }
                  while (v259 < 0x10);
                  if (v258 > 2) {
                    break;
                  }
                  ++v258;
                }
                while (v259 < 0x10);
                if (v259 <= 0xF)
                {
                  unint64_t v276 = (v207 + 3);
                  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 22) - *((void *)this + 21)) >> 3) > v276)
                  {
                    unsigned int v277 = 0;
                    unsigned int v278 = 4 * v259;
                    int v279 = (1 << (v207 + 3)) - 1;
                    do
                    {
                      unsigned int v280 = 0;
                      do
                      {
                        uint64_t v281 = *((void *)this + 21);
                        if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 22) - v281) >> 3) > v276)
                        {
                          int64x2_t v282 = (_DWORD *)(v281 + 40 * v276);
                          unsigned int v283 = v282[5] + (((1 << (v207 + 3)) + 8 * v210 + v277) & v279);
                          unsigned int v284 = v282[1];
                          BOOL v13 = v283 >= v284;
                          unsigned int v285 = v283 - v284;
                          if (v13)
                          {
                            unsigned int v286 = *(_DWORD *)(v281 + 40 * v276 + 28);
                            if (v285 < v286)
                            {
                              uint64_t v287 = v281 + 40 * v276;
                              unsigned int v288 = *(_DWORD *)(v287 + 24) + (((1 << (v207 + 3)) + 8 * v211 + v280) & v279);
                              LODWORD(v287) = *(_DWORD *)(v287 + 8);
                              BOOL v13 = v288 >= v287;
                              unsigned int v289 = v288 - v287;
                              if (v13 && v289 < *(_DWORD *)(v281 + 40 * v276 + 32))
                              {
                                uint64_t v290 = *(void *)(*((void *)this + 18) + 8 * (v285 + v289 * v286 + *v282));
                                if (v290)
                                {
                                  unsigned int v291 = *(void **)(v290 + 328);
                                  uint64_t v292 = v291[29];
                                  if (!v292) {
                                    goto LABEL_420;
                                  }
                                  if (v292 == 1)
                                  {
                                    uint64_t v293 = v291[30];
                                    if (*(void **)(v293 + 8) != v505) {
LABEL_420:
                                    }
                                      operator new();
                                  }
                                  else
                                  {
                                    std::vector<unsigned int>::value_type v294 = (uint64_t *)v291[31];
                                    while (1)
                                    {
                                      uint64_t v293 = *v294;
                                      if (*(void **)(*v294 + 8) == v505) {
                                        break;
                                      }
                                      ++v294;
                                      if (!--v292) {
                                        goto LABEL_420;
                                      }
                                    }
                                  }
                                  *(unsigned char *)(v293 + 32) = 1;
                                  ++v278;
                                }
                              }
                            }
                          }
                        }
                        if (v280 > 6) {
                          break;
                        }
                        ++v280;
                      }
                      while (v278 < 0x40);
                      if (v277 > 6) {
                        break;
                      }
                      ++v277;
                    }
                    while (v278 < 0x40);
                  }
                }
              }
            }
          }
          goto LABEL_328;
        }
        unsigned int v223 = v207 - 1;
        unsigned int v224 = v210;
        unsigned int v225 = v211;
        while (1)
        {
          v224 >>= 1;
          v225 >>= 1;
          uint64_t v226 = v223;
          if (v213 > v223)
          {
            unint64_t v227 = (_DWORD *)(v212 + 40 * v223);
            unsigned int v228 = v227[5] + v224;
            unsigned int v229 = v227[1];
            BOOL v13 = v228 >= v229;
            unsigned int v230 = v228 - v229;
            if (v13)
            {
              unsigned int v231 = *(_DWORD *)(v212 + 40 * v223 + 28);
              if (v230 < v231)
              {
                uint64_t v232 = v212 + 40 * v223;
                unsigned int v233 = *(_DWORD *)(v232 + 24) + v225;
                LODWORD(v232) = *(_DWORD *)(v232 + 8);
                BOOL v13 = v233 >= v232;
                unsigned int v234 = v233 - v232;
                if (v13 && v234 < *(_DWORD *)(v212 + 40 * v223 + 32))
                {
                  uint64_t v222 = *(void *)(*((void *)this + 18) + 8 * (v230 + v234 * v231 + *v227));
                  if (v222) {
                    break;
                  }
                }
              }
            }
          }
          --v223;
          if (!v226) {
            goto LABEL_352;
          }
        }
      }
      int64_t v235 = *(void **)(v222 + 328);
      uint64_t v236 = v235[29];
      if (!v236) {
        goto LABEL_430;
      }
      if (v236 == 1)
      {
        uint64_t v237 = v235[30];
        if (*(void **)(v237 + 8) != v505) {
LABEL_430:
        }
          operator new();
      }
      else
      {
        char v295 = (uint64_t *)v235[31];
        while (1)
        {
          uint64_t v237 = *v295;
          if (*(void **)(*v295 + 8) == v505) {
            break;
          }
          ++v295;
          if (!--v236) {
            goto LABEL_430;
          }
        }
      }
      *(unsigned char *)(v237 + 32) = 1;
LABEL_328:
      uint64_t v206 = v500 + 1;
      if (v500 == 7) {
        goto LABEL_316;
      }
    }
  }
LABEL_448:
  uint64_t v511 = 0;
  long long v509 = 0u;
  *(_OWORD *)v510 = 0u;
  *(_OWORD *)v507 = 0u;
  *(_OWORD *)v508 = 0u;
  uint64_t v306 = *((void *)this + 6);
  long long v307 = *(uint64_t **)(v306 + 40);
  long long v308 = *(uint64_t **)(v306 + 48);
  if (v307 != v308)
  {
    while (1)
    {
      uint64_t v309 = *v307;
      if (*(unsigned char *)(*(void *)(*v307 + 288) + 164))
      {
        long long v310 = *(void **)(v309 + 328);
        uint64_t v311 = v310[29];
        if (!v311) {
          goto LABEL_459;
        }
        if (v311 == 1)
        {
          uint64_t v312 = v310[30];
          if (*(void *)(v312 + 8) != v128) {
LABEL_459:
          }
            operator new();
        }
        else
        {
          long long v313 = (uint64_t *)v310[31];
          while (1)
          {
            uint64_t v312 = *v313;
            if (*(void *)(*v313 + 8) == v128) {
              break;
            }
            ++v313;
            if (!--v311) {
              goto LABEL_459;
            }
          }
        }
        *(unsigned char *)(v312 + 33) = 1;
        if (!*(_DWORD *)(v309 + 404)) {
          break;
        }
      }
LABEL_450:
      if (++v307 == v308) {
        goto LABEL_480;
      }
    }
    unint64_t v314 = *(void *)(v309 + 160);
    if (!v314) {
      goto LABEL_470;
    }
    if (v314 >= 3)
    {
      uint64_t v315 = 0;
      uint64_t v316 = *(void *)(v309 + 264);
      long long v317 = (void *)(v316 + 16);
      while (*v317 != v128)
      {
        ++v315;
        v317 += 6;
        if (v314 == v315) {
          goto LABEL_470;
        }
      }
      uint64_t v320 = (altitude::TileView *)(v316 + 48 * v315);
      goto LABEL_478;
    }
    if (*(void *)(v309 + 184) == v128)
    {
      unsigned int v322 = 0;
    }
    else
    {
      if (v314 == 1 || *(void *)(v309 + 232) != v128)
      {
LABEL_470:
        v512[0] = &unk_1EF56B5B8;
        v512[1] = v309;
        v512[2] = v128;
        v512[3] = 1065353216;
        char v513 = 1;
        int v514 = 0;
        char v515 = 0;
        int v516 = 0;
        karo::SizedArray<altitude::TileView,2>::push_back((char *)(v309 + 160), (uint64_t)v512);
        unint64_t v318 = *(void *)(v309 + 160);
        unint64_t v319 = v318 - 1;
        if (v318 >= 3)
        {
          uint64_t v320 = (altitude::TileView *)(*(void *)(v309 + 264) + 48 * v319);
          goto LABEL_478;
        }
        uint64_t v321 = v309 + 48 * v319;
LABEL_477:
        uint64_t v320 = (altitude::TileView *)(v321 + 168);
LABEL_478:
        char isCulled = altitude::TileView::isCulled(v320, v497);
        uint64_t v128 = (uint64_t)v505;
        if ((isCulled & 1) == 0)
        {
          altitude::GlobeTileRenderManager::LevelTiles::add((altitude::GlobeTileRenderManager::LevelTiles *)v507, (altitude::Tile *)v309);
          uint64_t v128 = (uint64_t)v505;
        }
        goto LABEL_450;
      }
      unsigned int v322 = 1;
    }
    uint64_t v321 = v309 + 48 * v322;
    goto LABEL_477;
  }
LABEL_480:
  if (altitude::GlobeTileRenderManager::LevelTiles::setup((altitude::GlobeTileRenderManager::LevelTiles *)v507))
  {
    int v325 = (uint64_t *)*((void *)this + 24);
    long double v324 = (uint64_t *)*((void *)this + 25);
    if (v325 != v324)
    {
      v485 = (uint64_t *)*((void *)this + 25);
      do
      {
        uint64_t v326 = *v325;
        if (!*(unsigned char *)(*(void *)(*v325 + 288) + 164) || *(_DWORD *)(v326 + 404)) {
          goto LABEL_483;
        }
        unsigned int v327 = (double *)(*(uint64_t (**)(void *))(v505[5] + 24))(v505 + 5);
        long double v328 = *v327;
        long double v329 = v327[1];
        long double v330 = v327[2];
        double v331 = sqrt(v328 * v328 + v329 * v329);
        double v332 = atan2(v330, v331 * 0.996647189);
        double v333 = atan2(v329, v328);
        __double2 v334 = __sincos_stret(v332);
        long double v335 = atan2(v330 + v334.__sinval * v334.__sinval * 42841.3115 * v334.__sinval, v331 + v334.__cosval * v334.__cosval * -42697.6727 * v334.__cosval);
        long double v336 = tan(v335 * 0.5 + 0.785398163);
        long double v337 = log(v336);
        char v338 = *(unsigned char *)(v326 + 392);
        double v339 = (double)(1 << v338);
        unsigned int v340 = vcvtmd_s64_f64((v337 * 0.159154943 + 0.5) * v339) + ~(-1 << v338) - (1 << v338) + 1;
        if (v340 <= *(_DWORD *)(v326 + 396))
        {
          double v342 = (char *)operator new(8uLL);
          *(void *)double v342 = 1;
          unint64_t v341 = v342 + 8;
          long long v343 = v342 + 8;
          uint64_t v344 = v342 + 8;
          if (v340 < *(_DWORD *)(v326 + 396)) {
            goto LABEL_503;
          }
        }
        else
        {
          unint64_t v341 = 0;
          double v342 = 0;
        }
        uint64_t v345 = v341 - v342;
        uint64_t v346 = (v341 - v342) >> 3;
        unint64_t v347 = v346 + 1;
        if ((unint64_t)(v346 + 1) >> 61) {
          goto LABEL_693;
        }
        double v348 = v342;
        if (v345 >> 2 > v347) {
          unint64_t v347 = v345 >> 2;
        }
        if ((unint64_t)v345 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v349 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v349 = v347;
        }
        if (v349)
        {
          if (v349 >> 61) {
            goto LABEL_694;
          }
          uint64_t v350 = (char *)operator new(8 * v349);
        }
        else
        {
          uint64_t v350 = 0;
        }
        double v342 = &v350[8 * v346];
        *(void *)double v342 = 0xFFFFFFFFLL;
        uint64_t v344 = v342 + 8;
        if (v341 != v348)
        {
          unint64_t v351 = (v341 - 8 - v348) & 0xFFFFFFFFFFFFFFF8;
          double v342 = &v350[v345 - v351 - 8];
          memcpy(v342, &v341[-v351 - 8], v351 + 8);
          unint64_t v341 = v348;
        }
        long long v343 = &v350[8 * v349];
        if (v341) {
          operator delete(v341);
        }
LABEL_503:
        unsigned int v352 = vcvtmd_s64_f64((v333 * 0.159154943 + 0.5) * v339);
        float v353 = v505;
        if (*(_DWORD *)(v326 + 400) < v352)
        {
          float v354 = v344;
          goto LABEL_528;
        }
        if (v344 < v343)
        {
          *(void *)uint64_t v344 = 0x100000000;
          float v354 = v344 + 8;
          goto LABEL_528;
        }
        uint64_t v355 = (v344 - v342) >> 3;
        unint64_t v356 = v355 + 1;
        if ((unint64_t)(v355 + 1) >> 61) {
          goto LABEL_693;
        }
        if ((v343 - v342) >> 2 > v356) {
          unint64_t v356 = (v343 - v342) >> 2;
        }
        if ((unint64_t)(v343 - v342) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v357 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v357 = v356;
        }
        if (v357)
        {
          if (v357 >> 61) {
            goto LABEL_694;
          }
          long long v358 = (char *)operator new(8 * v357);
          float v353 = v505;
        }
        else
        {
          long long v358 = 0;
        }
        long long v359 = &v358[8 * v355];
        long long v343 = &v358[8 * v357];
        *(void *)long long v359 = 0x100000000;
        float v354 = v359 + 8;
        if (v344 == v342)
        {
          long long v362 = v344;
LABEL_526:
          operator delete(v362);
          float v353 = v505;
          goto LABEL_527;
        }
        unint64_t v360 = v344 - v342 - 8;
        if (v360 < 0x18)
        {
          long long v361 = v344;
          do
          {
LABEL_524:
            uint64_t v368 = *((void *)v361 - 1);
            v361 -= 8;
            *((void *)v359 - 1) = v368;
            v359 -= 8;
            long long v362 = v342;
          }
          while (v361 != v342);
          goto LABEL_525;
        }
        uint64_t v363 = (v360 >> 3) + 1;
        long long v361 = &v344[-8 * (v363 & 0x3FFFFFFFFFFFFFFCLL)];
        long long v364 = &v358[8 * v355 - 16];
        uint64_t v365 = (long long *)(v344 - 16);
        uint64_t v366 = v363 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v367 = *v365;
          *((_OWORD *)v364 - 1) = *(v365 - 1);
          *(_OWORD *)long long v364 = v367;
          v364 -= 32;
          v365 -= 2;
          v366 -= 4;
        }
        while (v366);
        v359 -= 8 * (v363 & 0x3FFFFFFFFFFFFFFCLL);
        long long v362 = v342;
        if (v363 != (v363 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_524;
        }
LABEL_525:
        if (v362) {
          goto LABEL_526;
        }
LABEL_527:
        double v342 = v359;
LABEL_528:
        v486 = v325;
        if (*(_DWORD *)(v326 + 400) <= v352)
        {
          if (v354 >= v343)
          {
            int64_t v370 = v354 - v342;
            uint64_t v371 = (v354 - v342) >> 3;
            unint64_t v372 = v371 + 1;
            if ((unint64_t)(v371 + 1) >> 61) {
              goto LABEL_693;
            }
            unint64_t v373 = v342;
            if ((v343 - v342) >> 2 > v372) {
              unint64_t v372 = (v343 - v342) >> 2;
            }
            if ((unint64_t)(v343 - v342) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v372 = 0x1FFFFFFFFFFFFFFFLL;
            }
            if (v372)
            {
              if (v372 >> 61) {
                goto LABEL_694;
              }
              unint64_t v374 = operator new(8 * v372);
              float v353 = v505;
            }
            else
            {
              unint64_t v374 = 0;
            }
            double v342 = &v374[8 * v371];
            *(void *)double v342 = 0xFFFFFFFF00000000;
            float v369 = v342 + 8;
            if (v354 == v373)
            {
              __int16 v378 = v354;
            }
            else
            {
              unint64_t v375 = v354 - 8 - v373;
              if (v375 < 0x58 || (unint64_t)(v354 - &v374[v370]) < 0x20)
              {
                unint64_t v376 = v354;
                goto LABEL_545;
              }
              uint64_t v480 = (v375 >> 3) + 1;
              unint64_t v376 = &v354[-8 * (v480 & 0x3FFFFFFFFFFFFFFCLL)];
              v481 = &v374[8 * v371 - 16];
              v482 = v354 - 16;
              uint64_t v483 = v480 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v484 = *(_OWORD *)v482;
                *(v481 - 1) = *((_OWORD *)v482 - 1);
                _OWORD *v481 = v484;
                v481 -= 2;
                v482 -= 32;
                v483 -= 4;
              }
              while (v483);
              v342 -= 8 * (v480 & 0x3FFFFFFFFFFFFFFCLL);
              if (v480 != (v480 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_545:
                  uint64_t v377 = *((void *)v376 - 1);
                  v376 -= 8;
                  *((void *)v342 - 1) = v377;
                  v342 -= 8;
                }
                while (v376 != v373);
              }
              __int16 v378 = v373;
              if (!v373) {
                goto LABEL_550;
              }
            }
            operator delete(v378);
            float v353 = v505;
            goto LABEL_550;
          }
          *(void *)float v354 = 0xFFFFFFFF00000000;
          v354 += 8;
        }
        float v369 = v354;
LABEL_550:
        std::vector<unsigned int> __p = v342;
        if (v342 != v369)
        {
          unsigned __int8 v379 = v510[0];
          BOOL v380 = v508[1];
          unint64_t v381 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v510[1] - (char *)v510[0]) >> 3);
          uint64_t v382 = v342;
          v488 = v369;
          uint64_t v489 = v326;
          v492 = (char *)v510[0];
          do
          {
            int v383 = *(_DWORD *)v382;
            int v384 = *((_DWORD *)v382 + 1);
            unint64_t v385 = *(unsigned int *)(v326 + 392);
            int v386 = (1 << v385) - 1;
            int v387 = (*(_DWORD *)(v326 + 396) + *(_DWORD *)v382 + (1 << v385)) & v386;
            int v388 = ((1 << v385) + v384 + *(_DWORD *)(v326 + 400)) & v386;
            v493 = v382;
            if (v381 <= v385) {
              goto LABEL_562;
            }
            v389 = &v379[10 * v385];
            unsigned int v390 = v389[5] + v387;
            unsigned int v391 = v389[1];
            BOOL v13 = v390 >= v391;
            unsigned int v392 = v390 - v391;
            if (!v13
              || (unsigned int v393 = v379[10 * v385 + 7], v392 >= v393)
              || (v394 = (char *)&v379[10 * v385],
                  unsigned int v395 = *((_DWORD *)v394 + 6) + v388,
                  LODWORD(v394) = *((_DWORD *)v394 + 2),
                  BOOL v13 = v395 >= v394,
                  unsigned int v396 = v395 - v394,
                  !v13)
              || v396 >= v379[10 * v385 + 8]
              || (uint64_t v397 = v380[v392 + v396 * v393 + *v389]) == 0)
            {
LABEL_562:
              if (v385 < 2)
              {
LABEL_563:
                int v398 = 0;
                unsigned int v399 = 0;
                int v494 = *((_DWORD *)v382 + 1);
                if (v384) {
                  unsigned int v400 = 1;
                }
                else {
                  unsigned int v400 = 2;
                }
                unsigned int v401 = v400 << (v383 == 0);
                int v491 = v385;
                unint64_t v402 = (v385 + 1);
                v403 = &v379[10 * v402];
                v404 = v403 + 1;
                v405 = v403 + 7;
                v406 = v403 + 2;
                do
                {
                  int v407 = 0;
                  do
                  {
                    if (v381 > v402)
                    {
                      unsigned int v408 = v398 + ((v383 == -1) | (2 * v387)) + v403[5];
                      BOOL v13 = v408 >= *v404;
                      unsigned int v409 = v408 - *v404;
                      if (v13 && v409 < *v405)
                      {
                        unsigned int v410 = v407 + ((v384 == -1) | (2 * v388)) + v403[6];
                        BOOL v13 = v410 >= *v406;
                        unsigned int v411 = v410 - *v406;
                        if (v13 && v411 < v403[8])
                        {
                          uint64_t v412 = v380[v409 + v411 * *v405 + *v403];
                          if (v412)
                          {
                            v413 = *(void **)(v412 + 328);
                            uint64_t v414 = v413[29];
                            if (!v414) {
                              goto LABEL_583;
                            }
                            if (v414 == 1)
                            {
                              uint64_t v415 = v413[30];
                              if (*(void **)(v415 + 8) != v353) {
LABEL_583:
                              }
                                operator new();
                            }
                            else
                            {
                              v416 = (uint64_t *)v413[31];
                              while (1)
                              {
                                uint64_t v415 = *v416;
                                if (*(void **)(*v416 + 8) == v353) {
                                  break;
                                }
                                ++v416;
                                if (!--v414) {
                                  goto LABEL_583;
                                }
                              }
                            }
                            *(unsigned char *)(v415 + 33) = 0;
                            ++v399;
                          }
                        }
                      }
                    }
                    if (v407 + 1 >= v400) {
                      break;
                    }
                    int v407 = 1;
                  }
                  while (v399 < v401);
                  if (v383) {
                    break;
                  }
                  if (v398) {
                    break;
                  }
                  int v398 = 1;
                }
                while (v399 < v401);
                if (v383 == -1) {
                  int v417 = 3;
                }
                else {
                  int v417 = 0;
                }
                if (v494 == -1) {
                  int v418 = 3;
                }
                else {
                  int v418 = 0;
                }
                if (v494) {
                  unsigned int v419 = 1;
                }
                else {
                  unsigned int v419 = 4;
                }
                unsigned int v420 = v419 << (2 * (v383 == 0));
                char v490 = (v384 == 0) + (v383 == 0);
                unsigned int v421 = v399 << v490;
                if (v421 < v420)
                {
                  unsigned int v422 = 0;
                  int v423 = v417 | (4 * v387);
                  int v424 = v418 | (4 * v388);
                  unint64_t v425 = (v491 + 2);
                  v426 = (unsigned int *)&v492[40 * v425];
                  v427 = v426 + 1;
                  v428 = v426 + 7;
                  v429 = v426 + 2;
                  do
                  {
                    unsigned int v430 = 0;
                    do
                    {
                      if (v381 > v425)
                      {
                        unsigned int v431 = v422 + v423 + v426[5];
                        BOOL v13 = v431 >= *v427;
                        unsigned int v432 = v431 - *v427;
                        if (v13 && v432 < *v428)
                        {
                          unsigned int v433 = v430 + v424 + v426[6];
                          BOOL v13 = v433 >= *v429;
                          unsigned int v434 = v433 - *v429;
                          if (v13 && v434 < v426[8])
                          {
                            uint64_t v435 = v380[v432 + v434 * *v428 + *v426];
                            if (v435)
                            {
                              v436 = *(void **)(v435 + 328);
                              uint64_t v437 = v436[29];
                              if (!v437) {
                                goto LABEL_617;
                              }
                              if (v437 == 1)
                              {
                                uint64_t v438 = v436[30];
                                if (*(void **)(v438 + 8) != v353) {
LABEL_617:
                                }
                                  operator new();
                              }
                              else
                              {
                                v439 = (uint64_t *)v436[31];
                                while (1)
                                {
                                  uint64_t v438 = *v439;
                                  if (*(void **)(*v439 + 8) == v353) {
                                    break;
                                  }
                                  ++v439;
                                  if (!--v437) {
                                    goto LABEL_617;
                                  }
                                }
                              }
                              *(unsigned char *)(v438 + 33) = 0;
                              ++v421;
                            }
                          }
                        }
                      }
                      ++v430;
                    }
                    while (v430 < v419 && v421 < v420);
                    if (v383) {
                      break;
                    }
                    if (v422 > 2) {
                      break;
                    }
                    ++v422;
                  }
                  while (v421 < v420);
                }
                if (v383 == -1) {
                  int v440 = 7;
                }
                else {
                  int v440 = 0;
                }
                if (v494 == -1) {
                  int v441 = 7;
                }
                else {
                  int v441 = 0;
                }
                if (v494) {
                  unsigned int v442 = 1;
                }
                else {
                  unsigned int v442 = 8;
                }
                if (v383) {
                  char v443 = 0;
                }
                else {
                  char v443 = 3;
                }
                unsigned int v444 = v442 << v443;
                unsigned int v445 = v421 << v490;
                if (v421 << v490 < v442 << v443)
                {
                  unsigned int v446 = 0;
                  int v447 = v440 | (8 * v387);
                  int v448 = v441 | (8 * v388);
                  unint64_t v449 = (v491 + 3);
                  v450 = (unsigned int *)&v492[40 * v449];
                  v451 = v450 + 1;
                  v452 = v450 + 7;
                  v453 = v450 + 2;
                  do
                  {
                    unsigned int v454 = 0;
                    do
                    {
                      if (v381 > v449)
                      {
                        unsigned int v455 = v446 + v447 + v450[5];
                        BOOL v13 = v455 >= *v451;
                        unsigned int v456 = v455 - *v451;
                        if (v13 && v456 < *v452)
                        {
                          unsigned int v457 = v454 + v448 + v450[6];
                          BOOL v13 = v457 >= *v453;
                          unsigned int v458 = v457 - *v453;
                          if (v13 && v458 < v450[8])
                          {
                            uint64_t v459 = v380[v456 + v458 * *v452 + *v450];
                            if (v459)
                            {
                              v460 = *(void **)(v459 + 328);
                              uint64_t v461 = v460[29];
                              if (!v461) {
                                goto LABEL_654;
                              }
                              if (v461 == 1)
                              {
                                uint64_t v462 = v460[30];
                                if (*(void **)(v462 + 8) != v353) {
LABEL_654:
                                }
                                  operator new();
                              }
                              else
                              {
                                v463 = (uint64_t *)v460[31];
                                while (1)
                                {
                                  uint64_t v462 = *v463;
                                  if (*(void **)(*v463 + 8) == v353) {
                                    break;
                                  }
                                  ++v463;
                                  if (!--v461) {
                                    goto LABEL_654;
                                  }
                                }
                              }
                              *(unsigned char *)(v462 + 33) = 0;
                              ++v445;
                            }
                          }
                        }
                      }
                      ++v454;
                    }
                    while (v454 < v442 && v445 < v444);
                    if (v383) {
                      break;
                    }
                    if (v446 > 6) {
                      break;
                    }
                    ++v446;
                  }
                  while (v445 < v444);
                }
                goto LABEL_553;
              }
              unsigned int v464 = v385 - 1;
              unsigned int v465 = v387;
              unsigned int v466 = v388;
              while (1)
              {
                v465 >>= 1;
                v466 >>= 1;
                if (v381 > v464)
                {
                  v468 = &v379[10 * v464];
                  unsigned int v469 = v468[5] + v465;
                  unsigned int v470 = v468[1];
                  BOOL v13 = v469 >= v470;
                  unsigned int v471 = v469 - v470;
                  if (v13)
                  {
                    unsigned int v472 = v379[10 * v464 + 7];
                    if (v471 < v472)
                    {
                      v473 = (char *)&v379[10 * v464];
                      unsigned int v474 = *((_DWORD *)v473 + 6) + v466;
                      LODWORD(v473) = *((_DWORD *)v473 + 2);
                      BOOL v13 = v474 >= v473;
                      unsigned int v475 = v474 - v473;
                      if (v13 && v475 < v379[10 * v464 + 8])
                      {
                        uint64_t v397 = v380[v471 + v475 * v472 + *v468];
                        if (v397) {
                          break;
                        }
                      }
                    }
                  }
                }
                if (!(unint64_t)(v464-- & 0xFFFFFFFE)) {
                  goto LABEL_563;
                }
              }
            }
            v476 = *(void **)(v397 + 328);
            uint64_t v477 = v476[29];
            if (!v477) {
              goto LABEL_679;
            }
            if (v477 == 1)
            {
              uint64_t v478 = v476[30];
              if (*(void **)(v478 + 8) != v353) {
LABEL_679:
              }
                operator new();
            }
            else
            {
              v479 = (uint64_t *)v476[31];
              while (1)
              {
                uint64_t v478 = *v479;
                if (*(void **)(*v479 + 8) == v353) {
                  break;
                }
                ++v479;
                if (!--v477) {
                  goto LABEL_679;
                }
              }
            }
            *(unsigned char *)(v478 + 33) = 0;
LABEL_553:
            unsigned __int8 v379 = v492;
            v382 += 8;
            uint64_t v326 = v489;
          }
          while (v493 + 8 != v488);
        }
        long double v324 = v485;
        int v325 = v486;
        if (__p)
        {
          operator delete(__p);
          long double v324 = v485;
        }
LABEL_483:
        ++v325;
      }
      while (v325 != v324);
    }
  }
  if (v510[0]) {
    operator delete(v510[0]);
  }
  if (v508[1]) {
    operator delete(v508[1]);
  }
  if (v507[0]) {
    operator delete(v507[0]);
  }
}

uint64_t altitude::GlobeTileRenderManager::LevelTiles::setup(altitude::GlobeTileRenderManager::LevelTiles *this)
{
  uint64_t v3 = *((void *)this + 6);
  uint64_t v2 = *((void *)this + 7);
  uint64_t v4 = v2 - v3;
  if (v2 == v3)
  {
    unsigned int v5 = 0;
  }
  else
  {
    unsigned int v5 = 0;
    unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * (v4 >> 3);
    int v7 = (unsigned int *)(v3 + 28);
    unsigned int v8 = 1;
    do
    {
      *(v7 - 7) = v5;
      unsigned int v10 = *(v7 - 6);
      unsigned int v11 = *(v7 - 4);
      BOOL v12 = v11 >= v10;
      unsigned int v13 = v11 - v10;
      if (v12)
      {
        unsigned int v14 = *(v7 - 5);
        unsigned int v15 = *(v7 - 3);
        BOOL v12 = v15 >= v14;
        unsigned int v16 = v15 - v14;
        if (v12)
        {
          unsigned int v17 = v13 + 1;
          unsigned int v18 = v16 + 1;
          *int v7 = v17;
          v7[1] = v18;
          int v19 = v18 * v17;
          void v7[2] = v19;
          v5 += v19;
        }
      }
      BOOL v9 = v6 > v8++;
      v7 += 10;
    }
    while (v9);
    if (v5 > 0x100000) {
      return 0;
    }
  }
  unint64_t v21 = v5;
  uint64_t v23 = *((void *)this + 3);
  unint64_t v22 = (char *)this + 24;
  unint64_t v24 = (*((void *)this + 4) - v23) >> 3;
  if (v21 <= v24)
  {
    if (v21 < v24) {
      *((void *)this + 4) = v23 + 8 * v21;
    }
  }
  else
  {
    std::vector<altitude::TextureMap *>::__append((uint64_t)v22, v21 - v24);
  }
  if (v21)
  {
    bzero(*((void **)this + 3), 8 * v21);
    uint64_t v25 = *(void **)this;
    int v26 = (void *)*((void *)this + 1);
    if (*(void **)this != v26)
    {
      do
      {
        unint64_t v27 = (_DWORD *)*v25++;
        unsigned int v28 = v27[98];
        uint64_t v29 = (_DWORD *)(*((void *)this + 6) + 40 * v28);
        *(void *)(*((void *)this + 3)
                  + 8
                  * ((((v29[5] + v27[99]) & ~(-1 << v28))
                    - v29[1]
                    + *v29
                    + (((v29[6] + v27[100]) & ~(-1 << v28)) - v29[2]) * v29[7])
                   % v21)) = v27;
      }
      while (v25 != v26);
    }
  }
  return 1;
}

void altitude::GlobeTileRenderManager::LevelTiles::add(altitude::GlobeTileRenderManager::LevelTiles *this, altitude::Tile *a2)
{
  unint64_t v4 = *((unsigned int *)a2 + 98);
  int v5 = *((_DWORD *)a2 + 99);
  int v6 = *((_DWORD *)a2 + 100);
  uint64_t v7 = *((void *)this + 6);
  uint64_t v8 = *((void *)this + 7);
  unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v7) >> 3);
  if (v9 <= v4)
  {
    unint64_t v44 = (v4 + 1);
    unint64_t v45 = v44 - v9;
    if (v44 <= v9)
    {
      if (v44 < v9) {
        *((void *)this + 7) = v7 + 40 * v44;
      }
    }
    else
    {
      uint64_t v46 = *((void *)this + 8);
      if (0xCCCCCCCCCCCCCCCDLL * ((v46 - v8) >> 3) >= v45)
      {
        uint64_t v75 = v8 + 40 * v45;
        do
        {
          *(_DWORD *)(v8 + 8) = -1;
          *(void *)uint64_t v8 = 0xFFFFFFFF00000000;
          *(void *)(v8 + 12) = 0;
          *(void *)(v8 + 28) = 0;
          *(void *)(v8 + 20) = 0;
          *(_DWORD *)(v8 + 36) = 0;
          v8 += 40;
        }
        while (v8 != v75);
        *((void *)this + 7) = v75;
        uint64_t v7 = *((void *)this + 6);
      }
      else
      {
        unint64_t v47 = 0xCCCCCCCCCCCCCCCDLL * ((v46 - v7) >> 3);
        uint64_t v48 = 2 * v47;
        if (2 * v47 <= v44) {
          uint64_t v48 = (v4 + 1);
        }
        if (v47 >= 0x333333333333333) {
          unint64_t v49 = 0x666666666666666;
        }
        else {
          unint64_t v49 = v48;
        }
        if (v49 > 0x666666666666666) {
          goto LABEL_83;
        }
        int v50 = (char *)operator new(40 * v49);
        uint64_t v51 = &v50[40 * v9];
        uint64_t v52 = &v50[40 * v44];
        unsigned int v53 = v51;
        do
        {
          *((_DWORD *)v53 + 2) = -1;
          *(void *)unsigned int v53 = 0xFFFFFFFF00000000;
          *(void *)(v53 + 12) = 0;
          *(void *)(v53 + 28) = 0;
          *(void *)(v53 + 20) = 0;
          *((_DWORD *)v53 + 9) = 0;
          v53 += 40;
        }
        while (v53 != v52);
        uint64_t v54 = &v50[40 * v49];
        int v56 = (char *)*((void *)this + 6);
        uint64_t v55 = (char *)*((void *)this + 7);
        if (v55 != v56)
        {
          do
          {
            long long v57 = *(_OWORD *)(v55 - 40);
            long long v58 = *(_OWORD *)(v55 - 24);
            *((void *)v51 - 1) = *((void *)v55 - 1);
            *(_OWORD *)(v51 - 24) = v58;
            *(_OWORD *)(v51 - 40) = v57;
            v51 -= 40;
            v55 -= 40;
          }
          while (v55 != v56);
          uint64_t v55 = (char *)*((void *)this + 6);
        }
        *((void *)this + 6) = v51;
        *((void *)this + 7) = v52;
        *((void *)this + 8) = v54;
        if (v55) {
          operator delete(v55);
        }
        uint64_t v7 = *((void *)this + 6);
      }
    }
  }
  if (v4 >= 0x1F) {
    char v10 = 31;
  }
  else {
    char v10 = v4;
  }
  uint64_t v11 = v7 + 40 * v4;
  int v14 = *(_DWORD *)(v11 + 20);
  unsigned int v13 = (_DWORD *)(v11 + 20);
  int v12 = v14;
  unsigned int v15 = 1 << v10;
  int v16 = (1 << v10) - 1;
  unsigned int v17 = (v14 + v5) & v16;
  if (v15 >> 1 <= 0x80) {
    unsigned int v18 = 128;
  }
  else {
    unsigned int v18 = v15 >> 1;
  }
  int v19 = v13 - 2;
  unsigned int v20 = *(v13 - 2);
  unint64_t v21 = v13 - 4;
  unsigned int v22 = *(v13 - 4);
  if (v20 >= v22 && v17 > v20 && v17 - v22 > v18)
  {
    int v25 = v20 - v12;
    int v26 = v22 - v12;
    int v12 = v15 - v5;
    _DWORD *v13 = v15 - v5;
    unsigned int v20 = v25 + v15 - v5;
    unsigned int v22 = v26 + v15 - v5;
  }
  uint64_t v27 = v7 + 40 * v4;
  int v30 = *(_DWORD *)(v27 + 24);
  unsigned int v28 = (_DWORD *)(v27 + 24);
  int v29 = v30;
  unsigned int v31 = (v30 + v6) & v16;
  unsigned int v32 = *(v28 - 2);
  unsigned int v33 = *(v28 - 4);
  if (v32 >= v33 && v31 > v32 && v31 - v33 > v18)
  {
    unsigned int v31 = 0;
    int v36 = v15 - v6;
    _DWORD *v28 = v36;
    unsigned int v32 = v32 - v29 + v36;
    unsigned int v33 = v33 - v29 + v36;
  }
  unsigned int v37 = (v12 + v5) & v16;
  if (v37 >= v22) {
    unsigned int v38 = v22;
  }
  else {
    unsigned int v38 = v37;
  }
  *unint64_t v21 = v38;
  if (v20 > v37) {
    unsigned int v37 = v20;
  }
  *int v19 = v37;
  if (v31 >= v33) {
    unsigned int v39 = v33;
  }
  else {
    unsigned int v39 = v31;
  }
  *(v28 - 4) = v39;
  if (v32 <= v31) {
    unsigned int v40 = v31;
  }
  else {
    unsigned int v40 = v32;
  }
  *(v28 - 2) = v40;
  uint64_t v42 = (void *)*((void *)this + 1);
  unint64_t v41 = *((void *)this + 2);
  if ((unint64_t)v42 < v41)
  {
    *uint64_t v42 = a2;
    uint64_t v43 = v42 + 1;
    goto LABEL_78;
  }
  uint64_t v59 = *(unsigned char **)this;
  uint64_t v60 = (uint64_t)v42 - *(void *)this;
  uint64_t v61 = v60 >> 3;
  unint64_t v62 = (v60 >> 3) + 1;
  if (v62 >> 61) {
    abort();
  }
  uint64_t v63 = v41 - (void)v59;
  if (v63 >> 2 > v62) {
    unint64_t v62 = v63 >> 2;
  }
  if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v64 = v62;
  }
  if (!v64)
  {
    uint64_t v65 = 0;
    goto LABEL_67;
  }
  if (v64 >> 61) {
LABEL_83:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint64_t v65 = operator new(8 * v64);
LABEL_67:
  uint64_t v66 = &v65[8 * v61];
  uint64_t v67 = &v65[8 * v64];
  *uint64_t v66 = a2;
  uint64_t v43 = v66 + 1;
  if (v42 == (void *)v59)
  {
    uint64_t v59 = v42;
  }
  else
  {
    unint64_t v68 = (char *)v42 - v59 - 8;
    if (v68 < 0x58) {
      goto LABEL_86;
    }
    if ((unint64_t)((char *)v42 - v65 - v60) < 0x20) {
      goto LABEL_86;
    }
    uint64_t v69 = (v68 >> 3) + 1;
    BOOL v70 = &v65[8 * v61 - 16];
    uint64_t v71 = (long long *)(v42 - 2);
    uint64_t v72 = v69 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v73 = *v71;
      *(v70 - 1) = *(v71 - 1);
      _OWORD *v70 = v73;
      v70 -= 2;
      v71 -= 2;
      v72 -= 4;
    }
    while (v72);
    v66 -= v69 & 0x3FFFFFFFFFFFFFFCLL;
    v42 -= v69 & 0x3FFFFFFFFFFFFFFCLL;
    if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_86:
      do
      {
        uint64_t v74 = *--v42;
        *--uint64_t v66 = v74;
      }
      while (v42 != (void *)v59);
      uint64_t v59 = *(unsigned char **)this;
    }
  }
  *(void *)this = v66;
  *((void *)this + 1) = v43;
  *((void *)this + 2) = v67;
  if (v59) {
    operator delete(v59);
  }
LABEL_78:
  *((void *)this + 1) = v43;
}

int32x4_t md::ArrowLabelPart::prepareCollisionObject(uint64_t a1, int a2, int a3, void **this)
{
  uint64_t v5 = a1 + 768;
  if (a2) {
    uint64_t v5 = a1 + 840;
  }
  float v12 = fmaxf(*(float *)(v5 + 48), *(float *)(v5 + 52));
  *(double *)result.i64 = md::CollisionObject::resetWithCircles(this, 1u);
  uint64_t v7 = (char *)this[21];
  int v8 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = v8 + 1;
  unint64_t v9 = (float *)&v7[12 * v8];
  *(void *)unint64_t v9 = 0;
  _OWORD v9[2] = v12;
  if (v12 != 0.0)
  {
    *(float *)result.i32 = -v12;
    *(float *)&result.i32[1] = v12;
    float32x4_t v10 = (float32x4_t)vzip1q_s32(result, result);
    v11.i32[0] = vmovn_s32(vcgtq_f32(*(float32x4_t *)this, v10)).u32[0];
    v11.i32[1] = vmovn_s32(vcgtq_f32(v10, *(float32x4_t *)this)).i32[1];
    int32x4_t result = (int32x4_t)vbslq_s8((int8x16_t)vmovl_s16(v11), (int8x16_t)v10, *(int8x16_t *)this);
    *(int32x4_t *)this = result;
  }
  return result;
}

uint64_t md::ArrowLabelPart::styleLayer(md::ArrowLabelPart *this, const md::LabelStyle *a2)
{
  if (*((unsigned char *)this + 916))
  {
    uint64_t v3 = *((void *)a2 + 33);
    if (!v3)
    {
      unint64_t v4 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>((uint64_t)a2);
      uint64_t v3 = *v4;
      *((void *)a2 + 33) = *v4;
    }
    uint64_t v5 = (char *)(v3 + 63);
  }
  else
  {
    uint64_t v5 = (char *)a2 + 240;
  }
  return *v5;
}

void md::ArrowLabelPart::populateDebugNode(md::ArrowLabelPart *this, gdc::DebugTreeNode *a2)
{
  md::IconLabelPart::populateDebugNode(this, a2);
  char v13 = 14;
  strcpy((char *)&v12, "ArrowLabelPart");
  unint64_t v4 = gdc::DebugTreeNode::createChildNode((uint64_t)a2, &v12);
  double v5 = *((float *)this + 222);
  char v13 = 9;
  strcpy((char *)&v12, "HalfWidth");
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  int v11 = 2;
  double v7 = v5;
  gdc::DebugTreeNode::addProperty((uint64_t)v4, (uint64_t)&v12, (uint64_t)v6);
}

uint64_t md::ArrowLabelPart::debugString@<X0>(md::ArrowLabelPart *this@<X0>, unsigned char *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v17);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)"Arrow\n ", 7);
  md::IconLabelPart::debugString(this, __p);
  if ((v16 & 0x80u) == 0) {
    unint64_t v4 = __p;
  }
  else {
    unint64_t v4 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v5 = v16;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)v4, v5);
  if ((char)v16 < 0)
  {
    operator delete(__p[0]);
    char v6 = v24;
    if ((v24 & 0x10) == 0) {
      goto LABEL_9;
    }
LABEL_12:
    unint64_t v8 = v23;
    if (v23 < v20)
    {
      unint64_t v23 = v20;
      unint64_t v8 = v20;
    }
    uint64_t v9 = (const void **)&v19;
    goto LABEL_16;
  }
  char v6 = v24;
  if ((v24 & 0x10) != 0) {
    goto LABEL_12;
  }
LABEL_9:
  if ((v6 & 8) == 0)
  {
    size_t v7 = 0;
    a2[23] = 0;
    goto LABEL_24;
  }
  uint64_t v9 = (const void **)v18;
  unint64_t v8 = v18[2];
LABEL_16:
  uint64_t v10 = *v9;
  size_t v7 = v8 - (void)*v9;
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v7 >= 0x17)
  {
    uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v11 = v7 | 7;
    }
    uint64_t v12 = v11 + 1;
    char v13 = operator new(v11 + 1);
    *((void *)a2 + 1) = v7;
    *((void *)a2 + 2) = v12 | 0x8000000000000000;
    *(void *)a2 = v13;
    a2 = v13;
    goto LABEL_23;
  }
  a2[23] = v7;
  if (v7) {
LABEL_23:
  }
    memmove(a2, v10, v7);
LABEL_24:
  a2[v7] = 0;
  v17[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v17[1] = MEMORY[0x1E4FBA470] + 16;
  if (v22 < 0) {
    operator delete(v21);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A62391A0](&v25);
}

void sub_1A27A7A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void md::ArrowLabelPart::setPosition(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3 = a1 + 768;
  uint64_t v4 = 840;
  if (a2) {
    uint64_t v3 = a1 + 840;
  }
  else {
    uint64_t v4 = 768;
  }
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + v4) = v6;
  size_t v7 = *(std::__shared_weak_count **)(v3 + 8);
  *(void *)(v3 + 8) = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t md::ArrowLabelPart::setUseExternalLayoutOptions(uint64_t result, int a2, char a3)
{
  uint64_t v3 = result + 768;
  if (a2) {
    uint64_t v3 = result + 840;
  }
  *(unsigned char *)(v3 + 68) = a3;
  return result;
}

uint64_t md::ArrowLabelPart::setLayoutInReverse(uint64_t result, int a2, char a3)
{
  uint64_t v3 = result + 768;
  if (a2) {
    uint64_t v3 = result + 840;
  }
  *(unsigned char *)(v3 + 67) = a3;
  return result;
}

uint64_t md::ArrowLabelPart::setLayoutStartOffset(uint64_t result, int a2, float a3)
{
  uint64_t v3 = result + 768;
  if (a2) {
    uint64_t v3 = result + 840;
  }
  *(float *)(v3 + 60) = a3;
  return result;
}

uint64_t md::ArrowLabelPart::setAlignment(uint64_t result, int a2, char a3)
{
  uint64_t v3 = result + 768;
  if (a2) {
    uint64_t v3 = result + 840;
  }
  *(unsigned char *)(v3 + 66) = a3;
  return result;
}

float md::ArrowLabelPart::hikerWidth(uint64_t a1, int a2)
{
  uint64_t v2 = (float *)(a1 + 72);
  uint64_t v3 = 312;
  if (a2) {
    uint64_t v2 = (float *)(a1 + 312);
  }
  else {
    uint64_t v3 = 72;
  }
  float v4 = v2[2];
  float v5 = *(float *)(a1 + v3);
  float v6 = 0.0;
  if (v4 < v5) {
    return fmaxf(0.0, 0.0);
  }
  float v8 = v2[3];
  float v9 = v2[1];
  float v10 = 0.0;
  if (v8 >= v9)
  {
    float v6 = v4 - v5;
    float v10 = v8 - v9;
  }
  return fmaxf(v6, v10);
}

float md::ArrowLabelPart::localBoundsOffset(uint64_t a1, int a2)
{
  uint64_t v2 = a1 + 768;
  if (a2) {
    uint64_t v2 = a1 + 840;
  }
  return *(float *)(v2 + 40);
}

uint64_t md::ArrowLabelPart::layoutForDisplay(uint64_t a1, uint64_t a2, double a3, double a4, uint64_t a5, float32x2_t *a6)
{
  if (*(_DWORD *)(a1 + 896) == *(_DWORD *)(a2 + 1616))
  {
    uint64_t v8 = *(unsigned __int8 *)(a1 + 904);
  }
  else
  {
    (*(void (**)(std::mutex **__return_ptr))(**(void **)(a1 + 840) + 32))(&v28);
    if (v28) {
      BOOL v10 = v29 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (v10)
    {
      if (*(unsigned char *)(a1 + 904) == 37) {
        uint64_t v8 = 37;
      }
      else {
        uint64_t v8 = 31;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 896) = *(_DWORD *)(a2 + 1616);
      uint64_t v8 = md::ArrowLabelPart::layoutAlongPath(a1, 1, a2 + 440, a6->f32[0], a6->f32[1]);
      *(unsigned char *)(a1 + 904) = v8;
      if (v8 == 37) {
        *(unsigned char *)(a1 + 905) = 1;
      }
    }
    if (v29) {
      std::mutex::unlock(v28);
    }
  }
  if (*(unsigned char *)(a1 + 908))
  {
    double v11 = *(double *)(a1 + 880);
    float32x2_t v12 = vadd_f32(*(float32x2_t *)&v11, *a6);
  }
  else
  {
    float32x2_t v26 = *a6;
    char v13 = *(unsigned __int8 **)(a1 + 840);
    int v14 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v13 + 80))(v13);
    int v15 = v13[45];
    if (v13[45]) {
      int v16 = 1;
    }
    else {
      int v16 = 2;
    }
    if (v15 == 2) {
      int v16 = 0;
    }
    if (v14) {
      int v15 = v16;
    }
    if (v15 == 1)
    {
      float32x2_t v12 = v26;
    }
    else
    {
      LODWORD(v11) = *(_DWORD *)(a1 + 888);
      a4 = *(double *)(a1 + 864);
      float32x2_t v12 = vmla_n_f32(v26, *(float32x2_t *)&a4, *(float *)&v11);
    }
  }
  float32x2_t v27 = v12;
  *(float32x2_t *)(a1 + 520) = v12;
  *(float32x2_t *)(a1 + 344) = v12;
  md::CollisionObject::setupShapeData(a1 + 312, v11, a4, *(double *)&v12);
  *(_DWORD *)(a1 + 608) = *(_DWORD *)(*(void *)(a1 + 16) + 1300);
  if (*(unsigned char *)(a1 + 905))
  {
    float v17 = *(float *)(a1 + 888);
    float v18 = *(float *)(a1 + 856);
    float v19 = v18 * v17;
    float v20 = *(float *)(a1 + 860);
    float v21 = v20 * v17;
    float v22 = *(float *)(a1 + 892);
    float v23 = -(float)(v20 * v22);
    float v24 = v22 * v18;
    *(float *)(a1 + 696) = v27.f32[0] - (float)(v23 + v19);
    *(float *)(a1 + 700) = v27.f32[1] - (float)(v24 + v21);
    *(float *)(a1 + 704) = (float)(v19 + v27.f32[0]) - v23;
    *(float *)(a1 + 708) = (float)(v21 + v27.f32[1]) - v24;
    *(float *)(a1 + 712) = (float)(v23 + v19) + v27.f32[0];
    *(float *)(a1 + 716) = (float)(v24 + v21) + v27.f32[1];
    *(float *)(a1 + 720) = (float)(v27.f32[0] - v19) + v23;
    *(float *)(a1 + 724) = (float)(v27.f32[1] - v21) + v24;
  }
  return v8;
}

void sub_1A27A7DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  if (a12) {
    std::mutex::unlock(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::ArrowLabelPart::layoutAlongPath(uint64_t a1, int a2, uint64_t a3, float a4, float a5)
{
  if (a2) {
    uint64_t v8 = 840;
  }
  else {
    uint64_t v8 = 768;
  }
  if (a2) {
    float v9 = (float32x2_t *)(a1 + 840);
  }
  else {
    float v9 = (float32x2_t *)(a1 + 768);
  }
  double v10 = md::LabelPart::createHiker(&v33, a1, a2, *(void *)(a1 + v8), a3);
  double v11 = v33;
  (*(void (**)(float32x2_t *, double))(*(void *)v33 + 88))(v33, v10);
  if (!v11[1].i8[1]) {
    goto LABEL_39;
  }
  if (v9[8].i8[4])
  {
    v11[1].i8[3] = v9[8].i8[3];
    v11[1].i8[0] = 1;
    (*(void (**)(float32x2_t *, float32_t))(*(void *)v11 + 56))(v11, v9[7].f32[1]);
    (*(void (**)(float32x2_t *))(*(void *)v11 + 88))(v11);
    if (v11[1].i8[2]) {
      goto LABEL_39;
    }
    (*(void (**)(float32x2_t *))(*(void *)v11 + 88))(v11);
    if (!v11[1].i8[1]) {
      goto LABEL_39;
    }
    float v12 = v9[6].f32[0];
  }
  else
  {
    char v13 = *(unsigned __int8 **)(a1 + v8);
    int v14 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v13 + 80))(v13);
    int v15 = v13[45];
    if (v13[45]) {
      char v16 = 1;
    }
    else {
      char v16 = 2;
    }
    if (v15 == 2) {
      char v16 = 0;
    }
    if (v14) {
      LOBYTE(v15) = v16;
    }
    v11[1].i8[3] = v15 == 2;
    v11[1].i8[0] = 1;
    float v17 = *(unsigned __int8 **)(a1 + v8);
    int v18 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v17 + 80))(v17);
    int v19 = v17[45];
    if (v17[45]) {
      int v20 = 1;
    }
    else {
      int v20 = 2;
    }
    if (v19 == 2) {
      int v20 = 0;
    }
    if (v18) {
      int v19 = v20;
    }
    if (v19 == 1) {
      (*(void (**)(float32x2_t *, float))(*(void *)v11 + 40))(v11, -v9[6].f32[0]);
    }
    (*(void (**)(float32x2_t *))(*(void *)v11 + 88))(v11);
    if (!v11[1].i8[1]) {
      goto LABEL_39;
    }
    float v12 = v9[6].f32[0] + v9[6].f32[0];
  }
  (*(void (**)(float32x2_t *))(*(void *)v11 + 88))(v11);
  float32x2_t v31 = v11[2];
  __int32 v32 = v11[3].i32[0];
  (*(void (**)(float32x2_t *))(*(void *)v11 + 88))(v11);
  float v21 = v11[3].f32[1];
  float32x2_t v22 = v11[4];
  (*(void (**)(float32x2_t *, float))(*(void *)v11 + 40))(v11, v12);
  (*(void (**)(float32x2_t *))(*(void *)v11 + 88))(v11);
  if (!v11[1].i8[1]) {
    goto LABEL_39;
  }
  (*(void (**)(float32x2_t *))(*(void *)v11 + 88))(v11);
  (*(void (**)(float32x2_t *))(*(void *)v11 + 88))(v11);
  float32x2_t v23 = vmul_f32(v11[4], v22);
  if ((float)((float)(v23.f32[0] + (float)(v11[3].f32[1] * v21)) + v23.f32[1]) < 0.9)
  {
    uint64_t v24 = 18;
    goto LABEL_40;
  }
  if (*(void *)&v31 == *(void *)&v11[2] && v32 == (unint64_t)v11[3].u32[0])
  {
LABEL_39:
    uint64_t v24 = 9;
    goto LABEL_40;
  }
  float32x2_t v26 = vsub_f32(v11[2], v31);
  v9[3] = vmul_n_f32(v26, 1.0 / sqrtf(vaddv_f32(vmul_f32(v26, v26))));
  int v27 = (*(uint64_t (**)(void))(**(void **)(a1 + v8) + 144))(*(void *)(a1 + v8));
  if (((v27 != 1) ^ (*(unsigned int (**)(void))(**(void **)(a1 + v8) + 160))(*(void *)(a1 + v8))) == (v11[1].i8[3] != 0)) {
    float32x2_t v28 = vneg_f32(v9[3]);
  }
  else {
    float32x2_t v28 = v9[3];
  }
  _OWORD v9[2] = v28;
  float32_t v30 = v11[2].f32[1] - a5;
  v9[5].f32[0] = v11[2].f32[0] - a4;
  v9[5].f32[1] = v30;
  uint64_t v24 = 37;
LABEL_40:
  (*(void (**)(float32x2_t *))(*(void *)v11 + 8))(v11);
  return v24;
}

void sub_1A27A82D8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t md::ArrowLabelPart::updateForDisplay(uint64_t this)
{
  uint64_t v1 = this;
  *(void *)(this + 888) = *(void *)(this + 816);
  float v2 = *(float *)(this + 588);
  *(float *)(this + 612) = v2;
  uint64_t v3 = *(void *)(this + 572);
  *(_DWORD *)(this + 604) = *(_DWORD *)(this + 580);
  *(void *)(this + 596) = v3;
  *(unsigned char *)(this + 617) = *(unsigned char *)(this + 593);
  char v4 = *(unsigned char *)(this + 633) + 4 * *(unsigned char *)(this + 594);
  *(unsigned char *)(this + 556) = v4;
  *(unsigned char *)(this + 658) = v4;
  int v5 = *(unsigned __int8 *)(this + 592);
  *(unsigned char *)(this + 657) = v5;
  BOOL v6 = v5 == 4;
  if (v6) {
    char v7 = 2;
  }
  else {
    char v7 = 1;
  }
  *(unsigned char *)(this + 765) = v6;
  float v8 = *(float *)(this + 752);
  *(unsigned char *)(this + 685) = v7;
  if (v2 != v8)
  {
    *(float *)(this + 752) = v2;
    this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)this + 912))(this, 1, this + 640, this + 312);
  }
  if (*(unsigned char *)(v1 + 917))
  {
    *(unsigned char *)(v1 + 917) = 0;
    float v9 = *(uint64_t (**)(void))(**(void **)(v1 + 768) + 24);
    return v9();
  }
  return this;
}

uint64_t md::ArrowLabelPart::prepareForDisplay(uint64_t this, md::LabelManager *a2)
{
  uint64_t v2 = this;
  *(void *)(this + 888) = *(void *)(this + 816);
  float v3 = *(float *)(this + 612);
  if (v3 != *(float *)(this + 752)
    || *(float *)(this + 320) < *(float *)(this + 312)
    || *(float *)(this + 324) < *(float *)(this + 316))
  {
    *(float *)(this + 752) = v3;
    this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)this + 912))(this, 1, this + 640, this + 312);
  }
  if (*(unsigned char *)(v2 + 565)) {
    operator new();
  }
  if (!*(unsigned char *)(v2 + 836))
  {
    char v4 = *(uint64_t (**)(void))(**(void **)(v2 + 768) + 24);
    return v4();
  }
  return this;
}

uint64_t md::ArrowLabelPart::layoutForStaging(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v6 = *(void *)(a1 + 640);
  if (!v6) {
    goto LABEL_6;
  }
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)(v6 + 142));
  if ((v7 & 1) == 0) {
    return 15;
  }
  unsigned __int8 v9 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 640) + 143));
  if ((v9 & 1) == 0) {
    return 16;
  }
LABEL_6:
  if (*(float *)(a1 + 912) == 0.0)
  {
    float v10 = (*(float (**)(uint64_t))(*(void *)a1 + 920))(a1);
    float v14 = (float)(v11 - v10) / (float)(v13 - v12);
    *(float *)(a1 + 912) = v14;
    *(float *)(a1 + 816) = v14 * *(float *)(a1 + 820);
  }
  uint64_t v15 = *(void *)(a2 + 432);
  if (!*(unsigned char *)(a1 + 836)
    && (*(unsigned int (**)(void, void))(**(void **)(a1 + 768) + 168))(*(void *)(a1 + 768), (int)*(float *)(*(void *)(a1 + 32) + 16))&& (*(unsigned int (**)(void, void, double))(**(void **)(a1 + 768) + 176))(*(void *)(a1 + 768), (int)*(float *)(*(void *)(a1 + 32) + 16), 1.0))
  {
    *(unsigned char *)(a1 + 917) = 1;
  }
  int v16 = *(_DWORD *)(v15 + 1176);
  if (*(_DWORD *)(a1 + 824) != v16)
  {
    *(_DWORD *)(a1 + 824) = v16;
    *(unsigned char *)(a1 + 832) = md::ArrowLabelPart::layoutAlongPath(a1, 0, v15, *a3, a3[1]);
  }
  uint64_t v17 = *(void *)(a1 + 640);
  if (!v17 || (unsigned __int8 v18 = atomic_load((unsigned __int8 *)(v17 + 143)), (v18 & 1) != 0))
  {
    if (*(unsigned char *)(a1 + 629))
    {
      *(unsigned char *)(a1 + 629) = 0;
      double v19 = (*(double (**)(uint64_t, void))(*(void *)a1 + 936))(a1, *(void *)(a1 + 640));
      *(float *)&double v19 = 0.5 - (float)(fminf(v22 - v21, v20 - *(float *)&v19) * 0.5);
      *(float32x2_t *)(a1 + 168) = vmaxnm_f32(*(float32x2_t *)(a1 + 620), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v19, 0));
      *(unsigned char *)(a1 + 271) = *(unsigned char *)(a1 + 631);
      *(unsigned char *)(a1 + 272) = *(unsigned char *)(a1 + 630);
    }
  }
  md::IconLabelPart::updateCollisionObject(a1, 0);
  float32x2_t v25 = *(float32x2_t *)a3;
  if (*(unsigned char *)(a1 + 836))
  {
    double v26 = *(double *)(a1 + 808);
    float32x2_t v25 = vadd_f32(*(float32x2_t *)&v26, v25);
  }
  else
  {
    int v27 = *(unsigned __int8 **)(a1 + 768);
    int v28 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v27 + 80))(v27);
    int v29 = v27[45];
    if (v27[45]) {
      int v30 = 1;
    }
    else {
      int v30 = 2;
    }
    if (v29 == 2) {
      int v30 = 0;
    }
    if (v28) {
      int v29 = v30;
    }
    if (v29 != 1)
    {
      LODWORD(v26) = *(_DWORD *)(a1 + 816);
      double v23 = *(double *)(a1 + 792);
      float32x2_t v25 = vmla_n_f32(v25, *(float32x2_t *)&v23, *(float *)&v26);
    }
  }
  *(float32x2_t *)(a1 + 280) = v25;
  *(float32x2_t *)(a1 + 104) = v25;
  md::CollisionObject::setupShapeData(a1 + 72, v26, v23, v24);
  return *(unsigned __int8 *)(a1 + 832);
}

float md::ArrowLabelPart::updateWithStyle(uint64_t **this, md::LabelManager *a2)
{
  md::ImageLabelPart::updateWithStyle((md::ImageLabelPart *)this, a2);
  uint64_t v3 = *this[4];
  uint64_t v4 = *(void *)(v3 + 264);
  if (!v4)
  {
    int v5 = md::LabelStyle::prepareStyleGroup<md::LabelLineStyleGroup>(*this[4]);
    uint64_t v4 = *v5;
    *(void *)(v3 + 264) = *v5;
  }
  float v6 = *((float *)this + 147) * *(float *)(v4 + 48);
  *((float *)this + 205) = v6;
  float result = *((float *)this + 228) * v6;
  *((float *)this + 204) = result;
  return result;
}

void md::ArrowLabelPart::~ArrowLabelPart(md::ArrowLabelPart *this)
{
  *(void *)this = &unk_1EF5334F0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 106);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 97);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  md::IconLabelPart::~IconLabelPart(this);
  {
    operator new();
  }
  uint64_t v4 = *(void (**)(void))(*(void *)mdm::Allocator::instance(void)::alloc + 40);
  v4();
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF5334F0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 106);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 97);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 97);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::IconLabelPart::~IconLabelPart(this);
}

BOOL gm::Ray<float,3>::segmentIntersectsBox(float *a1, float *a2, float *a3, float *a4)
{
  *a3 = 0.0;
  *a4 = 3.4028e38;
  float v4 = a1[3];
  float v5 = *a2;
  if (fabsf(v4) >= 0.000001)
  {
    float v7 = 1.0 / v4;
    float v8 = (float)(v5 - *a1) * v7;
    float v9 = (float)(a2[3] - *a1) * v7;
    *a3 = fmaxf(*a3, fminf(v8, v9));
    float v10 = fminf(fmaxf(v8, v9), *a4);
    *a4 = v10;
    if (*a3 > v10) {
      return 0;
    }
  }
  else if (*a1 < v5 || *a1 > a2[3])
  {
    return 0;
  }
  float v11 = a1[4];
  if (fabsf(v11) >= 0.000001)
  {
    float v13 = 1.0 / v11;
    float v14 = a1[1];
    float v15 = (float)(a2[1] - v14) * v13;
    float v16 = (float)(a2[4] - v14) * v13;
    *a3 = fmaxf(*a3, fminf(v15, v16));
    float v17 = fminf(fmaxf(v15, v16), *a4);
    *a4 = v17;
    if (*a3 > v17) {
      return 0;
    }
  }
  else
  {
    float v12 = a1[1];
    if (v12 < a2[1] || v12 > a2[4]) {
      return 0;
    }
  }
  float v18 = a1[5];
  if (fabsf(v18) < 0.000001)
  {
    float v19 = a1[2];
    return v19 >= a2[2] && v19 <= a2[5];
  }
  float v21 = 1.0 / v18;
  float v22 = a1[2];
  float v23 = (float)(a2[2] - v22) * v21;
  float v24 = (float)(a2[5] - v22) * v21;
  *a3 = fmaxf(*a3, fminf(v23, v24));
  float v25 = fminf(fmaxf(v23, v24), *a4);
  *a4 = v25;
  return *a3 <= v25;
}

BOOL gm::Ray<double,3>::segmentIntersectsBox(double *a1, double *a2, double *a3, double *a4, double a5)
{
  *a3 = 0.0;
  *a4 = a5;
  double v5 = a1[3];
  double v6 = *a2;
  if (fabs(v5) >= 0.000001)
  {
    double v8 = 1.0 / v5;
    double v9 = (v6 - *a1) * v8;
    double v10 = (a2[3] - *a1) * v8;
    *a3 = fmax(*a3, fmin(v9, v10));
    double v11 = fmin(fmax(v9, v10), *a4);
    *a4 = v11;
    if (*a3 > v11) {
      return 0;
    }
  }
  else if (*a1 < v6 || *a1 > a2[3])
  {
    return 0;
  }
  double v12 = a1[4];
  if (fabs(v12) >= 0.000001)
  {
    double v14 = 1.0 / v12;
    double v15 = a1[1];
    double v16 = (a2[1] - v15) * v14;
    double v17 = (a2[4] - v15) * v14;
    *a3 = fmax(*a3, fmin(v16, v17));
    double v18 = fmin(fmax(v16, v17), *a4);
    *a4 = v18;
    if (*a3 > v18) {
      return 0;
    }
  }
  else
  {
    double v13 = a1[1];
    if (v13 < a2[1] || v13 > a2[4]) {
      return 0;
    }
  }
  double v19 = a1[5];
  if (fabs(v19) < 0.000001)
  {
    double v20 = a1[2];
    return v20 >= a2[2] && v20 <= a2[5];
  }
  double v22 = 1.0 / v19;
  double v23 = a1[2];
  double v24 = (a2[2] - v23) * (1.0 / v19);
  double v25 = (a2[5] - v23) * v22;
  *a3 = fmax(*a3, fmin(v24, v25));
  double v26 = fmin(fmax(v24, v25), *a4);
  *a4 = v26;
  return *a3 <= v26;
}

void gm::Matrix<double,3,1>::description(uint64_t a1, double *a2)
{
  *(unsigned char *)(a1 + 23) = 0;
  *(unsigned char *)a1 = 0;
  char v8 = 1;
  strcpy(__s, "(");
  std::string::append((std::string *)a1, __s, 1uLL);
  if (v8 < 0) {
    operator delete(*(void **)__s);
  }
  snprintf(__s, 7uLL, "%3.6f", *a2);
  size_t v4 = strlen(__s);
  std::string::append((std::string *)a1, __s, v4);
  char v8 = 2;
  strcpy(__s, ")\n");
  std::string::append((std::string *)a1, __s, 2uLL);
  if (v8 < 0) {
    operator delete(*(void **)__s);
  }
  char v8 = 1;
  strcpy(__s, "(");
  std::string::append((std::string *)a1, __s, 1uLL);
  if (v8 < 0) {
    operator delete(*(void **)__s);
  }
  snprintf(__s, 7uLL, "%3.6f", a2[1]);
  size_t v5 = strlen(__s);
  std::string::append((std::string *)a1, __s, v5);
  char v8 = 2;
  strcpy(__s, ")\n");
  std::string::append((std::string *)a1, __s, 2uLL);
  if (v8 < 0) {
    operator delete(*(void **)__s);
  }
  char v8 = 1;
  strcpy(__s, "(");
  std::string::append((std::string *)a1, __s, 1uLL);
  if (v8 < 0) {
    operator delete(*(void **)__s);
  }
  snprintf(__s, 7uLL, "%3.6f", a2[2]);
  size_t v6 = strlen(__s);
  std::string::append((std::string *)a1, __s, v6);
  char v8 = 2;
  strcpy(__s, ")\n");
  std::string::append((std::string *)a1, __s, 2uLL);
  if (v8 < 0) {
    operator delete(*(void **)__s);
  }
}

void gm::Matrix<double,4,4>::description(std::string *this, uint64_t a2)
{
  uint64_t v4 = 0;
  *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
  this->__r_.__value_.__s.__data_[0] = 0;
  do
  {
    uint64_t v35 = v4;
    char v37 = 1;
    strcpy(__s, "(");
    std::string::append(this, __s, 1uLL);
    if (v37 < 0) {
      operator delete(*(void **)__s);
    }
    for (uint64_t i = 0; ; i += 32)
    {
      snprintf(__s, 7uLL, "%3.6f", *(double *)(a2 + i));
      size_t v7 = strlen(__s);
      size_t v8 = v7;
      int v9 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
      if (v9 >= 0) {
        std::string::size_type v10 = 22;
      }
      else {
        std::string::size_type v10 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      }
      if (v9 >= 0) {
        size_t size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = this->__r_.__value_.__l.__size_;
      }
      if (v10 - size < v7)
      {
        std::string::size_type v12 = size + v7;
        if (0x7FFFFFFFFFFFFFF6 - v10 < size + v7 - v10) {
          goto LABEL_77;
        }
        if (v9 >= 0) {
          double v13 = this;
        }
        else {
          double v13 = (std::string *)this->__r_.__value_.__r.__words[0];
        }
        if (v10 >= 0x3FFFFFFFFFFFFFF3)
        {
          uint64_t v19 = 0x7FFFFFFFFFFFFFF6;
        }
        else
        {
          unint64_t v14 = 2 * v10;
          if (v12 > 2 * v10) {
            unint64_t v14 = size + v7;
          }
          if (v14 < 0x17)
          {
            size_t v15 = 23;
LABEL_37:
            float v21 = operator new(v15);
            std::string::size_type v22 = (std::string::size_type)v21;
            if (size) {
              memmove(v21, v13, size);
            }
            memcpy((void *)(v22 + size), __s, v8);
            if (v10 != 22) {
              operator delete(v13);
            }
            this->__r_.__value_.__l.__size_ = v12;
            this->__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
            this->__r_.__value_.__r.__words[0] = v22;
            double v18 = (unsigned char *)(v22 + v12);
            goto LABEL_42;
          }
          unint64_t v20 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
          uint64_t v19 = v14 | 7;
          if (v19 == 23) {
            uint64_t v19 = v20;
          }
        }
        size_t v15 = v19 + 1;
        goto LABEL_37;
      }
      if (!v7) {
        goto LABEL_43;
      }
      double v16 = v9 >= 0 ? this : (std::string *)this->__r_.__value_.__r.__words[0];
      memmove((char *)v16 + size, __s, v7);
      std::string::size_type v17 = size + v8;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
        this->__r_.__value_.__l.__size_ = v17;
      }
      else {
        *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
      }
      double v18 = (char *)v16 + v17;
LABEL_42:
      *double v18 = 0;
LABEL_43:
      if (i == 96) {
        break;
      }
      int v23 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
      if (v23 >= 0) {
        std::string::size_type v24 = 22;
      }
      else {
        std::string::size_type v24 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      }
      if (v23 >= 0) {
        size_t v25 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v25 = this->__r_.__value_.__l.__size_;
      }
      if (v24 - v25 >= 2)
      {
        if (v23 >= 0) {
          float32x2_t v31 = this;
        }
        else {
          float32x2_t v31 = (std::string *)this->__r_.__value_.__r.__words[0];
        }
        *(_WORD *)((char *)&v31->__r_.__value_.__l.__data_ + v25) = 8236;
        std::string::size_type v32 = v25 + 2;
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
          this->__r_.__value_.__l.__size_ = v32;
        }
        else {
          *((unsigned char *)&this->__r_.__value_.__s + 23) = v32 & 0x7F;
        }
        size_t v6 = (char *)v31 + v32;
      }
      else
      {
        std::string::size_type v26 = v25 + 2;
        if (0x7FFFFFFFFFFFFFF6 - v24 < v25 + 2 - v24) {
LABEL_77:
        }
          abort();
        if (v23 >= 0) {
          int v27 = this;
        }
        else {
          int v27 = (std::string *)this->__r_.__value_.__r.__words[0];
        }
        if (v24 >= 0x3FFFFFFFFFFFFFF3)
        {
          size_t v30 = 0x7FFFFFFFFFFFFFF7;
        }
        else
        {
          unint64_t v28 = 2 * v24;
          if (v26 > 2 * v24) {
            unint64_t v28 = v25 + 2;
          }
          uint64_t v29 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v28 | 7) != 0x17) {
            uint64_t v29 = v28 | 7;
          }
          if (v28 >= 0x17) {
            size_t v30 = v29 + 1;
          }
          else {
            size_t v30 = 23;
          }
        }
        unsigned int v33 = operator new(v30);
        std::string::size_type v34 = (std::string::size_type)v33;
        if (v25) {
          memmove(v33, v27, v25);
        }
        *(_WORD *)(v34 + v25) = 8236;
        if (v24 != 22) {
          operator delete(v27);
        }
        this->__r_.__value_.__l.__size_ = v26;
        this->__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
        this->__r_.__value_.__r.__words[0] = v34;
        size_t v6 = (unsigned char *)(v34 + v26);
      }
      *size_t v6 = 0;
    }
    char v37 = 2;
    strcpy(__s, ")\n");
    std::string::append(this, __s, 2uLL);
    if (v37 < 0) {
      operator delete(*(void **)__s);
    }
    uint64_t v4 = v35 + 1;
    a2 += 8;
  }
  while (v35 != 3);
}

void gm::Quaternion<double>::slerp(double *a1, double *a2, double a3)
{
  double v7 = *a1;
  double v6 = a1[1];
  double v8 = *a2;
  double v10 = a1[2];
  double v9 = a1[3];
  double v11 = *a2 * *a1 + a2[1] * v6 + a2[2] * v10 + a2[3] * v9;
  if (v11 >= 1.0 || v11 <= -1.0)
  {
    *a1 = v8;
    a1[1] = a2[1];
    a1[2] = a2[2];
    double v13 = a2[3];
  }
  else
  {
    double v14 = fabs(v11);
    if (v14 <= 0.95)
    {
      long double v19 = acos(v14);
      long double v20 = sin(v19);
      long double v21 = v19 - a3 * v19;
      double v34 = a3;
      long double v22 = 1.0 / v20;
      long double v23 = sin(v21) * (1.0 / v20);
      double v24 = sin(v19 * v34) * v22;
      double v25 = v23 * v7;
      double v26 = v23 * v6;
      *a1 = v23 * v7;
      a1[1] = v23 * v6;
      double v27 = v23 * v10;
      double v28 = v23 * v9;
      a1[2] = v23 * v10;
      a1[3] = v23 * v9;
      double v30 = *a2;
      double v29 = a2[1];
      double v32 = a2[2];
      double v31 = a2[3];
      if (v11 <= 0.0)
      {
        *a1 = v25 - v30 * v24;
        a1[1] = v26 - v29 * v24;
        a1[2] = v27 - v32 * v24;
        double v13 = v28 - v31 * v24;
      }
      else
      {
        *a1 = v25 + v30 * v24;
        a1[1] = v26 + v29 * v24;
        a1[2] = v27 + v32 * v24;
        double v13 = v28 + v31 * v24;
      }
    }
    else
    {
      if (v11 <= 0.0)
      {
        *a1 = -v7;
        a1[1] = -v6;
        a1[2] = -v10;
        a1[3] = -v9;
        double v15 = -(v7 - (*a2 + v7) * a3);
        *a1 = v15;
        double v16 = -(v6 - (a2[1] + v6) * a3);
        a1[1] = v16;
        double v17 = -(v10 - (a2[2] + v10) * a3);
        a1[2] = v17;
        double v18 = -(v9 - (a2[3] + v9) * a3);
      }
      else
      {
        double v15 = v7 + (v8 - v7) * a3;
        *a1 = v15;
        double v16 = v6 + (a2[1] - v6) * a3;
        a1[1] = v16;
        double v17 = v10 + (a2[2] - v10) * a3;
        a1[2] = v17;
        double v18 = v9 + (a2[3] - v9) * a3;
      }
      double v33 = 1.0 / sqrt(v15 * v15 + v16 * v16 + v17 * v17 + v18 * v18);
      *a1 = v33 * v15;
      a1[1] = v33 * v16;
      a1[2] = v33 * v17;
      double v13 = v33 * v18;
    }
  }
  a1[3] = v13;
}

void sub_1A27AA04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a16 < 0)
  {
    operator delete(a11);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a30 & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_5:
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker(v30 - 88);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(__p);
  goto LABEL_5;
}

void sub_1A27AA0B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if ((a24 & 0x80000000) == 0) {
    JUMPOUT(0x1A27AA070);
  }
  JUMPOUT(0x1A27AA068);
}

void sub_1A27AA0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A27AA648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  std::function<void ()(gm::Range<unsigned long> const&,gm::Range<unsigned long> const&,ggl::DataWrite<ggl::PolygonCommonStroke::DefaultVbo> &,ggl::DataWrite<unsigned short> &)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A27AA65C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::function<void ()(gm::Range<unsigned long> const&,gm::Range<unsigned long> const&,ggl::DataWrite<ggl::PolygonCommonStroke::DefaultVbo> &,ggl::DataWrite<unsigned short> &)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1A27AAD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A27AAF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::function<void ()(gm::Range<unsigned long> const&,gm::Range<unsigned long> const&,ggl::DataWrite<ggl::PolygonBase::CompressedVbo> &,ggl::DataWrite<unsigned short> &)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A27AB4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  MEMORY[0x1A6239270](v17, 0x10F1C40141CD30ALL);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1A27AC280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_ullong *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (!atomic_fetch_add(a10, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  if (a19 && !atomic_fetch_add(&a19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a19->__on_zero_shared)(a19);
    std::__shared_weak_count::__release_weak(a19);
  }
  if (a21)
  {
    if (!atomic_fetch_add(&a21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a21->__on_zero_shared)(a21);
      std::__shared_weak_count::__release_weak(a21);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<ggl::PolygonCommonStroke::MeshMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::PolygonCommonStroke::MeshMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5882B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::PolygonCommonStroke::MeshMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5882B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1A27ACFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void sub_1A27AD080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  JUMPOUT(0x1A27AD074);
}

void sub_1A27AD67C(_Unwind_Exception *exception_object)
{
}

void sub_1A27AD688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1A27AD918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_1A27AE004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, md::DynamicTrafficTileList *a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v32);
  if (a31) {
    std::default_delete<md::MeshSetStorage>::operator()[abi:nn180100](a31);
  }
  ggl::BufferMemory::~BufferMemory(v34);
  ggl::BufferMemory::~BufferMemory(v33);
  md::DynamicTrafficTileList::~DynamicTrafficTileList(a10);
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1A27AE06C(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 - 128);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonCommonStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonCommonStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::operator()(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, void *a4@<X8>)
{
  uint64_t v7 = *a1;
  double v8 = operator new(0xF8uLL);
  double v9 = v8;
  v8[1] = 0;
  v8[2] = 0;
  *double v8 = &unk_1EF584C40;
  double v10 = v8 + 3;
  uint64_t v11 = *(void *)(a2 + 24);
  std::string::size_type v12 = *(std::__shared_weak_count **)(a2 + 32);
  v13[0] = v11;
  v13[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ggl::BufferData::BufferData((uint64_t)(v8 + 3), 24, v13, *a3, a3[1], 1);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  v9[29] = v7;
  v9[30] = &ggl::PolygonCommonStroke::defaultVboReflection;
  v9[3] = &unk_1EF55C888;
  v9[28] = &unk_1EF55C8A8;
  *a4 = v10;
  a4[1] = v9;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolygonCommonStroke::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolygonCommonStroke::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584C40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::PolygonCommonStroke::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584C40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonCommonStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonCommonStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF570BA8;
}

void *std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonCommonStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonCommonStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::__clone()
{
  float result = operator new(0x10uLL);
  *float result = &unk_1EF570BA8;
  return result;
}

void std::__function::__func<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonCommonStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1},std::allocator<std::shared_ptr<md::MeshSetStorageClient> md::MeshSetStorage::registerClient<ggl::PolygonCommonStroke::DefaultVbo>(void)::{lambda(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)#1}>,std::shared_ptr<ggl::VertexData> ()(char const*,ggl::BufferData const&,gm::Range<unsigned long> const&)>::~__func()
{
}

void sub_1A27AE350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void md::Logic<md::PuckLocationAnimationTracingLogic,md::PuckLocationAnimationTracingContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    size_t v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      size_t v5 = __p;
    }
    std::string::size_type v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void md::PuckLocationAnimationTracingLogic::publishEvent(uint64_t a1, uint64_t a2, int a3)
{
  if (*(void *)(a1 + 368))
  {
    double v6 = [MEMORY[0x1E4F64860] sharedPlatform];
    int v7 = [v6 isInternalInstall];

    if (v7)
    {
      double v8 = [[VKNavigationPuckLocationTracingEvent alloc] initWithEventType:qword_1A29C67E8[a3] timestamp:*(void *)(a2 + 24) locationUUID:CFAbsoluteTimeGetCurrent()];
      double v10 = v8;
      uint64_t v9 = *(void *)(a1 + 368);
      if (v9)
      {
        (*(void (**)(uint64_t, VKNavigationPuckLocationTracingEvent **))(*(void *)v9 + 48))(v9, &v10);
      }
      else
      {
        std::__throw_bad_function_call[abi:nn180100]();
        __break(1u);
      }
    }
  }
}

void sub_1A27AE574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1A27AE58C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL30GEOGetVectorKitPuckTrackingLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "PuckTracking");
  uint64_t v1 = (void *)GEOGetVectorKitPuckTrackingLog(void)::log;
  GEOGetVectorKitPuckTrackingLog(void)::log = (uint64_t)v0;
}

uint64_t md::Logic<md::PuckLocationAnimationTracingLogic,md::PuckLocationAnimationTracingContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::PuckLocationAnimationTracingLogic,md::PuckLocationAnimationTracingContext,md::LogicDependencies<gdc::TypeList<md::NavigationContext>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) != 0xA81ACD73F9C92AA1 || !*(void *)(a3 + 32))
  {
    a4[23] = 0;
    *a4 = 0;
    return result;
  }
  uint64_t v4 = *(void **)(a2 + 8);
  int8x8_t v5 = (int8x8_t)v4[1];
  if (!*(void *)&v5) {
    goto LABEL_27;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    uint64_t v7 = 0x1B8B241A8D896A1DLL;
    if (*(void *)&v5 <= 0x1B8B241A8D896A1DuLL) {
      uint64_t v7 = 0x1B8B241A8D896A1DuLL % *(void *)&v5;
    }
  }
  else
  {
    uint64_t v7 = (*(void *)&v5 - 1) & 0x1B8B241A8D896A1DLL;
  }
  double v8 = *(void **)(*v4 + 8 * v7);
  if (!v8) {
    goto LABEL_27;
  }
  uint64_t v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_27;
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == 0x1B8B241A8D896A1DLL)
      {
        if (v9[2] == 0x1B8B241A8D896A1DLL) {
          goto LABEL_25;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_27;
      }
      uint64_t v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_27;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == 0x1B8B241A8D896A1DLL) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_27;
    }
LABEL_14:
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_27;
    }
  }
  if (v9[2] != 0x1B8B241A8D896A1DLL) {
    goto LABEL_14;
  }
LABEL_25:
  uint64_t v13 = v9[5];
  if (*(void *)(v13 + 8) == 0x1B8B241A8D896A1DLL)
  {
    uint64_t v14 = *(void *)(v13 + 32);
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v14 = 0;
LABEL_28:
  uint64_t v15 = v14;
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 160))(result);
}

uint64_t gdc::ObjectHolder<md::PuckLocationAnimationTracingContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::PuckLocationAnimationTracingContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555E60;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0xC400A2AC0F1);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::PuckLocationAnimationTracingContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555E60;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0xC400A2AC0F1);
  }
  return a1;
}

void md::PuckLocationAnimationTracingLogic::~PuckLocationAnimationTracingLogic(id *this)
{
  md::PuckLocationAnimationTracingLogic::~PuckLocationAnimationTracingLogic(this);
  JUMPOUT(0x1A6239270);
}

{
  md::PuckLocationAnimationTracingLogic *v2;
  void **v3;
  void **v4;
  void **v5;
  void *v6;
  unsigned char *v7;
  unsigned char *v8;
  void **v9;
  void **v10;
  void **v11;
  void *v12;
  unsigned char *v13;
  unsigned char *v14;

  *this = &unk_1EF54DEB8;
  md::PuckLocationAnimationTracingLogic::tearDownTracing((md::PuckLocationAnimationTracingLogic *)this);
  uint64_t v2 = (md::PuckLocationAnimationTracingLogic *)this[46];
  if (v2 == (md::PuckLocationAnimationTracingLogic *)(this + 43))
  {
    (*((void (**)(char *))this[43] + 4))((char *)this + 344);
  }
  else if (v2)
  {
    (*(void (**)(md::PuckLocationAnimationTracingLogic *))(*(void *)v2 + 40))(v2);
  }

  uint64_t v3 = this + 36;
  std::deque<std::pair<unsigned long,md::PuckAnimationTraceEvent>>::clear(this + 36);
  uint64_t v4 = (void **)this[37];
  int8x8_t v5 = (void **)this[38];
  if (v4 != v5)
  {
    do
    {
      uint8x8_t v6 = *v4++;
      operator delete(v6);
    }
    while (v4 != v5);
    double v8 = this[37];
    uint64_t v7 = this[38];
    if (v7 != v8) {
      this[38] = &v7[(v8 - v7 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
  }
  if (*v3) {
    operator delete(*v3);
  }
  uint64_t v9 = this + 30;
  std::deque<md::PuckAnimationTraceEvent>::clear(this + 30);
  uint64_t v10 = (void **)this[31];
  unint64_t v11 = (void **)this[32];
  if (v10 != v11)
  {
    do
    {
      uint64_t v12 = *v10++;
      operator delete(v12);
    }
    while (v10 != v11);
    uint64_t v14 = this[31];
    uint64_t v13 = this[32];
    if (v13 != v14) {
      this[32] = &v13[(v14 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
  }
  if (*v9) {
    operator delete(*v9);
  }
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)(this + 20));
  *this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(this[13]);
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(this[10]);
}

void sub_1A27AEA18(_Unwind_Exception *a1)
{
  std::function<void ()(VKNavigationPuckLocationTracingEvent *)>::~function((void *)(v1 + 344));

  std::queue<std::pair<unsigned long,md::PuckAnimationTraceEvent>>::~queue((void **)(v1 + 288));
  std::queue<md::PuckAnimationTraceEvent>::~queue((void **)(v1 + 240));
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(v1 + 160);
  md::Logic<md::DrapingLogic,md::DrapingContext,md::LogicDependencies<gdc::TypeList<md::OverlaysContext,md::CameraContext,md::PendingSceneContext,md::ElevationContext>,gdc::TypeList<>>>::~Logic(v1);
  _Unwind_Resume(a1);
}

void md::PuckLocationAnimationTracingLogic::tearDownTracing(md::PuckLocationAnimationTracingLogic *this)
{
  if (*((unsigned char *)this + 136))
  {
    [*((id *)this + 42) unsubscribeFromLocationUpdates:*((void *)this + 16)];
    if (*((unsigned char *)this + 136)) {
      *((unsigned char *)this + 136) = 0;
    }
  }
  if (*((unsigned char *)this + 152))
  {
    uint64_t v2 = *((void *)this + 15);
    unint64_t v3 = *((void *)this + 18);
    std::mutex::lock((std::mutex *)v2);
    std::__hash_table<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::function<void ()(unsigned long)>>>>::__erase_unique<unsigned long>((uint64_t *)(v2 + 72), v3);
    std::mutex::unlock((std::mutex *)v2);
    if (*((unsigned char *)this + 152)) {
      *((unsigned char *)this + 152) = 0;
    }
  }
  if (*((void *)this + 35))
  {
    unint64_t v4 = *((void *)this + 34);
    do
    {
      md::PuckLocationAnimationTracingLogic::publishEvent((uint64_t)this, *(void *)(*((void *)this + 31) + ((v4 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v4 & 0x7F), 0);
      int8x8_t v5 = (id *)(*(void *)(*((void *)this + 31) + ((*((void *)this + 34) >> 4) & 0xFFFFFFFFFFFFFF8))
                + 32 * (*((void *)this + 34) & 0x7FLL));

      uint64_t v6 = *((void *)this + 35) - 1;
      unint64_t v4 = *((void *)this + 34) + 1;
      *((void *)this + 34) = v4;
      *((void *)this + 35) = v6;
      if (v4 >= 0x100)
      {
        operator delete(**((void ***)this + 31));
        *((void *)this + 31) += 8;
        uint64_t v6 = *((void *)this + 35);
        unint64_t v4 = *((void *)this + 34) - 128;
        *((void *)this + 34) = v4;
      }
    }
    while (v6);
  }
  if (*((void *)this + 41))
  {
    unint64_t v7 = *((void *)this + 40);
    do
    {
      md::PuckLocationAnimationTracingLogic::publishEvent((uint64_t)this, *(void *)(*((void *)this + 37) + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66) + 8, 0);
      double v8 = (id *)(*(void *)(*((void *)this + 37) + 8 * (*((void *)this + 40) / 0x66uLL))
                + 40 * (*((void *)this + 40) % 0x66uLL));

      uint64_t v9 = *((void *)this + 41) - 1;
      unint64_t v7 = *((void *)this + 40) + 1;
      *((void *)this + 40) = v7;
      *((void *)this + 41) = v9;
      if (v7 >= 0xCC)
      {
        operator delete(**((void ***)this + 37));
        *((void *)this + 37) += 8;
        uint64_t v9 = *((void *)this + 41);
        unint64_t v7 = *((void *)this + 40) - 102;
        *((void *)this + 40) = v7;
      }
    }
    while (v9);
  }
}

void sub_1A27AEC50(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::deque<std::pair<unsigned long,md::PuckAnimationTraceEvent>>::clear(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    unint64_t v4 = a1 + 5;
    unint64_t v3 = (void **)a1[1];
  }
  else
  {
    unint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0x66];
    unint64_t v7 = (id *)((char *)*v6 + 40 * (v5 % 0x66));
    unint64_t v8 = (unint64_t)v2[(a1[5] + v5) / 0x66] + 40 * ((a1[5] + v5) % 0x66);
    if (v7 != (id *)v8)
    {
      do
      {

        v7 += 5;
        if ((char *)v7 - (unsigned char *)*v6 == 4080)
        {
          uint64_t v9 = (id *)v6[1];
          ++v6;
          unint64_t v7 = v9;
        }
      }
      while (v7 != (id *)v8);
      uint64_t v2 = (void **)a1[1];
      unint64_t v3 = (void **)a1[2];
    }
  }
  *unint64_t v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if (v10 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v11 = a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v10 = v11 - (void)v2;
    }
    while (v10 > 0x10);
  }
  if (v10 >> 3 == 1)
  {
    uint64_t v12 = 51;
  }
  else
  {
    if (v10 >> 3 != 2) {
      return;
    }
    uint64_t v12 = 102;
  }
  a1[4] = v12;
}

void std::deque<md::PuckAnimationTraceEvent>::clear(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    unint64_t v4 = a1 + 5;
    unint64_t v3 = (void **)a1[1];
  }
  else
  {
    unint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 >> 7];
    uint64_t v7 = (uint64_t)*v6 + 32 * (v5 & 0x7F);
    uint64_t v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((a1[5] + v5) & 0x7F);
    if (v7 != v8)
    {
      do
      {

        uint64_t v9 = *(void **)v7;
        v7 += 32;

        if (v7 - (void)*v6 == 4096)
        {
          uint64_t v10 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v10;
        }
      }
      while (v7 != v8);
      uint64_t v2 = (void **)a1[1];
      unint64_t v3 = (void **)a1[2];
    }
  }
  *unint64_t v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if (v11 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v12 = a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = v12 - (void)v2;
    }
    while (v11 > 0x10);
  }
  if (v11 >> 3 == 1)
  {
    uint64_t v13 = 64;
  }
  else
  {
    if (v11 >> 3 != 2) {
      return;
    }
    uint64_t v13 = 128;
  }
  a1[4] = v13;
}

void *std::function<void ()(VKNavigationPuckLocationTracingEvent *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void **std::queue<std::pair<unsigned long,md::PuckAnimationTraceEvent>>::~queue(void **a1)
{
  std::deque<std::pair<unsigned long,md::PuckAnimationTraceEvent>>::clear(a1);
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      unint64_t v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    uint64_t v6 = a1[1];
    unint64_t v5 = a1[2];
    if (v5 != v6) {
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
  }
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void **std::queue<md::PuckAnimationTraceEvent>::~queue(void **a1)
{
  std::deque<md::PuckAnimationTraceEvent>::clear(a1);
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      unint64_t v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    uint64_t v6 = a1[1];
    unint64_t v5 = a1[2];
    if (v5 != v6) {
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
  }
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *md::PuckLocationAnimationTracingLogic::setupTracing(void *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 136))
  {
    uint64_t v1 = (uint64_t)this;
    if (!*((unsigned char *)this + 152))
    {
      uint64_t v2 = (void *)this[42];
      unint64_t v3 = operator new(0x20uLL);
      void *v3 = &unk_1EF56B7B8;
      v3[1] = md::PuckLocationAnimationTracingLogic::puckAnimatorDidRecieveLocationUpdate;
      v3[2] = 0;
      v3[3] = v1;
      uint64_t v9 = v3;
      *(void *)(v1 + 128) = [v2 subscribeToLocationUpdates:v8];
      *(unsigned char *)(v1 + 136) = 1;
      if (v9 == v8)
      {
        (*(void (**)(void *))(v8[0] + 32))(v8);
      }
      else if (v9)
      {
        (*(void (**)(void))(*v9 + 40))();
      }
      uint64_t v4 = *(void *)(v1 + 120);
      unint64_t v5 = operator new(0x20uLL);
      *unint64_t v5 = &unk_1EF56B800;
      v5[1] = md::PuckLocationAnimationTracingLogic::didDisplayFrame;
      v5[2] = 0;
      v5[3] = v1;
      uint64_t v7 = v5;
      md::MapEngineSignals::ThreadSafeSignal<unsigned long>::connect(v4, v6);
      this = v7;
      if (v7 == v6)
      {
        return (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else if (v7)
      {
        return (void *)(*(uint64_t (**)(void))(*v7 + 40))();
      }
    }
  }
  return this;
}

void sub_1A27AF224(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(unsigned long)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1A27AF23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::function<void ()(VKPuckAnimator *,CLLocation *,GEORouteMatch *,NSUUID *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void md::PuckLocationAnimationTracingLogic::didDisplayFrame(md::PuckLocationAnimationTracingLogic *this, unint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 41))
  {
    unint64_t v4 = *((void *)this + 40);
    do
    {
      uint64_t v5 = *(void *)(*((void *)this + 37) + 8 * (v4 / 0x66));
      unint64_t v6 = v4 % 0x66;
      uint64_t v7 = (unint64_t *)(v5 + 40 * (v4 % 0x66));
      unint64_t v9 = *v7;
      uint64_t v8 = (uint64_t)(v7 + 1);
      if (v9 < a2) {
        break;
      }
      if (*((unsigned char *)this + 176))
      {
        if (GEOGetVectorKitPuckTrackingLog(void)::onceToken != -1) {
          dispatch_once(&GEOGetVectorKitPuckTrackingLog(void)::onceToken, &__block_literal_global_50819);
        }
        uint64_t v10 = GEOGetVectorKitPuckTrackingLog(void)::log;
        if (os_log_type_enabled((os_log_t)GEOGetVectorKitPuckTrackingLog(void)::log, OS_LOG_TYPE_INFO))
        {
          uint64_t v11 = *(void *)(v5 + 40 * v6 + 32);
          *(_DWORD *)buf = 138412546;
          uint64_t v15 = v11;
          __int16 v16 = 2048;
          unint64_t v17 = a2;
          _os_log_impl(&dword_1A1780000, v10, OS_LOG_TYPE_INFO, "[VK] [%@] Frame Displayed - %lu", buf, 0x16u);
        }
      }
      md::PuckLocationAnimationTracingLogic::publishEvent((uint64_t)this, v8, 3);
      uint64_t v12 = (id *)(*(void *)(*((void *)this + 37) + 8 * (*((void *)this + 40) / 0x66uLL))
                 + 40 * (*((void *)this + 40) % 0x66uLL));

      uint64_t v13 = *((void *)this + 41) - 1;
      unint64_t v4 = *((void *)this + 40) + 1;
      *((void *)this + 40) = v4;
      *((void *)this + 41) = v13;
      if (v4 >= 0xCC)
      {
        operator delete(**((void ***)this + 37));
        *((void *)this + 37) += 8;
        uint64_t v13 = *((void *)this + 41);
        unint64_t v4 = *((void *)this + 40) - 102;
        *((void *)this + 40) = v4;
      }
    }
    while (v13);
  }
}

uint64_t std::__function::__func<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(unsigned long),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(unsigned long),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&>>,void ()(unsigned long)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = (uint64_t (*)(void *, void))a1[1];
  unint64_t v4 = (void *)(a1[3] + (v2 >> 1));
  if (v2) {
    return (*(uint64_t (**)(void))(*v4 + v3))();
  }
  else {
    return v3(v4, *a2);
  }
}

__n128 std::__function::__func<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(unsigned long),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(unsigned long),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&>>,void ()(unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF56B800;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(unsigned long),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(unsigned long),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&>>,void ()(unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF56B800;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(unsigned long),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(unsigned long),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&>>,void ()(unsigned long)>::~__func()
{
}

void md::PuckLocationAnimationTracingLogic::puckAnimatorDidRecieveLocationUpdate(md::PuckLocationAnimationTracingLogic *this, VKPuckAnimator *a2, CLLocation *a3, GEORouteMatch *a4, NSUUID *a5)
{
  uint64_t v145 = *MEMORY[0x1E4F143B8];
  unint64_t v9 = a2;
  uint64_t v139 = a3;
  uint64_t v10 = a4;
  uint64_t v140 = a5;
  if (!v10) {
    goto LABEL_100;
  }
  uint64_t v11 = [(GEORouteMatch *)v10 route];

  if (!v11) {
    goto LABEL_100;
  }
  uint64_t v138 = v9;
  [(VKPuckAnimator *)v9 lastProjectedPosition];
  double v13 = v12;
  [(VKPuckAnimator *)v9 lastProjectedPosition];
  double v15 = v14;
  __int16 v16 = [(GEORouteMatch *)v10 route];
  long double v17 = exp(v15 * 6.28318531 + -3.14159265);
  long double v18 = atan(v17) * 114.591559 + -90.0;
  long double v19 = fmod(v13 * 6.28318531, 6.28318531);
  uint64_t v20 = objc_msgSend(v16, "closestPointOnRoute:", (double)v18, (double)(fmod(v19 + 6.28318531, 6.28318531) * 57.2957795 + -180.0));

  long double v21 = v139;
  *(void *)buf = v21;
  *(void *)&uint8_t buf[8] = v20;
  if (*((float *)&v20 + 1) >= 1.0)
  {
    *(_DWORD *)&uint8_t buf[8] = vcvtms_u32_f32(*((float *)&v20 + 1)) + v20;
    *(float *)&buf[12] = *((float *)&v20 + 1) - floorf(*((float *)&v20 + 1));
  }
  float v137 = v21;
  uint64_t v135 = [(GEORouteMatch *)v10 route];
  *(void *)&uint8_t buf[16] = v135;
  long double v22 = v140;
  long double v23 = (char *)*((void *)this + 32);
  double v24 = (char *)*((void *)this + 31);
  uint64_t v25 = v23 - v24;
  float v136 = v22;
  unint64_t v142 = v22;
  if (v23 == v24) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = 16 * (v23 - v24) - 1;
  }
  unint64_t v27 = *((void *)this + 34);
  unint64_t v28 = *((void *)this + 35) + v27;
  if (v26 == v28)
  {
    if (v27 >= 0x80)
    {
      *((void *)this + 34) = v27 - 128;
      uint64_t v30 = v24 + 8;
      uint64_t v29 = *(void *)v24;
      *((void *)this + 31) = v24 + 8;
      if (*((char **)this + 33) != v23)
      {
LABEL_90:
        *(void *)long double v23 = v29;
        goto LABEL_91;
      }
      double v31 = (char *)*((void *)this + 30);
      if (v30 > v31)
      {
        uint64_t v32 = (v30 - v31) >> 3;
        if (v32 >= -1) {
          uint64_t v33 = v32 + 1;
        }
        else {
          uint64_t v33 = v32 + 2;
        }
        uint64_t v34 = v33 >> 1;
        uint64_t v35 = -v34;
        int v36 = &v30[-8 * v34];
        int64_t v37 = v23 - v30;
        if (v23 == v30)
        {
          unsigned int v38 = v23;
        }
        else
        {
          memmove(&v30[-8 * v34], v30, v23 - v30);
          unsigned int v38 = (char *)*((void *)this + 31);
        }
        long double v23 = &v36[v37];
        *((void *)this + 31) = &v38[8 * v35];
        *((void *)this + 32) = &v36[v37];
        goto LABEL_90;
      }
      if (v23 == v31) {
        unint64_t v49 = 1;
      }
      else {
        unint64_t v49 = (v23 - v31) >> 2;
      }
      if (!(v49 >> 61))
      {
        int v50 = (char *)operator new(8 * v49);
        uint64_t v51 = &v50[8 * (v49 >> 2)];
        int64_t v53 = v23 - v30;
        BOOL v52 = v23 == v30;
        long double v23 = v51;
        if (v52) {
          goto LABEL_88;
        }
        long double v23 = &v51[v53 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v54 = v53 - 8;
        if (v54 >= 0x38)
        {
          uint64_t v98 = &v50[8 * (v49 >> 2)];
          uint64_t v55 = v98;
          if ((unint64_t)(v98 - v30) >= 0x20)
          {
            uint64_t v99 = (v54 >> 3) + 1;
            uint64_t v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v55 = &v51[v100];
            uint64_t v101 = (long long *)(v24 + 24);
            uint64_t v102 = v98 + 16;
            uint64_t v103 = v99 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v104 = *v101;
              *(v102 - 1) = *(v101 - 1);
              *uint64_t v102 = v104;
              v101 += 2;
              v102 += 2;
              v103 -= 4;
            }
            while (v103);
            if (v99 == (v99 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_88:
              *((void *)this + 30) = v50;
              *((void *)this + 31) = v51;
              *((void *)this + 32) = v23;
              *((void *)this + 33) = &v50[8 * v49];
              if (v31)
              {
                operator delete(v31);
                long double v23 = (char *)*((void *)this + 32);
              }
              goto LABEL_90;
            }
            v30 += v100;
          }
        }
        else
        {
          uint64_t v55 = &v50[8 * (v49 >> 2)];
        }
        do
        {
          uint64_t v105 = *(void *)v30;
          v30 += 8;
          *(void *)uint64_t v55 = v105;
          v55 += 8;
        }
        while (v55 != v23);
        goto LABEL_88;
      }
LABEL_129:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v39 = v25 >> 3;
    unsigned int v40 = (char *)*((void *)this + 33);
    unint64_t v41 = (char *)*((void *)this + 30);
    uint64_t v42 = v40 - v41;
    if (v25 >> 3 < (unint64_t)((v40 - v41) >> 3))
    {
      if (v40 != v23)
      {
        *(void *)long double v23 = operator new(0x1000uLL);
LABEL_91:
        *((void *)this + 32) += 8;
LABEL_92:
        double v24 = (char *)*((void *)this + 31);
        unint64_t v28 = *((void *)this + 35) + *((void *)this + 34);
        goto LABEL_93;
      }
      int v56 = operator new(0x1000uLL);
      long long v57 = v24;
      if (v41 != v24)
      {
LABEL_105:
        *((void *)v57 - 1) = v56;
        uint64_t v112 = (char *)*((void *)this + 31);
        uint64_t v111 = (char *)*((void *)this + 32);
        *((void *)this + 31) = v112 - 8;
        uint64_t v113 = *((void *)v112 - 1);
        *((void *)this + 31) = v112;
        if (v111 != *((char **)this + 33))
        {
LABEL_106:
          *(void *)uint64_t v111 = v113;
          goto LABEL_91;
        }
        uint64_t v114 = (char *)*((void *)this + 30);
        if (v112 > v114)
        {
          uint64_t v115 = (v112 - v114) >> 3;
          if (v115 >= -1) {
            uint64_t v116 = v115 + 1;
          }
          else {
            uint64_t v116 = v115 + 2;
          }
          uint64_t v117 = v116 >> 1;
          uint64_t v118 = -v117;
          uint64_t v119 = &v112[-8 * v117];
          int64_t v120 = v111 - v112;
          if (v111 != v112)
          {
            memmove(&v112[-8 * v117], v112, v111 - v112);
            uint64_t v112 = (char *)*((void *)this + 31);
          }
          *((void *)this + 31) = &v112[8 * v118];
          *((void *)this + 32) = &v119[v120];
          *(void *)&v119[v120] = v113;
          goto LABEL_91;
        }
        if (v111 == v114) {
          unint64_t v121 = 1;
        }
        else {
          unint64_t v121 = (v111 - v114) >> 2;
        }
        if (v121 >> 61) {
          goto LABEL_129;
        }
        int32x4_t v122 = (char *)operator new(8 * v121);
        int8x16_t v123 = &v122[8 * (v121 >> 2)];
        int64_t v124 = v111 - v112;
        BOOL v52 = v111 == v112;
        uint64_t v111 = v123;
        if (!v52)
        {
          uint64_t v111 = &v123[v124 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v125 = v124 - 8;
          if (v125 < 0x38)
          {
            BOOL v126 = &v122[8 * (v121 >> 2)];
            goto LABEL_126;
          }
          double v127 = &v122[8 * (v121 >> 2)];
          BOOL v126 = v127;
          if ((unint64_t)(v127 - v112) < 0x20)
          {
            do
            {
LABEL_126:
              uint64_t v134 = *(void *)v112;
              v112 += 8;
              *(void *)BOOL v126 = v134;
              v126 += 8;
            }
            while (v126 != v111);
            goto LABEL_127;
          }
          uint64_t v128 = (v125 >> 3) + 1;
          uint64_t v129 = 8 * (v128 & 0x3FFFFFFFFFFFFFFCLL);
          BOOL v126 = &v123[v129];
          uint64_t v130 = (long long *)(v112 + 16);
          uint64_t v131 = v127 + 16;
          uint64_t v132 = v128 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v133 = *v130;
            *(v131 - 1) = *(v130 - 1);
            *uint64_t v131 = v133;
            v130 += 2;
            v131 += 2;
            v132 -= 4;
          }
          while (v132);
          if (v128 != (v128 & 0x3FFFFFFFFFFFFFFCLL))
          {
            v112 += v129;
            goto LABEL_126;
          }
        }
LABEL_127:
        *((void *)this + 30) = v122;
        *((void *)this + 31) = v123;
        *((void *)this + 32) = v111;
        *((void *)this + 33) = &v122[8 * v121];
        if (v114)
        {
          operator delete(v114);
          uint64_t v111 = (char *)*((void *)this + 32);
        }
        goto LABEL_106;
      }
      if (v23 == v24) {
        unint64_t v58 = 1;
      }
      else {
        unint64_t v58 = v42 >> 2;
      }
      if (v58 >> 61) {
        goto LABEL_129;
      }
      uint64_t v59 = (char *)operator new(8 * v58);
      unint64_t v60 = (v58 + 3) >> 2;
      long long v57 = &v59[8 * v60];
      uint64_t v61 = &v59[8 * v58];
      unint64_t v62 = v57;
      if (v23 != v24)
      {
        unint64_t v62 = &v57[(v23 - v41) & 0xFFFFFFFFFFFFFFF8];
        unint64_t v63 = v23 - v41 - 8;
        unint64_t v64 = &v59[8 * v60];
        uint64_t v65 = v24;
        if (v63 > 0x37)
        {
          uint64_t v66 = &v59[8 * v60];
          unint64_t v64 = v66;
          uint64_t v65 = v24;
          if ((unint64_t)(v66 - v41) >= 0x20)
          {
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v64 = &v57[v68];
            uint64_t v69 = (long long *)(v24 + 16);
            BOOL v70 = v66 + 16;
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *(v70 - 1) = *(v69 - 1);
              _OWORD *v70 = v72;
              v69 += 2;
              v70 += 2;
              v71 -= 4;
            }
            while (v71);
            if (v67 == (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
              *((void *)this + 30) = v59;
              *((void *)this + 31) = v57;
              *((void *)this + 32) = v62;
              *((void *)this + 33) = v61;
LABEL_104:
              operator delete(v24);
              long long v57 = (char *)*((void *)this + 31);
              goto LABEL_105;
            }
            uint64_t v65 = &v24[v68];
          }
        }
        do
        {
          uint64_t v110 = *(void *)v65;
          v65 += 8;
          *(void *)unint64_t v64 = v110;
          v64 += 8;
        }
        while (v64 != v62);
      }
      *((void *)this + 30) = v59;
      *((void *)this + 31) = v57;
      *((void *)this + 32) = v62;
      *((void *)this + 33) = v61;
      if (!v24) {
        goto LABEL_105;
      }
      goto LABEL_104;
    }
    if (v40 == v41) {
      unint64_t v43 = 1;
    }
    else {
      unint64_t v43 = v42 >> 2;
    }
    if (v43 >> 61) {
      goto LABEL_129;
    }
    unint64_t v44 = (char *)operator new(8 * v43);
    unint64_t v45 = operator new(0x1000uLL);
    uint64_t v46 = &v44[8 * v39];
    unint64_t v47 = &v44[8 * v43];
    if (v39 == v43)
    {
      if (v25 < 1)
      {
        if (v23 == v24) {
          unint64_t v73 = 1;
        }
        else {
          unint64_t v73 = v25 >> 2;
        }
        if (v73 >> 61) {
          goto LABEL_129;
        }
        uint64_t v74 = v45;
        uint64_t v46 = (char *)operator new(8 * v73);
        unint64_t v47 = &v46[8 * v73];
        operator delete(v44);
        double v24 = (char *)*((void *)this + 31);
        long double v23 = (char *)*((void *)this + 32);
        unint64_t v44 = v46;
        unint64_t v45 = v74;
      }
      else
      {
        unint64_t v48 = v39 + 2;
        if (v39 >= -1) {
          unint64_t v48 = v39 + 1;
        }
        v46 -= 8 * (v48 >> 1);
      }
    }
    *(void *)uint64_t v46 = v45;
    uint64_t v75 = v46 + 8;
    if (v23 == v24)
    {
      unint64_t v76 = v46;
      int32x4_t v77 = v46 + 8;
LABEL_55:
      uint64_t v78 = (void *)*((void *)this + 30);
      *((void *)this + 30) = v44;
      *((void *)this + 31) = v76;
      *((void *)this + 32) = v77;
      *((void *)this + 33) = v47;
      if (v78) {
        operator delete(v78);
      }
      goto LABEL_92;
    }
    while (v46 != v44)
    {
      int32x4_t v79 = v46;
      int32x4_t v77 = v75;
LABEL_58:
      uint64_t v80 = *((void *)v23 - 1);
      v23 -= 8;
      *((void *)v79 - 1) = v80;
      unint64_t v76 = v79 - 8;
      uint64_t v75 = v77;
      uint64_t v46 = v76;
      if (v23 == *((char **)this + 31)) {
        goto LABEL_55;
      }
    }
    if (v75 < v47)
    {
      uint64_t v81 = (v47 - v75) >> 3;
      if (v81 >= -1) {
        unint64_t v82 = v81 + 1;
      }
      else {
        unint64_t v82 = v81 + 2;
      }
      int32x4_t v77 = &v75[8 * (v82 >> 1)];
      int32x4_t v79 = &v46[8 * (v82 >> 1)];
      if (v75 == v46)
      {
        unint64_t v44 = v75;
      }
      else
      {
        memmove(&v46[8 * (v82 >> 1)], v46, v75 - v46);
        unint64_t v44 = v46;
      }
      goto LABEL_58;
    }
    if (v47 == v46) {
      unint64_t v83 = 1;
    }
    else {
      unint64_t v83 = (v47 - v46) >> 2;
    }
    if (v83 >> 61) {
      goto LABEL_129;
    }
    int8x16_t v84 = (char *)operator new(8 * v83);
    unint64_t v44 = v84;
    unint64_t v85 = (v83 + 3) >> 2;
    int32x4_t v79 = &v84[8 * v85];
    int32x4_t v77 = v79;
    int64_t v86 = v75 - v46;
    if (v75 != v46)
    {
      int32x4_t v77 = &v79[v86 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v87 = v86 - 8;
      uint64_t v88 = &v84[8 * v85];
      unint64_t v89 = v46;
      if (v87 >= 0x38)
      {
        uint64_t v90 = 8 * v85;
        uint64_t v88 = &v84[8 * v85];
        unint64_t v89 = v46;
        if ((unint64_t)(v88 - v46) >= 0x20)
        {
          uint64_t v91 = (v87 >> 3) + 1;
          uint64_t v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v88 = &v79[v92];
          unint64_t v93 = (long long *)(v46 + 16);
          unint64_t v94 = &v84[v90 + 16];
          uint64_t v95 = v91 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v96 = *v93;
            *((_OWORD *)v94 - 1) = *(v93 - 1);
            *(_OWORD *)unint64_t v94 = v96;
            v93 += 2;
            v94 += 32;
            v95 -= 4;
          }
          while (v95);
          if (v91 == (v91 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_78;
          }
          unint64_t v89 = &v46[v92];
        }
      }
      do
      {
        uint64_t v97 = *(void *)v89;
        v89 += 8;
        *(void *)uint64_t v88 = v97;
        v88 += 8;
      }
      while (v88 != v77);
    }
LABEL_78:
    unint64_t v47 = &v84[8 * v83];
    operator delete(v46);
    goto LABEL_58;
  }
LABEL_93:
  uint64_t v106 = (CLLocation **)(*(void *)&v24[(v28 >> 4) & 0xFFFFFFFFFFFFFF8] + 32 * (v28 & 0x7F));
  *(void *)buf = 0;
  *uint64_t v106 = v137;
  v106[1] = *(CLLocation **)&buf[8];
  v106[2] = (CLLocation *)v135;
  v106[3] = (CLLocation *)v136;
  ++*((void *)this + 35);
  unint64_t v9 = v138;
  if (*((unsigned char *)this + 176))
  {
    if (GEOGetVectorKitPuckTrackingLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitPuckTrackingLog(void)::onceToken, &__block_literal_global_50819);
    }
    unint64_t v107 = (id)GEOGetVectorKitPuckTrackingLog(void)::log;
    if (os_log_type_enabled(v107, OS_LOG_TYPE_INFO))
    {
      [(GEORouteMatch *)v10 routeCoordinate];
      GEOPolylineCoordinateAsFullString();
      int8x16_t v108 = (NSUUID *)objc_claimAutoreleasedReturnValue();
      int8x16_t v109 = GEOPolylineCoordinateAsFullString();
      *(_DWORD *)buf = 138413058;
      *(void *)&uint8_t buf[4] = v136;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v10;
      *(_WORD *)&buf[22] = 2112;
      unint64_t v142 = v108;
      __int16 v143 = 2112;
      unint64_t v144 = v109;
      _os_log_impl(&dword_1A1780000, v107, OS_LOG_TYPE_INFO, "[VK] [%@] Received Location - routeMatch:%p, routeCoordinate:(%@), projectedRouteCoordinate:(%@)", buf, 0x2Au);
    }
  }
  md::PuckLocationAnimationTracingLogic::publishEvent((uint64_t)this, *(void *)(*((void *)this + 31) + ((*((void *)this + 34) >> 4) & 0xFFFFFFFFFFFFFF8))+ 32 * (*((void *)this + 34) & 0x7FLL), 1);
LABEL_100:
}

void sub_1A27AFE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, id a17)
{
  operator delete(v17);
  operator delete(v19);
  md::PuckAnimationTraceEvent::~PuckAnimationTraceEvent(&a17);

  _Unwind_Resume(a1);
}

void md::PuckAnimationTraceEvent::~PuckAnimationTraceEvent(id *this)
{
}

uint64_t std::__function::__func<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(VKPuckAnimator *,CLLocation *,GEORouteMatch *,NSUUID *),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>,std::allocator<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(VKPuckAnimator *,CLLocation *,GEORouteMatch *,NSUUID *),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>>,void ()(VKPuckAnimator *,CLLocation *,GEORouteMatch *,NSUUID *)>::operator()(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v5 = a1[2];
  unint64_t v6 = (uint64_t (*)(void *, void, void, void, void))a1[1];
  uint64_t v7 = (void *)(a1[3] + (v5 >> 1));
  if (v5) {
    unint64_t v6 = *(uint64_t (**)(void *, void, void, void, void))(*v7 + v6);
  }
  return v6(v7, *a2, *a3, *a4, *a5);
}

__n128 std::__function::__func<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(VKPuckAnimator *,CLLocation *,GEORouteMatch *,NSUUID *),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>,std::allocator<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(VKPuckAnimator *,CLLocation *,GEORouteMatch *,NSUUID *),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>>,void ()(VKPuckAnimator *,CLLocation *,GEORouteMatch *,NSUUID *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF56B7B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(VKPuckAnimator *,CLLocation *,GEORouteMatch *,NSUUID *),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>,std::allocator<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(VKPuckAnimator *,CLLocation *,GEORouteMatch *,NSUUID *),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>>,void ()(VKPuckAnimator *,CLLocation *,GEORouteMatch *,NSUUID *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF56B7B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(VKPuckAnimator *,CLLocation *,GEORouteMatch *,NSUUID *),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>,std::allocator<std::__bind<void (md::PuckLocationAnimationTracingLogic::*)(VKPuckAnimator *,CLLocation *,GEORouteMatch *,NSUUID *),md::PuckLocationAnimationTracingLogic*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&>>,void ()(VKPuckAnimator *,CLLocation *,GEORouteMatch *,NSUUID *)>::~__func()
{
}

void std::__function::__func<md::PuckLocationAnimationTracingLogic::PuckLocationAnimationTracingLogic(md::MapEngineSignals *,VKPuckAnimator *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::PuckLocationAnimationTracingLogic::PuckLocationAnimationTracingLogic(md::MapEngineSignals *,VKPuckAnimator *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::operator()(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = *(md::PuckLocationAnimationTracingLogic **)(a1 + 8);
  if (*a2) {
    md::PuckLocationAnimationTracingLogic::tearDownTracing(v2);
  }
  else {
    md::PuckLocationAnimationTracingLogic::setupTracing(v2);
  }
}

void *std::__function::__func<md::PuckLocationAnimationTracingLogic::PuckLocationAnimationTracingLogic(md::MapEngineSignals *,VKPuckAnimator *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::PuckLocationAnimationTracingLogic::PuckLocationAnimationTracingLogic(md::MapEngineSignals *,VKPuckAnimator *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EF578840;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::PuckLocationAnimationTracingLogic::PuckLocationAnimationTracingLogic(md::MapEngineSignals *,VKPuckAnimator *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0,std::allocator<md::PuckLocationAnimationTracingLogic::PuckLocationAnimationTracingLogic(md::MapEngineSignals *,VKPuckAnimator *,NSObject  {objcproto17OS_dispatch_queue}*)::$_0>,void ()(BOOL)>::~__func()
{
}

uint64_t md::CaptionedIconLabelPart::evaluateFeatureNormalTextPosition(md::CaptionedIconLabelPart *this, md::Label *a2, const md::LabelLayoutContext *a3)
{
  if (!*((unsigned char *)this + 164)) {
    return 6;
  }
  float v3 = *((float *)this + 38);
  float v4 = *((float *)this + 39);
  float v5 = *((float *)this + 40);
  double v6 = *((double *)this + 74);
  double v7 = *((double *)a2 + 14) - v6;
  double v8 = *((double *)this + 75);
  double v9 = *((double *)a2 + 15) - v8;
  double v10 = *((double *)this + 76);
  double v11 = *((double *)a2 + 16) - v10;
  double v12 = 1.0 / sqrt(v7 * v7 + v9 * v9 + v11 * v11);
  double v13 = v12 * v7;
  double v14 = v12 * v9;
  double v15 = v12 * v11;
  double v16 = 1.0 / sqrt(v6 * v6 + v8 * v8 + v10 * v10);
  double v17 = v16 * v6;
  double v18 = v16 * v8;
  double v19 = v16 * v10;
  double v20 = *((unsigned char *)a2 + 8) ? 0.0 : v17;
  double v21 = *((unsigned char *)a2 + 8) ? 0.0 : v18;
  double v22 = *((unsigned char *)a2 + 8) ? 1.0 : v19;
  if (v13 * v3 + v14 * v4 + v15 * v5 > *((float *)this + 52)) {
    return 6;
  }
  float v24 = -(v21 * v13 - v20 * v14);
  float v25 = -(v20 * v15 - v22 * v13);
  float v26 = -(v22 * v14 - v21 * v15);
  return 4 * ((float)((float)((float)(v5 * v24) + (float)(v3 * v26)) + (float)(v4 * v25)) <= 0.0);
}

void md::LabelManager::deselectLabelMarkerImpl(md::LabelManager *this)
{
  uint64_t v1 = *((void *)this + 425);
  if (v1)
  {
    if (v1 == *((void *)this + 438))
    {
      uint64_t v3 = *((void *)this + 17);
      if (v3)
      {
        uint64_t v4 = *(void *)(v3 + 152);
        if (v4)
        {
          v6[0] = (uint64_t)this;
          (*(void (**)(uint64_t, uint64_t *, char *))(*(void *)v4 + 48))(v4, v6, (char *)this + 3400);
        }
      }
      float v5 = (std::__shared_weak_count *)*((void *)this + 439);
      *((_OWORD *)this + 219) = 0u;
      if (v5)
      {
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    v6[0] = 0;
    v6[1] = 0;
    md::LabelManager::setSelectedLabelMarker((uint64_t)this, v6);
    *((unsigned char *)this + 3042) = 1;
  }
}

void sub_1A27B0388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void md::LabelManager::labelMarkerForCustomFeatureAnnotation(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v8 = a3;
  id v7 = a4;
  if (v8 && v7)
  {
    (*(void (**)(void))(**(void **)(a2 + 240) + 16))(*(void *)(a2 + 240));
    if (!*(unsigned char *)(a2 + 3385) && !*(unsigned char *)(a2 + 3384)) {
      md::LabelManager::flushCommands((md::LabelManager *)a2);
    }
    (*(void (**)(void, id, id))(**(void **)(a2 + 240) + 168))(*(void *)(a2 + 240), v8, v7);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_1A27B0484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void md::LabelManager::adoptSelectedLabelMarker(uint64_t a1, uint64_t *a2)
{
  char v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 240) + 184))(*(void *)(a1 + 240));
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 3504) = v6;
  id v7 = *(std::__shared_weak_count **)(a1 + 3512);
  *(void *)(a1 + 3512) = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    uint64_t v9 = *a2;
    uint64_t v8 = a2[1];
    if (!v8) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  if (v8) {
LABEL_6:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
LABEL_7:
  *(void *)(a1 + 3400) = v9;
  double v10 = *(std::__shared_weak_count **)(a1 + 3408);
  *(void *)(a1 + 3408) = v8;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (v4) {
      return;
    }
  }
  else if (v4)
  {
    return;
  }
  md::LabelManager::releaseAdoptedSelectedLabelMarker((md::LabelManager *)a1, 1);
}

void md::LabelManager::releaseAdoptedSelectedLabelMarker(md::LabelManager *this, int a2)
{
  if (*((void *)this + 425))
  {
    uint64_t v3 = (void *)((char *)this + 3400);
    if (a2)
    {
      uint64_t v4 = *((void *)this + 17);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 152);
        if (v5)
        {
          uint64_t v8 = this;
          (*(void (**)(uint64_t, md::LabelManager **, void *))(*(void *)v5 + 48))(v5, &v8, v3);
        }
      }
    }
    (*(void (**)(void))(**((void **)this + 30) + 192))(*((void *)this + 30));
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 439);
    *((void *)this + 438) = 0;
    *((void *)this + 439) = 0;
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    id v7 = (std::__shared_weak_count *)*((void *)this + 426);
    void *v3 = 0;
    v3[1] = 0;
    if (v7)
    {
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t md::FlyoverDsmTileData::fallbackRaster(md::FlyoverDsmTileData *this)
{
  return *((void *)this + 92);
}

uint64_t md::FlyoverDsmTileData::primaryRaster(md::FlyoverDsmTileData *this)
{
  return *((void *)this + 90);
}

BOOL md::FlyoverDsmTileData::isValid(md::FlyoverDsmTileData *this)
{
  uint64_t v1 = (void *)*((void *)this + 90);
  if (v1 && *v1 != v1[1]) {
    return 1;
  }
  uint64_t v3 = (void *)*((void *)this + 92);
  return v3 && *v3 != v3[1];
}

unint64_t md::FlyoverDsmTileData::elevationInMetersAtWorldPoint(uint64_t a1, double *a2, unsigned int a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, float a11)
{
  double v13 = *a2;
  double v14 = a2[1];
  unint64_t v15 = md::ElevationRaster::elevationInMetersAtWorldPoint(*(void *)(a1 + 720), a3, *a2, v14, a6, a7, a8, a9, a10, a11);
  if (HIDWORD(v15)) {
    goto LABEL_4;
  }
  uint64_t v22 = *(void *)(a1 + 736);
  if (v22)
  {
    unint64_t v15 = md::ElevationRaster::elevationInMetersAtWorldPoint(*(void *)(a1 + 736), a3, v13, v14, v16, v17, v18, v19, v20, v21);
LABEL_4:
    uint64_t v22 = v15 & 0x100000000;
  }
  return v15 | (unint64_t)v22;
}

uint64_t md::FlyoverDsmTileData::containsWorldPoint(uint64_t a1, float64x2_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 720);
  if (v2 || (uint64_t v2 = *(void *)(a1 + 736)) != 0)
  {
    int v3 = 1 << *(unsigned char *)(v2 + 57);
    v4.i64[0] = *(int *)(v2 + 64);
    v4.i64[1] = v3 + ~*(_DWORD *)(v2 + 60);
    float64x2_t v5 = vmulq_n_f64(vmlsq_lane_f64(*a2, vcvtq_f64_s64(v4), 1.0 / (double)v3, 0), (double)v3);
    float32x4_t v6 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v5), v5);
    v7.i32[0] = vmovn_s32(vcgeq_f32((float32x4_t)xmmword_1A28FD160, v6)).u32[0];
    v7.i32[1] = vmovn_s32(vcgeq_f32(v6, (float32x4_t)xmmword_1A28FD160)).i32[1];
    LOBYTE(v2) = vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(v7, 0xFuLL)));
  }
  return v2 & 1;
}

void md::FlyoverDsmTileData::~FlyoverDsmTileData(md::FlyoverDsmTileData *this)
{
  *(void *)this = &unk_1EF538F50;
  *((void *)this + 79) = &unk_1EF538FB8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 93);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    int v3 = (std::__shared_weak_count *)*((void *)this + 91);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    int v3 = (std::__shared_weak_count *)*((void *)this + 91);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::MapTileData::~MapTileData(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF538F50;
  *((void *)this + 79) = &unk_1EF538FB8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 93);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    int v3 = (std::__shared_weak_count *)*((void *)this + 91);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    int v3 = (std::__shared_weak_count *)*((void *)this + 91);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  md::MapTileData::~MapTileData(this);
}

unint64_t md::FlyoverDsmTileData::_heightBounds<unsigned char>(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v3 = *a3;
  if (!*a3) {
    goto LABEL_31;
  }
  int v4 = *(_DWORD *)(v3 + 32);
  int v5 = *(_DWORD *)(v3 + 40);
  char v6 = *(unsigned char *)(a2 + 1);
  char v7 = *(unsigned char *)(v3 + 57);
  char v8 = v6 - v7;
  int16x4_t v9 = *(int16x4_t *)(v3 + 60);
  int v10 = *(_DWORD *)(a2 + 8) - (v9.i32[1] << (v6 - v7));
  int v11 = (((-1 << v7) + v9.i32[0] + 1) << (v6 - v7)) + ~(-1 << v6) - *(_DWORD *)(a2 + 4);
  int v12 = 1 << v8;
  if (v12 <= v4 && v12 <= v5)
  {
    int v16 = v10 * v4 / v12;
    int v17 = v4 / v12 + v16;
    unsigned int v20 = v11 * v5 / v12;
    unsigned int v21 = v5 / v12 + v20;
  }
  else
  {
    float v14 = (float)v4 / (float)v12;
    float v15 = fabsf(v14 * (float)v10);
    int v16 = (int)v15;
    int v17 = (int)(float)(ceilf(v14) + truncf(v15));
    float v18 = (float)v5 / (float)v12;
    float v19 = fabsf(v18 * (float)v11);
    unsigned int v20 = (int)v19;
    *(float *)v9.i32 = ceilf(v18) + truncf(v19);
    unsigned int v21 = (int)*(float *)v9.i32;
  }
  float v22 = -40075000.0;
  float v23 = 40075000.0;
  if (v20 < v21 && v16 < v17)
  {
    char v24 = 0;
    unsigned __int8 v25 = 0;
    int v26 = (~v20 + v4) * v4;
    unsigned __int8 v27 = -1;
    do
    {
      int v28 = v16;
      do
      {
        unsigned int v29 = *(unsigned __int8 *)(*(void *)v3 + (v26 + v28));
        unsigned __int8 v30 = v25;
        if (v29 > v25) {
          unsigned __int8 v30 = *(unsigned char *)(*(void *)v3 + (v26 + v28));
        }
        unsigned __int8 v31 = v27;
        if (v29 < v27) {
          unsigned __int8 v31 = *(unsigned char *)(*(void *)v3 + (v26 + v28));
        }
        BOOL v32 = v29 == 255;
        if (!v32)
        {
          unsigned __int8 v27 = v31;
          unsigned __int8 v25 = v30;
        }
        v24 |= v32;
        ++v28;
      }
      while (v17 != v28);
      v26 -= v4;
      ++v20;
    }
    while (v20 != v21);
    if (v27 <= v25)
    {
      v9.i16[0] = *(_WORD *)(v3 + 52);
      float v33 = (float)vmovl_s16(v9).i32[0];
      float v34 = *(float *)(v3 + 48);
      float v23 = v33 + (float)(v34 * (float)v27);
      float v22 = v33 + (float)(v34 * (float)v25);
      if ((v24 & 1) == 0) {
        goto LABEL_29;
      }
    }
    else
    {
      float v22 = -40075000.0;
      float v23 = 40075000.0;
    }
  }
  uint64_t v35 = *(void *)(a1 + 736);
  if (!v35)
  {
LABEL_29:
    if (v23 <= v22)
    {
      unsigned int v40 = LODWORD(v23) & 0xFFFFFF00;
      int v39 = LOBYTE(v23);
      unint64_t v3 = (unint64_t)LODWORD(v22) << 32;
      return v3 | v40 | v39;
    }
    goto LABEL_30;
  }
  if (*(unsigned char *)(v35 + 24) == 8)
  {
    unint64_t v36 = md::FlyoverDsmTileData::_heightBounds<unsigned char>();
    if (!v37) {
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  unint64_t v36 = md::FlyoverDsmTileData::_heightBounds<unsigned short>(a1, a2, (unint64_t *)(a1 + 736));
  if (v38)
  {
LABEL_28:
    float v23 = fminf(v23, *(float *)&v36);
    float v22 = fmaxf(v22, *((float *)&v36 + 1));
    goto LABEL_29;
  }
LABEL_30:
  unint64_t v3 = 0;
LABEL_31:
  int v39 = 0;
  unsigned int v40 = 0;
  return v3 | v40 | v39;
}

unint64_t md::FlyoverDsmTileData::_heightBounds<unsigned short>(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v3 = *a3;
  if (!*a3) {
    goto LABEL_31;
  }
  int v4 = *(_DWORD *)(v3 + 32);
  int v5 = *(_DWORD *)(v3 + 40);
  char v6 = *(unsigned char *)(a2 + 1);
  char v7 = *(unsigned char *)(v3 + 57);
  char v8 = v6 - v7;
  int16x4_t v9 = *(int16x4_t *)(v3 + 60);
  int v10 = *(_DWORD *)(a2 + 8) - (v9.i32[1] << (v6 - v7));
  int v11 = (((-1 << v7) + v9.i32[0] + 1) << (v6 - v7)) + ~(-1 << v6) - *(_DWORD *)(a2 + 4);
  int v12 = 1 << v8;
  if (v12 <= v4 && v12 <= v5)
  {
    int v16 = v10 * v4 / v12;
    int v17 = v4 / v12 + v16;
    unsigned int v20 = v11 * v5 / v12;
    unsigned int v21 = v5 / v12 + v20;
  }
  else
  {
    float v14 = (float)v4 / (float)v12;
    float v15 = fabsf(v14 * (float)v10);
    int v16 = (int)v15;
    int v17 = (int)(float)(ceilf(v14) + truncf(v15));
    float v18 = (float)v5 / (float)v12;
    float v19 = fabsf(v18 * (float)v11);
    unsigned int v20 = (int)v19;
    *(float *)v9.i32 = ceilf(v18) + truncf(v19);
    unsigned int v21 = (int)*(float *)v9.i32;
  }
  float v22 = -40075000.0;
  float v23 = 40075000.0;
  if (v20 < v21 && v16 < v17)
  {
    char v24 = 0;
    unsigned __int16 v25 = 0;
    int v26 = (~v20 + v4) * v4;
    unsigned __int16 v27 = -1;
    do
    {
      int v28 = v16;
      do
      {
        unsigned int v29 = *(unsigned __int16 *)(*(void *)v3 + 2 * (v26 + v28));
        unsigned __int16 v30 = v25;
        if (v29 > v25) {
          unsigned __int16 v30 = *(_WORD *)(*(void *)v3 + 2 * (v26 + v28));
        }
        unsigned __int16 v31 = v27;
        if (v29 < v27) {
          unsigned __int16 v31 = *(_WORD *)(*(void *)v3 + 2 * (v26 + v28));
        }
        BOOL v32 = v29 == 0xFFFF;
        if (!v32)
        {
          unsigned __int16 v27 = v31;
          unsigned __int16 v25 = v30;
        }
        v24 |= v32;
        ++v28;
      }
      while (v17 != v28);
      v26 -= v4;
      ++v20;
    }
    while (v20 != v21);
    if (v27 <= v25)
    {
      v9.i16[0] = *(_WORD *)(v3 + 52);
      float v33 = (float)vmovl_s16(v9).i32[0];
      float v34 = *(float *)(v3 + 48);
      float v23 = v33 + (float)(v34 * (float)v27);
      float v22 = v33 + (float)(v34 * (float)v25);
      if ((v24 & 1) == 0) {
        goto LABEL_29;
      }
    }
    else
    {
      float v22 = -40075000.0;
      float v23 = 40075000.0;
    }
  }
  uint64_t v35 = *(void *)(a1 + 736);
  if (!v35)
  {
LABEL_29:
    if (v23 <= v22)
    {
      unsigned int v40 = LODWORD(v23) & 0xFFFFFF00;
      int v39 = LOBYTE(v23);
      unint64_t v3 = (unint64_t)LODWORD(v22) << 32;
      return v3 | v40 | v39;
    }
    goto LABEL_30;
  }
  if (*(unsigned char *)(v35 + 24) == 8)
  {
    uint64_t v36 = md::FlyoverDsmTileData::_heightBounds<unsigned char>();
    if (!v37) {
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  uint64_t v36 = md::FlyoverDsmTileData::_heightBounds<unsigned short>();
  if (v38)
  {
LABEL_28:
    float v23 = fminf(v23, *(float *)&v36);
    float v22 = fmaxf(v22, *((float *)&v36 + 1));
    goto LABEL_29;
  }
LABEL_30:
  unint64_t v3 = 0;
LABEL_31:
  int v39 = 0;
  unsigned int v40 = 0;
  return v3 | v40 | v39;
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::TileBaseSurface::P3T2T2Buffer>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::TileBaseSurface::P3T2T2Buffer>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::VertexDataTyped<ggl::TileBaseSurface::P3T2T2Buffer>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TileBaseSurface::P3T2T2Buffer>,geo::StdAllocator<ggl::VertexDataTyped<ggl::TileBaseSurface::P3T2T2Buffer>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 256);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TileBaseSurface::P3T2T2Buffer>,geo::StdAllocator<ggl::VertexDataTyped<ggl::TileBaseSurface::P3T2T2Buffer>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TileBaseSurface::P3T2T2Buffer>,geo::StdAllocator<ggl::VertexDataTyped<ggl::TileBaseSurface::P3T2T2Buffer>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584AF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TileBaseSurface::P3T2T2Buffer>,geo::StdAllocator<ggl::VertexDataTyped<ggl::TileBaseSurface::P3T2T2Buffer>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584AF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'ggl::TileBaseSurface::P3T2T2Mesh::~P3T2T2Mesh(ggl::TileBaseSurface::P3T2T2Mesh *this)
{
  ggl::Mesh::~Mesh((ggl::TileBaseSurface::P3T2T2Mesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::TileBaseSurface::P3T2T2Mesh *)((char *)this - 16));
}

void ggl::TileBaseSurface::P3T2T2Mesh::~P3T2T2Mesh(ggl::TileBaseSurface::P3T2T2Mesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::TileBaseSurface::P3T2T2Buffer>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::TileBaseSurface::P3T2T2Buffer>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

void ggl::TileBaseSurface::P3T2T2PipelineState::~P3T2T2PipelineState(ggl::TileBaseSurface::P3T2T2PipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::TileBaseSurface::P3T2T2PipelineSetup::textureIsEnabled(ggl::TileBaseSurface::P3T2T2PipelineSetup *this)
{
  return 0;
}

BOOL ggl::TileBaseSurface::P3T2T2PipelineSetup::constantDataIsEnabled(ggl::TileBaseSurface::P3T2T2PipelineSetup *this, unint64_t a2)
{
  return a2 < 2;
}

void ggl::TileBaseSurface::P3T2T2PipelineSetup::~P3T2T2PipelineSetup(ggl::TileBaseSurface::P3T2T2PipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void md::Logic<md::ARDataRequestObserverLogic,md::ARDataRequestObserverContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::debugConsoleString(uint64_t a1@<X0>, gdc::DebugTreeNode *a2@<X8>)
{
  uint64_t v13 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(&v6);
  gdc::DebugTreeNode::toString(a2);
  uint64_t v3 = __p;
  if (__p)
  {
    uint64_t v4 = (uint64_t)v12;
    int v5 = __p;
    if (v12 != __p)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:nn180100]<gdc::DebugTreeProperty,0>(v4);
      }
      while ((void *)v4 != v3);
      int v5 = __p;
    }
    int v12 = v3;
    operator delete(v5);
  }
  std::vector<gdc::DebugTreeNode>::~vector[abi:nn180100](&v10);
  if ((v9 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0) {
      return;
    }
LABEL_10:
    operator delete(v6);
    return;
  }
  operator delete(v8);
  if (v7 < 0) {
    goto LABEL_10;
  }
}

void md::ARDataRequestObserverLogic::runBeforeLayout(uint64_t a1)
{
  uint64_t v1 = *(int8x8_t **)(a1 + 120);
  uint64_t v2 = (void *)gdc::Registry::storage<gdc::component::DataRequestObserver>(v1);
  uint64_t v3 = (uint64_t *)v2[7];
  uint64_t v4 = (uint64_t *)v2[8];
  if (v3 != v4)
  {
    uint64_t v5 = v2[10];
    do
    {
      char v7 = *(unsigned __int16 **)(v5 + 56);
      char v8 = *(unsigned __int16 **)(v5 + 64);
      if (v7 != v8)
      {
        uint64_t v9 = *v3;
        int v10 = v1[5].u16[0];
        do
        {
          if (*v7 != v10) {
            goto LABEL_3;
          }
          unint64_t v11 = *((unsigned int *)v7 + 1);
          int8x8_t v12 = v1[6];
          if (v11 >= (uint64_t)(*(void *)&v1[7] - *(void *)&v12) >> 3) {
            goto LABEL_3;
          }
          uint64_t v13 = (unsigned __int16 *)(*(void *)&v12 + 8 * v11);
          if (*v13 != v10 || v13[1] != v7[1]) {
            goto LABEL_3;
          }
          int v14 = *((_DWORD *)v13 + 1);
          v7 += 16;
        }
        while (v14 == v11 && v7 != v8);
        if (v14 != v11)
        {
LABEL_3:
          char v6 = (void *)gdc::Registry::storage<gdc::component::DataRequestObserver::DidChange>(v1);
          gdc::ComponentStorageWrapper<md::components::Collapsible>::emplace(v6, v9);
        }
      }
      v5 += 104;
      ++v3;
    }
    while (v3 != v4);
  }
  unint64_t v64 = (uint64_t *)v68;
  uint64_t v65 = (uint64_t *)v68;
  uint64_t v66 = (uint64_t *)v68;
  uint64_t v67 = 4;
  int v16 = (void *)gdc::Registry::storage<gdc::component::DataRequestObserver>(v1);
  uint64_t v17 = gdc::Registry::storage<gdc::component::DataRequestObserver::DidChange>(v1);
  float v18 = (void *)v17;
  uint64_t v19 = v17 + 32;
  uint64_t v21 = v16[7];
  uint64_t v20 = v16[8];
  if (*(void *)(v17 + 64) - *(void *)(v17 + 56) >= (unint64_t)(v20 - v21)) {
    float v22 = v16 + 4;
  }
  else {
    float v22 = (void *)(v17 + 32);
  }
  if (v16 + 4 == v22)
  {
    uint64_t v71 = v1;
    uint64_t v72 = (uint64_t)&v64;
    if (v21 != v20)
    {
      uint64_t v36 = (unsigned __int8 *)v16[10];
      do
      {
        unint64_t v37 = *(unsigned int *)(v21 + 4);
        uint64_t v38 = v18[4];
        if (v37 >> 7 < (v18[5] - v38) >> 3)
        {
          uint64_t v39 = *(void *)(v38 + 8 * (v37 >> 7));
          if (v39)
          {
            unint64_t v40 = *(unsigned __int16 *)(v39 + 2 * (v37 & 0x7F));
            uint64_t v42 = v18[7];
            uint64_t v41 = v18[8];
            if (v40 < (v41 - v42) >> 3)
            {
              uint64_t v43 = v42 + 8 * v40;
              if (v43 != v41 && *(_DWORD *)(v43 + 4) == v37) {
                gdc::component::DataRequestObserver::processPendingState(gdc::Registry &)::$_1::operator()(&v71, *(void *)v21, v36);
              }
            }
          }
        }
        v36 += 104;
        v21 += 8;
      }
      while (v21 != v20);
    }
  }
  if ((void *)v19 == v22)
  {
    uint64_t v71 = v1;
    uint64_t v72 = (uint64_t)&v64;
    uint64_t v46 = v18[7];
    for (uint64_t i = v18[8]; v46 != i; v46 += 8)
    {
      unint64_t v48 = *(unsigned int *)(v46 + 4);
      uint64_t v49 = v16[4];
      unint64_t v50 = (v16[5] - v49) >> 3;
      if (v48 >> 7 < v50)
      {
        uint64_t v51 = *(void *)(v49 + 8 * (v48 >> 7));
        if (v51)
        {
          unint64_t v52 = *(unsigned __int16 *)(v51 + 2 * (v48 & 0x7F));
          uint64_t v54 = v16[7];
          uint64_t v53 = v16[8];
          unint64_t v55 = (v53 - v54) >> 3;
          if (v55 > v52)
          {
            uint64_t v56 = v54 + 8 * v52;
            if (v56 != v53 && *(_DWORD *)(v56 + 4) == v48)
            {
              unint64_t v58 = *(void *)v46;
              unint64_t v59 = *(void *)v46 >> 39;
              if (v59 < v50
                && (uint64_t v60 = *(void *)(v49 + 8 * v59)) != 0
                && (unint64_t v61 = *(unsigned __int16 *)(v60 + 2 * (HIDWORD(v58) & 0x7F)), v55 > v61)
                && ((uint64_t v62 = v54 + 8 * v61, v62 != v53) ? (v63 = *(_DWORD *)(v62 + 4) == HIDWORD(v58)) : (v63 = 0), v63))
              {
                unint64_t v47 = (unsigned __int8 *)(v16[10] + 104 * v61);
              }
              else
              {
                unint64_t v47 = (unsigned __int8 *)v16[11];
              }
              gdc::component::DataRequestObserver::processPendingState(gdc::Registry &)::$_1::operator()(&v71, v58, v47);
            }
          }
        }
      }
    }
  }
  float v23 = (void *)gdc::Registry::storage<gdc::component::DataRequestObserver::DidChange>(v1);
  char v24 = v23;
  if (v23[29])
  {
    unsigned __int16 v25 = (void *)v23[28];
    if (v25)
    {
      uint64_t v26 = v23[31];
      unsigned __int16 v27 = (int8x8_t *)v23[7];
      uint64_t v28 = (uint64_t)(v23[8] - (void)v27) >> 3;
      while (1)
      {
        uint64_t v71 = v27;
        uint64_t v72 = v28;
        uint64_t v70 = v26;
        uint64_t v29 = v25[6];
        if (!v29) {
          break;
        }
        (*(void (**)(uint64_t, uint64_t *, int8x8_t **))(*(void *)v29 + 48))(v29, &v70, &v71);
        unsigned __int16 v25 = (void *)*v25;
        if (!v25) {
          goto LABEL_28;
        }
      }
LABEL_75:
      std::__throw_bad_function_call[abi:nn180100]();
      JUMPOUT(0x1A27B1C30);
    }
  }
LABEL_28:
  v24[8] = v24[7];
  v24[11] = v24[10];
  unsigned __int16 v30 = v64;
  unsigned __int16 v31 = v65;
  if (v64 == v65) {
    goto LABEL_38;
  }
  do
  {
    BOOL v32 = (uint64_t *)gdc::Registry::storage<gdc::component::DataRequestObserver>(v1);
    uint64_t v69 = *v30;
    if (geo::sparse_map<gdc::Entity,gdc::component::DataRequestObserver>::erase(v32 + 4, HIDWORD(v69)))
    {
      float v33 = (void *)v32[28];
      if (v33)
      {
        uint64_t v34 = v32[31];
        do
        {
          uint64_t v71 = (int8x8_t *)&v69;
          uint64_t v72 = 1;
          uint64_t v70 = v34;
          uint64_t v35 = v33[6];
          if (!v35) {
            goto LABEL_75;
          }
          (*(void (**)(uint64_t, uint64_t *, int8x8_t **))(*(void *)v35 + 48))(v35, &v70, &v71);
          float v33 = (void *)*v33;
        }
        while (v33);
      }
    }
    ++v30;
  }
  while (v30 != v31);
  unsigned __int16 v30 = v64;
LABEL_38:
  if (v30 != v66) {
    free(v30);
  }
}

uint64_t md::Logic<md::ARDataRequestObserverLogic,md::ARDataRequestObserverContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::frequency(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t md::Logic<md::ARDataRequestObserverLogic,md::ARDataRequestObserverContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_debugConsoleString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  if (*(void *)(a3 + 8) == 0xBC61DE3EFA7960C9 && *(void *)(a3 + 32)) {
    return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 160))(result, a2, v4);
  }
  a4[23] = 0;
  *a4 = 0;
  return result;
}

uint64_t md::Logic<md::ARDataRequestObserverLogic,md::ARDataRequestObserverContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xBC61DE3EFA7960C9)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 152))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARDataRequestObserverLogic,md::ARDataRequestObserverContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayout(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xBC61DE3EFA7960C9)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 144))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARDataRequestObserverLogic,md::ARDataRequestObserverContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runAfterLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xBC61DE3EFA7960C9)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 136))(result, a2, v3);
    }
  }
  return result;
}

uint64_t md::Logic<md::ARDataRequestObserverLogic,md::ARDataRequestObserverContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_runBeforeLayoutAtVariableRate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == 0xBC61DE3EFA7960C9)
  {
    if (*(void *)(a3 + 32)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)result + 128))(result, a2, v3);
    }
  }
  return result;
}

void md::Logic<md::ARDataRequestObserverLogic,md::ARDataRequestObserverContext,md::LogicDependencies<gdc::TypeList<>,gdc::TypeList<>>>::_allocateContext()
{
}

void sub_1A27B1F20(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10F1C40B0038B9CLL);
  _Unwind_Resume(a1);
}

uint64_t gdc::ObjectHolder<md::ARDataRequestObserverContext>::extract@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  *a2 = v2;
  return result;
}

void gdc::ManagedObjectHolder<md::ARDataRequestObserverContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555BE0;
  uint64_t v1 = a1[4];
  if (v1) {
    MEMORY[0x1A6239270](v1, 0xC400A2AC0F1);
  }
  JUMPOUT(0x1A6239270);
}

void *gdc::ManagedObjectHolder<md::ARDataRequestObserverContext>::~ManagedObjectHolder(void *a1)
{
  *a1 = &unk_1EF555BE0;
  uint64_t v2 = a1[4];
  if (v2) {
    MEMORY[0x1A6239270](v2, 0xC400A2AC0F1);
  }
  return a1;
}

void md::ARDataRequestObserverLogic::~ARDataRequestObserverLogic(md::ARDataRequestObserverLogic *this)
{
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
  JUMPOUT(0x1A6239270);
}

{
  *(void *)this = off_1EF554478;
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 13));
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 10));
}

void sub_1A27B2464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1A27B2754(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A27B2818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A27B28E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A27B3718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  _Unwind_Resume(a1);
}

void sub_1A27B3998(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

long double _screenPointsForDistance(void *a1, double a2, double a3, double a4)
{
  id v6 = a1;
  [v6 groundPoint];
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;
  [v6 forwardVector];
  double v41 = v13;
  double v15 = v14;
  double v17 = v16;
  float v18 = (double *)[v6 position];
  double v37 = v12;
  double v38 = v8;
  double v39 = a2;
  double v40 = a4;
  double v19 = v18[1];
  double v35 = v18[2];
  double v36 = *v18;
  [v6 tanHalfHorizFOV];
  double v21 = v20;
  long double v22 = exp(v10 * 6.28318531 + -3.14159265);
  long double v23 = atan(v22) * 114.591559 + -90.0;
  long double v24 = cos(v23 * 0.034906585) * -559.82 + 111132.92;
  long double v25 = v24 + cos(v23 * 0.0698131701) * 1.175;
  long double v26 = v25 + cos(v23 * 0.104719755) * -0.0023;
  long double v27 = v23 * 0.00872664626;
  long double v28 = tan(v23 * 0.00872664626 + 0.78103484);
  double v29 = log(v28);
  long double v30 = tan(v27 + 0.789761487);
  long double v31 = log(v30);
  double v32 = v17 * v37 + v15 * v10 + (v38 - v36) * v41 - (v19 * v15 + v35 * v17);
  long double v33 = fabs((v31 - v29) * 0.159154943) * (v39 * v40) / (v26 * (v21 * (v32 + v32)));

  return v33;
}

void sub_1A27B3B74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A27B3D40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A27B3F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1A27B42C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A27B4884(_Unwind_Exception *a1)
{
  if (v5) {
  _Unwind_Resume(a1);
  }
}

void sub_1A27B4A78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void **karo::Item::setName(uint64_t a1, void **a2)
{
  __n128 result = (void **)(a1 + 8);
  if (result != a2)
  {
    if (*(char *)(a1 + 31) < 0)
    {
      size_t v5 = (size_t)a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        size_t v6 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (void **)*a2;
        size_t v6 = v5;
      }
      return std::string::__assign_no_alias<false>(result, a2, v6);
    }
    else if ((*((unsigned char *)a2 + 23) & 0x80) != 0)
    {
      return (void **)std::string::__assign_no_alias<true>(result, *a2, (size_t)a2[1]);
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      result[2] = a2[2];
      *(_OWORD *)__n128 result = v4;
    }
  }
  return result;
}

void karo::Item::~Item(void **this)
{
  *this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1A6239270);
}

{
  *this = &unk_1EF567F78;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::removeTile(void *a1, uint64_t *a2)
{
  long long v4 = (std::mutex *)(a1[1] + 8);
  std::mutex::lock(v4);
  size_t v5 = (void *)a1[3];
  size_t v6 = (void *)a1[4];
  uint64_t v8 = *a2;
  double v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    size_t v5 = (void *)a1[3];
    size_t v6 = (void *)a1[4];
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5 == v6)
  {
LABEL_6:
    size_t v5 = v6;
  }
  else
  {
    while (v5[1] != v8)
    {
      v5 += 3;
      if (v5 == v6) {
        goto LABEL_6;
      }
    }
    if (v5 != v6)
    {
      for (uint64_t i = v5 + 3; i != v6; i += 3)
      {
        uint64_t v15 = i[1];
        if (v15 != v8)
        {
          *size_t v5 = *i;
          uint64_t v16 = i[2];
          i[1] = 0;
          i[2] = 0;
          double v17 = (std::__shared_weak_count *)v5[2];
          v5[1] = v15;
          v5[2] = v16;
          if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          v5 += 3;
        }
      }
    }
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  std::vector<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,geo::StdAllocator<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,mdm::Allocator>>::erase((uint64_t)(a1 + 3), (uint64_t)v5, a1[4]);
  if (a1[8] == v8)
  {
    double v10 = (void *)a1[3];
    if (v10 != (void *)a1[4])
    {
      a1[7] = *v10;
      uint64_t v12 = v10[1];
      uint64_t v11 = v10[2];
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      double v13 = (std::__shared_weak_count *)a1[9];
      a1[8] = v12;
      a1[9] = v11;
      if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  if (a1[3] == a1[4])
  {
    uint64_t v9 = a1[1];
    *(void *)(v9 + 152) = 0;
    atomic_store(1u, (unsigned __int8 *)(v9 + 145));
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  std::mutex::unlock(v4);
}

void sub_1A27B4E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void *std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::find<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>(void *a1, void *a2)
{
  if (*a2) {
    uint64_t v4 = *a2 + 8;
  }
  else {
    uint64_t v4 = 0;
  }
  unint64_t v5 = md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::hash(v4);
  int8x8_t v6 = (int8x8_t)a1[1];
  if (!*(void *)&v6) {
    return 0;
  }
  unint64_t v7 = v5;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v9 = v5;
    if (v5 >= *(void *)&v6) {
      unint64_t v9 = v5 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v6 - 1) & v5;
  }
  double v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = (void *)*v10;
  if (*v10)
  {
    if (v8.u32[0] < 2uLL)
    {
      uint64_t v12 = *(void *)&v6 - 1;
      while (1)
      {
        uint64_t v18 = v11[1];
        if (v18 == v7)
        {
          uint64_t v16 = v11[2];
          if (v16) {
            uint64_t v17 = v16 + 8;
          }
          else {
            uint64_t v17 = 0;
          }
          if (!md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::compare(v17, *a2 + 8))return v11; {
        }
          }
        else if ((v18 & v12) != v9)
        {
          return 0;
        }
        uint64_t v11 = (void *)*v11;
        if (!v11) {
          return v11;
        }
      }
    }
    do
    {
      unint64_t v15 = v11[1];
      if (v15 == v7)
      {
        uint64_t v13 = v11[2];
        if (v13) {
          uint64_t v14 = v13 + 8;
        }
        else {
          uint64_t v14 = 0;
        }
        if (!md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::compare(v14, *a2 + 8))return v11; {
      }
        }
      else
      {
        if (v15 >= *(void *)&v6) {
          v15 %= *(void *)&v6;
        }
        if (v15 != v9) {
          return 0;
        }
      }
      uint64_t v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::erase(uint64_t a1, void *a2)
{
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  unint64_t v5 = a2[1];
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    if (v5 >= *(void *)&v4) {
      v5 %= *(void *)&v4;
    }
  }
  else
  {
    v5 &= *(void *)&v4 - 1;
  }
  unint64_t v7 = *(void **)(*(void *)a1 + 8 * v5);
  do
  {
    uint8x8_t v8 = v7;
    unint64_t v7 = (void *)*v7;
  }
  while (v7 != a2);
  if (v8 == (void *)(a1 + 24)) {
    goto LABEL_18;
  }
  unint64_t v9 = v8[1];
  if (v6.u32[0] > 1uLL)
  {
    if (v9 >= *(void *)&v4) {
      v9 %= *(void *)&v4;
    }
  }
  else
  {
    v9 &= *(void *)&v4 - 1;
  }
  if (v9 != v5)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v10 = *(void *)(*a2 + 8);
    if (v6.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v4) {
        v10 %= *(void *)&v4;
      }
    }
    else
    {
      v10 &= *(void *)&v4 - 1;
    }
    if (v10 != v5) {
LABEL_19:
    }
      *(void *)(*(void *)a1 + 8 * v5) = 0;
  }
  uint64_t v11 = *a2;
  if (*a2)
  {
    unint64_t v12 = *(void *)(v11 + 8);
    if (v6.u32[0] > 1uLL)
    {
      if (v12 >= *(void *)&v4) {
        v12 %= *(void *)&v4;
      }
    }
    else
    {
      v12 &= *(void *)&v4 - 1;
    }
    if (v12 != v5)
    {
      *(void *)(*(void *)a1 + 8 * v12) = v8;
      uint64_t v11 = *a2;
    }
  }
  *uint8x8_t v8 = v11;
  *a2 = 0;
  --*(void *)(a1 + 40);
  uint64_t v13 = (void *)a2[2];
  if (v13)
  {
    if ((*v13)-- == 1)
    {
      md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::~LabelFeatureThunk((uint64_t)(v13 + 1));
      unint64_t v15 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
      {
        unint64_t v15 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
        if (v18) {
          operator new();
        }
      }
      (*(void (**)(void, void, uint64_t))(**((void **)v15 + 91) + 40))(*((void *)v15 + 91), a2[2], 104);
      a2[2] = 0;
    }
  }
  uint64_t v16 = *(uint64_t (**)(void))(**(void **)(a1 + 32) + 40);
  return v16();
}

void std::vector<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,geo::StdAllocator<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,mdm::Allocator>>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = a2;
    uint64_t v5 = a3;
    uint64_t v6 = *(void *)(a1 + 8);
    if (a3 != v6)
    {
      uint64_t v7 = 8 * ((a3 - a2) >> 3);
      do
      {
        uint64_t v8 = v3 + v7;
        *(void *)uint64_t v3 = *(void *)(v3 + v7);
        long long v9 = *(_OWORD *)(v3 + v7 + 8);
        *(void *)(v8 + 8) = 0;
        *(void *)(v8 + 16) = 0;
        unint64_t v10 = *(std::__shared_weak_count **)(v3 + 16);
        *(_OWORD *)(v3 + 8) = v9;
        if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        v3 += 24;
      }
      while (v3 + v7 != v6);
      uint64_t v5 = *(void *)(a1 + 8);
    }
    for (; v5 != v3; v5 -= 24)
    {
      uint64_t v11 = *(std::__shared_weak_count **)(v5 - 8);
      if (v11)
      {
        if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    *(void *)(a1 + 8) = v3;
  }
}

void std::__function::__func<md::LabelFeaturePool::flushRemovedTiles(void)::$_1,std::allocator<md::LabelFeaturePool::flushRemovedTiles(void)::$_1>,void ()(void)>::operator()()
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  os_log_t v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "LabelsFlushTiles", "", v1, 2u);
  }
}

void std::__function::__func<md::LabelFeaturePool::flushRemovedTiles(void)::$_1,std::allocator<md::LabelFeaturePool::flushRemovedTiles(void)::$_1>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF571FE8;
}

void *std::__function::__func<md::LabelFeaturePool::flushRemovedTiles(void)::$_1,std::allocator<md::LabelFeaturePool::flushRemovedTiles(void)::$_1>,void ()(void)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EF571FE8;
  return result;
}

void std::__function::__func<md::LabelFeaturePool::flushRemovedTiles(void)::$_1,std::allocator<md::LabelFeaturePool::flushRemovedTiles(void)::$_1>,void ()(void)>::~__func()
{
}

void std::__function::__func<md::LabelFeaturePool::flushRemovedTiles(void)::$_0,std::allocator<md::LabelFeaturePool::flushRemovedTiles(void)::$_0>,void ()(void)>::operator()()
{
  if (GEOGetVectorKitPerformanceLog_onceToken != -1) {
    dispatch_once(&GEOGetVectorKitPerformanceLog_onceToken, &__block_literal_global_17);
  }
  os_log_t v0 = (id)GEOGetVectorKitPerformanceLog_log;
  if (os_signpost_enabled(v0))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_signpost_emit_with_name_impl(&dword_1A1780000, v0, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LabelsFlushTiles", "", v1, 2u);
  }
}

void std::__function::__func<md::LabelFeaturePool::flushRemovedTiles(void)::$_0,std::allocator<md::LabelFeaturePool::flushRemovedTiles(void)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF571FA0;
}

void *std::__function::__func<md::LabelFeaturePool::flushRemovedTiles(void)::$_0,std::allocator<md::LabelFeaturePool::flushRemovedTiles(void)::$_0>,void ()(void)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EF571FA0;
  return result;
}

void std::__function::__func<md::LabelFeaturePool::flushRemovedTiles(void)::$_0,std::allocator<md::LabelFeaturePool::flushRemovedTiles(void)::$_0>,void ()(void)>::~__func()
{
}

uint64_t md::LabelFeaturePool::addUnnamedLineFeature(void *a1, uint64_t a2, uint64_t *a3, char **a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  {
    operator new();
  }
  unint64_t v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                       + 16))(mdm::Allocator::instance(void)::alloc, 104, 8);
  *unint64_t v15 = 1;
  md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::LabelFeatureThunk((uint64_t)(v15 + 1), a3, a8, 0);
  double v39 = v15;
  uint64_t v16 = std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::__emplace_unique_key_args<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator> const&>((float *)(a2 + 120), &v39, &v39);
  *(unsigned char *)(a6 + 89) = v17;
  if (v17)
  {
    {
      operator new();
    }
    uint64_t v18 = mdm::Allocator::instance(void)::alloc;
    double v19 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                         + 16))(mdm::Allocator::instance(void)::alloc, 528, 8);
    *double v19 = &unk_1EF580DB0;
    v19[1] = 0;
    void v19[2] = 0;
    v19[3] = v18;
    uint64_t v20 = md::UniLineLabelFeature::UniLineLabelFeature((uint64_t)(v19 + 4), a3, a4, a5, a6);
    if (v39) {
      double v21 = v39 + 1;
    }
    else {
      double v21 = 0;
    }
    long double v22 = (std::__shared_weak_count *)v21[2];
    v21[1] = v20;
    void v21[2] = v19;
    if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    uint64_t v23 = *(void *)(a2 + 672);
    long double v24 = v39;
    long double v25 = v39 + 1;
    if (!v39) {
      long double v25 = 0;
    }
    uint64_t v26 = v25[1];
    *(void *)(v26 + 152) = v25;
    uint64_t v27 = v23 + 1;
    *(void *)(a2 + 672) = v27;
    *(void *)(v26 + 72) = v27;
    *(unsigned char *)(v26 + 147) = a8;
  }
  else
  {
    long double v28 = v16;
    double v29 = (void *)v16[2];
    if (v29) {
      ++*v29;
    }
    BOOL v30 = (*v15)-- == 1;
    if (v30)
    {
      md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::~LabelFeatureThunk((uint64_t)(v15 + 1));
      {
        operator new();
      }
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v39, 104);
      double v29 = (void *)v28[2];
    }
    double v39 = v29;
    if (v29) {
      long double v31 = v29 + 1;
    }
    else {
      long double v31 = 0;
    }
    md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::add(v31, a3);
    long double v24 = v39;
    double v32 = v39 + 1;
    if (!v39) {
      double v32 = 0;
    }
    md::LabelLineStore::addRoadFeature(*(void *)(v32[1] + 192), a3, a4, a5, a6, v32[1] + 440);
  }
  std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeaturePoolTileInfo::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeaturePoolTileInfo::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::__emplace_unique_key_args<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator> const&>(a7 + 56, (uint64_t)v24, &v39);
  uint64_t result = (uint64_t)(v24 + 1);
  if (v24) {
    uint64_t v34 = v24 + 1;
  }
  else {
    uint64_t v34 = 0;
  }
  uint64_t v36 = v34[1];
  uint64_t v35 = v34[2];
  *a1 = v36;
  a1[1] = v35;
  if (v35) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
  }
  if (v24)
  {
    BOOL v30 = (*v24)-- == 1;
    if (v30)
    {
      md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::~LabelFeatureThunk(result);
      {
        operator new();
      }
      double v37 = *(uint64_t (**)(void))(*(void *)mdm::Allocator::instance(void)::alloc + 40);
      return v37();
    }
  }
  return result;
}

void sub_1A27B5A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__shared_weak_count::~__shared_weak_count(v11);
  (*(void (**)(uint64_t, std::__shared_weak_count *, uint64_t))(*(void *)v10 + 40))(v10, v11, 528);
  geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::~fast_shared_ptr(&a10);
  _Unwind_Resume(a1);
}

void *geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::~fast_shared_ptr(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    if ((*v2)-- == 1)
    {
      md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::~LabelFeatureThunk((uint64_t)(v2 + 1));
      int8x8_t v4 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
      {
        int8x8_t v4 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
        if (v6) {
          operator new();
        }
      }
      (*(void (**)(void, void, uint64_t))(**((void **)v4 + 91) + 40))(*((void *)v4 + 91), *a1, 104);
      *a1 = 0;
    }
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void **)(v2 + 16);
      if (v3)
      {
        if ((*v3)-- == 1)
        {
          md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::~LabelFeatureThunk((uint64_t)(v3 + 1));
          uint64_t v5 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
          {
            uint64_t v5 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
            if (v7) {
              operator new();
            }
          }
          (*(void (**)(void, void, uint64_t))(**((void **)v5 + 91) + 40))(*((void *)v5 + 91), *(void *)(v2 + 16), 104);
          *(void *)(v2 + 16) = 0;
        }
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)a1[1] + 40))(*(void *)a1[1], v2, 24);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<md::UniLineLabelFeature,geo::StdAllocator<md::UniLineLabelFeature,mdm::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 528);
}

uint64_t std::__shared_ptr_emplace<md::UniLineLabelFeature,geo::StdAllocator<md::UniLineLabelFeature,mdm::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<md::UniLineLabelFeature,geo::StdAllocator<md::UniLineLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580DB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::UniLineLabelFeature,geo::StdAllocator<md::UniLineLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580DB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t *std::vector<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,geo::StdAllocator<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,mdm::Allocator>>::~vector[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

void *geo::fast_shared_ptr<md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::~fast_shared_ptr(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    if ((*v2)-- == 1)
    {
      md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::~LabelFeatureThunk((uint64_t)(v2 + 1));
      uint64_t v4 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
      {
        uint64_t v4 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
        if (v6) {
          operator new();
        }
      }
      (*(void (**)(void, void, uint64_t))(**((void **)v4 + 91) + 40))(*((void *)v4 + 91), *a1, 104);
      *a1 = 0;
    }
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void **)(v2 + 16);
      if (v3)
      {
        if ((*v3)-- == 1)
        {
          md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::~LabelFeatureThunk((uint64_t)(v3 + 1));
          uint64_t v5 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
          {
            uint64_t v5 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
            if (v7) {
              operator new();
            }
          }
          (*(void (**)(void, void, uint64_t))(**((void **)v5 + 91) + 40))(*((void *)v5 + 91), *(void *)(v2 + 16), 104);
          *(void *)(v2 + 16) = 0;
        }
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)a1[1] + 40))(*(void *)a1[1], v2, 24);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<md::PhysicalLabelFeature,geo::StdAllocator<md::PhysicalLabelFeature,mdm::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 592);
}

uint64_t std::__shared_ptr_emplace<md::PhysicalLabelFeature,geo::StdAllocator<md::PhysicalLabelFeature,mdm::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<md::PhysicalLabelFeature,geo::StdAllocator<md::PhysicalLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580FA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::PhysicalLabelFeature,geo::StdAllocator<md::PhysicalLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580FA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::LabelFeaturePool::addContourLineFeatures(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v10 = *a3;
  uint64_t v9 = a3[1];
  uint64_t v181 = *(void *)a4;
  std::mutex::lock((std::mutex *)a1);
  uint64_t v11 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>((void *)(a1 + 456), *a2);
  if (v11)
  {
    unint64_t v12 = v11;
    std::mutex::unlock((std::mutex *)a1);
    int64x2_t v190 = 0;
    uint64_t v191 = 0;
    unint64_t v192 = 0;
    {
      operator new();
    }
    uint64_t v193 = mdm::Allocator::instance(void)::alloc;
    uint64_t v13 = v190;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v192 - (void)v190) >> 3) <= 0x1F)
    {
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                 + 16))(mdm::Allocator::instance(void)::alloc, 768, 8);
      int64x2_t v190 = (char *)(v14 + 24 * ((v191 - v190) / 24));
      uint64_t v191 = (char *)(v14 + 24 * ((v191 - v13) / 24));
      unint64_t v192 = v14 + 768;
    }
    uint64_t v15 = *a3;
    std::mutex::lock((std::mutex *)a1);
    if (v9 != v10)
    {
      uint64_t v16 = 0;
      if ((unint64_t)((v9 - v10) / 56) <= 1) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = (v9 - v10) / 56;
      }
      __n128 v183 = (void *)(a1 + 256);
      uint64_t v184 = a5 + 1;
      uint64_t v187 = v17;
      uint64_t v182 = v12 + 27;
      uint64_t v185 = a5;
      while (1)
      {
        if (!*(unsigned char *)(v15 + 28)) {
          goto LABEL_10;
        }
        {
          operator new();
        }
        uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                   + 16))(mdm::Allocator::instance(void)::alloc, 104, 8);
        *(void *)uint64_t v18 = 1;
        *(_OWORD *)(v18 + 16) = 0u;
        *(void *)(v18 + 8) = &unk_1EF5372C0;
        *(_OWORD *)(v18 + 32) = 0u;
        uint64_t v19 = v18 + 32;
        *(void *)(v18 + 48) = 0;
        {
          operator new();
        }
        *(void *)(v18 + 56) = mdm::Allocator::instance(void)::alloc;
        uint64_t v20 = *(std::__shared_weak_count **)(v15 + 8);
        if (v20 && (uint64_t v20 = std::__shared_weak_count::lock(v20)) != 0) {
          uint64_t v21 = *(void *)v15;
        }
        else {
          uint64_t v21 = 0;
        }
        *(void *)(v18 + 64) = v15;
        *(void *)(v18 + 72) = v21;
        *(void *)(v18 + 80) = v20;
        *(void *)(v18 + 88) = 0;
        *(unsigned char *)(v18 + 96) = 0;
        long double v22 = *(void **)(v18 + 40);
        unint64_t v23 = *(void *)(v18 + 48);
        if ((unint64_t)v22 >= v23)
        {
          unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v22 - *(void *)v19) >> 3);
          unint64_t v26 = v25 + 1;
          if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
            abort();
          }
          if (0x5555555555555556 * ((uint64_t)(v23 - *(void *)v19) >> 3) > v26) {
            unint64_t v26 = 0x5555555555555556 * ((uint64_t)(v23 - *(void *)v19) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *(void *)v19) >> 3) >= 0x555555555555555) {
            uint64_t v27 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            uint64_t v27 = v26;
          }
          if (v27)
          {
            uint64_t v28 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v18 + 56) + 16))(*(void *)(v18 + 56), 24 * v27, 8);
            uint64_t v29 = v28 + 24 * v25;
            uint64_t v30 = v28 + 24 * v27;
            if (v28)
            {
              *(_OWORD *)uint64_t v29 = *(_OWORD *)(v18 + 64);
              uint64_t v31 = *(void *)(v18 + 80);
              *(void *)(v28 + 24 * v25 + 16) = v31;
              if (v31) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
              }
            }
          }
          else
          {
            uint64_t v30 = 0;
            uint64_t v29 = 8 * (((uint64_t)v22 - *(void *)v19) >> 3);
          }
          long double v24 = (void *)(v29 + 24);
          uint64_t v32 = *(void *)(v18 + 32);
          uint64_t v19 = *(void *)(v18 + 40);
          if (v19 == v32)
          {
            *(void *)(v18 + 32) = v29;
            *(void *)(v18 + 40) = v24;
            uint64_t v35 = *(void *)(v18 + 48);
            *(void *)(v18 + 48) = v30;
          }
          else
          {
            do
            {
              long long v33 = *(_OWORD *)(v19 - 24);
              v19 -= 24;
              *(_OWORD *)(v29 - 24) = v33;
              v29 -= 24;
              *(void *)(v29 + 16) = *(void *)(v19 + 16);
              *(void *)(v19 + 8) = 0;
              *(void *)(v19 + 16) = 0;
            }
            while (v19 != v32);
            uint64_t v19 = *(void *)(v18 + 32);
            uint64_t v34 = *(void *)(v18 + 40);
            *(void *)(v18 + 32) = v29;
            *(void *)(v18 + 40) = v24;
            uint64_t v35 = *(void *)(v18 + 48);
            *(void *)(v18 + 48) = v30;
            while (v34 != v19)
            {
              uint64_t v36 = *(std::__shared_weak_count **)(v34 - 8);
              if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                std::__shared_weak_count::__release_weak(v36);
              }
              v34 -= 24;
            }
          }
          if (v19) {
            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v18 + 56) + 40))(*(void *)(v18 + 56), v19, v35 - v19);
          }
        }
        else
        {
          if (v22)
          {
            void *v22 = v15;
            v22[1] = v21;
            void v22[2] = v20;
            if (v20) {
              atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
            }
          }
          long double v24 = v22 + 3;
        }
        *(void *)(v18 + 40) = v24;
        uint64_t v194 = (void *)v18;
        unint64_t v37 = *(unsigned __int8 *)(v18 + 96);
        uint64_t v38 = *(int *)(*(void *)(v18 + 64) + 24);
        unint64_t v39 = (((v37 >> 2) | (v37 << 6)) + v38 - 0x61C8864680B583EBLL) ^ v37;
        unint64_t v40 = *(void *)(a1 + 240);
        if (v40)
        {
          uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)v40);
          v41.i16[0] = vaddlv_u8(v41);
          if (v41.u32[0] > 1uLL)
          {
            uint64_t v19 = (((v37 >> 2) | (v37 << 6)) + v38 - 0x61C8864680B583EBLL) ^ v37;
            if (v39 >= v40) {
              uint64_t v19 = v39 % v40;
            }
          }
          else
          {
            uint64_t v19 = v39 & (v40 - 1);
          }
          uint64_t v42 = *(void **)(*(void *)(a1 + 232) + 8 * v19);
          if (v42)
          {
            uint64_t v43 = (void *)*v42;
            if (*v42)
            {
              if (v41.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v47 = v43[1];
                  if (v47 == v39)
                  {
                    unint64_t v45 = (void *)v43[2];
                    unint64_t v48 = v45 + 1;
                    if (!v45) {
                      unint64_t v48 = 0;
                    }
                    if (*((unsigned __int8 *)v48 + 88) == v37 && *(_DWORD *)(v48[7] + 24) == v38) {
                      goto LABEL_71;
                    }
                  }
                  else if ((v47 & (v40 - 1)) != v19)
                  {
                    goto LABEL_83;
                  }
                  uint64_t v43 = (void *)*v43;
                  if (!v43) {
                    goto LABEL_83;
                  }
                }
              }
              do
              {
                unint64_t v44 = v43[1];
                if (v44 == v39)
                {
                  unint64_t v45 = (void *)v43[2];
                  uint64_t v46 = v45 + 1;
                  if (!v45) {
                    uint64_t v46 = 0;
                  }
                  if (*((unsigned __int8 *)v46 + 88) == v37 && *(_DWORD *)(v46[7] + 24) == v38)
                  {
LABEL_71:
                    *(unsigned char *)(a4 + 89) = 0;
                    if (v45) {
                      ++*v45;
                    }
                    BOOL v49 = (*(void *)v18)-- == 1;
                    if (v49)
                    {
                      md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>::~LabelFeatureThunk(v18 + 8);
                      {
                        operator new();
                      }
                      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                         + 40))(mdm::Allocator::instance(void)::alloc, v194, 104);
                      unint64_t v45 = (void *)v43[2];
                    }
                    uint64_t v194 = v45;
                    if (v45) {
                      unint64_t v50 = v45 + 1;
                    }
                    else {
                      unint64_t v50 = 0;
                    }
                    uint64_t v51 = (std::mutex *)(v50[1] + 8);
                    std::mutex::lock(v51);
                    unint64_t v52 = *(std::__shared_weak_count **)(v15 + 8);
                    if (v52)
                    {
                      uint64_t v53 = std::__shared_weak_count::lock(v52);
                      uint64_t v54 = 24;
                      if (v53) {
                        uint64_t v55 = *(void *)v15;
                      }
                      else {
                        uint64_t v55 = 0;
                      }
                    }
                    else
                    {
                      uint64_t v53 = 0;
                      uint64_t v55 = 0;
                      uint64_t v54 = 24;
                    }
                    *(void *)&long long v197 = v15;
                    *((void *)&v197 + 1) = v55;
                    uint64_t v198 = v53;
                    uint64_t v195 = 0;
                    uint64_t v196 = 0;
                    long long v164 = (void *)v50[4];
                    unint64_t v165 = v50[5];
                    if ((unint64_t)v164 < v165)
                    {
                      if (v164)
                      {
                        *long long v164 = v15;
                        v164[1] = v55;
                        v164[2] = v53;
                        *((void *)&v197 + 1) = 0;
                        uint64_t v198 = 0;
                        uint64_t v53 = 0;
                      }
                      v50[4] = v164 + 3;
                      if (!v53)
                      {
LABEL_345:
                        long long v179 = v196;
                        if (v196 && !atomic_fetch_add(&v196->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                          std::__shared_weak_count::__release_weak(v179);
                        }
                        std::mutex::unlock(v51);
                        long long v96 = v194;
                        uint64_t v180 = v194 + 1;
                        if (!v194) {
                          uint64_t v180 = 0;
                        }
                        md::LabelLineStore::addContourLine(*(void *)(v180[1] + 192), (uint64_t *)v15, a4, v180[1] + 440);
                        goto LABEL_158;
                      }
LABEL_343:
                      if (!atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                        std::__shared_weak_count::__release_weak(v53);
                      }
                      goto LABEL_345;
                    }
                    uint64_t v166 = v50[3];
                    unint64_t v167 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v164 - v166) >> 3);
                    unint64_t v168 = v167 + 1;
                    if (v167 + 1 > 0xAAAAAAAAAAAAAAALL) {
                      abort();
                    }
                    if (0x5555555555555556 * ((uint64_t)(v165 - v166) >> 3) > v168) {
                      unint64_t v168 = 0x5555555555555556 * ((uint64_t)(v165 - v166) >> 3);
                    }
                    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v165 - v166) >> 3) >= 0x555555555555555) {
                      uint64_t v169 = 0xAAAAAAAAAAAAAAALL;
                    }
                    else {
                      uint64_t v169 = v168;
                    }
                    if (v169)
                    {
                      uint64_t v170 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)v50[6] + 16))(v50[6], 24 * v169, 8);
                      uint64_t v171 = v170 + 24 * v167;
                      uint64_t v172 = v170 + 24 * v169;
                      if (v170)
                      {
                        *(_OWORD *)uint64_t v171 = v197;
                        *(void *)(v170 + 24 * v167 + 16) = v53;
                        *((void *)&v197 + 1) = 0;
                        uint64_t v198 = 0;
                      }
                    }
                    else
                    {
                      uint64_t v172 = 0;
                      uint64_t v171 = 8 * (((uint64_t)v164 - v166) >> 3);
                    }
                    uint64_t v173 = v171 + 24;
                    uint64_t v174 = v50[3];
                    uint64_t v175 = v50[4];
                    if (v175 == v174)
                    {
                      void v50[3] = v171;
                      v50[4] = v173;
                      uint64_t v177 = v50[5];
                      v50[5] = v172;
                      if (v175) {
                        goto LABEL_341;
                      }
                    }
                    else
                    {
                      do
                      {
                        long long v176 = *(_OWORD *)(v175 - 24);
                        v175 -= 24;
                        *(_OWORD *)(v171 - 24) = v176;
                        v171 -= 24;
                        *(void *)(v171 + 16) = *(void *)(v175 + 16);
                        *(void *)(v175 + 8) = 0;
                        *(void *)(v175 + 16) = 0;
                      }
                      while (v175 != v174);
                      uint64_t v175 = v50[3];
                      uint64_t v54 = v50[4];
                      void v50[3] = v171;
                      v50[4] = v173;
                      uint64_t v177 = v50[5];
                      v50[5] = v172;
                      if (v54 != v175)
                      {
                        uint64_t v186 = v177;
                        do
                        {
                          unint64_t v178 = *(std::__shared_weak_count **)(v54 - 8);
                          if (v178 && !atomic_fetch_add(&v178->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                            std::__shared_weak_count::__release_weak(v178);
                          }
                          v54 -= 24;
                        }
                        while (v54 != v175);
                        uint64_t v177 = v186;
                      }
                      if (v175) {
LABEL_341:
                      }
                        (*(void (**)(void, uint64_t, uint64_t))(*(void *)v50[6] + 40))(v50[6], v175, v177 - v175);
                    }
                    uint64_t v53 = v198;
                    v50[4] = v173;
                    if (!v53) {
                      goto LABEL_345;
                    }
                    goto LABEL_343;
                  }
                }
                else
                {
                  if (v44 >= v40) {
                    v44 %= v40;
                  }
                  if (v44 != v19) {
                    break;
                  }
                }
                uint64_t v43 = (void *)*v43;
              }
              while (v43);
            }
          }
        }
LABEL_83:
        uint64_t v56 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 264) + 16))(*(void *)(a1 + 264), 24, 8);
        *(void *)&long long v197 = v56;
        *((void *)&v197 + 1) = a1 + 264;
        *uint64_t v56 = 0;
        v56[1] = v39;
        v56[2] = v18;
        ++*(void *)v18;
        LOBYTE(v198) = 1;
        float v57 = (float)(unint64_t)(*(void *)(a1 + 272) + 1);
        float v58 = *(float *)(a1 + 280);
        if (!v40 || (float)(v58 * (float)v40) < v57) {
          break;
        }
LABEL_132:
        uint64_t v81 = *(void **)(*(void *)(a1 + 232) + 8 * v19);
        if (v81)
        {
          *uint64_t v56 = *v81;
          unint64_t v82 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
        }
        else
        {
          *uint64_t v56 = *(void *)(a1 + 256);
          *(void *)(a1 + 256) = v56;
          *(void *)(*(void *)(a1 + 232) + 8 * v19) = v183;
          unint64_t v82 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
          if (!*v56) {
            goto LABEL_141;
          }
          unint64_t v83 = *(void *)(*v56 + 8);
          if ((v40 & (v40 - 1)) != 0)
          {
            if (v83 >= v40) {
              v83 %= v40;
            }
          }
          else
          {
            v83 &= v40 - 1;
          }
          uint64_t v81 = (void *)(*(void *)(a1 + 232) + 8 * v83);
        }
        *uint64_t v81 = v56;
LABEL_141:
        ++*(void *)(a1 + 272);
        *(unsigned char *)(a4 + 89) = 1;
        {
          operator new();
        }
        uint64_t v84 = *((void *)v82 + 91);
        uint64_t v85 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v84 + 16))(v84, 488, 8);
        *(void *)uint64_t v85 = &unk_1EF581788;
        *(void *)(v85 + 8) = 0;
        *(void *)(v85 + 16) = 0;
        *(void *)(v85 + 24) = v84;
        uint64_t v86 = v85 + 32;
        md::LineLabelFeature::LineLabelFeature(v85 + 32, 4, 2);
        uint64_t v54 = v85 + 472;
        *(void *)(v85 + 32) = &unk_1EF542C80;
        *(void *)(v85 + 472) = &unk_1EF542F38;
        *(unsigned char *)(v85 + 480) = -1;
        *(float *)(v85 + 484) = (float)*(int *)(v15 + 24) * 0.1;
        uint64_t v88 = *(void *)(v15 + 32);
        uint64_t v87 = *(void *)(v15 + 40);
        if (v87) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v87 + 8), 1uLL, memory_order_relaxed);
        }
        unint64_t v89 = *(std::__shared_weak_count **)(v85 + 456);
        *(void *)(v85 + 448) = v88;
        *(void *)(v85 + 456) = v87;
        if (v89 && !atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
        uint64_t v90 = *(void *)(v85 + 224);
        *(unsigned char *)(v90 + 122) = 4;
        *(unsigned char *)(v90 + 290) = *(unsigned __int8 *)(a4 + 8) != 255;
        md::LabelLineStore::addContourLine(v90, (uint64_t *)v15, a4, v85 + 472);
        uint64_t v91 = *(unsigned __int8 **)(v85 + 224);
        unsigned __int8 v92 = atomic_load(v91 + 80);
        if (v92) {
          md::LabelLineStore::consumeWorkUnits((md::LabelLineStore *)v91);
        }
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v86 + 32))(v86, v15, *(unsigned __int8 *)(a4 + 88));
        if (v194) {
          unint64_t v93 = v194 + 1;
        }
        else {
          unint64_t v93 = 0;
        }
        unint64_t v94 = (std::__shared_weak_count *)v93[2];
        v93[1] = v86;
        v93[2] = v85;
        if (v94 && !atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
        uint64_t v95 = *(void *)(a1 + 672);
        long long v96 = v194;
        uint64_t v97 = v194 + 1;
        if (!v194) {
          uint64_t v97 = 0;
        }
        uint64_t v98 = v97[1];
        *(void *)(v98 + 152) = v97;
        uint64_t v99 = v95 + 1;
        *(void *)(a1 + 672) = v99;
        *(void *)(v98 + 72) = v99;
        *(unsigned char *)(v98 + 147) = 0;
LABEL_158:
        if (v96) {
          uint64_t v100 = v96 + 1;
        }
        else {
          uint64_t v100 = 0;
        }
        uint64_t v101 = v100[1];
        unint64_t v102 = *(void *)(v101 + 72);
        unint64_t v103 = v12[25];
        if (v103)
        {
          uint8x8_t v104 = (uint8x8_t)vcnt_s8((int8x8_t)v103);
          v104.i16[0] = vaddlv_u8(v104);
          if (v104.u32[0] > 1uLL)
          {
            uint64_t v54 = *(void *)(v101 + 72);
            if (v102 >= v103) {
              uint64_t v54 = v102 % v103;
            }
          }
          else
          {
            uint64_t v54 = (v103 - 1) & v102;
          }
          uint64_t v105 = *(void **)(v12[24] + 8 * v54);
          if (v105)
          {
            uint64_t v106 = (void *)*v105;
            if (v106)
            {
              if (v104.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v110 = v106[1];
                  if (v110 == v102)
                  {
                    uint64_t v111 = v106[2];
                    if (v111) {
                      uint64_t v112 = v111 + 8;
                    }
                    else {
                      uint64_t v112 = 0;
                    }
                    if (*(void *)(*(void *)(v112 + 8) + 72) == v102) {
                      goto LABEL_187;
                    }
                  }
                  else if ((v110 & (v103 - 1)) != v54)
                  {
                    goto LABEL_188;
                  }
                  uint64_t v106 = (void *)*v106;
                  if (!v106) {
                    goto LABEL_188;
                  }
                }
              }
              do
              {
                unint64_t v107 = v106[1];
                if (v107 == v102)
                {
                  uint64_t v108 = v106[2];
                  if (v108) {
                    uint64_t v109 = v108 + 8;
                  }
                  else {
                    uint64_t v109 = 0;
                  }
                  if (*(void *)(*(void *)(v109 + 8) + 72) == v102)
                  {
LABEL_187:
                    uint64_t v113 = v185;
                    goto LABEL_249;
                  }
                }
                else
                {
                  if (v107 >= v103) {
                    v107 %= v103;
                  }
                  if (v107 != v54) {
                    break;
                  }
                }
                uint64_t v106 = (void *)*v106;
              }
              while (v106);
            }
          }
        }
LABEL_188:
        uint64_t v114 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)v12[28] + 16))(v12[28], 24, 8);
        *(void *)&long long v197 = v114;
        *((void *)&v197 + 1) = v12 + 28;
        *uint64_t v114 = 0;
        v114[1] = v102;
        v114[2] = v96;
        if (v96) {
          ++*v96;
        }
        LOBYTE(v198) = 1;
        float v115 = (float)(unint64_t)(v12[29] + 1);
        float v116 = *((float *)v12 + 60);
        if (!v103 || (float)(v116 * (float)v103) < v115)
        {
          BOOL v117 = (v103 & (v103 - 1)) != 0;
          if (v103 < 3) {
            BOOL v117 = 1;
          }
          unint64_t v118 = v117 | (2 * v103);
          unint64_t v119 = vcvtps_u32_f32(v115 / v116);
          if (v118 <= v119) {
            size_t prime = v119;
          }
          else {
            size_t prime = v118;
          }
          if (prime == 1)
          {
            size_t prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            size_t prime = std::__next_prime(prime);
          }
          unint64_t v103 = v12[25];
          if (prime <= v103)
          {
            if (prime >= v103) {
              goto LABEL_226;
            }
            unint64_t v132 = vcvtps_u32_f32((float)(unint64_t)v12[29] / *((float *)v12 + 60));
            if (v103 < 3
              || (uint8x8_t v133 = (uint8x8_t)vcnt_s8((int8x8_t)v103), v133.i16[0] = vaddlv_u8(v133), v133.u32[0] > 1uLL))
            {
              unint64_t v132 = std::__next_prime(v132);
            }
            else
            {
              uint64_t v134 = 1 << -(char)__clz(v132 - 1);
              if (v132 >= 2) {
                unint64_t v132 = v134;
              }
            }
            if (prime <= v132) {
              size_t prime = v132;
            }
            if (prime >= v103)
            {
              unint64_t v103 = v12[25];
LABEL_226:
              if ((v103 & (v103 - 1)) != 0)
              {
                if (v102 >= v103) {
                  uint64_t v54 = v102 % v103;
                }
                else {
                  uint64_t v54 = v102;
                }
              }
              else
              {
                uint64_t v54 = (v103 - 1) & v102;
              }
              goto LABEL_239;
            }
            if (!prime)
            {
              uint64_t v163 = v12[24];
              v12[24] = 0;
              if (v163) {
                (*(void (**)(void, uint64_t, uint64_t))(*(void *)v12[26] + 40))(v12[26], v163, 8 * v12[25]);
              }
              unint64_t v103 = 0;
              v12[25] = 0;
              goto LABEL_226;
            }
          }
          uint64_t v121 = (*(uint64_t (**)(void, size_t, uint64_t))(*(void *)v12[26] + 16))(v12[26], 8 * prime, 8);
          uint64_t v122 = v12[24];
          v12[24] = v121;
          if (v122) {
            (*(void (**)(void, uint64_t, uint64_t))(*(void *)v12[26] + 40))(v12[26], v122, 8 * v12[25]);
          }
          uint64_t v123 = 0;
          v12[25] = prime;
          do
            *(void *)(v12[24] + 8 * v123++) = 0;
          while (prime != v123);
          int64_t v124 = (void *)*v182;
          if (!*v182)
          {
LABEL_225:
            unint64_t v103 = prime;
            goto LABEL_226;
          }
          size_t v125 = v124[1];
          size_t v126 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            size_t v127 = v125 & v126;
            *(void *)(v12[24] + 8 * v127) = v182;
            for (uint64_t i = (void *)*v124; *v124; uint64_t i = (void *)*v124)
            {
              size_t v129 = i[1] & v126;
              if (v129 == v127)
              {
                int64_t v124 = i;
              }
              else
              {
                uint64_t v130 = v12[24];
                if (*(void *)(v130 + 8 * v129))
                {
                  *int64_t v124 = *i;
                  uint64_t v131 = 8 * v129;
                  void *i = **(void **)(v12[24] + v131);
                  **(void **)(v12[24] + v131) = i;
                }
                else
                {
                  *(void *)(v130 + 8 * v129) = v124;
                  int64_t v124 = i;
                  size_t v127 = v129;
                }
              }
            }
            goto LABEL_225;
          }
          if (v125 >= prime) {
            v125 %= prime;
          }
          *(void *)(v12[24] + 8 * v125) = v182;
          uint64_t v135 = (void *)*v124;
          if (!*v124) {
            goto LABEL_225;
          }
          while (1)
          {
            size_t v137 = v135[1];
            if (v137 >= prime) {
              v137 %= prime;
            }
            if (v137 != v125)
            {
              uint64_t v138 = v12[24];
              if (!*(void *)(v138 + 8 * v137))
              {
                *(void *)(v138 + 8 * v137) = v124;
                goto LABEL_230;
              }
              *int64_t v124 = *v135;
              uint64_t v136 = 8 * v137;
              *uint64_t v135 = **(void **)(v12[24] + v136);
              **(void **)(v12[24] + v136) = v135;
              uint64_t v135 = v124;
            }
            size_t v137 = v125;
LABEL_230:
            int64_t v124 = v135;
            uint64_t v135 = (void *)*v135;
            size_t v125 = v137;
            if (!v135) {
              goto LABEL_225;
            }
          }
        }
LABEL_239:
        uint64_t v139 = *(void **)(v12[24] + 8 * v54);
        if (v139)
        {
          *uint64_t v114 = *v139;
          uint64_t v113 = v185;
LABEL_247:
          *uint64_t v139 = v114;
          goto LABEL_248;
        }
        *uint64_t v114 = v12[27];
        v12[27] = v114;
        *(void *)(v12[24] + 8 * v54) = v182;
        uint64_t v113 = v185;
        if (*v114)
        {
          unint64_t v140 = *(void *)(*v114 + 8);
          if ((v103 & (v103 - 1)) != 0)
          {
            if (v140 >= v103) {
              v140 %= v103;
            }
          }
          else
          {
            v140 &= v103 - 1;
          }
          uint64_t v139 = (void *)(v12[24] + 8 * v140);
          goto LABEL_247;
        }
LABEL_248:
        ++v12[29];
        uint64_t v101 = v100[1];
LABEL_249:
        uint64_t v141 = (std::__shared_weak_count *)v100[2];
        uint64_t v189 = v141;
        if (v141) {
          atomic_fetch_add_explicit(&v141->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (!v96 || (BOOL v49 = *v96 == 1, --*v96, !v49))
        {
          if (!v141) {
            goto LABEL_255;
          }
LABEL_254:
          atomic_fetch_add_explicit(&v141->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_255;
        }
        md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>::~LabelFeatureThunk((uint64_t)(v96 + 1));
        {
          operator new();
        }
        (*(void (**)(uint64_t, void *, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 40))(mdm::Allocator::instance(void)::alloc, v194, 104);
        if (v141) {
          goto LABEL_254;
        }
LABEL_255:
        unint64_t v142 = v184;
        while (1)
        {
          __int16 v143 = *v142;
          unint64_t v144 = v142;
          if (!*v142) {
            break;
          }
          while (1)
          {
            unint64_t v142 = (uint64_t **)v143;
            unint64_t v145 = v143[5];
            if ((unint64_t)v141 < v145) {
              break;
            }
            if (v145 >= (unint64_t)v141)
            {
              if (v141) {
                std::__shared_weak_count::__release_weak(v141);
              }
              goto LABEL_264;
            }
            __int16 v143 = v142[1];
            if (!v143)
            {
              unint64_t v144 = v142 + 1;
              goto LABEL_261;
            }
          }
        }
LABEL_261:
        uint64_t v146 = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v113[2] + 16))(v113[2], 48, 8);
        v146[4] = v101;
        v146[5] = (uint64_t)v141;
        *uint64_t v146 = 0;
        v146[1] = 0;
        v146[2] = (uint64_t)v142;
        void *v144 = v146;
        uint64_t v147 = (uint64_t *)**v113;
        if (v147)
        {
          *uint64_t v113 = v147;
          uint64_t v146 = *v144;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v113[1], v146);
        v113[3] = (uint64_t *)((char *)v113[3] + 1);
LABEL_264:
        if (*(unsigned char *)(a4 + 89))
        {
          unint64_t v148 = v191;
          if ((unint64_t)v191 >= v192)
          {
            unint64_t v150 = 0xAAAAAAAAAAAAAAABLL * ((v191 - v190) >> 3);
            unint64_t v151 = v150 + 1;
            if (v150 + 1 > 0xAAAAAAAAAAAAAAALL) {
              abort();
            }
            if (0x5555555555555556 * ((uint64_t)(v192 - (void)v190) >> 3) > v151) {
              unint64_t v151 = 0x5555555555555556 * ((uint64_t)(v192 - (void)v190) >> 3);
            }
            uint64_t v152 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v192 - (void)v190) >> 3) >= 0x555555555555555
                 ? 0xAAAAAAAAAAAAAAALL
                 : v151;
            if (v152)
            {
              uint64_t v153 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v193 + 16))(v193, 24 * v152, 8);
              uint64_t v154 = (char *)(v153 + 24 * v150);
              uint64_t v155 = v153 + 24 * v152;
              if (v153)
              {
                *(void *)uint64_t v154 = v101;
                unint64_t v156 = v153 + 24 * v150;
                *(void *)(v156 + 8) = 0;
                *(void *)(v156 + 16) = 0;
              }
            }
            else
            {
              uint64_t v155 = 0;
              uint64_t v154 = (char *)(8 * ((v191 - v190) >> 3));
            }
            uint64_t v158 = v190;
            unint64_t v157 = v191;
            unint64_t v159 = v154;
            if (v191 != v190)
            {
              do
              {
                long long v160 = *(_OWORD *)(v157 - 24);
                *((void *)v159 - 1) = *((void *)v157 - 1);
                *(_OWORD *)(v159 - 24) = v160;
                v159 -= 24;
                v157 -= 24;
              }
              while (v157 != v158);
              unint64_t v157 = v190;
            }
            uint64_t v149 = v154 + 24;
            int64x2_t v190 = v159;
            uint64_t v191 = v154 + 24;
            unint64_t v161 = v192;
            unint64_t v192 = v155;
            if (v157) {
              (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v193 + 40))(v193, v157, v161 - (void)v157);
            }
          }
          else
          {
            if (v191)
            {
              *((void *)v191 + 1) = 0;
              *((void *)v148 + 2) = 0;
              *(void *)unint64_t v148 = v101;
            }
            uint64_t v149 = v148 + 24;
          }
          uint64_t v191 = v149;
          if (v149 != v190 && 0xAAAAAAAAAAAAAAABLL * ((v149 - v190) >> 3) >= 0x20)
          {
            md::LabelFeatureStyler::styleLabelFeatures(*(unsigned int **)(v181 + 296), &v190, 1u, 1, *(void *)(*(void *)(v181 + 152) + 32));
            uint64_t v191 = v190;
            std::mutex::unlock((std::mutex *)a1);
            if (!a1) {
              goto LABEL_374;
            }
            std::mutex::lock((std::mutex *)a1);
          }
        }
        if (v189 && !atomic_fetch_add(&v189->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
          std::__shared_weak_count::__release_weak(v189);
        }
LABEL_10:
        ++v16;
        v15 += 56;
        if (v16 == v187) {
          goto LABEL_363;
        }
      }
      BOOL v59 = (v40 & (v40 - 1)) != 0;
      if (v40 < 3) {
        BOOL v59 = 1;
      }
      unint64_t v60 = v59 | (2 * v40);
      unint64_t v61 = vcvtps_u32_f32(v57 / v58);
      if (v60 <= v61) {
        size_t v62 = v61;
      }
      else {
        size_t v62 = v60;
      }
      if (v62 == 1)
      {
        size_t v62 = 2;
      }
      else if ((v62 & (v62 - 1)) != 0)
      {
        size_t v62 = std::__next_prime(v62);
      }
      unint64_t v40 = *(void *)(a1 + 240);
      if (v62 <= v40)
      {
        if (v62 >= v40) {
          goto LABEL_119;
        }
        unint64_t v74 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 272) / *(float *)(a1 + 280));
        if (v40 < 3 || (uint8x8_t v75 = (uint8x8_t)vcnt_s8((int8x8_t)v40), v75.i16[0] = vaddlv_u8(v75), v75.u32[0] > 1uLL))
        {
          unint64_t v74 = std::__next_prime(v74);
        }
        else
        {
          uint64_t v76 = 1 << -(char)__clz(v74 - 1);
          if (v74 >= 2) {
            unint64_t v74 = v76;
          }
        }
        if (v62 <= v74) {
          size_t v62 = v74;
        }
        if (v62 >= v40)
        {
          unint64_t v40 = *(void *)(a1 + 240);
LABEL_119:
          if ((v40 & (v40 - 1)) != 0)
          {
            if (v39 >= v40) {
              uint64_t v19 = v39 % v40;
            }
            else {
              uint64_t v19 = v39;
            }
          }
          else
          {
            uint64_t v19 = (v40 - 1) & v39;
          }
          goto LABEL_132;
        }
        if (!v62)
        {
          uint64_t v162 = *(void *)(a1 + 232);
          *(void *)(a1 + 232) = 0;
          if (v162) {
            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 248) + 40))(*(void *)(a1 + 248), v162, 8 * *(void *)(a1 + 240));
          }
          unint64_t v40 = 0;
          *(void *)(a1 + 240) = 0;
          goto LABEL_119;
        }
      }
      uint64_t v63 = (*(uint64_t (**)(void, size_t, uint64_t))(**(void **)(a1 + 248) + 16))(*(void *)(a1 + 248), 8 * v62, 8);
      uint64_t v64 = *(void *)(a1 + 232);
      *(void *)(a1 + 232) = v63;
      if (v64) {
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 248) + 40))(*(void *)(a1 + 248), v64, 8 * *(void *)(a1 + 240));
      }
      uint64_t v65 = 0;
      *(void *)(a1 + 240) = v62;
      do
        *(void *)(*(void *)(a1 + 232) + 8 * v65++) = 0;
      while (v62 != v65);
      uint64_t v66 = (void *)*v183;
      if (!*v183)
      {
LABEL_118:
        unint64_t v40 = v62;
        goto LABEL_119;
      }
      size_t v67 = v66[1];
      size_t v68 = v62 - 1;
      if ((v62 & (v62 - 1)) == 0)
      {
        size_t v69 = v67 & v68;
        *(void *)(*(void *)(a1 + 232) + 8 * v69) = v183;
        for (uint64_t j = (void *)*v66; *v66; uint64_t j = (void *)*v66)
        {
          size_t v71 = j[1] & v68;
          if (v71 == v69)
          {
            uint64_t v66 = j;
          }
          else
          {
            uint64_t v72 = *(void *)(a1 + 232);
            if (*(void *)(v72 + 8 * v71))
            {
              *uint64_t v66 = *j;
              uint64_t v73 = 8 * v71;
              void *j = **(void **)(*(void *)(a1 + 232) + v73);
              **(void **)(*(void *)(a1 + 232) + v73) = j;
            }
            else
            {
              *(void *)(v72 + 8 * v71) = v66;
              uint64_t v66 = j;
              size_t v69 = v71;
            }
          }
        }
        goto LABEL_118;
      }
      if (v67 >= v62) {
        v67 %= v62;
      }
      *(void *)(*(void *)(a1 + 232) + 8 * v67) = v183;
      int32x4_t v77 = (void *)*v66;
      if (!*v66) {
        goto LABEL_118;
      }
      while (1)
      {
        size_t v79 = v77[1];
        if (v79 >= v62) {
          v79 %= v62;
        }
        if (v79 != v67)
        {
          uint64_t v80 = *(void *)(a1 + 232);
          if (!*(void *)(v80 + 8 * v79))
          {
            *(void *)(v80 + 8 * v79) = v66;
            goto LABEL_123;
          }
          *uint64_t v66 = *v77;
          uint64_t v78 = 8 * v79;
          *int32x4_t v77 = **(void **)(*(void *)(a1 + 232) + v78);
          **(void **)(*(void *)(a1 + 232) + v78) = v77;
          int32x4_t v77 = v66;
        }
        size_t v79 = v67;
LABEL_123:
        uint64_t v66 = v77;
        int32x4_t v77 = (void *)*v77;
        size_t v67 = v79;
        if (!v77) {
          goto LABEL_118;
        }
      }
    }
LABEL_363:
    if (v190 != v191)
    {
      md::LabelFeatureStyler::styleLabelFeatures(*(unsigned int **)(v181 + 296), &v190, 1u, 1, *(void *)(*(void *)(v181 + 152) + 32));
      uint64_t v191 = v190;
      std::mutex::unlock((std::mutex *)a1);
      if (!a1)
      {
LABEL_374:
        std::__throw_system_error(1, "unique_lock::lock: references null mutex");
        __break(1u);
        return;
      }
      std::mutex::lock((std::mutex *)a1);
    }
    std::mutex::unlock((std::mutex *)a1);
    if (v190)
    {
      uint64_t v191 = v190;
      (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v193 + 40))(v193, v190, v192 - (void)v190);
    }
  }
  else
  {
    std::mutex::unlock((std::mutex *)a1);
  }
}

void sub_1A27B7D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  md::components::Material::~Material((md::components::Material *)(v28 - 112));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v28 - 128);
  std::mutex::unlock(v27);
  geo::fast_shared_ptr<md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>,mdm::MDAllocator>::~fast_shared_ptr(&a26);
  std::mutex::unlock(v26);
  if (a22)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a25 + 40))(a25, a22, a24 - a22);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void *geo::fast_shared_ptr<md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>,mdm::MDAllocator>::~fast_shared_ptr(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    if ((*v2)-- == 1)
    {
      md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>::~LabelFeatureThunk((uint64_t)(v2 + 1));
      uint64_t v4 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
      {
        uint64_t v4 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
        if (v6) {
          operator new();
        }
      }
      (*(void (**)(void, void, uint64_t))(**((void **)v4 + 91) + 40))(*((void *)v4 + 91), *a1, 104);
      *a1 = 0;
    }
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void **)(v2 + 16);
      if (v3)
      {
        if ((*v3)-- == 1)
        {
          md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>::~LabelFeatureThunk((uint64_t)(v3 + 1));
          uint64_t v5 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
          {
            uint64_t v5 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
            if (v7) {
              operator new();
            }
          }
          (*(void (**)(void, void, uint64_t))(**((void **)v5 + 91) + 40))(*((void *)v5 + 91), *(void *)(v2 + 16), 104);
          *(void *)(v2 + 16) = 0;
        }
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)a1[1] + 40))(*(void *)a1[1], v2, 24);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<md::ContourLineLabelFeature,geo::StdAllocator<md::ContourLineLabelFeature,mdm::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 488);
}

uint64_t std::__shared_ptr_emplace<md::ContourLineLabelFeature,geo::StdAllocator<md::ContourLineLabelFeature,mdm::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<md::ContourLineLabelFeature,geo::StdAllocator<md::ContourLineLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581788;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::ContourLineLabelFeature,geo::StdAllocator<md::ContourLineLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581788;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>,mdm::MDAllocator>::~fast_shared_ptr(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    if ((*v2)-- == 1)
    {
      md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>::~LabelFeatureThunk((uint64_t)(v2 + 1));
      uint64_t v4 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
      {
        uint64_t v4 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
        if (v6) {
          operator new();
        }
      }
      (*(void (**)(void, void, uint64_t))(**((void **)v4 + 91) + 40))(*((void *)v4 + 91), *a1, 104);
      *a1 = 0;
    }
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void **)(v2 + 16);
      if (v3)
      {
        if ((*v3)-- == 1)
        {
          md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>::~LabelFeatureThunk((uint64_t)(v3 + 1));
          uint64_t v5 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
          {
            uint64_t v5 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
            if (v7) {
              operator new();
            }
          }
          (*(void (**)(void, void, uint64_t))(**((void **)v5 + 91) + 40))(*((void *)v5 + 91), *(void *)(v2 + 16), 104);
          *(void *)(v2 + 16) = 0;
        }
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)a1[1] + 40))(*(void *)a1[1], v2, 24);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<md::TransitLineLabelFeature,geo::StdAllocator<md::TransitLineLabelFeature,mdm::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 744);
}

uint64_t std::__shared_ptr_emplace<md::TransitLineLabelFeature,geo::StdAllocator<md::TransitLineLabelFeature,mdm::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<md::TransitLineLabelFeature,geo::StdAllocator<md::TransitLineLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5818D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::TransitLineLabelFeature,geo::StdAllocator<md::TransitLineLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5818D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::add(void *a1, void *a2)
{
  uint64_t v4 = (std::mutex *)(a1[1] + 8);
  std::mutex::lock(v4);
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    int v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      uint64_t v7 = *a2;
      goto LABEL_6;
    }
  }
  else
  {
    int v6 = 0;
  }
  uint64_t v7 = 0;
LABEL_6:
  uint64_t v10 = a2;
  uint64_t v11 = v7;
  unint64_t v12 = v6;
  uint64_t v8 = (void *)a1[4];
  if ((unint64_t)v8 >= a1[5])
  {
    uint64_t v9 = std::vector<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,geo::StdAllocator<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>,mdm::Allocator>>::__push_back_slow_path<std::pair<GeoCodecsFeature const*,std::shared_ptr<geo::codec::VectorTile>>>(a1 + 3, (uint64_t)&v10);
    int v6 = v12;
    a1[4] = v9;
    if (!v6) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if (v8)
  {
    *uint64_t v8 = a2;
    v8[1] = v7;
    v8[2] = v6;
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    int v6 = 0;
  }
  a1[4] = v8 + 3;
  if (v6)
  {
LABEL_12:
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_14:
  std::mutex::unlock(v4);
}

void sub_1A27B8638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  md::components::Material::~Material((md::components::Material *)va1);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void *geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>::~fast_shared_ptr(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    if ((*v2)-- == 1)
    {
      md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::~LabelFeatureThunk((uint64_t)(v2 + 1));
      uint64_t v4 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
      {
        uint64_t v4 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
        if (v6) {
          operator new();
        }
      }
      (*(void (**)(void, void, uint64_t))(**((void **)v4 + 91) + 40))(*((void *)v4 + 91), *a1, 104);
      *a1 = 0;
    }
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void **)(v2 + 16);
      if (v3)
      {
        if ((*v3)-- == 1)
        {
          md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::~LabelFeatureThunk((uint64_t)(v3 + 1));
          uint64_t v5 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
          {
            uint64_t v5 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
            if (v7) {
              operator new();
            }
          }
          (*(void (**)(void, void, uint64_t))(**((void **)v5 + 91) + 40))(*((void *)v5 + 91), *(void *)(v2 + 16), 104);
          *(void *)(v2 + 16) = 0;
        }
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)a1[1] + 40))(*(void *)a1[1], v2, 24);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<md::TransitNodeLabelFeature,geo::StdAllocator<md::TransitNodeLabelFeature,mdm::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 952);
}

uint64_t std::__shared_ptr_emplace<md::TransitNodeLabelFeature,geo::StdAllocator<md::TransitNodeLabelFeature,mdm::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<md::TransitNodeLabelFeature,geo::StdAllocator<md::TransitNodeLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581948;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::TransitNodeLabelFeature,geo::StdAllocator<md::TransitNodeLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581948;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<md::TransitAccessPointLabelFeature,geo::StdAllocator<md::TransitAccessPointLabelFeature,mdm::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 752);
}

uint64_t std::__shared_ptr_emplace<md::TransitAccessPointLabelFeature,geo::StdAllocator<md::TransitAccessPointLabelFeature,mdm::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<md::TransitAccessPointLabelFeature,geo::StdAllocator<md::TransitAccessPointLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582630;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::TransitAccessPointLabelFeature,geo::StdAllocator<md::TransitAccessPointLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582630;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<md::PointLabelFeature,geo::StdAllocator<md::PointLabelFeature,mdm::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 704);
}

uint64_t std::__shared_ptr_emplace<md::PointLabelFeature,geo::StdAllocator<md::PointLabelFeature,mdm::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<md::PointLabelFeature,geo::StdAllocator<md::PointLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580448;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::PointLabelFeature,geo::StdAllocator<md::PointLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580448;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<md::MuninPointLabelFeature,geo::StdAllocator<md::MuninPointLabelFeature,mdm::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 704);
}

uint64_t std::__shared_ptr_emplace<md::MuninPointLabelFeature,geo::StdAllocator<md::MuninPointLabelFeature,mdm::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<md::MuninPointLabelFeature,geo::StdAllocator<md::MuninPointLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581600;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::MuninPointLabelFeature,geo::StdAllocator<md::MuninPointLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581600;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,md::LabelFeaturePool::RemovedVersionInfo>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<unsigned long long,md::LabelFeaturePool::RemovedVersionInfo>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void **)(v2 + 32);
      if (v3 != *(void **)(v2 + 48)) {
        free(v3);
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)a1[1] + 40))(*(void *)a1[1], v2, 80);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<md::MuninStorefrontLabelFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::MuninStorefrontLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582198;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::MuninStorefrontLabelFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF582198;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *geo::fast_shared_ptr<md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>,mdm::MDAllocator>::~fast_shared_ptr(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    if ((*v2)-- == 1)
    {
      md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>::~LabelFeatureThunk((uint64_t)(v2 + 1));
      uint64_t v4 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
      {
        uint64_t v4 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
        if (v6) {
          operator new();
        }
      }
      (*(void (**)(void, void, uint64_t))(**((void **)v4 + 91) + 40))(*((void *)v4 + 91), *a1, 104);
      *a1 = 0;
    }
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>,mdm::MDAllocator>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<geo::fast_shared_ptr<md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>,mdm::MDAllocator>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void **)(v2 + 16);
      if (v3)
      {
        if ((*v3)-- == 1)
        {
          md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>::~LabelFeatureThunk((uint64_t)(v3 + 1));
          uint64_t v5 = &md::SignedDistanceFieldGenerator::_hypotCache[32854];
          {
            uint64_t v5 = md::SignedDistanceFieldGenerator::_hypotCache + 131416;
            if (v7) {
              operator new();
            }
          }
          (*(void (**)(void, void, uint64_t))(**((void **)v5 + 91) + 40))(*((void *)v5 + 91), *(void *)(v2 + 16), 104);
          *(void *)(v2 + 16) = 0;
        }
      }
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)a1[1] + 40))(*(void *)a1[1], v2, 24);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<md::OverlayLineLabelFeature,geo::StdAllocator<md::OverlayLineLabelFeature,mdm::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 472);
}

uint64_t std::__shared_ptr_emplace<md::OverlayLineLabelFeature,geo::StdAllocator<md::OverlayLineLabelFeature,mdm::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<md::OverlayLineLabelFeature,geo::StdAllocator<md::OverlayLineLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581830;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::OverlayLineLabelFeature,geo::StdAllocator<md::OverlayLineLabelFeature,mdm::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581830;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::LabelFeaturePoolTileInfo::~LabelFeaturePoolTileInfo(md::LabelFeaturePoolTileInfo *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeaturePoolTileInfo::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeaturePoolTileInfo::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::TransitLineLabelFeature,GeoCodecsTransitLink,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::~__hash_table((uint64_t *)this + 42);
  std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeaturePoolTileInfo::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeaturePoolTileInfo::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PointLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::~__hash_table((uint64_t *)this + 35);
  std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>,mdm::MDAllocator>,md::LabelFeaturePoolTileInfo::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>,mdm::MDAllocator>>,md::LabelFeaturePoolTileInfo::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::OverlayLineLabelFeature,md::LabelClientTileOverlay,md::LabelClientTile>,mdm::MDAllocator>,mdm::Allocator>>::~__hash_table((uint64_t *)this + 28);
  std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeaturePoolTileInfo::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeaturePoolTileInfo::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::ContourLineLabelFeature,GeoCodecsContourLinesFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::~__hash_table((uint64_t *)this + 21);
  std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeaturePoolTileInfo::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeaturePoolTileInfo::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::PhysicalLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::~__hash_table((uint64_t *)this + 14);
  std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::~__hash_table((uint64_t *)this + 7);
  std::__hash_table<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureHash<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>::FeatureEqual<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>>,geo::StdAllocator<geo::fast_shared_ptr<md::LabelFeatureThunk<md::UniLineLabelFeature,GeoCodecsFeature,geo::codec::VectorTile>,mdm::MDAllocator>,mdm::Allocator>>::~__hash_table((uint64_t *)this);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<void *,md::LabelFeaturePoolTileInfo>,void *>,std::__hash_node_destructor<geo::StdAllocator<std::__hash_node<std::__hash_value_type<void *,md::LabelFeaturePoolTileInfo>,void *>,mdm::Allocator>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<void * const,md::LabelFeaturePoolTileInfo>,0>((uint64_t *)(v2 + 16));
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)a1[1] + 40))(*(void *)a1[1], v2, 440);
  }
  return a1;
}

void std::__function::__func<md::LabelFeaturePool::removeFeaturesForTile(std::shared_ptr<md::LabelSourceTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0,std::allocator<md::LabelFeaturePool::removeFeaturesForTile(std::shared_ptr<md::LabelSourceTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0>,void ()(void)>::operator()(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    uint64_t v3 = (md::LabelFeaturePool *)a1[3];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[1]) {
        md::LabelFeaturePool::flushRemovedTiles(v3);
      }
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1A27B916C(_Unwind_Exception *exception_object)
{
  if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<md::LabelFeaturePool::removeFeaturesForTile(std::shared_ptr<md::LabelSourceTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0,std::allocator<md::LabelFeaturePool::removeFeaturesForTile(std::shared_ptr<md::LabelSourceTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0>,void ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<md::LabelFeaturePool::removeFeaturesForTile(std::shared_ptr<md::LabelSourceTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0,std::allocator<md::LabelFeaturePool::removeFeaturesForTile(std::shared_ptr<md::LabelSourceTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void *std::__function::__func<md::LabelFeaturePool::removeFeaturesForTile(std::shared_ptr<md::LabelSourceTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0,std::allocator<md::LabelFeaturePool::removeFeaturesForTile(std::shared_ptr<md::LabelSourceTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0>,void ()(void)>::__clone(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = &unk_1EF572030;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  a2[3] = result[3];
  return result;
}

void *std::__function::__func<md::LabelFeaturePool::removeFeaturesForTile(std::shared_ptr<md::LabelSourceTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0,std::allocator<md::LabelFeaturePool::removeFeaturesForTile(std::shared_ptr<md::LabelSourceTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0>,void ()(void)>::__clone(void *a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  *uint64_t result = &unk_1EF572030;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  result[3] = a1[3];
  return result;
}

void std::__function::__func<md::LabelFeaturePool::removeFeaturesForTile(std::shared_ptr<md::LabelSourceTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0,std::allocator<md::LabelFeaturePool::removeFeaturesForTile(std::shared_ptr<md::LabelSourceTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF572030;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1A6239270);
}

void *std::__function::__func<md::LabelFeaturePool::removeFeaturesForTile(std::shared_ptr<md::LabelSourceTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0,std::allocator<md::LabelFeaturePool::removeFeaturesForTile(std::shared_ptr<md::LabelSourceTile> const&,std::shared_ptr<md::LabelManager> const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EF572030;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<md::LabelTileCollisionInfo>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 216);
  if (v2)
  {
    *(void *)(a1 + 224) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 240) + 40))(*(void *)(a1 + 240), v2, *(void *)(a1 + 232) - v2);
  }
  uint64_t v3 = *(void *)(a1 + 184);
  if (v3)
  {
    *(void *)(a1 + 192) = v3;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 208) + 40))(*(void *)(a1 + 208), v3, *(void *)(a1 + 200) - v3);
  }
  uint64_t v4 = *(void *)(a1 + 152);
  if (v4)
  {
    *(void *)(a1 + 160) = v4;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 176) + 40))(*(void *)(a1 + 176), v4, *(void *)(a1 + 168) - v4);
  }
  uint64_t v5 = *(void *)(a1 + 120);
  if (v5)
  {
    *(void *)(a1 + 128) = v5;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 144) + 40))(*(void *)(a1 + 144), v5, *(void *)(a1 + 136) - v5);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void std::__shared_ptr_emplace<md::LabelTileCollisionInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581590;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::LabelTileCollisionInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581590;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t non-virtual thunk to'md::ARWalkingLabeler::arBackgroundTexture(md::ARWalkingLabeler *this)
{
  return *((void *)this + 10);
}

uint64_t non-virtual thunk to'md::ARWalkingLabeler::arWalkingStorefrontFeatures(md::ARWalkingLabeler *this)
{
  return *((void *)this + 6) + 616;
}

uint64_t non-virtual thunk to'md::ARWalkingLabeler::arWalkingArrivalFeatures(md::ARWalkingLabeler *this)
{
  return *((void *)this + 6) + 584;
}

uint64_t non-virtual thunk to'md::ARWalkingLabeler::arWalkingContinueFeatures(md::ARWalkingLabeler *this)
{
  return *((void *)this + 6) + 552;
}

uint64_t non-virtual thunk to'md::ARWalkingLabeler::arWalkingManeuverFeatures(md::ARWalkingLabeler *this)
{
  return *((void *)this + 6) + 520;
}

void non-virtual thunk to'md::ARWalkingLabeler::setARWalkingFeatures(md::ARWalkingSupport **this, VKARWalkingFeatureSet *a2)
{
}

void non-virtual thunk to'md::ARWalkingLabeler::setRouteContext(md::ARWalkingLabeler *this, VKRouteContext *a2)
{
  uint64_t v3 = a2;
  int v6 = v3;
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v3 = v6;
  }
  uint64_t v5 = (void *)*((void *)this + 207);
  *((void *)this + 207) = v3;
}

uint64_t non-virtual thunk to'md::ARWalkingLabeler::externalMeshModerator(md::ARWalkingLabeler *this)
{
  return *((void *)this + 54);
}

uint64_t md::ARWalkingLabeler::arBackgroundTexture(md::ARWalkingLabeler *this)
{
  return *((void *)this + 59);
}

uint64_t md::ARWalkingLabeler::arWalkingStorefrontFeatures(md::ARWalkingLabeler *this)
{
  return *((void *)this + 55) + 616;
}

uint64_t md::ARWalkingLabeler::arWalkingArrivalFeatures(md::ARWalkingLabeler *this)
{
  return *((void *)this + 55) + 584;
}

uint64_t md::ARWalkingLabeler::arWalkingContinueFeatures(md::ARWalkingLabeler *this)
{
  return *((void *)this + 55) + 552;
}

uint64_t md::ARWalkingLabeler::arWalkingManeuverFeatures(md::ARWalkingLabeler *this)
{
  return *((void *)this + 55) + 520;
}

void md::ARWalkingLabeler::setARWalkingFeatures(md::ARWalkingSupport **this, VKARWalkingFeatureSet *a2)
{
}

void md::ARWalkingLabeler::setRouteContext(md::ARWalkingLabeler *this, VKRouteContext *a2)
{
  uint64_t v3 = a2;
  int v6 = v3;
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v3 = v6;
  }
  uint64_t v5 = (void *)*((void *)this + 256);
  *((void *)this + 256) = v3;
}

void md::ARWalkingLabeler::layoutLabelsForStaging(md::ARWalkingLabeler *this)
{
  uint64_t v2 = (char *)this + 1808;
  uint64_t v3 = (uint64_t *)*((void *)this + 227);
  uint64_t v4 = (uint64_t *)*((void *)this + 234);
  if (v3 != v4)
  {
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = *((void *)this + 232);
    uint64_t v8 = (void *)((char *)this + 1832);
    uint64_t v9 = (char *)this + 1848;
    while (v6 != v7)
    {
      uint64_t v10 = v3[6];
      uint64_t v11 = (char *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>((void *)this + 229, v3[2]);
      if (v11)
      {
        int8x8_t v12 = *(int8x8_t *)((char *)this + 1840);
        unint64_t v13 = *((void *)v11 + 1);
        uint8x8_t v14 = (uint8x8_t)vcnt_s8(v12);
        v14.i16[0] = vaddlv_u8(v14);
        if (v14.u32[0] > 1uLL)
        {
          if (v13 >= *(void *)&v12) {
            v13 %= *(void *)&v12;
          }
        }
        else
        {
          v13 &= *(void *)&v12 - 1;
        }
        uint64_t v15 = *(char **)(*v8 + 8 * v13);
        do
        {
          uint64_t v16 = v15;
          uint64_t v15 = *(char **)v15;
        }
        while (v15 != v11);
        if (v16 == v9) {
          goto LABEL_24;
        }
        unint64_t v17 = *((void *)v16 + 1);
        if (v14.u32[0] > 1uLL)
        {
          if (v17 >= *(void *)&v12) {
            v17 %= *(void *)&v12;
          }
        }
        else
        {
          v17 &= *(void *)&v12 - 1;
        }
        if (v17 != v13)
        {
LABEL_24:
          if (!*(void *)v11) {
            goto LABEL_25;
          }
          unint64_t v18 = *(void *)(*(void *)v11 + 8);
          if (v14.u32[0] > 1uLL)
          {
            if (v18 >= *(void *)&v12) {
              v18 %= *(void *)&v12;
            }
          }
          else
          {
            v18 &= *(void *)&v12 - 1;
          }
          if (v18 != v13) {
LABEL_25:
          }
            *(void *)(*v8 + 8 * v13) = 0;
        }
        uint64_t v19 = *(void *)v11;
        if (*(void *)v11)
        {
          unint64_t v20 = *(void *)(v19 + 8);
          if (v14.u32[0] > 1uLL)
          {
            if (v20 >= *(void *)&v12) {
              v20 %= *(void *)&v12;
            }
          }
          else
          {
            v20 &= *(void *)&v12 - 1;
          }
          if (v20 != v13)
          {
            *(void *)(*v8 + 8 * v20) = v16;
            uint64_t v19 = *(void *)v11;
          }
        }
        *(void *)uint64_t v16 = v19;
        --*((void *)this + 232);
        operator delete(v11);
        uint64_t v4 = (uint64_t *)*((void *)this + 234);
      }
      v5 += v10;
      uint64_t v3 = (uint64_t *)v3[1];
      ++v6;
      if (v3 == v4) {
        goto LABEL_34;
      }
    }
    uint64_t v4 = v3;
LABEL_34:
    uint64_t v21 = (uint64_t *)*((void *)this + 227);
    if (v21 != v4)
    {
      uint64_t v22 = *v4;
      uint64_t v23 = *v21;
      *(void *)(v23 + 8) = *(void *)(*v4 + 8);
      **(void **)(v22 + 8) = v23;
      do
      {
        long double v24 = (uint64_t *)v21[1];
        --*((void *)this + 228);
        operator delete(v21);
        uint64_t v21 = v24;
      }
      while (v24 != v4);
    }
    unint64_t v25 = *((void *)this + 235);
    BOOL v26 = v25 >= v5;
    unint64_t v27 = v25 - v5;
    if (!v26) {
      unint64_t v27 = 0;
    }
    *((void *)this + 235) = v27;
  }
  *((void *)this + 234) = v2;
  if (*((unsigned char *)this + 400))
  {
    long long v255 = 0u;
    long long v256 = 0u;
    LODWORD(v257) = 1065353216;
    *(_OWORD *)std::vector<unsigned int> __p = 0u;
    *(_OWORD *)unsigned int v251 = 0u;
    int v252 = 1065353216;
    uint64_t v28 = (unint64_t *)*((void *)this + 9);
    for (uint64_t i = (unint64_t *)*((void *)this + 10); v28 != i; v28 += 2)
    {
      unint64_t v30 = *v28;
      if (std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>((void *)this + 236, *v28))
      {
        std::__hash_table<md::Label *,std::hash<md::Label *>,std::equal_to<md::Label *>,std::allocator<md::Label *>>::__emplace_unique_key_args<md::Label *,md::Label *>((float *)&v255, v30, v30);
        unint64_t v253 = *v28;
        uint64_t v31 = std::__hash_table<std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>,std::__unordered_map_hasher<md::Label *,std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>,std::hash<md::Label *>,std::equal_to<md::Label *>,true>,std::__unordered_map_equal<md::Label *,std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>,std::equal_to<md::Label *>,std::hash<md::Label *>,true>,std::allocator<std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>>>::__emplace_unique_key_args<md::Label *,std::piecewise_construct_t const&,std::tuple<md::Label *&&>,std::tuple<>>((float *)this + 482, v253, &v253);
        v246[0] = *v28;
        uint64_t v32 = std::__hash_table<std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>,std::__unordered_map_hasher<md::Label *,std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>,std::hash<md::Label *>,std::equal_to<md::Label *>,true>,std::__unordered_map_equal<md::Label *,std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>,std::equal_to<md::Label *>,std::hash<md::Label *>,true>,std::allocator<std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>>>::__emplace_unique_key_args<md::Label *,std::piecewise_construct_t const&,std::tuple<md::Label *&&>,std::tuple<>>((float *)__p, v246[0], v246);
        long long v33 = *(_OWORD *)(v31 + 24);
        long long v34 = *(_OWORD *)(v31 + 40);
        *((void *)v32 + 7) = *((void *)v31 + 7);
        *(_OWORD *)(v32 + 40) = v34;
        *(_OWORD *)(v32 + 24) = v33;
      }
    }
    unint64_t n = (unint64_t)this + 1888;
    if (*((void *)this + 239))
    {
      uint64_t v36 = (void *)*((void *)this + 238);
      if (v36)
      {
        do
        {
          unint64_t v37 = (void *)*v36;
          operator delete(v36);
          uint64_t v36 = v37;
        }
        while (v37);
      }
      *((void *)this + 238) = 0;
      uint64_t v38 = *((void *)this + 237);
      if (v38)
      {
        for (uint64_t j = 0; j != v38; ++j)
          *(void *)(*(void *)n + 8 * j) = 0;
      }
      *((void *)this + 239) = 0;
    }
    uint64_t v40 = v255;
    *(void *)&long long v255 = 0;
    uint8x8_t v41 = *(void **)n;
    *(void *)unint64_t n = v40;
    if (v41) {
      operator delete(v41);
    }
    unint64_t v42 = *((void *)&v255 + 1);
    uint64_t v43 = v256;
    *((void *)this + 237) = *((void *)&v255 + 1);
    *((void *)&v255 + 1) = 0;
    uint64_t v44 = *((void *)&v256 + 1);
    *((void *)this + 239) = *((void *)&v256 + 1);
    *((_DWORD *)this + 480) = LODWORD(v257);
    *((void *)this + 238) = v43;
    if (v44)
    {
      unint64_t v45 = *(void *)(v43 + 8);
      if ((v42 & (v42 - 1)) != 0)
      {
        if (v45 >= v42) {
          v45 %= v42;
        }
      }
      else
      {
        v45 &= v42 - 1;
      }
      *(void *)(*(void *)n + 8 * v45) = (char *)this + 1904;
      long long v256 = 0uLL;
    }
    float v57 = (void **)((char *)this + 1928);
    if (*((void *)this + 244))
    {
      float v58 = (void *)*((void *)this + 243);
      if (v58)
      {
        do
        {
          BOOL v59 = (void *)*v58;
          operator delete(v58);
          float v58 = v59;
        }
        while (v59);
      }
      *((void *)this + 243) = 0;
      uint64_t v60 = *((void *)this + 242);
      if (v60)
      {
        for (uint64_t k = 0; k != v60; ++k)
          *((void *)*v57 + k) = 0;
      }
      *((void *)this + 244) = 0;
    }
    size_t v62 = __p[0];
    __p[0] = 0;
    uint64_t v63 = *v57;
    *float v57 = v62;
    if (v63) {
      operator delete(v63);
    }
    unint64_t v65 = (unint64_t)__p[1];
    uint64_t v64 = v251[0];
    *((void **)this + 242) = __p[1];
    __p[1] = 0;
    uint64_t v66 = v251[1];
    *((void **)this + 244) = v251[1];
    *((_DWORD *)this + 490) = v252;
    *((void *)this + 243) = v64;
    if (v66)
    {
      unint64_t v67 = v64[1];
      if ((v65 & (v65 - 1)) != 0)
      {
        if (v67 >= v65) {
          v67 %= v65;
        }
      }
      else
      {
        v67 &= v65 - 1;
      }
      *((void *)*v57 + v67) = (char *)this + 1944;
      v251[0] = 0;
      v251[1] = 0;
    }
    else if (v64)
    {
      do
      {
        size_t v68 = (void *)*v64;
        operator delete(v64);
        uint64_t v64 = v68;
      }
      while (v68);
    }
    size_t v69 = __p[0];
    __p[0] = 0;
    if (v69) {
      operator delete(v69);
    }
    uint64_t v70 = (void *)v256;
    if ((void)v256)
    {
      do
      {
        size_t v71 = (void *)*v70;
        operator delete(v70);
        uint64_t v70 = v71;
      }
      while (v71);
    }
    uint64_t v72 = (void *)v255;
    *(void *)&long long v255 = 0;
    if (v72) {
      operator delete(v72);
    }
    uint64_t v73 = &off_1E5A8B000;
    int v244 = *((unsigned __int8 *)this + 1713);
    if (*((unsigned char *)this + 1713))
    {
      char v74 = 1;
    }
    else
    {
      uint8x8_t v75 = +[VKDebugSettings sharedSettings];
      char v74 = [v75 labelDedupingDisabled];
    }
    char v249 = 0;
    __int16 v248 = 0;
    int v242 = *(void **)(*((void *)this + 3) + 432);
    *(_OWORD *)std::vector<unsigned int> __p = 0u;
    *(_OWORD *)unsigned int v251 = 0u;
    int v252 = 1065353216;
    int32x4_t v77 = (uint64_t *)*((void *)this + 9);
    uint64_t v76 = (uint64_t *)*((void *)this + 10);
    v247[0] = (uint64_t)this;
    v247[1] = (uint64_t)&v248;
    v247[2] = (uint64_t)(v242 + 17);
    v247[3] = (uint64_t)__p;
    if (v77 == v76)
    {
LABEL_112:
      uint64_t v76 = v77;
    }
    else
    {
      do
      {
        if ((md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_0::operator()(v247, (md::Label **)v77) & 1) == 0)
        {
          do
          {
            v76 -= 2;
            if (v76 == v77) {
              goto LABEL_112;
            }
          }
          while (!md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_0::operator()(v247, (md::Label **)v76));
          uint64_t v78 = (md::Label *)*v77;
          *int32x4_t v77 = *v76;
          *uint64_t v76 = (uint64_t)v78;
          uint64_t v79 = v77[1];
          v77[1] = v76[1];
          v76[1] = v79;
        }
        v77 += 2;
      }
      while (v77 != v76);
    }
    for (m = (uint64_t *)*((void *)this + 9); m != v76; m += 2)
    {
      while (1)
      {
        uint64_t v81 = *m;
        if (*(unsigned char *)(*m + 1290)) {
          break;
        }
        unint64_t v82 = v76 - 2;
        do
        {
          if (v82 == m) {
            goto LABEL_123;
          }
          uint64_t v76 = v82;
          uint64_t v84 = *v82;
          v82 -= 2;
          uint64_t v83 = v84;
        }
        while (!*(unsigned char *)(v84 + 1290));
        uint64_t *m = v83;
        v82[2] = v81;
        uint64_t v85 = m[1];
        m[1] = v82[3];
        v82[3] = v85;
        m += 2;
        if (m == v76) {
          goto LABEL_123;
        }
      }
    }
    m = v76;
LABEL_123:
    uint64_t v86 = (uint64_t *)*((void *)this + 9);
    if ((v74 & 1) == 0)
    {
      md::LabelPool::prepareDedupingGroupsForCollision(*((void **)this + 6), *((LabelManager **)this + 3));
      uint64_t v87 = m;
      if (v86 != m)
      {
        uint64_t v88 = m;
        uint64_t v87 = v86;
        do
        {
          while (1)
          {
            uint64_t v89 = *v87;
            if (*(void *)(*v87 + 24)) {
              break;
            }
            uint64_t v90 = v88 - 2;
            do
            {
              if (v90 == v87) {
                goto LABEL_133;
              }
              uint64_t v88 = v90;
              uint64_t v92 = *v90;
              v90 -= 2;
              uint64_t v91 = v92;
            }
            while (!*(void *)(v92 + 24));
            *uint64_t v87 = v91;
            v90[2] = v89;
            uint64_t v93 = v87[1];
            v87[1] = v90[3];
            v90[3] = v93;
            v87 += 2;
            if (v87 == v88) {
              goto LABEL_133;
            }
          }
          v87 += 2;
        }
        while (v87 != v88);
        uint64_t v87 = v88;
      }
LABEL_133:
      unint64_t v94 = 126 - 2 * __clz(((char *)v87 - (char *)v86) >> 4);
      if (v87 == v86) {
        uint64_t v95 = 0;
      }
      else {
        uint64_t v95 = v94;
      }
      std::__introsort<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *,false>(v86, v87, v95, 1);
    }
    long long v255 = 0u;
    long long v256 = 0u;
    LODWORD(v257) = 1065353216;
    if (v86 == m)
    {
      uint64_t v106 = (unint64_t *)m;
      goto LABEL_224;
    }
    long long v96 = v86;
    while (1)
    {
      uint64_t v97 = *v86;
      if (!*(unsigned char *)(*v86 + 1290)) {
        goto LABEL_140;
      }
      uint64_t v98 = *(void *)(v97 + 24);
      if ((*(unsigned int (**)(void))(**(void **)(v97 + 8) + 264))(*(void *)(v97 + 8)) == 26
        || (*(unsigned int (**)(void))(**(void **)(*v86 + 8) + 264))(*(void *)(*v86 + 8)) == 24
        || (uint64_t v99 = *v86,
            (*(unsigned int (**)(void))(**(void **)(*v86 + 8) + 264))(*(void *)(*v86 + 8)) == 25))
      {
        BOOL v100 = 1;
        if (!v98) {
          goto LABEL_159;
        }
      }
      else
      {
        BOOL v100 = (*(uint64_t (**)(void))(**(void **)(v99 + 8) + 264))(*(void *)(v99 + 8)) == 27;
        if (!v98)
        {
LABEL_159:
          unint64_t v102 = 0;
LABEL_160:
          if (!md::ARWalkingLabeler::doesStagingLabelIntersectWithWorld(this, (md::Label *)*v86, v100, v102)) {
            goto LABEL_161;
          }
          goto LABEL_140;
        }
      }
      if (((*(unsigned int (**)(void))(**(void **)(*v86 + 8) + 264))(*(void *)(*v86 + 8)) == 26
         || (*(unsigned int (**)(void))(**(void **)(*v86 + 8) + 264))(*(void *)(*v86 + 8)) == 24)
        && (uint64_t v101 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v98 + 56))(v98, *v86)) != 0)
      {
        if (*(unsigned char *)(v101 + 1290)) {
          unint64_t v102 = (md::Label *)v101;
        }
        else {
          unint64_t v102 = 0;
        }
        if (v74) {
          goto LABEL_160;
        }
      }
      else
      {
        unint64_t v102 = 0;
        if (v74) {
          goto LABEL_160;
        }
      }
      if ((*(uint64_t (**)(uint64_t, void))(*(void *)v98 + 24))(v98, *(unsigned __int8 *)(*v86 + 36)))
      {
        uint64_t v254 = 0;
        LOWORD(v253) = 257;
        md::Label::setCollisionResult(*v86, (uint64_t)&v253);
      }
      else if (!md::ARWalkingLabeler::doesStagingLabelIntersectWithWorld(this, (md::Label *)*v86, v100, v102))
      {
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v98 + 32))(v98, *v86, 0);
LABEL_161:
        std::__hash_table<md::Label *,std::hash<md::Label *>,std::equal_to<md::Label *>,std::allocator<md::Label *>>::__emplace_unique_key_args<md::Label *,md::Label *>((float *)&v255, *v86, *v86);
      }
LABEL_140:
      v86 += 2;
      if (v86 == m)
      {
        unint64_t v103 = *((void *)&v255 + 1);
        uint8x8_t v104 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v255 + 8));
        v104.i16[0] = vaddlv_u8(v104);
        uint64_t v105 = *((void *)&v255 + 1) - 1;
        uint64_t v106 = (unint64_t *)m;
        uint64_t v86 = v96;
        unint64_t v107 = (unint64_t *)v96;
        uint64_t v73 = &off_1E5A8B000;
        while (1)
        {
          if (v103)
          {
            while (1)
            {
              unint64_t v109 = *v107;
              unint64_t v110 = HIDWORD(*v107);
              unint64_t v111 = 0x9DDFEA08EB382D69 * ((8 * *v107 + 8) ^ v110);
              unint64_t v112 = 0x9DDFEA08EB382D69
                   * ((0x9DDFEA08EB382D69 * (v110 ^ (v111 >> 47) ^ v111)) ^ ((0x9DDFEA08EB382D69
                                                                              * (v110 ^ (v111 >> 47) ^ v111)) >> 47));
              if (v104.u32[0] > 1uLL)
              {
                unint64_t v113 = v112;
                if (v112 >= v103) {
                  unint64_t v113 = v112 % v103;
                }
              }
              else
              {
                unint64_t v113 = v112 & v105;
              }
              uint64_t v114 = *(void **)(v255 + 8 * v113);
              if (!v114) {
                goto LABEL_188;
              }
              float v115 = (void *)*v114;
              if (!v115) {
                goto LABEL_188;
              }
              if (v104.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v116 = v115[1];
                  if (v112 == v116)
                  {
                    if (v115[2] == v109) {
                      goto LABEL_185;
                    }
                  }
                  else if ((v116 & v105) != v113)
                  {
                    goto LABEL_188;
                  }
                  float v115 = (void *)*v115;
                  if (!v115) {
                    goto LABEL_188;
                  }
                }
              }
              while (1)
              {
                unint64_t v117 = v115[1];
                if (v112 == v117) {
                  break;
                }
                if (v117 >= v103) {
                  v117 %= v103;
                }
                if (v117 != v113) {
                  goto LABEL_188;
                }
LABEL_179:
                float v115 = (void *)*v115;
                if (!v115) {
                  goto LABEL_188;
                }
              }
              if (v115[2] != v109) {
                goto LABEL_179;
              }
LABEL_185:
              v107 += 2;
              if (v107 == v106)
              {
LABEL_213:
                if (v106 != (unint64_t *)m)
                {
LABEL_214:
                  size_t v129 = v106;
LABEL_215:
                  while (1)
                  {
                    unint64_t v130 = *v129;
                    if (*(unsigned char *)(*v129 + 821) == 21) {
                      break;
                    }
                    v129 += 2;
                    if (v129 == (unint64_t *)m) {
                      goto LABEL_224;
                    }
                  }
                  uint64_t v131 = m - 2;
                  while (v131 != (uint64_t *)v129)
                  {
                    m = v131;
                    uint64_t v133 = *v131;
                    v131 -= 2;
                    unint64_t v132 = v133;
                    if (*(unsigned char *)(v133 + 821) != 21)
                    {
                      *size_t v129 = v132;
                      v131[2] = v130;
                      unint64_t v134 = v129[1];
                      v129[1] = v131[3];
                      v131[3] = v134;
                      v129 += 2;
                      if (v129 != (unint64_t *)m) {
                        goto LABEL_215;
                      }
                      break;
                    }
                  }
                  m = (uint64_t *)v129;
                }
LABEL_224:
                uint64_t v135 = (void *)v256;
                if ((void)v256)
                {
                  do
                  {
                    uint64_t v136 = (void *)*v135;
                    operator delete(v135);
                    uint64_t v135 = v136;
                  }
                  while (v136);
                }
                size_t v137 = (void *)v255;
                *(void *)&long long v255 = 0;
                if (v137) {
                  operator delete(v137);
                }
                uint64_t v138 = [v73[32] sharedSettings];
                int v139 = [v138 arForceOccludedStyling];

                if (*((unsigned __int8 *)this + 1640) != v139)
                {
                  *((unsigned char *)this + 1640) = v139;
                  unint64_t v140 = (unint64_t *)*((void *)this + 9);
                  for (unint64_t n = *((void *)this + 10); v140 != (unint64_t *)n; v140 += 2)
                  {
                    unint64_t v141 = *v140;
                    v246[6] = *v140;
                    unint64_t v142 = (std::__shared_weak_count *)v140[1];
                    v246[7] = (unint64_t)v142;
                    if (v142) {
                      atomic_fetch_add_explicit(&v142->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    char v143 = *((unsigned char *)this + 1640);
                    int v144 = (*(uint64_t (**)(void))(**(void **)(v141 + 8) + 264))(*(void *)(v141 + 8));
                    unint64_t v145 = *(unsigned char **)(v141 + 8);
                    if (v144 == 24)
                    {
                      v145[809] = v143;
                    }
                    else
                    {
                      int v146 = (*(uint64_t (**)(unsigned char *))(*(void *)v145 + 264))(v145);
                      uint64_t v147 = *(unsigned char **)(v141 + 8);
                      if (v146 == 26)
                      {
                        v147[418] = v143;
                      }
                      else if ((*(unsigned int (**)(unsigned char *))(*(void *)v147 + 264))(v147) == 25 {
                             || (*(unsigned int (**)(void))(**(void **)(v141 + 8) + 264))(*(void *)(v141 + 8)) == 27)
                      }
                      {
                        *(unsigned char *)(*(void *)(v141 + 8) + 720) = v143;
                      }
                    }
                    if (v142 && !atomic_fetch_add(&v142->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                      std::__shared_weak_count::__release_weak(v142);
                    }
                  }
                }
                if ((char *)v106 - (char *)v86 > 15 || (char *)m - (char *)v106 < 16)
                {
                  uint64_t v168 = *((void *)this + 209);
                  uint64_t v149 = &off_1E5A8B000;
                  if (v168)
                  {
                    uint64_t v169 = (std::__shared_weak_count *)*((void *)this + 210);
                    v246[2] = *((void *)this + 209);
                    v246[3] = (unint64_t)v169;
                    if (v169) {
                      atomic_fetch_add_explicit(&v169->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    unint64_t n = *((unsigned __int8 *)this + 1640);
                    int v170 = (*(uint64_t (**)(void))(**(void **)(v168 + 8) + 264))(*(void *)(v168 + 8));
                    uint64_t v171 = *(unsigned char **)(v168 + 8);
                    if (v170 == 24)
                    {
                      v171[809] = n;
                    }
                    else
                    {
                      int v181 = (*(uint64_t (**)(unsigned char *))(*(void *)v171 + 264))(v171);
                      uint64_t v182 = *(unsigned char **)(v168 + 8);
                      if (v181 == 26)
                      {
                        v182[418] = n;
                      }
                      else if ((*(unsigned int (**)(unsigned char *))(*(void *)v182 + 264))(v182) == 25 {
                             || (*(unsigned int (**)(void))(**(void **)(v168 + 8) + 264))(*(void *)(v168 + 8)) == 27)
                      }
                      {
                        *(unsigned char *)(*(void *)(v168 + 8) + 720) = n;
                      }
                    }
                    if (v169)
                    {
                      uint64_t v175 = v106;
                      uint64_t v106 = (unint64_t *)v86;
                      if (atomic_fetch_add(&v169->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
                        goto LABEL_317;
                      }
                      goto LABEL_324;
                    }
                  }
                  uint64_t v175 = v106;
                }
                else
                {
                  unint64_t v148 = v106;
                  uint64_t v149 = &off_1E5A8B000;
                  if (v106 != (unint64_t *)m)
                  {
                    unint64_t v150 = (uint64_t *)(v106 + 2);
                    unint64_t v148 = v106;
                    if (v106 + 2 != (unint64_t *)m)
                    {
                      uint8x8_t v151 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
                      v151.i16[0] = vaddlv_u8(v151);
                      unint64_t v152 = (unint64_t)__p[1] - 1;
                      unint64_t v148 = v106;
                      do
                      {
                        if (__p[1])
                        {
                          uint64_t v153 = *v150;
                          unint64_t v154 = HIDWORD(*v150);
                          unint64_t v155 = 0x9DDFEA08EB382D69 * ((8 * *v150 + 8) ^ v154);
                          unint64_t v156 = 0x9DDFEA08EB382D69
                               * ((0x9DDFEA08EB382D69 * (v154 ^ (v155 >> 47) ^ v155)) ^ ((0x9DDFEA08EB382D69
                                                                                          * (v154 ^ (v155 >> 47) ^ v155)) >> 47));
                          if (v151.u32[0] > 1uLL)
                          {
                            unint64_t v157 = v156;
                            if ((void *)v156 >= __p[1]) {
                              unint64_t v157 = v156 % (unint64_t)__p[1];
                            }
                          }
                          else
                          {
                            unint64_t v157 = v156 & v152;
                          }
                          uint64_t v158 = (double **)*((void *)__p[0] + v157);
                          if (v158)
                          {
                            unint64_t v159 = *v158;
                            if (v159)
                            {
                              if (v151.u32[0] < 2uLL)
                              {
                                while (1)
                                {
                                  uint64_t v160 = *((void *)v159 + 1);
                                  if (v160 == v156)
                                  {
                                    if (*((void *)v159 + 2) == v153) {
                                      goto LABEL_271;
                                    }
                                  }
                                  else if ((v160 & v152) != v157)
                                  {
                                    goto LABEL_249;
                                  }
                                  unint64_t v159 = *(double **)v159;
                                  if (!v159) {
                                    goto LABEL_249;
                                  }
                                }
                              }
                              do
                              {
                                unint64_t v161 = *((void *)v159 + 1);
                                if (v161 == v156)
                                {
                                  if (*((void *)v159 + 2) == v153)
                                  {
LABEL_271:
                                    unint64_t v162 = *v148;
                                    unint64_t v163 = HIDWORD(*v148);
                                    unint64_t v164 = 0x9DDFEA08EB382D69 * ((8 * *v148 + 8) ^ v163);
                                    unint64_t v165 = 0x9DDFEA08EB382D69
                                         * ((0x9DDFEA08EB382D69 * (v163 ^ (v164 >> 47) ^ v164)) ^ ((0x9DDFEA08EB382D69 * (v163 ^ (v164 >> 47) ^ v164)) >> 47));
                                    if (v151.u32[0] >= 2uLL)
                                    {
                                      unint64_t v167 = v165;
                                      if ((void *)v165 >= __p[1]) {
                                        unint64_t v167 = v165 % (unint64_t)__p[1];
                                      }
                                      uint64_t v166 = (double *)*((void *)__p[0] + v167);
                                      do
                                      {
                                        do
                                          uint64_t v166 = *(double **)v166;
                                        while (*((void *)v166 + 1) != v165);
                                      }
                                      while (*((void *)v166 + 2) != v162);
                                    }
                                    else
                                    {
                                      uint64_t v166 = (double *)*((void *)__p[0] + (v165 & v152));
                                      do
                                      {
                                        do
                                          uint64_t v166 = *(double **)v166;
                                        while (*((void *)v166 + 1) != v165);
                                      }
                                      while (*((void *)v166 + 2) != v162);
                                    }
                                    if (v159[3] < v166[3]) {
                                      unint64_t v148 = (unint64_t *)v150;
                                    }
                                    break;
                                  }
                                }
                                else
                                {
                                  if ((void *)v161 >= __p[1]) {
                                    v161 %= (unint64_t)__p[1];
                                  }
                                  if (v161 != v157) {
                                    break;
                                  }
                                }
                                unint64_t v159 = *(double **)v159;
                              }
                              while (v159);
                            }
                          }
                        }
LABEL_249:
                        v150 += 2;
                      }
                      while (v150 != m);
                    }
                  }
                  unint64_t v172 = *v148;
                  uint64_t v173 = *(void **)(*v148 + 24);
                  if (v173
                    && ((*(unsigned int (**)(void))(**(void **)(v172 + 8) + 264))(*(void *)(v172 + 8)) == 26
                     || (*(unsigned int (**)(void))(**(void **)(v172 + 8) + 264))(*(void *)(v172 + 8)) == 24)
                    && !std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>(v173 + 26, v172))
                  {
                    uint64_t v174 = (*(uint64_t (**)(void *, unint64_t))(*v173 + 56))(v173, v172);
                    if (v174) {
                      unint64_t v172 = v174;
                    }
                  }
                  uint64_t v175 = v106;
                  if (v106 != (unint64_t *)m)
                  {
                    uint64_t v175 = (unint64_t *)m;
                    long long v176 = v106;
                    while (1)
                    {
                      unint64_t v177 = *v176;
                      if (*v176 != v172) {
                        break;
                      }
LABEL_297:
                      v176 += 2;
                      if (v176 == v175) {
                        goto LABEL_306;
                      }
                    }
                    unint64_t v178 = v175 - 2;
                    while (v178 != v176)
                    {
                      uint64_t v175 = v178;
                      unint64_t v179 = *v178;
                      v178 -= 2;
                      if (v179 == v172)
                      {
                        *long long v176 = v172;
                        v178[2] = v177;
                        unint64_t v180 = v176[1];
                        v176[1] = v178[3];
                        v178[3] = v180;
                        goto LABEL_297;
                      }
                    }
                    uint64_t v175 = v176;
                  }
LABEL_306:
                  unint64_t v183 = *v106;
                  uint64_t v169 = (std::__shared_weak_count *)v106[1];
                  v246[4] = *v106;
                  v246[5] = (unint64_t)v169;
                  if (v169) {
                    atomic_fetch_add_explicit(&v169->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  int v184 = (*(uint64_t (**)(void))(**(void **)(v183 + 8) + 264))(*(void *)(v183 + 8));
                  uint64_t v185 = *(unsigned char **)(v183 + 8);
                  if (v184 == 24)
                  {
                    v185[809] = 1;
                  }
                  else
                  {
                    int v186 = (*(uint64_t (**)(unsigned char *))(*(void *)v185 + 264))(v185);
                    uint64_t v187 = *(unsigned char **)(v183 + 8);
                    if (v186 == 26)
                    {
                      v187[418] = 1;
                    }
                    else if ((*(unsigned int (**)(unsigned char *))(*(void *)v187 + 264))(v187) == 25 {
                           || (*(unsigned int (**)(void))(**(void **)(v183 + 8) + 264))(*(void *)(v183 + 8)) == 27)
                    }
                    {
                      *(unsigned char *)(*(void *)(v183 + 8) + 720) = 1;
                    }
                  }
                  if (!v169 || (uint64_t v86 = (uint64_t *)v106, atomic_fetch_add(&v169->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
                  {
LABEL_317:
                    if (v175 == (unint64_t *)m)
                    {
LABEL_329:
                      unint64_t v189 = 126 - 2 * __clz(((char *)v175 - (char *)v106) >> 4);
                      *(void *)&long long v255 = *((void *)this + 3) + 3560;
                      *((void *)&v255 + 1) = __p;
                      if (v175 == v106) {
                        uint64_t v190 = 0;
                      }
                      else {
                        uint64_t v190 = v189;
                      }
                      std::__introsort<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *,false>(v106, v175, (uint64_t)&v255, v190, 1);
                      if ((char *)v175 - (char *)v106 > 15)
                      {
                        uint64_t v191 = (std::__shared_weak_count *)v106[1];
                        unint64_t v253 = *v106;
                        uint64_t v254 = v191;
                        if (v191)
                        {
                          int v241 = v191;
                          atomic_fetch_add_explicit(&v191->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        else
                        {
                          int v241 = 0;
                        }
                      }
                      else
                      {
                        int v241 = 0;
                        unint64_t v253 = 0;
                        uint64_t v254 = 0;
                      }
                      md::ARWalkingLabeler::updateStagingActiveLabel((uint64_t)this, &v253);
                      unint64_t v192 = [v149[32] sharedSettings];
                      char v193 = [v192 arAlwaysShowOneContinueLabel];

                      v246[1] = 0;
                      LOWORD(v246[0]) = 0;
                      if (v175 == v106)
                      {
LABEL_338:
                        *((void *)this + 206) = v242[17];
                        *((void *)this + 207) = v242[18];
                        *((void *)this + 208) = v242[19];
                        *((unsigned char *)this + 1712) = 0;
                        if (v241 && !atomic_fetch_add(&v241->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
                          std::__shared_weak_count::__release_weak(v241);
                        }
                        uint64_t v194 = v251[0];
                        if (v251[0])
                        {
                          do
                          {
                            uint64_t v195 = (void *)*v194;
                            operator delete(v194);
                            uint64_t v194 = v195;
                          }
                          while (v195);
                        }
                        uint64_t v196 = __p[0];
                        __p[0] = 0;
                        if (v196) {
                          operator delete(v196);
                        }
                        return;
                      }
                      while (2)
                      {
                        unint64_t v197 = *v106;
                        if (!v244 && v197 != *((void *)this + 209))
                        {
                          if ((v193 & 1) != 0 && *(unsigned char *)(v197 + 1211) == 26) {
                            goto LABEL_350;
                          }
                          md::Label::updateStateMachineForStaging(*v106, 2, 32);
LABEL_347:
                          v106 += 2;
                          if (v106 == v175) {
                            goto LABEL_338;
                          }
                          continue;
                        }
                        break;
                      }
                      if (v197)
                      {
LABEL_350:
                        uint64_t v198 = *(void *)(*((void *)this + 3) + 432);
                        double v199 = *(float *)(v197 + 780);
                        if (*(double *)(v198 + 272) <= v199 && *(double *)(v198 + 280) >= v199)
                        {
                          int v202 = (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)v197 + 40))(*v106, v198 + 736);
                          unint64_t v197 = *v106;
                          int8x8_t v201 = *(int8x8_t *)((char *)this + 1896);
                          if (v201) {
                            goto LABEL_362;
                          }
                          goto LABEL_381;
                        }
                      }
                      int v202 = 0;
                      int8x8_t v201 = *(int8x8_t *)((char *)this + 1896);
                      if (v201)
                      {
LABEL_362:
                        unint64_t v203 = 0x9DDFEA08EB382D69 * (((8 * v197) + 8) ^ HIDWORD(v197));
                        unint64_t v204 = 0x9DDFEA08EB382D69 * (HIDWORD(v197) ^ (v203 >> 47) ^ v203);
                        unint64_t v205 = 0x9DDFEA08EB382D69 * (v204 ^ (v204 >> 47));
                        uint8x8_t v206 = (uint8x8_t)vcnt_s8(v201);
                        v206.i16[0] = vaddlv_u8(v206);
                        if (v206.u32[0] > 1uLL)
                        {
                          unint64_t v207 = v205;
                          uint64_t v208 = (void *)((char *)this + 1888);
                          if (v205 >= *(void *)&v201) {
                            unint64_t v207 = v205 % *(void *)&v201;
                          }
                        }
                        else
                        {
                          unint64_t v207 = v205 & (*(void *)&v201 - 1);
                          uint64_t v208 = (void *)((char *)this + 1888);
                        }
                        int v209 = *(void **)(*v208 + 8 * v207);
                        if (v209)
                        {
                          int v210 = (void *)*v209;
                          if (v210)
                          {
                            if (v206.u32[0] < 2uLL)
                            {
                              uint64_t v211 = *(void *)&v201 - 1;
                              while (1)
                              {
                                uint64_t v213 = v210[1];
                                if (v213 == v205)
                                {
                                  if (v210[2] == v197) {
                                    goto LABEL_383;
                                  }
                                }
                                else if ((v213 & v211) != v207)
                                {
                                  goto LABEL_381;
                                }
                                int v210 = (void *)*v210;
                                if (!v210) {
                                  goto LABEL_381;
                                }
                              }
                            }
                            do
                            {
                              unint64_t v212 = v210[1];
                              if (v212 == v205)
                              {
                                if (v210[2] == v197) {
                                  goto LABEL_383;
                                }
                              }
                              else
                              {
                                if (v212 >= *(void *)&v201) {
                                  v212 %= *(void *)&v201;
                                }
                                if (v212 != v207) {
                                  break;
                                }
                              }
                              int v210 = (void *)*v210;
                            }
                            while (v210);
                          }
                        }
                      }
LABEL_381:
                      if (v202)
                      {
                        *(_DWORD *)(v197 + 827) = 16843009;
                        std::__hash_table<md::Label *,std::hash<md::Label *>,std::equal_to<md::Label *>,std::allocator<md::Label *>>::__emplace_unique_key_args<md::Label *,md::Label *>((float *)this + 472, v197, v197);
                        md::LabelLayoutContext::coordinateEyePos((md::LabelLayoutContext *)&v255, *(void *)(*((void *)this + 3) + 432));
                        unint64_t v214 = *v106;
                        double v215 = *(float *)(*v106 + 780) / *(double *)(*v106 + 224);
                        *((double *)&v256 + 1) = *(float *)(*v106 + 764);
                        double v257 = v215;
                        unint64_t v245 = v214;
                        unsigned int v216 = std::__hash_table<std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>,std::__unordered_map_hasher<md::Label *,std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>,std::hash<md::Label *>,std::equal_to<md::Label *>,true>,std::__unordered_map_equal<md::Label *,std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>,std::equal_to<md::Label *>,std::hash<md::Label *>,true>,std::allocator<std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>>>::__emplace_unique_key_args<md::Label *,std::piecewise_construct_t const&,std::tuple<md::Label *&&>,std::tuple<>>((float *)this + 482, v214, &v245);
                        *(_OWORD *)(v216 + 24) = v255;
                        *(_OWORD *)(v216 + 40) = v256;
                        *((double *)v216 + 7) = v257;
                        if (!*((unsigned char *)this + 1336)
                          && *(void *)(*v106 + 24)
                          && ((*(unsigned int (**)(void))(**(void **)(*v106 + 8) + 264))(*(void *)(*v106 + 8)) == 24
                           || (*(unsigned int (**)(void))(**(void **)(*v106 + 8) + 264))(*(void *)(*v106 + 8)) == 26))
                        {
                          uint64_t v217 = *(void *)(*v106 + 24);
                          unsigned int v218 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>((void *)(v217 + 168), *v106);
                          if (v218)
                          {
                            uint64_t v219 = v218;
                            uint64_t v243 = (void *)(v217 + 88);
                            unint64_t v220 = v218[3];
                            unint64_t v221 = *(void *)(v217 + 96);
                            if (v221)
                            {
                              uint8x8_t v222 = (uint8x8_t)vcnt_s8((int8x8_t)v221);
                              v222.i16[0] = vaddlv_u8(v222);
                              if (v222.u32[0] > 1uLL)
                              {
                                unint64_t n = v218[3];
                                if (v220 >= v221) {
                                  unint64_t n = v220 % v221;
                                }
                              }
                              else
                              {
                                unint64_t n = (v221 - 1) & v220;
                              }
                              unsigned int v223 = *(void **)(*v243 + 8 * n);
                              if (v223)
                              {
                                unsigned int v224 = (void *)*v223;
                                if (v224)
                                {
                                  if (v222.u32[0] < 2uLL)
                                  {
                                    while (1)
                                    {
                                      uint64_t v226 = v224[1];
                                      if (v226 == v220)
                                      {
                                        if (v224[2] == v220) {
                                          goto LABEL_383;
                                        }
                                      }
                                      else if ((v226 & (v221 - 1)) != n)
                                      {
                                        goto LABEL_408;
                                      }
                                      unsigned int v224 = (void *)*v224;
                                      if (!v224) {
                                        goto LABEL_408;
                                      }
                                    }
                                  }
                                  do
                                  {
                                    unint64_t v225 = v224[1];
                                    if (v225 == v220)
                                    {
                                      if (v224[2] == v220) {
                                        goto LABEL_383;
                                      }
                                    }
                                    else
                                    {
                                      if (v225 >= v221) {
                                        v225 %= v221;
                                      }
                                      if (v225 != n) {
                                        break;
                                      }
                                    }
                                    unsigned int v224 = (void *)*v224;
                                  }
                                  while (v224);
                                }
                              }
                            }
LABEL_408:
                            unint64_t v227 = operator new(0x18uLL);
                            void *v227 = 0;
                            v227[1] = v220;
                            v227[2] = v219[3];
                            float v228 = (float)(unint64_t)(*(void *)(v217 + 112) + 1);
                            float v229 = *(float *)(v217 + 120);
                            if (v221 && (float)(v229 * (float)v221) >= v228)
                            {
                              unsigned int v230 = (uint64_t *)(v217 + 88);
                            }
                            else
                            {
                              BOOL v231 = (v221 & (v221 - 1)) != 0;
                              if (v221 < 3) {
                                BOOL v231 = 1;
                              }
                              unint64_t v232 = v231 | (2 * v221);
                              unint64_t v233 = vcvtps_u32_f32(v228 / v229);
                              if (v232 <= v233) {
                                size_t prime = v233;
                              }
                              else {
                                size_t prime = v232;
                              }
                              if (prime == 1)
                              {
                                size_t prime = 2;
                              }
                              else if ((prime & (prime - 1)) != 0)
                              {
                                size_t prime = std::__next_prime(prime);
                                unint64_t v221 = *(void *)(v217 + 96);
                              }
                              if (prime > v221) {
                                goto LABEL_421;
                              }
                              if (prime < v221)
                              {
                                unint64_t v235 = vcvtps_u32_f32((float)*(unint64_t *)(v217 + 112) / *(float *)(v217 + 120));
                                if (v221 < 3
                                  || (uint8x8_t v236 = (uint8x8_t)vcnt_s8((int8x8_t)v221),
                                      v236.i16[0] = vaddlv_u8(v236),
                                      v236.u32[0] > 1uLL))
                                {
                                  unint64_t v235 = std::__next_prime(v235);
                                }
                                else
                                {
                                  uint64_t v237 = 1 << -(char)__clz(v235 - 1);
                                  if (v235 >= 2) {
                                    unint64_t v235 = v237;
                                  }
                                }
                                if (prime <= v235) {
                                  size_t prime = v235;
                                }
                                if (prime < v221) {
LABEL_421:
                                }
                                  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>((uint64_t)v243, prime);
                              }
                              unint64_t v221 = *(void *)(v217 + 96);
                              if ((v221 & (v221 - 1)) != 0)
                              {
                                unsigned int v230 = (uint64_t *)(v217 + 88);
                                if (v220 >= v221) {
                                  unint64_t n = v220 % v221;
                                }
                                else {
                                  unint64_t n = v220;
                                }
                              }
                              else
                              {
                                unint64_t n = (v221 - 1) & v220;
                                unsigned int v230 = (uint64_t *)(v217 + 88);
                              }
                            }
                            uint64_t v238 = *v230;
                            int v239 = *(void **)(*v230 + 8 * n);
                            if (v239)
                            {
                              void *v227 = *v239;
                              goto LABEL_445;
                            }
                            void *v227 = *(void *)(v217 + 104);
                            *(void *)(v217 + 104) = v227;
                            *(void *)(v238 + 8 * n) = v217 + 104;
                            if (*v227)
                            {
                              unint64_t v240 = *(void *)(*v227 + 8);
                              if ((v221 & (v221 - 1)) != 0)
                              {
                                if (v240 >= v221) {
                                  v240 %= v221;
                                }
                              }
                              else
                              {
                                v240 &= v221 - 1;
                              }
                              int v239 = (void *)(*v230 + 8 * v240);
LABEL_445:
                              *int v239 = v227;
                            }
                            ++*(void *)(v217 + 112);
                          }
                        }
                      }
LABEL_383:
                      md::Label::setCollisionResult(*v106, (uint64_t)v246);
                      v193 &= *(unsigned char *)(*v106 + 1211) != 26;
                      goto LABEL_347;
                    }
LABEL_327:
                    uint64_t v188 = (uint64_t *)v175;
                    do
                    {
                      md::Label::updateStateMachineForStaging(*v188, 2, 22);
                      v188 += 2;
                    }
                    while (v188 != m);
                    goto LABEL_329;
                  }
LABEL_324:
                  ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                  std::__shared_weak_count::__release_weak(v169);
                }
                uint64_t v106 = (unint64_t *)v86;
                if (v175 == (unint64_t *)m) {
                  goto LABEL_329;
                }
                goto LABEL_327;
              }
            }
          }
          unint64_t v109 = *v107;
LABEL_188:
          unint64_t v118 = v106 - 2;
          if (v107 == v106 - 2)
          {
            uint64_t v106 = v107;
            if (v107 != (unint64_t *)m) {
              goto LABEL_214;
            }
            goto LABEL_224;
          }
          while (1)
          {
            unint64_t v119 = v106;
            uint64_t v106 = v118;
            if (v103)
            {
              unint64_t v120 = *(v119 - 2);
              unint64_t v121 = 0x9DDFEA08EB382D69 * (((8 * v120) + 8) ^ HIDWORD(v120));
              unint64_t v122 = 0x9DDFEA08EB382D69 * (HIDWORD(v120) ^ (v121 >> 47) ^ v121);
              unint64_t v123 = 0x9DDFEA08EB382D69 * (v122 ^ (v122 >> 47));
              if (v104.u32[0] > 1uLL)
              {
                unint64_t v124 = v123;
                if (v123 >= v103) {
                  unint64_t v124 = v123 % v103;
                }
              }
              else
              {
                unint64_t v124 = v123 & v105;
              }
              size_t v125 = *(void **)(v255 + 8 * v124);
              if (v125)
              {
                size_t v126 = (void *)*v125;
                if (v126) {
                  break;
                }
              }
            }
LABEL_190:
            unint64_t v118 = v106 - 2;
            if (v107 == v106 - 2)
            {
              uint64_t v106 = v107;
              goto LABEL_213;
            }
          }
          if (v104.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v127 = v126[1];
              if (v123 == v127)
              {
                if (v126[2] == v120) {
                  goto LABEL_163;
                }
              }
              else if ((v127 & v105) != v124)
              {
                goto LABEL_190;
              }
              size_t v126 = (void *)*v126;
              if (!v126) {
                goto LABEL_190;
              }
            }
          }
          while (1)
          {
            unint64_t v128 = v126[1];
            if (v123 == v128) {
              break;
            }
            if (v128 >= v103) {
              v128 %= v103;
            }
            if (v128 != v124) {
              goto LABEL_190;
            }
LABEL_206:
            size_t v126 = (void *)*v126;
            if (!v126) {
              goto LABEL_190;
            }
          }
          if (v126[2] != v120) {
            goto LABEL_206;
          }
LABEL_163:
          *unint64_t v107 = v120;
          *uint64_t v106 = v109;
          unint64_t v108 = v107[1];
          v107[1] = *(v119 - 1);
          *(v119 - 1) = v108;
          v107 += 2;
          if (v107 == v106) {
            goto LABEL_213;
          }
        }
      }
    }
  }
  if (*((void *)this + 239))
  {
    uint64_t v46 = (void *)*((void *)this + 238);
    if (v46)
    {
      do
      {
        uint64_t v47 = (void *)*v46;
        operator delete(v46);
        uint64_t v46 = v47;
      }
      while (v47);
    }
    *((void *)this + 238) = 0;
    uint64_t v48 = *((void *)this + 237);
    if (v48)
    {
      for (iuint64_t i = 0; ii != v48; ++ii)
        *(void *)(*((void *)this + 236) + 8 * ii) = 0;
    }
    *((void *)this + 239) = 0;
  }
  if (*((void *)this + 244))
  {
    unint64_t v50 = (void *)*((void *)this + 243);
    if (v50)
    {
      do
      {
        uint64_t v51 = (void *)*v50;
        operator delete(v50);
        unint64_t v50 = v51;
      }
      while (v51);
    }
    *((void *)this + 243) = 0;
    uint64_t v52 = *((void *)this + 242);
    if (v52)
    {
      for (juint64_t j = 0; jj != v52; ++jj)
        *(void *)(*((void *)this + 241) + 8 * jj) = 0;
    }
    *((void *)this + 244) = 0;
  }
  uint64_t v54 = (uint64_t *)*((void *)this + 9);
  uint64_t v55 = (uint64_t *)*((void *)this + 10);
  while (v54 != v55)
  {
    uint64_t v56 = *v54;
    v54 += 2;
    md::Label::updateStateMachineForStaging(v56, 2, 29);
  }
  long long v255 = 0uLL;
  md::ARWalkingLabeler::updateStagingActiveLabel((uint64_t)this, &v255);
  *((unsigned char *)this + 1712) = 0;
}

void sub_1A27BB25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void md::ARWalkingLabeler::updateStagingActiveLabel(uint64_t a1, void *a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (*a2)
  {
    uint64_t v4 = *(id **)(*a2 + 8);
    if ((*((unsigned int (**)(id *))*v4 + 33))(v4) == 24)
    {
      unint64_t v5 = v4 + 85;
LABEL_10:
      id v6 = *v5;
      goto LABEL_12;
    }
    if ((*((unsigned int (**)(id *))*v4 + 33))(v4) == 26)
    {
      unint64_t v5 = v4 + 25;
      goto LABEL_10;
    }
    if ((*((unsigned int (**)(id *))*v4 + 33))(v4) == 25)
    {
      unint64_t v5 = v4 + 29;
      goto LABEL_10;
    }
    if ((*((unsigned int (**)(id *))*v4 + 33))(v4) == 27)
    {
      unint64_t v5 = v4 + 88;
      goto LABEL_10;
    }
  }
  id v6 = 0;
LABEL_12:
  uint64_t v7 = *(void *)(a1 + 1672);
  if (v7 == *a2) {
    goto LABEL_75;
  }
  if (GEOGetVectorKitARWalkingLabelerLog(void)::onceToken != -1) {
    dispatch_once(&GEOGetVectorKitARWalkingLabelerLog(void)::onceToken, &__block_literal_global_51128);
  }
  uint64_t v8 = (id)GEOGetVectorKitARWalkingLabelerLog(void)::log;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    unint64_t v45 = v8;
    uint64_t v9 = *a2;
    uint64_t v10 = *(void *)(a1 + 1672);
    id v11 = *(id *)(a1 + 1696);
    id v44 = v6;
    id v12 = v11;
    if (v10)
    {
      unsigned int v13 = *(_DWORD *)(v10 + 48);
      if (v9) {
        goto LABEL_18;
      }
    }
    else
    {
      unsigned int v13 = 0;
      if (v9)
      {
LABEL_18:
        unsigned int v14 = *(_DWORD *)(v9 + 48);
        if (v10)
        {
LABEL_19:
          int v15 = *(unsigned __int8 *)(v10 + 821);
          goto LABEL_23;
        }
LABEL_22:
        int v15 = 38;
LABEL_23:
        std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v49);
        if (v9) {
          uint64_t v16 = "Active did label change -";
        }
        else {
          uint64_t v16 = "Active label cleared -";
        }
        if (v9) {
          uint64_t v17 = 25;
        }
        else {
          uint64_t v17 = 22;
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)v16, v17);
        if (v10
          && ((std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)" reason:", 8),
               md::stringFromLabelOutcome((uint64_t)&v48, v15),
               (v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            ? (unint64_t v18 = &v48)
            : (unint64_t v18 = (std::string *)v48.__r_.__value_.__r.__words[0]),
              size_t v19 = strlen((const char *)v18),
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)v18, v19),
              SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0))
        {
          operator delete(v48.__r_.__value_.__l.__data_);
          if (!v9) {
            goto LABEL_43;
          }
        }
        else if (!v9)
        {
          goto LABEL_43;
        }
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)" current:(", 10);
        if (v14)
        {
          std::to_string(&v48, v14);
          if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v20 = &v48;
          }
          else {
            unint64_t v20 = (std::string *)v48.__r_.__value_.__r.__words[0];
          }
        }
        else
        {
          *((unsigned char *)&v48.__r_.__value_.__s + 23) = 7;
          strcpy((char *)&v48, "UNKNOWN");
          unint64_t v20 = &v48;
        }
        size_t v21 = strlen((const char *)v20);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)v20, v21);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)", ", 2);
        id v22 = [v44 description];
        uint64_t v23 = (const char *)[v22 UTF8String];
        size_t v24 = strlen(v23);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)v23, v24);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)")", 1);

        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v48.__r_.__value_.__l.__data_);
          if (!v10) {
            goto LABEL_52;
          }
          goto LABEL_44;
        }
LABEL_43:
        if (!v10) {
          goto LABEL_52;
        }
LABEL_44:
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)" previous:(", 11);
        if (v13)
        {
          std::to_string(&v48, v13);
          if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v25 = &v48;
          }
          else {
            unint64_t v25 = (std::string *)v48.__r_.__value_.__r.__words[0];
          }
        }
        else
        {
          *((unsigned char *)&v48.__r_.__value_.__s + 23) = 7;
          strcpy((char *)&v48, "UNKNOWN");
          unint64_t v25 = &v48;
        }
        size_t v26 = strlen((const char *)v25);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)v25, v26);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)", ", 2);
        id v27 = [v12 description];
        uint64_t v28 = (const char *)[v27 UTF8String];
        size_t v29 = strlen(v28);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)v28, v29);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)")", 1);

        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v48.__r_.__value_.__l.__data_);
        }
LABEL_52:
        if ((v56 & 0x10) != 0)
        {
          unint64_t v32 = v55;
          if (v55 < v52)
          {
            unint64_t v55 = v52;
            unint64_t v32 = v52;
          }
          long long v33 = (const void **)&v51;
        }
        else
        {
          if ((v56 & 8) == 0)
          {
            size_t v30 = 0;
            HIBYTE(v47) = 0;
            uint64_t v31 = __dst;
            goto LABEL_67;
          }
          long long v33 = (const void **)v50;
          unint64_t v32 = v50[2];
        }
        long long v34 = *v33;
        size_t v30 = v32 - (void)*v33;
        if (v30 >= 0x7FFFFFFFFFFFFFF8) {
          abort();
        }
        if (v30 >= 0x17)
        {
          uint64_t v35 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v30 | 7) != 0x17) {
            uint64_t v35 = v30 | 7;
          }
          uint64_t v36 = v35 + 1;
          uint64_t v31 = (void **)operator new(v35 + 1);
          __dst[1] = (void *)v30;
          int64_t v47 = v36 | 0x8000000000000000;
          __dst[0] = v31;
        }
        else
        {
          HIBYTE(v47) = v32 - *(unsigned char *)v33;
          uint64_t v31 = __dst;
          if (!v30) {
            goto LABEL_67;
          }
        }
        memmove(v31, v34, v30);
LABEL_67:
        *((unsigned char *)v31 + v30) = 0;
        v49[0] = *MEMORY[0x1E4FBA418];
        *(void *)((char *)v49 + *(void *)(v49[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
        v49[1] = MEMORY[0x1E4FBA470] + 16;
        if (v54 < 0) {
          operator delete(__p);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1A62391A0](&v57);

        unint64_t v37 = __dst;
        if (v47 < 0) {
          unint64_t v37 = (void **)__dst[0];
        }
        *(_DWORD *)buf = 136315138;
        BOOL v59 = v37;
        _os_log_impl(&dword_1A1780000, v45, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
        if (SHIBYTE(v47) < 0) {
          operator delete(__dst[0]);
        }

        uint64_t v8 = v45;
        goto LABEL_74;
      }
    }
    unsigned int v14 = 0;
    if (v10) {
      goto LABEL_19;
    }
    goto LABEL_22;
  }
LABEL_74:

  uint64_t v7 = *a2;
LABEL_75:
  uint64_t v38 = a2[1];
  if (v38) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1672) = v7;
  unint64_t v39 = *(std::__shared_weak_count **)(a1 + 1680);
  *(void *)(a1 + 1680) = v38;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  id v40 = v6;
  uint8x8_t v41 = v40;
  if (v40) {
    id v42 = v40;
  }
  uint64_t v43 = *(void **)(a1 + 1696);
  *(void *)(a1 + 1696) = v41;
}

void sub_1A27BBAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::ostringstream::~ostringstream((uint64_t)&a21);

  _Unwind_Resume(a1);
}

void std::__hash_table<md::Label *,std::hash<md::Label *>,std::equal_to<md::Label *>,std::allocator<md::Label *>>::__emplace_unique_key_args<md::Label *,md::Label *>(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = v7 ^ (v7 >> 47);
  unint64_t v9 = 0x9DDFEA08EB382D69 * v8;
  unint64_t v10 = *((void *)a1 + 1);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * v8;
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    id v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      unsigned int v13 = (void *)*v12;
      if (v13)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == a2) {
                return;
              }
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_22;
            }
            unsigned int v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == a2) {
              return;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          unsigned int v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_22:
  uint64_t v16 = operator new(0x18uLL);
  void *v16 = 0;
  v16[1] = v9;
  v16[2] = a3;
  float v17 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v18 = a1[8];
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *((void *)a1 + 1);
    }
    if (prime <= v10)
    {
      if (prime >= v10) {
        goto LABEL_59;
      }
      unint64_t v34 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v10 < 3 || (uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        unint64_t v34 = std::__next_prime(v34);
      }
      else
      {
        uint64_t v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2) {
          unint64_t v34 = v36;
        }
      }
      if (prime <= v34) {
        size_t prime = v34;
      }
      if (prime >= v10)
      {
        unint64_t v10 = *((void *)a1 + 1);
LABEL_59:
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v9 >= v10) {
            unint64_t v3 = v9 % v10;
          }
          else {
            unint64_t v3 = v9;
          }
        }
        else
        {
          unint64_t v3 = (v10 - 1) & v9;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        uint64_t v43 = *(void **)a1;
        *(void *)a1 = 0;
        if (v43) {
          operator delete(v43);
        }
        unint64_t v10 = 0;
        *((void *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v23 = operator new(8 * prime);
    size_t v24 = *(void **)a1;
    *(void *)a1 = v23;
    if (v24) {
      operator delete(v24);
    }
    uint64_t v25 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v25++) = 0;
    while (prime != v25);
    id v27 = (uint64_t *)(a1 + 4);
    size_t v26 = (void *)*((void *)a1 + 2);
    if (!v26)
    {
LABEL_58:
      unint64_t v10 = prime;
      goto LABEL_59;
    }
    size_t v28 = v26[1];
    size_t v29 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v30 = v28 & v29;
      *(void *)(*(void *)a1 + 8 * v30) = v27;
      for (uint64_t i = (void *)*v26; *v26; uint64_t i = (void *)*v26)
      {
        size_t v32 = i[1] & v29;
        if (v32 == v30)
        {
          size_t v26 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v32))
        {
          *size_t v26 = *i;
          uint64_t v33 = 8 * v32;
          void *i = **(void **)(*(void *)a1 + v33);
          **(void **)(*(void *)a1 + v33) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v32) = v26;
          size_t v26 = i;
          size_t v30 = v32;
        }
      }
      goto LABEL_58;
    }
    if (v28 >= prime) {
      v28 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v28) = v27;
    unint64_t v37 = (void *)*v26;
    if (!*v26) {
      goto LABEL_58;
    }
    while (1)
    {
      size_t v39 = v37[1];
      if (v39 >= prime) {
        v39 %= prime;
      }
      if (v39 != v28)
      {
        if (!*(void *)(*(void *)a1 + 8 * v39))
        {
          *(void *)(*(void *)a1 + 8 * v39) = v26;
          goto LABEL_63;
        }
        *size_t v26 = *v37;
        uint64_t v38 = 8 * v39;
        *unint64_t v37 = **(void **)(*(void *)a1 + v38);
        **(void **)(*(void *)a1 + v38) = v37;
        unint64_t v37 = v26;
      }
      size_t v39 = v28;
LABEL_63:
      size_t v26 = v37;
      unint64_t v37 = (void *)*v37;
      size_t v28 = v39;
      if (!v37) {
        goto LABEL_58;
      }
    }
  }
LABEL_72:
  id v40 = *(void **)a1;
  uint8x8_t v41 = *(void **)(*(void *)a1 + 8 * v3);
  if (v41)
  {
    void *v16 = *v41;
LABEL_80:
    *uint8x8_t v41 = v16;
    goto LABEL_81;
  }
  void *v16 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v16;
  v40[v3] = a1 + 4;
  if (*v16)
  {
    unint64_t v42 = *(void *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v42 >= v10) {
        v42 %= v10;
      }
    }
    else
    {
      v42 &= v10 - 1;
    }
    uint8x8_t v41 = (void *)(*(void *)a1 + 8 * v42);
    goto LABEL_80;
  }
LABEL_81:
  ++*((void *)a1 + 3);
}

void sub_1A27BBFE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>,std::__unordered_map_hasher<md::Label *,std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>,std::hash<md::Label *>,std::equal_to<md::Label *>,true>,std::__unordered_map_equal<md::Label *,std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>,std::equal_to<md::Label *>,std::hash<md::Label *>,true>,std::allocator<std::__hash_value_type<md::Label *,md::ARWalkingBecameVisibleDebugData>>>::__emplace_unique_key_args<md::Label *,std::piecewise_construct_t const&,std::tuple<md::Label *&&>,std::tuple<>>(float *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint8x8_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      id v12 = (char *)*v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = *((void *)v12 + 1);
            if (v14 == v8)
            {
              if (*((void *)v12 + 2) == a2) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_22;
            }
            id v12 = *(char **)v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v13 == v8)
          {
            if (*((void *)v12 + 2) == a2) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          id v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  id v12 = (char *)operator new(0x40uLL);
  *(void *)id v12 = 0;
  *((void *)v12 + 1) = v8;
  *((void *)v12 + 2) = *a3;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *((void *)v12 + 7) = 0;
  float v15 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *((void *)a1 + 1);
    }
    if (prime <= v9)
    {
      if (prime >= v9) {
        goto LABEL_59;
      }
      unint64_t v32 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (prime <= v32) {
        size_t prime = v32;
      }
      if (prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
LABEL_59:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v3 = v8 % v9;
          }
          else {
            unint64_t v3 = v8;
          }
        }
        else
        {
          unint64_t v3 = (v9 - 1) & v8;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        unint64_t v42 = *(void **)a1;
        *(void *)a1 = 0;
        if (v42) {
          operator delete(v42);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
        goto LABEL_59;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v21 = operator new(8 * prime);
    id v22 = *(void **)a1;
    *(void *)a1 = v21;
    if (v22) {
      operator delete(v22);
    }
    uint64_t v23 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v23++) = 0;
    while (prime != v23);
    uint64_t v25 = (uint64_t *)(a1 + 4);
    size_t v24 = (void *)*((void *)a1 + 2);
    if (!v24)
    {
LABEL_58:
      unint64_t v9 = prime;
      goto LABEL_59;
    }
    size_t v26 = v24[1];
    size_t v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v28 = v26 & v27;
      *(void *)(*(void *)a1 + 8 * v28) = v25;
      for (uint64_t i = (void *)*v24; *v24; uint64_t i = (void *)*v24)
      {
        size_t v30 = i[1] & v27;
        if (v30 == v28)
        {
          size_t v24 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v30))
        {
          *size_t v24 = *i;
          uint64_t v31 = 8 * v30;
          void *i = **(void **)(*(void *)a1 + v31);
          **(void **)(*(void *)a1 + v31) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v30) = v24;
          size_t v24 = i;
          size_t v28 = v30;
        }
      }
      goto LABEL_58;
    }
    if (v26 >= prime) {
      v26 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v26) = v25;
    uint8x8_t v35 = (void *)*v24;
    if (!*v24) {
      goto LABEL_58;
    }
    while (1)
    {
      size_t v37 = v35[1];
      if (v37 >= prime) {
        v37 %= prime;
      }
      if (v37 != v26)
      {
        if (!*(void *)(*(void *)a1 + 8 * v37))
        {
          *(void *)(*(void *)a1 + 8 * v37) = v24;
          goto LABEL_63;
        }
        *size_t v24 = *v35;
        uint64_t v36 = 8 * v37;
        *uint8x8_t v35 = **(void **)(*(void *)a1 + v36);
        **(void **)(*(void *)a1 + v36) = v35;
        uint8x8_t v35 = v24;
      }
      size_t v37 = v26;
LABEL_63:
      size_t v24 = v35;
      uint8x8_t v35 = (void *)*v35;
      size_t v26 = v37;
      if (!v35) {
        goto LABEL_58;
      }
    }
  }
LABEL_72:
  uint64_t v38 = *(void **)a1;
  size_t v39 = *(void **)(*(void *)a1 + 8 * v3);
  if (v39)
  {
    *(void *)id v12 = *v39;
LABEL_80:
    *size_t v39 = v12;
    goto LABEL_81;
  }
  *(void *)id v12 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v12;
  v38[v3] = a1 + 4;
  if (*(void *)v12)
  {
    unint64_t v40 = *(void *)(*(void *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v40 >= v9) {
        v40 %= v9;
      }
    }
    else
    {
      v40 &= v9 - 1;
    }
    size_t v39 = (void *)(*(void *)a1 + 8 * v40);
    goto LABEL_80;
  }
LABEL_81:
  ++*((void *)a1 + 3);
  return v12;
}

void sub_1A27BC48C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_0::operator()(uint64_t *a1, md::Label **a2)
{
  uint64_t v5 = *a1;
  md::Label::layoutForStaging(*a2, *(void *)(*a1 + 24), *(md::LabelPool **)(*a1 + 48), (unsigned char *)a1[1]);
  unint64_t v6 = *a2;
  if (!*((unsigned char *)*a2 + 1290)) {
    return 0;
  }
  if ((*(unsigned int (**)(void))(**((void **)v6 + 1) + 264))(*((void *)v6 + 1)) == 25
    || (*(unsigned int (**)(void))(**((void **)v6 + 1) + 264))(*((void *)v6 + 1)) == 27
    || (*(unsigned int (**)(void))(**((void **)v6 + 1) + 264))(*((void *)v6 + 1)) == 24
    || (*(unsigned int (**)(void))(**((void **)v6 + 1) + 264))(*((void *)v6 + 1)) == 26)
  {
    unint64_t v7 = *a2;
    uint64_t v8 = a1[2];
    unint64_t v9 = (float *)a1[3];
    double v10 = *(double *)v8;
    double v11 = *((double *)*a2 + 74);
    float64x2_t v12 = *(float64x2_t *)(v8 + 8);
    double v13 = *((double *)*a2 + 28);
    unint64_t v14 = (unint64_t)*a2 >> 32;
    unint64_t v15 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v14);
    unint64_t v16 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v14 ^ (v15 >> 47) ^ v15)) ^ ((0x9DDFEA08EB382D69 * (v14 ^ (v15 >> 47) ^ v15)) >> 47));
    unint64_t v17 = *((void *)v9 + 1);
    float64x2_t v60 = *(float64x2_t *)((char *)*a2 + 600);
    float64x2_t v61 = v12;
    if (v17)
    {
      uint8x8_t v18 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
      v18.i16[0] = vaddlv_u8(v18);
      if (v18.u32[0] > 1uLL)
      {
        unint64_t v2 = 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v14 ^ (v15 >> 47) ^ v15)) ^ ((0x9DDFEA08EB382D69 * (v14 ^ (v15 >> 47) ^ v15)) >> 47));
        if (v16 >= v17) {
          unint64_t v2 = v16 % v17;
        }
      }
      else
      {
        unint64_t v2 = v16 & (v17 - 1);
      }
      unint64_t v19 = *(void ***)(*(void *)v9 + 8 * v2);
      if (v19)
      {
        unint64_t v20 = (double *)*v19;
        if (*v19)
        {
          if (v18.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v22 = *((void *)v20 + 1);
              if (v22 == v16)
              {
                if (*((md::Label **)v20 + 2) == v7) {
                  goto LABEL_95;
                }
              }
              else if ((v22 & (v17 - 1)) != v2)
              {
                goto LABEL_27;
              }
              unint64_t v20 = *(double **)v20;
              if (!v20) {
                goto LABEL_27;
              }
            }
          }
          do
          {
            unint64_t v21 = *((void *)v20 + 1);
            if (v21 == v16)
            {
              if (*((md::Label **)v20 + 2) == v7) {
                goto LABEL_95;
              }
            }
            else
            {
              if (v21 >= v17) {
                v21 %= v17;
              }
              if (v21 != v2) {
                break;
              }
            }
            unint64_t v20 = *(double **)v20;
          }
          while (v20);
        }
      }
    }
LABEL_27:
    unint64_t v20 = (double *)operator new(0x20uLL);
    *unint64_t v20 = 0.0;
    *((void *)v20 + 1) = v16;
    *((void *)v20 + 2) = v7;
    float v23 = (float)(unint64_t)(*((void *)v9 + 3) + 1);
    float v24 = v9[8];
    if (v17 && (float)(v24 * (float)v17) >= v23)
    {
LABEL_85:
      std::string v48 = *(void **)v9;
      BOOL v49 = *(double ***)(*(void *)v9 + 8 * v2);
      if (v49)
      {
        *(void *)unint64_t v20 = *v49;
      }
      else
      {
        *unint64_t v20 = *((double *)v9 + 2);
        *((void *)v9 + 2) = v20;
        v48[v2] = v9 + 4;
        if (!*(void *)v20) {
          goto LABEL_94;
        }
        unint64_t v50 = *(void *)(*(void *)v20 + 8);
        if ((v17 & (v17 - 1)) != 0)
        {
          if (v50 >= v17) {
            v50 %= v17;
          }
        }
        else
        {
          v50 &= v17 - 1;
        }
        BOOL v49 = (double **)(*(void *)v9 + 8 * v50);
      }
      *BOOL v49 = v20;
LABEL_94:
      ++*((void *)v9 + 3);
      unint64_t v7 = *a2;
LABEL_95:
      float64x2_t v51 = vsubq_f64(v61, v60);
      float64x2_t v52 = vmulq_f64(v51, v51);
      double v53 = (v52.f64[0] + (v10 - v11) * (v10 - v11) + v52.f64[1]) / (v13 * v13);
      v20[3] = v53;
      v52.f64[0] = 1.0 / *((double *)v7 + 28);
      double v54 = fmax(*(double *)(v5 + 776), v52.f64[0] * *((float *)v7 + 196));
      v52.f64[0] = fmin(v52.f64[0] * *((float *)v7 + 197), *(double *)(v5 + 856));
      double v55 = v52.f64[0] * v52.f64[0];
      if (v53 >= v54 * v54 && v53 <= v55) {
        return 1;
      }
      uint64_t v57 = *((void *)v7 + 3);
      if (v57
        && ((*(unsigned int (**)(void))(**((void **)v7 + 1) + 264))(*((void *)v7 + 1)) == 26
         || (*(unsigned int (**)(void))(**((void **)*a2 + 1) + 264))(*((void *)*a2 + 1)) == 24))
      {
        uint64_t v58 = (*(uint64_t (**)(uint64_t, md::Label *))(*(void *)v57 + 56))(v57, *a2);
        char v46 = 3;
        if (v58) {
          md::Label::updateStateMachineForStaging(v58, 2, 3);
        }
      }
      else
      {
        char v46 = 3;
      }
      goto LABEL_106;
    }
    BOOL v25 = 1;
    if (v17 >= 3) {
      BOOL v25 = (v17 & (v17 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v17);
    unint64_t v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v17 = *((void *)v9 + 1);
    }
    if (prime <= v17)
    {
      if (prime >= v17) {
        goto LABEL_80;
      }
      unint64_t v40 = vcvtps_u32_f32((float)*((unint64_t *)v9 + 3) / v9[8]);
      if (v17 < 3 || (uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)v17), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        unint64_t v40 = std::__next_prime(v40);
      }
      else
      {
        uint64_t v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2) {
          unint64_t v40 = v42;
        }
      }
      if (prime <= v40) {
        size_t prime = v40;
      }
      if (prime >= v17) {
        goto LABEL_80;
      }
      if (!prime)
      {
        int64_t v47 = *(void **)v9;
        *(void *)unint64_t v9 = 0;
        if (v47) {
          operator delete(v47);
        }
        *((void *)v9 + 1) = 0;
        goto LABEL_80;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    size_t v29 = operator new(8 * prime);
    size_t v30 = *(void **)v9;
    *(void *)unint64_t v9 = v29;
    if (v30) {
      operator delete(v30);
    }
    uint64_t v31 = 0;
    *((void *)v9 + 1) = prime;
    do
      *(void *)(*(void *)v9 + 8 * v31++) = 0;
    while (prime != v31);
    uint8x8_t v33 = (uint64_t *)(v9 + 4);
    unint64_t v32 = (void *)*((void *)v9 + 2);
    if (!v32)
    {
LABEL_80:
      unint64_t v17 = *((void *)v9 + 1);
      if ((v17 & (v17 - 1)) != 0)
      {
        if (v16 >= v17) {
          unint64_t v2 = v16 % v17;
        }
        else {
          unint64_t v2 = v16;
        }
      }
      else
      {
        unint64_t v2 = (v17 - 1) & v16;
      }
      goto LABEL_85;
    }
    size_t v34 = v32[1];
    size_t v35 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v36 = v34 & v35;
      *(void *)(*(void *)v9 + 8 * v36) = v33;
      while (1)
      {
        size_t v37 = (void *)*v32;
        if (!*v32) {
          break;
        }
        size_t v38 = v37[1] & v35;
        if (v38 == v36)
        {
          unint64_t v32 = (void *)*v32;
        }
        else if (*(void *)(*(void *)v9 + 8 * v38))
        {
          *unint64_t v32 = *v37;
          uint64_t v39 = 8 * v38;
          *size_t v37 = **(void **)(*(void *)v9 + v39);
          **(void **)(*(void *)v9 + v39) = v37;
        }
        else
        {
          *(void *)(*(void *)v9 + 8 * v38) = v32;
          unint64_t v32 = v37;
          size_t v36 = v38;
        }
      }
      goto LABEL_80;
    }
    if (v34 >= prime) {
      v34 %= prime;
    }
    *(void *)(*(void *)v9 + 8 * v34) = v33;
    uint64_t v43 = (void *)*v32;
    if (!*v32) {
      goto LABEL_80;
    }
    while (1)
    {
      size_t v45 = v43[1];
      if (v45 >= prime) {
        v45 %= prime;
      }
      if (v45 != v34)
      {
        if (!*(void *)(*(void *)v9 + 8 * v45))
        {
          *(void *)(*(void *)v9 + 8 * v45) = v32;
          goto LABEL_65;
        }
        *unint64_t v32 = *v43;
        uint64_t v44 = 8 * v45;
        *uint64_t v43 = **(void **)(*(void *)v9 + v44);
        **(void **)(*(void *)v9 + v44) = v43;
        uint64_t v43 = v32;
      }
      size_t v45 = v34;
LABEL_65:
      unint64_t v32 = v43;
      uint64_t v43 = (void *)*v43;
      size_t v34 = v45;
      if (!v43) {
        goto LABEL_80;
      }
    }
  }
  char v46 = 29;
LABEL_106:
  md::Label::updateStateMachineForStaging((uint64_t)*a2, 2, v46);
  return 0;
}

void sub_1A27BCBA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
void sub_1A27BDA80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v14)
  {
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *a3;
  if ((*(unsigned int (**)(void))(**(void **)(*a2 + 8) + 264))(*(void *)(*a2 + 8)) == 25
    || (*(unsigned int (**)(void))(**(void **)(v6 + 8) + 264))(*(void *)(v6 + 8)) == 27
    || (*(unsigned int (**)(void))(**(void **)(v7 + 8) + 264))(*(void *)(v7 + 8)) == 25
    || (*(unsigned int (**)(void))(**(void **)(v7 + 8) + 264))(*(void *)(v7 + 8)) == 27)
  {
    if (((*(unsigned int (**)(void))(**(void **)(v6 + 8) + 264))(*(void *)(v6 + 8)) == 25
       || (*(unsigned int (**)(void))(**(void **)(v6 + 8) + 264))(*(void *)(v6 + 8)) == 27)
      && ((*(unsigned int (**)(void))(**(void **)(v7 + 8) + 264))(*(void *)(v7 + 8)) == 25
       || (*(unsigned int (**)(void))(**(void **)(v7 + 8) + 264))(*(void *)(v7 + 8)) == 27))
    {
      return *(void *)(v6 + 8) < *(void *)(v7 + 8);
    }
    if ((*(unsigned int (**)(void))(**(void **)(v6 + 8) + 264))(*(void *)(v6 + 8)) == 25) {
      return 1;
    }
    return (*(unsigned int (**)(void))(**(void **)(v6 + 8) + 264))(*(void *)(v6 + 8)) == 27;
  }
  int v11 = (*(uint64_t (**)(void))(**(void **)(v6 + 8) + 264))(*(void *)(v6 + 8));
  BOOL v8 = v11 == 24;
  if ((v11 == 24) != ((*(unsigned int (**)(void))(**(void **)(v7 + 8) + 264))() == 24)) {
    return v8;
  }
  float64x2_t v12 = (*(void (**)(void))(**(void **)(v6 + 8) + 208))(*(void *)(v6 + 8));
  unint64_t v13 = [v12 intraFeaturePriority];

  uint64_t v14 = (*(void (**)(void))(**(void **)(v7 + 8) + 208))(*(void *)(v7 + 8));
  unint64_t v15 = [v14 intraFeaturePriority];

  if (v13 != v15) {
    return v13 < v15;
  }
  uint64_t v16 = (*(uint64_t (**)(void, unint64_t))(**(void **)(v6 + 8) + 304))(*(void *)(v6 + 8), *a2 + 48);
  char v18 = v17;
  uint64_t v19 = (*(uint64_t (**)(void))(**(void **)(v7 + 8) + 304))();
  if (v18
    && v20
    && (v16 != v19 || vabds_f32(*((float *)&v16 + 1), *((float *)&v19 + 1)) >= 0.00000011921))
  {
    if (v11 != 24
      && ((v28 = *(unsigned int **)a1, unsigned int v29 = **(_DWORD **)a1, v29 < v16)
       || v29 == v16 && *((float *)v28 + 1) <= *((float *)&v16 + 1))
      && (v29 < v19 || v29 == v19 && *((float *)v28 + 1) <= *((float *)&v19 + 1)))
    {
      if (v16 < v19) {
        return 1;
      }
      return *((float *)&v16 + 1) < *((float *)&v19 + 1) && v16 == v19;
    }
    else
    {
      if (v16 > v19) {
        return 1;
      }
      return *((float *)&v16 + 1) > *((float *)&v19 + 1) && v16 == v19;
    }
  }
  unint64_t v21 = *(void **)(a1 + 8);
  unint64_t v22 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v21, *a2);
  if (!v22) {
    return 0;
  }
  float v23 = v22;
  long long v24 = (double *)std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v21, *a3);
  int v25 = (*(uint64_t (**)(void))(**(void **)(v6 + 8) + 264))(*(void *)(v6 + 8));
  double v26 = v23[3];
  double v27 = v24[3];
  if (v25 == 24) {
    return v26 > v27;
  }
  else {
    return v26 < v27;
  }
}

void sub_1A27BE0BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  char v8 = md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a4, a2, a1);
  uint64_t result = md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a4, a3, a2);
  if (v8)
  {
    unint64_t v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
      int v11 = a3 + 1;
      float64x2_t v12 = a1 + 1;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      unint64_t v17 = a1[1];
      a1[1] = a2[1];
      a2[1] = v17;
      uint64_t result = md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a4, a3, a2);
      if (!result) {
        return result;
      }
      unint64_t v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      int v11 = a3 + 1;
      float64x2_t v12 = a2 + 1;
    }
    unint64_t v15 = v11;
    goto LABEL_10;
  }
  if (result)
  {
    unint64_t v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    unint64_t v15 = a2 + 1;
    unint64_t v14 = a2[1];
    a2[1] = a3[1];
    a3[1] = v14;
    uint64_t result = md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a4, a2, a1);
    if (result)
    {
      unint64_t v16 = *a1;
      *a1 = *a2;
      float64x2_t v12 = a1 + 1;
      *a2 = v16;
LABEL_10:
      unint64_t v19 = *v12;
      unint64_t *v12 = *v15;
      *unint64_t v15 = v19;
    }
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *>(a1, a2, a3, a5);
  uint64_t result = md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a5, a4, a3);
  if (result)
  {
    unint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    unint64_t v12 = a3[1];
    a3[1] = a4[1];
    a4[1] = v12;
    uint64_t result = md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a5, a3, a2);
    if (result)
    {
      unint64_t v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      unint64_t v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      uint64_t result = md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a5, a2, a1);
      if (result)
      {
        unint64_t v15 = *a1;
        *a1 = *a2;
        *a2 = v15;
        unint64_t v16 = a1[1];
        a1[1] = a2[1];
        a2[1] = v16;
      }
    }
  }
  return result;
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *,0>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, uint64_t a6)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *>(a1, a2, a3, a4, a6);
  uint64_t result = md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a6, a5, a4);
  if (result)
  {
    unint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    unint64_t v14 = a4[1];
    a4[1] = a5[1];
    a5[1] = v14;
    uint64_t result = md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a6, a4, a3);
    if (result)
    {
      unint64_t v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      unint64_t v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      uint64_t result = md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a6, a3, a2);
      if (result)
      {
        unint64_t v17 = *a2;
        *a2 = *a3;
        *a3 = v17;
        unint64_t v18 = a2[1];
        a2[1] = a3[1];
        a3[1] = v18;
        uint64_t result = md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a6, a2, a1);
        if (result)
        {
          unint64_t v19 = *a1;
          *a1 = *a2;
          *a2 = v19;
          unint64_t v20 = a1[1];
          a1[1] = a2[1];
          a2[1] = v20;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (!md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, a2 - 2, a1)) {
        return 1;
      }
      unint64_t v8 = *a1;
      *a1 = *(a2 - 2);
      *(a2 - 2) = v8;
      unint64_t v9 = a1[1];
      a1[1] = *(a2 - 1);
      *(a2 - 1) = v9;
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *,0>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      unint64_t v10 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4 &,std::shared_ptr<md::Label> *>(a1, a1 + 2, a1 + 4, a3);
      unint64_t v11 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if (md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, v11, v10))
    {
      long long v23 = *(_OWORD *)v11;
      unint64_t *v11 = 0;
      v11[1] = 0;
      uint64_t v14 = v12;
      while (1)
      {
        unint64_t v15 = (char *)a1 + v14;
        long long v16 = *(_OWORD *)((char *)a1 + v14 + 32);
        *((void *)v15 + 4) = 0;
        *((void *)v15 + 5) = 0;
        unint64_t v17 = *(std::__shared_weak_count **)((char *)a1 + v14 + 56);
        *((_OWORD *)v15 + 3) = v16;
        if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        if (v14 == -32) {
          break;
        }
        char v18 = md::ARWalkingLabeler::layoutLabelsForStaging(void)::$_4::operator()(a3, (unint64_t *)&v23, (unint64_t *)((char *)a1 + v14 + 16));
        v14 -= 16;
        if ((v18 & 1) == 0)
        {
          uint64_t v19 = (uint64_t)a1 + v14 + 48;
          goto LABEL_17;
        }
      }
      uint64_t v19 = (uint64_t)a1;
LABEL_17:
      long long v20 = v23;
      long long v23 = 0uLL;
      unint64_t v21 = *(std::__shared_weak_count **)(v19 + 8);
      *(_OWORD *)uint64_t v19 = v20;
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      unint64_t v22 = (std::__shared_weak_count *)*((void *)&v23 + 1);
      if (*((void *)&v23 + 1))
      {
        if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v23 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      if (++v13 == 8) {
        return v11 + 2 == a2;
      }
    }
    unint64_t v10 = v11;
    v12 += 16;
    v11 += 2;
    if (v11 == a2) {
      return 1;
    }
  }
}

void sub_1A27BE6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__introsort<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
BOOL md::ARWalkingLabeler::doesStagingLabelIntersectWithWorld(md::ARWalkingLabeler *this, md::Label *a2, int a3, md::Label *a4)
{
  BOOL v5 = this;
  uint64_t v216 = *MEMORY[0x1E4F143B8];
  unint64_t v178 = v182;
  unint64_t v179 = v182;
  unint64_t v180 = v182;
  unint64_t v181 = 2;
  uint64_t v6 = &v176;
  long long v176 = a2;
  unint64_t v7 = (void **)&v177;
  if (a4)
  {
    unint64_t v7 = &v178;
    uint64_t v177 = a4;
  }
  unint64_t v8 = (uint64_t *)((char *)this + 1808);
  unint64_t v173 = (void *)((char *)this + 1832);
  do
  {
    unint64_t v12 = (unint64_t)*v6;
    long long v203 = *((_OWORD *)*v6 + 37);
    *(void *)&long long v204 = *(void *)(v12 + 608);
    if (!a3) {
      goto LABEL_19;
    }
    int v13 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(v173, v12);
    if (!v13) {
      goto LABEL_15;
    }
    uint64_t v14 = v13;
    long long v15 = (uint64_t *)v13[3];
    uint64_t v16 = (uint64_t *)operator new(0x38uLL);
    uint64_t v17 = v16;
    long long v18 = *((_OWORD *)v15 + 1);
    long long v19 = *((_OWORD *)v15 + 2);
    v16[6] = v15[6];
    *((_OWORD *)v16 + 1) = v18;
    *((_OWORD *)v16 + 2) = v19;
    uint64_t v20 = *((void *)v5 + 226);
    *(void *)(v20 + 8) = v16;
    *((void *)v5 + 226) = v16;
    uint64_t *v16 = v20;
    v16[1] = (uint64_t)v8;
    uint64_t v21 = (uint64_t *)*((void *)v5 + 234);
    if (v21 == v15)
    {
      uint64_t v22 = (uint64_t *)v15[1];
    }
    else
    {
      uint64_t v22 = v16;
      if (v21 != v8) {
        goto LABEL_13;
      }
    }
    *((void *)v5 + 234) = v22;
LABEL_13:
    uint64_t v23 = *v15;
    *(void *)(v23 + 8) = v15[1];
    *(void *)v15[1] = v23;
    operator delete(v15);
    v14[3] = v17;
    if (v17 != v8)
    {
      long long v203 = *(_OWORD *)(v17 + 3);
      *(void *)&long long v204 = v17[5];
      goto LABEL_19;
    }
LABEL_15:
    unint64_t v24 = (void *)*((void *)v5 + 215);
    if (v24)
    {
      ++*((_DWORD *)v5 + 450);
      md::ARWorldIntersector::resolveWorldPoint(v24, &v203);
    }
    else
    {
      uint64_t v26 = *((void *)&v203 + 1);
      uint64_t v25 = v203;
      uint64_t v27 = v204;
    }
    *(void *)&long long v203 = v25;
    *((void *)&v203 + 1) = v26;
    *(void *)&long long v204 = v27;
    long long v200 = v203;
    uint64_t v201 = v27;
    *(void *)&double v199 = a2;
    uint64_t v202 = 0;
    geo::MarkedLRUCache<md::Label *,gm::Matrix<double,3,1>,std::hash<md::Label *>,std::equal_to<md::Label *>>::insert(v8, (uint64_t)&v199);
LABEL_19:
    size_t v28 = v178;
    unint64_t v9 = v179;
    unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((v179 - (unsigned char *)v178) >> 3);
    if (v181 < v29 + 1)
    {
      unint64_t v30 = v180;
      unint64_t v31 = (1 << -(char)__clz(v181 + 1));
      if (v181 >= 0xFFFFFFFFFFFFFFFELL) {
        unint64_t v31 = 1;
      }
      if (v31 <= v29 + 1) {
        unint64_t v32 = v29 + 1;
      }
      else {
        unint64_t v32 = v31;
      }
      uint8x8_t v33 = (char *)malloc_type_malloc(24 * v32, 0x1000040504FFAC1uLL);
      uint64_t v34 = v33;
      uint64_t v35 = (char *)v178;
      unint64_t v36 = v179;
      if (v178 != v179)
      {
        uint64_t v37 = v33;
        do
        {
          long long v38 = *(_OWORD *)v35;
          *((void *)v37 + 2) = *((void *)v35 + 2);
          *(_OWORD *)uint64_t v37 = v38;
          v37 += 24;
          v35 += 24;
        }
        while (v35 != v36);
      }
      if (v28 != v30) {
        free(v178);
      }
      unint64_t v9 = &v34[24 * v29];
      unint64_t v178 = v34;
      unint64_t v179 = v9;
      unint64_t v181 = v32;
      BOOL v5 = this;
    }
    *(_OWORD *)unint64_t v9 = v203;
    *((void *)v9 + 2) = v204;
    uint64_t v10 = (double *)v179;
    uint64_t v11 = v179 + 24;
    v179 += 24;
    ++v6;
  }
  while (v6 != (md::Label **)v7);
  uint64_t v39 = (double *)v178;
  if (v178 == v11)
  {
LABEL_194:
    unsigned int v163 = 2;
    goto LABEL_196;
  }
  unint64_t v40 = (char *)v5 + 1736;
  int v170 = (char *)v5 + 1736;
  while (2)
  {
    unint64_t v41 = (void *)*((void *)v5 + 215);
    if (!v41 || !(*(void *)v40 | *((void *)v40 + 1) | *((void *)v40 + 2))) {
      goto LABEL_33;
    }
    ++*((_DWORD *)v5 + 449);
    if (*((unsigned char *)v5 + 1784))
    {
      double v42 = *((double *)v5 + 220);
      double v43 = *((double *)v5 + 221);
      double v44 = *((double *)v5 + 222);
    }
    else
    {
      ++*((_DWORD *)v5 + 450);
      md::ARWorldIntersector::resolveWorldPoint(v41, (long long *)v40);
      int v45 = *((unsigned __int8 *)v5 + 1784);
      *((double *)v5 + 220) = v42;
      *((double *)v5 + 221) = v43;
      *((double *)v5 + 222) = v44;
      if (!v45) {
        *((unsigned char *)v5 + 1784) = 1;
      }
    }
    double v46 = *v39 - v42;
    double v47 = v39[1] - v43;
    double v48 = v39[2] - v44;
    double v183 = v42;
    double v184 = v43;
    double v185 = v44;
    double v186 = v46;
    double v187 = v47;
    double v188 = v48;
    if (*((unsigned char *)v5 + 1792)) {
      goto LABEL_32;
    }
    uint64_t v49 = *((void *)this + 215);
    uint64_t v171 = v39;
    if (!*(unsigned char *)(v49 + 128)) {
      goto LABEL_185;
    }
    unint64_t v50 = *(void *)(v49 + 16);
    if (v50)
    {
      if (v50 >> 60) {
        abort();
      }
      uint64_t v51 = *((void *)this + 215);
      uint64_t v52 = (double *)operator new(16 * v50);
      unint64_t v53 = &v52[2 * v50];
      uint64_t v49 = v51;
    }
    else
    {
      unint64_t v53 = 0;
      uint64_t v52 = 0;
    }
    unint64_t v54 = (void *)(v49 + 8);
    BOOL v55 = *(void **)v49;
    uint64_t v174 = v49;
    uint64_t v56 = v52;
    if (*(void *)v49 != v49 + 8)
    {
LABEL_53:
      unint64_t v61 = *(void **)(v55[4] + 784);
      int8x8_t v62 = (int8x8_t)v61[1];
      if (!*(void *)&v62) {
        goto LABEL_76;
      }
      uint8x8_t v63 = (uint8x8_t)vcnt_s8(v62);
      v63.i16[0] = vaddlv_u8(v63);
      if (v63.u32[0] > 1uLL)
      {
        uint64_t v64 = 0x64A448A5CD5D38DBLL;
        if (*(void *)&v62 <= 0x64A448A5CD5D38DBuLL) {
          uint64_t v64 = 0x64A448A5CD5D38DBuLL % *(void *)&v62;
        }
      }
      else
      {
        uint64_t v64 = (*(void *)&v62 - 1) & 0x64A448A5CD5D38DBLL;
      }
      BOOL v65 = *(void **)(*v61 + 8 * v64);
      if (!v65) {
        goto LABEL_76;
      }
      uint64_t v66 = (void *)*v65;
      if (!v66) {
        goto LABEL_76;
      }
      if (v63.u32[0] < 2uLL)
      {
        uint64_t v67 = *(void *)&v62 - 1;
        while (1)
        {
          uint64_t v69 = v66[1];
          if (v69 == 0x64A448A5CD5D38DBLL)
          {
            if (v66[2] == 0x64A448A5CD5D38DBLL) {
              goto LABEL_74;
            }
          }
          else if ((v69 & v67) != v64)
          {
            goto LABEL_76;
          }
          uint64_t v66 = (void *)*v66;
          if (!v66) {
            goto LABEL_76;
          }
        }
      }
      while (1)
      {
        unint64_t v68 = v66[1];
        if (v68 == 0x64A448A5CD5D38DBLL)
        {
          if (v66[2] == 0x64A448A5CD5D38DBLL)
          {
LABEL_74:
            uint64_t v70 = v66[5];
            if (*(void *)(v70 + 8) == 0x64A448A5CD5D38DBLL)
            {
              uint64_t v71 = *(void *)(v70 + 32);
              goto LABEL_77;
            }
LABEL_76:
            uint64_t v71 = 0;
LABEL_77:
            double v199 = 0.0;
            *(void *)&long long v203 = 0;
            if (!gm::Ray<double,3>::segmentIntersectsBox(&v183, (double *)(v71 + 128), &v199, (double *)&v203, 1.0))
            {
LABEL_80:
              BOOL v73 = (void *)v55[1];
              if (!v73) {
                goto LABEL_98;
              }
              do
              {
LABEL_81:
                uint64_t v74 = v73;
                BOOL v73 = (void *)*v73;
              }
              while (v73);
              goto LABEL_52;
            }
            uint64_t v72 = v55[4];
            if (v56 < v53)
            {
              *(void *)uint64_t v56 = v72;
              v56[1] = v199;
              v56 += 2;
              goto LABEL_80;
            }
            uint64_t v75 = ((char *)v56 - (char *)v52) >> 4;
            unint64_t v76 = v75 + 1;
            if ((unint64_t)(v75 + 1) >> 60) {
              abort();
            }
            if (v53 - v52 > v76) {
              unint64_t v76 = v53 - v52;
            }
            if ((unint64_t)((char *)v53 - (char *)v52) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v77 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v77 = v76;
            }
            if (v77 >> 60) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            long long v78 = (char *)operator new(16 * v77);
            long long v79 = (double *)&v78[16 * v75];
            *(void *)long long v79 = v72;
            v79[1] = v199;
            if (v56 == v52)
            {
              uint64_t v81 = &v78[16 * v75];
            }
            else
            {
              uint64_t v80 = &v78[16 * v75];
              do
              {
                uint64_t v81 = v80 - 16;
                *((_OWORD *)v80 - 1) = *((_OWORD *)v56 - 1);
                v56 -= 2;
                v80 -= 16;
              }
              while (v56 != v52);
            }
            unint64_t v53 = (double *)&v78[16 * v77];
            uint64_t v56 = v79 + 2;
            if (v52) {
              operator delete(v52);
            }
            uint64_t v52 = (double *)v81;
            BOOL v73 = (void *)v55[1];
            if (v73) {
              goto LABEL_81;
            }
            do
            {
LABEL_98:
              uint64_t v74 = (void *)v55[2];
              BOOL v112 = *v74 == (void)v55;
              BOOL v55 = v74;
            }
            while (!v112);
LABEL_52:
            BOOL v55 = v74;
            if (v74 == v54) {
              break;
            }
            goto LABEL_53;
          }
        }
        else
        {
          if (v68 >= *(void *)&v62) {
            v68 %= *(void *)&v62;
          }
          if (v68 != v64) {
            goto LABEL_76;
          }
        }
        uint64_t v66 = (void *)*v66;
        if (!v66) {
          goto LABEL_76;
        }
      }
    }
    unint64_t v57 = 126 - 2 * __clz(((char *)v56 - (char *)v52) >> 4);
    if (v56 == v52) {
      uint64_t v58 = 0;
    }
    else {
      uint64_t v58 = v57;
    }
    int v59 = 1;
    std::__introsort<std::_ClassicAlgPolicy,md::ARWorldIntersector::intersectBuildings(gm::LineSegment<double,3> const&)::$_0 &,std::pair<md::ARBuildingTileData *,double> *,false>(v52, v56, v58, 1);
    *(_OWORD *)uint64_t v196 = 0u;
    *(_OWORD *)std::vector<unsigned int> __p = 0u;
    int v198 = 1065353216;
    if (v56 != v52)
    {
      unint64_t v60 = (uint64_t *)v52;
      while (1)
      {
        uint64_t v82 = *(int8x8_t **)(*v60 + 784);
        unint64_t v83 = (unint64_t)v82[1];
        if ((v83 & (v83 - 1)) != 0)
        {
          unint64_t v85 = 0x64A448A5CD5D38DBLL;
          if (v83 <= 0x64A448A5CD5D38DBLL) {
            unint64_t v85 = 0x64A448A5CD5D38DBLL % v83;
          }
          unint64_t v84 = *(void **)(*(void *)v82 + 8 * v85);
          do
          {
            do
              unint64_t v84 = (void *)*v84;
            while (v84[1] != 0x64A448A5CD5D38DBLL);
          }
          while (v84[2] != 0x64A448A5CD5D38DBLL);
        }
        else
        {
          unint64_t v84 = *(void **)(*(void *)v82 + 8 * ((v83 - 1) & 0x64A448A5CD5D38DBLL));
          do
          {
            do
              unint64_t v84 = (void *)*v84;
            while (v84[1] != 0x64A448A5CD5D38DBLL);
          }
          while (v84[2] != 0x64A448A5CD5D38DBLL);
        }
        uint64_t v86 = *(void *)(v84[5] + 32);
        char v87 = *(unsigned char *)(v86 + 1);
        double v88 = (double)(1 << v87);
        double v89 = (double)((1 << v87) + ~*(_DWORD *)(v86 + 4));
        __powidf2();
        double v91 = v90 * 0.0000000249532021;
        double v92 = 1.0 / v88 * (double)*(int *)(v86 + 8);
        float v93 = (v183 - v92) * v88;
        double v94 = v184 - 1.0 / v88 * v89;
        float v95 = v94 * v88;
        float v96 = v185 * 40075017.0;
        float v97 = (v186 + v183 - v92) * v88;
        *(float *)&double v94 = (v94 + v187) * v88;
        float v98 = (v188 + v185) * 40075017.0;
        float v99 = v91 * v96;
        *(float *)&double v91 = v91 * v98;
        float v190 = v93;
        float v191 = v95;
        float v192 = v99;
        float v193 = v97 - v93;
        float v194 = *(float *)&v94 - v95;
        float v195 = *(float *)&v91 - v99;
        char v189 = 0;
        uint64_t v100 = *v60;
        v214[0] = &unk_1EF57DBD8;
        v214[1] = &v190;
        v214[2] = &v189;
        double v215 = v214;
        md::ARWorldIntersector::visitReferencedAssetOcclusionVolumes(v174, v100, (uint64_t)v196, (uint64_t)v214);
        if (v215 == v214)
        {
          (*(void (**)(void *))(v214[0] + 32))(v214);
          if (v189) {
            goto LABEL_178;
          }
        }
        else
        {
          if (v215) {
            (*(void (**)(void))(*v215 + 40))();
          }
          if (v189)
          {
LABEL_178:
            int v59 = 0;
            unsigned int v163 = 0;
            uint64_t v164 = __p[0];
            if (!__p[0]) {
              goto LABEL_180;
            }
            goto LABEL_179;
          }
        }
        uint64_t v101 = (void *)gdc::Registry::storage<arComponents::LocalBounds>(v82);
        unint64_t v102 = v101;
        unint64_t v104 = (uint64_t *)v101[7];
        unint64_t v103 = (uint64_t *)v101[8];
        uint64_t v105 = (char *)v103 - (char *)v104;
        if (v103 == v104) {
          goto LABEL_138;
        }
        unint64_t v106 = *((unsigned int *)v104 + 1);
        uint64_t v107 = v101[4];
        unint64_t v108 = (v101[5] - v107) >> 3;
        if (v106 >> 7 < v108)
        {
          uint64_t v109 = *(void *)(v107 + 8 * (v106 >> 7));
          if (v109)
          {
            unint64_t v110 = *(unsigned __int16 *)(v109 + 2 * (v106 & 0x7F));
            if (v110 < v105 >> 3)
            {
              unint64_t v111 = &v104[v110];
              BOOL v112 = v111 != v103 && *((_DWORD *)v111 + 1) == v106;
              if (v112) {
                goto LABEL_138;
              }
            }
          }
        }
        uint64_t v113 = v104 + 1;
        if (v104 + 1 != v103) {
          break;
        }
LABEL_101:
        v60 += 2;
        if (v60 == (uint64_t *)v56)
        {
          unsigned int v163 = 2;
          int v59 = 1;
          uint64_t v164 = __p[0];
          if (__p[0]) {
            goto LABEL_179;
          }
          goto LABEL_180;
        }
      }
      unint64_t v114 = v105 >> 3;
      while (1)
      {
        unint64_t v115 = *((unsigned int *)v113 + 1);
        if (v115 >> 7 < v108)
        {
          uint64_t v116 = *(void *)(v107 + 8 * (v115 >> 7));
          if (v116)
          {
            unint64_t v117 = *(unsigned __int16 *)(v116 + 2 * (v115 & 0x7F));
            if (v114 > v117)
            {
              uint64_t v118 = &v104[v117];
              if (v118 != v103 && *((_DWORD *)v118 + 1) == v115) {
                break;
              }
            }
          }
        }
        if (++v113 == v103) {
          goto LABEL_101;
        }
      }
      unint64_t v104 = v113;
LABEL_138:
      if (v103 != v104)
      {
        do
        {
          unint64_t v120 = *v104;
          uint64_t v121 = (void *)gdc::Registry::storage<arComponents::LocalBounds>(v82);
          uint64_t v122 = v121[4];
          if (v120 >> 39 < (v121[5] - v122) >> 3)
          {
            uint64_t v123 = *(void *)(v122 + 8 * (v120 >> 39));
            if (v123)
            {
              unint64_t v124 = *(unsigned __int16 *)(v123 + 2 * (HIDWORD(v120) & 0x7F));
              uint64_t v126 = v121[7];
              uint64_t v125 = v121[8];
              if (v124 < (v125 - v126) >> 3)
              {
                uint64_t v127 = v126 + 8 * v124;
                if (v127 != v125 && *(_DWORD *)(v127 + 4) == HIDWORD(v120))
                {
                  uint64_t v129 = v121[10];
                  if (v129 + 168 * v124 != v121[11] && v129 != 0)
                  {
                    uint64_t v140 = 0;
                    uint64_t v141 = 0;
                    float v142 = v194;
                    float v143 = v195;
                    float v144 = v190;
                    float v145 = v191;
                    float v146 = v193;
                    float v147 = v192;
                    unint64_t v148 = (int *)(v129 + 168 * v124 + 4);
                    do
                    {
                      long long v203 = xmmword_1A28FCEA0;
                      long long v204 = xmmword_1A28FCEA0;
                      long long v205 = xmmword_1A28FCFB0;
                      long long v206 = xmmword_1A28FCFC0;
                      long long v207 = xmmword_1A28FCFD0;
                      long long v208 = xmmword_1A28FCFE0;
                      long long v209 = xmmword_1A28FCFF0;
                      long long v210 = xmmword_1A28FD000;
                      long long v211 = xmmword_1A28FD010;
                      uint64_t v212 = 0x3E8483EDBF7746EDLL;
                      int v213 = 0;
                      long long v149 = (char *)&v199 + v140;
                      uint64_t v150 = *(void *)((char *)&v203 + v141);
                      v151.i32[0] = *(v148 - 1);
                      *((_DWORD *)v149 + 2) = *(_DWORD *)((char *)&v203 + v141 + 8);
                      *(void *)long long v149 = v150;
                      long long v203 = xmmword_1A28FCEA0;
                      long long v204 = xmmword_1A28FCEA0;
                      long long v205 = xmmword_1A28FCFB0;
                      long long v206 = xmmword_1A28FCFC0;
                      long long v207 = xmmword_1A28FCFD0;
                      long long v208 = xmmword_1A28FCFE0;
                      long long v209 = xmmword_1A28FCFF0;
                      long long v210 = xmmword_1A28FD000;
                      long long v211 = xmmword_1A28FD010;
                      uint64_t v212 = 0x3E8483EDBF7746EDLL;
                      int v213 = 0;
                      v151.i32[1] = *(_DWORD *)((char *)&v203 + v141);
                      int v152 = *v148;
                      v148 += 2;
                      v151.i64[1] = *(void *)((char *)&v203 + v141 + 4);
                      *(float32x4_t *)(v149 + 12) = vnegq_f32(v151);
                      *((_DWORD *)v149 + 7) = v152;
                      v141 += 12;
                      v140 += 32;
                    }
                    while (v141 != 156);
                    uint64_t v153 = 0;
                    float v154 = 0.0;
                    float v155 = 1.0;
                    while (1)
                    {
                      float v156 = *(float *)((char *)&v199 + v153);
                      float v157 = *(float *)((char *)&v199 + v153 + 4);
                      float v158 = *(float *)((char *)&v199 + v153 + 8);
                      float v159 = (float)((float)(v156 * v146) + (float)(v157 * v142)) + (float)(v158 * v143);
                      float v160 = (float)((float)(*(float *)((char *)&v200 + v153 + 4) + (float)(v156 * v144))
                                   + (float)(v157 * v145))
                           + (float)(v158 * v147);
                      BOOL v161 = v159 <= 0.0;
                      if (v159 == 0.0)
                      {
                        if (v160 < 0.0 || v154 > v155) {
                          break;
                        }
                      }
                      else
                      {
                        float v162 = (float)-v160 / v159;
                        if (v161)
                        {
                          float v155 = fminf(v162, v155);
                          if (v154 > v155) {
                            break;
                          }
                        }
                        else
                        {
                          float v154 = fmaxf(v154, v162);
                          if (v154 > v155) {
                            break;
                          }
                        }
                      }
                      v153 += 16;
                      if (v153 == 416) {
                        goto LABEL_178;
                      }
                    }
                  }
                }
              }
            }
          }
          unint64_t v131 = (uint64_t *)v102[8];
          unint64_t v132 = v104 + 1;
          if (v104 + 1 != v131)
          {
            uint64_t v133 = v102[4];
            uint64_t v134 = v102[7];
            while (1)
            {
              unint64_t v135 = *((unsigned int *)v132 + 1);
              if (v135 >> 7 < (v102[5] - v133) >> 3)
              {
                uint64_t v136 = *(void *)(v133 + 8 * (v135 >> 7));
                if (v136)
                {
                  unint64_t v137 = *(unsigned __int16 *)(v136 + 2 * (v135 & 0x7F));
                  if (((uint64_t)v131 - v134) >> 3 > v137)
                  {
                    uint64_t v138 = v134 + 8 * v137;
                    if ((uint64_t *)v138 != v131 && *(_DWORD *)(v138 + 4) == v135) {
                      break;
                    }
                  }
                }
              }
              if (++v132 == v131) {
                goto LABEL_140;
              }
            }
            unint64_t v131 = v132;
          }
LABEL_140:
          unint64_t v104 = v131;
        }
        while (v103 != v131);
      }
      goto LABEL_101;
    }
    unsigned int v163 = 2;
    uint64_t v164 = __p[0];
    if (__p[0])
    {
      do
      {
LABEL_179:
        unint64_t v165 = (void *)*v164;
        operator delete(v164);
        uint64_t v164 = v165;
      }
      while (v165);
    }
LABEL_180:
    uint64_t v166 = v196[0];
    v196[0] = 0;
    if (v166) {
      operator delete(v166);
    }
    if (v52) {
      operator delete(v52);
    }
    uint64_t v49 = v174;
    if (v59)
    {
LABEL_185:
      unint64_t v40 = v170;
      uint64_t v39 = v171;
      if (*(unsigned char *)(v49 + 129))
      {
        unint64_t v168 = *(double **)(v49 + 104);
        unint64_t v167 = *(double **)(v49 + 112);
        if (v168 != v167)
        {
          while (1)
          {
            double v199 = 0.0;
            *(void *)&long long v203 = 0;
            if (gm::Ray<double,3>::segmentIntersectsBox(&v183, v168, &v199, (double *)&v203, 1.0)) {
              break;
            }
            v168 += 6;
            if (v168 == v167) {
              goto LABEL_32;
            }
          }
          unsigned int v163 = 1;
          break;
        }
      }
LABEL_32:
      BOOL v5 = this;
LABEL_33:
      BOOL v112 = v39 == v10;
      v39 += 3;
      if (v112) {
        goto LABEL_194;
      }
      continue;
    }
    break;
  }
LABEL_196:
  if (v178 != v180) {
    free(v178);
  }
  return v163 < 2;
}

void sub_1A27C03F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  if (a27 != a29) {
    free(a27);
  }
  if (a33 != a35) {
    free(a33);
  }
  _Unwind_Resume(exception_object);
}

void geo::MarkedLRUCache<md::Label *,gm::Matrix<double,3,1>,std::hash<md::Label *>,std::equal_to<md::Label *>>::insert(uint64_t *a1, uint64_t a2)
{
  BOOL v5 = a1 + 3;
  uint64_t v6 = std::__hash_table<std::__hash_value_type<altitude::Tile *,unsigned int>,std::__unordered_map_hasher<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::hash<altitude::Tile *>,std::equal_to<altitude::Tile *>,true>,std::__unordered_map_equal<altitude::Tile *,std::__hash_value_type<altitude::Tile *,unsigned int>,std::equal_to<altitude::Tile *>,std::hash<altitude::Tile *>,true>,std::allocator<std::__hash_value_type<altitude::Tile *,unsigned int>>>::find<altitude::Tile *>(a1 + 3, *(void *)a2);
  if (!v6)
  {
    uint64_t v16 = operator new(0x38uLL);
    uint64_t v17 = v16;
    long long v18 = *(_OWORD *)(a2 + 16);
    v16[1] = *(_OWORD *)a2;
    v16[2] = v18;
    *((void *)v16 + 6) = *(void *)(a2 + 32);
    ++a1[2];
    long long v19 = (uint64_t *)a1[8];
    uint64_t v20 = a1[9] + *(void *)(a2 + 32);
    uint64_t v21 = *a1;
    *(void *)(v21 + 8) = v16;
    *a1 = (uint64_t)v16;
    *(void *)uint64_t v16 = v21;
    *((void *)v16 + 1) = a1;
    a1[9] = v20;
    if (v19 == a1) {
      a1[8] = (uint64_t)v16;
    }
    unint64_t v22 = *(void *)a2;
    uint64_t v23 = HIDWORD(*(void *)a2);
    unint64_t v24 = 0x9DDFEA08EB382D69 * ((8 * *(void *)a2 + 8) ^ v23);
    unint64_t v25 = (0x9DDFEA08EB382D69 * (v23 ^ (v24 >> 47) ^ v24)) ^ ((0x9DDFEA08EB382D69 * (v23 ^ (v24 >> 47) ^ v24)) >> 47);
    unint64_t v26 = 0x9DDFEA08EB382D69 * v25;
    unint64_t v27 = a1[4];
    if (v27)
    {
      uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v27);
      v28.i16[0] = vaddlv_u8(v28);
      if (v28.u32[0] > 1uLL)
      {
        unint64_t v2 = 0x9DDFEA08EB382D69 * v25;
        if (v26 >= v27) {
          unint64_t v2 = v26 % v27;
        }
      }
      else
      {
        unint64_t v2 = v26 & (v27 - 1);
      }
      uint64_t v34 = *(void **)(*v5 + 8 * v2);
      if (v34)
      {
        uint64_t v35 = (void *)*v34;
        if (v35)
        {
          if (v28.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v37 = v35[1];
              if (v37 == v26)
              {
                if (v35[2] == v22) {
                  return;
                }
              }
              else if ((v37 & (v27 - 1)) != v2)
              {
                goto LABEL_33;
              }
              uint64_t v35 = (void *)*v35;
              if (!v35) {
                goto LABEL_33;
              }
            }
          }
          do
          {
            unint64_t v36 = v35[1];
            if (v36 == v26)
            {
              if (v35[2] == v22) {
                return;
              }
            }
            else
            {
              if (v36 >= v27) {
                v36 %= v27;
              }
              if (v36 != v2) {
                break;
              }
            }
            uint64_t v35 = (void *)*v35;
          }
          while (v35);
        }
      }
    }
LABEL_33:
    long long v38 = operator new(0x20uLL);
    *long long v38 = 0;
    v38[1] = v26;
    v38[2] = v22;
    v38[3] = v17;
    float v39 = (float)(unint64_t)(a1[6] + 1);
    float v40 = *((float *)a1 + 14);
    if (v27 && (float)(v40 * (float)v27) >= v39)
    {
LABEL_83:
      int8x8_t v62 = (void *)*v5;
      uint8x8_t v63 = *(void **)(*v5 + 8 * v2);
      if (v63)
      {
        *long long v38 = *v63;
      }
      else
      {
        *long long v38 = a1[5];
        a1[5] = (uint64_t)v38;
        v62[v2] = a1 + 5;
        if (!*v38)
        {
LABEL_92:
          ++a1[6];
          return;
        }
        unint64_t v64 = *(void *)(*v38 + 8);
        if ((v27 & (v27 - 1)) != 0)
        {
          if (v64 >= v27) {
            v64 %= v27;
          }
        }
        else
        {
          v64 &= v27 - 1;
        }
        uint8x8_t v63 = (void *)(*v5 + 8 * v64);
      }
      *uint8x8_t v63 = v38;
      goto LABEL_92;
    }
    BOOL v41 = 1;
    if (v27 >= 3) {
      BOOL v41 = (v27 & (v27 - 1)) != 0;
    }
    unint64_t v42 = v41 | (2 * v27);
    unint64_t v43 = vcvtps_u32_f32(v39 / v40);
    if (v42 <= v43) {
      size_t prime = v43;
    }
    else {
      size_t prime = v42;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v27 = a1[4];
    }
    if (prime <= v27)
    {
      if (prime >= v27) {
        goto LABEL_70;
      }
      unint64_t v56 = vcvtps_u32_f32((float)(unint64_t)a1[6] / *((float *)a1 + 14));
      if (v27 < 3 || (uint8x8_t v57 = (uint8x8_t)vcnt_s8((int8x8_t)v27), v57.i16[0] = vaddlv_u8(v57), v57.u32[0] > 1uLL))
      {
        unint64_t v56 = std::__next_prime(v56);
      }
      else
      {
        uint64_t v58 = 1 << -(char)__clz(v56 - 1);
        if (v56 >= 2) {
          unint64_t v56 = v58;
        }
      }
      if (prime <= v56) {
        size_t prime = v56;
      }
      if (prime >= v27)
      {
        unint64_t v27 = a1[4];
LABEL_70:
        if ((v27 & (v27 - 1)) != 0)
        {
          if (v26 >= v27) {
            unint64_t v2 = v26 % v27;
          }
          else {
            unint64_t v2 = v26;
          }
        }
        else
        {
          unint64_t v2 = (v27 - 1) & v26;
        }
        goto LABEL_83;
      }
      if (!prime)
      {
        BOOL v65 = (void *)*v5;
        *BOOL v5 = 0;
        if (v65) {
          operator delete(v65);
        }
        unint64_t v27 = 0;
        a1[4] = 0;
        goto LABEL_70;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int v45 = operator new(8 * prime);
    double v46 = (void *)*v5;
    *BOOL v5 = v45;
    if (v46) {
      operator delete(v46);
    }
    uint64_t v47 = 0;
    a1[4] = prime;
    do
      *(void *)(*v5 + 8 * v47++) = 0;
    while (prime != v47);
    uint64_t v49 = a1 + 5;
    double v48 = (void *)a1[5];
    if (!v48)
    {
LABEL_69:
      unint64_t v27 = prime;
      goto LABEL_70;
    }
    size_t v50 = v48[1];
    size_t v51 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v52 = v50 & v51;
      *(void *)(*v5 + 8 * v52) = v49;
      for (uint64_t i = (void *)*v48; *v48; uint64_t i = (void *)*v48)
      {
        size_t v54 = i[1] & v51;
        if (v54 == v52)
        {
          double v48 = i;
        }
        else if (*(void *)(*v5 + 8 * v54))
        {
          *double v48 = *i;
          uint64_t v55 = 8 * v54;
          void *i = **(void **)(*v5 + v55);
          **(void **)(*v5 + v55) = i;
        }
        else
        {
          *(void *)(*v5 + 8 * v54) = v48;
          double v48 = i;
          size_t v52 = v54;
        }
      }
      goto LABEL_69;
    }
    if (v50 >= prime) {
      v50 %= prime;
    }
    *(void *)(*v5 + 8 * v50) = v49;
    int v59 = (void *)*v48;
    if (!*v48) {
      goto LABEL_69;
    }
    while (1)
    {
      size_t v61 = v59[1];
      if (v61 >= prime) {
        v61 %= prime;
      }
      if (v61 != v50)
      {
        if (!*(void *)(*v5 + 8 * v61))
        {
          *(void *)(*v5 + 8 * v61) = v48;
          goto LABEL_74;
        }
        *double v48 = *v59;
        uint64_t v60 = 8 * v61;
        *int v59 = **(void **)(*v5 + v60);
        **(void **)(*v5 + v60) = v59;
        int v59 = v48;
      }
      size_t v61 = v50;
LABEL_74:
      double v48 = v59;
      int v59 = (void *)*v59;
      size_t v50 = v61;
      if (!v59) {
        goto LABEL_69;
      }
    }
  }
  unint64_t v7 = v6;
  unint64_t v8 = (uint64_t *)v6[3];
  unint64_t v9 = operator new(0x38uLL);
  uint64_t v10 = v9;
  long long v11 = *(_OWORD *)(a2 + 16);
  v9[1] = *(_OWORD *)a2;
  _OWORD v9[2] = v11;
  *((void *)v9 + 6) = *(void *)(a2 + 32);
  uint64_t v12 = *a1;
  *(void *)(v12 + 8) = v9;
  *a1 = (uint64_t)v9;
  *(void *)unint64_t v9 = v12;
  *((void *)v9 + 1) = a1;
  uint64_t v13 = a1[2];
  a1[2] = v13 + 1;
  uint64_t v14 = (uint64_t *)a1[8];
  if (v14 == v8)
  {
    long long v15 = (_OWORD *)v8[1];
LABEL_11:
    a1[8] = (uint64_t)v15;
    goto LABEL_12;
  }
  long long v15 = v9;
  if (v14 == a1) {
    goto LABEL_11;
  }
LABEL_12:
  unint64_t v29 = v8[6];
  unint64_t v30 = a1[9];
  BOOL v31 = v30 >= v29;
  unint64_t v32 = v30 - v29;
  if (!v31) {
    unint64_t v32 = 0;
  }
  a1[9] = v32 + *(void *)(a2 + 32);
  uint64_t v33 = *v8;
  *(void *)(v33 + 8) = v8[1];
  *(void *)v8[1] = v33;
  a1[2] = v13;
  operator delete(v8);
  v7[3] = v10;
}

void sub_1A27C0A0C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  if (*a2 != *result)
  {
    unint64_t v5 = *(void *)(v3 + 24);
    unint64_t v6 = *(void *)(v4 + 24);
    if (v5 == v6)
    {
      if (*(_DWORD *)(v3 + 32) < *(_DWORD *)(v4 + 32)) {
        goto LABEL_4;
      }
    }
    else if (v5 < v6)
    {
LABEL_4:
      uint64_t v7 = *a3;
      if (*a3 != v3)
      {
        unint64_t v8 = *(void *)(v7 + 24);
        if (v8 == v5)
        {
          if (*(_DWORD *)(v7 + 32) < *(_DWORD *)(v3 + 32)) {
            goto LABEL_7;
          }
        }
        else if (v8 < v5)
        {
LABEL_7:
          *result++ = v7;
          *a3 = v4;
          unint64_t v9 = a3 + 1;
LABEL_25:
          uint64_t v13 = v9;
          goto LABEL_26;
        }
      }
      *BOOL result = v3;
      *a2 = v4;
      uint64_t v20 = result[1];
      result[1] = a2[1];
      a2[1] = v20;
      uint64_t v21 = *a3;
      uint64_t v22 = *a2;
      if (*a3 != *a2)
      {
        unint64_t v23 = *(void *)(v21 + 24);
        unint64_t v24 = *(void *)(v22 + 24);
        BOOL v25 = v23 >= v24;
        if (v23 == v24) {
          BOOL v25 = *(_DWORD *)(v21 + 32) >= *(_DWORD *)(v22 + 32);
        }
        if (!v25)
        {
          *a2 = v21;
          *a3 = v22;
          unint64_t v9 = a3 + 1;
          BOOL result = a2 + 1;
          goto LABEL_25;
        }
      }
      return result;
    }
  }
  uint64_t v10 = *a3;
  if (*a3 == v3) {
    return result;
  }
  unint64_t v11 = *(void *)(v10 + 24);
  unint64_t v12 = *(void *)(v3 + 24);
  if (v11 == v12)
  {
    if (*(_DWORD *)(v10 + 32) >= *(_DWORD *)(v3 + 32)) {
      return result;
    }
  }
  else if (v11 >= v12)
  {
    return result;
  }
  *a2 = v10;
  *a3 = v3;
  uint64_t v13 = a2 + 1;
  uint64_t v14 = a2[1];
  a2[1] = a3[1];
  a3[1] = v14;
  uint64_t v15 = *a2;
  uint64_t v16 = *result;
  if (*a2 != *result)
  {
    unint64_t v17 = *(void *)(v15 + 24);
    unint64_t v18 = *(void *)(v16 + 24);
    BOOL v19 = v17 >= v18;
    if (v17 == v18) {
      BOOL v19 = *(_DWORD *)(v15 + 32) >= *(_DWORD *)(v16 + 32);
    }
    if (!v19)
    {
      *result++ = v15;
      *a2 = v16;
LABEL_26:
      uint64_t v26 = *result;
      *BOOL result = *v13;
      uint64_t *v13 = v26;
    }
  }
  return result;
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *>(a1, a2, a3);
  uint64_t v9 = *a4;
  uint64_t v10 = *a3;
  if (*a4 != *a3)
  {
    unint64_t v11 = *(void *)(v9 + 24);
    unint64_t v12 = *(void *)(v10 + 24);
    if (v11 == v12)
    {
      if (*(_DWORD *)(v9 + 32) >= *(_DWORD *)(v10 + 32)) {
        return result;
      }
    }
    else if (v11 >= v12)
    {
      return result;
    }
    *a3 = v9;
    *a4 = v10;
    uint64_t v13 = a3[1];
    a3[1] = a4[1];
    a4[1] = v13;
    uint64_t v14 = *a3;
    uint64_t v15 = *a2;
    if (*a3 != *a2)
    {
      unint64_t v16 = *(void *)(v14 + 24);
      unint64_t v17 = *(void *)(v15 + 24);
      BOOL v18 = v16 >= v17;
      if (v16 == v17) {
        BOOL v18 = *(_DWORD *)(v14 + 32) >= *(_DWORD *)(v15 + 32);
      }
      if (!v18)
      {
        *a2 = v14;
        *a3 = v15;
        uint64_t v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        uint64_t v20 = *a2;
        uint64_t v21 = *a1;
        if (*a2 != *a1)
        {
          unint64_t v22 = *(void *)(v20 + 24);
          unint64_t v23 = *(void *)(v21 + 24);
          BOOL v24 = v22 >= v23;
          if (v22 == v23) {
            BOOL v24 = *(_DWORD *)(v20 + 32) >= *(_DWORD *)(v21 + 32);
          }
          if (!v24)
          {
            *a1 = v20;
            *a2 = v21;
            uint64_t v25 = a1[1];
            a1[1] = a2[1];
            a2[1] = v25;
          }
        }
      }
    }
  }
  return result;
}

uint64_t *std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  BOOL result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *>(a1, a2, a3, a4);
  uint64_t v11 = *a5;
  uint64_t v12 = *a4;
  if (*a5 != *a4)
  {
    unint64_t v13 = *(void *)(v11 + 24);
    unint64_t v14 = *(void *)(v12 + 24);
    if (v13 == v14)
    {
      if (*(_DWORD *)(v11 + 32) >= *(_DWORD *)(v12 + 32)) {
        return result;
      }
    }
    else if (v13 >= v14)
    {
      return result;
    }
    *a4 = v11;
    *a5 = v12;
    uint64_t v15 = a4[1];
    a4[1] = a5[1];
    a5[1] = v15;
    uint64_t v16 = *a4;
    uint64_t v17 = *a3;
    if (*a4 != *a3)
    {
      unint64_t v18 = *(void *)(v16 + 24);
      unint64_t v19 = *(void *)(v17 + 24);
      BOOL v20 = v18 >= v19;
      if (v18 == v19) {
        BOOL v20 = *(_DWORD *)(v16 + 32) >= *(_DWORD *)(v17 + 32);
      }
      if (!v20)
      {
        *a3 = v16;
        *a4 = v17;
        uint64_t v21 = a3[1];
        a3[1] = a4[1];
        a4[1] = v21;
        uint64_t v22 = *a3;
        uint64_t v23 = *a2;
        if (*a3 != *a2)
        {
          unint64_t v24 = *(void *)(v22 + 24);
          unint64_t v25 = *(void *)(v23 + 24);
          BOOL v26 = v24 >= v25;
          if (v24 == v25) {
            BOOL v26 = *(_DWORD *)(v22 + 32) >= *(_DWORD *)(v23 + 32);
          }
          if (!v26)
          {
            *a2 = v22;
            *a3 = v23;
            uint64_t v27 = a2[1];
            a2[1] = a3[1];
            a3[1] = v27;
            uint64_t v28 = *a2;
            uint64_t v29 = *a1;
            if (*a2 != *a1)
            {
              unint64_t v30 = *(void *)(v28 + 24);
              unint64_t v31 = *(void *)(v29 + 24);
              BOOL v32 = v30 >= v31;
              if (v30 == v31) {
                BOOL v32 = *(_DWORD *)(v28 + 32) >= *(_DWORD *)(v29 + 32);
              }
              if (!v32)
              {
                *a1 = v28;
                *a2 = v29;
                uint64_t v33 = a1[1];
                a1[1] = a2[1];
                a2[1] = v33;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 2);
      uint64_t v7 = *a1;
      if (v6 != *a1)
      {
        unint64_t v8 = *(void *)(v6 + 24);
        unint64_t v9 = *(void *)(v7 + 24);
        BOOL v10 = v8 >= v9;
        if (v8 == v9) {
          BOOL v10 = *(_DWORD *)(v6 + 32) >= *(_DWORD *)(v7 + 32);
        }
        if (!v10)
        {
          *a1 = v6;
          *(a2 - 2) = v7;
          uint64_t v11 = a1[1];
          a1[1] = *(a2 - 1);
          *(a2 - 1) = v11;
        }
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *,0>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      uint64_t v12 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,md::ARWalkingLabeler::deduplicateAndIntersectLabels(geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>,BOOL,geo::slice<std::__wrap_iter<std::shared_ptr<md::Label> *>>&)::$_1 &,std::shared_ptr<md::Label> *>(a1, a1 + 2, a1 + 4);
      unint64_t v13 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      int v14 = 0;
      uint64_t v15 = 32;
      break;
  }
  while (1)
  {
    uint64_t v16 = *v13;
    uint64_t v17 = *v12;
    if (*v13 == *v12) {
      goto LABEL_10;
    }
    unint64_t v18 = *(void *)(v16 + 24);
    unint64_t v19 = *(void *)(v17 + 24);
    if (v18 == v19) {
      break;
    }
    if (v18 < v19) {
      goto LABEL_16;
    }
LABEL_10:
    uint64_t v12 = v13;
    v15 += 16;
    v13 += 2;
    if (v13 == a2) {
      return 1;
    }
  }
  if (*(_DWORD *)(v16 + 32) >= *(_DWORD *)(v17 + 32)) {
    goto LABEL_10;
  }
LABEL_16:
  uint64_t v20 = v13[1];
  uint64_t v21 = v15;
  uint64_t *v13 = 0;
  v13[1] = 0;
  while (1)
  {
    uint64_t v22 = (uint64_t *)((char *)a1 + v21);
    uint64_t v23 = *(uint64_t *)((char *)a1 + v21 + 8);
    void *v22 = 0;
    v22[1] = 0;
    unint64_t v24 = *(std::__shared_weak_count **)((char *)a1 + v21 + 24);
    void v22[2] = v17;
    v22[3] = v23;
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    if (!v21) {
      break;
    }
    unint64_t v25 = (uint64_t *)((char *)a1 + v21);
    uint64_t v17 = *(uint64_t *)((char *)a1 + v21 - 16);
    if (v16 == v17) {
      goto LABEL_27;
    }
    unint64_t v26 = *(void *)(v16 + 24);
    unint64_t v27 = *(void *)(v17 + 24);
    BOOL v28 = v26 >= v27;
    if (v26 == v27) {
      BOOL v28 = *(_DWORD *)(v16 + 32) >= *(_DWORD *)(v17 + 32);
    }
    if (v28) {
      goto LABEL_27;
    }
    v21 -= 16;
  }
  unint64_t v25 = a1;
LABEL_27:
  uint64_t v29 = (std::__shared_weak_count *)v25[1];
  *unint64_t v25 = v16;
  v25[1] = v20;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  if (++v14 != 8) {
    goto LABEL_10;
  }
  return v13 + 2 == a2;
}

void ___ZL34GEOGetVectorKitARWalkingLabelerLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.VectorKit", "ARWalkingLabeler");
  uint64_t v1 = (void *)GEOGetVectorKitARWalkingLabelerLog(void)::log;
  GEOGetVectorKitARWalkingLabelerLog(void)::log = (uint64_t)v0;
}

uint64_t md::ARWalkingLabeler::externalMeshModerator(md::ARWalkingLabeler *this)
{
  return *((void *)this + 56);
}

void md::ARWalkingLabeler::debugDraw(md::ARWalkingLabeler *this, NSMutableString *a2, md::DebugConsole *a3)
{
  uint64_t v377 = *MEMORY[0x1E4F143B8];
  unsigned int v269 = a2;
  md::StandardLabeler::debugDraw(this, v269, a3);
  unsigned int v280 = this;
  if (*((unsigned char *)this + 404))
  {
    uint64_t v5 = *((void *)this + 252);
    for (uint64_t i = *((void *)this + 253); v5 != i; v5 += 40)
    {
      uint64_t v7 = *(void *)(v5 + 16);
      uint64_t v8 = *(void *)(v5 + 24);
      while (v7 != v8)
      {
        if (*(unsigned char *)(v7 + 106))
        {
          uint64_t v12 = *(void *)(v7 + 16);
          *((_DWORD *)a3 + 24) = -256;
          if (v12)
          {
            uint64_t v13 = *(void *)(*((void *)this + 3) + 432);
            double v14 = *(float *)(v12 + 780);
            if (*(double *)(v13 + 272) <= v14 && *(double *)(v13 + 280) >= v14)
            {
              if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v12 + 40))(v12, v13 + 736))
              {
                uint64_t v16 = *(void *)(v12 + 288);
                if (v16) {
                  (*(void (**)(uint64_t, void, md::DebugConsole *))(*(void *)v16 + 776))(v16, *((void *)v280 + 3), a3);
                }
              }
            }
            *((_DWORD *)a3 + 24) = -16711936;
            if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v12 + 48))(v12, *((void *)v280 + 3) + 1176))
            {
              uint64_t v17 = *(void *)(v12 + 288);
              if (v17) {
                (*(void (**)(uint64_t, void, md::DebugConsole *))(*(void *)v17 + 784))(v17, *((void *)v280 + 3), a3);
              }
            }
          }
          else
          {
            *((_DWORD *)a3 + 24) = -16711936;
          }
          *((_DWORD *)a3 + 24) = -16776961;
          this = v280;
          uint64_t v9 = *((void *)v280 + 3);
          float64x2_t v10 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(*(float64x2_t *)(v9 + 1400), *(float64x2_t *)(v9 + 1304), *(double *)(v12 + 408)), *(float64x2_t *)(v9 + 1336), *(double *)(v12 + 416)), *(float64x2_t *)(v9 + 1368), *(double *)(v12 + 424)), 1.0/ (*(double *)(v9 + 1424)+ *(double *)(v9 + 1328) * *(double *)(v12 + 408)+ *(double *)(v9 + 1360) * *(double *)(v12 + 416)+ *(double *)(v9 + 1392) * *(double *)(v12 + 424)));
          float32x2_t v11 = vcvt_f32_f64(v10);
          *(float *)v10.f64 = *(float *)(v9 + 176) * 3.0;
          *((float32x2_t *)a3 + 1) = v11;
          ggl::DebugConsole::drawCircleWithFill((uint64_t)a3, v10.f64[0]);
        }
        v7 += 128;
      }
    }
  }
  if (!*((unsigned char *)this + 403)) {
    goto LABEL_242;
  }
  uint64_t v18 = *((void *)this + 3);
  long double v19 = exp(*(double *)(v18 + 584) * 6.28318531 + -3.14159265);
  long double v20 = atan(v19) * 114.591559 + -90.0;
  long double v21 = cos(v20 * 0.034906585);
  long double v22 = cos(v20 * 0.0698131701);
  long double v23 = cos(v20 * 0.104719755);
  double v243 = 0.00872664626;
  long double v24 = v20 * 0.00872664626;
  long double v25 = tan(v24 + 0.78103484);
  long double v26 = log(v25);
  long double v27 = tan(v24 + 0.789761487);
  long double v28 = log(v27);
  LODWORD(v24) = *(_DWORD *)(v18 + 1508);
  float v29 = *(float *)(v18 + 1504);
  float v244 = *(float *)(v18 + 176);
  unint64_t v30 = +[VKDebugSettings sharedSettings];
  double v281 = v28;
  double v284 = v26;
  double v289 = v23;
  [v30 arDebugMiniMapMapRectSize];
  LODWORD(v26) = v31;
  double v276 = v22;
  double v32 = v21;
  [v30 arDebugMiniMapScreenRectXOffset];
  LODWORD(v28) = v33;
  LODWORD(v21) = *(_DWORD *)(v18 + 1504);
  [v30 arDebugMiniMapScreenRectYOffset];
  float v35 = v34;
  LODWORD(v22) = *(_DWORD *)(v18 + 1508);
  [v30 arDebugMiniMapScreenRectSize];
  float v37 = v36 * fminf(*(float *)&v24, v29);
  v357[0] = *(float *)&v21 * *(float *)&v28;
  v357[1] = *(float *)&v22 * v35;
  v357[2] = v37 + (float)(*(float *)&v21 * *(float *)&v28);
  v357[3] = v37 + (float)(*(float *)&v22 * v35);
  long long v298 = *(_OWORD *)(v18 + 576);
  double v337 = *(float *)&v26;
  double v336 = *(float *)&v26;
  md::DebugConsoleMapRect::DebugConsoleMapRect((uint64_t)v338, (uint64_t)a3, (uint64_t)v357, (double *)&v298, &v337, &v336);
  *((_DWORD *)a3 + 24) = 0x80000000;
  float32_t v38 = v339.f32[0];
  *((float32x2_t *)a3 + 1) = v339;
  ggl::DebugConsole::drawRectangleWithFill((float32x2_t *)a3, &v340, v38);
  int v335 = -16711681;
  long long v298 = 0uLL;
  double v299 = 0.0;
  if (!(*((void *)this + 258) | *((void *)this + 259) | *((void *)this + 260))) {
    goto LABEL_27;
  }
  double v39 = fabs((v281 - v284) * 0.159154943) * 0.25 / (v32 * -559.82 + 111132.92 + v276 * 1.175 + v289 * -0.0023);
  double v40 = *((double *)this + 258);
  if (vabdd_f64(*(double *)(v18 + 576), v40) >= v39)
  {
    double v41 = *((double *)this + 259);
LABEL_29:
    int v335 = -16711936;
    float v43 = *(float *)(*((void *)this + 3) + 176);
    LODWORD(v298) = -16711936;
    md::DebugConsoleMapRect::drawWorldCircleWithPixelRadius((uint64_t)v338, v43, &v298, 1, v40, v41);
    int v42 = 0;
    goto LABEL_30;
  }
  double v41 = *((double *)this + 259);
  if (vabdd_f64(*(double *)(v18 + 584), v41) >= v39
    || vabdd_f64(*(double *)(v18 + 592), *((double *)this + 260)) >= v39)
  {
    goto LABEL_29;
  }
LABEL_27:
  int v42 = 1;
LABEL_30:
  md::DebugConsoleMapRect::drawWorldCircleWithPixelRadius((uint64_t)v338, *(float *)(*((void *)this + 3) + 176), &v335, v42, *(double *)(v18 + 576), *(double *)(v18 + 584));
  double v44 = *(double *)(v18 + 1176);
  double v45 = *(double *)(v18 + 1208);
  double v46 = *(double *)(v18 + 1240);
  double v47 = *(double *)(v18 + 1272);
  double v48 = *(double *)(v18 + 1184);
  double v49 = *(double *)(v18 + 1216);
  double v50 = *(double *)(v18 + 1248);
  double v51 = *(double *)(v18 + 1280);
  double v52 = *(double *)(v18 + 1192);
  v53.i64[0] = *(void *)(v18 + 1224);
  double v54 = *(double *)(v18 + 1200);
  v55.f64[0] = *(float64_t *)(v18 + 1232);
  double v56 = *(double *)(v18 + 1264);
  double v57 = *(double *)(v18 + 1296);
  double v58 = v54 + v44;
  float64_t v59 = v55.f64[0] + v45;
  double v60 = v56 + v46;
  double v61 = v57 + v47;
  double v62 = v54 - v44;
  float64_t v63 = v55.f64[0] - v45;
  double v64 = v56 - v46;
  double v65 = v57 - v47;
  double v66 = v54 + v48;
  float64_t v67 = v55.f64[0] + v49;
  double v68 = v56 + v50;
  double v69 = v57 + v51;
  double v70 = v54 - v48;
  float64_t v71 = v55.f64[0] - v49;
  double v72 = v56 - v50;
  double v73 = v57 - v51;
  double v74 = v54 - v52;
  v75.f64[0] = v52;
  v75.f64[1] = v74;
  double v76 = v57 - *(double *)(v18 + 1288);
  float64x2_t v77 = vmulq_f64(v75, v75);
  v75.f64[0] = *(float64_t *)(v18 + 1288);
  v55.f64[1] = v56;
  *(void *)&v78.f64[0] = v53.i64[0];
  v78.f64[1] = *(float64_t *)(v18 + 1256);
  float64x2_t v79 = vsubq_f64(v55, v78);
  float64x2_t v80 = (float64x2_t)vzip1q_s64(v53, (int64x2_t)v79);
  float64x2_t v81 = vmlaq_f64(v77, v80, v80);
  v80.f64[1] = v79.f64[1];
  v80.f64[0] = *(float64_t *)(v18 + 1256);
  __asm { FMOV            V27.2D, #1.0 }
  float64x2_t v86 = vdivq_f64(_Q27, vsqrtq_f64(vmlaq_f64(v81, v80, v80)));
  double v87 = *(double *)(v18 + 1256) * v86.f64[0];
  *(double *)&long long v298 = v52 * v86.f64[0];
  *((double *)&v298 + 1) = *(double *)v53.i64 * v86.f64[0];
  double v299 = v87;
  float64x2_t v300 = vmulq_f64(v86, v75);
  float64x2_t v301 = vmulq_laneq_f64(v79, v86, 1);
  double v88 = 1.0 / sqrt(v66 * v66 + v67 * v67 + v68 * v68);
  double v302 = vmuld_lane_f64(v76, v86, 1);
  double v303 = v88 * v66;
  double v304 = v88 * v67;
  double v305 = v88 * v68;
  double v89 = 1.0 / sqrt(v70 * v70 + v71 * v71 + v72 * v72);
  double v306 = v88 * v69;
  double v307 = v89 * v70;
  double v308 = v89 * v71;
  double v309 = v89 * v72;
  double v90 = 1.0 / sqrt(v58 * v58 + v59 * v59 + v60 * v60);
  double v310 = v89 * v73;
  double v311 = v90 * v58;
  double v312 = v90 * v59;
  double v313 = v90 * v60;
  double v91 = 1.0 / sqrt(v62 * v62 + v63 * v63 + v64 * v64);
  double v314 = v90 * v61;
  double v315 = v91 * v62;
  double v316 = v91 * v63;
  double v317 = v91 * v64;
  double v318 = v91 * v65;
  geo::Frustum<double>::calculateCorners((double *)&v298, (double *)(v18 + 1176), 0.0);
  double v92 = v319;
  double v93 = v320;
  double v256 = v322;
  double v94 = v323;
  double v95 = v324;
  double v245 = v327;
  double v246 = v328;
  double v247 = v329 - v327;
  double v248 = v330 - v328;
  double v96 = v331;
  double v97 = v332;
  double v267 = v333;
  double v249 = v333 - v331;
  double v250 = v334 - v332;
  double v270 = v334;
  double v251 = v324 - v320;
  double v252 = v323 - v319;
  double v98 = v325;
  double v99 = v326;
  double v253 = v332 - v324;
  double v254 = v331 - v323;
  double v257 = v328 - v332;
  double v258 = v327 - v331;
  double v261 = v320 - v328;
  double v262 = v319 - v327;
  double v255 = v321;
  double v264 = v326 - v322;
  double v265 = v325 - v321;
  *(double *)&v370[16] = v321 - v319;
  double v266 = v333 - v325;
  double v259 = v325;
  double v260 = v326;
  *(double *)int64_t v370 = v319;
  *(double *)&v370[8] = v320;
  *(double *)&v370[24] = v322 - v320;
  v366[0] = -16711936;
  double v263 = v334 - v326;
  double v272 = v329 - v333;
  double v274 = v330 - v334;
  double v277 = v329;
  double v282 = v330;
  double v285 = v321 - v329;
  double v290 = v322 - v330;
  md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v338, (double *)v370, v366);
  *(double *)int64_t v370 = v94;
  *(double *)&v370[8] = v95;
  *(double *)&v370[16] = v98 - v94;
  *(double *)&v370[24] = v99 - v95;
  v366[0] = -16711936;
  md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v338, (double *)v370, v366);
  *(double *)int64_t v370 = v245;
  *(double *)&v370[8] = v246;
  *(double *)&v370[16] = v247;
  *(double *)&v370[24] = v248;
  v366[0] = -16711936;
  md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v338, (double *)v370, v366);
  *(double *)int64_t v370 = v96;
  *(double *)&v370[8] = v97;
  *(double *)&v370[16] = v249;
  *(double *)&v370[24] = v250;
  v366[0] = -16711936;
  md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v338, (double *)v370, v366);
  *(double *)int64_t v370 = v92;
  *(double *)&v370[8] = v93;
  *(double *)&v370[16] = v252;
  *(double *)&v370[24] = v251;
  v366[0] = -16711936;
  md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v338, (double *)v370, v366);
  *(double *)int64_t v370 = v94;
  *(double *)&v370[8] = v95;
  *(double *)&v370[16] = v254;
  *(double *)&v370[24] = v253;
  v366[0] = -16711936;
  md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v338, (double *)v370, v366);
  *(double *)int64_t v370 = v96;
  *(double *)&v370[8] = v97;
  *(double *)&v370[16] = v258;
  *(double *)&v370[24] = v257;
  v366[0] = -16711936;
  md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v338, (double *)v370, v366);
  *(double *)int64_t v370 = v245;
  *(double *)&v370[8] = v246;
  *(double *)&v370[16] = v262;
  *(double *)&v370[24] = v261;
  v366[0] = -16711936;
  md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v338, (double *)v370, v366);
  *(double *)int64_t v370 = v255;
  *(double *)&v370[8] = v256;
  *(double *)&v370[16] = v265;
  *(double *)&v370[24] = v264;
  v366[0] = -16711936;
  md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v338, (double *)v370, v366);
  *(double *)int64_t v370 = v259;
  *(double *)&v370[8] = v260;
  *(double *)&v370[16] = v266;
  *(double *)&v370[24] = v263;
  v366[0] = -16711936;
  md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v338, (double *)v370, v366);
  *(double *)int64_t v370 = v267;
  *(double *)&v370[8] = v270;
  *(double *)&v370[16] = v272;
  *(double *)&v370[24] = v274;
  v366[0] = -16711936;
  md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v338, (double *)v370, v366);
  *(double *)int64_t v370 = v277;
  *(double *)&v370[8] = v282;
  *(double *)&v370[16] = v285;
  *(double *)&v370[24] = v290;
  v366[0] = -16711936;
  md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v338, (double *)v370, v366);
  uint64_t v101 = (void *)*((void *)this + 256);
  unsigned int v283 = v30;
  if (v101)
  {
    id v102 = v101;
    unint64_t v103 = [v102 routeInfo];
    unsigned int v278 = [v103 route];

    long long v296 = 0u;
    long long v297 = 0u;
    long long v294 = 0u;
    long long v295 = 0u;
    unint64_t v104 = [v278 sections];
    uint64_t v105 = [v104 countByEnumeratingWithState:&v294 objects:v366 count:16];
    if (v105)
    {
      uint64_t v106 = *(void *)v295;
      uint64_t v107 = (float64x2_t *)MEMORY[0x1E4F63F08];
      do
      {
        for (uint64_t j = 0; j != v105; ++j)
        {
          if (*(void *)v295 != v106) {
            objc_enumerationMutation(v104);
          }
          uint64_t v109 = *(void **)(*((void *)&v294 + 1) + 8 * j);
          if (objc_msgSend(v109, "pointCount", *(void *)&v243) >= 2)
          {
            float64x2_t v110 = 0uLL;
            memset(v370, 0, 48);
            if (v109)
            {
              [v109 bounds];
              float64x2_t v111 = *(float64x2_t *)v370;
              float64x2_t v110 = *(float64x2_t *)&v370[24];
            }
            else
            {
              float64x2_t v111 = 0uLL;
            }
            float64x2_t v112 = v107[1];
            double v113 = v342.f64[0];
            float64x2_t v291 = vdivq_f64(v111, v112);
            if (v342.f64[0] > v291.f64[0])
            {
              float64x2_t v114 = vdivq_f64(vaddq_f64(v110, v111), v112);
              double v115 = 1.0 - v114.f64[1];
              v110.f64[0] = 1.0 - v291.f64[1];
              v111.f64[0] = v342.f64[1];
              double v113 = v341.f64[1];
              v112.f64[0] = v341.f64[0];
              float64x2_t v286 = v114;
              BOOL v116 = v341.f64[0] >= v114.f64[0] || v342.f64[1] <= v115;
              if (!v116 && v341.f64[1] < v110.f64[0])
              {
                uint64_t v118 = objc_msgSend(v109, "points", v110.f64[0], v342.f64[1], v341.f64[0], v341.f64[1]);
                float64x2_t v287 = vsubq_f64(v286, v291);
                for (unint64_t k = 1; k < [v109 pointCount]; ++k)
                {
                  float64x2_t v120 = vcvtq_f64_f32(*(float32x2_t *)(v118 + 12));
                  float64x2_t v121 = vmulq_f64(v287, vcvtq_f64_f32(*(float32x2_t *)v118));
                  LODWORD(v364[0]) = -1;
                  long long v367 = (void (**)(void **))*(_OWORD *)&vaddq_f64(v121, v291);
                  double v368 = v121.f64[1] + v115;
                  float64x2_t v369 = vmlaq_f64(vnegq_f64(v121), v120, v287);
                  md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v338, (double *)&v367, v364);
                  v118 += 12;
                }
              }
            }
          }
        }
        uint64_t v105 = objc_msgSend(v104, "countByEnumeratingWithState:objects:count:", &v294, v366, 16, v110.f64[0], v111.f64[0], v112.f64[0], v113);
      }
      while (v105);
    }

    this = v280;
  }
  double v122 = v244;
  double v123 = v122 + v122;
  unint64_t v124 = (void *)*((void *)this + 252);
  __asm { FMOV            V1.2D, #0.5 }
  float64x2_t v268 = _Q1;
  uint64_t v271 = (void *)*((void *)this + 253);
  if (v124 != v271)
  {
    _Q1.f64[0] = v122 * 3.0;
    unsigned int v273 = (v122 * 1.5);
    v100.f64[0] = 0.0;
    int8x16_t v126 = (int8x16_t)vdupq_lane_s64(COERCE__INT64(v122 * 3.0), 0);
    v127.i64[1] = v126.i64[1];
    v127.i64[0] = 0;
    uint64_t v275 = (double *)((char *)this + 2088);
    int8x16_t v128 = vbslq_s8((int8x16_t)vdupq_lane_s64(vcgeq_f64(_Q1, v100).i64[0], 0), v126, v127);
    float v129 = (float)(v122 * 10.0);
    float64x2_t v130 = vmulq_f64((float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgtq_f64(v100, _Q1).i64[0], 0), (int8x16_t)v128.u64[0], v128), v268);
    float32x4_t v288 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v130), v130);
    float64x2_t v292 = v130;
    double v279 = v130.f64[0];
    do
    {
      uint64_t v132 = v124[2];
      uint64_t v131 = v124[3];
      while (v132 != v131)
      {
        v133.f64[1] = v292.f64[1];
        unint64_t v134 = *(void *)&v292.f64[0] & 0xFFFFFFFFFFFFFF00;
        int8x8_t v135 = *(int8x8_t *)((char *)this + 2120);
        if (!*(void *)&v135) {
          goto LABEL_92;
        }
        unint64_t v136 = *(void *)(v132 + 16);
        unint64_t v137 = 0x9DDFEA08EB382D69 * (((8 * v136) + 8) ^ HIDWORD(v136));
        unint64_t v138 = 0x9DDFEA08EB382D69 * (HIDWORD(v136) ^ (v137 >> 47) ^ v137);
        unint64_t v139 = 0x9DDFEA08EB382D69 * (v138 ^ (v138 >> 47));
        uint8x8_t v140 = (uint8x8_t)vcnt_s8(v135);
        v140.i16[0] = vaddlv_u8(v140);
        if (v140.u32[0] > 1uLL)
        {
          unint64_t v141 = v139;
          if (v139 >= *(void *)&v135) {
            unint64_t v141 = v139 % *(void *)&v135;
          }
        }
        else
        {
          unint64_t v141 = v139 & (*(void *)&v135 - 1);
        }
        float v142 = *(void **)(*((void *)this + 264) + 8 * v141);
        if (!v142)
        {
LABEL_92:
          int v160 = 1;
          *(void *)&v133.f64[0] = v134;
          float64x2_t v292 = v133;
          goto LABEL_94;
        }
        float v143 = (void *)*v142;
        if (!*v142)
        {
LABEL_93:
          int v160 = 1;
          *(void *)&v133.f64[0] = *(void *)&v292.f64[0] & 0xFFFFFFFFFFFFFF00;
          float64x2_t v292 = v133;
          this = v280;
          goto LABEL_94;
        }
        if (v140.u32[0] < 2uLL)
        {
          uint64_t v144 = *(void *)&v135 - 1;
          float v145 = v275;
          while (1)
          {
            uint64_t v146 = v143[1];
            if (v146 == v139)
            {
              if (v143[2] == v136) {
                goto LABEL_83;
              }
            }
            else if ((v146 & v144) != v141)
            {
              goto LABEL_93;
            }
            float v143 = (void *)*v143;
            if (!v143) {
              goto LABEL_93;
            }
          }
        }
        float v145 = v275;
        while (1)
        {
          unint64_t v147 = v143[1];
          if (v147 == v139) {
            break;
          }
          if (v147 >= *(void *)&v135) {
            v147 %= *(void *)&v135;
          }
          if (v147 != v141) {
            goto LABEL_93;
          }
LABEL_77:
          float v143 = (void *)*v143;
          if (!v143) {
            goto LABEL_93;
          }
        }
        if (v143[2] != v136) {
          goto LABEL_77;
        }
LABEL_83:
        unint64_t v148 = (double *)v143[3];
        long long v149 = (double *)operator new(0x38uLL);
        uint64_t v150 = v149;
        long long v151 = *((_OWORD *)v148 + 1);
        long long v152 = *((_OWORD *)v148 + 2);
        v149[6] = v148[6];
        *((_OWORD *)v149 + 1) = v151;
        *((_OWORD *)v149 + 2) = v152;
        uint64_t v153 = *((void *)v280 + 261);
        *(void *)(v153 + 8) = v149;
        *((void *)v280 + 261) = v149;
        *(void *)long long v149 = v153;
        *((void *)v149 + 1) = v145;
        float v154 = (double *)*((void *)v280 + 269);
        if (v154 == v148)
        {
          float v155 = (double *)*((void *)v148 + 1);
          goto LABEL_87;
        }
        float v155 = v149;
        if (v154 == v145) {
LABEL_87:
        }
          *((void *)v280 + 269) = v155;
        uint64_t v156 = *(void *)v148;
        *(double *)(v156 + 8) = v148[1];
        **((void **)v148 + 1) = v156;
        operator delete(v148);
        v143[3] = v150;
        if (v150 == v145) {
          goto LABEL_93;
        }
        double v158 = *(double *)(*(void *)(v132 + 16) + 224) * 0.2;
        v157.f64[0] = v150[3];
        float64x2_t v292 = v157;
        this = v280;
        if (vabdd_f64(*(double *)(v132 + 40), v157.f64[0]) >= v158)
        {
          double v159 = v150[4];
        }
        else
        {
          double v159 = v150[4];
          if (vabdd_f64(*(double *)(v132 + 48), v159) < v158 && vabdd_f64(*(double *)(v132 + 56), v150[5]) < v158) {
            goto LABEL_92;
          }
        }
        int v160 = 0;
        double v279 = v159;
LABEL_94:
        switch(*(unsigned char *)(v132 + 104))
        {
          case 3:
            int v161 = -16711681;
            goto LABEL_102;
          case 0x15:
            int v161 = -256;
            goto LABEL_102;
          case 0x16:
          case 0x17:
          case 0x18:
            int v161 = -16744193;
            goto LABEL_102;
          case 0x1D:
          case 0x21:
            int v161 = -16776961;
            goto LABEL_102;
          case 0x20:
            int v161 = -8388480;
            goto LABEL_102;
          case 0x25:
            LODWORD(v367) = -1;
            goto LABEL_103;
          default:
            int v161 = -16777216;
LABEL_102:
            LODWORD(v367) = v161;
LABEL_103:
            if ((*(unsigned int (**)(void))(*(void *)*v124 + 264))(*v124) != 26)
            {
              if ((*(unsigned int (**)(void))(*(void *)*v124 + 264))(*v124) == 25)
              {
                uint64_t v175 = (double *)(v132 + 40);
                goto LABEL_109;
              }
              int v176 = (*(uint64_t (**)(void))(*(void *)*v124 + 264))(*v124);
              uint64_t v175 = (double *)(v132 + 40);
              if (v176 == 27)
              {
LABEL_109:
                md::DebugConsoleMapRect::drawWorldCircleWithPixelRadius((uint64_t)v338, v123, &v367, v160, *v175, v175[1]);
                if (v160) {
                  goto LABEL_114;
                }
                double v177 = v292.f64[0];
                double v178 = v279;
                unsigned int v179 = v123;
              }
              else
              {
                md::DebugConsoleMapRect::drawWorldCircleWithPixelRadius((uint64_t)v338, v273, &v367, v160, *v175, *(double *)(v132 + 48));
                if (v160) {
                  goto LABEL_114;
                }
                double v177 = v292.f64[0];
                double v178 = v279;
                unsigned int v179 = v273;
              }
              md::DebugConsoleMapRect::drawWorldCircleWithPixelRadius((uint64_t)v338, v179, &v367, 1, v177, v178);
              goto LABEL_114;
            }
            _Q0 = *(float32x4_t *)(v132 + 40);
            _D1 = v345.f64[0];
            __asm { FMLA            D3, D1, V0.D[1] }
            _D1 = v345.f64[1];
            _D2 = *(float32x2_t *)&v346;
            __asm
            {
              FMLA            D4, D1, V0.D[1]
              FMLA            D1, D2, V0.D[1]
            }
            *(double *)_Q0.i64 = 1.0 / _D1;
            *(float *)&_D1 = 1.0 / _D1 * _D3;
            _Q0.f32[0] = *(double *)_Q0.i64 * _D4;
            _D2.f32[0] = v351 * _Q0.f32[0];
            _D2.i32[1] = v355;
            LODWORD(_D4) = v354;
            *((float *)&_D4 + 1) = v352 * _Q0.f32[0];
            *(float32x2_t *)_Q0.f32 = vmul_n_f32(vadd_f32(vmla_n_f32(*(float32x2_t *)&_D4, v349, *(float *)&_D1), _D2), 1.0/ (float)((float)(v356 + (float)(v350 * *(float *)&_D1))+ (float)(v353 * _Q0.f32[0])));
            _Q0.i64[1] = _Q0.i64[0];
            *(void *)&long long v169 = vsubq_f32(_Q0, v288).u64[0];
            *((void *)&v169 + 1) = vaddq_f32(_Q0, v288).i64[1];
            *(_OWORD *)int64_t v370 = v169;
            md::DebugConsoleMapRect::drawPixelRect((uint64_t)v338, (float *)v370, (__int8 *)&v367, v160);
            if ((v160 & 1) == 0)
            {
              v170.i32[0] = v354;
              float32x2_t v171 = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v347, v343, v292.f64[0]), v345, v279), 1.0 / (v348 + v344 * v292.f64[0] + v346 * v279)));
              v172.f32[0] = vmuls_lane_f32(v351, v171, 1);
              v172.i32[1] = v355;
              v170.i32[1] = vmuls_lane_f32(v352, v171, 1);
              *(float32x2_t *)v173.f32 = vmul_n_f32(vadd_f32(vmla_n_f32(v170, v349, v171.f32[0]), v172), 1.0/ (float)(vaddv_f32(vmul_f32((float32x2_t)__PAIR64__(LODWORD(v353), LODWORD(v350)), v171))+ v356));
              v173.i64[1] = v173.i64[0];
              *(void *)&long long v174 = vsubq_f32(v173, v288).u64[0];
              *((void *)&v174 + 1) = vaddq_f32(v173, v288).i64[1];
              *(_OWORD *)int64_t v370 = v174;
              md::DebugConsoleMapRect::drawPixelRect((uint64_t)v338, (float *)v370, (__int8 *)&v367, 1);
            }
LABEL_114:
            if (*(unsigned char *)(v132 + 76))
            {
              float64x2_t v180 = vcvtq_f64_f32(*(float32x2_t *)(v132 + 64));
              float32x2_t v181 = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(vsub_f32(v340, v339)), vsubq_f64(v342, v341)));
              *(_OWORD *)int64_t v370 = *(_OWORD *)(v132 + 40);
              *(float64x2_t *)&v370[16] = vmulq_n_f64(v180, (float)(v129 / fminf(v181.f32[1], v181.f32[0]))/ sqrt(vaddvq_f64(vmulq_f64(v180, v180))));
              md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v338, (double *)v370, &v367);
            }
            if (fabsf(*(float *)(*(void *)(v132 + 16) + 808)) > 0.0001 && *(unsigned char *)(v132 + 92))
            {
              long long v182 = *(_OWORD *)(v132 + 40);
              float64x2_t v183 = vcvtq_f64_f32(*(float32x2_t *)(v132 + 80));
              LODWORD(v364[0]) = -65536;
              float32x2_t v184 = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(vsub_f32(v340, v339)), vsubq_f64(v342, v341)));
              *(_OWORD *)int64_t v370 = v182;
              *(float64x2_t *)&v370[16] = vmulq_n_f64(v183, (float)(v129 / fminf(v184.f32[1], v184.f32[0]))/ sqrt(vaddvq_f64(vmulq_f64(v183, v183))));
              md::DebugConsoleMapRect::drawWorldSegment((uint64_t)v338, (double *)v370, v364);
            }
            v132 += 128;
            break;
        }
      }
      v124 += 5;
    }
    while (v124 != v271);
  }
  if (VectorKitDebugConfig_ARDebugMinimapShowBuildings) {
    _ZF = off_1E9570420 == 0;
  }
  else {
    _ZF = 1;
  }
  double v186 = v283;
  if (!_ZF && !GEOConfigGetBOOL()) {
    goto LABEL_194;
  }
  double v187 = (void *)*((void *)this + 275);
  if (!v187) {
    goto LABEL_194;
  }
  v364[0] = &unk_1EF57D908;
  v364[1] = v338;
  uint64_t v365 = v364;
  v362[0] = &unk_1EF57D950;
  v362[1] = this;
  v362[2] = v338;
  uint64_t v363 = v362;
  memset(v370, 0, 32);
  *(_DWORD *)&v370[32] = 1065353216;
  double v188 = (void *)*v187;
  if ((void *)*v187 == v187 + 1) {
    goto LABEL_175;
  }
  while (2)
  {
    uint64_t v189 = v188[4];
    float v190 = *(int8x8_t **)(v189 + 784);
    int8x8_t v191 = v190[1];
    if (!*(void *)&v191) {
      goto LABEL_154;
    }
    uint8x8_t v192 = (uint8x8_t)vcnt_s8(v191);
    v192.i16[0] = vaddlv_u8(v192);
    if (v192.u32[0] > 1uLL)
    {
      uint64_t v193 = 0x64A448A5CD5D38DBLL;
      if (*(void *)&v191 <= 0x64A448A5CD5D38DBuLL) {
        uint64_t v193 = 0x64A448A5CD5D38DBuLL % *(void *)&v191;
      }
    }
    else
    {
      uint64_t v193 = (*(void *)&v191 - 1) & 0x64A448A5CD5D38DBLL;
    }
    float v194 = *(void **)(*(void *)v190 + 8 * v193);
    if (!v194) {
      goto LABEL_154;
    }
    float v195 = (void *)*v194;
    if (!v195) {
      goto LABEL_154;
    }
    if (v192.u32[0] < 2uLL)
    {
      uint64_t v196 = *(void *)&v191 - 1;
      while (1)
      {
        uint64_t v198 = v195[1];
        if (v198 == 0x64A448A5CD5D38DBLL)
        {
          if (v195[2] == 0x64A448A5CD5D38DBLL) {
            goto LABEL_151;
          }
        }
        else if ((v198 & v196) != v193)
        {
          goto LABEL_154;
        }
        float v195 = (void *)*v195;
        if (!v195) {
          goto LABEL_154;
        }
      }
    }
    while (1)
    {
      unint64_t v197 = v195[1];
      if (v197 == 0x64A448A5CD5D38DBLL) {
        break;
      }
      if (v197 >= *(void *)&v191) {
        v197 %= *(void *)&v191;
      }
      if (v197 != v193) {
        goto LABEL_154;
      }
LABEL_140:
      float v195 = (void *)*v195;
      if (!v195) {
        goto LABEL_154;
      }
    }
    if (v195[2] != 0x64A448A5CD5D38DBLL) {
      goto LABEL_140;
    }
LABEL_151:
    uint64_t v199 = v195[5];
    if (*(void *)(v199 + 8) == 0x64A448A5CD5D38DBLL)
    {
      uint64_t v200 = *(void *)(v199 + 32);
      uint64_t v201 = v365;
      if (!v365) {
        goto LABEL_157;
      }
LABEL_155:
      if (((*(uint64_t (**)(void *, uint64_t))(*v201 + 48))(v201, v200 + 128) & 1) == 0)
      {
        uint64_t v189 = v188[4];
        goto LABEL_157;
      }
      goto LABEL_165;
    }
LABEL_154:
    uint64_t v200 = 0;
    uint64_t v201 = v365;
    if (v365) {
      goto LABEL_155;
    }
LABEL_157:
    *(void *)&float64_t v202 = v200 + 304;
    long long v367 = (void (**)(void **))&unk_1EF57DC20;
    double v368 = COERCE_DOUBLE(v362);
    v369.f64[0] = v202;
    *(void *)&v369.f64[1] = &v367;
    md::ARWorldIntersector::visitReferencedAssetOcclusionVolumes((uint64_t)v187, v189, (uint64_t)v370, (uint64_t)&v367);
    if (*(void (****)(void **))&v369.f64[1] == &v367)
    {
      v367[4]((void **)&v367);
    }
    else if (*(void *)&v369.f64[1])
    {
      (*(void (**)(void))(**(void **)&v369.f64[1] + 40))();
    }
    long long v203 = (void *)gdc::Registry::storage<arComponents::LocalBounds>(v190);
    uint64_t v205 = v203[7];
    uint64_t v204 = v203[8];
    if (v205 != v204)
    {
      uint64_t v206 = v203[10];
      do
      {
        if (!v363)
        {
LABEL_247:
          std::__throw_bad_function_call[abi:nn180100]();
          __break(1u);
        }
        (*(void (**)(void *, float64_t, uint64_t))(*v363 + 48))(v363, COERCE_FLOAT64_T(*(void *)&v202), v206);
        v206 += 168;
        v205 += 8;
      }
      while (v205 != v204);
    }
LABEL_165:
    long long v207 = (void *)v188[1];
    if (v207)
    {
      do
      {
        long long v208 = v207;
        long long v207 = (void *)*v207;
      }
      while (v207);
    }
    else
    {
      do
      {
        long long v208 = (void *)v188[2];
        _ZF = *v208 == (void)v188;
        double v188 = v208;
      }
      while (!_ZF);
    }
    double v188 = v208;
    if (v208 != v187 + 1) {
      continue;
    }
    break;
  }
  long long v209 = *(void **)&v370[16];
  if (*(void *)&v370[16])
  {
    do
    {
      long long v210 = (void *)*v209;
      operator delete(v209);
      long long v209 = v210;
    }
    while (v210);
  }
  long long v211 = *(void **)v370;
  *(void *)int64_t v370 = 0;
  this = v280;
  double v186 = v283;
  if (v211) {
    operator delete(v211);
  }
LABEL_175:
  if (v363 == v362)
  {
    (*(void (**)(void *))(v362[0] + 32))(v362);
  }
  else if (v363)
  {
    (*(void (**)(void))(*v363 + 40))();
  }
  if (v365 == v364)
  {
    (*(void (**)(void *))(v364[0] + 32))(v364);
  }
  else if (v365)
  {
    (*(void (**)(void))(*v365 + 40))();
  }
  uint64_t v212 = *((void *)this + 275);
  long long v367 = (void (**)(void **))&unk_1EF57D908;
  double v368 = COERCE_DOUBLE(v338);
  *(void *)&v369.f64[1] = &v367;
  v360[0] = &unk_1EF57D998;
  v360[1] = this;
  v360[2] = v338;
  long long v361 = v360;
  int v213 = *(float64x2_t **)(v212 + 104);
  unint64_t v214 = *(float64x2_t **)(v212 + 112);
  if (v213 == v214) {
    goto LABEL_189;
  }
  do
  {
    long long v374 = 0u;
    long long v375 = 0u;
    long long v371 = 0u;
    uint64_t v372 = 0;
    memset(&v370[8], 0, 48);
    *(void *)int64_t v370 = 0x3FF0000000000000;
    *(void *)&v370[40] = 0x3FF0000000000000;
    uint64_t v373 = 0x3FF0000000000000;
    uint64_t v376 = 0x3FF0000000000000;
    float32x4_t v358 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v213), v213[1]);
    float32x2_t v359 = vcvt_f32_f64(v213[2]);
    if (!v361) {
      goto LABEL_247;
    }
    (*(void (**)(void *, unsigned char *, float32x4_t *))(*v361 + 48))(v361, v370, &v358);
    v213 += 3;
  }
  while (v213 != v214);
  if (v361 == v360)
  {
LABEL_189:
    (*(void (**)(void *))(v360[0] + 32))(v360);
  }
  else if (v361)
  {
    (*(void (**)(void))(*v361 + 40))();
  }
  if (*(void (****)(void **))&v369.f64[1] == &v367)
  {
    v367[4]((void **)&v367);
  }
  else if (*(void *)&v369.f64[1])
  {
    (*(void (**)(void))(**(void **)&v369.f64[1] + 40))();
  }
LABEL_194:
  if (VectorKitDebugConfig_ARDebugMinimapShowTileSelection) {
    BOOL v215 = off_1E9570430 == 0;
  }
  else {
    BOOL v215 = 1;
  }
  if (v215 || GEOConfigGetBOOL())
  {
    uint64_t v216 = *((void *)this + 6);
    *(void *)&v370[16] = 0;
    *(void *)&v370[8] = 0;
    *(void *)int64_t v370 = &v370[8];
    *(int64x2_t *)&v370[24] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    *(int64x2_t *)&v370[40] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    uint64_t v217 = *(void *)(v216 + 16);
    uint64_t v218 = *(void *)(v216 + 24);
    if (v217 != v218)
    {
      do
      {
        uint64_t v219 = (double *)(*(void *)v217 + 40);
        if (*(unsigned __int8 *)(*(void *)v217 + 9) < 0x15u)
        {
          v358.i32[0] = -16776961;
          md::DebugConsoleMapRect::drawWorldRect((uint64_t)v338, v219, (__int8 *)&v358, 0);
        }
        else
        {
          md::MultiRectRegion::addRect((double **)v370, v219);
        }
        v217 += 16;
      }
      while (v217 != v218);
      if (*(void *)&v370[16])
      {
        v358.i32[0] = -16711681;
        md::DebugConsoleMapRect::drawWorldRect((uint64_t)v338, (double *)&v370[24], (__int8 *)&v358, 0);
        unint64_t v220 = *(double **)v370;
        if (*(unsigned char **)v370 != &v370[8])
        {
          do
          {
            v358.i32[0] = -16711681;
            md::DebugConsoleMapRect::drawWorldRect((uint64_t)v338, v220 + 4, (__int8 *)&v358, 0);
            BOOL v231 = (double *)*((void *)v220 + 1);
            if (v231)
            {
              do
              {
                unint64_t v232 = v231;
                BOOL v231 = *(double **)v231;
              }
              while (v231);
            }
            else
            {
              do
              {
                unint64_t v232 = (double *)*((void *)v220 + 2);
                _ZF = *(void *)v232 == (void)v220;
                unint64_t v220 = v232;
              }
              while (!_ZF);
            }
            unint64_t v220 = v232;
          }
          while (v232 != (double *)&v370[8]);
        }
      }
    }
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)&v370[8]);
  }
  if (VectorKitDebugConfig_ARDebugMinimapShowBuildingTileSelection) {
    BOOL v221 = off_1E9570440 == 0;
  }
  else {
    BOOL v221 = 1;
  }
  if (!v221 && !GEOConfigGetBOOL())
  {
LABEL_236:
    unint64_t v233 = (void *)*((void *)this + 256);
    if (v233) {
      goto LABEL_240;
    }
    goto LABEL_241;
  }
  uint8x8_t v222 = (void *)*((void *)this + 275);
  unsigned int v223 = (void (**)(unsigned char *))&unk_1EF57D9E0;
  *(void *)int64_t v370 = &unk_1EF57D9E0;
  *(void *)&v370[8] = v338;
  *(void *)&v370[24] = v370;
  uint64_t v226 = (void *)*v222;
  unsigned int v224 = v222 + 1;
  unint64_t v225 = v226;
  if (v226 != v224)
  {
    do
    {
      uint64_t v227 = v225[4];
      if (v227) {
        uint64_t v228 = v227 + 168;
      }
      else {
        uint64_t v228 = 0;
      }
      v358.i64[0] = v228;
      if (!*(void *)&v370[24]) {
        goto LABEL_247;
      }
      (*(void (**)(void, float32x4_t *))(**(void **)&v370[24] + 48))(*(void *)&v370[24], &v358);
      float v229 = (void *)v225[1];
      if (v229)
      {
        do
        {
          unsigned int v230 = v229;
          float v229 = (void *)*v229;
        }
        while (v229);
      }
      else
      {
        do
        {
          unsigned int v230 = (void *)v225[2];
          _ZF = *v230 == (void)v225;
          unint64_t v225 = v230;
        }
        while (!_ZF);
      }
      unint64_t v225 = v230;
    }
    while (v230 != v224);
    if (*(unsigned char **)&v370[24] == v370)
    {
      unsigned int v223 = *(void (***)(unsigned char *))v370;
      goto LABEL_239;
    }
    if (*(void *)&v370[24]) {
      (*(void (**)(void))(**(void **)&v370[24] + 40))();
    }
    goto LABEL_236;
  }
LABEL_239:
  v223[4](v370);
  unint64_t v233 = (void *)*((void *)this + 256);
  if (v233)
  {
LABEL_240:
    id v234 = v233;
    unint64_t v235 = [v234 routeInfo];
    uint8x8_t v236 = [v235 route];

    [v236 pointAtRouteCoordinate:*(void *)(*((void *)this + 3) + 3560)];
    float64_t v293 = v237;
    long double v239 = tan(v238 * v243 + 0.785398163);
    long double v240 = log(v239);
    v241.f64[0] = v293;
    v241.f64[1] = v240;
    float64x2_t v242 = vmlaq_f64(v268, (float64x2_t)xmmword_1A28FCBE0, v241);
    v358.i32[0] = 127;
    md::DebugConsoleMapRect::drawWorldCircleWithPixelRadius((uint64_t)v338, v123, &v358, 1, v242.f64[0], v242.f64[1]);
  }
LABEL_241:

LABEL_242:
  if (*((unsigned char *)this + 402)) {
    md::ARWalkingLabeler::debugOutputLabelState(this, v269);
  }
}

void sub_1A27C2E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id a35)
{
  _Unwind_Resume(a1);
}

BOOL md::ARWalkingLabeler::needsDebugDraw(md::ARWalkingLabeler *this)
{
  uint64_t v2 = *((void *)this + 23);
  if (v2)
  {
    unsigned __int8 v3 = atomic_load((unsigned __int8 *)(v2 + 1242));
    if ((v3 & 1) == 0) {
      (*(void (**)(md::ARWalkingLabeler *))(*(void *)this + 272))(this);
    }
  }
  uint64_t v4 = *((void *)this + 3);
  return *(unsigned char *)(v4 + 3616)
      || *(unsigned char *)(v4 + 3623)
      || *((void *)this + 23)
      || *((void *)this + 25)
      || *((unsigned char *)this + 402)
      || *((unsigned char *)this + 403)
      || *((unsigned char *)this + 404) != 0;
}

void md::ARWalkingLabeler::updateDebugSettings(md::ARWalkingLabeler *this)
{
  id v5 = +[VKDebugSettings sharedSettings];
  *((unsigned char *)this + 402) = [v5 arLabelingStateOverlay];
  *((unsigned char *)this + 403) = [v5 arDebugMiniMap];
  *((unsigned char *)this + 404) = [v5 arDebugDrawLabelFeatureBounds];
  int v2 = *((_DWORD *)this + 108);
  [v5 arManeuverDebugElevationOffset];
  if (v2 != v3)
  {
    [v5 arManeuverDebugElevationOffset];
    *((_DWORD *)this + 108) = v4;
    md::ARWalkingSupport::setARWalkingFeatures(*((md::ARWalkingSupport **)this + 55), *(VKARWalkingFeatureSet **)(*((void *)this + 55) + 448), 1);
  }
}

void sub_1A27C3154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void md::ARWalkingLabeler::getLabelMarkers(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[3];
  float v3 = *(std::__shared_weak_count **)(v2 + 16);
  uint64_t v48 = *(void *)(v2 + 8);
  if (!v3 || (id v5 = std::__shared_weak_count::lock(v3), (v49 = v5) == 0))
  {
    std::__throw_bad_weak_ptr[abi:nn180100]();
    long double v27 = v26;
    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&v30);
    md::LabelFeatureInfo::~LabelFeatureInfo((md::LabelFeatureInfo *)&v33);
    std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)&v48);
    _Unwind_Resume(v27);
  }
  uint64_t v6 = a1[271];
  uint64_t v28 = a1[272];
  if (v6 != v28)
  {
    uint64_t v7 = v6 + 8;
    while (1)
    {
      uint64_t v33 = 0;
      char v34 = 0;
      long long v35 = 0u;
      long long v36 = 0u;
      uint64_t v37 = 0;
      {
        operator new();
      }
      uint64_t v38 = mdm::Allocator::instance(void)::alloc;
      int v39 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      uint64_t v40 = 0;
      {
        operator new();
      }
      uint64_t v43 = mdm::Allocator::instance(void)::alloc;
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      uint64_t v44 = 0;
      {
        operator new();
      }
      uint64_t v47 = mdm::Allocator::instance(void)::alloc;
      md::Label::populateFeatureInfo(*(md::Label **)v7, (md::LabelFeatureInfo *)&v33, 0);
      uint64_t v9 = *(md::Label **)v7;
      int v31 = *(md::Label **)v7;
      float64x2_t v10 = *(std::__shared_weak_count **)(v7 + 8);
      double v32 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v11 = (*(uint64_t (**)(void))(**((void **)v9 + 1) + 264))(*((void *)v9 + 1));
      uint64_t v12 = (unsigned char *)*((void *)v9 + 1);
      if (v11 == 24)
      {
        if (v12[809]) {
          goto LABEL_20;
        }
      }
      else
      {
        int v13 = (*(uint64_t (**)(unsigned char *))(*(void *)v12 + 264))(v12);
        double v14 = (unsigned char *)*((void *)v9 + 1);
        if (v13 == 26)
        {
          if (v14[418]) {
            goto LABEL_20;
          }
        }
        else if (((*(unsigned int (**)(unsigned char *))(*(void *)v14 + 264))(v14) == 25 {
                || (*(unsigned int (**)(void))(**((void **)v9 + 1) + 264))(*((void *)v9 + 1)) == 27)
        }
               && *(unsigned char *)(*((void *)v9 + 1) + 720))
        {
LABEL_20:
          BOOL v15 = 1;
          if (!v10) {
            goto LABEL_25;
          }
          goto LABEL_23;
        }
      }
      BOOL v15 = *(unsigned __int8 *)(v7 - 8) - 22 < 3;
      if (!v10) {
        goto LABEL_25;
      }
LABEL_23:
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
LABEL_25:
      float v16 = *(float *)(a1[3] + 176);
      uint64_t v17 = (std::__shared_weak_count *)operator new(0x170uLL);
      v17->__shared_owners_ = 0;
      p_shared_owners = &v17->__shared_owners_;
      v17->__shared_weak_owners_ = 0;
      v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580E58;
      long double v19 = v17 + 1;
      md::StandardLabelMarker::StandardLabelMarker((uint64_t)&v17[1], v48, v49, (uint64_t *)v7, (uint64_t)&v33, v16);
      v17[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF53D078;
      BYTE6(v17[15].__vftable) = v15;
      shared_weak_owners = (std::__shared_weak_count *)v17[1].__shared_weak_owners_;
      if (shared_weak_owners)
      {
        if (shared_weak_owners->__shared_owners_ != -1) {
          goto LABEL_31;
        }
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v17[1].__shared_owners_ = (uint64_t)v19;
        v17[1].__shared_weak_owners_ = (uint64_t)v17;
        std::__shared_weak_count::__release_weak(shared_weak_owners);
      }
      else
      {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v17[1].__shared_owners_ = (uint64_t)v19;
        v17[1].__shared_weak_owners_ = (uint64_t)v17;
      }
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
LABEL_31:
      *(void *)&long long v30 = v17 + 1;
      *((void *)&v30 + 1) = v17;
      long double v21 = *(std::__shared_weak_count ***)(a2 + 8);
      if ((unint64_t)v21 >= *(void *)(a2 + 16))
      {
        long double v22 = std::vector<std::shared_ptr<md::LabelMarker>,geo::StdAllocator<std::shared_ptr<md::LabelMarker>,mdm::Allocator>>::__push_back_slow_path<std::shared_ptr<md::LabelMarker> const&>(a2, &v30);
      }
      else
      {
        if (v21)
        {
          *long double v21 = v19;
          v21[1] = v17;
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long double v22 = v21 + 2;
      }
      *(void *)(a2 + 8) = v22;
      if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
        if ((SHIBYTE(v46) & 0x80000000) == 0) {
          goto LABEL_38;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        if ((SHIBYTE(v46) & 0x80000000) == 0)
        {
LABEL_38:
          if ((SHIBYTE(v42) & 0x80000000) == 0) {
            goto LABEL_39;
          }
          goto LABEL_46;
        }
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v47 + 40))(v47, v44, v46 & 0x7FFFFFFFFFFFFFFFLL);
      if ((SHIBYTE(v42) & 0x80000000) == 0)
      {
LABEL_39:
        uint64_t v23 = v36;
        if (!(void)v36) {
          goto LABEL_41;
        }
LABEL_40:
        *((void *)&v36 + 1) = v23;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v38 + 40))(v38, v23, v37 - v23);
        goto LABEL_41;
      }
LABEL_46:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v43 + 40))(v43, v40, v42 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v23 = v36;
      if ((void)v36) {
        goto LABEL_40;
      }
LABEL_41:
      long double v24 = (std::__shared_weak_count *)*((void *)&v35 + 1);
      if (*((void *)&v35 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
      uint64_t v8 = v7 + 16;
      v7 += 24;
      if (v8 == v28)
      {
        long double v25 = v49;
        if (!v49) {
          return;
        }
        goto LABEL_57;
      }
    }
  }
  long double v25 = v5;
LABEL_57:
  if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
}

uint64_t md::ARWalkingLabelMarker::isOccluded(md::ARWalkingLabelMarker *this)
{
  return *((unsigned __int8 *)this + 342);
}

void md::ARWalkingLabelMarker::~ARWalkingLabelMarker(md::ARWalkingLabelMarker *this)
{
  md::StandardLabelMarker::~StandardLabelMarker(this);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<md::ARWalkingLabelMarker>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::ARWalkingLabelMarker>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580E58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::ARWalkingLabelMarker>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580E58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::ARWalkingLabeler::restyleActiveLabels(md::ARWalkingLabeler *this)
{
  uint64_t v1 = this;
  uint64_t v2 = (void *)*((void *)this + 55);
  char v34 = 0;
  long long v35 = 0;
  long long v36 = 0;
  {
    operator new();
  }
  uint64_t v37 = mdm::Allocator::instance(void)::alloc;
  uint64_t v3 = v2[59] - v2[58];
  if (v3)
  {
    unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (v3 >> 3);
    if (v4 >> 61) {
      abort();
    }
    id v5 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc
                                                                         + 16))(mdm::Allocator::instance(void)::alloc, 0x5555555555555558 * (v3 >> 3), 8);
    uint64_t v6 = v5;
    char v34 = v5;
    long long v35 = v5;
    long long v36 = &v5[v4];
    uint64_t v7 = v2[58];
    uint64_t v8 = v2[59];
    if (v7 != v8)
    {
      uint64_t v33 = v1;
      while (1)
      {
        uint64_t v9 = *(void *)(v7 + 8);
        float64x2_t v10 = v36;
        if (v6 >= v36) {
          break;
        }
        if (v6) {
          *uint64_t v6 = v9;
        }
        ++v6;
LABEL_7:
        long long v35 = v6;
        v7 += 24;
        if (v7 == v8)
        {
          uint64_t v1 = v33;
          uint64_t v28 = v34;
          goto LABEL_39;
        }
      }
      int v11 = v34;
      uint64_t v12 = v6 - v34;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61) {
        abort();
      }
      if (((char *)v36 - (char *)v34) >> 2 > v13) {
        unint64_t v13 = ((char *)v36 - (char *)v34) >> 2;
      }
      if ((unint64_t)((char *)v36 - (char *)v34) >= 0x7FFFFFFFFFFFFFF8) {
        uint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v14 = v13;
      }
      if (v14)
      {
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v37 + 16))(v37, 8 * v14, 8);
        float v16 = (uint64_t *)(v15 + 8 * v12);
        uint64_t v17 = v15 + 8 * v14;
        if (v15) {
          uint64_t *v16 = v9;
        }
        int64_t v18 = (char *)v6 - (char *)v11;
        if (v6 != v11)
        {
LABEL_21:
          unint64_t v19 = v18 - 8;
          if (v19 < 0x138
            || (uint64_t *)((char *)v16 - (v19 & 0xFFFFFFFFFFFFFFF8) - 8) > v16 - 1
            || (uint64_t *)((char *)v6 - (v19 & 0xFFFFFFFFFFFFFFF8) - 8) > v6 - 1
            || (unint64_t)((char *)v6 - (char *)v16) < 0x20)
          {
            long double v20 = v6;
            long double v21 = v16;
          }
          else
          {
            uint64_t v23 = (v19 >> 3) + 1;
            long double v20 = &v6[-(v23 & 0x3FFFFFFFFFFFFFFCLL)];
            long double v24 = v16 - 2;
            long double v25 = v6 - 2;
            uint64_t v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v27 = *(_OWORD *)v25;
              *((_OWORD *)v24 - 1) = *((_OWORD *)v25 - 1);
              *(_OWORD *)long double v24 = v27;
              v24 -= 4;
              v25 -= 4;
              v26 -= 4;
            }
            while (v26);
            long double v21 = &v16[-(v23 & 0x3FFFFFFFFFFFFFFCLL)];
            if (v23 == (v23 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_27:
              uint64_t v6 = v16 + 1;
              char v34 = v21;
              long long v36 = (uint64_t *)v17;
              if (v11) {
                (*(void (**)(uint64_t, uint64_t *, int64_t))(*(void *)v37 + 40))(v37, v11, (char *)v10 - (char *)v11);
              }
              goto LABEL_7;
            }
          }
          do
          {
            uint64_t v22 = *--v20;
            *--long double v21 = v22;
          }
          while (v20 != v11);
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v17 = 0;
        float v16 = (uint64_t *)(8 * v12);
        int64_t v18 = (char *)v6 - (char *)v34;
        if (v6 != v34) {
          goto LABEL_21;
        }
      }
      long double v21 = v16;
      int v11 = v6;
      goto LABEL_27;
    }
    uint64_t v28 = v5;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v28 = 0;
  }
LABEL_39:
  md::LabelFeatureStyler::restyleFeatures(*(void *)(*v2 + 296), &v34);
  if (v34)
  {
    long long v35 = v34;
    (*(void (**)(uint64_t, uint64_t *, int64_t))(*(void *)v37 + 40))(v37, v34, (char *)v36 - (char *)v34);
  }
  if (v28 != v6)
  {
    uint64_t v29 = *v2;
    *(unsigned char *)(v29 + 3041) = 1;
    unsigned __int8 v30 = atomic_load((unsigned __int8 *)(v29 + 3058));
    if (v30)
    {
      uint64_t v31 = *(void *)(v29 + 136);
      if (v31)
      {
        uint64_t v32 = *(void *)(v31 + 56);
        if (v32)
        {
          char v34 = (uint64_t *)v29;
          char v38 = 9;
          (*(void (**)(uint64_t, uint64_t **, char *))(*(void *)v32 + 48))(v32, &v34, &v38);
        }
      }
    }
  }
  md::StandardLabeler::restyleActiveLabels(v1);
}

void sub_1A27C3D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a10) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a13 + 40))(a13, a10, a12 - a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t md::ARWalkingLabeler::checkNeedsOcclusionTests(md::ARWalkingLabeler *this, const md::LayoutContext *a2)
{
  return 0;
}

BOOL md::ARWalkingLabeler::needsForceLayoutAllLabels(md::ARWalkingLabeler *this)
{
  if (*((unsigned char *)this + 372))
  {
    *((unsigned char *)this + 372) = 0;
    return 1;
  }
  else
  {
    return *((unsigned char *)this + 400) && *((unsigned char *)this + 1712) != 0;
  }
}

void *md::ARWalkingLabeler::render(md::ARWalkingLabeler *this, const md::LayoutContext *a2, md::LabelRenderModel *a3, __n128 a4)
{
  if (*((unsigned char *)this + 370)) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = *((unsigned char *)this + 371) == 0;
  }
  uint64_t v7 = (md::Label **)*((void *)this + 13);
  uint64_t v8 = (md::Label **)*((void *)this + 14);
  if (v7 != v8)
  {
    while (1)
    {
      uint64_t v9 = *v7;
      if (*((unsigned char *)*v7 + 1072))
      {
        int v10 = (*(uint64_t (**)(md::Label *, uint64_t))(*(void *)v9 + 48))(*v7, *((void *)this + 3) + 1176);
        uint64_t v9 = *v7;
        if (v10)
        {
          uint64_t v11 = *((void *)v9 + 37);
          if ((v11 || (uint64_t v11 = *((void *)v9 + 34)) != 0) && *((float *)v9 + 110) >= 0.0)
          {
            uint64_t v12 = *((void *)v9 + 38);
            if (v12) {
              (*(void (**)(uint64_t, md::LabelRenderModel *, float))(*(void *)v12 + 128))(v12, a3, 1.0);
            }
            float v13 = *((float *)v9 + 267) * *((float *)v9 + 281);
            if (v13 >= 0.0039062
              || *((void *)v9 + 148)
              || (*(unsigned int (**)(uint64_t))(*(void *)v11 + 704))(v11))
            {
              (*(void (**)(uint64_t, md::LabelRenderModel *, float))(*(void *)v11 + 128))(v11, a3, v13);
            }
          }
          if (v6)
          {
            uint64_t v14 = *v7;
            if (!*((unsigned char *)*v7 + 1251)) {
              goto LABEL_52;
            }
            uint64_t v15 = *((void *)v14 + 34);
            if (v15 && ((*(uint64_t (**)(uint64_t))(*(void *)v15 + 608))(v15) & 1) != 0
              || (uint64_t v16 = *((void *)v14 + 37)) != 0
              && ((*(uint64_t (**)(uint64_t))(*(void *)v16 + 688))(v16) & 1) != 0
              || *((void *)v14 + 38))
            {
LABEL_53:
              BOOL v6 = 0;
              *((unsigned char *)this + 371) = 1;
              goto LABEL_54;
            }
            int v17 = *((unsigned __int8 *)v14 + 1072);
            if (v17 == 1)
            {
              if (*((float *)v14 + 280) < 1.0) {
                goto LABEL_53;
              }
            }
            else if (v17 != 3)
            {
              if (v17 == 2 && *((float *)v14 + 280) > 0.0) {
                goto LABEL_53;
              }
LABEL_50:
              if (*((void *)v14 + 148)) {
                goto LABEL_53;
              }
              uint64_t v14 = *v7;
LABEL_52:
              if (md::Label::isAnimating(v14)) {
                goto LABEL_53;
              }
              BOOL v6 = 1;
LABEL_54:
              ++*((_DWORD *)this + 91);
              goto LABEL_8;
            }
            if (*((float *)v14 + 288) < 1.0) {
              goto LABEL_53;
            }
            goto LABEL_50;
          }
          BOOL v6 = 0;
          goto LABEL_54;
        }
      }
      if (*((unsigned char *)v9 + 1251)) {
        break;
      }
LABEL_8:
      v7 += 2;
      if (v7 == v8) {
        goto LABEL_56;
      }
    }
    uint64_t v18 = *((void *)v9 + 34);
    if (v18
      && ((*(uint64_t (**)(uint64_t, const md::LayoutContext *))(*(void *)v18 + 608))(v18, a2) & 1) != 0
      || (uint64_t v19 = *((void *)v9 + 37)) != 0
      && ((*(uint64_t (**)(uint64_t, const md::LayoutContext *))(*(void *)v19 + 688))(v19, a2) & 1) != 0
      || *((void *)v9 + 38))
    {
LABEL_7:
      a4.n128_u32[0] = 1148846080;
      md::Label::animate(*v7, a4);
      goto LABEL_8;
    }
    int v20 = *((unsigned __int8 *)v9 + 1072);
    if (v20 == 1)
    {
      if (*((float *)v9 + 280) < 1.0) {
        goto LABEL_7;
      }
    }
    else if (v20 != 3)
    {
      if (v20 == 2 && *((float *)v9 + 280) > 0.0) {
        goto LABEL_7;
      }
      goto LABEL_46;
    }
    if (*((float *)v9 + 288) < 1.0) {
      goto LABEL_7;
    }
LABEL_46:
    if (!*((void *)v9 + 148)) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_56:
  uint64_t v21 = *(void *)(*(void *)(*((void *)this + 3) + 168) + 64);
  BOOL result = (void *)(*(uint64_t (**)(uint64_t, const md::LayoutContext *))(*(void *)v21 + 24))(v21, a2);
  uint64_t v23 = result + 1;
  if (result + 1 != (void *)((char *)a3 + 40))
  {
    long double v24 = (char *)result;
    long double v25 = (char *)*((void *)a3 + 5);
    uint64_t v26 = (char *)*((void *)a3 + 6);
    int64_t v27 = v26 - v25;
    unint64_t v28 = (v26 - v25) >> 3;
    uint64_t v29 = result[3];
    unsigned __int8 v30 = (void *)result[1];
    if (v28 <= (v29 - (uint64_t)v30) >> 3)
    {
      long long v35 = result + 2;
      uint64_t v37 = (unsigned char *)result[2];
      unint64_t v38 = (v37 - (unsigned char *)v30) >> 3;
      if (v38 >= v28)
      {
        if (v26 != v25) {
          BOOL result = memmove((void *)result[1], v25, v26 - v25);
        }
        goto LABEL_80;
      }
      int v39 = &v25[8 * v38];
      if (v37 != (unsigned char *)v30)
      {
        BOOL result = memmove((void *)result[1], v25, v37 - (unsigned char *)v30);
        unsigned __int8 v30 = (void *)*v35;
      }
      long long v36 = (char *)v30;
      if (v39 != v26)
      {
        long long v36 = (char *)v30;
        do
        {
          if (v36) {
            *(void *)long long v36 = *(void *)v39;
          }
          v39 += 8;
          v36 += 8;
        }
        while (v39 != v26);
      }
    }
    else
    {
      if (v30)
      {
        result[2] = v30;
        (*(void (**)(void, void *))(*(void *)result[4] + 40))(result[4], v30);
        uint64_t v29 = 0;
        *uint64_t v23 = 0;
        v23[1] = 0;
        v23[2] = 0;
      }
      if (v27 < 0) {
        goto LABEL_84;
      }
      uint64_t v31 = v29 >> 2;
      if (v29 >> 2 <= v28) {
        uint64_t v31 = (v26 - v25) >> 3;
      }
      BOOL v32 = (unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8;
      unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v32) {
        unint64_t v33 = v31;
      }
      if (v33 >> 61) {
LABEL_84:
      }
        abort();
      uint64_t v34 = v33;
      BOOL result = (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(**((void **)v24 + 4) + 16))(*((void *)v24 + 4), 8 * v33, 8);
      unsigned __int8 v30 = result;
      *((void *)v24 + 2) = result;
      long long v35 = v24 + 16;
      *(v35 - 1) = result;
      v35[1] = &result[v34];
      long long v36 = (char *)result;
      if (v25 != v26)
      {
        long long v36 = (char *)result;
        do
        {
          if (v36) {
            *(void *)long long v36 = *(void *)v25;
          }
          v25 += 8;
          v36 += 8;
        }
        while (v25 != v26);
      }
    }
    int64_t v27 = v36 - (char *)v30;
LABEL_80:
    *long long v35 = (char *)v30 + v27;
  }
  return result;
}

void md::ARWalkingLabeler::layoutForDisplay(md::ARWalkingLabeler *this, const md::LayoutContext *a2)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  char v103 = 0;
  __int16 v102 = 0;
  unint64_t v4 = (uint64_t *)*((void *)this + 13);
  for (uint64_t i = (uint64_t *)*((void *)this + 14); v4 != i; v4 += 2)
    md::Label::layoutForDisplay(*v4, *((void *)this + 3), (uint64_t)&v102);
  BOOL v6 = (uint64_t *)*((void *)a2 + 1);
  int8x8_t v7 = (int8x8_t)v6[1];
  if (!*(void *)&v7)
  {
    int v10 = 0;
    uint64_t v11 = 0;
    *((unsigned char *)this + 2232) = 0;
    goto LABEL_58;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    uint64_t v9 = 0x8741E659406FCBBLL;
    if (*(void *)&v7 <= 0x8741E659406FCBBuLL) {
      uint64_t v9 = 0x8741E659406FCBBuLL % *(void *)&v7;
    }
  }
  else
  {
    uint64_t v9 = (*(void *)&v7 - 1) & 0x8741E659406FCBBLL;
  }
  uint64_t v12 = *v6;
  float v13 = *(void **)(v12 + 8 * v9);
  if (!v13) {
    goto LABEL_29;
  }
  uint64_t v14 = (void *)*v13;
  if (!v14) {
    goto LABEL_29;
  }
  if (v8.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v16 = v14[1];
      if (v16 == 0x8741E659406FCBBLL)
      {
        if (v14[2] == 0x8741E659406FCBBLL) {
          goto LABEL_25;
        }
      }
      else if ((v16 & (*(void *)&v7 - 1)) != v9)
      {
        goto LABEL_29;
      }
      uint64_t v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_29;
      }
    }
  }
  while (1)
  {
    unint64_t v15 = v14[1];
    if (v15 == 0x8741E659406FCBBLL) {
      break;
    }
    if (v15 >= *(void *)&v7) {
      v15 %= *(void *)&v7;
    }
    if (v15 != v9) {
      goto LABEL_29;
    }
LABEL_14:
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      goto LABEL_29;
    }
  }
  if (v14[2] != 0x8741E659406FCBBLL) {
    goto LABEL_14;
  }
LABEL_25:
  uint64_t v17 = v14[5];
  if (*(void *)(v17 + 8) != 0x8741E659406FCBBLL)
  {
LABEL_29:
    *((unsigned char *)this + 2232) = 0;
    goto LABEL_30;
  }
  uint64_t v18 = *(unsigned char **)(v17 + 32);
  if (v18) {
    LOBYTE(v18) = *v18 != 0;
  }
  *((unsigned char *)this + 2232) = (_BYTE)v18;
LABEL_30:
  if (v8.u32[0] > 1uLL)
  {
    uint64_t v19 = 0x6DBE9777D7FEDAAELL;
    if (*(void *)&v7 <= 0x6DBE9777D7FEDAAEuLL) {
      uint64_t v19 = 0x6DBE9777D7FEDAAEuLL % *(void *)&v7;
    }
  }
  else
  {
    uint64_t v19 = (*(void *)&v7 - 1) & 0x6DBE9777D7FEDAAELL;
  }
  int v20 = *(void **)(v12 + 8 * v19);
  if (!v20) {
    goto LABEL_57;
  }
  uint64_t v21 = (void *)*v20;
  if (!v21) {
    goto LABEL_57;
  }
  if (v8.u32[0] < 2uLL)
  {
    uint64_t v22 = *(void *)&v7 - 1;
    while (1)
    {
      uint64_t v24 = v21[1];
      if (v24 == 0x6DBE9777D7FEDAAELL)
      {
        if (v21[2] == 0x6DBE9777D7FEDAAELL) {
          goto LABEL_50;
        }
      }
      else if ((v24 & v22) != v19)
      {
        goto LABEL_57;
      }
      uint64_t v21 = (void *)*v21;
      if (!v21) {
        goto LABEL_57;
      }
    }
  }
  while (1)
  {
    unint64_t v23 = v21[1];
    if (v23 == 0x6DBE9777D7FEDAAELL) {
      break;
    }
    if (v23 >= *(void *)&v7) {
      v23 %= *(void *)&v7;
    }
    if (v23 != v19) {
      goto LABEL_57;
    }
LABEL_39:
    uint64_t v21 = (void *)*v21;
    if (!v21) {
      goto LABEL_57;
    }
  }
  if (v21[2] != 0x6DBE9777D7FEDAAELL) {
    goto LABEL_39;
  }
LABEL_50:
  uint64_t v25 = v21[5];
  if (*(void *)(v25 + 8) != 0x6DBE9777D7FEDAAELL || (uint64_t v26 = *(uint64_t ****)(v25 + 32)) == 0)
  {
LABEL_57:
    int v10 = 0;
    uint64_t v11 = 0;
    goto LABEL_58;
  }
  int8x8_t v27 = (int8x8_t)v26[1];
  if (v27)
  {
    unint64_t v28 = **v26;
    if (v28)
    {
      unint64_t v28 = (uint64_t *)*v28;
      if (v28)
      {
        uint8x8_t v29 = (uint8x8_t)vcnt_s8(v27);
        v29.i16[0] = vaddlv_u8(v29);
        if (v29.u32[0] < 2uLL)
        {
          uint64_t v30 = *(void *)&v27 - 1;
          while (1)
          {
            uint64_t v94 = v28[1];
            if (v94)
            {
              if ((v94 & v30) != 0) {
                goto LABEL_135;
              }
            }
            else if (!*((unsigned char *)v28 + 16))
            {
              goto LABEL_136;
            }
            unint64_t v28 = (uint64_t *)*v28;
            if (!v28) {
              goto LABEL_136;
            }
          }
        }
        do
        {
          unint64_t v95 = v28[1];
          if (v95)
          {
            if (v95 < *(void *)&v27 || v95 % *(void *)&v27) {
              goto LABEL_135;
            }
          }
          else if (!*((unsigned char *)v28 + 16))
          {
            break;
          }
          unint64_t v28 = (uint64_t *)*v28;
        }
        while (v28);
      }
    }
  }
  else
  {
LABEL_135:
    unint64_t v28 = 0;
  }
LABEL_136:
  *((unsigned char *)this + 2216) |= v28 != 0;
  int v10 = (uint64_t *)v26[5];
  uint64_t v11 = (std::__shared_weak_count *)v26[6];
  if (v11)
  {
    char v31 = 0;
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_59;
  }
LABEL_58:
  char v31 = 1;
LABEL_59:
  *((void *)this + 275) = v10;
  BOOL v32 = (std::__shared_weak_count *)*((void *)this + 276);
  *((void *)this + 276) = v11;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    if ((v31 & 1) == 0) {
      goto LABEL_62;
    }
  }
  else if ((v31 & 1) == 0)
  {
LABEL_62:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  unint64_t v33 = (void *)*((void *)a2 + 1);
  int8x8_t v34 = (int8x8_t)v33[1];
  if (!*(void *)&v34) {
    goto LABEL_89;
  }
  uint8x8_t v35 = (uint8x8_t)vcnt_s8(v34);
  v35.i16[0] = vaddlv_u8(v35);
  if (v35.u32[0] > 1uLL)
  {
    uint64_t v36 = 0x37F8C546A65FE3EELL;
    if (*(void *)&v34 <= 0x37F8C546A65FE3EEuLL) {
      uint64_t v36 = 0x37F8C546A65FE3EEuLL % *(void *)&v34;
    }
  }
  else
  {
    uint64_t v36 = (*(void *)&v34 - 1) & 0x37F8C546A65FE3EELL;
  }
  uint64_t v37 = *(void **)(*v33 + 8 * v36);
  if (!v37) {
    goto LABEL_89;
  }
  unint64_t v38 = (void *)*v37;
  if (!v38) {
    goto LABEL_89;
  }
  if (v35.u32[0] < 2uLL)
  {
    uint64_t v39 = *(void *)&v34 - 1;
    while (1)
    {
      uint64_t v41 = v38[1];
      if (v41 == 0x37F8C546A65FE3EELL)
      {
        if (v38[2] == 0x37F8C546A65FE3EELL) {
          goto LABEL_86;
        }
      }
      else if ((v41 & v39) != v36)
      {
        goto LABEL_89;
      }
      unint64_t v38 = (void *)*v38;
      if (!v38) {
        goto LABEL_89;
      }
    }
  }
  while (2)
  {
    unint64_t v40 = v38[1];
    if (v40 != 0x37F8C546A65FE3EELL)
    {
      if (v40 >= *(void *)&v34) {
        v40 %= *(void *)&v34;
      }
      if (v40 != v36) {
        goto LABEL_89;
      }
      goto LABEL_75;
    }
    if (v38[2] != 0x37F8C546A65FE3EELL)
    {
LABEL_75:
      unint64_t v38 = (void *)*v38;
      if (!v38) {
        goto LABEL_89;
      }
      continue;
    }
    break;
  }
LABEL_86:
  uint64_t v42 = v38[5];
  if (*(void *)(v42 + 8) == 0x37F8C546A65FE3EELL)
  {
    uint64_t v43 = *(void *)(v42 + 32);
    if (v43)
    {
      char v44 = *(unsigned char *)(v43 + 18);
      *((_WORD *)this + 1096) = *(_WORD *)(v43 + 16);
      *((unsigned char *)this + 2194) = v44;
      *((unsigned char *)this + 2195) = *(unsigned char *)(v43 + 64);
      goto LABEL_90;
    }
  }
LABEL_89:
  *((_DWORD *)this + 548) = 0;
LABEL_90:
  uint64_t v45 = *((void *)this + 280);
  if (v45)
  {
    int v46 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v45 + 48))(v45, *((void *)this + 3) + 1176);
    if (*((unsigned __int8 *)this + 1968) != v46)
    {
      *((unsigned char *)this + 1968) = v46;
      *((void *)this + 278) |= 8uLL;
    }
    if ((v46 & 1) == 0)
    {
      uint64_t v47 = (double *)*((void *)this + 280);
      uint64_t v48 = (float64x2_t *)*((void *)this + 3);
      double v49 = *((double *)this + 83);
      double v50 = v48[36].f64[0];
      double v51 = v48[36].f64[1];
      double v52 = v48[37].f64[0];
      double v53 = v48[37].f64[1];
      double v54 = v48[38].f64[0];
      double v55 = v48[38].f64[1];
      double v98 = v47[53];
      double v99 = v47[51];
      double v97 = v47[52];
      double v56 = 1.0 / (v48[81].f64[0] + v48[75].f64[0] * v99 + v48[77].f64[0] * v97 + v48[79].f64[0] * v98);
      double v57 = v56 * (v48[79].f64[1] + v48[73].f64[1] * v99 + v48[75].f64[1] * v97 + v48[77].f64[1] * v98);
      float64x2_t v58 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v48[80], v48[74], v99), v48[76], v97), v48[78], v98), v56);
      BOOL v59 = v58.f64[1] > 1.0 || v58.f64[1] < -1.0;
      double v60 = v57 / v58.f64[1];
      float64_t v61 = v58.f64[0] / v58.f64[1];
      double v62 = 1.0 / sqrt(v60 * v60 + v61 * v61);
      double v63 = -(v60 * v62);
      double v64 = acos(v62 * v61) * 57.2957795;
      int v65 = v63 > 0.0 && !v59;
      BOOL v66 = v63 < 0.0 && v59;
      if (v65 | v66) {
        double v64 = 360.0 - v64;
      }
      double v67 = (v54 * (v97 - v51) + v55 * (v98 - v52) + v53 * (v99 - v50))
          / sqrt((v99 - v50) * (v99 - v50) + (v97 - v51) * (v97 - v51) + (v98 - v52) * (v98 - v52));
      int v68 = v67 <= v49;
      if (v67 > v49 && vabdd_f64(v64, *((double *)this + 247)) >= *((double *)this + 72)
        || *((unsigned __int8 *)this + 1969) != v68)
      {
        *((unsigned char *)this + 1969) = v68;
        *((double *)this + 247) = v64;
        *((void *)this + 278) |= 1uLL;
      }
    }
  }
  else
  {
    *((void *)this + 247) = 0;
    *((_WORD *)this + 984) = 0;
    *((_DWORD *)this + 502) = 0;
  }
  uint64_t v69 = *((void *)this + 278);
  if ((v69 & 0xF) == 0)
  {
LABEL_124:
    *((void *)this + 278) = v69 & 0xFFFFFFFFFFFFFFF0;
    return;
  }
  memset(buf, 0, sizeof(buf));
  double v106 = 0.0;
  double v70 = (double *)*((void *)this + 280);
  if (v70)
  {
    long double v71 = v70[51] * 6.28318531;
    double v72 = v70[53] / v70[29];
    long double v73 = exp(v70[52] * 6.28318531 + -3.14159265);
    long double v100 = atan(v73);
    long double v74 = fmod(v71, 6.28318531);
    long double v75 = fmod(v74 + 6.28318531, 6.28318531);
    v76.f64[0] = v100;
    v76.f64[1] = v75;
    *(float64x2_t *)buf = vmlaq_f64((float64x2_t)xmmword_1A28FCC00, (float64x2_t)xmmword_1A28FCBF0, v76);
    double v106 = v72;
  }
  id v101 = 0;
  float64x2_t v77 = [VKARWalkingFeatureDidUpdateInfo alloc];
  float64x2_t v78 = (void *)*((void *)this + 249);
  uint64_t v79 = *((unsigned int *)this + 502);
  id v80 = *(id *)(*((void *)this + 55) + 448);
  uint64_t v81 = *((unsigned __int8 *)this + 1968);
  char v82 = *((unsigned char *)this + 1969);
  uint64_t v104 = *((void *)this + 247);
  id v83 = v78;
  LOBYTE(v96) = v82;
  unint64_t v84 = [(VKARWalkingFeatureDidUpdateInfo *)v77 initWithFeature:v83 featureLabelIdentifier:v79 featureSet:v80 labelPosition:buf updateTypes:v69 isVisible:v81 isDirectlyBehind:v96 screenHeading:&v104];
  objc_storeStrong(&v101, v84);

  if (GEOGetVectorKitARWalkingLabelerLog(void)::onceToken != -1) {
    dispatch_once(&GEOGetVectorKitARWalkingLabelerLog(void)::onceToken, &__block_literal_global_51128);
  }
  unint64_t v85 = (id)GEOGetVectorKitARWalkingLabelerLog(void)::log;
  if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
  {
    if (v101)
    {
      id v86 = v101;
      id v87 = [v86 description];
      uint64_t v88 = [v87 UTF8String];
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v88;
      _os_log_impl(&dword_1A1780000, v85, OS_LOG_TYPE_DEBUG, "arWalkingFeatureDidUpdate %s", buf, 0xCu);
    }
    else
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = "nil";
      _os_log_impl(&dword_1A1780000, v85, OS_LOG_TYPE_DEBUG, "arWalkingFeatureDidUpdate %s", buf, 0xCu);
    }
  }

  uint64_t v89 = *((void *)this + 3);
  id v90 = v101;
  double v91 = v90;
  uint64_t v92 = *(void *)(v89 + 136);
  if (!v92 || !*(void *)(v92 + 248))
  {
LABEL_123:

    uint64_t v69 = *((void *)this + 278);
    goto LABEL_124;
  }
  *(void *)buf = v90;
  uint64_t v93 = *(void *)(v92 + 248);
  if (v93)
  {
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v93 + 48))(v93, buf);

    goto LABEL_123;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  __break(1u);
}

void sub_1A27C4D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void geo::_retain_ptr<VKARWalkingFeatureDidUpdateInfo * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559CD8;

  JUMPOUT(0x1A6239270);
}

uint64_t geo::_retain_ptr<VKARWalkingFeatureDidUpdateInfo * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(void *)a1 = &unk_1EF559CD8;

  return a1;
}

void md::ARWalkingLabeler::synchStagingWithDisplay(md::ARWalkingLabeler *this)
{
  md::StandardLabeler::synchStagingWithDisplay(this);
  uint64_t v3 = *((void *)this + 209);
  if (*((void *)this + 280) == v3) {
    goto LABEL_15;
  }
  uint64_t v4 = *((void *)this + 210);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 280) = v3;
  id v5 = (std::__shared_weak_count *)*((void *)this + 281);
  *((void *)this + 281) = v4;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  id v6 = *((id *)this + 249);
  id v7 = *((id *)this + 212);
  id v8 = v6;
  id v9 = v7;
  int v10 = v9;
  if (v8 == v9)
  {

    goto LABEL_11;
  }
  char v11 = [v8 isEqual:v9];

  if ((v11 & 1) == 0)
  {
    id v12 = *((id *)this + 212);
    id v8 = (id)*((void *)this + 249);
    *((void *)this + 249) = v12;
LABEL_11:
  }
  *((void *)this + 278) |= 4uLL;
  uint64_t v13 = *((void *)this + 280);
  if (v13) {
    LODWORD(v13) = *(_DWORD *)(v13 + 48);
  }
  *((_DWORD *)this + 502) = v13;
LABEL_15:
  uint64_t v14 = (char *)*((void *)this + 272);
  for (uint64_t i = (char *)*((void *)this + 271); v14 != i; v14 -= 24)
  {
    uint64_t v16 = (std::__shared_weak_count *)*((void *)v14 - 1);
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *((void *)this + 272) = i;
  uint64_t v17 = (void *)*((void *)this + 9);
  uint64_t v18 = (void *)*((void *)this + 10);
  if (v17 != v18)
  {
    unint64_t v1 = -1;
    do
    {
      uint64_t v20 = *v17;
      char v21 = *(unsigned char *)(*v17 + 821);
      unint64_t v22 = *((void *)this + 273);
      if ((unint64_t)i >= v22)
      {
        uint64_t v24 = (char *)*((void *)this + 271);
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((i - v24) >> 3) + 1;
        if (v25 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (void)v24) >> 3);
        if (2 * v26 > v25) {
          unint64_t v25 = 2 * v26;
        }
        if (v26 >= 0x555555555555555) {
          unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27 > 0xAAAAAAAAAAAAAAALL) {
LABEL_296:
        }
          std::__throw_bad_array_new_length[abi:nn180100]();
        uint64_t v28 = 24 * v27;
        uint8x8_t v29 = (char *)operator new(24 * v27);
        uint64_t v30 = &v29[8 * ((i - v24) >> 3)];
        char *v30 = v21;
        *((void *)v30 + 1) = *v17;
        uint64_t v31 = v17[1];
        *((void *)v30 + 2) = v31;
        if (v31)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
          uint64_t i = (char *)*((void *)this + 272);
          uint64_t v24 = (char *)*((void *)this + 271);
        }
        BOOL v32 = &v29[v28];
        uint64_t v19 = v30 + 24;
        if (i == v24)
        {
          *((void *)this + 271) = v30;
          *((void *)this + 272) = v19;
          *((void *)this + 273) = v32;
        }
        else
        {
          do
          {
            char v33 = *(i - 24);
            i -= 24;
            *(v30 - 24) = v33;
            v30 -= 24;
            *(_OWORD *)(v30 + 8) = *(_OWORD *)(i + 8);
            *((void *)i + 1) = 0;
            *((void *)i + 2) = 0;
          }
          while (i != v24);
          uint64_t v24 = (char *)*((void *)this + 271);
          int8x8_t v34 = (char *)*((void *)this + 272);
          *((void *)this + 271) = v30;
          *((void *)this + 272) = v19;
          *((void *)this + 273) = v32;
          while (v34 != v24)
          {
            uint8x8_t v35 = (std::__shared_weak_count *)*((void *)v34 - 1);
            if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
            v34 -= 24;
          }
        }
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        char *i = v21;
        *((void *)i + 1) = v20;
        uint64_t v23 = v17[1];
        *((void *)i + 2) = v23;
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v19 = i + 24;
      }
      *((void *)this + 272) = v19;
      v17 += 2;
      uint64_t i = v19;
    }
    while (v17 != v18);
  }
  uint64_t v36 = (void *)*((void *)this + 13);
  uint64_t v37 = (void *)*((void *)this + 14);
  *(_OWORD *)std::vector<unsigned int> __p = 0u;
  *(_OWORD *)long long v169 = 0u;
  float v170 = 1.0;
  if (v36 != v37)
  {
    unint64_t v38 = 0;
    while (1)
    {
      uint64_t v39 = (void *)*v36;
      uint64_t v40 = HIDWORD(*v36);
      unint64_t v41 = 0x9DDFEA08EB382D69 * ((8 * *v36 + 8) ^ v40);
      unint64_t v42 = (0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47);
      unint64_t v43 = 0x9DDFEA08EB382D69 * v42;
      size_t v44 = (size_t)__p[1];
      if (__p[1])
      {
        uint8x8_t v45 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v45.i16[0] = vaddlv_u8(v45);
        if (v45.u32[0] > 1uLL)
        {
          unint64_t v1 = 0x9DDFEA08EB382D69 * v42;
          if ((void *)v43 >= __p[1]) {
            unint64_t v1 = v43 % (unint64_t)__p[1];
          }
        }
        else
        {
          unint64_t v1 = v43 & ((unint64_t)__p[1] - 1);
        }
        int v46 = (void *)*((void *)__p[0] + v1);
        if (v46)
        {
          uint64_t v47 = (void *)*v46;
          if (v47)
          {
            if (v45.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v49 = v47[1];
                if (v49 == v43)
                {
                  if ((void *)v47[2] == v39) {
                    goto LABEL_133;
                  }
                }
                else if ((v49 & ((uint64_t)__p[1] - 1)) != v1)
                {
                  goto LABEL_71;
                }
                uint64_t v47 = (void *)*v47;
                if (!v47) {
                  goto LABEL_71;
                }
              }
            }
            do
            {
              unint64_t v48 = v47[1];
              if (v48 == v43)
              {
                if ((void *)v47[2] == v39) {
                  goto LABEL_133;
                }
              }
              else
              {
                if ((void *)v48 >= __p[1]) {
                  v48 %= (unint64_t)__p[1];
                }
                if (v48 != v1) {
                  break;
                }
              }
              uint64_t v47 = (void *)*v47;
            }
            while (v47);
          }
        }
      }
LABEL_71:
      *(double *)&double v50 = COERCE_DOUBLE(operator new(0x20uLL));
      double v176 = *(double *)&v50;
      double v177 = v169;
      *double v50 = 0;
      v50[1] = (void *)v43;
      v50[2] = (void *)*v36;
      double v51 = (atomic_ullong *)v36[1];
      void v50[3] = v51;
      if (v51)
      {
        atomic_fetch_add_explicit(v51 + 1, 1uLL, memory_order_relaxed);
        unint64_t v38 = v169[1];
      }
      LOBYTE(v178) = 1;
      float v52 = (float)((unint64_t)v38 + 1);
      if (!__p[1] || (float)(v170 * (float)(unint64_t)__p[1]) < v52) {
        break;
      }
LABEL_123:
      long double v73 = (void **)*((void *)__p[0] + v1);
      if (v73)
      {
        *double v50 = *v73;
      }
      else
      {
        *double v50 = v169[0];
        v169[0] = v50;
        *((void *)__p[0] + v1) = v169;
        if (!*v50) {
          goto LABEL_132;
        }
        size_t v74 = *((void *)*v50 + 1);
        if ((v44 & (v44 - 1)) != 0)
        {
          if (v74 >= v44) {
            v74 %= v44;
          }
        }
        else
        {
          v74 &= v44 - 1;
        }
        long double v73 = (void **)((char *)__p[0] + 8 * v74);
      }
      *long double v73 = v50;
LABEL_132:
      unint64_t v38 = ++v169[1];
LABEL_133:
      v36 += 2;
      if (v36 == v37) {
        goto LABEL_144;
      }
    }
    BOOL v53 = ((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) != 0;
    if (__p[1] < (void *)3) {
      BOOL v53 = 1;
    }
    unint64_t v54 = v53 | (2 * (uint64_t)__p[1]);
    unint64_t v55 = vcvtps_u32_f32(v52 / v170);
    if (v54 <= v55) {
      size_t prime = v55;
    }
    else {
      size_t prime = v54;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    size_t v44 = (size_t)__p[1];
    if ((void *)prime <= __p[1])
    {
      if ((void *)prime >= __p[1]) {
        goto LABEL_110;
      }
      unint64_t v67 = vcvtps_u32_f32((float)(unint64_t)v169[1] / v170);
      if (__p[1] < (void *)3
        || (uint8x8_t v68 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v68.i16[0] = vaddlv_u8(v68), v68.u32[0] > 1uLL))
      {
        unint64_t v67 = std::__next_prime(v67);
      }
      else
      {
        uint64_t v69 = 1 << -(char)__clz(v67 - 1);
        if (v67 >= 2) {
          unint64_t v67 = v69;
        }
      }
      if (prime <= v67) {
        size_t prime = v67;
      }
      if ((void *)prime >= __p[1])
      {
        size_t v44 = (size_t)__p[1];
LABEL_110:
        if ((v44 & (v44 - 1)) != 0)
        {
          if (v43 >= v44) {
            unint64_t v1 = v43 % v44;
          }
          else {
            unint64_t v1 = v43;
          }
        }
        else
        {
          unint64_t v1 = (v44 - 1) & v43;
        }
        goto LABEL_123;
      }
      if (!prime)
      {
        long double v75 = __p[0];
        __p[0] = 0;
        if (v75) {
          operator delete(v75);
        }
        size_t v44 = 0;
        __p[1] = 0;
        goto LABEL_110;
      }
    }
    if (prime >> 61) {
      goto LABEL_296;
    }
    double v57 = operator new(8 * prime);
    float64x2_t v58 = __p[0];
    __p[0] = v57;
    if (v58) {
      operator delete(v58);
    }
    uint64_t v59 = 0;
    __p[1] = (void *)prime;
    do
      *((void *)__p[0] + v59++) = 0;
    while (prime != v59);
    double v60 = (void **)v169[0];
    if (!v169[0])
    {
LABEL_109:
      size_t v44 = prime;
      goto LABEL_110;
    }
    size_t v61 = *((void *)v169[0] + 1);
    size_t v62 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v63 = v61 & v62;
      *((void *)__p[0] + v63) = v169;
      for (uint64_t j = *v60; *v60; uint64_t j = *v60)
      {
        size_t v65 = j[1] & v62;
        if (v65 == v63)
        {
          double v60 = (void **)j;
        }
        else if (*((void *)__p[0] + v65))
        {
          *double v60 = (void *)*j;
          uint64_t v66 = 8 * v65;
          void *j = **(void **)((char *)__p[0] + v66);
          **(void **)((char *)__p[0] + v66) = j;
        }
        else
        {
          *((void *)__p[0] + v65) = v60;
          double v60 = (void **)j;
          size_t v63 = v65;
        }
      }
      goto LABEL_109;
    }
    if (v61 >= prime) {
      v61 %= prime;
    }
    *((void *)__p[0] + v61) = v169;
    double v70 = *v60;
    if (!*v60) {
      goto LABEL_109;
    }
    while (1)
    {
      size_t v72 = v70[1];
      if (v72 >= prime) {
        v72 %= prime;
      }
      if (v72 != v61)
      {
        if (!*((void *)__p[0] + v72))
        {
          *((void *)__p[0] + v72) = v60;
          goto LABEL_114;
        }
        *double v60 = (void *)*v70;
        uint64_t v71 = 8 * v72;
        void *v70 = **(void **)((char *)__p[0] + v71);
        **(void **)((char *)__p[0] + v71) = v70;
        double v70 = v60;
      }
      size_t v72 = v61;
LABEL_114:
      double v60 = (void **)v70;
      double v70 = (void *)*v70;
      size_t v61 = v72;
      if (!v70) {
        goto LABEL_109;
      }
    }
  }
LABEL_144:
  float64x2_t v76 = (char *)this + 2088;
  if (*((void *)this + 263))
  {
    float64x2_t v77 = (char *)*((void *)this + 262);
    uint64_t v78 = *((void *)this + 261);
    uint64_t v79 = *(void *)v77;
    *(void *)(v79 + 8) = *(void *)(v78 + 8);
    **(void **)(v78 + 8) = v79;
    *((void *)this + 263) = 0;
    if (v77 != v76)
    {
      do
      {
        id v80 = (char *)*((void *)v77 + 1);
        operator delete(v77);
        float64x2_t v77 = v80;
      }
      while (v80 != v76);
    }
  }
  if (*((void *)this + 267))
  {
    uint64_t v81 = (void *)*((void *)this + 266);
    if (v81)
    {
      do
      {
        char v82 = (void *)*v81;
        operator delete(v81);
        uint64_t v81 = v82;
      }
      while (v82);
    }
    *((void *)this + 266) = 0;
    uint64_t v83 = *((void *)this + 265);
    if (v83)
    {
      for (uint64_t k = 0; k != v83; ++k)
        *(void *)(*((void *)this + 264) + 8 * k) = 0;
    }
    *((void *)this + 267) = 0;
  }
  *((void *)this + 269) = v76;
  *((void *)this + 270) = 0;
  for (m = (void *)*((void *)this + 227); m != (void *)((char *)this + 1808); m = (void *)m[1])
    geo::MarkedLRUCache<md::Label *,gm::Matrix<double,3,1>,std::hash<md::Label *>,std::equal_to<md::Label *>>::insert((uint64_t *)this + 261, (uint64_t)(m + 2));
  id v86 = (char *)this + 1760;
  if (!*((unsigned char *)this + 1784)) {
    id v86 = (char *)this + 1736;
  }
  uint64_t v87 = *((void *)v86 + 2);
  *((_OWORD *)this + 129) = *(_OWORD *)v86;
  *((void *)this + 260) = v87;
  uint64_t v88 = *((void *)this + 253);
  for (uint64_t n = *((void *)this + 252); v88 != n; v88 -= 40)
  {
    *(void *)&double v176 = v88 - 24;
    std::vector<md::ARWalkingLabelDebugData>::__destroy_vector::operator()[abi:nn180100]((void ***)&v176);
    id v90 = *(std::__shared_weak_count **)(v88 - 32);
    if (v90 && !atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  *((void *)this + 253) = n;
  double v91 = (unint64_t *)*((void *)this + 9);
  unint64_t v167 = (unint64_t *)*((void *)this + 10);
  if (v91 != v167)
  {
    uint64_t v166 = (float64x2_t *)*((void *)this + 3);
    unint64_t v165 = (void *)((char *)this + 2032);
    while (1)
    {
      unint64_t v92 = *v91;
      unint64_t v93 = HIDWORD(*v91);
      unint64_t v94 = 0x9DDFEA08EB382D69 * ((8 * *v91 + 8) ^ v93);
      unint64_t v95 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v93 ^ (v94 >> 47) ^ v94)) ^ ((0x9DDFEA08EB382D69 * (v93 ^ (v94 >> 47) ^ v94)) >> 47));
      int8x8_t v96 = *(int8x8_t *)((char *)this + 1936);
      if (!*(void *)&v96) {
        goto LABEL_187;
      }
      uint8x8_t v97 = (uint8x8_t)vcnt_s8(v96);
      v97.i16[0] = vaddlv_u8(v97);
      if (v97.u32[0] > 1uLL)
      {
        unint64_t v98 = v95;
        if (v95 >= *(void *)&v96) {
          unint64_t v98 = v95 % *(void *)&v96;
        }
      }
      else
      {
        unint64_t v98 = v95 & (*(void *)&v96 - 1);
      }
      double v99 = *(void **)(*((void *)this + 241) + 8 * v98);
      if (v99)
      {
        long double v100 = (void *)*v99;
        if (*v99)
        {
          if (v97.u32[0] < 2uLL)
          {
            uint64_t v101 = *(void *)&v96 - 1;
            while (1)
            {
              uint64_t v103 = v100[1];
              if (v103 == v95)
              {
                if (v100[2] == v92) {
                  goto LABEL_188;
                }
              }
              else if ((v103 & v101) != v98)
              {
                goto LABEL_187;
              }
              long double v100 = (void *)*v100;
              if (!v100) {
                goto LABEL_188;
              }
            }
          }
          do
          {
            unint64_t v102 = v100[1];
            if (v102 == v95)
            {
              if (v100[2] == v92) {
                break;
              }
            }
            else
            {
              if (v102 >= *(void *)&v96) {
                v102 %= *(void *)&v96;
              }
              if (v102 != v98) {
                goto LABEL_187;
              }
            }
            long double v100 = (void *)*v100;
          }
          while (v100);
        }
      }
      else
      {
LABEL_187:
        long double v100 = 0;
      }
LABEL_188:
      uint64_t v104 = (void *)*((void *)this + 252);
      uint64_t v105 = (void *)*((void *)this + 253);
      double v106 = v104;
      if (v104 != v105)
      {
        double v107 = *(double *)(v92 + 8);
        double v106 = (void *)*((void *)this + 252);
        while (*(void *)&v107 != *v106)
        {
          v106 += 5;
          if (v106 == v105) {
            goto LABEL_195;
          }
        }
      }
      if (v106 != v105) {
        goto LABEL_227;
      }
      double v107 = *(double *)(v92 + 8);
LABEL_195:
      unint64_t v108 = *(std::__shared_weak_count **)(v92 + 16);
      double v172 = v107;
      float32x4_t v173 = v108;
      if (v108)
      {
        atomic_fetch_add_explicit(&v108->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v104 = (void *)*((void *)this + 252);
        uint64_t v105 = (void *)*((void *)this + 253);
      }
      memset(v174, 0, sizeof(v174));
      memset(v171, 0, sizeof(v171));
      if (v104 == v105) {
        break;
      }
      double v106 = v104;
      while (*(void *)&v107 != *v106)
      {
        v106 += 5;
        if (v106 == v105) {
          goto LABEL_203;
        }
      }
      if (v106 == v105) {
        break;
      }
LABEL_223:
      double v176 = COERCE_DOUBLE(v174);
      std::vector<md::ARWalkingLabelDebugData>::__destroy_vector::operator()[abi:nn180100]((void ***)&v176);
      double v122 = v173;
      if (v173 && !atomic_fetch_add(&v173->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
      double v176 = COERCE_DOUBLE(v171);
      std::vector<md::ARWalkingLabelDebugData>::__destroy_vector::operator()[abi:nn180100]((void ***)&v176);
      unint64_t v92 = *v91;
      unint64_t v123 = HIDWORD(*v91);
      unint64_t v124 = 0x9DDFEA08EB382D69 * ((8 * *v91 + 8) ^ v123);
      unint64_t v95 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v123 ^ (v124 >> 47) ^ v124)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v123 ^ (v124 >> 47) ^ v124)) >> 47));
      if (!__p[1]) {
        goto LABEL_251;
      }
LABEL_227:
      uint8x8_t v125 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v125.i16[0] = vaddlv_u8(v125);
      if (v125.u32[0] > 1uLL)
      {
        unint64_t v126 = v95;
        if ((void *)v95 >= __p[1]) {
          unint64_t v126 = v95 % (unint64_t)__p[1];
        }
      }
      else
      {
        unint64_t v126 = v95 & ((unint64_t)__p[1] - 1);
      }
      int8x16_t v128 = (void *)*((void *)__p[0] + v126);
      if (v128)
      {
        float v129 = (void *)*v128;
        if (*v128)
        {
          if (v125.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v131 = v129[1];
              if (v95 == v131)
              {
                if (v129[2] == v92) {
                  goto LABEL_252;
                }
              }
              else if ((v131 & ((uint64_t)__p[1] - 1)) != v126)
              {
                goto LABEL_251;
              }
              float v129 = (void *)*v129;
              if (!v129) {
                goto LABEL_252;
              }
            }
          }
          do
          {
            unint64_t v130 = v129[1];
            if (v95 == v130)
            {
              if (v129[2] == v92) {
                break;
              }
            }
            else
            {
              if ((void *)v130 >= __p[1]) {
                v130 %= (unint64_t)__p[1];
              }
              if (v130 != v126) {
                goto LABEL_251;
              }
            }
            float v129 = (void *)*v129;
          }
          while (v129);
        }
      }
      else
      {
LABEL_251:
        float v129 = 0;
      }
LABEL_252:
      float64_t v132 = v166[37].f64[0] - *(double *)(v92 + 608);
      float64x2_t v133 = vsubq_f64(v166[36], *(float64x2_t *)(v92 + 592));
      double v134 = (vaddvq_f64(vmulq_f64(v133, v133)) + v132 * v132) / (*(double *)(v92 + 224) * *(double *)(v92 + 224));
      int8x8_t v135 = std::__hash_table<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::__unordered_map_hasher<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::hash<md::mun::CollectionPoint const*>,std::equal_to<md::mun::CollectionPoint const*>,true>,std::__unordered_map_equal<md::mun::CollectionPoint const*,std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>,std::equal_to<md::mun::CollectionPoint const*>,std::hash<md::mun::CollectionPoint const*>,true>,std::allocator<std::__hash_value_type<md::mun::CollectionPoint const*,geo::small_vector<md::mun::CollectionPoint const*,6ul>>>>::find<md::mun::CollectionPoint const*>((void *)this + 236, v92);
      unint64_t v136 = v135;
      if (v100) {
        uint64_t v137 = (uint64_t)(v100 + 3);
      }
      else {
        uint64_t v137 = 0;
      }
      unint64_t v138 = v106[4];
      unint64_t v139 = v106[3];
      if (v139 < v138)
      {
        double v176 = v134;
        md::ARWalkingLabelDebugData::ARWalkingLabelDebugData(v139, v91, &v176, v129 != 0, v135 != 0, v137);
        unint64_t v140 = v139 + 128;
        v106[3] = v140;
        goto LABEL_166;
      }
      uint64_t v141 = v106[2];
      uint64_t v142 = (uint64_t)(v139 - v141) >> 7;
      if ((unint64_t)(v142 + 1) >> 57) {
        abort();
      }
      uint64_t v143 = v138 - v141;
      uint64_t v144 = v143 >> 6;
      if (v143 >> 6 <= (unint64_t)(v142 + 1)) {
        uint64_t v144 = v142 + 1;
      }
      if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFF80) {
        unint64_t v145 = 0x1FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v145 = v144;
      }
      float64x2_t v180 = (char *)(v106 + 4);
      if (v145)
      {
        if (v145 >> 57) {
          goto LABEL_296;
        }
        *(double *)&uint64_t v146 = COERCE_DOUBLE(operator new(v145 << 7));
      }
      else
      {
        *(double *)&uint64_t v146 = 0.0;
      }
      double v176 = *(double *)&v146;
      double v177 = &v146[16 * v142];
      double v178 = v177;
      unsigned int v179 = &v146[16 * v145];
      double v172 = v134;
      md::ARWalkingLabelDebugData::ARWalkingLabelDebugData((uint64_t)v177, v91, &v172, v129 != 0, v136 != 0, v137);
      unint64_t v147 = (void **)v106[2];
      unint64_t v148 = (void **)v106[3];
      long long v149 = v177;
      uint64_t v150 = v178;
      if (v148 == v147)
      {
        double v158 = *((void ***)v106 + 3);
      }
      else
      {
        uint64_t v151 = 0;
        do
        {
          long long v152 = &v149[v151];
          uint64_t v153 = &v148[v151];
          *((_OWORD *)v152 - 8) = *(_OWORD *)&v148[v151 - 16];
          *(v153 - 16) = 0;
          *(v153 - 15) = 0;
          *((_OWORD *)v152 - 7) = *(_OWORD *)&v148[v151 - 14];
          *(v153 - 14) = 0;
          *(v153 - 13) = 0;
          long long v154 = *(_OWORD *)&v148[v151 - 12];
          long long v155 = *(_OWORD *)&v148[v151 - 10];
          long long v156 = *(_OWORD *)&v148[v151 - 8];
          *(_OWORD *)((char *)v152 - 51) = *(_OWORD *)((char *)&v148[v151 - 6] - 3);
          *((_OWORD *)v152 - 5) = v155;
          *((_OWORD *)v152 - 4) = v156;
          *((_OWORD *)v152 - 6) = v154;
          *(v152 - 4) = v148[v151 - 4];
          long long v157 = *(_OWORD *)&v148[v151 - 3];
          *(v152 - 1) = v148[v151 - 1];
          *(_OWORD *)(v152 - 3) = v157;
          v151 -= 16;
        }
        while (&v148[v151] != v147);
        long long v149 = (void **)((char *)v149 + v151 * 8);
        double v158 = *((void ***)v106 + 2);
        unint64_t v148 = (void **)v106[3];
      }
      unint64_t v140 = (unint64_t)(v150 + 16);
      v106[2] = v149;
      v106[3] = v150 + 16;
      double v159 = (void **)v106[4];
      v106[4] = v179;
      unsigned int v179 = v159;
      double v176 = *(double *)&v158;
      double v177 = v158;
      if (v148 == v158) {
        goto LABEL_283;
      }
      do
      {
        double v178 = v148 - 16;
        int v160 = (std::__shared_weak_count *)*(v148 - 13);
        if (v160 && !atomic_fetch_add(&v160->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
          std::__shared_weak_count::__release_weak(v160);
          int v161 = (std::__shared_weak_count *)*(v148 - 15);
          if (!v161) {
            goto LABEL_274;
          }
        }
        else
        {
          int v161 = (std::__shared_weak_count *)*(v148 - 15);
          if (!v161) {
            goto LABEL_274;
          }
        }
        if (!atomic_fetch_add(&v161->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
          std::__shared_weak_count::__release_weak(v161);
        }
LABEL_274:
        unint64_t v148 = v178;
      }
      while (v178 != v158);
      unint64_t v148 = *(void ***)&v176;
LABEL_283:
      if (v148) {
        operator delete(v148);
      }
LABEL_166:
      v106[3] = v140;
      v91 += 2;
      if (v91 == v167) {
        goto LABEL_287;
      }
    }
LABEL_203:
    if ((unint64_t)v105 < *v165)
    {
      std::pair<std::shared_ptr<md::LabelFeature>,std::vector<md::ARWalkingLabelDebugData>>::pair[abi:nn180100](v105, &v172);
      uint64_t v109 = v105 + 5;
      *((void *)this + 253) = v105 + 5;
LABEL_222:
      *((void *)this + 253) = v109;
      double v106 = v109 - 5;
      goto LABEL_223;
    }
    unint64_t v110 = 0xCCCCCCCCCCCCCCCDLL * (v105 - v104);
    if (v110 + 1 > 0x666666666666666) {
      abort();
    }
    unint64_t v111 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v165 - (void)v104) >> 3);
    uint64_t v112 = 2 * v111;
    if (2 * v111 <= v110 + 1) {
      uint64_t v112 = v110 + 1;
    }
    if (v111 >= 0x333333333333333) {
      unint64_t v113 = 0x666666666666666;
    }
    else {
      unint64_t v113 = v112;
    }
    float64x2_t v180 = (char *)this + 2032;
    if (v113)
    {
      if (v113 > 0x666666666666666) {
        goto LABEL_296;
      }
      *(double *)&float64x2_t v114 = COERCE_DOUBLE(operator new(40 * v113));
    }
    else
    {
      *(double *)&float64x2_t v114 = 0.0;
    }
    double v176 = *(double *)&v114;
    double v177 = &v114[5 * v110];
    double v178 = v177;
    unsigned int v179 = &v114[5 * v113];
    std::pair<std::shared_ptr<md::LabelFeature>,std::vector<md::ARWalkingLabelDebugData>>::pair[abi:nn180100](v177, &v172);
    double v115 = (void **)*((void *)this + 253);
    BOOL v116 = (void **)*((void *)this + 252);
    unint64_t v117 = v177;
    uint64_t v118 = v178;
    if (v115 == v116)
    {
      float64x2_t v120 = *((void ***)this + 253);
    }
    else
    {
      do
      {
        long long v119 = *(_OWORD *)(v115 - 5);
        v115 -= 5;
        *(_OWORD *)(v117 - 5) = v119;
        v117 -= 5;
        *double v115 = 0;
        v115[1] = 0;
        v117[2] = 0;
        v117[3] = 0;
        v117[4] = 0;
        *((_OWORD *)v117 + 1) = *((_OWORD *)v115 + 1);
        v117[4] = v115[4];
        v115[2] = 0;
        v115[3] = 0;
        v115[4] = 0;
      }
      while (v115 != v116);
      float64x2_t v120 = *((void ***)this + 252);
      double v115 = (void **)*((void *)this + 253);
    }
    uint64_t v109 = v118 + 5;
    *((void *)this + 252) = v117;
    *((void *)this + 253) = v118 + 5;
    float64x2_t v121 = (void **)*((void *)this + 254);
    *((void *)this + 254) = v179;
    double v178 = v115;
    unsigned int v179 = v121;
    double v176 = *(double *)&v120;
    double v177 = v120;
    if (v115 == v120)
    {
      if (!v115) {
        goto LABEL_222;
      }
    }
    else
    {
      do
      {
        double v178 = v115 - 5;
        uint64_t v175 = v115 - 3;
        std::vector<md::ARWalkingLabelDebugData>::__destroy_vector::operator()[abi:nn180100](&v175);
        int8x16_t v127 = (std::__shared_weak_count *)*(v115 - 4);
        if (v127 && !atomic_fetch_add(&v127->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
        double v115 = v178;
      }
      while (v178 != v120);
      double v115 = *(void ***)&v176;
      if (v176 == 0.0) {
        goto LABEL_222;
      }
    }
    operator delete(v115);
    goto LABEL_222;
  }
LABEL_287:
  float v162 = v169[0];
  if (v169[0])
  {
    do
    {
      unsigned int v163 = v162;
      float v162 = (void *)*v162;
      uint64_t v164 = (std::__shared_weak_count *)v163[3];
      if (v164 && !atomic_fetch_add(&v164->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
        std::__shared_weak_count::__release_weak(v164);
      }
      operator delete(v163);
    }
    while (v162);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

void sub_1A27C6008(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A27C6024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char *a26,char a27)
{
  a26 = &a18;
  std::vector<md::ARWalkingLabelDebugData>::__destroy_vector::operator()[abi:nn180100]((void ***)&a26);
  std::unordered_map<std::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>,md::CoastlineGroup *>::~unordered_map[abi:nn180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void std::vector<md::ARWalkingLabelDebugData>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (!v2) {
    return;
  }
  uint64_t v4 = (char *)v1[1];
  id v5 = **a1;
  if (v4 == v2) {
    goto LABEL_14;
  }
  do
  {
    id v6 = (std::__shared_weak_count *)*((void *)v4 - 13);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      id v7 = (std::__shared_weak_count *)*((void *)v4 - 15);
      if (!v7) {
        goto LABEL_4;
      }
    }
    else
    {
      id v7 = (std::__shared_weak_count *)*((void *)v4 - 15);
      if (!v7) {
        goto LABEL_4;
      }
    }
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
LABEL_4:
    v4 -= 128;
  }
  while (v4 != v2);
  id v5 = **a1;
LABEL_14:
  v1[1] = v2;
  operator delete(v5);
}

uint64_t md::ARWalkingLabelDebugData::ARWalkingLabelDebugData(uint64_t a1, void *a2, void *a3, char a4, char a5, uint64_t a6)
{
  uint64_t v12 = *a2;
  uint64_t v13 = *(void *)(*a2 + 16);
  *(void *)a1 = *(void *)(*a2 + 8);
  *(void *)(a1 + 8) = v13;
  if (v13)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    uint64_t v12 = *a2;
  }
  *(void *)(a1 + 16) = v12;
  uint64_t v14 = a2[1];
  *(void *)(a1 + 24) = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *a2;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(*a2 + 48);
  long long v16 = *(_OWORD *)(v15 + 592);
  *(void *)(a1 + 56) = *(void *)(v15 + 608);
  *(_OWORD *)(a1 + 40) = v16;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(*a2 + 152);
  *(void *)(a1 + 80) = (*(uint64_t (**)(void))(**(void **)a1 + 144))();
  *(void *)(a1 + 88) = v17;
  *(void *)(a1 + 96) = *a3;
  uint64_t v18 = *a2;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(*a2 + 821);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(v18 + 820);
  *(unsigned char *)(a1 + 106) = a4;
  *(unsigned char *)(a1 + 107) = a5;
  *(void *)(a1 + 112) = a6;
  *(double *)(a1 + 120) = *(float *)(v18 + 768);
  return a1;
}

void sub_1A27C6384(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v2);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<md::ARWalkingLabelDebugData>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 128;
    uint64_t v4 = *(std::__shared_weak_count **)(i - 104);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      id v5 = *(std::__shared_weak_count **)(i - 120);
      if (v5)
      {
LABEL_7:
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else
    {
      id v5 = *(std::__shared_weak_count **)(i - 120);
      if (v5) {
        goto LABEL_7;
      }
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::pair<std::shared_ptr<md::LabelFeature>,std::vector<md::ARWalkingLabelDebugData>>::pair[abi:nn180100](void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  uint64_t v6 = v5 - v4;
  if (v5 != v4)
  {
    if (v6 < 0) {
      abort();
    }
    id v7 = (char *)operator new(v5 - v4);
    a1[2] = v7;
    a1[3] = v7;
    a1[4] = &v7[128 * (v6 >> 7)];
    do
    {
      uint64_t v12 = *(void *)(v4 + 8);
      *(void *)id v7 = *(void *)v4;
      *((void *)v7 + 1) = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = *(void *)(v4 + 24);
      *((void *)v7 + 2) = *(void *)(v4 + 16);
      *((void *)v7 + 3) = v13;
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      }
      long long v8 = *(_OWORD *)(v4 + 32);
      long long v9 = *(_OWORD *)(v4 + 48);
      long long v10 = *(_OWORD *)(v4 + 64);
      *(_OWORD *)(v7 + 77) = *(_OWORD *)(v4 + 77);
      *((_OWORD *)v7 + 3) = v9;
      *((_OWORD *)v7 + 4) = v10;
      *((_OWORD *)v7 + 2) = v8;
      *((void *)v7 + 12) = *(void *)(v4 + 96);
      long long v11 = *(_OWORD *)(v4 + 104);
      *((void *)v7 + 15) = *(void *)(v4 + 120);
      *(_OWORD *)(v7 + 104) = v11;
      v7 += 128;
      v4 += 128;
    }
    while (v4 != v5);
    a1[3] = v7;
  }
  return a1;
}

void sub_1A27C6594(_Unwind_Exception *a1)
{
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::shared_ptr<md::LabelFeature>,std::vector<md::ARWalkingLabelDebugData>>::~pair(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 16);
  std::vector<md::ARWalkingLabelDebugData>::__destroy_vector::operator()[abi:nn180100](&v4);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t std::__split_buffer<std::pair<std::shared_ptr<md::LabelFeature>,std::vector<md::ARWalkingLabelDebugData>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    uint64_t v6 = (void **)(i - 24);
    std::vector<md::ARWalkingLabelDebugData>::__destroy_vector::operator()[abi:nn180100](&v6);
    uint64_t v4 = *(std::__shared_weak_count **)(i - 32);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void md::ARWalkingLabeler::synchronizedUpdate(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v315[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 440);
  uint64_t v5 = *(void **)(a2 + 8);
  int8x8_t v6 = (int8x8_t)v5[1];
  if (!*(void *)&v6) {
    goto LABEL_25;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    uint64_t v8 = 0x37F8C546A65FE3EELL;
    if (*(void *)&v6 <= 0x37F8C546A65FE3EEuLL) {
      uint64_t v8 = 0x37F8C546A65FE3EEuLL % *(void *)&v6;
    }
  }
  else
  {
    uint64_t v8 = (*(void *)&v6 - 1) & 0x37F8C546A65FE3EELL;
  }
  long long v9 = *(void **)(*v5 + 8 * v8);
  if (!v9) {
    goto LABEL_25;
  }
  long long v10 = (void *)*v9;
  if (!v10) {
    goto LABEL_25;
  }
  if (v7.u32[0] < 2uLL)
  {
    uint64_t v11 = *(void *)&v6 - 1;
    while (1)
    {
      uint64_t v13 = v10[1];
      if (v13 == 0x37F8C546A65FE3EELL)
      {
        if (v10[2] == 0x37F8C546A65FE3EELL) {
          goto LABEL_22;
        }
      }
      else if ((v13 & v11) != v8)
      {
        goto LABEL_25;
      }
      long long v10 = (void *)*v10;
      if (!v10) {
        goto LABEL_25;
      }
    }
  }
  while (1)
  {
    unint64_t v12 = v10[1];
    if (v12 == 0x37F8C546A65FE3EELL) {
      break;
    }
    if (v12 >= *(void *)&v6) {
      v12 %= *(void *)&v6;
    }
    if (v12 != v8) {
      goto LABEL_25;
    }
LABEL_11:
    long long v10 = (void *)*v10;
    if (!v10) {
      goto LABEL_25;
    }
  }
  if (v10[2] != 0x37F8C546A65FE3EELL) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v14 = v10[5];
  if (*(void *)(v14 + 8) == 0x37F8C546A65FE3EELL)
  {
    uint64_t v15 = *(void *)(v14 + 32);
    if (v15)
    {
      double v291 = *(double *)(v15 + 88);
      int v292 = *(unsigned __int8 *)(v15 + 96);
      goto LABEL_26;
    }
  }
LABEL_25:
  int v292 = 0;
  double v291 = 0.0;
LABEL_26:
  uint64_t v16 = *(void *)(*(void *)v4 + 432);
  uint64_t v17 = *(void *)(v4 + 776);
  md::LabelLayoutContext::coordinateEyePos((md::LabelLayoutContext *)&v301, v16);
  float64_t v293 = (double *)v16;
  int v18 = *(unsigned __int8 *)(v16 + 17);
  double v20 = v301;
  double v19 = *(double *)&v302;
  *(double *)(v17 + 32) = v301;
  *(double *)(v17 + 40) = v19;
  uint64_t v21 = *((void *)&v302 + 1);
  *(void *)(v17 + 48) = *((void *)&v302 + 1);
  *(unsigned char *)(v17 + 56) = v18;
  if (v19 == 0.0 && v20 == 0.0)
  {
    if (v18)
    {
      if (GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken != -1) {
        dispatch_once(&GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken, &__block_literal_global_51);
      }
      uint64_t v23 = GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "!_hasLocalizedAltitude";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/VectorKit/src/HighPrecisionAltitudeRequestor.mm";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&unsigned char buf[24] = 336;
        _os_log_impl(&dword_1A1780000, v23, OS_LOG_TYPE_ERROR, "We are getting an empty coordinate while localized: Assertion with expression - %s : Failed in file - %s line - %i", buf, 0x1Cu);
      }
    }
    goto LABEL_125;
  }
  if (!v18) {
    goto LABEL_117;
  }
  double v312 = &v314;
  uint64_t v313 = 2;
  uint64_t v314 = v21;
  *(void *)&long long v311 = &v314;
  *((void *)&v311 + 1) = v315;
  long long v294 = v302;
  double v24 = *(double *)(v17 + 64);
  long double v25 = cos(v20 * 0.034906585) * -559.82 + 111132.92;
  long double v26 = v25 + cos(v20 * 0.0698131701) * 1.175;
  long double v27 = v26 + cos(v20 * 0.104719755) * -0.0023;
  long double v28 = tan(v20 * 0.00872664626 + 0.78103484);
  double v29 = log(v28);
  long double v30 = tan(v20 * 0.00872664626 + 0.789761487);
  double v31 = fabs((log(v30) - v29) * 0.159154943);
  long double v32 = tan(v20 * 0.00872664626 + 0.785398163);
  long double v33 = log(v32);
  *(void *)&v34.f64[0] = v294;
  v34.f64[1] = v33;
  __asm { FMOV            V3.2D, #0.5 }
  uint64x2_t v305 = vcvtq_u64_f64(vmulq_n_f64(vmlaq_f64(_Q3, (float64x2_t)xmmword_1A28FCBE0, v34), v27 / (v31 * v24)));
  uint64_t v39 = v305.i64[1];
  uint64_t v40 = v305.i64[0];
  unint64_t v41 = std::__hash_table<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::__unordered_map_hasher<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,md::SpatialKeyHash,std::equal_to<md::SpatialKey>,true>,std::__unordered_map_equal<md::SpatialKey,std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>,std::equal_to<md::SpatialKey>,md::SpatialKeyHash,true>,std::allocator<std::__hash_value_type<md::SpatialKey,std::__list_iterator<std::pair<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::find<md::SpatialKey>((void *)(v17 + 280), v305.i64[0], v305.i64[1]);
  if (!v41) {
    goto LABEL_68;
  }
  unint64_t v42 = *(uint64_t **)(v17 + 328);
  unint64_t v43 = (uint64_t *)v41[4];
  if (v42 != v43)
  {
    size_t v44 = (uint64_t *)v43[1];
    if (v44 != v42)
    {
      uint64_t v45 = *v43;
      *(void *)(v45 + 8) = v44;
      *(void *)v43[1] = v45;
      uint64_t v46 = *v42;
      *(void *)(v46 + 8) = v43;
      *unint64_t v43 = v46;
      *unint64_t v42 = (uint64_t)v43;
      v43[1] = (uint64_t)v42;
      unint64_t v42 = *(uint64_t **)(v17 + 328);
    }
  }
  if (v42 == (uint64_t *)(v17 + 320))
  {
LABEL_68:
    uint64_t v69 = (char *)operator new(0x70uLL);
    *((void *)v69 + 1) = 0;
    *((void *)v69 + 2) = 0;
    *(_OWORD *)(v69 + 24) = 0u;
    *(void *)uint64_t v69 = &unk_1EF582358;
    double v70 = v69 + 88;
    *(_OWORD *)(v69 + 40) = 0u;
    *((void *)v69 + 7) = v69 + 88;
    *((void *)v69 + 8) = v69 + 88;
    *((void *)v69 + 9) = v69 + 88;
    *((void *)v69 + 10) = 2;
    uint64_t v71 = (uint64_t *)v311;
    size_t v72 = (char *)v315 - v311;
    unint64_t v73 = (uint64_t)((uint64_t)v315 - v311) >> 3;
    if ((unint64_t)((unint64_t)v315 - v311) < 0x11) {
      goto LABEL_82;
    }
    uint64_t v295 = v40;
    if (v73 <= 4) {
      uint64_t v74 = 4;
    }
    else {
      uint64_t v74 = (uint64_t)((uint64_t)v315 - v311) >> 3;
    }
    double v70 = (char *)malloc_type_malloc(8 * v74, 0x100004000313F17uLL);
    long double v75 = (uint64_t *)*((void *)v69 + 7);
    float64x2_t v76 = (char *)*((void *)v69 + 8);
    if (v75 != (uint64_t *)v76)
    {
      unint64_t v77 = v76 - (char *)v75 - 8;
      if (v77 < 0x18)
      {
        uint64_t v78 = v70;
      }
      else
      {
        uint64_t v78 = v70;
        if ((unint64_t)(v70 - (char *)v75) >= 0x20)
        {
          uint64_t v79 = (v77 >> 3) + 1;
          uint64_t v80 = 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v78 = &v70[v80];
          uint64_t v81 = (long long *)(v75 + 2);
          char v82 = v70 + 16;
          uint64_t v83 = v79 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v84 = *v81;
            *(v82 - 1) = *(v81 - 1);
            *char v82 = v84;
            v81 += 2;
            v82 += 2;
            v83 -= 4;
          }
          while (v83);
          if (v79 == (v79 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_81;
          }
          long double v75 = (uint64_t *)((char *)v75 + v80);
        }
      }
      do
      {
        uint64_t v85 = *v75++;
        *(void *)uint64_t v78 = v85;
        v78 += 8;
      }
      while (v75 != (uint64_t *)v76);
    }
LABEL_81:
    *((void *)v69 + 7) = v70;
    *((void *)v69 + 10) = v74;
    uint64_t v40 = v295;
LABEL_82:
    if (v71 != v315)
    {
      if ((unint64_t)(v72 - 8) < 0x18)
      {
        id v86 = v70;
      }
      else
      {
        id v86 = v70;
        if ((unint64_t)(v70 - (char *)v71) >= 0x20)
        {
          unint64_t v87 = ((unint64_t)(v72 - 8) >> 3) + 1;
          uint64_t v88 = 8 * (v87 & 0x3FFFFFFFFFFFFFFCLL);
          id v86 = &v70[v88];
          uint64_t v89 = (long long *)(v71 + 2);
          id v90 = v70 + 16;
          uint64_t v91 = v87 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v92 = *v89;
            *(v90 - 1) = *(v89 - 1);
            *id v90 = v92;
            v89 += 2;
            v90 += 2;
            v91 -= 4;
          }
          while (v91);
          if (v87 == (v87 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_91;
          }
          uint64_t v71 = (uint64_t *)((char *)v71 + v88);
        }
      }
      do
      {
        uint64_t v93 = *v71++;
        *(void *)id v86 = v93;
        v86 += 8;
      }
      while (v71 != v315);
    }
LABEL_91:
    *((void *)v69 + 8) = &v70[8 * v73];
    v69[104] = 1;
    double v303 = v69 + 24;
    double v304 = (std::__shared_weak_count *)v69;
    if (GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken, &__block_literal_global_51);
    }
    unint64_t v94 = GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134219008;
      *(double *)&uint8_t buf[4] = v301;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v302;
      *(_WORD *)&buf[22] = 2048;
      *(void *)&unsigned char buf[24] = *((void *)&v302 + 1);
      *(_WORD *)&buf[32] = 2048;
      *(void *)&buf[34] = v40;
      *(_WORD *)&buf[42] = 2048;
      *(void *)&buf[44] = v39;
      _os_log_impl(&dword_1A1780000, v94, OS_LOG_TYPE_DEBUG, "Adding high precision altitude from device location coordinate:%f,%f,%f key:%llu,%llu", buf, 0x34u);
    }
    unint64_t v95 = geo::Cache<md::SpatialKey,std::shared_ptr<md::HighPrecisionAltitudeRequest>,md::SpatialKeyHash,geo::LRUPolicy>::operator[](v17 + 272, v305.i64);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v69 + 1, 1uLL, memory_order_relaxed);
    int8x8_t v96 = (std::__shared_weak_count *)v95[1];
    *unint64_t v95 = (uint64_t)(v69 + 24);
    v95[1] = (uint64_t)v69;
    if (v96 && !atomic_fetch_add(&v96->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
    uint8x8_t v97 = v304;
    if (v304 && !atomic_fetch_add(&v304->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
    goto LABEL_115;
  }
  if (!*(unsigned char *)(v42[4] + 80))
  {
    if (GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::onceToken, &__block_literal_global_51);
    }
    uint64_t v47 = GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitHighPrecisionAltitudeRequestorLog(void)::log, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134219008;
      *(double *)&uint8_t buf[4] = v20;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v294;
      *(_WORD *)&buf[22] = 2048;
      *(void *)&unsigned char buf[24] = *((void *)&v294 + 1);
      *(_WORD *)&buf[32] = 2048;
      *(void *)&buf[34] = v40;
      *(_WORD *)&buf[42] = 2048;
      *(void *)&buf[44] = v39;
      _os_log_impl(&dword_1A1780000, v47, OS_LOG_TYPE_DEBUG, "Adding high precision altitude from device location coordinate:%f,%f,%f key:%llu,%llu", buf, 0x34u);
    }
    uint64_t v48 = v42[4];
    if (!*(unsigned char *)(v48 + 80))
    {
      uint64_t v49 = *(std::__shared_weak_count **)(v48 + 8);
      *(void *)uint64_t v48 = 0;
      *(void *)(v48 + 8) = 0;
      if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
      double v50 = *(std::__shared_weak_count **)(v48 + 24);
      *(void *)(v48 + 16) = 0;
      *(void *)(v48 + 24) = 0;
      if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
      if ((long long *)(v48 + 32) != &v311)
      {
        double v51 = (char *)(v48 + 64);
        float v52 = *(void **)(v48 + 32);
        if (v52 != *(void **)(v48 + 48)) {
          free(v52);
        }
        *(void *)(v48 + 32) = v51;
        *(void *)(v48 + 40) = v51;
        *(void *)(v48 + 48) = v51;
        *(void *)(v48 + 56) = 2;
        unint64_t v54 = (uint64_t *)*((void *)&v311 + 1);
        BOOL v53 = (uint64_t *)v311;
        uint64_t v55 = *((void *)&v311 + 1) - v311;
        unint64_t v56 = (uint64_t)(*((void *)&v311 + 1) - v311) >> 3;
        if (*((void *)&v311 + 1) - (void)v311 >= 0x11uLL)
        {
          if (v56 <= 4) {
            uint64_t v57 = 4;
          }
          else {
            uint64_t v57 = (uint64_t)(*((void *)&v311 + 1) - v311) >> 3;
          }
          float64x2_t v58 = (char *)malloc_type_malloc(8 * v57, 0x100004000313F17uLL);
          double v51 = v58;
          uint64_t v59 = *(uint64_t **)(v48 + 32);
          double v60 = *(char **)(v48 + 40);
          if (v59 != (uint64_t *)v60)
          {
            unint64_t v61 = v60 - (char *)v59 - 8;
            if (v61 < 0x18)
            {
              size_t v62 = v58;
              goto LABEL_102;
            }
            size_t v62 = v58;
            if ((unint64_t)(v58 - (char *)v59) < 0x20)
            {
              do
              {
LABEL_102:
                uint64_t v98 = *v59++;
                *(void *)size_t v62 = v98;
                v62 += 8;
              }
              while (v59 != (uint64_t *)v60);
            }
            else
            {
              uint64_t v63 = (v61 >> 3) + 1;
              uint64_t v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
              size_t v62 = &v58[v64];
              size_t v65 = (long long *)(v59 + 2);
              uint64_t v66 = v58 + 16;
              uint64_t v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v68 = *v65;
                *(v66 - 1) = *(v65 - 1);
                *uint64_t v66 = v68;
                v65 += 2;
                v66 += 2;
                v67 -= 4;
              }
              while (v67);
              if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
              {
                uint64_t v59 = (uint64_t *)((char *)v59 + v64);
                goto LABEL_102;
              }
            }
          }
          *(void *)(v48 + 32) = v58;
          *(void *)(v48 + 56) = v57;
        }
        if (v53 != v54)
        {
          if ((unint64_t)(v55 - 8) < 0x18)
          {
            double v99 = v51;
            goto LABEL_112;
          }
          double v99 = v51;
          if ((unint64_t)(v51 - (char *)v53) < 0x20)
          {
            do
            {
LABEL_112:
              uint64_t v106 = *v53++;
              *(void *)double v99 = v106;
              v99 += 8;
            }
            while (v53 != v54);
          }
          else
          {
            unint64_t v100 = ((unint64_t)(v55 - 8) >> 3) + 1;
            uint64_t v101 = 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
            double v99 = &v51[v101];
            unint64_t v102 = (long long *)(v53 + 2);
            uint64_t v103 = v51 + 16;
            uint64_t v104 = v100 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v105 = *v102;
              *(v103 - 1) = *(v102 - 1);
              *uint64_t v103 = v105;
              v102 += 2;
              v103 += 2;
              v104 -= 4;
            }
            while (v104);
            if (v100 != (v100 & 0x3FFFFFFFFFFFFFFCLL))
            {
              BOOL v53 = (uint64_t *)((char *)v53 + v101);
              goto LABEL_112;
            }
          }
        }
        *(void *)(v48 + 40) = &v51[8 * v56];
      }
      *(unsigned char *)(v48 + 80) = 1;
    }
  }
LABEL_115:
  if ((uint64_t *)v311 != v312) {
    free((void *)v311);
  }
LABEL_117:
  double v107 = md::HighPrecisionAltitudeRequestor::vlLocalizer((md::HighPrecisionAltitudeRequestor *)v17);
  if (v107)
  {
    if (atomic_load_explicit((atomic_ullong *volatile)(v17 + 440), memory_order_acquire) != -1)
    {
      *(void *)&long long v311 = &v303;
      v305.i64[0] = (uint64_t)&v311;
      std::__call_once((std::once_flag::_State_type *)(v17 + 440), &v305, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<md::HighPrecisionAltitudeRequestor::loadFrameworks(void)::$_0 &&>>);
    }
    uint64_t v108 = [objc_alloc((Class)getCLLocationClass[0]()) initWithLatitude:*(double *)(v17 + 32) longitude:*(double *)(v17 + 40)];
    *(void *)buf = &unk_1EF559378;
    *(void *)&uint8_t buf[8] = v108;
    if (v108)
    {
      [v107 prepareWithDeviceLocation:v108];
      uint64_t v109 = *(void **)&buf[8];
    }
    else
    {
      uint64_t v109 = 0;
    }
    *(void *)buf = &unk_1EF559378;
  }
LABEL_125:
  if (a4)
  {
    *(void *)&uint8_t buf[8] = 0;
    *(void *)&uint8_t buf[16] = 0;
    *(void *)buf = &buf[8];
    *(int64x2_t *)&unsigned char buf[24] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    *(int64x2_t *)&buf[40] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    uint64_t v110 = v4 + 848;
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*(void **)(v4 + 848));
    unint64_t v111 = *(void **)&buf[8];
    *(void *)(v4 + 840) = *(void *)buf;
    *(void *)(v4 + 848) = v111;
    uint64_t v112 = *(void *)&buf[16];
    *(void *)(v4 + 856) = *(void *)&buf[16];
    if (v112)
    {
      v111[2] = v110;
      *(void *)buf = &buf[8];
      *(void *)&uint8_t buf[8] = 0;
      *(void *)&uint8_t buf[16] = 0;
      unint64_t v111 = 0;
    }
    else
    {
      *(void *)(v4 + 840) = v110;
    }
    long long v113 = *(_OWORD *)&buf[40];
    *(_OWORD *)(v4 + 864) = *(_OWORD *)&buf[24];
    *(_OWORD *)(v4 + 880) = v113;
    std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(v111);
    ++*(void *)(v4 + 896);
    for (uint64_t i = *(void **)(a3 + 24); i; uint64_t i = (void *)*i)
    {
      uint64_t v121 = i[2];
      if (*(unsigned __int8 *)(v121 + 9) >= *(unsigned __int8 *)(v4 + 48)) {
        md::MultiRectRegion::addRect((double **)(v4 + 840), (double *)(v121 + 40));
      }
    }
    if (v4 + 784 != a3)
    {
      *(_DWORD *)(v4 + 832) = *(_DWORD *)(a3 + 48);
      std::__hash_table<std::shared_ptr<md::LabelMapTile>,std::hash<std::shared_ptr<md::LabelMapTile>>,std::equal_to<std::shared_ptr<md::LabelMapTile>>,geo::StdAllocator<std::shared_ptr<md::LabelMapTile>,mdm::Allocator>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::shared_ptr<md::LabelMapTile>,void *> *>>((void *)(v4 + 784), *(void **)(a3 + 24));
    }
  }
  if (*(void *)(v4 + 896) != *(void *)(v4 + 752))
  {
    if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
    }
    double v115 = GEOGetVectorKitARWalkingSupportLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
    {
      uint64_t v116 = *(void *)(v4 + 768);
      uint64_t v117 = *(void *)(v4 + 752);
      uint64_t v118 = *(void *)(v4 + 896);
      *(_DWORD *)buf = 134218496;
      *(void *)&uint8_t buf[4] = v116;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v117;
      *(_WORD *)&buf[22] = 2048;
      *(void *)&unsigned char buf[24] = v118;
      _os_log_impl(&dword_1A1780000, v115, OS_LOG_TYPE_INFO, "FeatureSet(version:%llu) has mismatching sceneStamp:%llu expected:%llu", buf, 0x20u);
    }
    *(void *)(v4 + 752) = *(void *)(v4 + 896);
    long long v119 = *(uint64_t **)(v4 + 552);
    for (uint64_t j = *(uint64_t **)(v4 + 560); v119 != j; v119 += 2)
    {
      memset(buf, 0, 32);
      *(_DWORD *)&buf[32] = 1065353216;
      md::ARWalkingSupport::prepareContinueFeaturePlacementsForRegion(v4, v119, v4 + 840, (uint64_t)buf);
      if (*(void *)&buf[24])
      {
        double v122 = std::__hash_table<std::__hash_value_type<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,std::__unordered_map_hasher<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,std::hash<std::shared_ptr<md::ARWalkingContinueLabelFeature>>,std::equal_to<std::shared_ptr<md::ARWalkingContinueLabelFeature>>,true>,std::__unordered_map_equal<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>,std::equal_to<std::shared_ptr<md::ARWalkingContinueLabelFeature>>,std::hash<std::shared_ptr<md::ARWalkingContinueLabelFeature>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::unordered_map<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>>::__emplace_unique_key_args<std::shared_ptr<md::ARWalkingContinueLabelFeature>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<md::ARWalkingContinueLabelFeature> const&>,std::tuple<>>(v4 + 648, *v119, v119);
        std::__hash_table<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::__unordered_map_hasher<md::LabelIdentifier,std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::hash<md::LabelIdentifier>,std::equal_to<md::LabelIdentifier>,true>,std::__unordered_map_equal<md::LabelIdentifier,std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::equal_to<md::LabelIdentifier>,std::hash<md::LabelIdentifier>,true>,std::allocator<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>::__move_assign((uint64_t)(v122 + 4), (uint64_t *)buf);
      }
      unint64_t v123 = *(void **)&buf[16];
      if (*(void *)&buf[16])
      {
        do
        {
          uint8x8_t v125 = v123;
          unint64_t v123 = (void *)*v123;
          unint64_t v126 = (std::__shared_weak_count *)v125[4];
          if (v126 && !atomic_fetch_add(&v126->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v126);
          }
          operator delete(v125);
        }
        while (v123);
      }
      unint64_t v124 = *(void **)buf;
      *(void *)buf = 0;
      if (v124) {
        operator delete(v124);
      }
    }
  }
  if (*(unsigned char *)(v4 + 9))
  {
    md::LabelLayoutContext::mercatorEyePos((md::LabelLayoutContext *)v293);
    long double v128 = v127 * 6.28318531;
    long double v130 = exp(v129 * 6.28318531 + -3.14159265);
    double v131 = atan(v130) * 2.0 + -1.57079633;
    long double v132 = fmod(v128, 6.28318531);
    double v133 = fmod(v132 + 6.28318531, 6.28318531) + -3.14159265;
    __double2 v134 = __sincos_stret(v131);
    __double2 v136 = __sincos_stret(v133);
    uint64_t v137 = *(unint64_t **)(v4 + 520);
    unint64_t v138 = *(unint64_t **)(v4 + 528);
    if (v137 != v138)
    {
      double v139 = 6378137.0 / sqrt(v134.__sinval * v134.__sinval * -0.00669437999 + 1.0);
      double v140 = v139 * v134.__cosval * v136.__cosval;
      double v141 = v139 * v134.__cosval * v136.__sinval;
      double v142 = v134.__sinval * 0.99330562 * v139;
      uint64_t v143 = &qword_1E958E000;
      *(void *)&v135.__sinval = 138412290;
      __double2 v290 = v135;
      do
      {
        unint64_t v144 = *v137;
        if (!*(unsigned char *)(*v137 + 776))
        {
          int8x8_t v145 = *(int8x8_t *)(v4 + 696);
          if (v145)
          {
            unint64_t v146 = 0x9DDFEA08EB382D69 * (((8 * v144) + 8) ^ HIDWORD(v144));
            unint64_t v147 = 0x9DDFEA08EB382D69 * (HIDWORD(v144) ^ (v146 >> 47) ^ v146);
            unint64_t v148 = 0x9DDFEA08EB382D69 * (v147 ^ (v147 >> 47));
            uint8x8_t v149 = (uint8x8_t)vcnt_s8(v145);
            v149.i16[0] = vaddlv_u8(v149);
            if (v149.u32[0] > 1uLL)
            {
              unint64_t v150 = v148;
              if (v148 >= *(void *)&v145) {
                unint64_t v150 = v148 % *(void *)&v145;
              }
            }
            else
            {
              unint64_t v150 = v148 & (*(void *)&v145 - 1);
            }
            uint64_t v151 = *(void **)(*(void *)(v4 + 688) + 8 * v150);
            if (v151)
            {
              long long v152 = (void *)*v151;
              if (v152)
              {
                if (v149.u32[0] < 2uLL)
                {
                  uint64_t v153 = *(void *)&v145 - 1;
                  while (1)
                  {
                    uint64_t v155 = v152[1];
                    if (v148 == v155)
                    {
                      if (v152[2] == v144) {
                        goto LABEL_155;
                      }
                    }
                    else if ((v155 & v153) != v150)
                    {
                      goto LABEL_177;
                    }
                    long long v152 = (void *)*v152;
                    if (!v152) {
                      goto LABEL_177;
                    }
                  }
                }
                do
                {
                  unint64_t v154 = v152[1];
                  if (v148 == v154)
                  {
                    if (v152[2] == v144) {
                      goto LABEL_155;
                    }
                  }
                  else
                  {
                    if (v154 >= *(void *)&v145) {
                      v154 %= *(void *)&v145;
                    }
                    if (v154 != v150) {
                      break;
                    }
                  }
                  long long v152 = (void *)*v152;
                }
                while (v152);
              }
            }
          }
LABEL_177:
          *(_DWORD *)buf = 1;
          uint64_t v156 = (*(uint64_t (**)(unint64_t, unsigned char *))(*(void *)v144 + 112))(v144, buf);
          uint64_t v157 = v156;
          if (*(unsigned char *)(v156 + 44))
          {
            double v159 = *(double *)v156;
            double v158 = *(double *)(v156 + 8);
            double v160 = *(double *)(v156 + 16);
          }
          else
          {
            long double v161 = *(double *)(v156 + 24) * 6.28318531;
            long double v162 = exp(*(double *)(v156 + 32) * 6.28318531 + -3.14159265);
            double v163 = atan(v162) * 2.0 + -1.57079633;
            long double v164 = fmod(v161, 6.28318531);
            double v165 = fmod(v164 + 6.28318531, 6.28318531) + -3.14159265;
            __double2 v166 = __sincos_stret(v163);
            double v167 = 6378137.0 / sqrt(v166.__sinval * v166.__sinval * -0.00669437999 + 1.0);
            __double2 v168 = __sincos_stret(v165);
            double v159 = v167 * v166.__cosval * v168.__cosval;
            double v158 = v167 * v166.__cosval * v168.__sinval;
            *(double *)uint64_t v157 = v159;
            *(double *)(v157 + 8) = v158;
            double v160 = v166.__sinval * 0.99330562 * v167;
            *(double *)(v157 + 16) = v160;
            *(unsigned char *)(v157 + 44) = 1;
          }
          double v169 = (v140 - v159) * (v140 - v159) + (v141 - v158) * (v141 - v158) + (v142 - v160) * (v142 - v160);
          if (v169 <= *(double *)(v4 + 24))
          {
            if (v143[120] != -1) {
              dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
            }
            float v170 = (id)GEOGetVectorKitARWalkingSupportLog(void)::log;
            if (os_log_type_enabled(v170, OS_LOG_TYPE_INFO))
            {
              uint64_t v171 = *(void *)(v4 + 24);
              double v172 = v143;
              id v173 = *(id *)(*v137 + 680);
              *(_DWORD *)buf = 134218498;
              *(double *)&uint8_t buf[4] = v169;
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v171;
              *(_WORD *)&buf[22] = 2112;
              *(void *)&unsigned char buf[24] = v173;
              _os_log_impl(&dword_1A1780000, v170, OS_LOG_TYPE_INFO, "Maneuver feature has entered high precision threshold (d:%f t:%f). Requesting high precision altitude for Maneuver %@", buf, 0x20u);

              uint64_t v143 = v172;
            }

            long long v174 = *(uint64_t **)(v4 + 776);
            md::LabelPoint::coordinate((md::LabelPoint *)buf, v157);
            long long v311 = *(_OWORD *)buf;
            md::HighPrecisionAltitudeRequestor::requestAltitude(&v301, v174, (double *)&v311);
            if (v301 == 0.0)
            {
              buf[0] = 0;
              uint8_t buf[8] = 0;
              unsigned int v179 = (void *)*v137;
              long long v311 = 0uLL;
              md::ARWalkingManeuverLabelFeature::updateWithHighPrecisionAltitude(v179, (uint64_t)buf, 0, 0);
              if (v143[120] != -1) {
                dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
              }
              float64x2_t v180 = (id)GEOGetVectorKitARWalkingSupportLog(void)::log;
              if (os_log_type_enabled(v180, OS_LOG_TYPE_INFO))
              {
                id v181 = *(id *)(*v137 + 680);
                LODWORD(v311) = LODWORD(v290.__sinval);
                *(void *)((char *)&v311 + 4) = v181;
                _os_log_impl(&dword_1A1780000, v180, OS_LOG_TYPE_INFO, "Failed to request high precision altitude for Maneuver %@ - Will continue with fallback altitude", (uint8_t *)&v311, 0xCu);
              }
            }
            else
            {
              uint64_t v175 = (double *)std::__hash_table<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::__unordered_map_hasher<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::__unordered_map_equal<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,std::equal_to<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,std::hash<std::shared_ptr<md::ARWalkingManeuverLabelFeature>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::shared_ptr<md::HighPrecisionAltitudeRequest>>>>::__emplace_unique_key_args<std::shared_ptr<md::ARWalkingManeuverLabelFeature>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<md::ARWalkingManeuverLabelFeature> const&>,std::tuple<>>(v4 + 688, *v137, v137);
              double v177 = v301;
              uint64_t v176 = v302;
              if ((void)v302) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v302 + 8), 1uLL, memory_order_relaxed);
              }
              double v178 = (std::__shared_weak_count *)*((void *)v175 + 5);
              v175[4] = v177;
              *((void *)v175 + 5) = v176;
              if (v178 && !atomic_fetch_add(&v178->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                std::__shared_weak_count::__release_weak(v178);
              }
            }
            long long v182 = (std::__shared_weak_count *)v302;
            if ((void)v302 && !atomic_fetch_add((atomic_ullong *volatile)(v302 + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
              std::__shared_weak_count::__release_weak(v182);
            }
          }
        }
LABEL_155:
        v137 += 2;
      }
      while (v137 != v138);
    }
  }
  md::ARWalkingSupport::updateFeatureSet((md::ARWalkingSupport *)v4, (md::ARWalkingFeatureSet *)(v4 + 440));
  if (*(unsigned char *)(v4 + 88))
  {
    md::ARWalkingSupport::processSetFeatureRequest(v4, v4 + 56);
    if (*(unsigned char *)(v4 + 88))
    {
      *(void *)(v4 + 56) = &unk_1EF5599B8;

      *(unsigned char *)(v4 + 88) = 0;
    }
  }
  if (*(unsigned char *)(v4 + 432))
  {
    md::ARWalkingSupport::updateFeatureSet((md::ARWalkingSupport *)v4, (md::ARWalkingFeatureSet *)(v4 + 96));
    double v183 = v292 ? v293[42] - fmax(v291, *(double *)(v4 + 416)) : 0.0;
    if (*(void *)(v4 + 520) == *(void *)(v4 + 528)
      && *(void *)(v4 + 552) == *(void *)(v4 + 560)
      && *(void *)(v4 + 584) == *(void *)(v4 + 592))
    {
      uint64_t v289 = 40;
      if (*(void *)(v4 + 616) == *(void *)(v4 + 624)) {
        uint64_t v289 = 32;
      }
      float32x2_t v184 = (double *)(v4 + v289);
    }
    else
    {
      float32x2_t v184 = (double *)(v4 + 40);
    }
    if (!(*(void *)(v4 + 328) + *(void *)(v4 + 368)) || v183 > *v184)
    {
      if (!*(unsigned char *)(v4 + 432)
        || (*(void *)buf = &unk_1EF5599B8,
            *(void *)&uint8_t buf[8] = 0,
            id v185 = *(id *)(v4 + 448),
            double v186 = *(void **)&buf[8],
            *(void *)&uint8_t buf[8] = v185,
            v186,
            !*(unsigned char *)(v4 + 432)))
      {
        std::__throw_bad_optional_access[abi:nn180100]();
        goto LABEL_374;
      }
      md::ARWalkingFeatureSet::operator=(v4 + 440, v4 + 96);
      md::ARWalkingSupport::updateFeatureSetState(v4, *(void **)&buf[8], 5);
      if (*(void *)(v4 + 672) + *(void *)(v4 + 712)) {
        uint64_t v187 = 3;
      }
      else {
        uint64_t v187 = 4;
      }
      md::ARWalkingSupport::updateFeatureSetState(v4, *(void **)(v4 + 448), v187);
      *(void *)buf = &unk_1EF5599B8;

      md::LabelFeatureStyler::restyleFeatures(*(void *)(*(void *)v4 + 296), (uint64_t **)(v4 + 488));
      uint64_t v188 = *(void *)(v4 + 488);
      if (v188 != *(void *)(v4 + 496))
      {
        uint64_t v189 = *(void *)v4;
        *(unsigned char *)(v189 + 3041) = 1;
        unsigned __int8 v190 = atomic_load((unsigned __int8 *)(v189 + 3058));
        if (v190)
        {
          uint64_t v191 = *(void *)(v189 + 136);
          if (v191)
          {
            uint64_t v192 = *(void *)(v191 + 56);
            if (v192)
            {
              *(void *)buf = v189;
              LOBYTE(v311) = 9;
              (*(void (**)(uint64_t, unsigned char *, long long *))(*(void *)v192 + 48))(v192, buf, &v311);
            }
          }
        }
        uint64_t v188 = *(void *)(v4 + 488);
      }
      *(void *)(v4 + 496) = v188;
      if (*(unsigned char *)(v4 + 432))
      {
        md::ARWalkingFeatureSet::~ARWalkingFeatureSet((md::ARWalkingFeatureSet *)(v4 + 96));
        *(unsigned char *)(v4 + 432) = 0;
      }
      if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1) {
        dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
      }
      uint64_t v193 = GEOGetVectorKitARWalkingSupportLog(void)::log;
      if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
      {
        uint64_t v194 = *(void *)(v4 + 768);
        if (*(void *)(v4 + 328) + *(void *)(v4 + 368)) {
          float v195 = "YES";
        }
        else {
          float v195 = "NO";
        }
        unint64_t v196 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v4 + 472) - *(void *)(v4 + 464)) >> 3);
        uint64_t v197 = (uint64_t)(*(void *)(v4 + 592) - *(void *)(v4 + 584)) >> 4;
        uint64_t v198 = (uint64_t)(*(void *)(v4 + 528) - *(void *)(v4 + 520)) >> 4;
        uint64_t v199 = (uint64_t)(*(void *)(v4 + 560) - *(void *)(v4 + 552)) >> 4;
        uint64_t v200 = *(void *)(v4 + 672) + *(void *)(v4 + 712);
        *(_DWORD *)buf = 134219778;
        *(void *)&uint8_t buf[4] = v194;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v195;
        *(_WORD *)&buf[22] = 2048;
        *(double *)&unsigned char buf[24] = v183;
        *(_WORD *)&buf[32] = 2048;
        *(void *)&buf[34] = v196;
        *(_WORD *)&buf[42] = 2048;
        *(void *)&buf[44] = v197;
        *(_WORD *)&buf[52] = 2048;
        *(void *)&buf[54] = v198;
        __int16 v307 = 2048;
        uint64_t v308 = v199;
        __int16 v309 = 2048;
        uint64_t v310 = v200;
        _os_log_impl(&dword_1A1780000, v193, OS_LOG_TYPE_INFO, "Updating to FeatureSet version:%llu pendingRequests:%s elapsedTimeSinceLocalization:%f - tracking %lu AR Label Features (arrival:%lu maneuver:%lu continue:%lu pendingRequests:%lu)", buf, 0x52u);
      }
    }
  }
  if (*(void *)(v4 + 672) + *(void *)(v4 + 712)) {
    uint64_t v201 = 3;
  }
  else {
    uint64_t v201 = 4;
  }
  md::ARWalkingSupport::updateFeatureSetState(v4, *(void **)(v4 + 448), v201);
  for (uint64_t k = *(uint64_t ***)(v4 + 920); k; uint64_t k = (uint64_t **)*k)
  {
    uint64_t v204 = *(void *)v4;
    uint64_t v205 = k[3];
    uint64_t v206 = v205;
    uint64_t v207 = *(void *)(v204 + 136);
    if (v207 && *(void *)(v207 + 280))
    {
      *(void *)buf = v205;
      uint64_t v208 = *(void *)(v207 + 280);
      if (!v208)
      {
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_374:
        __break(1u);
        return;
      }
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v208 + 48))(v208, buf);
    }
  }
  if (*(void *)(v4 + 928))
  {
    long long v209 = *(void (****)(void))(v4 + 920);
    if (v209)
    {
      do
      {
        long long v210 = *v209;
        (*v209[2])();
        operator delete(v209);
        long long v209 = (void (***)(void))v210;
      }
      while (v210);
    }
    *(void *)(v4 + 920) = 0;
    uint64_t v211 = *(void *)(v4 + 912);
    if (v211)
    {
      for (uint64_t m = 0; m != v211; ++m)
        *(void *)(*(void *)(v4 + 904) + 8 * m) = 0;
    }
    *(void *)(v4 + 928) = 0;
  }
  uint64_t v213 = a1;
  md::StandardLabeler::synchronizedUpdate(a1, v202, a3, a4);
  unint64_t v214 = *(void **)(a2 + 8);
  int8x8_t v215 = (int8x8_t)v214[1];
  uint8x8_t v216 = (uint8x8_t)vcnt_s8(v215);
  v216.i16[0] = vaddlv_u8(v216);
  unint64_t v217 = v216.u32[0];
  if (v216.u32[0] >= 2uLL)
  {
    unint64_t v220 = 0x1AF456233693CD46;
    if (*(void *)&v215 <= 0x1AF456233693CD46uLL) {
      unint64_t v220 = 0x1AF456233693CD46uLL % *(void *)&v215;
    }
    uint64_t v219 = **(void ***)(*v214 + 8 * v220);
    uint64_t v218 = *(void *)&v215 - 1;
    while (v219[1] != 0x1AF456233693CD46 || v219[2] != 0x1AF456233693CD46)
      uint64_t v219 = (void *)*v219;
  }
  else
  {
    uint64_t v218 = *(void *)&v215 - 1;
    uint64_t v219 = *(void **)(*v214 + 8 * ((*(void *)&v215 - 1) & 0x1AF456233693CD46));
    do
    {
      do
        uint64_t v219 = (void *)*v219;
      while (v219[1] != 0x1AF456233693CD46);
    }
    while (v219[2] != 0x1AF456233693CD46);
  }
  uint64_t v221 = *(void *)(v219[5] + 32);
  uint64_t v222 = *(void *)(v221 + 24);
  *(float64x2_t *)(a1 + 408) = vmulq_f64(*(float64x2_t *)(v221 + 8), (float64x2_t)vdupq_n_s64(0x404CA5DC1A63C1F8uLL));
  *(void *)(a1 + 424) = v222;
  if (v217 > 1)
  {
    uint64_t v223 = 0x37F8C546A65FE3EELL;
    if (*(void *)&v215 <= 0x37F8C546A65FE3EEuLL) {
      uint64_t v223 = 0x37F8C546A65FE3EEuLL % *(void *)&v215;
    }
  }
  else
  {
    uint64_t v223 = (*(void *)&v215 - 1) & 0x37F8C546A65FE3EELL;
  }
  unsigned int v224 = *(void **)(*v214 + 8 * v223);
  if (!v224) {
    goto LABEL_283;
  }
  unint64_t v225 = (void *)*v224;
  if (!v225) {
    goto LABEL_283;
  }
  if (v217 < 2)
  {
    while (1)
    {
      uint64_t v226 = v225[1];
      if (v226 == 0x37F8C546A65FE3EELL)
      {
        if (v225[2] == 0x37F8C546A65FE3EELL) {
          goto LABEL_279;
        }
      }
      else if ((v226 & v218) != v223)
      {
        goto LABEL_283;
      }
      unint64_t v225 = (void *)*v225;
      if (!v225) {
        goto LABEL_283;
      }
    }
  }
  while (2)
  {
    unint64_t v227 = v225[1];
    if (v227 != 0x37F8C546A65FE3EELL)
    {
      if (v227 >= *(void *)&v215) {
        v227 %= *(void *)&v215;
      }
      if (v227 != v223) {
        goto LABEL_283;
      }
      goto LABEL_273;
    }
    if (v225[2] != 0x37F8C546A65FE3EELL)
    {
LABEL_273:
      unint64_t v225 = (void *)*v225;
      if (!v225) {
        goto LABEL_283;
      }
      continue;
    }
    break;
  }
LABEL_279:
  uint64_t v228 = v225[5];
  if (*(void *)(v228 + 8) == 0x37F8C546A65FE3EELL)
  {
    uint64_t v229 = *(void *)(v228 + 32);
    if (!v229) {
      goto LABEL_284;
    }
    if (*(unsigned char *)(v229 + 64) == 2)
    {
      LODWORD(v229) = *(unsigned __int8 *)(v229 + 16) == 3;
      goto LABEL_284;
    }
  }
LABEL_283:
  LODWORD(v229) = 0;
LABEL_284:
  *(unsigned char *)(a1 + 401) = v229;
  if (!*(unsigned char *)(*(void *)(a1 + 24) + 3034)) {
    LODWORD(v229) = 0;
  }
  if (*(unsigned __int8 *)(a1 + 400) != v229)
  {
    *(unsigned char *)(a1 + 400) = v229;
    if (GEOGetVectorKitARWalkingLabelerLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitARWalkingLabelerLog(void)::onceToken, &__block_literal_global_51128);
    }
    unsigned int v230 = (id)GEOGetVectorKitARWalkingLabelerLog(void)::log;
    if (os_log_type_enabled(v230, OS_LOG_TYPE_INFO))
    {
      BOOL v231 = "YES";
      if (*(unsigned char *)(a1 + 400)) {
        unint64_t v232 = "YES";
      }
      else {
        unint64_t v232 = "NO";
      }
      if (*(unsigned char *)(*(void *)(a1 + 24) + 3034)) {
        unint64_t v233 = "NO";
      }
      else {
        unint64_t v233 = "YES";
      }
      if (!*(unsigned char *)(a1 + 401)) {
        BOOL v231 = "NO";
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v232;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v233;
      *(_WORD *)&buf[22] = 2080;
      *(void *)&unsigned char buf[24] = v231;
      _os_log_impl(&dword_1A1780000, v230, OS_LOG_TYPE_INFO, "shouldLayoutLabels:%s (hideRoadLabels:%s, isSessionReady:%s)", buf, 0x20u);
    }

    uint64_t v213 = a1;
    if (*(unsigned char *)(a1 + 400)) {
      *(unsigned char *)(a1 + 1712) = 1;
    }
  }
  uint64_t v234 = *(void *)(*(void *)(v213 + 24) + 432);
  unint64_t v235 = +[VKDebugSettings sharedSettings];
  char v236 = [v235 labelOcclusionDisabled];

  double v237 = *(void **)(a2 + 8);
  int8x8_t v238 = (int8x8_t)v237[1];
  if (!*(void *)&v238) {
    goto LABEL_327;
  }
  uint8x8_t v239 = (uint8x8_t)vcnt_s8(v238);
  v239.i16[0] = vaddlv_u8(v239);
  if (v239.u32[0] > 1uLL)
  {
    uint64_t v240 = 0x6DBE9777D7FEDAAELL;
    if (*(void *)&v238 <= 0x6DBE9777D7FEDAAEuLL) {
      uint64_t v240 = 0x6DBE9777D7FEDAAEuLL % *(void *)&v238;
    }
  }
  else
  {
    uint64_t v240 = (*(void *)&v238 - 1) & 0x6DBE9777D7FEDAAELL;
  }
  float64x2_t v241 = *(void **)(*v237 + 8 * v240);
  if (!v241 || (float64x2_t v242 = (void *)*v241) == 0)
  {
LABEL_327:
    uint64_t v249 = 0;
    uint64_t v250 = 0;
    long long v311 = 0uLL;
    uint64_t v251 = a1;
    goto LABEL_328;
  }
  if (v239.u32[0] < 2uLL)
  {
    uint64_t v243 = *(void *)&v238 - 1;
    while (1)
    {
      uint64_t v245 = v242[1];
      if (v245 == 0x6DBE9777D7FEDAAELL)
      {
        if (v242[2] == 0x6DBE9777D7FEDAAELL) {
          goto LABEL_322;
        }
      }
      else if ((v245 & v243) != v240)
      {
        goto LABEL_327;
      }
      float64x2_t v242 = (void *)*v242;
      if (!v242) {
        goto LABEL_327;
      }
    }
  }
  while (2)
  {
    unint64_t v244 = v242[1];
    if (v244 != 0x6DBE9777D7FEDAAELL)
    {
      if (v244 >= *(void *)&v238) {
        v244 %= *(void *)&v238;
      }
      if (v244 != v240) {
        goto LABEL_327;
      }
      goto LABEL_311;
    }
    if (v242[2] != 0x6DBE9777D7FEDAAELL)
    {
LABEL_311:
      float64x2_t v242 = (void *)*v242;
      if (!v242) {
        goto LABEL_327;
      }
      continue;
    }
    break;
  }
LABEL_322:
  uint64_t v246 = v242[5];
  if (*(void *)(v246 + 8) != 0x6DBE9777D7FEDAAELL) {
    goto LABEL_327;
  }
  uint64_t v247 = *(void *)(v246 + 32);
  char v248 = v247 ? v236 : 1;
  if (v248) {
    goto LABEL_327;
  }
  uint64_t v250 = *(void *)(v247 + 40);
  uint64_t v249 = *(void *)(v247 + 48);
  *(void *)&long long v311 = v250;
  *((void *)&v311 + 1) = v249;
  uint64_t v251 = a1;
  if (v249) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v249 + 8), 1uLL, memory_order_relaxed);
  }
LABEL_328:
  if (*(unsigned char *)(v251 + 2216))
  {
    double v252 = (uint64_t *)(v251 + 1808);
    if (*(void *)(v251 + 1824))
    {
      double v253 = *(uint64_t **)(a1 + 1816);
      uint64_t v254 = *(void *)(a1 + 1808);
      uint64_t v255 = *v253;
      *(void *)(v255 + 8) = *(void *)(v254 + 8);
      **(void **)(v254 + 8) = v255;
      *(void *)(a1 + 1824) = 0;
      if (v253 != v252)
      {
        do
        {
          double v256 = (uint64_t *)v253[1];
          operator delete(v253);
          double v253 = v256;
        }
        while (v256 != v252);
      }
    }
    uint64_t v251 = a1;
    if (*(void *)(a1 + 1856))
    {
      double v257 = *(void **)(a1 + 1848);
      if (v257)
      {
        do
        {
          double v258 = (void *)*v257;
          operator delete(v257);
          double v257 = v258;
        }
        while (v258);
      }
      uint64_t v251 = a1;
      *(void *)(a1 + 1848) = 0;
      uint64_t v259 = *(void *)(a1 + 1840);
      if (v259)
      {
        for (uint64_t n = 0; n != v259; ++n)
          *(void *)(*(void *)(a1 + 1832) + 8 * n) = 0;
      }
      *(void *)(a1 + 1856) = 0;
    }
    *(void *)(v251 + 1872) = v252;
    *(void *)(v251 + 1880) = 0;
  }
  char v261 = *(unsigned char *)(*(void *)(*(void *)(v251 + 24) + 232) + 17);
  if (v249) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v249 + 8), 1uLL, memory_order_relaxed);
  }
  char v262 = v261 ^ 1;
  double v263 = (_OWORD *)(v251 + 1736);
  long long v264 = *(_OWORD *)(v234 + 136);
  uint64_t v265 = *(void *)(v234 + 152);
  *(void *)(v251 + 1720) = v250;
  double v266 = *(std::__shared_weak_count **)(v251 + 1728);
  *(void *)(v251 + 1728) = v249;
  if (v266 && !atomic_fetch_add(&v266->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    long long v299 = v264;
    ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
    std::__shared_weak_count::__release_weak(v266);
    long long v264 = v299;
  }
  *double v263 = v264;
  uint64_t v267 = a1;
  *(void *)(a1 + 1752) = v265;
  if (*(unsigned char *)(a1 + 1784)) {
    *(unsigned char *)(a1 + 1784) = 0;
  }
  *(unsigned char *)(a1 + 1792) = v262;
  *(unsigned char *)(a1 + 1795) = buf[2];
  *(_WORD *)(a1 + 1793) = *(_WORD *)buf;
  *(void *)(a1 + 1796) = 0;
  int v268 = *(unsigned __int8 *)(a1 + 400);
  *(unsigned char *)(a1 + 1713) = *(unsigned char *)(a1 + 2232);
  if (v268)
  {
    if (*(unsigned char *)(a1 + 405))
    {
      md::ARWalkingSupport::setARWalkingFeatures(*(md::ARWalkingSupport **)(a1 + 440), *(VKARWalkingFeatureSet **)(*(void *)(a1 + 440) + 448), 1);
      *(unsigned char *)(a1 + 405) = 0;
    }
    double v269 = *(double *)(v234 + 136) - *(double *)(a1 + 1648);
    float64x2_t v270 = *(float64x2_t *)(v234 + 144);
    float64x2_t v271 = vsubq_f64(v270, *(float64x2_t *)(a1 + 1656));
    float64x2_t v272 = vmulq_f64(v271, v271);
    double v273 = sqrt(v272.f64[0] + v269 * v269 + v272.f64[1]);
    if (*(unsigned char *)(v234 + 8))
    {
      long double v274 = exp(vmlad_n_f64(-3.14159265, 6.28318531, v270.f64[0]));
      long double v275 = atan(v274) * 114.591559 + -90.0;
      long double v276 = cos(v275 * 0.034906585) * -559.82 + 111132.92;
      long double v277 = v276 + cos(v275 * 0.0698131701) * 1.175;
      long double v278 = v277 + cos(v275 * 0.104719755) * -0.0023;
      long double v279 = v275 * 0.00872664626;
      long double v280 = tan(v275 * 0.00872664626 + 0.78103484);
      double v281 = log(v280);
      long double v282 = tan(v279 + 0.789761487);
      double v273 = v278 * v273 / fabs((log(v282) - v281) * 0.159154943);
    }
    if (*(unsigned char *)(a1 + 406) || *(unsigned char *)(a1 + 2216) || v273 >= *(double *)(a1 + 496))
    {
      if (GEOGetVectorKitARWalkingLabelerLog(void)::onceToken != -1) {
        dispatch_once(&GEOGetVectorKitARWalkingLabelerLog(void)::onceToken, &__block_literal_global_51128);
      }
      unsigned int v283 = (id)GEOGetVectorKitARWalkingLabelerLog(void)::log;
      if (os_log_type_enabled(v283, OS_LOG_TYPE_INFO))
      {
        double v284 = "true";
        uint64_t v285 = *(void *)(v234 + 136);
        uint64_t v286 = *(void *)(v234 + 144);
        if (!*(unsigned char *)(a1 + 2216)) {
          double v284 = "false";
        }
        uint64_t v287 = *(void *)(v234 + 152);
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = v284;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v273;
        *(_WORD *)&buf[22] = 2048;
        *(void *)&unsigned char buf[24] = v285;
        *(_WORD *)&buf[32] = 2048;
        *(void *)&buf[34] = v286;
        *(_WORD *)&buf[42] = 2048;
        *(void *)&buf[44] = v287;
        _os_log_impl(&dword_1A1780000, v283, OS_LOG_TYPE_INFO, "Needs re-evaluation didUpdateIntersector:%s distance:%f currentEyePos:%f,%f,%f", buf, 0x34u);
      }

      uint64_t v267 = a1;
      *(unsigned char *)(a1 + 1712) = 1;
    }
    *(unsigned char *)(v267 + 2216) = 0;
    *(unsigned char *)(v267 + 406) = 0;
  }
  float32x4_t v288 = (std::__shared_weak_count *)*((void *)&v311 + 1);
  if (*((void *)&v311 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v311 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
      std::__shared_weak_count::__release_weak(v288);
    }
  }
}

void sub_1A27C869C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  unint64_t v38 = *(void **)(v36 - 224);
  if (v38 != *(void **)(v36 - 208))
  {
    free(v38);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void md::ARWalkingLabeler::~ARWalkingLabeler(md::ARWalkingLabeler *this)
{
  md::ARWalkingLabeler::~ARWalkingLabeler(this);
  JUMPOUT(0x1A6239270);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  md::ARWalkingSupport *v9;
  uint64_t vars8;

  *(void *)this = &unk_1EF5358B8;
  *((void *)this + 1) = &unk_1EF535AD0;
  *((void *)this + 2) = &unk_1EF535B18;
  *((void *)this + 49) = &unk_1EF535B88;
  uint64_t v2 = **(uint64_t ***)(*((void *)this + 3) + 112);
  if (v2 != *(uint64_t **)(*(void *)(*((void *)this + 3) + 112) + 8) && *v2 != 0x6F66BE14E10A8F81)
  {
    uint64_t v3 = v2 + 5;
    do
    {
      uint64_t v4 = *v3;
      v3 += 5;
    }
    while (v4 != 0x6F66BE14E10A8F81);
    uint64_t v2 = v3 - 5;
  }
  uint64_t v5 = v2[3];
  int8x8_t v6 = (std::__shared_weak_count *)v2[4];
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  (*(void (**)(uint64_t, void))(*(void *)v5 + 56))(v5, *((void *)this + 59));
  *(void *)(*(void *)(*((void *)this + 3) + 168) + 40) = *(void *)(*(void *)(*((void *)this + 3) + 168)
                                                                             + 112);
  md::ARWalkingLabeler::{unnamed type#4}::~ARWalkingLabeler((uint64_t)this + 1968);
  md::ARWalkingLabeler::{unnamed type#3}::~ARWalkingLabeler((uint64_t)this + 1640);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable((uint64_t)this + 1560);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable((uint64_t)this + 1480);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 1400);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 1320);
  md::Monitorable<md::ConfigValue<GEOConfigKeyUInteger,unsigned int>>::~Monitorable((uint64_t)this + 1240);
  md::Monitorable<md::ConfigValue<GEOConfigKeyUInteger,unsigned int>>::~Monitorable((uint64_t)this + 1160);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 1080);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable((uint64_t)this + 1000);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable((uint64_t)this + 920);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable((uint64_t)this + 840);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable((uint64_t)this + 760);
  md::Monitorable<md::Transformable<md::ConfigValue<GEOConfigKeyDouble,double>>>::~Monitorable((uint64_t)this + 640);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable((uint64_t)this + 560);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable((uint64_t)this + 480);
  uint8x8_t v7 = (std::__shared_weak_count *)*((void *)this + 58);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = *((void *)this + 56);
  *((void *)this + 56) = 0;
  if (v8) {
    std::default_delete<md::LabelExternalMeshModerator>::operator()[abi:nn180100](v8);
  }
  long long v9 = (md::ARWalkingSupport *)*((void *)this + 55);
  *((void *)this + 55) = 0;
  if (v9)
  {
    md::ARWalkingSupport::~ARWalkingSupport(v9);
    MEMORY[0x1A6239270]();
  }
  md::StandardLabeler::~StandardLabeler(this);
}

void sub_1A27C8AF8(_Unwind_Exception *a1)
{
  md::ARWalkingLabeler::{unnamed type#4}::~ARWalkingLabeler(v1 + 1968);
  md::ARWalkingLabeler::{unnamed type#3}::~ARWalkingLabeler(v1 + 1640);
  md::ARWalkingLabeler::{unnamed type#2}::~ARWalkingLabeler(v1 + 480);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 456);
  uint64_t v3 = *(void *)(v1 + 448);
  *(void *)(v1 + 448) = 0;
  if (v3) {
    std::default_delete<md::LabelExternalMeshModerator>::operator()[abi:nn180100](v3);
  }
  std::unique_ptr<md::ARWalkingSupport>::~unique_ptr[abi:nn180100]((md::ARWalkingSupport **)(v1 + 440));
  md::StandardLabeler::~StandardLabeler((md::StandardLabeler *)v1);
  _Unwind_Resume(a1);
}

uint64_t md::ARWalkingLabeler::{unnamed type#4}::~ARWalkingLabeler(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 280);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 240);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 240);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = *(void *)(a1 + 200);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 208);
    int8x8_t v6 = *(void **)(a1 + 200);
    if (v5 != v4)
    {
      do
      {
        uint8x8_t v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        v5 -= 24;
      }
      while (v5 != v4);
      int8x8_t v6 = *(void **)(a1 + 200);
    }
    *(void *)(a1 + 208) = v4;
    operator delete(v6);
  }
  uint64_t v8 = *(void **)(a1 + 160);
  if (v8)
  {
    do
    {
      long long v9 = (void *)*v8;
      operator delete(v8);
      uint64_t v8 = v9;
    }
    while (v9);
  }
  long long v10 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = 0;
  if (v10) {
    operator delete(v10);
  }
  if (*(void *)(a1 + 136))
  {
    uint64_t v12 = *(void *)(a1 + 120);
    uint64_t v11 = *(uint64_t **)(a1 + 128);
    uint64_t v13 = *v11;
    *(void *)(v13 + 8) = *(void *)(v12 + 8);
    **(void **)(v12 + 8) = v13;
    *(void *)(a1 + 136) = 0;
    if (v11 != (uint64_t *)(a1 + 120))
    {
      do
      {
        uint64_t v14 = (uint64_t *)v11[1];
        operator delete(v11);
        uint64_t v11 = v14;
      }
      while (v14 != (uint64_t *)(a1 + 120));
    }
  }
  *(void *)(a1 + 72) = &unk_1EF5595D8;

  uint64_t v15 = *(void *)(a1 + 48);
  if (v15)
  {
    uint64_t v16 = *(void *)(a1 + 56);
    uint64_t v17 = *(void **)(a1 + 48);
    if (v16 != v15)
    {
      do
      {
        double v20 = (void **)(v16 - 24);
        std::vector<md::ARWalkingLabelDebugData>::__destroy_vector::operator()[abi:nn180100](&v20);
        int v18 = *(std::__shared_weak_count **)(v16 - 32);
        if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        v16 -= 40;
      }
      while (v16 != v15);
      uint64_t v17 = *(void **)(a1 + 48);
    }
    *(void *)(a1 + 56) = v15;
    operator delete(v17);
  }
  *(void *)(a1 + 16) = &unk_1EF5597D8;

  return a1;
}

uint64_t md::ARWalkingLabeler::{unnamed type#3}::~ARWalkingLabeler(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 304);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 288);
  *(void *)(a1 + 288) = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 264);
  if (v5)
  {
    do
    {
      int8x8_t v6 = (void *)*v5;
      operator delete(v5);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  uint8x8_t v7 = *(void **)(a1 + 248);
  *(void *)(a1 + 248) = 0;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 208);
  if (v8)
  {
    do
    {
      long long v9 = (void *)*v8;
      operator delete(v8);
      uint64_t v8 = v9;
    }
    while (v9);
  }
  long long v10 = *(void **)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v10) {
    operator delete(v10);
  }
  if (*(void *)(a1 + 184))
  {
    uint64_t v12 = *(void *)(a1 + 168);
    uint64_t v11 = *(uint64_t **)(a1 + 176);
    uint64_t v13 = *v11;
    *(void *)(v13 + 8) = *(void *)(v12 + 8);
    **(void **)(v12 + 8) = v13;
    *(void *)(a1 + 184) = 0;
    if (v11 != (uint64_t *)(a1 + 168))
    {
      do
      {
        uint64_t v14 = (uint64_t *)v11[1];
        operator delete(v11);
        uint64_t v11 = v14;
      }
      while (v14 != (uint64_t *)(a1 + 168));
    }
  }
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 88);
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  *(void *)(a1 + 48) = &unk_1EF5597D8;

  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 40);
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  return a1;
}

uint64_t md::Monitorable<md::Transformable<md::ConfigValue<GEOConfigKeyDouble,double>>>::~Monitorable(uint64_t a1)
{
  if (*(void *)(a1 + 64))
  {
    GEOConfigRemoveBlockListener();
    uint64_t v2 = *(void **)(a1 + 64);
    *(void *)(a1 + 64) = 0;
  }
  atomic_store(0, *(unsigned __int8 **)(a1 + 72));
  uint64_t v3 = *(void *)(a1 + 112);
  if (v3 == a1 + 88)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 88) + 32))(a1 + 88);
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
    if (!v4) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  if (v4)
  {
LABEL_9:
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
LABEL_11:

  uint64_t v5 = *(void *)(a1 + 56);
  if (v5 == a1 + 32)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 32) + 32))(a1 + 32);
  }
  else if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
  }
  return a1;
}

void sub_1A27C90EC(_Unwind_Exception *a1)
{
  std::function<void ()(double)>::~function((void *)(v1 + 88));
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](v1 + 72);

  md::Transformable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Transformable(v1);
  _Unwind_Resume(a1);
}

void md::ARWalkingSupport::~ARWalkingSupport(md::ARWalkingSupport *this)
{
  uint64_t v2 = (void (***)(void))*((void *)this + 115);
  if (v2)
  {
    do
    {
      uint64_t v3 = *v2;
      (*v2[2])();
      operator delete(v2);
      uint64_t v2 = (void (***)(void))v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 113);
  *((void *)this + 113) = 0;
  if (v4) {
    operator delete(v4);
  }
  std::__tree<std::pair<md::MapTileData *,BOOL>>::destroy(*((void **)this + 106));
  uint64_t v5 = (void *)*((void *)this + 101);
  while (v5)
  {
    int8x8_t v6 = v5;
    uint64_t v5 = (void *)*v5;
    uint8x8_t v7 = (std::__shared_weak_count *)v6[3];
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    (*(void (**)(void, void *, uint64_t))(**((void **)this + 102) + 40))(*((void *)this + 102), v6, 32);
  }
  uint64_t v8 = *((void *)this + 98);
  *((void *)this + 98) = 0;
  if (v8) {
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 100) + 40))(*((void *)this + 100), v8, 8 * *((void *)this + 99));
  }
  long long v9 = (md::HighPrecisionAltitudeRequestor *)*((void *)this + 97);
  *((void *)this + 97) = 0;
  if (v9)
  {
    md::HighPrecisionAltitudeRequestor::~HighPrecisionAltitudeRequestor(v9);
    MEMORY[0x1A6239270]();
  }
  md::ARWalkingFeatureSet::~ARWalkingFeatureSet((md::ARWalkingSupport *)((char *)this + 440));
  if (*((unsigned char *)this + 432)) {
    md::ARWalkingFeatureSet::~ARWalkingFeatureSet((md::ARWalkingSupport *)((char *)this + 96));
  }
  if (*((unsigned char *)this + 88))
  {
    *((void *)this + 7) = &unk_1EF5599B8;
  }
}

uint64_t md::ARWalkingLabeler::{unnamed type#2}::~ARWalkingLabeler(uint64_t a1)
{
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable(a1 + 1080);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable(a1 + 1000);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(a1 + 920);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(a1 + 840);
  md::Monitorable<md::ConfigValue<GEOConfigKeyUInteger,unsigned int>>::~Monitorable(a1 + 760);
  md::Monitorable<md::ConfigValue<GEOConfigKeyUInteger,unsigned int>>::~Monitorable(a1 + 680);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(a1 + 600);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable(a1 + 520);
  md::Monitorable<md::ConfigValue<GEOConfigKeyBOOL,BOOL>>::~Monitorable(a1 + 440);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable(a1 + 360);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable(a1 + 280);
  md::Monitorable<md::Transformable<md::ConfigValue<GEOConfigKeyDouble,double>>>::~Monitorable(a1 + 160);
  md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable(a1 + 80);
  return md::Monitorable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Monitorable(a1);
}

md::ARWalkingSupport **std::unique_ptr<md::ARWalkingSupport>::~unique_ptr[abi:nn180100](md::ARWalkingSupport **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    md::ARWalkingSupport::~ARWalkingSupport(v2);
    MEMORY[0x1A6239270]();
  }
  return a1;
}

uint64_t md::Transformable<md::ConfigValue<GEOConfigKeyDouble,double>>::~Transformable(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  uint64_t v3 = *(void *)(a1 + 56);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

uint64_t ARStringForFeature(unsigned char *a1, id **a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v27);
  int v4 = (*((uint64_t (**)(id *))**a2 + 33))(*a2);
  md::to_string((uint64_t)v24, v4);
  if (v25 >= 0) {
    uint64_t v5 = v24;
  }
  else {
    uint64_t v5 = (void *)v24[0];
  }
  if (v25 >= 0) {
    uint64_t v6 = HIBYTE(v25);
  }
  else {
    uint64_t v6 = v24[1];
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)v5, v6);
  if (SHIBYTE(v25) < 0) {
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v26 + 40))(v26, v24[0], v25 & 0x7FFFFFFFFFFFFFFFLL);
  }
  int v7 = (*((uint64_t (**)(id *))**a2 + 33))(*a2);
  uint64_t v8 = *a2;
  if (v7 == 24)
  {
    id v9 = v8[85];
    long long v10 = [v9 displayText];

    goto LABEL_13;
  }
  if ((*((unsigned int (**)(id *))*v8 + 33))(v8) == 26)
  {
    long long v10 = [(*a2)[25] displayText];
LABEL_13:
    if (!v10) {
      long long v10 = @"<NOTEXT>";
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)":", 1);
    uint64_t v11 = v10;
    uint64_t v12 = (const char *)[(__CFString *)v11 UTF8String];
    size_t v13 = strlen(v12);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)v12, v13);
    char v14 = v35;
    if ((v35 & 0x10) == 0) {
      goto LABEL_16;
    }
LABEL_19:
    unint64_t v16 = v34;
    if (v34 < v31)
    {
      unint64_t v34 = v31;
      unint64_t v16 = v31;
    }
    uint64_t v17 = (const void **)&v30;
    goto LABEL_23;
  }
  uint64_t v11 = 0;
  char v14 = v35;
  if ((v35 & 0x10) != 0) {
    goto LABEL_19;
  }
LABEL_16:
  if ((v14 & 8) == 0)
  {
    size_t v15 = 0;
    a1[23] = 0;
    goto LABEL_31;
  }
  uint64_t v17 = (const void **)v29;
  unint64_t v16 = v29[2];
LABEL_23:
  int v18 = *v17;
  size_t v15 = v16 - (void)*v17;
  if (v15 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v15 >= 0x17)
  {
    uint64_t v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v19 = v15 | 7;
    }
    uint64_t v20 = v19 + 1;
    uint64_t v21 = operator new(v19 + 1);
    *((void *)a1 + 1) = v15;
    *((void *)a1 + 2) = v20 | 0x8000000000000000;
    *(void *)a1 = v21;
    a1 = v21;
    goto LABEL_30;
  }
  a1[23] = v15;
  if (v15) {
LABEL_30:
  }
    memmove(a1, v18, v15);
LABEL_31:
  a1[v15] = 0;

  v27[0] = *MEMORY[0x1E4FBA408];
  uint64_t v22 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v27 + *(void *)(v27[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v28[0] = v22;
  v28[1] = MEMORY[0x1E4FBA470] + 16;
  if (v33 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A62391A0](&v36);
}

void sub_1A27C9814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void md::ARWalkingLabeler::ARWalkingLabeler(md::ARWalkingLabeler *this, md::LabelManager *a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  md::StandardLabeler::StandardLabeler(this, a2);
}

void sub_1A27CBEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,md::ARWalkingFeatureSet *a23,md::ARWalkingSupport **a24)
{
  md::ARWalkingLabeler::{unnamed type#4}::~ARWalkingLabeler(a10);
  md::ARWalkingLabeler::{unnamed type#3}::~ARWalkingLabeler(v26);
  md::ARWalkingLabeler::{unnamed type#2}::~ARWalkingLabeler(a11);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100](a12);
  uint64_t v28 = *((void *)v24 + 56);
  *((void *)v24 + 56) = 0;
  if (v28) {
    std::default_delete<md::LabelExternalMeshModerator>::operator()[abi:nn180100](v28);
  }
  std::unique_ptr<md::ARWalkingSupport>::~unique_ptr[abi:nn180100](a24);
  md::StandardLabeler::~StandardLabeler(v24);
  _Unwind_Resume(a1);
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_10,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_10>,void ()(double)>::operator()(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(v1 + 440);
  double v3 = *(double *)(v1 + 1576);
  if (*(double *)(v2 + 40) != v3)
  {
    if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
    }
    int v4 = GEOGetVectorKitARWalkingSupportLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
    {
      int v5 = 134217984;
      double v6 = v3;
      _os_log_impl(&dword_1A1780000, v4, OS_LOG_TYPE_INFO, "maxDelayPostLocalizationWithExistingFeatures:%f", (uint8_t *)&v5, 0xCu);
    }
    *(double *)(v2 + 40) = v3;
  }
}

uint64_t std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_10,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_10>,void ()(double)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF571D60;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_10,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_10>,void ()(double)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EF571D60;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_10,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_10>,void ()(double)>::~__func()
{
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_9,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_9>,void ()(double)>::operator()(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(v1 + 440);
  double v3 = *(double *)(v1 + 1496);
  if (*(double *)(v2 + 32) != v3)
  {
    if (GEOGetVectorKitARWalkingSupportLog(void)::onceToken != -1) {
      dispatch_once(&GEOGetVectorKitARWalkingSupportLog(void)::onceToken, &__block_literal_global_386);
    }
    int v4 = GEOGetVectorKitARWalkingSupportLog(void)::log;
    if (os_log_type_enabled((os_log_t)GEOGetVectorKitARWalkingSupportLog(void)::log, OS_LOG_TYPE_INFO))
    {
      int v5 = 134217984;
      double v6 = v3;
      _os_log_impl(&dword_1A1780000, v4, OS_LOG_TYPE_INFO, "maxDelayPostLocalizationWithoutExistingFeatures:%f", (uint8_t *)&v5, 0xCu);
    }
    *(double *)(v2 + 32) = v3;
  }
}

uint64_t std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_9,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_9>,void ()(double)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF571D18;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_9,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_9>,void ()(double)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EF571D18;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_9,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_9>,void ()(double)>::~__func()
{
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_8,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_8>,void ()(BOOL)>::operator()(uint64_t a1)
{
}

uint64_t std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_8,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_8>,void ()(BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF571CD0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_8,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_8>,void ()(BOOL)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EF571CD0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_8,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_8>,void ()(BOOL)>::~__func()
{
}

uint64_t std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_7,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_7>,void ()(unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF571C88;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_7,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_7>,void ()(unsigned int)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EF571C88;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_7,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_7>,void ()(unsigned int)>::~__func()
{
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_6,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_6>,void ()(unsigned int)>::operator()(uint64_t a1)
{
}

uint64_t std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_6,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_6>,void ()(unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF571C40;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_6,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_6>,void ()(unsigned int)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EF571C40;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_6,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_6>,void ()(unsigned int)>::~__func()
{
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_5,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_5>,void ()(BOOL)>::operator()(uint64_t a1)
{
}

uint64_t std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_5,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_5>,void ()(BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF571BF8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_5,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_5>,void ()(BOOL)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EF571BF8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_5,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_5>,void ()(BOOL)>::~__func()
{
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_4,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_4>,void ()(double)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(v1 + 440);
  uint64_t v3 = *(void *)(v1 + 1016);
  md::ARWalkingSupport::setHighPrecisionAltitudeDistanceThreshold(v2, (double *)&v3);
}

uint64_t std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_4,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_4>,void ()(double)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF571BB0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_4,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_4>,void ()(double)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EF571BB0;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_4,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_4>,void ()(double)>::~__func()
{
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_3,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_3>,void ()(BOOL)>::operator()(uint64_t a1)
{
}

uint64_t std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_3,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_3>,void ()(BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF571B68;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_3,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_3>,void ()(BOOL)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EF571B68;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_3,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_3>,void ()(BOOL)>::~__func()
{
}

uint64_t std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_2,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_2>,void ()(double)>::operator()(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 8) + 406) = 1;
  return result;
}

uint64_t std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_2,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_2>,void ()(double)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF571B20;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_2,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_2>,void ()(double)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EF571B20;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_2,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_2>,void ()(double)>::~__func()
{
}

uint64_t std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_1,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_1>,void ()(double)>::operator()(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 8) + 406) = 1;
  return result;
}

uint64_t std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_1,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_1>,void ()(double)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF571AD8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_1,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_1>,void ()(double)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EF571AD8;
  result[1] = v3;
  return result;
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_1,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_1>,void ()(double)>::~__func()
{
}

long double std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_0,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_0>,double ()(double const&)>::operator()(uint64_t a1, long double *a2)
{
  return cos(*a2);
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_0,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_0>,double ()(double const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF571A90;
}

void *std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_0,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_0>,double ()(double const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1EF571A90;
  return result;
}

void std::__function::__func<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_0,std::allocator<md::ARWalkingLabeler::initializeEvaluationConstants(void)::$_0>,double ()(double const&)>::~__func()
{
}

void *___ZN2md11MonitorableINS_13TransformableINS_11ConfigValueI18GEOConfigKeyDoubledEEEEE16setCallbackQueueEPU28objcproto17OS_dispatch_queue8NSObjectNSt3__18functionIFvdEEE_block_invoke(void *result)
{
  uint64_t v1 = (unsigned char *)result[5];
  if (v1)
  {
    uint64_t v2 = (double *)result[4];
    if (*v1)
    {
      uint64_t v3 = *((void *)v2 + 3);
      if (*(void *)v2) {
        BOOL v4 = *((void *)v2 + 1) == 0;
      }
      else {
        BOOL v4 = 1;
      }
      if (!v4)
      {
        GEOConfigGetDouble();
        *((void *)v2 + 2) = v5;
      }
      uint64_t v6 = *((void *)v2 + 7);
      if (v6)
      {
        v2[3] = (*(double (**)(uint64_t, void *))(*(void *)v6 + 48))(v6, (void *)v2 + 2);
        BOOL result = (void *)*((void *)v2 + 14);
        if (result)
        {
          uint64_t v7 = v3;
          return (void *)(*(uint64_t (**)(void *, uint64_t *))(*result + 48))(result, &v7);
        }
      }
      else
      {
        std::__throw_bad_function_call[abi:nn180100]();
        return (void *)md::splitRoadSectionByZ();
      }
    }
  }
  return result;
}

void md::splitRoadSectionByZ(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, void *a5, float a6, float a7)
{
  size_t v13 = a5;
  v14.n128_f64[0] = vabds_f32(a7, a6);
  if (v14.n128_f64[0] >= 1.0e-10)
  {
    uint64_t v26 = v13;
    v14.n128_f32[0] = fminf(a6, a7);
    float v15 = fmaxf(a6, a7);
    if (a4)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      unsigned int v18 = vcvtms_u32_f32(v14.n128_f32[0]);
      uint64_t v19 = (unsigned int *)(a3 + 20);
      while (*(v19 - 2) <= v18)
      {
        if (*((unsigned char *)v19 + 9)) {
          uint64_t v17 = *v19;
        }
        ++v16;
        v19 += 25;
        if (a4 == v16) {
          goto LABEL_18;
        }
      }
    }
    else
    {
      uint64_t v17 = 0;
      LODWORD(v16) = 0;
    }
    BOOL v20 = a4 >= v16;
    int v21 = a4 - v16;
    if (v21 != 0 && v20)
    {
      unsigned int v22 = vcvtps_u32_f32(v15);
      uint64_t v23 = (unsigned int *)(a3 + 100 * v16 + 20);
      while (1)
      {
        unsigned int v25 = *(v23 - 2);
        if (v25 >= v22) {
          break;
        }
        if (!*((unsigned char *)v23 + 9) || *v23 == v17)
        {
          float v24 = v14.n128_f32[0];
        }
        else
        {
          float v24 = (float)v25;
          v13[2](v14, (float)v25);
          uint64_t v17 = *v23;
          size_t v13 = v26;
        }
        v23 += 25;
        v14.n128_f32[0] = v24;
        if (!--v21) {
          goto LABEL_19;
        }
      }
    }
LABEL_18:
    float v24 = v14.n128_f32[0];
LABEL_19:
    ((void (*)(void (**)(__n128, float), uint64_t, uint64_t, uint64_t, BOOL, float, float))v13[2])(v13, v17, a1, a2, a6 > a7, v24, v15);
    size_t v13 = v26;
  }
}

void sub_1A27CCCC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void md::MapEngineConfiguration::createMode(int a1@<W1>, void *a2@<X8>)
{
  BOOL v4 = +[VKDebugSettings sharedSettings];
  if ([v4 forceFlyoverUnificationMode])
  {
    BOOL v5 = 1;
  }
  else if (GEOConfigGetBOOL())
  {
    uint64_t v6 = [MEMORY[0x1E4F64918] modernManager];
    uint64_t v7 = [v6 activeTileGroup];
    uint64_t v8 = [v7 activeTileSetForTileType:92 scale:1];
    BOOL v5 = v8 != 0;
  }
  else
  {
    BOOL v5 = 0;
  }

  switch(a1)
  {
    case 0:
      operator new();
    case 1:
      operator new();
    case 2:
      operator new();
    case 3:
      operator new();
    case 4:
      operator new();
    case 5:
      operator new();
    case 6:
      operator new();
    case 7:
      if (v5) {
        operator new();
      }
      operator new();
    case 8:
      if (v5) {
        operator new();
      }
      operator new();
    case 9:
      if (v5) {
        operator new();
      }
      operator new();
    case 10:
      operator new();
    case 11:
      operator new();
    case 12:
      operator new();
    case 13:
      operator new();
    case 18:
      operator new();
    default:
      *a2 = 0;
      return;
  }
}

void sub_1A27CD240(_Unwind_Exception *a1)
{
  MEMORY[0x1A6239270](v1, 0x10A1C403DD9F596);
  _Unwind_Resume(a1);
}

void sub_1A27CD308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t md::MapEngineConfiguration::resolveMode(md::MapEngineConfiguration *this, md::MapEngine *a2)
{
  uint64_t v2 = *((void *)a2 + 141);
  uint64_t v3 = *(unsigned char **)v2;
  BOOL v4 = *(unsigned char **)(v2 + 8);
  BOOL v5 = v3;
  if (v3 != v4)
  {
    BOOL v5 = v3;
    while (*v5 != 20)
    {
      v5 += 16;
      if (v5 == v4) {
        return 1;
      }
    }
  }
  if (v5 == v4) {
    return 1;
  }
  switch(*((_DWORD *)v5 + 2))
  {
    case 1:
      return 3;
    case 2:
      return 7;
    case 3:
      return 8;
    case 4:
      return 9;
    case 5:
      return 5;
    case 6:
      return 2;
    case 7:
      return 4;
    case 8:
      return 6;
    case 9:
      if (v3 == v4) {
        goto LABEL_22;
      }
      break;
    case 0xA:
      return 10;
    case 0xB:
      return 18;
    default:
      return 1;
  }
  while (*v3 != 26)
  {
    v3 += 16;
    if (v3 == v4) {
      goto LABEL_25;
    }
  }
LABEL_22:
  if (v3 == v4)
  {
LABEL_25:
    LOBYTE(v7) = 0;
    return (v7 + 14);
  }
  unsigned int v7 = v3[8];
  if (v7 >= 4) {
    return 10;
  }
  return (v7 + 14);
}

void md::DaVinciNavigationMapEngineMode::willBecomeInactive(uint64_t a1, uint64_t a2)
{
  md::DaVinciBaseMapEngineMode::willBecomeInactive(a1, a2);
  uint64_t v3 = *(int8x8_t **)(a2 + 1120);
  int8x8_t v4 = v3[2];
  if (!*(void *)&v4) {
    return;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  unint64_t v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    uint64_t v7 = 0x2FED70A4459DFCA1;
    if (*(void *)&v4 <= 0x2FED70A4459DFCA1uLL) {
      uint64_t v7 = 0x2FED70A4459DFCA1uLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v7 = (*(void *)&v4 - 1) & 0x2FED70A4459DFCA1;
  }
  uint64_t v8 = *(void **)(*(void *)&v3[1] + 8 * v7);
  if (!v8) {
    goto LABEL_26;
  }
  id v9 = (void *)*v8;
  if (!v9) {
    goto LABEL_26;
  }
  if (v5.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v11 = v9[1];
      if (v11 == 0x2FED70A4459DFCA1)
      {
        if (v9[2] == 0x2FED70A4459DFCA1) {
          goto LABEL_22;
        }
      }
      else if ((v11 & (*(void *)&v4 - 1)) != v7)
      {
        goto LABEL_24;
      }
      id v9 = (void *)*v9;
      if (!v9) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v10 = v9[1];
    if (v10 == 0x2FED70A4459DFCA1) {
      break;
    }
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
    if (v10 != v7) {
      goto LABEL_24;
    }
LABEL_11:
    id v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_24;
    }
  }
  if (v9[2] != 0x2FED70A4459DFCA1) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v12 = v9[5];
  if (v12)
  {
    md::StyleLogic::setMapMode(v12, 0, 0.0);
    uint64_t v3 = *(int8x8_t **)(a2 + 1120);
    int8x8_t v4 = v3[2];
  }
LABEL_24:
  if (!*(void *)&v4) {
    return;
  }
  uint8x8_t v13 = (uint8x8_t)vcnt_s8(v4);
  v13.i16[0] = vaddlv_u8(v13);
  unint64_t v6 = v13.u32[0];
LABEL_26:
  if (v6 > 1)
  {
    unint64_t v14 = 0xDAD5CEE0DC5FF509;
    if (*(void *)&v4 <= 0xDAD5CEE0DC5FF509) {
      unint64_t v14 = 0xDAD5CEE0DC5FF509 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v14 = (*(void *)&v4 - 1) & 0xDAD5CEE0DC5FF509;
  }
  int8x8_t v15 = v3[1];
  uint64_t v16 = *(void **)(*(void *)&v15 + 8 * v14);
  if (!v16) {
    goto LABEL_50;
  }
  uint64_t v17 = (void *)*v16;
  if (!v17) {
    goto LABEL_50;
  }
  if (v6 < 2)
  {
    while (1)
    {
      uint64_t v19 = v17[1];
      if (v19 == 0xDAD5CEE0DC5FF509)
      {
        if (v17[2] == 0xDAD5CEE0DC5FF509) {
          goto LABEL_46;
        }
      }
      else if ((v19 & (*(void *)&v4 - 1)) != v14)
      {
        goto LABEL_48;
      }
      uint64_t v17 = (void *)*v17;
      if (!v17) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v18 = v17[1];
    if (v18 != 0xDAD5CEE0DC5FF509)
    {
      if (v18 >= *(void *)&v4) {
        v18 %= *(void *)&v4;
      }
      if (v18 != v14) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }
    if (v17[2] != 0xDAD5CEE0DC5FF509)
    {
LABEL_35:
      uint64_t v17 = (void *)*v17;
      if (!v17) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v20 = v17[5];
  if (v20)
  {
    *(unsigned char *)(v20 + 168) = 0;
    int8x8_t v4 = v3[2];
  }
LABEL_48:
  if (!*(void *)&v4) {
    return;
  }
  uint8x8_t v21 = (uint8x8_t)vcnt_s8(v4);
  v21.i16[0] = vaddlv_u8(v21);
  unint64_t v6 = v21.u32[0];
LABEL_50:
  if (v6 > 1)
  {
    uint64_t v22 = 0x20A1ED17D78F322BLL;
    if (*(void *)&v4 <= 0x20A1ED17D78F322BuLL) {
      uint64_t v22 = 0x20A1ED17D78F322BuLL % *(void *)&v4;
    }
  }
  else
  {
    uint64_t v22 = (*(void *)&v4 - 1) & 0x20A1ED17D78F322BLL;
  }
  uint64_t v23 = *(void **)(*(void *)&v15 + 8 * v22);
  if (v23)
  {
    float v24 = (void *)*v23;
    if (v24)
    {
      if (v6 < 2)
      {
        uint64_t v25 = *(void *)&v4 - 1;
        while (1)
        {
          uint64_t v27 = v24[1];
          if (v27 == 0x20A1ED17D78F322BLL)
          {
            if (v24[2] == 0x20A1ED17D78F322BLL) {
              goto LABEL_70;
            }
          }
          else if ((v27 & v25) != v22)
          {
            return;
          }
          float v24 = (void *)*v24;
          if (!v24) {
            return;
          }
        }
      }
      do
      {
        unint64_t v26 = v24[1];
        if (v26 == 0x20A1ED17D78F322BLL)
        {
          if (v24[2] == 0x20A1ED17D78F322BLL)
          {
LABEL_70:
            uint64_t v28 = v24[5];
            if (v28)
            {
              double v29 = *(md::LabelManager **)(v28 + 160);
              md::LabelsLogic::setLabelMode(v29, 1u);
            }
            return;
          }
        }
        else
        {
          if (v26 >= *(void *)&v4) {
            v26 %= *(void *)&v4;
          }
          if (v26 != v22) {
            return;
          }
        }
        float v24 = (void *)*v24;
      }
      while (v24);
    }
  }
}

void md::DaVinciNavigationMapEngineMode::didBecomeActive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  md::DaVinciBaseMapEngineMode::didBecomeActive(a1, a2, a3, a4);
  uint8x8_t v5 = *(int8x8_t **)(a2 + 1120);
  int8x8_t v6 = v5[2];
  if (!*(void *)&v6) {
    return;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    uint64_t v9 = 0x2FED70A4459DFCA1;
    if (*(void *)&v6 <= 0x2FED70A4459DFCA1uLL) {
      uint64_t v9 = 0x2FED70A4459DFCA1uLL % *(void *)&v6;
    }
  }
  else
  {
    uint64_t v9 = (*(void *)&v6 - 1) & 0x2FED70A4459DFCA1;
  }
  unint64_t v10 = *(void **)(*(void *)&v5[1] + 8 * v9);
  if (!v10) {
    goto LABEL_26;
  }
  uint64_t v11 = (void *)*v10;
  if (!v11) {
    goto LABEL_26;
  }
  if (v7.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v13 = v11[1];
      if (v13 == 0x2FED70A4459DFCA1)
      {
        if (v11[2] == 0x2FED70A4459DFCA1) {
          goto LABEL_22;
        }
      }
      else if ((v13 & (*(void *)&v6 - 1)) != v9)
      {
        goto LABEL_24;
      }
      uint64_t v11 = (void *)*v11;
      if (!v11) {
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    unint64_t v12 = v11[1];
    if (v12 == 0x2FED70A4459DFCA1) {
      break;
    }
    if (v12 >= *(void *)&v6) {
      v12 %= *(void *)&v6;
    }
    if (v12 != v9) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v11 = (void *)*v11;
    if (!v11) {
      goto LABEL_24;
    }
  }
  if (v11[2] != 0x2FED70A4459DFCA1) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v14 = v11[5];
  if (v14)
  {
    md::StyleLogic::setMapMode(v14, 3, 0.0);
    uint8x8_t v5 = *(int8x8_t **)(a2 + 1120);
    int8x8_t v6 = v5[2];
  }
LABEL_24:
  if (!*(void *)&v6) {
    return;
  }
  uint8x8_t v15 = (uint8x8_t)vcnt_s8(v6);
  v15.i16[0] = vaddlv_u8(v15);
  unint64_t v8 = v15.u32[0];
LABEL_26:
  if (v8 > 1)
  {
    unint64_t v16 = 0xDAD5CEE0DC5FF509;
    if (*(void *)&v6 <= 0xDAD5CEE0DC5FF509) {
      unint64_t v16 = 0xDAD5CEE0DC5FF509 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v16 = (*(void *)&v6 - 1) & 0xDAD5CEE0DC5FF509;
  }
  int8x8_t v17 = v5[1];
  unint64_t v18 = *(void **)(*(void *)&v17 + 8 * v16);
  if (!v18) {
    goto LABEL_50;
  }
  uint64_t v19 = (void *)*v18;
  if (!v19) {
    goto LABEL_50;
  }
  if (v8 < 2)
  {
    while (1)
    {
      uint64_t v21 = v19[1];
      if (v21 == 0xDAD5CEE0DC5FF509)
      {
        if (v19[2] == 0xDAD5CEE0DC5FF509) {
          goto LABEL_46;
        }
      }
      else if ((v21 & (*(void *)&v6 - 1)) != v16)
      {
        goto LABEL_48;
      }
      uint64_t v19 = (void *)*v19;
      if (!v19) {
        goto LABEL_48;
      }
    }
  }
  while (2)
  {
    unint64_t v20 = v19[1];
    if (v20 != 0xDAD5CEE0DC5FF509)
    {
      if (v20 >= *(void *)&v6) {
        v20 %= *(void *)&v6;
      }
      if (v20 != v16) {
        goto LABEL_48;
      }
      goto LABEL_35;
    }
    if (v19[2] != 0xDAD5CEE0DC5FF509)
    {
LABEL_35:
      uint64_t v19 = (void *)*v19;
      if (!v19) {
        goto LABEL_48;
      }
      continue;
    }
    break;
  }
LABEL_46:
  uint64_t v22 = v19[5];
  if (v22)
  {
    *(unsigned char *)(v22 + 168) = 1;
    int8x8_t v6 = v5[2];
  }
LABEL_48:
  if (!*(void *)&v6) {
    return;
  }
  uint8x8_t v23 = (uint8x8_t)vcnt_s8(v6);
  v23.i16[0] = vaddlv_u8(v23);
  unint64_t v8 = v23.u32[0];
LABEL_50:
  if (v8 > 1)
  {
    uint64_t v24 = 0x20A1ED17D78F322BLL;
    if (*(void *)&v6 <= 0x20A1ED17D78F322BuLL) {
      uint64_t v24 = 0x20A1ED17D78F322BuLL % *(void *)&v6;
    }
  }
  else
  {
    uint64_t v24 = (*(void *)&v6 - 1) & 0x20A1ED17D78F322BLL;
  }
  uint64_t v25 = *(void **)(*(void *)&v17 + 8 * v24);
  if (v25)
  {
    unint64_t v26 = (void *)*v25;
    if (v26)
    {
      if (v8 < 2)
      {
        uint64_t v27 = *(void *)&v6 - 1;
        while (1)
        {
          uint64_t v29 = v26[1];
          if (v29 == 0x20A1ED17D78F322BLL)
          {
            if (v26[2] == 0x20A1ED17D78F322BLL) {
              goto LABEL_70;
            }
          }
          else if ((v29 & v27) != v24)
          {
            return;
          }
          unint64_t v26 = (void *)*v26;
          if (!v26) {
            return;
          }
        }
      }
      do
      {
        unint64_t v28 = v26[1];
        if (v28 == 0x20A1ED17D78F322BLL)
        {
          if (v26[2] == 0x20A1ED17D78F322BLL)
          {
LABEL_70:
            uint64_t v30 = v26[5];
            if (v30)
            {
              unint64_t v31 = *(md::LabelManager **)(v30 + 160);
              md::LabelsLogic::setLabelMode(v31, 2u);
            }
            return;
          }
        }
        else
        {
          if (v28 >= *(void *)&v6) {
            v28 %= *(void *)&v6;
          }
          if (v28 != v24) {
            return;
          }
        }
        unint64_t v26 = (void *)*v26;
      }
      while (v26);
    }
  }
}

void md::DaVinciNavigationMapEngineMode::~DaVinciNavigationMapEngineMode(md::DaVinciNavigationMapEngineMode *this)
{
  *(void *)this = &unk_1EF544D70;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::MapEngineMode::~MapEngineMode(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EF544D70;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  md::MapEngineMode::~MapEngineMode(this);
}

void md::DaVinciNavigationMapEngineMode::DaVinciNavigationMapEngineMode(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  v7[0] = a3;
  v7[1] = a4;
  if (a4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a4 + 8), 1uLL, memory_order_relaxed);
  }
  IsEnabled_VKMLayout_Navigatiouint64_t n = MapsFeature_IsEnabled_VKMLayout_Navigation();
  md::DaVinciBaseMapEngineMode::DaVinciBaseMapEngineMode(a1, 12, a2, v7, IsEnabled_VKMLayout_Navigation);
}

void sub_1A27CDF44(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = &unk_1EF544D70;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 72);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  md::MapEngineMode::~MapEngineMode(v1);
  _Unwind_Resume(a1);
}

void ggl::VSLibrary::~VSLibrary(ggl::VSLibrary *this)
{
  ggl::ShaderLibrary::~ShaderLibrary(this);
  JUMPOUT(0x1A6239270);
}

void ggl::VSLibraryBundleMTLData::~VSLibraryBundleMTLData(ggl::VSLibraryBundleMTLData *this)
{
  ggl::MTLShaderLibraryData::~MTLShaderLibraryData(this);
  JUMPOUT(0x1A6239270);
}

void *altitude::IOSurfaceData::operator=(void *a1, void *a2)
{
  uint64_t v3 = a2[2];
  a1[1] = a2[1];
  a1[2] = v3;
  uint64_t v5 = a2[3];
  uint64_t v4 = a2[4];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  int8x8_t v6 = (std::__shared_weak_count *)a1[4];
  a1[3] = v5;
  a1[4] = v4;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void altitude::IOSurfaceData::~IOSurfaceData(altitude::IOSurfaceData *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EF568C68;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  ggl::Data::~Data(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EF568C68;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  ggl::Data::~Data(this);
}

uint64_t md::MarkerFeatureHandle::MarkerFeatureHandle(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  *(_WORD *)(a1 + 16) = 255;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  int8x8_t v6 = *(std::__shared_weak_count **)(a2 + 8);
  if (v6)
  {
    uint8x8_t v7 = std::__shared_weak_count::lock(v6);
    if (v7) {
      unint64_t v8 = *(geo::codec::VectorTile **)a2;
    }
    else {
      unint64_t v8 = 0;
    }
  }
  else
  {
    unint64_t v8 = 0;
    uint8x8_t v7 = 0;
  }
  geo::codec::VectorTile::key(v8);
  *(void *)&long long v35 = GEOTileKeyMake();
  *((void *)&v35 + 1) = v9;
  unsigned int v10 = (unsigned __int16)(HIDWORD(v9) >> 8);
  uint64_t v11 = *(void *)((char *)&v35 + 1);
  uint64_t v12 = (*(void *)((char *)&v35 + 1) >> 40) & 0x3FLL;
  *(unsigned char *)(a1 + 16) = -1;
  *(unsigned char *)(a1 + 17) = v12;
  *((void *)&v13 + 1) = (v9 >> 8) | ((v10 | (HIBYTE(v9) << 16)) << 32);
  *(void *)&long long v13 = v11;
  *(void *)(a1 + 20) = *(void *)&vzip1_s32((int32x2_t)(*((void *)&v13 + 1) >> 8), (int32x2_t)(v13 >> 46)) & 0x3FFFFFF03FFFFFFLL;
  *(_DWORD *)(a1 + 40) = v10 >> 2;
  uint64_t v14 = [MEMORY[0x1E4F64918] modernManager];
  uint8x8_t v15 = [v14 activeTileGroup];
  *(_DWORD *)(a1 + 44) = [v15 versionForTileKey:&v35];

  uint64_t v17 = *(void *)(a2 + 24);
  uint64_t v16 = *(void *)(a2 + 32);
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v18 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v17;
  *(void *)(a1 + 56) = v16;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  *(unsigned char *)a1 = a3;
  *(void *)(a1 + 8) = -1;
  switch(a3)
  {
    case 1:
      unint64_t v27 = geo::codec::VectorTile::pois(v8);
      uint64_t v28 = geo::codec::VectorTile::poisCount(v8);
      if (v27 <= a2 && v27 + 224 * v28 > a2)
      {
        uint64_t v21 = (uint64_t)(a2 - v27) >> 5;
        unint64_t v22 = 0x6DB6DB6DB6DB6DB7;
        goto LABEL_30;
      }
      break;
    case 2:
    case 19:
      unint64_t v19 = geo::codec::VectorTile::lines(v8);
      unint64_t v20 = geo::codec::VectorTile::linesCount(v8);
      if (v19 <= a2 && v19 + 168 * v20 > a2)
      {
        uint64_t v21 = (uint64_t)(a2 - v19) >> 3;
        unint64_t v22 = 0xCF3CF3CF3CF3CF3DLL;
        goto LABEL_30;
      }
      break;
    case 8:
    case 12:
      unint64_t v25 = geo::codec::VectorTile::transitNodes(v8);
      unint64_t v26 = geo::codec::VectorTile::transitNodeCount(v8);
      if (v25 <= a2 && v25 + 344 * v26 > a2)
      {
        uint64_t v21 = (uint64_t)(a2 - v25) >> 3;
        unint64_t v22 = 0x82FA0BE82FA0BE83;
        goto LABEL_30;
      }
      break;
    case 9:
    case 13:
      unint64_t v23 = geo::codec::VectorTile::transitLines(v8);
      uint64_t v24 = geo::codec::VectorTile::transitLineCount(v8);
      if (v23 <= a2 && v23 + 104 * v24 > a2)
      {
        uint64_t v21 = (uint64_t)(a2 - v23) >> 3;
        unint64_t v22 = 0x4EC4EC4EC4EC4EC5;
        goto LABEL_30;
      }
      break;
    case 11:
      unint64_t v32 = geo::codec::VectorTile::transitAccessPoints(v8);
      unint64_t v33 = geo::codec::VectorTile::transitAccessPointCount(v8);
      if (v32 <= a2 && v32 + 248 * v33 > a2)
      {
        uint64_t v21 = (uint64_t)(a2 - v32) >> 3;
        unint64_t v22 = 0xEF7BDEF7BDEF7BDFLL;
LABEL_30:
        uint64_t v31 = v21 * v22;
        goto LABEL_31;
      }
      break;
    default:
      unint64_t v29 = geo::codec::VectorTile::polygons(v8);
      uint64_t v30 = geo::codec::VectorTile::polygonsCount(v8);
      if (v29 <= a2 && v29 + (v30 << 7) > a2)
      {
        *(unsigned char *)a1 = 0;
        uint64_t v31 = (uint64_t)(a2 - v29) >> 7;
LABEL_31:
        *(void *)(a1 + 8) = v31;
      }
      break;
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return a1;
}

void sub_1A27CE67C(_Unwind_Exception *exception_object)
{
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 56);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::RouteLine::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::RouteLine::DefaultVbo>,ggl::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a1, 256);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::RouteLine::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::RouteLine::DefaultVbo>,ggl::Allocator>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 32))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::RouteLine::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::RouteLine::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585340;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::RouteLine::DefaultVbo>,geo::StdAllocator<ggl::VertexDataTyped<ggl::RouteLine::DefaultVbo>,ggl::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585340;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'ggl::RouteLine::BaseMesh::~BaseMesh(ggl::RouteLine::BaseMesh *this)
{
  ggl::Mesh::~Mesh((ggl::RouteLine::BaseMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::RouteLine::BaseMesh *)((char *)this - 16));
}

void ggl::RouteLine::BaseMesh::~BaseMesh(ggl::RouteLine::BaseMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

void ggl::RouteLine::BasePipelineState::~BasePipelineState(ggl::RouteLine::BasePipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::RouteLine::BasePipelineSetup::textureIsEnabled(ggl::RouteLine::BasePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::RouteLine::BasePipelineSetup::constantDataIsEnabled(ggl::RouteLine::BasePipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::RouteLine::BasePipelineSetup::~BasePipelineSetup(ggl::RouteLine::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::RouteLine::BasePipelineSetup::BasePipelineSetup(ggl::RouteLine::BasePipelineSetup *this)
{
  {
    {
      {
        ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::RouteLine::defaultVboReflection;
      }
      ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r;
      unk_1EB32B798 = 1;
    }
    ggl::RouteLine::BasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r;
    *(void *)algn_1EB323A88 = &ggl::RouteLine::pipelineDataBasePipelineDeviceStructs(void)::ref;
    qword_1EB323A90 = 0;
    {
      ggl::RouteLine::pipelineDataBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      unk_1EB323AF0 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1EB323AF8 = (uint64_t)ggl::RouteLine::Style::reflection(void)::reflection;
    }
    qword_1EB323A98 = (uint64_t)&ggl::RouteLine::pipelineDataBasePipelineConstantStructs(void)::ref;
    unk_1EB323AA0 = xmmword_1A28FCEF0;
  }
  uint64_t result = ggl::PipelineSetup::PipelineSetup((uint64_t)this, (uint64_t)&ggl::RouteLine::BasePipelineSetup::typedReflection(void)::ref);
  *(void *)this = &unk_1EF562D60;
  return result;
}

void ggl::RouteLine::PatternedBasePipelineState::~PatternedBasePipelineState(ggl::RouteLine::PatternedBasePipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::RouteLine::PatternedBasePipelineSetup::textureIsEnabled(ggl::RouteLine::PatternedBasePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::RouteLine::PatternedBasePipelineSetup::constantDataIsEnabled(ggl::RouteLine::PatternedBasePipelineSetup *this, unint64_t a2)
{
  return a2 < 4;
}

void ggl::RouteLine::PatternedBasePipelineSetup::~PatternedBasePipelineSetup(ggl::RouteLine::PatternedBasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::RouteLine::PatternedBasePipelineSetup::PatternedBasePipelineSetup(ggl::RouteLine::PatternedBasePipelineSetup *this)
{
  {
    {
      {
        ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r = (uint64_t)&ggl::RouteLine::defaultVboReflection;
      }
      ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::attributesReflection(void)::r;
      unk_1EB32B798 = 1;
    }
    ggl::RouteLine::PatternedBasePipelineSetup::typedReflection(void)::ref = (uint64_t)&ggl::MeshTyped<ggl::RouteLine::DefaultVbo>::typedReflection(void)::r;
    *(void *)algn_1EB323AB8 = &ggl::RouteLine::pipelineDataPatternedBasePipelineDeviceStructs(void)::ref;
    qword_1EB323AC0 = 0;
    {
      ggl::RouteLine::pipelineDataPatternedBasePipelineConstantStructs(void)::ref = (uint64_t)ggl::Tile::View::reflection(void)::reflection;
      unk_1EB323B10 = ggl::Tile::Transform::reflection(void)::reflection;
      qword_1EB323B18 = (uint64_t)ggl::PatternedRibbon::Style::reflection(void)::reflection;
      unk_1EB323B20 = ggl::RouteLine::Style::reflection(void)::reflection;
    }
    qword_1EB323AC8 = (uint64_t)&ggl::RouteLine::pipelineDataPatternedBasePipelineConstantStructs(void)::ref;
    unk_1EB323AD0 = xmmword_1A28FE1F0;
  }
  uint64_t result = ggl::PipelineSetup::PipelineSetup((uint64_t)this, (uint64_t)&ggl::RouteLine::PatternedBasePipelineSetup::typedReflection(void)::ref);
  *(void *)this = &unk_1EF562DB0;
  return result;
}

void ggl::RouteLine::RouteLineMaskPipelineState::~RouteLineMaskPipelineState(ggl::RouteLine::RouteLineMaskPipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ggl::RouteLine::RouteLineMaskPipelineSetup::textureIsEnabled(ggl::RouteLine::RouteLineMaskPipelineSetup *this)
{
  return 0;
}

BOOL ggl::RouteLine::RouteLineMaskPipelineSetup::constantDataIsEnabled(ggl::RouteLine::RouteLineMaskPipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::RouteLine::RouteLineMaskPipelineSetup::~RouteLineMaskPipelineSetup(ggl::RouteLine::RouteLineMaskPipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<md::DaVinciMetaTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::DaVinciMetaTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580B80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::DaVinciMetaTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF580B80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::DaVinciMetaLayerDataSource::~DaVinciMetaLayerDataSource(md::DaVinciMetaLayerDataSource *this)
{
  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::RouteLineArrow::BaseMesh::~BaseMesh(ggl::RouteLineArrow::BaseMesh *this)
{
  ggl::Mesh::~Mesh((ggl::RouteLineArrow::BaseMesh *)((char *)this - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::RouteLineArrow::BaseMesh *)((char *)this - 16));
}

void ggl::RouteLineArrow::BaseMesh::~BaseMesh(ggl::RouteLineArrow::BaseMesh *this)
{
  ggl::Mesh::~Mesh(this);
  JUMPOUT(0x1A6239270);
}

void non-virtual thunk to'ggl::MeshTyped<ggl::RouteLineArrow::DefaultVbo>::~MeshTyped(uint64_t a1)
{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
  JUMPOUT(0x1A6239270);
}

{
  ggl::Mesh::~Mesh((ggl::Mesh *)(a1 - 16));
}

void ggl::MeshTyped<ggl::RouteLineArrow::DefaultVbo>::~MeshTyped(ggl::Mesh *a1)
{
  ggl::Mesh::~Mesh(a1);
  JUMPOUT(0x1A6239270);
}

void ggl::RouteLineArrow::BasePipelineState::~BasePipelineState(ggl::RouteLineArrow::BasePipelineState *this)
{
  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1EF55B208;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EF55D4B8;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, *((void *)this + 3));
    *((void *)this + 3) = 3735927469;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

BOOL ggl::RouteLineArrow::BasePipelineSetup::textureIsEnabled(ggl::RouteLineArrow::BasePipelineSetup *this, uint64_t a2)
{
  return a2 == 0;
}

BOOL ggl::RouteLineArrow::BasePipelineSetup::constantDataIsEnabled(ggl::RouteLineArrow::BasePipelineSetup *this, unint64_t a2)
{
  return a2 < 3;
}

void ggl::RouteLineArrow::BasePipelineSetup::~BasePipelineSetup(ggl::RouteLineArrow::BasePipelineSetup *this)
{
  ggl::PipelineSetup::~PipelineSetup(this);
  JUMPOUT(0x1A6239270);
}

void md::mun::MuninSelectionContext::~MuninSelectionContext(md::mun::MuninSelectionContext *this)
{
  *(void *)this = &unk_1EF550418;
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1EF555180;
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = (void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    operator delete(v5);
  }
  JUMPOUT(0x1A6239270);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(void *)this = &unk_1EF550418;
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1EF555180;
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = (void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    operator delete(v5);
  }
}

void non-virtual thunk to'md::TransitNodeFeaturePool::didReleaseTransitNodeMissingFeature(md::TransitNodeFeaturePool *this, md::TransitNodeMissingFeature *a2)
{
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>>>::__erase_unique<unsigned long long>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (v2)
  {
    uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (*(void *)&v2 <= a2) {
        unint64_t v4 = a2 % *(void *)&v2;
      }
    }
    else
    {
      unint64_t v4 = (*(void *)&v2 - 1) & a2;
    }
    uint64_t v5 = *(void ***)(*a1 + 8 * v4);
    if (v5)
    {
      int8x8_t v6 = *v5;
      if (*v5)
      {
        if (v3.u32[0] < 2uLL)
        {
          uint64_t v7 = *(void *)&v2 - 1;
          while (1)
          {
            uint64_t v9 = v6[1];
            if (v9 == a2)
            {
              if (v6[2] == a2) {
                goto LABEL_22;
              }
            }
            else if ((v9 & v7) != v4)
            {
              return;
            }
            int8x8_t v6 = (void *)*v6;
            if (!v6) {
              return;
            }
          }
        }
        do
        {
          unint64_t v8 = v6[1];
          if (v8 == a2)
          {
            if (v6[2] == a2)
            {
LABEL_22:
              std::__hash_table<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::__unordered_map_hasher<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,gdc::LayerDataRequestKeyHash,std::equal_to<gdc::LayerDataRequestKey>,true>,std::__unordered_map_equal<gdc::LayerDataRequestKey,std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>,std::equal_to<gdc::LayerDataRequestKey>,gdc::LayerDataRequestKeyHash,true>,std::allocator<std::__hash_value_type<gdc::LayerDataRequestKey,std::tuple<md::DaVinciGroundRenderable *,gdc::Entity>>>>::remove((uint64_t)&__p, a1, v6);
              unsigned int v10 = __p;
              std::vector<unsigned int> __p = 0;
              if (v10)
              {
                if (v13)
                {
                  uint64_t v11 = (std::__shared_weak_count *)v10[4];
                  if (v11)
                  {
                    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
                      std::__shared_weak_count::__release_weak(v11);
                    }
                  }
                }
                operator delete(v10);
              }
              return;
            }
          }
          else
          {
            if (v8 >= *(void *)&v2) {
              v8 %= *(void *)&v2;
            }
            if (v8 != v4) {
              return;
            }
          }
          int8x8_t v6 = (void *)*v6;
        }
        while (v6);
      }
    }
  }
}

void md::TransitNodeFeaturePool::didReleaseTransitNodeMissingFeature(md::TransitNodeFeaturePool *this, md::TransitNodeMissingFeature *a2)
{
}

uint64_t md::TransitNodeFeaturePool::clearCommandBuffer(uint64_t this, const md::PassList *a2)
{
  int8x8_t v2 = (void *)*((void *)a2 + 1);
  uint64_t v4 = v2[3];
  uint64_t v3 = v2[4];
  uint64_t v5 = v3 - v4;
  if (v3 == v4) {
    goto LABEL_8;
  }
  uint64_t v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(this + 296) + 8);
  unint64_t v8 = v5 >> 3;
  while (1)
  {
    uint64_t v9 = *(unsigned __int8 **)(v4 + 8 * v6);
    if (*v9 == *(unsigned __int8 *)(v7 + 220))
    {
      unint64_t v10 = *((void *)v9 + 1);
      uint64_t v11 = v2[15];
      if (v10 < (v2[16] - v11) >> 3) {
        break;
      }
    }
    if (++v6 >= v8) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = *(void *)(v11 + 8 * v10);
  if (!v12) {
LABEL_8:
  }
    char v13 = 0;
  else {
    char v13 = *(void **)(*(void *)(v12 + 24) + 8 * *(unsigned __int8 *)(v7 + 221));
  }
  uint64_t v14 = v13[9];
  if (v13[10] != v14) {
    v13[10] = v14;
  }
  v13[4] = 0;
  uint8x8_t v15 = *(md::TransitNodeTextureAtlas **)(this + 128);
  *(void *)(this + 128) = 0;
  if (v15)
  {
    md::TransitNodeTextureAtlas::~TransitNodeTextureAtlas(v15);
    JUMPOUT(0x1A6239270);
  }
  return this;
}

md::TransitNodeTextureAtlas *md::TransitNodeFeaturePool::renderIcons(void *a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v291 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void **)(a4 + 8);
  uint64_t v9 = v7[3];
  uint64_t v8 = v7[4];
  uint64_t v10 = v8 - v9;
  if (v8 == v9) {
    goto LABEL_8;
  }
  uint64_t v11 = 0;
  uint64_t v12 = *(void *)(a1[37] + 8);
  unint64_t v13 = v10 >> 3;
  while (1)
  {
    uint64_t v14 = *(unsigned __int8 **)(v9 + 8 * v11);
    if (*v14 == *(unsigned __int8 *)(v12 + 220))
    {
      unint64_t v15 = *((void *)v14 + 1);
      uint64_t v16 = v7[15];
      if (v15 < (v7[16] - v16) >> 3) {
        break;
      }
    }
    if (++v11 >= v13) {
      goto LABEL_8;
    }
  }
  uint64_t v17 = *(void *)(v16 + 8 * v15);
  if (!v17) {
LABEL_8:
  }
    unint64_t v18 = 0;
  else {
    unint64_t v18 = *(void **)(*(void *)(v17 + 24) + 8 * *(unsigned __int8 *)(v12 + 221));
  }
  uint64_t v19 = v18[9];
  if (v18[10] != v19) {
    v18[10] = v19;
  }
  v18[4] = 0;
  uint64_t result = (md::TransitNodeTextureAtlas *)a1[16];
  a1[16] = 0;
  if (result)
  {
    md::TransitNodeTextureAtlas::~TransitNodeTextureAtlas(result);
    uint64_t result = (md::TransitNodeTextureAtlas *)MEMORY[0x1A6239270]();
  }
  uint64_t v21 = *a2;
  unint64_t v22 = a2[1];
  if (*a2 == v22) {
    return result;
  }
  unint64_t v23 = *(void **)(a4 + 8);
  uint64_t v25 = v23[3];
  uint64_t v24 = v23[4];
  uint64_t v26 = v24 - v25;
  if (v24 == v25) {
    goto LABEL_21;
  }
  uint64_t v27 = 0;
  uint64_t v28 = *(void *)(a1[37] + 8);
  unint64_t v29 = v26 >> 3;
  while (1)
  {
    uint64_t v30 = *(unsigned __int8 **)(v25 + 8 * v27);
    if (*v30 == *(unsigned __int8 *)(v28 + 220))
    {
      unint64_t v31 = *((void *)v30 + 1);
      uint64_t v32 = v23[15];
      if (v31 < (v23[16] - v32) >> 3) {
        break;
      }
    }
    if (++v27 >= v29) {
      goto LABEL_21;
    }
  }
  uint64_t v33 = *(void *)(v32 + 8 * v31);
  if (!v33) {
LABEL_21:
  }
    uint64_t v34 = 0;
  else {
    uint64_t v34 = *(void *)(*(void *)(v33 + 24) + 8 * *(unsigned __int8 *)(v28 + 221));
  }
  long long v35 = *(void **)(a3 + 8);
  int8x8_t v36 = (int8x8_t)v35[1];
  if (!*(void *)&v36) {
    goto LABEL_46;
  }
  uint8x8_t v37 = (uint8x8_t)vcnt_s8(v36);
  v37.i16[0] = vaddlv_u8(v37);
  if (v37.u32[0] > 1uLL)
  {
    uint64_t v38 = 0x1AF456233693CD46;
    if (*(void *)&v36 <= 0x1AF456233693CD46uLL) {
      uint64_t v38 = 0x1AF456233693CD46uLL % *(void *)&v36;
    }
  }
  else
  {
    uint64_t v38 = (*(void *)&v36 - 1) & 0x1AF456233693CD46;
  }
  uint64_t v39 = *(void **)(*v35 + 8 * v38);
  if (!v39) {
    goto LABEL_46;
  }
  uint64_t v40 = (void *)*v39;
  if (!v40) {
    goto LABEL_46;
  }
  if (v37.u32[0] < 2uLL)
  {
    uint64_t v41 = *(void *)&v36 - 1;
    while (1)
    {
      uint64_t v43 = v40[1];
      if (v43 == 0x1AF456233693CD46)
      {
        if (v40[2] == 0x1AF456233693CD46) {
          goto LABEL_44;
        }
      }
      else if ((v43 & v41) != v38)
      {
        goto LABEL_46;
      }
      uint64_t v40 = (void *)*v40;
      if (!v40) {
        goto LABEL_46;
      }
    }
  }
  while (1)
  {
    unint64_t v42 = v40[1];
    if (v42 == 0x1AF456233693CD46) {
      break;
    }
    if (v42 >= *(void *)&v36) {
      v42 %= *(void *)&v36;
    }
    if (v42 != v38) {
      goto LABEL_46;
    }
LABEL_33:
    uint64_t v40 = (void *)*v40;
    if (!v40) {
      goto LABEL_46;
    }
  }
  if (v40[2] != 0x1AF456233693CD46) {
    goto LABEL_33;
  }
LABEL_44:
  uint64_t v44 = v40[5];
  if (*(void *)(v44 + 8) != 0x1AF456233693CD46)
  {
LABEL_46:
    uint64_t v45 = 0;
    goto LABEL_47;
  }
  uint64_t v45 = *(void *)(v44 + 32);
LABEL_47:
  uint64_t v46 = 0;
  unint64_t v287 = 0;
  unint64_t v288 = 0;
  unint64_t v286 = 0;
  unint64_t v47 = v22 - v21;
  if (v47 <= 1) {
    unint64_t v47 = 1;
  }
  while (2)
  {
    uint64_t v51 = *v21;
    int v52 = *(unsigned __int8 *)(*v21 + 260);
    if (*(unsigned char *)(*v21 + 260))
    {
      if (v52 == 1)
      {
        unint64_t v48 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v51 + 112) - *(void *)(v51 + 104)) >> 2);
        uint64_t v49 = &v287;
        uint64_t v50 = v287;
        goto LABEL_51;
      }
      if (v52 == 2)
      {
        ++v46;
        if (*(unsigned char *)(v51 + 262))
        {
          uint64_t v49 = &v288;
          unint64_t v48 = v288;
          uint64_t v50 = 1;
          goto LABEL_51;
        }
      }
    }
    else
    {
      unint64_t v48 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v51 + 112) - *(void *)(v51 + 104)) >> 2);
      uint64_t v49 = &v286;
      uint64_t v50 = v286;
LABEL_51:
      *uint64_t v49 = v48 + v50;
    }
    ++v21;
    if (--v47) {
      continue;
    }
    break;
  }
  unint64_t v53 = v286;
  unint64_t v54 = v287;
  if (v287 <= v286) {
    unint64_t v55 = v286;
  }
  else {
    unint64_t v55 = v287;
  }
  if (v55 | v46)
  {
    uint64_t v277 = v45;
    uint64_t v280 = v46;
    id v56 = *(id *)a3;
    [v56 sizeInPixels];
    float64_t v281 = v58;
    float64_t v283 = v57;

    uint64_t v60 = a1[25];
    unint64_t v278 = *(void *)(v60 + 8);
    uint64_t v279 = v60;
    v61.f64[0] = v283;
    v61.f64[1] = v281;
    size_t v62 = *(float32x2_t **)(v60 + 72);
    __asm { FMOV            V0.2D, #0.5 }
    v62[1] = vcvt_f32_f64(vmulq_f64(v61, _Q0));
    *size_t v62 = vcvt_f32_s32(*(int32x2_t *)(a1[15] + 40));
    uint64_t v68 = a1[29];
    unint64_t v69 = *(void *)(v68 + 8);
    uint64_t v70 = 6 * v55;
    if ((*(void *)(v68 + 48) - *(void *)(v68 + 40)) / v69 < 6 * v55)
    {
      unint64_t v71 = v69 * v70;
      uint64_t v72 = *(void *)(v68 + 72);
      unint64_t v73 = *(void *)(v68 + 80) - v72;
      unint64_t v59 = v71 - v73;
      if (v71 != v73)
      {
        if (v71 <= v73)
        {
          if (v71 < v73) {
            *(void *)(v68 + 80) = v72 + v71;
          }
        }
        else
        {
          std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v68 + 72, v59);
        }
        uint64_t v74 = *(std::__shared_weak_count **)(v68 + 32);
        *(void *)(v68 + 24) = 0;
        *(void *)(v68 + 32) = 0;
        if (v74 && !atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
        *(void *)(v68 + 120) = 0;
        *(_DWORD *)(v68 + 112) = 0;
        uint64_t v75 = *(void *)(v68 + 80) - *(void *)(v68 + 72);
        *(void *)(v68 + 40) = 0;
        *(void *)(v68 + 48) = v75;
        *(void *)(v68 + 56) = 0;
        *(void *)(v68 + 64) = v75;
        uint64_t v68 = a1[29];
        unint64_t v71 = *(void *)(v68 + 8) * v70;
      }
      if (v71)
      {
        float64x2_t v76 = *(int8x8_t **)(v68 + 72);
        if (!v55) {
          goto LABEL_85;
        }
      }
      else
      {
        float64x2_t v76 = 0;
        if (!v55) {
          goto LABEL_85;
        }
      }
      if (v55 == 1)
      {
        unint64_t v77 = 0;
        uint64_t v78 = 0;
        uint64_t v79 = v76;
      }
      else
      {
        uint64_t v80 = 0;
        unint64_t v77 = v55 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v79 = (int8x8_t *)((char *)v76 + 12 * (v55 & 0xFFFFFFFFFFFFFFFELL));
        uint64_t v81 = v76 + 2;
        do
        {
          v81[-2].i16[0] = 4 * v80;
          v81[-2].i16[1] = (4 * v80) | 1;
          __int16 v82 = (4 * v80) | 6;
          v81->i16[0] = v82;
          v81[-2].i16[3] = 4 * v80;
          v81->i16[2] = v82;
          int8x8_t v83 = vorr_s8((int8x8_t)vdup_n_s16(4 * (int)v80), (int8x8_t)0x5000400030002);
          v81->i16[1] = v83.i16[2];
          v81[-2].i16[2] = v83.i16[0];
          v81[-1] = v83;
          v81->i16[3] = (4 * v80) | 7;
          v80 += 2;
          v81 += 3;
        }
        while (v77 != v80);
        if (v55 == v77) {
          goto LABEL_85;
        }
        uint64_t v78 = 4 * v77;
      }
      unint64_t v84 = v55 - v77;
      do
      {
        v79->i16[0] = v78;
        v79->i16[1] = v78 | 1;
        __int16 v85 = v78 | 2;
        v79->i16[2] = v78 | 2;
        v79->i16[3] = v78;
        __int16 v86 = v78 | 3;
        v78 += 4;
        v79[1].i16[0] = v85;
        v79[1].i16[1] = v86;
        uint64_t v79 = (int8x8_t *)((char *)v79 + 12);
        --v84;
      }
      while (v84);
LABEL_85:
      if (v76 && v71)
      {
        if (*(void *)(v68 + 64) > v71) {
          unint64_t v71 = *(void *)(v68 + 64);
        }
        *(void *)(v68 + 56) = 0;
        *(void *)(v68 + 64) = v71;
      }
    }
    uint64_t v87 = a1[31];
    unint64_t v88 = *(void *)(v87 + 8);
    uint64_t v284 = 18 * v280;
    if ((*(void *)(v87 + 48) - *(void *)(v87 + 40)) / v88 < 18 * v280)
    {
      unint64_t v89 = v88 * v284;
      uint64_t v90 = *(void *)(v87 + 72);
      unint64_t v91 = *(void *)(v87 + 80) - v90;
      unint64_t v59 = v89 - v91;
      if (v89 != v91)
      {
        if (v89 <= v91)
        {
          if (v89 < v91) {
            *(void *)(v87 + 80) = v90 + v89;
          }
        }
        else
        {
          std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v87 + 72, v59);
        }
        long long v92 = *(std::__shared_weak_count **)(v87 + 32);
        *(void *)(v87 + 24) = 0;
        *(void *)(v87 + 32) = 0;
        if (v92 && !atomic_fetch_add(&v92->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
        *(void *)(v87 + 120) = 0;
        *(_DWORD *)(v87 + 112) = 0;
        uint64_t v93 = *(void *)(v87 + 80) - *(void *)(v87 + 72);
        *(void *)(v87 + 40) = 0;
        *(void *)(v87 + 48) = v93;
        *(void *)(v87 + 56) = 0;
        *(void *)(v87 + 64) = v93;
        uint64_t v87 = a1[31];
        unint64_t v89 = *(void *)(v87 + 8) * v284;
      }
      if (v89)
      {
        unint64_t v94 = *(_WORD **)(v87 + 72);
        if (!v280)
        {
LABEL_106:
          if (v94 && v89)
          {
            if (*(void *)(v87 + 64) > v89) {
              unint64_t v89 = *(void *)(v87 + 64);
            }
            *(void *)(v87 + 56) = 0;
            *(void *)(v87 + 64) = v89;
          }
          goto LABEL_111;
        }
      }
      else
      {
        unint64_t v94 = 0;
        if (!v280) {
          goto LABEL_106;
        }
      }
      uint64_t v95 = 0;
      uint64_t v96 = v280;
      uint8x8_t v97 = v94;
      do
      {
        _WORD *v97 = v95;
        v97[1] = v95 | 1;
        v97[2] = v95 | 2;
        v97[3] = v95;
        v97[4] = v95 | 2;
        v97[5] = v95 | 3;
        v97[6] = v95 | 1;
        v97[7] = v95 | 4;
        __int16 v98 = v95 | 7;
        v97[8] = v95 | 7;
        v97[9] = v95 | 1;
        v97[10] = v95 | 7;
        v97[11] = v95 | 2;
        v97[12] = v95 | 4;
        v97[13] = v95 | 5;
        __int16 v99 = v95 | 6;
        v97[14] = v95 | 6;
        v97[15] = v95 | 4;
        v95 += 8;
        v97[16] = v99;
        v97[17] = v98;
        v97 += 18;
        --v96;
      }
      while (v96);
      goto LABEL_106;
    }
LABEL_111:
    long long v289 = 0u;
    long long v290 = 0u;
    if (v54)
    {
      uint64_t v100 = a1[23];
      uint64_t v101 = a1[29];
      unint64_t v102 = (std::__shared_weak_count *)a1[30];
      if (v102)
      {
        atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v103 = *(std::__shared_weak_count **)(v100 + 104);
      *(void *)(v100 + 96) = v101;
      *(void *)(v100 + 104) = v102;
      if (v103 && !atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v103->__on_zero_shared)(v103, v59);
        std::__shared_weak_count::__release_weak(v103);
      }
      if (v102 && !atomic_fetch_add(&v102->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v102->__on_zero_shared)(v102, v59);
        std::__shared_weak_count::__release_weak(v102);
      }
      uint64_t v104 = (void *)a1[19];
      unint64_t v105 = v287;
      uint64_t v106 = 6 * v287;
      v104[9] = 0;
      v104[10] = v106;
      v104[11] = 0;
      v104[12] = 1;
      uint64_t v107 = **(void **)(a1[23] + 64);
      unint64_t v108 = *(void *)(v107 + 8) * 4 * v105;
      uint64_t v109 = *(void *)(v107 + 72);
      unint64_t v110 = *(void *)(v107 + 80) - v109;
      if (v108 != v110)
      {
        if (v108 <= v110)
        {
          if (v108 < v110) {
            *(void *)(v107 + 80) = v109 + v108;
          }
        }
        else
        {
          std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v107 + 72, v108 - v110);
        }
        float64x2_t v114 = *(std::__shared_weak_count **)(v107 + 32);
        *(void *)(v107 + 24) = 0;
        *(void *)(v107 + 32) = 0;
        if (v114)
        {
          if (!atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
            std::__shared_weak_count::__release_weak(v114);
          }
        }
        *(void *)(v107 + 120) = 0;
        *(_DWORD *)(v107 + 112) = 0;
        uint64_t v115 = *(void *)(v107 + 80) - *(void *)(v107 + 72);
        *(void *)(v107 + 40) = 0;
        *(void *)(v107 + 48) = v115;
        *(void *)(v107 + 56) = 0;
        *(void *)(v107 + 64) = v115;
      }
      operator new();
    }
    unint64_t v111 = 0;
    if (v53)
    {
      uint64_t v116 = a1[24];
      uint64_t v117 = a1[29];
      uint64_t v118 = (std::__shared_weak_count *)a1[30];
      if (v118)
      {
        atomic_fetch_add_explicit(&v118->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v118->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v119 = *(std::__shared_weak_count **)(v116 + 104);
      *(void *)(v116 + 96) = v117;
      *(void *)(v116 + 104) = v118;
      if (v119 && !atomic_fetch_add(&v119->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v119->__on_zero_shared)(v119, v59);
        std::__shared_weak_count::__release_weak(v119);
      }
      if (v118 && !atomic_fetch_add(&v118->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v118->__on_zero_shared)(v118, v59);
        std::__shared_weak_count::__release_weak(v118);
      }
      float64x2_t v120 = (void *)a1[20];
      unint64_t v121 = v286;
      uint64_t v122 = 6 * v286;
      v120[9] = 0;
      v120[10] = v122;
      v120[11] = 0;
      v120[12] = 1;
      uint64_t v123 = **(void **)(a1[24] + 64);
      unint64_t v124 = *(void *)(v123 + 8) * 4 * v121;
      uint64_t v125 = *(void *)(v123 + 72);
      unint64_t v126 = *(void *)(v123 + 80) - v125;
      if (v124 != v126)
      {
        if (v124 <= v126)
        {
          if (v124 < v126) {
            *(void *)(v123 + 80) = v125 + v124;
          }
        }
        else
        {
          std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v123 + 72, v124 - v126);
        }
        double v127 = *(std::__shared_weak_count **)(v123 + 32);
        *(void *)(v123 + 24) = 0;
        *(void *)(v123 + 32) = 0;
        if (v127 && !atomic_fetch_add(&v127->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
        *(void *)(v123 + 120) = 0;
        *(_DWORD *)(v123 + 112) = 0;
        uint64_t v128 = *(void *)(v123 + 80) - *(void *)(v123 + 72);
        *(void *)(v123 + 40) = 0;
        *(void *)(v123 + 48) = v128;
        *(void *)(v123 + 56) = 0;
        *(void *)(v123 + 64) = v128;
      }
      operator new();
    }
    uint64_t v112 = 0;
    if (v288)
    {
      uint64_t v129 = a1[21];
      uint64_t v130 = a1[31];
      double v131 = (std::__shared_weak_count *)a1[32];
      if (v131)
      {
        atomic_fetch_add_explicit(&v131->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v131->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long double v132 = *(std::__shared_weak_count **)(v129 + 104);
      *(void *)(v129 + 96) = v130;
      *(void *)(v129 + 104) = v131;
      if (v132 && !atomic_fetch_add(&v132->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v132->__on_zero_shared)(v132, v59);
        std::__shared_weak_count::__release_weak(v132);
      }
      if (v131 && !atomic_fetch_add(&v131->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v131->__on_zero_shared)(v131, v59);
        std::__shared_weak_count::__release_weak(v131);
      }
      double v133 = (void *)a1[17];
      uint64_t v134 = 8 * v288;
      uint64_t v135 = 18 * v288;
      v133[9] = 0;
      v133[10] = v135;
      v133[11] = 0;
      v133[12] = 1;
      uint64_t v136 = **(void **)(a1[21] + 64);
      unint64_t v137 = *(void *)(v136 + 8) * v134;
      uint64_t v138 = *(void *)(v136 + 72);
      unint64_t v139 = *(void *)(v136 + 80) - v138;
      if (v137 != v139)
      {
        if (v137 <= v139)
        {
          if (v137 < v139) {
            *(void *)(v136 + 80) = v138 + v137;
          }
        }
        else
        {
          std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v136 + 72, v137 - v139);
        }
        double v140 = *(std::__shared_weak_count **)(v136 + 32);
        *(void *)(v136 + 24) = 0;
        *(void *)(v136 + 32) = 0;
        if (v140 && !atomic_fetch_add(&v140->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
        }
        *(void *)(v136 + 120) = 0;
        *(_DWORD *)(v136 + 112) = 0;
        uint64_t v141 = *(void *)(v136 + 80) - *(void *)(v136 + 72);
        *(void *)(v136 + 40) = 0;
        *(void *)(v136 + 48) = v141;
        *(void *)(v136 + 56) = 0;
        *(void *)(v136 + 64) = v141;
      }
      operator new();
    }
    long long v113 = 0;
    uint64_t v276 = v34;
    if (v280)
    {
      uint64_t v142 = a1[22];
      uint64_t v143 = a1[31];
      unint64_t v144 = (std::__shared_weak_count *)a1[32];
      if (v144)
      {
        atomic_fetch_add_explicit(&v144->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v144->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int8x8_t v145 = *(std::__shared_weak_count **)(v142 + 104);
      *(void *)(v142 + 96) = v143;
      *(void *)(v142 + 104) = v144;
      if (v145 && !atomic_fetch_add(&v145->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v145->__on_zero_shared)(v145, v59);
        std::__shared_weak_count::__release_weak(v145);
      }
      if (v144 && !atomic_fetch_add(&v144->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v144->__on_zero_shared)(v144, v59);
        std::__shared_weak_count::__release_weak(v144);
      }
      unint64_t v146 = (void *)a1[18];
      v146[9] = 0;
      v146[10] = v284;
      v146[11] = 0;
      v146[12] = 1;
      uint64_t v147 = **(void **)(a1[22] + 64);
      unint64_t v148 = *(void *)(v147 + 8) * 8 * v280;
      uint64_t v149 = *(void *)(v147 + 72);
      unint64_t v150 = *(void *)(v147 + 80) - v149;
      if (v148 != v150)
      {
        if (v148 <= v150)
        {
          if (v148 < v150) {
            *(void *)(v147 + 80) = v149 + v148;
          }
        }
        else
        {
          std::vector<unsigned char,geo::StdAllocator<unsigned char,mdm::Allocator>>::__append(v147 + 72, v148 - v150);
        }
        long long v152 = *(std::__shared_weak_count **)(v147 + 32);
        *(void *)(v147 + 24) = 0;
        *(void *)(v147 + 32) = 0;
        if (v152 && !atomic_fetch_add(&v152->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
          std::__shared_weak_count::__release_weak(v152);
        }
        *(void *)(v147 + 120) = 0;
        *(_DWORD *)(v147 + 112) = 0;
        uint64_t v153 = *(void *)(v147 + 80) - *(void *)(v147 + 72);
        *(void *)(v147 + 40) = 0;
        *(void *)(v147 + 48) = v153;
        *(void *)(v147 + 56) = 0;
        *(void *)(v147 + 64) = v153;
      }
      operator new();
    }
    uint64_t v151 = 0;
    float v154 = *(double *)(v277 + 3840);
    __float2 v155 = __sincosf_stret(v154);
    uint64_t v156 = *a2;
    if (a2[1] != *a2)
    {
      unint64_t v157 = 0;
      float v282 = -v155.__sinval;
      do
      {
        uint64_t v158 = v156[v157];
        uint64_t v159 = md::LayoutContext::frameState((md::LayoutContext *)a3);
        if (*(unsigned char *)(v158 + 261)) {
          LOBYTE(v162) = 100;
        }
        else {
          int v162 = (int)(float)(*(float *)(v158 + 12) * 100.0);
        }
        int v163 = (int)(float)(*(float *)(v158 + 8) * 255.0);
        v160.i32[0] = *(_DWORD *)(v158 + 16);
        int v164 = *(unsigned __int8 *)(v158 + 260);
        if (v164 == 2)
        {
          float v187 = *(float *)(v158 + 212);
          float v188 = *(float *)(v158 + 216);
          float v189 = (float)(v155.__sinval * v188) + (float)(v155.__cosval * v187);
          float v190 = -(float)((float)(v155.__sinval * v187) - (float)(v188 * v155.__cosval));
          v160.f32[1] = *(float *)(v158 + 24) * v160.f32[0];
          uint64_t v191 = (unsigned char *)(v158 + 193);
          for (uint64_t i = 128; i != 192; i += 8)
          {
            float32x2_t v193 = *(float32x2_t *)(v158 + i);
            float32x2_t v194 = vmul_n_f32(v193, v189);
            float32x2_t v195 = (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(v193, v190));
            v196.i32[0] = vsub_f32(v194, v195).u32[0];
            v196.i32[1] = vadd_f32(v194, v195).i32[1];
            float32x2_t v197 = vmla_f32(*(float32x2_t *)(v158 + 36), v160, v196);
            __int16 v198 = *(_WORD *)(v191 - 1);
            float32x2_t *v151 = v197;
            v151[1].i16[0] = -1;
            v151[1].i8[2] = -1;
            v151[1].i8[3] = v163;
            v151[1].i16[2] = -1;
            v151[1].i8[6] = -1;
            v151[1].i8[7] = v163;
            v151[2].i16[0] = v198;
            v151[2].i8[4] = v162;
            v151[2].i8[5] = 0;
            if (*(unsigned char *)(v158 + 262))
            {
              __int8 v199 = *(unsigned char *)(v158 + 208) + *(v191 - 1);
              __int8 v200 = *(unsigned char *)(v158 + 209) + *v191;
              *long long v113 = vadd_f32(*(float32x2_t *)(v158 + 228), v197);
              v113[1].i16[0] = -1;
              v113[1].i8[2] = -1;
              v113[1].i8[3] = v163;
              v113[1].i16[2] = -1;
              v113[1].i8[6] = -1;
              v113[1].i8[7] = v163;
              v113[2].i8[0] = v199;
              v113[2].i8[1] = v200;
              v113[2].i8[4] = v162;
              v113[2].i8[5] = 0;
              v113 += 3;
            }
            v151 += 3;
            v191 += 2;
          }
        }
        else
        {
          int v165 = *(unsigned __int8 *)(v159 + 48);
          v161.i32[0] = *(_DWORD *)(v158 + 20);
          if (v164 == 1)
          {
            uint64_t v201 = *(void **)(v158 + 104);
            uint64_t v202 = *(void **)(v158 + 112);
            if (v201 != v202)
            {
              float32x2_t v203 = (float32x2_t)vdup_lane_s32(v161, 0);
              int32x2_t v204 = vdup_n_s32(v165 != 0);
              float32x2_t v205 = (float32x2_t)vdup_lane_s32((int32x2_t)v160, 0);
              do
              {
                float32x2_t v206 = *(float32x2_t *)v201;
                uint64_t v201 = (void *)((char *)v201 + 20);
                float32x2_t v207 = vmul_n_f32(v206, v155.__cosval);
                float32x2_t v208 = (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(v206, v282));
                v209.i32[0] = vsub_f32(v207, v208).u32[0];
                v209.i32[1] = vadd_f32(v207, v208).i32[1];
                __int16 v210 = *(_WORD *)(v158 + 192);
                float32x2_t v211 = vmla_f32(*(float32x2_t *)(v158 + 36), v205, v209);
                float32x2_t v212 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(v204, 0x1FuLL)), (int8x8_t)vrnda_f32(v211), (int8x8_t)v211);
                *unint64_t v111 = vmla_f32(v212, v203, *(float32x2_t *)(v158 + 128));
                v111[1].i16[0] = -1;
                v111[1].i8[2] = -1;
                v111[1].i8[3] = v163;
                v111[1].i16[2] = -1;
                v111[1].i8[6] = -1;
                v111[1].i8[7] = v163;
                v111[2].i16[0] = v210;
                v111[2].i8[4] = v162;
                v111[2].i8[5] = 0;
                __int16 v213 = *(_WORD *)(v158 + 194);
                v111[3] = vmla_f32(v212, v203, *(float32x2_t *)(v158 + 136));
                v111[4].i16[0] = -1;
                v111[4].i8[2] = -1;
                v111[4].i8[3] = v163;
                v111[4].i16[2] = -1;
                v111[4].i8[6] = -1;
                v111[4].i8[7] = v163;
                v111[5].i16[0] = v213;
                v111[5].i8[4] = v162;
                v111[5].i8[5] = 0;
                __int16 v214 = *(_WORD *)(v158 + 196);
                v111[6] = vmla_f32(v212, v203, *(float32x2_t *)(v158 + 144));
                v111[7].i16[0] = -1;
                v111[7].i8[2] = -1;
                v111[7].i8[3] = v163;
                v111[7].i16[2] = -1;
                v111[7].i8[6] = -1;
                v111[7].i8[7] = v163;
                v111[8].i16[0] = v214;
                v111[8].i8[4] = v162;
                v111[8].i8[5] = 0;
                __int16 v215 = *(_WORD *)(v158 + 198);
                uint8x8_t v216 = v111 + 12;
                v111[9] = vmla_f32(v212, v203, *(float32x2_t *)(v158 + 152));
                v111[10].i16[0] = -1;
                v111[10].i8[2] = -1;
                v111[10].i8[3] = v163;
                v111[10].i16[2] = -1;
                v111[10].i8[6] = -1;
                v111[10].i8[7] = v163;
                v111[11].i16[0] = v215;
                v111[11].i8[4] = v162;
                v111[11].i8[5] = 0;
                v111 += 12;
              }
              while (v201 != v202);
              unint64_t v111 = v216;
            }
          }
          else if (!*(unsigned char *)(v158 + 260))
          {
            __double2 v166 = *(float32x2_t **)(v158 + 104);
            double v167 = *(float32x2_t **)(v158 + 112);
            if (v166 != v167)
            {
              float32x2_t v168 = (float32x2_t)vdup_lane_s32((int32x2_t)v160, 0);
              int32x2_t v169 = vdup_n_s32(v165 != 0);
              float32x2_t v170 = (float32x2_t)vdup_lane_s32(v161, 0);
              do
              {
                if (!v166[2].i8[0])
                {
                  if (*(unsigned char *)(v158 + 66))
                  {
                    LOBYTE(v171) = *(unsigned char *)(v158 + 28);
                    LOBYTE(v172) = *(unsigned char *)(v158 + 29);
                    LOBYTE(v173) = *(unsigned char *)(v158 + 30);
                  }
                  else
                  {
                    unsigned __int32 v171 = v166[1].u32[0];
                    unsigned __int32 v172 = v171 >> 8;
                    unsigned __int32 v173 = HIWORD(v171);
                  }
                  __int32 v174 = *(_DWORD *)(v158 + 32);
                  __int16 v175 = *(_WORD *)(v158 + 192);
                  float32x2_t v176 = vmul_n_f32(*v166, v155.__cosval);
                  float32x2_t v177 = (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(*v166, v282));
                  v178.i32[0] = vsub_f32(v176, v177).u32[0];
                  v178.i32[1] = vadd_f32(v176, v177).i32[1];
                  float32x2_t v179 = vmla_f32(*(float32x2_t *)(v158 + 36), v168, v178);
                  float32x2_t v180 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(v169, 0x1FuLL)), (int8x8_t)vrnda_f32(v179), (int8x8_t)v179);
                  *uint64_t v112 = vmla_f32(v180, v170, *(float32x2_t *)(v158 + 128));
                  v112[1].i8[0] = v171;
                  v112[1].i8[1] = v172;
                  v112[1].i8[2] = v173;
                  v112[1].i8[3] = v163;
                  v112[1].i32[1] = v174;
                  v112[2].i16[0] = v175;
                  v112[2].i8[4] = v162;
                  v112[2].i8[5] = 0;
                  __int32 v181 = *(_DWORD *)(v158 + 32);
                  __int16 v182 = *(_WORD *)(v158 + 194);
                  v112[3] = vmla_f32(v180, v170, *(float32x2_t *)(v158 + 136));
                  v112[4].i8[0] = v171;
                  v112[4].i8[1] = v172;
                  v112[4].i8[2] = v173;
                  v112[4].i8[3] = v163;
                  v112[4].i32[1] = v181;
                  v112[5].i16[0] = v182;
                  v112[5].i8[4] = v162;
                  v112[5].i8[5] = 0;
                  __int32 v183 = *(_DWORD *)(v158 + 32);
                  __int16 v184 = *(_WORD *)(v158 + 196);
                  v112[6] = vmla_f32(v180, v170, *(float32x2_t *)(v158 + 144));
                  v112[7].i8[0] = v171;
                  v112[7].i8[1] = v172;
                  v112[7].i8[2] = v173;
                  v112[7].i8[3] = v163;
                  v112[7].i32[1] = v183;
                  v112[8].i16[0] = v184;
                  v112[8].i8[4] = v162;
                  v112[8].i8[5] = 0;
                  __int32 v185 = *(_DWORD *)(v158 + 32);
                  __int16 v186 = *(_WORD *)(v158 + 198);
                  v112[9] = vmla_f32(v180, v170, *(float32x2_t *)(v158 + 152));
                  v112[10].i8[0] = v171;
                  v112[10].i8[1] = v172;
                  v112[10].i8[2] = v173;
                  v112[10].i8[3] = v163;
                  v112[10].i32[1] = v185;
                  v112[11].i16[0] = v186;
                  v112[11].i8[4] = v162;
                  v112[11].i8[5] = 0;
                  v112 += 12;
                }
                __double2 v166 = (float32x2_t *)((char *)v166 + 20);
              }
              while (v166 != v167);
              unint64_t v217 = *(float32x2_t **)(v158 + 104);
              uint64_t v218 = *(float32x2_t **)(v158 + 112);
              while (v217 != v218)
              {
                if (v217[2].i8[0])
                {
                  if (*(unsigned char *)(v158 + 66))
                  {
                    LOBYTE(v219) = *(unsigned char *)(v158 + 28);
                    LOBYTE(v220) = *(unsigned char *)(v158 + 29);
                    LOBYTE(v221) = *(unsigned char *)(v158 + 30);
                  }
                  else
                  {
                    unsigned __int32 v219 = v217[1].u32[0];
                    unsigned __int32 v220 = v219 >> 8;
                    unsigned __int32 v221 = HIWORD(v219);
                  }
                  __int32 v222 = *(_DWORD *)(v158 + 32);
                  __int16 v223 = *(_WORD *)(v158 + 192);
                  float32x2_t v224 = vmul_n_f32(*v217, v155.__cosval);
                  float32x2_t v225 = (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(*v217, v282));
                  v226.i32[0] = vsub_f32(v224, v225).u32[0];
                  v226.i32[1] = vadd_f32(v224, v225).i32[1];
                  float32x2_t v227 = vmla_f32(*(float32x2_t *)(v158 + 36), v168, v226);
                  float32x2_t v228 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(v169, 0x1FuLL)), (int8x8_t)vrnda_f32(v227), (int8x8_t)v227);
                  *uint64_t v112 = vmla_f32(v228, v170, *(float32x2_t *)(v158 + 128));
                  v112[1].i8[0] = v219;
                  v112[1].i8[1] = v220;
                  v112[1].i8[2] = v221;
                  v112[1].i8[3] = v163;
                  v112[1].i32[1] = v222;
                  v112[2].i16[0] = v223;
                  v112[2].i8[4] = v162;
                  v112[2].i8[5] = 0;
                  __int32 v229 = *(_DWORD *)(v158 + 32);
                  __int16 v230 = *(_WORD *)(v158 + 194);
                  v112[3] = vmla_f32(v228, v170, *(float32x2_t *)(v158 + 136));
                  v112[4].i8[0] = v219;
                  v112[4].i8[1] = v220;
                  v112[4].i8[2] = v221;
                  v112[4].i8[3] = v163;
                  v112[4].i32[1] = v229;
                  v112[5].i16[0] = v230;
                  v112[5].i8[4] = v162;
                  v112[5].i8[5] = 0;
                  __int32 v231 = *(_DWORD *)(v158 + 32);
                  __int16 v232 = *(_WORD *)(v158 + 196);
                  v112[6] = vmla_f32(v228, v170, *(float32x2_t *)(v158 + 144));
                  v112[7].i8[0] = v219;
                  v112[7].i8[1] = v220;
                  v112[7].i8[2] = v221;
                  v112[7].i8[3] = v163;
                  v112[7].i32[1] = v231;
                  v112[8].i16[0] = v232;
                  v112[8].i8[4] = v162;
                  v112[8].i8[5] = 0;
                  __int32 v233 = *(_DWORD *)(v158 + 32);
                  __int16 v234 = *(_WORD *)(v158 + 198);
                  v112[9] = vmla_f32(v228, v170, *(float32x2_t *)(v158 + 152));
                  v112[10].i8[0] = v219;
                  v112[10].i8[1] = v220;
                  v112[10].i8[2] = v221;
                  v112[10].i8[3] = v163;
                  v112[10].i32[1] = v233;
                  v112[11].i16[0] = v234;
                  v112[11].i8[4] = v162;
                  v112[11].i8[5] = 0;
                  v112 += 12;
                }
                unint64_t v217 = (float32x2_t *)((char *)v217 + 20);
              }
            }
          }
        }
        ++v157;
        uint64_t v156 = *a2;
      }
      while (v157 < a2[1] - *a2);
    }
    uint64_t v34 = v276;
    if (v288) {
      ggl::CommandBuffer::pushRenderItem(v276, a1[17]);
    }
    if (v287) {
      ggl::CommandBuffer::pushRenderItem(v276, a1[19]);
    }
    if (v286) {
      ggl::CommandBuffer::pushRenderItem(v276, a1[20]);
    }
    uint64_t v235 = a1[27];
    uint64_t v236 = a1[15];
    md::TransitNodeTextureAtlas::updateTextureIfNecessary(v236);
    **(void **)(v235 + 96) = *(void *)(v236 + 56);
    uint64_t v237 = a1[28];
    uint64_t v238 = a1[15];
    md::TransitNodeTextureAtlas::updateTextureIfNecessary(v238);
    **(void **)(v237 + 96) = *(void *)(v238 + 56);
    uint64_t v239 = *((void *)&v290 + 1);
    if (*((void *)&v290 + 1))
    {
      if (*(void *)(*((void *)&v290 + 1) + 40))
      {
        unint64_t v241 = *(void *)(*((void *)&v290 + 1) + 16);
        unint64_t v240 = *(void *)(*((void *)&v290 + 1) + 24);
        if (v240 != v241)
        {
          uint64_t v242 = *(void *)(*((void *)&v290 + 1) + 8);
          int v243 = *(unsigned __int8 *)(*((void *)&v290 + 1) + 32);
          int v244 = *(unsigned __int8 *)(*((void *)&v290 + 1) + 33);
          if (**((void **)&v290 + 1) && *(unsigned char *)(v242 + 17) != 2) {
            (*(void (**)(void))(***((void ***)&v290 + 1) + 64))(**((void **)&v290 + 1));
          }
          if (v243 && !v244)
          {
            unint64_t v246 = *(void *)(v242 + 56);
            unint64_t v245 = *(void *)(v242 + 64);
            if (v245 == v246) {
              unint64_t v246 = *(void *)(v242 + 80) - *(void *)(v242 + 72);
            }
            if (v241 < v246) {
              unint64_t v246 = v241;
            }
            if (v245 <= v240) {
              unint64_t v245 = v240;
            }
            if (v245 == v246) {
              unint64_t v245 = v246 + *(void *)(v242 + 80) - *(void *)(v242 + 72);
            }
            *(void *)(v242 + 56) = v246;
            *(void *)(v242 + 64) = v245;
          }
        }
      }
      MEMORY[0x1A6239270](v239, 0x1070C40C7B7B3AELL);
    }
    uint64_t v247 = v290;
    if ((void)v290)
    {
      if (*(void *)(v290 + 40))
      {
        unint64_t v249 = *(void *)(v290 + 16);
        unint64_t v248 = *(void *)(v290 + 24);
        if (v248 != v249)
        {
          uint64_t v250 = *(void *)(v290 + 8);
          int v251 = *(unsigned __int8 *)(v290 + 32);
          int v252 = *(unsigned __int8 *)(v290 + 33);
          if (*(void *)v290 && *(unsigned char *)(v250 + 17) != 2) {
            (*(void (**)(void))(**(void **)v290 + 64))(*(void *)v290);
          }
          if (v251 && !v252)
          {
            unint64_t v254 = *(void *)(v250 + 56);
            unint64_t v253 = *(void *)(v250 + 64);
            if (v253 == v254) {
              unint64_t v254 = *(void *)(v250 + 80) - *(void *)(v250 + 72);
            }
            if (v249 < v254) {
              unint64_t v254 = v249;
            }
            if (v253 <= v248) {
              unint64_t v253 = v248;
            }
            if (v253 == v254) {
              unint64_t v253 = v254 + *(void *)(v250 + 80) - *(void *)(v250 + 72);
            }
            *(void *)(v250 + 56) = v254;
            *(void *)(v250 + 64) = v253;
          }
        }
      }
      MEMORY[0x1A6239270](v247, 0x1070C40C7B7B3AELL);
    }
    uint64_t v255 = *((void *)&v289 + 1);
    if (*((void *)&v289 + 1))
    {
      if (*(void *)(*((void *)&v289 + 1) + 40))
      {
        unint64_t v257 = *(void *)(*((void *)&v289 + 1) + 16);
        unint64_t v256 = *(void *)(*((void *)&v289 + 1) + 24);
        if (v256 != v257)
        {
          uint64_t v258 = *(void *)(*((void *)&v289 + 1) + 8);
          int v259 = *(unsigned __int8 *)(*((void *)&v289 + 1) + 32);
          int v260 = *(unsigned __int8 *)(*((void *)&v289 + 1) + 33);
          if (**((void **)&v289 + 1) && *(unsigned char *)(v258 + 17) != 2) {
            (*(void (**)(void))(***((void ***)&v289 + 1) + 64))(**((void **)&v289 + 1));
          }
          if (v259 && !v260)
          {
            unint64_t v262 = *(void *)(v258 + 56);
            unint64_t v261 = *(void *)(v258 + 64);
            if (v261 == v262) {
              unint64_t v262 = *(void *)(v258 + 80) - *(void *)(v258 + 72);
            }
            if (v257 < v262) {
              unint64_t v262 = v257;
            }
            if (v261 <= v256) {
              unint64_t v261 = v256;
            }
            if (v261 == v262) {
              unint64_t v261 = v262 + *(void *)(v258 + 80) - *(void *)(v258 + 72);
            }
            *(void *)(v258 + 56) = v262;
            *(void *)(v258 + 64) = v261;
          }
        }
      }
      MEMORY[0x1A6239270](v255, 0x1070C40C7B7B3AELL);
    }
    uint64_t v263 = v289;
    if ((void)v289)
    {
      if (*(void *)(v289 + 40))
      {
        unint64_t v265 = *(void *)(v289 + 16);
        unint64_t v264 = *(void *)(v289 + 24);
        if (v264 != v265)
        {
          uint64_t v266 = *(void *)(v289 + 8);
          int v267 = *(unsigned __int8 *)(v289 + 32);
          int v268 = *(unsigned __int8 *)(v289 + 33);
          if (*(void *)v289 && *(unsigned char *)(v266 + 17) != 2) {
            (*(void (**)(void))(**(void **)v289 + 64))(*(void *)v289);
          }
          if (v267 && !v268)
          {
            unint64_t v270 = *(void *)(v266 + 56);
            unint64_t v269 = *(void *)(v266 + 64);
            if (v269 == v270) {
              unint64_t v270 = *(void *)(v266 + 80) - *(void *)(v266 + 72);
            }
            if (v265 < v270) {
              unint64_t v270 = v265;
            }
            if (v269 <= v264) {
              unint64_t v269 = v264;
            }
            if (v269 == v270) {
              unint64_t v269 = v270 + *(void *)(v266 + 80) - *(void *)(v266 + 72);
            }
            *(void *)(v266 + 56) = v270;
            *(void *)(v266 + 64) = v269;
          }
        }
      }
      MEMORY[0x1A6239270](v263, 0x1070C40C7B7B3AELL);
    }
    unint64_t v271 = *(void *)(v279 + 64);
    if (v271 <= v278) {
      unint64_t v271 = v278;
    }
    *(void *)(v279 + 56) = 0;
    *(void *)(v279 + 64) = v271;
  }
  unint64_t v272 = *(void *)(v34 + 72);
  double v273 = *(uint64_t **)(v34 + 80);
  unint64_t v274 = 126 - 2 * __clz((uint64_t)((uint64_t)v273 - v272) >> 3);
  if (v273 == (uint64_t *)v272) {
    uint64_t v275 = 0;
  }
  else {
    uint64_t v275 = v274;
  }
  return (md::TransitNodeTextureAtlas *)std::__introsort<std::_ClassicAlgPolicy,ggl::CommandBuffer::sortRenderItems(BOOL)::$_0 &,ggl::RenderItem **,false>(v272, v273, v275, 1);
}

void sub_1A27D1D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1A27D1D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12)
{
  std::unique_ptr<ggl::DataWrite<ggl::TransitNode::DefaultVbo>>::~unique_ptr[abi:nn180100]((void **)(v12 - 120));
  std::unique_ptr<ggl::DataWrite<ggl::TransitNode::DefaultVbo>>::~unique_ptr[abi:nn180100]((void **)(v12 - 128));
  std::unique_ptr<ggl::DataWrite<ggl::TransitNode::DefaultVbo>>::~unique_ptr[abi:nn180100]((void **)((v12 - 144) | 8));
  std::unique_ptr<ggl::DataWrite<ggl::TransitNode::DefaultVbo>>::~unique_ptr[abi:nn180100]((void **)(v12 - 144));
  unint64_t v14 = *(void *)(a12 + 64);
  if (v14 <= a11) {
    unint64_t v14 = a11;
  }
  *(void *)(a12 + 56) = 0;
  *(void *)(a12 + 64) = v14;
  _Unwind_Resume(a1);
}

void **std::unique_ptr<ggl::DataWrite<ggl::TransitNode::DefaultVbo>>::~unique_ptr[abi:nn180100](void **a1)
{
  int8x8_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (v2[5])
    {
      unint64_t v4 = v2[2];
      unint64_t v3 = v2[3];
      if (v3 != v4)
      {
        uint64_t v5 = v2[1];
        int v6 = *((unsigned __int8 *)v2 + 32);
        int v7 = *((unsigned __int8 *)v2 + 33);
        if (*v2 && *(unsigned char *)(v5 + 17) != 2) {
          (*(void (**)(void))(*(void *)*v2 + 64))(*v2);
        }
        if (v6) {
          BOOL v8 = v7 == 0;
        }
        else {
          BOOL v8 = 0;
        }
        if (v8)
        {
          unint64_t v10 = *(void *)(v5 + 56);
          unint64_t v9 = *(void *)(v5 + 64);
          if (v9 == v10) {
            unint64_t v10 = *(void *)(v5 + 80) - *(void *)(v5 + 72);
          }
          if (v4 < v10) {
            unint64_t v10 = v4;
          }
          if (v9 <= v3) {
            unint64_t v9 = v3;
          }
          if (v9 == v10) {
            unint64_t v9 = v10 + *(void *)(v5 + 80) - *(void *)(v5 + 72);
          }
          *(void *)(v5 + 56) = v10;
          *(void *)(v5 + 64) = v9;
        }
      }
    }
    MEMORY[0x1A6239270](v2, 0x1070C40C7B7B3AELL);
  }
  return a1;
}

int64_t md::TransitNodeFeaturePool::cloneExternalIcon@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v4 = (char *)operator new(0x120uLL);
  uint64_t v5 = v4;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)unint64_t v4 = &unk_1EF581910;
  int v6 = v4 + 24;
  *((void *)v4 + 3) = &unk_1EF537200;
  *((_OWORD *)v4 + 2) = *(_OWORD *)(v3 + 8);
  *((_DWORD *)v4 + 12) = 1065353216;
  *((_DWORD *)v4 + 13) = *(_DWORD *)(v3 + 28);
  *((_DWORD *)v4 + 14) = *(_DWORD *)(v3 + 32);
  *(void *)(v4 + 60) = *(void *)(v3 + 36);
  *((_DWORD *)v4 + 17) = *(_DWORD *)(v3 + 44);
  *((void *)v4 + 9) = *(void *)(v3 + 48);
  *((void *)v4 + 10) = *(void *)(v3 + 56);
  v4[88] = *(unsigned char *)(v3 + 64);
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)(v3 + 65));
  v4[89] = v7 & 1;
  v4[90] = *(unsigned char *)(v3 + 66);
  *(_WORD *)(v4 + 91) = 0;
  *(_WORD *)(v4 + 93) = *(_WORD *)(v3 + 69);
  *((void *)v4 + 3) = &unk_1EF5444D8;
  uint64_t v8 = *(void *)(v3 + 80);
  *((void *)v4 + 12) = *(void *)(v3 + 72);
  *((void *)v4 + 13) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void *)(v3 + 96);
  *((void *)v4 + 14) = *(void *)(v3 + 88);
  *((void *)v4 + 15) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v4 + 16) = 0;
  *((void *)v4 + 17) = 0;
  *((void *)v4 + 18) = 0;
  uint64_t v10 = *(void *)(v3 + 104);
  uint64_t v11 = *(void *)(v3 + 112);
  int64_t result = v11 - v10;
  if (v11 != v10)
  {
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (result >> 2);
    if (v13 >= 0xCCCCCCCCCCCCCCDLL) {
      abort();
    }
    int64_t result = (int64_t)operator new(result);
    *((void *)v5 + 16) = result;
    *((void *)v5 + 17) = result;
    *((void *)v5 + 18) = result + 20 * v13;
    do
    {
      *(void *)int64_t result = *(void *)v10;
      *(_DWORD *)(result + 8) = *(_DWORD *)(v10 + 8);
      int v14 = *(_DWORD *)(v10 + 12);
      *(unsigned char *)(result + 16) = *(unsigned char *)(v10 + 16);
      *(_DWORD *)(result + 12) = v14;
      result += 20;
      v10 += 20;
    }
    while (v10 != v11);
    *((void *)v5 + 17) = result;
  }
  *((_WORD *)v5 + 116) = *(_WORD *)(v3 + 208);
  *(void *)(v5 + 236) = *(void *)(v3 + 212);
  *(void *)(v5 + 244) = *(void *)(v3 + 220);
  *(void *)(v5 + 252) = *(void *)(v3 + 228);
  *(void *)(v5 + 260) = *(void *)(v3 + 236);
  *((_DWORD *)v5 + 67) = *(_DWORD *)(v3 + 244);
  uint64_t v15 = *(void *)(v3 + 248);
  *((_DWORD *)v5 + 70) = *(_DWORD *)(v3 + 256);
  *((void *)v5 + 34) = v15;
  *((_DWORD *)v5 + 71) = *(_DWORD *)(v3 + 260);
  long long v16 = *(_OWORD *)(v3 + 128);
  long long v17 = *(_OWORD *)(v3 + 144);
  long long v18 = *(_OWORD *)(v3 + 160);
  *(_OWORD *)(v5 + 200) = *(_OWORD *)(v3 + 176);
  *(_OWORD *)(v5 + 184) = v18;
  *(_OWORD *)(v5 + 168) = v17;
  *(_OWORD *)(v5 + 152) = v16;
  *(_OWORD *)(v5 + 216) = *(_OWORD *)(v3 + 192);
  if (!*((void *)v5 + 14)) {
    int64_t result = (*(uint64_t (**)(void))(**((void **)v5 + 12) + 24))(*((void *)v5 + 12));
  }
  *a2 = v6;
  a2[1] = v5;
  return result;
}

void sub_1A27D216C(_Unwind_Exception *a1)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    v1[5].__shared_weak_owners_ = (uint64_t)v4;
    operator delete(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)v1[5].__vftable;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  shared_owners = (std::__shared_weak_count *)v1[4].__shared_owners_;
  if (shared_owners)
  {
    if (!atomic_fetch_add(&shared_owners->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
      std::__shared_weak_count::__release_weak(shared_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v7);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<md::TransitNodeExternalIcon>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::TransitNodeExternalIcon>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581910;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::TransitNodeExternalIcon>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581910;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double md::TransitNodeFeaturePool::externalIconForObject@<D0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X2>, _OWORD *a3@<X8>)
{
  *(_OWORD *)int8x8_t v83 = 0uLL;
  uint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = *(void *)(v6 + 40);
  int8x8_t v8 = *(int8x8_t *)(a1 + 40);
  if (!*(void *)&v8) {
    goto LABEL_21;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = *(void *)(v6 + 40);
    if (v7 >= *(void *)&v8) {
      unint64_t v10 = v7 % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v8 - 1) & v7;
  }
  uint64_t v11 = *(void **)(*(void *)(a1 + 32) + 8 * v10);
  if (!v11 || (uint64_t v12 = (void *)*v11) == 0)
  {
LABEL_21:
    long long v16 = operator new(0x60uLL);
    v16[1] = 0;
    v16[2] = 0;
    void *v16 = &unk_1EF581E50;
    md::TransitNodeFeature::TransitNodeFeature((md::TransitNodeFeature *)(v16 + 3), v7, *(md::LabelExternalObjectsModerator **)(a1 + 24));
    v16[3] = &unk_1EF546E60;
    *((_DWORD *)v16 + 20) = 0;
    long long v17 = *(void **)(a1 + 16);
    v16[11] = v17;
    if (v17) {
      ++*v17;
    }
    uint64_t v81 = (char *)(v16 + 3);
    __int16 v82 = (std::__shared_weak_count *)v16;
    long long v18 = (uint64_t *)(a1 + 72);
    unint64_t v19 = *(void *)(a1 + 80);
    if (v19)
    {
      uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
      v20.i16[0] = vaddlv_u8(v20);
      if (v20.u32[0] > 1uLL)
      {
        unint64_t v3 = v7;
        if (v7 >= v19) {
          unint64_t v3 = v7 % v19;
        }
      }
      else
      {
        unint64_t v3 = (v19 - 1) & v7;
      }
      uint64_t v21 = *(void ***)(*v18 + 8 * v3);
      if (v21)
      {
        unint64_t v22 = *v21;
        if (*v21)
        {
          if (v20.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v24 = v22[1];
              if (v24 == v7)
              {
                if (v22[2] == v7) {
                  goto LABEL_85;
                }
              }
              else if ((v24 & (v19 - 1)) != v3)
              {
                goto LABEL_44;
              }
              unint64_t v22 = (void *)*v22;
              if (!v22) {
                goto LABEL_44;
              }
            }
          }
          do
          {
            unint64_t v23 = v22[1];
            if (v23 == v7)
            {
              if (v22[2] == v7) {
                goto LABEL_85;
              }
            }
            else
            {
              if (v23 >= v19) {
                v23 %= v19;
              }
              if (v23 != v3) {
                break;
              }
            }
            unint64_t v22 = (void *)*v22;
          }
          while (v22);
        }
      }
    }
LABEL_44:
    unint64_t v22 = operator new(0x28uLL);
    uint64_t v25 = (void *)(a1 + 88);
    *(void *)&long long v84 = v22;
    *((void *)&v84 + 1) = a1 + 88;
    void *v22 = 0;
    v22[1] = v7;
    v22[3] = 0;
    v22[4] = 0;
    void v22[2] = v7;
    char v85 = 1;
    float v26 = (float)(unint64_t)(*(void *)(a1 + 96) + 1);
    float v27 = *(float *)(a1 + 104);
    if (!v19 || (float)(v27 * (float)v19) < v26)
    {
      BOOL v28 = 1;
      if (v19 >= 3) {
        BOOL v28 = (v19 & (v19 - 1)) != 0;
      }
      unint64_t v29 = v28 | (2 * v19);
      unint64_t v30 = vcvtps_u32_f32(v26 / v27);
      if (v29 <= v30) {
        size_t prime = v30;
      }
      else {
        size_t prime = v29;
      }
      if (prime == 1)
      {
        size_t prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        size_t prime = std::__next_prime(prime);
        unint64_t v19 = *(void *)(a1 + 80);
      }
      if (prime > v19) {
        goto LABEL_56;
      }
      if (prime < v19)
      {
        unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 96) / *(float *)(a1 + 104));
        if (v19 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v19), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          unint64_t v32 = std::__next_prime(v32);
        }
        else
        {
          uint64_t v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2) {
            unint64_t v32 = v34;
          }
        }
        if (prime <= v32) {
          size_t prime = v32;
        }
        if (prime < v19) {
LABEL_56:
        }
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1 + 72, prime);
      }
      unint64_t v19 = *(void *)(a1 + 80);
      if ((v19 & (v19 - 1)) != 0)
      {
        if (v7 >= v19) {
          unint64_t v3 = v7 % v19;
        }
        else {
          unint64_t v3 = v7;
        }
      }
      else
      {
        unint64_t v3 = (v19 - 1) & v7;
      }
    }
    uint64_t v39 = *v18;
    uint64_t v40 = *(void **)(*v18 + 8 * v3);
    if (v40)
    {
      void *v22 = *v40;
    }
    else
    {
      void *v22 = *v25;
      *uint64_t v25 = v22;
      *(void *)(v39 + 8 * v3) = v25;
      if (!*v22)
      {
LABEL_84:
        ++*(void *)(a1 + 96);
LABEL_85:
        atomic_fetch_add_explicit(v16 + 1, 1uLL, memory_order_relaxed);
        unint64_t v42 = (std::__shared_weak_count *)v22[4];
        v22[3] = v16 + 3;
        v22[4] = v16;
        if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
        uint64_t v43 = (char *)operator new(0x120uLL);
        *(_OWORD *)(v43 + 8) = 0u;
        *(void *)uint64_t v43 = &unk_1EF581910;
        long long v84 = 0u;
        uint64_t v44 = md::TransitNodeExternalIcon::TransitNodeExternalIcon((uint64_t)(v43 + 24), &v81, (uint64_t *)&v84);
        uint64_t v45 = *(std::__shared_weak_count **)&v83[1];
        *(void *)&v83[0] = v44;
        *(void *)&v83[1] = v43;
        if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
        double v46 = v83[0];
        uint64_t v47 = *(void *)(a1 + 120);
        int v48 = *(char *)(*((void *)a2 + 1) + 320);
        *(unsigned char *)(*(void *)&v83[0] + 260) = *(unsigned char *)(*((void *)a2 + 1) + 320);
        *(unsigned char *)(*(void *)&v46 + 70) = 1;
        *(_DWORD *)(*(void *)&v46 + 244) = *((_DWORD *)a2 + 8);
        uint64_t v49 = md::TransitNodeTextureAtlas::infoForIcon(v47, v48, a2[1], *a2, 0);
        if (v49)
        {
          md::TransitNodeExternalIcon::setDotTextureRect(*(float32x4_t **)&v46, (__int8 *)v49, v49 + 8, (float *)(v49 + 24));
          uint64_t v50 = *(unsigned char **)(*(void *)&v46 + 104);
          unint64_t v51 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(*(void *)&v46 + 112) - (void)v50) >> 2);
          if (*(unsigned char **)(*(void *)&v46 + 112) == v50)
          {
            std::vector<md::TransitNodeExternalIcon::DotInfo>::__append((char **)(*(void *)&v46 + 104), 1 - v51);
            uint64_t v50 = *(unsigned char **)(*(void *)&v46 + 104);
          }
          else if (v51 >= 2)
          {
            *(void *)(*(void *)&v46 + 112) = v50 + 20;
          }
          if ((_BYTE)v48) {
            char v54 = -1;
          }
          else {
            char v54 = 54;
          }
          v50[8] = v54;
          v50[9] = v54;
          v50[10] = v54;
          v50[11] = -1;
          if (*(unsigned char *)(*(void *)&v46 + 260) == 2)
          {
            float v55 = (float)(*(_DWORD *)(*(void *)&v46 + 248) + *(_DWORD *)(*(void *)&v46 + 252) / 2);
          }
          else
          {
            uint64_t v56 = *(void *)(*(void *)&v46 + 104);
            uint64_t v57 = *(void *)(*(void *)&v46 + 112);
            if (v56 != v57)
            {
              unint64_t v58 = v57 - v56 - 20;
              if (v58 >= 0xA0)
              {
                unint64_t v61 = v58 / 0x14 + 1;
                uint64_t v62 = v61 & 7;
                if ((v61 & 7) == 0) {
                  uint64_t v62 = 8;
                }
                unint64_t v63 = v61 - v62;
                uint64_t v64 = 20 * v63;
                float32x4_t v65 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
                uint64_t v66 = (__int32 *)(v56 + 92);
                v67.i64[0] = 0x80000000800000;
                v67.i64[1] = 0x80000000800000;
                float32x4_t v68 = v65;
                v69.i64[0] = 0x80000000800000;
                v69.i64[1] = 0x80000000800000;
                do
                {
                  uint64_t v70 = v66 + 5;
                  unint64_t v71 = v66 + 10;
                  v72.i32[0] = *(v66 - 20);
                  v72.i32[1] = *(v66 - 15);
                  unint64_t v73 = v66 + 15;
                  v72.i32[2] = *(v66 - 10);
                  v72.i32[3] = *(v66 - 5);
                  __int32 v74 = *v66;
                  v66 += 40;
                  v75.i32[0] = v74;
                  v75.i32[1] = *v70;
                  v75.i32[2] = *v71;
                  v75.i32[3] = *v73;
                  float32x4_t v67 = vmaxnmq_f32(v67, v72);
                  float32x4_t v69 = vmaxnmq_f32(v69, v75);
                  float32x4_t v65 = vminnmq_f32(v72, v65);
                  float32x4_t v68 = vminnmq_f32(v75, v68);
                  v63 -= 8;
                }
                while (v63);
                v56 += v64;
                float v59 = vmaxnmvq_f32(vmaxnmq_f32(v67, v69));
                float v60 = vminnmvq_f32(vminnmq_f32(v65, v68));
              }
              else
              {
                float v59 = -3.4028e38;
                float v60 = 3.4028e38;
              }
              do
              {
                float v76 = *(float *)(v56 + 12);
                float v59 = fmaxf(v59, v76);
                float v60 = fminf(v76, v60);
                v56 += 20;
              }
              while (v56 != v57);
              float v77 = (float)(v60 + v59) * 0.5;
              int v78 = *(_DWORD *)(*(void *)&v46 + 256);
              *(float32x2_t *)(*(void *)&v46 + 48) = vmul_n_f32(*(float32x2_t *)(*(void *)&v46 + 220), v77);
              *(unsigned char *)(*(void *)&v46 + 64) = 1;
              *(float *)(*(void *)&v46 + 44) = (float)(v59 - v77) + (float)(v78 / 2);
              unint64_t v53 = v82;
              if (!v82) {
                goto LABEL_120;
              }
              goto LABEL_111;
            }
            float v55 = (float)(*(_DWORD *)(*(void *)&v46 + 256) / 2);
            *(void *)(*(void *)&v46 + 48) = 0;
          }
          *(unsigned char *)(*(void *)&v46 + 64) = 1;
          *(float *)(*(void *)&v46 + 44) = v55;
        }
        else
        {
          int v52 = *(std::__shared_weak_count **)&v83[1];
          *(_OWORD *)int8x8_t v83 = 0uLL;
          if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
            unint64_t v53 = v82;
            if (v82) {
              goto LABEL_111;
            }
            goto LABEL_120;
          }
        }
        unint64_t v53 = v82;
        if (v82)
        {
LABEL_111:
          if (!atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
LABEL_120:
        uint64_t v38 = a3;
        goto LABEL_121;
      }
      unint64_t v41 = *(void *)(*v22 + 8);
      if ((v19 & (v19 - 1)) != 0)
      {
        if (v41 >= v19) {
          v41 %= v19;
        }
      }
      else
      {
        v41 &= v19 - 1;
      }
      uint64_t v40 = (void *)(*v18 + 8 * v41);
    }
    *uint64_t v40 = v22;
    goto LABEL_84;
  }
  if (v9.u32[0] < 2uLL)
  {
    uint64_t v13 = *(void *)&v8 - 1;
    while (1)
    {
      uint64_t v15 = v12[1];
      if (v15 == v7)
      {
        if (v12[2] == v7) {
          goto LABEL_63;
        }
      }
      else if ((v15 & v13) != v10)
      {
        goto LABEL_21;
      }
      uint64_t v12 = (void *)*v12;
      if (!v12) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v14 = v12[1];
    if (v14 == v7) {
      break;
    }
    if (v14 >= *(void *)&v8) {
      v14 %= *(void *)&v8;
    }
    if (v14 != v10) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v12 = (void *)*v12;
    if (!v12) {
      goto LABEL_21;
    }
  }
  if (v12[2] != v7) {
    goto LABEL_11;
  }
LABEL_63:
  uint64_t v35 = *(void *)(v12[3] + 40);
  int8x8_t v36 = (std::__shared_weak_count *)operator new(0x120uLL);
  v36->__shared_owners_ = 0;
  v36->__shared_weak_owners_ = 0;
  v36->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581910;
  md::TransitNodeExternalIcon::TransitNodeExternalIcon((uint64_t)&v36[1], v12 + 3, (uint64_t *)(v35 - 16));
  *(void *)&v83[0] = &v36[1];
  *(void *)&v83[1] = v36;
  char v37 = (*(uint64_t (**)(void, std::__shared_weak_count *, unsigned __int8 *, void))(**(void **)(v35 - 16)
                                                                                                 + 32))(*(void *)(v35 - 16), v36 + 1, a2, *(void *)(a1 + 120));
  uint64_t v38 = a3;
  if ((v37 & 1) == 0)
  {
    *(_OWORD *)int8x8_t v83 = 0uLL;
    if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
LABEL_121:
  double result = v83[0];
  *uint64_t v38 = *(_OWORD *)v83;
  return result;
}

void sub_1A27D2BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<md::MapTileData>::~shared_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<md::TransitNodeMissingFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::TransitNodeMissingFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581E50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::TransitNodeMissingFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF581E50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'ggl::VertexDataTyped<ggl::TransitNode::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(void *)(a1 - 200) = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 - 72));
  uint64_t v2 = *(void *)(a1 - 128);
  if (v2)
  {
    *(void *)(a1 - 120) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 - 104) + 40))(*(void *)(a1 - 104), v2, *(void *)(a1 - 112) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 - 168);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ggl::VertexDataTyped<ggl::TransitNode::DefaultVbo>::~VertexDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TransitNode::DefaultVbo>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TransitNode::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584700;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::VertexDataTyped<ggl::TransitNode::DefaultVbo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF584700;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::TransitNodeRGB::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::TransitNodeRGB::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583EB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::TransitNodeRGB::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF583EB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<ggl::TransitNodeColorized::BasePipelineState>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::TransitNodeColorized::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588478;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::TransitNodeColorized::BasePipelineState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF588478;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ggl::ConstantDataTyped<ggl::TransitNode::Settings>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1A6239270);
}

uint64_t ggl::ConstantDataTyped<ggl::TransitNode::Settings>::~ConstantDataTyped(uint64_t a1)
{
  *(void *)a1 = &unk_1EF55A1F0;
  std::mutex::~mutex((std::mutex *)(a1 + 128));
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), v2, *(void *)(a1 + 88) - v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitNode::Settings>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitNode::Settings>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585C38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<ggl::ConstantDataTyped<ggl::TransitNode::Settings>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF585C38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void md::TransitNodeFeaturePool::~TransitNodeFeaturePool(md::TransitNodeFeaturePool *this)
{
  uint64_t v2 = *((void *)this + 2);
  *(void *)(*((void *)this + 3) + 32) = 0;
  unint64_t v3 = (void *)(v2 + 8);
  if (!v2) {
    unint64_t v3 = 0;
  }
  void *v3 = 0;
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  *((void *)this + 34) = &unk_1EF559798;

  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 30);
    if (!v6) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 30);
    if (!v6) {
      goto LABEL_12;
    }
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_12:
  uint64_t v7 = *((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 27);
  *((void *)this + 27) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint8x8_t v9 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = *((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  long long v18 = (md::TransitNodeTextureAtlas *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v18)
  {
    md::TransitNodeTextureAtlas::~TransitNodeTextureAtlas(v18);
    MEMORY[0x1A6239270]();
  }
  unint64_t v19 = (md::TransitNodeTextureAtlas *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v19)
  {
    md::TransitNodeTextureAtlas::~TransitNodeTextureAtlas(v19);
    MEMORY[0x1A6239270]();
  }
  uint64_t v20 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = (void *)*((void *)this + 11);
  while (v21)
  {
    unint64_t v22 = v21;
    uint64_t v21 = (void *)*v21;
    unint64_t v23 = (std::__shared_weak_count *)v22[4];
    if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    operator delete(v22);
  }
  uint64_t v24 = (void *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v24) {
    operator delete(v24);
  }
  uint64_t v25 = (void *)*((void *)this + 6);
  while (v25)
  {
    float v26 = v25;
    uint64_t v25 = (void *)*v25;
    float v27 = (std::__shared_weak_count *)v26[4];
    if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    operator delete(v26);
  }
  BOOL v28 = (void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v28) {
    operator delete(v28);
  }
  unint64_t v29 = (void *)*((void *)this + 2);
  if (v29)
  {
    if ((*v29)-- == 1)
    {
      operator delete(v29);
      *((void *)this + 2) = 0;
    }
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<md::TransitNodeFeature>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint8x8_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  uint64_t v13 = (void *)(a1 + 16);
  uint64_t v10 = operator new(0x28uLL);
  *uint64_t v10 = 0;
  v10[1] = v5;
  uint64_t v14 = *a3;
  void v10[3] = 0;
  v10[4] = 0;
  void v10[2] = v14;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    unint64_t v5 = v3;
  }
  else
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_35;
    }
    if (prime < v7)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < v7) {
LABEL_35:
      }
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5) {
        v5 %= v7;
      }
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v5);
  if (v25)
  {
    *uint64_t v10 = *v25;
LABEL_58:
    *uint64_t v25 = v10;
    goto LABEL_59;
  }
  *uint64_t v10 = *v13;
  void *v13 = v10;
  *(void *)(v24 + 8 * v5) = v13;
  if (*v10)
  {
    unint64_t v26 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7) {
        v26 %= v7;
      }
    }
    else
    {
      v26 &= v7 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1A27D3B5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<md::LabelIdentifier,std::shared_ptr<md::HighPrecisionAltitudeRequest>>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<md::TransitNodeFeature>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::TransitNodeFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5809C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::TransitNodeFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5809C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL md::ElevatedStrokeLayerDataSource::shouldFilterFeature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(unsigned char *)(a3 + 127) == 1;
}

uint64_t std::__shared_ptr_emplace<md::ElevatedStrokeTileData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<md::ElevatedStrokeTileData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5814E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A6239270);
}

void std::__shared_ptr_emplace<md::ElevatedStrokeTileData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF5814E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__split_buffer<md::ElevatedStrokeGroup>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 160;
    md::ElevatedStrokeGroup::~ElevatedStrokeGroup((md::ElevatedStrokeGroup *)(i - 160));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<gss::FeatureAttributeSet,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gss::FeatureAttributeSet,unsigned long>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void *)(v2 + 16);
      if (v3)
      {
        *(void *)(v2 + 24) = v3;
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v2 + 40) + 40))(*(void *)(v2 + 40), v3, *(void *)(v2 + 32) - v3);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void md::ElevatedStrokeLayerDataSource::~ElevatedStrokeLayerDataSource(md::ElevatedStrokeLayerDataSource *this)
{
  md::ElevatedStrokeLayerDataSource::~ElevatedStrokeLayerDataSource(this);
  JUMPOUT(0x1A6239270);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EF54B320;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 100);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 98);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 98);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  *((void *)this + 94) = &unk_1EF559798;

  md::SingleGEOResourceLayerDataSource::~SingleGEOResourceLayerDataSource(this);
}

void md::overlayComponents::VectorOverlay::drapingStyle(md::overlayComponents::VectorOverlay *this, const md::LayoutContext *a2, float a3, float a4, const md::LayoutContext *a5)
{
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 12) = 0;
  *((unsigned char *)this + 20) = 0;
  *((unsigned char *)this + 24) = 0;
  uint64_t v7 = *((void *)a2 + 9);
  if (v7)
  {
    uint8x8_t v9 = (std::__shared_weak_count *)*((void *)a2 + 10);
    *(void *)&v53[0] = v7;
    *((void *)&v53[0] + 1) = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    gss::QueryableLocker<gss::PropertyID>::QueryableLocker(v57, v7, (uint64_t)v9);
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (!v58) {
        goto LABEL_83;
      }
    }
    else if (!v58)
    {
      goto LABEL_83;
    }
    uint64_t v10 = *(void *)(v57[0] + 24);
    if ((int)a4 >= 0x17) {
      unsigned int v11 = 23;
    }
    else {
      unsigned int v11 = (int)a4;
    }
    uint64_t v12 = *(float **)v10;
    if (*(void *)v10
      && (float v13 = *v12, LODWORD(v12) = *v12 == 1.0, *(unsigned char *)(v10 + 10))
      && (v13 != 0.0 ? (BOOL v14 = v13 == 1.0) : (BOOL v14 = 1), !v14)
      || (int v15 = *(unsigned __int8 *)(v10 + v12 + 11), v13 = 0.0, v15 == 2))
    {
      LOBYTE(v53[0]) = 1;
      char v70 = 1;
      char v16 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v10, 0x5Bu, v11, 0, v53);
      char v17 = *(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>((unsigned __int16 *)v10, 0x5Bu, v11, 1, &v70);
      if (v13 < 1.0) {
        char v17 = v16;
      }
      if (!v17) {
        goto LABEL_83;
      }
LABEL_28:
      uint64_t v22 = *(void *)(v57[0] + 24);
      uint64_t v23 = *(float **)v22;
      if (*(void *)v22
        && (float v24 = *v23, LODWORD(v23) = *v23 == 1.0, *(unsigned char *)(v22 + 10))
        && (v24 != 0.0 ? (BOOL v25 = v24 == 1.0) : (BOOL v25 = 1), !v25)
        || (v26 = *(unsigned __int8 *)(v22 + v23 + 11), float v24 = 0.0, v26 == 2))
      {
        LOBYTE(v53[0]) = 1;
        char v70 = 1;
        int v27 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v22, 0x13Fu, v11, 0, v53);
        int v28 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v22, 0x13Fu, v11, 1u, &v70);
        if (v24 >= 1.0) {
          LOBYTE(v27) = v28;
        }
      }
      else
      {
        int v27 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(v57[0] + 24), 0x13Fu, v11, v26, 0);
      }
      uint64_t v29 = *(void *)(v57[0] + 24);
      unint64_t v30 = *(float **)v29;
      if (*(void *)v29
        && (float v31 = *v30, LODWORD(v30) = *v30 == 1.0, *(unsigned char *)(v29 + 10))
        && (v31 != 0.0 ? (BOOL v32 = v31 == 1.0) : (BOOL v32 = 1), !v32)
        || (v33 = *(unsigned __int8 *)(v29 + v30 + 11), float v31 = 0.0, v33 == 2))
      {
        LOBYTE(v53[0]) = 1;
        char v70 = 1;
        float v34 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v29, 0x61u, v11, 0, v53);
        float v35 = v34
            + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v29, 0x61u, v11, 1u, &v70)- v34)* v31);
        if (v35 <= 0.0) {
          goto LABEL_58;
        }
      }
      else
      {
        float v35 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v57[0] + 24), 0x61u, v11, v33, 0);
        if (v35 <= 0.0) {
          goto LABEL_58;
        }
      }
      if (v27 == 2)
      {
        float32x2_t v36 = (float32x2_t)0x3F0000003F000000;
      }
      else if (v27 == 1)
      {
        float32x2_t v36 = (float32x2_t)1065353216;
      }
      else
      {
        float32x2_t v36 = (float32x2_t)0x3F80000000000000;
      }
      float32x2_t v37 = vmul_n_f32(v36, v35);
      if (!*((unsigned char *)this + 8)) {
        *((unsigned char *)this + 8) = 1;
      }
      *(float32x2_t *)this = v37;
LABEL_58:
      uint64_t v38 = *(void *)(v57[0] + 24);
      uint64_t v39 = *(float **)v38;
      if (*(void *)v38 && (float v40 = *v39, LODWORD(v39) = *v39 == 1.0, *(unsigned char *)(v38 + 10)) && v40 != 0.0 && v40 != 1.0
        || (v41 = *(unsigned __int8 *)(v38 + v39 + 11), float v40 = 0.0, v41 == 2))
      {
        LOBYTE(v53[0]) = 1;
        char v70 = 1;
        int v42 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v38, 0x198u, v11, 0, v53);
        int v43 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(v38, 0x198u, v11, 1u, &v70);
        if (v40 >= 1.0) {
          LOBYTE(v42) = v43;
        }
      }
      else
      {
        int v42 = *gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<unsigned int>(*(void *)(v57[0] + 24), 0x198u, v11, v41, 0);
      }
      uint64_t v44 = *(void *)(v57[0] + 24);
      uint64_t v45 = *(float **)v44;
      if (*(void *)v44 && (float v46 = *v45, LODWORD(v45) = *v45 == 1.0, *(unsigned char *)(v44 + 10)) && v46 != 0.0 && v46 != 1.0
        || (v47 = *(unsigned __int8 *)(v44 + v45 + 11), float v46 = 0.0, v47 == 2))
      {
        LOBYTE(v53[0]) = 1;
        char v70 = 1;
        float v48 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v44, 0x194u, v11, 0, v53);
        float v49 = v48
            + (float)((float)(*(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(v44, 0x194u, v11, 1u, &v70)- v48)* v46);
        if (v49 <= 0.0) {
          goto LABEL_82;
        }
      }
      else
      {
        float v49 = *(float *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<float>(*(void *)(v57[0] + 24), 0x194u, v11, v47, 0);
        if (v49 <= 0.0)
        {
LABEL_82:
          gss::RenderStyle<gss::PropertyID>::valueForKeyAtZ<geo::Color<unsigned short,4,(geo::ColorSpace)0>>((unint64_t *)v53, *(void *)(v57[0] + 24), 0x5Cu, v11, 2u, 0);
          LOWORD(v52) = WORD3(v53[0]);
          *((unsigned char *)this + 24) = (float)((float)v52 * 0.000015259) >= 0.0039062;
          goto LABEL_83;
        }
      }
      if (v42 == 2)
      {
        float32x2_t v50 = (float32x2_t)0x3F0000003F000000;
      }
      else if (v42 == 1)
      {
        float32x2_t v50 = (float32x2_t)1065353216;
      }
      else
      {
        float32x2_t v50 = (float32x2_t)0x3F80000000000000;
      }
      float32x2_t v51 = vmul_n_f32(v50, v49);
      if (!*((unsigned char *)this + 20)) {
        *((unsigned char *)this + 20) = 1;
      }
      *(float32x2_t *)((char *)this + 12) = v51;
      goto LABEL_82;
    }
    if (*(unsigned char *)gss::RenderStyle<gss::PropertyID>::styleValueForKeyAtZ<BOOL>(*(unsigned __int16 **)(v57[0] + 24), 0x5Bu, v11, v15, 0))goto LABEL_28; {
LABEL_83:
    }
    gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)v57);
    return;
  }
  md::RibbonLayoutContext::RibbonLayoutContext((md::RibbonLayoutContext *)v57, a5);
  uint64_t v60 = 0;
  int v61 = 1065353216;
  char v62 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v63 = 0;
  char v64 = 0;
  __int16 v67 = 255;
  int v68 = 0;
  int v69 = 0;
  float v59 = a3;
  v53[0] = xmmword_1A28FD2A0;
  v53[1] = xmmword_1A28FD460;
  __int16 v54 = 256;
  uint64_t v55 = 0x3F800000BF800000;
  int v56 = 0;
  md::PolylineOverlayStyle::updateFromOverlay(*((void *)a2 + 7), (uint64_t)v57, (uint64_t)v53);
  float v19 = *((float *)v53 + 1) * 0.5;
  *((unsigned char *)this + 8) = 1;
  *(float *)this = v19;
  *((float *)this + 1) = v19;
  uint64_t v20 = *((void *)a2 + 5);
  os_unfair_lock_lock((os_unfair_lock_t)(v20 + 24));
  os_unfair_lock_unlock((os_unfair_lock_t)(v20 + 24));
  *((unsigned char *)this + 24) = *(float *)(v20 + 12) >= 0.0039062;
  unint64_t v21 = v66;
  if (v66 && !atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
}

void sub_1A27D4568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  gss::QueryableLocker<gss::PropertyID>::~QueryableLocker((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t md::ShieldIconLabelPart::clone(md::ShieldIconLabelPart *this)
{
  {
    operator new();
  }
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)mdm::Allocator::instance(void)::alloc + 16))(mdm::Allocator::instance(void)::alloc, 800, 8);
  md::LabelPart::LabelPart((md::LabelPart *)v2, this);
  *(void *)uint64_t v2 = &unk_1EF533B00;
  long long v3 = *(_OWORD *)((char *)this + 572);
  *(void *)(v2 + 588) = *(void *)((char *)this + 588);
  *(_OWORD *)(v2 + 572) = v3;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v2 + 596) = _Q0;
  *(_DWORD *)(v2 + 612) = 1065353216;
  *(_WORD *)(v2 + 616) = 256;
  *(unsigned char *)(v2 + 618) = 0;
  *(_DWORD *)(v2 + 620) = *((_DWORD *)this + 155);
  *(_DWORD *)(v2 + 624) = 0;
  *(unsigned char *)(v2 + 628) = *((unsigned char *)this + 628);
  *(_DWORD *)(v2 + 629) = 16777217;
  *(unsigned char *)(v2 + 633) = 0;
  *(void *)uint64_t v2 = &unk_1EF531FD8;
  *(void *)(v2 + 640) = *((void *)this + 80);
  uint64_t v9 = *((void *)this + 81);
  *(void *)(v2 + 648) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  long long v10 = *((_OWORD *)this + 41);
  long long v11 = *((_OWORD *)this + 42);
  *(void *)(v2 + 688) = *((void *)this + 86);
  *(_OWORD *)(v2 + 656) = v10;
  *(_OWORD *)(v2 + 672) = v11;
  *(_OWORD *)(v2 + 728) = 0u;
  *(_DWORD *)(v2 + 744) = 1065353216;
  *(_WORD *)(v2 + 764) = 0;
  *(void *)(v2 + 748) = 0;
  *(unsigned char *)(v2 + 756) = 0;
  long long v12 = *(_OWORD *)((char *)this + 712);
  *(_OWORD *)(v2 + 696) = *(_OWORD *)((char *)this + 696);
  *(_OWORD *)(v2 + 712) = v12;
  *(void *)uint64_t v2 = &unk_1EF53C2E0;
  *(void *)(v2 + 768) = *((void *)this + 96);
  uint64_t v13 = *((void *)this + 97);
  *(void *)(v2 + 776) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(v2 + 784) = *((unsigned char *)this + 784);
  *(void *)(v2 + 788) = *(void *)((char *)this + 788);
  return v2;
}